---
sk-SK:
  data:
    long_instructions:
      2-3 Artist 1 new: Hi, I'm an artist. You can write code to make me draw almost
        anything. Use a few blocks to make me draw over the grey lines in the picture.
        (Each line is 100 pixels long)
      2-3 Artist 11: 'Give the stop sign a border by making an octagon with 100 pixels
        sides. '
      2-3 Artist 12: "Create a circle to finish the eyeball! \n\nIf the artist turns
        1 degree with each loop, how many times do you need to repeat the code to
        draw a circle? "
      2-3 Artist 2 new: This house has a half-finished wall. Each side is 100, but
        the half-finished wall is only 50. Complete the wall.
      2-3 Artist 3.4: Blok so skokom posunie umelca bez toho, aby niečo nakreslil.
        Nakresli prerušovanú čiaru použitím blokov "skoč dopredu" a "posuň sa dopredu".
        Každá čiara má dĺžku 50 pixelov.
      2-3 Artist 3new: "The red hat is 100 pixels tall. Finish drawing a black hat
        that is 70 pixels shorter. \n\n_(Note: The width of each hat is 50 pixels.)_"
      2-3 Artist 4: Pomôž mi dokončiť tento dom pre mačku.
      2-3 Artist 6: "This house needs a roof! Draw the triangle.  \n\nHint: all three
        sides are the same length.\n\n<img src=\"https://images.code.org/8b10073fd1a7fe53b4da33ec2229894b-image-1468018903891.gif\"
        width=\"300\"/>"
      2-3 Artist 7: "Finish drawing the last set of windows on the school so that
        everyone in class can see outside. \n\nThe sides of each square window pane
        are 25 pixels long. "
      2-3 Artist 8: "Time to build a barn!\n\nMake the rooms for each animal by splitting
        the barn into 2 equal-sized squares. \n\nHint: The rectangle is 200 pixels
        wide and 100 pixels tall.\n\nThere are many different ways to solve this puzzle."
      2-3 Artist 9 NEW: Dokonči tohto šarkana
      2-3 Artist Assessment 1: "**Assessment:** Finish drawing the last tooth. It
        is 25 pixels wide and 25 pixels tall."
      2-3 Artist Debugging 1: |-
        Tento klobúk by mal byť len 50 pixelov široký. Dokážeš to opraviť?

        <br/>
      2-3 Artist Debugging 10: |-
        Plocha na ovládanie smeru na mojom hernom ovládači je príliš úzka.

        Môžete ju rozšíriť o 10 pixelov?

        Skúste najprv spustiť kód, aby ste videli, čo je pokazené.
      2-3 Artist Debugging 11: |-
        Moja snehová vločka sa rozpadá!

        Zistíš, čo je zle?
      2-3 Artist Debugging 2: |-
        Tento kód pre mačacie fúzy je zlý.

        Opravte tento kód, aby sa všetky fúzy nakreslili v rovnakej dĺžke.
      2-3 Artist Debugging 3: "Moja loď je deravá! \n\nČo potrebujete pre jej opravu?"
      2-3 Artist Debugging 5: |-
        Kód, ktorý máme na nohu a chodidlo je zlý.

        Viete ho opraviť?
      2-3 Artist Debugging 6: |-
        Vyzerá, že sedím na stoličke, ktorej chýba noha!

        Upravte kód tak, aby sa dokreslila aj posledná noha.
      2-3 Artist Debugging 7: |-
        Vyzerá, že C v kóde je nakreslené naopak!

        Viete to opraviť, aby to znova vyzeralo ako C?
      2-3 Artist Debugging 8: |-
        Môj učiteľ hovorí, že by som mal dokončiť to, čo som začal!

        Pomôže mi dokončiť môj veterník. Viete zistiť, čo je zlé?
      2-3 Artist Debugging 9: |-
        Niečo nie je v poriadku!

        Kód pre túto stonku je zlý. Viete zistiť, ak odostať umelca pre nasledovanie stonky správnym spôsobom?
      2-3 Artist Debugging Assessment 1: "**Assessment:** \nWhy does this square end
        up being 75 pixels too small on each side?  \n\nWhere does the code go wrong?"
      2-3 Artist Free Play: Voľné hranie! Možete si nakresliť čokoľvek.
      2-3 Artist Functions 1: "\"Ja zombie umelec. Ja ľúbiť kreslenie!\" \n\nPomôž
        zombíkovi nakresliť štvorcové okuliare. \n\nMostík medzi sklami je o 25 pixelov
        kratší ako šírka štvorcov, ktoré majú šírku 100 pixelov."
      2-3 Artist Functions 10: "**Voľná hra:** Tu sú dve funkcie, jedna na nakreslenie
        veľkého a jedna na nakreslenie malého kolesa. \n\nNakresli s nimi vnútro tohoto
        stroja!"
      2-3 Artist Functions 11: |-
        Premenovali sme funkciu `nakresli štvorec` na `nakresli šesťuholník`, ale stále sa kreslia štvorce! Vieš funkciu `nakresli šesťuholník` upravifunkciafunkciať tak, aby nakreslila šesťuholník so stranou 50 pixelov?

        Nakresli obrázok použitím novej funkcie!
      2-3 Artist Functions 11.5: "Tu je rovnaká funkcia \"nakresli šesťuholník\".
        \n\nČo sa stane, ak zopakujete hlavný program 6 krát, pričom po každom zopakovaní
        sa otočíte o 60 stupňov?"
      2-3 Artist Functions 12: "Functions are really great for drawing complex things
        multiple times. \n\nCan you use the `draw a flower` function to fill the rest
        of the planter box?\nThe plants are all 100 pixels apart."
      2-3 Artist Functions 2: "Funkcie vám umožnia definovať nové bloky! \n\nPresunuli
        sme bloky potrebné na nakreslenie štvorca do funkcie \"nakresli štvorec\".
        Tentokrát použite funkciu \"nakresli štvorec\" pre nakreslenie okuliarí.\n\nŠtvorce
        sú od seba vzdialené 75 pixelov."
      2-3 Artist Functions 3: |-
        Uprav funkciu tak, aby Umelec nakreslil väčšie okuliare s rámami dlhými 115 pixelov na každej strane.

        Štvorce sú od seba vzdialené 45 pixelov.
      2-3 Artist Functions 4: Teraz vlož funkciu do cyklu, aby si nakreslil tri štvorce.
      2-3 Artist Functions 9: "**Freeplay:** Here is a snowflake function. Experiment
        with it to create a winter scene! \n\nThis is a free play level, so there
        is no puzzle to solve. Have fun!"
      2-3 Artist Loops New 1: |-
        Let's draw this robot's head! Can you make a square with sides that are 100 pixels?

        <br/>
      2-3 Artist Loops New 10: A teraz pripojme niekoľko Véčiek spolu do slučky.
      2-3 Artist Loops New 11: "Time to make something snazzy! \n\nRebuild the code
        from the last puzzle, but this time, add a left turn of 30 degrees inside
        the loop. Now, repeat it 24 times instead of 8."
      2-3 Artist Loops New 12: 'Draw a diamond with sides of 100 pixels. '
      2-3 Artist Loops New 13: "Začneme s časťou kódu (v šedom), s ktorým vytvoríme
        jeden kosoštvorec. \n\nZopakuj šedý kód viackrát a vytvor zábavný vzor!"
      2-3 Artist Loops New 14: "Play around with the code for the diamond and see
        what other patterns you can make. \n\nTry changing how many degrees you turn
        and how many times you loop."
      2-3 Artist Loops New 15: |-
        Now, draw anything you like!
        <br/><br/>
      2-3 Artist Loops New 2: |-
        Tu je rovnaká úloha ako sme práve vyriešili. Tento krát však môžeš použiť len jeden blok "posuň sa dopredu" a jeden blok "otoč sa".

        Pre vyriešenie úlohy použi aj blok "opakuj".
      2-3 Artist Loops New 9: Nakresli jednoduchý tvar V, ktorý má obe strany dlhé
        50 pixelov a dokonči šípku.
      2-3 Artist Nested Loops 1: |-
        You've used loops to draw shapes before, but now we're going to put loops inside of other loops!

        Put a `repeat` block around this whole stack of code to draw the pattern.

        <br/>
      2-3 Artist Nested Loops 10: Opakuj tento kód 12 krát na dokončenie vzoru.
      2-3 Artist Nested Loops 11: Loop this code 4 times to complete the pattern,
        turn 90 degrees after each circle.
      2-3 Artist Nested Loops 12: Opakuj tento kód 12 krát na dokončenie kučery.
      2-3 Artist Nested Loops 2: "Now loop the triangle 6 times. \n\nAfter each triangle,
        you'll need to turn 60 degrees before drawing the next."
      2-3 Artist Nested Loops 3: "You'll need to loop your triangle 12 times to draw
        this pattern. \n\nDivide the number of degrees in a circle (360) by the number
        of shapes you're drawing (12) to figure out how far to turn after each shape."
      2-3 Artist Nested Loops 4: |-
        Loop this diamond 12 times to draw a flower!

        Note: We'll use the same angle to loop 12 diamonds as we did for 12 triangles.\
        How much do you need to turn after each shape?
      2-3 Artist Nested Loops 5: "Vyplň okná tejto budovy vnorenými cyklami. \n\nOkná
        sú dlhé 20 pixelov a umiestnené 20 pixelov od seba."
      2-3 Artist Nested Loops 6: "This dinosaur has 8 spikes running up its tail.\n\nEach
        spike is 30 pixels long. \n\nLoop the triangle 8 times, but make sure to jump
        forward after each one!"
      2-3 Artist Nested Loops 7: "Opakuj tento trojuholník 10 krát aby si nakreslil
        slnko. \n\nBudeš sa musieť presunúť a otočiť po každom trojuholníku. \n\nO
        koľko sa musíš otočiť zistíš vydelením počtu stupňov v kruhu počtom tvarov,
        ktoré ho tvoria."
      2-3 Artist Nested Loops 8: "Teraz do nášho obrazu pridajme nejakú trávu. \n\nZväzky
        trávy sú umiestnené 50 pixelov od seba."
      2-3 Artist Nested Loops 9: "Dokončime tento obrázok pridaním kvetu. \n\nOpakuj
        kosoštvorec 12 krát aby si nakreslil svoj kvet."
      2-3 Artist Nested Loops Free Play: Máš voľné ruky, nakresli niečo zaujímavé
        s vnorenými cyklami.
      2-3 Bee Conditionals 11: "I wonder what's out there!\n\nHelp me fly around the
        yard and collect nectar only from the flowers that have some. "
      2-3 Bee Conditionals 13: |-
        There's a lot happening here!

        Use what you've learned to collect all of the nectar and then make the honey.
      2-3 Bee Conditionals 14: |-
        Let's put everything together!

        Use what you've learned to help me collect nectar only from flowers that have it, using as few blocks as possible.

        Don't forget to make honey at the end.
      2-3 Bee Conditionals 15: "This stair step pattern should look familiar.  \n\nCan
        you collect nectar only from the flowers that have some, using as few blocks
        as possible?"
      2-3 Bee Conditionals 2: "I'm a hungry bee! \n\nHelp me collect all of the nectar
        from the flowers using the fewest number of blocks."
      2-3 Bee Conditionals 3: "Look at all of that nectar!\n\nHelp me collect the
        nectar and make the honey using as few blocks as you can.  "
      2-3 Bee Conditionals 5: "These magic purple flowers change!\n\nEach time you
        try the puzzle, purple flowers can have either 1 nectar or none at all...but
        you won't know the number until you run the code! \n\nBe careful not to collect
        nectar from a purple flower if it doesn't have any. \nYou must first check
        if the nectar is equal to 1 using the `if nectar` block."
      2-3 Bee Conditionals Assessment 1: |-
        **Assessment:** Collect all of the nectar.\
        Be careful not to try to collect nectar from a purple flower if it doesn't have any.
      2-3 Bee Debugging 1: |-
        These blocks are really bugging me!

        Fix the error(s) to collect all of the nectar.
      2-3 Bee Debugging 10: |-
        Z tejto úlohy sa mi točí hlava!

        Oprav chyby a pozbieraj všetok nektár a vyrob všetok med.
      2-3 Bee Debugging 2: |-
        Can you find the problem here?

        Fix the error(s) to collect all of the nectar.
      2-3 Bee Debugging 3: |-
        Ooh, this one stings!

        Fix the error(s) to collect all of the nectar.
      2-3 Bee Debugging 5: "That flower looks tasty! \n\nFix the error(s) to collect
        all of the nectar.\\\nYou can now use both run and step."
      2-3 Bee Debugging 6: |-
        What a sweet challenge!

        Fix the error(s) to collect all of the nectar.
      2-3 Bee Debugging 9: |-
        Snaž sa usilovne ako včelička!

        V tomto programe budeš musieš opraviť niekoľko chýb na to, aby si získal všetok nektár a vyrobil všetok med.
      2-3 Bee Debugging Assessment 1: |-
        **Assessment:**  Now it's time to show what you know!

        Fix the error(s) to collect all of the nectar and make all of the honey.
      2-3 Bee Functions 1: "Functions are blocks of code that perform a task.  \n\nUse
        the `get 2 nectar` function to collect the nectar from each flower."
      2-3 Bee Functions 10: "Purple flowers change between either 1 or 0 nectar each
        time you run the puzzle.   \n\nCreate a function that collects nectar only
        from purple flowers that have nectar."
      2-3 Bee Functions 2: "Functions are blocks of code that perform a task.  \n\nUse
        the `get 5` function to get 5 nectars at a time."
      2-3 Bee Functions 4: "The `move and get nectar` function turns the bee, collects
        nectar, and then returns the bee to where it started.  \n\nUse the function
        to collect all of the nectar."
      2-3 Bee Functions Assessment 1: "**Assessment:** Use the given function to collect
        nectar from each flower."
      2-3 Bee Functions Assessment 2: "**Assessment:** Create a function to turn,
        move forward and make 3 honey, then return the bee to where it started and
        turn back."
      2-3 Bee Loops 1: |-
        Tieto kvetinky vyzerajú lákavo!

        Pozbieraj nektár z každého kvetu použitím čo možno najmenej blokov.
      2-3 Bee Loops 13: "\\*\\*Hodnotená úloha: Pozbieraj všetok nektár použitím čo
        najmenšieho možného počtu blokov."
      2-3 Bee Loops 3A: Použite slučku "opakovať" pre pozbieranie všetkého nektáru.
      2-3 Bee Loops 3B: Teraz použi blok "opakuj" na pozbieranie všetkého nektáru
        a vyrobenie všetkého medu.
      2-3 Bee Loops 4: |-
        Such a busy bee!

        Help Bee collect all of the nectar and make all of the honey with the fewest blocks possible.
      2-3 Bee Loops 4A: "Koľkokrát Vám môžu slučky pomôcť v tejto úlohe? \n\nSlučky
        sú Vašimi kamarátmi! Použite ich niekoľko pre dokončenie tejto úlohy s čo
        najmenším počtom blokov."
      2-3 Bee Loops 5: "The shape of this path is different from the others. \n\nCan
        you collect all of the nectar using as few blocks as possible?"
      2-3 Bee Loops 7: "What a beautiful field of flowers!   \n\nHelp the bee visit
        each one.\n\nCan you find a way to do it with fewer than 7 blocks?"
      2-3 Bee Loops 8: "Tieto fialové kvetinky majú pri každom spustení tejto úlohy
        iné množstvo nektáru. \n\nPoužite slučku \"pokiaľ je nektár\" pre pozbieranie
        všetkého nektáru. \n\nTáto slučka bude bežať tak dlho, pokiaľ bude splnená
        podmienka, v tomto prípade \"nektár > 0\"."
      2-3 Bee Loops Assessment 1: "**Assessment:** Use a `while` loop to collect all
        of the nectar from these flowers."
      2-3 Maze 1: "Can you help me catch the naughty pig? \n\nStack a couple of `move
        forward` blocks below the `when run` block and press \"Run\". "
      2-3 Maze 12: |-
        Suddenly, a magical block appears!  With the `repeat` block, you can loop code over and over.

        Can you get to the pig by creating a loop that uses only one `move forward` block inside of a `repeat`?
      2-3 Maze 13: Dostaň ma k prasiatku! Teraz môžeš použiť len jeden blok `posuň
        sa dopredu`.
      2-3 Maze 15: V tejto úlohe ti dva príkazy "opakuj" pomôžu dostať prasiatko najmenším
        možným počtom blokov!
      2-3 Maze Loops 18: "Dostaň ma k slnečnici použitím čo najmenšieho možného počtu
        blokov!  \n\nSkús jeden cyklus \"opakuj\" vložiť do druhého cyklu \"opakuj\",
        čím znížiš počet použitých blokov."
      2-3 Maze Loops 19: "Let's take this to another level! \n\nUse loops to get me
        to the sunflower with the fewest loops possible."
      2-3 Maze Loops Assessment 1: "**Assessment:**  Get me to the sunflower using
        only 5 blocks! "
      4-5 Artist 1: 'Pomôžte mi dokončiť kreslenie krabice (každá čiara má byť 300
        pixelov dlhá) '
      4-5 Artist 11: "Complete the green lines.  \n\nThe lines are 300 pixels long
        and 15 pixels apart."
      4-5 Artist 2: Loop this code using the `repeat` block to complete the square.
      4-5 Artist 3: "This rectangular flower bed has a perimeter of 600.\\\nThe long
        side has a length of 200. \n\nDraw the rectangle using as few blocks as possible."
      4-5 Artist 3.5: "Try to figure out what happens if you run this code (or just
        press \"Run\" and try it). \n\nNext, repeat the code enough times to complete
        the drawing!"
      4-5 Artist 4: "How many degrees are in a circle?  \n\nLoop the blocks to create
        a circle of colors."
      4-5 Artist 5: Čím môžeme nahradiť "???" ak chceme, aby zombík dokončil túto
        kresbu použitím poskytnutého opakovacieho cyklu?
      4-5 Artist 6: Tento rovnostranný trojuholník má uhly 60, 60 a 60 stupňov Každá
        strana je 200 pixelov dlhá. Dokonči kresbu.
      4-5 Artist 7: "This right triangle has angles of 30, 60, and 90 degrees.  The
        slanted side's length (length of the hypotenuse) is 200 pixels. \n\nComplete
        the drawing."
      4-5 Artist 8: "The halfway line on a soccer field is _perpendicular_ to the
        sidelines.\\\nThis rectangle has a perimeter of 800 pixels total, and it is
        240 pixels long. How tall is it?   \n\nDraw the bounds and the halfway line."
      4-5 Artist 9: "Draw the right half of this image so that the design is symmetrical.
        \nThe triangles are equilateral and have sides that are 50 pixels long."
      4-5 Artist Assessment 1: "**Assessment:** Use a loop to draw the equilateral
        triangle. Each side is 300 pixels."
      4-5 Artist Free Draw 1: Teraz máš voľnú ruku! Nakresli, čo len chceš.
      4-5 Artist Patterns 1: |-
        Nakreslite tento štvorec použitím slučky.

        Každá strana je 20 pixelov dlhá.
      4-5 Artist Patterns 10: "This code draws two rows of hexagons - loop the whole
        thing 4 times to draw the whole honeycomb. \n\nYou'll need to jump back 120
        pixels in your outermost loop to make sure the artist doesn't draw off the
        screen."
      4-5 Artist Patterns 11: How many times do you need to loop this to draw a half
        circle?
      4-5 Artist Patterns 12: "Ak spravíte ďaľšiu takúto slučku, ale zabočíte doľava
        namiesto doprava, čo sa stane? \n\nViete to celé zopakovať pre nakreslenie
        tejto vlny?"
      4-5 Artist Patterns 13: "A teraz zopakujme celú vec štyrikrát pre vytvorenie
        tohto rámika obrázku. Pozor na rohy - nemôžete jednoducho zabočiť o 90 stupňov!
        \n\nAk zopakovanie 3 otočiek o 60 stupňov spraví polkruh, ktorý z týchto blokov
        spraví dodatočný štvrťkruh pre rohy?"
      4-5 Artist Patterns 2: "If you place your square loop inside another loop, we
        call that a nested loop. \n\nWhat do you need to add as an outer loop to make
        sure all 15 squares line up next to each other?"
      4-5 Artist Patterns 3: A poďme o level hlbšie? Vložili sme celý blok s kódom
        do ďaľšej slučky, ale pre nakreslenie ďaľšej čiary potrebujete dostať umelca
        naspäť na miesto. Ktorý z týchto blokov s kódom treba dať na koniec najkrajnejšej
        slučky pre nakreslenie celej mriežky?
      4-5 Artist Patterns 4: "This diamond has 50 pixel sides and angles of 120 and
        60 degrees. \n\nUse a loop to draw it."
      4-5 Artist Patterns 5: "Repeat this code to make a row of 6 diamonds. \n\nNotice
        that we changed our diamond code to repeat 3 times instead of 2 - why do you
        think that is?"
      4-5 Artist Patterns 6: Koľkokrát musíte zopakovať tento blok pre nakreslenie
        celej mriežky s diamantami?
      4-5 Artist Patterns 7: Let's modify the code from the last puzzle to make this
        more complex pattern. Notice how the diamonds overlap now, try changing the
        first "jump backwards" from 100 to 50 (half as far) - now how far should the
        artist go in the second "jump backwards"?
      4-5 Artist Patterns 8: Použite slučku pre nakreslenie šesťuholníka so stranou
        40 pixelov a uhlami 60 stupňov.
      4-5 Artist Patterns 9: "A teraz zopakujte tento kód 3x a nakreslite celý riadok.
        \n\nKaždý šesťuholník je v najširšom mieste zľava doprava široký 80 stupňov."
      4-5 Artist Patterns 9.5: "Let's loop this code to draw two rows of hexagons.
        \n\nNotice how our second row is shifted to the right."
      4-5 Artist Patterns Free Play: Voľná hra - vyskúšajte svoju ruku nakreslením
        vlastného vzoru!
      4-5 Bee Conditionals 1: |-
        Tento oblak mi zacláňa vo výhľade! Skontroluj, či je pod oblakom kvet, a ak sa tam nachádza, pozberaj nektár.\
        Pozor, kvetinka môže meniť svoju polohu!
      4-5 Bee Conditionals 2: |-
        Viac oblakov!

        Skôr ako zoberieš nektár, skontroluj, či sa pod každým oblakom nachádza kvet. Ak je pod oblakom kvet, včela _ihneď_ pozbiera nektár.

        Pamätaj: Nie pod všetkými oblakmi sa skrýva tá istá vec!
      4-5 Bee Conditionals 4: |-
        Oblak niekedy zakrýva kvet a niekedy plást!

        Použi blok `ak/inak` a pozberaj nektár len ak je tam kvet.\
        V opačnom prípade vyrob med (lebo je to plást).
      4-5 Bee Conditionals 5: |-
        Pod každým z oblakov bude buď kvet alebo včelí plást!

        Použi blok `ak/inak`a pozberaj nektár ak tam je kvet.
        V opačnom prípade, vyrob med (lebo je to plást).
      4-5 Bee Conditionals 6: "Nie som si istý, koľko nektáru má táto kvetina, ale
        viem, že to budú 1, 2 alebo 3 nektáre. \n\nSkombinuj podmieňovacie bloky (\"if\"
        a/alebo \"if/else\") pre získanie práve toľko nektáru, koľko ho je na kvetine.
        \n\nZapamätajte si, množstvo nektáru sa môže pri každom spustení programu
        zmeniť!"
      4-5 Bee Conditionals 7: "Tieto kvetinky môžu mať 3, 2 alebo 1 nektár. \n\nDokončite
        funkciu \"skontrolovať fialovú kvetinku\" a použite ju pre pozbieranie všetkého
        nektáru z kvetiniek."
      4-5 Bee Conditionals 8: "Napíšte funkciu na \"skontrolovať kvetinku spraviť
        med\". \n\nVaša funkcia by mala skontrolovať, či má fialová kvetinka 3, 2
        alebo 1 nektár a pozbierať všetok nektár. \nPotom sa posuňte dopredu a spravte
        med."
      4-5 Bee Conditionals Assessment 1: "**Assessment:** This cloud is either hiding
        a flower with one nectar or a honeycomb that needs one honey.  \n\nComplete
        the `get nectar or make honey` function, then call it to collect the nectar
        or honey. "
      4-5 Bee Debugging 1: |-
        Tieto bloky ma naozaj trápia.

        Vieš ich opraviť?
      4-5 Bee Debugging 6: |-
        Fialová kvetinka má pri každom spustení cvičenia iný počet nektáru.

        Opravte bloky tak, aby ste vždy pozbierali všetok nektár.
      4-5 Bee Debugging Assessment 1: "**Assessment:** Fix the code."
      4-5 Bee Nested Loops 2: "Collect all of the nectar from each flower. \n\nUse
        a nested loop. "
      4-5 Bee Nested Loops 4: "Pozbierajte všetok nektár z každej kvetinky a spravte
        med v plástoch. \n\nPoužite vnorenú slučku. "
      4-5 Bee Nested Loops Assessment 1: "**Hodnotená úloha:** Pomocou cyklov pozbieraj
        všetok nektár a vyrob všetok med."
      4-5 Maze 7: "Get the zombie to the sunflower quickly!  \n\nCan you solve the
        puzzle in fewer than 11 blocks?"
      4-5 Maze 9: "Teraz tu máme nový blok `opakuj pokiaľ neplatí`.\\\nToto nám umožní
        opakovať príkazy až kým sa zombík nedostane k slnečnici.  \n\nPouži nový blok
        \"opakuj pokiaľ neplatí\" pre vyriešenie tejto úlohy s čo najmenším možným
        počtom príkazov."
      4-5 Maze Assessment 1: "**Assessment:** Get to the sunflower using as few blocks
        as possible."
      4-5 Maze Conditionals 1: Použi blok `opakuj pokiaľ neplatí`, aby sa zombík dostal
        k slnečnici.
      4-5 Maze Conditionals 10: "Viete pridať len 3 bloky a pomôcť zombíkovi dostať
        sa cez zložitejšie bludisko? \n\nAk to urobíte správne, môže prejsť všetkými
        krivolakými cestami bez ohľadu na ich dĺžku!"
      4-5 Maze Conditionals 2: Použi blok `opakuj pokiaľ neplatí`, aby sa zombík dostal
        k slnečnici.
      4-5 Maze Conditionals 3: 'Use the `if` block to help me decide when to turn. '
      4-5 Maze Conditionals 4: Ok, toto vyriešiš podobne ako predchádzajúcu úlohu,
        len si musíš spomenúť, ako si spolu použil bloky `ak` a `opakuj pokiaľ neplatí`.
      4-5 Maze Conditionals 5: |-
        "Ja chcieť slnečnica!"

        Použite výraz "if", aby sa zombík dostal k slnečnici s čo najmenším počtom blokov.
      4-5 Maze Conditionals 6: |-
        "Zjedzte slnečnicu!"

        Použite výraz "if", aby sa zombík dostal k slnečnici s čo najmenším počtom blokov.
      4-5 Maze Conditionals 7: Riešenie tejto úlohy nie je až tak odlišné, ale pozor
        na zloduchov!
      4-5 Maze Conditionals 8: "Blok \"ak/inak\" skontroluje podmienku a potom spraví
        jednu alebo druhú vec. \n\nPouži tento nový blok a dostaň ma k slnečnici."
      4-5 Maze Conditionals 9: |-
        Ešte jedna cvičná úloha s blokom "if/else"!

        Sledujte ju svojim prstom, aby ste videli, či ju dokážete vyriešiť na prvý pokus.
      4-5 Maze Conditionals Assessment 1: "**Assessment:** Use a `repeat until` and
        an `if/else` block to get me to the sunflower in as few blocks as possible."
      4-5 Nested Loops 1: 'Complete the code to draw these triangles.  The first one
        is done for you.  Hint:  3 triangles in a 360 degree rotation.'
      4-5 Nested Loops 11: "Can you draw these 10 squares of this sidewalk using a
        nested loop? \n\nEach square is 30 pixels."
      4-5 Nested Loops 12: Can you draw these 36 triangles using a nested loop?
      4-5 Nested Loops 2: "Now nest this loop inside another loop to draw 10 triangles.\\\nThis
        is called a \"nested\" loop.  "
      4-5 Nested Loops 3: |-
        Create a sun by nesting the starter code in another loop.

        To get this cool design with a hollow center, you'll need to jump forward by the length of the triangle before turning.
      4-5 Nested Loops 5: Loop the given code to create a windmill.
      4-5 Nested Loops 6: Can you draw a hexagon by looping the triangle code?
      4-5 Nested Loops 7: "Zopakuj tento dizajn 10 krát. \n\nO koľko sa musíš otočiť
        pri každom opakovaní?"
      4-5 Nested Loops 8: "Zopakujte tento tvar 6 krát. \n\nO koľko sa musíte otočiť
        pri každej slučke? "
      4-5 Nested Loops 9: Draw the teeth in the alligator's mouth!
      4-5 Nested Loops Assessment 1: "**Assessment:** Use a nested loop to complete
        the design."
      4-5 While Loops 1: Dostaňte ma k jame a naplnťe ju dvoma lopatami hliny použitím
        bloku "naplniť".
      4-5 While Loops 2: Dostaňte ma ku kope hliny a odstráňte ju pomocou 5 plných
        lopát použitím bloku "odstrániť 1".
      4-5 While Loops 3: "Použite čo možno najmenej blokov pre dokončenie tejto úlohy!
        \ \n\nDostaňte ma ku kope a odstráňte všetku hlinu, potom ma posuňte k jame
        a celú ju zasypte."
      4-5 While Loops 4: "Fíha, pozrite sa na toto!\n\nNeviem, koľko lopát plných
        hliny treba na zasypanie tejto jamy.\\\nViete napísať program, ktorý bude
        zasypávať jamu až kým nebude zem vyrovnaná?  "
      Alien Defender: "**Project Idea**: Make a defender game in Play Lab!"
      AppLab Intro 7 - Change Screen Color: "<div style=\"float:right\">\n\t<img src=\"https://images.code.org/bf9b1fb57751fa90c9b786339914ad70-image-1508521068798.34.54
        AM.png\" style=\"height:150px\"> \n</div>\n\n**Cieľ:** Nastaviť obrazovku
        na zeleno. \n\n**Ako:** Pretiahni si na plochu blok `setProperty()`. Použi
        rozbaľovacie šípky nadol na nastavenie farby pozadia`\"background-color\"`
        obrazovky na zelená `\"green\"`. Potom stlač \"Spustiť\".\n\n**Nedarí sa ti?
        Klikni sem:** ![expandable](https://images.code.org/3b5e70522b02867a1df1d5b5e481785e-image-1511279858395.gif)"
      AppLab Intro 7 - Change Text 2: "<div style=\"float:right\">\n<img src=\"https://images.code.org/39ead723fbd2b047aa2d1e401cbfec8a-image-1506545619076.34.29
        PM.png\" style=\"height:200px;\">\n</div>\n\n**Cieľ:** Nastaviť väčší text
        a zmeniť ho na modrý. \n\n**Ako:** Budeš potrebovať dva riadky kódu. Zmeň
        pre `\"label1\"` veľkosť písma `\"font-size\"` na `80` a farbu textu `\"text-color\"`
        na modrú `\"blue\"`\n\n**Nedarí sa ti? Klikni sem:** ![expandable](https://images.code.org/2d5d46a03082af3b01847aad6602e2ea-image-1511280140482.gif)"
      AppLab Intro 7 - Full Text: |-
        <div style="float:right">
        <img src="https://images.code.org/1e81d5bcdd69172f4127de55d045225f-image-1507565161167.05.19 AM.png" style="height:200px">
        </div>

        **Cieľ:** Zmeniť tlačidlá na červené `"red"` a modré `"blue"`. Potom zmeň text vo veľkom oranžovom rámčeku.

        **Ako:**

        -   Nezabudni, že keď kurzorom prejdeš ponad prvky, tak uvidíš ich `"id"`.
        -   Nastav farbu pozadia `"background-color"` pre tlačidlá na červenú `"red"` a modrú `"blue"`.
        -   Zmeň vlastnosť rámčeka `"text"` na čokoľvek chceš, ako napríklad `"Vitajte v mojej appke!"`

        **Nedarí sa ti? Klikni sem:** ![expandable](https://images.code.org/4bf99e7352e7c17a5bf73ced80171f6a-image-1511280628092.gif)
      AppLab Intro 7 - onEvent intro: |-
        <img src="https://images.code.org/3d8c8487ea669563d3401c0009cd9462-image-1511281194897.gif" style="float:right;height:200px">

        **Cieľ:** Obrazovka bude na začiatku modrá. Pridaj kód tak, aby sa zmenila na zelenú po kliknutí na tlačidlo Zozeleniť "Green-ify".

        **Ako:**  Pridaj kód do vnútra `setProperty()` , ktorý nastaví farbu pozadia `"background-color"` obrazovky na zelenú `"green"`.

        **Nedarí sa ti? Klikni sem:** ![expandable](https://images.code.org/5ddf6b129bc04b79839b3661ccef788b-image-1511281012076.gif)
      AppLab Intro 7 - onEvent twoButtons: |-
        <img src="https://images.code.org/158c9258bfff18c2177440f201446c47-image-1507566793890.gif" style="float:right;height:200px">

        **Cieľ:** Pomôž nám dokončiť túto appku imitujúcu baterku. Tlačidlo Zapnúť "On" už mení obrazovku na bielu. Spusti si aplikáciu a vyskúšaj to. Potom napíš kód tak aby tlačidlo Vypnúť "Off" menilo obrazovku naspäť na čiernu.

        **Ako:**  Pridaj kód do prázdneho `setProperty()`, ktorý nastaví farbu pozadia `"background-color"` obrazovky na  čiernu `"black"` a farbu textu `"text-color"` nápisu na bielu `"white"`.

        **Nedarí sa ti? Klikni sem:** ![expandable](https://images.code.org/020b1d9b465aaf35967a528a92961c13-image-1511281772276.gif)
      AppLab Intro 7 - playSound: "<img src=\"https://images.code.org/28176329f15dea1a863564b069e72aab-image-1511282702534.44.52
        AM.png\" style=\"float:right;height:200px\">\n\n**Cieľ:** Táto zvuková aplikácia
        so zvieratami je už skoro hotová! Spusti ju a zisti ako funguje. Potom pridaj
        obrázok, text a zvuk pre posledné tlačidlo.\n\n**Ako:** \n\n-   Pridaj `onEvent()`
        do programu a nastav \"id\" na `\"button4\"`. Pretiahni `playSound()` do bloku
        `onEvent()` a vyber si nejaký zvuk z knižnice. \n-   Pridaj `setProperty()`
        (mimo bloku `onEvent()`), a zmeň obrázok `\"image\"` tlačidla. Vyber obrázok
        pomocou tretieho rozbaľovacieho menu.\n-   Pridaj ešte jeden blok `setProperty()`,
        a zmeň text `\"text\"` tlačidla.\n\n**Nedarí sa ti? Klikni sem:** ![expandable](https://images.code.org/a3fdcb8954c5e8d585bef64df1ec5b1a-image-1511285408512.gif)"
      AppLab Intro 7 - thisOrThatAddButton: |-
        <img src="https://images.code.org/3feb07aaf3d933b094647479673a3293-image-1508373443129.37.00 PM.png" style="float:right;height:200px">

        **Cieľ:** Pridaj na obrazovku druhé tlačidlo `"Button"`, ktoré bude mať na sebe napísané Doprava! "Right!" s id `"id"` pravéTlačidlo `"rightButton"`.

        **Ako:**  V dizajnovom móde vyber nové tlačidlo `"Button"`, umiestni ho priamo do appky a uprav jeho veľkosť. Potom nastav jeho id `"id"`, text `"text"`, farbu pozadia `"background color"`, a veľkosť písma `"font size"`.

        **Nedarí sa ti? Klikni sem:** ![expandable](https://images.code.org/7035ad0445984cf889b159cf5682e35a-image-1508383186447.gif)
      AppLab Intro 7 - thisOrThatAddScreen: |-
        <img src="https://images.code.org/f102a1363aa575cc530379d9a4ee378c-image-1508382068883.00.59 PM.png" style="float:right;height:200px">

        **Cieľ:** Vytvor novú obrazovku `"Screen"` s id `"id"` praváObrazovka `"rightScreen"`. Pridaj štítok `"Label"` s textom Už si vpravo! "You went right!".

        **Ako:**  V dizajnovom móde vyber novú obrazovku `"Screen"` a umiestni ju priamo do appky. Zmeň jej  id `"id"` na praváObrazovka `"rightScreen"`. Potom pretiahni štítok `"Label"` na túto obrazovku a zmeň jeho text na Už si vpravo! "You went right!".

        **Nedarí sa ti? Klikni sem:** ![expandable](https://images.code.org/11cf186acb0453cf9ec46929b763f568-image-1508383646159.gif)
      AppLab Intro 7 - thisOrThatPersonalize: |-
        <a href="https://studio.code.org/projects/applab/gx21oCP10-V4GlNMlSpwdQ" target="_blank"><img src="https://images.code.org/ba6c0db48cc1c3c28c135f1c2f67f361-image-1511244802597.10.18 PM.png" style="float:right;height:200px"></a>
        <a href="https://studio.code.org/projects/applab/SM_edi1btguZZiQaTtUT9Q" target="_blank"><img src="https://images.code.org/284b55697d786e0cd64350d0967c5dda-image-1511244806272.11.05 PM.png" style="float:right;height:200px"></a>
        <a href="https://studio.code.org/projects/applab/SMvVhgBX_GGyxg5LSEMrgg" target="_blank"><img src="https://images.code.org/445181ff8d84861919512ba9b8e09586-image-1511244809994.12.40 PM.png" style="float:right;height:200px"></a>

        **Cieľ:** Vytvor vlastnú aplikáciu rozšírením tohto projektu. Potom ju s niekým zdieľaj kliknutím na "Zdieľať"!

        **Ako:** Rozhodni sa, aký typ aplikácie chceš vytvoriť. Potom ju vytvor pridaním obrazoviek, tlačidiel, textov, zvukov a interakcií. V paneli nástrojov je ešte niekoľko blokov, ktoré môžeš vyskúšať. Po dokončení aplikácie klikni na "Zdieľať" a pošli ju sebe alebo kamarátom!

        <details>

        <summary><b>Nápady na vlastné dobrodružstvá</b></summary>

        Pozri si túto appku <a href="https://studio.code.org/projects/applab/SMvVhgBX_GGyxg5LSEMrgg" target="_blank">Príklad: Vyber si vlastné dobrodružstvo</a> , ktorá ti ukáže ako to môže fungovať. Nižšie je niekoľko nápadov, ktoré ti môžu pomôcť vymyslieť tvoj vlastný príbeh.

        <li>Vytvor dobrodružstvo s tvojou obľúbenou postavou, skutočnou alebo vymyslenou.</li>
        <li>Vytvor dobrodružstvo, ktorým vyrozprávaš príbeh zo svojej obľúbenej knihy, filmu alebo si nejaký príbeh vymysli.</li>
        <li>Vytvor dobrodružstvo, ktoré má veľa nečakaných zvratov alebo rieši morálnu dilemu.</li>
        <br>
        </details>

        <details><summary><b>Nápady na blahoželania</b></summary>

        Pozri si túto appku <a href="https://studio.code.org/projects/applab/SM_edi1btguZZiQaTtUT9Q" target="_blank">Príklad: Blahoželania</a> , ktorá ti ukáže ako to môže fungovať. Nižšie je niekoľko nápadov, ktoré ti môžu pomôcť vymyslieť tvoje vlastné blahoželnie.

        <li>Zamysli sa nad narodeninami, sviatkom alebo iným špeciálnym dňom, ktorý sa blíží a vytvor to správne blahoželanie!</li>
        <li>Vytvor blahoželanie ako poďakovanie niekomu, koho si vážiš.</li>
        <li>Vytvor pozvánku na blížiacu sa udalosť.</li>
        <br>
        </details>

        <details><summary><b>Nápady na kvíz</b></summary>

        Pozri si túto appku <a href="https://studio.code.org/projects/applab/gx21oCP10-V4GlNMlSpwdQ" target="_blank">Príklad: Kvíz</a> , ktorá ti ukáže ako to môže fungovať. Nižšie je niekoľko nápadov, ktoré ti môžu pomôcť vymyslieť tvoj vlastný kvíz.

        <li>Vytvor kvíz, ktorý kamarátom navrhne niečo čo môžu mať radi, napríklad jedlo, obľúbený tím, knihu alebo miesto.</li>
        <li>Vytvor kvíz, ktorý "predpovedá budúcnosť" na základe odpovedí kamarátov.</li>
        <li>Vytvor kvíz, ktorý pomôže kamarátom urobiť ťažké rozhodnutia.</li>

        </details>
      AppLab Intro 7 - thisOrThatSetScreen: |-
        <img src="https://images.code.org/acd1acf659a2504d38ff80256d8e870f-image-1508374065550.com-crop (1).gif" style="float:right;height:200px">

        **Cieľ:** Obrazovka sa prepne na pravú obrazovku `"rightScreen"` keď klikneš na tlačidlo Doprava! `"Right!"` s id `"rightButton"`.

        **Ako:** V móde kódu pridaj nový blok `onEvent()` do svojho programu pre tvoje tlačidlo Doprava! "Right!". Ďalej pridaj blok `setScreen()` do jeho vnútra, ktorý prepne obrazovku na pravú obrazovku `"rightScreen"`.

        **Nedarí sa ti? Klikni sem:** ![expandable](https://images.code.org/64dfec0d9f9c2fc237abb90ef6a72f0e-image-1508384166252.gif)
      CDU U6 Playground Sound Board: |-
        # Sound Board 2.0

        You can now play sounds, notes, and songs! With this new knowledge, you can even turn your board into a sound board.

        In the toolbox you have all of the buzzer and led-related blocks at your disposal. See what cool stuff you can come up with!

        # Do This

        -   Use all of the button related board events (up, down), to play a unique sound or song at each event.
        -   Are there any other events you could use to play even more sounds/songs?
      CDU U6 Playground Sound Board_2018: |-
        # Sound Board 2.0

        You can now play sounds, notes, and songs! With this new knowledge, you can even turn your board into a sound board.

        In the toolbox you have all of the buzzer and led-related blocks at your disposal. See what cool stuff you can come up with!

        # Do This

        -   Use all of the button related board events (up, down), to play a unique sound or song at each event.
        -   Are there any other events you could use to play even more sounds/songs?
      CDU U6 Playground Sound Board_2019: |-
        # Sound Board 2.0

        You can now play sounds, notes, and songs! With this new knowledge, you can even turn your board into a sound board.

        In the toolbox you have all of the buzzer and led-related blocks at your disposal. See what cool stuff you can come up with!

        # Do This

        -   Use all of the button related board events (up, down), to play a unique sound or song at each event.
        -   Are there any other events you could use to play even more sounds/songs?
      CSD Problem Solving Process Video: |-
        ## Questions to consider

        -   How did you follow the problem solving process in the last lesson?
        -   How could you use this process on a problem in your everyday life?
      CSD U1 - PixFilter 1x1 intro: |-
        # 3 Bit Colors

        Each pixel is a square on a screen that emits light. Each pixel can have a certain number of bits assigned to it, and bits per pixel determine the colors that can be rendered.

        In this tool we're using 3 bits to define the one large black pixel. The first bit affects the red tint. The second bit affects the green tint. The third bit affects the blue tint.

        # Do This

        -   Click the "Run" button to start the widget
        -   Click on the light bulbs to turn on or off each color and see what happens to your pixel
        -   See how many different colors you can create with just three bits
        -   Write down the binary associated with each color you come up with
      CSD U1 - PixFilter Filter Intro: |-
        # Filtering Pixels

        If you've ever used Instagram you've probably encountered an image filter. Image filters read in each pixel, process it in some way, and the return the filtered pixel. In this tool we're going to start by filtering just a single pixel before moving on to a full image.

        # Do This

        -   Try changing the color drop downs in the Filter section
        -   Click on the top row of lightbulbs in the Diagram section to see how the filter will convert the input (top bulbs) to the output (bottom bulbs)
        -   Look at how the numbers in the Binary section reflect changes to the colors
        -   Based on how the bits change, can you formulate what replace is doing? Talk to your partner and see if you can figure it out.
        -   Complete the Level 2 table in your Activity Guide
      CSD U1 - PixFilter Filter Revisit: |-
        # Combining Filters

        Now that you've played with filtering a single color channel, it's time to see what happens if we filter more than one color.

        # Do This

        -   Using the color dropdowns in the filter section, build a filter that changes the value of more than one color channel
        -   Click on the top row of lightbulbs in the Diagram section to see how the filter will convert the input (top bulbs) to the output (bottom bulbs)
        -   Look at how the numbers in the Binary section reflect changes to the colors
        -   Complete the Level 4 table in your Activity Guide
      CSD U1 - PixFilter FreePlay: |-
        # Free Play

        Do as you will, make something awesome
      CSD U1 - PixFilter Mario: |-
        # Combining Filters

        Sometimes you'll need to filter more than one pixel to get the color change that you want.

        # Do This

        Check out Mario, he's lookin' pretty good in his red hat and overalls. Your job it to set up the filter so he looks like Luigi, with a green hat and overalls.

        -   First, determine which bit(s) needs to change in order to the change you want
        -   Once you've figured out which bit needs changing, set the filter dropdown appropriately
        -   After you've got the filter working so that, try to come up with other filters that change _only_ his hat and overalls - how many different clothing colors can you come up with?

        _How many tries did it take you to find the right filter?_
      CSD U1 - PixFilter Mushroom: |-
        # Filtering Images

        Now that we've seen how a single pixel can be filtered to change its color, let's try applying a filter to an image made of multiple pixels. The filter you create will be applied to each pixel in the image - and you still have the light bulbs available to experiment with how your filter will work with individual colors.

        # Do This

        Here's a picture of a red mushroom - you're going to try and turn it into a yellow mushroom.

        -   First, determine which bit needs to change in order to turn red into yellow
        -   Once you've figured out which bit needs changing, use the filter dropdowns to make all of the red areas turn yellow
        -   After you've got the filter working so that the red has turned yellow, see if you can come up with filters that turn the mushroom other colors

        _How many tries did it take you to find the right filter?_
      CSD U1 - PixFilter UnFilter: |-
        # UnFiltering

        Bit filters can be used to _undo_ filtering as well. Here's an image of a bird that's been filtered from it's original colors. Can you get it back to normal?

        # Do This

        <img src="https://images.code.org/c15636bda16e8792c59ac955332e37a5-image-1471372091393.22.56.png" style="float:right; width: 200px"/>
        Here's what our bird should look like. Use the filter to get him back to normal.

        -   Decide which colors (and so which bits) you need to change. You might need to write your thoughts with pencil and paper.
        -   Once you know which bits need changing, set the filter dropdown appropriately to test your answer
        -   After you've fixed the image, write down both your process and your final filter in the Level 6 section of your Activity Guide

        _How many tries did it take you to find the right filter?_
      CSD U2 CSS explore CSS: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        <details>

        <summary><strong>How do I switch between files?</strong></summary>

        Click the name of the file you want to look at in the menu on the left side of the screen.

        </details>
        </div>

        # Adding Style

        This Web Lab project is using a new language to add style to the page. With a partner explore both the `index.html` and `style.css` files. Be ready to discuss the following questions.

        -   What changes is this new language making to the page?
        -   How is this language different from HTML?
        -   How are the `index.html` and `style.css` files connected?
      CSD U2 CSS explore CSS_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>How do I switch between files?</strong></summary>

        Click the name of the file you want to look at in the menu on the left side of the screen.

        </details>
        </div>

        # Adding Style

        This Web Lab project is using a new language to add style to the page. With a partner explore both the `index.html` and `style.css` files. Be ready to discuss the following questions.

        -   What changes is this new language making to the page?
        -   How is this language different from HTML?
        -   How are the `index.html` and `style.css` files connected?
      CSD U2 CSS explore CSS_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>How do I switch between files?</strong></summary>

        Click the name of the file you want to look at in the menu on the left side of the screen.

        </details>
        </div>

        # Adding Style

        This Web Lab project is using a new language to add style to the page. With a partner explore both the `index.html` and `style.css` files. Be ready to discuss the following questions.

        -   What changes is this new language making to the page?
        -   How is this language different from HTML?
        -   How are the `index.html` and `style.css` files connected?
      CSD U2 Debugging 1: |-
        # Debugging

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What is a bug?</strong>
        </summary>
        Bugs are mistakes in code which causes it not to work as planned.
        </details>
        <details>
        <summary><strong>What is debugging?</strong>
        </summary>
        Debugging is the process of finding and fixing bugs.  Debugging is a problem solving process so use your problem solving steps as you try to debug.
        </details>
        <details>
        <summary><strong>What are some examples of bugs?</strong>
        </summary>

        Bugs can be anything that causes code not to work as planned.  Some examples are misspelling, putting code in the wrong place, using the wrong tag, or forgetting to close a tag.

        </details>
        </div>

        Computer code is written by humans, and all humans make mistakes. Part of being a good computer scientist is finding your mistakes and fixing them. In computer science we call mistakes **bugs**. The process of finding and fixing those bugs is called **debugging**.  Over the next couple levels you are going to work on your debugging skills.

        # Do This

        <img src="https://images.code.org/9c4d90a5a8293c5aee56e6cb81dae689-image-1500915264278.52.56 AM.png" style="float:right;border:black solid 5px;">

        -   Look at the web page code, and discuss with your partner what is causing the following two bugs:
            -   The heading is not big enough.
            -   The second item on the list doesn't have a number.
        -   Fix all the bugs in the code so that the final result matches the image on the right.
      CSD U2 Debugging 1_2018: "# Debugging\n\n<div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n\n<details>\n<summary><strong>What is a bug?</strong></summary>\nBugs
        are mistakes in code which causes it not to work as planned.\n</details>\n\n<details>\n<summary><strong>What
        is debugging?</strong></summary>\nDebugging is the process of finding and
        fixing bugs.  Debugging is a problem solving process so use your problem solving
        steps as you try to debug. \n</details>\n\n<details>\n<summary><strong>What
        are some examples of bugs?</strong></summary>\n\nBugs can be anything that
        causes code not to work as planned.  Some examples are misspelling, putting
        code in the wrong place, using the wrong tag, or forgetting to close a tag.\n\n</details>\n</div>\n\nComputer
        code is written by humans, and all humans make mistakes. Part of being a good
        computer scientist is finding your mistakes and fixing them. In computer science
        we call mistakes **bugs**. The process of finding and fixing those bugs is
        called **debugging**.  Over the next couple levels you are going to work on
        your debugging skills.\n\n# Do This\n\n<img src=\"https://images.code.org/9c4d90a5a8293c5aee56e6cb81dae689-image-1500915264278.52.56
        AM.png\" style=\"float:right;border:black solid 5px;\">\n\n-   Look at the
        web page code, and discuss with your partner what is causing the following
        two bugs:\n    -   The heading is not big enough.\n    -   The second item
        on the list doesn't have a number.\n-   Fix all the bugs in the code so that
        the final result matches the image on the right."
      CSD U2 Debugging 1_2019: "# Debugging\n\n<div class=\"no-pullthrough\" style=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n\n::: details [**What is a bug?**]\nBugs are mistakes in
        code which causes it not to work as planned.\n:::\n\n::: details [**What is
        debugging?**]\nDebugging is the process of finding and fixing bugs.  Debugging
        is a problem solving process so use your problem solving steps as you try
        to debug. \n:::\n\n::: details [**What are some examples of bugs?**]\n\nBugs
        can be anything that causes code not to work as planned.  Some examples are
        misspelling, putting code in the wrong place, using the wrong tag, or forgetting
        to close a tag.\n\n:::\n\n</div>\n\nComputer code is written by humans, and
        all humans make mistakes. Part of being a good computer scientist is finding
        your mistakes and fixing them. In computer science we call mistakes **bugs**.
        The process of finding and fixing those bugs is called **debugging**.  Over
        the next couple levels you are going to work on your debugging skills.\n\n#
        Do This\n\n<img src=\"https://images.code.org/9c4d90a5a8293c5aee56e6cb81dae689-image-1500915264278.52.56
        AM.png\" style=\"float:right;border:black solid 5px;\">\n\n-   Look at the
        web page code, and discuss with your partner what is causing the following
        two bugs:\n    -   The heading is not big enough.\n    -   The second item
        on the list doesn't have a number.\n-   Fix all the bugs in the code so that
        the final result matches the image on the right."
      CSD U2 Debugging 2: |-
        # Debugging

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What is a bug?</strong>

        </summary>

        Bugs are mistakes in code which causes it not to work as planned.

        </details>
        <details>
        <summary><strong>What is debugging?</strong>
        </summary>

        Debugging is the process of finding and fixing bugs.  Debugging is a problem solving process so use your problem solving steps as you try to debug.

        </details>
        <details>
        <summary><strong>What are some examples of bugs?</strong>
        </summary>

        Bugs can be anything that causes code not to work as planned.  Some examples are misspelling, putting code in the wrong place, using the wrong tag, or forgetting to close a tag.

        </details>
        </div>

        More debugging practice!  This page is a little more challenging to debug than the last one.

        # Do This

        <img src="https://images.code.org/61190513dba270c731251df168b98f80-image-1474383960371.02.38 AM.png" style="float:right;border:5px black solid;width:250px">

        -   Discuss with your partner what you think the bugs are in this page.
        -   Find and fix all the bugs so that your page matches the one on the right.
      CSD U2 Debugging 2_2018: "# Debugging\n\n<div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary><strong>What is a bug?</strong></summary>\nBugs
        are mistakes in code which causes it not to work as planned.\n</details>\n\n<details>\n<summary><strong>What
        is debugging?</strong></summary>\nDebugging is the process of finding and
        fixing bugs.  Debugging is a problem solving process so use your problem solving
        steps as you try to debug. \n</details>\n\n<details>\n<summary><strong>What
        are some examples of bugs?</strong></summary>\n\nBugs can be anything that
        causes code not to work as planned.  Some examples are misspelling, putting
        code in the wrong place, using the wrong tag, or forgetting to close a tag.\n\n</details>\n</div>\n\nMore
        debugging practice!  This page is a little more challenging to debug than
        the last one.\n\n# Do This\n\n<img src=\"https://images.code.org/61190513dba270c731251df168b98f80-image-1474383960371.02.38
        AM.png\" style=\"float:right;border:5px black solid;width:250px\">\n\n-   Discuss
        with your partner what you think the bugs are in this page.\n-   Find and
        fix all the bugs so that your page matches the one on the right."
      CSD U2 Debugging 2_2019: "# Debugging\n\n<div class=\"no-pullthrough\" style=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n\n::: details [**What is a bug?**]\nBugs are mistakes in
        code which causes it not to work as planned.\n:::\n\n::: details [**What is
        debugging?**]\nDebugging is the process of finding and fixing bugs.  Debugging
        is a problem solving process so use your problem solving steps as you try
        to debug. \n:::\n\n::: details [**What are some examples of bugs?**]\n\nBugs
        can be anything that causes code not to work as planned.  Some examples are
        misspelling, putting code in the wrong place, using the wrong tag, or forgetting
        to close a tag.\n\n:::\n\n</div>\n\nMore debugging practice!  This page is
        a little more challenging to debug than the last one.\n\n# Do This\n\n<img
        src=\"https://images.code.org/61190513dba270c731251df168b98f80-image-1474383960371.02.38
        AM.png\" style=\"float:right;border:5px black solid;width:250px\">\n\n-   Discuss
        with your partner what you think the bugs are in this page.\n-   Find and
        fix all the bugs so that your page matches the one on the right."
      CSD U2 Debugging 3: "# Debugging\n\n<div style=\"float: right; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>What
        is a bug?</strong>\n</summary>\n\nBugs are mistakes in code which causes it
        not to work as planned.\n\n</details>\n<details>\n<summary><strong>What is
        debugging?</strong>\n</summary>\n\nDebugging is the process of finding and
        fixing bugs.  Debugging is a problem solving process so use your problem solving
        steps as you try to debug. \n\n</details>\n<details>\n<summary><strong>What
        are some examples of bugs?</strong>\n</summary>\n\nBugs can be anything that
        causes code not to work as planned.  Some examples are misspelling, putting
        code in the wrong place, using the wrong tag, or forgetting to close a tag.\n\n</details>\n<details>\n<summary><strong>Why
        does the inspector sometimes stop working?</strong>\n</summary>\n\nSometimes
        there are so many bugs in the HTML that the inspector cannot read the code
        properly and it stops working completely, even on the parts of the code that
        are correct.  Once the bugs are corrected, the inspector will work again.\n\n</details>\n</div>\n\nThis
        page has images in it. Images make finding bugs a little more tricky. Can
        you debug this page?\n\n# Do This\n\n-   Discuss with your partner what is
        causing the bugs in this page.\n-   Fix the bugs so that your page matches
        the target page shown below.\n\n![](<https://images.code.org/4a9ac71bcf6c04775df791516562cd47-image-1508779270522.56.24
        AM.png>)"
      CSD U2 Debugging 3_2018: "# Debugging\n\n<div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary>\n<strong>What is a bug?</strong>\n</summary>\nBugs
        are mistakes in code which causes it not to work as planned.\n</details>\n<details>\n<summary>\n<strong>What
        is debugging?</strong>\n</summary>\nDebugging is the process of finding and
        fixing bugs.  Debugging is a problem solving process so use your problem solving
        steps as you try to debug. \n</details>\n<details>\n<summary>\n<strong>What
        are some examples of bugs?</strong>\n</summary>\nBugs can be anything that
        causes code not to work as planned.  Some examples are misspelling, putting
        code in the wrong place, using the wrong tag, or forgetting to close a tag.\n</details>\n<details>\n<summary>\n<strong>Why
        does the inspector sometimes stop working?</strong>\n</summary>\n\nSometimes
        there are so many bugs in the HTML that the inspector cannot read the code
        properly and it stops working completely, even on the parts of the code that
        are correct.  Once the bugs are corrected, the inspector will work again.\n\n</details>\n</div>\n\nThis
        page has images in it. Images make finding bugs a little more tricky. Can
        you debug this page?\n\n# Do This\n\n-   Discuss with your partner what is
        causing the bugs in this page.\n-   Fix the bugs so that your page matches
        the target page shown below.\n\n![](<https://images.code.org/4a9ac71bcf6c04775df791516562cd47-image-1508779270522.56.24
        AM.png>)"
      CSD U2 Debugging 3_2019: "# Debugging\n\n<div class=\"no-pullthrough\" style=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n\n::: details [**What is a bug?**]\nBugs are mistakes in
        code which causes it not to work as planned.\n:::\n\n::: details [**What is
        debugging?**]\nDebugging is the process of finding and fixing bugs.  Debugging
        is a problem solving process so use your problem solving steps as you try
        to debug. \n:::\n\n::: details [**What are some examples of bugs?**]\n\nBugs
        can be anything that causes code not to work as planned.  Some examples are
        misspelling, putting code in the wrong place, using the wrong tag, or forgetting
        to close a tag.\n\n:::\n\n::: details [**Why does the inspector sometimes
        stop working?**]\n\nSometimes there are so many bugs in the HTML that the
        inspector cannot read the code properly and it stops working completely, even
        on the parts of the code that are correct.  Once the bugs are corrected, the
        inspector will work again.\n\n:::\n\n</div>\n\nThis page has images in it.
        Images make finding bugs a little more tricky. Can you debug this page?\n\n#
        Do This\n\n-   Discuss with your partner what is causing the bugs in this
        page.\n-   Fix the bugs so that your page matches the target page shown below.\n\n![](<https://images.code.org/4a9ac71bcf6c04775df791516562cd47-image-1508779270522.56.24
        AM.png>)"
      CSD U2 Debugging 4: |-
        # Formatting

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What is whitespace?</strong>
        </summary>

        Whitespace refers to any character that shows up as a blank space on the screen, such as a space, a tab, or a new line. Whitespace helps separate different parts of the document to make it easier to read.  For example, in HTML code new elements are usually put on a new line, even though it doesn't make any difference in how the page is displayed.

        </details>
        <details>
        <summary><strong>What is indentation?</strong>
        </summary>

        Indentation is the placement of text farther to the right, or left, to separate it from surrounding text.  Indentation helps to convey the program's structure.  In HTML, elements that are inside other elements are usually indented.  Here is an example:

        <pre>
           &lt;body&gt;
              &lt;p&gt;This paragraph is inside the "body" element.&lt;/p&gt;
           &lt;/body&gt;
        </pre>

        </details>
        <details>
        <summary><strong>What is formatting?</strong>
        </summary>

        Formatting is arranging text in a way that makes it easier to understand.  HTML is usually formatted using indentation.  That means that elements that are inside other elements are further to the right in code.  Here is an example:

        <pre>
           &lt;body&gt;
              &lt;p&gt;This paragraph is inside the "body" element.&lt;/p&gt;
           &lt;/body&gt;
        </pre>

        </details>
        <details>
        <summary><strong>Why does the inspector sometimes stop working?</strong>
        </summary>

        Sometimes there are so many bugs in the HTML that the inspector cannot read the code properly and it stops working completely, even on the parts of the code that are correct.  Once the bugs are corrected, the inspector will work again.

        </details>
        </div>

        The way that you write your code can make it easier or harder to find bugs.  If you use **whitespace** and **indentation**, it will make it easier to read and easier to fix.

        # Do This

        -   Look at the code with your partner and discuss how you should format the code to make it easier to read.
        -   Make the code easier to read by adding new lines and indentation.
        -   Fix all the bugs so that your page matches the target page below.

        ![](<https://images.code.org/7e194db101f71235340fc075bf09776c-image-1508777739384.46.13 AM.png>)
      CSD U2 Debugging 4_2018: |-
        # Formatting

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What is whitespace?</strong></summary>
        Whitespace refers to any character that shows up as a blank space on the screen, such as a space, a tab, or a new line. Whitespace helps separate different parts of the document to make it easier to read.  For example, in HTML code new elements are usually put on a new line, even though it doesn't make any difference in how the page is displayed.
        </details>
        <details>
        <summary><strong>What is indentation?</strong></summary>
        Indentation is the placement of text farther to the right, or left, to separate it from surrounding text.  Indentation helps to convey the program's structure.  In HTML, elements that are inside other elements are usually indented.  Here is an example:
        <pre>
           &lt;body&gt;
              &lt;p&gt;This paragraph is inside the "body" element.&lt;/p&gt;
           &lt;/body&gt;
        </pre>
        </details>
        <details>
        <summary><strong>What is formatting?</strong></summary>
        Formatting is arranging text in a way that makes it easier to understand.  HTML is usually formatted using indentation.  That means that elements that are inside other elements are further to the right in code.  Here is an example:
        <pre>
           &lt;body&gt;
              &lt;p&gt;This paragraph is inside the "body" element.&lt;/p&gt;
           &lt;/body&gt;
        </pre>
        </details>
        <details>
        <summary><strong>Why does the inspector sometimes stop working?</strong></summary>

        Sometimes there are so many bugs in the HTML that the inspector cannot read the code properly and it stops working completely, even on the parts of the code that are correct.  Once the bugs are corrected, the inspector will work again.

        </details>
        </div>

        The way that you write your code can make it easier or harder to find bugs.  If you use **whitespace** and **indentation**, it will make it easier to read and easier to fix.

        # Do This

        -   Look at the code with your partner and discuss how you should format the code to make it easier to read.
        -   Make the code easier to read by adding new lines and indentation.
        -   Fix all the bugs so that your page matches the target page below.

        ![](<https://images.code.org/7e194db101f71235340fc075bf09776c-image-1508777739384.46.13 AM.png>)
      CSD U2 Debugging 4_2019: |-
        # Formatting

        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        ::: details [**What is whitespace?**]
        Whitespace refers to any character that shows up as a blank space on the screen, such as a space, a tab, or a new line. Whitespace helps separate different parts of the document to make it easier to read.  For example, in HTML code new elements are usually put on a new line, even though it doesn't make any difference in how the page is displayed.
        :::

        ::: details [**What is indentation?**]
        Indentation is the placement of text farther to the right, or left, to separate it from surrounding text.  Indentation helps to convey the program's structure.  In HTML, elements that are inside other elements are usually indented.  Here is an example:

               <body>
                  <p>This paragraph is inside the "body" element.</p>
               </body>

        :::

        ::: details [**What is formatting?**]
        Formatting is arranging text in a way that makes it easier to understand.  HTML is usually formatted using indentation.  That means that elements that are inside other elements are further to the right in code.  Here is an example:

               <body>
                  <p>This paragraph is inside the "body" element.</p>
               </body>

        :::

        ::: details [**Why does the inspector sometimes stop working?**]

        Sometimes there are so many bugs in the HTML that the inspector cannot read the code properly and it stops working completely, even on the parts of the code that are correct.  Once the bugs are corrected, the inspector will work again.

        :::

        </div>

        The way that you write your code can make it easier or harder to find bugs.  If you use **whitespace** and **indentation**, it will make it easier to read and easier to fix.

        # Do This

        -   Look at the code with your partner and discuss how you should format the code to make it easier to read.
        -   Make the code easier to read by adding new lines and indentation.
        -   Fix all the bugs so that your page matches the target page below.

        ![](<https://images.code.org/7e194db101f71235340fc075bf09776c-image-1508777739384.46.13 AM.png>)
      CSD U2 HTML Adding Paragraphs: |-
        # Add Text to the Body

        When you start any Web Lab project, it will automatically add `<!DOCTYPE>`, `<html>`, `<head>`, and `<body>` tags to your project. When you add content to your projects, you'll need to do it between the `<body>` and `</body>` tags because it should be part of the body of your webpage.

        # Do This

        -   Write three separate sentences about any topic you like inside of the body tags of your web page.
        -   Hit "Refresh and Save" if you don't see the changes in the preview area.
        -   Compare your work with a neighbor. Make sure you're placing code in the same place.
      CSD U2 HTML Adding Paragraphs pt 2: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What is a paragraph element?</strong></summary>

        Paragraphs are marked by opening(`<p>`) and closing(`</p>`) tags. Paragraphs in HTML can be any length of text from one word to a bunch of sentences. Paragraphs group together sets of sentences and put some space between that group of text and the next group of text.

        </details>
        <details>
        <summary><strong>How do I make multiple paragraphs?</strong>
        </summary>

        Here's an example of several paragraph tags in a row. This code would be placed inside of the body of your web page.

            <p>This is a paragraph. It has two sentences.</p>
            <p>This is another paragraph.</p>

        </details>
        </div>

        # Use Paragraph Tags

        The `<p>` tag or "paragraph" tag is placed around text to indicate that it is part of a paragraph. Placing text in a paragraph tag lets the computer know that it should be displayed differently, usually just by spacing it out from other text.

        # Do This

        -   Place the text you just wrote inside at least two separate paragraphs by surrounding it with `<p>` and `</p>` tags
        -   Compare the results with a neighbor. What has changed about the way your text is displayed?
      CSD U2 HTML Adding Paragraphs pt 2_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        **What is a paragraph element?**

        </summary>

        Paragraphs are marked by opening(`<p>`) and closing(`</p>`) tags. Paragraphs in HTML can be any length of text from one word to a bunch of sentences. Paragraphs group together sets of sentences and put some space between that group of text and the next group of text.

        </details>
        <details>
        <summary>

        **How do I make multiple paragraphs?**

        </summary>

        Here's an example of several paragraph tags in a row. This code would be placed inside of the body of your web page.

            <p>This is a paragraph. It has two sentences.</p>
            <p>This is another paragraph.</p>

        </details>
        </div>

        # Use Paragraph Tags

        The `<p>` `</p>` tags or "paragraph" start and end tags are placed around text to indicate that it is part of a paragraph. Placing text between paragraph start and end tags lets the computer know that it should be displayed differently, usually just by spacing it out from other text.

        # Do This

        -   Place the text you just wrote inside at least two separate paragraphs by surrounding it with `<p>` and `</p>` tags
        -   Compare the results with a neighbor. What has changed about the way your text is displayed?
      CSD U2 HTML Adding Paragraphs pt 2_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        ::: details [**What is a paragraph element?**]

        Paragraphs are marked by opening(`<p>`) and closing(`</p>`) tags. Paragraphs in HTML can be any length of text from one word to a bunch of sentences. Paragraphs group together sets of sentences and put some space between that group of text and the next group of text.

        :::

        ::: details [**How do I make multiple paragraphs?**]

        Here's an example of several paragraph tags in a row. This code would be placed inside of the body of your web page.

            <p>This is a paragraph. It has two sentences.</p>
            <p>This is another paragraph.</p>

        :::

        </div>

        # Use Paragraph Tags

        The `<p>` `</p>` tags or "paragraph" start and end tags are placed around text to indicate that it is part of a paragraph. Placing text between paragraph start and end tags lets the computer know that it should be treated differently, often just spacing it out from other text.

        # Do This

        -   Place the text you just wrote inside at least two separate paragraphs by surrounding it with `<p>` and `</p>` tags
        -   Compare the results with a neighbor. What has changed about the way your text is displayed?
      CSD U2 HTML Adding Paragraphs_2018: |-
        # Add Text to the Body

        When you start any Web Lab project, it will automatically add `<!DOCTYPE>`, `<html>`, `<head>`, and `<body>` tags to your project. When you add content to your projects, you'll need to do it between the `<body>` and `</body>` tags because it should be part of the body of your webpage.

        # Do This

        -   Write three separate sentences about any topic you like inside of the body tags of your web page.
        -   Hit "Refresh and Save" if you don't see the changes in the preview area.
        -   Compare your work with a neighbor. Make sure you're placing code in the same place.
      CSD U2 HTML Adding Paragraphs_2019: |-
        # Add Text to the Body

        When you start any Web Lab project, it will automatically add `<!DOCTYPE>`, `<html>`, `<head>`, and `<body>` tags to your project. When you add content to your projects, you'll need to do it between the `<body>` and `</body>` tags because it should be part of the body of your webpage.

        # Do This

        -   Write three separate sentences about any topic you like inside of the body tags of your web page.
        -   Hit "Refresh and Save" if you don't see the changes in the preview area.
        -   Compare your work with a neighbor. Make sure you're placing code in the same place.
      CSD U2 HTML Debug Paragraphs: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What is a paragraph element?</strong>
        </summary>
        Paragraphs are marked by opening( `<p>` ) and closing( `</p>` ) tags. Paragraphs in HTML can be any length of text from one word to a bunch of sentences. Paragraphs group together sets of sentences and put some space between that group of text and the next group of text.
        </details>
        <details>
        <summary>
        <strong>Why does HTML seem to work even when it's broken?</strong>
        </summary>
        HTML is read by your web browser to generate web pages. Since people often make little mistakes when writing their web pages, browsers are programmed to make a best guess of what you intended to do. Sometimes different browsers are even programmed to make different guesses! The only way to ensure your code looks like you intend is make sure you're always using tags correctly.
        </details>
        <details>
        <summary>
        <strong>Why does the code sometimes turn pink?</strong>
        </summary>

        Web Lab is programmed to automatically detect some mistakes in HTML.  When it notices a mistake, it turns that code pink.  The mistake might be in pink, or it might be somewhere before the pink code.  You'll need to carefully debug to find your mistake.

        </details>
        </div>

        # Debug: Fix the Broken Tags

        This simple web page has some issues which are preventing the content from being displayed correctly. Identify and fix the issues. This practice is also called "debugging" your code.

        # Do This

        -   Fix the broken code so that the web page displays correctly
        -   Compare the problems you fixed with a neighbor
      CSD U2 HTML Debug Paragraphs_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        <strong>What is a paragraph element?</strong>

        </summary>

        Paragraphs are marked by opening( `<p>` ) and closing( `</p>` ) tags. Paragraphs in HTML can be any length of text from one word to a bunch of sentences. Paragraphs group together sets of sentences and put some space between that group of text and the next group of text.

        </details>
        <details>
        <summary>

        <strong>Why does HTML seem to work even when it's broken?</strong>

        </summary>

        HTML is read by your web browser to generate web pages. Since people often make little mistakes when writing their web pages, browsers are programmed to make a best guess of what you intended to do. Sometimes different browsers are even programmed to make different guesses! The only way to ensure your code looks like you intend is make sure you're always using tags correctly.

        </details>
        <details>
        <summary>

        <strong>Why does the code sometimes turn pink?</strong>

        </summary>

        Web Lab is programmed to automatically detect some mistakes in HTML.  When it notices a mistake, it turns that code pink.  The mistake might be in pink, or it might be somewhere before the pink code.  You'll need to carefully debug to find your mistake.

        </details>
        </div>

        # Debug: Fix the Broken Tags

        This simple web page has some issues which are preventing the content from being displayed correctly. Identify and fix the issues. This practice is also called "debugging" your code.

        # Do This

        -   Fix the broken code so that the web page displays correctly
        -   Compare the problems you fixed with a neighbor
      CSD U2 HTML Debug Paragraphs_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**What is a paragraph element?**]

        Paragraphs are marked by opening( `<p>` ) and closing( `</p>` ) tags. Paragraphs in HTML can be any length of text from one word to a bunch of sentences. Paragraphs group together sets of sentences and put some space between that group of text and the next group of text.

        :::

        ::: details [**Why does HTML seem to work even when it's broken?**]

        HTML is read by your web browser to generate web pages. Since people often make little mistakes when writing their web pages, browsers are programmed to make a best guess of what you intended to do. Sometimes different browsers are even programmed to make different guesses! The only way to ensure your code looks like you intend is make sure you're always using tags correctly.

        :::

        ::: details [**Why does the code sometimes turn pink?**]

        Web Lab is programmed to automatically detect some mistakes in HTML.  When it notices a mistake, it turns that code pink.  The mistake might be in pink, or it might be somewhere before the pink code.  You'll need to carefully debug to find your mistake.

        :::

        </div>

        # Debug: Fix the Broken Tags

        This simple web page has some issues which are preventing the content from being displayed correctly. Identify and fix the issues. This practice is also called "debugging" your code.

        # Do This

        -   Fix the broken code so that the web page displays correctly
        -   Compare the problems you fixed with a neighbor
      CSD U2 Heading Demo: "# Headings\n\n<div style=\"float: right; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>What
        are headings?</strong></summary>\n\nHeadings are the different sized section
        titles throughout a web page. Headings add structure to your web page by breaking
        it up so its easier for a user to read.\n\n</details>\n<details>\n<summary><strong>How
        do I make different sized headings?</strong></summary>\n\nHeadings come in
        6 different sizes. So far you have primarily used the biggest one: \\<h1>.
        The number '1' in the HTML tag designates that this is the biggest heading.
        The smallest heading is \\<h6>. You can also try the \\<h2>, \\<h3>, \\<h4>,
        and \\<h5> tags, which get smaller as the number gets larger.\n\n</h1>\n</details>\n<details>\n<summary><strong>What
        is HTML?</strong></summary>\n\nHTML stands for Hypertext Markup Language.
        HTML is used to add structure to the content of a web page. HTML uses tags
        to specify where certain structures start and end. These tags are sets of
        characters not found in the English language so that the content and structure
        can be differentiated. \n\n</details>\n<details>\n<summary><strong>What is
        an HTML element?</strong></summary>\n\nAn HTML element is a piece of a website
        that is marked by a start tag and sometimes closed with an end tag. The element
        also includes the content inside the tags. For example: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"
        style=\"width:500px\">\n\n</details>\n<details>\n<summary><strong>What is
        an HTML tag?</strong></summary>\n\nAn HTML tag is the special set of characters
        that tells the machine where the start or end of an HTML element is and what
        type it is.\n\n</details>\n</div>\n\nSo far, you've organized your content
        into paragraphs.  Another way HTML allows you to organize your code is by
        using **headings**.  A heading is a short piece of text that goes at the top
        of a section of content, like a title.\n\nDo This:\n\n-   Find the headings
        in the web page below and use the Inspector Tool to see the code that makes
        them.\n-   Make sure you and your partner agree on what the tags do.\n-   Change
        the code so that \"Drawing\" and \"2 years\" match the headings on the rest
        of the page."
      CSD U2 Heading Demo_2018: "# Headings\n\n<div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary>\n\n**What are headings?**\n\n</summary>\nHeadings
        are the different sized section titles throughout a web page. Headings add
        structure to your web page by breaking it up so its easier for a user to read.\n</details>\n<details>\n<summary>\n\n**How
        do I make different sized headings?**\n\n</summary>\nHeadings come in 6 different
        sizes. So far you have primarily used the biggest one: &lt;h1&gt;. The number
        '1' in the HTML tag designates that this is the biggest heading. The smallest
        heading is &lt;h6&gt;. You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;,
        and &lt;h5&gt; tags, which get smaller as the number gets larger.\n</h1>\n</details>\n<details>\n<summary>\n\n**What
        is HTML?**\n\n</summary>\nHTML stands for Hypertext Markup Language. HTML
        is used to add structure to the content of a web page. HTML uses tags to specify
        where certain structures start and end. These tags are sets of characters
        not found in the English language so that the content and structure can be
        differentiated. \n</details>\n<details>\n<summary>\n\n**What is an HTML element?**\n\n</summary>\nAn
        HTML element is a piece of a website that is marked by a start tag and sometimes
        closed with an end tag. The element also includes the content inside the tags.
        For example: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"
        style=\"width:500px\">\n</details>\n<details>\n<summary>\n\n**What is an HTML
        tag?**\n\n</summary>\n\nAn HTML tag is the special set of characters that
        tells the machine where the start or end of an HTML element is and what type
        it is.\n\n</details>\n</div>\n\nSo far, you've organized your content into
        paragraphs.  Another way HTML allows you to organize your code is by using
        **headings**.  A heading is a short piece of text that goes at the top of
        a section of content, like a title.\n\nDo This:\n\n-   Find the headings in
        the web page below and use the Inspector Tool to see the code that makes them.\n-
        \  Make sure you and your partner agree on what the tags do.\n-   Change the
        code so that \"Drawing\" and \"2 years\" match the headings on the rest of
        the page."
      CSD U2 Heading Demo_2019: "# Headings\n\n<div class=\"no-pullthrough\" style=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n\n:::
        details [**What are headings?**]\nHeadings are the different sized section
        titles throughout a web page. Headings add structure to your web page by breaking
        it up so it's easier for a user to read.\n:::\n\n::: details [**How do I make
        different sized headings?**]\nHeadings come in 6 different sizes. So far you
        have primarily used the biggest one: `<h1>`. The number '1' in the HTML tag
        designates that this is the biggest heading. The smallest heading is `<h6>`.
        You can also try the `<h2>`, `<h3>`, `<h4>`, and `<h5>` tags, which get smaller
        as the number gets larger.\n:::\n\n::: details [**What is HTML?**]\nHTML stands
        for Hypertext Markup Language. HTML is used to add structure to the content
        of a web page. HTML uses tags to specify where certain structures start and
        end. These tags are sets of characters not found in the English language so
        that the content and structure can be differentiated. \n:::\n\n::: details
        [**What is an HTML element?**]\nAn HTML element is a piece of a website that
        is marked by a start tag and sometimes closed with an end tag. The element
        also includes the content inside the tags. For example: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"
        style=\"width:500px\">\n:::\n\n::: details [**What is an HTML tag?**]\n\nAn
        HTML tag is the special set of characters that tells the machine where the
        start or end of an HTML element is and what type it is.\n\n:::\n\n</div>\n\nSo
        far, you've organized your content into paragraphs.  Another way HTML allows
        you to organize your code is by using **headings**.  A heading is a short
        piece of text that goes at the top of a section of content, like a title.\n\n#
        Do This:\n\n-   Find the headings in the web page below and use the Inspector
        Tool to see the code that makes them.\n-   Make sure you and your partner
        agree on what the tags do.\n-   Change the code so that \"Drawing\" and \"2
        years\" match the headings on the rest of the page."
      CSD U2 Heading Sizes: "# Heading Sizes\n\n<div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary>\n<strong>What are headings?</strong>\n\n</summary>\nHeadings
        are the different sized section titles throughout a web page. Headings add
        structure to your web page by breaking it up so its easier for a user to read.\n</details>\n<details>\n<summary><strong>How
        do I make different sized headings?</strong>\n\n</summary>\nHeadings come
        in 6 different sizes.  The most common heading is &lt;h1&gt; The number 1
        in the HTML tag designates that this is the biggest heading. The smallest
        heading is &lt;h6&gt;. You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;,
        and &lt;h5&gt; tags which get smaller as the number gets larger.\n</details>\n<details>\n<summary><strong>What
        is HTML?</strong>\n\n</summary>\nHTML stands for Hypertext Markup Language.
        HTML is used to add structure to the content of a web page. HTML uses tags
        to specify where certain structures start and end. These tags are sets of
        characters not found in the English language so that the content and structure
        can be differentiated. \n</details>\n<details>\n<summary><strong>What is an
        HTML element?</strong>\n\n</summary>\nAn HTML element is a piece of a website
        that is marked by a start tag and sometimes closed with an end tag. The element
        also includes the content inside the tags. For example: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"
        style=\"width:500px\">\n</details>\n<details>\n<summary><strong>What is an
        HTML tag?</strong>\n\n</summary>\n\nAn HTML tag is the special set of characters
        that tells the machine where the start or end of an HTML element is and what
        type it is.\n\n</details>\n</div>\n\nHeadings can come in different sizes.
        \ In this page, there are six different sized headings, but they are all mixed
        up.  Can you and your partner figure out how to fix them?\n\nDo This:\n\n-
        \  Use the inspector tool to figure out what makes the headings different
        sizes\n-   Make sure you and your partner agree on what the different heading
        tags do.\n-   Change the tags so that the headings are in order from biggest
        to smallest, and the text says the correct size, as in the picture below.
        \n\n<img src=\"https://images.code.org/762022f97a355dd63dce5ecc8d0127aa-image-1493161154608.58.15
        PM.png\" style=\"width:100px; float:left\">"
      CSD U2 Heading Sizes_2018: "# Heading Sizes\n\n<div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary>\n\n**What are headings?**\n\n</summary>\nHeadings
        are the different sized section titles throughout a web page. Headings add
        structure to your web page by breaking it up so its easier for a user to read.\n</details>\n<details>\n<summary>\n\n**How
        do I make different sized headings?**\n\n</summary>\nHeadings come in 6 different
        sizes.  The most common heading is &lt;h1&gt; The number 1 in the HTML tag
        designates that this is the biggest heading. The smallest heading is &lt;h6&gt;.
        You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, and &lt;h5&gt; tags
        which get smaller as the number gets larger.\n</details>\n<details>\n<summary>\n\n**What
        is HTML?**\n\n</summary>\nHTML stands for Hypertext Markup Language. HTML
        is used to add structure to the content of a web page. HTML uses tags to specify
        where certain structures start and end. These tags are sets of characters
        not found in the English language so that the content and structure can be
        differentiated. \n</details>\n<details>\n<summary>\n\n**What is an HTML element?**\n\n</summary>\nAn
        HTML element is a piece of a website that is marked by a start tag and sometimes
        closed with an end tag. The element also includes the content inside the tags.
        For example: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"
        style=\"width:500px\">\n</details>\n<details>\n<summary>\n\n**What is an HTML
        tag?**\n\n</summary>\n\nAn HTML tag is the special set of characters that
        tells the machine where the start or end of an HTML element is and what type
        it is.\n\n</details>\n</div>\n\nHeadings can come in different sizes.  In
        this page, there are six different sized headings, but they are all mixed
        up.  Can you and your partner figure out how to fix them?\n\nDo This:\n\n-
        \  Use the inspector tool to figure out what makes the headings different
        sizes\n-   Make sure you and your partner agree on what the different heading
        tags do.\n-   Change the tags so that the headings are in order from biggest
        to smallest, and the text says the correct size, as in the picture below.
        \n\n<img src=\"https://images.code.org/762022f97a355dd63dce5ecc8d0127aa-image-1493161154608.58.15
        PM.png\" style=\"width:100px; float:left\">"
      CSD U2 Heading Sizes_2019: "# Heading Sizes\n\n<div class=\"no-pullthrough\"
        style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px\">\n\n::: details [**What are headings?**]\nHeadings
        are the different sized section titles throughout a web page. Headings add
        structure to your web page by breaking it up so it's easier for a user to
        read.\n:::\n\n::: details [**How do I make different sized headings?**]\nHeadings
        come in 6 different sizes.  The most common heading is `<h1>` The number 1
        in the HTML tag designates that this is the biggest heading. The smallest
        heading is `<h6>`. You can also try the `<h2>`, `<h3>`, `<h4>`, and `<h5>`
        tags which get smaller as the number gets larger.\n:::\n\n::: details [**What
        is HTML?**]\nHTML stands for Hypertext Markup Language. HTML is used to add
        structure to the content of a web page. HTML uses tags to specify where certain
        structures start and end. These tags are sets of characters not found in the
        English language so that the content and structure can be differentiated.
        \n:::\n\n::: details [**What is an HTML element?**]\nAn HTML element is a
        piece of a website that is marked by a start tag and sometimes closed with
        an end tag. The element also includes the content inside the tags. For example:
        \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"
        style=\"width:500px\">\n:::\n\n::: details [**What is an HTML tag?**]\n\nAn
        HTML tag is the special set of characters that tells the machine where the
        start or end of an HTML element is and what type it is.\n\n:::\n\n</div>\n\nHeadings
        can come in different sizes.  In this page, there are six different sized
        headings, but they are all mixed up.  Can you and your partner figure out
        how to fix them?\n\nDo This:\n\n-   Use the inspector tool to figure out what
        makes the headings different sizes\n-   Make sure you and your partner agree
        on what the different heading tags do.\n-   Change the tags so that the headings
        are in order from biggest to smallest, and the text says the correct size,
        as in the picture below. \n\n<img src=\"https://images.code.org/762022f97a355dd63dce5ecc8d0127aa-image-1493161154608.58.15
        PM.png\" style=\"width:100px; float:left\">"
      CSD U2 Heading Test: "# Headings and Paragraphs\n\n<div style=\"float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary><strong>What is a paragraph element?</strong>\n</summary>\n\nParagraphs
        are marked by opening(`<p>`) and closing(`</p>`) tags as well. Paragraphs
        in HTML can be any length of text from one word to a bunch of sentences. All
        of your text in your web page should be contained in an HTML element (headings
        or paragraphs). Paragraphs group together sets of sentences and put some space
        between that group of text and the next group of text.\n\n</details>\n<details>\n<summary><strong>How
        do I create multiple paragraphs?</strong>\n</summary>\n\nParagraphs are marked
        by opening(`<p>`) and closing(`</p>`) tags as well. To create more than one
        paragraph you will want multiple sets of opening and closing `<p>` tags. For
        example\n\n<pre>\n&lt;p&gt;\n  This is a paragraph.\n&lt;/p&gt;\n&lt;p&gt;\n
        \ This is another paragraph.\n&lt;/p&gt;\n</pre>\n\n</details>\n<details>\n<summary><strong>What
        are headings?</strong>\n</summary>\n\nHeadings are the different sized section
        titles throughout a web page. Headings add structure to your web page by breaking
        it up so its easier for a user to read.\n\n</details>\n<details>\n<summary><strong>How
        do I make different sized headings?</strong>\n</summary>\n\nHeadings come
        in 6 different sizes. So far you have primarily used the biggest one \\<h1>.
        The number 1 in the HTML tag designates that this is the biggest heading.
        The smallest heading is \\<h6>. You can also try the \\<h2>, \\<h3>, \\<h4>,
        and \\<h5> tags which get smaller as the number gets larger.\n\n</details>\n<details>\n<summary><strong>What
        is HTML?</strong>\n</summary>\n\nHTML stands for Hypertext Markup Language.
        HTML is used to add structure to the content of a web page. HTML uses tags
        to specify where certain structures start and end. These tags are sets of
        characters not found in the English language so that the content and structure
        can be differentiated. \n\n</details>\n<details>\n<summary><strong>What is
        an HTML element?</strong>\n</summary>\n\nAn HTML element is a piece of a website
        that is marked by a start tag and sometimes closed with an end tag. The element
        also includes the content inside the tags. For example:\n\n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"
        style=\"width:500px\">\n\n</details>\n<details>\n<summary><strong>What is
        an HTML tag?</strong>\n</summary>\n\nAn HTML tag is the special set of characters
        that tells the machine where the start or end of an HTML element is and what
        type it is.\n\n</details>\n</div>\n\nThe author of this page added in a lot
        of content, but did not think about structure.  All of the text is mashed
        together.\n\nDo This:\n\n-   Look through the content with your partner and
        decide what you think the best structure should be.\n-   Use your heading
        and paragraph tags to code the structure into the page."
      CSD U2 Heading Test_2018: "# Headings and Paragraphs\n\n<div style=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary><strong>What is a paragraph element?</strong></summary>\n\nParagraphs
        are marked by opening(`<p>`) and closing(`</p>`) tags as well. Paragraphs
        in HTML can be any length of text from one word to a bunch of sentences. All
        of your text in your web page should be contained in an HTML element (headings
        or paragraphs). Paragraphs group together sets of sentences and put some space
        between that group of text and the next group of text.\n\n</details>\n<details>\n<summary>\n<strong>How
        do I create multiple paragraphs?</strong>\n\n</summary>\n\nParagraphs are
        marked by opening (`<p>`) and closing (`</p>`) tags as well. To create more
        than one paragraph you will want multiple sets of opening and closing `<p>`
        tags. For example\n\n<pre>\n    &lt;p&gt;\n        This is a paragraph.\n
        \   &lt;/p&gt;\n    &lt;p&gt;\n        This is another paragraph.\n    &lt;/p&gt;\n</pre>\n\n</details>\n<details>\n<summary>\n<strong>What
        are headings?</strong>\n</summary>\nHeadings are the different sized section
        titles throughout a web page. Headings add structure to your web page by breaking
        it up so its easier for a user to read.\n</details>\n<details>\n<summary>\n<strong>How
        do I make different sized headings?</strong>\n</summary>\nHeadings come in
        6 different sizes. So far you have primarily used the biggest one &lt;h1&gt;.
        The number 1 in the HTML tag designates that this is the biggest heading.
        The smallest heading is &lt;h6&gt;. You can also try the &lt;h2&gt;, &lt;h3&gt;,
        &lt;h4&gt;, and &lt;h5&gt; tags which get smaller as the number gets larger.\n</details>\n<details>\n<summary>\n<strong>What
        is HTML?</strong>\n</summary>\nHTML stands for Hypertext Markup Language.
        HTML is used to add structure to the content of a web page. HTML uses tags
        to specify where certain structures start and end. These tags are sets of
        characters not found in the English language so that the content and structure
        can be differentiated. \n</details>\n<details>\n<summary>\n<strong>What is
        an HTML element?</strong>\n</summary>\nAn HTML element is a piece of a website
        that is marked by a start tag and sometimes closed with an end tag. The element
        also includes the content inside the tags. For example: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"
        style=\"width:500px\">\n</details>\n<details>\n<summary>\n<strong>What is
        an HTML tag?</strong>\n</summary>\n\nAn HTML tag is the special set of characters
        that tells the machine where the start or end of an HTML element is and what
        type it is.\n\n</details>\n</div>\n\nThe author of this page added in a lot
        of content, but did not think about structure.  All of the text is mashed
        together.\n\nDo This:\n\n-   Look through the content with your partner and
        decide what you think the best structure should be.\n-   Use your heading
        and paragraph tags to code the structure into the page."
      CSD U2 Heading Test_2019: "# Headings and Paragraphs\n\n<div class=\"no-pullthrough\"
        style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px\">\n\n::: details [**What is a paragraph element?**]\n\nParagraphs
        are marked by opening(`<p>`) and closing(`</p>`) tags as well. Paragraphs
        in HTML can be any length of text from one word to a bunch of sentences. All
        of your text in your web page should be contained in an HTML element (headings
        or paragraphs). Paragraphs group together sets of sentences and put some space
        between that group of text and the next group of text.\n\n:::\n\n::: details
        [**How do I create multiple paragraphs?**]\n\nParagraphs are marked by opening
        (`<p>`) and closing (`</p>`) tags as well. To create more than one paragraph
        you will want multiple sets of opening and closing `<p>` tags. For example\n\n
        \       <p>\n            This is a paragraph.\n        </p>\n        <p>\n
        \           This is another paragraph.\n        </p>\n\n:::\n\n::: details
        [**What are headings?**]\nHeadings are the different sized section titles
        throughout a web page. Headings add structure to your web page by breaking
        it up so it's easier for a user to read.\n:::\n\n::: details [**How do I make
        different sized headings?**]\nHeadings come in 6 different sizes. So far you
        have primarily used the biggest one \\<h1>. The number 1 in the HTML tag designates
        that this is the biggest heading. The smallest heading is \\<h6>. You can
        also try the \\<h2>, \\<h3>, \\<h4>, and \\<h5> tags which get smaller as
        the number gets larger.\n:::\n\n::: details [**What is HTML?**]\nHTML stands
        for Hypertext Markup Language. HTML is used to add structure to the content
        of a web page. HTML uses tags to specify where certain structures start and
        end. These tags are sets of characters not found in the English language so
        that the content and structure can be differentiated. \n:::\n\n::: details
        [**What is an HTML element?**]\nAn HTML element is a piece of a website that
        is marked by a start tag and sometimes closed with an end tag. The element
        also includes the content inside the tags. For example: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"
        style=\"width:500px\">\n:::\n\n::: details [**What is an HTML tag?**]\n\nAn
        HTML tag is the special set of characters that tells the machine where the
        start or end of an HTML element is and what type it is.\n\n:::\n\n</div>\n\nThe
        author of this page added in a lot of content, but did not think about structure.
        \ All of the text is mashed together.\n\nDo This:\n\n-   Look through the
        content with your partner and decide what you think the best structure should
        be.\n-   Use your heading and paragraph tags to code the structure into the
        page."
      CSD U2 Image Tag 1: "<div style=\"float: right; height: 250px; width: 40%; overflow-y:
        scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>How
        do I add images?</strong></summary>\n\nThe `<img>` tag allows you to show
        images on your web page. <br><br>\n\nExample:\n\n<pre>&lt;img src=\"dog.png\"
        alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which
        file to use, extra information, called an **attribute**, is added to the \\<img>
        tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and
        tell the name of the image. Image files names include extensions which tell
        the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing
        tag** because it starts and closes in one tag. To mark this we put the `/`
        which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary><strong>Why
        does an image tag not have a closing tag?</strong></summary>\n\nAn image tag
        doesn't need a closing tag because there is no text content which must be
        wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\n\n</details>\n<details>\n<summary><strong>What is an
        attribute?</strong></summary>\n\nAttributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example \\<img> tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n</details>\n</div>\n\n# Images\n\nA Dog vs Cat web page has
        been started for you. The dog image has already been added to the below web
        page. Use an image tag to add the `cat.jpeg` image to the page below the cat
        heading."
      CSD U2 Image Tag 1_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How do I add images?</strong>
        </summary>

        The `<img>` tag allows you to show images on your web page. <br><br>

        Example:

        <pre>&lt;img src="dog.png" alt="dog jumping"/&gt;</pre><br><br>

        In order to tell the browser which file to use, extra information, called an **attribute**, is added to the \<img> tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and tell the name of the image. Image files names include extensions which tell the computer which type of image they are working with. Common extensions are .jpg, .jpeg, .png. <br><br>

        In addition to have the src attribute, image elements also have the `alt` attribute which describe the image. This is important in case the image doesn’t load or for people who have trouble with their eyesight. <br><br>

        An `<img>` tag is an example of a  **self-closing tag** because it starts and closes in one tag. To mark this we put the `/` which usually goes in the close tag at the end of the image tag.

        </details>
        <details>
        <summary>
        <strong>Why does an image tag not have a closing tag?</strong>
        </summary>
        An image tag doesn't need a closing tag because there is no text content which must be wrapped in tags. The content that shows on the screen is specified through the tags attributes.
        </details>
        <details>
        <summary>
        <strong>What is an attribute?</strong>
        </summary>

        Attributes are extra information included in a tag.  Attributes have names and values. The name tells what type of information is being provided and then the value gives the specific information for that tag.

        For example \<img> tags have two attributes, src and alt. src specifies the name of the image file and alt tells the browser in readable text what the image is.

        </details>
        </div>

        # Images

        A Dog vs Cat web page has been started for you. The dog image has already been added to the below web page. Use an image tag to add the `cat.jpeg` image to the page below the cat heading.
      CSD U2 Image Tag 1_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**How do I add images?**]

        The `<img>` tag allows you to show images on your web page. <br><br>

        Example:

            <img src="dog.png" alt="dog jumping">

        In order to tell the browser which file to use, extra information, called an **attribute**, is added to the <img> tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and tell the name of the image. Image files names include extensions which tell the computer which type of image they are working with. Common extensions are .jpg, .jpeg, .png. <br><br>

        In addition to have the src attribute, image elements also have the `alt` attribute which describe the image. This is important in case the image doesn’t load or for people who have trouble with their eyesight. <br><br>

        An `<img>` tag is an example of a  **self-closing tag** because it starts and closes in one tag.

        :::

        ::: details [**Why does an image tag not have a closing tag?**]
        An image tag doesn't need a closing tag because there is no text content which must be wrapped in tags. The content that shows on the screen is specified through the tags attributes.
        :::

        ::: details [**What is an attribute?**]

        Attributes are extra information included in a tag.  Attributes have names and values. The name tells what type of information is being provided and then the value gives the specific information for that tag.

        For example `<img>` tags have two attributes, src and alt. src specifies the name of the image file and alt tells the browser in readable text what the image is.

        :::

        </div>

        # Images

        A Dog vs Cat web page has been started for you. The dog image has already been added to the below web page. Look at the code that made the dog image appear, then use an image tag to add the `cat.jpeg` image to the page below the cat heading.

        This image was found at pixabay and was uploaded by the user "Alexas\_Fotos", who used a "free for commercial use" and "no attribution required" license.
      CSD U2 Image Tag 2: "<div style=\"float: right; height: 250px; width: 40%; overflow-y:
        scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>How
        do I add images?</strong></summary>\n\nThe `<img>` tag allows you to show
        images on your web page. <br><br>\n\nExample:\n\n<pre>&lt;img src=\"dog.png\"
        alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which
        file to use, extra information, called an **attribute**, is added to the \\<img>
        tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and
        tell the name of the image. Image files names include extensions which tell
        the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing
        tag** because it starts and closes in one tag. To mark this we put the `/`
        which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary><strong>Why
        does an image tag not have a closing tag?</strong></summary>\n\nAn image tag
        doesn't need a closing tag because there is no text content which must be
        wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\n\n</details>\n<details>\n<summary><strong>What is an
        attribute?</strong></summary>\n\nAttributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example \\<img> tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n</details>\n</div>\n\n# Uploading Images\n\nYou can upload
        images that you've found elsewhere using the **Add Image** button. Go find
        an image of a different type of pet that you like and download it to your
        computer (using right-click \"Save As\").\n\nOnce you have your images, click
        ![](<https://images.code.org/c35789d00e59b0dbe42879390dabf925-image-1493240590385.01.49
        PM.png>) and upload the image from your computer into your project, where
        you can then use it in your page.\n\n# Do This\n\n-   Upload at least one
        image into this web page\n-   Use the `<img>` tag to display the image(s)
        in your website.\n-   Make sure to add an `alt` attribute."
      CSD U2 Image Tag 2_2018: "<div style=\"float: right; height: 250px; width: 40%;
        overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>How
        do I add images?</strong>\n</summary>\n\nThe `<img>` tag allows you to show
        images on your web page. <br><br>\n\nExample:\n\n<pre>&lt;img src=\"dog.png\"
        alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which
        file to use, extra information, called an **attribute**, is added to the \\<img>
        tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and
        tell the name of the image. Image files names include extensions which tell
        the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing
        tag** because it starts and closes in one tag. To mark this we put the `/`
        which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary>\n<strong>Why
        does an image tag not have a closing tag?</strong>\n</summary>\nAn image tag
        doesn't need a closing tag because there is no text content which must be
        wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\n</details>\n<details>\n<summary>\n<strong>What is an
        attribute?</strong>\n</summary>\n\nAttributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example \\<img> tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n</details>\n</div>\n\n# Uploading Images\n\nYou can upload
        images that you've found elsewhere using the **Add Image** button. Go find
        an image of a different type of pet that you like and download it to your
        computer (using right-click \"Save As\").\n\nOnce you have your images, click
        ![](<https://images.code.org/c35789d00e59b0dbe42879390dabf925-image-1493240590385.01.49
        PM.png>) and upload the image from your computer into your project, where
        you can then use it in your page.\n\n# Do This\n\n-   Upload at least one
        image into this web page\n-   Use the `<img>` tag to display the image(s)
        in your website.\n-   Make sure to add an `alt` attribute."
      CSD U2 Image Tag 2_2019: "<div class=\"no-pullthrough\" style=\"float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n\n::: details [**How do I add images?**]\n\nThe `<img>` tag
        allows you to show images on your web page.\n\nExample:\n\n    <img src=\"dog.png\"
        alt=\"dog jumping\">\n\nIn order to tell the browser which file to use, extra
        information, called an **attribute**, is added to the <img> tag inside the
        brackets. The attribute `src` stands for **s**ou**rc**e and tell the name
        of the image. Image files names include extensions which tell the computer
        which type of image they are working with. Common extensions are .jpg, .jpeg,
        .png. <br><br>\n\nIn addition to have the src attribute, image elements also
        have the `alt` attribute which describe the image. This is important in case
        the image doesn’t load or for people who have trouble with their eyesight.
        <br><br>\n\nAn `<img>` tag is an example of a  **self-closing tag** because
        it starts and closes in one tag.\n:::\n\n::: details [**Why does an image
        tag not have a closing tag?**]\nAn image tag doesn't need a closing tag because
        there is no text content which must be wrapped in tags. The content that shows
        on the screen is specified through the tags attributes.\n:::\n\n::: details
        [**What is an attribute?**]\n\nAttributes are extra information included in
        a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example `<img>` tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n:::\n\n</div>\n\n# Uploading Images\n\nYou can upload images
        that you've found elsewhere using the **Add Image** button. Go find an image
        of a different type of pet that you like and download it to your computer
        (using right-click \"Save As\").\n\nOnce you have your images, click ![](<https://images.code.org/c35789d00e59b0dbe42879390dabf925-image-1493240590385.01.49
        PM.png>) and upload the image from your computer into your project, where
        you can then use it in your page.\n\n# Do This\n\n-   Upload at least one
        image into this web page\n-   Use the `<img>` tag to display the image(s)
        in your website.\n-   Make sure to add an `alt` attribute."
      CSD U2 Image Tag Attribution: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>How
        do I add images?</strong></summary>\n\nThe `<img>` tag allows you to show
        images on your web page. <br><br>\n\nExample:\n\n<pre>&lt;img src=\"dog.png\"
        alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which
        file to use, extra information, called an **attribute**, is added to the \\<img>
        tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and
        tell the name of the image. Image files names include extensions which tell
        the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing
        tag** because it starts and closes in one tag. To mark this we put the `/`
        which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary><strong>Why
        does an image tag not have a closing tag?</strong></summary>\n\nAn image tag
        doesn't need a closing tag because there is no text content which must be
        wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\n\n</details>\n<details>\n<summary><strong>What is an
        attribute?</strong></summary>\n\nAttributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example \\<img> tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n</details>\n</div>\n\n# Giving Credit\n\nWhen using a Creative
        Commons licensed image, you need to give credit to the original creator (this
        is also called _attribution_). There are lots of ways to provide attribution,
        but the easiest way is to add text below the image that identifies the creator
        and website it came from.\n\n# Do This\n\nIn this page we've already added
        and attributed an image of a frog. Use the Creative Commons search engine
        to find another image of an amphibian. Add your found image to this page,
        along with proper attribution, including:\n\n-   The name of the creator (if
        available)\n-   The website it was found on (e.g. commons.wikimedia.org)\n-
        \  The license it was published under (e.g. CC-BY)"
      CSD U2 Image Tag Attribution_2018: "<div style=\"float: right; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>How
        do I add images?</strong>\n</summary>\n\nThe `<img>` tag allows you to show
        images on your web page. <br><br>\n\nExample:\n\n<pre>&lt;img src=\"dog.png\"
        alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which
        file to use, extra information, called an **attribute**, is added to the \\<img>
        tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and
        tell the name of the image. Image files names include extensions which tell
        the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing
        tag** because it starts and closes in one tag. To mark this we put the `/`
        which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary>\n<strong>Why
        does an image tag not have a closing tag?</strong>\n</summary>\nAn image tag
        doesn't need a closing tag because there is no text content which must be
        wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\n</details>\n<details>\n<summary>\n<strong>What is an
        attribute?</strong>\n</summary>\n\nAttributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example \\<img> tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n</details>\n</div>\n\n# Giving Credit\n\nWhen using a Creative
        Commons licensed image, you need to give credit to the original creator (this
        is also called _attribution_). There are lots of ways to provide attribution,
        but the easiest way is to add text below the image that identifies the creator
        and website it came from.\n\n# Do This\n\nIn this page we've already added
        and attributed an image of a frog. Use the Creative Commons search engine
        to find another image of an amphibian. Add your found image to this page,
        along with proper attribution, including:\n\n-   The name of the creator (if
        available)\n-   The website it was found on (e.g. commons.wikimedia.org)\n-
        \  The license it was published under (e.g. CC-BY)"
      CSD U2 Image Tag Attribution_2019: "<div class=\"no-pullthrough\" style=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n\n::: details [**How do I add images?**]\n\nThe `<img>` tag
        allows you to show images on your web page. \n\nExample:\n\n    <img src=\"dog.png\"
        alt=\"dog jumping\">\n\nIn order to tell the browser which file to use, extra
        information, called an **attribute**, is added to the <img> tag inside the
        brackets. The attribute `src` stands for **s**ou**rc**e and tell the name
        of the image. Image files names include extensions which tell the computer
        which type of image they are working with. Common extensions are .jpg, .jpeg,
        .png. <br><br>\n\nIn addition to have the src attribute, image elements also
        have the `alt` attribute which describe the image. This is important in case
        the image doesn’t load or for people who have trouble with their eyesight.
        <br><br>\n\nAn `<img>` tag is an example of a  **self-closing tag** because
        it starts and closes in one tag.\n:::\n\n::: details [**Why does an image
        tag not have a closing tag?**]\nAn image tag doesn't need a closing tag because
        there is no text content which must be wrapped in tags. The content that shows
        on the screen is specified through the tags attributes.\n:::\n\n::: details
        [**What is an attribute?**]\n\nAttributes are extra information included in
        a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example `<img>` tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n:::\n\n</div>\n\n# Giving Credit\n\nWhen using a Creative
        Commons licensed image, you need to give credit to the original creator (this
        is also called _attribution_). There are lots of ways to provide attribution,
        but the easiest way is to add text below the image that identifies the creator
        and website it came from.\n\n# Do This\n\nIn this page we've already added
        and attributed an image of a frog. Use the Creative Commons search engine
        to find another image of an amphibian. Add your found image to this page,
        along with proper attribution, including:\n\n-   The name of the creator (if
        available)\n-   The website it was found on (e.g. commons.wikimedia.org)\n-
        \  The license it was published under (e.g. CC-BY)"
      CSD U2 Image Tag Debug: "<div style=\"float: right; height: 250px; width: 40%;
        overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>How
        do I add images?</strong>\n</summary>\n\nThe `<img>` tag allows you to show
        images on your web page. <br><br>\n\nExample:\n\n<pre>&lt;img src=\"dog.png\"
        alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which
        file to use, extra information, called an **attribute**, is added to the \\<img>
        tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and
        tell the name of the image. Image files names include extensions which tell
        the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing
        tag** because it starts and closes in one tag. To mark this we put the `/`
        which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary><strong>Why
        does an image tag not have a closing tag?</strong>\n</summary>\n\nAn image
        tag doesn't need a closing tag because there is no text content which must
        be wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\n\n</details>\n<details>\n<summary><strong>What is an
        attribute?</strong>\n</summary>\n\nAttributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example \\<img> tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n</details>\n</div>\n\n# The Details Matter\n\nThe `src` attribute
        needs to point to the _exact_ filename of the image you want to use. That
        means you need to pay attention to spelling, capitalization, and the file
        extension. Each of the three images on this page is broken because of an improper
        `src` attribute. Using the file menu for reference, fix each of the image
        tags.\n\n_Note: Even though the images are not loading properly, our website
        is still showing descriptive text of what should be there because we used
        `alt` attributes. Cool!_"
      CSD U2 Image Tag Debug_2018: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>How
        do I add images?</strong>\n</summary>\n\nThe `<img>` tag allows you to show
        images on your web page. <br><br>\n\nExample:\n\n<pre>&lt;img src=\"dog.png\"
        alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which
        file to use, extra information, called an **attribute**, is added to the \\<img>
        tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and
        tell the name of the image. Image files names include extensions which tell
        the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing
        tag** because it starts and closes in one tag. To mark this we put the `/`
        which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary>\n<strong>Why
        does an image tag not have a closing tag?</strong>\n</summary>\nAn image tag
        doesn't need a closing tag because there is no text content which must be
        wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\n</details>\n<details>\n<summary>\n<strong>What is an
        attribute?</strong>\n</summary>\n\nAttributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example \\<img> tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n</details>\n</div>\n\n# The Details Matter\n\nThe `src` attribute
        needs to point to the _exact_ filename of the image you want to use. That
        means you need to pay attention to spelling, capitalization, and the file
        extension. Each of the three images on this page is broken because of an improper
        `src` attribute. Using the file menu for reference, fix each of the image
        tags.\n\n_Note: Even though the images are not loading properly, our website
        is still showing descriptive text of what should be there because we used
        `alt` attributes. Cool!_"
      CSD U2 Image Tag Debug_2019: "<div class=\"no-pullthrough\" style=\"float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n\n::: details [**How do I add images?**]\n\nThe `<img>` tag
        allows you to show images on your web page.\n\nExample:\n\n    <img src=\"dog.png\"
        alt=\"dog jumping\">\n\nIn order to tell the browser which file to use, extra
        information, called an **attribute**, is added to the <img> tag inside the
        brackets. The attribute `src` stands for **s**ou**rc**e and tell the name
        of the image. Image files names include extensions which tell the computer
        which type of image they are working with. Common extensions are .jpg, .jpeg,
        .png. <br><br>\n\nIn addition to have the src attribute, image elements also
        have the `alt` attribute which describe the image. This is important in case
        the image doesn’t load or for people who have trouble with their eyesight.
        <br><br>\n\nAn `<img>` tag is an example of a  **self-closing tag** because
        it starts and closes in one tag.\n:::\n\n::: details [**Why does an image
        tag not have a closing tag?**]\nAn image tag doesn't need a closing tag because
        there is no text content which must be wrapped in tags. The content that shows
        on the screen is specified through the tags attributes.\n:::\n\n::: details
        [**What is an attribute?**]\n\nAttributes are extra information included in
        a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example `<img>` tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n:::\n\n</div>\n\n# The Details Matter\n\nThe `src` attribute
        needs to point to the _exact_ filename of the image you want to use. That
        means you need to pay attention to spelling, capitalization, and the file
        extension. Each of the three images on this page is broken because of an improper
        `src` attribute. Using the file menu for reference, fix each of the image
        tags.\n\n_Note: Even though the images are not loading properly, our website
        is still showing descriptive text of what should be there because we used
        `alt` attributes. Cool!_"
      CSD U2 Info Page Final Touches: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        <h2>
        Checklist
        </h2>

        <input type="checkbox" style="float: left"><span style="display: block; margin-left: 20px; margin-bottom: 10px">Ensure that your image is properly licensed</span>
        <input type="checkbox" style="float: left"><span style="display: block; margin-left: 20px; margin-bottom: 10px">Upload image into Web Lab</span>
        <input type="checkbox" style="float: left"><span style="display: block; margin-left: 20px; margin-bottom: 10px">Create an image tag with a descriptive alt attribute</span>
        <input type="checkbox" style="float: left"><span style="display: block; margin-left: 20px; margin-bottom: 10px">If the image isn't your own, add attribution underneath<br/>

        </div>

        # Adding Images to Your Site

        You've already created some pages with great content on your website, now you can add some images!

        # Do This

        Using either your own images or those found through a Commons Search, add some images to the pages you've already created. Get creative! Use the checklist to the right to keep track of the steps you need to follow when adding images.
      CSD U2 Info Page Final Touches_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        <h2>
        Checklist
        </h2>

        <input type="checkbox" style="float: left"><span style="display: block; margin-left: 20px; margin-bottom: 10px">Ensure that your image is properly licensed</span>
        <input type="checkbox" style="float: left"><span style="display: block; margin-left: 20px; margin-bottom: 10px">Upload image into Web Lab</span>
        <input type="checkbox" style="float: left"><span style="display: block; margin-left: 20px; margin-bottom: 10px">Create an image tag with a descriptive alt attribute</span>
        <input type="checkbox" style="float: left"><span style="display: block; margin-left: 20px; margin-bottom: 10px">If the image isn't your own, add attribution underneath<br/>

        </div>

        # Adding Images to Your Site

        You've already created some pages with great content on your website, now you can add some images!

        # Do This

        Using either your own images or those found through a Commons Search, add some images to the pages you've already created. Get creative! Use the checklist to the right to keep track of the steps you need to follow when adding images.
      CSD U2 Info Page Final Touches_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        <h2>
        Checklist
        </h2>

        <input type="checkbox" style="float: left"><span style="display: block; margin-left: 20px; margin-bottom: 10px">Ensure that your image is properly licensed</span>
        <input type="checkbox" style="float: left"><span style="display: block; margin-left: 20px; margin-bottom: 10px">Upload image into Web Lab</span>
        <input type="checkbox" style="float: left"><span style="display: block; margin-left: 20px; margin-bottom: 10px">Create an image tag with a descriptive alt attribute</span>
        <input type="checkbox" style="float: left"><span style="display: block; margin-left: 20px; margin-bottom: 10px">If the image isn't your own, add attribution underneath<br/>

        </div>

        # Adding Images to Your Site

        You've already created some pages with great content on your website, now you can add some images!

        # Do This

        Using either your own images or those found through a Commons Search, add some images to the pages you've already created. Get creative! Use the checklist to the right to keep track of the steps you need to follow when adding images.
      CSD U2 Inspector Warm Up: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">
        <details>

        <summary><strong>How do I use the Inspector Tool?</strong>

        </summary>

        The Inspector Tool is a great way to learn more about unfamiliar code in Web Lab. To turn on the Inspector Tool, click <img src="https://images.code.org/188579d7c6e7645d0d2edd203a33bd63-image-1480361561351.31.56 PM.png" style="width:100px">. You will know that the Inspector Tool is on because the button will turn white and say "Inspector: On". Once you turn on the Inspector Tool, you can hover over anything in the preview area and Web Lab will highlight the code that is making that part of the page appear.

        </details>
        </div>

        # Explore HTML

        This is a web page written in HTML, the language of the web. You'll learn more about how it works, but first explore it by using the Inspector Tool.

        # Do This

        -   Click the Tip "How do I use the Inspector Tool?" on the right to learn how to use the Inspector Tool.
        -   Follow the instructions in the web page to explore the web page and discuss with a partner how it is working.
      CSD U2 Inspector Warm Up_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">
        <details>

        <summary>
        <strong><span> How do I use the Inspector Tool? </span></strong>
        </summary>

        The Inspector Tool is a great way to learn more about unfamiliar code in Web Lab. To turn on the Inspector Tool, click <img src="https://images.code.org/188579d7c6e7645d0d2edd203a33bd63-image-1480361561351.31.56 PM.png" style="width:100px">. You will know that the Inspector Tool is on because the button will turn white and say "Inspector: On". Once you turn on the Inspector Tool, you can hover over anything in the preview area and Web Lab will highlight the code that is making that part of the page appear.

        </details>
        </div>

        # Explore HTML

        This is a web page written in HTML, the language of the web. You'll learn more about how it works, but first explore it by using the Inspector Tool.

        # Do This

        -   Click the Tip "How do I use the Inspector Tool?" on the right to learn how to use the Inspector Tool.
        -   Follow the instructions in the web page to explore the web page and discuss with a partner how it is working.
      CSD U2 Inspector Warm Up_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">
        <details>

        <summary>
        <strong><span> How do I use the Inspector Tool? </span></strong>
        </summary>

        The Inspector Tool is a great way to learn more about unfamiliar code in Web Lab. To turn on the Inspector Tool, click <img src="https://images.code.org/188579d7c6e7645d0d2edd203a33bd63-image-1480361561351.31.56 PM.png" style="width:100px">. You will know that the Inspector Tool is on because the button will turn white and say "Inspector: On". Once you turn on the Inspector Tool, you can hover over anything in the preview area and Web Lab will highlight the code that is making that part of the page appear.

        </details>
        </div>

        # Explore HTML

        This is a web page written in HTML, the language of the web. You'll learn more about how it works, but first explore it by using the Inspector Tool.

        # Do This

        -   Click the Tip "How do I use the Inspector Tool?" on the right to learn how to use the Inspector Tool.
        -   Follow the instructions in the web page to explore the web page and discuss with a partner how it is working.
      CSD U2 Pair Programming Video_2019: |-
        ## Questions to consider

        -   Why do you think professional programmers use pair programming?
        -   How do you think pair programming will help you to program better?
      CSD U2 Project Start: |-
        # Start Your Project

        Now that you have a plan for your personal website, you can start coding it here.  Don't worry if you can't do everything you want today.  You'll have plenty of chances to improve your work as you learn more about developing websites.

        # Do This

        -   Use HTML to create the page that you sketched out.  Make sure it includes
            -   At least **two headings of different sizes**
            -   At least **one paragraph**
        -   **Reflect** on your page by comparing to your sketch and showing it to your partner
      CSD U2 Project Start_2018: |-
        # Start Your Project

        Now that you have a plan for your personal website, you can start coding it here.  Don't worry if you can't do everything you want today.  You'll have plenty of chances to improve your work as you learn more about developing websites.

        # Do This

        -   Use HTML to create the page that you sketched out.  Make sure it includes
            -   At least **two headings of different sizes**
            -   At least **one paragraph**
        -   **Reflect** on your page by comparing to your sketch and showing it to your partner
      CSD U2 Project Start_2019: |-
        # Start Your Project

        Now that you have a plan for your personal website, you can start coding it here.  Don't worry if you can't do everything you want today.  You'll have plenty of chances to improve your work as you learn more about developing websites.

        # Do This

        -   Use HTML to create the page that you sketched out.  Make sure it includes
            -   At least **two headings of different sizes**
            -   At least **one paragraph**
        -   **Reflect** on your page by comparing to your sketch and showing it to your partner
      CSD U2 RGB intro: |-
        # RGB Colors

        All colors, whether they have names or not, can be described by the level of red, green, and blue light it takes to make them.  This is called an RGB value (short for Red-Green-Blue).  You can use the widget on your left to try out different RGB values and see what colors they make.

        -   **Click "Run" to start the widget on the left,** and use the sliders to adjust the levels of red, green, and blue light.
        -   For each of the colors below, match it to its RGB value.

        A) red: 216, green: 191, blue: 216 - rgb(216,191,216)

        B) red: 255, green: 239, blue: 213 - rgb(255,239,213)

        C) red: 250, green: 128, blue: 114 - rgb(250,128,114)

        D) red: 70, green: 130, blue: 180 - rgb(70, 130, 180)

        E) red: 107, green: 142, blue: 35 - rgb(107,142,35)

        <div style="font-size: 16px">
        <br />
        <details>

        <summary><strong>Why do red and green make yellow?</strong></summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary><strong>How many colors can I make with RGB color mixing?</strong></summary>

        <p>
        You can make over sixteen million different colors with RGB color mixing.
        </p>

        </details>
        </div>
      CSD U2 RGB intro_2018: |-
        # RGB Colors

        All colors, whether they have names or not, can be described by the level of red, green, and blue light it takes to make them.  This is called an RGB value (short for Red-Green-Blue).  You can use the widget on your left to try out different RGB values and see what colors they make.

        -   **Click "Run" to start the widget on the left,** and use the sliders to adjust the levels of red, green, and blue light.
        -   For each of the colors below, match it to its RGB value.

        A) red: 216, green: 191, blue: 216 - rgb(216,191,216)

        B) red: 255, green: 239, blue: 213 - rgb(255,239,213)

        C) red: 250, green: 128, blue: 114 - rgb(250,128,114)

        D) red: 70, green: 130, blue: 180 - rgb(70, 130, 180)

        E) red: 107, green: 142, blue: 35 - rgb(107,142,35)

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        <p>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </p> </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        <p>
        You can make over sixteen million different colors with RGB color mixing.
        </p>

        </details>
        </div>
      CSD U2 RGB intro_2019: |-
        # RGB Colors

        All colors, whether they have names or not, can be described by the level of red, green, and blue light it takes to make them.  This is called an RGB value (short for Red-Green-Blue).  You can use the widget on your left to try out different RGB values and see what colors they make.

        -   **Click "Run" to start the widget on the left,** and use the sliders to adjust the levels of red, green, and blue light.
        -   For each of the colors below, match it to its RGB value.

        A) red: 216, green: 191, blue: 216 - rgb(216,191,216)

        B) red: 255, green: 239, blue: 213 - rgb(255,239,213)

        C) red: 250, green: 128, blue: 114 - rgb(250,128,114)

        D) red: 70, green: 130, blue: 180 - rgb(70, 130, 180)

        E) red: 107, green: 142, blue: 35 - rgb(107,142,35)

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        <p>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </p> </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        <p>
        You can make over sixteen million different colors with RGB color mixing.
        </p>

        </details>
        </div>
      CSD U2 RGB others: |-
        # Spring and Autumn Colors

        Choose RGB values for spring and autumn colors.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you find a spring color you like, then write down the values on your activity guide.
        -   Do the same for an autumn color.   You will need the RGB values for the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary><strong>Where can I see the whole range of color types?</strong></summary>
        You can find many options for colors at <a href="http://www.w3schools.com/colors/colors_picker.asp">W3Schools - HTML Color Picker</a></details>
        <details>
        <summary><strong>Why do red and green make yellow?</strong></summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary><strong>How many colors can I make with RGB color mixing?</strong></summary>

        <p>You can make make over sixteen million different colors with RGB color mixing.</p>

        </details>
        </div>
      CSD U2 RGB others_2018: |-
        # Spring and Autumn Colors

        Choose RGB values for spring and autumn colors.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you find a spring color you like, then write down the values on your activity guide.
        -   Do the same for an autumn color.   You will need the RGB values for the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>Where can I see the whole range of color types?</strong>
        </summary>

        You can find many options for colors at <a href="http://www.w3schools.com/colors/colors_picker.asp" target="_new">W3Schools - HTML Color Picker</a>

        </details>
        <details>
        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        You can make make over sixteen million different colors with RGB color mixing.

        </details>
        </div>
      CSD U2 RGB others_2019: |-
        # Spring and Autumn Colors

        Choose RGB values for spring and autumn colors.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you find a spring color you like, then write down the values on your activity guide.
        -   Do the same for an autumn color.   You will need the RGB values for the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>Where can I see the whole range of color types?</strong>
        </summary>

        You can find many options for colors at <a href="http://www.w3schools.com/colors/colors_picker.asp" target="_new">W3Schools - HTML Color Picker</a>

        </details>
        <details>
        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        You can make make over sixteen million different colors with RGB color mixing.

        </details>
        </div>
      CSD U2 RGB summer: |-
        # Summer Color

        Find the RGB values for a summery yellow color.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you match the summery yellow at the bottom of the widget.
        -   Write the RGB values on your activity guide.  You will need them in the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary><strong>Why do red and green make yellow?</strong></summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary><strong>How many colors can I make with RGB color mixing?</strong></summary>

        <p>You can make make over sixteen million different colors with RGB color mixing.</p>

        </details>
        </div>
      CSD U2 RGB summer_2018: |-
        # Summer Color

        Find the RGB values for a summery yellow color.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you match the summery yellow at the bottom of the widget.
        -   Write the RGB values on your activity guide.  You will need them in the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        You can make make over sixteen million different colors with RGB color mixing.

        </details>
        </div>
      CSD U2 RGB summer_2019: |-
        # Summer Color

        Find the RGB values for a summery yellow color.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you match the summery yellow at the bottom of the widget.
        -   Write the RGB values on your activity guide.  You will need them in the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        You can make make over sixteen million different colors with RGB color mixing.

        </details>
        </div>
      CSD U2 RGB winter: |-
        # Winter Color

        In the next few levels, you'll be finding seasonal colors for a website.  Here, you'll need to find the RGB values for a wintery blue color.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you match the wintery blue color at the bottom of the widget.
        -   Write the RGB values on your activity guide.  You will need them in the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary><strong>How do I make a color lighter?</strong></summary>
        <p>To make a color lighter, you need to add more light (increase the level of the slider).  If you have already added the maximum amount of blue light, you will need to add more red and green light to make your blue lighter.</p></details>
        <details>
        <summary><strong>Why do red and green make yellow?</strong></summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary><strong>How many colors can I make with RGB color mixing?</strong></summary>

        <p>You can make make over sixteen million different colors with RGB color mixing.</p>

        </details>
        </div>
      CSD U2 RGB winter_2018: |-
        # Winter Color

        In the next few levels, you'll be finding seasonal colors for a website.  Here, you'll need to find the RGB values for a wintery blue color.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you match the wintery blue color at the bottom of the widget.
        -   Write the RGB values on your activity guide.  You will need them in the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>How do I make a color lighter?</strong>
        </summary>

        To make a color lighter, you need to add more light (increase the level of the slider).  If you have already added the maximum amount of blue light, you will need to add more red and green light to make your blue lighter.

        </details>
        <details>
        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        You can make make over sixteen million different colors with RGB color mixing.

        </details>
        </div>
      CSD U2 RGB winter_2019: |-
        # Winter Color

        In the next few levels, you'll be finding seasonal colors for a website.  Here, you'll need to find the RGB values for a wintery blue color.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you match the wintery blue color at the bottom of the widget.
        -   Write the RGB values on your activity guide.  You will need them in the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>How do I make a color lighter?</strong>
        </summary>

        To make a color lighter, you need to add more light (increase the level of the slider).  If you have already added the maximum amount of blue light, you will need to add more red and green light to make your blue lighter.

        </details>
        <details>
        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        You can make make over sixteen million different colors with RGB color mixing.

        </details>
        </div>
      CSD U2 add content: |-
        # Add HTML

        Next, you should add the HTML to your pages.

        # Do This

        -   For each of the new pages that you've created, add HTML to make the page you sketched in your project guide.
        -   You may also add more HTML to the pages you've already created.
      CSD U2 add content_2018: |-
        # Add HTML

        Next, you should add the HTML to your pages.

        # Do This

        -   For each of the new pages that you've created, add HTML to make the page you sketched in your project guide.
        -   You may also add more HTML to the pages you've already created.
      CSD U2 add content_2019: |-
        # Add HTML

        Next, you should add the HTML to your pages.

        # Do This

        -   For each of the new pages that you've created, add HTML to make the page you sketched in your project guide.
        -   You may also add more HTML to the pages you've already created.
      CSD U2 add file: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What is a style sheet?</strong></summary>
        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.
        </details>
        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        <details>
        <summary><strong>How do I create a new style sheet?</strong></summary>
        To create a new style sheet, click on the "Add CSS" button above the code area.
        </details>
        <details>
        <summary><strong>What should I name my style sheet?</strong></summary>

        You can name your style sheet anything, but it's better to choose a relevant name, such as "style.css" or "aboutmestyles.css" so that it's clear what the file is.  Your file should always end in the ".css" extension.

        </details>
        <details>
        <summary><strong>How do I rename a file?</strong></summary>

        To rename a file, you can right click (or control click) on the file name and choose the "Rename" option.  This will allow you to type in a new file name.  Clicking on a file name after it is already highlighted will also allow you to rename the file.

        </details>
        <details>
        <summary><strong>How do I add a style sheet to a web page?</strong></summary>

        To add a style sheet to a web page, open up the code for the web page.  Inside the head tag, add the following code `<link rel="stylesheet" href="style.css">`.  Then change "style.css" to the name of your style sheet.

        </details>
        </div>

        # Adding a Style Sheet

        This is your project from before.  In the next level, you'll have a chance to add some different styles to it, but first, you need to add a style sheet, name it, and link it to your html page.

        1.  Create a new style sheet for your project.
        2.  Rename the style sheet file.
        3.  Add your style sheet to your HTML page.

        <img src="https://cdo-curriculum.s3.amazonaws.com/media/uploads/weblab_stylesheet.png" style=" max-width:500px">
      CSD U2 add file_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What is a style sheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        <details>
        <summary>
        <strong>How do I create a new style sheet?</strong>
        </summary>
        To create a new style sheet, click on the "Add CSS" button above the code area.
        </details>
        <details>
        <summary>
        <strong>What should I name my style sheet?</strong>
        </summary>
        You can name your style sheet anything, but it's better to choose a relevant name, such as "style.css" or "aboutmestyles.css" so that it's clear what the file is.  Your file should always end in the ".css" extension.
        </details>
        <details>
        <summary>
        <strong>How do I rename a file?</strong>
        </summary>
        To rename a file, you can right click (or control click) on the file name and choose the "Rename" option.  This will allow you to type in a new file name.  Clicking on a file name after it is already highlighted will also allow you to rename the file.
        </details>
        <details>
        <summary>
        <strong>How do I add a style sheet to a web page?</strong>
        </summary>

        To add a style sheet to a web page, open up the code for the web page.  Inside the head tag, add the following code `<link rel="stylesheet" href="style.css">`.  Then change "style.css" to the name of your style sheet.

        </details>
        </div>

        # Adding a Style Sheet

        This is your project from before.  In the next level, you'll have a chance to add some different styles to it, but first, you need to add a style sheet, name it, and link it to your html page.

        1.  Create a new style sheet for your project.
        2.  Rename the style sheet file.
        3.  Add your style sheet to your HTML page.

        <img src="https://cdo-curriculum.s3.amazonaws.com/media/uploads/weblab_stylesheet.png" style=" max-width:500px">
      CSD U2 add file_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        ::: details [**What is a style sheet?**]

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.
        :::

        ::: details [**What is CSS?**]

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

            h2 {
               color: blue;
               font-family: cursive;

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.
        :::

        ::: details [**How do I create a new style sheet?**]
        To create a new style sheet, click on the "Add CSS" button above the code area.
        :::

        ::: details [**What should I name my style sheet?**]
        You can name your style sheet anything, but it's better to choose a relevant name, such as "style.css" or "aboutmestyles.css" so that it's clear what the file is.  Your file should always end in the ".css" extension.
        :::

        ::: details [**How do I rename a file?**]
        To rename a file, you can right click (or control click) on the file name and choose the "Rename" option.  This will allow you to type in a new file name.  Clicking on a file name after it is already highlighted will also allow you to rename the file.
        :::

        ::: details [**How do I add a style sheet to a web page?**]

        To add a style sheet to a web page, open up the code for the web page.  Inside the head tag, add the following code `<link rel="stylesheet" href="style.css">`.  Then change "style.css" to the name of your style sheet.

        :::

        </div>

        # Adding a Style Sheet

        This is your project from before.  In the next level, you'll have a chance to add some different styles to it, but first, you need to add a style sheet, name it, and link it to your html page.

        1.  Create a new style sheet for your project.
        2.  Rename the style sheet file.
        3.  Add your style sheet to your HTML page.

        <img src="https://cdo-curriculum.s3.amazonaws.com/media/uploads/weblab_stylesheet.png" style=" max-width:500px">
      CSD U2 add style_2019: |-
        # Try it out!

        Now that you've seen some different ways to style, it's time to try it out yourself.  Here's a web page you've seen before, but it needs some style!

        # Do This

        -   Give the webpage a background color.
        -   Put more space around the images.
        -   Make all of the text a different color.
        -   Add any other styles you want.
      CSD U2 challenge: |-
        # Challenge

        Check with your teacher before starting on this challenge.

        This page is only partially finished, and it has some bugs.  Luckily, there are comments that should help you to finish the page as the author intended.

        # Do This

        -   Look at the code and with your partner and discuss what the page should look like.
        -   Work together to finish the page, paying attention to formatting.
        -   Compare with another pair to see whether your pages are the same.
      CSD U2 challenge_2018: |-
        # Challenge

        Check with your teacher before starting on this challenge.

        This page is only partially finished, and it has some bugs.  Luckily, there are comments that should help you to finish the page as the author intended.

        # Do This

        -   Look at the code with your partner and discuss what the page should look like.
        -   Work together to finish the page, paying attention to formatting.
        -   Compare with another pair to see whether your pages are the same.
      CSD U2 challenge_2019: |-
        # Challenge

        Check with your teacher before starting on this challenge.

        This page is only partially finished, and it has some bugs.  Luckily, there are comments that should help you to finish the page as the author intended.

        # Do This

        -   Look at the code with your partner and discuss what the page should look like.
        -   Work together to finish the page, paying attention to formatting.
        -   Compare with another pair to see whether your pages are the same.
      CSD U2 classes modify: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>

        </summary>
        For the code to work, you need to both create a winter class and add elements to the class.

        The class is created in the style sheet, with the following code.

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        This code creates a class called `winter` and makes everything in the class our winter blue, which has the RGB values of (195,230,255).

        The code that adds a `h5` element to the winter class is `<h5 class="winter">`.  The `class=winter` inside the opening tag adds everything inside the tag to the class.

        </details>
        <details>
        <summary>
        <strong>What rules can be added to a class rule-set?</strong>

        </summary>

        A class rule-set can have the same rules as any other type of selector.  If a rule does not apply to the content of the class (for example, using `font-size` on an element with no text), then the computer will ignore that rule, but still use the rules that work.

        </details>
        <details>
        <summary>
        <strong>Why does the selector have a period in front of it?</strong>

        </summary>
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        </details>
        <details>
        <summary>
        <strong>Why would a web developer use classes?</strong>

        </summary>
        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.
        </details>
        <details>
        <summary>
        <strong>I got different RGB values, but mine are right, too.</strong>

        </summary>

        Because RGB creates millions of different colors, some are so similar that people have a hard time telling them apart.  That means that there are multiple RGB values that are close enough to work for our winter color.

        </details>
        </div>

        # Adding Rules

        Your winter words should all have the same color and font.

        -   Find the CSS rule-set in the style sheet that gives the winter words their style.
        -   Add a rule that changes the font of the winter words.  It can be any font, but it will need to be different from that of the other three seasons.
        -   Add any other rules you'd like for your winter words.
      CSD U2 classes modify_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>
        For the code to work, you need to both create a winter class and add elements to the class.

        The class is created in the style sheet, with the following code.

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        This code creates a class called `winter` and makes everything in the class our winter blue, which has the RGB values of (195,230,255).

        The code that adds a `h5` element to the winter class is `<h5 class="winter">`.  The `class=winter` inside the opening tag adds everything inside the tag to the class.

        </details>
        <details>

        <summary>
        <strong>What rules can be added to a class rule-set?</strong>
        </summary>

        A class rule-set can have the same rules as any other type of selector.  If a rule does not apply to the content of the class (for example, using `font-size` on an element with no text), then the computer will ignore that rule, but still use the rules that work.

        </details>
        <details>
        <summary>
        <strong>Why does the selector have a period in front of it?</strong>
        </summary>
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        </details>
        <details>
        <summary>
        <strong>Why would a web developer use classes?</strong>
        </summary>
        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.
        </details>
        <details>
        <summary>
        <strong>I got different RGB values, but mine are right, too.</strong>
        </summary>

        Because RGB creates millions of different colors, some are so similar that people have a hard time telling them apart.  That means that there are multiple RGB values that are close enough to work for our winter color.

        </details>
        </div>

        # Adding Rules

        Your winter words should all have the same color and font.

        -   Find the CSS rule-set in the style sheet that gives the winter words their style.
        -   Add a rule that changes the font of the winter words.  It can be any font, but it will need to be different from that of the other three seasons.
        -   Add any other rules you'd like for your winter words.
      CSD U2 classes modify_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        ::: details [**How does the code work?**]
        For the code to work, you need to both create a winter class and add elements to the class.

        The class is created in the style sheet, with the following code.

            .winter {
              color: rgb(195,230,255);
            }

        This code creates a class called `winter` and makes everything in the class our winter blue, which has the RGB values of (195,230,255).

        The code that adds a `h5` element to the winter class is `<h5 class="winter">`.  The `class=winter` inside the opening tag adds everything inside the tag to the class.
        :::

        ::: details [**What rules can be added to a class rule-set?**]

        A class rule-set can have the same rules as any other type of selector.  If a rule does not apply to the content of the class (for example, using `font-size` on an element with no text), then the computer will ignore that rule, but still use the rules that work.

        :::

        ::: details [**Why does the selector have a period in front of it?**]
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        :::

        ::: details [**Why would a web developer use classes?**]
        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.
        :::

        ::: details [**I got different RGB values, but mine are right, too.**]

        Because RGB creates millions of different colors, some are so similar that people have a hard time telling them apart.  That means that there are multiple RGB values that are close enough to work for our winter color.

        :::

        </div>

        # Adding Rules

        Your winter words should all have the same color and font.

        -   Find the CSS rule-set in the style sheet that gives the winter words their style.
        -   Add a rule that changes the font of the winter words.  It can be any font, but it will need to be different from that of the other three seasons.
        -   Add any other rules you'd like for your winter words.
      CSD U2 classes sample: "<div style=\"float: right; height: 250px; width: 40%;
        overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>How
        does the code work?</strong>\n</summary>\nFor the code to work, you need to
        both create a winter class and add elements to the class.\n\nThe class is
        created in the style sheet, with the following code.\n\n<pre>.winter {\n  color:
        rgb(195,230,255);\n}</pre>\n\nThis code creates a class called `winter` and
        makes everything in the class our winter blue, which has the RGB values of
        (195,230,255).\n\nThe code that adds a `h5` element to the winter class is
        `<h5 class=\"winter\">`.  The `class=winter` inside the opening tag adds everything
        inside the tag to the class.\n\n</details>\n<details>\n<summary>\n<strong>Why
        does the selector have a period in front of it?</strong>\n\n</summary>\nIn
        CSS, a period in front of a selector means that the selector is the name of
        a class.  If there is no period, it means that the selector is the name of
        an HTML tag.\n</details>\n<details>\n<summary>\n<strong>Why would a web developer
        use classes?</strong>\n\n</summary>\nA web developer uses classes when some
        elements should be styled differently than others, even if they are the same
        tag.  Classes can also be used to give elements that have different tags the
        same style.\n</details>\n<details>\n<summary>\n<strong>I got different RGB
        values, but mine are right, too.</strong>\n\n</summary>\n\nBecause RGB creates
        millions of different colors, some are so similar that people have a hard
        time telling them apart.  That means that there are multiple RGB values that
        are close enough to work for our winter color.\n\n</details>\n</div>\n\n#
        Classes\n\nIn this page, the web developer has used classes to give some of
        the words our winter color.\n\n-   Look at the HTML code for the winter words.
        \ Why is \"snowy\" the only winter word without the winter color?\n-   Add
        code to the HTML that will give \"snowy\" the same winter blue as the other
        words.\n-   Look inside the style sheet to find the rule that makes all the
        words in the winter class blue, and check whether your RGB numbers are close
        to the ones in the style sheet.  \n-   Discuss with your partner how the code
        works."
      CSD U2 classes sample_2018: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>How
        does the code work?</strong>\n</summary>\nFor the code to work, you need to
        both create a winter class and add elements to the class.\n\nThe class is
        created in the style sheet, with the following code.\n\n<pre>.winter {\n  color:
        rgb(195,230,255);\n}</pre>\n\nThis code creates a class called `winter` and
        makes everything in the class our winter blue, which has the RGB values of
        (195,230,255).\n\nThe code that adds a `h5` element to the winter class is
        `<h5 class=\"winter\">`.  The `class=winter` inside the opening tag adds everything
        inside the tag to the class.\n\n</details>\n<details>\n<summary>\n<strong>Why
        does the selector have a period in front of it?</strong>\n</summary>\nIn CSS,
        a period in front of a selector means that the selector is the name of a class.
        \ If there is no period, it means that the selector is the name of an HTML
        tag.\n</details>\n<details>\n<summary>\n<strong>Why would a web developer
        use classes?</strong>\n</summary>\nA web developer uses classes when some
        elements should be styled differently than others, even if they are the same
        tag.  Classes can also be used to give elements that have different tags the
        same style.\n</details>\n<details>\n<summary>\n<strong>I got different RGB
        values, but mine are right, too.</strong>\n</summary>\n\nBecause RGB creates
        millions of different colors, some are so similar that people have a hard
        time telling them apart.  That means that there are multiple RGB values that
        are close enough to work for our winter color.\n\n</details>\n</div>\n\n#
        Classes\n\nIn this page, the web developer has used classes to give some of
        the words our winter color.\n\n-   Look at the HTML code for the winter words.
        \ Why is \"snowy\" the only winter word without the winter color?\n-   Add
        code to the HTML that will give \"snowy\" the same winter blue as the other
        words.\n-   Look inside the style sheet to find the rule that makes all the
        words in the winter class blue, and check whether your RGB numbers are close
        to the ones in the style sheet.  \n-   Discuss with your partner how the code
        works."
      CSD U2 classes sample_2019: "<div class=\"no-pullthrough\" style=\"float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n\n::: details [**How does the code work?**]\nFor the code
        to work, you need to both create a winter class and add elements to the class.\n\nThe
        class is created in the style sheet, with the following code.\n\n    .winter
        {\n      color: rgb(195,230,255);\n    }\n\nThis code creates a class called
        `winter` and makes everything in the class our winter blue, which has the
        RGB values of (195,230,255).\n\nThe code that adds a `h5` element to the winter
        class is `<h5 class=\"winter\">`.  The `class=winter` inside the opening tag
        adds everything inside the tag to the class.\n:::\n\n::: details [**Why does
        the selector have a period in front of it?**]\nIn CSS, a period in front of
        a selector means that the selector is the name of a class.  If there is no
        period, it means that the selector is the name of an HTML tag.\n:::\n\n:::
        details [**Why would a web developer use classes?**]\nA web developer uses
        classes when some elements should be styled differently than others, even
        if they are the same tag.  Classes can also be used to give elements that
        have different tags the same style.\n:::\n\n::: details [**I got different
        RGB values, but mine are right, too.**]\n\nBecause RGB creates millions of
        different colors, some are so similar that people have a hard time telling
        them apart.  That means that there are multiple RGB values that are close
        enough to work for our winter color.\n\n:::\n\n</div>\n\n# Classes\n\nIn this
        page, the web developer has used classes to give some of the words our winter
        color.\n\n-   Look at the HTML code for the winter words.  Why is \"snowy\"
        the only winter word without the winter color?\n-   Add code to the HTML that
        will give \"snowy\" the same winter blue as the other words.\n-   Look inside
        the style sheet to find the rule that makes all the words in the winter class
        blue, and check whether your RGB numbers are close to the ones in the style
        sheet.  \n-   Discuss with your partner how the code works."
      CSD U2 classes spring: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>

        </summary>
        For the code to work, you need to both create a spring class and add elements to the class.

        The spring class is already created in the style sheet, but it doesn't have any rules.

        <pre>.spring {
          color: rgb(195,230,255);
        }</pre>

        Look at the rules in the `winter` class for clues to how to make rules for the summer class.

        You will also need to add some elements to the spring class inside your HTML file.

        The code in the HTML file that adds a `h5` element to the winter class is `<h5 class="winter">`.  Use this pattern to add elements to the spring class, too.

        </details>
        <details>
        <summary>
        <strong>What rules can be added to a class rule-set?</strong>

        </summary>

        A class rule-set can have the same rules as any other type of selector.  If a rule does not apply to the content of the class (for example, using `font-size` on an element with no text), then the computer will ignore that rule, but still use the rules that work.

        </details>
        <details>
        <summary>
        <strong>Why does the selector have a period in front of it?</strong>

        </summary>
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        </details>
        <details>
        <summary>
        <strong>Why would a web developer use classes?</strong>

        </summary>

        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.

        </details>
        </div>

        # Spring Class

        Now that your winter class is ready, you can start on the other seasons.

        -   Find the empty CSS rule-set in the style sheet that gives the spring words their style.
        -   Add two rules, one to give the text your spring color for earlier in the lesson, and another to give the text a different font, font size, or decoration.
        -   Add the spring class to the spring elements in the HTML page.
      CSD U2 classes spring_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>
        For the code to work, you need to both create a spring class and add elements to the class.

        The spring class is already created in the style sheet, but it doesn't have any rules.

        <pre>.spring {
          color: rgb(195,230,255);
        }</pre>

        Look at the rules in the `winter` class for clues to how to make rules for the summer class.

        You will also need to add some elements to the spring class inside your HTML file.

        The code in the HTML file that adds a `h5` element to the winter class is `<h5 class="winter">`.  Use this pattern to add elements to the spring class, too.

        </details>
        <details>
        <summary>
        <strong>What rules can be added to a class rule-set?</strong>
        </summary>

        A class rule-set can have the same rules as any other type of selector.  If a rule does not apply to the content of the class (for example, using `font-size` on an element with no text), then the computer will ignore that rule, but still use the rules that work.

        </details>
        <details>
        <summary>
        <strong>Why does the selector have a period in front of it?</strong>
        </summary>
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        </details>
        <details>
        <summary>
        <strong>Why would a web developer use classes?</strong>
        </summary>

        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.

        </details>
        </div>

        # Spring Class

        Now that your winter class is ready, you can start on the other seasons.

        -   Find the empty CSS rule-set in the style sheet that gives the spring words their style.
        -   Add two rules, one to give the text your spring color for earlier in the lesson, and another to give the text a different font, font size, or decoration.
        -   Add the spring class to the spring elements in the HTML page.
      CSD U2 classes spring_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        ::: details [**How does the code work?**]
        For the code to work, you need to both create a spring class and add elements to the class.

        The spring class is already created in the style sheet, but it doesn't have any rules.

            .spring {
              color: rgb(195,230,255);
            }

        Look at the rules in the `winter` class for clues to how to make rules for the summer class.

        You will also need to add some elements to the spring class inside your HTML file.

        The code in the HTML file that adds a `h5` element to the winter class is `<h5 class="winter">`.  Use this pattern to add elements to the spring class, too.
        :::

        ::: details [**What rules can be added to a class rule-set?**]

        A class rule-set can have the same rules as any other type of selector.  If a rule does not apply to the content of the class (for example, using `font-size` on an element with no text), then the computer will ignore that rule, but still use the rules that work.
        :::

        ::: details [**Why does the selector have a period in front of it?**]
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        :::

        ::: details [**Why would a web developer use classes?**]

        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.

        :::

        </div>

        # Spring Class

        Now that your winter class is ready, you can start on the other seasons.

        -   Find the empty CSS rule-set in the style sheet that gives the spring words their style.
        -   Add two rules, one to give the text your spring color for earlier in the lesson, and another to give the text a different font, font size, or decoration.
        -   Add the spring class to the spring elements in the HTML page.
      CSD U2 classes summer: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>

        </summary>
        For the code for the winter class to work, it needs to both create a winter class and add elements to the class.

        The class is created in the style sheet, with the following code.

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        This code creates a class called `winter` and makes everything in the class our winter blue, which has the RGB values of (195,230,255).

        The code that adds a `h5` element to the winter class is `<h5 class="winter">`.  The `class=winter` inside the opening tag adds everything inside the tag to the class.

        </details>
        <details>
        <summary>
        <strong>How do I create a new rule-set?</strong>

        </summary>
        You can create a new rule-set by following the pattern that the `winter` and `spring` classes used in the style sheet.
        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        The selector name and the color values will be different, but the following pattern is always the same.

        <pre>.classname {
          property1: value1;
          property2: value2;
        }</pre>

        </details>
        <details>
        <summary>
        <strong>Why does the selector have a period in front of it?</strong>

        </summary>
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        </details>
        <details>
        <summary>
        <strong>Why would a web developer use classes?</strong>

        </summary>

        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.

        </details>
        </div>

        # Summer and Autumn Classes

        -   Inside the style sheet, create a new rule-set for a "summer" class.
        -   Add a rule to set the text in the summer class to your summer RGB color.
        -   Add the summer class to the summer elements in the HTML page.
        -   Do the same for the autumn class.
      CSD U2 classes summer_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>
        For the code for the winter class to work, it needs to both create a winter class and add elements to the class.

        The class is created in the style sheet, with the following code.

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        This code creates a class called `winter` and makes everything in the class our winter blue, which has the RGB values of (195,230,255).

        The code that adds a `h5` element to the winter class is `<h5 class="winter">`.  The `class=winter` inside the opening tag adds everything inside the tag to the class.

        </details>
        <details>
        <summary>
        <strong>How do I create a new rule-set?</strong>
        </summary>

        You can create a new rule-set by following the pattern that the `winter` and `spring` classes used in the style sheet.

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        The selector name and the color values will be different, but the following pattern is always the same.

        <pre>.classname {
          property1: value1;
          property2: value2;
        }</pre>

        </details>
        <details>
        <summary>
        <strong>Why does the selector have a period in front of it?</strong>
        </summary>
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        </details>
        <details>
        <summary>
        <strong>Why would a web developer use classes?</strong>
        </summary>

        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.

        </details>
        </div>

        # Summer and Autumn Classes

        -   Inside the style sheet, create a new rule-set for a "summer" class.
        -   Add a rule to set the text in the summer class to your summer RGB color.
        -   Add the summer class to the summer elements in the HTML page.
        -   Do the same for the autumn class.
      CSD U2 classes summer_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        ::: details [**How does the code work?**]
        For the code for the winter class to work, it needs to both create a winter class and add elements to the class.

        The class is created in the style sheet, with the following code.

            .winter {
              color: rgb(195,230,255);
            }

        This code creates a class called `winter` and makes everything in the class our winter blue, which has the RGB values of (195,230,255).

        The code that adds a `h5` element to the winter class is `<h5 class="winter">`.  The `class=winter` inside the opening tag adds everything inside the tag to the class.
        :::

        ::: details [**How do I create a new rule-set?**]

        You can create a new rule-set by following the pattern that the `winter` and `spring` classes used in the style sheet.

            .winter {
              color: rgb(195,230,255);
            }

        The selector name and the color values will be different, but the following pattern is always the same.

            .classname {
              property1: value1;
              property2: value2;
            }

        :::

        ::: details [**Why does the selector have a period in front of it?**]
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        :::

        ::: details [**Why would a web developer use classes?**]

        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.

        :::

        </div>

        # Summer and Autumn Classes

        -   Inside the style sheet, create a new rule-set for a "summer" class.
        -   Add a rule to set the text in the summer class to your summer RGB color.
        -   Add the summer class to the summer elements in the HTML page.
        -   Do the same for the autumn class.
      CSD U2 commenting: |-
        # Comments

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What is whitespace?</strong></summary>

        Whitespace refers to any character that shows up as a blank space on the screen, such as a space, a tab, or a new line. Whitespace helps separate different parts of the document to make it easier to read.  For example, in HTML code new elements are usually put on a new line, even though it doesn't make any difference in how the page is displayed.

        </details>
        <details>
        <summary>
        <strong>What is indentation?</strong>
        </summary>
        Indentation is the placement of text farther to the right, or left, to separate it from surrounding text.  Indentation helps to convey the program's structure.  In HTML, elements that are inside other elements are usually indented.  Here is an example:
        <pre>
           &lt;body&gt;
              &lt;p&gt;This paragraph is inside the "body" element.&lt;/p&gt;
           &lt;/body&gt;
        </pre>
        </details>
        <details>
        <summary>
        <strong>What is formatting?</strong>
        </summary>

        Formatting is arranging text in a way that makes it easier to understand.  HTML is usually formatted using indentation.  That means that elements that are inside other elements are further to the right in code.  Here is an example:

        <pre>
           &lt;body&gt;
              &lt;p&gt;This paragraph is inside the "body" element.&lt;/p&gt;
           &lt;/body&gt;
        </pre>

        </details>
        </div>

        You can add **comments** to your code to explain the different parts of the code and what it should create.  Comments can help you to debug, and will also help other people who are trying to understand your code.

        <pre>
        &lt;!-- this is a comment --&gt;
        </pre>

        # Do This

        -   Look at the code with your partner and find the comments.
        -   Use the comments to help you fix the bugs in the HTML.
      CSD U2 commenting_2018: |-
        # Comments

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What is whitespace?</strong></summary>
        Whitespace refers to any character that shows up as a blank space on the screen, such as a space, a tab, or a new line. Whitespace helps separate different parts of the document to make it easier to read.  For example, in HTML code new elements are usually put on a new line, even though it doesn't make any difference in how the page is displayed.
        </details>
        <details>
        <summary><strong>What is indentation?</strong></summary>
        Indentation is the placement of text farther to the right, or left, to separate it from surrounding text.  Indentation helps to convey the program's structure.  In HTML, elements that are inside other elements are usually indented.  Here is an example:
        <pre>
           &lt;body&gt;
              &lt;p&gt;This paragraph is inside the "body" element.&lt;/p&gt;
           &lt;/body&gt;
        </pre>
        </details>
        <details>
        <summary><strong>What is formatting?</strong></summary>

        Formatting is arranging text in a way that makes it easier to understand.  HTML is usually formatted using indentation.  That means that elements that are inside other elements are further to the right in code.  Here is an example:

        <pre>
           &lt;body&gt;
              &lt;p&gt;This paragraph is inside the "body" element.&lt;/p&gt;
           &lt;/body&gt;
        </pre>

        </details>
        </div>

        You can add **comments** to your code to explain the different parts of the code and what it should create.  Comments can help you to debug, and will also help other people who are trying to understand your code.

        <pre>
        &lt;!-- this is a comment --&gt;
        </pre>

        # Do This

        -   Look at the code with your partner and find the comments.
        -   Use the comments to help you fix the bugs in the HTML.
      CSD U2 commenting_2019: |-
        # Comments

        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        ::: details [**What is whitespace?**]
        Whitespace refers to any character that shows up as a blank space on the screen, such as a space, a tab, or a new line. Whitespace helps separate different parts of the document to make it easier to read.  For example, in HTML code new elements are usually put on a new line, even though it doesn't make any difference in how the page is displayed.
        :::

        ::: details [**What is indentation?**]
        Indentation is the placement of text farther to the right, or left, to separate it from surrounding text.  Indentation helps to convey the program's structure.  In HTML, elements that are inside other elements are usually indented.  Here is an example:

               <body>
                  <p>This paragraph is inside the "body" element.</p>
               </body>

        :::

        ::: details [**What is formatting?**]

        Formatting is arranging text in a way that makes it easier to understand.  HTML is usually formatted using indentation.  That means that elements that are inside other elements are further to the right in code.  Here is an example:

               <body>
                  <p>This paragraph is inside the "body" element.</p>
               </body>

        :::

        </div>

        You can add **comments** to your code to explain the different parts of the code and what it should create.  Comments can help you to debug, and will also help other people who are trying to understand your code.

            <!-- this is a comment -->

        # Do This

        -   Look at the code with your partner and find the comments.
        -   Use the comments to help you fix the bugs in the HTML.
      CSD U2 create page: |-
        # Create and Name Your New Page

        Before you start coding, you should make sure that you have all the pages that you need in your project.

        # Do This

        -   Create a new HTML page and rename it. (Look at <a href="/s/csd2-2017/stage/6/puzzle/8" target="_new">Lesson 6 Level 8</a> if you've forgotten how.)
        -   Repeat this process for any other pages you want to add.
      CSD U2 create page_2018: |-
        # Create and Name Your New Page

        Before you start coding, you should make sure that you have all the pages that you need in your project.

        # Do This

        -   Create a new HTML page and rename it. (Look at <a href="../../../stage/6/puzzle/8" target="_new">Lesson 6 Level 8</a> if you've forgotten how.)
        -   Repeat this process for any other pages you want to add.
      CSD U2 create page_2019: |-
        # Create and Name Your New Page

        Before you start coding, you should make sure that you have all the pages that you need in your project.

        # Do This

        -   Create a new HTML page and rename it. (Look at <a href="../../../stage/6/puzzle/8" target="_new">Lesson 6 Level 8</a> if you've forgotten how.)
        -   Repeat this process for any other pages you want to add.
      CSD U2 header footer: |-
        # Navigation Bar and Footer

        Each of your pages needs a navigation bar and a footer.

        # Do This

        -   For each page, make sure it has a navigation bar that links to other pages in your site.  For a review of the navigation bar, go to <a href="/s/csd2-2017/stage/9/puzzle/4" target="_new">Lesson 9 Level 4</a>.
        -   For each page, make sure it has a footer at the bottom that explains the copyright information for your page. (Go to <a href="https://creativecommons.org/choose/" target="_new">Creative Commons</a> for help in creating this HTML.)
      CSD U2 header footer_2018: |-
        # Navigation Bar and Footer

        Each of your pages needs a navigation bar and a footer.

        # Do This

        -   For each page, make sure it has a navigation bar that links to other pages in your site.  For a review of the navigation bar, go to <a href="4" target="_new">Lesson 9 Level 4</a>.
        -   For each page, make sure it has a footer at the bottom that explains the copyright information for your page. (Go to <a href="https://creativecommons.org/choose/" target="_new">Creative Commons</a> for help in creating this HTML.)
      CSD U2 header footer_2019: |-
        # Navigation Bar and Footer

        Each of your pages needs a navigation bar and a footer.

        # Do This

        -   For each page, make sure it has a navigation bar that links to other pages in your site.  For a review of the navigation bar, go to <a href="4" target="_new">Lesson 9 Level 4</a>.
        -   For each page, make sure it has a footer at the bottom that explains the copyright information for your page. (Go to <a href="https://creativecommons.org/choose/" target="_new">Creative Commons</a> for help in creating this HTML.)
      CSD U2 layout style bgcolor: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>How does the code work?</strong></summary>

        Here is the code that is making the background of the page blue:

        <pre>body {
          background-color: lightblue;
        }</pre>

        -   `body` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the body element is the entire page.
        -   `background-color: lightblue;` is the rule that makes the entire page light blue.
            -   `background-color` is the _property_.  It explains what the rule is about, in this case the color of the background.
            -   `lightblue` is the _value_.  It explains how the rule should be applied, in this case making the background light blue.
                </details>
                <details>
                <summary><strong>What colors can I use in CSS?</strong></summary>

        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools - CSS Legal Color Values</a>

        </details>
        <details>
        <summary><strong>What does the `background-color` property do?</strong></summary>

        The `background-color` property determines the color of the background of an element.  You can read more about the property at <a href="http://www.w3schools.com/cssref/pr_background-color.asp">W3Schools - CSS background-color Property</a>

        </details>
        <details>
        <summary><strong>What if an element inside the page has a different background color from the body?</strong></summary>

        You can see the answer to this question by adding a `background-color` rule to the `p` tag.  The paragraphs will have the background color in the rule for the `p` tag, and the rest of the page will follow the rule for the `body` tag.

        </details>
        <details>
        <summary><strong>What is a style sheet?</strong></summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Background Color

        -   Find the code in the style sheet that is making the background of the entire page light blue.
        -   Change the code to make the page a different color.
        -   Try to change the background color of just the paragraphs.
      CSD U2 layout style bgcolor_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>

        Here is the code that is making the background of the page blue:

        <pre>
        body {
          background-color: lightblue;
        }
        </pre>

        -   `body` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the body element is the entire page.
        -   `background-color: lightblue;` is the rule that makes the entire page light blue.
            -   `background-color` is the _property_.  It explains what the rule is about, in this case the color of the background.
            -   `lightblue` is the _value_.  It explains how the rule should be applied, in this case making the background light blue.

        </details>
        <details>
        <summary>
        <strong>What colors can I use in CSS?</strong>
        </summary>

        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp" target="_new">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp" target="_new">W3Schools - CSS Legal Color Values</a>

        </details>
        <details>
        <summary>
        <strong>What does the background-color property do?</strong>
        </summary>

        The `background-color` property determines the color of the background of an element.  You can read more about the property at <a href="http://www.w3schools.com/cssref/pr_background-color.asp" target="_new">W3Schools - CSS background-color Property</a>

        </details>
        <details>
        <summary>
        <strong>What if an element inside the page has a different background color from the body?</strong>
        </summary>

        You can see the answer to this question by adding a `background-color` rule to the `p` tag.  The paragraphs will have the background color in the rule for the `p` tag, and the rest of the page will follow the rule for the `body` tag.

        </details>
        <details>
        <summary>
        <strong>What is a style sheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>
        h2 {
          color: blue;
          font-family: cursive;
        }
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Background Color

        -   Find the code in the style sheet that is making the background of the entire page light blue.
        -   Change the code to make the page a different color.
        -   Try to change the background color of just the paragraphs.
      CSD U2 layout style bgcolor_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**How does the code work?**]

        Here is the code that is making the background of the page blue:

            body {
              background-color: lightblue;
            }

        -   `body` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the body element is the entire page.
        -   `background-color: lightblue;` is the rule that makes the entire page light blue.
            -   `background-color` is the _property_.  It explains what the rule is about, in this case the color of the background.
            -   `lightblue` is the _value_.  It explains how the rule should be applied, in this case making the background light blue.

        :::

        ::: details [**What colors can I use in CSS?**]

        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp" target="_new">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp" target="_new">W3Schools - CSS Legal Color Values</a>

        :::

        ::: details [**What does the background-color property do?**]

        The `background-color` property determines the color of the background of an element.  You can read more about the property at <a href="http://www.w3schools.com/cssref/pr_background-color.asp" target="_new">W3Schools - CSS background-color Property</a>

        :::

        ::: details [**What if an element inside the page has a different background color from the body?**]

        You can see the answer to this question by adding a `background-color` rule to the `p` tag.  The paragraphs will have the background color in the rule for the `p` tag, and the rest of the page will follow the rule for the `body` tag.

        :::

        ::: details [**What is a style sheet?**]

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        :::

        ::: details [**What is CSS?**]

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

            h2 {
              color: blue;
              font-family: cursive;
            }

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        :::

        </div>

        # Background Color

        -   Find the code in the style sheet that is making the background of the entire page light blue.
        -   Change the code to make the page a different color.
        -   Try to change the background color of just the paragraphs.
      CSD U2 layout style body: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">
        <details>

        <summary><strong>What does the `body` selector do?</strong></summary>

        Because the content of the web page is all inside the `body` tag, the body selector gives style rules for everything on the web page.

        </details>
        <details>
        <summary><strong>What does the `color` property do?</strong></summary>

        The `color` property specifies the color of the text.  If there’s no text, it won’t do anything. Read more at <a href="http://www.w3schools.com/cssref/pr_text_color.asp"> W3Schools - CSS color Property</a>

        </details>
        <details>
        <summary><strong>What does the `text-align` property do?</strong></summary>

        The `text-align` property aligns the text to the left, right, or center. You can read more at <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp">W3Schools - CSS text-align Property</a>

        </details>
        <details>
        <summary><strong>What does the `text-decoration` property do?</strong></summary>

        The `text-decoration` property puts a line over, under, or through a piece of text.  You can read more about the property at <a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp">W3Schools - CSS text-decoration Property</a>

        </details>
        <details>
        <summary><strong>What does the `font-family` property do?</strong></summary>

        The `font-family` property changes the font of the text.  It gives a general description of the type of font that should be used, but each browser might display the font slightly differently.  Read more at <a href="http://www.w3schools.com/cssref/pr_font_font-family.asp">W3chools - CSS font-family Property</a>

        </details>
        <details>
        <summary><strong>What does the `font-size` property do?</strong></summary>

        The `font-size` property changes the size of the text.  You can use general terms, such as `small`, `medium`, and `large`, or you can specify the exact size in pixels, such as `20px`. Read more at <a href="http://www.w3schools.com/cssref/pr_font_font-size.asp">W3Schools - CSS font-size Property</a>

        </details>
        <details>
        <summary><strong>What is a stylesheet?</strong></summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # The Body Element

        -   Find the `body` rule-set in the style sheet.
        -   Discuss with a partner what you think will happen if you add `text-align`, `color`, or other text properties to the `body` rule set.
        -   Try out some different properties to check your guesses.
      CSD U2 layout style body_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What does the body selector do?</strong>
        </summary>

        Because the content of the web page is all inside the `body` tag, the body selector gives style rules for everything on the web page.

        </details>
        <details>
        <summary>
        <strong>What does the color property do?</strong>
        </summary>

        The `color` property specifies the color of the text.  If there’s no text, it won’t do anything. Read more at <a href="http://www.w3schools.com/cssref/pr_text_color.asp" target="_new"> W3Schools - CSS color Property</a>

        </details>
        <details>
        <summary>
        <strong>What does the text-align property do?</strong>
        </summary>

        The `text-align` property aligns the text to the left, right, or center. You can read more at <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp" target="_new">W3Schools - CSS text-align Property</a>

        </details>
        <details>
        <summary>
        <strong>What does the text-decoration property do?</strong>
        </summary>

        The `text-decoration` property puts a line over, under, or through a piece of text.  You can read more about the property at <a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp" target="_new">W3Schools - CSS text-decoration Property</a>

        </details>
        <details>
        <summary>
        <strong>What does the font-family property do?</strong>
        </summary>

        The `font-family` property changes the font of the text.  It gives a general description of the type of font that should be used, but each browser might display the font slightly differently.  Read more at <a href="http://www.w3schools.com/cssref/pr_font_font-family.asp" target="_new">W3chools - CSS font-family Property</a>

        </details>
        <details>
        <summary>
        <strong>What does the font-size property do?</strong>
        </summary>

        The `font-size` property changes the size of the text.  You can use general terms, such as `small`, `medium`, and `large`, or you can specify the exact size in pixels, such as `20px`. Read more at <a href="http://www.w3schools.com/cssref/pr_font_font-size.asp" target="_new">W3Schools - CSS font-size Property</a>

        </details>
        <details>
        <summary>
        <strong>What is a stylesheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>
        h2 {
           color: blue;
           font-family: cursive;
        }
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # The Body Element

        -   Find the `body` rule-set in the style sheet.
        -   Discuss with a partner what you think will happen if you add `text-align`, `color`, or other text properties to the `body` rule set.
        -   Try out some different properties to check your guesses.
      CSD U2 layout style body_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**What does the body selector do?**]

        Because the content of the web page is all inside the `body` tag, the body selector gives style rules for everything on the web page.

        :::

        ::: details [**What does the color property do?**]

        The `color` property specifies the color of the text.  If there’s no text, it won’t do anything. Read more at <a href="http://www.w3schools.com/cssref/pr_text_color.asp" target="_new"> W3Schools - CSS color Property</a>

        :::

        ::: details [**What does the text-align property do?**]

        The `text-align` property aligns the text to the left, right, or center. You can read more at <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp" target="_new">W3Schools - CSS text-align Property</a>

        :::

        ::: details [**What does the text-decoration property do?**]

        The `text-decoration` property puts a line over, under, or through a piece of text.  You can read more about the property at <a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp" target="_new">W3Schools - CSS text-decoration Property</a>

        :::

        ::: details [**What does the font-family property do?**]

        The `font-family` property changes the font of the text.  It gives a general description of the type of font that should be used, but each browser might display the font slightly differently.  Read more at <a href="http://www.w3schools.com/cssref/pr_font_font-family.asp" target="_new">W3chools - CSS font-family Property</a>

        :::

        ::: details [**What does the font-size property do?**]

        The `font-size` property changes the size of the text.  You can use general terms, such as `small`, `medium`, and `large`, or you can specify the exact size in pixels, such as `20px`. Read more at <a href="http://www.w3schools.com/cssref/pr_font_font-size.asp" target="_new">W3Schools - CSS font-size Property</a>

        :::

        ::: details [**What is a stylesheet?**]

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        :::

        ::: details [**What is CSS?**]

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

            h2 {
               color: blue;
               font-family: cursive;
            }

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        :::

        </div>

        # The Body Element

        -   Find the `body` rule-set in the style sheet.
        -   Discuss with a partner what you think will happen if you add `text-align`, `color`, or other text properties to the `body` rule set.
        -   Try out some different properties to check your guesses.
      CSD U2 layout style border: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What colors can I use in CSS?</strong></summary>

        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools - CSS Legal Color Values</a>

        </details>
        <details>
        <summary><strong>How does the code work?</strong></summary>

        Here is the code that is making the image borders:

        <pre>img {
          border-color: saddlebrown;
          border-width: 4px;
          border-style: solid;
          border-radius: 10px;
        }</pre>

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;`, and `border-radius: 10px;` are the rules that make the border.
            </details>
            <details>
            <summary><strong>What does the <code>border-style</code> property do?</strong></summary>

        The `border-style` property determines what kind of border (solid, dotted, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp">W3Schools - CSS border-style Property</a>

        </details>
        <details>
        <summary><strong>What does the <code>border-radius</code> property do?</strong></summary>

        The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp">W3Schools - CSS3 border-radius property</a>

        </details>
        <details>
        <summary><strong>What does the <code>float</code> property do?</strong></summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Borders

        -   Find the rules in the style sheet that set image borders color and width.
        -   Change the color and width of your borders.
        -   Try out some different border styles.
            -   Choose from `dotted`, `dashed`, `solid`, and `double`
        -   Put a border on another type of page element, such as one of the headings or the paragraphs.
      CSD U2 layout style border_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What colors can I use in CSS?</strong>
        </summary>
        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp" target="_new">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp" target="_new">W3Schools - CSS Legal Color Values</a>
        </details>
        <details>
        <summary>
        <strong>How does the code work?</strong>
        </summary>
        Here is the code that is making the image borders:

        <pre>img {
          border-color: saddlebrown;
          border-width: 4px;
          border-style: solid;
          border-radius: 10px;
        }</pre>

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;`, and `border-radius: 10px;` are the rules that make the border.
            </details>
            <details>
            <summary>
            <strong>What does the <code>border-style</code> property do?</strong>
            </summary>
            The `border-style` property determines what kind of border (solid, dotted, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp" target="_new">W3Schools - CSS border-style Property</a>
            </details>
            <details>
            <summary>
            <strong>What does the <code>border-radius</code> property do?</strong>
            </summary>
            The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp" target="_new">W3Schools - CSS3 border-radius property</a>
            </details>
            <details>
            <summary>
            <strong>What does the <code>float</code> property do?</strong>
            </summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Borders

        -   Find the rules in the style sheet that set image borders color and width.
        -   Change the color and width of your borders.
        -   Try out some different border styles.
            -   Choose from `dotted`, `dashed`, `solid`, and `double`
        -   Put a border on another type of page element, such as one of the headings or the paragraphs.
      CSD U2 layout style border_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        ::: details [**What colors can I use in CSS?**]
        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp" target="_new">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp" target="_new">W3Schools - CSS Legal Color Values</a>
        :::

        ::: details [**How does the code work?**]
        Here is the code that is making the image borders:

            img {
              border-color: saddlebrown;
              border-width: 4px;
              border-style: solid;
              border-radius: 10px;
            }

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;`, and `border-radius: 10px;` are the rules that make the border.
            :::

        ::: details [**What does the <code>border-style</code> property do?**]
        The `border-style` property determines what kind of border (solid, dotted, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp" target="_new">W3Schools - CSS border-style Property</a>
        :::

        ::: details [**What does the <code>border-radius</code> property do?**]
        The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp" target="_new">W3Schools - CSS3 border-radius property</a>
        :::

        ::: details [**What does the `float` property do?**]

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        :::

        </div>

        # Borders

        -   Find the rules in the style sheet that set image borders color and width.
        -   Change the color and width of your borders.
        -   Try out some different border styles.
            -   Choose from `dotted`, `dashed`, `solid`, and `double`
        -   Put a border on another type of page element, such as one of the headings or the paragraphs.
      CSD U2 layout style borderradius: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>How does the code work?</strong></summary>

        Here is the code that is making the image borders:

        <pre>img {
          border-color: saddlebrown;
          border-width: 4px;
          border-style: solid;
          border-radius: 10px;
        }</pre>

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;`, and `border-radius: 10px;` are the rules that make the border.
            </details>
            <details>
            <summary><strong>What does the `border-style` property do?</strong>
            </summary>

        The `border-style` property determines what kind of border (solid, dotted, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp">W3Schools - CSS border-style Property</a>

        </details>
        <details>
        <summary><strong>What does the <code>border-radius</code>code> property do?</strong>

        </summary>

        The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp">W3Schools - CSS3 border-radius property</a>

        </details>
        <details>
        <summary><strong>What does the <code>float</code> property do?</strong>
        </summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Border Radius

        -   Look at the `border-radius` property inside your `img` rule-set
        -   Discuss with your partner what you think the property does.
        -   Try different values for border radius and decide which one you like the best.
      CSD U2 layout style borderradius_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>
        Here is the code that is making the image borders:

        <pre>img {
          border-color: saddlebrown;
          border-width: 4px;
          border-style: solid;
          border-radius: 10px;
        }</pre>

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;`, and `border-radius: 10px;` are the rules that make the border.
            </details>
            <details>
            <summary>
            <strong>What does the <code>border-style</code> property do?</strong>
            </summary>
            The `border-style` property determines what kind of border (solid, dotted, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp" target="_new">W3Schools - CSS border-style Property</a>
            </details>
            <details>
            <summary>
            <strong>What does the <code>border-radius</code> property do?</strong>
            </summary>
            The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp" target="_new">W3Schools - CSS3 border-radius property</a>
            </details>
            <details>
            <summary>
            <strong>What does the <code>float</code> property do?</strong>
            </summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Border Radius

        -   Look at the `border-radius` property inside your `img` rule-set
        -   Discuss with your partner what you think the property does.
        -   Try different values for border radius and decide which one you like the best.
      CSD U2 layout style borderradius_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        ::: details [**How does the code work?**]
        Here is the code that is making the image borders:

            img {
              border-color: saddlebrown;
              border-width: 4px;
              border-style: solid;
              border-radius: 10px;
            }

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;`, and `border-radius: 10px;` are the rules that make the border.
            :::

        ::: details [**What does the <code>border-style</code> property do?**]
        The `border-style` property determines what kind of border (solid, dotted, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp" target="_new">W3Schools - CSS border-style Property</a>
        :::

        ::: details [**What does the <code>border-radius</code> property do?**]
        The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp" target="_new">W3Schools - CSS3 border-radius property</a>
        :::

        ::: details [**What does the <code>float</code> property do?**]

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        :::

        </div>

        # Border Radius

        -   Look at the `border-radius` property inside your `img` rule-set
        -   Discuss with your partner what you think the property does.
        -   Try different values for border radius and decide which one you like the best.
      CSD U2 layout style float: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        <details>

        <summary><strong>How does the code work?</strong></summary>

        Here is the code that is making the image float on the left hand side of the page:

        <pre>img {
          float: left;
        }</pre>

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `float: left;` is the rule that makes the image float to the left.
            </details>
            <details>
            <summary><strong>What does the <code>float</code> property do?</strong></summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Float

        -   Look at the `float` property inside your `img` rule-set
        -   Discuss with your partner what you think the property does.
        -   Change the value from `left` to `right`.
      CSD U2 layout style float_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>
        Here is the code that is making the image float on the left hand side of the page:

        <pre>img {
          float: left;
        }</pre>

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `float: left;` is the rule that makes the image float to the left.
            </details>
            <details>
            <summary>
            <strong>
            What does the <code>float</code> property do?

        </strong>
        </summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Float

        -   Look at the `float` property inside your `img` rule-set
        -   Discuss with your partner what you think the property does.
        -   Change the value from `left` to `right`.
      CSD U2 layout style float_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**How does the code work?**]
        Here is the code that is making the image float on the left hand side of the page:

            img {
              float: left;
            }

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `float: left;` is the rule that makes the image float to the left.
            :::

        ::: details [**What does the `float` property do?**]

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        :::

        </div>

        # Float

        -   Look at the `float` property inside your `img` rule-set
        -   Discuss with your partner what you think the property does.
        -   Change the value from `left` to `right`.
      CSD U2 layout style freeplay: |-
        # Personal Web Site

        Try out some of these new CSS properties on your personal web site.

        -   Add styling of your choice to your web site. Be sure to use at least three new CSS properties.

        # Checklist

        -   At least three of the following CSS Properties are used:

            -   `background-color`
            -   `height`
            -   `width`
            -   `border-style`
            -   `border-radius`
            -   `border-width`
            -   `float`
            -   `margin`

        We encourage you to use more than three, though!  Explore additional CSS properties and add them to your page.
      CSD U2 layout style freeplay_2018: |-
        # Personal Web Site

        Try out some of these new CSS properties on your personal web site.

        -   Add styling of your choice to your web site. Be sure to use at least three new CSS properties.

        # Checklist

        -   At least three of the following CSS Properties are used:

            -   `background-color`
            -   `height`
            -   `width`
            -   `border-style`
            -   `border-radius`
            -   `border-width`
            -   `float`
            -   `margin`

        We encourage you to use more than three, though!  Explore additional CSS properties and add them to your page.
      CSD U2 layout style freeplay_2019: |-
        # Personal Web Site

        Try out some of these new CSS properties on your personal web site.

        -   Add styling of your choice to your web site. Be sure to use at least three new CSS properties.

        # Checklist

        -   At least three of the following CSS Properties are used:

            -   `background-color`
            -   `height`
            -   `width`
            -   `border-style`
            -   `border-radius`
            -   `border-width`
            -   `float`
            -   `margin`

        We encourage you to use more than three, though!  Explore additional CSS properties and add them to your page.
      CSD U2 layout style margin: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>How
        does the code work?</strong></summary>\n\nHere is the code that is putting
        extra space around the images:\n\n<pre>img {\n\tmargin: 10px;\n}</pre>\n\n-
        \  `img` is the _selector_.  It specifies which elements will have to follow
        the rules inside the curly braces, in this case, the images.\n-   `margin:
        10px;` is the rule that puts 10 pixels of space around the image.\n    </details>\n
        \   <details>\n    <summary><strong>What does the `margin` property do?</strong></summary>\n\nThe
        `margin` property determines how much space will be around the image.  Most
        of the time, you will define in the margin in pixels.  You can read more about
        this property at <a href=\"http://www.w3schools.com/cssref/pr_margin.asp\">W3Schools
        - CSS margin Property</a>\n\n</details>\n<details>\n<summary><strong>What
        does `px` mean / What is a pixel?</strong></summary>\n\nPixel, which is abbreviated
        `px`, is how elements are measured in CSS.  It’s the size of a single point
        of light on the screen.\n\n</details>\n</div>\n\n# Margin\n\nMargins specify
        how much space should be around an element.\n\n-   Find the `margin` property
        in the `img` rule-set.\n-   Change the margin to be larger, and discuss the
        effect with a partner.\n-   Choose another element type and give it a margin,
        too."
      CSD U2 layout style margin_2018: "<div style=\"float: right; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>How
        does the code work?</strong>\n</summary>\nHere is the code that is putting
        extra space around the images:\n\n<pre>img {\n\tmargin: 10px;\n}</pre>\n\n-
        \  `img` is the _selector_.  It specifies which elements will have to follow
        the rules inside the curly braces, in this case, the images.\n\n-   `margin:
        10px;` is the rule that puts 10 pixels of space around the image.\n    </details>\n
        \   <details>\n    <summary>\n    <strong>What does the `margin` property
        do?</strong>\n    </summary>\n\nThe `margin` property determines how much
        space will be around the image.  Most of the time, you will define in the
        margin in pixels.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_margin.asp\"
        target=\"_new\">W3Schools - CSS margin Property</a>\n\n</details>\n<details>\n<summary>\n<strong>What
        does `px` mean / What is a pixel?</strong>\n</summary>\n\nPixel, which is
        abbreviated `px`, is how elements are measured in CSS.  It’s the size of a
        single point of light on the screen.\n\n</details>\n</div>\n\n# Margin\n\nMargins
        specify how much space should be around an element.\n\n-   Find the `margin`
        property in the `img` rule-set.\n-   Change the margin to be larger, and discuss
        the effect with a partner.\n-   Choose another element type and give it a
        margin, too."
      CSD U2 layout style margin_2019: "<div class=\"no-pullthrough\" style=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n\n::: details [**How does the code work?**]\nHere is the
        code that is putting extra space around the images:\n\n    img {\n    \tmargin:
        10px;\n    }\n\n-   `img` is the _selector_.  It specifies which elements
        will have to follow the rules inside the curly braces, in this case, the images.\n\n-
        \  `margin: 10px;` is the rule that puts 10 pixels of space around the image.\n
        \   :::\n\n::: details [**What does the `margin` property do?**]\n\nThe `margin`
        property determines how much space will be around the image.  Most of the
        time, you will define in the margin in pixels.  You can read more about this
        property at <a href=\"http://www.w3schools.com/cssref/pr_margin.asp\" target=\"_new\">W3Schools
        - CSS margin Property</a>\n:::\n\n::: details [**What does `px` mean / What
        is a pixel?**]\n\nPixel, which is abbreviated `px`, is how elements are measured
        in CSS.  It’s the size of a single point of light on the screen.\n\n:::\n\n</div>\n\n#
        Margin\n\nMargins specify how much space should be around an element.\n\n-
        \  Find the `margin` property in the `img` rule-set.\n-   Change the margin
        to be larger, and discuss the effect with a partner.\n-   Choose another element
        type and give it a margin, too."
      CSD U2 layout style sample: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What does the `body` selector do?</strong></summary>

        Because the content of the web page is all inside the `body` tag, the body selector gives style rules for everything on the web page.

        </details>
        <details>
        <summary><strong>What does the `border-style` property do?</strong></summary>

        The `border-style` property determines what kind of border (solid, dotted, dashed, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp">W3Schools - CSS border-style Property</a>

        </details>
        <details>
        <summary><strong>What does the `border-radius` property do?</strong></summary>

        The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp">W3Schools - CSS3 border-radius property</a>

        </details>
        <details>
        <summary><strong>What does the `float` property do?</strong></summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Layout and Style

        -   Look through web page below for new styles.
        -   Open the style sheet
        -   With your partner, discuss which parts of the CSS code you think are making the page appear different.
            -   What makes the entire page blue?
            -   How are the images positioned to the left of all the other elements?
            -   What made the image corners rounded?

        In the next few levels, you'll be changing and adding new styles on this page.
      CSD U2 layout style sample_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What does the body selector do?</strong>
        </summary>

        Because the content of the web page is all inside the `body` tag, the body selector gives style rules for everything on the web page.

        </details>
        <details>
        <summary>
        <strong>What does the border-style property do?</strong>
        </summary>

        The `border-style` property determines what kind of border (solid, dotted, dashed, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp" target="_new">W3Schools - CSS border-style Property</a>

        </details>
        <details>
        <summary>
        <strong>What does the border-radius property do?</strong>
        </summary>

        The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp" target="_new">W3Schools - CSS3 border-radius property</a>

        </details>
        <details>
        <summary>
        <strong>What does the float property do?</strong>
        </summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Layout and Style

        -   Look through web page below for new styles.
        -   Open the style sheet
        -   With your partner, discuss which parts of the CSS code you think are making the page appear different.
            -   What makes the entire page blue?
            -   How are the images positioned to the left of all the other elements?
            -   What made the image corners rounded?

        In the next few levels, you'll be changing and adding new styles on this page.
      CSD U2 layout style sample_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**What does the body selector do?**]

        Because the content of the web page is all inside the `body` tag, the body selector gives style rules for everything on the web page.

        :::

        ::: details [**What does the border-style property do?**]

        The `border-style` property determines what kind of border (solid, dotted, dashed, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp" target="_new">W3Schools - CSS border-style Property</a>

        :::

        ::: details [**What does the border-radius property do?**]

        The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp" target="_new">W3Schools - CSS3 border-radius property</a>

        :::

        ::: details [**What does the float property do?**]

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        :::

        </div>

        # Layout and Style

        -   Look through web page below for new styles.
        -   Open the style sheet
        -   With your partner, discuss which parts of the CSS code you think are making the page appear different.
            -   What makes the entire page blue?
            -   How are the images positioned to the left of all the other elements?
            -   What made the image corners rounded?

        In the next few levels, you'll be changing and adding new styles on this page.
      CSD U2 layout style width: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>How
        does the code work?</strong></summary>\nHere is the code that is making the
        image its current size:\n\n<pre>img {\n\twidth: 250px;\n}</pre>\n\n-   `img`
        is the _selector_.  It specifies which elements will have to follow the rules
        inside the curly braces, in this case, the images.\n-   `width: 250px` is
        the rule that makes the image 250 pixels wide.  It also changes the height
        so that the image does not stretch.\n    </details>\n    <details>\n    <summary><strong>What
        does the `width` property do?</strong></summary>\n\nThe `width` property determines
        how wide the element will be.  Most of the time, you will define in the width
        in pixels, which makes the element take up an exact amount of space on the
        screen.  Defining the width will also change the height so that the image
        does not stretch, unless you have also defined the height.  You can read more
        about this property at <a href=\"http://www.w3schools.com/cssref/pr_dim_width.asp\">W3Schools
        - CSS width Property</a>\n\n</details>\n<details>\n<summary><strong>What does
        the `height` property do?</strong></summary>\n\nThe `height` property determines
        how tall the element will be.  Most of the time, you will define in the height
        in pixels, which makes the element take up an exact amount of space on the
        screen.  Defining the height will also change the width so that the image
        does not stretch, unless you have also defined the width.  You can read more
        about this property at <a href=\"http://www.w3schools.com/cssref/pr_dim_height.asp\">W3Schools
        - CSS width Property</a>\n\n</details>\n<details>\n<summary><strong>What does
        `px` mean / What is a pixel?</strong></summary>\n\nPixel, which is abbreviated
        `px`, is how elements are measured in CSS.  It’s the size of a single point
        of light on the screen.\n\n</details>\n<details>\n<summary><strong>Why does
        using a width and height rule at the same time sometimes stretch out the image?</strong></summary>\n\nWhen
        the width of an images changes, the height must change by the same percentage,
        otherwise the image will stretch.  For example, if you double the width of
        an image, you must also double the height, or the image will be stretched
        horizonally.  When you only define the width or the height, the computer will
        automatically change the other property so that the image looks the same.\n\n</details>\n</div>\n\n#
        Width and Height\n\n-   Find the property in the style sheet that controls
        the width of the images.\n-   Change the width of the images to be larger
        or smaller.\n-   Create a new rule with a `height` property to control the
        height of the images.\n-   Use the `width` property in the `p` rule-set to
        change the width of your paragraphs."
      CSD U2 layout style width_2018: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>How
        does the code work?</strong>\n</summary>\n\nHere is the code that is making
        the image its current size:\n\n    img {\n    \twidth: 250px;\n    }\n\n-
        \  `img` is the _selector_.  It specifies which elements will have to follow
        the rules inside the curly braces, in this case, the images.\n-   `width:
        250px` is the rule that makes the image 250 pixels wide.  It also changes
        the height so that the image does not stretch.\n\n</details>\n<details>\n<summary>\n<strong>What
        does the <code>width</code> property do?</strong>\n</summary>\n\nThe `width`
        property determines how wide the element will be.  Most of the time, you will
        define the width in pixels, which makes the element take up an exact amount
        of space on the screen.  Defining the width will also change the height so
        that the image does not stretch, unless you have also defined the height.
        \ You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_dim_width.asp\"
        target=\"_new\">W3Schools - CSS width Property</a>\n\n</details>\n<details>\n<summary>\n<strong>What
        does the <code>height</code> property do?</strong>\n</summary>\n\nThe `height`
        property determines how tall the element will be.  Most of the time, you will
        define the height in pixels, which makes the element take up an exact amount
        of space on the screen.  Defining the height will also change the width so
        that the image does not stretch, unless you have also defined the width.  You
        can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_dim_height.asp\"
        target=\"_new\">W3Schools - CSS height Property</a>\n\n</details>\n<details>\n<summary>\n<strong>What
        does <code>px</code> mean / What is a pixel?</strong>\n</summary>\n\nPixel,
        which is abbreviated `px`, is how elements are measured in CSS.  It’s the
        size of a single point of light on the screen.\n\n</details>\n<details>\n<summary>\n<strong>Why
        does using a width and height rule at the same time sometimes stretch out
        the image?</strong>\n</summary>\n\nWhen the width of an images changes, the
        height must change by the same percentage, otherwise the image will stretch.
        \ For example, if you double the width of an image, you must also double the
        height, or the image will be stretched horizonally.  When you only define
        the width or the height, the computer will automatically change the other
        property so that the image looks the same.\n\n</details>\n</div>\n\n# Width
        and Height\n\n-   Find the property in the style sheet that controls the width
        of the images.\n-   Change the width of the images to be larger or smaller.\n-
        \  Create a new rule with a `height` property to control the height of the
        images.\n-   Use the `width` property in the `p` rule-set to change the width
        of your paragraphs."
      CSD U2 layout style width_2019: "<div class=\"no-pullthrough\" style=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n\n:::
        details [**How does the code work?**]\n\nHere is the code that is making the
        image its current size:\n\n    img {\n    \twidth: 250px;\n    }\n\n-   `img`
        is the _selector_.  It specifies which elements will have to follow the rules
        inside the curly braces, in this case, the images.\n-   `width: 250px` is
        the rule that makes the image 250 pixels wide.  It also changes the height
        so that the image does not stretch.\n\n:::\n\n::: details [**What does the
        `width` property do?**]\n\nThe `width` property determines how wide the element
        will be.  Most of the time, you will define the width in pixels, which makes
        the element take up an exact amount of space on the screen.  Defining the
        width will also change the height so that the image does not stretch, unless
        you have also defined the height.  You can read more about this property at
        <a href=\"http://www.w3schools.com/cssref/pr_dim_width.asp\" target=\"_new\">W3Schools
        - CSS width Property</a>\n\n:::\n\n::: details [**What does the `height` property
        do?**]\n\nThe `height` property determines how tall the element will be.  Most
        of the time, you will define the height in pixels, which makes the element
        take up an exact amount of space on the screen.  Defining the height will
        also change the width so that the image does not stretch, unless you have
        also defined the width.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_dim_height.asp\"
        target=\"_new\">W3Schools - CSS height Property</a>\n\n:::\n\n::: details
        [**What does `px` mean / What is a pixel?**]\n\nPixel, which is abbreviated
        `px`, is how elements are measured in CSS.  It’s the size of a single point
        of light on the screen.\n\n:::\n\n::: details [**Why does using a width and
        height rule at the same time sometimes stretch out the image?**]\n\nWhen the
        width of an images changes, the height must change by the same percentage,
        otherwise the image will stretch.  For example, if you double the width of
        an image, you must also double the height, or the image will be stretched
        horizonally.  When you only define the width or the height, the computer will
        automatically change the other property so that the image looks the same.\n\n:::\n\n</div>\n\n#
        Width and Height\n\n-   Find the property in the style sheet that controls
        the width of the images.\n-   Change the width of the images to be larger
        or smaller.\n-   Create a new rule with a `height` property to control the
        height of the images.\n-   Use the `width` property in the `p` rule-set to
        change the width of your paragraphs."
      CSD U2 link demo: |-
        # Making a Multi-page Site

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What are hyperlinks?</strong>
        </summary>

        Hyperlinks can connect to local web pages or external web pages. To add navigation to your website you will need to add hyperlinks which connect your individual web pages. You can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page. <br> <br>

        For example to link to the unique houses page you would add the following code inside your `<body>` element. <br><br>

        <pre>
        &lt;a href=”houses.html”&gt; Unique Houses &lt;/a&gt;
        </pre>

        </details>
        <details>
        <summary><strong>How do I add a hyperlink?</strong>
        </summary>

        You can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page. <br> <br>

        For example to link to the unique houses page you would add the following code inside your `<body>` element. <br><br>

        <pre>
        &lt;a href=”houses.html”&gt; Unique Houses &lt;/a&gt;
        </pre>

        </details>
        </div>

        A web site should include more than one web page, and they should connect to each other.   Here's an example of a project with multiple pages that are connected by hyperlinks (the blue underlined words that take you to another page when you click on them).

        # Do This

        -   Use the inspector tool to see the code that creates the hyperlinks on the top of index.html.
        -   Discuss with your partner how you think that code works.
        -   Click on recipe.html in the files list on the left hand side.  Add a hyperlink to the top of this page that will take you back to index.html.
      CSD U2 link demo_2018: |-
        # Making a Multi-page Site

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What are hyperlinks?</strong></summary>

        Hyperlinks can connect to local web pages or external web pages. To add navigation to your website you will need to add hyperlinks which connect your individual web pages. You can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page. <br> <br>

        For example to link to the unique houses page you would add the following code inside your `<body>` element. <br><br>

        <pre>
        &lt;a href="houses.html"&gt; Unique Houses &lt;/a&gt;
        </pre>

        </details>

        <details>
        <summary>
        <strong>How do I add a hyperlink?</strong>
        </summary>

        You can <strong>add hyperlinks to your web page using the `<a>` element</strong>.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page. <br> <br>

        For example to link to the unique houses page you would add the following code inside your `<body>` element. <br><br>

        <pre>
        &lt;a href="houses.html"&gt; Unique Houses &lt;/a&gt;
        </pre>

        </details>
        </div>

        A web site should include more than one web page, and they should connect to each other.   Here's an example of a project with multiple pages that are connected by hyperlinks (the blue underlined words that take you to another page when you click on them).

        # Do This

        -   Use the inspector tool to see the code that creates the hyperlinks on the top of index.html.
        -   Discuss with your partner how you think that code works.
        -   Click on recipe.html in the files list on the left hand side.  Add a hyperlink to the top of this page that will take you back to index.html.
      CSD U2 link demo_2019: |-
        # Making a Multi-page Site

        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**What are hyperlinks?**]

        Hyperlinks can connect to local web pages or external web pages. To add navigation to your website you will need to add hyperlinks which connect your individual web pages. You can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page. <br> <br>

        For example to link to the unique houses page you would add the following code inside your `<body>` element. <br><br>

            <a href="houses.html"> Unique Houses </a>

        :::

        ::: details [**How do I add a hyperlink?**]

        You can <strong>add hyperlinks to your web page using the `<a>` element</strong>.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page. <br> <br>

        For example to link to the unique houses page you would add the following code inside your `<body>` element. <br><br>

            <a href="houses.html"> Unique Houses </a>

        :::

        </div>

        A web site should include more than one web page, and they should connect to each other.   Here's an example of a project with multiple pages that are connected by hyperlinks (the blue underlined words that take you to another page when you click on them).

        # Do This

        -   Use the inspector tool to see the code that creates the hyperlinks on the top of index.html.
        -   Discuss with your partner how you think that code works.
        -   Click on recipe.html in the files list on the left hand side.  Add a hyperlink to the top of this page that will take you back to index.html.
      CSD U2 lists intro: |-
        # Lists

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What are the two types of lists?</strong>
        </summary>
         There are two types of lists in HTML, ordered and unordered lists.
        </details>

        <details>
        <summary><strong>What is an unordered list?</strong>
        </summary>

        An unordered list is just a set of bulleted items.

        An unordered list element has the tag `<ul> </ul>`. This is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist. Each item in the list is marked by a list item element `<li> </li>`. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element, which means that it goes inside of its parent element, the unordered list.

        </details>

        <details>
        <summary><strong>How do I make an unordered list?</strong>
        </summary>

        Making an unordered list has two steps: making the list and adding the list items.  To make the unordered list, write the unordered list tags `<ul> </ul>`.  Next, add your list items **inside** the unordered list tags.  To make each list item, use the list item tags `<li> </li>` and write the list item inside the tags.

        It can be helpful to indent your `<li> </li>` tags so it's clear they are contained in the `<ul> </ul>` tags.

        </details>

        <details>
        <summary><strong>What is an ordered list?</strong>
        </summary>

        An ordered list is a set of bulleted items which are numbered.

        An ordered list element has the tags `<ol> </ol>`. This is an abbreviation for <strong>O</strong>rdered <strong>L</strong>ist. Each item in the list is marked by a list item element `<li> </li>`. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element, which means that it goes inside of its parent element, the ordered list.

        </details>

        <details>
        <summary><strong>How do I make an ordered list?</strong>
        </summary>

        Making an ordered list has two steps: making the list and adding the list items. To make the ordered list, write the ordered list tags `<ol> </ol>`. Next, add your list items **inside** the ordered list tags. To make each list item, use the list item tags `<li> </li>` and write the list item inside the tags.

        It can be helpful to indent your `<li> </li>` tags so it's clear they are contained in the `<ol> </ol>` tags.

        </details>
        </div>

        You can also use HTML to make different types of lists on your web page.  This recipe includes two different types of lists, one ordered (with numbers) and one unordered (with bullets).

        # Do This

        -   Use the inspector tool to see the code that is making the two different kinds of lists.
        -   Make sure you and your partner agree on what the different tags do.
        -   Fix the code so that the second item in each list displays correctly
      CSD U2 lists intro_2018: |-
        # Lists

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What are the two types of lists?</strong>
        </summary>
         There are two types of lists in HTML, ordered and unordered lists.
        </details>

        <details>
        <summary>
        <strong>What is an unordered list?</strong>
        </summary>

        An unordered list is just a set of bulleted items.

        An unordered list element has the tag `<ul> </ul>`. This is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist. Each item in the list is marked by a list item element `<li> </li>`. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element, which means that it goes inside of its parent element, the unordered list.

        </details>

        <details>
        <summary>
        <strong>How do I make an unordered list?</strong>
        </summary>

        Making an unordered list has two steps: making the list and adding the list items.  To make the unordered list, write the unordered list tags `<ul> </ul>`.  Next, add your list items **inside** the unordered list tags.  To make each list item, use the list item tags `<li> </li>` and write the list item inside the tags.
        <br /><br />
        It can be helpful to indent your `<li> </li>` tags so it's clear they are contained in the `<ul> </ul>` tags.

        </details>

        <details>
        <summary>
        <strong>What is an ordered list?</strong>
        </summary>

        An ordered list is a set of bulleted items which are numbered.

        An ordered list element has the tags `<ol> </ol>`. This is an abbreviation for <strong>O</strong>rdered <strong>L</strong>ist. Each item in the list is marked by a list item element `<li> </li>`. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element, which means that it goes inside of its parent element, the ordered list.

        </details>
        <details>
        <summary>
        <strong>How do I make an ordered list?</strong>
        </summary>

        Making an ordered list has two steps: making the list and adding the list items. To make the ordered list, write the ordered list tags `<ol> </ol>`. Next, add your list items **inside** the ordered list tags. To make each list item, use the list item tags `<li> </li>` and write the list item inside the tags.
        <br /><br/>
        It can be helpful to indent your `<li> </li>` tags so it's clear they are contained in the `<ol> </ol>` tags.

        </details>
        </div>

        You can also use HTML to make different types of lists on your web page.  This recipe includes two different types of lists, one ordered (with numbers) and one unordered (with bullets).

        # Do This

        -   Use the inspector tool to see the code that is making the two different kinds of lists.
        -   Make sure you and your partner agree on what the different tags do.
        -   Fix the code so that the second item in each list displays correctly
      CSD U2 lists intro_2019: |-
        # Lists

        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        ::: details [**What are the two types of lists?**]
         There are two types of lists in HTML, ordered and unordered lists.
        :::

        ::: details [**What is an unordered list?**]

        An unordered list is just a set of bulleted items.

        An unordered list element has the tag `<ul> </ul>`. This is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist. Each item in the list is marked by a list item element `<li> </li>`. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element, which means that it goes inside of its parent element, the unordered list.

        :::

        ::: details [**How do I make an unordered list?**]

        Making an unordered list has two steps: making the list and adding the list items.  To make the unordered list, write the unordered list tags `<ul> </ul>`.  Next, add your list items **inside** the unordered list tags.  To make each list item, use the list item tags `<li> </li>` and write the list item inside the tags.
        <br /><br />
        It can be helpful to indent your `<li> </li>` tags so it's clear they are contained in the `<ul> </ul>` tags.
        :::

        ::: details [**What is an ordered list?**]

        An ordered list is a set of bulleted items which are numbered.

        An ordered list element has the tags `<ol> </ol>`. This is an abbreviation for <strong>O</strong>rdered <strong>L</strong>ist. Each item in the list is marked by a list item element `<li> </li>`. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element, which means that it goes inside of its parent element, the ordered list.

        :::

        ::: details [**How do I make an ordered list?**]

        Making an ordered list has two steps: making the list and adding the list items. To make the ordered list, write the ordered list tags `<ol> </ol>`. Next, add your list items **inside** the ordered list tags. To make each list item, use the list item tags `<li> </li>` and write the list item inside the tags.
        <br /><br/>
        It can be helpful to indent your `<li> </li>` tags so it's clear they are contained in the `<ol> </ol>` tags.

        :::

        </div>

        You can also use HTML to make different types of lists on your web page.  This recipe includes two different types of lists, one ordered (with numbers) and one unordered (with bullets).

        # Do This

        -   Use the inspector tool to see the code that is making the two different kinds of lists.
        -   Make sure you and your partner agree on what the different tags do.
        -   Fix the code so that the second item in each list displays correctly
      CSD U2 navigation: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What are hyperlinks?</strong>
        </summary>

        Hyperlinks can connect to local web pages or external web pages. To add navigation to your website you will need to add hyperlinks which connect your individual web pages. You can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page. <br> <br>

        For example to link to the unique houses page you would add the following code inside your `<body>` element. <br><br>

        <pre>
        &lt;a href=”houses.html”&gt; Unique Houses &lt;/a&gt;
        </pre>

        </details>
        <details>
        <summary>
        <strong>How do I add a hyperlink?</strong>
        </summary>

        You can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page. <br> <br>

        For example to link to the unique houses page you would add the following code inside your `<body>` element. <br><br>

        <pre>
        &lt;a href=”houses.html”&gt; Unique Houses &lt;/a&gt;
        </pre>

        </details>
        </div>

        # Create a Navigation Bar

        Here's your project from before.  You'll be linking the two pages by creating a **navigation bar** at the top of the page.  Websites usually have the same navigation bar across all of their pages so you can get back and forth between things on the site.  You can see an example of a navigation bar on <a href="https://studio.code.org/projects/weblab/2KO4FIjN89QPeYnTG_NzLIjroaG8daOY3jRl5uHm1Co/" target="_new">this page</a>

        # Do This

        -   In your home page (index.html), add two hyperlinks at the top of the page, one to your lists page, and one to the home page.
            -   _Even though it might seem strange to link a page to itself, it's less confusing if the navigation bar is exactly the same on every page._
        -   Copy the code for the navigation bar, then add it to the top of your lists page.
        -   Test your links in the preview area by clicking on them.
      CSD U2 navigation_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What are hyperlinks?</strong>
        </summary>

        Hyperlinks can connect to local web pages or external web pages. To add navigation to your website you will need to add hyperlinks which connect your individual web pages. You can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page.
        <br/><br/>
        For example to link to the unique houses page you would add the following code inside your `<body>` element.

        <pre>
        &lt;a href="houses.html"&gt; Unique Houses &lt;/a&gt;
        </pre>

        </details>
        <details>
        <summary>
        <strong>How do I add a hyperlink?</strong>
        </summary>

        You can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page.
        <br/><br/>
        For example to link to the unique houses page you would add the following code inside your `<body>` element.

        <pre>
        &lt;a href="houses.html"&gt; Unique Houses &lt;/a&gt;
        </pre>

        </details>
        </div>

        # Create a Navigation Bar

        Here's your project from before.  You'll be linking the two pages by creating a **navigation bar** at the top of the page.  Websites usually have the same navigation bar across all of their pages so you can get back and forth between things on the site.  You can see an example of a navigation bar on <a href="https://studio.code.org/projects/weblab/2KO4FIjN89QPeYnTG_NzLIjroaG8daOY3jRl5uHm1Co/" target="_new">this page</a>

        # Do This

        -   In your home page (index.html), add two hyperlinks at the top of the page, one to your lists page, and one to the home page.
            -   _Even though it might seem strange to link a page to itself, it's less confusing if the navigation bar is exactly the same on every page._
        -   Copy the code for the navigation bar, then add it to the top of your lists page.
        -   Test your links in the preview area by clicking on them.
      CSD U2 navigation_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**What are hyperlinks?**]

        Hyperlinks can connect to local web pages or external web pages. To add navigation to your website you will need to add hyperlinks which connect your individual web pages. You can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page.
        <br/><br/>
        For example to link to the unique houses page you would add the following code inside your `<body>` element.

            <a href="houses.html"> Unique Houses </a>

        :::

        ::: details [**How do I add a hyperlink?**]

        You can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page.
        <br/><br/>
        For example to link to the unique houses page you would add the following code inside your `<body>` element.

            <a href="houses.html"> Unique Houses </a>

        :::

        </div>

        # Create a Navigation Bar

        Here's your project from before.  You'll be linking the two pages by creating a **navigation bar** at the top of the page.  Websites usually have the same navigation bar across all of their pages so you can get back and forth between things on the site.  You can see an example of a navigation bar on <a href="https://studio.code.org/projects/weblab/2KO4FIjN89QPeYnTG_NzLIjroaG8daOY3jRl5uHm1Co/" target="_new">this page</a>

        # Do This

        -   In your home page (index.html), add two hyperlinks at the top of the page, one to your lists page, and one to the home page.
            -   _Even though it might seem strange to link a page to itself, it's less confusing if the navigation bar is exactly the same on every page._
        -   Copy the code for the navigation bar, then add it to the top of your lists page.
        -   Test your links in the preview area by clicking on them.
      CSD U2 new page: |-
        # Create a New Page for Your Website.

        Here's your project from before.  You'll be adding another page.  Your new page can be a top 10 list, a recipe, or anything you like.

        # Do This

        -   Add a new HTML file by clicking  ![](<https://images.code.org/9b9f9f78962ef77664333d1b0f762ff1-image-1493252448756.19.38 PM.png>).  The new file will appear in the files list on the left side of the workspace.
        -   Rename the file, either by right clicking it and choosing "Rename", or by clicking on it when it's already highlighted.  **Make sure the name is unique, descriptive and ends in ".html"**.
        -   Use HTML to fill out your new page.  It should include:
            -   a list
            -   a heading
      CSD U2 new page_2018: |-
        # Create a New Page for Your Website.

        Here's your project from before.  You'll be adding another page.  Your new page can be a top 10 list, a recipe, or anything you like.

        # Do This

        -   Add a new HTML file by clicking  ![](<https://images.code.org/9b9f9f78962ef77664333d1b0f762ff1-image-1493252448756.19.38 PM.png>).  The new file will appear in the files list on the left side of the workspace.
        -   Rename the file, either by right clicking it and choosing "Rename", or by clicking on it when it's already highlighted.  **Make sure the name is unique, descriptive and ends in ".html"**.
        -   Use HTML to fill out your new page.  It should include:
            -   a list
            -   a heading
      CSD U2 new page_2019: |-
        # Create a New Page for Your Website.

        Here's your project from before.  You'll be adding another page.  Your new page can be a top 10 list, a recipe, or anything you like.

        # Do This

        -   Add a new HTML file by clicking  ![](<https://images.code.org/9b9f9f78962ef77664333d1b0f762ff1-image-1493252448756.19.38 PM.png>).  The new file will appear in the files list on the left side of the workspace.
        -   Rename the file, either by right clicking it and choosing "Rename", or by clicking on it when it's already highlighted.  **Make sure the name is unique, descriptive and ends in ".html"**.
        -   Use HTML to fill out your new page.  It should include:
            -   a list
            -   a heading
      CSD U2 ordered list: "# Ordered Lists\n\n<div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary><strong>What are the two types of lists?</strong>\n</summary>\n
        There are two types of lists in HTML, ordered and unordered lists.\n</details>\n<details>\n<summary><strong>What
        is an ordered list?</strong>\n</summary>\n\nAn ordered list is a set of bulleted
        items which are numbered.\n\nAn ordered list element has the tag `<ol>` .
        This is an abbreviation for <strong>O</strong>rdered <strong>L</strong>ist.
        Each item in the list is marked by a list item element `<li>`;. This is an
        abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item
        element is a child element, which means that it goes inside of its parent
        element, the ordered list (`<ol>`).\n\n</details>\n\n<details>\n<summary><strong>How
        do I make an ordered list?</strong>\n</summary>\n\nMaking an ordered list
        has two steps: making the list and adding the list items.  To make the ordered
        list, write the ordered list tags `<ol></ol>`.  Next, add your list items
        **inside** the ordered list tags.  To make each list item, use the list item
        tags `<li></li>` and write the list item inside the tags.\n\nIt can be helpful
        to indent your `<li>` tags so it's clear they are contained in the `<ol>`
        tag.\n\n</details>\n\n<details>\n<summary><strong>Show me working code.</strong>\n</summary>\n\n<table
        border=\"1\">\n<tr>\n<td>Example</td>\n<td>Result</td>\n</tr>\n<tr>\n<td><pre>
        &lt;ol&gt; <br>   &lt;li&gt;Step 1 &lt;/li&gt; <br>   &lt;li&gt;Step 2 &lt;/li&gt;
        <br>   &lt;li&gt;Step 3 &lt;/li&gt; <br> &lt;/ol&gt; </pre></td>\n<td><img
        src=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04
        PM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n</details>\n</div>\n\nThis
        page should include an ordered list, but it's missing the list tags.\n\n#
        Do This\n\n-   Use the `<ol>` and `<li>` tags to structure this content into
        an ordered list that looks like the one below.\n\n_Hint: There will be NO
        NUMBERS in your code._ \n\n![](<https://images.code.org/b3186e83c3e3bd2680a1a300e5abd126-image-1493238064706.17.03
        PM.png>)"
      CSD U2 ordered list_2018: "# Ordered Lists\n\n<div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary>\n<strong>What are the two types of
        lists?</strong>\n</summary>\n There are two types of lists in HTML, ordered
        and unordered lists.\n</details>\n<details>\n<summary>\n<strong>What is an
        ordered list?</strong>\n</summary>\n\nAn ordered list is a set of bulleted
        items which are numbered.\n<br /><br />\nAn ordered list element has the tag
        `<ol>` . This is an abbreviation for <strong>O</strong>rdered <strong>L</strong>ist.
        Each item in the list is marked by a list item element `<li>`;. This is an
        abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item
        element is a child element, which means that it goes inside of its parent
        element, the ordered list (`<ol>`).\n\n</details>\n\n<details>\n<summary>\n<strong>How
        do I make an ordered list?</strong>\n</summary>\n\nMaking an ordered list
        has two steps: making the list and adding the list items.  To make the ordered
        list, write the ordered list tags `<ol></ol>`.  Next, add your list items
        **inside** the ordered list tags.  To make each list item, use the list item
        tags `<li></li>` and write the list item inside the tags.\n<br /><br />\nIt
        can be helpful to indent your `<li>` tags so it's clear they are contained
        in the `<ol>` tag.\n\n</details>\n\n<details>\n<summary>\n<strong>Show me
        working code.</strong>\n</summary>\n\n<table border=\"1\">\n<tr>\n<td>Example</td>\n<td>Result</td>\n</tr>\n<tr>\n<td><pre>
        &lt;ol&gt; <br>   &lt;li&gt;Step 1 &lt;/li&gt; <br>   &lt;li&gt;Step 2 &lt;/li&gt;
        <br>   &lt;li&gt;Step 3 &lt;/li&gt; <br> &lt;/ol&gt; </pre></td>\n<td><img
        src=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04
        PM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n</details>\n</div>\n\nThis
        page should include an ordered list, but it's missing the list tags.\n\n#
        Do This\n\n-   Use the `<ol>` and `<li>` tags to structure this content into
        an ordered list that looks like the one below.\n\n_Hint: There will be NO
        NUMBERS in your code._ \n\n![](<https://images.code.org/b3186e83c3e3bd2680a1a300e5abd126-image-1493238064706.17.03
        PM.png>)"
      CSD U2 ordered list_2019: "# Ordered Lists\n\n<div class=\"no-pullthrough\"
        style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px\" markdown=\"1\">\n\n::: details [**What are the two
        types of lists?**]\n There are two types of lists in HTML, ordered and unordered
        lists.\n:::\n\n::: details [**What is an ordered list?**]\n\nAn ordered list
        is a set of bulleted items which are numbered.\n<br /><br />\nAn ordered list
        element has the tag `<ol>` . This is an abbreviation for <strong>O</strong>rdered
        <strong>L</strong>ist. Each item in the list is marked by a list item element
        `<li>`;. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.
        \ The list item element is a child element, which means that it goes inside
        of its parent element, the ordered list (`<ol>`).\n:::\n\n::: details [**How
        do I make an ordered list?**]\n\nMaking an ordered list has two steps: making
        the list and adding the list items.  To make the ordered list, write the ordered
        list tags `<ol></ol>`.  Next, add your list items **inside** the ordered list
        tags.  To make each list item, use the list item tags `<li></li>` and write
        the list item inside the tags.\n\nIt can be helpful to indent your `<li>`
        tags so it's clear they are contained in the `<ol>` tag.\n:::\n\n::: details
        [**Show me working code.**]\n\n<table border=\"1\">\n<tr>\n<td>Example</td>\n<td>Result</td>\n</tr>\n<tr>\n<td>\n\n
        \   <ol>\n      <li>Step 1 </li>\n      <li>Step 2 </li>\n      <li>Step 3
        </li>\n    </ol>\n\n</td>\n<td><img src=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04
        PM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n:::\n\n</div>\n\nThis
        page should include an ordered list, but it's missing the list tags.\n\n#
        Do This\n\n-   Use the `<ol>` and `<li>` tags to structure this content into
        an ordered list that looks like the one below.\n\n_Hint: There will be NO
        NUMBERS in your code._ \n\n![](<https://images.code.org/b3186e83c3e3bd2680a1a300e5abd126-image-1493238064706.17.03
        PM.png>)"
      CSD U2 project review: |-
        # Review Your Project

        You're almost ready to publish your project, but you should check one more time that you have fulfilled all the requirements for this project.

        # Do This

        -   Check that you are comfortable sharing all the information that's on your site.
        -   Check that all of your images are correctly attributed, and that you have the right to put them on your site.
        -   Check that your project includes everything included in the project rubric.
        -   Use comments and whitespace to make your website readable.
        -   Ask your partner to help you find any potential problems with your site.
      CSD U2 project review_2018: |-
        # Review Your Project

        You're almost ready to publish your project, but you should check one more time that you have fulfilled all the requirements for this project.

        # Do This

        -   Check that you are comfortable sharing all the information that's on your site.
        -   Check that all of your images are correctly attributed, and that you have the right to put them on your site.
        -   Check that your project includes everything included in the project rubric.
        -   Use comments and whitespace to make your website readable.
        -   Ask your partner to help you find any potential problems with your site.
      CSD U2 project review_2019: |-
        # Review Your Project

        You're almost ready to publish your project, but you should check one more time that you have fulfilled all the requirements for this project.

        # Do This

        -   Check that you are comfortable sharing all the information that's on your site.
        -   Check that all of your images are correctly attributed, and that you have the right to put them on your site.
        -   Check that your project includes everything included in the project rubric.
        -   Use comments and whitespace to make your website readable.
        -   Ask your partner to help you find any potential problems with your site.
      CSD U2 project share: |-
        # Share Your Project

        It's time to share your project with the world!

        # Do This

        -   Click the ![](<https://images.code.org/26bcf1645e18ac064cf0631fb5ca023c-image-1493744000091.52.27 AM.png>) button at the top of this page.
        -   Copy the URL it gives you, and email it to the people you want to see your page.
      CSD U2 project share_2018: |-
        # Share Your Project

        It's time to share your project with the world!

        # Do This

        -   Click the ![](<https://images.code.org/26bcf1645e18ac064cf0631fb5ca023c-image-1493744000091.52.27 AM.png>) button at the top of this page.
        -   Copy the URL it gives you, and email it to the people you want to see your page.
      CSD U2 project share_2019: |-
        # Share Your Project

        It's time to share your project with the world!

        # Do This

        -   Click the ![](<https://images.code.org/26bcf1645e18ac064cf0631fb5ca023c-image-1493744000091.52.27 AM.png>) button at the top of this page.
        -   Copy the URL it gives you, and email it to the people you want to see your page.
      CSD U2 publish video: |-
        ## Questions to Consider

        -   What do you think your responsibilities are as a website publisher?
        -   Why might you want to see the code or remix someone else's site?
      CSD U2 text style decoration: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>How does the code work?</strong></summary>
        Here is the code that makes the `h1` elements underlined:

        <pre>h1 {
          text-decoration: underline;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `text-decoration: underline;` is the rule that makes the text inside the `h1` tag underlined.
            -   `text-decoration` is the _property_.  It explains what the rule is about, in this case where the line goes.
            -   `underline` is the _value_.  It explains how the rule should be applied, in this case making the test underlined.
                </details>
                <details>
                <summary><strong>What are the possible values for text decoration?</strong></summary>
                You can choose between "underline", "overline", and "line-through".  You can read more about the text-decoration property at <a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp">W3Schools - CSS text-decoration Property</a>
                </details>
                <details>
                <summary><strong>Why do I need all the punctuation?</strong></summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the stylesheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary><strong>What is a stylesheet?</strong></summary>
        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.
        </details>
        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Underlining

        -   Find the code in the style sheet that makes the h1 tag underlined.
        -   Change the text decoration and see which one you like.
            -   Choose from "underline", "overline", and "line-through"
        -   Add a text decoration rule for the paragraph or h3 tag.
      CSD U2 text style decoration_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>How does the code work?</strong></summary>
        Here is the code that makes the `h1` elements underlined:

        <pre>h1 {
          text-decoration: underline;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `text-decoration: underline;` is the rule that makes the text inside the `h1` tag underlined.
            -   `text-decoration` is the _property_.  It explains what the rule is about, in this case where the line goes.
            -   `underline` is the _value_.  It explains how the rule should be applied, in this case making the test underlined.
                </details>
                <details>
                <summary><strong>What are the possible values for text decoration?</strong></summary>
                You can choose between "underline", "overline", and "line-through".  You can read more about the text-decoration property at <a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp" target="_new">W3Schools - CSS text-decoration Property</a>
                </details>

        <details>
        <summary><strong>Why do I need all the punctuation?</strong></summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the stylesheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary><strong>What is a stylesheet?</strong></summary>
        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.
        </details>

        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }</pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Underlining

        -   Find the code in the style sheet that makes the h1 tag underlined.
        -   Change the text decoration and see which one you like.
            -   Choose from "underline", "overline", and "line-through"
        -   Add a text decoration rule for the paragraph or h3 tag.
      CSD U2 text style decoration_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**How does the code work?**]
        Here is the code that makes the `h1` elements underlined:

            h1 {
              text-decoration: underline;
            }

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `text-decoration: underline;` is the rule that makes the text inside the `h1` tag underlined.
            -   `text-decoration` is the _property_.  It explains what the rule is about, in this case where the line goes.
            -   `underline` is the _value_.  It explains how the rule should be applied, in this case making the test underlined.
                :::

        ::: details [**What are the possible values for text decoration?**]
        You can choose between "underline", "overline", and "line-through".  You can read more about the text-decoration property at <a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp" target="_new">W3Schools - CSS text-decoration Property</a>
        :::

        ::: details [**Why do I need all the punctuation?**]

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the stylesheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        :::

        ::: details [**What is a stylesheet?**]
        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.
        :::

        ::: details [**What is CSS?**]

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

            h2 {
               color: blue;
               font-family: cursive;
            }

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        :::

        </div>

        # Underlining

        -   Find the code in the style sheet that makes the h1 tag underlined.
        -   Change the text decoration and see which one you like.
            -   Choose from "underline", "overline", and "line-through"
        -   Add a text decoration rule for the paragraph or h3 tag.
      CSD U2 text style font family: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>How does the code work?</strong></summary>

        Here is the code that is controlling the paragraph font:

        <pre>p {
          font-family: cursive;
        }</pre>

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `font-family: cursive;` is the rule that makes the text inside the `p` tags a particular font.
            -   `font-family` is the _property_.  It explains what the rule is about, in this case the font.
            -   `cursive` is the _value_.  It explains how the rule should be applied, in this case making the text cursive.

        </details>
        <details>
        <summary><strong>What are the possible values for font family?</strong></summary>

        You can choose between "serif", "sans-serif", "cursive", "fantasy", and "monospace".  You can also try more specific fonts as described in <a href="http://www.w3schools.com/cssref/css_websafe_fonts.asp">W3Schools - CSS Web Safe Font Combinations</a>

        </details>
        <details>
        <summary><strong>Why do I need all the punctuation?</strong></summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the stylesheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary><strong>What is a stylesheet?</strong></summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Changing the Font

        -   Find the CSS rule-set in the style sheet that determines the style for the paragraph tag.
        -   Change the font family and choose which one you like the best.
            -   Choose from "serif", "sans-serif", "cursive", "fantasy", and "monospace"
        -   Add a font family rule for the h1 or h3 tags.
      CSD U2 text style font family_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>

        Here is the code that is controlling the paragraph font:

        <pre>p {
          font-family: cursive;
        }</pre>

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `font-family: cursive;` is the rule that makes the text inside the `p` tags a particular font.
            -   `font-family` is the _property_.  It explains what the rule is about, in this case the font.
            -   `cursive` is the _value_.  It explains how the rule should be applied, in this case making the text cursive.

        </details>
        <details>
        <summary>
        <strong>What are the possible values for font family?</strong>
        </summary>

        You can choose between "serif", "sans-serif", "cursive", "fantasy", and "monospace".  You can also try more specific fonts as described in <a href="http://www.w3schools.com/cssref/css_websafe_fonts.asp" target="_new">W3Schools - CSS Web Safe Font Combinations</a>

        </details>
        <details>
        <summary>
        <strong>Why do I need all the punctuation?</strong>
        </summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the stylesheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary>
        <strong>What is a stylesheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }</pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Changing the Font

        -   Find the CSS rule-set in the style sheet that determines the style for the paragraph tag.
        -   Change the font family and choose which one you like the best.
            -   Choose from "serif", "sans-serif", "cursive", "fantasy", and "monospace"
        -   Add a font family rule for the h1 or h3 tags.
      CSD U2 text style font family_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**How does the code work?**]

        Here is the code that is controlling the paragraph font:

            p {
              font-family: cursive;
            }

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `font-family: cursive;` is the rule that makes the text inside the `p` tags a particular font.
            -   `font-family` is the _property_.  It explains what the rule is about, in this case the font.
            -   `cursive` is the _value_.  It explains how the rule should be applied, in this case making the text cursive.

        :::

        ::: details [**What are the possible values for font family?**]

        You can choose between "serif", "sans-serif", "cursive", "fantasy", and "monospace".  You can also try more specific fonts as described in <a href="http://www.w3schools.com/cssref/css_websafe_fonts.asp" target="_new">W3Schools - CSS Web Safe Font Combinations</a>

        :::

        ::: details [**Why do I need all the punctuation?**]

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the stylesheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        :::

        ::: details [**What is a stylesheet?**]

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        :::

        ::: details [**What is CSS?**]

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

            h2 {
               color: blue;
               font-family: cursive;
            }

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        :::

        </div>

        # Changing the Font

        -   Find the CSS rule-set in the style sheet that determines the style for the paragraph tag.
        -   Change the font family and choose which one you like the best.
            -   Choose from "serif", "sans-serif", "cursive", "fantasy", and "monospace"
        -   Add a font family rule for the h1 or h3 tags.
      CSD U2 text style freeplay: |-
        # Adding Styles

        Now you can style the text on your personal web site!

        -   Open your style sheet and add styling of your choice to your project. Be sure to use at least 3 different CSS properties.

        # Checklist

        -   At least 3 of the following CSS Properties are used:
            -   `font-size`
            -   `font-family`
            -   `color`
            -   `text-decoration`
            -   `text-align`

        If you’ve used at least 3 of the properties from the checklist, you can explore some additional text properties to add to your project.
      CSD U2 text style freeplay_2018: |-
        # Adding Styles

        Now you can style the text on your personal web site!

        -   Open your style sheet and add styling of your choice to your project. Be sure to use at least 3 different CSS properties.

        # Checklist

        -   At least 3 of the following CSS Properties are used:
            -   `font-size`
            -   `font-family`
            -   `color`
            -   `text-decoration`
            -   `text-align`

        If you’ve used at least 3 of the properties from the checklist, you can explore some additional text properties to add to your project.
      CSD U2 text style freeplay_2019: |-
        # Adding Styles

        Now you can style the text on your personal web site!

        -   Open your style sheet and add styling of your choice to your project. Be sure to use at least 3 different CSS properties.

        # Checklist

        -   At least 3 of the following CSS Properties are used:
            -   `font-size`
            -   `font-family`
            -   `color`
            -   `text-decoration`
            -   `text-align`

        If you’ve used at least 3 of the properties from the checklist, you can explore some additional text properties to add to your project.
      CSD U2 text style h1: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What colors can I use in CSS?</strong></summary>
        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools - CSS Legal Color Values</a>
        </details><details>
        <summary><strong>How does the code work?</strong></summary>
        Here is the code that is making the `h1` heading red:

        <pre>h1 {
          color: red;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.
                </details>
                <details>
                <summary><strong>Why do I need all the punctuation?</strong></summary>
                The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.
                </details>
                <details>
                <summary><strong>What is a style sheet?</strong></summary>
                A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.
                </details>
                <details>
                <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # CSS and Text Color

        This HTML file uses a style sheet ("style.css") to give the page a particular style.  The style sheet contains information about what each of the HTML elements should look like.

        -   Find the code in the style sheet (click on "style.css" in the files list) that is making the h1 heading red.
        -   Change the code for the color of the h1 heading from `red` to a different color.
      CSD U2 text style h1_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What colors can I use in CSS?</strong>
        </summary>

        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp" target="_new">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp" target="_new">W3Schools - CSS Legal Color Values</a>

        </details><details>
        <summary>
        <strong>How does the code work?</strong>
        </summary>

        Here is the code that is making the `h1` heading red:

        <pre>h1 {
          color: red;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.

        </details>
        <details>
        <summary>
        <strong>Why do I need all the punctuation?</strong>
        </summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary>
        <strong>What is a style sheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }</pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # CSS and Text Color

        This HTML file uses a style sheet ("style.css") to give the page a particular style.  The style sheet contains information about what each of the HTML elements should look like.

        -   Find the code in the style sheet (click on "style.css" in the files list) that is making the h1 heading red.
        -   Change the code for the color of the h1 heading from `red` to a different color.
      CSD U2 text style h1_2019: "<div class=\"no-pullthrough\" \n style=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n\n:::
        details [**What colors can I use in CSS?**]\nCSS includes most common color
        names (red, blue, green, etc.), and many uncommon ones.  You can see a full
        list of CSS color names at [W3Schools - HTML Color Names](http://www.w3schools.com/colors/colors_names.asp).
        \ You can still use colors that are not included in the named list, but you
        will need to use their RGB values.  You can read more about using colors in
        CSS at [W3Schools - CSS Legal Color Values](http://www.w3schools.com/cssref/css_colors_legal.asp)\n:::\n\n:::
        details [**How does the code work?**]\nHere is the code that is making the
        `h1` heading red:\n\n    h1 {\n      color: red;\n    }\n\n-   `h1` is the
        _selector_.  It specifies which elements will have to follow the rules inside
        the curly braces.\n-   `color: red;` is the rule that makes the text inside
        the `h1` tags red.\n    -   `color` is the _property_.  It explains what the
        rule is about, in this case the text color.\n    -   `red` is the _value_.
        \ It explains how the rule should be applied, in this case making the text
        red.\n\n:::\n\n::: details [**Why do I need all the punctuation?**]\n\nThe
        punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon
        `;`, help the computer to understand the rules in the style sheet.  The curly
        braces hold all the rules for a particular selector.  Each rule should end
        in a semicolon, and the properties and values are always separated by a colon.\n\n:::\n\n:::
        details [**What is a style sheet?**]\n\nA style sheet is a document that controls
        how a web page will appear.  External style sheets are separate files that
        are linked to the HTML page.\n\n:::\n\n::: details [**What is CSS?**]\nCSS
        is a language that controls the way content on a web site appears.  It uses
        rule-sets to change the look of a page.  Each rule set has a selector, which
        specifies which elements on the page will be affected, and the rules, which
        explain how to display the elements.   Each rule consists of a property and
        a value for that property.\n\nHere’s an example of a rule-set that makes the
        text in an `h2` tag blue and cursive:\n\n    h2 {\n       color: blue;\n       font-family:
        cursive;\n    }\n\nIn this example, `h2` is the selector, `color` and `font-family`
        are properties, and `blue` and `cursive` are the values for those properties.\n:::\n\n</div>\n\n#
        CSS and Text Color\n\nThis HTML file uses a style sheet (\"style.css\") to
        give the page a particular style.  The style sheet contains information about
        what each of the HTML elements should look like.\n\n-   Find the code in the
        style sheet (click on \"style.css\" in the files list) that is making the
        h1 heading red.\n-   Change the code for the color of the h1 heading from
        `red` to a different color."
      CSD U2 text style h3: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What colors can I use in CSS?</strong></summary>

        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools - CSS Legal Color Values</a>

        </details>
        <details>
        <summary><strong>How does the code work?</strong></summary>
        Here is the code that is making the `h1` header red:

        <pre>h1 {
          color: red;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.
                </details>
                <details>
                <summary><strong>How do I make a new rule-set?</strong></summary>

        To make a new rule set, you'll need a selector and a list of rules.  The selector is the name of the tag you want the rules to be applied to.  The rules are a list of property and value pairs.  You'll also need to pay careful attention to the punctuation in the rule set.  Look at the code below for an example of how the code should look.  You'll need to change the specifics for your page.

        <pre>h1 {
          color: red;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.
                </details>
                <details>
                <summary><strong>Why do I need all the punctuation?</strong></summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary><strong>What is a style sheet?</strong></summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Making a new CSS rule-set

        The block of code that gives rules for a particular tag is called a _rule-set_.  You can make a new rule set by copying the pattern you see in the rule-set for the `h1` tag.

        -   Find the CSS rule-set in the style sheet that determines the styles for the h1 tag.
        -   Using the same pattern, write a new CSS rule-set that will determine the style for the h3 tag.
        -   Add code to set a different color for the h3 tags.
      CSD U2 text style h3_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What colors can I use in CSS?</strong>
        </summary>
        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools - CSS Legal Color Values</a>
        </details>
        <details>
        <summary>
        <strong>How does the code work?</strong>
        </summary>

        Here is the code that is making the `h1` header red:

        <pre>h1 {
          color: red;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.

        </details>
        <details>
        <summary>
        <strong>How do I make a new rule-set?</strong>
        </summary>

        To make a new rule set, you'll need a selector and a list of rules.  The selector is the name of the tag you want the rules to be applied to.  The rules are a list of property and value pairs.  You'll also need to pay careful attention to the punctuation in the rule set.  Look at the code below for an example of how the code should look.  You'll need to change the specifics for your page.

        <pre>h1 {
          color: red;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.

        </details>
        <details>
        <summary>
        <strong>Why do I need all the punctuation?</strong>
        </summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary>
        <strong>What is a style sheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Making a new CSS rule-set

        The block of code that gives rules for a particular tag is called a _rule-set_.  You can make a new rule set by copying the pattern you see in the rule-set for the `h1` tag.

        -   Find the CSS rule-set in the style sheet that determines the styles for the `h1` tag.
        -   Using the same pattern, write a new CSS rule-set that will determine the style for the `h3` tag.
        -   Add code to set a different color for the `h3` tags.
      CSD U2 text style h3_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**What colors can I use in CSS?**]
        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools - CSS Legal Color Values</a>
        :::

        ::: details [**How does the code work?**]

        Here is the code that is making the `h1` header red:

            h1 {
              color: red;
            }

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.

        :::

        ::: details [**How do I make a new rule-set?**]

        To make a new rule set, you'll need a selector and a list of rules.  The selector is the name of the tag you want the rules to be applied to.  The rules are a list of property and value pairs.  You'll also need to pay careful attention to the punctuation in the rule set.  Look at the code below for an example of how the code should look.  You'll need to change the specifics for your page.

            h1 {
              color: red;
            }

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.

        :::

        ::: details [**Why do I need all the punctuation?**]

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        :::

        ::: details [**What is a style sheet?**]

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        :::

        ::: details [**What is CSS?**]

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

            h2 {
               color: blue;
               font-family: cursive;

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        :::

        </div>

        # Making a new CSS rule-set

        The block of code that gives rules for a particular tag is called a _rule-set_.  You can make a new rule set by copying the pattern you see in the rule-set for the `h1` tag.

        -   Find the CSS rule-set in the style sheet that determines the styles for the `h1` tag.
        -   Using the same pattern, write a new CSS rule-set that will determine the style for the `h3` tag.
        -   Add code to set a different color for the `h3` tags.
      CSD U2 text style size: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>How does the code work?</strong></summary>
        Here is the code that is controlling the paragraph text size:

        <pre>p {
          font-size: 14px;
        }</pre>

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `font-size: 14px;` is the rule that makes the text inside the `p` tags a particular size.
            -   `font-size` is the _property_.  It explains what the rule is about, in this case the text size.
            -   `14px` is the _value_.  It explains how the rule should be applied, in this case making the text 14 pixels big.
                </details>
                <details>
                <summary><strong>What does `px` mean / What is a pixel?</strong></summary>

        Pixel, which is abbreviated `px`, is how elements are measured in CSS.  It’s the size of a single point of light on the screen.

        </details>
        <details>
        <summary><strong>Why do I need all the punctuation?</strong></summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary><strong>What is a style sheet?</strong></summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Changing text size

        You can control other things besides colors by using other properties.

        -   Find the CSS rule-set in the style sheet that determines the style for the paragraph tag.
        -   Change the text size of the paragraphs to be bigger.
        -   Add a new rule to your rule-set for your h3 tag to make the text bigger or smaller.
      CSD U2 text style size_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>

        Here is the code that is controlling the paragraph text size:

        <pre>p {
          font-size: 14px;
        }</pre>

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `font-size: 14px;` is the rule that makes the text inside the `p` tags a particular size.
            -   `font-size` is the _property_.  It explains what the rule is about, in this case the text size.
            -   `14px` is the _value_.  It explains how the rule should be applied, in this case making the text 14 pixels big.

        </details>
        <details>
        <summary>
        <strong>What does <code>px</code> mean / What is a pixel?</strong>
        </summary>

        Pixel, which is abbreviated `px`, is how elements are measured in CSS.  It’s the size of a single point of light on the screen.

        </details>
        <details>
        <summary>
        <strong>Why do I need all the punctuation?</strong>
        </summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary>
        <strong>What is a style sheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }</pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Changing text size

        You can control other things besides colors by using other properties.

        -   Find the CSS rule-set in the style sheet that determines the style for the paragraph tag.
        -   Change the text size of the paragraphs to be bigger.
        -   Add a new rule to your rule-set for your h3 tag to make the text bigger or smaller.
      CSD U2 text style size_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**How does the code work?**]

        Here is the code that is controlling the paragraph text size:

            p {
              font-size: 14px;
            }

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `font-size: 14px;` is the rule that makes the text inside the `p` tags a particular size.
            -   `font-size` is the _property_.  It explains what the rule is about, in this case the text size.
            -   `14px` is the _value_.  It explains how the rule should be applied, in this case making the text 14 pixels big.

        :::

        ::: details [**What does <code>px</code> mean / What is a pixel?**]

        Pixel, which is abbreviated `px`, is how elements are measured in CSS.  It’s the size of a single point of light on the screen.

        :::

        ::: details [**Why do I need all the punctuation?**]

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        :::

        ::: details [**What is a style sheet?**]

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        :::

        ::: details [**What is CSS?**]

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

            h2 {
               color: blue;
               font-family: cursive;
            }

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        :::

        </div>

        # Changing text size

        You can control other things besides colors by using other properties.

        -   Find the CSS rule-set in the style sheet that determines the style for the paragraph tag.
        -   Change the text size of the paragraphs to be bigger.
        -   Add a new rule to your rule-set for your h3 tag to make the text bigger or smaller.
      CSD U2 text style text align: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        **How does the code work?**

        </summary>
        Here is the code that is controlling the paragraph text alignment:

        <pre>p {
          text-align: left;
        }</pre>

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `text-align: left;` is the rule that makes the text inside the `p` tags align to the left side of the paragraph.
            -   `text-align` is the _property_.  It explains what the rule is about, in this case the text alignment.
            -   `left` is the _value_.  It explains how the rule should be applied, in this case making the text align to the left side of the paragraph.
                </details>
                <details>
                <summary>

        **Why doesn't `text-align: left;` do anything?**

        </summary>
        Most properties have default values.  The default values are the styles that an element will have automatically, before you add your style sheet.  The default value for `text-align` is `left`, so it doesn't change from how it already looked.
        </details>
        <details>
        <summary>

        **What are the possible values for text align?**

        </summary>
        You can choose between "left", "right", and "center".  You can read more about the text-align property at <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp">W3Schools - CSS text-align Property</a>
        </details>
        <details>
        <summary>

        **Why do I need all the punctuation?**

        </summary>
        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.
        </details>
        <details>
        <summary>

        **What is a style sheet?**

        </summary>
        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.
        </details>
        <details>
        <summary>

        **What is CSS?**

        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>

        </details>
        </div>

        # Text Alignment

        The `text-align` property sets the horizontal (side to side) position of the text within each line.

        -   Find the "text-align" property in the paragraph tag.
        -   Change the paragraph alignment.
            -   Choose from "left", "right", and "center"
      CSD U2 text style text align_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>

        Here is the code that is controlling the paragraph text alignment:

        <pre>p {
          text-align: left;
        }</pre>

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `text-align: left;` is the rule that makes the text inside the `p` tags align to the left side of the paragraph.
            -   `text-align` is the _property_.  It explains what the rule is about, in this case the text alignment.
            -   `left` is the _value_.  It explains how the rule should be applied, in this case making the text align to the left side of the paragraph.

        </details>
        <details>
        <summary>
        <strong>Why doesn't <code>text-align: left;</code> do anything?</strong>
        </summary>

        Most properties have default values.  The default values are the styles that an element will have automatically, before you add your style sheet.  The default value for `text-align` is `left`, so it doesn't change from how it already looked.

        </details>
        <details>
        <summary>
        <strong>What are the possible values for text align?</strong>
        </summary>

        You can choose between "left", "right", and "center".  You can read more about the text-align property at <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp" target="_new">W3Schools - CSS text-align Property</a>

        </details>
        <details>
        <summary>
        <strong>Why do I need all the punctuation?</strong>
        </summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary>
        <strong>What is a style sheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.
        <br/><br/>
        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }</pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>

        </details>
        </div>

        # Text Alignment

        The `text-align` property sets the horizontal (side to side) position of the text within each line.

        -   Find the "text-align" property in the paragraph tag.
        -   Change the paragraph alignment.
            -   Choose from "left", "right", and "center"
      CSD U2 text style text align_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**How does the code work?**]

        Here is the code that is controlling the paragraph text alignment:

            p {
              text-align: left;
            }

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `text-align: left;` is the rule that makes the text inside the `p` tags align to the left side of the paragraph.
            -   `text-align` is the _property_.  It explains what the rule is about, in this case the text alignment.
            -   `left` is the _value_.  It explains how the rule should be applied, in this case making the text align to the left side of the paragraph.

        :::

        ::: details [**Why doesn't <code>text-align: left;</code> do anything?**]

        Most properties have default values.  The default values are the styles that an element will have automatically, before you add your style sheet.  The default value for `text-align` is `left`, so it doesn't change from how it already looked.

        :::

        ::: details [**What are the possible values for text align?**]

        You can choose between "left", "right", and "center".  You can read more about the text-align property at <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp" target="_new">W3Schools - CSS text-align Property</a>

        :::

        ::: details [**Why do I need all the punctuation?**]

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        :::

        ::: details [**What is a style sheet?**]

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        :::

        ::: details [**What is CSS?**]

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.
        <br/><br/>
        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

            h2 {
               color: blue;
               font-family: cursive;
            }

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        :::

        </div>

        # Text Alignment

        The `text-align` property sets the horizontal (side to side) position of the text within each line.

        -   Find the "text-align" property in the paragraph tag.
        -   Change the paragraph alignment.
            -   Choose from "left", "right", and "center"
      CSD U2 un_ordered lists: "# Combining Lists\n\n<div class=\"no-pullthrough\"
        style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px\" markdown=\"1\">\n\n::: details [**What are the two
        types of lists?**]\n There are two types of lists in HTML, ordered and unordered
        lists.\n:::\n\n::: details [**What is an unordered list?**]\n\nAn unordered
        list is just a set of bulleted items.\n\nAn unordered list element has the
        tag `<ul>` . This is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist.
        Each item in the list is marked by a list item element `<li>`. This is an
        abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item
        element is a child element, which means that it goes inside of its parent
        element, the unordered list (`<ul>`).\n\n:::\n\n::: details [**How do I make
        an unordered list?**]\n\nMaking an unordered list has two steps: making the
        list and adding the list items.  To make the unordered list, write the unordered
        list tags `<ul></ul>`.  Next, add your list items **inside** the unordered
        list tags.  To make each list item, use the list item tags `<li></li>` and
        write the list item inside the tags.\n\nIt can be helpful to indent your `<li>`
        tags so it's clear they are contained in the `<ul>` tag.\n\n:::\n\n::: details
        [**What is an ordered list?**]\n\nAn ordered list is a set of bulleted items
        which are numbered.\n\nAn ordered list element has the tag `<ol>`. This is
        an abbreviation for <strong>O</strong>rdered <strong>L</strong>ist. Each item
        in the list is marked by a list item element `<li>`;. This is an abbreviation
        for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is
        a child element, which means that it goes inside of its parent element, the
        ordered list (`<ol>`).\n:::\n\n::: details [**How do I make an ordered list?**]\n\nMaking
        an ordered list has two steps: making the list and adding the list items.
        \ To make the ordered list, write the ordered list tags `<ol></ol>`.  Next,
        add your list items **inside** the ordered list tags.  To make each list item,
        use the list item tags `<li></li>` and write the list item inside the tags.\n<br
        /><br />\nIt can be helpful to indent your `<li>` tags so it's clear they
        are contained in the `<ol>` tag.\n:::\n\n::: details [**Show me working code.**]\n\n<table
        border=\"1\">\n<tr>\n<td>Example</td>\n<td>Result</td>\n</tr>\n<tr>\n<td>\n\n
        \   <ul>\n     \t<li>Red </li>\n        <li>Green </li>\n        <li>Blue</li>\n
        \   </ul> \n\n</td>\n<td><img src=\"https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32
        PM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n<table border=\"1\">\n<tr>\n<td>Example</td>\n<td>Result</td>\n</tr>\n<tr>\n<td>\n\n
        \   <ol>\n     \t<li>Step 1</li>\n        <li>Step 2</li>\n        <li>Step
        3</li> \n    </ol> \n\n</td>\n<td><img src=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04
        PM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n:::\n\n</div>\n\nThis
        page should include both an unordered list and an ordered list.\n\n# Do This\n\n-
        \  Use the list tags to structure this content into two lists that look like
        the ones below.\n\n_Hint: There will be NO NUMBERS in your code._ \n\n![](https://images.code.org/c9c002b39893ab09e8bc6be4b20ad7c2-image-1553714125509.png)"
      CSD U2 unordered list: |-
        # Unordered Lists

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What are the two types of lists?</strong>
        </summary>
         There are two types of lists in HTML, ordered and unordered lists.
        </details>
        <details>
        <summary><strong>What is an unordered list?</strong>
        </summary>

        An unordered list is just a set of bulleted items.
        <br /><br />An unordered list element has the tag \<ul> . This is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist. Each item in the list is marked by a list item element \<li>. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element, which means that it goes inside of its parent element, the unordered list (\<ul>).

        </details>

        <details>
        <summary><strong>How do I make an unordered list?</strong>
        </summary>

        Making an unordered list has two steps: making the list and adding the list items.  To make the unordered list, write the unordered list tags `<ul></ul>`.  Next, add your list items **inside** the unordered list tags.  To make each list item, use the list item tags `<li></li>` and write the list item inside the tags.

        It can be helpful to indent your \<li> tags so it's clear they are contained in the \<ul> tag.

        </details>

        <details>
        <summary><strong>Show me working code.</strong>
        </summary>

        <table border="1">
        <tr>
        <td>Example</td>
        <td>Result</td>
        </tr>
        <tr>
        <td><pre> &lt;ul&gt; <br>   &lt;li&gt;Red &lt;/li&gt; <br>   &lt;li&gt;Green &lt;/li&gt; <br>   &lt;li&gt;Blue&lt;/li&gt; <br> &lt;/ul&gt; </pre></td>
        <td><img src="https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32 PM.png" style="width:200px"></td>
        </tr>
        </table>

        </details>
        </div>

        This page should have an unordered list, but it's missing the list tags.

        # Do This

        -   Use the `<ul>` and `<li>` tags to structure the content into an unordered list like the picture below.

        ![](<https://images.code.org/64581a90765cd2d53b6c5235c48f2855-image-1493238358294.25.04 PM.png>)
      CSD U2 unordered list_2018: |-
        # Unordered Lists

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What are the two types of lists?</strong>
        </summary>
        There are two types of lists in HTML, ordered and unordered lists.

        </details>
        <details>
        <summary>
        <strong>What is an unordered list?</strong>
        </summary>

        An unordered list is just a set of bulleted items.
        <br /><br />An unordered list element has the tag \<ul> . This is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist. Each item in the list is marked by a list item element \<li>. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element, which means that it goes inside of its parent element, the unordered list (\<ul>).

        </details>

        <details>
        <summary>
        <strong>How do I make an unordered list?</strong>
        </summary>

        Making an unordered list has two steps: making the list and adding the list items.  To make the unordered list, write the unordered list tags `<ul></ul>`.  Next, add your list items **inside** the unordered list tags.  To make each list item, use the list item tags `<li></li>` and write the list item inside the tags.
        <br /><br />
        It can be helpful to indent your \<li> tags so it's clear they are contained in the \<ul> tag.

        </details>

        <details>
        <summary>
        <strong>Show me working code.</strong>
        </summary>

        <table border="1">
        <tr>
        <td>Example</td>
        <td>Result</td>
        </tr>
        <tr>
        <td><pre> &lt;ul&gt; <br>   &lt;li&gt;Red &lt;/li&gt; <br>   &lt;li&gt;Green &lt;/li&gt; <br>   &lt;li&gt;Blue&lt;/li&gt; <br> &lt;/ul&gt; </pre></td>
        <td><img src="https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32 PM.png" style="width:200px"></td>
        </tr>
        </table>

        </details>
        </div>

        This page should have an unordered list, but it's missing the list tags.

        # Do This

        -   Use the `<ul>` and `<li>` tags to structure the content into an unordered list like the picture below.

        ![](<https://images.code.org/64581a90765cd2d53b6c5235c48f2855-image-1493238358294.25.04 PM.png>)
      CSD U2 unordered list_2019: "# Unordered Lists\n\n<div class=\"no-pullthrough\"
        style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px\" markdown=\"1\">\n\n::: details [**What are the two
        types of lists?**]\nThere are two types of lists in HTML, ordered and unordered
        lists.\n\n:::\n\n::: details [**What is an unordered list?**]\n\nAn unordered
        list is just a set of bulleted items.\n<br /><br />An unordered list element
        has the tag `<ul>`. This is an abbreviation for <strong>U</strong>nordered
        <strong>L</strong>ist. Each item in the list is marked by a list item element
        `<li>`. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.
        \ The list item element is a child element, which means that it goes inside
        of its parent element, the unordered list (`<ul>`).\n\n:::\n\n::: details
        [**How do I make an unordered list?**]\n\nMaking an unordered list has two
        steps: making the list and adding the list items.  To make the unordered list,
        write the unordered list tags `<ul></ul>`.  Next, add your list items **inside**
        the unordered list tags.  To make each list item, use the list item tags `<li></li>`
        and write the list item inside the tags.\n<br /><br />\nIt can be helpful
        to indent your <li> tags so it's clear they are contained in the <ul> tag.\n\n:::\n\n:::
        details [**Show me working code.**]\n\n<table border=\"1\">\n<tr>\n<td>Example</td>\n<td>Result</td>\n</tr>\n<tr>\n<td>\n\n
        \    <ul> <br>\n     \t<li>Red </li>\n        <li>Green </li>\n        <li>Blue</li>\n
        \    </ul>\n\n</td>\n<td><img src=\"https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32
        PM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n:::\n\n</div>\n\nThis
        page should have an unordered list, but it's missing the list tags.\n\n# Do
        This\n\n-   Use the `<ul>` and `<li>` tags to structure the content into an
        unordered list like the picture below.\n\n![](<https://images.code.org/64581a90765cd2d53b6c5235c48f2855-image-1493238358294.25.04
        PM.png>)"
      CSD U2 upload images: |-
        # Upload Images

        Next, you'll need to upload all of your images into your project.

        # Do This

        -   Download all the images you want onto your computer. Visit <a href="/s/csd2-2017/stage/7/puzzle/5" target="_new">Lesson 7 Level 5</a> for help if you need it.
            -   Make sure you have the right to use these images.
            -   Write down all of the attribution information that you need.
            -   Upload all of the images into your project.  Visit <a href="/s/csd2-2017/stage/7/puzzle/5" target="_new">Lesson 7 Level 5</a> if you've forgotten how.
      CSD U2 upload images_2018: |-
        # Upload Images

        Next, you'll need to upload all of your images into your project.

        # Do This

        -   Download all the images you want onto your computer. Visit <a href="../../../stage/7/puzzle/5" target="_new">Lesson 7 Level 5</a> for help if you need it.
            -   Make sure you have the right to use these images.
            -   Write down all of the attribution information that you need.
            -   Upload all of the images into your project.  Visit <a href="../../../stage/7/puzzle/5" target="_new">Lesson 7 Level 5</a> if you've forgotten how.
      CSD U2 upload images_2019: |-
        # Upload Images

        Next, you'll need to upload all of your images into your project.

        # Do This

        -   Download all the images you want onto your computer. Visit <a href="../../../stage/7/puzzle/5" target="_new">Lesson 7 Level 5</a> for help if you need it.
            -   Make sure you have the right to use these images.
            -   Write down all of the attribution information that you need.
            -   Upload all of the images into your project.  Visit <a href="../../../stage/7/puzzle/5" target="_new">Lesson 7 Level 5</a> if you've forgotten how.
      CSD U3 - Booleans Video: "# Boolean Expressions Video"
      CSD U3 - Booleans Video_2019: |-
        ## Otázky na zamyslenie

        -   Čo to je "logický výraz"?
        -   Aký výraz vyhodnotí počítač ako "True" (pravda)?
        -   Aký výraz vyhodnotí počítač ako "False" (nepravda)?
      CSD U3 - Conditionals Video_2019: |-
        ## Otázky na zamyslenie

        -   Kedy by sa ti v programe zišiel príkaz “if/else”? Nájdeš viacero príkladov?
      CSD U3 - Simple Counter Predict: "# The Counter Pattern\n\nThis pattern is one
        of the most important ones in all of programming. \n\n![](<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56
        PM.png>)\n\nIt is used to increase the value of a variable by 1. You might
        call it the **counter pattern** since it can be used to make a variable that
        counts up. You'll use this pattern a lot, especially with the draw loop. Let's
        see what that looks like.\n\n# Do This\n\nThis program creates a variable
        `counter` and then uses the **counter pattern** to make it count up. When
        you run the program what do you think you'll see on the screen?\n\n-   **Read
        the program** and make a prediction of what the output will be.\n-   **Run
        the program** to check your prediction.\n-   **Discuss with a neighbor**.
        Can you explain what you observed?"
      CSD U3 - Simple Counter Predict_2018: "# The Counter Pattern\n\nThis pattern
        is one of the most important ones in all of programming. \n\n![](<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56
        PM.png>)\n\nIt is used to increase the value of a variable by 1. You might
        call it the **counter pattern** since it can be used to make a variable that
        counts up. You'll use this pattern a lot, especially with the draw loop. Let's
        see what that looks like.\n\n# Do This\n\nThis program creates a variable
        `counter` and then uses the **counter pattern** to make it count up. When
        you run the program what do you think you'll see on the screen?\n\n-   **Read
        the program** and make a prediction of what the output will be.\n-   **Run
        the program** to check your prediction.\n-   **Discuss with a neighbor**.
        Can you explain what you observed?"
      CSD U3 - Simple Counter Predict_2019: "# The Counter Pattern\n\nThis pattern
        is one of the most important ones in all of programming. \n\n![](<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56
        PM.png>)\n\nIt is used to increase the value of a variable by 1. You might
        call it the **counter pattern** since it can be used to make a variable that
        counts up. You'll use this pattern a lot, especially with the draw loop. Let's
        see what that looks like.\n\n# Do This\n\nThis program creates a variable
        `counter` and then uses the **counter pattern** to make it count up. When
        you run the program what do you think you'll see on the screen?\n\n-   **Read
        the program** and make a prediction of what the output will be.\n-   **Run
        the program** to check your prediction.\n-   **Discuss with a neighbor**.
        Can you explain what you observed?"
      CSD U3 - complex - key up and down: |-
        # Odpoveď na jediné kliknutie myšou

        Nedávno sme sa naučili, že `keyWentDown` a `keyWentUp` sa môžu použiť pre reakciu na jedno stlačenie klávesy. Bloky `mouseWentUp` a `mouseWentDown` robia to isté pri myši!

        # Urob toto

        Vytvorme jednoduchú hru, ktorá ráta, koľkokrát si stlačil/a tlačidlo myši. Premennú `clicks`, ktorá počíta stlačenia, sme za teba už nakódovali, takže môžeš sledovať, koľkokrát sa tlačidlo myši stlačilo.

        -   Pridaj podmienku, ktorá skontroluje, či sa tlačidlo myši stlačilo.
        -   Dovnútra podmienky pridaj premennú `clicks`.

        _Výzva: Vieš pridať „sprite“ objekt, ktorý zareaguje na akciu `mouseWentDown`? Pridaj obrázok podľa tvojho výberu a zväčši ho pri každom jednom kliknutí_
      CSD U3 - complex - key up and down_2018: |-
        # Odpoveď na jediné kliknutie myšou

        Nedávno sme sa naučili, že `keyWentDown` a `keyWentUp` sa môžu použiť pre reakciu na jedno stlačenie klávesy. Bloky `mouseWentUp` a `mouseWentDown` robia to isté pri myši!

        # Urob toto

        Vytvorme jednoduchú hru, ktorá ráta, koľkokrát si stlačil/a tlačidlo myši. Premennú `clicks`, ktorá počíta stlačenia, sme za teba už nakódovali, takže môžeš sledovať, koľkokrát sa tlačidlo myši stlačilo.

        -   Pridaj podmienku, ktorá skontroluje, či sa tlačidlo myši stlačilo.
        -   Dovnútra podmienky pridaj premennú `clicks`.

        _Výzva: Vieš pridať „sprite“ objekt, ktorý zareaguje na akciu `mouseWentDown`? Pridaj obrázok podľa tvojho výberu a zväčši ho pri každom jednom kliknutí_
      CSD U3 - complex - key up and down_2019: |-
        # Odpoveď na jediné kliknutie myšou

        Nedávno sme sa naučili, že `keyWentDown` a `keyWentUp` sa môžu použiť pre reakciu na jedno stlačenie klávesy. Bloky `mouseWentUp` a `mouseWentDown` robia to isté pri myši!

        # Urob toto

        Vytvorme jednoduchú hru, ktorá ráta, koľkokrát si stlačil/a tlačidlo myši. Premennú `clicks`, ktorá počíta stlačenia, sme za teba už nakódovali, takže môžeš sledovať, koľkokrát sa tlačidlo myši stlačilo.

        -   Pridaj podmienku, ktorá skontroluje, či sa tlačidlo myši stlačilo.
        -   Dovnútra podmienky pridaj premennú `clicks`.

        _Výzva: Vieš pridať „sprite“ objekt, ktorý zareaguje na akciu `mouseWentDown`? Pridaj obrázok podľa tvojho výberu a zväčši ho pri každom jednom kliknutí_
      CSD U3 - complex - mouse down: "# Kliknutie myšou\n\nStlačenia kláves sú fajn,
        ale niekedy chceme, aby užívatelia radšej používali myš. Preto tu máme nový
        blok nazvaný `mouseDown`, ktorý, podobne ako `keyDown`, kontroluje, či užívateľ
        klikol na ľavé alebo pravé tlačidlo na myši. Ak používate počítač s trackpadom
        alebo s myšou s jediným tlačidlom, používajte vždy možnosť `mouseDown(\"left\")`.
        \n\n# Urob toto\n\nTu je program, v ktorom balón padá nadol. Tvojou úlohou
        bude zabezpečiť, aby kliknutie na myšku balón opäť zodvihlo.\n\n-   Pridaj
        „if“ výraz, ktorý skontroluje  `mouseDown`.\n-   Vo vnútri podmienky posuň
        balón o jeden pixel hore, ak je tlačidlo stlačené. Inak posuň balón smerom
        nadol.\n\n_Nápoveda: Kód, ktorý spúšťa balón nadol, potrebuješ presunúť –
        chceš ho spustiť len vtedy, ak je `mouseDown` v stave `false`_.\n\n_Výzva:
        Vieš zariadiť, aby balón, počas jeho výstupu/pádu, lietal aj náhodne doľava/doprava?_"
      CSD U3 - complex - mouse down_2018: "# Kliknutie myšou\n\nStlačenia kláves sú
        fajn, ale niekedy chceme, aby užívatelia radšej používali myš. Preto tu máme
        nový blok nazvaný `mouseDown`, ktorý, podobne ako `keyDown`, kontroluje, či
        užívateľ klikol na ľavé alebo pravé tlačidlo na myši. Ak používate počítač
        s trackpadom alebo s myšou s jediným tlačidlom, používajte vždy možnosť `mouseDown(\"left\")`.
        \n\n# Urob toto\n\nTu je program, v ktorom balón padá nadol. Tvojou úlohou
        bude zabezpečiť, aby kliknutie na myšku balón opäť zodvihlo.\n\n-   Pridaj
        „if“ výraz, ktorý skontroluje  `mouseDown`.\n-   Vo vnútri podmienky posuň
        balón o jeden pixel hore, ak je tlačidlo stlačené. Inak posuň balón smerom
        nadol.\n\n_Nápoveda: Kód, ktorý spúšťa balón nadol, potrebuješ presunúť –
        chceš ho spustiť len vtedy, ak je `mouseDown` v stave `false`_.\n\n_Výzva:
        Vieš zariadiť, aby balón, počas jeho výstupu/pádu, lietal aj náhodne doľava/doprava?_"
      CSD U3 - complex - mouse down_2019: "# Kliknutie myšou\n\nStlačenia kláves sú
        fajn, ale niekedy chceme, aby užívatelia radšej používali myš. Preto tu máme
        nový blok nazvaný `mouseDown`, ktorý, podobne ako `keyDown`, kontroluje, či
        užívateľ klikol na ľavé alebo pravé tlačidlo na myši. Ak používate počítač
        s trackpadom alebo s myšou s jediným tlačidlom, používajte vždy možnosť `mouseDown(\"left\")`.
        \n\n# Urob toto\n\nTu je program, v ktorom balón padá nadol. Tvojou úlohou
        bude zabezpečiť, aby kliknutie na myšku balón opäť zodvihlo.\n\n-   Pridaj
        „if“ výraz, ktorý skontroluje  `mouseDown`.\n-   Vo vnútri podmienky posuň
        balón o jeden pixel hore, ak je tlačidlo stlačené. Inak posuň balón smerom
        nadol.\n\n_Nápoveda: Kód, ktorý spúšťa balón nadol, potrebuješ presunúť –
        chceš ho spustiť len vtedy, ak je `mouseDown` v stave `false`_.\n\n_Výzva:
        Vieš zariadiť, aby balón, počas jeho výstupu/pádu, lietal aj náhodne doľava/doprava?_"
      CSD U3 - complex - mouse move: |-
        # mouseDidMove

        Logické výrazy môžeme použiť aj na kontrolu toho, či sa kurzor (ne)pohol. Blok `mouseDidMove` vráti `false`, ak sa myš nepohla a `true`, ak sa myš pohla.

        # Urob toto

        V tomto momente nám program zobrazí „sprite“ s obrázkom soľničky. Aby sa pri pohybe myšou soľnička zatriasla, použijeme príkaz `mouseDidMove`.

        -   Pridaj podmieňovací výraz, ktorý skontroluje akciu `mouseDidMove`.
        -   Ak sa podmienka splní, otoč soľničku o náhodný počet stupňov doľava alebo doprava.

        _Výzva: Vieš sledovať aj počet zatrasení soľničky funkciou `mouseDidMove` a po 100 zatraseniach ju otočiť pravou stranou dohora?_
      CSD U3 - complex - mouse move_2018: |-
        # mouseDidMove

        Logické výrazy môžeme použiť aj na kontrolu toho, či sa kurzor (ne)pohol. Blok `mouseDidMove` vráti `false`, ak sa myš nepohla a `true`, ak sa myš pohla.

        # Urob toto

        V tomto momente nám program zobrazí „sprite“ s obrázkom soľničky. Aby sa pri pohybe myšou soľnička zatriasla, použijeme príkaz `mouseDidMove`.

        -   Pridaj podmieňovací výraz, ktorý skontroluje akciu `mouseDidMove`.
        -   Ak sa podmienka splní, otoč soľničku o náhodný počet stupňov doľava alebo doprava.

        _Výzva: Vieš sledovať aj počet zatrasení soľničky funkciou `mouseDidMove` a po 100 zatraseniach ju otočiť pravou stranou dohora?_
      CSD U3 - complex - mouse move_2019: |-
        # mouseDidMove

        Logické výrazy môžeme použiť aj na kontrolu toho, či sa kurzor (ne)pohol. Blok `mouseDidMove` vráti `false`, ak sa myš nepohla a `true`, ak sa myš pohla.

        # Urob toto

        V tomto momente nám program zobrazí „sprite“ s obrázkom soľničky. Aby sa pri pohybe myšou soľnička zatriasla, použijeme príkaz `mouseDidMove`.

        -   Pridaj podmieňovací výraz, ktorý skontroluje akciu `mouseDidMove`.
        -   Ak sa podmienka splní, otoč soľničku o náhodný počet stupňov doľava alebo doprava.

        _Výzva: Vieš sledovať aj počet zatrasení soľničky funkciou `mouseDidMove` a po 100 zatraseniach ju otočiť pravou stranou dohora?_
      CSD U3 - conditionals - first conditional: "<img src=\"https://images.code.org/36c5543076622c96f7dabce8bc37f995-image-1468425774455.54.03
        PM.png\" style=\"float:right;width:100px\">\n\n# Podmienkový výrok\n\nLogické
        výrazy, použité v predchádzajúcich úrovniach, nám dovoľujú pýtať sa otázky.
        Aby sme na ne určili odpoveď, potrebujeme použiť podmienkový výrok `if`. \n\nPodmienkové
        výroky `if` budeš pravdpodobne využívať najmä v rámci cyklu kreslenia, pretože
        ich počas jeho behu chceme overovať. \n\n# Urob toto\n\nProgram s pretekárskym
        autom, vytvorený pred chvíľou, je tu už pripravený.\n\n-   Keď zmeníš pozíciu
        auta, pridaj výrok `if`.\n-   Presuň logický výraz z console.log do podmienky
        výroku `if`.\n-   Do výroku `if` pridaj príkaz na zobrazenie textu „Winner“
        (alebo „Víťaz“)."
      CSD U3 - conditionals - first conditional 2: |-
        <img src="https://images.code.org/abd459d8d1477ac2f582417f4334cdaa-image-1466107090414.gif" style="width:200px;float:right">

        # Visible

        Now that you have conditionals and images, sometimes it's useful to hide the image for a while and then show it again. You can do this using the `visible` property. The visible property is a little different from other properties you have seen in the past: It is a Boolean value, either `true` (the sprite is visible) or `false` (the sprite is **not** visible). By default, visible is set to `true`.

        # Do This

        Make the balloon pop when it hits the edge of the game area!

        -   Add an `if` statement that checks to see if the balloon has hit the edge.
            -   Use a watcher on `balloon.scale` to help you out.
        -   Create a pop sprite which uses the "pop" visual in the animation tab.
        -   Set the pop's `visible` property to `false` to start.
        -   Inside the `if` add two statements.
            -   One that sets the `visible` property to hide the balloon sprite.
            -   One that sets the `visible` property to show the pop sprite.
      CSD U3 - conditionals - first conditional 2_2018: "<img src=\"https://images.code.org/abd459d8d1477ac2f582417f4334cdaa-image-1466107090414.gif\"
        style=\"width:200px;float:right\">\n\n# Viditeľnosť\n\nNiekedy sa hodí obrázok
        na chvíľu skryť a potom ho zas zobraziť. Toto sa dá urobiť pomocou nastavenia
        `visible` (viditeľnosť). Toto nastavenie sa trochu líši od tých, s ktorými
        si sa už stretol/stretla: Ide totiž o Booleovskú hodnotu, buď `true` (postava
        je viditeľná) alebo `false` (postava **nie**  je viditeľná). Viditeľnosť je
        automaticky nastavená na `true`.\n\n# Urob toto\n\nNastav balón tak, aby praskol,
        keď dosiahne okraj pracovnej plochy!\n\n-   Pridaj podmienku, ktorá overí,
        či balón dosiahol okraj plochy. \n    -   Nastav kontrolu na `ballon.scale`,
        ktorá ti s tým pomôže.\n-   Vytvor postavu (\"sprite\") - pre prasknutie balóna
        - a pridaj ju do záložky animácií.\n-   Použi nastavenie `visible`, vďaka
        ktorému bude prasknutý balón na začiatku skrytý.\n-   Do výrazu `if` pridaj
        dva výroky.\n    -   Jeden, ktorý nastaví `visible` pre neprasknutý balón
        - ten by sa mal skryť, keď dosiahne okraj plochy.\n    -   Druhý, ktorý zobrazí
        prasknutie balóna."
      CSD U3 - conditionals - first conditional 2_2018_2019: "<img src=\"https://images.code.org/abd459d8d1477ac2f582417f4334cdaa-image-1466107090414.gif\"
        style=\"width:200px;float:right\">\n\n# Viditeľnosť\n\nNiekedy sa hodí obrázok
        na chvíľu skryť a potom ho zas zobraziť. Toto sa dá urobiť pomocou nastavenia
        `visible` (viditeľnosť). Toto nastavenie sa trochu líši od tých, s ktorými
        si sa už stretol/stretla: Ide totiž o Booleovskú hodnotu, buď `true` (postava
        je viditeľná) alebo `false` (postava **nie**  je viditeľná). Viditeľnosť je
        automaticky nastavená na `true`.\n\n# Urob toto\n\nNastav balón tak, aby praskol,
        keď dosiahne okraj pracovnej plochy!\n\n-   Pridaj podmienku, ktorá overí,
        či balón dosiahol okraj plochy. \n    -   Nastav kontrolu na `ballon.scale`,
        ktorá ti s tým pomôže.\n-   Vytvor postavu (\"sprite\") - pre prasknutie balóna
        - a pridaj ju do záložky animácií.\n-   Použi nastavenie `visible`, vďaka
        ktorému bude prasknutý balón na začiatku skrytý.\n-   Do výrazu `if` pridaj
        dva výroky.\n    -   Jeden, ktorý nastaví `visible` pre neprasknutý balón
        - ten by sa mal skryť, keď dosiahne okraj plochy.\n    -   Druhý, ktorý zobrazí
        prasknutie balóna."
      CSD U3 - conditionals - first conditional_2018: "<img src=\"https://images.code.org/36c5543076622c96f7dabce8bc37f995-image-1468425774455.54.03
        PM.png\" style=\"float:right;width:100px\">\n\n# Podmienkový výrok\n\nLogické
        výrazy, použité v predchádzajúcich úrovniach, nám dovoľujú pýtať sa otázky.
        Aby sme na ne určili odpoveď, potrebujeme použiť podmienkový výrok `if`. \n\nPodmienkové
        výroky `if` budeš pravdpodobne využívať najmä v rámci cyklu kreslenia, pretože
        ich počas jeho behu chceme overovať. \n\n# Urob toto\n\nProgram s pretekárskym
        autom, vytvorený pred chvíľou, je tu už pripravený.\n\n-   Keď zmeníš pozíciu
        auta, pridaj výrok `if`.\n-   Presuň logický výraz z console.log do podmienky
        výroku `if`.\n-   Do výroku `if` pridaj príkaz na zobrazenie textu „Winner“
        (alebo „Víťaz“)."
      CSD U3 - conditionals - first conditional_2019: "<img src=\"https://images.code.org/36c5543076622c96f7dabce8bc37f995-image-1468425774455.54.03
        PM.png\" style=\"float:right;width:100px\">\n\n# Podmienkový výrok\n\nLogické
        výrazy, použité v predchádzajúcich úrovniach, nám dovoľujú pýtať sa otázky.
        Aby sme na ne určili odpoveď, potrebujeme použiť podmienkový výrok `if`. \n\nPodmienkové
        výroky `if` budeš pravdpodobne využívať najmä v rámci cyklu kreslenia, pretože
        ich počas jeho behu chceme overovať. \n\n# Urob toto\n\nProgram s pretekárskym
        autom, vytvorený pred chvíľou, je tu už pripravený.\n\n-   Keď zmeníš pozíciu
        auta, pridaj výrok `if`.\n-   Presuň logický výraz z console.log do podmienky
        výroku`if`.\n-   Do výroku `if` pridaj príkaz na zobrazenie textu „Winner“
        (alebo „Víťaz“)."
      CSD U3 - conditionals - transition: "# Logické výrazy\n\nV predchádzajúcich
        lekciách sme porovnávali hodnoty „sprite“ objektov, aby sme zistili, či je
        daný výrok pravdivý alebo nepravdivý. Poďme sa teraz na to pozrieť z pohľadu
        animácie. \n\n# Urob toto\n\nProgram nakreslí pretekárske auto a cieľovú čiaru.
        Skús uhádnuť, kedy ju pretkárske auto prejde. Všekty „sprite“ objekty už pre
        teba boli nastavené..\n\n-   Pridaj `console.log` prvok do cyklu kreslenia.
        ( [Ukáž mi kde](#triggercallout=callout) )\n-   Do `console.log` pridaj logický
        výraz, ktorý sa pýta: „Je pozícia x pretekárskeho auta menšia ako pozícia
        x cieľovej čiary“?\n-   Pozri sa na výstup programu, keď sa auto pohne. Kedy
        sa výstup zmení? A prečo?"
      CSD U3 - conditionals - transition_2018: "# Logické výrazy\n\nV predchádzajúcich
        lekciách sme porovnávali hodnoty „sprite“ objektov, aby sme zistili, či je
        daný výrok pravdivý alebo nepravdivý. Poďme sa teraz na to pozrieť z pohľadu
        animácie. \n\n# Urob toto\n\nProgram nakreslí pretekárske auto a cieľovú čiaru.
        Skús uhádnuť, kedy ju pretkárske auto prejde. Všekty „sprite“ objekty už pre
        teba boli nastavené..\n\n-   Pridaj `console.log` prvok do cyklu kreslenia.
        ( [Ukáž mi kde](#triggercallout=callout) )\n-   Do `console.log` pridaj logický
        výraz, ktorý sa pýta: „Je pozícia x pretekárskeho auta menšia ako pozícia
        x cieľovej čiary“?\n-   Pozri sa na výstup programu, keď sa auto pohne. Kedy
        sa výstup zmení? A prečo?"
      CSD U3 - conditionals - transition_2019: "# Logické výrazy\n\nV predchádzajúcich
        lekciách sme porovnávali hodnoty „sprite“ objektov, aby sme zistili, či je
        daný výrok pravdivý alebo nepravdivý. Poďme sa teraz na to pozrieť z pohľadu
        animácie. \n\n# Urob toto\n\nProgram nakreslí pretekárske auto a cieľovú čiaru.
        Skús uhádnuť, kedy ju pretkárske auto prejde. Všekty „sprite“ objekty už pre
        teba boli nastavené..\n\n-   Pridaj `console.log` prvok do cyklu kreslenia.
        ( [Ukáž mi kde](#triggercallout=callout) )\n-   Do `console.log` pridaj logický
        výraz, ktorý sa pýta: „Je pozícia x pretekárskeho auta menšia ako pozícia
        x cieľovej čiary“?\n-   Pozri sa na výstup programu, keď sa auto pohne. Kedy
        sa výstup zmení? A prečo?"
      CSD U3 AnimationsMulti Play Defender: "# Obráň svoj koláčik\n\nToto je príklad
        obrannej hry, na ktorej budeš pracovať do konca tejto lekcie. Potrebuješ ochrániť
        svoj koláčik. Posúvaj mimozemšťana pomocou šípok na klávesnici tak, aby zablokoval
        lienky a odtlačil ich do vody. \n\n# Urob toto\n\nSpoj sa so svojím spolusediacim
        a zapíšte si nasledovné informácie:\n\n-   Koľko „sprite“ objektov je použitých
        v tejto hre. Ktoré sú to?\n-   Aké premenné sú potrebné na vytvorenie tejto
        hry? Čo ukladajú?\n-   Ak by si rozdelil/a kód tejto hry do funkcií, aké by
        to boli? Aké sú hlavné časti správania, ktoré by si musel/a vytvoriť vo svojom
        kóde?"
      CSD U3 AnimationsMulti Play Defender_2018: "# Obráň svoj koláčik\n\nToto je
        príklad obrannej hry, na ktorej budeš pracovať do konca tejto lekcie. Potrebuješ
        ochrániť svoj koláčik. Posúvaj mimozemšťana pomocou šípok na klávesnici tak,
        aby zablokoval lienky a odtlačil ich do vody. \n\n# Urob toto\n\nSpoj sa so
        svojím spolusediacim a zapíšte si nasledovné informácie:\n\n-   Koľko „sprite“
        objektov je použitých v tejto hre. Ktoré sú to?\n-   Aké premenné sú potrebné
        na vytvorenie tejto hry? Čo ukladajú?\n-   Ak by si rozdelil/a kód tejto hry
        do funkcií, aké by to boli? Aké sú hlavné časti správania, ktoré by si musel/a
        vytvoriť vo svojom kóde?"
      CSD U3 AnimationsMulti Play Defender_2019: "# Obráň svoj koláčik\n\nToto je
        príklad obrannej hry, na ktorej budeš pracovať do konca tejto lekcie. Potrebuješ
        ochrániť svoj koláčik. Posúvaj mimozemšťana pomocou šípok na klávesnici tak,
        aby zablokoval lienky a odtlačil ich do vody. \n\n# Urob toto\n\nSpoj sa so
        svojím spolusediacim a zapíšte si nasledovné informácie:\n\n-   Koľko „sprite“
        objektov je použitých v tejto hre. Ktoré sú to?\n-   Aké premenné sú potrebné
        na vytvorenie tejto hry? Čo ukladajú?\n-   Ak by si rozdelil/a kód tejto hry
        do funkcií, aké by to boli? Aké sú hlavné časti správania, ktoré by si musel/a
        vytvoriť vo svojom kóde?"
      CSD U3 AnimationsMulti defender animate cake enemies: |-
        # Začíname: Nastav si animácie

        Na začiatku lekcie sme si preštudovali sprievodcu projektom. Veľa práce na tom, aby sa nápady v ňom uvedené stali skutočnosťou sme už spravili. Aj zvyšok práce urobíme s jeho pomocou.

        # Urob toto

        Hneď na začiatok asi budeš pre všetky svoje "sprite" objekty potrebovať nejaké lepšie animácie:

        -   Na Karte animácií sú animácie pre každý tvoj „sprite“. Pozri sa, aké to sú.
        -   Pridaj každému „sprite“ objektu vhodnú animáciu. **Zatiaľ použi tie, ktoré sme ti pripravili**, neskôr so ich budeš môcť zmeniť.
        -   Ak si potrebuješ spomenúť, ako to urobiť, vráť sa k [úlohe 4](/s/csd3-2017/stage/20/puzzle/4).
      CSD U3 AnimationsMulti defender animate cake enemies_2018: |-
        # Začíname: Nastav si animácie

        Na začiatku lekcie sme si preštudovali sprievodcu projektom. Veľa práce na tom, aby sa nápady v ňom uvedené stali skutočnosťou sme už spravili. Aj zvyšok práce urobíme s jeho pomocou.

        # Urob toto

        Hneď na začiatok asi budeš pre všetky svoje "sprite" objekty potrebovať nejaké lepšie animácie:

        -   Na Karte animácií sú animácie pre každý tvoj „sprite“. Pozri sa, aké to sú.
        -   Pridaj každému „sprite“ objektu vhodnú animáciu. **Zatiaľ použi tie, ktoré sme ti pripravili**, neskôr so ich budeš môcť zmeniť.
        -   Ak si potrebuješ spomenúť, ako to urobiť, vráť sa k [úlohe 4](/s/csd3-2018/stage/20/puzzle/4).
      CSD U3 AnimationsMulti defender animate cake enemies_2019: |-
        # Začíname: Nastav si animácie

        Na začiatku lekcie sme si preštudovali sprievodcu projektom. Veľa práce na tom, aby sa nápady v ňom uvedené stali skutočnosťou sme už spravili. Aj zvyšok práce urobíme s jeho pomocou.

        # Urob toto

        Hneď na začiatok asi budeš pre všetky svoje "sprite" objekty potrebovať nejaké lepšie animácie:

        -   Na Karte animácií sú animácie pre každý tvoj „sprite“. Pozri sa, aké to sú.
        -   Pridaj každému „sprite“ objektu vhodnú animáciu. **Zatiaľ použi tie, ktoré sme ti pripravili**, neskôr so ich budeš môcť zmeniť.
        -   Ak si potrebuješ spomenúť, ako to urobiť, vráť sa k [úlohe 4](../../20/puzzle/4).
      CSD U3 AnimationsMulti defender animate player: |-
        # Zmena animácie postavičky hráča

        V tomto momente je tvoja postavička otočená stále rovnakým smerom. Pomocou zmeny animácií ju môžeš urobiť realistickejšou. Tvoja postavička by mala meniť animácie medzi verziou pozerajúcou doľava a verziou pozerajúcou doprava  podľa toho, ktorá klávesa sa stlačila naposledy. Nezabúdaj, že animácie môžeš na karte Animácie jednoducho kopírovať aj upravovať.

        # Urob toto

        -   Na karte Animácie skopíruj animáciu „sprite“ objektu tvojej postavičky.
        -   Otoč každý obrázok novej animácie tak, aby sa „sprite“ objekt pozeral opačným smerom.
        -   Premenuj svoju novú animáciu.
        -   Použi príkaz `setAnimation` vo vnútri funkcie `movePlayer` tak, aby postavička menila smer, ktorým sa pozerá, keď sa stlačia klávesy „šípka doľava“ a „šípka doprava“.
      CSD U3 AnimationsMulti defender animate player_2018: |-
        # Zmena animácie postavičky hráča

        V tomto momente je tvoja postavička otočená stále rovnakým smerom. Pomocou zmeny animácií ju môžeš urobiť realistickejšou. Tvoja postavička by mala meniť animácie medzi verziou pozerajúcou doľava a verziou pozerajúcou doprava  podľa toho, ktorá klávesa sa stlačila naposledy. Nezabúdaj, že animácie môžeš na karte Animácie jednoducho kopírovať aj upravovať.

        # Urob toto

        -   Na karte Animácie skopíruj animáciu „sprite“ objektu tvojej postavičky.
        -   Otoč každý obrázok novej animácie tak, aby sa „sprite“ objekt pozeral opačným smerom.
        -   Premenuj svoju novú animáciu.
        -   Použi príkaz `setAnimation` vo vnútri funkcie `movePlayer` tak, aby postavička menila smer, ktorým sa pozerá, keď sa stlačia klávesy „šípka doľava“ a „šípka doprava“.
      CSD U3 AnimationsMulti defender animate player_2019: |-
        # Zmena animácie postavičky hráča

        V tomto momente je tvoja postavička otočená stále rovnakým smerom. Pomocou zmeny animácií ju môžeš urobiť realistickejšou. Tvoja postavička by mala meniť animácie medzi verziou pozerajúcou doľava a verziou pozerajúcou doprava  podľa toho, ktorá klávesa sa stlačila naposledy. Nezabúdaj, že animácie môžeš na karte Animácie jednoducho kopírovať aj upravovať.

        # Urob toto

        -   Na karte Animácie skopíruj animáciu „sprite“ objektu tvojej postavičky.
        -   Otoč každý obrázok novej animácie tak, aby sa „sprite“ objekt pozeral opačným smerom.
        -   Premenuj svoju novú animáciu.
        -   Použi príkaz `setAnimation` vo vnútri funkcie `movePlayer` tak, aby postavička menila smer, ktorým sa pozerá, keď sa stlačia klávesy „šípka doľava“ a „šípka doprava“.
      CSD U3 AnimationsMulti defender create set enemies: |-
        # Vytváranie funkcií

        <img src="https://images.code.org/126982cbde9ae62e9a77ca1e53c92024-image-1476291567280.58.00 AM.png" style="float:right; height:90px">

        Tvoj program teraz obsahuje kód pre umiestnenie nepriateľov na dvoch miestach na náhodnej súradnici Y na ľavej strane obrazovky. Na odstránenie opakujúcich sa častí v tvojom programe môžeš radšej vytvoriť funkcie pre resetovanie každého z tvojich nepriateľov. To spraví tvoj program jednoduchším na čítanie, umožní ti ľahšie ho meniť a tiež rýchlo resetovať tvoje „sprite“ objekty na ostatných miestach v programe, ak tak budeš chcieť urobiť.

        # Urob toto

        <img src="https://images.code.org/01a2f4d9725162482fda9f74734c992c-image-1476461412974.09.52 AM.png" style="
        float:right; height:70px">

        -   Na konci svojho programu vytvor dve funkcie: `setEnemy1` a `setEnemy2`.
        -   Do vnútra každej z týchto funkcií pridaj kód, ktorý umiestni nepriateľov na ľavú stranu obrazovky a na náhodnú súradnicu y.
        -   Vždy, keď sa kód pre `setEnemy1` a `setEnemy2` objaví v tvojom programe, nahraď ho zavolaním funkcií, ktoré si práve vytvoril/a.
      CSD U3 AnimationsMulti defender create set enemies_2018: |-
        # Vytváranie funkcií

        <img src="https://images.code.org/126982cbde9ae62e9a77ca1e53c92024-image-1476291567280.58.00 AM.png" style="float:right; height:90px">

        Tvoj program teraz obsahuje kód pre umiestnenie nepriateľov na dvoch miestach na náhodnej súradnici Y na ľavej strane obrazovky. Na odstránenie opakujúcich sa častí v tvojom programe môžeš radšej vytvoriť funkcie pre resetovanie každého z tvojich nepriateľov. To spraví tvoj program jednoduchším na čítanie, umožní ti ľahšie ho meniť a tiež rýchlo resetovať tvoje „sprite“ objekty na ostatných miestach v programe, ak tak budeš chcieť urobiť.

        # Urob toto

        <img src="https://images.code.org/01a2f4d9725162482fda9f74734c992c-image-1476461412974.09.52 AM.png" style="
        float:right; height:70px">

        -   Na konci svojho programu vytvor dve funkcie: `setEnemy1` a `setEnemy2`.
        -   Do vnútra každej z týchto funkcií pridaj kód, ktorý umiestni nepriateľov na ľavú stranu obrazovky a na náhodnú súradnicu y.
        -   Vždy, keď sa kód pre `setEnemy1` a `setEnemy2` objaví v tvojom programe, nahraď ho zavolaním funkcií, ktoré si práve vytvoril/a.
      CSD U3 AnimationsMulti defender create set enemies_2019: |-
        # Vytváranie funkcií

        <img src="https://images.code.org/126982cbde9ae62e9a77ca1e53c92024-image-1476291567280.58.00 AM.png" style="float:right; height:90px">

        Tvoj program teraz obsahuje kód pre umiestnenie nepriateľov na dvoch miestach na náhodnej súradnici Y na ľavej strane obrazovky. Na odstránenie opakujúcich sa častí v tvojom programe môžeš radšej vytvoriť funkcie pre resetovanie každého z tvojich nepriateľov. To spraví tvoj program jednoduchším na čítanie, umožní ti ľahšie ho meniť a tiež rýchlo resetovať tvoje „sprite“ objekty na ostatných miestach v programe, ak tak budeš chcieť urobiť.

        # Urob toto

        <img src="https://images.code.org/01a2f4d9725162482fda9f74734c992c-image-1476461412974.09.52 AM.png" style="
        float:right; height:70px">

        -   Na konci svojho programu vytvor dve funkcie: `setEnemy1` a `setEnemy2`.
        -   Do vnútra každej z týchto funkcií pridaj kód, ktorý umiestni nepriateľov na ľavú stranu obrazovky a na náhodnú súradnicu y.
        -   Vždy, keď sa kód pre `setEnemy1` a `setEnemy2` objaví v tvojom programe, nahraď ho zavolaním funkcií, ktoré si práve vytvoril/a.
      CSD U3 AnimationsMulti defender displace enemies: |-
        # Premiestnenie nepriateľov

        Je čas napísať kód pre interakcie „sprite“ objektov. „Sprite“ tvojej postavičky by mal posúvať nepriateľské „sprite“ objekty.

        # Urob toto

        V tejto úlohe budeš písať kód vo vnútri funkcie `displaceEnemies`.

        -   Napíš kód, ktorý premiestni obidva nepriateľské „sprite“ objekty.
        -   Otestuj svoj program a uisti sa, že tvoja postavička naozaj premiestňuje nepriateľov.  Tí by sa mali začať pohybovať doprava akonáhle sa hráč pohne preč.

        _Nápoveda: Pomocou `sprite.debug` si môžeš zobraziť ohraničienia tvojich „sprite“ objektov a vyladiť  svoj program._
      CSD U3 AnimationsMulti defender displace enemies_2018: |-
        # Premiestnenie nepriateľov

        Je čas napísať kód pre interakcie „sprite“ objektov. „Sprite“ tvojej postavičky by mal posúvať nepriateľské „sprite“ objekty.

        # Urob toto

        V tejto úlohe budeš písať kód vo vnútri funkcie `displaceEnemies`.

        -   Napíš kód, ktorý premiestni obidva nepriateľské „sprite“ objekty.
        -   Otestuj svoj program a uisti sa, že tvoja postavička naozaj premiestňuje nepriateľov.  Tí by sa mali začať pohybovať doprava akonáhle sa hráč pohne preč.

        _Nápoveda: Pomocou `sprite.debug` si môžeš zobraziť ohraničienia tvojich „sprite“ objektov a vyladiť  svoj program._
      CSD U3 AnimationsMulti defender displace enemies_2019: |-
        # Premiestnenie nepriateľov

        Je čas napísať kód pre interakcie „sprite“ objektov. „Sprite“ tvojej postavičky by mal posúvať nepriateľské „sprite“ objekty.

        # Urob toto

        V tejto úlohe budeš písať kód vo vnútri funkcie `displaceEnemies`.

        -   Napíš kód, ktorý premiestni obidva nepriateľské „sprite“ objekty.
        -   Otestuj svoj program a uisti sa, že tvoja postavička naozaj premiestňuje nepriateľov.  Tí by sa mali začať pohybovať doprava akonáhle sa hráč pohne preč.

        _Nápoveda: Pomocou `sprite.debug` si môžeš zobraziť ohraničienia tvojich „sprite“ objektov a vyladiť  svoj program._
      CSD U3 AnimationsMulti defender enemies move: |-
        # Pohyb nepriateľov

        Je načase napísať kód, ktorý zabezpečí pohyb nepriateľov. Na začiatok ich umiestni na náhodnú pozíciu s pohybom po obrazovke.

        # Urob toto

        Na začiatok programu, hneď ako vytvoríš nepriateľský „sprite“, napíš kód, ktorý ho umiestni na správnu pozíciu.

        -   Použi `sprite.x` na nastavenie pozície x na 0.
        -   Použi `sprite.y` na nastavenie pozície y na náhodné číslo medzi 150 a 250.
        -   Použi `sprite.velocityX` na nastavenie rýchlosti x na 2.
            Otestuj svoj program. Tvoje nepriateľské „sprite“ objekty by sa mali pohybovať po moste.
      CSD U3 AnimationsMulti defender enemies move_2018: |-
        # Pohyb nepriateľov

        Je načase napísať kód, ktorý zabezpečí pohyb nepriateľov. Na začiatok ich umiestni na náhodnú pozíciu s pohybom po obrazovke.

        # Urob toto

        Na začiatok programu, hneď ako vytvoríš nepriateľský „sprite“, napíš kód, ktorý ho umiestni na správnu pozíciu.

        -   Použi `sprite.x` na nastavenie pozície x na 0.
        -   Použi `sprite.y` na nastavenie pozície y na náhodné číslo medzi 150 a 250.
        -   Použi `sprite.velocityX` na nastavenie rýchlosti x na 2.
            Otestuj svoj program. Tvoje nepriateľské „sprite“ objekty by sa mali pohybovať po moste.
      CSD U3 AnimationsMulti defender enemies move_2019: |-
        # Pohyb nepriateľov

        Je načase napísať kód, ktorý zabezpečí pohyb nepriateľov. Na začiatok ich umiestni na náhodnú pozíciu s pohybom po obrazovke.

        # Urob toto

        Na začiatok programu, hneď ako vytvoríš nepriateľský „sprite“, napíš kód, ktorý ho umiestni na správnu pozíciu.

        -   Použi `sprite.x` na nastavenie pozície x na 0.
        -   Použi `sprite.y` na nastavenie pozície y na náhodné číslo medzi 150 a 250.
        -   Použi `sprite.velocityX` na nastavenie rýchlosti x na 2.
            Otestuj svoj program. Tvoje nepriateľské „sprite“ objekty by sa mali pohybovať po moste.
      CSD U3 AnimationsMulti defender enemies touch cake: |-
        # Dotknutie sa koláča

        Ak sa nepriatelia dostanú až ku koláču, mali by sa znova zobraziť na ľavej strane obrazovky a skóre sa má znížiť. **Najprv napíšeme kód len pre jedného z nepriateľov**.

        # Urob toto

        Do vnútra funkcie `enemiesTouchCake` napíš kód, ktorý skontroluje, či sa lienka dotkne koláča. Ak áno, obnoví svoju pozíciu a zmení sa skóre.

        -   Použi `if` a `isTouching` pre zistenie, či sa enemy1 dotkol koláča.
        -   Do vnútra bloku `if` vlož kód, ktorý:
            -   nastaví pozíciu X pre enemy1 naspäť na 0,
            -   nastaví pozíciu Y pre enemy1  na náhodné číslo medzi 150 a 250,
            -   zníži hodnotu počítadla skóre o 2.

        (_Nápoveda: Môžeš prepoužiť niektoré časti kódu, ktorý už máš napísaný_)

        Otestuj svoj kód. Jedna z lienok by sa mala resetovať, keď sa dostane až ku koláču, a skóre by sa malo znížiť o 2.
      CSD U3 AnimationsMulti defender enemies touch cake sprite2: |-
        # Dotknutie sa koláča: druhá lienka

        Tvoj prvý nepriateľ by sa mal resetovať, keď sa dostane ku koláču. Nastav tak aj lienku číslo 2.

        # Urob toto

        Vo vnútri funkcie `enemiesTouchCake` by si mal/a mať kód, ktorý resetuje `enemy1`.

        -   Skopíruj celý výraz `if`  z predchádzajúcej lekcie (použi klávesovú skratku Ctrl-C).
        -   Vlož kód dovnútra funkcie `enemiesTouchCake`, hneď pod posledný riadok kódu v nej (použi klávesovú skratku Ctrl-V).
        -   Zmeň názov „sprite“ objektu v tejto časti kódu z  enemy1 na  enemy2.

        Otestuj svoj kód. Teraz by sa obidve lienky mali resetovať, keď sa dotknú koláča.
      CSD U3 AnimationsMulti defender enemies touch cake sprite2_2018: |-
        # Dotknutie sa koláča: druhá lienka

        Tvoj prvý nepriateľ by sa mal resetovať, keď sa dostane ku koláču. Nastav tak aj lienku číslo 2.

        # Urob toto

        Vo vnútri funkcie `enemiesTouchCake` by si mal/a mať kód, ktorý resetuje `enemy1`.

        -   Skopíruj celý výraz `if`  z predchádzajúcej lekcie (použi klávesovú skratku Ctrl-C).
        -   Vlož kód dovnútra funkcie `enemiesTouchCake`, hneď pod posledný riadok kódu v nej (použi klávesovú skratku Ctrl-V).
        -   Zmeň názov „sprite“ objektu v tejto časti kódu z  enemy1 na  enemy2.

        Otestuj svoj kód. Teraz by sa obidve lienky mali resetovať, keď sa dotknú koláča.
      CSD U3 AnimationsMulti defender enemies touch cake sprite2_2019: |-
        # Dotknutie sa koláča: druhá lienka

        Tvoj prvý nepriateľ by sa mal resetovať, keď sa dostane ku koláču. Nastav tak aj lienku číslo 2.

        # Urob toto

        Vo vnútri funkcie `enemiesTouchCake` by si mal/a mať kód, ktorý resetuje `enemy1`.

        -   Skopíruj celý výraz `if`  z predchádzajúcej lekcie (použi klávesovú skratku Ctrl-C).
        -   Vlož kód dovnútra funkcie `enemiesTouchCake`, hneď pod posledný riadok kódu v nej (použi klávesovú skratku Ctrl-V).
        -   Zmeň názov „sprite“ objektu v tejto časti kódu z  enemy1 na  enemy2.

        Otestuj svoj kód. Teraz by sa obidve lienky mali resetovať, keď sa dotknú koláča.
      CSD U3 AnimationsMulti defender enemies touch cake_2018: |-
        # Dotknutie sa koláča

        Ak sa nepriatelia dostanú až ku koláču, mali by sa znova zobraziť na ľavej strane obrazovky a skóre sa má znížiť. **Najprv napíšeme kód len pre jedného z nepriateľov**.

        # Urob toto

        Do vnútra funkcie `enemiesTouchCake` napíš kód, ktorý skontroluje, či sa lienka dotkne koláča. Ak áno, obnoví svoju pozíciu a zmení sa skóre.

        -   Použi `if` a `isTouching` pre zistenie, či sa enemy1 dotkol koláča.
        -   Do vnútra bloku `if` vlož kód, ktorý:
            -   nastaví pozíciu X pre enemy1 naspäť na 0,
            -   nastaví pozíciu Y pre enemy1  na náhodné číslo medzi 150 a 250,
            -   zníži hodnotu počítadla skóre o 2.

        (_Nápoveda: Môžeš prepoužiť niektoré časti kódu, ktorý už máš napísaný_)

        Otestuj svoj kód. Jedna z lienok by sa mala resetovať, keď sa dostane až ku koláču, a skóre by sa malo znížiť o 2.
      CSD U3 AnimationsMulti defender enemies touch cake_2019: |-
        # Dotknutie sa koláča

        Ak sa nepriatelia dostanú až ku koláču, mali by sa znova zobraziť na ľavej strane obrazovky a skóre sa má znížiť. **Najprv napíšeme kód len pre jedného z nepriateľov**.

        # Urob toto

        Do vnútra funkcie `enemiesTouchCake` napíš kód, ktorý skontroluje, či sa lienka dotkne koláča. Ak áno, obnoví svoju pozíciu a zmení sa skóre.

        -   Použi `if` a `isTouching` pre zistenie, či sa enemy1 dotkol koláča.
        -   Do vnútra bloku `if` vlož kód, ktorý:
            -   nastaví pozíciu X pre enemy1 naspäť na 0,
            -   nastaví pozíciu Y pre enemy1  na náhodné číslo medzi 150 a 250,
            -   zníži hodnotu počítadla skóre o 2.

        (_Nápoveda: Môžeš prepoužiť niektoré časti kódu, ktorý už máš napísaný_)

        Otestuj svoj kód. Jedna z lienok by sa mala resetovať, keď sa dostane až ku koláču, a skóre by sa malo znížiť o 2.
      CSD U3 AnimationsMulti defender make it your own: |-
        # Uprav si hru podľa seba

        Práve si prešiel/la plánom na tvorbu hry niekoho iného, takže je čas vytvoriť si hru podľa seba. Aké ďalšie vlastnosti alebo funkcie chceš vytvoriť?

        # Urob toto

        Vyber si jednu z nasledovných možností alebo pridaj do programu niečo vlastné:

        -   Zmeň výzor hry tak, aby postavička hráča i nepriateľov vyzerali inak ako doteraz.
        -   Ukonči hru, keď sa nepriateľské postavičky dostanú ku koláču a zobraz konečné skóre. Ako bonus ukonči hru, až keď sa nepriatelia dostanú ku koláču 3-krát.
        -   Nepriateľské postavičky sa budú pohybovať náhodnou rýchlosťou.
        -   Vytvor nové pozadie, ktoré sa zobrazí len vtedy, keď hráč dosiahne vyššie skóre.
      CSD U3 AnimationsMulti defender make it your own_2018: |-
        # Uprav si hru podľa seba

        Práve si prešiel/la plánom na tvorbu hry niekoho iného, takže je čas vytvoriť si hru podľa seba. Aké ďalšie vlastnosti alebo funkcie chceš vytvoriť?

        # Urob toto

        Vyber si jednu z nasledovných možností alebo pridaj do programu niečo vlastné:

        -   Zmeň výzor hry tak, aby postavička hráča i nepriateľov vyzerali inak ako doteraz.
        -   Ukonči hru, keď sa nepriateľské postavičky dostanú ku koláču a zobraz konečné skóre. Ako bonus ukonči hru, až keď sa nepriatelia dostanú ku koláču 3-krát.
        -   Nepriateľské postavičky sa budú pohybovať náhodnou rýchlosťou.
        -   Vytvor nové pozadie, ktoré sa zobrazí len vtedy, keď hráč dosiahne vyššie skóre.
      CSD U3 AnimationsMulti defender make it your own_2019: |-
        # Uprav si hru podľa seba

        Práve si prešiel/la plánom na tvorbu hry niekoho iného, takže je čas vytvoriť si hru podľa seba. Aké ďalšie vlastnosti alebo funkcie chceš vytvoriť?

        # Urob toto

        Vyber si jednu z nasledovných možností alebo pridaj do programu niečo vlastné:

        -   Zmeň výzor hry tak, aby postavička hráča i nepriateľov vyzerali inak ako doteraz.
        -   Ukonči hru, keď sa nepriateľské postavičky dostanú ku koláču a zobraz konečné skóre. Ako bonus ukonči hru, až keď sa nepriatelia dostanú ku koláču 3-krát.
        -   Nepriateľské postavičky sa budú pohybovať náhodnou rýchlosťou.
        -   Vytvor nové pozadie, ktoré sa zobrazí len vtedy, keď hráč dosiahne vyššie skóre.
      CSD U3 AnimationsMulti defender move player: |-
        # Posun doľava a doprava

        Teraz, keď sa nepriateľské „sprite“ objekty pohybujú správne, je čas napísať kód pre pohyb tvojho hráča. Nateraz potrebuješ pohybovať postavičkou len doľava a doprava a meniť jej animáciu.

        # Urob toto

        V tejto úlohe budeš písať kód dovnútra funkcie `movePlayer`.

        -   Použi blok `if` spolu s `keyDown` pre zistenie, či sa stlačila klávesa „šípka doprava“.
        -   Použi `sprite.x` a kód pre počítanie na zvýšenie pozície x hráča o 3.
        -   Použi ďalší blok `if` pre pohyb hráča doľava, keď je stlačená klávesa „šípka doľava“. Tentokrát musíš pozíciu x hráča znížiť.

        Otestuj svoju hru. Tvoj „sprite“ by sa mal na základe stlačenia šípiek pohybovať doľava a doprava.
      CSD U3 AnimationsMulti defender move player_2018: |-
        # Posun doľava a doprava

        Teraz, keď sa nepriateľské „sprite“ objekty pohybujú správne, je čas napísať kód pre pohyb tvojho hráča. Nateraz potrebuješ pohybovať postavičkou len doľava a doprava a meniť jej animáciu.

        # Urob toto

        V tejto úlohe budeš písať kód dovnútra funkcie `movePlayer`.

        -   Použi blok `if` spolu s `keyDown` pre zistenie, či sa stlačila klávesa „šípka doprava“.
        -   Použi `sprite.x` a kód pre počítanie na zvýšenie pozície x hráča o 3.
        -   Použi ďalší blok `if` pre pohyb hráča doľava, keď je stlačená klávesa „šípka doľava“. Tentokrát musíš pozíciu x hráča znížiť.

        Otestuj svoju hru. Tvoj „sprite“ by sa mal na základe stlačenia šípiek pohybovať doľava a doprava.
      CSD U3 AnimationsMulti defender move player_2019: |-
        # Posun doľava a doprava

        Teraz, keď sa nepriateľské „sprite“ objekty pohybujú správne, je čas napísať kód pre pohyb tvojho hráča. Nateraz potrebuješ pohybovať postavičkou len doľava a doprava a meniť jej animáciu.

        # Urob toto

        V tejto úlohe budeš písať kód dovnútra funkcie `movePlayer`.

        -   Použi blok `if` spolu s `keyDown` pre zistenie, či sa stlačila klávesa „šípka doprava“.
        -   Použi `sprite.x` a kód pre počítanie na zvýšenie pozície x hráča o 3.
        -   Použi ďalší blok `if` pre pohyb hráča doľava, keď je stlačená klávesa „šípka doľava“. Tentokrát musíš pozíciu x hráča znížiť.

        Otestuj svoju hru. Tvoj „sprite“ by sa mal na základe stlačenia šípiek pohybovať doľava a doprava.
      CSD U3 AnimationsMulti defender move up down: |-
        # Moving Up and Down

        You'll want your player sprite to move up and down as well.

        # Do This

        For this level you'll still be writing code inside the `movePlayer` function.

        -   Use an `if` block along with `keyDown` to detect when the "up" arrow is pressed.
        -   Use `sprite.y` to increase the player's y position by 3 using the counter pattern.
        -   Use another `if` block to move the player down when the "down" arrow is pressed.

        Test your code. Your character should now move in all 4 directions.
      CSD U3 AnimationsMulti defender move up down_2018: |-
        # Pohyb hore a dole

        Teraz sa naučíme, ako hráčom hýbať hore a dole.

        # Urob toto

        V tejto úlohe píš kód len do vnútra funkcie `movePlayer`.

        -   Použi blok `if` spolu s `keyDown` pre zistenie, či bola stlačená klávesa „šípka nahor".
        -   Použi `sprite.y` a vzor pre počítanie pre zvýšenie pozície y hráča o 3.
        -   Použi ďalší blok `if` pre pohyb hráča dole, keď je stlačená klávesa šípka "dole“.

        Otestuj svoj kód. Postavička by sa teraz mala pohybovať všetkými 4 smermi.
      CSD U3 AnimationsMulti defender move up down_2019: |-
        # Pohyb hore a dole

        Teraz sa naučíme, ako hráčom hýbať hore a dole.

        # Urob toto

        V tejto úlohe píš kód len do vnútra funkcie `movePlayer`.

        -   Použi blok `if` spolu s `keyDown` pre zistenie, či bola stlačená klávesa „šípka nahor".
        -   Použi `sprite.y` a vzor pre počítanie pre zvýšenie pozície y hráča o 3.
        -   Použi ďalší blok `if` pre pohyb hráča dole, keď je stlačená klávesa šípka "dole“.

        Otestuj svoj kód. Postavička by sa teraz mala pohybovať všetkými 4 smermi.
      CSD U3 AnimationsMulti defender touch water: |-
        # Dotknutie sa vody

        Poslednou časťou hry, pre ktorú musíš napísať kód, je resetovanie „sprite“ objektov, keď sa dotknú vody. Našťastie už máš napísané funkcie, ktoré resetujú každý „sprite“. Už ti chýba len dobrý spôsob na zistenie toho, keď ktorýkoľvek zo  „sprite“ objektov opustí most. Zační písaním kódu pre jedného nepriateľa a potom skopíruj a mierne uprav kód pre druhého nepriateľa.

        # Urob toto

        V tejto úlohe budeš písať kód vo vnútri funkcie `enemiesTouchWater`.

        -   Použi výraz `if` pre kontrolu, či `enemy1` prepadol ponad most - skontroluj, či je jeho pozícia y nižšia ako 140. Vo vnútri tvojho výrazu:
            -   použi svoju funkciu `setEnemy1` pre reset „sprite“ objektu,
            -   pridaj 1 k skóre.
        -   Použi výraz `if` pre kontrolu, či spadol pod most - skontroluj, či je jeho pozícia y väčšia ako 260. Vo vnútri tvojho výrazu:
            -   použi svoju funkciu `setEnemy1` pre reset tohto objektu „sprite“.
            -   pridaj 1 k skóre.
        -   Otestuj svoj program pre „sprite“ objekt prvého nepriateľa.  Uisti sa, že sa „sprite“ objekt resetne a že sa hráčove skóre zvýši.
        -   Keď to bude fungovať, skopíruj napísaný kód a vytvor rovnaké správanie pre `enemy2`. Budeš musieť zmeniť názov „sprite“ objektu a názov využitej funkcie.
      CSD U3 AnimationsMulti defender touch water_2018: |-
        # Dotknutie sa vody

        Poslednou časťou hry, pre ktorú musíš napísať kód, je resetovanie „sprite“ objektov, keď sa dotknú vody. Našťastie už máš napísané funkcie, ktoré resetujú každý „sprite“. Už ti chýba len dobrý spôsob na zistenie toho, keď ktorýkoľvek zo  „sprite“ objektov opustí most. Zační písaním kódu pre jedného nepriateľa a potom skopíruj a mierne uprav kód pre druhého nepriateľa.

        # Urob toto

        V tejto úlohe budeš písať kód vo vnútri funkcie `enemiesTouchWater`.

        -   Použi výraz `if` pre kontrolu, či `enemy1` prepadol ponad most - skontroluj, či je jeho pozícia y nižšia ako 140. Vo vnútri tvojho výrazu:
            -   použi svoju funkciu `setEnemy1` pre reset „sprite“ objektu,
            -   pridaj 1 k skóre.
        -   Použi výraz `if` pre kontrolu, či spadol pod most - skontroluj, či je jeho pozícia y väčšia ako 260. Vo vnútri tvojho výrazu:
            -   použi svoju funkciu `setEnemy1` pre reset tohto objektu „sprite“.
            -   pridaj 1 k skóre.
        -   Otestuj svoj program pre „sprite“ objekt prvého nepriateľa.  Uisti sa, že sa „sprite“ objekt resetne a že sa hráčove skóre zvýši.
        -   Keď to bude fungovať, skopíruj napísaný kód a vytvor rovnaké správanie pre `enemy2`. Budeš musieť zmeniť názov „sprite“ objektu a názov využitej funkcie.
      CSD U3 AnimationsMulti defender touch water_2019: |-
        # Dotknutie sa vody

        Poslednou časťou hry, pre ktorú musíš napísať kód, je resetovanie „sprite“ objektov, keď sa dotknú vody. Našťastie už máš napísané funkcie, ktoré resetujú každý „sprite“. Už ti chýba len dobrý spôsob na zistenie toho, keď ktorýkoľvek zo  „sprite“ objektov opustí most. Zační písaním kódu pre jedného nepriateľa a potom skopíruj a mierne uprav kód pre druhého nepriateľa.

        # Urob toto

        V tejto úlohe budeš písať kód vo vnútri funkcie `enemiesTouchWater`.

        -   Použi výraz `if` pre kontrolu, či `enemy1` prepadol ponad most - skontroluj, či je jeho pozícia y nižšia ako 140. Vo vnútri tvojho výrazu:
            -   použi svoju funkciu `setEnemy1` pre reset „sprite“ objektu,
            -   pridaj 1 k skóre.
        -   Použi výraz `if` pre kontrolu, či spadol pod most - skontroluj, či je jeho pozícia y väčšia ako 260. Vo vnútri tvojho výrazu:
            -   použi svoju funkciu `setEnemy1` pre reset tohto objektu „sprite“.
            -   pridaj 1 k skóre.
        -   Otestuj svoj program pre „sprite“ objekt prvého nepriateľa.  Uisti sa, že sa „sprite“ objekt resetne a že sa hráčove skóre zvýši.
        -   Keď to bude fungovať, skopíruj napísaný kód a vytvor rovnaké správanie pre `enemy2`. Budeš musieť zmeniť názov „sprite“ objektu a názov využitej funkcie.
      CSD U3 AnimationsMulti introducing multiframe: |-
        # Používanie „multiframe“ animácií

        V príklade obrannej hry boli jednotlivé „sprite“ objekty animované. Predtým ako začneš s programovaním tejto hry, venuj chvíľu pozornosť týmto novým spôsobom animácie  „sprite“ objektov.

        # Urob toto

        Tento program už obsahuje niekoľko „sprite“ objektov, ale zatiaľ nemajú vytvorené žiadne animácie.

        -   Prejdi na Kartu animácií a pozri sa na „multiframe“ animácie, ktoré už boli pridané do tvojho projektu. Vyber jednu pre každú z tvojich postáv.
        -   Pamätaj, že animácie, ktoré máš na Karte animácií môžeš svojim "sprite" objektom priradiť pomocou príkazu `setAnimation`.
      CSD U3 AnimationsMulti introducing multiframe_2018: |-
        # Používanie „multiframe“ animácií

        V príklade obrannej hry boli jednotlivé „sprite“ objekty animované. Predtým ako začneš s programovaním tejto hry, venuj chvíľu pozornosť týmto novým spôsobom animácie  „sprite“ objektov.

        # Urob toto

        Tento program už obsahuje niekoľko „sprite“ objektov, ale zatiaľ nemajú vytvorené žiadne animácie.

        -   Prejdi na Kartu animácií a pozri sa na „multiframe“ animácie, ktoré už boli pridané do tvojho projektu. Vyber jednu pre každú z tvojich postáv.
        -   Pamätaj, že animácie, ktoré máš na Karte animácií môžeš svojim "sprite" objektom priradiť pomocou príkazu `setAnimation`.
      CSD U3 AnimationsMulti introducing multiframe_2019: |-
        # Používanie „multiframe“ animácií

        V príklade obrannej hry boli jednotlivé „sprite“ objekty animované. Predtým ako začneš s programovaním tejto hry, venuj chvíľu pozornosť týmto novým spôsobom animácie  „sprite“ objektov.

        # Urob toto

        Tento program už obsahuje niekoľko „sprite“ objektov, ale zatiaľ nemajú vytvorené žiadne animácie.

        -   Prejdi na Kartu animácií a pozri sa na „multiframe“ animácie, ktoré už boli pridané do tvojho projektu. Vyber jednu pre každú z tvojich postáv.
        -   Pamätaj, že animácie, ktoré máš na Karte animácií môžeš svojim "sprite" objektom priradiť pomocou príkazu `setAnimation`.
      CSD U3 AnimationsMulti mirror animation: "# Úprava „multiframe“ animácií\n\nTvoje
        „sprite“ objekty budú vyzerať oveľa realistickejšie, ak sa pri pohybe otočia.
        „Multiframe“ animácie môžeš meniť aj v súvislosti so stlačením rôznych kláves
        na klávesnici.\n\n# Urob toto\n\nPrečítaj si kód a spusti program. Uisti sa,
        že vieš ako „sprite“ objekt odpovie na stlačenie klávesy so šípkami.\n\n-
        \  Na Karte animácií vytvor kópiu  mimozemšťana kliknutím na nasledujúce tlačidlo:
        ![](<https://images.code.org/aee81f9cd3f63bb8a9c91ac3ab250a87-image-1475699896387.38.09
        PM.png>)\n-   Použi nástroj na preklopenie svojej animácie. Nezabudni pomocou
        tohoto tlačidla otočiť obidve snímky:  ![](<https://images.code.org/3b10b4a612f9a7c640dc7bb18f4c2b91-image-1475699599617.33.03
        PM.png>) \n-   Svoju novú animáciu premenuj.\n-   Použi novú aj starú animáciu
        tak, že tvár mimozemšťana bude pri pohybe zobrazená v správnom smere. Čo myslíš,
        kde v kóde budeš potrebovať nastaviť animáciu „sprite“ objektu?"
      CSD U3 AnimationsMulti mirror animation_2018: "# Úprava „multiframe“ animácií\n\nTvoje
        „sprite“ objekty budú vyzerať oveľa realistickejšie, ak sa pri pohybe otočia.
        „Multiframe“ animácie môžeš meniť aj v súvislosti so stlačením rôznych kláves
        na klávesnici.\n\n# Urob toto\n\nPrečítaj si kód a spusti program. Uisti sa,
        že vieš ako „sprite“ objekt odpovie na stlačenie klávesy so šípkami.\n\n-
        \  Na Karte animácií vytvor kópiu  mimozemšťana kliknutím na nasledujúce tlačidlo:
        ![](<https://images.code.org/aee81f9cd3f63bb8a9c91ac3ab250a87-image-1475699896387.38.09
        PM.png>)\n-   Použi nástroj na preklopenie svojej animácie. Nezabudni pomocou
        tohoto tlačidla otočiť obidve snímky:  ![](<https://images.code.org/3b10b4a612f9a7c640dc7bb18f4c2b91-image-1475699599617.33.03
        PM.png>) \n-   Svoju novú animáciu premenuj.\n-   Použi novú aj starú animáciu
        tak, že tvár mimozemšťana bude pri pohybe zobrazená v správnom smere. Čo myslíš,
        kde v kóde budeš potrebovať nastaviť animáciu „sprite“ objektu?"
      CSD U3 AnimationsMulti mirror animation_2019: "# Úprava „multiframe“ animácií\n\nTvoje
        „sprite“ objekty budú vyzerať oveľa realistickejšie, ak sa pri pohybe otočia.
        „Multiframe“ animácie môžeš meniť aj v súvislosti so stlačením rôznych kláves
        na klávesnici.\n\n# Urob toto\n\nPrečítaj si kód a spusti program. Uisti sa,
        že vieš ako „sprite“ objekt odpovie na stlačenie klávesy so šípkami.\n\n-
        \  Na Karte animácií vytvor kópiu  mimozemšťana kliknutím na nasledujúce tlačidlo:
        ![](<https://images.code.org/aee81f9cd3f63bb8a9c91ac3ab250a87-image-1475699896387.38.09
        PM.png>)\n-   Použi nástroj na preklopenie svojej animácie. Nezabudni pomocou
        tohoto tlačidla otočiť obidve snímky:  ![](<https://images.code.org/3b10b4a612f9a7c640dc7bb18f4c2b91-image-1475699599617.33.03
        PM.png>) \n-   Svoju novú animáciu premenuj.\n-   Použi novú aj starú animáciu
        tak, že tvár mimozemšťana bude pri pohybe zobrazená v správnom smere. Čo myslíš,
        kde v kóde budeš potrebovať nastaviť animáciu „sprite“ objektu?"
      CSD U3 AnimationsMulti slow down: "# Spomaľ\n\nDobrá práca! Je načase, aby sme
        sa tieto tieto „multiframe“ animácie naučili ovládať. \n\n# Urob toto\n\nTvoje
        „sprite“ objekty by mali byť animované, ale pohybujú sa prirýchlo.\n\n-   Vráť
        sa späť na kartu Animácií. Pod každou animáciou uvidíš posúvač. ![](<https://images.code.org/169e11c1f6f55b607937fe9cb7e5e390-image-1476209267457.07.26
        AM.png>)\n-   Použi tieto posúvače na spomalenie  animcií tak, aby vyzerali
        realistickejšie."
      CSD U3 AnimationsMulti slow down_2018: "# Spomaľ\n\nDobrá práca! Je načase,
        aby sme sa tieto tieto „multiframe“ animácie naučili ovládať. \n\n# Urob toto\n\nTvoje
        „sprite“ objekty by mali byť animované, ale pohybujú sa prirýchlo.\n\n-   Vráť
        sa späť na kartu Animácií. Pod každou animáciou uvidíš posúvač. ![](<https://images.code.org/169e11c1f6f55b607937fe9cb7e5e390-image-1476209267457.07.26
        AM.png>)\n-   Použi tieto posúvače na spomalenie  animcií tak, aby vyzerali
        realistickejšie."
      CSD U3 AnimationsMulti slow down_2019: "# Spomaľ\n\nDobrá práca! Je načase,
        aby sme sa tieto tieto „multiframe“ animácie naučili ovládať. \n\n# Urob toto\n\nTvoje
        „sprite“ objekty by mali byť animované, ale pohybujú sa prirýchlo.\n\n-   Vráť
        sa späť na kartu Animácií. Pod každou animáciou uvidíš posúvač. ![](<https://images.code.org/169e11c1f6f55b607937fe9cb7e5e390-image-1476209267457.07.26
        AM.png>)\n-   Použi tieto posúvače na spomalenie  animcií tak, aby vyzerali
        realistickejšie."
      CSD U3 Boolean Modify: "# Boolean Expressions\n\nThe simplest Boolean expressions
        are questions that the computer can answer with true or false. These expressions
        are made using **comparison operators**, as shown below.\n\n|                                                Comparison
        Operator                                                | Boolean Expression
        |        Meaning        |\n| :---------------------------------------------------------------------------------------------------------------:
        | :----------------: | :-------------------: |\n| <img src=\"https://images.code.org/1a0798d75d4242715e7608d825f95101-image-1447271431312.png\"
        style=\"width: 100px\"> |       `1 < 9`      |   Is 1 less than 9?   |\n|
        <img src=\"https://images.code.org/5ff460ac121f0ac51b569e96a4404c57-image-1447271431310.png\"
        style=\"width: 100px\"> |       `1 > 9`      | Is 1 greater than 9 ? |\n|
        <img src=\"https://images.code.org/a4daa9efccea2278e165592efe343c1a-image-1447271431308.png\"
        style=\"width: 100px\"> |      `1 == 9`      |    Is 1 equal to 9?   |\n\n<br>\n\n**Note:**
        If you saw the statement 3 \\< 2 in math class, you'd think something was
        terribly wrong, but this is not math class.  In computer science, the comparison
        operators **ask a question** that the computer will answer with `true` or
        `false`. So you can read 3 \\< 2 as **\"Is 3 less than 2?\"** The answer in
        this case is no, or `false`.  \n\nAnother way to say this is that the Boolean
        expression `3 < 2` **evaluates** to `false`.\n\n# Do This\n\nCan you modify
        the values of the sprite properties so that each of the Boolean expressions
        evaluates to `true`?\n\n-   Read through the entire program to see how `sprite1`
        and `sprite2` are being created and which properties are compared.\n-   For
        each of the Boolean expressions, identify the sprite properties being compared.\n-
        \  Change the code _in the first **11** lines only_ so that each of the `console.log()`
        statements print `true`."
      CSD U3 Boolean Modify_2018: |-
        # Logické výrazy

        Najjednoduchšie logické výrazy sú tie, na ktoré sa dá odpovedať pravda `true` alebo nepravda `false`. Tieto výrazy sa vytvárajú použitím **porovnávacích znamienok**, ktoré sú uvedené nižšie.

        |                                               Porovnávacie zmamienko                                              | Logický výraz         | Význam            |
        | :---------------------------------------------------------------------------------------------------------------: | --------------------- | ----------------- |
        |                                                 :----------------:                                                | :-------------------: |                   |
        | <img src="https://images.code.org/1a0798d75d4242715e7608d825f95101-image-1447271431312.png" style="width: 100px"> | `1 < 9`               | Je 1 menej ako 9? |
        |                                                                                                                   | `1 > 9`               | Je 1 viac ako 9?  |
        | <img src="https://images.code.org/a4daa9efccea2278e165592efe343c1a-image-1447271431308.png" style="width: 100px"> | `1 == 9`              | Je 1 rovné 9?     |

        **Poznámka:** Ak uvidíš výrok 3 \< 2 na matematike, môžeš si myslieť, že je niečo nesprávne. Ale toto nie je hodina matematiky. V informatike sa porovnávacie znamienka  **pýtajú otázku**, na ktorú bude počítač odpovedať `true` (pravda) alebo `false` (nepravda). V našom prípade tento výraz čítaj ako otázku: **„Je 3 menšie ako 2?"** Odpoveď znie „nie", teda `false` (nepravda).

        Iná možnosť, ako prečítať tento logický výraz je, že `3 < 2` **sa rovná** `false` (nepravda).

        # Urob toto

        Vieš si upraviť hodnoty „sprite" atribútov tak, aby sa každý logický výraz rovnal `true` (pravda)?

        -   Prejdi si celý program a zisti, ako sú `sprite1` a `sprite2` vytvorené a ktoré ich vlastnosti sú porovnávané.
        -   Pre každý z logických výrazov urči vlastnosti, ktoré sú poronávané.
        -   Zmeň kód len v prvých **11-tich** riadkoch tak, aby každý výraz v `console.log()` vrátil `true`.
      CSD U3 Boolean Modify_2019: "# Boolean Expressions\n\nThe simplest Boolean expressions
        are questions that the computer can answer with true or false. \nAnother way
        to say this is that Boolean expressions **evaluate** to `true` or `false`.\n\n#
        Do This\n\nCan you modify the values of the sprite properties so that each
        of the Boolean expressions evaluates to `true`?\n\n-   Read through the entire
        program to see how `sprite1` and `sprite2` are being created and which properties
        are compared.\n-   For each of the Boolean expressions, identify the sprite
        properties being compared.\n-   Change the code _in the first **11** lines
        only_ so that each of the `console.log()` statements print `true`."
      CSD U3 Complex Movement counter prediction: |-
        # Rýchlosť pohybu a kód pre počítanie

        Použitím kódu pre počítanie pri pozícii X a Y „sprite” objektu docielime jeho plynulý pohyb po obrazovke. V tomto programe \*\*sme pre zmenu kód pre počítanie použili s blokom `sprite.velocityX` \*\*.

        # Porozmýšľaj

        Čo si myslíš, že sa stane, keď sa program spustí? Prečo? Keď odpovieš, spusti program a over si svoju odpoveď.
      CSD U3 Complex Movement counter prediction_2018: |-
        # Rýchlosť pohybu a kód pre počítanie

        Použitím kódu pre počítanie pri pozícii X a Y „sprite” objektu docielime jeho plynulý pohyb po obrazovke. V tomto programe \*\*sme pre zmenu kód pre počítanie použili s blokom `sprite.velocityX` \*\*.

        # Porozmýšľaj

        Čo si myslíš, že sa stane, keď sa program spustí? Prečo? Keď odpovieš, spusti program a over si svoju odpoveď.
      CSD U3 Complex Movement counter prediction_2019: |-
        # Rýchlosť pohybu a kód pre počítanie

        Použitím kódu pre počítanie pri pozícii X a Y „sprite” objektu docielime jeho plynulý pohyb po obrazovke. V tomto programe \*\*sme pre zmenu kód pre počítanie použili s blokom `sprite.velocityX` \*\*.

        # Porozmýšľaj

        Čo si myslíš, že sa stane, keď sa program spustí? Prečo? Keď odpovieš, spusti program a over si svoju odpoveď.
      CSD U3 Compound Nested Challenge: |-
        # Challenge: Checking for Multiple Conditions

        _Check with your teacher before taking on this challenge._

        So far we've looked at a lot of ways to check if a single condition is true, but often a program needs to check the state of many conditions simultaneously before making a decision. For this challenge, let's assume the following scenario:

        -   The sprite should move up, down, left, and right if the corresponding arrow key is pressed.
        -   The sprite should _not_ go all the way off the screen in any direction.

        # Do This Together

        Before you tackle writing this program, you'll need to figure out how to check multiple conditions at once.

        -   **Brainstorm** with your neighbors ways you might check for more than one condition.
        -   **Share** back with the whole class so you can see other potential approaches.
        -   **Explore** the toolbox for blocks that might help (pay extra attention to the Math and Control drawers).
        -   **Program** your proposed solution.
        -   **Test** your program to make sure it's actually checking all of the conditions you intended.
      CSD U3 Compound Nested Challenge_2018: |-
        # Výzva: Kontrola viacerých podmienok

        _Dohodni sa s učiteľom, či máš pracovať na tejto výzve._

        Doteraz sme sa pozerali na to, či je splnená jedna konkrétna podmienka, ale programy často potrebujú skontrolovať paralelne viaceré podmienky predtým, ako urobia rozhodnutie. Pre účely našek výzvy si predstavme nasledovný scenár:

        -   Postava by sa mala hýbať nahor, nadol, doľava a doprava, ak je na klávesnici stlačené príslušné tlačidlo so šípkou.
        -   Postava by _nemala_ odísť z obrazovky pri pohybe do žiadneho smeru.

        # Urobme toto spolu

        Skôr ako začneš písať program, porozmýšľaj nad tým, ako skontrolovať naraz viacero podmienok.

        -   **Porozmýšľaj** so spolusediacim nad možnosťami, ako by sa dalo naraz skontrolovať viacero podmienok.
        -   **Zdieľaj** nápady s ostatnými spolužiakmi, aby si spoznal/a ďalšie možnosti.
        -   **Preskúmaj** záložku s nástrojmi a nájdi bloky, ktoré by ti mohli pomôcť (venuj extra pozornosť skupine blokov Matematika a Kontrola).
        -   **Naprogramuj** svoje riešenie.
        -   **Otestuj** svoj program, aby si overil/a, že naozaj kontroluje všetky podmienky, ktoré si chcel/a.
      CSD U3 Compound Nested Challenge_2019: |-
        # Výzva: Kontrola viacerých podmienok

        _Dohodni sa s učiteľom, či máš pracovať na tejto výzve._

        Doteraz sme sa pozerali na to, či je splnená jedna konkrétna podmienka, ale programy často potrebujú skontrolovať paralelne viaceré podmienky predtým, ako urobia rozhodnutie. Pre účely našek výzvy si predstavme nasledovný scenár:

        -   Postava by sa mala hýbať nahor, nadol, doľava a doprava, ak je na klávesnici stlačené príslušné tlačidlo so šípkou.
        -   Postava by _nemala_ odísť z obrazovky pri pohybe do žiadneho smeru.

        # Urobme toto spolu

        Skôr ako začneš písať program, porozmýšľaj nad tým, ako skontrolovať naraz viacero podmienok.

        -   **Porozmýšľaj** so spolusediacim nad možnosťami, ako by sa dalo naraz skontrolovať viacero podmienok.
        -   **Zdieľaj** nápady s ostatnými spolužiakmi, aby si spoznal/a ďalšie možnosti.
        -   **Preskúmaj** záložku s nástrojmi a nájdi bloky, ktoré by ti mohli pomôcť (venuj extra pozornosť skupine blokov Matematika a Kontrola).
        -   **Naprogramuj** svoje riešenie.
        -   **Otestuj** svoj program, aby si overil/a, že naozaj kontroluje všetky podmienky, ktoré si chcel/a.
      CSD U3 Conditionals Apple: |-
        # More Practice With Booleans

        Let's use one more Boolean expression to check the condition of a sprite.

        # Do This

        There is a growing apple sprite created for you. It starts as green and should turn red when it gets to a scale of 2. We won't worry about making it red yet, let's just use a `console.log` command to check whether it's scale is 2 yet.

        -   Add a `console.log` statement.
        -   Add a Boolean expression inside the `console.log` that checks whether the `apple.scale` is greater than 2.
      CSD U3 Conditionals Apple 2: |-
        # Turning Red

        Now that we know how to use _if_ statements, you can do more than just check if the apple has reached a scale of 2, you turn it red once it happens.

        # Do This

        Use a conditional in the draw loop to check whether `apple.scale` is greater than 2 - if it is, set the apples new animation to "apple\_red".

        _Challenge: Can you also make the apple stop growing once it turns red?_
      CSD U3 Conditionals Apple 2_2018: |-
        # Meniace sa ovocie

        Teraz keď poznáme podmienkové výroky, môžeš urobiť viac, ako len overiť, či jablko dosiahlo veľkosť 2. Keď sa tak stane, zmeň jeho animáciu na hrušku.

        # Urob toto

        Použi podmienku v cykle kreslenia, ktorá overí, že `fruit.scale` je väčšie ako 2. Ak je to tak, zmeň animáciu ovocia na "hruška".

        **Výzva**: Vieš program nastaviť tak, aby ovocie prestalo rásť, keď sa z neho stane hruška?
      CSD U3 Conditionals Apple 2_2018_2019: |-
        # Meniace sa ovocie

        Teraz keď poznáme podmienkové výroky, môžeš urobiť viac, ako len overiť, či jablko dosiahlo veľkosť 2. Keď sa tak stane, zmeň jeho animáciu na hrušku.

        # Urob toto

        Použi podmienku v cykle kreslenia, ktorá overí, že `fruit.scale` je väčšie ako 2. Ak je to tak, zmeň animáciu ovocia na "hruška".

        **Výzva**: Vieš program nastaviť tak, aby ovocie prestalo rásť, keď sa z neho stane hruška?
      CSD U3 Conditionals Apple_2018: |-
        # Ďalšie precvičenie logických výrazov

        Poďme použiť ešte jeden logický výraz na kontrolu podmienok „sprite" objektu. Môžeš použiť `console.log` príkaz na overenie, či jeho veľkosť už dosiahla hodnotu 2.

        # Urob toto

        -   Pridaj `console.log` výrok
        -   Do `console.log` pridaj logický výraz, ktorý overí, či `fruit.scale` je väčšie ako 2.
      CSD U3 Conditionals Apple_2018_2019: |-
        # Ďalšie precvičenie logických výrazov

        Poďme použiť ešte jeden logický výraz na kontrolu podmienok „sprite" objektu. Môžeš použiť `console.log` príkaz na overenie, či jeho veľkosť už dosiahla hodnotu 2.

        # Urob toto

        -   Pridaj `console.log` výrok
        -   Do `console.log` pridaj logický výraz, ktorý overí, či `fruit.scale` je väčšie ako 2.
      CSD U3 Counters explaining counters contained 2: "# The Counter Pattern\n\nThis
        pattern is one of the most important ones in all of programming. \n\n![](<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56
        PM.png>)\n\nIt is used to increase the value of a variable by 1. You might
        call it the **counter pattern** since it can be used to make a variable that
        counts up. You'll use this pattern a lot, especially with the draw loop. Let's
        see what that looks like.\n\n# Do This\n\nThis program creates a variable
        `counter` and then uses the **counter pattern** to make it count up. When
        you run the program what do you think you'll see on the screen?\n\n-   **Read
        the program** and make a prediction of what the output will be.\n-   **Run
        the program** to check your prediction.\n-   **Discuss with a neighbor**.
        Can you explain what you observed?"
      CSD U3 Counters explaining counters contained 2_2018: "# The Counter Pattern\n\nThis
        pattern is one of the most important ones in all of programming. \n\n![](<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56
        PM.png>)\n\nIt is used to increase the value of a variable by 1. You might
        call it the **counter pattern** since it can be used to make a variable that
        counts up. You'll use this pattern a lot, especially with the draw loop. Let's
        see what that looks like.\n\n# Do This\n\nThis program creates a variable
        `counter` and then uses the **counter pattern** to make it count up. When
        you run the program what do you think you'll see on the screen?\n\n-   **Read
        the program** and make a prediction of what the output will be.\n-   **Run
        the program** to check your prediction.\n-   **Discuss with a neighbor**.
        Can you explain what you observed?"
      CSD U3 Counters explaining counters contained 2_2019: "# The Counter Pattern\n\nThis
        pattern is one of the most important ones in all of programming. \n\n![](<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56
        PM.png>)\n\nIt is used to increase the value of a variable by 1. You might
        call it the **counter pattern** since it can be used to make a variable that
        counts up. You'll use this pattern a lot, especially with the draw loop. Let's
        see what that looks like.\n\n# Do This\n\nThis program creates a variable
        `counter` and then uses the **counter pattern** to make it count up. When
        you run the program what do you think you'll see on the screen?\n\n-   **Read
        the program** and make a prediction of what the output will be.\n-   **Run
        the program** to check your prediction.\n-   **Discuss with a neighbor**.
        Can you explain what you observed?"
      CSD U3 Diagonal Movement: |-
        <img src="https://images.code.org/f92774863b17074adc85b8f6bbd017f2-image-1492726926884.gif" style="float: right; margin-left: 20px;">

        # Diagonal Movement

        Updating only the `x` or `y` properties of a sprite can only make it move straight up and down or left and right. If you want a sprite to move on a diagonal path you'll need to update _both_ of those properties.

        This program currently makes the mouse move straight down the screen - can you update it so that it moves diagonally across the screen like the image to the right?

        _Challenge: Can you make the mouse point in the same direction as the image?_
      CSD U3 Diagonal Movement_2018: |-
        <img src="https://images.code.org/f92774863b17074adc85b8f6bbd017f2-image-1492726926884.gif" style="float: right; margin-left: 20px;">

        # Pohyb po diagonále

        Zmena `x` a `y` atribútov postavy vie docieliť jej posun rovno hore a dole alebo vpravo a vľavo. Ak chceš, aby sa posúvala po diagonále, je potrebné zmeniť obe tieto hodnoty.

        Náš program momentálne pohybuje myškou rovno nadol. Vieš ho zmeniť tak, aby sa hýbala diagonálne po obrazovke tak, ako na obrázku vpravo?

        _Výzva: Vieš nastaviť myšku tak, aby sa otočila rovnakým smerom ako na obrázku?_
      CSD U3 Diagonal Movement_2019: |-
        <img src="https://images.code.org/f92774863b17074adc85b8f6bbd017f2-image-1492726926884.gif" style="float: right; margin-left: 20px;">

        # Pohyb po diagonále

        Zmena `x` a `y` atribútov postavy vie docieliť jej posun rovno hore a dole alebo vpravo a vľavo. Ak chceš, aby sa posúvala po diagonále, je potrebné zmeniť obe tieto hodnoty.

        Náš program momentálne pohybuje myškou rovno nadol. Vieš ho zmeniť tak, aby sa hýbala diagonálne po obrazovke tak, ako na obrázku vpravo?

        _Výzva: Vieš nastaviť myšku tak, aby sa otočila rovnakým smerom ako na obrázku?_
      CSD U3 Direction Animations: "# Zmena obrázkov počas pohybu\n\nZatiaľ si používal/a
        podmieňovacie výrazy len jednu činnosť: na zmenu súradnice x alebo y tvojho
        „sprite“ objektu. V skutočnosti môžeš do podmieňovacieho výrazu vložiť toľko
        kódu, koľko len chceš. Bežnou vecou v hrách je zmena obrázku postavičky podľa
        smeru, ktorým sa hýbe.\n\n# Urob toto\n\nPoužitím poskytnutého kódu a obrázkov:\n•\tZdvoj
        vybraný obrázok chrobáčika štyrikrát.\n•\tUprav každý z obrázkov tak, aby
        smeroval jedným zo štyroch smerov.\n•\tNapíš kód, ktorý bude používať sprite.setAnimation()
        na zmenu obrázku chrobáčika po stlačení rozličných šípok na klávesnici.\n\n-
        \  Vyber si obrázok chrobáčika a zduplikuj ho štyrikrát.\n-   Uprav obrázky
        tak, aby každý smeroval iným zo 4 možných smerov.\n-   Napíš kód, ktorý použije
        `sprite.setAnimation()` na zmenu obrázku chrobáčika po stlačení jednotlivých
        šípok na klávesnici."
      CSD U3 Direction Animations_2018: "# Zmena obrázkov počas pohybu\n\nZatiaľ si
        používal/a podmieňovacie výrazy len jednu činnosť: na zmenu súradnice x alebo
        y tvojho „sprite“ objektu. V skutočnosti môžeš do podmieňovacieho výrazu vložiť
        toľko kódu, koľko len chceš. Bežnou vecou v hrách je zmena obrázku postavičky
        podľa smeru, ktorým sa hýbe.\n\n# Urob toto\n\nPoužitím poskytnutého kódu
        a obrázkov:\n•\tZdvoj vybraný obrázok chrobáčika štyrikrát.\n•\tUprav každý
        z obrázkov tak, aby smeroval jedným zo štyroch smerov.\n•\tNapíš kód, ktorý
        bude používať sprite.setAnimation() na zmenu obrázku chrobáčika po stlačení
        rozličných šípok na klávesnici.\n\n-   Vyber si obrázok chrobáčika a zduplikuj
        ho štyrikrát.\n-   Uprav obrázky tak, aby každý smeroval iným zo 4 možných
        smerov.\n-   Napíš kód, ktorý použije `sprite.setAnimation()` na zmenu obrázku
        chrobáčika po stlačení jednotlivých šípok na klávesnici."
      CSD U3 Direction Animations_2018_2019: "# Zmena obrázkov počas pohybu\n\nZatiaľ
        si používal/a podmieňovacie výrazy len jednu činnosť: na zmenu súradnice x
        alebo y tvojho „sprite“ objektu. V skutočnosti môžeš do podmieňovacieho výrazu
        vložiť toľko kódu, koľko len chceš. Bežnou vecou v hrách je zmena obrázku
        postavičky podľa smeru, ktorým sa hýbe.\n\n# Urob toto\n\nPoužitím poskytnutého
        kódu a obrázkov:\n•\tZdvoj vybraný obrázok chrobáčika štyrikrát.\n•\tUprav
        každý z obrázkov tak, aby smeroval jedným zo štyroch smerov.\n•\tNapíš kód,
        ktorý bude používať sprite.setAnimation() na zmenu obrázku chrobáčika po stlačení
        rozličných šípok na klávesnici.\n\n-   Vyber si obrázok chrobáčika a zduplikuj
        ho štyrikrát.\n-   Uprav obrázky tak, aby každý smeroval iným zo 4 možných
        smerov.\n-   Napíš kód, ktorý použije `sprite.setAnimation()` na zmenu obrázku
        chrobáčika po stlačení jednotlivých šípok na klávesnici."
      CSD U3 Direction Arrows: |-
        # Move in All Directions

        Once you've got your sprite moving in one direction by responding to a `keyDown`, getting it to move in all four directions should be more of the same. The basic keyboard control that you're developing here will become the basis for many of the games you make down the road.

        # Do This

        The bug sprite you made that responds to the up arrow has been brought to this level. Add the interaction for the other three arrow keys!

        -   Add three if statements - one for each arrow.
        -   Each if statement should move the sprite in the direction of the arrow.

        _HINT: Make sure you consider both the axis (x or y) of movement, **and** whether you need to increase or decrease that value._
      CSD U3 Direction Arrows_2018: "# Posun do všetkých smerov\n\nKeďže už vieš posunúť
        \"sprite\" pomocou príkazu `keyDown` jedným smerom, posun do všetkých smerov
        by mal byť pre teba viac-menej podobný. Ovládanie klávesnicou, ktoré sa naučíš
        na tomto mieste, sa stane základom pre mnoho hier, ktoré následne naprogramuješ.\n\n#
        Urob toto\n\n\"Sprite\" s chrobáčikom, ktorý reaguje na stlačenie šípky doprava,
        sa dostal aj do tohto levelu. Pridaj mu interakcie aj pre ostatné klávesy!\n\n-
        \  Pridaj tri \"if\" výrazy – jeden pre každú šípku. \n-   Nezabudni pridať
        komentár pre každý výraz!\n-   Každý z výrazov by mal posunúť chrobáčika v
        smere šípky.\n\n_NÁPOVEDA: Nezabudni zhodnotiť pohyb po oboch osiach (x aj
        y) **a tiež to**, či musíš zvýšiť alebo znížiť ich hodnotu._"
      CSD U3 Direction Arrows_2018_2019: "# Posun do všetkých smerov\n\nKeďže už vieš
        posunúť \"sprite\" pomocou príkazu `keyDown` jedným smerom, posun do všetkých
        smerov by mal byť pre teba viac-menej podobný. Ovládanie klávesnicou, ktoré
        sa naučíš na tomto mieste, sa stane základom pre mnoho hier, ktoré následne
        naprogramuješ.\n\n# Urob toto\n\n\"Sprite\" s chrobáčikom, ktorý reaguje na
        stlačenie šípky doprava, sa dostal aj do tohto levelu. Pridaj mu interakcie
        aj pre ostatné klávesy!\n\n-   Pridaj tri \"if\" výrazy – jeden pre každú
        šípku. \n-   Nezabudni pridať komentár pre každý výraz!\n-   Každý z výrazov
        by mal posunúť chrobáčika v smere šípky.\n\n_NÁPOVEDA: Nezabudni zhodnotiť
        pohyb po oboch osiach (x aj y) **a tiež to**, či musíš zvýšiť alebo znížiť
        ich hodnotu._"
      CSD U3 Draw Loop Plugged orange and green: |-
        <img src="https://images.code.org/2b5b2ce029e2f1d7377db7dcd7760cf0-image-1492031771047.15.45 PM.png" style="float:right;width:150px">

        # Using the Draw Loop

        Now it's your turn to do some work with the draw loop. Remember that the code inside the draw loop is run by Game Lab over and over again.

        # Do This

        -   Add code to this program so that your drawing has orange circles being drawn, too.
        -   Move on when your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged orange and green_2018: |-
        <img src="https://images.code.org/2b5b2ce029e2f1d7377db7dcd7760cf0-image-1492031771047.15.45 PM.png" style="float:right;width:150px">

        # Using the Draw Loop

        Now it's your turn to do some work with the draw loop. Remember that the code inside the draw loop is run by Game Lab over and over again.

        # Do This

        -   Add code to this program so that your drawing has orange circles being drawn, too.
        -   Move on when your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged orange and green_2019: |-
        <img src="https://images.code.org/2b5b2ce029e2f1d7377db7dcd7760cf0-image-1492031771047.15.45 PM.png" style="float:right;width:150px">

        # Using the Draw Loop

        Now it's your turn to do some work with the draw loop. Remember that the code inside the draw loop is run by Game Lab over and over again.

        # Do This

        -   Add code to this program so that your drawing has orange circles being drawn, too.
        -   Move on when your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged predict 1: |-
        # Draw Loop

        Here's an example of the draw loop at work.

        # Do this

        -   Run the code and see how it works.
        -   Discuss with your partner whether this looks like the flip book you saw in the video.  Why or why not?
      CSD U3 Draw Loop Plugged predict 1_2018: |-
        # Draw Loop

        Here's an example of the draw loop at work.

        # Do this

        -   Run the code and see how it works.
        -   Discuss with your partner whether this looks like the flip book you saw in the video.  Why or why not?
      CSD U3 Draw Loop Plugged predict 1_2019: |-
        # Draw Loop

        Here's an example of the draw loop at work.

        # Do this

        -   Run the code and see how it works.
        -   Discuss with your partner whether this looks like the flip book you saw in the video.  Why or why not?
      CSD U3 Draw Loop Plugged predict 2 embed: |-
        # Predict

        This program has one small difference that will make it run a little differently. Again though, remember:

        -   All your code outside the draw loop is run first, one time
        -   All your code inside the draw loop is run over and over forever

        What will this program do? Write your prediction below.
      CSD U3 Draw Loop Plugged predict 2 embed_2018: |-
        # Predict

        This program has one small difference that will make it run a little differently. Again though, remember:

        -   All your code outside the draw loop is run first, one time
        -   All your code inside the draw loop is run over and over forever

        What will this program do? Write your prediction below.
      CSD U3 Draw Loop Plugged predict 2 embed_2019: |-
        # Predict

        This program has one small difference that will make it run a little differently. Again though, remember:

        -   All your code outside the draw loop is run first, one time
        -   All your code inside the draw loop is run over and over forever

        What will this program do? Write your prediction below.
      CSD U3 Draw Loop Plugged update your scene: |-
        # Extend Your Scene

        This is the sprite scene you made in the last lesson. You'll now be updating it a little bit to use the draw loop and sprite properties.

        <img src="https://images.code.org/ce257c4d91da460c9c2add1733873769-image-1492209174198.32.29 PM.png" style="float:right;height:100px">

        # Do This

        -   Add a draw loop to your program (you should only have one).
        -   Use the lasso selector (click, hold and drag) to select all your code and place it inside your draw loop. Ctrl-Z will let you undo any mistakes you make.
        -   Add code to your program that updates your sprites' `sprite.x`, `sprite.y`, or `sprite.rotation` properties so that they move. You'll need to update them with `randomNumber()`.
      CSD U3 Draw Loop Plugged update your scene_2018: |-
        # Extend Your Scene

        This is the sprite scene you made in the last lesson. You'll now be updating it a little bit to use the draw loop and sprite properties.

        <img src="https://images.code.org/ce257c4d91da460c9c2add1733873769-image-1492209174198.32.29 PM.png" style="float:right;height:100px">

        # Do This

        -   Add a draw loop to your program (you should only have one).
        -   Use the lasso selector (click, hold and drag) to select all your code and place it inside your draw loop. Ctrl-Z will let you undo any mistakes you make.
        -   Add code to your program that updates your sprites' `sprite.x`, `sprite.y`, or `sprite.rotation` properties so that they move. You'll need to update them with `randomNumber()`.
      CSD U3 Draw Loop Plugged update your scene_2019: |-
        # Extend Your Scene

        This is the sprite scene you made in the last lesson. You'll now be updating it a little bit to use the draw loop and sprite properties.

        <img src="https://images.code.org/ce257c4d91da460c9c2add1733873769-image-1492209174198.32.29 PM.png" style="float:right;height:100px">

        # Do This

        -   Add a draw loop to your program (you should only have one).
        -   Use the lasso selector (click, hold and drag) to select the code that will be updated each time and place it inside your draw loop. Ctrl-Z will let you undo any mistakes you make.
        -   Add code to your program that updates your sprites' `sprite.x`, `sprite.y`, or `sprite.rotation` properties so that they move. You'll need to update them with `randomNumber()`.
      CSD U3 Draw Loop Plugged wiggle sprite rotation: |-
        <img src="https://images.code.org/03f98fedbe59ceb5ef0a8530cb81c367-image-1492040405357.gif" style="float:right;height:150px">

        # Updating Properties

        This level combines some of the skills you've already seen. It's drawing ellipses in the background and also updating sprite properties. This time it's changing the sprite's `sprite.rotation` property.

        # Do This

        This animation already is updating one sprite's rotation property to make it look like it's shaking

        -   Run the program to see how it works.
        -   Add code to this program to make the other alien shake just like the first.
        -   Move on when your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged wiggle sprite rotation_2018: |-
        <img src="https://images.code.org/03f98fedbe59ceb5ef0a8530cb81c367-image-1492040405357.gif" style="float:right;height:150px">

        # Updating Properties

        This level combines some of the skills you've already seen. It's drawing ellipses in the background and also updating sprite properties. This time it's changing the sprite's `sprite.rotation` property.

        # Do This

        This animation already is updating one sprite's rotation property to make it look like it's shaking

        -   Run the program to see how it works.
        -   Add code to this program to make the other alien shake just like the first.
        -   Move on when your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged wiggle sprite rotation_2019: |-
        <img src="https://images.code.org/03f98fedbe59ceb5ef0a8530cb81c367-image-1492040405357.gif" style="float:right;height:150px">

        # Updating Properties

        This level combines some of the skills you've already seen. It's drawing ellipses in the background and also updating sprite properties. This time it's changing the sprite's `sprite.rotation` property.

        # Do This

        This animation already is updating one sprite's rotation property to make it look like it's shaking

        -   Run the program to see how it works.
        -   Add code to this program to make the other alien shake just like the first.
        -   Move on when your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged wiggle sprite x: |-
        <img src="https://images.code.org/71ae26edcc3286ff4d7697aaffecf144-image-1492036602240.gif" style="float:right;height:150px">

        # Updating Properties

        Sprites have properties that let the computer know where and how to draw them. Two common properties to use are `sprite.x` and `sprite.y` which control the location of the sprite. Assigning these properties a new value will move your sprite to a new location on the screen.

        # Do This

        This animation already is updating one sprite's x property to make it look like it's shaking

        -   Run the program to see how it works.
        -   Edit the code in this program to make the second sprite shake like the first one.
        -   Move on when your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged wiggle sprite x_2018: |-
        <img src="https://images.code.org/71ae26edcc3286ff4d7697aaffecf144-image-1492036602240.gif" style="float:right;height:150px">

        # Updating Properties

        Sprites have properties that let the computer know where and how to draw them. Two common properties to use are `sprite.x` and `sprite.y` which control the location of the sprite. Assigning these properties a new value will move your sprite to a new location on the screen.

        # Do This

        This animation already is updating one sprite's x property to make it look like it's shaking

        -   Run the program to see how it works.
        -   Edit the code in this program to make the second sprite shake like the first one.
        -   Move on when your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged wiggle sprite x_2019: |-
        <img src="https://images.code.org/71ae26edcc3286ff4d7697aaffecf144-image-1492036602240.gif" style="float:right;height:150px">

        # Updating Properties

        Sprites have properties that let the computer know where and how to draw them. Two common properties to use are `sprite.x` and `sprite.y` which control the location of the sprite. Assigning these properties a new value will move your sprite to a new location on the screen.

        # Do This

        This animation already is updating one sprite's x property to make it look like it's shaking

        -   Run the program to see how it works.
        -   Edit the code in this program to make the second sprite shake like the first one.
        -   Move on when your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged wiggle sprite y: |-
        <img src="https://images.code.org/1e22fb89bcdf99168aee6324d17137ee-image-1493138232702.gif" style="float:right;height:150px">

        # Updating Properties

        This level is very similar to the last, but this time, you'll add in the draw loop yourself.

        # Do This

        -   Add the draw loop block to the bottom of this program.
        -   Move any blocks that need to be inside the draw loop.
        -   Move on when your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged wiggle sprite y_2018: |-
        <img src="https://images.code.org/1e22fb89bcdf99168aee6324d17137ee-image-1493138232702.gif" style="float:right;height:150px">

        # Updating Properties

        This level is very similar to the last, but this time, you'll add in the draw loop yourself.

        # Do This

        -   Add the draw loop block to the bottom of this program.
        -   Move any blocks that need to be inside the draw loop.
        -   Move on when your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged wiggle sprite y_2019: |-
        <img src="https://images.code.org/1e22fb89bcdf99168aee6324d17137ee-image-1493138232702.gif" style="float:right;height:150px">

        # Updating Properties

        This level is very similar to the last, but this time, you'll add in the draw loop yourself.

        # Do This

        -   Add the draw loop block to the bottom of this program.
        -   Move any blocks that need to be inside the draw loop.
        -   Move on when your program looks like the picture to the right.
      CSD U3 Drawing Squares to Corners: |-
        <img src="https://images.code.org/9e09a96901b1e5ad9d5869b2b1fd3897-image-1498671940133.45.12 AM.png" style="float:right;width:150px">

        # Place Squares in Corners

        A big part of using Game Lab is understanding position. Remember you can always turn on the grid or hover with the mouse to help find the x and y position you want.

        # Do This

        -   Place two rectangles exactly in the corners of the screen, just like the picture.
      CSD U3 Drawing Squares to Corners_2018: "# Umiestni štvorce do rohov\n\nDôležitým
        pre používanie Game Lab je pochopiť umiestňovanie tvarov. Nezabudni, že kedykoľvek
        môžeš zapnúť zobrazenie mriežky alebo zistiť x a y súradnice pomocou kurzoru
        tvojej myši.\n\n# Urob toto\n\n•\tUmiestni dva obdĺžniky presne do rohov mriežky
        tak, ako je na obrázku vpravo.<img src=\"https://images.code.org/716209ce879925f89bf661f337946509-image-1529019186051.32.48
        PM.png\" style=\"float:right;width:150px\">."
      CSD U3 Drawing Squares to Corners_2019: "# Umiestni štvorce do rohov\n\nDôležitým
        pre používanie Game Lab je pochopiť umiestňovanie tvarov. Nezabudni, že kedykoľvek
        môžeš zapnúť zobrazenie mriežky alebo zistiť x a y súradnice pomocou kurzoru
        tvojej myši.\n\n# Urob toto\n\n•\tUmiestni dva obdĺžniky presne do rohov mriežky
        tak, ako je na obrázku vpravo.<img src=\"https://images.code.org/716209ce879925f89bf661f337946509-image-1529019186051.32.48
        PM.png\" style=\"float:right;width:150px\">."
      CSD U3 Else: |-
        # Čo ak moja podmienka nie je splnená?

        <img src="https://images.code.org/1a997d78fcd88efeb9e6dc5a02aa88e8-image-1464706463138.53.58.png" width="125px" style="float:right">

        Niekedy chceme nášmu programu povedať, čo má robiť, ak je podmienka `pravda`, ale aj čo má urobiť, ak je `nepravda`. Keď stlačíš tlačidlo plus v spodnej časti podmieňovacieho bloku, pridá sa ďalšia sekciu nazvaná `inak`. Táto sekcia `inak` je záložný plán - používa sa v podmienke `ak` ešte skôr, ako dostaneme v podmienke `nepravda`.

        # Urob toto

        Ozubené kolesá sú späť! Naposledy sme sa s nimi hrali tak, že sa začali točiť až po stlačení medzerníka. Tentoraz však chceme, aby sa po stlačení medzerníka točili jedným smerom, a keď medzerník stlačený nebude, nech sa točia opačne.
        <img src="https://images.code.org/b074d47ca8dfa5ab3bfd08344b4f4e42-image-1464706389475.gif" style="float:right">

        -   Klikni na tlačidlo  _plus_  v spodnej časti bloku ak,  pre pridanie časti tak.
        -   Pridaj príkaz pre otáčanie kolies opačným smerom v prípade, ak je stlačený medzerník.
      CSD U3 Else_2018: |-
        # Čo ak moja podmienka nie je splnená?

        <img src="https://images.code.org/1a997d78fcd88efeb9e6dc5a02aa88e8-image-1464706463138.53.58.png" width="125px" style="float:right">

        Niekedy chceme nášmu programu povedať, čo má robiť, ak je podmienka `pravda`, ale aj čo má urobiť, ak je `nepravda`. Keď stlačíš tlačidlo plus v spodnej časti podmieňovacieho bloku, pridá sa ďalšia sekcia nazvaná `inak`. Táto sekcia `inak` sa používa v podmienke `ak` ešte skôr, ako dostaneme v podmienke `nepravda`.

        # Urob toto

        Ozubené kolesá sú späť! Naposledy sme sa s nimi hrali tak, že sa začali točiť až po stlačení medzerníka. Tentoraz však chceme, aby sa po stlačení medzerníka točili jedným smerom, a keď medzerník stlačený nebude, nech sa točia opačne.
        <img src="https://images.code.org/b074d47ca8dfa5ab3bfd08344b4f4e42-image-1464706389475.gif" style="float:right">

        -   Klikni na tlačidlo „plus“  v spodnej časti bloku „if“ - pre pridanie časti „else“.
        -   Pridaj príkaz pre otáčanie kolies opačným smerom v prípade, ak je stlačený medzerník.
      CSD U3 Else_2019: |-
        # Otoč chod kolies

        Ozubené kolesá sú späť! Naposledy sme ich naprogramovali tak, aby sa začali točiť po stlačení medzerníka. Tentoraz však chceme, aby sa po stlačení medzerníka točili jedným smerom a keď medzerník stlačený nebude, nech sa točia opačne.

        # Urob toto

        -   Naprogramuj kolesá tak, aby sa točili opačným smerom, než sa točia pri stlačení medzerníka.
      CSD U3 Entertainment Sample 1: "# Skákajúci mimozemšťan\n\nStlačte tlačidlo
        „Spustiť“ a zahrajte si hru vľavo. Môžete urobiť skok stlačením medzerníka
        na klávesnici a pomocou klávesov so šípkami sa posúvať doľava a doprava. Svoje
        skóre zvyšujete zbieraním hviezd, a ak dosiahnete dostatočne vysoké skóre,
        zmení sa pozadie. "
      CSD U3 Entertainment Sample 1_2018: "# Skákajúci mimozemšťan\n\nStlačte tlačidlo
        „Spustiť“ a zahrajte si hru vľavo. Môžete urobiť skok stlačením medzerníka
        na klávesnici a pomocou klávesov so šípkami sa posúvať doľava a doprava. Svoje
        skóre zvyšujete zbieraním hviezd, a ak dosiahnete dostatočne vysoké skóre,
        zmení sa pozadie. "
      CSD U3 Entertainment Sample 1_2019: "# Skákajúci mimozemšťan\n\nStlačte tlačidlo
        „Spustiť“ a zahrajte si hru vľavo. Môžete urobiť skok stlačením medzerníka
        na klávesnici a pomocou klávesov so šípkami sa posúvať doľava a doprava. Svoje
        skóre zvyšujete zbieraním hviezd, a ak dosiahnete dostatočne vysoké skóre,
        zmení sa pozadie. "
      CSD U3 Entertainment Sample 2: "# Hladný zajačik\n\nZajačik je hladný, a preto
        si hľadá huby a mrkvu na večeru. \n\nAk chcete vyhrať, musíte nájsť misku
        a pozbierať aspoň 10 mrkiev a 5 húb.\n\nZachráňte sa pred chrobákmi! Lienky
        a slimáky budú jesť vaše jedlo a včely vás budú štípať, aby ste jedlo pustili.
        \n\nNa skákanie použite medzerník. Lienky a slimáky môžete rozpučiť tým, že
        na ne skočíte. \n\nKliknite na tlačidlo „Spustiť“, aby ste spustili program."
      CSD U3 Entertainment Sample 2_2018: "# Hladný zajačik\n\nZajačik je hladný,
        a preto si hľadá huby a mrkvu na večeru. \n\nAk chcete vyhrať, musíte nájsť
        misku a pozbierať aspoň 10 mrkiev a 5 húb.\n\nZachráňte sa pred chrobákmi!
        Lienky a slimáky budú jesť vaše jedlo a včely vás budú štípať, aby ste jedlo
        pustili. \n\nNa skákanie použite medzerník. Lienky a slimáky môžete rozpučiť
        tým, že na ne skočíte. \n\nKliknite na tlačidlo „Spustiť“, aby ste spustili
        program."
      CSD U3 Entertainment Sample 2_2019: "# Hladný zajačik\n\nZajačik je hladný,
        a preto si hľadá huby a mrkvu na večeru. \n\nAk chcete vyhrať, musíte nájsť
        misku a pozbierať aspoň 10 mrkiev a 5 húb.\n\nZachráňte sa pred chrobákmi!
        Lienky a slimáky budú jesť vaše jedlo a včely vás budú štípať, aby ste jedlo
        pustili. \n\nNa skákanie použite medzerník. Lienky a slimáky môžete rozpučiť
        tým, že na ne skočíte. \n\nKliknite na tlačidlo „Spustiť“, aby ste spustili
        program."
      CSD U3 Entertainment Sample 3: "# Animované komiksy\n\nKombináciou obrázkov,
        textu a jednoduchej animácie môžete vytvoriť naozaj zaujímavé komiksy alebo
        grafické príbehy. Kliknite na tlačidlo „Spustiť“ a pozrite si príklad. "
      CSD U3 Entertainment Sample 3_2018: "# Animované komiksy\n\nKombináciou obrázkov,
        textu a jednoduchej animácie môžete vytvoriť naozaj zaujímavé komiksy alebo
        grafické príbehy. Kliknite na tlačidlo „Spustiť“ a pozrite si príklad. "
      CSD U3 Entertainment Sample 3_2019: "# Animované komiksy\n\nKombináciou obrázkov,
        textu a jednoduchej animácie môžete vytvoriť naozaj zaujímavé komiksy alebo
        grafické príbehy. Kliknite na tlačidlo „Spustiť“ a pozrite si príklad. "
      CSD U3 Entertainment Sample 4: |-
        # Kreslenie obrázkov

        Kliknite na tlačidlo „Spustiť“, aby ste spustili program. Potom použite lištu s ikonkami v spodnej časti na vytváranie jednoduchých obrázkov s rôznymi farbami a zvieratami.
      CSD U3 Entertainment Sample 4_2018: |-
        # Kreslenie obrázkov

        Kliknite na tlačidlo „Spustiť“, aby ste spustili program. Potom použite lištu s ikonkami v spodnej časti na vytváranie jednoduchých obrázkov s rôznymi farbami a zvieratami.
      CSD U3 Entertainment Sample 4_2019: |-
        # Kreslenie obrázkov

        Kliknite na tlačidlo „Spustiť“, aby ste spustili program. Potom použite lištu s ikonkami v spodnej časti na vytváranie jednoduchých obrázkov s rôznymi farbami a zvieratami.
      CSD U3 Functions Add Change Background: |-
        # Change the Background with the Score

        Once you've caught 10 coins it's time to celebrate. You should change the background to be something fun.

        <img src="https://images.code.org/943c67e59502334fc65a25e690076bdb-image-1475030156530.33.54 PM.png" style="float:right; height:100px">

        # Do This

        -   Use an **if-statement** and two separate functions to draw your backgrounds.
        -   Then go write your functions outside your draw loop. You get to decide what a "simple" or "crazy" background are. Have fun with it!
      CSD U3 Functions Add Change Background_2018: |-
        # Zmena pozadia na základe skóre

        Keď nazbieraš 10 mincí, je čas oslavovať. Pozadie obrazovky by sa malo zmeniť na niečo zábavné.

        # Urob toto

        -   Použi **výraz „if“** a dve rozdielne funkcie na nakreslenie svojich pozadí
        -   Potom napíš svoje funkcie mimo cyklu kreslenia. Môžeš sa rozhodnúť ktoré bude štandardné, a ktoré bláznivé pozadie. Zabav sa!
      CSD U3 Functions Add Change Background_2019: |-
        # Zmena pozadia na základe skóre

        Keď nazbieraš 10 mincí, je čas oslavovať. Pozadie obrazovky by sa malo zmeniť na niečo zábavné.

        # Urob toto

        -   Použi **výraz „if“** a dve rozdielne funkcie na nakreslenie svojich pozadí
        -   Potom napíš svoje funkcie mimo cyklu kreslenia. Môžeš sa rozhodnúť ktoré bude štandardné, a ktoré bláznivé pozadie. Zabav sa!
      CSD U3 Functions Add IsTouching: |-
        # Chyť mincu, zvýš skóre

        Aby bola hra kompletná, poďme nastaviť zvyšovanie skóre. Na to potrebujeme určiť moment, keď sa zajačik dotkne mince, a vtedy ju resetnúť.

        # Urob toto

        -   Keď sa zajačik dotkne mince, použi **výraz if** a blok **isTouching** na zvyšovanie skóre.
        -   Uisti sa, že **tvoja funkcia** resetuje mince, keď boli chytené.
        -   Zahraj si hru a nastavuj **rýchlosť mince náhodne**, kým ťa to bude baviť.
      CSD U3 Functions Add IsTouching_2018: |-
        # Chyť mincu, zvýš skóre

        Aby bola hra kompletná, poďme nastaviť zvyšovanie skóre. Na to potrebujeme určiť moment, keď sa zajačik dotkne mince, a vtedy ju resetnúť.

        # Urob toto

        -   Keď sa zajačik dotkne mince, použi **výraz if** a blok **isTouching** na zvyšovanie skóre.
        -   Uisti sa, že **tvoja funkcia** resetuje mince, keď boli chytené.
        -   Zahraj si hru a nastavuj **rýchlosť mince náhodne**, kým ťa to bude baviť.
      CSD U3 Functions Add IsTouching_2019: |-
        # Chyť mincu, zvýš skóre

        Aby bola hra kompletná, poďme nastaviť zvyšovanie skóre. Na to potrebujeme určiť moment, keď sa zajačik dotkne mince, a vtedy ju resetnúť.

        # Urob toto

        -   Keď sa zajačik dotkne mince, použi **výraz if** a blok **isTouching** na zvyšovanie skóre.
        -   Uisti sa, že **tvoja funkcia** resetuje mince, keď boli chytené.
        -   Zahraj si hru a nastavuj **rýchlosť mince náhodne**, kým ťa to bude baviť.
      CSD U3 Functions Call Draw Loop: |-
        # Volanie funkcie v cykle kreslenia

        Funkciu môžeš zavolať vo vnútri cyklu kreslenia rovnako ako hocikde inde v kóde.

        # Urob toto

        Funkcia, ktorá nakreslí pozadie, už bola vytvorená. Vytvorený bol aj „sprite“, ktorý sa pohybuje naprieč obrázkom.

        -   **Zavolaj funkciu vo vnútri cyklu kreslenia** tak, aby sa „sprite” zobrazil pred pozadím.
        -   **Poznámka:** Nevytváraj funkcie vo vnútri cyklu kreslenia. Vytvor ich na konci svojho kódu.
      CSD U3 Functions Call Draw Loop_2018: |-
        # Volanie funkcie v cykle kreslenia

        Funkciu môžeš zavolať vo vnútri cyklu kreslenia rovnako ako hocikde inde v kóde.

        # Urob toto

        Funkcia, ktorá nakreslí pozadie, už bola vytvorená. Vytvorený bol aj „sprite“, ktorý sa pohybuje naprieč obrázkom.

        -   **Zavolaj funkciu vo vnútri cyklu kreslenia** tak, aby sa „sprite” zobrazil pred pozadím.
        -   **Poznámka:** Nevytváraj funkcie vo vnútri cyklu kreslenia. Vytvor ich na konci svojho kódu.
      CSD U3 Functions Call Draw Loop_2019: |-
        # Volanie funkcie v cykle kreslenia

        Funkciu môžeš zavolať vo vnútri cyklu kreslenia rovnako ako hocikde inde v kóde.

        # Urob toto

        Funkcia, ktorá nakreslí pozadie, už bola vytvorená. Vytvorený bol aj „sprite“, ktorý sa pohybuje naprieč obrázkom.

        -   **Zavolaj funkciu vo vnútri cyklu kreslenia** tak, aby sa „sprite” zobrazil pred pozadím.
        -   **Poznámka:** Nevytváraj funkcie vo vnútri cyklu kreslenia. Vytvor ich na konci svojho kódu.
      CSD U3 Functions Call Function: "# Volanie funkcií\n\nFunkcie Ti umožňujú vytvoriť
        si vlastné bloky a rozhodnúť sa, aký kód bude v ich vnútri. Toto je príkaz,
        ktorým vytvoríš novú funkciu.\n\n![](<https://images.code.org/2493f74065d4e642ca51429b8832e431-image-1474913839061.17.09
        PM.png>)\n\nFunkciu môžeš použiť alebo „zavolať“ rovnakým spôsobom, ako akýkoľvek
        iný blok, a to použitím názvu, ktorý si jej dal/a.\n\n![](<https://images.code.org/61a6eb716e263b580ecd63fab0de7547-image-1474913770359.16.00
        PM.png>)\n\nBlok pre vytvorenie a zavolanie funkcií nájdeš na záložke „Funkcie“
        v záložke nástrojov.\n\n![](<https://images.code.org/a570a05be61297ee9f0d79a02df8db6e-image-1474922721897.44.36
        PM.png>)\n\n# Urob toto\n\nV tomto programe sú vytvorené 2 funkcie. Volá sa
        len jedna z nich.\n\n-   **Zavolaj druhú funkciu**, aby sa zobrazil celý obrázok.
        Ako pomôcku použi funkciu, ktorá už bola volaná.\n-   **Tip:** Tak ako pri
        ostatných blokoch, aj tu je dôležité hláskovanie a veľké/malé písmená. "
      CSD U3 Functions Call Function_2018: "# Volanie funkcií\n\nFunkcie Ti umožňujú
        vytvoriť si vlastné bloky a rozhodnúť sa, aký kód bude v ich vnútri. Toto
        je príkaz, ktorým vytvoríš novú funkciu.\n\n![](<https://images.code.org/2493f74065d4e642ca51429b8832e431-image-1474913839061.17.09
        PM.png>)\n\nFunkciu môžeš použiť alebo „zavolať“ rovnakým spôsobom, ako akýkoľvek
        iný blok, a to použitím názvu, ktorý si jej dal/a.\n\n![](<https://images.code.org/61a6eb716e263b580ecd63fab0de7547-image-1474913770359.16.00
        PM.png>)\n\nBlok pre vytvorenie a zavolanie funkcií nájdeš na záložke „Funkcie“
        v záložke nástrojov.\n\n![](<https://images.code.org/a570a05be61297ee9f0d79a02df8db6e-image-1474922721897.44.36
        PM.png>)\n\n# Urob toto\n\nV tomto programe sú vytvorené 2 funkcie. Volá sa
        len jedna z nich.\n\n-   **Zavolaj druhú funkciu**, aby sa zobrazil celý obrázok.
        Ako pomôcku použi funkciu, ktorá už bola volaná.\n-   **Tip:** Tak ako pri
        ostatných blokoch, aj tu je dôležité hláskovanie a veľké/malé písmená. "
      CSD U3 Functions Call Function_2019: "# Volanie funkcií\n\nFunkcie Ti umožňujú
        vytvoriť si vlastné bloky a rozhodnúť sa, aký kód bude v ich vnútri. Tento
        program práve vytvoril 2 funkcie, ale len 1 z nich je volaná.\n\n# Urob toto\n\n-
        \  **Zavolaj druhú funkciu**, aby sa zobrazil celý obrázok. Ako pomôcku použi
        funkciu, ktorá už bola volaná.\n-   **Tip**: Tak ako pri ostatných blokoch,
        aj tu je dôležité hláskovanie a veľké/malé písmená. "
      CSD U3 Functions Create Function: |-
        # Vytváranie funkcií na organizáciu kódu

        V Game Labe sa všetky akcie dejú v rámci cyklu kreslenia, ale príliš zložitý kód je neprehľadný. Aby si udržal/a prehľadnosť svojho kódu, na jeho väčšie časti používaj funkcie. Môžeš ich volať z priamo z cyklu a definovať ich nižšie. Toto je naozaj dobrý príklad využitia **abstrakcie:** rozmýšľať nad problémom na vyššej úrovni a zaoberať sa detailami neskôr.

        <img src="https://images.code.org/1a5beeaad6e55c5b27a43604be4f039a-image-1475199750468.42.07 PM.png" style="float:right;width:150px">

        # Urob toto

        Tento program má nakresliť dennú alebo nočnú scenériu v závislosti od polohy kurzora myši. Cyklus kreslenia popisuje, čo by sa malo stať, ale jedna funkcia ešte nebola napísaná.

        -   **Napíš funkciu `drawNight`**, ktorá síce bola vytvorená, ale je prázdna.
        -   Tip: Pozri sa  na obrázok vpravo a uvidíš, ako by mal nočný obrázok vyzerať. Vieš tu využiť funkciu `drawDay`?
      CSD U3 Functions Create Function_2018: |-
        # Vytváranie funkcií na organizáciu kódu

        V Game Labe sa všetky akcie dejú v rámci cyklu kreslenia, ale príliš zložitý kód je neprehľadný. Aby si udržal/a prehľadnosť svojho kódu, na jeho väčšie časti používaj funkcie. Môžeš ich volať z priamo z cyklu a definovať ich nižšie. Toto je naozaj dobrý príklad využitia **abstrakcie:** rozmýšľať nad problémom na vyššej úrovni a zaoberať sa detailami neskôr.

        <img src="https://images.code.org/1a5beeaad6e55c5b27a43604be4f039a-image-1475199750468.42.07 PM.png" style="float:right;width:150px">

        # Urob toto

        Tento program má nakresliť dennú alebo nočnú scenériu v závislosti od polohy kurzora myši. Cyklus kreslenia popisuje, čo by sa malo stať, ale jedna funkcia ešte nebola napísaná.

        -   **Napíš funkciu `drawNight`**, ktorá síce bola vytvorená, ale je prázdna.
        -   Tip: Pozri sa  na obrázok vpravo a uvidíš, ako by mal nočný obrázok vyzerať. Vieš tu využiť funkciu `drawDay`?
      CSD U3 Functions Create Function_2019: |-
        # Vytváranie funkcií na organizáciu kódu

        V Game Labe sa všetky akcie dejú v rámci cyklu kreslenia, ale príliš zložitý kód je neprehľadný. Aby si udržal/a prehľadnosť svojho kódu, na jeho väčšie časti používaj funkcie. Môžeš ich volať z priamo z cyklu a definovať ich nižšie. Toto je naozaj dobrý príklad využitia **abstrakcie:** rozmýšľať nad problémom na vyššej úrovni a zaoberať sa detailami neskôr.

        <img src="https://images.code.org/1a5beeaad6e55c5b27a43604be4f039a-image-1475199750468.42.07 PM.png" style="float:right;width:150px">

        # Urob toto

        Tento program má nakresliť dennú alebo nočnú scenériu v závislosti od polohy kurzora myši. Cyklus kreslenia popisuje, čo by sa malo stať, ale jedna funkcia ešte nebola napísaná.

        -   **Napíš funkciu `drawNight`**, ktorá síce bola vytvorená, ale je prázdna.
        -   Tip: Pozri sa  na obrázok vpravo a uvidíš, ako by mal nočný obrázok vyzerať. Vieš tu využiť funkciu `drawDay`?
      CSD U3 Functions Order Functions: |-
        # Preskupenie kódu

        Umiestnenie kódu dovnútra funkcie uľahčuje jeho čítanie a zmenu. Vhodný názov funkcie naznačuje programátorovi, čo daná funkcia vykonáva. Svoje funkcie môžeš zavolať v rôznom poradí.

        # Urob toto

        Tento program už má vytvorené 4 funkcie, ktoré nakreslia časť obrázku. Nanešťastie ich výsledok nie je správny.

        -   **Prečítaj si všetky 4 funkcie**, aby si vedel/a, čo robia.
        -   **Zavolaj funkcie** v poradí, ktoré nakreslí obrázok čo najlepšie.
      CSD U3 Functions Order Functions_2018: |-
        # Preskupenie kódu

        Umiestnenie kódu dovnútra funkcie uľahčuje jeho čítanie a zmenu. Vhodný názov funkcie naznačuje programátorovi, čo daná funkcia vykonáva. Svoje funkcie môžeš zavolať v rôznom poradí.

        # Urob toto

        Tento program už má vytvorené 4 funkcie, ktoré nakreslia časť obrázku. Nanešťastie ich výsledok nie je správny.

        -   **Prečítaj si všetky 4 funkcie**, aby si vedel/a, čo robia.
        -   **Zavolaj funkcie** v poradí, ktoré nakreslí obrázok čo najlepšie.
      CSD U3 Functions Order Functions_2019: |-
        # Preskupenie kódu

        Umiestnenie kódu dovnútra funkcie uľahčuje jeho čítanie a zmenu. Vhodný názov funkcie naznačuje programátorovi, čo daná funkcia vykonáva. Svoje funkcie môžeš zavolať v rôznom poradí.

        # Urob toto

        Tento program už má vytvorené 4 funkcie, ktoré nakreslia časť obrázku. Nanešťastie ich výsledok nie je správny.

        -   **Prečítaj si všetky 4 funkcie**, aby si vedel/a, čo robia.
        -   **Zavolaj funkcie** v poradí, ktoré nakreslí obrázok čo najlepšie.
      CSD U3 Functions Randomize Sprite: |-
        # Zmena funkcií

        Výhodou využívania funkcií na odstránenie opakujúceho sa kódu je, že teraz môžeš ľahko vykonávať zmeny na viacerých miestach v kóde. Stačí zmeniť spôsob vytvárania funkcií a tvoj program použije nový kód kdekoľvek je tvoja funkcia volaná.

        # Urob toto

        Urob zmeny vo funkcii `setFlyer` tak, aby leták začal na náhodnej Y pozícii medzi 0 a 400, a hýbal sa náhodnou rýchlosťou zakaždým, keď je obnovený.
      CSD U3 Functions Randomize Sprite_2018: |-
        # Zmena funkcií

        Výhodou využívania funkcií na odstránenie opakujúceho sa kódu je, že teraz môžeš ľahko vykonávať zmeny na viacerých miestach v kóde. Stačí zmeniť spôsob vytvárania funkcií a tvoj program použije nový kód kdekoľvek je tvoja funkcia volaná.

        # Urob toto

        Urob zmeny vo funkcii `setFlyer` tak, aby leták začal na náhodnej Y pozícii medzi 0 a 400, a hýbal sa náhodnou rýchlosťou zakaždým, keď je obnovený.
      CSD U3 Functions Randomize Sprite_2019: |-
        # Zmena funkcií

        Výhodou využívania funkcií na odstránenie opakujúceho sa kódu je, že teraz môžeš ľahko vykonávať zmeny na viacerých miestach v kóde. Stačí zmeniť spôsob vytvárania funkcií a tvoj program použije nový kód kdekoľvek je tvoja funkcia volaná.

        # Urob toto

        Urob zmeny vo funkcii `setFlyer` tak, aby leták začal na náhodnej Y pozícii medzi 0 a 400, a hýbal sa náhodnou rýchlosťou zakaždým, keď je obnovený.
      CSD U3 Functions Reset Sprite: |-
        # Opakované volanie funkcie

        Veľmi často budeš chcieť použiť rovnaký kód na viacerých miestach v programe. Keď vytvoríš funkciu, môžeš ju zavolať, koľkokrát len chceš.

        # Urob toto

        Tento kód vytvorí „sprite“, ktorý sa pohybuje naprieč obrazovkou len jedenkrát. Ako ho nastavíš tak, aby objekt opäť prešiel obrazovkou?

        -   **Poznámka:** Funkcia je už na začiatku programu zavolaná jedenkrát.
        -   Prečítaj si podmienku **výrazu  „if”** vo vnútri cyklu kreslenia. Prečo si myslíš, že tam tento výraz je?
        -   Použi tento výrok „if” a napísanú funkciu tak, aby sa „sprite“ pohyboval viackrát naprieč obrazovkou.
      CSD U3 Functions Reset Sprite_2018: |-
        # Opakované volanie funkcie

        Veľmi často budeš chcieť použiť rovnaký kód na viacerých miestach v programe. Keď vytvoríš funkciu, môžeš ju zavolať, koľkokrát len chceš.

        # Urob toto

        Tento kód vytvorí „sprite“, ktorý sa pohybuje naprieč obrazovkou len jedenkrát. Ako ho nastavíš tak, aby objekt opäť prešiel obrazovkou?

        -   **Poznámka:** Funkcia je už na začiatku programu zavolaná jedenkrát.
        -   Prečítaj si podmienku **výrazu  „if”** vo vnútri cyklu kreslenia. Prečo si myslíš, že tam tento výraz je?
        -   Použi tento výrok „if” a napísanú funkciu tak, aby sa „sprite“ pohyboval viackrát naprieč obrazovkou.
      CSD U3 Functions Reset Sprite_2019: |-
        # Opakované volanie funkcie

        Veľmi často budeš chcieť použiť rovnaký kód na viacerých miestach v programe. Keď vytvoríš funkciu, môžeš ju zavolať, koľkokrát len chceš.

        # Urob toto

        Tento kód vytvorí „sprite“, ktorý sa pohybuje naprieč obrazovkou len jedenkrát. Ako ho nastavíš tak, aby objekt opäť prešiel obrazovkou?

        -   **Poznámka:** Funkcia je už na začiatku programu zavolaná jedenkrát.
        -   Prečítaj si podmienku **výrazu  „if”** vo vnútri cyklu kreslenia. Prečo si myslíš, že tam tento výraz je?
        -   Použi tento výrok „if” a napísanú funkciu tak, aby sa „sprite“ pohyboval viackrát naprieč obrazovkou.
      CSD U3 Functions Write Reset: |-
        # Napíš si vlastnú funkciu

        Je čas nacvičiť písanie vlastných funkcií. Toto je veľmi jednoduchá hra, kde padajú mince z oblohy a zajačik sa ich snaží chytiť. Jediné, čo treba spraviť, je napísať funkciu, ktorá definuje mince.

        # Urob toto

        -   **Prečítaj si a spusti kód**, ktorý už existuje, aby si si bol/a istý/á tým, ako program funguje.
        -   **Napíš kód pre funkciu `setCoin`**, ktorá bude zhadzovať mince z oblohy.
        -   Ak potrebuješ pomoc, môžeš sa pozrieť na predošlé lekcie.
      CSD U3 Functions Write Reset_2018: |-
        # Napíš si vlastnú funkciu

        Je čas nacvičiť písanie vlastných funkcií. Toto je veľmi jednoduchá hra, kde padajú mince z oblohy a zajačik sa ich snaží chytiť. Jediné, čo treba spraviť, je napísať funkciu, ktorá definuje mince.

        # Urob toto

        -   **Prečítaj si a spusti kód**, ktorý už existuje, aby si si bol/a istý/á tým, ako program funguje.
        -   **Napíš kód pre funkciu `setCoin`**, ktorá bude zhadzovať mince z oblohy.
        -   Ak potrebuješ pomoc, môžeš sa pozrieť na predošlé lekcie.
      CSD U3 Functions Write Reset_2019: |-
        # Napíš si vlastnú funkciu

        Je čas nacvičiť písanie vlastných funkcií. Toto je veľmi jednoduchá hra, kde padajú mince z oblohy a zajačik sa ich snaží chytiť. Jediné, čo treba spraviť, je napísať funkciu, ktorá definuje mince.

        # Urob toto

        -   **Prečítaj si a spusti kód**, ktorý už existuje, aby si si bol/a istý/á tým, ako program funguje.
        -   **Napíš kód pre funkciu `setCoin`**, ktorá bude zhadzovať mince z oblohy.
        -   Ak potrebuješ pomoc, môžeš sa pozrieť na predošlé lekcie.
      CSD U3 If Else: "# Keď potrebujeme záložný plán\n\n„Else“ je vhodné aj ako záloha
        pre podmienku „if“, ktorú kontrolujeme. Teda ak sa stane, že podmienka `if`
        nie je splnená, príkazom `else` zabezpečíme správny beh programu.\n\n<img
        src=\"https://images.code.org/730a895b50375781e72c95f5fa21d09d-image-1477681109870.gif\"
        style=\"float:right;\">\n\n# Urob toto\n\nKlikni na tlačidlo „Spustiť“, aby
        si uvidel/a roj včiel a kvetinku na ľavej strane obrazovky. Nastav program
        tak, aby sa roj včiel **objavil, keď je kurzor myši pri kvetine** (v ľavej
        časti obrazovky) a **zmizol, keď sa kurzor vzdiali** (teda je v pravej časti
        obrazovky). Pozri si príklad vpravo. \n\n-   Potom, ako aktualizuješ pozíciu
        roja včiel, pridaj výraz `if-else`.\n-   Ako vstup do podmieňovacieho „if“
        výrazu použi logický výraz na kontrolu, či je súradnica x kurzora myši na
        tej istej strane obrazovky ako kvetinka.\n-   Nastav vlastnosť `visible` pre
        každú včelu v oboch  výrazoch „if“ aj „else“ tak, aby sa včely zobrazili vždy
        v blízkosti kvetinky."
      CSD U3 If Else predict question: |-
        # Porozmýšľaj: If/Else

        Preštuduj si tento program a zameraj sa pritom na blok `if/else` na riadku 10.  Prediskutuj vo dvojici nasledujúce otázky, zapíš svoj tip, spusti kód a zisti, ako sa program správa naozaj.

        -   Čo sa stane po stlačení medzerníka na klávesnici?
        -   Čo sa stane, keď medzerník **nebude** stlačený?
      CSD U3 If Else_2018: "# Keď potrebujeme záložný plán\n\n„Else“ je vhodné aj
        ako záloha pre podmienku „if“, ktorú kontrolujeme. Teda ak sa stane, že podmienka
        `if` nie je splnená, príkazom `else` zabezpečíme správny beh programu.\n\n<img
        src=\"https://images.code.org/730a895b50375781e72c95f5fa21d09d-image-1477681109870.gif\"
        style=\"float:right;\">\n\n# Urob toto\n\nKlikni na tlačidlo „Spustiť“, aby
        si uvidel/a roj včiel a kvetinku na ľavej strane obrazovky. Nastav program
        tak, aby sa roj včiel **objavil, keď je kurzor myši pri kvetine** (v ľavej
        časti obrazovky) a **zmizol, keď sa kurzor vzdiali** (teda je v pravej časti
        obrazovky). Pozri si príklad vpravo. \n\n-   Potom, ako aktualizuješ pozíciu
        roja včiel, pridaj výraz `if-else`.\n-   Ako vstup do podmieňovacieho „if“
        výrazu použi logický výraz na kontrolu, či je súradnica x kurzora myši na
        tej istej strane obrazovky ako kvetinka.\n-   Nastav vlastnosť `visible` pre
        každú včelu v oboch  výrazoch „if“ aj „else“ tak, aby sa včely zobrazili vždy
        v blízkosti kvetinky."
      CSD U3 If Else_2019: |-
        # Kedy použiť "Else"

        "Else" je užitočné v momente, keď chceme, aby program urobil jednu vec v prípade, ak je podmienka platí (`true`)a _inú_ vec, keď podmienka neplatí (`false`).

        <img src="https://images.code.org/730a895b50375781e72c95f5fa21d09d-image-1477681109870.gif" style="float:right;">

        # Urob toto

        Klikni na tlačidlo „Spustiť“, aby si uvidel/a roj včiel a kvetinku na ľavej strane obrazovky. Nastav program tak, aby sa roj včiel **zobrazil, keď je kurzor myši pri kvetinke** (na ľavej strane obrazovky) a aby **zmizol, keď sa kurzor vzdiali (teda, keď je na pravej strane obrazovky).** Pozri si príklad vpravo.

        -   Pridaj výraz `if-else` za kód, ktorý aktulizuje pozíciu roja včiel.
        -   Ako vstup do podmieňovacieho „if“ výrazu použi logický výraz na kontrolu, či je súradnica x kurzora myši na rovnakej strane obrazovky, ako kvetinka.
        -   Nastav vlastnosť `visible` pre každú včelu v oboch  výrazoch „if“ aj „else“ tak, aby sa včely vždy zobrazili blízko kvetinky.
      CSD U3 Input Fish: "# Ryby so šípkami\n\nRyby sú späť! Vieš zariadiť, aby sa
        hýbali vľavo len vtedy, keď je stlačená klávesa so šípkou doľava?\n\n# Urob
        toto\n\n-   Pridaj podmieňovací výraz na kontrolu stlačenia klávesy so šípkou
        doľava.\n-   Presuň príkaz na posun ryby dovnútra výrazu „if“. "
      CSD U3 Input Fish_2018: "# Ryby so šípkami\n\nRyby sú späť! Vieš zariadiť, aby
        sa hýbali vľavo len vtedy, keď je stlačená klávesa so šípkou doľava?\n\n#
        Urob toto\n\n-   Pridaj podmieňovací výraz na kontrolu stlačenia klávesy so
        šípkou doľava.\n-   Presuň príkaz na posun ryby dovnútra výrazu „if“. "
      CSD U3 Input Fish_2019: "# Ryby so šípkami\n\nRyby sú späť! Vieš zariadiť, aby
        sa hýbali vľavo len vtedy, keď je stlačená klávesa so šípkou doľava?\n\n#
        Urob toto\n\n-   Pridaj podmieňovací výraz na kontrolu stlačenia klávesy so
        šípkou doľava.\n-   Presuň príkaz na posun ryby dovnútra výrazu „if“. "
      CSD U3 Input Gears: |-
        # Ozubené kolesá s podmienkami

        Nech sa kolesá otáčajú, ale len keď je stlačená a podržaná klávesa „medzerník“.

        # Urob toto

        -   Pridaj výraz `if`.
        -   Použi `keyDown` ako vstup pre if výraz na kontrolu stlačenia klávesy „medzerník“.
        -   Presuň kód, ktorý otáča ozubenými kolesami, dovnútra výrazu `if`.
      CSD U3 Input Gears_2018: |-
        # Ozubené kolesá s podmienkami

        Nech sa kolesá otáčajú, ale len keď je stlačená a podržaná klávesa „medzerník“.

        # Urob toto

        -   Pridaj výraz `if`.
        -   Použi `keyDown` ako vstup pre if výraz na kontrolu stlačenia klávesy „medzerník“.
        -   Presuň kód, ktorý otáča ozubenými kolesami, dovnútra výrazu `if`.
      CSD U3 Input Gears_2019: |-
        # Ozubené kolesá s podmienkami

        Nech sa kolesá otáčajú, ale len keď je stlačená a podržaná klávesa „medzerník“.

        # Urob toto

        -   Pridaj výraz `if`.
        -   Použi `keyDown` ako vstup pre if výraz na kontrolu stlačenia klávesy „medzerník“.
        -   Presuň kód, ktorý otáča ozubenými kolesami, dovnútra výrazu `if`.
      CSD U3 Interactive Card Background: |-
        # Vytvor pozadie

        Pred začatím tohto projektu by si mal/a mať dokončený plánovací hárok projektu interaktívnej  pohľadnice. Tento dokument maj pripravený počas vytvárania programu. Príprava je jedným z najdôležitejších prvkov úspešného vytvorenia programu!

        # Urob toto

        Pozri sa na plánovací hárok, ktorý ti pomôže pripraviť pozadie pohľadnice.

        -   Najskôr sa rozhodni, ktorá vrstva pozadia v tvojom obrázku bude prvá, (mal/a by sa použiť blok `background()`) a pridaj ju na začiatok funkcie kreslenia.
        -   Postupne vkladaj každý ďalší kresliaci blok v poradí, v akom chceš, aby sa zobrazoval.
        -   Nakoniec pridaj komentár do hornej časti tejto sekcie kódu, aby si opísal/a, čo robí. Ak máš nejaké obzvlášť komplikované časti kódu (napríklad kód na kreslenie stromu alebo domu), pridaj popisujúci komentár aj k nemu.

        **Výzva:** Vedel/a by si použiť premenné alebo `randomNumber()` na pridanie krátkej animácie do vrstvy pozadia?
      CSD U3 Interactive Card Background_2018: |-
        # Vytvor pozadie

        Pred začatím tohto projektu by si mal/a mať dokončený plánovací hárok projektu interaktívnej  pohľadnice. Tento dokument maj pripravený počas vytvárania programu. Príprava je jedným z najdôležitejších prvkov úspešného vytvorenia programu!

        # Urob toto

        Pozri sa na plánovací hárok, ktorý ti pomôže pripraviť pozadie pohľadnice.

        -   Najskôr sa rozhodni, ktorá vrstva pozadia v tvojom obrázku bude prvá, (mal/a by sa použiť blok `background()`) a pridaj ju na začiatok funkcie kreslenia.
        -   Postupne vkladaj každý ďalší kresliaci blok v poradí, v akom chceš, aby sa zobrazoval.
        -   Nakoniec pridaj komentár do hornej časti tejto sekcie kódu, aby si opísal/a, čo robí. Ak máš nejaké obzvlášť komplikované časti kódu (napríklad kód na kreslenie stromu alebo domu), pridaj popisujúci komentár aj k nemu.

        **Výzva:** Vedel/a by si použiť premenné alebo `randomNumber()` na pridanie krátkej animácie do vrstvy pozadia?
      CSD U3 Interactive Card Background_2019: |-
        # Vytvor pozadie

        Pred začatím tohto projektu by si mal/a mať dokončený plánovací hárok projektu interaktívnej  pohľadnice. Tento dokument maj pripravený počas vytvárania programu. Príprava je jedným z najdôležitejších prvkov úspešného vytvorenia programu!

        # Urob toto

        Pozri sa na plánovací hárok, ktorý ti pomôže pripraviť pozadie pohľadnice.

        -   Najskôr sa rozhodni, ktorá vrstva pozadia v tvojom obrázku bude prvá, (mal/a by sa použiť blok `background()`) a pridaj ju na začiatok funkcie kreslenia.
        -   Postupne vkladaj každý ďalší kresliaci blok v poradí, v akom chceš, aby sa zobrazoval.
        -   Nakoniec pridaj komentár do hornej časti tejto sekcie kódu, aby si opísal/a, čo robí. Ak máš nejaké obzvlášť komplikované časti kódu (napríklad kód na kreslenie stromu alebo domu), pridaj popisujúci komentár aj k nemu.

        **Výzva:** Vedel/a by si použiť premenné alebo `randomNumber()` na pridanie krátkej animácie do vrstvy pozadia?
      CSD U3 Interactive Card Exemplar: |-
        # Príklad projektu

        Spusti program niekoľkokrát a odpovedz na nasledujúce otázky:

        1.  Ktoré prvky používajú príkazy na kreslenie?
        2.  Ktoré prvky sú „sprite“ objektami?
        3.  Ktoré vlastnosti každého „sprite“ objektu sa menia?
        4.  Kde vidíš použité podmienené príkazy?
        5.  Sú nejaké prvky, ktorým nerozumieš?
      CSD U3 Interactive Card Exemplar_2018: |-
        # Príklad projektu

        Spusti program niekoľkokrát a odpovedz na nasledujúce otázky:

        1.  Ktoré prvky používajú príkazy na kreslenie?
        2.  Ktoré prvky sú „sprite“ objektami?
        3.  Ktoré vlastnosti každého „sprite“ objektu sa menia?
        4.  Kde vidíš použité podmienené príkazy?
        5.  Sú nejaké prvky, ktorým nerozumieš?
      CSD U3 Interactive Card Exemplar_2019: |-
        # Príklad projektu

        Spusti program niekoľkokrát a odpovedz na nasledujúce otázky:

        1.  Ktoré prvky používajú príkazy na kreslenie?
        2.  Ktoré prvky sú „sprite“ objektami?
        3.  Ktoré vlastnosti každého „sprite“ objektu sa menia?
        4.  Kde vidíš použité podmienené príkazy?
        5.  Sú nejaké prvky, ktorým nerozumieš?
      CSD U3 Interactive Card Final: |-
        # Finishing Touches

        Now's your chance to put some finishing touches on your card. We've included some new blocks that you haven't seen before, so take some time to look around and try out some new blocks.

        # Do This

        Consider adding any of the following to finish up your card:

        -   Text
        -   Additional images for your sprites
        -   Subtle animation in the background
        -   Sound effects  (Can you figure out now to do this?)
        -   More ways for a user to interact with your card
      CSD U3 Interactive Card Final_2018: |-
        # Finálne úpravy

        Teraz môžeš spraviť finálne úpravy na svojej pohľadnici. Pridali sme nové bloky, ktoré ešte nepoznáš, takže si ich kľudne prezri a vyskúšaj.

        # Urob toto

        Porozmýšľaj nad pridaním jednej alebo viacerých častí:

        -   Text
        -   Ďalšie obrázky pre tvoje postavy.
        -   Jemné animácie v pozadí
        -   Zvukové efekty (Vedel/a by si, ako?)
        -   Ďalšie možnosti interakcie s tvojou pohľadnicou
      CSD U3 Interactive Card Final_2019: |-
        # Finálne úpravy

        Teraz môžeš spraviť finálne úpravy na svojej pohľadnici. Pridali sme nové bloky, ktoré ešte nepoznáš, takže si ich kľudne prezri a vyskúšaj.

        # Urob toto

        Porozmýšľaj nad pridaním jednej alebo viacerých častí:

        -   Text
        -   Ďalšie obrázky pre tvoje postavy.
        -   Jemné animácie v pozadí
        -   Zvukové efekty (Vedel/a by si, ako?)
        -   Ďalšie možnosti interakcie s tvojou pohľadnicou
      CSD U3 Interactive Card Other Conditionals: |-
        # Ostatné podmienky

        _Prekvapenie_ v tvojej pohľadnici prichádza s podmienkami, ktoré priamo nezávisia od užívateľa, ale na iných prvkoch. Tieto sa môžu spustiť premennou, ktorá sa aktualizuje počas interakcie užívateľa s pohľadnicou, alebo keď sa „sprite“ objekt presunie do vybraných častí obrazovky.

        # Urob toto

        Pre každý zo zostávajúcich prvkov v tvojej tabuľke interakcií:

        -   Pridaj blok `if` (alebo blok `if-else`, ak chceš mať aj náhradnú akciu) vo vnútri cyklu kreslenia.
        -   Pridaj vhodný porovnávací blok logického výrazu k podmienke (napr. \<, > alebo ==).
        -   Pridaj potrebné akcie do vnútra bloku `if`.

        **Výzva:** Vieš vytvoriť zložitejšie podmienky ich vnorením alebo použitím zložených logických výrazov?
      CSD U3 Interactive Card Other Conditionals_2018: |-
        # Ostatné podmienky

        _Prekvapenie_ v tvojej pohľadnici prichádza s podmienkami, ktoré priamo nezávisia od užívateľa, ale na iných prvkoch. Tieto sa môžu spustiť premennou, ktorá sa aktualizuje počas interakcie užívateľa s pohľadnicou, alebo keď sa „sprite“ objekt presunie do vybraných častí obrazovky.

        # Urob toto

        Pre každý zo zostávajúcich prvkov v tvojej tabuľke interakcií:

        -   Pridaj blok `if` (alebo blok `if-else`, ak chceš mať aj náhradnú akciu) vo vnútri cyklu kreslenia.
        -   Pridaj vhodný porovnávací blok logického výrazu k podmienke (napr. \<, > alebo ==).
        -   Pridaj potrebné akcie do vnútra bloku `if`.

        **Výzva:** Vieš vytvoriť zložitejšie podmienky ich vnorením alebo použitím zložených logických výrazov?
      CSD U3 Interactive Card Other Conditionals_2019: |-
        # Ostatné podmienky

        _Prekvapenie_ v tvojej pohľadnici prichádza s podmienkami, ktoré priamo nezávisia od užívateľa, ale na iných prvkoch. Tieto sa môžu spustiť premennou, ktorá sa aktualizuje počas interakcie užívateľa s pohľadnicou, alebo keď sa „sprite“ objekt presunie do vybraných častí obrazovky.

        # Urob toto

        Pre každý zo zostávajúcich prvkov v tvojej tabuľke interakcií:

        -   Pridaj blok `if` (alebo blok `if-else`, ak chceš mať aj náhradnú akciu) vo vnútri cyklu kreslenia.
        -   Pridaj vhodný porovnávací blok logického výrazu k podmienke (napr. \<, > alebo ==).
        -   Pridaj potrebné akcie do vnútra bloku `if`.

        **Výzva:** Vieš vytvoriť zložitejšie podmienky ich vnorením alebo použitím zložených logických výrazov?
      CSD U3 Interactive Card Sprites: |-
        # Pridávanie „sprite“ objektov

        Keď už máš definované statické prvky, je čas pridať „sprite“ objekty. Mali by byť hlavnou animáciou a  robiť tvoju pohľadnicu interaktívnou – takže prejav svoju kreativitu a zabav sa.

        # Urob toto

        Skontroluj tabuľku „sprite“ objektov na zadnej strane svojho plánovacieho hárku. Pre každý z nich v tvojej tabuľke:

        -   Vytvor „sprite“ objekt na začiatku programu pomocou `createSprite()`.
        -   Nájdi alebo vytvor obrázok/obrázky pre „sprite“ objekt a nastav ich pomocou `setAnimation()`.
        -   Vo vnútri cyklu kreslenia aktualizuj všetky vlastnosti „sprite“ objektu, ktoré sa budú dookola animovať (podmienky pridáme ochvíľu).
      CSD U3 Interactive Card Sprites_2018: |-
        # Pridávanie „sprite“ objektov

        Keď už máš definované statické prvky, je čas pridať „sprite“ objekty. Mali by byť hlavnou animáciou a  robiť tvoju pohľadnicu interaktívnou – takže prejav svoju kreativitu a zabav sa.

        # Urob toto

        Skontroluj tabuľku „sprite“ objektov na zadnej strane svojho plánovacieho hárku. Pre každý z nich v tvojej tabuľke:

        -   Vytvor „sprite“ objekt na začiatku programu pomocou `createSprite()`.
        -   Nájdi alebo vytvor obrázok/obrázky pre „sprite“ objekt a nastav ich pomocou `setAnimation()`.
        -   Vo vnútri cyklu kreslenia aktualizuj všetky vlastnosti „sprite“ objektu, ktoré sa budú dookola animovať (podmienky pridáme ochvíľu).
      CSD U3 Interactive Card Sprites_2019: |-
        # Pridávanie „sprite“ objektov

        Keď už máš definované statické prvky, je čas pridať „sprite“ objekty. Mali by byť hlavnou animáciou a  robiť tvoju pohľadnicu interaktívnou – takže prejav svoju kreativitu a zabav sa.

        # Urob toto

        Skontroluj tabuľku „sprite“ objektov na zadnej strane svojho plánovacieho hárku. Pre každý z nich v tvojej tabuľke:

        -   Vytvor „sprite“ objekt na začiatku programu pomocou `createSprite()`.
        -   Nájdi alebo vytvor obrázok/obrázky pre „sprite“ objekt a nastav ich pomocou `setAnimation()`.
        -   Vo vnútri cyklu kreslenia aktualizuj všetky vlastnosti „sprite“ objektu, ktoré sa budú dookola animovať (podmienky pridáme ochvíľu).
      CSD U3 Interactive Card User Input: |-
        # Vstup od užívateľa

        Už máš pozadie a „sprite“ objekty, takže je čas nechať užívateľa niečo urobiť!

        # Urob toto

        V tabuľke interakcií vo svojom plánovacom hárku nájdi všetky interakcie, ktoré sú spúšťané vstupom užívateľa (stlačenia kláves a pohyby myšou). Pre každú z týchto interakcií:

        -   Pridaj blok `if` (alebo blok `if-else`, ak chceš mať aj náhradnú akciu) vo vnútri cyklu kreslenia.
        -   Pridaj vhodné bloky pre vstup do tvojej podmienky (ako napríklad `keyDown()` či `mouseDown()`).
        -   Pridaj potrebné akcie do vnútra bloku `if`.

        **Výzva:** Vieš vytvoriť zložitejšie podmienky ich vnorením alebo použitím zložených logických výrazov?
      CSD U3 Interactive Card User Input_2018: |-
        # Vstup od užívateľa

        Už máš pozadie a „sprite“ objekty, takže je čas nechať užívateľa niečo urobiť!

        # Urob toto

        V tabuľke interakcií vo svojom plánovacom hárku nájdi všetky interakcie, ktoré sú spúšťané vstupom užívateľa (stlačenia kláves a pohyby myšou). Pre každú z týchto interakcií:

        -   Pridaj blok `if` (alebo blok `if-else`, ak chceš mať aj náhradnú akciu) vo vnútri cyklu kreslenia.
        -   Pridaj vhodné bloky pre vstup do tvojej podmienky (ako napríklad `keyDown()` či `mouseDown()`).
        -   Pridaj potrebné akcie do vnútra bloku `if`.

        **Výzva:** Vieš vytvoriť zložitejšie podmienky ich vnorením alebo použitím zložených logických výrazov?
      CSD U3 Interactive Card User Input_2019: |-
        # Vstup od užívateľa

        Už máš pozadie a „sprite“ objekty, takže je čas nechať užívateľa niečo urobiť!

        # Urob toto

        V tabuľke interakcií vo svojom plánovacom hárku nájdi všetky interakcie, ktoré sú spúšťané vstupom užívateľa (stlačenia kláves a pohyby myšou). Pre každú z týchto interakcií:

        -   Pridaj blok `if` (alebo blok `if-else`, ak chceš mať aj náhradnú akciu) vo vnútri cyklu kreslenia.
        -   Pridaj vhodné bloky pre vstup do tvojej podmienky (ako napríklad `keyDown()` či `mouseDown()`).
        -   Pridaj potrebné akcie do vnútra bloku `if`.

        **Výzva:** Vieš vytvoriť zložitejšie podmienky ich vnorením alebo použitím zložených logických výrazov?
      CSD U3 Keyboard Input Challenge: |-
        # Challenge

        _Check with your teacher before trying this challenge._

        Here's the bug program you've been working on for the past few levels. Choose one or more of following challenges, or add new features of your own!

        -   Use the "space" key to control another property of your bug sprite, such as rotation or scale.
        -   Add some randomization to your movement.
        -   Add a second sprite and control it with a different set of keys ("w", "a", "s", and "d" are common choices).
        -   Add some shapes to your background to make the scene more interesting.
      CSD U3 Keyboard Input Challenge_2018: |-
        # Challenge

        _Check with your teacher before trying this challenge._

        Here's the bug program you've been working on for the past few levels. Choose one or more of following challenges, or add new features of your own!

        -   Use the "space" key to control another property of your bug sprite, such as rotation or scale.
        -   Add some randomization to your movement.
        -   Add a second sprite and control it with a different set of keys ("w", "a", "s", and "d" are common choices).
        -   Add some shapes to your background to make the scene more interesting.
      CSD U3 Keyboard Input Challenge_2018_2019: |-
        # Challenge

        _Check with your teacher before trying this challenge._

        Here's the bug program you've been working on for the past few levels. Choose one or more of following challenges, or add new features of your own!

        -   Use the "space" key to control another property of your bug sprite, such as rotation or scale.
        -   Add some randomization to your movement.
        -   Add a second sprite and control it with a different set of keys ("w", "a", "s", and "d" are common choices).
        -   Add some shapes to your background to make the scene more interesting.
      CSD U3 Keypress Boolean: |-
        # Prediction - keyDown()

        The `keyDown()` block is the first of a new set of blocks that will let us get input from the user. This is the first step on our road to actually making games! See if you can predict how the `keyDown()` block works. You will **not write any code**.

        # Do This

        -   Read the program carefully.
        -   **Make a prediction about how the code will run** and write it in the box below. Be specific!
        -   Run the program.
        -   While the program is running, press the up arrow on your keyboard.
        -   Were you correct? Were you surprised? Discuss with a classmate.
      CSD U3 Keypress Boolean embed: |-
        # Prediction - keyDown()

        The `keyDown()` block is the first of a new set of blocks that will let us get input from the user. This is the first step on our road to actually making games! See if you can predict how the `keyDown()` block works. You will **not write any code**.

        # Do This

        -   Read the program carefully.
        -   **Make a prediction about how the code will run** and write it in the box below. Be specific!
        -   Run the program.
        -   While the program is running, press the up arrow on your keyboard.
        -   Were you correct? Were you surprised? Discuss with a classmate.
      CSD U3 Keypress Boolean embed-2018: |-
        # Porozmýšľaj - keyDown()

        Blok `keyDown()` je prvým z novej skupiny blokov, ktoré umožňujú získať vstupy od užívateľa. Toto je prvý krok na našej ceste k tvorbe hier! Pozrime sa, či uhádneš, ako blok `keyDown()` funguje. Zatiaľ ešte **nepíš** žiaden kód.

        # Urob toto

        \*Pozorne si prečítaj program.
        **\*Predpokladaj, ako bude kód fungovať** a napíš odpoveď do políčka nižšie. Buď konkrétny/a!
        \*Spusti program.
        \*Počas behu programu stlač medzerník na klávesnici.
        \*Uhádol/la si? Bol/a si prekvapený/á? Porozprávaj sa o tom so spolusediacim/spolusediacou.
      CSD U3 Keypress Boolean embed-2018_2019: |-
        # Porozmýšľaj - keyDown()

        Blok `keyDown()` je prvým z novej skupiny blokov, ktoré umožňujú získať vstupy od užívateľa. Toto je prvý krok na našej ceste k tvorbe hier! Pozrime sa, či uhádneš, ako blok `keyDown()` funguje. Zatiaľ ešte **nepíš** žiaden kód.

        # Urob toto

        \*Pozorne si prečítaj program.
        **\*Predpokladaj, ako bude kód fungovať** a napíš odpoveď do políčka nižšie. Buď konkrétny/a!
        \*Spusti program.
        \*Počas behu programu stlač medzerník na klávesnici.
        \*Uhádol/la si? Bol/a si prekvapený/á? Porozprávaj sa o tom so spolusediacim/spolusediacou.
      CSD U3 Keypress Watchers Predict: |-
        # Porozmýšľaj: Vstup užívateľa

        Doteraz sme používali `keyDown` ako spôsob kontroly programu užívateľom. To je však len jeden zo spôsobov na získanie vstupu od užívateľa. V skutočnosti existuje veľa možností _na zachytenie stlačenia kláves_! Podľa toho, ako chceš reagovať na stlačenie klávesy, je viacero blokov, ktoré môžeš použiť.

        Prečítaj si program a skús uhádnuť, čo sa stane po stlačení každej zo šípok hore, dole, vľavo a vpravo.

        Po tipnutí si spusti kód a zapíš si, čo si si všimol/la alebo to predisukutuj s partnerom.

        -   Aký je rozdiel medzi `keyDown()`, `keyWentDown()`, and `keyWentUp()`?
        -   Čo myslíš, čo robí výkričník (`!`) na riadku 10?
        -   Ako môžeš využiť stlačenia rôznych kláves v hre??
      CSD U3 Keypress Watchers Predict_2018: |-
        # Porozmýšľaj: Vstup užívateľa

        Doteraz sme používali `keyDown` ako spôsob kontroly programu užívateľom. To je však len jeden zo spôsobov na získanie vstupu od užívateľa. V skutočnosti existuje veľa možností _na zachytenie stlačenia kláves_! Podľa toho, ako chceš reagovať na stlačenie klávesy, je viacero blokov, ktoré môžeš použiť.

        Prečítaj si program a skús uhádnuť, čo sa stane po stlačení každej zo šípok hore, dole, vľavo a vpravo.

        Po tipnutí si spusti kód a zapíš si, čo si si všimol/la alebo to predisukutuj s partnerom.

        -   Aký je rozdiel medzi `keyDown()`, `keyWentDown()`, and `keyWentUp()`?
        -   Čo myslíš, čo robí výkričník (`!`) na riadku 10?
        -   Ako môžeš využiť stlačenia rôznych kláves v hre??
      CSD U3 Keypress Watchers Predict_2019: |-
        # Porozmýšľaj: Vstup užívateľa

        Doteraz sme používali `keyDown` ako spôsob kontroly programu užívateľom. To je však len jeden zo spôsobov na získanie vstupu od užívateľa. V skutočnosti existuje veľa možností _na zachytenie stlačenia kláves_! Podľa toho, ako chceš reagovať na stlačenie klávesy, je viacero blokov, ktoré môžeš použiť.

        Prečítaj si program a skús uhádnuť, čo sa stane po stlačení každej zo šípok hore, dole, vľavo a vpravo.

        Po tipnutí si spusti kód a zapíš si, čo si si všimol/la alebo to predisukutuj s partnerom.

        -   Aký je rozdiel medzi `keyDown()`, `keyWentDown()`, and `keyWentUp()`?
        -   Čo myslíš, čo robí výkričník (`!`) na riadku 10?
        -   Ako môžeš využiť stlačenia rôznych kláves v hre??
      CSD U3 Keypress Watchers_2018: |-
        # Predpokladaj: Vstup od užívateľa

        Doteraz sme používali `keyDown` ako spôsob kontroly programu užívateľmi. To je však len jeden zo spôsobov, ako od nich získavať vstupy. V skutočnosti existuje veľa spôsobov, ako _zaznamenať stlačenie klávesy_! Podľa toho, ako chceš reagovať na stlačenie klávesy, je viacero blokov, ktoré môžeš použiť.

        Prečítaj si program a skús uhádnuť, čo sa stane, keď stlačíš každú zo šípok hore, dole, vľavo a vpravo.

        Po tipnutí si spusti kód a zapíš si, čo si si všimol/la alebo to predisukutuj s partnerom:

        -   Aký je rozdiel medzi `keyDown()`, `keyWentDown()` a `keyWentUp()`?
        -   Čo myslíš, čo robí výkričník (`!`) na riadku 10?
        -   Ako môžeš použiť stlačenia rôznych kláves v hre?
      CSD U3 Keypress Watchers_2019: |-
        # Predpokladaj: Vstup od užívateľa

        Doteraz sme používali `keyDown` ako spôsob kontroly programu užívateľmi. To je však len jeden zo spôsobov, ako od nich získavať vstupy. V skutočnosti existuje veľa spôsobov, ako _zaznamenať stlačenie klávesy_! Podľa toho, ako chceš reagovať na stlačenie klávesy, je viacero blokov, ktoré môžeš použiť.

        Prečítaj si program a skús uhádnuť, čo sa stane, keď stlačíš každú zo šípok hore, dole, vľavo a vpravo.

        Po tipnutí si spusti kód a zapíš si, čo si si všimol/la alebo to predisukutuj s partnerom:

        -   Aký je rozdiel medzi `keyDown()`, `keyWentDown()` a `keyWentUp()`?
        -   Čo myslíš, čo robí výkričník (`!`) na riadku 10?
        -   Ako môžeš použiť stlačenia rôznych kláves v hre?
      CSD U3 L11 Freeplay: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L11 Freeplay_2018: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L11 Freeplay_2019: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L12 Freeplay: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L12 Freeplay_2018: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L12 Freeplay_2019: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L13 Freeplay: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L13 Freeplay_2018: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L13 Freeplay_2019: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L15 Freeplay: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L15 Freeplay_2018: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L15 Freeplay_2019: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L16 Freeplay: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L16 Freeplay_2018: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L16 Freeplay_2019: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L17 Freeplay: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L17 Freeplay_2018: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L17 Freeplay_2019: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L18 Freeplay: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L18 Freeplay_2018: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L18 Freeplay_2019: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L19 Freeplay: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L19 Freeplay_2018: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L19 Freeplay_2019: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L3 Freeplay: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L3 Freeplay_2018: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L3 Freeplay_2019: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L4 Freeplay: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L4 Freeplay_2018: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L4 Freeplay_2019: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L5 Freeplay: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L5 Freeplay_2018: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L5 Freeplay_2019: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L6 Freeplay: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L6 Freeplay_2018: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L6 Freeplay_2019: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L7 Freeplay: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L7 Freeplay_2018: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L7 Freeplay_2019: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L9 Freeplay: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L9 Freeplay_2018: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L9 Freeplay_2019: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 Mouse Input Bee 1: |-
        <img src="https://images.code.org/d2092b4f2debc336f963d48bd6cf4973-image-1477681020928.gif" style="float:right">

        # X a Y počítačovej myši

        Jedným z najjednoduchších spôsobov zadávania vstupu je, keď „sprite“ objekt sleduje pozíciu kurzora užívateľovej myši. **Súradnice x a y kurzora myši môžeš získať pomocou `World.mouseX` and `World.mouseY`.**   Toto je podobné, ako pri vlastnosti „sprite“ objektu. `World` je meno objektu. `mouseX` a `mouseY` sú názvy vlastností.

        # Urob toto

        -   Obrázok včeličky sme už za teba nahrali do záložky s animáciami.
        -   Vytvor „sprite“ so včeličkou a umiestni ho v strede obrazovky.
        -   Vo vnútri cyklu kreslenia uprav pozíciu „sprite“ objektu podľa kurzoru myši nasledovne:
            -   Nastav jeho súradnicu x tak, aby sa rovnala `World.mouseX`.
            -   Nastav jeho súradnicu y tak, aby sa rovnala `World.mouseY`.
        -   Spusti program a otestuj jeho funkčnosť.
      CSD U3 Mouse Input Bee 1_2018: |-
        <img src="https://images.code.org/d2092b4f2debc336f963d48bd6cf4973-image-1477681020928.gif" style="float:right">

        # X a Y počítačovej myši

        Jedným z najjednoduchších spôsobov zadávania vstupu je, keď „sprite“ objekt sleduje pozíciu kurzora užívateľovej myši. **Súradnice x a y kurzora myši môžeš získať pomocou `World.mouseX` and `World.mouseY`.**   Toto je podobné, ako pri vlastnosti „sprite“ objektu. `World` je meno objektu. `mouseX` a `mouseY` sú názvy vlastností.

        # Urob toto

        -   Obrázok včeličky sme už za teba nahrali do záložky s animáciami.
        -   Vytvor „sprite“ so včeličkou a umiestni ho v strede obrazovky.
        -   Vo vnútri cyklu kreslenia uprav pozíciu „sprite“ objektu podľa kurzoru myši nasledovne:
            -   Nastav jeho súradnicu x tak, aby sa rovnala `World.mouseX`.
            -   Nastav jeho súradnicu y tak, aby sa rovnala `World.mouseY`.
        -   Spusti program a otestuj jeho funkčnosť.
      CSD U3 Mouse Input Bee 1_2019: |-
        <img src="https://images.code.org/d2092b4f2debc336f963d48bd6cf4973-image-1477681020928.gif" style="float:right">

        # X a Y počítačovej myši

        Jedným z najjednoduchších spôsobov zadávania vstupu je, keď „sprite“ objekt sleduje pozíciu kurzora užívateľovej myši. **Súradnice x a y kurzora myši môžeš získať pomocou `World.mouseX` and `World.mouseY`.**   Toto je podobné, ako pri vlastnosti „sprite“ objektu. `World` je meno objektu. `mouseX` a `mouseY` sú názvy vlastností.

        # Urob toto

        -   Obrázok včeličky sme už za teba nahrali do záložky s animáciami.
        -   Vytvor „sprite“ so včeličkou a umiestni ho v strede obrazovky.
        -   Vo vnútri cyklu kreslenia uprav pozíciu „sprite“ objektu podľa kurzoru myši nasledovne:
            -   Nastav jeho súradnicu x tak, aby sa rovnala `World.mouseX`.
            -   Nastav jeho súradnicu y tak, aby sa rovnala `World.mouseY`.
        -   Spusti program a otestuj jeho funkčnosť.
      CSD U3 Mouse Input Bee 2: |-
        # Náhodný pohyb v okolí bodu

        <img src="https://images.code.org/d124946bb9e01a3623078c2a87beea8c-image-1477681483067.gif" style="float:right">

        Keď už vieme, ako dosiahnuť, aby včelička nasledovala pozíciu kurzora myši, nechajme ju okolo nieho lietať. Na to potrebujeme **k hodnotám `mouseX` alebo `mouseY` pridať náhodnú hodnotu v rozmedzí od -50 do 50.**

        # Urob toto

        Už máš vytvorený „sprite“ so včeličkou, ktorý sleduje kurzor myši.
        World.mouseX a World.mouseY.

        -   Aktualizuj súradnice x a y tak, aby boli vždy niekde blízko kurzoru myši.
            -   Pridaj náhodnú hodnotu od -50 do 50 k `World.mouseX` a `World.mouseY`.
        -   Ak je to potrebné, použi blok `World.frameRate` pre spomalenie animácie a nájdenie čo najlepšej obnovovacej frekvencie

        _Výzva: **Pridaj ďalšie 3 včeličky**, ktoré sa budú správať rovnako a spolu vytvoria roj._
      CSD U3 Mouse Input Bee 2_2018: |-
        # Náhodný pohyb v okolí bodu

        <img src="https://images.code.org/d124946bb9e01a3623078c2a87beea8c-image-1477681483067.gif" style="float:right">

        Keď už vieme, ako dosiahnuť, aby včelička nasledovala pozíciu kurzora myši, nechajme ju okolo nieho lietať. Na to potrebujeme **k hodnotám `mouseX` alebo `mouseY` pridať náhodnú hodnotu v rozmedzí od -50 do 50.**

        # Urob toto

        Už máš vytvorený „sprite“ so včeličkou, ktorý sleduje kurzor myši.
        World.mouseX a World.mouseY.

        -   Aktualizuj súradnice x a y tak, aby boli vždy niekde blízko kurzoru myši.
            -   Pridaj náhodnú hodnotu od -50 do 50 k `World.mouseX` a `World.mouseY`.
        -   Ak je to potrebné, použi blok `World.frameRate` pre spomalenie animácie a nájdenie čo najlepšej obnovovacej frekvencie

        _Výzva: **Pridaj ďalšie 3 včeličky**, ktoré sa budú správať rovnako a spolu vytvoria roj._
      CSD U3 Mouse Input Bee 2_2019: |-
        # Náhodný pohyb v okolí bodu

        <img src="https://images.code.org/d124946bb9e01a3623078c2a87beea8c-image-1477681483067.gif" style="float:right">

        Keď už vieme, ako dosiahnuť, aby včelička nasledovala pozíciu kurzora myši, nechajme ju okolo nieho lietať. Na to potrebujeme **k hodnotám `mouseX` alebo `mouseY` pridať náhodnú hodnotu v rozmedzí od -50 do 50.**

        # Urob toto

        Už máš vytvorený „sprite“ so včeličkou, ktorý sleduje kurzor myši.
        World.mouseX a World.mouseY.

        -   Aktualizuj súradnice x a y tak, aby boli vždy niekde blízko kurzoru myši.
            -   Pridaj náhodnú hodnotu od -50 do 50 k `World.mouseX` a `World.mouseY`.
        -   Ak je to potrebné, použi blok `World.frameRate` pre spomalenie animácie a nájdenie čo najlepšej obnovovacej frekvencie

        _Výzva: **Pridaj ďalšie 3 včeličky**, ktoré sa budú správať rovnako a spolu vytvoria roj._
      CSD U3 Movement Fish: |-
        <img src="https://images.code.org/7852ab38a8222ee827edeff2767e8efd-image-1492037897236.gif" style="float: right; margin-left: 20px;">

        # Fish Animation

        Using the counter pattern, make all three of the fish move in the image to the left. The blue fish should move the fastest, followed by the orange fish, with the green fish being the slowest.
      CSD U3 Movement Fish challenge_2018: |-
        # Viac rýb!

        Tentokrát skús zmeniť rotáciu každej ryby tak, že jej pohyb sa bude podobať plávaniu. Môžeš tiež pridať ďalšie detaily, ako napríklad bublinky, ktoré stúpajú ku hladine.
      CSD U3 Movement Fish challenge_2019: |-
        # Viac rýb!

        Tentokrát skús zmeniť rotáciu každej ryby tak, že jej pohyb sa bude podobať plávaniu. Môžeš tiež pridať ďalšie detaily, ako napríklad bublinky, ktoré stúpajú ku hladine.
      CSD U3 Movement Fish_2018: |-
        <img src="https://images.code.org/7852ab38a8222ee827edeff2767e8efd-image-1492037897236.gif" style="float: right; margin-left: 20px;">

        # Pridaj rybám animáciu

        Využitím vzoru pre počítanie naprogramuj ryby tak, aby sa všetky hýbali ako na obrázku vpravo. Modrá ryba by sa mala posúvať najrýchlejšie a zelená ryba by mala byť najpomalšia.
      CSD U3 Movement Fish_2019: |-
        <img src="https://images.code.org/7852ab38a8222ee827edeff2767e8efd-image-1492037897236.gif" style="float: right; margin-left: 20px;">

        # Pridaj rybám animáciu

        Využitím vzoru pre počítanie naprogramuj ryby tak, aby sa všetky hýbali ako na obrázku vpravo. Modrá ryba by sa mala posúvať najrýchlejšie a zelená ryba by mala byť najpomalšia.
      CSD U3 Movement Gears: |-
        <img src="https://images.code.org/eac110e64ccad62482c82d4ef66f237b-image-1465518920408.gif" style="width:200px; float:right; margin-left: 20px;">

        # Rotation Direction

        When you use the counter pattern for the `rotation` property with addition, the object will always rotate clockwise. Sometimes however you will want your sprite to rotate the other direction. To do this you can just use subtraction!

        # Do This

        There are three gears set up for you. You need to make the gears all look like they are rotating in sync with each other.

        -   Make the gears rotate so they look like they are working as one system.
        -   **Hint: They won't all rotate the same direction**.
      CSD U3 Movement Gears_2018: |-
        <img src="https://images.code.org/eac110e64ccad62482c82d4ef66f237b-image-1465518920408.gif" style="width:200px; float:right; margin-left: 20px;">

        # Rotation Direction

        When you use the counter pattern for the `rotation` property with addition, the object will always rotate clockwise. Sometimes however you will want your sprite to rotate the other direction. To do this you can just use subtraction!

        # Do This

        There are three gears set up for you. You need to make the gears all look like they are rotating in sync with each other.

        -   Make the gears rotate so they look like they are working as one system.
        -   **Hint: They won't all rotate the same direction**.
      CSD U3 Movement Gears_2019: |-
        <img src="https://images.code.org/eac110e64ccad62482c82d4ef66f237b-image-1465518920408.gif" style="width:200px; float:right; margin-left: 20px;">

        # Rotation Direction

        When you use the counter pattern for the `rotation` property with addition, the object will always rotate clockwise. Sometimes however you will want your sprite to rotate the other direction. To do this you can just use subtraction!

        # Do This

        There are three gears set up for you. You need to make the gears all look like they are rotating in sync with each other.

        -   Make the gears rotate so they look like they are working as one system.
        -   **Hint: They won't all rotate the same direction**.
      CSD U3 Movement Your Own 1: |-
        # Make an animation of your own

        Using the counter pattern and sprite properties, make an animation all your own. You might consider building on the static images you've made in the past, or come up with a new image to create or story to tell.

        # Do This

        To start, let's just get a static scene set up.

        -   Add images in the Animation Tab.
        -   Create sprites and assign images.
        -   Set up the draw loop to draw a background and your sprites.
      CSD U3 Movement Your Own 1_2018: |-
        # Make an animation of your own

        Using the counter pattern and sprite properties, make an animation all your own. You might consider building on the static images you've made in the past, or come up with a new image to create or story to tell.

        # Do This

        To start, let's just get a static scene set up.

        -   Add images in the Animation Tab.
        -   Create sprites and assign images.
        -   Set up the draw loop to draw a background and your sprites.
      CSD U3 Movement Your Own 1_2019: |-
        # Make an animation of your own

        Using the counter pattern and sprite properties, make an animation all your own. You might consider building on the static images you've made in the past, or come up with a new image to create or story to tell.

        # Do This

        To start, let's just get a static scene set up.

        -   Add images in the Animation Tab.
        -   Create sprites and assign images.
        -   Set up the draw loop to draw a background and your sprites.
      CSD U3 Movement Your Own 2: |-
        # Add movement to your animation

        With your static scene set up, you can now add some movement. When you are satisfied with your program, click the "Submit" button to turn it in. You can always unsubmit and continue working if you want to add features.

        # Do This

        In the draw loop

        -   Identify which sprite properties to change.
        -   Update those properties using the counter pattern.

        _Tip: If your counter pattern isn't working like you expect, add watchers to help debug your program._
      CSD U3 Movement Your Own 2_2018: |-
        # Pridaj pohyb do animáce

        Ak už máš vytvorený statický obrázok, môžeš do neho pridať nejaký pohyb.

        # Urob toto

        V cykle kreslenia

        -   Urči, ktoré vlastnosti postáv je potrebné zmeniť
        -   Zmeň tieto nastavenia pomocou vzoru pre počítanie

        _Tip: Ak tvoj vzor pre počítanie nepracuje tak, ako očakávaš, do kódu pridaj nástroje, ktoré ti pomôžu odstrániť chyby._
      CSD U3 Movement Your Own 2_2019: |-
        # Add movement to your animation

        With your static scene set up, you can now add some movement. When you are satisfied with your program, click the "Submit" button to turn it in. You can always unsubmit and continue working if you want to add features.

        # Do This

        In the draw loop

        -   Identify which sprite properties to change.
        -   Update those properties using the counter pattern.

        _Tip: If your counter pattern isn't working like you expect, add watchers to help debug your program._
      CSD U3 Plotting Shapes Shape Lab: "# Drawing Shapes\n\nExplore using this tool
        that lets you draw different colored shapes. \n\nMake sure you hit \"Run\"
        and try out turning on the grid to help you place shapes precisely.\n\n![](<https://images.code.org/d52dbc112dcc088858c4b8f54be09aa1-image-1502914103923.07.59
        PM.png>)"
      CSD U3 Plotting Shapes Shape Lab_2018: "# Drawing Shapes\n\nExplore using this
        tool that lets you draw different colored shapes. \n\nMake sure you hit \"Run\"
        and try out turning on the grid to help you place shapes precisely.\n\n![](<https://images.code.org/d52dbc112dcc088858c4b8f54be09aa1-image-1502914103923.07.59
        PM.png>)"
      CSD U3 Plotting Shapes Shape Lab_2019: "# Drawing Shapes\n\nExplore using this
        tool that lets you draw different colored shapes. \n\nMake sure you hit \"Run\"
        and try out turning on the grid to help you place shapes precisely.\n\n![](<https://images.code.org/d52dbc112dcc088858c4b8f54be09aa1-image-1502914103923.07.59
        PM.png>)"
      CSD U3 Random Debug Cloud: |-
        <img src="https://images.code.org/529b7e5ddda4683e6a0cc5b3028e4dbf-image-1490824752133.58.50 PM.png" style="float:right;height:150px">

        # Debug - Using 4 Parameters

        Now that the grass is working, let's add a cloud to the sky. Unfortunately, it looks a little funny right now.

        # Do This

        -   Debug this program to make the cloud wider than it is tall, like in the image.
        -   Hint: You'll need to change two parameters. Which ones set your cloud's width and height?

        _Challenge: The sun is not in the exact same place as in the picture.  Can you change the sun's coordinates so that the picture matches completely?_
      CSD U3 Random Debug Cloud_2018: |-
        <img src="https://images.code.org/45d1d513f5ed63592e98ea3e4a08840c-image-1520403109680.11.28 PM.png" style="float:right;height:150px">

        # Oprava chýb - Použitie 4 parametrov

        Keď už je tráva nakreslená správne, pridaj na oblohu oblak. Momentálne náš obrázok vyzerá trochu smiešne.

        # Urob toto

        -   Oprav tento program tak, aby bol oblak viac široký ako dlhý – presne tak, ako je nakreslené na obrázku.
        -   Nápoveda: Musíš zmeniť dva parametre. Ktorými z nich sa nastavuje šírka a výška oblaku?
      CSD U3 Random Debug Cloud_2018_2019: |-
        <img src="https://images.code.org/45d1d513f5ed63592e98ea3e4a08840c-image-1520403109680.11.28 PM.png" style="float:right;height:150px">

        # Oprava chýb - Použitie 4 parametrov

        Keď už je tráva nakreslená správne, pridaj na oblohu oblak. Momentálne náš obrázok vyzerá trochu smiešne.

        # Urob toto

        -   Oprav tento program tak, aby bol oblak viac široký ako dlhý – presne tak, ako je nakreslené na obrázku.
        -   Nápoveda: Musíš zmeniť dva parametre. Ktorými z nich sa nastavuje šírka a výška oblaku?
      CSD U3 Random Debug Grass: |-
        <img src="https://images.code.org/83269268e1c4f8af8551253ff4573b43-image-1490825158453.03.45 PM.png" style="float:right;height:150px">

        # Debug - Using 4 Parameters

        This program uses the four parameter version of `rect()` and `ellipse()` to draw a simple scene.

        # Do This

        -   Debug this program and correct the error so that the grass extends across the entire bottom.
        -   Hint: You only have to change one number. Which parameter makes your rectangle (the grass) wider?
      CSD U3 Random Debug Grass_2018: |-
        <img src="https://images.code.org/08c7c6cd82f4d4ff57459165f29ab624-image-1520402652290.03.37 PM.png" style="float:right;height:150px">

        # Oprava chýb - Použitie 4 parametrov

        Tento program používa bloky `rect()` (štvoruholník) a `ellipse()` (elipsa) vo verzii so štyrmi parametrami pre nakreslenie jednoduchého obrázku.

        # Urob toto

        -   Oprav tento program tak, aby sa tráva rozprestierala po celej spodnej časti obrázka.
        -   Nápoveda: Stačí zmeniť iba jedno číslo. Ktorý parameter urobí obdĺžnik (trávu) širším?
      CSD U3 Random Debug Grass_2019: |-
        <img src="https://images.code.org/08c7c6cd82f4d4ff57459165f29ab624-image-1520402652290.03.37 PM.png" style="float:right;height:150px">

        # Oprava chýb - Použitie 4 parametrov

        Tento program používa bloky `rect()` (štvoruholník) a `ellipse()` (elipsa) vo verzii so štyrmi parametrami pre nakreslenie jednoduchého obrázku.

        # Urob toto

        -   Oprav tento program tak, aby sa tráva rozprestierala po celej spodnej časti obrázka.
        -   Nápoveda: Stačí zmeniť iba jedno číslo. Ktorý parameter urobí obdĺžnik (trávu) širším?
      CSD U3 Random Ellipse Behind: |-
        <img src="https://images.code.org/a8ed6092389aedceceb38a83ac59fae1-image-1490832453029.07.10 PM.png" style="float:right;height:150px">

        # Do This

        -   Write code that makes an orange ellipse behind the green one.
        -   Don't worry about the exact size as long as the green ellipse is entirely inside the orange one.
      CSD U3 Random Ellipse Behind_2018: |-
        <img src="https://images.code.org/dd73760e7129225b1e9f53a542960b9a-image-1520402430622.59.19 PM.png" style="float:right;height:150px">

        # Urob toto

        -   Napíš kód, ktorý vytvorí oranžovú elipsu za zelenou elipsou.
        -   Nemusíš riešiť presnú veľkosť elíps, pokiaľ bude splnené, že zelená elipsa je celá vo vnútri oranžovej.
      CSD U3 Random Ellipse Behind_2018_2019: |-
        <img src="https://images.code.org/dd73760e7129225b1e9f53a542960b9a-image-1520402430622.59.19 PM.png" style="float:right;height:150px">

        # Urob toto

        -   Napíš kód, ktorý vytvorí oranžovú elipsu za zelenou elipsou.
        -   Nemusíš riešiť presnú veľkosť elíps, pokiaľ bude splnené, že zelená elipsa je celá vo vnútri oranžovej.
      CSD U3 Random Taller Rectangle: |-
        <img src="https://images.code.org/02871e5c5d041ea1724e4a02d3697941-image-1492721665345.54.10 PM.png" style="float:right;height:150px; border: 1px solid #CCC">

        # Rectangle Size

        These `rect` blocks have two more parameters that you can use to control the size. Notice that the `noStroke()` block turns off the stroke (border) for shapes.

        # Do This

        -   Look at the code and try to figure out how the last two inputs in `rect` work.
        -   Change the numbers in the second `rect` to make red rectangle longer than the blue one.
      CSD U3 Random Taller Rectangle_2018: |-
        <img src="https://images.code.org/02871e5c5d041ea1724e4a02d3697941-image-1492721665345.54.10 PM.png" style="float:right;height:150px; border: 1px solid #CCC">

        # Rectangle Size

        These `rect` blocks have two more parameters that you can use to control the size. Notice that the `noStroke()` block turns off the stroke (border) for shapes.

        # Do This

        -   Look at the code and try to figure out how the last two inputs in `rect` work.
        -   Change the numbers in the second `rect` to make red rectangle longer than the blue one.
      CSD U3 Random Taller Rectangle_2019: |-
        <img src="https://images.code.org/02871e5c5d041ea1724e4a02d3697941-image-1492721665345.54.10 PM.png" style="float:right;height:150px; border: 1px solid #CCC">

        # Rectangle Size

        These `rect` blocks have two more parameters that you can use to control the size. Notice that the `noStroke()` block turns off the stroke (border) for shapes.

        # Do This

        -   Look at the code and try to figure out how the last two inputs in `rect` work.
        -   Change the numbers in the second `rect` to make red rectangle longer than the blue one.
      CSD U3 Random background: |-
        # Background

        Sometimes you'll want to fill the entire screen with a color.  For that, you can use `background`.  It covers everything on the screen with the color you choose.

        # Do This

        -   Run the code to see `background` work.
        -   Change the background from yellow to orange.

        _Challenge: There is a purple square that is covered up by the background.  Can you change the order of the code so you can see both the purple and blue squares?_
      CSD U3 Random background2: |-
        <img src="https://images.code.org/a68cfd23a13b6bdeef91dc9fd584f657-image-1491332601738.03.04 PM.png" style="float:right;height:150px">

        # Background

        `background()` will draw on top of everything already in your drawing, so it's important to think about the order of your code.

        # Do This

        -   Use `background()` to make a "black" background behind the green circle.
      CSD U3 Random background2_2018: |-
        <img src="https://images.code.org/a68cfd23a13b6bdeef91dc9fd584f657-image-1491332601738.03.04 PM.png" style="float:right;height:150px">

        # Background

        `background()` will draw on top of everything already in your drawing, so it's important to think about the order of your code.

        # Do This

        -   Use `background()` to make a "black" background behind the green circle.
      CSD U3 Random background2_2019: |-
        <img src="https://images.code.org/a68cfd23a13b6bdeef91dc9fd584f657-image-1491332601738.03.04 PM.png" style="float:right;height:150px">

        # Background

        `background()` will draw on top of everything already in your drawing, so it's important to think about the order of your code.

        # Do This

        -   Use `background()` to make a "black" background behind the green circle.
      CSD U3 Random background_2018: |-
        # Background

        Sometimes you'll want to fill the entire screen with a color.  For that, you can use `background`.  It covers everything on the screen with the color you choose.

        # Do This

        -   Run the code to see `background` work.
        -   Change the background from yellow to orange.

        _Challenge: There is a purple square that is covered up by the background.  Can you change the order of the code so you can see both the purple and blue squares?_
      CSD U3 Random background_2019: |-
        # Background

        Sometimes you'll want to fill the entire screen with a color.  For that, you can use `background`.  It covers everything on the screen with the color you choose.

        # Do This

        -   Run the code to see `background` work.
        -   Change the background from yellow to orange.

        _Challenge: There is a purple square that is covered up by the background.  Can you change the order of the code so you can see both the purple and blue squares?_
      CSD U3 Random rainbow snake: |-
        <img src="https://images.code.org/d1e4780e483ffa510a27e91b2b1f1963-image-1491341267537.26.14 PM.png" style="float:right;height:150px">

        # Rainbow Snake

        This program draws a very rare breed of rainbow snake. To make the snake draw differently every time you'll need to use random numbers.

        # Do This

        -   Run the program several times to see how the starter code works.
        -   Add at least three new different colored circles to your rainbow snake.
        -   Use `randomNumber()` to make the rest of the snake's body move up and down like the first three.

        _Challenge: Can you make size of some of the circles random, too?_
      CSD U3 Random rainbow snake_2018: |-
        <img src="https://images.code.org/6af643f712b042e5b076f06cc2f902e2-image-1520404404645.32.58 PM.png" style="float:right;height:150px">

        # Dúhový had

        Tento program nakreslí veľmi jedinečný druh dúhového hada. Pre nakreslenie vždy iného hada musíš použiť náhodné čísla.

        # Urob toto

        -   Spusti program niekoľkokrát, aby si videl/a, ako funguje, než ho začneš upravovať.
        -   K dúhovému hadovi pridaj aspoň tri rôzne farebné kruhy.
        -   Použi blok `randomNumber()` (náhodné číslo) pre posun zvyšku tela hada hore alebo dole tak, ako pri posledných troch kruhoch.

        Výzva: Vieš náhodnou urobiť aj veľkosť kruhov?
      CSD U3 Random rainbow snake_2018_2019: |-
        <img src="https://images.code.org/6af643f712b042e5b076f06cc2f902e2-image-1520404404645.32.58 PM.png" style="float:right;height:150px">

        # Rainbow Snake

        This program draws a very rare breed of rainbow snake. To make the snake draw differently every time you'll need to use random numbers.

        # Do This

        -   Run the program several times to see how the starter code works.
        -   Add at least three new different colored circles to your rainbow snake.
        -   Use `randomNumber()` to make the rest of the snake's body move up and down like the first three.

        _Challenge: Can you make the size of some of the circles random, too?_
      CSD U3 Random random ellipse: |-
        # Random Numbers

        `randomNumber()` chooses a random number between a minimum and maximum value. You can use this code instead of writing in the specific number.  If you make your drawings with random numbers it will look a little bit different every time you run your program.

        # Do This

        -   Run the program several times to see how it works.
        -   Change the numbers inside `randomNumber` and run the code again a few times to see what changes.
      CSD U3 Random random ellipse2: |-
        <img src="https://images.code.org/ff3be801c7e634d49584aac103df292a-image-1491334428729.33.18 PM.png" style="float:right;height:150px">

        # Random Numbers

        Here's the same sun from last time.  Right now only the x-coordinate is random, but you can make the y-coordinate random, too.

        # Do This

        -   Use `randomNumber()` for the ellipse's Y parameter so the circle is drawn in a random Y position, too.
        -   As long as your circle is appearing at random X and Y positions, you can move on.
      CSD U3 Random random ellipse2_2018: |-
        <img src="https://images.code.org/8306a9fd01470ac8582cf4374dde7033-image-1520403513967.17.40 PM.png" style="float:right;height:150px">

        # Náhodné čísla

        Tu máme rovnaké slnko ako naposledy. V tomto momente je náhodná len súradnica x. Náhodnou môžeš urobiť aj súradnicu y.

        # Urob toto

        -   Použi blok `randomNumber()` (náhodné číslo) pre parameter Y elipsy tak, aby bol kruh nakreslený aj v náhodnej výške.
        -   Keď sa kruh nakreslí na náhodnej súradnici, môžeš pokračovať ďalej.
      CSD U3 Random random ellipse2_2018_2019: |-
        <img src="https://images.code.org/8306a9fd01470ac8582cf4374dde7033-image-1520403513967.17.40 PM.png" style="float:right;height:150px">

        # Náhodné čísla

        Tu máme rovnaké slnko ako naposledy. V tomto momente je náhodná len súradnica x. Náhodnou môžeš urobiť aj súradnicu y.

        # Urob toto

        -   Použi blok `randomNumber()` (náhodné číslo) pre parameter Y elipsy tak, aby bol kruh nakreslený aj v náhodnej výške.
        -   Keď sa kruh nakreslí na náhodnej súradnici, môžeš pokračovať ďalej.
      CSD U3 Random random ellipse_2018: |-
        # Random Numbers

        `randomNumber()` chooses a random number between a minimum and maximum value. You can use this code instead of writing in the specific number.  If you make your drawings with random numbers it will look a little bit different every time you run your program.

        # Do This

        -   Run the program several times to see how it works.
        -   Change the numbers inside `randomNumber` and run the code again a few times to see what changes.
      CSD U3 Random random ellipse_2018_2019: |-
        # Random Numbers

        `randomNumber()` chooses a random number between a minimum and maximum value. You can use this code instead of writing in the specific number.  If you make your drawings with random numbers it will look a little bit different every time you run your program.

        # Do This

        -   Run the program several times to see how it works.
        -   Change the numbers inside `randomNumber` and run the code again a few times to see what changes.
      CSD U3 Scene Example: |-
        # Sprite Scenes

        By combining shapes, sprites, and a new block called `text`, you can create simple scenes, stories, or comics. While this example is fairly simple, you can combine as many sprites and shapes as you like to create scenes as complex or detailed as you like.

        ## Sketch It Out

        Before moving on, take a second to sketch out a scene that you'd like to make at the end of this lesson. Consider the simple shapes that you've used in the past, sprites for your characters, and any text that you'd like on the screen. Once you've sketched out an idea, you'll learn about `text` and how to compose a scene.
      CSD U3 Scene Example_2018: |-
        # Zostavy "sprite" objektov

        Kombináciou tvarov, "sprite" objektov a textu môžeš vytvárať jednoduché zostavy, príbehy alebo komiks. Náš príklad je pomerne jednoduchý, ale ty môžeš kombinovať toľko "sprite" objektov a tvarov, koľko chceš, aby si vytvtoril/a rôzne komplexné obrázky.

        ## Načrtni si svoj obrázok

        Predtým ako začneš, venuj chvíľku načrtnutiu obrázku, ktorý by si chcel/a vytvoriť. Môžeš použiť jednoduché tvary, ktoré si použil/a v minulosti, rovnako ako rozličné "sprite objekty" a text. Keď si svoj nápad nakreslíš, naučíme ťa, ako používať blok `text` a ako zostaviť obrázok.
      CSD U3 Scene Example_2018_2019: |-
        # Sprite Scenes

        By combining shapes, sprites, and text, you can create simple scenes, stories, or comics. While this example is fairly simple, you can combine as many sprites and shapes as you like to create scenes as complex or detailed as you like.

        ## Sketch It Out

        Before moving on, take a second to sketch out a scene that you'd like to make at the end of this lesson. Consider the simple shapes that you've used in the past, sprites for your characters, and any text that you'd like on the screen. Once you've sketched out an idea, you'll learn about how to compose a scene.
      CSD U3 Sprite Movement Left: |-
        <img src="https://images.code.org/9f9162cb94a02d9b3aba9b6067d0281a-image-1491862771496.gif" style="float: right; margin-left: 20px">

        # Moving to the Left

        If adding to a sprite's x coordinate makes it move to the right, how could you make it move to the left?

        # Do This

        Make your program animate like the image to the right. Update `fly.x` inside the draw loop so that in each frame the fly is drawn a little bit further to the left.

        _Tip: You can make your sprites move faster by adding or subtracting larger numbers. The fly in our example moves about twice as fast as the plane in the last level._
      CSD U3 Sprite Movement Left_2018: |-
        <img src="https://images.code.org/9f9162cb94a02d9b3aba9b6067d0281a-image-1491862771496.gif" style="float: right; margin-left: 20px">

        # Moving to the Left

        If adding to a sprite's x coordinate makes it move to the right, how could you make it move to the left?

        # Do This

        Make your program animate like the image to the right. Update `fly.x` inside the draw loop so that in each frame the fly is drawn a little bit further to the left.

        _Tip: You can make your sprites move faster by adding or subtracting larger numbers. The fly in our example moves about twice as fast as the plane in the last level._
      CSD U3 Sprite Movement Left_2019: |-
        <img src="https://images.code.org/9f9162cb94a02d9b3aba9b6067d0281a-image-1491862771496.gif" style="float: right; margin-left: 20px">

        # Moving to the Left

        If adding to a sprite's x coordinate makes it move to the right, how could you make it move to the left?

        # Do This

        Make your program animate like the image to the right. Update `fly.x` inside the draw loop so that in each frame the fly is drawn a little bit further to the left.

        _Tip: You can make your sprites move faster by adding or subtracting larger numbers. The fly in our example moves about twice as fast as the plane in the last level._
      CSD U3 Sprite Movement Right: |-
        <img src="https://images.code.org/629bc615a879f0f3dc9f290bea2358c8-image-1491861334164.gif" style="float: right; margin-left: 20px">

        # Sprite Movement

        Using the counter pattern, you can write programs that animate sprites smoothly. Adding to or removing from a sprite's `x` or `y` property in the draw loop makes your sprite move just a bit each time it is redrawn.

        # Do This

        Make your program animate like the image to the right. We've already added a line to update `plane.x` in the draw loop, but it needs to be finished.
      CSD U3 Sprite Movement Right_2018: |-
        <img src="https://images.code.org/629bc615a879f0f3dc9f290bea2358c8-image-1491861334164.gif" style="float: right; margin-left: 20px">

        # Sprite Movement

        Using the counter pattern, you can write programs that animate sprites smoothly. Adding to or removing from a sprite's `x` or `y` property in the draw loop makes your sprite move just a bit each time it is redrawn.

        # Do This

        Make your program animate like the image to the right. We've already added a line to update `plane.x` in the draw loop, but it needs to be finished.
      CSD U3 Sprite Movement Right_2019: |-
        <img src="https://images.code.org/629bc615a879f0f3dc9f290bea2358c8-image-1491861334164.gif" style="float: right; margin-left: 20px">

        # Sprite Movement

        Using the counter pattern, you can write programs that animate sprites smoothly. Adding to or removing from a sprite's `x` or `y` property in the draw loop makes your sprite move just a bit each time it is redrawn.

        # Do This

        Make your program animate like the image to the right. We've already added a line to update `plane.x` in the draw loop, but it needs to be finished.
      CSD U3 Sprites anitab 1: |-
        # Images

        Over on the **Animations Tab**, you'll see three images that have been loaded for you. You can get to the animations tab by clicking the **Animation** button above the display area.

        <img src="https://images.code.org/f694a37bbadcf0533e7b19d8c0f5309b-image-1465580394090.35.11 PM.png" style="width:300px;float:right">

        Once you have created a sprite, you can **use the `sprite.setAnimation()` command to change the look of your sprite from a rectangle to a picture.** All the images you have loaded in the Animation Tab show up in the `sprite.setAnimation()` dropdown.  The alien is set up for you as an example.

        # Do This

        Change the sprite to your favorite image from the animations tab.

        -   A sprite that is set to an image has already been created for you.
        -   Run the code to see how it works.
        -   Change the input to the `setAnimation` command to change the look of the sprite.
        -   Try out all the different images.
      CSD U3 Sprites anitab 1_2018: |-
        # Images

        Over on the **Animations Tab**, you'll see three images that have been loaded for you. You can get to the animations tab by clicking the **Animation** button above the display area.

        <img src="https://images.code.org/f694a37bbadcf0533e7b19d8c0f5309b-image-1465580394090.35.11 PM.png" style="width:300px;float:right">

        Once you have created a sprite, you can **use the `sprite.setAnimation()` command to change the look of your sprite from a rectangle to a picture.** All the images you have loaded in the Animation Tab show up in the `sprite.setAnimation()` dropdown.  The alien is set up for you as an example.

        # Do This

        Change the sprite to your favorite image from the animations tab.

        -   A sprite that is set to an image has already been created for you.
        -   Run the code to see how it works.
        -   Change the input to the `setAnimation` command to change the look of the sprite.
        -   Try out all the different images.
      CSD U3 Sprites anitab 1_2019: |-
        # Images

        Over on the **Animations Tab**, you'll see three images that have been loaded for you. You can get to the animations tab by clicking the **Animation** button above the display area.

        <img src="https://images.code.org/f694a37bbadcf0533e7b19d8c0f5309b-image-1465580394090.35.11 PM.png" style="width:300px;float:right">

        Once you have created a sprite, you can **use the `sprite.setAnimation()` command to change the look of your sprite from a rectangle to a picture.** All the images you have loaded in the Animation Tab show up in the `sprite.setAnimation()` dropdown.  The alien is set up for you as an example.

        # Do This

        Change the sprite to your favorite image from the animations tab.

        -   A sprite that is set to an image has already been created for you.
        -   Run the code to see how it works.
        -   Change the input to the `setAnimation` command to change the look of the sprite.
        -   Try out all the different images.
      CSD U3 Sprites anitab 2: |-
        # Upload your own image

        You can also use the Animation tab to upload or draw your own image.

        # Do This

        You are going to make a flying kite. You can search the web for an image or create a new animation from scratch by drawing your own kite.

        -   Download your kite image. Images with transparent backgrounds work best.
        -   Open the animations tab.
        -   Click <img src="https://images.code.org/346f6657dba57b0c3bd5deb534f76b69-image-1466194432449.13.05 PM.png" style="width:50px"> and then <img src="https://images.code.org/60c0371b45b29f10a3c8530db9154428-image-1466194434329.13.16 PM.png" style="width:50px"> to upload an image.
        -   Select the file from your computer.
        -   Rename your image so it is easy to remember. To rename it click the text below the image.
        -   Back in code mode, use `sprite.setAnimation()` to make your `kite` sprite show your new animation.

        Don't worry if your kite image is too big! You'll learn how to fix that in the next level.
      CSD U3 Sprites anitab 2_2018: |-
        # Upload your own image

        You can also use the Animation tab to upload or draw your own image.

        # Do This

        You are going to make a flying kite. You can search the web for an image or create a new animation from scratch by drawing your own kite.

        -   Download your kite image. Images with transparent backgrounds work best.
        -   Open the animations tab.
        -   Click <img src="https://images.code.org/346f6657dba57b0c3bd5deb534f76b69-image-1466194432449.13.05 PM.png" style="width:50px"> and then <img src="https://images.code.org/60c0371b45b29f10a3c8530db9154428-image-1466194434329.13.16 PM.png" style="width:50px"> to upload an image.
        -   Select the file from your computer.
        -   Rename your image so it is easy to remember. To rename it click the text below the image.
        -   Back in code mode, use `sprite.setAnimation()` to make your `kite` sprite show your new animation.

        Don't worry if your kite image is too big! You'll learn how to fix that in the next level.
      CSD U3 Sprites anitab 2_2019: |-
        # Upload your own image

        You can also use the Animation tab to upload or draw your own image.

        # Do This

        You are going to make a flying kite. You can search the web for an image or create a new animation from scratch by drawing your own kite.

        -   Download your kite image. Images with transparent backgrounds work best.
        -   Open the animations tab.
        -   Click <img src="https://images.code.org/346f6657dba57b0c3bd5deb534f76b69-image-1466194432449.13.05 PM.png" style="width:50px"> and then <img src="https://images.code.org/60c0371b45b29f10a3c8530db9154428-image-1466194434329.13.16 PM.png" style="width:50px"> to upload an image.
        -   Select the file from your computer.
        -   Rename your image so it is easy to remember. To rename it click the text below the image.
        -   Back in code mode, use `sprite.setAnimation()` to make your `kite` sprite show your new animation.

        Don't worry if your kite image is too big! You'll learn how to fix that in the next level.
      CSD U3 Sprites anitab 3: |-
        # Resizing with Scale

        In the _Sprites_ drawer of the toolbox, you'll see a new block called `sprite.scale`. It lets you change the size of a sprite in relation to its original size. `sprite.scale = 1` is the normal size. `sprite.scale = 0.5` makes your sprite half as big, while `sprite.scale = 2` makes it twice as big.

        # Do This

        The program should already include your newly uploaded image, but it's probably not the _perfect_ size. Use `sprite.scale` to change the size of your `kite` sprite.

        _Hint: the order of your code matters! You need to add `sprite.scale` **after** you've created the sprite, but **before** you draw the sprite with `drawSprites()`. For clarity, try to keep all of your sprite code together at the top of your program._
      CSD U3 Sprites anitab 3_2018: |-
        # Resizing with Scale

        In the _Sprites_ drawer of the toolbox, you'll see a new block called `sprite.scale`. It lets you change the size of a sprite in relation to its original size. `sprite.scale = 1` is the normal size. `sprite.scale = 0.5` makes your sprite half as big, while `sprite.scale = 2` makes it twice as big.

        # Do This

        The program should already include your newly uploaded image, but it's probably not the _perfect_ size. Use `sprite.scale` to change the size of your `kite` sprite.

        _Hint: the order of your code matters! You need to add `sprite.scale` **after** you've created the sprite, but **before** you draw the sprite with `drawSprites()`. For clarity, try to keep all of your sprite code together at the top of your program._
      CSD U3 Sprites anitab 3_2019: |-
        # Resizing with Scale

        In the _Sprites_ drawer of the toolbox, you'll see a new block called `sprite.scale`. It lets you change the size of a sprite in relation to its original size. `sprite.scale = 1` is the normal size. `sprite.scale = 0.5` makes your sprite half as big, while `sprite.scale = 2` makes it twice as big.

        # Do This

        The program should already include your newly uploaded image, but it's probably not the _perfect_ size. Use `sprite.scale` to change the size of your `kite` sprite.

        _Hint: the order of your code matters! You need to add `sprite.scale` **after** you've created the sprite, but **before** you draw the sprite with `drawSprites()`. For clarity, try to keep all of your sprite code together at the top of your program._
      CSD U3 Sprites intro debug: |-
        <img src="https://images.code.org/63207a624d751aacb376db18cdf09eec-image-1491255841823.png" style="width: 150px; float: right; margin-left: 20px; border: 1px solid #f2f2f2;">

        # Debug

        This program should create two new sprites, one on the left of the screen and one on the right, but it's only drawing one. **You don't need to add any code**, just rearrange the code already present to make sure that both sprites show up like the picture on the right.
      CSD U3 Sprites intro debug_2018: |-
        <img src="https://images.code.org/63207a624d751aacb376db18cdf09eec-image-1491255841823.png" style="width: 150px; float: right; margin-left: 20px; border: 1px solid #f2f2f2;">

        # Debug

        This program should create two new sprites, one on the left of the screen and one on the right, but it's only drawing one. **You don't need to add any code**, just rearrange the code already present to make sure that both sprites show up like the picture on the right.
      CSD U3 Sprites intro debug_2019: |-
        <img src="https://images.code.org/63207a624d751aacb376db18cdf09eec-image-1491255841823.png" style="width: 150px; float: right; margin-left: 20px; border: 1px solid #f2f2f2;">

        # Debug

        This program should create two new sprites, one on the left of the screen and one on the right, but it's only drawing one. **You don't need to add any code**, just rearrange the code already present to make sure that both sprites show up like the picture on the right.
      CSD U3 Sprites intro sprites: |-
        # Sprites

        **Creating Sprites:**  <img src = "https://images.code.org/92e06cddc5355dc37aa2c6a033793dd0-image-1466027030772.43.41 PM.png" style = "height:30px">  creates a new sprite and assigns it to a variable.  The default name is `sprite`, so you'll want to change it to something more meaningful.

        **Drawing Sprites:** Sprites only appear on the screen when you draw them there. Calling ![](<https://images.code.org/82a18afda6463323529acaa3dc326d55-image-1466004008638.19.16 AM.png>) will draw all of your created sprites on the screen.

        <img src="https://images.code.org/fe5905d6b89c14dca525865f4e579104-image-1491254588895.png" style="width: 150px; float: right; border: 1px solid #f2f2f2; margin-left: 20px">

        # Do This

        This program includes comments that let you know where to place code but otherwise is blank. Your program should look like the image on the right.

        -   Add `var sprite = createSprite(200, 200)` under the comment `Creating Sprites`.
            -   You can ignore the yellow triangle warning for now.  It's just telling you that you haven't used your sprite yet.
        -   Add `drawSprites()` under the comment `Drawing`.
        -   **Run the code** to draw your first sprite on the screen.

        _Hint: Sprites are drawn from their center, which means that center of the square (not the top left corner) is at (200, 200)._
      CSD U3 Sprites intro sprites_2018: |-
        # Sprites

        **Creating Sprites:**  <img src = "https://images.code.org/92e06cddc5355dc37aa2c6a033793dd0-image-1466027030772.43.41 PM.png" style = "height:30px">  creates a new sprite and assigns it to a variable.  The default name is `sprite`, so you'll want to change it to something more meaningful.

        **Drawing Sprites:** Sprites only appear on the screen when you draw them there. Calling ![](<https://images.code.org/82a18afda6463323529acaa3dc326d55-image-1466004008638.19.16 AM.png>) will draw all of your created sprites on the screen.

        <img src="https://images.code.org/fe5905d6b89c14dca525865f4e579104-image-1491254588895.png" style="width: 150px; float: right; border: 1px solid #f2f2f2; margin-left: 20px">

        # Do This

        This program includes comments that let you know where to place code but otherwise is blank. Your program should look like the image on the right.

        -   Add `var sprite = createSprite(200, 200)` under the comment `Creating Sprites`.
            -   You can ignore the yellow triangle warning for now.  It's just telling you that you haven't used your sprite yet.
        -   Add `drawSprites()` under the comment `Drawing`.
        -   **Run the code** to draw your first sprite on the screen.

        _Hint: Sprites are drawn from their center, which means that center of the square (not the top left corner) is at (200, 200)._
      CSD U3 Sprites intro sprites_2019: |-
        # Sprites

        **Creating Sprites:**  <img src = "https://images.code.org/92e06cddc5355dc37aa2c6a033793dd0-image-1466027030772.43.41 PM.png" style = "height:30px">  creates a new sprite and assigns it to a variable.  The default name is `sprite`, so you'll want to change it to something more meaningful.

        **Drawing Sprites:** Sprites only appear on the screen when you draw them there. Calling ![](<https://images.code.org/82a18afda6463323529acaa3dc326d55-image-1466004008638.19.16 AM.png>) will draw all of your created sprites on the screen.

        <img src="https://images.code.org/fe5905d6b89c14dca525865f4e579104-image-1491254588895.png" style="width: 150px; float: right; border: 1px solid #f2f2f2; margin-left: 20px">

        # Do This

        This program includes comments that let you know where to place code but otherwise is blank. Your program should look like the image on the right.

        -   Add `var sprite = createSprite(200, 200)` under the comment `Creating Sprites`.
            -   You can ignore the yellow triangle warning for now.  It's just telling you that you haven't used your sprite yet.
        -   Add `drawSprites()` under the comment `Drawing`.
        -   **Run the code** to draw your first sprite on the screen.

        _Hint: Sprites are drawn from their center, which means that center of the square (not the top left corner) is at (200, 200)._
      CSD U3 Sprites scene challenge: |-
        # Challenge: Extend your scene

        _Check with your teacher before starting this challenge._

        Now that you've finished your scene, consider adding to it or creating another.
      CSD U3 Sprites scene challenge_2018: |-
        # Challenge: Extend your scene

        _Check with your teacher before starting this challenge._

        Now that you've finished your scene, consider adding to it or creating another.
      CSD U3 Sprites scene challenge_2019: |-
        # Challenge: Extend your scene

        _Check with your teacher before starting this challenge._

        Now that you've finished your scene, consider adding to it or creating another.
      CSD U3 Sprites scene drawing: |-
        # Create Your Scene - Drawing

        You're going to start creating a scene of your own. If you haven't already, take a minute to sketch out a picture of your scene (consider using graph paper). Once you have an idea and plan for your scene, start drawing the background.

        # Do This

        -   Use a `background()` command to fill the screen with a color.
        -   Add any necessary shape commands to draw the non-sprite elements of your scene.
      CSD U3 Sprites scene drawing_2018: |-
        # Create Your Scene - Drawing

        You're going to start creating a scene of your own. If you haven't already, take a minute to sketch out a picture of your scene (consider using graph paper). Once you have an idea and plan for your scene, start drawing the background.

        # Do This

        -   Use a `background()` command to fill the screen with a color.
        -   Add any necessary shape commands to draw the non-sprite elements of your scene.
      CSD U3 Sprites scene drawing_2019: |-
        # Create Your Scene - Drawing

        You're going to start creating a scene of your own. If you haven't already, take a minute to sketch out a picture of your scene (consider using graph paper). Once you have an idea and plan for your scene, start drawing the background.

        # Do This

        -   Use a `background()` command to fill the screen with a color.
        -   Add any necessary shape commands to draw the non-sprite elements of your scene.
      CSD U3 Sprites scene sprites: |-
        # Create Your Scene - Sprites

        With your background in place, it's time to add your sprites.

        # Do This

        -   Add or create all of your sprite images in the Animation Tab.
        -   Create a variable for each sprite at the top of your program and use `setAnimation()` to assign the images you created in the Animation Tab.
        -   Call `drawSprites()` once at the end of your program.

        _Hint: You probably want to call `drawSprites()` at the very end of your program so the sprites are on top of your background, but for some designs you may want to call `drawSprites()` earlier so that your sprites are on top of some shapes but below others._
      CSD U3 Sprites scene sprites_2018: |-
        # Create Your Scene - Sprites

        With your background in place, it's time to add your sprites.

        # Do This

        -   Add or create all of your sprite images in the Animation Tab.
        -   Create a variable for each sprite at the top of your program and use `setAnimation()` to assign the images you created in the Animation Tab.
        -   Call `drawSprites()` once at the end of your program.

        _Hint: You probably want to call `drawSprites()` at the very end of your program so the sprites are on top of your background, but for some designs you may want to call `drawSprites()` earlier so that your sprites are on top of some shapes but below others._
      CSD U3 Sprites scene sprites_2019: |-
        # Create Your Scene - Sprites

        With your background in place, it's time to add your sprites.

        # Do This

        -   Add or create all of your sprite images in the Animation Tab.
        -   Create a variable for each sprite at the top of your program and use `setAnimation()` to assign the images you created in the Animation Tab.
        -   Call `drawSprites()` once at the end of your program.

        _Hint: You probably want to call `drawSprites()` at the very end of your program so the sprites are on top of your background, but for some designs you may want to call `drawSprites()` earlier so that your sprites are on top of some shapes but below others._
      CSD U3 Sprites scene text: |-
        # Create Your Scene - Text

        The final piece of your scene is to add text.

        # Do This

        -   Add a `text()` command for each separate line of text.
        -   If necessary, use `fill()` and `textSize()` to change the appearance of your text.

        _Hint: Most scenes have the text on top of everything else, which would require your `text()` commands to be the last lines in your program. If, however, you want the text layered in with other elements, you might consider changing the order._
      CSD U3 Sprites scene text_2018: |-
        # Create Your Scene - Text

        The final piece of your scene is to add text.

        # Do This

        -   Add a `text()` command for each separate line of text.
        -   If necessary, use `fill()` and `textSize()` to change the appearance of your text.

        _Hint: Most scenes have the text on top of everything else, which would require your `text()` commands to be the last lines in your program. If, however, you want the text layered in with other elements, you might consider changing the order._
      CSD U3 Sprites scene text_2019: |-
        # Create Your Scene - Text

        The final piece of your scene is to add text.

        # Do This

        -   Add a `text()` command for each separate line of text.
        -   If necessary, use `fill()` and `textSize()` to change the appearance of your text.

        _Hint: Most scenes have the text on top of everything else, which would require your `text()` commands to be the last lines in your program. If, however, you want the text layered in with other elements, you might consider changing the order._
      CSD U3 Sprites text: |-
        # Adding Text

        You can put text anywhere you'd like on the screen using `text`. Change the displayed text in the provided code, then add a second `text` to write in a different part of the screen.

        _Tip: The default text size is pretty small, but you can use the `textSize` block to change that. You can also use `fill` to change the color of your text._
      CSD U3 Sprites text debug: |-
        <img src="https://images.code.org/a313a455ef7033e840dfb21cb15cbb30-image-1491277088617.png" style="float: right; width: 200px; margin-left: 20px;">

        # Debug

        This scene has all the right code, but it's not in the right order. The scene should look like the image to the right.  Can you reorder the blocks so that each part of the scene is drawn in the correct order?
      CSD U3 Sprites text debug_2018: |-
        <img src="https://images.code.org/a313a455ef7033e840dfb21cb15cbb30-image-1491277088617.png" style="float: right; width: 200px; margin-left: 20px;">

        # Debug

        This scene has all the right code, but it's not in the right order. The scene should look like the image to the right.  Can you reorder the blocks so that each part of the scene is drawn in the correct order?
      CSD U3 Sprites text debug_2018_2019: |-
        <img src="https://images.code.org/a313a455ef7033e840dfb21cb15cbb30-image-1491277088617.png" style="float: right; width: 200px; margin-left: 20px;">

        # Debug

        This scene has all the right code, but it's not in the right order. The scene should look like the image to the right.  Can you reorder the blocks so that each part of the scene is drawn in the correct order?
      CSD U3 Sprites text_2018: "# Pridávanie textu\n\nText môžeš pridať kdekoľvek
        na obrazovke použitím príkazu `text`. \n\n# Urob toto\n\n-   Zmeň zobrazený
        text v kóde\n-   Pridaj ďalší text na inú časť obrazovky.\n\n_Tip: Základná
        veľkosť textu je pomerne malá, ale môžeš použiť blok  `textSize` (veľkosť
        textu) na jej zmenu. Môžeš tiež použiť blok `fill` (vyplň) na zmenu jeho farby._"
      CSD U3 Sprites text_2019: "# Pridávanie textu\n\nText môžeš pridať kdekoľvek
        na obrazovke použitím príkazu `text`. \n\n# Urob toto\n\n-   Zmeň zobrazený
        text v kóde\n-   Pridaj ďalší text na inú časť obrazovky.\n\n_Tip: Základná
        veľkosť textu je pomerne malá, ale môžeš použiť blok  `textSize` (veľkosť
        textu) na jej zmenu. Môžeš tiež použiť blok `fill` (vyplň) na zmenu jeho farby._"
      CSD U3 UP_ARROW: |-
        # Moving Sprites

        You can change your sprite's position based on key presses in the same way you changed its animations.

        # Do This

        You have been provided with the start of a bug sprite. You need to pick the bug picture you want to use from the animation tab.

        -   Set the animation of the sprite to your favorite bug.
        -   Add an if statement inside your draw loop.
        -   Add a call to keyDown as the input to the if statement to check if the up arrow was pressed.
        -   Add code inside the conditional to move the sprite up if the up arrow is down.

        _Do you need to change sprite's x or y property to move it up?_
      CSD U3 UP_ARROW_2018: |-
        # Pohyb "sprite" objektov

        Pozíciu "sprite" objektu môžeš meniť na základe stlačených kláves rovnako, ako si menil/a jeho obrázok.

        # Urob toto

        -   Pridaj výraz `if` dovnútra cyklu kreslenia.
        -   Skontroluj, či bola stlačená klávesa „šípka doprava“.
        -   Pridaj kód do podmieňovacieho príkazu tak, aby sa "sprite" objekt pohol doprava vždy, keď bude sltačená klávesa „šípka doprava“.

        _Potrebuješ zmeniť premennú „x“ alebo „y“ svojho "sprite" objektu na to, aby sa posunul doprava?_
      CSD U3 UP_ARROW_2018_2019: |-
        # Pohyb "sprite" objektov

        Pozíciu "sprite" objektu môžeš meniť na základe stlačených kláves rovnako, ako si menil/a jeho obrázok.

        # Urob toto

        -   Pridaj výraz `if` dovnútra cyklu kreslenia.
        -   Skontroluj, či bola stlačená klávesa „šípka doprava“.
        -   Pridaj kód do podmieňovacieho príkazu tak, aby sa "sprite" objekt pohol doprava vždy, keď bude sltačená klávesa „šípka doprava“.

        _Potrebuješ zmeniť premennú „x“ alebo „y“ svojho "sprite" objektu na to, aby sa posunul doprava?_
      CSD U3 Variables Challenge: |-
        # Challenge: Updating Variables

        _Check with your teacher before tackling this challenge level._

        So far we've only ever assigned a value to a variable once, but did you know you can update a variable during a program?  Read through the example program we've provided, run it a few times to understand how it works, and then attempt to modify the program to draw one of the following images.

        <img src="https://images.code.org/29f4d46d5aa041fb7d27aa2e3c77652e-image-1493161823337.png" style="width:150px; border: 1px solid grey; margin:20px;">
        <img src="https://images.code.org/629819fe91016ee1b8275c81e41770b5-image-1493161823334.png" style="width:150px; border: 1px solid grey; margin:20px;">
        <img src="https://images.code.org/acf7b8223b3a87594e20348306464de7-image-1493161823305.png" style="width:150px; border: 1px solid grey; margin:20px;">
      CSD U3 Variables Challenge_2018: |-
        # Challenge: Updating Variables

        _Check with your teacher before tackling this challenge level._

        So far we've only ever assigned a value to a variable once, but did you know you can update a variable during a program?  Read through the example program we've provided, run it a few times to understand how it works, and then attempt to modify the program to draw one of the following images.

        <img src="https://images.code.org/29f4d46d5aa041fb7d27aa2e3c77652e-image-1493161823337.png" style="width:150px; border: 1px solid grey; margin:20px;">
        <img src="https://images.code.org/629819fe91016ee1b8275c81e41770b5-image-1493161823334.png" style="width:150px; border: 1px solid grey; margin:20px;">
        <img src="https://images.code.org/acf7b8223b3a87594e20348306464de7-image-1493161823305.png" style="width:150px; border: 1px solid grey; margin:20px;">
      CSD U3 Variables Challenge_2019: |-
        # Challenge: Updating Variables

        _Check with your teacher before tackling this challenge level._

        So far we've only ever assigned a value to a variable once, but did you know you can update a variable during a program?  Read through the example program we've provided, run it a few times to understand how it works, and then attempt to modify the program to draw one of the following images.

        <img src="https://images.code.org/29f4d46d5aa041fb7d27aa2e3c77652e-image-1493161823337.png" style="width:150px; border: 1px solid grey; margin:20px;">
        <img src="https://images.code.org/629819fe91016ee1b8275c81e41770b5-image-1493161823334.png" style="width:150px; border: 1px solid grey; margin:20px;">
        <img src="https://images.code.org/acf7b8223b3a87594e20348306464de7-image-1493161823305.png" style="width:150px; border: 1px solid grey; margin:20px;">
      CSD U3 Variables Draw Challenge: |-
        # Challenge: Draw an Image

        _Check with your teacher before tackling this challenge level._

        Using variables, draw an image where many of the items rely on a common variable for size or placement. For example, draw a face with variables controlling the size and/or placement of both eyes, ears, and nostrils. Once you have your drawing completed, try changing the values of your variables to make sure that the whole image changes together.
      CSD U3 Variables Draw Challenge_2018: |-
        # Challenge: Draw an Image

        _Check with your teacher before tackling this challenge level._

        Using variables, draw an image where many of the items rely on a common variable for size or placement. For example, draw a face with variables controlling the size and/or placement of both eyes, ears, and nostrils. Once you have your drawing completed, try changing the values of your variables to make sure that the whole image changes together.
      CSD U3 Variables Draw Challenge_2019: |-
        # Challenge: Draw an Image

        _Check with your teacher before tackling this challenge level._

        Using variables, draw an image where many of the items rely on a common variable for size or placement. For example, draw a face with variables controlling the size and/or placement of both eyes, ears, and nostrils. Once you have your drawing completed, try changing the values of your variables to make sure that the whole image changes together.
      CSD U3 Variables Draw Poppy: |-
        # Using a Variable Many Times

        This program has only one variable called `petalSize` but it uses it 8 different times. This makes it easy to quickly make lots of changes to how your picture is drawn.

        # Do This

        -   Change the number assigned to `petalSize` so the red petals touch one another.
        -   Try to find the size that makes the most sense. Compare your answer with someone around you.
      CSD U3 Variables Draw Poppy_2018: |-
        # Using a Variable Many Times

        This program has only one variable called `petalSize` but it uses it 8 different times. This makes it easy to quickly make lots of changes to how your picture is drawn.

        # Do This

        -   Change the number assigned to `petalSize` so the red petals touch one another.
        -   Try to find the size that makes the most sense. Compare your answer with someone around you.
      CSD U3 Variables Draw Poppy_2019: |-
        # Using a Variable Many Times

        This program has only one variable called `petalSize` but it uses it 8 different times. This makes it easy to quickly make lots of changes to how your picture is drawn.

        # Do This

        -   Change the number assigned to `petalSize` so the red petals touch one another.
        -   Try to find the size that makes the most sense. Compare your answer with someone around you.
      CSD U3 Variables Predict Where X: |-
        # Using Variables

        In this program, the variable `xPosition` is used to store the x-coordinate of the circle.

        # Do This

        -   Run the program to see how it works.
        -   Change the number that is stored into the variable ([Show me where](#triggercallout=code_triggered)) and run the code again.
      CSD U3 Variables Predict Where XY Embed: |-
        # Predict

        In which corner of the screen will the circle be drawn?

        _Hint: Click the "Show grid" box to help you find the exact coordinates on the screen._
      CSD U3 Variables Predict Where XY Embed_2018: |-
        # Predict

        In which corner of the screen will the circle be drawn?

        _Hint: Click the "Show grid" box to help you find the exact coordinates on the screen._
      CSD U3 Variables Predict Where XY Embed_2019: |-
        # Predict

        In which corner of the screen will the circle be drawn?

        _Hint: Click the "Show grid" box to help you find the exact coordinates on the screen._
      CSD U3 Variables Predict Where X_2018: |-
        # Using Variables

        In this program, the variable `xPosition` is used to store the x-coordinate of the circle.

        # Do This

        -   Run the program to see how it works.
        -   Change the number that is stored into the variable ([Show me where](#triggercallout=code_triggered)) and run the code again.
      CSD U3 Variables Predict Where X_2019: |-
        # Using Variables

        In this program, the variable `xPosition` is used to store the x-coordinate of the circle.

        # Do This

        -   Run the program to see how it works.
        -   Change the number that is stored into the variable ([Show me where](#triggercallout=code_triggered)) and run the code again.
      CSD U3 Variables change circle size: |-
        <img src="https://images.code.org/acc7f5763a9ca1c17647f7dd9711c9f5-image-1490977696189.28.01 AM.png" style="float:right; height:150px">

        # Debug: Using Variables

        This program uses the variable `circleSize` to control the width and height of a circle.  If you make the circle big enough, it will fill up the entire screen, as in the picture on the right.

        # Do This

        -   Change the value assigned to `circleSize` so that the circle takes up the entire screen.
      CSD U3 Variables change circle size_2018: |-
        <img src="https://images.code.org/acc7f5763a9ca1c17647f7dd9711c9f5-image-1490977696189.28.01 AM.png" style="float:right; height:150px">

        # Debug: Using Variables

        This program uses the variable `circleSize` to control the width and height of a circle.  If you make the circle big enough, it will fill up the entire screen, as in the picture on the right.

        # Do This

        -   Change the value assigned to `circleSize` so that the circle takes up the entire screen.
      CSD U3 Variables change circle size_2019: |-
        <img src="https://images.code.org/acc7f5763a9ca1c17647f7dd9711c9f5-image-1490977696189.28.01 AM.png" style="float:right; height:150px">

        # Debug: Using Variables

        This program uses the variable `circleSize` to control the width and height of a circle.  If you make the circle big enough, it will fill up the entire screen, as in the picture on the right.

        # Do This

        -   Change the value assigned to `circleSize` so that the circle takes up the entire screen.
      CSD U3 Variables naming rules v2: |-
        <img style="float: right" src="https://images.code.org/f4b306422763c84bb924f4f7d3a6dca6-image-1492798058864.06.38 AM.png">

        # Debug: Naming Variables

        This program has multiple errors caused by bad label names.  The errors prevent the program from being viewed in block mode, so the code is in text.

        # Do This

        -   Find the rule each variable label violates.
        -   **Correct the errors by picking new names that follow the rules you learned in the last level.**
        -   If your program works it should draw the image on the right.

        <summary><em>Hint: Click the arrow for a quick review of the rules.</em><details><ul>
        <li>Labels can't have spaces.</li>
        <li>Labels can't start with a number.</li>
        <li>Capitalization and spelling must be exactly the same.</li>
        </ul></details></summary>
      CSD U3 Variables naming rules v2_2018: |-
        <img style="float: right" src="https://images.code.org/f4b306422763c84bb924f4f7d3a6dca6-image-1492798058864.06.38 AM.png">

        # Debug: Naming Variables

        This program has multiple errors caused by bad label names.  The errors prevent the program from being viewed in block mode, so the code is in text.

        # Do This

        -   Find the rule each variable label violates.
        -   **Correct the errors by picking new names that follow the rules you learned in the last level.**
        -   If your program works it should draw the image on the right.

        <summary><em>Hint: Click the arrow for a quick review of the rules.</em><details><ul>
        <li>Labels can't have spaces.</li>
        <li>Labels can't start with a number.</li>
        <li>Capitalization and spelling must be exactly the same.</li>
        </ul></details></summary>
      CSD U3 Variables naming rules v2_2018_2019: |-
        <img style="float: right" src="https://images.code.org/f4b306422763c84bb924f4f7d3a6dca6-image-1492798058864.06.38 AM.png">

        # Debug: Naming Variables

        This program has multiple errors caused by bad label names.  The errors prevent the program from being viewed in block mode, so the code is in text.

        # Do This

        -   Try to figure out what problems with the variable names are causing the errors.
        -   **Correct the errors by picking new names.**
        -   If your program works it should draw the image on the right.

        <summary><em>Hint: Click the arrow to see a few rules.</em><details><ul>
        <li>Labels can't have spaces.</li>
        <li>Labels can't start with a number.</li>
        <li>Capitalization and spelling must be exactly the same.</li>
        </ul></details></summary>
      CSD U3 Variables random with assignment: |-
        <img src="https://images.code.org/ba9592e887f52c1a538a0517560cdacf-image-1493913633878.gif" style="float:right;height:150px">

        # Debug: Variables and Random Numbers

        Variables can be assigned a random number too. This lets you save a single random value so that you can use it as many times as you want in your program.

        # Do This

        `eyeSize` is assigned a random number. Unfortunately only one of the eyes is currently using it.

        -   **Run the program** to see how it works.
        -   **Change the program** so that both eyes are always the same random size. Hint: you'll only need to make changes to one line of code.
      CSD U3 Variables random with assignment_2018: |-
        <img src="https://images.code.org/ba9592e887f52c1a538a0517560cdacf-image-1493913633878.gif" style="float:right;height:150px">

        # Debug: Variables and Random Numbers

        Variables can be assigned a random number too. This lets you save a single random value so that you can use it as many times as you want in your program.

        # Do This

        `eyeSize` is assigned a random number. Unfortunately only one of the eyes is currently using it.

        -   **Run the program** to see how it works.
        -   **Change the program** so that both eyes are always the same random size. Hint: you'll only need to make changes to one line of code.
      CSD U3 Variables random with assignment_2019: |-
        <img src="https://images.code.org/ba9592e887f52c1a538a0517560cdacf-image-1493913633878.gif" style="float:right;height:150px">

        # Debug: Variables and Random Numbers

        Variables can be assigned a random number too. This lets you save a single random value so that you can use it as many times as you want in your program.

        # Do This

        `eyeSize` is assigned a random number. Unfortunately only one of the eyes is currently using it.

        -   **Run the program** to see how it works.
        -   **Change the program** so that both eyes are always the same random size. Hint: you'll only need to make changes to one line of code.
      CSD U3 Watcher Debug: |-
        <img src="https://images.code.org/20cc981b4b4f99b2ff96415e19af7600-image-1492034149715.gif" style="float: right; margin-left: 20px;">

        # Debug: Watching the Counter Pattern

        Let's practice using watchers to debug your code. This program should move the motorcycle from the bottom left to the top right, like the image to the right. Unfortunately the motorcycle moves off screen too quickly to see what's going wrong.

        Using the provided watchers for `cycle.x` and `cycle.y`, figure out which one is moving in the wrong direction and fix the program.
      CSD U3 Watcher Debug_2018: |-
        <img src="https://images.code.org/20cc981b4b4f99b2ff96415e19af7600-image-1492034149715.gif" style="float: right; margin-left: 20px;">

        # Debug: Watching the Counter Pattern

        Let's practice using watchers to debug your code. This program should move the motorcycle from the bottom left to the top right, like the image to the right. Unfortunately the motorcycle moves off screen too quickly to see what's going wrong.

        Using the provided watchers for `cycle.x` and `cycle.y`, figure out which one is moving in the wrong direction and fix the program.
      CSD U3 Watcher Debug_2019: |-
        <img src="https://images.code.org/20cc981b4b4f99b2ff96415e19af7600-image-1492034149715.gif" style="float: right; margin-left: 20px;">

        # Debug: Watching the Counter Pattern

        Let's practice using watchers to debug your code. This program should move the motorcycle from the bottom left to the top right, like the image to the right. Unfortunately the motorcycle moves off screen too quickly to see what's going wrong.

        Using the provided watchers for `cycle.x` and `cycle.y`, figure out which one is moving in the wrong direction and fix the program.
      CSD U3 Watcher Predict response: |-
        # Watching the Counter Pattern

        Watchers are a really useful tool for debugging programs that use the counter pattern.

        -   **Read the program** and predict what the program will do.
        -   **Run the program** to check your prediction.
        -   **Look at the watchers** and explain to a neighbor what you are seeing.
      CSD U3 Watcher Predict response_2018: |-
        # Watching the Counter Pattern

        Watchers are a really useful tool for debugging programs that use the counter pattern.

        -   **Read the program** and predict what the program will do.
        -   **Run the program** to check your prediction.
        -   **Look at the watchers** and explain to a neighbor what you are seeing.
      CSD U3 Watcher Predict response_2019: |-
        # Watching the Counter Pattern

        Watchers are a really useful tool for debugging programs that use the counter pattern.

        -   **Read the program** and predict what the program will do.
        -   **Run the program** to check your prediction.
        -   **Look at the watchers** and explain to a neighbor what you are seeing.
      CSD U3 abstraction accelerateX: |-
        # Rýchlosť pohybu a kód pre počítanie

        Ako si práve videl/a, použitie `sprite.velocityX` vlastnosti s kódom pre počítanie zmení rýchlosť pohybu „sprite” objektu počas behu programu. To spôsobí, že „sprite“ začne zrýchľovať. Vyskúšaj si to.

        # Urob toto

        V tomto programe sa auto už pohybuje po obrazovke, ale ide veľmi pomaly.

        -   Použi kód pre počítanie s atribútom `velocityX`, aby auto zrýchlilo. ( [Ukáž mi kde](#triggercallout=code_triggered) )
      CSD U3 abstraction accelerateX_2018: |-
        # Rýchlosť pohybu a kód pre počítanie

        Ako si práve videl/a, použitie `sprite.velocityX` vlastnosti s kódom pre počítanie zmení rýchlosť pohybu „sprite” objektu počas behu programu. To spôsobí, že „sprite“ začne zrýchľovať. Vyskúšaj si to.

        # Urob toto

        V tomto programe sa auto už pohybuje po obrazovke, ale ide veľmi pomaly.

        -   Použi kód pre počítanie s atribútom `velocityX`, aby auto zrýchlilo. ( [Ukáž mi kde](#triggercallout=code_triggered) )
      CSD U3 abstraction accelerateX_2019: |-
        # Rýchlosť pohybu a kód pre počítanie

        Ako si práve videl/a, použitie `sprite.velocityX` vlastnosti s kódom pre počítanie zmení rýchlosť pohybu „sprite” objektu počas behu programu. To spôsobí, že „sprite“ začne zrýchľovať. Vyskúšaj si to.

        # Urob toto

        V tomto programe sa auto už pohybuje po obrazovke, ale ide veľmi pomaly.

        -   Použi kód pre počítanie s atribútom `velocityX`, aby auto zrýchlilo. ( [Ukáž mi kde](#triggercallout=code_triggered) )
      CSD U3 abstraction accelerateY: |-
        # Padajúci kameň

        Keď kameň padá, mal by zrýchľovať. Dokážeš použiť kód pre počítanie spolu s vlastnosťou `velocityY` umiesnenou v cykle kreslenia tak, aby sa kameň počas pádu hýbal rýchlejšie a rýchlejšie?

        # Urob toto

        -   Použi kód pre počítanie s blokom `velocityY` tak, aby kameň počas pádu zrýchlil ( [Ukáž mi kde](#triggercallout=code_triggered) )

        \_Výzva: Dokážeš kameň prinútiť, aby sa počas pádu otáčal? A môže sa otáčať rýchlejšie a rýchlejšie? \_
      CSD U3 abstraction accelerateY up: |-
        # Stúpajúca bublina

        V tomto programe bude bublina stúpať z vody smerom nahor. Dokážeš ho nastaviť tak, aby sa bublina počas stúpania hýbala rýchlejšie?

        # Urob toto

        -   Použi kód pre počítanie a vlastnosť „velocity“ na to, aby sa bublina hýbala rýchlejšie.
      CSD U3 abstraction accelerateY up_2018: |-
        # Stúpajúca bublina

        V tomto programe bude bublina stúpať z vody smerom nahor. Dokážeš ho nastaviť tak, aby sa bublina počas stúpania hýbala rýchlejšie?

        # Urob toto

        -   Použi kód pre počítanie a vlastnosť „velocity“ na to, aby sa bublina hýbala rýchlejšie.
      CSD U3 abstraction accelerateY up_2019: |-
        # Stúpajúca bublina

        V tomto programe bude bublina stúpať z vody smerom nahor. Dokážeš ho nastaviť tak, aby sa bublina počas stúpania hýbala rýchlejšie?

        # Urob toto

        -   Použi kód pre počítanie a vlastnosť „velocity“ na to, aby sa bublina hýbala rýchlejšie.
      CSD U3 abstraction accelerateY_2018: |-
        # Padajúci kameň

        Keď kameň padá, mal by zrýchľovať. Dokážeš použiť kód pre počítanie spolu s vlastnosťou `velocityY` umiesnenou v cykle kreslenia tak, aby sa kameň počas pádu hýbal rýchlejšie a rýchlejšie?

        # Urob toto

        -   Použi kód pre počítanie s blokom `velocityY` tak, aby kameň počas pádu zrýchlil ( [Ukáž mi kde](#triggercallout=code_triggered) )

        \_Výzva: Dokážeš kameň prinútiť, aby sa počas pádu otáčal? A môže sa otáčať rýchlejšie a rýchlejšie? \_
      CSD U3 abstraction accelerateY_2019: |-
        # Padajúci kameň

        Keď kameň padá, mal by zrýchľovať. Dokážeš použiť kód pre počítanie spolu s vlastnosťou `velocityY` umiesnenou v cykle kreslenia tak, aby sa kameň počas pádu hýbal rýchlejšie a rýchlejšie?

        # Urob toto

        -   Použi kód pre počítanie s blokom `velocityY` tak, aby kameň počas pádu zrýchlil ( [Ukáž mi kde](#triggercallout=code_triggered) )

        \_Výzva: Dokážeš kameň prinútiť, aby sa počas pádu otáčal? A môže sa otáčať rýchlejšie a rýchlejšie? \_
      CSD U3 abstraction add coin: |-
        # Pridanie mince

        V ďaľších cvičeniach do programu pridáš kód, ktorého výsledkom bude jednoduchá hra. Hráč v nej bude zbierať body a zvyšovať tak svoje skóre. Týmto spôsobom zistíš, ako pohyb rôznym smerom a rýchlosťou dokáže ovplyvniť zážitok z hry a zároveň si precvičíš svoje programovacie zručnosti.

        # Urob toto

        V tomto cvičení budeš pridávať rôzne „sprite“ objekty v podobe mince. Mal/a by si tak urobiť na začiatku kódu, ešte pred cyklom kreslenia.

        -   Použi blok `createSprite()` pre vytvorenie nového „sprite” objektu. Pomenuj ho rozumne, napríklad „minca“.
        -   Použi vlastnosti `sprite.x` a `sprite.y` pre náhodné umiestnenie na osiach X a Y, a to s hodnotami od 0 do 400.
        -   V záložke s animáciami sme za teba už nakreslili mincu. Použi blok `sprite.setAnimation()` pre nastavenie jej obrázku v tvojom „sprite“ objekte.

        Predtým, než pôjdeš ďalej, otestuj svoj kód. Po spustení hry by si mal/a vidieť, ako sa minca objaví na náhodnom mieste.
      CSD U3 abstraction add coin_2018: |-
        # Pridanie mince

        V ďaľších cvičeniach do programu pridáš kód, ktorého výsledkom bude jednoduchá hra. Hráč v nej bude zbierať body a zvyšovať tak svoje skóre. Týmto spôsobom zistíš, ako pohyb rôznym smerom a rýchlosťou dokáže ovplyvniť zážitok z hry a zároveň si precvičíš svoje programovacie zručnosti.

        # Urob toto

        V tomto cvičení budeš pridávať rôzne „sprite“ objekty v podobe mince. Mal/a by si tak urobiť na začiatku kódu, ešte pred cyklom kreslenia.

        -   Použi blok `createSprite()` pre vytvorenie nového „sprite” objektu. Pomenuj ho rozumne, napríklad „minca“.
        -   Použi vlastnosti `sprite.x` a `sprite.y` pre náhodné umiestnenie na osiach X a Y, a to s hodnotami od 0 do 400.
        -   V záložke s animáciami sme za teba už nakreslili mincu. Použi blok `sprite.setAnimation()` pre nastavenie jej obrázku v tvojom „sprite“ objekte.

        Predtým, než pôjdeš ďalej, otestuj svoj kód. Po spustení hry by si mal/a vidieť, ako sa minca objaví na náhodnom mieste.
      CSD U3 abstraction add coin_2019: |-
        # Pridanie mince

        V ďaľších cvičeniach do programu pridáš kód, ktorého výsledkom bude jednoduchá hra. Hráč v nej bude zbierať body a zvyšovať tak svoje skóre. Týmto spôsobom zistíš, ako pohyb rôznym smerom a rýchlosťou dokáže ovplyvniť zážitok z hry a zároveň si precvičíš svoje programovacie zručnosti.

        # Urob toto

        V tomto cvičení budeš pridávať rôzne „sprite“ objekty v podobe mince. Mal/a by si tak urobiť na začiatku kódu, ešte pred cyklom kreslenia.

        -   Použi blok `createSprite()` pre vytvorenie nového „sprite” objektu. Pomenuj ho rozumne, napríklad „minca“.
        -   Použi vlastnosti `sprite.x` a `sprite.y` pre náhodné umiestnenie na osiach X a Y, a to s hodnotami od 0 do 400.
        -   V záložke s animáciami sme za teba už nakreslili mincu. Použi blok `sprite.setAnimation()` pre nastavenie jej obrázku v tvojom „sprite“ objekte.

        Predtým, než pôjdeš ďalej, otestuj svoj kód. Po spustení hry by si mal/a vidieť, ako sa minca objaví na náhodnom mieste.
      CSD U3 abstraction decelerateX: "# Slowing Things Down\n\nNow that you've had
        some practice speeding things up, can you use the counter pattern to slow
        sprites down? \n\n# Do This\n\nThe car is going to run into the water! You'll
        need to use the counter pattern to slow it down.\n\n-   Use the `sprite.velocityX`
        block with a counter pattern to slow the car down by 0.25 as it moves across
        the screen.  \n-   Discuss with your Partner: What do you think will happen
        when the car finally stops?\n\n_Challenge: Add code that makes the car slow
        down only if his velocityX is greater than 0._"
      CSD U3 abstraction decelerateX_2018: |-
        # Spomaľovanie

        Keď si si vyskúšal/a zrýchľovanie, dokážeš použiť kód pre počítanie aj na spomalenie "sprite" objektov?

        # Urob toto

        Auto sa rúti do vody! Na jeho spomalenie musíš použiť kód pre počítanie.

        -   Použi blok `sprite.velocityX` a kód pre počítanie, aby auto spomalilo o 0,25 počas toho, ako sa hýbe po obrazovke;
        -   Diskutuj s partnerom: Čo sa stane, keď auto nakoniec zastane?

        _Výzva: Do programu pridaj kód, ktorý auto spomalí len ak je jeho velocityX väčšia ako 0._
      CSD U3 abstraction decelerateX_2019: |-
        # Spomaľovanie

        Keď si si vyskúšal/a zrýchľovanie, dokážeš použiť kód pre počítanie aj na spomalenie "sprite" objektov?

        # Urob toto

        Auto sa rúti do vody! Na jeho spomalenie musíš použiť kód pre počítanie.

        -   Použi blok `sprite.velocityX` a kód pre počítanie, aby auto spomalilo o 0,25 počas toho, ako sa hýbe po obrazovke;
        -   Diskutuj s partnerom: Čo sa stane, keď auto nakoniec zastane?

        _Výzva: Do programu pridaj kód, ktorý auto spomalí len ak je jeho velocityX väčšia ako 0._
      CSD U3 abstraction decelerateY: "# Napodobnenie gravitácie\n\nV predchádzajúcom
        cvičení si spomalil/a auto pomocou bloku `sprite.velocityX` a kódu pre počítanie.
        Vyzeralo to skoro ako keby bolo auto ťahané doľava. Ak použiješ rovnaký kód
        s blokom `sprite.velocityY`, bude to vyzerať, ako keby bol tvoj „sprite“ ťahaný
        nadol. A presne to robí gravitácia!\n\n# Urob toto\n\nKameň vyletí do vzduchu,
        ale nikdy nepadne na zem.\n\n-   Použi blok `sprite.velocityY` s kódom pre
        počítanie tak, aby kameň spomalil a potom padal opačným smerom;\n-   Experimentuj
        s rôznymi hodnotami v tvojom kóde pre počítanie. Chceš, aby kameň spomaľoval
        rýchlo alebo postupne? Čo podľa teba vyzerá realistickejšie?\n-   Diskutuj
        s partnerom: Prečo sa počiatočná rýchlosť kameňa nastavuje mimo cyklu kreslenia?
        Prečo meníš rýchlosť „sprite“ objektu vnútri tohto cyklu? "
      CSD U3 abstraction decelerateY_2018: "# Napodobnenie gravitácie\n\nV predchádzajúcom
        cvičení si spomalil/a auto pomocou bloku `sprite.velocityX` a kódu pre počítanie.
        Vyzeralo to skoro ako keby bolo auto ťahané doľava. Ak použiješ rovnaký kód
        s blokom `sprite.velocityY`, bude to vyzerať, ako keby bol tvoj „sprite“ ťahaný
        nadol. A presne to robí gravitácia!\n\n# Urob toto\n\nKameň vyletí do vzduchu,
        ale nikdy nepadne na zem.\n\n-   Použi blok `sprite.velocityY` s kódom pre
        počítanie tak, aby kameň spomalil a potom padal opačným smerom;\n-   Experimentuj
        s rôznymi hodnotami v tvojom kóde pre počítanie. Chceš, aby kameň spomaľoval
        rýchlo alebo postupne? Čo podľa teba vyzerá realistickejšie?\n-   Diskutuj
        s partnerom: Prečo sa počiatočná rýchlosť kameňa nastavuje mimo cyklu kreslenia?
        Prečo meníš rýchlosť „sprite“ objektu vnútri tohto cyklu? "
      CSD U3 abstraction decelerateY_2019: "# Napodobnenie gravitácie\n\nV predchádzajúcom
        cvičení si spomalil/a auto pomocou bloku `sprite.velocityX` a kódu pre počítanie.
        Vyzeralo to skoro ako keby bolo auto ťahané doľava. Ak použiješ rovnaký kód
        s blokom `sprite.velocityY`, bude to vyzerať, ako keby bol tvoj „sprite“ ťahaný
        nadol. A presne to robí gravitácia!\n\n# Urob toto\n\nKameň vyletí do vzduchu,
        ale nikdy nepadne na zem.\n\n-   Použi blok `sprite.velocityY` s kódom pre
        počítanie tak, aby kameň spomalil a potom padal opačným smerom;\n-   Experimentuj
        s rôznymi hodnotami v tvojom kóde pre počítanie. Chceš, aby kameň spomaľoval
        rýchlo alebo postupne? Čo podľa teba vyzerá realistickejšie?\n-   Diskutuj
        s partnerom: Prečo sa počiatočná rýchlosť kameňa nastavuje mimo cyklu kreslenia?
        Prečo meníš rýchlosť „sprite“ objektu vnútri tohto cyklu? "
      CSD U3 abstraction jump: |-
        # Jumping

        You now have all the blocks you need to make your sprite jump!

        Just as you checked whether your fish was at the left edge, you'll need to check whether the frog is on the ground.  If it is, it could either jump up or stay still, so you'll need one more `if` block to check whether the user has pressed the up arrow ( [Show me where](#triggercallout=code_triggered1) ).

        You'll also need to check whether the frog has reached its highest point, and send it back down if it has.

        # Do this

        -   Find the `if` statement that checks whether the sprite is on the ground, and look at the `if` statement inside of it that checks whether the user has pressed the "up" arrow key. ( [Show me where](#triggercallout=code_triggered1) )
            -   Use the `velocityY` block to make the frog jump up when the user presses the arrow key.
            -   Use the `velocityY` block to make the frog stop moving otherwise.
        -   Add an if statement that does the following  ( [Show me where](#triggercallout=code_triggered2) )
            -   Checks whether the frog sprite has reached its highest point.
            -   If so, use the `velocityY` block to make the sprite fall back down.
      CSD U3 abstraction jump_2018: |-
        # Skákanie

        A teraz máš už všetky bloky potrebné na to, aby tvoj "sprite" mohol skákať! Mal by vyskočiť dohora, ak je na zemi a zároveň užívateľ stlačí šípku „hore”. Po dosiahnutí vrcholu výskoku by mal opäť klesnúť nadol.

        # Urob toto

        -   Nájdi výraz `if` , ktorý kontroluje, či je "sprite" na zemi. Potom sa pozri dovnútra tohto výrazu a nájdi ďalší výraz `if`, ktorý kontroluje, či užívateľ stlačil šípku „hore“ ([Ukáž mi kde](#triggercallout=code_triggered1)).
            -   Zabezpeč, aby žaba vyskočila, keď užívateľ stlačí šípku „hore“
            -   V opačnom prípade zabezpeč, aby sa žaba prestala hýbať.
        -   Pridaj kód, ktorý robí nasledovné ([Ukáž mi kde](#triggercallout=code_triggered2)):
            -   Skontroluje, či žaba dosiahla svoj najvyšši bod
            -   Ak áno, nechá ju klesnúť nadol.
      CSD U3 abstraction jump_2018_2019: |-
        # Skákanie

        A teraz máš už všetky bloky potrebné na to, aby tvoj "sprite" mohol skákať! Mal by vyskočiť dohora, ak je na zemi a zároveň užívateľ stlačí šípku „hore”. Po dosiahnutí vrcholu výskoku by mal opäť klesnúť nadol.

        # Urob toto

        -   Nájdi výraz `if` , ktorý kontroluje, či je "sprite" na zemi. Potom sa pozri dovnútra tohto výrazu a nájdi ďalší výraz `if`, ktorý kontroluje, či užívateľ stlačil šípku „hore“ ([Ukáž mi kde](#triggercallout=code_triggered1)).
            -   Zabezpeč, aby žaba vyskočila, keď užívateľ stlačí šípku „hore“
            -   V opačnom prípade zabezpeč, aby sa žaba prestala hýbať.
        -   Pridaj kód, ktorý robí nasledovné ([Ukáž mi kde](#triggercallout=code_triggered2)):
            -   Skontroluje, či žaba dosiahla svoj najvyšši bod
            -   Ak áno, nechá ju klesnúť nadol.
      CSD U3 abstraction jumping: "# Skákanie\n\nZvýšením rýchlosti „sprite” objektu
        v smere osi y vo vnútri kódu pre počítanie môžeme simulovať gravitáciu. Pridaním
        interakcie s používateľom sa „sprite“ môže pohybovať tak, ako keby skákal.
        Na začiatok spravíme jednoduchý skok. V ďalších krokoch ho upravíme tak, aby
        vyzeral viac realistickejšie.\n\n# Urob toto\n\n„Sprite”, ktorý sme pre teba
        vytvorili, bude padať, lebo jeho rýchlosť na osi y sa vo vnútri cyklu zvyšuje.
        Tvojou úlohou je nastaviť ho tak, aby skákal. \n\n-   Vo vnútri bloku `if`,
        ktorý kontroluje, či bola stlačená klávesa šípky nahor, nastav rýchlosť „sprite“
        objektu na -5 (Ukáž mi, kde)\n-   Porozprávaj sa s kamarátom: Prečo tento
        kód funguje práve takto? Ako môže iné číslo než -5 ovplyvniť jeho fungovanie?
        Ako môžeš vyskočiť nižšie alebo vyššie? "
      CSD U3 abstraction jumping_2018: "# Skákanie\n\nZvýšením rýchlosti „sprite”
        objektu v smere osi y vo vnútri kódu pre počítanie môžeme simulovať gravitáciu.
        Pridaním interakcie s používateľom sa „sprite“ môže pohybovať tak, ako keby
        skákal. Na začiatok spravíme jednoduchý skok. V ďalších krokoch ho upravíme
        tak, aby vyzeral viac realistickejšie.\n\n# Urob toto\n\n„Sprite”, ktorý sme
        pre teba vytvorili, bude padať, lebo jeho rýchlosť na osi y sa vo vnútri cyklu
        zvyšuje. Tvojou úlohou je nastaviť ho tak, aby skákal. \n\n-   Vo vnútri bloku
        `if`, ktorý kontroluje, či bola stlačená klávesa šípky nahor, nastav rýchlosť
        „sprite“ objektu na -5 (Ukáž mi, kde)\n-   Porozprávaj sa s kamarátom: Prečo
        tento kód funguje práve takto? Ako môže iné číslo než -5 ovplyvniť jeho fungovanie?
        Ako môžeš vyskočiť nižšie alebo vyššie? "
      CSD U3 abstraction jumping_2019: "# Skákanie\n\nZvýšením rýchlosti „sprite”
        objektu v smere osi y vo vnútri kódu pre počítanie môžeme simulovať gravitáciu.
        Pridaním interakcie s používateľom sa „sprite“ môže pohybovať tak, ako keby
        skákal. Na začiatok spravíme jednoduchý skok. V ďalších krokoch ho upravíme
        tak, aby vyzeral viac realistickejšie.\n\n# Urob toto\n\n„Sprite”, ktorý sme
        pre teba vytvorili, bude padať, lebo jeho rýchlosť na osi y sa vo vnútri cyklu
        zvyšuje. Tvojou úlohou je nastaviť ho tak, aby skákal. \n\n-   Vo vnútri bloku
        `if`, ktorý kontroluje, či bola stlačená klávesa šípky nahor, nastav rýchlosť
        „sprite“ objektu na -5 (Ukáž mi, kde)\n-   Porozprávaj sa s kamarátom: Prečo
        tento kód funguje práve takto? Ako môže iné číslo než -5 ovplyvniť jeho fungovanie?
        Ako môžeš vyskočiť nižšie alebo vyššie? "
      CSD U3 abstraction left right counter: |-
        # Vznášanie sa doprava

        Doteraz si používal/a počítadlo rýchlosti „sprite” objektu na osi Y na simuláciu gravitácie a skákania. Ak ho použiješ na osi x, tvoj „sprite“ sa môže vznášať  doprava i doľava.

        # Urob toto

        V tomto leveli sa bude tvoj „sprite“ vznášať doprava po stlačení šípky vpravo.

        -   Do cyklu kreslenia pridaj výraz `if` a to pod výraz, ktorý si vytvoril/a pre šípku „nahor“.
        -   Použi blok `keyDown` tak, aby výraz `if` reagoval na stlačenie klávesy so šípkou vpravo.
        -   Vo vnútri bloku `if` použi kód pre počítanie v bloku `sprite.velocityX`, v ktorom sa pridá hodnota 0.1 k rýchlosti „sprite” objektu objektu na osi X.

        Spusti svoj kód, aby si videl/a, ako funguje. „Sprite“ by sa mal po stlačení klávesy šípky vpravo pohybovať doprava a vyskočiť po stlačení klávesy šípky hore. Smer vľavo doplníme v ďaľšom cvičení.
      CSD U3 abstraction left right counter 2: |-
        # Vznášanie sa doľava

        V predchádzajúcom cvičení si sa naučil/a, ako „sprite“ posúvať doprava. Teraz sa naučíš, ako ho posúvať doľava. Mal/a by si už vedieť súčasne pracovať s rýchlosťou i kódom pre počítanie. Ak máš stále problém, opýtaj sa spolusediaceho/sediacej, alebo si pozri predošlé lekcie.

        # Urob toto

        -   Do cyklu kreslenia pridaj kód, ktorý po stlačení klávesy šípky vľavo začne daným smerom posúvať náš „sprite“;
        -   Ubezpeč sa, že používaš súčasne rýchlosť i kód pre počítanie.

        Keď dopíšeš kód, prejdi si ho spolu so spolusediacim/sediacou. Dá sa tvoj „sprite“ ľahko ovládať? Bude zážitok z hry ovplyvnený zmenou hodnoty, ktorú pridávaš alebo uberáš v kóde pre počítanie? Aká hra využívajúca tento kód by bola zábavná?
      CSD U3 abstraction left right counter 2_2018: |-
        # Vznášanie sa doľava

        V predchádzajúcom cvičení si sa naučil/a, ako „sprite“ posúvať doprava. Teraz sa naučíš, ako ho posúvať doľava. Mal/a by si už vedieť súčasne pracovať s rýchlosťou i kódom pre počítanie. Ak máš stále problém, opýtaj sa spolusediaceho/sediacej, alebo si pozri predošlé lekcie.

        # Urob toto

        -   Do cyklu kreslenia pridaj kód, ktorý po stlačení klávesy šípky vľavo začne daným smerom posúvať náš „sprite“;
        -   Ubezpeč sa, že používaš súčasne rýchlosť i kód pre počítanie.

        Keď dopíšeš kód, prejdi si ho spolu so spolusediacim/sediacou. Dá sa tvoj „sprite“ ľahko ovládať? Bude zážitok z hry ovplyvnený zmenou hodnoty, ktorú pridávaš alebo uberáš v kóde pre počítanie? Aká hra využívajúca tento kód by bola zábavná?
      CSD U3 abstraction left right counter 2_2019: |-
        # Vznášanie sa doľava

        V predchádzajúcom cvičení si sa naučil/a, ako „sprite“ posúvať doprava. Teraz sa naučíš, ako ho posúvať doľava. Mal/a by si už vedieť súčasne pracovať s rýchlosťou i kódom pre počítanie. Ak máš stále problém, opýtaj sa spolusediaceho/sediacej, alebo si pozri predošlé lekcie.

        # Urob toto

        -   Do cyklu kreslenia pridaj kód, ktorý po stlačení klávesy šípky vľavo začne daným smerom posúvať náš „sprite“;
        -   Ubezpeč sa, že používaš súčasne rýchlosť i kód pre počítanie.

        Keď dopíšeš kód, prejdi si ho spolu so spolusediacim/sediacou. Dá sa tvoj „sprite“ ľahko ovládať? Bude zážitok z hry ovplyvnený zmenou hodnoty, ktorú pridávaš alebo uberáš v kóde pre počítanie? Aká hra využívajúca tento kód by bola zábavná?
      CSD U3 abstraction left right counter_2018: |-
        # Vznášanie sa doprava

        Doteraz si používal/a počítadlo rýchlosti „sprite” objektu na osi Y na simuláciu gravitácie a skákania. Ak ho použiješ na osi x, tvoj „sprite“ sa môže vznášať  doprava i doľava.

        # Urob toto

        V tomto leveli sa bude tvoj „sprite“ vznášať doprava po stlačení šípky vpravo.

        -   Do cyklu kreslenia pridaj výraz `if` a to pod výraz, ktorý si vytvoril/a pre šípku „nahor“.
        -   Použi blok `keyDown` tak, aby výraz `if` reagoval na stlačenie klávesy so šípkou vpravo.
        -   Vo vnútri bloku `if` použi kód pre počítanie v bloku `sprite.velocityX`, v ktorom sa pridá hodnota 0.1 k rýchlosti „sprite” objektu objektu na osi X.

        Spusti svoj kód, aby si videl/a, ako funguje. „Sprite“ by sa mal po stlačení klávesy šípky vpravo pohybovať doprava a vyskočiť po stlačení klávesy šípky hore. Smer vľavo doplníme v ďaľšom cvičení.
      CSD U3 abstraction left right counter_2019: |-
        # Vznášanie sa doprava

        Doteraz si používal/a počítadlo rýchlosti „sprite” objektu na osi Y na simuláciu gravitácie a skákania. Ak ho použiješ na osi x, tvoj „sprite“ sa môže vznášať  doprava i doľava.

        # Urob toto

        V tomto leveli sa bude tvoj „sprite“ vznášať doprava po stlačení šípky vpravo.

        -   Do cyklu kreslenia pridaj výraz `if` a to pod výraz, ktorý si vytvoril/a pre šípku „nahor“.
        -   Použi blok `keyDown` tak, aby výraz `if` reagoval na stlačenie klávesy so šípkou vpravo.
        -   Vo vnútri bloku `if` použi kód pre počítanie v bloku `sprite.velocityX`, v ktorom sa pridá hodnota 0.1 k rýchlosti „sprite” objektu objektu na osi X.

        Spusti svoj kód, aby si videl/a, ako funguje. „Sprite“ by sa mal po stlačení klávesy šípky vpravo pohybovať doprava a vyskočiť po stlačení klávesy šípky hore. Smer vľavo doplníme v ďaľšom cvičení.
      CSD U3 abstraction looping: |-
        # Cyklus

        Hra bude zábavnejšia, ak bude musieť žaba vyskočiť viac než raz. Hríb môžeš  „zacykliť“ tak, že skontroluješ, či dosiahol ľavý okraj obrazovky, a ak áno, tak ho presunieš znova na jej pravý okraj.

        # Urob toto

        -   Nájdi výraz `if` , ktorý kontroluje, či hríb prešiel ľavým okrajom obrazovky. ( [Ukáž mi kde](#triggercallout=code_triggered1) )
        -   Použi blok `sprite.x` na presunutie hríbu naspäť k pravému okraju obrazovky, ak už ľavým okrajom prešiel.
      CSD U3 abstraction looping_2018: |-
        # Cyklus

        Hra bude zábavnejšia, ak bude musieť žaba vyskočiť viac než raz. Hríb môžeš  „zacykliť“ tak, že skontroluješ, či dosiahol ľavý okraj obrazovky, a ak áno, tak ho presunieš znova na jej pravý okraj.

        # Urob toto

        -   Nájdi výraz `if` , ktorý kontroluje, či hríb prešiel ľavým okrajom obrazovky. ( [Ukáž mi kde](#triggercallout=code_triggered1) )
        -   Použi blok `sprite.x` na presunutie hríbu naspäť k pravému okraju obrazovky, ak už ľavým okrajom prešiel.
      CSD U3 abstraction looping_2019: |-
        # Cyklus

        Hra bude zábavnejšia, ak bude musieť žaba vyskočiť viac než raz. Hríb môžeš  „zacykliť“ tak, že skontroluješ, či dosiahol ľavý okraj obrazovky, a ak áno, tak ho presunieš znova na jej pravý okraj.

        # Urob toto

        -   Nájdi výraz `if` , ktorý kontroluje, či hríb prešiel ľavým okrajom obrazovky. ( [Ukáž mi kde](#triggercallout=code_triggered1) )
        -   Použi blok `sprite.x` na presunutie hríbu naspäť k pravému okraju obrazovky, ak už ľavým okrajom prešiel.
      CSD U3 abstraction make it your own: |-
        # Sprav si to po svojom

        Teraz už ovládaš základy pohybu, takže je čas urobiť si svoju vlastnú hru. Čo by sa v nej malo diať? Mala by postavička dostať bod za každý dotyk mince? Vieš pridať tabuľku so skóre, ako sme to robili v predchádzajúcej lekcii? Chceš pridať ďalšie mince? A čo tak pridať aj mince, po dotyku ktorých sa body odrátajú?

        # Urob toto

        Pridaj do hry aspoň jedno vylepšenie a sprav  ju jedinečnou. Svoje úpravy následne zdieľaj so spolužiakmi.
      CSD U3 abstraction make it your own_2018: |-
        # Sprav si to po svojom

        Teraz už ovládaš základy pohybu, takže je čas urobiť si svoju vlastnú hru. Čo by sa v nej malo diať? Mala by postavička dostať bod za každý dotyk mince? Vieš pridať tabuľku so skóre, ako sme to robili v predchádzajúcej lekcii? Chceš pridať ďalšie mince? A čo tak pridať aj mince, po dotyku ktorých sa body odrátajú?

        # Urob toto

        Pridaj do hry aspoň jedno vylepšenie a sprav  ju jedinečnou. Svoje úpravy následne zdieľaj so spolužiakmi.
      CSD U3 abstraction make it your own_2019: |-
        # Sprav si to po svojom

        Teraz už ovládaš základy pohybu, takže je čas urobiť si svoju vlastnú hru. Čo by sa v nej malo diať? Mala by postavička dostať bod za každý dotyk mince? Vieš pridať tabuľku so skóre, ako sme to robili v predchádzajúcej lekcii? Chceš pridať ďalšie mince? A čo tak pridať aj mince, po dotyku ktorých sa body odrátajú?

        # Urob toto

        Pridaj do hry aspoň jedno vylepšenie a sprav  ju jedinečnou. Svoje úpravy následne zdieľaj so spolužiakmi.
      CSD U3 abstraction reset coin: "# Obnovenie mince\n\nKeď sa tvoja postavička
        dotkne mince, mala by sa premiestniť na iné miesto.\n\n# Urob toto\n\n-   Do
        cyklu kreslenia vlož blok `if`.\n-   Na zistenie, či sa postavička dotkla
        mince, použi blok `sprite.isTouching()` \n-   Vo vnútri bloku `if` napíš kód,
        ktorý nastaví súradnice X a Y tejto mince náhodne na hodnotu medzi 0 a 400.\n\n
        \   -   _Pomôcka: Tento kód si už napísal/a na inom mieste v tvojom programe._\n\nPredtým,
        než pôjdeš ďalej, otestuj svoj kód. Keď sa postavička mince dotkne, minca
        by sa mala zobraziť v inej časti obrazovky."
      CSD U3 abstraction reset coin_2018: "# Obnovenie mince\n\nKeď sa tvoja postavička
        dotkne mince, mala by sa premiestniť na iné miesto.\n\n# Urob toto\n\n-   Do
        cyklu kreslenia vlož blok `if`.\n-   Na zistenie, či sa postavička dotkla
        mince, použi blok `sprite.isTouching()` \n-   Vo vnútri bloku `if` napíš kód,
        ktorý nastaví súradnice X a Y tejto mince náhodne na hodnotu medzi 0 a 400.\n\n
        \   -   _Pomôcka: Tento kód si už napísal/a na inom mieste v tvojom programe._\n\nPredtým,
        než pôjdeš ďalej, otestuj svoj kód. Keď sa postavička mince dotkne, minca
        by sa mala zobraziť v inej časti obrazovky."
      CSD U3 abstraction reset coin_2019: "# Obnovenie mince\n\nKeď sa tvoja postavička
        dotkne mince, mala by sa premiestniť na iné miesto.\n\n# Urob toto\n\n-   Do
        cyklu kreslenia vlož blok `if`.\n-   Na zistenie, či sa postavička dotkla
        mince, použi blok `sprite.isTouching()` \n-   Vo vnútri bloku `if` napíš kód,
        ktorý nastaví súradnice X a Y tejto mince náhodne na hodnotu medzi 0 a 400.\n\n
        \   -   _Pomôcka: Tento kód si už napísal/a na inom mieste v tvojom programe._\n\nPredtým,
        než pôjdeš ďalej, otestuj svoj kód. Keď sa postavička mince dotkne, minca
        by sa mala zobraziť v inej časti obrazovky."
      CSD U3 abstraction rotation: |-
        # Blok „rotationSpeed” (rýchlosť otáčania)

        Už si sa naučil/a, ako nastaviť rotáciu tvojho „sprite“ objektu použitím rotačného bloku `rotation`. Napríklad, keď si chcel/a, aby sa tvoj „sprite“ otočil o dva stupne zakaždým, keď bol nakreslený, vložil/a si `sprite.rotation = sprite.rotation + 2` do funkcie cyklu kreslenia.

        Teraz môžeš použiť `rotationSpeed`, aby sa tvoje „sprite“ objekty otáčali o určitú hodnotu zakaždým, keď budú nakreslené. Ak chceš, aby sa tvoje slnko otáčalo o dva stupne vždy, keď bude nakreslené, potom môžeš použiť `sun.rotationSpeed = 2` pred funkciou cyklu kreslenia, ale až potom ako tvoj „sprite“ vytvoríš.

        # Urob toto

        Vytvor kód tak, aby sa slnko otočilo o 3 stupne pri každom použití bloku `rotationSpeed`. ( [Ukáž mi kde](#triggercallout=callout1) )
      CSD U3 abstraction rotation control: |-
        # Kontrola rýchlosti

        Použil/a si blok `rotationSpeed` mimo cyklu kreslenia, aby sa tvoj „sprite“ otáčal vždy, keď  spusíš program. Tento blok vieš použiť aj v cykle kreslenia, a to na zmenu rýchlosti „sprite“ objektu počas hry. Môže sa napríklad začať otáčať, keď používateľ stlačí medzerník, a bude sa otáčať dovtedy, kým ho nezastaví.

        # Urob toto

        -   Pozri sa na `if` výrok v cykle kreslenia, ktorý kontroluje, či bol stlačený medzerník. ( [Ukáž mi kde](#triggercallout=code_triggered1) )
        -   Použi blok `rotationSpeed` tak, aby sa koleso otáčalo vždy, keď používateľ stlačí medzerník.
      CSD U3 abstraction rotation control_2018: |-
        # Kontrola rýchlosti

        Použil/a si blok `rotationSpeed` mimo cyklu kreslenia, aby sa tvoj „sprite“ otáčal vždy, keď  spusíš program. Tento blok vieš použiť aj v cykle kreslenia, a to na zmenu rýchlosti „sprite“ objektu počas hry. Môže sa napríklad začať otáčať, keď používateľ stlačí medzerník, a bude sa otáčať dovtedy, kým ho nezastaví.

        # Urob toto

        -   Pozri sa na `if` výrok v cykle kreslenia, ktorý kontroluje, či bol stlačený medzerník. ( [Ukáž mi kde](#triggercallout=code_triggered1) )
        -   Použi blok `rotationSpeed` tak, aby sa koleso otáčalo vždy, keď používateľ stlačí medzerník.
      CSD U3 abstraction rotation control_2019: |-
        # Kontrola rýchlosti

        Použil/a si blok `rotationSpeed` mimo cyklu kreslenia, aby sa tvoj „sprite“ otáčal vždy, keď  spusíš program. Tento blok vieš použiť aj v cykle kreslenia, a to na zmenu rýchlosti „sprite“ objektu počas hry. Môže sa napríklad začať otáčať, keď používateľ stlačí medzerník, a bude sa otáčať dovtedy, kým ho nezastavíš.

        # Urob toto

        -   Pozri sa na výrok `if` umiestnený v cykle kreslenia, ktorý kontroluje, či bol stlačený medzerník. ( [Ukáž mi kde](#triggercallout=code_triggered1) )
        -   Použi blok `rotationSpeed` tak, aby sa koleso otáčalo vždy, keď používateľ stlačí medzerník.
      CSD U3 abstraction rotation_2018: |-
        # Blok „rotationSpeed” (rýchlosť otáčania)

        Už si sa naučil/a, ako nastaviť rotáciu tvojho „sprite“ objektu použitím rotačného bloku `rotation`. Napríklad, keď si chcel/a, aby sa tvoj „sprite“ otočil o dva stupne zakaždým, keď bol nakreslený, vložil/a si `sprite.rotation = sprite.rotation + 2` do funkcie cyklu kreslenia.

        Teraz môžeš použiť `rotationSpeed`, aby sa tvoje „sprite“ objekty otáčali o určitú hodnotu zakaždým, keď budú nakreslené. Ak chceš, aby sa tvoje slnko otáčalo o dva stupne vždy, keď bude nakreslené, potom môžeš použiť `sun.rotationSpeed = 2` pred funkciou cyklu kreslenia, ale až potom ako tvoj „sprite“ vytvoríš.

        # Urob toto

        Vytvor kód tak, aby sa slnko otočilo o 3 stupne pri každom použití bloku `rotationSpeed`. ( [Ukáž mi kde](#triggercallout=callout1) )
      CSD U3 abstraction rotation_2019: |-
        # Blok „rotationSpeed” (rýchlosť otáčania)

        Už si sa naučil/a, ako nastaviť rotáciu tvojho „sprite“ objektu použitím rotačného bloku `rotation`. Napríklad, keď si chcel/a, aby sa tvoj „sprite“ otočil o dva stupne zakaždým, keď bol nakreslený, vložil/a si `sprite.rotation = sprite.rotation + 2` do funkcie cyklu kreslenia.

        Teraz môžeš použiť `rotationSpeed`, aby sa tvoje „sprite“ objekty otáčali o určitú hodnotu zakaždým, keď budú nakreslené. Ak chceš, aby sa tvoje slnko otáčalo o dva stupne vždy, keď bude nakreslené, potom môžeš použiť `sun.rotationSpeed = 2` pred funkciou cyklu kreslenia, ale až potom ako tvoj „sprite“ vytvoríš.

        # Urob toto

        Vytvor kód tak, aby sa slnko otočilo o 3 stupne pri každom použití bloku `rotationSpeed`. ( [Ukáž mi kde](#triggercallout=callout1) )
      CSD U3 abstraction tumbleweed: |-
        # Hríb

        Teraz potrebuješ niečo, čo tvoj „sprite“ preskočí. Tento program už obsahuje hríb pri pravom okraji obrazovky, treba ho však posunúť bližšie ku žabe.

        # Urob toto

        -   Použi blok `velocityX` na posúvanie hríbu smerom doľava.

        _Nápoveda: Hríb by sa mal začať pohybovať hneď po spustení hry až do jej konca. Bude teda jeho kód vnútri alebo mimo cyklu kreslenia?_
      CSD U3 abstraction tumbleweed_2018: |-
        # Hríb

        Teraz potrebuješ niečo, čo tvoj „sprite“ preskočí. Tento program už obsahuje hríb pri pravom okraji obrazovky, treba ho však posunúť bližšie ku žabe.

        # Urob toto

        -   Použi blok `velocityX` na posúvanie hríbu smerom doľava.

        _Nápoveda: Hríb by sa mal začať pohybovať hneď po spustení hry až do jej konca. Bude teda jeho kód vnútri alebo mimo cyklu kreslenia?_
      CSD U3 abstraction tumbleweed_2019: |-
        # Hríb

        Teraz potrebuješ niečo, čo tvoj „sprite“ preskočí. Tento program už obsahuje hríb pri pravom okraji obrazovky, treba ho však posunúť bližšie ku žabe.

        # Urob toto

        -   Použi blok `velocityX` na posúvanie hríbu smerom doľava.

        _Nápoveda: Hríb by sa mal začať pohybovať hneď po spustení hry až do jej konca. Bude teda jeho kód vnútri alebo mimo cyklu kreslenia?_
      CSD U3 abstraction velocityX: |-
        # velocityX

        Jednou môžnosťou, ako presunúť „sprite“ objekt v Game Labe, je pomocou kódu pre počítanie. Napríklad `sprite1.x = sprite1.x + 1` presunie „sprite“ objekt o 1 pixel na každej snímke funkcie cyklu kreslenia. Tento kód je tak používaný, že „sprite“ objekty majú prednastavenú vlastnosť `velocityX` , ktorá to urobí za teba.

        # Urob toto:

        -   Potiahnit blok `sprite.velocityX` priamo pod tvoj vytvorený „sprite“ objekt ([Ukáž mi kde](#triggercallout=code_triggered) ).
        -   Napíš názov tvojho „sprite“ objektu do bloku.
        -   Priraď vlastnosti `velocityX` hodnotu 1.
            • Spusti kód. Čo sa stane?
            • Znova spusti kód s inou hodnotou pre `velocityX`. Čo sa mení?
      CSD U3 abstraction velocityX control: |-
        # Ovládanie viacerými spôsobmi

        Ako si videl/a v predchádzajúcom cvičení, rýchlosť „sprite“ objektu môžeš zmeniť pomocou viacerých výrazov `if`. V tomto programe má ryba tri typy pohybu, pričom každý z nich by mal byť kontrolovaný samostatným výrazom `if`.

        # Urob toto

        -   Pozri sa na výrazy `if` vo vnútri cyklu kreslenia.
        -   Použi blok `sprite.velocityX` vo vnútri každého výrazu `if` na vykonanie nasledovných pohybov:
            -   Ak užívateľ stlačí pravú šípku, ryba sa pohne doprava.
            -   Ak sa ryba dostane k pravému okraju obrazovky, otoč rybu smerom doľava.
            -   Ak sa dostane k ľavému okraju obrazovky, zastaví sa.
      CSD U3 abstraction velocityX control_2018: |-
        # Ovládanie viacerými spôsobmi

        Ako si videl/a v predchádzajúcom cvičení, rýchlosť „sprite“ objektu môžeš zmeniť pomocou viacerých výrazov `if`. V tomto programe má ryba tri typy pohybu, pričom každý z nich by mal byť kontrolovaný samostatným výrazom `if`.

        # Urob toto

        -   Pozri sa na výrazy `if` vo vnútri cyklu kreslenia.
        -   Použi blok `sprite.velocityX` vo vnútri každého výrazu `if` na vykonanie nasledovných pohybov:
            -   Ak užívateľ stlačí pravú šípku, ryba sa pohne doprava.
            -   Ak sa ryba dostane k pravému okraju obrazovky, otoč rybu smerom doľava.
            -   Ak sa dostane k ľavému okraju obrazovky, zastaví sa.
      CSD U3 abstraction velocityX control_2019: |-
        # Ovládanie viacerými spôsobmi

        Ako si videl/a v predchádzajúcom cvičení, rýchlosť „sprite“ objektu môžeš zmeniť pomocou viacerých výrazov `if`. V tomto programe má ryba tri typy pohybu, pričom každý z nich by mal byť kontrolovaný samostatným výrazom `if`.

        # Urob toto

        -   Pozri sa na výrazy `if` vo vnútri cyklu kreslenia.
        -   Použi blok `sprite.velocityX` vo vnútri každého výrazu `if` na vykonanie nasledovných pohybov:
            -   Ak užívateľ stlačí pravú šípku, ryba sa pohne doprava.
            -   Ak sa ryba dostane k pravému okraju obrazovky, otoč rybu smerom doľava.
            -   Ak sa dostane k ľavému okraju obrazovky, zastaví sa.
      CSD U3 abstraction velocityX if-statements: "# Zmena rýchlosti na základe pozície\n\nJednou
        z výhod používania bloku „velocity“ vo vnútri podmienky (blok `if`) je, že
        tvoj „sprite“ sa bude pohybovať ďalej, aj v momente, keď už podmienka neplatí.
        Napríklad, ak stlačíš klávesu pre spustenie robota len raz, robot bude v lete
        pokračovať donekonečna. \n\nV kóde nižšie sa ryba pohne doľava po dosiahnutí
        pravého okraja. Keď sa dotkne ľavého okraja, , začne sa posúvať doprava. Tento
        \"sprite\" sa pohybuje aj v momente, keď sa už okraja nedotýka.\n\n# Urob
        toto\n\n-   Pozri sa na výraz `if`,  ktorý kontroluje pozíciu „sprite“ objektu
        a nastavuje jeho rýchlosť.\n-   S kamarátom/kamarátkou porozmýšľajte nad tým,
        \ ako môže \"sprite\" vedieť, ktorým smerom sa má hýbať v momente, keď neplatí
        ani jeden z výrokov `if` (napríklad, keď sa \"sprite\" nachádza v strede obrazovky)."
      CSD U3 abstraction velocityX if-statements predict: |-
        # Zmena rýchlosti na základe pozície

        Jednou z výhod používania bloku „velocity“ vo vnútri podmienky (blok `if`) je, že tvoj „sprite“ sa bude pohybovať ďalej, aj v momente, keď už podmienka neplatí. Napríklad, ak stlačíš klávesu pre spustenie robota len raz, robot bude v lete pokračovať donekonečna. Kód nižšie používa výraz „if“ pre pohyb ryby v rôznych smeroch.

        # Urob toto

        -   Pozri sa na výraz `if`,  ktorý kontroluje pozíciu „sprite“ objektu a nastavuje jeho rýchlosť.
        -   S kamarátom/kamarátkou porozmýšľajte nad tým, čo asi kód spraví  a vašu odpoveď zapíšte.
        -   Po napísaní odpovede kód spustite.
      CSD U3 abstraction velocityX if-statements predict_2018: |-
        # Zmena rýchlosti na základe pozície

        Jednou z výhod používania bloku „velocity“ vo vnútri podmienky (blok `if`) je, že tvoj „sprite“ sa bude pohybovať ďalej, aj v momente, keď už podmienka neplatí. Napríklad, ak stlačíš klávesu pre spustenie robota len raz, robot bude v lete pokračovať donekonečna. Kód nižšie používa výraz „if“ pre pohyb ryby v rôznych smeroch.

        # Urob toto

        -   Pozri sa na výraz `if`,  ktorý kontroluje pozíciu „sprite“ objektu a nastavuje jeho rýchlosť.
        -   S kamarátom/kamarátkou porozmýšľajte nad tým, čo asi kód spraví  a vašu odpoveď zapíšte.
        -   Po napísaní odpovede kód spustite.
      CSD U3 abstraction velocityX if-statements predict_2019: |-
        # Zmena rýchlosti na základe pozície

        Jednou z výhod používania bloku „velocity“ vo vnútri podmienky (blok `if`) je, že tvoj „sprite“ sa bude pohybovať ďalej, aj v momente, keď už podmienka neplatí. Napríklad, ak stlačíš klávesu pre spustenie robota len raz, robot bude v lete pokračovať donekonečna. Kód nižšie používa výraz „if“ pre pohyb ryby v rôznych smeroch.

        # Urob toto

        -   Pozri sa na výraz `if`,  ktorý kontroluje pozíciu „sprite“ objektu a nastavuje jeho rýchlosť.
        -   S kamarátom/kamarátkou porozmýšľajte nad tým, čo asi kód spraví  a vašu odpoveď zapíšte.
        -   Po napísaní odpovede kód spustite.
      CSD U3 abstraction velocityX if-statements_2018: "# Zmena rýchlosti na základe
        pozície\n\nJednou z výhod používania bloku „velocity“ vo vnútri podmienky
        (blok `if`) je, že tvoj „sprite“ sa bude pohybovať ďalej, aj v momente, keď
        už podmienka neplatí. Napríklad, ak stlačíš klávesu pre spustenie robota len
        raz, robot bude v lete pokračovať donekonečna. \n\nV kóde nižšie sa ryba pohne
        doľava po dosiahnutí pravého okraja. Keď sa dotkne ľavého okraja, , začne
        sa posúvať doprava. Tento \"sprite\" sa pohybuje aj v momente, keď sa už okraja
        nedotýka.\n\n# Urob toto\n\n-   Pozri sa na výraz `if`,  ktorý kontroluje
        pozíciu „sprite“ objektu a nastavuje jeho rýchlosť.\n-   S kamarátom/kamarátkou
        porozmýšľajte nad tým,  ako môže \"sprite\" vedieť, ktorým smerom sa má hýbať
        v momente, keď neplatí ani jeden z výrokov `if` (napríklad, keď sa \"sprite\"
        nachádza v strede obrazovky)."
      CSD U3 abstraction velocityX if-statements_2019: "# Zmena rýchlosti na základe
        pozície\n\nJednou z výhod používania bloku „velocity“ vo vnútri podmienky
        (blok `if`) je, že tvoj „sprite“ sa bude pohybovať ďalej, aj v momente, keď
        už podmienka neplatí. Napríklad, ak stlačíš klávesu pre spustenie robota len
        raz, robot bude v lete pokračovať donekonečna. \n\nV kóde nižšie sa ryba pohne
        doľava po dosiahnutí pravého okraja. Keď sa dotkne ľavého okraja, , začne
        sa posúvať doprava. Tento \"sprite\" sa pohybuje aj v momente, keď sa už okraja
        nedotýka.\n\n# Urob toto\n\n-   Pozri sa na výraz `if`,  ktorý kontroluje
        pozíciu „sprite“ objektu a nastavuje jeho rýchlosť.\n-   S kamarátom/kamarátkou
        porozmýšľajte nad tým,  ako môže \"sprite\" vedieť, ktorým smerom sa má hýbať
        v momente, keď neplatí ani jeden z výrokov `if` (napríklad, keď sa \"sprite\"
        nachádza v strede obrazovky)."
      CSD U3 abstraction velocityX_2018: |-
        # velocityX

        Jednou môžnosťou, ako presunúť „sprite“ objekt v Game Labe, je pomocou kódu pre počítanie. Napríklad `sprite1.x = sprite1.x + 1` presunie „sprite“ objekt o 1 pixel na každej snímke funkcie cyklu kreslenia. Tento kód je tak používaný, že „sprite“ objekty majú prednastavenú vlastnosť `velocityX` , ktorá to urobí za teba.

        # Urob toto:

        -   Potiahnit blok `sprite.velocityX` priamo pod tvoj vytvorený „sprite“ objekt ([Ukáž mi kde](#triggercallout=code_triggered) ).
        -   Napíš názov tvojho „sprite“ objektu do bloku.
        -   Priraď vlastnosti `velocityX` hodnotu 1.
            • Spusti kód. Čo sa stane?
            • Znova spusti kód s inou hodnotou pre `velocityX`. Čo sa mení?
      CSD U3 abstraction velocityX_2019: |-
        # velocityX

        Jednou môžnosťou, ako presunúť „sprite“ objekt v Game Labe, je pomocou kódu pre počítanie. Napríklad `sprite1.x = sprite1.x + 1` presunie „sprite“ objekt o 1 pixel na každej snímke funkcie cyklu kreslenia. Tento kód je tak používaný, že „sprite“ objekty majú prednastavenú vlastnosť `velocityX` , ktorá to urobí za teba.

        # Urob toto:

        -   Potiahnit blok `sprite.velocityX` priamo pod tvoj vytvorený „sprite“ objekt ([Ukáž mi kde](#triggercallout=code_triggered) ).
        -   Napíš názov tvojho „sprite“ objektu do bloku.
        -   Priraď vlastnosti `velocityX` hodnotu 1.
            • Spusti kód. Čo sa stane?
            • Znova spusti kód s inou hodnotou pre `velocityX`. Čo sa mení?
      CSD U3 abstraction velocityY: |-
        # Pohyb nadol

        Tu máme „sprite“ pierko, ktoré by malo na obrazovke klesať nadol. Ak `velocityX` spôsobí, že sa posunie doprava, vieš nájsť blok, ktorý zabezpečí, že sa pierko pohne nadol?

        # Urob toto

        Nájdi kód, ktorý spôsobí, že pierko pôjde smerom nadol, a použi ho mimo funkcie cyklu kreslenia. ( [Ukáž mi kde](#triggercallout=code_triggered) )
      CSD U3 abstraction velocityY control: |-
        # Kontrola rýchlosti

        Kód pred cyklom kreslenia nastavuje začiatok hry. Kód vo vnútri cyklu riadi zmeny počas jej hrania. V tejto hre robot – helikoptéra začína v spodnej časti obrazovky. Keď stlačíš medzerník poletí dohora.

        # Urob toto

        -   Do cyklu kreslenia na kontrolu stlačenia medzerníka umiestni výraz `if`.
        -   Použi blok `velocityY`  aby  „sprite“ vyletel dohora pri každom stlačení medzerníka. Mal by sa pohybovať nahor aj vtedy, keď už medzerník nie je stlačený.
      CSD U3 abstraction velocityY control_2018: |-
        # Kontrola rýchlosti

        Kód pred cyklom kreslenia nastavuje začiatok hry. Kód vo vnútri cyklu riadi zmeny počas jej hrania. V tejto hre robot – helikoptéra začína v spodnej časti obrazovky. Keď stlačíš medzerník poletí dohora.

        # Urob toto

        -   Do cyklu kreslenia na kontrolu stlačenia medzerníka umiestni výraz `if`.
        -   Použi blok `velocityY`  aby  „sprite“ vyletel dohora pri každom stlačení medzerníka. Mal by sa pohybovať nahor aj vtedy, keď už medzerník nie je stlačený.
      CSD U3 abstraction velocityY control_2019: |-
        # Kontrola rýchlosti

        Kód pred cyklom kreslenia nastavuje začiatok hry. Kód vo vnútri cyklu riadi zmeny počas jej hrania. V tejto hre robot – helikoptéra začína v spodnej časti obrazovky. Keď stlačíš medzerník poletí dohora.

        # Urob toto

        -   Do cyklu kreslenia na kontrolu stlačenia medzerníka umiestni výraz `if`.
        -   Použi blok `velocityY`  aby  „sprite“ vyletel dohora pri každom stlačení medzerníka. Mal by sa pohybovať nahor aj vtedy, keď už medzerník nie je stlačený.
      CSD U3 abstraction velocityY_2018: |-
        # Pohyb nadol

        Tu máme „sprite“ pierko, ktoré by malo na obrazovke klesať nadol. Ak `velocityX` spôsobí, že sa posunie doprava, vieš nájsť blok, ktorý zabezpečí, že sa pierko pohne nadol?

        # Urob toto

        Nájdi kód, ktorý spôsobí, že pierko pôjde smerom nadol, a použi ho mimo funkcie cyklu kreslenia. ( [Ukáž mi kde](#triggercallout=code_triggered) )
      CSD U3 abstraction velocityY_2019: |-
        # Pohyb nadol

        Tu máme „sprite“ pierko, ktoré by malo na obrazovke klesať nadol. Ak `velocityX` spôsobí, že sa posunie doprava, vieš nájsť blok, ktorý zabezpečí, že sa pierko pohne nadol?

        # Urob toto

        Nájdi kód, ktorý spôsobí, že pierko pôjde smerom nadol, a použi ho mimo funkcie cyklu kreslenia. ( [Ukáž mi kde](#triggercallout=code_triggered) )
      CSD U3 challenge face: |-
        <img src="https://images.code.org/aa5aedbcfec082c2886d88b565e5fc09-image-1495732712591.png" style="float: right; max-width: 200px; border: 1px solid grey">

        # Challenge: Face

        _Check with your teacher before starting any of the challenges._

        Write a program that uses `rect`, `ellipse`, and `fill` to create the face on the right. The colors used are "lightblue", "red", and "lightgreen".
        Once you've finished, add your own personal touches to the image.
      CSD U3 challenge face_2018: |-
        <img src="https://images.code.org/aa5aedbcfec082c2886d88b565e5fc09-image-1495732712591.png" style="float: right; max-width: 200px; border: 1px solid grey">

        # Challenge: Face

        _Check with your teacher before starting any of the challenges._

        Write a program that uses `rect`, `ellipse`, and `fill` to create the face on the right. The colors used are "lightblue", "red", and "lightgreen".
        Once you've finished, add your own personal touches to the image.
      CSD U3 challenge face_2019: |-
        <img src="https://images.code.org/aa5aedbcfec082c2886d88b565e5fc09-image-1495732712591.png" style="float: right; max-width: 200px; border: 1px solid grey">

        # Challenge: Face

        _Check with your teacher before starting any of the challenges._

        Write a program that uses `rect`, `ellipse`, and `fill` to create the face on the right. The colors used are "lightblue", "red", and "lightgreen".
        Once you've finished, add your own personal touches to the image.
      CSD U3 challenge new shape: |-
        <img src="https://images.code.org/cc725698ade5282931002db3bf762cbc-image-1495733456927.png" style="float: right; max-width: 200px; border: 1px solid grey">

        # Challenge: Shape of Shapes

        _Check with your teacher before starting any of the challenges._

        Using only the `rect` and `ellipse` commands, can you draw a new shape, such as this triangle made out of circles?
      CSD U3 challenge new shape_2018: |-
        <img src="https://images.code.org/cc725698ade5282931002db3bf762cbc-image-1495733456927.png" style="float: right; max-width: 200px; border: 1px solid grey">

        # Challenge: Shape of Shapes

        _Check with your teacher before starting any of the challenges._

        Using only the `rect` and `ellipse` commands, can you draw a new shape, such as this triangle made out of circles?
      CSD U3 challenge new shape_2019: |-
        <img src="https://images.code.org/cc725698ade5282931002db3bf762cbc-image-1495733456927.png" style="float: right; max-width: 200px; border: 1px solid grey">

        # Challenge: Shape of Shapes

        _Check with your teacher before starting any of the challenges._

        Using only the `rect` and `ellipse` commands, can you draw a new shape, such as this triangle made out of circles?
      CSD U3 collisions bounciness: "# Blok „bounciness“ („odrazivosť“)\n\nBlok `bounceOff`
        nechal  „sprite” objekty odskočiť od seba rovnako rýchlo, ako do seba narazili.
        V skutočnom svete však skoro všetko po odrazení sa od niečoho mierne spomalí.
        \nBlok `bounciness` môžeš použiť na to, aby si svojmu „sprite” objektu povedal/a,
        ako veľmi má spomaliť alebo zrýchliť po odrazení sa od niečoho.\n\n# Urob
        toto\n\n-   Prečítaj si kód nižšie a stlač  „Spustiť”, aby si videl/a správanie
        basketbalovej a biliardovej lopty.\n-   Použi blok `bounciness` pre nastavenie
        „odrazivosti“ futbalovej lopty\n-   Spusti kód znova, aby si videl/a, ako
        sa   „sprite” objekty odrazia od zeme. "
      CSD U3 collisions bounciness_2018: "# Blok „bounciness“ („odrazivosť“)\n\nBlok
        `bounceOff` nechal  „sprite” objekty odskočiť od seba rovnako rýchlo, ako
        do seba narazili. V skutočnom svete však skoro všetko po odrazení sa od niečoho
        mierne spomalí. \nBlok `bounciness` môžeš použiť na to, aby si svojmu „sprite”
        objektu povedal/a, ako veľmi má spomaliť alebo zrýchliť po odrazení sa od
        niečoho.\n\n# Urob toto\n\n-   Prečítaj si kód nižšie a stlač  „Spustiť”,
        aby si videl/a správanie basketbalovej a biliardovej lopty.\n-   Použi blok
        `bounciness` pre nastavenie „odrazivosti“ futbalovej lopty\n-   Spusti kód
        znova, aby si videl/a, ako sa   „sprite” objekty odrazia od zeme. "
      CSD U3 collisions bounciness_2019: "# Blok „bounciness“ („odrazivosť“)\n\nBlok
        `bounceOff` nechal  „sprite” objekty odskočiť od seba rovnako rýchlo, ako
        do seba narazili. V skutočnom svete však skoro všetko po odrazení sa od niečoho
        mierne spomalí. \nBlok `bounciness` môžeš použiť na to, aby si svojmu „sprite”
        objektu povedal/a, ako veľmi má spomaliť alebo zrýchliť po odrazení sa od
        niečoho.\n\n# Urob toto\n\n-   Prečítaj si kód nižšie a stlač  „Spustiť”,
        aby si videl/a správanie basketbalovej a biliardovej lopty.\n-   Použi blok
        `bounciness` pre nastavenie „odrazivosti“ futbalovej lopty\n-   Spusti kód
        znova, aby si videl/a, ako sa   „sprite” objekty odrazia od zeme. "
      CSD U3 collisions build isTouching: |-
        # Balón

        Kód nižšie používa súradnice X a Y na kontrolu toho, či sa „sprite“ objekty dotýkajú. Dotyk zmení animáciu balónu, keď sa ho pripináčik dotkne. Použi klávesové šípky na hýbanie s pripináčikom, až pokým sa nedotkne balóna.

        # Urob toto

        -   V tejto lekcii nemusíš meniť žiadny kód
        -   Prečítaj si „if“ výroky v rámci funkcie kreslenia a zisti, ako program porovnáva rôzne vlastnosti „sprite” objektov.
        -   Diskutuj s kamarátom o kóde. Chcelo by sa ti tento kód písať zakaždým, keď chceš zistiť, či sa „sprite” objekty dotýkajú?
      CSD U3 collisions build isTouching_2018: |-
        # Balón

        Kód nižšie používa súradnice X a Y na kontrolu toho, či sa „sprite“ objekty dotýkajú. Dotyk zmení animáciu balónu, keď sa ho pripináčik dotkne. Použi klávesové šípky na hýbanie s pripináčikom, až pokým sa nedotkne balóna.

        # Urob toto

        -   V tejto lekcii nemusíš meniť žiadny kód
        -   Prečítaj si „if“ výroky v rámci funkcie kreslenia a zisti, ako program porovnáva rôzne vlastnosti „sprite” objektov.
        -   Diskutuj s kamarátom o kóde. Chcelo by sa ti tento kód písať zakaždým, keď chceš zistiť, či sa „sprite” objekty dotýkajú?
      CSD U3 collisions build isTouching_2019: |-
        # Balón

        Kód nižšie používa súradnice X a Y na kontrolu toho, či sa „sprite“ objekty dotýkajú. Dotyk zmení animáciu balónu, keď sa ho pripináčik dotkne. Použi klávesové šípky na hýbanie s pripináčikom, až pokým sa nedotkne balóna.

        # Urob toto

        -   V tejto lekcii nemusíš meniť žiadny kód
        -   Prečítaj si „if“ výroky v rámci funkcie kreslenia a zisti, ako program porovnáva rôzne vlastnosti „sprite” objektov.
        -   Diskutuj s kamarátom o kóde. Chcelo by sa ti tento kód písať zakaždým, keď chceš zistiť, či sa „sprite” objekty dotýkajú?
      CSD U3 collisions car intro: |-
        # Skákajúca žaba

        Pozri sa na hru o skakajúcej žabe vľavo. Vyzerá, ako hra z predchádzajúcej lekcie, ale keď sa žaba dotkne hríbu, pohne ním. Aký kód by podľa tvojho názoru pomohol počítaču zistiť, či sa dva „sprite” objekty dotýkajú?
      CSD U3 collisions car intro_2018: |-
        # Skákajúca žaba

        Pozri sa na hru o skakajúcej žabe vľavo. Vyzerá, ako hra z predchádzajúcej lekcie, ale keď sa žaba dotkne hríbu, pohne ním. Aký kód by podľa tvojho názoru pomohol počítaču zistiť, či sa dva „sprite” objekty dotýkajú?
      CSD U3 collisions car intro_2019: |-
        # Skákajúca žaba

        Pozri sa na hru o skakajúcej žabe vľavo. Vyzerá, ako hra z predchádzajúcej lekcie, ale keď sa žaba dotkne hríbu, pohne ním. Aký kód by podľa tvojho názoru pomohol počítaču zistiť, či sa dva „sprite” objekty dotýkajú?
      CSD U3 collisions debug: |-
        # Oprava chýb

         „Sprite“ objekty sa niekedy správajú neočakávane. Existuje špeciálna možnosť `sprite.debug`, ktorú môžeš použiť pre lepšie pochopenie, prečo  sa „sprite“ objekty správajú nejakým spôsobom.

        # Urob toto

        Tieto dve mince sú okrúhle, takže sa očakáva, že sa od seba odrazia, keď sa dotknú. No deje sa niečo zvláštne!

        -   Spusti kód a pozri sa, ako spolu mince interagujú.
        -   Použi blok `sprite.debug` pre opravu chýb pri obidvoch „sprite” objektoch a spusti kód znova.
        -   Zmeň štartovaciu pozíciu zlatej mince na súradnici X na 51 a spusti kód znova.
        -   Porozprávaj sa so spolusediacim: Prečo si myslíš, že sa mince od seba odrážajú tak zvláštne?
      CSD U3 collisions debug isTouching: |-
        # Oprava chýb

        Balón praskne ešte predtým, ako sa ho pripináčik dotkne. Keď „sprite“ objekty nerobia to, čo očakávaš, môžeš použiť blok `debug`, aby si zistil/a prečo. Prídeš na to, čo je v tomto kóde nesprávne?

        # Urob toto

        -   Spusti kód a posúvaj pripináčik použitím šípok na klávesnici tak, aby praskol balón.
        -   V kóde nižšie zmeň `balloon.debug = false` na `balloon.debug = true`.
        -   Pridaj do kódu nový blok debug a nastav pripináčiku „debug“ vlastnosť na `true`.
        -   Spusti kód znova a diskutuj so svojím partnerom, prečo balón praská priskoro.

        _Výzva: Dokážeš využiť záložku s animáciami na zmenu veľkosti obrázku balóna tak, aby praskol v správnom čase?_
      CSD U3 collisions debug isTouching_2018: |-
        # Oprava chýb

        Balón praskne ešte predtým, ako sa ho pripináčik dotkne. Keď „sprite“ objekty nerobia to, čo očakávaš, môžeš použiť blok `debug`, aby si zistil/a prečo. Prídeš na to, čo je v tomto kóde nesprávne?

        # Urob toto

        -   Spusti kód a posúvaj pripináčik použitím šípok na klávesnici tak, aby praskol balón.
        -   V kóde nižšie zmeň `balloon.debug = false` na `balloon.debug = true`.
        -   Pridaj do kódu nový blok debug a nastav pripináčiku „debug“ vlastnosť na `true`.
        -   Spusti kód znova a diskutuj so svojím partnerom, prečo balón praská priskoro.

        _Výzva: Dokážeš využiť záložku s animáciami na zmenu veľkosti obrázku balóna tak, aby praskol v správnom čase?_
      CSD U3 collisions debug isTouching_2019: |-
        # Oprava chýb

        Balón praskne ešte predtým, ako sa ho pripináčik dotkne. Keď „sprite“ objekty nerobia to, čo očakávaš, môžeš použiť blok `debug`, aby si zistil/a prečo. Prídeš na to, čo je v tomto kóde nesprávne?

        # Urob toto

        -   Spusti kód a posúvaj pripináčik použitím šípok na klávesnici tak, aby praskol balón.
        -   V kóde nižšie zmeň `balloon.debug = false` na `balloon.debug = true`.
        -   Pridaj do kódu nový blok debug a nastav pripináčiku „debug“ vlastnosť na `true`.
        -   Spusti kód znova a diskutuj so svojím partnerom, prečo balón praská priskoro.

        _Výzva: Dokážeš využiť záložku s animáciami na zmenu veľkosti obrázku balóna tak, aby praskol v správnom čase?_
      CSD U3 collisions debug_2018: |-
        # Oprava chýb

         „Sprite“ objekty sa niekedy správajú neočakávane. Existuje špeciálna možnosť `sprite.debug`, ktorú môžeš použiť pre lepšie pochopenie, prečo  sa „sprite“ objekty správajú nejakým spôsobom.

        # Urob toto

        Tieto dve mince sú okrúhle, takže sa očakáva, že sa od seba odrazia, keď sa dotknú. No deje sa niečo zvláštne!

        -   Spusti kód a pozri sa, ako spolu mince interagujú.
        -   Použi blok `sprite.debug` pre opravu chýb pri obidvoch „sprite” objektoch a spusti kód znova.
        -   Zmeň štartovaciu pozíciu zlatej mince na súradnici X na 51 a spusti kód znova.
        -   Porozprávaj sa so spolusediacim: Prečo si myslíš, že sa mince od seba odrážajú tak zvláštne?
      CSD U3 collisions debug_2019: |-
        # Oprava chýb

         „Sprite“ objekty sa niekedy správajú neočakávane. Existuje špeciálna možnosť `sprite.debug`, ktorú môžeš použiť pre lepšie pochopenie, prečo  sa „sprite“ objekty správajú nejakým spôsobom.

        # Urob toto

        Tieto dve mince sú okrúhle, takže sa očakáva, že sa od seba odrazia, keď sa dotknú. No deje sa niečo zvláštne!

        -   Spusti kód a pozri sa, ako spolu mince interagujú.
        -   Použi blok `sprite.debug` pre opravu chýb pri obidvoch „sprite” objektoch a spusti kód znova.
        -   Zmeň štartovaciu pozíciu zlatej mince na súradnici X na 51 a spusti kód znova.
        -   Porozprávaj sa so spolusediacim: Prečo si myslíš, že sa mince od seba odrážajú tak zvláštne?
      CSD U3 collisions displace intro: |-
        # Blok „sprite.displace()“ (odstránenie „sprite“ objektu)

        Interakcia, ktorú si naprogramoval/a je taká bežná, že je pre ňu navrhnutý samostatný blok, ktorý ju spraví za teba. `sprite.displace()` spôsobí že jeden „sprite“ posunie druhý vždy, keď sa stretnú. Kód, ktorý je obsiahnutý v tomto bloku, vyzerá veľmi podobne, ako ten, čo si už napísal/a, ale teraz sa už zakaždým nemusíš zaoberať vypisovaním detailov.

        # Urob toto

        Niekto sa snažil použiť `sprite.displace()` blok tak, aby slon posunul hrocha, ale je v tom chyba. Dokážeš upraviť kód tak, aby slon vytlačil hrocha z obrazovky?

        -   Nájdi riadok v kóde, kde je blok `sprite.displace()` použitý, a oprav chybu.
      CSD U3 collisions displace intro_2018: |-
        # Blok „sprite.displace()“ (odstránenie „sprite“ objektu)

        Interakcia, ktorú si naprogramoval/a je taká bežná, že je pre ňu navrhnutý samostatný blok, ktorý ju spraví za teba. `sprite.displace()` spôsobí že jeden „sprite“ posunie druhý vždy, keď sa stretnú. Kód, ktorý je obsiahnutý v tomto bloku, vyzerá veľmi podobne, ako ten, čo si už napísal/a, ale teraz sa už zakaždým nemusíš zaoberať vypisovaním detailov.

        # Urob toto

        Niekto sa snažil použiť `sprite.displace()` blok tak, aby slon posunul hrocha, ale je v tom chyba. Dokážeš upraviť kód tak, aby slon vytlačil hrocha z obrazovky?

        -   Nájdi riadok v kóde, kde je blok `sprite.displace()` použitý, a oprav chybu.
      CSD U3 collisions displace intro_2019: |-
        # Blok „sprite.displace()“ (odstránenie „sprite“ objektu)

        Interakcia, ktorú si naprogramoval/a je taká bežná, že je pre ňu navrhnutý samostatný blok, ktorý ju spraví za teba. `sprite.displace()` spôsobí že jeden „sprite“ posunie druhý vždy, keď sa stretnú. Kód, ktorý je obsiahnutý v tomto bloku, vyzerá veľmi podobne, ako ten, čo si už napísal/a, ale teraz sa už zakaždým nemusíš zaoberať vypisovaním detailov.

        # Urob toto

        Niekto sa snažil použiť `sprite.displace()` blok tak, aby slon posunul hrocha, ale je v tom chyba. Dokážeš upraviť kód tak, aby slon vytlačil hrocha z obrazovky?

        -   Nájdi riadok v kóde, kde je blok `sprite.displace()` použitý, a oprav chybu.
      CSD U3 collisions displace x: |-
        # Naprogramuj interakciu  „sprite” objektov

        Keď ste so spolužiakmi prediskutovali, ako vytvoriť interakciu, ktorú si videl/a v predchádzajúcej lekcii, skús ju teraz naprogramovať. Ako naprogramuješ žirafu tak, aby vytlačila opicu von z obrazovky?

        # Urob toto

        Žirafa sa už hýbe po obrazovke smerom k opici, ale ich interakcia ešte nebola naprogramovaná.

        -   Použi nápad na naprogramovanie interakcie, ktorý si vymyslel/a so svojimi spolužiakmi v predchádzajúcom cvičení.
      CSD U3 collisions displace x_2018: |-
        # Naprogramuj interakciu  „sprite” objektov

        Keď ste so spolužiakmi prediskutovali, ako vytvoriť interakciu, ktorú si videl/a v predchádzajúcej lekcii, skús ju teraz naprogramovať. Ako naprogramuješ žirafu tak, aby vytlačila opicu von z obrazovky?

        # Urob toto

        Žirafa sa už hýbe po obrazovke smerom k opici, ale ich interakcia ešte nebola naprogramovaná.

        -   Použi nápad na naprogramovanie interakcie, ktorý si vymyslel/a so svojimi spolužiakmi v predchádzajúcom cvičení.
      CSD U3 collisions displace x_2019: |-
        # Naprogramuj interakciu  „sprite” objektov

        Keď ste so spolužiakmi prediskutovali, ako vytvoriť interakciu, ktorú si videl/a v predchádzajúcej lekcii, skús ju teraz naprogramovať. Ako naprogramuješ žirafu tak, aby vytlačila opicu von z obrazovky?

        # Urob toto

        Žirafa sa už hýbe po obrazovke smerom k opici, ale ich interakcia ešte nebola naprogramovaná.

        -   Použi nápad na naprogramovanie interakcie, ktorý si vymyslel/a so svojimi spolužiakmi v predchádzajúcom cvičení.
      CSD U3 collisions displace y: |-
        # Napíš vlastnú interakciu „sprite“ objektov

        V predcházajúcom cvičení si napísal/a kód, ktorý ste vyvinuli so svojimi spolužiakmi. Teraz skús vytvoriť vlastný program, pričom môžeš používať vzory, ktoré si videl/a predtým.

        # Urob toto

        Slon by mal **vytlačiť hrocha z obrazovky**. Všimni si, že slon sa hýbe náhodnou Y rýchlosťou zakaždým, keď sa program spustí.

        -   Použitím vzorov z predchádzajúceho cvičenia napíš kód, ktorý spôsobí, že slon vytlačí hrocha z obrazovky.
      CSD U3 collisions displace y_2018: |-
        # Napíš vlastnú interakciu „sprite“ objektov

        V predcházajúcom cvičení si napísal/a kód, ktorý ste vyvinuli so svojimi spolužiakmi. Teraz skús vytvoriť vlastný program, pričom môžeš používať vzory, ktoré si videl/a predtým.

        # Urob toto

        Slon by mal **vytlačiť hrocha z obrazovky**. Všimni si, že slon sa hýbe náhodnou Y rýchlosťou zakaždým, keď sa program spustí.

        -   Použitím vzorov z predchádzajúceho cvičenia napíš kód, ktorý spôsobí, že slon vytlačí hrocha z obrazovky.
      CSD U3 collisions displace y_2019: |-
        # Napíš vlastnú interakciu „sprite“ objektov

        V predcházajúcom cvičení si napísal/a kód, ktorý ste vyvinuli so svojimi spolužiakmi. Teraz skús vytvoriť vlastný program, pričom môžeš používať vzory, ktoré si videl/a predtým.

        # Urob toto

        Slon by mal **vytlačiť hrocha z obrazovky**. Všimni si, že slon sa hýbe náhodnou Y rýchlosťou zakaždým, keď sa program spustí.

        -   Použitím vzorov z predchádzajúceho cvičenia napíš kód, ktorý spôsobí, že slon vytlačí hrocha z obrazovky.
      CSD U3 collisions egg: |-
        # Jablčná šťava

        Keď sa jablko dotkne mixéra, mixér by sa mal zapnúť.

        # Urob toto

        Použi blok `isTouching`  na to, aby sa mixér triasol sem a tam, keď sa ho „sprite“ jablko  dotkne. Trasenie je už naprogramované použitím bloku „random“, takže stačí doprogramovať kontrolu dotyku (kolízie) týchto dvoch „sprite“ objektov.

        _Výzva: Dokážeš naprogramovať zmiznutie jablka hneď po tom, ako sa dotkne mixéra?_
      CSD U3 collisions egg2: |-
        # Pridávanie zvukov

        Použitím kódu vieš dokonca spustiť zvuk mixéra.

        # Urob toto

        Použi blok `playSound`  zo súboru „World“ na spustenie "<https://studio.code.org/docs/sounds/blender.mp3>" zvuku v momente, keď sa jablko dotkne mixéra. Bude potrebné vložiť adresu zvuku do spomínaného bloku, takže bude vyzerať takto: ![](<https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57 PM.png>)
      CSD U3 collisions egg2_2018: |-
        # Pridávanie zvukov

        Použitím kódu vieš dokonca spustiť zvuk mixéra.

        # Urob toto

        Použi blok `playSound`  zo súboru „World“ na spustenie "<https://studio.code.org/docs/sounds/blender.mp3>" zvuku v momente, keď sa jablko dotkne mixéra. Bude potrebné vložiť adresu zvuku do spomínaného bloku, takže bude vyzerať takto: ![](<https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57 PM.png>)
      CSD U3 collisions egg2_2019: |-
        # Pridávanie zvukov

        Použitím kódu vieš dokonca spustiť zvuk mixéra.

        # Urob toto

        Použi blok `playSound`  zo súboru „World“ na spustenie "<https://studio.code.org/docs/sounds/blender.mp3>" zvuku v momente, keď sa jablko dotkne mixéra. Bude potrebné vložiť adresu zvuku do spomínaného bloku, takže bude vyzerať takto: ![](<https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57 PM.png>)
      CSD U3 collisions egg_2018: |-
        # Jablčná šťava

        Keď sa jablko dotkne mixéra, mixér by sa mal zapnúť.

        # Urob toto

        Použi blok `isTouching`  na to, aby sa mixér triasol sem a tam, keď sa ho „sprite“ jablko  dotkne. Trasenie je už naprogramované použitím bloku „random“, takže stačí doprogramovať kontrolu dotyku (kolízie) týchto dvoch „sprite“ objektov.

        _Výzva: Dokážeš naprogramovať zmiznutie jablka hneď po tom, ako sa dotkne mixéra?_
      CSD U3 collisions egg_2019: |-
        # Jablčná šťava

        Keď sa jablko dotkne mixéra, mixér by sa mal zapnúť.

        # Urob toto

        Použi blok `isTouching`  na to, aby sa mixér triasol sem a tam, keď sa ho „sprite“ jablko  dotkne. Trasenie je už naprogramované použitím bloku „random“, takže stačí doprogramovať kontrolu dotyku (kolízie) týchto dvoch „sprite“ objektov.

        _Výzva: Dokážeš naprogramovať zmiznutie jablka hneď po tom, ako sa dotkne mixéra?_
      CSD U3 collisions flyman add obstacles: "# Lietajúca hra – Pridaj prekážku\n\nToto
        je lietajúca hra, ktorú si vytvoril/a v predchádzajúcej lekcii. V nasledujúcich
        cvičeniach budeš do nej pridávať prekážky s použitím niektorých interakcií
        „sprite” objektov, ktoré si sa práve naučil/a. Na konci budeš môcť do hry
        pridať svoje vlastné nápady. \n\n<img src=\"https://images.code.org/47f8c130ca668080d48520ef9aced093-image-1477069764142.08.58
        AM.png\" style=\"float:right;width:200px\">\n\n# Urob toto\n\nDo hry pridaj
        prekážajúci „sprite“. Môžeš použiť akýkoľvek obrázok zo záložky s animáciami.
        My použijeme napríklad slnko. Po pridaní „sprite“ objektu nastav jeho animáciu.\n\n-
        \  Pridaj do hry nový  „sprite” s názvom „obstacle“ (prekážka).\n-   V záložke
        s animáciami preň vytvor novú animáciu. V našom príklade sme vybrali obrázok
        slnka.\n-   Použi blok `sprite.setAnimation()` pre nastavenie tebou vybraného
        obrázku do  „sprite” objektu.\n    •- Spusti kód a ubezpeč sa, že  „sprite”
        objekt sa zobrazuje na obrazovke práve tam, kde chceš. Možno mu budeš musieť
        zmeniť súradnice X a Y alebo jeho veľkosť, aby si dosiahol/dosiahla želaný
        výzor."
      CSD U3 collisions flyman add obstacles_2018: "# Lietajúca hra – Pridaj prekážku\n\nToto
        je lietajúca hra, ktorú si vytvoril/a v predchádzajúcej lekcii. V nasledujúcich
        cvičeniach budeš do nej pridávať prekážky s použitím niektorých interakcií
        „sprite” objektov, ktoré si sa práve naučil/a. Na konci budeš môcť do hry
        pridať svoje vlastné nápady. \n\n<img src=\"https://images.code.org/47f8c130ca668080d48520ef9aced093-image-1477069764142.08.58
        AM.png\" style=\"float:right;width:200px\">\n\n# Urob toto\n\nDo hry pridaj
        prekážajúci „sprite“. Môžeš použiť akýkoľvek obrázok zo záložky s animáciami.
        My použijeme napríklad slnko. Po pridaní „sprite“ objektu nastav jeho animáciu.\n\n-
        \  Pridaj do hry nový  „sprite” s názvom „obstacle“ (prekážka).\n-   V záložke
        s animáciami preň vytvor novú animáciu. V našom príklade sme vybrali obrázok
        slnka.\n-   Použi blok `sprite.setAnimation()` pre nastavenie tebou vybraného
        obrázku do  „sprite” objektu.\n    •- Spusti kód a ubezpeč sa, že  „sprite”
        objekt sa zobrazuje na obrazovke práve tam, kde chceš. Možno mu budeš musieť
        zmeniť súradnice X a Y alebo jeho veľkosť, aby si dosiahol/dosiahla želaný
        výzor."
      CSD U3 collisions flyman add obstacles_2019: "# Lietajúca hra – Pridaj prekážku\n\nToto
        je lietajúca hra, ktorú si vytvoril/a v predchádzajúcej lekcii. V nasledujúcich
        cvičeniach budeš do nej pridávať prekážky s použitím niektorých interakcií
        „sprite” objektov, ktoré si sa práve naučil/a. Na konci budeš môcť do hry
        pridať svoje vlastné nápady. \n\n<img src=\"https://images.code.org/47f8c130ca668080d48520ef9aced093-image-1477069764142.08.58
        AM.png\" style=\"float:right;width:200px\">\n\n# Urob toto\n\nDo hry pridaj
        prekážajúci „sprite“. Môžeš použiť akýkoľvek obrázok zo záložky s animáciami.
        My použijeme napríklad slnko. Po pridaní „sprite“ objektu nastav jeho animáciu.\n\n-
        \  Pridaj do hry nový  „sprite” s názvom „obstacle“ (prekážka).\n-   V záložke
        s animáciami preň vytvor novú animáciu. V našom príklade sme vybrali obrázok
        slnka.\n-   Použi blok `sprite.setAnimation()` pre nastavenie tebou vybraného
        obrázku do  „sprite” objektu.\n    •- Spusti kód a ubezpeč sa, že  „sprite”
        objekt sa zobrazuje na obrazovke práve tam, kde chceš. Možno mu budeš musieť
        zmeniť súradnice X a Y alebo jeho veľkosť, aby si dosiahol/dosiahla želaný
        výzor."
      CSD U3 collisions flyman bounceOff: |-
        # Lietajúca hra – Interakcie s prekážkou

        Nechceš, aby sa hráč pohyboval cez prekážku, takže musíš použiť jednu z interakcií  „sprite” objektu.

        # Urob toto

        -   Pridaj do hry kód, ktorý znemožní hráčovi prejsť cez prekážku.
        -   Ak použiješ jednu z interakcií odrazenia sa, rozhodni sa, či chceš vynulovať „odrazivosť“ tvojej postavičky.
        -   Porozprávaj sa so spolusediacim: Ktoré interakcie  „sprite” objektu si sa rozhodol/la použiť? Je v hre viac interakcií  „sprite” objektov, ktoré fungujú tak, ako si chcel/a?
      CSD U3 collisions flyman bounceOff_2018: |-
        # Lietajúca hra – Interakcie s prekážkou

        Nechceš, aby sa hráč pohyboval cez prekážku, takže musíš použiť jednu z interakcií  „sprite” objektu.

        # Urob toto

        -   Pridaj do hry kód, ktorý znemožní hráčovi prejsť cez prekážku.
        -   Ak použiješ jednu z interakcií odrazenia sa, rozhodni sa, či chceš vynulovať „odrazivosť“ tvojej postavičky.
        -   Porozprávaj sa so spolusediacim: Ktoré interakcie  „sprite” objektu si sa rozhodol/la použiť? Je v hre viac interakcií  „sprite” objektov, ktoré fungujú tak, ako si chcel/a?
      CSD U3 collisions flyman bounceOff_2019: |-
        # Lietajúca hra – Interakcie s prekážkou

        Nechceš, aby sa hráč pohyboval cez prekážku, takže musíš použiť jednu z interakcií  „sprite” objektu.

        # Urob toto

        -   Pridaj do hry kód, ktorý znemožní hráčovi prejsť cez prekážku.
        -   Ak použiješ jednu z interakcií odrazenia sa, rozhodni sa, či chceš vynulovať „odrazivosť“ tvojej postavičky.
        -   Porozprávaj sa so spolusediacim: Ktoré interakcie  „sprite” objektu si sa rozhodol/la použiť? Je v hre viac interakcií  „sprite” objektov, ktoré fungujú tak, ako si chcel/a?
      CSD U3 collisions flyman change colliders: "# Lietajúca hra – Zmena hlavných
        obrysov\n\nMomentálne sú všetky hlavné obrysy obdĺžnikové. Zmeň ich na kruhové,
        aby si dostal/a realistickejšie a zaujímavejšie odrazy a nárazy.\n\n# Urob
        toto\n\n-   Použi blok `sprite.setCollider()` pre zmenu hlavných obrysov tvojich
        \ „sprite” objektov na kruhy.\n-   Nastav hodnoty opravy chýb svojich „sprite”
        objektov na `true`, aby si sa uistil/a, že hra funguje tak, ako chceš.\n-
        \  Zahraj si hru pre zistenie, či funguje tak, ako chceš. "
      CSD U3 collisions flyman change colliders_2018: "# Lietajúca hra – Zmena hlavných
        obrysov\n\nMomentálne sú všetky hlavné obrysy obdĺžnikové. Zmeň ich na kruhové,
        aby si dostal/a realistickejšie a zaujímavejšie odrazy a nárazy.\n\n# Urob
        toto\n\n-   Použi blok `sprite.setCollider()` pre zmenu hlavných obrysov tvojich
        \ „sprite” objektov na kruhy.\n-   Nastav hodnoty opravy chýb svojich „sprite”
        objektov na `true`, aby si sa uistil/a, že hra funguje tak, ako chceš.\n-
        \  Zahraj si hru pre zistenie, či funguje tak, ako chceš. "
      CSD U3 collisions flyman change colliders_2019: "# Lietajúca hra – Zmena hlavných
        obrysov\n\nMomentálne sú všetky hlavné obrysy obdĺžnikové. Zmeň ich na kruhové,
        aby si dostal/a realistickejšie a zaujímavejšie odrazy a nárazy.\n\n# Urob
        toto\n\n-   Použi blok `sprite.setCollider()` pre zmenu hlavných obrysov tvojich
        \ „sprite” objektov na kruhy.\n-   Nastav hodnoty opravy chýb svojich „sprite”
        objektov na `true`, aby si sa uistil/a, že hra funguje tak, ako chceš.\n-
        \  Zahraj si hru pre zistenie, či funguje tak, ako chceš. "
      CSD U3 collisions flyman displace coin: |-
        # Lietajúca hra - Minca za prekážkou

        Momentálne sa minca presúva na náhodné pozície. To znamená, že niekedy sa zobrazí za tvojou prekážkou, takže sa postavička nevie k nej dostať. Použitím interakcie  „sprite” objektu môžeš tento problém opraviť.

        # Urob toto

        -   Do hry pridaj kód, ktorý znemožňuje minci posunúť sa za prekážku. Neboj sa použiť rôzne nápady, aby si videl/a, ako budú fungovať v hre.
        -   Porozprávaj sa so spolusediacim: Ktoré interakcie  „sprite” objektu si sa rozhodol/la použiť? Je v hre viac interakcií , ktoré fungujú tak, ako si chcel/a?
      CSD U3 collisions flyman displace coin_2018: |-
        # Lietajúca hra - Minca za prekážkou

        Momentálne sa minca presúva na náhodné pozície. To znamená, že niekedy sa zobrazí za tvojou prekážkou, takže sa postavička nevie k nej dostať. Použitím interakcie  „sprite” objektu môžeš tento problém opraviť.

        # Urob toto

        -   Do hry pridaj kód, ktorý znemožňuje minci posunúť sa za prekážku. Neboj sa použiť rôzne nápady, aby si videl/a, ako budú fungovať v hre.
        -   Porozprávaj sa so spolusediacim: Ktoré interakcie  „sprite” objektu si sa rozhodol/la použiť? Je v hre viac interakcií , ktoré fungujú tak, ako si chcel/a?
      CSD U3 collisions flyman displace coin_2019: |-
        # Lietajúca hra - Minca za prekážkou

        Momentálne sa minca presúva na náhodné pozície. To znamená, že niekedy sa zobrazí za tvojou prekážkou, takže sa postavička nevie k nej dostať. Použitím interakcie  „sprite” objektu môžeš tento problém opraviť.

        # Urob toto

        -   Do hry pridaj kód, ktorý znemožňuje minci posunúť sa za prekážku. Neboj sa použiť rôzne nápady, aby si videl/a, ako budú fungovať v hre.
        -   Porozprávaj sa so spolusediacim: Ktoré interakcie  „sprite” objektu si sa rozhodol/la použiť? Je v hre viac interakcií , ktoré fungujú tak, ako si chcel/a?
      CSD U3 collisions flyman make it your own: |-
        # Flyer Game - Make It Your Own

        Time to make this game your own by using what you've learned about sprite interactions.

        # Do This

        Add at least one more aspect to your game that uses sprite interactions. There's some ideas below or you can choose to add features of your own. Make sure you're ready to share your ideas with your classmates.

        -   Create "edge" sprites to keep your character from bouncing out.
        -   Add platforms to the game for your character to navigate around.
        -   Add another obstacle to your game.
        -   Create another idea of your own.
      CSD U3 collisions flyman make it your own_2018: |-
        # Lietajúca hra – Sprav si ju podľa seba

        Je čas spraviť si hru podľa seba použitím toho, čo si sa naučil/a o interakciách  postáv.

        # Urob toto

        Do hry pridaj aspoň jeden ďalší vstup, ktorý bude používať interakcie  postáv. Dole je niekoľko nápadov, prípadne môžeš pridať ďalšie. Vymeň si nápady aj so spolusediacimi.

        -   Vytvor krajné  postavy pre zamedzenie vyskočenia postavičky mimo obrazovky.
        -   Pridaj do hry plošiny, po ktorých sa môže tvoja postavička pohybovať.
        -   Pridaj do hry ďalšiu prekážku.
        -   Pridaj ďalší vlastný nápad.
      CSD U3 collisions flyman make it your own_2019: |-
        # Lietajúca hra – Sprav si ju podľa seba

        Je čas spraviť si hru podľa seba použitím toho, čo si sa naučil/a o interakciách  postáv.

        # Urob toto

        Do hry pridaj aspoň jeden ďalší vstup, ktorý bude používať interakcie  postáv. Dole je niekoľko nápadov, prípadne môžeš pridať ďalšie. Vymeň si nápady aj so spolusediacimi.

        -   Vytvor krajné  postavy pre zamedzenie vyskočenia postavičky mimo obrazovky.
        -   Pridaj do hry plošiny, po ktorých sa môže tvoja postavička pohybovať.
        -   Pridaj do hry ďalšiu prekážku.
        -   Pridaj ďalší vlastný nápad.
      CSD U3 collisions horse: |-
        # Dúhový kôň

        Keď sa dúha dotkne koňa, mal by sa premeniť na jednorožca.

        # Urob toto

        Použi bloky `if`, `isTouching`, and `setAnimation` na zmenu obrázku koňa po tom, keď sa ho dotkne dúha. Obrázok jednorožca je už pre teba pripravený v záložke s animáciami.

        [//]: # "https://images.code.org/4d1d0e36e574117140ecc377d406c1de-image-1470256869920.png"

        [//]: # "https://images.code.org/b913bc2ee2231b908892472240a70105-image-1470256869922.png"

        [//]: # "https://images.code.org/558b42903bf40cc26410e651a85de922-image-1470256869923.png"

        [//]: # "https://images.code.org/1d41d2e5b3b55037911b8f73bdc2ff48-image-1470257277875.png"
      CSD U3 collisions horse_2018: |-
        # Dúhový kôň

        Keď sa dúha dotkne koňa, mal by sa premeniť na jednorožca.

        # Urob toto

        Použi bloky `if`, `isTouching`, and `setAnimation` na zmenu obrázku koňa po tom, keď sa ho dotkne dúha. Obrázok jednorožca je už pre teba pripravený v záložke s animáciami.

        [//]: # "https://images.code.org/4d1d0e36e574117140ecc377d406c1de-image-1470256869920.png"

        [//]: # "https://images.code.org/b913bc2ee2231b908892472240a70105-image-1470256869922.png"

        [//]: # "https://images.code.org/558b42903bf40cc26410e651a85de922-image-1470256869923.png"

        [//]: # "https://images.code.org/1d41d2e5b3b55037911b8f73bdc2ff48-image-1470257277875.png"
      CSD U3 collisions horse_2019: |-
        # Dúhový kôň

        Keď sa dúha dotkne koňa, mal by sa premeniť na jednorožca.

        # Urob toto

        Použi bloky `if`, `isTouching`, and `setAnimation` na zmenu obrázku koňa po tom, keď sa ho dotkne dúha. Obrázok jednorožca je už pre teba pripravený v záložke s animáciami.

        [//]: # "https://images.code.org/4d1d0e36e574117140ecc377d406c1de-image-1470256869920.png"

        [//]: # "https://images.code.org/b913bc2ee2231b908892472240a70105-image-1470256869922.png"

        [//]: # "https://images.code.org/558b42903bf40cc26410e651a85de922-image-1470256869923.png"

        [//]: # "https://images.code.org/1d41d2e5b3b55037911b8f73bdc2ff48-image-1470257277875.png"
      CSD U3 collisions isTouching intro: |-
        # Blok „isTouching()“

        Písať matematické príkazy zakaždým, keď chceš zistiť, či sa dva „sprite“ objekty dotýkajú, môže chvíľu trvať. Preto jeden programátor vytvoril blok `isTouching`, ktorý to spraví za teba. Počítač tieto úkony vykonáva rovnako, ako v predchádzajúcom prípade, ale vďaka tomuto bloku sa ty už s tým nemusíš zaoberať.

        # Urob toto

        Vo vnútri cyklu kreslenia potiahni blok `isTouching` do bloku `if`.  ( [Ukáž mi kde](#triggercallout=code_triggered) )

        _Tip: V kóde nezabudni zmeniť „sprite“ na „balloon“ (balón) a „target“ na „tack“ (pripináčik)._
      CSD U3 collisions isTouching intro_2018: |-
        # Blok „isTouching()“

        Písať matematické príkazy zakaždým, keď chceš zistiť, či sa dva „sprite“ objekty dotýkajú, môže chvíľu trvať. Preto jeden programátor vytvoril blok `isTouching`, ktorý to spraví za teba. Počítač tieto úkony vykonáva rovnako, ako v predchádzajúcom prípade, ale vďaka tomuto bloku sa ty už s tým nemusíš zaoberať.

        # Urob toto

        Vo vnútri cyklu kreslenia potiahni blok `isTouching` do bloku `if`.  ( [Ukáž mi kde](#triggercallout=code_triggered) )

        _Tip: V kóde nezabudni zmeniť „sprite“ na „balloon“ (balón) a „target“ na „tack“ (pripináčik)._
      CSD U3 collisions isTouching intro_2019: |-
        # Blok „isTouching()“

        Písať matematické príkazy zakaždým, keď chceš zistiť, či sa dva „sprite“ objekty dotýkajú, môže chvíľu trvať. Preto jeden programátor vytvoril blok `isTouching`, ktorý to spraví za teba. Počítač tieto úkony vykonáva rovnako, ako v predchádzajúcom prípade, ale vďaka tomuto bloku sa ty už s tým nemusíš zaoberať.

        # Urob toto

        Vo vnútri cyklu kreslenia potiahni blok `isTouching` do bloku `if`.  ( [Ukáž mi kde](#triggercallout=code_triggered) )

        _Tip: V kóde nezabudni zmeniť „sprite“ na „balloon“ (balón) a „target“ na „tack“ (pripináčik)._
      CSD U3 collisions predict set velocity code: |-
        # Interakcie medzi „sprite“ objektami

        Doteraz si vedel/a naprogramovať jednoduché interakcie „sprite” objektov použitím bloku `sprite.isTouching()`. Napríklad zmenu pozície mince, ak sa jej dotkla postavička z tvojej hry. Teraz je čas vytvoriť náročnejšie interakcie.

        # Urob toto

        -   Spusti program a sleduj interakcie medzi „sprite” objektmi;
        -   Diskutuj so spolusediacim: Ako vytvoríš tento typ interakcie použitím príkazov, ktoré poznáš? Existuje veľa spôsobov, ako to urobiť. Tu je zopár blokov na zváženie:
            -   `sprite.isTouching()`
            -   `sprite.velocityX`
            -   `sprite.velocityY`
            -   `sprite.x`
            -   `sprite.y`

        Zdieľaj svoje nápady so spolužiakmi.
      CSD U3 collisions predict set velocity code_2018: |-
        # Interakcie medzi „sprite“ objektami

        Doteraz si vedel/a naprogramovať jednoduché interakcie „sprite” objektov použitím bloku `sprite.isTouching()`. Napríklad zmenu pozície mince, ak sa jej dotkla postavička z tvojej hry. Teraz je čas vytvoriť náročnejšie interakcie.

        # Urob toto

        -   Spusti program a sleduj interakcie medzi „sprite” objektmi;
        -   Diskutuj so spolusediacim: Ako vytvoríš tento typ interakcie použitím príkazov, ktoré poznáš? Existuje veľa spôsobov, ako to urobiť. Tu je zopár blokov na zváženie:
            -   `sprite.isTouching()`
            -   `sprite.velocityX`
            -   `sprite.velocityY`
            -   `sprite.x`
            -   `sprite.y`

        Zdieľaj svoje nápady so spolužiakmi.
      CSD U3 collisions predict set velocity code_2019: |-
        # Interakcie medzi „sprite“ objektami

        Doteraz si vedel/a naprogramovať jednoduché interakcie „sprite” objektov použitím bloku `sprite.isTouching()`. Napríklad zmenu pozície mince, ak sa jej dotkla postavička z tvojej hry. Teraz je čas vytvoriť náročnejšie interakcie.

        # Urob toto

        -   Spusti program a sleduj interakcie medzi „sprite” objektmi;
        -   Diskutuj so spolusediacim: Ako vytvoríš tento typ interakcie použitím príkazov, ktoré poznáš? Existuje veľa spôsobov, ako to urobiť. Tu je zopár blokov na zváženie:
            -   `sprite.isTouching()`
            -   `sprite.velocityX`
            -   `sprite.velocityY`
            -   `sprite.x`
            -   `sprite.y`

        Zdieľaj svoje nápady so spolužiakmi.
      CSD U3 collisions scoreboard: |-
        # Zobrazenie skóre

        Blok `isTouching` môžeš takisto použiť na určenie, či sa má zvýšiť skóre. V tejto hre sa skóre ukladá do premennej 'score'. Je zobrazené na obrazovke použitím bloku `text`.  ( [Ukáž mi kde](#triggercallout=code_triggered) )

        # Urob toto

        -   Použi bloky `if` a `isTouching` na zistenie, či zajačik chytil mrkvu. ( [Ukáž mi kde](#triggercallout=code_triggered2) )
        -   Ak áno, urob nasledujúce tri veci:
            -   Použi kód pre počítanie na zvýšenie hodnoty premennej „score“.
            -   Presuň mrkvu na osi X na pravú stranu obrazovky.
            -   Nastav pozíciu Y mrkvy na náhodné číslo medzi 10 až 390.
      CSD U3 collisions scoreboard_2018: |-
        # Zobrazenie skóre

        Blok `isTouching` môžeš takisto použiť na určenie, či sa má zvýšiť skóre. V tejto hre sa skóre ukladá do premennej 'score'. Je zobrazené na obrazovke použitím bloku `text`.  ( [Ukáž mi kde](#triggercallout=code_triggered) )

        # Urob toto

        -   Použi bloky `if` a `isTouching` na zistenie, či zajačik chytil mrkvu. ( [Ukáž mi kde](#triggercallout=code_triggered2) )
        -   Ak áno, urob nasledujúce tri veci:
            -   Použi kód pre počítanie na zvýšenie hodnoty premennej „score“.
            -   Presuň mrkvu na osi X na pravú stranu obrazovky.
            -   Nastav pozíciu Y mrkvy na náhodné číslo medzi 10 až 390.
      CSD U3 collisions scoreboard_2019: |-
        # Zobrazenie skóre

        Blok `isTouching` môžeš takisto použiť na určenie, či sa má zvýšiť skóre. V tejto hre sa skóre ukladá do premennej 'score'. Je zobrazené na obrazovke použitím bloku `text`.  ( [Ukáž mi kde](#triggercallout=code_triggered) )

        # Urob toto

        -   Použi bloky `if` a `isTouching` na zistenie, či zajačik chytil mrkvu. ( [Ukáž mi kde](#triggercallout=code_triggered2) )
        -   Ak áno, urob nasledujúce tri veci:
            -   Použi kód pre počítanie na zvýšenie hodnoty premennej „score“.
            -   Presuň mrkvu na osi X na pravú stranu obrazovky.
            -   Nastav pozíciu Y mrkvy na náhodné číslo medzi 10 až 390.
      CSD U3 collisions setCollider: |-
        # Blok „setCollider()“ (nastavenie obrysu)

         „Sprite” objekty interagujú na základe svojho hlavného obrysu, nie na základe obrázku, ktorý je im priradený. Hlavný obrys môžeš vidieť len pri zapnutom móde pre opravu chýb. Tvar hlavného obrysu môžeš zmeniť pomocou bloku `sprite.setCollider()`, v ktorom si môžeš vybrať  obdĺžnik („rectangle“)  alebo kruh („circle“). V základnom nastavení sú všetky hlavné obrysy nastavené ako obdĺžniky.

        # Urob toto

        -   Nájdi blok `sprite.setCollider()` pre zlatú mincu a zmeň ho z  obdĺžnika na kruh.
        -   Pridaj nový blok `sprite.setCollider()` pre striebornú mincu a vyber kruh ako tvar hlavného obrysu.
        -   Spusti kód nanovo a sleduj, ako sa  „sprite” objekty od seba odrazia.
      CSD U3 collisions setCollider_2018: |-
        # Blok „setCollider()“ (nastavenie obrysu)

         „Sprite” objekty interagujú na základe svojho hlavného obrysu, nie na základe obrázku, ktorý je im priradený. Hlavný obrys môžeš vidieť len pri zapnutom móde pre opravu chýb. Tvar hlavného obrysu môžeš zmeniť pomocou bloku `sprite.setCollider()`, v ktorom si môžeš vybrať  obdĺžnik („rectangle“)  alebo kruh („circle“). V základnom nastavení sú všetky hlavné obrysy nastavené ako obdĺžniky.

        # Urob toto

        -   Nájdi blok `sprite.setCollider()` pre zlatú mincu a zmeň ho z  obdĺžnika na kruh.
        -   Pridaj nový blok `sprite.setCollider()` pre striebornú mincu a vyber kruh ako tvar hlavného obrysu.
        -   Spusti kód nanovo a sleduj, ako sa  „sprite” objekty od seba odrazia.
      CSD U3 collisions setCollider_2019: |-
        # Blok „setCollider()“ (nastavenie obrysu)

         „Sprite” objekty interagujú na základe svojho hlavného obrysu, nie na základe obrázku, ktorý je im priradený. Hlavný obrys môžeš vidieť len pri zapnutom móde pre opravu chýb. Tvar hlavného obrysu môžeš zmeniť pomocou bloku `sprite.setCollider()`, v ktorom si môžeš vybrať  obdĺžnik („rectangle“)  alebo kruh („circle“). V základnom nastavení sú všetky hlavné obrysy nastavené ako obdĺžniky.

        # Urob toto

        -   Nájdi blok `sprite.setCollider()` pre zlatú mincu a zmeň ho z  obdĺžnika na kruh.
        -   Pridaj nový blok `sprite.setCollider()` pre striebornú mincu a vyber kruh ako tvar hlavného obrysu.
        -   Spusti kód nanovo a sleduj, ako sa  „sprite” objekty od seba odrazia.
      CSD U3 collisions sidescroll2: |-
        # Vylepši svoju hru

        Keď už vieš, ako používať bloky `isTouching` a `playSound`, dokážeš pre momenty, keď sa tvoje „sprite“ objekty stretnú vymyslieť rôzne zábavné veci

        _Poznámka: Blok `playSound` má nový parameter nazvaný „loop“, ktorý môže byť nastavený na „true“ alebo „false“. Ak je parameter „true“, zvuk sa bude prehrávať znova a znova._

        # Urob toto

        -   Pridaj aspoň dva efekty, keď sa tvoje „sprite“ objekty stretnú.

        _Výzva: Do hornej časti obrazovky pridaj zobrazenie skóre._
      CSD U3 collisions sidescroll2_2018: |-
        # Vylepši svoju hru

        Keď už vieš, ako používať bloky `isTouching` a `playSound`, dokážeš pre momenty, keď sa tvoje „sprite“ objekty stretnú vymyslieť rôzne zábavné veci

        _Poznámka: Blok `playSound` má nový parameter nazvaný „loop“, ktorý môže byť nastavený na „true“ alebo „false“. Ak je parameter „true“, zvuk sa bude prehrávať znova a znova._

        # Urob toto

        -   Pridaj aspoň dva efekty, keď sa tvoje „sprite“ objekty stretnú.

        _Výzva: Do hornej časti obrazovky pridaj zobrazenie skóre._
      CSD U3 collisions sidescroll2_2019: |-
        # Vylepši svoju hru

        Keď už vieš, ako používať bloky `isTouching` a `playSound`, dokážeš pre momenty, keď sa tvoje „sprite“ objekty stretnú vymyslieť rôzne zábavné veci

        _Poznámka: Blok `playSound` má nový parameter nazvaný „loop“, ktorý môže byť nastavený na „true“ alebo „false“. Ak je parameter „true“, zvuk sa bude prehrávať znova a znova._

        # Urob toto

        -   Pridaj aspoň dva efekty, keď sa tvoje „sprite“ objekty stretnú.

        _Výzva: Do hornej časti obrazovky pridaj zobrazenie skóre._
      CSD U3 collisions try blocks: "# Nové kolízne bloky\n\nMedzi nástroje boli pridané
        tri nové typy interakcií: `sprite.collide()`, `sprite.bounce()`, a `sprite.bounceOff()`.
        Čo si myslíš, ako ovplyvnia  „sprite” objekty?\n\n# Urob toto\n\n-   Vymeň
        blok `sprite.displace()` za bloky `sprite.collide()`, `sprite.bounce()` a
        `sprite.bounceOff()`. ([Ukáž mi kde](#triggercallout=code_triggered) )\n    -
        \  _Pomôcka: Ak sa ti to nedarí spraviť pomocou blokov, prepni sa do textového
        režimu._\n-   Diskutuj so susedom: Aký je rozdiel medzi týmito štyrmi typmi
        interakcie? Čo si myslíš, že je účelom každého z blokov? \n\n[//]: # \"https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png\"\n\n[//]:
        # \"https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png\""
      CSD U3 collisions try blocks_2018: "# Nové kolízne bloky\n\nMedzi nástroje boli
        pridané tri nové typy interakcií: `sprite.collide()`, `sprite.bounce()`, a
        `sprite.bounceOff()`. Čo si myslíš, ako ovplyvnia  „sprite” objekty?\n\n#
        Urob toto\n\n-   Vymeň blok `sprite.displace()` za bloky `sprite.collide()`,
        `sprite.bounce()` a `sprite.bounceOff()`. ([Ukáž mi kde](#triggercallout=code_triggered)
        )\n    -   _Pomôcka: Ak sa ti to nedarí spraviť pomocou blokov, prepni sa
        do textového režimu._\n-   Diskutuj so susedom: Aký je rozdiel medzi týmito
        štyrmi typmi interakcie? Čo si myslíš, že je účelom každého z blokov? \n\n[//]:
        # \"https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png\"\n\n[//]:
        # \"https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png\""
      CSD U3 collisions try blocks_2019: "# Nové kolízne bloky\n\nMedzi nástroje boli
        pridané tri nové typy interakcií: `sprite.collide()`, `sprite.bounce()`, a
        `sprite.bounceOff()`. Čo si myslíš, ako ovplyvnia  „sprite” objekty?\n\n#
        Urob toto\n\n-   Vymeň blok `sprite.displace()` za bloky `sprite.collide()`,
        `sprite.bounce()` a `sprite.bounceOff()`. ([Ukáž mi kde](#triggercallout=code_triggered)
        )\n    -   _Pomôcka: Ak sa ti to nedarí spraviť pomocou blokov, prepni sa
        do textového režimu._\n-   Diskutuj so susedom: Aký je rozdiel medzi týmito
        štyrmi typmi interakcie? Čo si myslíš, že je účelom každého z blokov? \n\n[//]:
        # \"https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png\"\n\n[//]:
        # \"https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png\""
      CSD U3 collisions turtle: |-
        # Oprava chýb v interakcii „sprite“ objektov

        Keď bežia interakcie  „sprite” objektov, znamená to, že sa vykonáva daný kód. Hra si však interakcie „nepamätá”. Ak chceš, aby jeden „sprite“ objekt od druhého odskočil, alebo sa s ním zrazil, musí to byť súčasťou cyklu kreslenia. Ak na to zabudneš, môže dôjsť k nepredvídanému správaniu.

        # Urob toto

        Korytnačku vieš ovládať klávesovými šípkami. No nemala by prejsť cez strom. V kóde je však nejaká chyba. Dokážeš ju nájsť a opraviť?

        -   Spusti kód a skús prejsť s korytnačkou k stromu
        -   Pozri sa na kód a prediskutuj so spolusediacim, kde môže byť problém
        -   Oprav kód a spusti ho znova, aby si overil/a, že funguje správne
      CSD U3 collisions turtle_2018: |-
        # Oprava chýb v interakcii „sprite“ objektov

        Keď bežia interakcie  „sprite” objektov, znamená to, že sa vykonáva daný kód. Hra si však interakcie „nepamätá”. Ak chceš, aby jeden „sprite“ objekt od druhého odskočil, alebo sa s ním zrazil, musí to byť súčasťou cyklu kreslenia. Ak na to zabudneš, môže dôjsť k nepredvídanému správaniu.

        # Urob toto

        Korytnačku vieš ovládať klávesovými šípkami. No nemala by prejsť cez strom. V kóde je však nejaká chyba. Dokážeš ju nájsť a opraviť?

        -   Spusti kód a skús prejsť s korytnačkou k stromu
        -   Pozri sa na kód a prediskutuj so spolusediacim, kde môže byť problém
        -   Oprav kód a spusti ho znova, aby si overil/a, že funguje správne
      CSD U3 collisions turtle_2019: |-
        # Oprava chýb v interakcii „sprite“ objektov

        Keď bežia interakcie  „sprite” objektov, znamená to, že sa vykonáva daný kód. Hra si však interakcie „nepamätá”. Ak chceš, aby jeden „sprite“ objekt od druhého odskočil, alebo sa s ním zrazil, musí to byť súčasťou cyklu kreslenia. Ak na to zabudneš, môže dôjsť k nepredvídanému správaniu.

        # Urob toto

        Korytnačku vieš ovládať klávesovými šípkami. No nemala by prejsť cez strom. V kóde je však nejaká chyba. Dokážeš ju nájsť a opraviť?

        -   Spusti kód a skús prejsť s korytnačkou k stromu
        -   Pozri sa na kód a prediskutuj so spolusediacim, kde môže byť problém
        -   Oprav kód a spusti ho znova, aby si overil/a, že funguje správne
      CSD U3 collisions types: |-
        # Typy kolízií

        V Game Labe používame štyri typy kolízií. Tieto bloky spôsobia interakciu medzi _„sprite“ objektom_ a _cieľom_.

        ## displace

        Blok `displace` spôsobí, že „sprite“ bude tlačiť cieľový objekt po celý čas, ako sa dotýkajú, pričom samotný „sprite“ pokračuje vo svojom pôvodnom pohybe.

        ## collide

        Blok `collide` spôsobí, že „sprite“ zastane v momente, keď sa dotkne cieľa. Ak sa cieľ pohybuje, posunie „sprite“ so sebou. Cieľ pokračuje vo svojom pôvodnom pohybe.

        ## bounce

        Blok `bounce` spôsobí, že „sprite“ a cieľ od seba po dotyku odskočia. Oba  „sprite” objekty zmenia svoj pohyb.

        ## bounceOff

        Blok `bounceOff` spôsobí, že „sprite“ objekt odskočí od cieľa. Cieľ pokračuje vo svojom pôvodnom pohybe.

        # Urob toto

        Vyber najlepší blok na simuláciu odrazu basketbalovej lopty od zeme. ( [Ukáž mi kde](#triggercallout=code_triggered) )

        [//]: # "https://images.code.org/24355fc6377cfafdce3ce2b3568a33c3-image-1470343728940.png"

        [//]: # "https://images.code.org/87e4306e0371c7975b8fb2583657ee4a-image-1470343728942.png"
      CSD U3 collisions types_2018: |-
        # Typy kolízií

        V Game Labe používame štyri typy kolízií. Tieto bloky spôsobia interakciu medzi _„sprite“ objektom_ a _cieľom_.

        ## displace

        Blok `displace` spôsobí, že „sprite“ bude tlačiť cieľový objekt po celý čas, ako sa dotýkajú, pričom samotný „sprite“ pokračuje vo svojom pôvodnom pohybe.

        ## collide

        Blok `collide` spôsobí, že „sprite“ zastane v momente, keď sa dotkne cieľa. Ak sa cieľ pohybuje, posunie „sprite“ so sebou. Cieľ pokračuje vo svojom pôvodnom pohybe.

        ## bounce

        Blok `bounce` spôsobí, že „sprite“ a cieľ od seba po dotyku odskočia. Oba  „sprite” objekty zmenia svoj pohyb.

        ## bounceOff

        Blok `bounceOff` spôsobí, že „sprite“ objekt odskočí od cieľa. Cieľ pokračuje vo svojom pôvodnom pohybe.

        # Urob toto

        Vyber najlepší blok na simuláciu odrazu basketbalovej lopty od zeme. ( [Ukáž mi kde](#triggercallout=code_triggered) )

        [//]: # "https://images.code.org/24355fc6377cfafdce3ce2b3568a33c3-image-1470343728940.png"

        [//]: # "https://images.code.org/87e4306e0371c7975b8fb2583657ee4a-image-1470343728942.png"
      CSD U3 collisions types_2019: |-
        # Typy kolízií

        V Game Labe používame štyri typy kolízií. Každý z týhto blokov spôsobí inú interakciu medzi _„sprite“ objektom_ a _cieľom_.

        # Urob toto

        Vyber najlepší blok na simuláciu odrazu basketbalovej lopty od zeme. ( [Ukáž mi kde](#triggercallout=code_triggered) )
        \*Pomôcka: Vyskúšaj rôzne bloky, alebo si o nich prečítaj viac na záložke "Pomoc a tipy".
        [//]\: # (<https://images.code.org/24355fc6377cfafdce3ce2b3568a33c3-image-1470343728940.png>)

        [//]: # "https://images.code.org/87e4306e0371c7975b8fb2583657ee4a-image-1470343728942.png"
      CSD U3 dancing alien: "# Sprites in the Draw Loop\n\nBy changing sprite properties
        in the draw loop, you can animate your characters. \n\nThis animation has
        also been slowed down.  At the beginning of the program the `World.frameRate`
        block has been used to set the frame rate to 10. Usually the frame rate is
        30. Feel free to explore different frame rates.\n\n# Do This\n\n-   Run the
        code to see how it works.\n-   Discuss with your partner why some code is
        inside the draw loop and some code is outside.\n-   Try changing the frame
        rate and running the code again."
      CSD U3 dancing alien_2018: "# Sprites in the Draw Loop\n\nBy changing sprite
        properties in the draw loop, you can animate your characters. \n\nThis animation
        has also been slowed down.  At the beginning of the program the `World.frameRate`
        block has been used to set the frame rate to 10. Usually the frame rate is
        30. Feel free to explore different frame rates.\n\n# Do This\n\n-   Run the
        code to see how it works.\n-   Discuss with your partner why some code is
        inside the draw loop and some code is outside.\n-   Try changing the frame
        rate and running the code again."
      CSD U3 dancing alien_2019: "# Sprites in the Draw Loop\n\nBy changing sprite
        properties in the draw loop, you can animate your characters. \n\nThis animation
        has also been slowed down.  At the beginning of the program the `World.frameRate`
        block has been used to set the frame rate to 10. Usually the frame rate is
        30. Feel free to explore different frame rates.\n\n# Do This\n\n-   Run the
        code to see how it works.\n-   Discuss with your partner why some code is
        inside the draw loop and some code is outside.\n-   Try changing the frame
        rate and running the code again."
      CSD U3 debug: |-
        <img src="https://images.code.org/249f124a9bbd3da7d6327a7be8ab73c9-image-1493138569984.41.50 AM.png" style="float:right;width:150px;">

        # Debugging

        Often, code doesn't work the first time it runs, and programmers have to debug it.  The code below is supposed to make the picture on the right, but the programmer got confused about which order the code should be in, as well as how to put a square in the right place on the screen.

        # Do This

        -   Look at the code in the workspace.
        -   Change the code so it makes the picture on the right.
            -   (You'll need to move one line of code AND change the coordinates of the square.)
      CSD U3 debug_2018: |-
        <img src="https://images.code.org/249f124a9bbd3da7d6327a7be8ab73c9-image-1493138569984.41.50 AM.png" style="float:right;width:150px;">

        # Debugging

        Often, code doesn't work the first time it runs, and programmers have to debug it.  The code below is supposed to make the picture on the right, but the programmer got confused about which order the code should be in, as well as how to put a square in the right place on the screen.

        # Do This

        -   Look at the code in the workspace.
        -   Change the code so it makes the picture on the right.
            -   (You'll need to move one line of code AND change the coordinates of the square.)
      CSD U3 debug_2019: |-
        <img src="https://images.code.org/249f124a9bbd3da7d6327a7be8ab73c9-image-1493138569984.41.50 AM.png" style="float:right;width:150px;">

        # Debugging

        Often, code doesn't work the first time it runs, and programmers have to debug it.  The code below is supposed to make the picture on the right, but the programmer got confused about which order the code should be in, as well as how to put a square in the right place on the screen.

        # Do This

        -   Look at the code in the workspace.
        -   Change the code so it makes the picture on the right.
            -   (You'll need to move one line of code AND change the coordinates of the square.)
      CSD U3 ellipse: |-
        <img src="https://images.code.org/2ef29be10261f6a2c5df8f214d524f4d-image-1493060602794.02.44 PM.png" style="float:right;width:150px;">

        # ellipse

        You can use `ellipse` to make a circle.

        # Do This

        -   Look at the code that makes the ellipse.
        -   Add a new ellipse of a different color.
      CSD U3 ellipse_2018: |-
        <img src="https://images.code.org/2ef29be10261f6a2c5df8f214d524f4d-image-1493060602794.02.44 PM.png" style="float:right;width:150px;">

        # ellipse

        You can use `ellipse` to make a circle.

        # Do This

        -   Look at the code that makes the ellipse.
        -   Add a new ellipse of a different color.
      CSD U3 ellipse_2019: |-
        <img src="https://images.code.org/2ef29be10261f6a2c5df8f214d524f4d-image-1493060602794.02.44 PM.png" style="float:right;width:150px;">

        # ellipse

        You can use `ellipse` to make a circle.

        # Do This

        -   Look at the code that makes the ellipse.
        -   Add a new ellipse of a different color.
      CSD U3 fill: |-
        <img src="https://images.code.org/c91390d63e52a3349c48f7b6b0057258-image-1493060802897.05.19 PM.png" style="float:right;width:200px;">

        # fill(color)

        You can also make your rectangles different colors with `fill`. It will set the color for every shape that comes after it in the code.

        # Do This

        -   Look at the code that sets the color. ( [Show me where](#triggercallout=fill) )
        -   Change the color from blue to yellow.
        -   Add a new square by dragging a `rect` block into the code area below the fill command ( [Show me where](#triggercallout=rect_block) ).  The new square can go any location on the screen you like.
      CSD U3 fill_2018: |-
        <img src="https://images.code.org/c91390d63e52a3349c48f7b6b0057258-image-1493060802897.05.19 PM.png" style="float:right;width:200px;">

        # fill(color)

        You can also make your rectangles different colors with `fill`. It will set the color for every shape that comes after it in the code.

        # Do This

        -   Look at the code that sets the color. ( [Show me where](#triggercallout=fill) )
        -   Change the color from blue to yellow.
        -   Add a new square by dragging a `rect` block into the code area below the fill command ( [Show me where](#triggercallout=rect_block) ).  The new square can go any location on the screen you like.
      CSD U3 fill_2019: |-
        <img src="https://images.code.org/c91390d63e52a3349c48f7b6b0057258-image-1493060802897.05.19 PM.png" style="float:right;width:200px;">

        # fill(color)

        You can also make your rectangles different colors with `fill`. It will set the color for every shape that comes after it in the code.

        # Do This

        -   Look at the code that sets the color. ( [Show me where](#triggercallout=fill) )
        -   Change the color from blue to yellow.
        -   Add a new square by dragging a `rect` block into the code area below the fill command ( [Show me where](#triggercallout=rect_block) ).  The new square can go any location on the screen you like.
      CSD U3 finishing touches: |-
        # Finálne úpravy

        Teraz, keď máš pripravený základ hry je vhodný čas pridať zopár vylepšení.

        Aby bola tvoja hra ešte lepšia, skús ku nej pridať aspoň dve vylepšenia. Môžeš sa inšpirovať týmto zoznamom, alebo implementuj svoj vlastný nápad.

        -   Zabezpeč, aby sa hráč nedostal mimo obrazovky.
        -   Pridaj nový predmet, ktorý môže tvoj hráč zbierať a bude mať inú bodovú hodnotu. Alebo pridaj predmet, ktorému sa má vyhnuť.
        -   Pridaj premennú, ktorá bude sledovať počet životov tvojho hráča a ukonči hru, keď hráč o všetky životy príde.
        -   Pridaj "sprite" objekty, ktoré sa budú pohybovať na pozadí hry.
        -   Pridaj ďalšie pozadie, ktoré sa zmení pri ešte vyššom skóre, alebo v momente, keď hra skončí.
        -   Pridaj hre spôsob, akým sa ukončí. Môžeš ju ukončiť napríklad pri dosiahnutí určitého skóre, alebo keď hráč príde o všetky životy.
        -   Ak má tvoja hra plošiny, nechaj, aby objekty hry s týmito plošinami na seba nejako pôsobili.
      CSD U3 finishing touches_2018: |-
        # Finálne úpravy

        Teraz, keď máš pripravený základ hry je vhodný čas pridať zopár vylepšení.

        Aby bola tvoja hra ešte lepšia, skús ku nej pridať aspoň dve vylepšenia. Môžeš sa inšpirovať týmto zoznamom, alebo implementuj svoj vlastný nápad.

        -   Zabezpeč, aby sa hráč nedostal mimo obrazovky.
        -   Pridaj nový predmet, ktorý môže tvoj hráč zbierať a bude mať inú bodovú hodnotu. Alebo pridaj predmet, ktorému sa má vyhnuť.
        -   Pridaj premennú, ktorá bude sledovať počet životov tvojho hráča a ukonči hru, keď hráč o všetky životy príde.
        -   Pridaj "sprite" objekty, ktoré sa budú pohybovať na pozadí hry.
        -   Pridaj ďalšie pozadie, ktoré sa zmení pri ešte vyššom skóre, alebo v momente, keď hra skončí.
        -   Pridaj hre spôsob, akým sa ukončí. Môžeš ju ukončiť napríklad pri dosiahnutí určitého skóre, alebo keď hráč príde o všetky životy.
        -   Ak má tvoja hra plošiny, nechaj, aby objekty hry s týmito plošinami na seba nejako pôsobili.
      CSD U3 finishing touches_2019: |-
        # Finálne úpravy

        Teraz, keď máš pripravený základ hry je vhodný čas pridať zopár vylepšení.

        Aby bola tvoja hra ešte lepšia, skús ku nej pridať aspoň dve vylepšenia. Môžeš sa inšpirovať týmto zoznamom, alebo implementuj svoj vlastný nápad.

        -   Zabezpeč, aby sa hráč nedostal mimo obrazovky.
        -   Pridaj nový predmet, ktorý môže tvoj hráč zbierať a bude mať inú bodovú hodnotu. Alebo pridaj predmet, ktorému sa má vyhnuť.
        -   Pridaj premennú, ktorá bude sledovať počet životov tvojho hráča a ukonči hru, keď hráč o všetky životy príde.
        -   Pridaj "sprite" objekty, ktoré sa budú pohybovať na pozadí hry.
        -   Pridaj ďalšie pozadie, ktoré sa zmení pri ešte vyššom skóre, alebo v momente, keď hra skončí.
        -   Pridaj hre spôsob, akým sa ukončí. Môžeš ju ukončiť napríklad pri dosiahnutí určitého skóre, alebo keď hráč príde o všetky životy.
        -   Ak má tvoja hra plošiny, nechaj, aby objekty hry s týmito plošinami na seba nejako pôsobili.
      CSD U3 function video: |-
        ## Otázky na zamyslenie

        -   Porozmýšľaj nad situáciou, v ktorej by Ti funkcia pomohla napísať program.
            -   Aký kód by si vložil/a do **definície** funkcie?
            -   Kedy by si ju **zavolal/a**?
            -   Ako by si ju nazvala?
      CSD U3 game animations: |-
        # Vytvorenie animácií

        Teraz na karte animácií vytvor svoje animácie. Nezabudni vytvoriť viacero animácií pokiaľ chceš, aby tvoje postavy menili svoj vzhľad na základe smeru pohybu.
      CSD U3 game animations_2018: |-
        # Vytvorenie animácií

        Teraz na karte animácií vytvor svoje animácie. Nezabudni vytvoriť viacero animácií pokiaľ chceš, aby tvoje postavy menili svoj vzhľad na základe smeru pohybu.
      CSD U3 game animations_2019: |-
        # Vytvorenie animácií

        Teraz na karte animácií vytvor svoje animácie. Nezabudni vytvoriť viacero animácií pokiaľ chceš, aby tvoje postavy menili svoj vzhľad na základe smeru pohybu.
      CSD U3 game backgrounds: |-
        # Vytvorenie pozadia

        Ako ďalší krok si vytvoríme funkcie na vytvorenie pozadia. Niektoré hry majú len jedno pozadie, iné majú viac pozadí, ktoré sa vyberú na základe dosiahnutého skóre, alebo iného aspektu hry. Pre každé pozadie potrebuješ vytvoriť funkciu. Kód na výber správneho pozadia napíšeš v ďalšej úlohe.

        -   [Ukáž mi blok na vytvorenie novej funkcie](#triggercallout=callout1)
        -   [Ukáž mi, do ktorej časti kódu mám umiestniť moju funkciu](#triggercallout=callout2)

        Po vytvorení funkcií ich otestuj tak, že ich vložíš do cyklu kreslenia. Test vykonaj pre každé pozadie zvlášť.

        -   [Ukáž mi blok, ktorým zavolám moju funkciu](#triggercallout=callout3)
      CSD U3 game backgrounds_2018: |-
        # Vytvorenie pozadia

        Ako ďalší krok si vytvoríme funkcie na vytvorenie pozadia. Niektoré hry majú len jedno pozadie, iné majú viac pozadí, ktoré sa vyberú na základe dosiahnutého skóre, alebo iného aspektu hry. Pre každé pozadie potrebuješ vytvoriť funkciu. Kód na výber správneho pozadia napíšeš v ďalšej úlohe.

        -   [Ukáž mi blok na vytvorenie novej funkcie](#triggercallout=callout1)
        -   [Ukáž mi, do ktorej časti kódu mám umiestniť moju funkciu](#triggercallout=callout2)

        Po vytvorení funkcií ich otestuj tak, že ich vložíš do cyklu kreslenia. Test vykonaj pre každé pozadie zvlášť.

        -   [Ukáž mi blok, ktorým zavolám moju funkciu](#triggercallout=callout3)
      CSD U3 game backgrounds_2019: |-
        # Vytvorenie pozadia

        Ako ďalší krok si vytvoríme funkcie na vytvorenie pozadia. Niektoré hry majú len jedno pozadie, iné majú viac pozadí, ktoré sa vyberú na základe dosiahnutého skóre, alebo iného aspektu hry. Pre každé pozadie potrebuješ vytvoriť funkciu. Kód na výber správneho pozadia napíšeš v ďalšej úlohe.

        -   [Ukáž mi blok na vytvorenie novej funkcie](#triggercallout=callout1)
        -   [Ukáž mi, do ktorej časti kódu mám umiestniť moju funkciu](#triggercallout=callout2)

        Po vytvorení funkcií ich otestuj tak, že ich vložíš do cyklu kreslenia. Test vykonaj pre každé pozadie zvlášť.

        -   [Ukáž mi blok, ktorým zavolám moju funkciu](#triggercallout=callout3)
      CSD U3 game choose background: |-
        # Výber pozadia

        Pozadie už máme nakreslené, teraz je načase napísať kód, ktorý rozhodne, ktoré pozadie náš program zobrazí. Ako  na to sme sa naučili v [Lekcii 19, úloha 11](/s/csd3-2017/stage/19/puzzle/11).

        Kód po jeho napísaní nezabudni otestovať tak, že zmeníš počiatočnú hodnotu relevantných premenných a presvedčíš sa, že sa zobrazí správne pozadie.
      CSD U3 game choose background_2018: |-
        # Výber pozadia

        Pozadie už máme nakreslené, teraz je načase napísať kód, ktorý rozhodne, ktoré pozadie náš program zobrazí. Ako  na to sme sa naučili v [Lekcii 19, úloha 11](../../19/puzzle/11).

        Kód po jeho napísaní nezabudni otestovať tak, že zmeníš počiatočnú hodnotu relevantných premenných a presvedčíš sa, že sa zobrazí správne pozadie.
      CSD U3 game choose background_2019: |-
        # Výber pozadia

        Pozadie už máme nakreslené, teraz je načase napísať kód, ktorý rozhodne, ktoré pozadie náš program zobrazí. Ako  na to sme sa naučili v [Lekcii 19, úloha 11](../../19/puzzle/11).

        Kód po jeho napísaní nezabudni otestovať tak, že zmeníš počiatočnú hodnotu relevantných premenných a presvedčíš sa, že sa zobrazí správne pozadie.
      CSD U3 game create sprites: |-
        # Create your Sprites

        Next you will create your sprites and give them starting properties in the "Create Sprites" area of your code.  For each sprite your should:

        -   Create the sprite in the correct place on the screen
        -   Set its animation (or color and size)
        -   Set its velocity and rotation speed, if needed
        -   Set its collider and bounciness, if needed

        After you create each sprite, test it before making the next one.  If your sprite starts off screen, first place it on the screen to test it, them move it back off screen once you know that it looks right.

        If your sprites position will need to be reset later in your game, it's a good idea to make a function that sets the position of this sprite that you can use again later.
      CSD U3 game create sprites_2018: |-
        # Vytvorenie "sprite" objektov

        Vytvor "sprite" objekty a v časti kódu „Create your sprites here” urči ich počiatočné vlastnosti . Pre každý z nich:

        -   Vytvor ho na správnom mieste na obrazovke;
        -   Nastav mu animáciu (alebo farbu a veľkosť);
        -   Ak je to potrebné, nastav rýchlosť jeho pohybu (velocity) a rýchlosť otáčania (rotation speed);
        -   Ak je to potrebné, nastav mu obrys (collider) a odrazivosť (bounciness).

        Každý "sprite" otestuj predtým, ako vytvoríš ďalší. Ak začína mimo obrazovky, najprv ho umiestni na obrazovku a otestuj, či vyzerá správne. Následne zmeň nastavenia tak, aby bol mimo obrazovky.

        Ak umiestnetnenie niektorého "sprite" objektu bude potrebovať počas hry reset, zíde sa ti vytvoriť funkciu, ktorá zadefinuje jeho umiestnenie. V ďalšom kóde ju môžeš použiť.
      CSD U3 game create sprites_2019: |-
        # Vytvorenie "sprite" objektov

        Vytvor "sprite" objekty a v časti kódu „Create your sprites here” urči ich počiatočné vlastnosti . Pre každý z nich:

        -   Vytvor ho na správnom mieste na obrazovke;
        -   Nastav mu animáciu (alebo farbu a veľkosť);
        -   Ak je to potrebné, nastav rýchlosť jeho pohybu (velocity) a rýchlosť otáčania (rotation speed);
        -   Ak je to potrebné, nastav mu obrys (collider) a odrazivosť (bounciness).

        Každý "sprite" otestuj predtým, ako vytvoríš ďalší. Ak začína mimo obrazovky, najprv ho umiestni na obrazovku a otestuj, či vyzerá správne. Následne zmeň nastavenia tak, aby bol mimo obrazovky.

        Ak umiestnetnenie niektorého "sprite" objektu bude potrebovať počas hry reset, zíde sa ti vytvoriť funkciu, ktorá zadefinuje jeho umiestnenie. V ďalšom kóde ju môžeš použiť.
      CSD U3 game display boards: "# Zobrazenie počítadiel\n\nTeraz, keď už máš funkčné
        pozadie, môžeš pridať zobrazenie akýchkoľvek počítadla niektorého z údajov.
        Vo väčšine hier nájdeš zobrazenie aktuálneho skóre. Ak chceš, môžeš ku nemu
        pridať aj informácie o počte životov, alebo iné počítadlo. Ak potrebuješ,
        príklad počítadla nájdeš v [Lekcii 16, úloha 9](/s/csd3-2017/stage/16/puzzle/9).\n\nPre
        každé zobrazené počítadlo:\n\n-   Vytvor funkciu, ktorá zobrazí informácie\n-
        \  Použi túto funkciu v cykle kreslenia\n\nNakoniec nezabudni svoje počítadlá
        otestovať tak, že zmeníš počiatočnú hodnotu svojich premenných  a overíš,
        že sa hodnota na počítadle po spustení kódu zmení. "
      CSD U3 game display boards_2018: "# Zobrazenie počítadiel\n\nTeraz, keď už máš
        funkčné pozadie, môžeš pridať zobrazenie akýchkoľvek počítadla niektorého
        z údajov. Vo väčšine hier nájdeš zobrazenie aktuálneho skóre. Ak chceš, môžeš
        ku nemu pridať aj informácie o počte životov, alebo iné počítadlo. Ak potrebuješ,
        príklad počítadla nájdeš v [Lekcii 16, úloha 9](../../16/puzzle/9).\n\nPre
        každé zobrazené počítadlo:\n\n-   Vytvor funkciu, ktorá zobrazí informácie\n-
        \  Použi túto funkciu v cykle kreslenia\n\nNakoniec nezabudni svoje počítadlá
        otestovať tak, že zmeníš počiatočnú hodnotu svojich premenných  a overíš,
        že sa hodnota na počítadle po spustení kódu zmení. "
      CSD U3 game display boards_2019: "# Zobrazenie počítadiel\n\nTeraz, keď už máš
        funkčné pozadie, môžeš pridať zobrazenie akýchkoľvek počítadla niektorého
        z údajov. Vo väčšine hier nájdeš zobrazenie aktuálneho skóre. Ak chceš, môžeš
        ku nemu pridať aj informácie o počte životov, alebo iné počítadlo. Ak potrebuješ,
        príklad počítadla nájdeš v [Lekcii 16, úloha 9](../../16/puzzle/9).\n\nPre
        každé zobrazené počítadlo:\n\n-   Vytvor funkciu, ktorá zobrazí informácie\n-
        \  Použi túto funkciu v cykle kreslenia\n\nNakoniec nezabudni svoje počítadlá
        otestovať tak, že zmeníš počiatočnú hodnotu svojich premenných  a overíš,
        že sa hodnota na počítadle po spustení kódu zmení. "
      CSD U3 game interactions: |-
        # Interakcie "sprite" objektov

        Posledným krokom je definovať funkcie, ktoré určia interakcie medzi jednotlivými "sprite" objektami. Potrebuješ funkciu pre každý typ interakcie. Príkladmi takýchto funkcií sú `collectItems` z [Lekcie 21, úloha 17](/s/csd3-2017/stage/21/puzzle/17) a `displaceEnemies` z [Lekcie 20, úloha 15](/s/csd3-2017/stage/20/puzzle/15).

        Pre každú interakciu:

        -   Vytvor funkciu v časti "Create your functions here"  na konci kódu
        -   Zavolaj funkciu v rámci cyklu kreslenia

        Keď pripravíš funkciu, otestuj ju a až potom sa pusti do ďalšej funkcie.
      CSD U3 game interactions_2018: |-
        # Interakcie "sprite" objektov

        Posledným krokom je definovať funkcie, ktoré určia interakcie medzi jednotlivými "sprite" objektami. Potrebuješ funkciu pre každý typ interakcie. Príkladmi takýchto funkcií sú `collectItems` z [Lekcie 21, úloha 17](/s/csd3-2018/stage/21/puzzle/17) a `displaceEnemies` z [Lekcie 20, úloha 15](/s/csd3-2018/stage/20/puzzle/15).

        Pre každú interakciu:

        -   Vytvor funkciu v časti "Create your functions here"  na konci kódu
        -   Zavolaj funkciu v rámci cyklu kreslenia

        Keď pripravíš funkciu, otestuj ju a až potom sa pusti do ďalšej funkcie.
      CSD U3 game interactions_2019: |-
        # Interakcie "sprite" objektov

        Posledným krokom je definovať funkcie, ktoré určia interakcie medzi jednotlivými "sprite" objektami. Potrebuješ funkciu pre každý typ interakcie. Príkladmi takýchto funkcií sú `collectItems` z [Lekcie 21, úloha 17](../../21/puzzle/17) a `displaceEnemies` z [Lekcie 20, úloha 15](../../20/puzzle/15).

        Pre každú interakciu:

        -   Vytvor funkciu v časti "Create your functions here"  na konci kódu
        -   Zavolaj funkciu v rámci cyklu kreslenia

        Keď pripravíš funkciu, otestuj ju a až potom sa pusti do ďalšej funkcie.
      CSD U3 game sprite movement: |-
        # Funkcie na pohyb "sprite" objektov

        Teraz vytvoríme funkcie, pomocou ktorých sa naše "sprite" objekty budú pohybovať počas celej hry. Príkladmi funkcií z predchádzajúcich lekcií sú napríklad `loopPlatforms` v [Lekcii 21, úloha 9](/s/csd3-2017/stage/21/puzzle/9) a `playerFall` v [Lekcii 21, úloha 14](/s/csd3-2017/stage/21/puzzle/14).

        Pre každý pohyb:

        -   Vytvor funkciu, ktorá bude tvojim "sprite" objektom pohybovať želaným spôsosom
        -   Zavolaj túto funkciu v cykle kreslenia
      CSD U3 game sprite movement_2018: |-
        # Funkcie na pohyb "sprite" objektov

        Teraz vytvoríme funkcie, pomocou ktorých sa naše "sprite" objekty budú pohybovať počas celej hry. Príkladmi funkcií z predchádzajúcich lekcií sú napríklad `loopPlatforms` v [Lekcii 21, úloha 9](../../../stage/21/puzzle/9) a `playerFall` v [Lekcii 21, úloha 14](../../../stage/21/puzzle/14).

        Pre každý pohyb:

        -   Vytvor funkciu, ktorá bude tvojim "sprite" objektom pohybovať želaným spôsosom
        -   Zavolaj túto funkciu v cykle kreslenia
      CSD U3 game sprite movement_2019: |-
        # Funkcie na pohyb "sprite" objektov

        Teraz vytvoríme funkcie, pomocou ktorých sa naše "sprite" objekty budú pohybovať počas celej hry. Príkladmi funkcií z predchádzajúcich lekcií sú napríklad `loopPlatforms` v [Lekcii 21, úloha 9](../../../stage/21/puzzle/9) a `playerFall` v [Lekcii 21, úloha 14](../../../stage/21/puzzle/14).

        Pre každý pohyb:

        -   Vytvor funkciu, ktorá bude tvojim "sprite" objektom pohybovať želaným spôsosom
        -   Zavolaj túto funkciu v cykle kreslenia
      CSD U3 game user controls: |-
        # Ovládanie počas hry

        Teraz zabezpečíme, aby sme postavy našej hry vedeli ovládať. Vytvor funkciu, pomocou ktorej tvoje "sprite" objekty budú reagovať na obládanie hráčom hry tak, ako si si to definoval v Sprievodcovi projektom. Môžeš sa inšpirovať funkciou z [Lekcie 20, úloha 13](/s/csd3-2017/stage/20/puzzle/13).
      CSD U3 game user controls_2018: |-
        # Ovládanie počas hry

        Teraz zabezpečíme, aby sme postavy našej hry vedeli ovládať. Vytvor funkciu, pomocou ktorej tvoje "sprite" objekty budú reagovať na obládanie hráčom hry tak, ako si si to definoval v Sprievodcovi projektom. Môžeš sa inšpirovať funkciou z [Lekcie 20, úloha 13](../../20/puzzle/13).
      CSD U3 game user controls_2019: |-
        # Ovládanie počas hry

        Teraz zabezpečíme, aby sme postavy našej hry vedeli ovládať. Vytvor funkciu, pomocou ktorej tvoje "sprite" objekty budú reagovať na obládanie hráčom hry tak, ako si si to definoval v Sprievodcovi projektom. Môžeš sa inšpirovať funkciou z [Lekcie 20, úloha 13](../../20/puzzle/13).
      CSD U3 game variables: |-
        # Definícia premenných

        Ako prvý krok potrebuješ vytvoriť všetky premenné a umiestniť ich na začiatok kódu (časť "Create your variables here").

        -   [Ukáž mi blok](#triggercallout=callout1)
        -   [Ukáž mi umiestnenie v kóde](#triggercallout=callout2)

        Nezabudni, že každá premenná potrebuje názov a počiatočnú hodnotu. Túto hodnotu môžeš neskôr vo svojom kóde zmeniť.
      CSD U3 game variables_2018: |-
        # Definícia premenných

        Ako prvý krok potrebuješ vytvoriť všetky premenné a umiestniť ich na začiatok kódu (časť "Create your variables here").

        -   [Ukáž mi blok](#triggercallout=callout1)
        -   [Ukáž mi umiestnenie v kóde](#triggercallout=callout2)

        Nezabudni, že každá premenná potrebuje názov a počiatočnú hodnotu. Túto hodnotu môžeš neskôr vo svojom kóde zmeniť.
      CSD U3 game variables_2019: |-
        # Definícia premenných

        Ako prvý krok potrebuješ vytvoriť všetky premenné a umiestniť ich na začiatok kódu (časť "Create your variables here").

        -   [Ukáž mi blok](#triggercallout=callout1)
        -   [Ukáž mi umiestnenie v kóde](#triggercallout=callout2)

        Nezabudni, že každá premenná potrebuje názov a počiatočnú hodnotu. Túto hodnotu môžeš neskôr vo svojom kóde zmeniť.
      CSD U3 if else predict: Predict Level, see contained level for instructions.
      CSD U3 keydown conditional: |-
        # Changing Sprites

        You saw on the last level that `keyDown` returns `true` while you are holding a key down and `false` when the key is not pressed down.   The input for the `keyDown` command is the name of key you want to check in quotes. Some examples are "x", "up" and "space".

        We can use `keyDown` as an input to an `if` statement to change our animations based on key presses!

        # Do This

        -   Run the code and try pressing the up and down arrows.
        -   Look inside the `if` statement to see how the code works.
        -   Add a block inside the third `if` statement to change the animation to a different animal.

        _Hint: you can use the rabbit that's already in the Animations tab, or add a new animation._
      CSD U3 keydown conditional_2018: "# Zmena \"sprite\" objektov\n\nV poslednom
        leveli sme videli, že `keyDown` vráti hodnotu `true`, ak je klávesa stlačená,
        a `false`, ak stlačená nie je. Vstupom pre príkaz `keyDown` je anglický názov
        klávesy, ktorú chceš sledovať, napísaný v úvodzovkách. Napríklad: \"x\", \"up\"
        (hore) alebo \"space\" (medzerník).\n\nPríkaz `keyDown` môžeš použiť ako vstup
        pre výraz `if`, a to na zmenu animácie podľa toho, ktorá klávesa bola stlačená!\n\n#
        Urob toto\n\n-   Spusti kód a skús stlačiť klávesy „p“ a „h“. \n-   Pozri
        sa na výraz `if` a zisti, ako funguje kód.\n-   Pridaj blok do tretieho výrazu
        `if`, aby si zmenil/a zvieratko v animácii.\n\n_Výzva: Pri použití `setAnimation`
        bude nová animácia používaná, až kým ju opäť nezmeníš. Vieš upraviť kód tak,
        aby sa vždy, keď nie je stlačená žiadna klávesa, zobrazila žirafa?_"
      CSD U3 keydown conditional_2018_2019: "# Zmena \"sprite\" objektov\n\nV poslednom
        leveli sme videli, že `keyDown` vráti hodnotu `true`, ak je klávesa stlačená,
        a `false`, ak stlačená nie je. Vstupom pre príkaz `keyDown` je anglický názov
        klávesy, ktorú chceš sledovať, napísaný v úvodzovkách. Napríklad: \"x\", \"up\"
        (hore) alebo \"space\" (medzerník).\n\nPríkaz `keyDown` môžeš použiť ako vstup
        pre výraz `if`, a to na zmenu animácie podľa toho, ktorá klávesa bola stlačená!\n\n#
        Urob toto\n\n-   Spusti kód a skús stlačiť klávesy „p“ a „h“. \n-   Pozri
        sa na výraz `if` a zisti, ako funguje kód.\n-   Pridaj blok do tretieho výrazu
        `if`, aby si zmenil/a zvieratko v animácii.\n\n_Výzva: Pri použití `setAnimation`
        bude nová animácia používaná, až kým ju opäť nezmeníš. Vieš upraviť kód tak,
        aby sa vždy, keď nie je stlačená žiadna klávesa, zobrazila žirafa?_"
      CSD U3 picture: |-
        # Challenge: Draw an Image

        _Check with your teacher before starting any of the challenges._

        In the previous lesson you and your partner created several interesting images. See if you can recreate one of them using code.
      CSD U3 picture_2018: |-
        # Challenge: Draw an Image

        _Check with your teacher before starting any of the challenges._

        In the previous lesson you and your partner created several interesting images. See if you can recreate one of them using code.
      CSD U3 picture_2019: |-
        # Challenge: Draw an Image

        _Check with your teacher before starting any of the challenges._

        In the previous lesson you and your partner created several interesting images. See if you can recreate one of them using code.
      CSD U3 platform background1: "# Pozadie\n\nAko prvú vec v tejto hre vytvoríme
        pozadie. Vzorová hra mala dve rôzne pozadia, ktoré sa zobrazovali podľa skóre
        hráča. \nPrvé pozadie už bolo pre teba vytvorené. Pozri sa na funkciu `background1`
        v kóde nižšie a zisti, ako funguje. ([Show me where](#triggercallout=code_triggered1))\n\nAby
        funkcia pozadia niečo robila, musíš ju zavolať vo vnútri cyklu kreslenia.
        ([Show me where](#triggercallout=code_triggered2))\n\nV kóde nájdeš aj prázdnu
        funkciu s názvom `background2`. ([Show me where](#triggercallout=code_triggered3))
        \ Do tejto funkcie musíš dopísať nový kód, ktorým vytvoríš iné pozadie a potom
        ho otestovať zavolaním funkcie vo vnútri cyklu kreslenia.\n\n# Urob toto\n\n-
        \  Prečítaj si kód pre `background1`.\n-   Doplň funkciu `background2` novým
        kódom pre vytvorenie druhého pozadia.\n-   Otestuj svoju funkciu `background2`
        tak, že ju zavoláš vo vnútri cyklu kreslenia.\n\n_Nápoveda: Kód je  omnoho
        jednoduchšie skopírovať a potom v ňom vykonať malé zmeny v textovom móde._"
      CSD U3 platform background1_2018: "# Pozadie\n\nAko prvú vec v tejto hre vytvoríme
        pozadie. Vzorová hra mala dve rôzne pozadia, ktoré sa zobrazovali podľa skóre
        hráča. \nPrvé pozadie už bolo pre teba vytvorené. Pozri sa na funkciu `background1`
        v kóde nižšie a zisti, ako funguje. ([Show me where](#triggercallout=code_triggered1))\n\nAby
        funkcia pozadia niečo robila, musíš ju zavolať vo vnútri cyklu kreslenia.
        ([Show me where](#triggercallout=code_triggered2))\n\nV kóde nájdeš aj prázdnu
        funkciu s názvom `background2`. ([Show me where](#triggercallout=code_triggered3))
        \ Do tejto funkcie musíš dopísať nový kód, ktorým vytvoríš iné pozadie a potom
        ho otestovať zavolaním funkcie vo vnútri cyklu kreslenia.\n\n# Urob toto\n\n-
        \  Prečítaj si kód pre `background1`.\n-   Doplň funkciu `background2` novým
        kódom pre vytvorenie druhého pozadia.\n-   Otestuj svoju funkciu `background2`
        tak, že ju zavoláš vo vnútri cyklu kreslenia.\n\n_Nápoveda: Kód je  omnoho
        jednoduchšie skopírovať a potom v ňom vykonať malé zmeny v textovom móde._"
      CSD U3 platform background1_2019: "# Pozadie\n\nAko prvú vec v tejto hre vytvoríme
        pozadie. Vzorová hra mala dve rôzne pozadia, ktoré sa zobrazovali podľa skóre
        hráča. \nPrvé pozadie už bolo pre teba vytvorené. Pozri sa na funkciu `background1`
        v kóde nižšie a zisti, ako funguje. ([Show me where](#triggercallout=code_triggered1))\n\nAby
        funkcia pozadia niečo robila, musíš ju zavolať vo vnútri cyklu kreslenia.
        ([Show me where](#triggercallout=code_triggered2))\n\nV kóde nájdeš aj prázdnu
        funkciu s názvom `background2`. ([Show me where](#triggercallout=code_triggered3))
        \ Do tejto funkcie musíš dopísať nový kód, ktorým vytvoríš iné pozadie a potom
        ho otestovať zavolaním funkcie vo vnútri cyklu kreslenia.\n\n# Urob toto\n\n-
        \  Prečítaj si kód pre `background1`.\n-   Doplň funkciu `background2` novým
        kódom pre vytvorenie druhého pozadia.\n-   Otestuj svoju funkciu `background2`
        tak, že ju zavoláš vo vnútri cyklu kreslenia.\n\n_Nápoveda: Kód je  omnoho
        jednoduchšie skopírovať a potom v ňom vykonať malé zmeny v textovom móde._"
      CSD U3 platform background2: |-
        # Výber pozadia

        Teraz, keď už máš premennú na sledovanie skóre, môžeš ju použiť pre výber správne pozadia vo svojej hre. Príklad, ako meniť pozadia na základe hodnoty skóre nájdeš v [Lekcii 19, úloha 11](/s/csd3-2017/stage/19/puzzle/11)

        # Urob toto

        -   Vo vnútri cyklu kreslenia použi výraz `if` spolu s dvomi funkciami na nakreslenie pozadia tak, aby sa na základe skóre zobrazilo správne pozadie.
        -   Otestuj svoj kód zmenou začiatočného skóre na 100 a potom ho spusti a over, či sa pozadie zmenilo.

        _Výzva: Ak chceš mať aj tretie pozadie, môžeš kliknúť na znamienko „plus“ na spodnej člasti bloku `if`. Zobrazí sa ďalšie miesto pre tretiu funkciu pozadia, ako aj miesto na opätovnú kontrolu skóre._
      CSD U3 platform background2_2018: |-
        # Výber pozadia

        Teraz, keď už máš premennú na sledovanie skóre, môžeš ju použiť pre výber správne pozadia vo svojej hre. Príklad, ako meniť pozadia na základe hodnoty skóre nájdeš v [Lekcii 19, úloha 11](/s/csd3-2018/stage/19/puzzle/11)

        # Urob toto

        -   Vo vnútri cyklu kreslenia použi výraz `if` spolu s dvomi funkciami na nakreslenie pozadia tak, aby sa na základe skóre zobrazilo správne pozadie.
        -   Otestuj svoj kód zmenou začiatočného skóre na 100 a potom ho spusti a over, či sa pozadie zmenilo.

        _Výzva: Ak chceš mať aj tretie pozadie, môžeš kliknúť na znamienko „plus“ na spodnej člasti bloku `if`. Zobrazí sa ďalšie miesto pre tretiu funkciu pozadia, ako aj miesto na opätovnú kontrolu skóre._
      CSD U3 platform background2_2019: |-
        # Výber pozadia

        Teraz, keď už máš premennú na sledovanie skóre, môžeš ju použiť pre výber správne pozadia vo svojej hre. Príklad, ako meniť pozadia na základe hodnoty skóre nájdeš v [Lekcii 19, úloha 12](../../19/puzzle/12)

        # Urob toto

        -   Vo vnútri cyklu kreslenia použi výraz `if` spolu s dvomi funkciami na nakreslenie pozadia tak, aby sa na základe skóre zobrazilo správne pozadie.
        -   Otestuj svoj kód zmenou začiatočného skóre na 100 a potom ho spusti a over, či sa pozadie zmenilo.

        _Výzva: Ak chceš pridať tretie pozadie, môžeš kliknúť na znamienko „plus“ na spodnej člasti bloku `if`. Zobrazí sa ďalšie miesto pre tretiu funkciu pozadia, ako aj miesto na opätovnú kontrolu skóre._
      CSD U3 platform challenge: "# Vylepši svoju hru\n\nVylepši svoju hru pridaním
        dvoch alebo viac nápadov z posledných lekcií. Ako pomôcku môžeš použiť tento
        zoznam. \n\n-   Pre svoju postavičku, plošinu alebo predmety použi novú animáciu.
        \n-   Zamedz postavičke pohnúť sa mimo obrazovky, a to doľava i doprava. \n-
        \  Pridaj predmet, ktorý má hráč zbierať alebo ktorému sa má vyhnúť. \n-   Pridaj
        premennú, ktorá bude hráčovi rátať počet životov a hru zastaví, ak sa mu životy
        minú.\n-   Otoč hráča tak, aby sa vždy pozeral smerom, ktorým ide. \n-   Pridaj
        ďaľšie pozadie, ktoré sa zobrazí po dosiahnutí ešte vyššieho skóre. \n-   Keď
        sa predmety dotknú plošín, niečo sa stane."
      CSD U3 platform challenge_2018: "# Vylepši svoju hru\n\nVylepši svoju hru pridaním
        dvoch alebo viac nápadov z posledných lekcií. Ako pomôcku môžeš použiť tento
        zoznam. \n\n-   Pre svoju postavičku, plošinu alebo predmety použi novú animáciu.
        \n-   Zamedz postavičke pohnúť sa mimo obrazovky, a to doľava i doprava. \n-
        \  Pridaj predmet, ktorý má hráč zbierať alebo ktorému sa má vyhnúť. \n-   Pridaj
        premennú, ktorá bude hráčovi rátať počet životov a hru zastaví, ak sa mu životy
        minú.\n-   Otoč hráča tak, aby sa vždy pozeral smerom, ktorým ide. \n-   Pridaj
        ďaľšie pozadie, ktoré sa zobrazí po dosiahnutí ešte vyššieho skóre. \n-   Keď
        sa predmety dotknú plošín, niečo sa stane."
      CSD U3 platform challenge_2019: "# Vylepši svoju hru\n\nVylepši svoju hru pridaním
        dvoch alebo viac nápadov z posledných lekcií. Ako pomôcku môžeš použiť tento
        zoznam. \n\n-   Pre svoju postavičku, plošinu alebo predmety použi novú animáciu.
        \n-   Zamedz postavičke pohnúť sa mimo obrazovky, a to doľava i doprava. \n-
        \  Pridaj predmet, ktorý má hráč zbierať alebo ktorému sa má vyhnúť. \n-   Pridaj
        premennú, ktorá bude hráčovi rátať počet životov a hru zastaví, ak sa mu životy
        minú.\n-   Otoč hráča tak, aby sa vždy pozeral smerom, ktorým ide. \n-   Pridaj
        ďaľšie pozadie, ktoré sa zobrazí po dosiahnutí ešte vyššieho skóre. \n-   Keď
        sa predmety dotknú plošín, niečo sa stane."
      CSD U3 platform items1: |-
        # Vytvorenie predmetov

        <img src="https://images.code.org/2cdb64a2e23e68c8a86296240642cd13-image-1476211650103.gif" style="float:right;">

        Teraz potrebuješ pridať predmety, ktoré budú padať z hornej časti obrazovky. Tieto sa pohybujú rovnako ako plošiny, ale rýchlejšie. Aby bola hra zaujímavejšia, tieto predmety začínajú na náhodnej pozícii nad hornou hranicou obrazovky. Pre vzorovú hru stačí, aby pozícia „x“ bola náhodne medzi 50 a 350 a pozícia „y“ náhodne medzi -30 a -60

        # Urob toto

        -   Použi blok `createSprite` na vytvorenie „sprite“ objektu  v sekcii „create sprites" tvojho kódu.
        -   Použi blok `randomNumber` vo vnútri bloku `createSprite` na spustenie objektu na náhodnej pozícii x aj y.
        -   Použi `setAnimation` a `velocityY` na priradenie správneho obrázku k  jednotlivým „sprite“ objektom a ich spustenie z hornej časti obrazovky smerom nadol.
        -   Spusti kód a otestuj svoje „sprite“ objekty.
      CSD U3 platform items1_2018: |-
        # Vytvorenie predmetov

        <img src="https://images.code.org/2cdb64a2e23e68c8a86296240642cd13-image-1476211650103.gif" style="float:right;">

        Teraz potrebuješ pridať predmety, ktoré budú padať z hornej časti obrazovky. Tieto sa pohybujú rovnako ako plošiny, ale rýchlejšie. Aby bola hra zaujímavejšia, tieto predmety začínajú na náhodnej pozícii nad hornou hranicou obrazovky. Pre vzorovú hru stačí, aby pozícia „x“ bola náhodne medzi 50 a 350 a pozícia „y“ náhodne medzi -30 a -60

        # Urob toto

        -   Použi blok `createSprite` na vytvorenie „sprite“ objektu  v sekcii „create sprites" tvojho kódu.
        -   Použi blok `randomNumber` vo vnútri bloku `createSprite` na spustenie objektu na náhodnej pozícii x aj y.
        -   Použi `setAnimation` a `velocityY` na priradenie správneho obrázku k  jednotlivým „sprite“ objektom a ich spustenie z hornej časti obrazovky smerom nadol.
        -   Spusti kód a otestuj svoje „sprite“ objekty.
      CSD U3 platform items1_2019: |-
        # Vytvorenie predmetov

        <img src="https://images.code.org/2cdb64a2e23e68c8a86296240642cd13-image-1476211650103.gif" style="float:right;">

        Teraz potrebuješ pridať predmety, ktoré budú padať z hornej časti obrazovky. Tieto sa pohybujú rovnako ako plošiny, ale rýchlejšie. Aby bola hra zaujímavejšia, tieto predmety začínajú na náhodnej pozícii nad hornou hranicou obrazovky. Pre vzorovú hru stačí, aby pozícia „x“ bola náhodne medzi 50 a 350 a pozícia „y“ náhodne medzi -30 a -60

        # Urob toto

        -   Použi blok `createSprite` na vytvorenie „sprite“ objektu  v sekcii „create sprites" tvojho kódu.
        -   Použi blok `randomNumber` vo vnútri bloku `createSprite` na spustenie objektu na náhodnej pozícii x aj y.
        -   Použi `setAnimation` a `velocityY` na priradenie správneho obrázku k  jednotlivým „sprite“ objektom a ich spustenie z hornej časti obrazovky smerom nadol.
        -   Spusti kód a otestuj svoje „sprite“ objekty.
      CSD U3 platform items2: "# Zacyklenie predmetov\n\n<img src=\"https://images.code.org/bf06ad06acbba65dfd48b63608a08c90-image-1476212006882.gif\"
        style=\"float:right\">\n\nTeraz, keď tvoj „sprite“ premet padá, môžeš pridať
        kód pre jeho opakovaný pád z hornej časti obrazovky. Toto je skoro to isté
        ako sme robili pre „sprite“ objekt plošiny, ale tentokrát sa bude „sprite“
        objekt po presunutí do hornej časti obrazovky vracať na náhodnú pozíciu x
        i y. \n\n# Urob toto\n\n-   Vytvor funkciu `loopItems`, ktorá používa výraz
        `if` na kontrolu toho, či sa „sprite“ objekt predmetu nachádza pod spodnou
        časťou obrazovky. Ak sa tam nachádza, tak nech sa vráti naspäť na náhodnú
        pozíciu x a y tak, ako sa stalo pri jeho prvom vytvorení.\n-   Zavolaj funkciu
        vo vnútri cyklu kreslenia.\n-   Spusti kód  a otestuj svoj „sprite“."
      CSD U3 platform items2_2018: "# Zacyklenie predmetov\n\n<img src=\"https://images.code.org/bf06ad06acbba65dfd48b63608a08c90-image-1476212006882.gif\"
        style=\"float:right\">\n\nTeraz, keď tvoj „sprite“ premet padá, môžeš pridať
        kód pre jeho opakovaný pád z hornej časti obrazovky. Toto je skoro to isté
        ako sme robili pre „sprite“ objekt plošiny, ale tentokrát sa bude „sprite“
        objekt po presunutí do hornej časti obrazovky vracať na náhodnú pozíciu x
        i y. \n\n# Urob toto\n\n-   Vytvor funkciu `loopItems`, ktorá používa výraz
        `if` na kontrolu toho, či sa „sprite“ objekt predmetu nachádza pod spodnou
        časťou obrazovky. Ak sa tam nachádza, tak nech sa vráti naspäť na náhodnú
        pozíciu x a y tak, ako sa stalo pri jeho prvom vytvorení.\n-   Zavolaj funkciu
        vo vnútri cyklu kreslenia.\n-   Spusti kód  a otestuj svoj „sprite“."
      CSD U3 platform items2_2019: "# Zacyklenie predmetov\n\n<img src=\"https://images.code.org/bf06ad06acbba65dfd48b63608a08c90-image-1476212006882.gif\"
        style=\"float:right\">\n\nTeraz, keď tvoj „sprite“ premet padá, môžeš pridať
        kód pre jeho opakovaný pád z hornej časti obrazovky. Toto je skoro to isté
        ako sme robili pre „sprite“ objekt plošiny, ale tentokrát sa bude „sprite“
        objekt po presunutí do hornej časti obrazovky vracať na náhodnú pozíciu x
        i y. \n\n# Urob toto\n\n-   Vytvor funkciu `loopItems`, ktorá používa výraz
        `if` na kontrolu toho, či sa „sprite“ objekt predmetu nachádza pod spodnou
        časťou obrazovky. Ak sa tam nachádza, tak nech sa vráti naspäť na náhodnú
        pozíciu x a y tak, ako sa stalo pri jeho prvom vytvorení.\n-   Zavolaj funkciu
        vo vnútri cyklu kreslenia.\n-   Spusti kód  a otestuj svoj „sprite“."
      CSD U3 platform items3: |-
        # Vytvor si druhý predmet

        <img src="https://images.code.org/dfd53f2ea4b4380c126dde8035bcdc45-image-1476212495388.gif" style="float: right">

        Teraz skopíruješ kód svojho prvého predmetu a vytvoríš druhý predmet. Pripomíname, že sa ti to bude robiť lepšie **v textovom móde**.

        Skopírovať treba dve časti kódu: časť na začiatku, kde sme vytvorili predmet a potom časť v tvojej funkcii `loopItem`, kde sa predmet premiestni naspäť navrch obrazovky

        # Urob toto

        -   Skopíruj kód použitý na vytvorenie prvého „sprite“ objektu (`createSprite`, `setAnimation` a `velocityY`) a vlož ho hneď pod pôvodný kód.
        -   Zmeň názvy „sprite“ objektov v novej časti kódu. Ak sa napríklad pôvodný „sprite“ objekt nazýva „star“, tak nový objekt môžeš nazvať „star2“.
        -   Vo vnútri funkcie `loopItems` skopíruj výraz `if` a potom ho vlož hneď pod pôvodný kód vo vnútri funkcie.
        -   Zmeň názov „sprite“ objektu v novej časti kódu.
        -   Spusti kód a otestuj ho.
      CSD U3 platform items3_2018: |-
        # Vytvor si druhý predmet

        <img src="https://images.code.org/dfd53f2ea4b4380c126dde8035bcdc45-image-1476212495388.gif" style="float: right">

        Teraz skopíruješ kód svojho prvého predmetu a vytvoríš druhý predmet. Pripomíname, že sa ti to bude robiť lepšie **v textovom móde**.

        Skopírovať treba dve časti kódu: časť na začiatku, kde sme vytvorili predmet a potom časť v tvojej funkcii `loopItem`, kde sa predmet premiestni naspäť navrch obrazovky

        # Urob toto

        -   Skopíruj kód použitý na vytvorenie prvého „sprite“ objektu (`createSprite`, `setAnimation` a `velocityY`) a vlož ho hneď pod pôvodný kód.
        -   Zmeň názvy „sprite“ objektov v novej časti kódu. Ak sa napríklad pôvodný „sprite“ objekt nazýva „star“, tak nový objekt môžeš nazvať „star2“.
        -   Vo vnútri funkcie `loopItems` skopíruj výraz `if` a potom ho vlož hneď pod pôvodný kód vo vnútri funkcie.
        -   Zmeň názov „sprite“ objektu v novej časti kódu.
        -   Spusti kód a otestuj ho.
      CSD U3 platform items3_2019: |-
        # Vytvor si druhý predmet

        <img src="https://images.code.org/dfd53f2ea4b4380c126dde8035bcdc45-image-1476212495388.gif" style="float: right">

        Teraz skopíruješ kód svojho prvého predmetu a vytvoríš druhý predmet. Pripomíname, že sa ti to bude robiť lepšie **v textovom móde**.

        Skopírovať treba dve časti kódu: časť na začiatku, kde sme vytvorili predmet a potom časť v tvojej funkcii `loopItem`, kde sa predmet premiestni naspäť navrch obrazovky

        # Urob toto

        -   Skopíruj kód použitý na vytvorenie prvého „sprite“ objektu (`createSprite`, `setAnimation` a `velocityY`) a vlož ho hneď pod pôvodný kód.
        -   Zmeň názvy „sprite“ objektov v novej časti kódu. Ak sa napríklad pôvodný „sprite“ objekt nazýva „star“, tak nový objekt môžeš nazvať „star2“.
        -   Vo vnútri funkcie `loopItems` skopíruj výraz `if` a potom ho vlož hneď pod pôvodný kód vo vnútri funkcie.
        -   Zmeň názov „sprite“ objektu v novej časti kódu.
        -   Spusti kód a otestuj ho.
      CSD U3 platform platform1: "# Vytvorenie „sprite“ objektu pre plošinu\n\n<img
        src=\"https://images.code.org/6e5aa80eb72809d761a695fae1b42b81-image-1476210749306.gif\"
        style=\"float: right;\"> \n\nKeď už máš vytvorené pozadie aj premenné, je
        čas na vytvorenie „sprite“ objektov. Najjednoduchšie bude začať vytvorením
        „sprite“ objektov, ktoré sú súčasťou prostredia, ako sú napríklad plošiny.
        Vzorová hra mala 2 „sprite“ objekty plošín. Začneme prvou plošinou, ktorú
        otestujeme a až potom jej kód skopírujeme a upravíme na vytvorenie druhej
        plošiny.\n\n# Urob toto\n\n-   Pozri sa na svoj pracovný list a vyber si plošinu,
        ktorú chceš vytvoriť.\n-   V sekcii \"Create sprites\" (\"Vytvor „sprite“
        objekty\") na začiatku kódu vytvor nové „sprite“ objekty  pomocou bloku `createSprite`
        a priraď im správnu pozíciu aj názov. ([Show me the block](#triggercallout=callout))\n-
        \  Použi bloky `setAnimation` a `velocityY` a priraď svojmu „sprite“ objektu
        \ správny obrázok a rýchlosť smerom nadol.\n-   Otestuj svoj „sprite“ a over,
        že sa hýbe správnym smerom. Možno budeš musieť upraviť jeho rýchlosť.\n\n_Nápoveda:
        „Sprite“ objekt sa dostane mimo obrazovku a nevráti sa. Jeho zacyklenie nastavíš
        v nasledujúcej úlohe._"
      CSD U3 platform platform1_2018: "# Vytvorenie „sprite“ objektu pre plošinu\n\n<img
        src=\"https://images.code.org/6e5aa80eb72809d761a695fae1b42b81-image-1476210749306.gif\"
        style=\"float: right;\"> \n\nKeď už máš vytvorené pozadie aj premenné, je
        čas na vytvorenie „sprite“ objektov. Najjednoduchšie bude začať vytvorením
        „sprite“ objektov, ktoré sú súčasťou prostredia, ako sú napríklad plošiny.
        Vzorová hra mala 2 „sprite“ objekty plošín. Začneme prvou plošinou, ktorú
        otestujeme a až potom jej kód skopírujeme a upravíme na vytvorenie druhej
        plošiny.\n\n# Urob toto\n\n-   Pozri sa na svoj pracovný list a vyber si plošinu,
        ktorú chceš vytvoriť.\n-   V sekcii \"Create sprites\" (\"Vytvor „sprite“
        objekty\") na začiatku kódu vytvor nové „sprite“ objekty  pomocou bloku `createSprite`
        a priraď im správnu pozíciu aj názov. ([Show me the block](#triggercallout=callout))\n-
        \  Použi bloky `setAnimation` a `velocityY` a priraď svojmu „sprite“ objektu
        \ správny obrázok a rýchlosť smerom nadol.\n-   Otestuj svoj „sprite“ a over,
        že sa hýbe správnym smerom. Možno budeš musieť upraviť jeho rýchlosť.\n\n_Nápoveda:
        „Sprite“ objekt sa dostane mimo obrazovku a nevráti sa. Jeho zacyklenie nastavíš
        v nasledujúcej úlohe._"
      CSD U3 platform platform1_2019: "# Vytvorenie „sprite“ objektu pre plošinu\n\n<img
        src=\"https://images.code.org/6e5aa80eb72809d761a695fae1b42b81-image-1476210749306.gif\"
        style=\"float: right;\"> \n\nKeď už máš vytvorené pozadie aj premenné, je
        čas na vytvorenie „sprite“ objektov. Najjednoduchšie bude začať vytvorením
        „sprite“ objektov, ktoré sú súčasťou prostredia, ako sú napríklad plošiny.
        Vzorová hra mala 2 „sprite“ objekty plošín. Začneme prvou plošinou, ktorú
        otestujeme a až potom jej kód skopírujeme a upravíme na vytvorenie druhej
        plošiny.\n\n# Urob toto\n\n-   Pozri sa na svoj pracovný list a vyber si plošinu,
        ktorú chceš vytvoriť.\n-   V sekcii \"Create sprites\" (\"Vytvor „sprite“
        objekty\") na začiatku kódu vytvor nové „sprite“ objekty  pomocou bloku `createSprite`
        a priraď im správnu pozíciu aj názov. ([Show me the block](#triggercallout=callout))\n-
        \  Použi bloky `setAnimation` a `velocityY` a priraď svojmu „sprite“ objektu
        \ správny obrázok a rýchlosť smerom nadol.\n-   Otestuj svoj „sprite“ a over,
        že sa hýbe správnym smerom. Možno budeš musieť upraviť jeho rýchlosť.\n\n_Nápoveda:
        „Sprite“ objekt sa dostane mimo obrazovku a nevráti sa. Jeho zacyklenie nastavíš
        v nasledujúcej úlohe._"
      CSD U3 platform platform2: |-
        # Zacyklenie „sprite“ objektu „plošina“

        <img src="https://images.code.org/6bfe6dd078b2022315a7f54a38c90826-image-1476211068588.gif" style="float: right;">

        Momentálne sa tvoj „sprite“  pre plošinu pohybuje nadol ale nevráti sa na vrch obrazovky. V [Lekcii 15, úloha 13](/s/csd3-2017/stage/15/puzzle/13) si môžeš pozrieť príklad toho, ako sa „sprite“ presúva dookola po obrazovke

        # Urob toto

        -   Použi blok `function` na vytvorenie funkcie `loopPlatforms` v spodnej časti kódu.
        -   Použi výraz `if` vo vnútri tejto funkcie na kontrolu toho, či sa plošina dostala mimo spodnej časti obrazovky.
        -   Zavolaj funkciu vo vnútri cyklu kreslenia v sekcii „Update sprites“.
        -   Spusti kód a otestuj svoj „sprite“ objekt.

        _Nápoveda: Akú hodnotu bude mať `platform.y` v momente, keď sa „sprite“ objekt dostane mimo spodného okraja obrazovky? Akú hodnotu by malo mať `platform.y`, keď sa plošina znova zobrazí v hornej časti obrazovky?_
      CSD U3 platform platform2_2018: |-
        # Zacyklenie „sprite“ objektu „plošina“

        <img src="https://images.code.org/6bfe6dd078b2022315a7f54a38c90826-image-1476211068588.gif" style="float: right;">

        Momentálne sa tvoj „sprite“  pre plošinu pohybuje nadol ale nevráti sa na vrch obrazovky. V [Lekcii 15, úloha 13](/s/csd3-2018/stage/15/puzzle/13) si môžeš pozrieť príklad toho, ako sa „sprite“ presúva dookola po obrazovke

        # Urob toto

        -   Použi blok `function` na vytvorenie funkcie `loopPlatforms` v spodnej časti kódu.
        -   Použi výraz `if` vo vnútri tejto funkcie na kontrolu toho, či sa plošina dostala mimo spodnej časti obrazovky.
        -   Zavolaj funkciu vo vnútri cyklu kreslenia v sekcii „Update sprites“.
        -   Spusti kód a otestuj svoj „sprite“ objekt.

        _Nápoveda: Akú hodnotu bude mať `platform.y` v momente, keď sa „sprite“ objekt dostane mimo spodného okraja obrazovky? Akú hodnotu by malo mať `platform.y`, keď sa plošina znova zobrazí v hornej časti obrazovky?_
      CSD U3 platform platform2_2019: |-
        # Zacyklenie „sprite“ objektu „plošina“

        <img src="https://images.code.org/6bfe6dd078b2022315a7f54a38c90826-image-1476211068588.gif" style="float: right;">

        Momentálne sa tvoj „sprite“  pre plošinu pohybuje nadol ale nevráti sa na vrch obrazovky. V [Lekcii 15, úloha 13](../../15/puzzle/13) si môžeš pozrieť príklad toho, ako sa „sprite“ presúva dookola po obrazovke

        # Urob toto

        -   Použi blok `function` na vytvorenie funkcie `loopPlatforms` v spodnej časti kódu.
        -   Použi výraz `if` vo vnútri tejto funkcie na kontrolu toho, či sa plošina dostala mimo spodnej časti obrazovky.
        -   Zavolaj funkciu vo vnútri cyklu kreslenia v sekcii „Update sprites“.
        -   Spusti kód a otestuj svoj „sprite“ objekt.

        _Nápoveda: Akú hodnotu bude mať `platform.y` v momente, keď sa „sprite“ objekt dostane mimo spodného okraja obrazovky? Akú hodnotu by malo mať `platform.y`, keď sa plošina znova zobrazí v hornej časti obrazovky?_
      CSD U3 platform platform3: |-
        # Vytvorenie druhej plošiny

        <img src="https://images.code.org/94abf92949a82f6ba18a8cfafb9231b1-image-1476211447371.gif" style="float:right;">

        Vytvorenie druhej plošiny bude jednoduchšie, než vytvorenie tej prvej pretože môžeš skopírovať  veľkú časť už existujúceho kódu a potom v ňom spravíš len zopár malých zmien. Toto sa robí ľahšie v _textovom móde_.

        Budeš potrebovať skopírovať 2 časti tvojho kódu: časť na začiatku, kde vytvoríš plošinu, a potom časť v tvojej funkcii `loopPlatforms`, v ktorej svoju plošinu premiestňuješ späť na hornú časť obrazovky.

        # Urob toto

        -   Skopíruj kód použitý na vytvorenie prvého „sprite“ objektu „plošina“ (`createSprite`, `setAnimation` a `velocityY`) a vlož ho hneď pod pôvodný kód.
        -   Zmeň názvy „sprite“ objektu v novej časti kódu. Napríklad, ak sa pôvodný „sprite“ objekt nazýva „plošina“/„platform“, novú plošinu môžeš nazvať ako „platform2“.
        -   Zmeň začiatočnú pozíciu tvojej novej plošiny.
        -   Vo vnútri funkcie `loopPlatform`, skopíruj výraz `if` a potom ho vlož hneď pod pôvodný kód, stále v tej istej funkcii.
        -   Zmeň názov „sprite“ objektu v novom kóde.
        -   Spusti kód a otestuj ho.

        _Výzva: Plošiny sa pri zobrazení v hornej časti obrazovky môžu zobraziť na náhodnej pozícii x._
      CSD U3 platform platform3_2018: |-
        # Vytvorenie druhej plošiny

        <img src="https://images.code.org/94abf92949a82f6ba18a8cfafb9231b1-image-1476211447371.gif" style="float:right;">

        Vytvorenie druhej plošiny bude jednoduchšie, než vytvorenie tej prvej pretože môžeš skopírovať  veľkú časť už existujúceho kódu a potom v ňom spravíš len zopár malých zmien. Toto sa robí ľahšie v _textovom móde_.

        Budeš potrebovať skopírovať 2 časti tvojho kódu: časť na začiatku, kde vytvoríš plošinu, a potom časť v tvojej funkcii `loopPlatforms`, v ktorej svoju plošinu premiestňuješ späť na hornú časť obrazovky.

        # Urob toto

        -   Skopíruj kód použitý na vytvorenie prvého „sprite“ objektu „plošina“ (`createSprite`, `setAnimation` a `velocityY`) a vlož ho hneď pod pôvodný kód.
        -   Zmeň názvy „sprite“ objektu v novej časti kódu. Napríklad, ak sa pôvodný „sprite“ objekt nazýva „plošina“/„platform“, novú plošinu môžeš nazvať ako „platform2“.
        -   Zmeň začiatočnú pozíciu tvojej novej plošiny.
        -   Vo vnútri funkcie `loopPlatform`, skopíruj výraz `if` a potom ho vlož hneď pod pôvodný kód, stále v tej istej funkcii.
        -   Zmeň názov „sprite“ objektu v novom kóde.
        -   Spusti kód a otestuj ho.

        _Výzva: Plošiny sa pri zobrazení v hornej časti obrazovky môžu zobraziť na náhodnej pozícii x._
      CSD U3 platform platform3_2019: |-
        # Vytvorenie druhej plošiny

        <img src="https://images.code.org/94abf92949a82f6ba18a8cfafb9231b1-image-1476211447371.gif" style="float:right;">

        Vytvorenie druhej plošiny bude jednoduchšie, než vytvorenie tej prvej pretože môžeš skopírovať  veľkú časť už existujúceho kódu a potom v ňom spravíš len zopár malých zmien. Toto sa robí ľahšie v _textovom móde_.

        Budeš potrebovať skopírovať 2 časti tvojho kódu: časť na začiatku, kde vytvoríš plošinu, a potom časť v tvojej funkcii `loopPlatforms`, v ktorej svoju plošinu premiestňuješ späť na hornú časť obrazovky.

        # Urob toto

        -   Skopíruj kód použitý na vytvorenie prvého „sprite“ objektu „plošina“ (`createSprite`, `setAnimation` a `velocityY`) a vlož ho hneď pod pôvodný kód.
        -   Zmeň názvy „sprite“ objektu v novej časti kódu. Napríklad, ak sa pôvodný „sprite“ objekt nazýva „plošina“/„platform“, novú plošinu môžeš nazvať ako „platform2“.
        -   Zmeň začiatočnú pozíciu tvojej novej plošiny.
        -   Vo vnútri funkcie `loopPlatform`, skopíruj výraz `if` a potom ho vlož hneď pod pôvodný kód, stále v tej istej funkcii.
        -   Zmeň názov „sprite“ objektu v novom kóde.
        -   Spusti kód a otestuj ho.

        _Výzva: Plošiny sa pri zobrazení v hornej časti obrazovky môžu zobraziť na náhodnej pozícii x._
      CSD U3 platform player1: |-
        # Vytvor hráča

        <img src="https://images.code.org/8358b8d2eef2461e113e0b3093da7403-image-1476212944204.gif" style="float:right">

        Konečne si môžeš vytvoriť svojho hráča. Tak, ako „sprite“ objekty predmetov, aj tvoj hráč spadne zhora. Na rozdiel od predmetov tvoj hráč počas pádu zrýchľuje, tak ako zrýchľujú predmety v skutočnosti. Toto mu umožní vyskakovať a znova spadnúť.

        # Urob toto

        -   Použi blok `createSprite` na vytvorenie „sprite“ objektu hráča s nápisom a štartovacou pozíciou určenou v pláne projektu.
        -   Použi `setAnimation` na nastavenie správneho obrázku.
        -   Vytvor funkciu `playerFall` , ktorá zabezpečí, že „sprite“ objekt „hráč“ spadne z hornej časti obrazovky. Kód vo vnútri funkcie by mal použiť `velocityY` spolu s kódom pre počítanie podobne, ako sme použili pri padajúcom kameni v [Lekcii 17, úlohe 4](/s/csd3-2017/stage/17/puzzle/4).
        -   Zavolaj funkciu `playerFall` vo vnútri cyklu kreslenia.
        -   Spusti kód a otestuj svojho hráča.
      CSD U3 platform player1_2018: |-
        # Vytvor hráča

        <img src="https://images.code.org/8358b8d2eef2461e113e0b3093da7403-image-1476212944204.gif" style="float:right">

        Konečne si môžeš vytvoriť svojho hráča. Tak, ako „sprite“ objekty predmetov, aj tvoj hráč spadne zhora. Na rozdiel od predmetov tvoj hráč počas pádu zrýchľuje, tak ako zrýchľujú predmety v skutočnosti. Toto mu umožní vyskakovať a znova spadnúť.

        # Urob toto

        -   Použi blok `createSprite` na vytvorenie „sprite“ objektu hráča s nápisom a štartovacou pozíciou určenou v pláne projektu.
        -   Použi `setAnimation` na nastavenie správneho obrázku.
        -   Vytvor funkciu `playerFall` , ktorá zabezpečí, že „sprite“ objekt „hráč“ spadne z hornej časti obrazovky. Kód vo vnútri funkcie by mal použiť `velocityY` spolu s kódom pre počítanie podobne, ako sme použili pri padajúcom kameni v [Lekcii 17, úlohe 4](/s/csd3-2018/stage/17/puzzle/4).
        -   Zavolaj funkciu `playerFall` vo vnútri cyklu kreslenia.
        -   Spusti kód a otestuj svojho hráča.
      CSD U3 platform player1_2019: |-
        # Vytvor hráča

        <img src="https://images.code.org/8358b8d2eef2461e113e0b3093da7403-image-1476212944204.gif" style="float:right">

        Konečne si môžeš vytvoriť svojho hráča. Tak, ako „sprite“ objekty predmetov, aj tvoj hráč spadne zhora. Na rozdiel od predmetov tvoj hráč počas pádu zrýchľuje, tak ako zrýchľujú predmety v skutočnosti. Toto mu umožní vyskakovať a znova spadnúť.

        # Urob toto

        -   Použi blok `createSprite` na vytvorenie „sprite“ objektu hráča s nápisom a štartovacou pozíciou určenou v pláne projektu.
        -   Použi `setAnimation` na nastavenie správneho obrázku.
        -   Vytvor funkciu `playerFall` , ktorá zabezpečí, že „sprite“ objekt „hráč“ spadne z hornej časti obrazovky. Kód vo vnútri funkcie by mal použiť `velocityY` spolu s kódom pre počítanie podobne, ako sme použili pri padajúcom kameni v [Lekcii 17, úlohe 4](../../17/puzzle/4).
        -   Zavolaj funkciu `playerFall` vo vnútri cyklu kreslenia.
        -   Spusti kód a otestuj svojho hráča.
      CSD U3 platform player2: |-
        # Používateľské rozhranie

        V tejto úlohe pridaj ovládanie, ktorým hráč určí pohyb postavičky po obrazovke. Postavička sa musí vedieť pohybovať doľava po stlačení šípky doľava, doprava po stlačení šípky doprava a vyskočiť po stlačení medzerníka.

        # Urob toto

        -   Vytvor novú funkciu `controlPlayer` v časti „funkcie“ tvojho kódu.
        -   Vo vnútri funkcie `controlPlayer` použi bloky `if`, `keyDown` a `sprite.x` pre pohyb tvojej postavy doľava a doprava pomocou klávesových šipok. Príklady nájdeš tu:  <a href="/s/csd3-2017/stage/12/puzzle/7" target="_blank"> Lekcia 12, úloha 7 </a>
        -   Vo vnútri funkcie `controlPlayer` použi bloky `if`, `keyDown` a `velocityY` tak, aby postavička vyskočila vždy, keď sa stlačí šípka smerom nahor. Príklady nájdeš tu:  <a href="/s/csd3-2017/stage/15/puzzle/11" target="_blank"> Lekcia 15, úloha 11</a>.
        -   Zavolaj funkciu `controlPlayer` vo vnútri cyklu kreslenia.
        -   Spusti hru a otestuj svoj kód.
      CSD U3 platform player2_2018: |-
        # Používateľské rozhranie

        V tejto úlohe pridaj ovládanie, ktorým hráč určí pohyb postavičky po obrazovke. Postavička sa musí vedieť pohybovať doľava po stlačení šípky doľava, doprava po stlačení šípky doprava a vyskočiť po stlačení klávesy medzerníka.

        # Urob toto

        -   Vytvor novú funkciu `controlPlayer` v časti „funkcie“ tvojho kódu.
        -   Vo vnútri funkcie `controlPlayer` použi bloky `if`, `keyDown` a `sprite.x` pre pohyb tvojej postavy doľava a doprava pomocou klávesových šipok. Príklady nájdeš tu: <a href="/s/csd3-2018/stage/12/puzzle/7" target="_blank"> Lesson 12 Puzzle 7 </a>
        -   Vo vnútri funkcie `controlPlayer` použi bloky `if`, `keyDown` a `velocityY` tak, aby postavička vyskočila vždy, keď sa stlačí šípka smerom nahor. Príklady nájdeš tu:  <a href="/s/csd3-2018/stage/15/puzzle/11" target="_blank"> Lesson 15 Puzzle 11</a>
        -   Zavolaj funkciu `controlPlayer` vo vnútri cyklu kreslenia.
        -   Spusti hru a otestuj svoj kód.
      CSD U3 platform player2_2019: |-
        # Používateľské rozhranie

        V tejto úlohe pridaj ovládanie, ktorým hráč určí pohyb postavičky po obrazovke. Postavička sa musí vedieť pohybovať doľava po stlačení šípky doľava, doprava po stlačení šípky doprava a vyskočiť po stlačení medzerníka.

        # Urob toto

        -   Vytvor novú funkciu `controlPlayer` v časti „funkcie“ tvojho kódu.
        -   Vo vnútri funkcie `controlPlayer` použi bloky `if`, `keyDown` a `sprite.x` pre pohyb tvojej postavy doľava a doprava pomocou klávesových šipok. Príklady nájdeš tu:   <a href="../../12/puzzle/7" target="_blank"> Lekcia 12, úloha 7 </a>.
        -   Vo vnútri funkcie `controlPlayer` použi<a href="../../15/puzzle/11" target="_blank"> bloky `if`, `keyDown` a `velocityY` tak, aby postavička vyskočila vždy, keď sa stlačí šípka smerom nahor. Príklady nájdeš tu:   <a href="../../12/puzzle/7" target="_blank"> Lekcia 15, úloha 11</a>.
        -   Zavolaj funkciu `controlPlayer` vo vnútri cyklu kreslenia.
        -   Spusti hru a otestuj svoj kód.
      CSD U3 platform player3: |-
        # Interakcie hráča

        Poslednou časťou tvorby hry je naprogramovanie interakcií hráča s ostatnými „sprite“ objektami. Najprv musí hráč pristáť na plošine.

        # Urob toto

        -   Vytvor funkciu `playerLands` a pridaj ju do časti „funkcie“ tvojho kódu.
        -   Do vnútra funkcie pridaj blok `collide` tak, aby tvoja postavička vedela pristáť na obidvoch plošinách.
        -   Zavolaj funkciu vo vnútri cyklu kreslenia.
        -   Spusti hru a otestuj svoj kód.
      CSD U3 platform player3_2018: |-
        # Interakcie hráča

        Poslednou časťou tvorby hry je naprogramovanie interakcií hráča s ostatnými „sprite“ objektami. Najprv musí hráč pristáť na plošine.

        # Urob toto

        -   Vytvor funkciu `playerLands` a pridaj ju do časti „funkcie“ tvojho kódu.
        -   Do vnútra funkcie pridaj blok `collide` tak, aby tvoja postavička vedela pristáť na obidvoch plošinách.
        -   Zavolaj funkciu vo vnútri cyklu kreslenia.
        -   Spusti hru a otestuj svoj kód.
      CSD U3 platform player3_2019: |-
        # Interakcie hráča

        Poslednou časťou tvorby hry je naprogramovanie interakcií hráča s ostatnými „sprite“ objektami. Najprv musí hráč pristáť na plošine.

        # Urob toto

        -   Vytvor funkciu `playerLands` a pridaj ju do časti „funkcie“ tvojho kódu.
        -   Do vnútra funkcie pridaj blok `collide` tak, aby tvoja postavička vedela pristáť na obidvoch plošinách.
        -   Zavolaj funkciu vo vnútri cyklu kreslenia.
        -   Spusti hru a otestuj svoj kód.
      CSD U3 platform player4: "# Zbieranie predmetov\n\nAko poslednú vec chceš, aby
        tvoja postavička zbierala predmety padajúce zhora z obrazovky\n\n# Urob toto\n\n-
        \  Vytvor funkciu `collectItems` a pridaj ju do časti „funkcie“ v tvojom kóde.\n-
        \  Pridaj bloky `if` a `isTouching` na zmenu pozície x a y predmetov, keď
        sa ich hráč dotkne. Ak potrebuješ návod, ako obnoviť pozíciu predmetu, pozri
        sa do funkcie `loopItem`.\n-   Dovnútra výrazu `if` pridaj počítadlo skóre,
        ktoré sa bude zvyšovať zakaždým, keď sa hráč dotkne predmetu. Príklad nájdeš
        v [Lekcii 16, úloha 9](/s/csd3-2017/stage/16/puzzle/9) \n-   Zavolaj funkciu
        vo vnútri cyklu kreslenia, v časti kódu „update sprites“.\n-   Spusti hru
        a otestuj svoj kód."
      CSD U3 platform player4_2018: "# Zbieranie predmetov\n\nAko poslednú vec chceš,
        aby tvoja postavička zbierala predmety padajúce zhora z obrazovky\n\n# Urob
        toto\n\n-   Vytvor funkciu `collectItems` a pridaj ju do časti „funkcie“ v
        tvojom kóde.\n-   Pridaj bloky `if` a `isTouching` na zmenu pozície x a y
        predmetov, keď sa ich hráč dotkne. Ak potrebuješ návod, ako obnoviť pozíciu
        predmetu, pozri sa do funkcie `loopItem`.\n-   Dovnútra výrazu `if` pridaj
        počítadlo skóre, ktoré sa bude zvyšovať zakaždým, keď sa hráč dotkne predmetu.
        Príklad nájdeš v [Lekcii 16, úloha 9](/s/csd3-2018/stage/16/puzzle/9) \n-
        \  Zavolaj funkciu vo vnútri cyklu kreslenia, v časti kódu „update sprites“.\n-
        \  Spusti hru a otestuj svoj kód."
      CSD U3 platform player4_2019: "# Zbieranie predmetov\n\nAko poslednú vec chceš,
        aby tvoja postavička zbierala predmety padajúce zhora z obrazovky\n\n# Urob
        toto\n\n-   Vytvor funkciu `collectItems` a pridaj ju do časti „funkcie“ v
        tvojom kóde.\n-   Pridaj bloky `if` a `isTouching` na zmenu pozície x a y
        predmetov, keď sa ich hráč dotkne. Ak potrebuješ návod, ako obnoviť pozíciu
        predmetu, pozri sa do funkcie `loopItem`.\n-   Dovnútra výrazu `if` pridaj
        počítadlo skóre, ktoré sa bude zvyšovať zakaždým, keď sa hráč dotkne predmetu.
        Príklad nájdeš v [Lekcii 16, úloha 9](../../16/puzzle/9) \n-   Zavolaj funkciu
        vo vnútri cyklu kreslenia, v časti kódu „update sprites“.\n-   Spusti hru
        a otestuj svoj kód."
      CSD U3 platform sample1: |-
        # Plošinová skákacia hra

        Hra naľavo je vzorovou plošinovou skákacou hrou. Stlač „Spustiť“ a vyskúšaj si ju. S mimozemšťanom môžeš skákať pomocou šípky hore a pohybovať sa s ním doľava a doprava pomocou šípiek. Body získaš zbieraním hviezd a ak dosiahneš dostatočne vysoké skóre, tak sa zmení pozadie.

        Všetky bloky potrebné pre vytvorenie takejto hry už poznáš a vieš ich použiť, takže v tejto lekcii si naprogramuješ svoju vlastnú plošinovú skákaciu hru.
      CSD U3 platform sample1_2018: |-
        # Plošinová skákacia hra

        Hra naľavo je vzorovou plošinovou skákacou hrou. Stlač „Spustiť“ a vyskúšaj si ju. S mimozemšťanom môžeš skákať pomocou šípky hore a pohybovať sa s ním doľava a doprava pomocou šípiek. Body získaš zbieraním hviezd a ak dosiahneš dostatočne vysoké skóre, tak sa zmení pozadie.

        Všetky bloky potrebné pre vytvorenie takejto hry už poznáš a vieš ich použiť, takže v tejto lekcii si naprogramuješ svoju vlastnú plošinovú skákaciu hru.
      CSD U3 platform sample1_2019: |-
        # Plošinová skákacia hra

        Hra naľavo je vzorovou plošinovou skákacou hrou. Stlač „Spustiť“ a vyskúšaj si ju. S mimozemšťanom môžeš skákať pomocou šípky hore a pohybovať sa s ním doľava a doprava pomocou šípiek. Body získaš zbieraním hviezd a ak dosiahneš dostatočne vysoké skóre, tak sa zmení pozadie.

        Všetky bloky potrebné pre vytvorenie takejto hry už poznáš a vieš ich použiť, takže v tejto lekcii si naprogramuješ svoju vlastnú plošinovú skákaciu hru.
      CSD U3 platform sample2: |-
        # Lietadlový skokan

        Tu máme ďalší príklad plošinovej hry, akurát s viac parametrami. Túto hru môžeš použiť ako inšpiráciu pre svoju vlastnú. Nájdeš tu napríklad „sprite“ objekt „minca“, ktorá pridáva život.

        Vyber si jeden, alebo viac návrhov na vylepšenie hry:

        -   Pre svoju postavičku, plošinu alebo predmety použi novú animáciu.
        -   Zamedz postavičke pohnúť sa mimo obrazovky, a to doľava i doprava.
        -   Pridaj  predmet, ktorý má hráč zbierať alebo ktorému sa má vyhnúť.
        -   Pridaj premennú, ktorá bude hráčovi rátať počet životov a hru zastaví, ak sa mu životy minú.
      CSD U3 platform sample2_2018: |-
        # Lietadlový skokan

        Tu máme ďalší príklad plošinovej hry, akurát s viac parametrami. Túto hru môžeš použiť ako inšpiráciu pre svoju vlastnú. Nájdeš tu napríklad „sprite“ objekt „minca“, ktorá pridáva život.

        Vyber si jeden, alebo viac návrhov na vylepšenie hry:

        -   Pre svoju postavičku, plošinu alebo predmety použi novú animáciu.
        -   Zamedz postavičke pohnúť sa mimo obrazovky, a to doľava i doprava.
        -   Pridaj  predmet, ktorý má hráč zbierať alebo ktorému sa má vyhnúť.
        -   Pridaj premennú, ktorá bude hráčovi rátať počet životov a hru zastaví, ak sa mu životy minú.
      CSD U3 platform sample2_2019: |-
        # Lietadlový skokan

        Tu máme ďalší príklad plošinovej hry, akurát s viac parametrami. Túto hru môžeš použiť ako inšpiráciu pre svoju vlastnú. Nájdeš tu napríklad „sprite“ objekt „minca“, ktorá pridáva život.

        Vyber si jeden, alebo viac návrhov na vylepšenie hry:

        -   Pre svoju postavičku, plošinu alebo predmety použi novú animáciu.
        -   Zamedz postavičke pohnúť sa mimo obrazovky, a to doľava i doprava.
        -   Pridaj  predmet, ktorý má hráč zbierať alebo ktorému sa má vyhnúť.
        -   Pridaj premennú, ktorá bude hráčovi rátať počet životov a hru zastaví, ak sa mu životy minú.
      CSD U3 platform sample3: "# Skákajúci zajačik\n\nTu máme ďalší príklad skákacej
        hry. V tejto hre predmety počas pádu zrýchľujú a odrážajú sa od plošín.\n\nVyber
        si jeden, alebo viac návrhov na vylepšenie tvojej hry: \n\n-   Otoč hráča
        tak, aby sa vždy pozeral smerom, ktorým ide. \n-   Pridaj ďaľšie pozadie,
        ktoré sa zobrazí po dosiahnutí ešte vyššieho skóre. \n-   Keď sa predmety
        dotknú plošín, niečo sa stane."
      CSD U3 platform sample3_2018: "# Skákajúci zajačik\n\nTu máme ďalší príklad
        skákacej hry. V tejto hre predmety počas pádu zrýchľujú a odrážajú sa od plošín.\n\nVyber
        si jeden, alebo viac návrhov na vylepšenie tvojej hry: \n\n-   Otoč hráča
        tak, aby sa vždy pozeral smerom, ktorým ide. \n-   Pridaj ďaľšie pozadie,
        ktoré sa zobrazí po dosiahnutí ešte vyššieho skóre. \n-   Keď sa predmety
        dotknú plošín, niečo sa stane."
      CSD U3 platform sample3_2019: "# Skákajúci zajačik\n\nTu máme ďalší príklad
        skákacej hry. V tejto hre predmety počas pádu zrýchľujú a odrážajú sa od plošín.\n\nVyber
        si jeden, alebo viac návrhov na vylepšenie tvojej hry: \n\n-   Otoč hráča
        tak, aby sa vždy pozeral smerom, ktorým ide. \n-   Pridaj ďaľšie pozadie,
        ktoré sa zobrazí po dosiahnutí ešte vyššieho skóre. \n-   Keď sa predmety
        dotknú plošín, niečo sa stane."
      CSD U3 platform scoreboard: "# Zobrazenie skóre v hre\n\n<img src=\"https://images.code.org/ea490a1915a70676fd3a783adce93cdd-image-1476142534609.png\"
        style=\"float:right;\">\n\nSkóre určite potrebuješ vo svojej hre zobraziť.
        Funkcia `showScore` už je napísaná, ale zobrazuje len text „Score“ a nie samotnú
        hodnotu skóre. ([Show me where](#triggercallout=code_triggered)) Príklad fungujúceho
        zobrazenia skóre nájdeš v [Lekcii 16, úlohe 9](/s/csd3-2017/stage/16/puzzle/9).\n\n#
        Urob toto\n\n-   Prečítaj si kód vo funkcii `showScore`.\n-   Zavolaj funkciu
        vo vnútri cyklu kreslenia hneď po nakreslení pozadia.\n-   Použi blok `text`
        na zobrazenie skóre v hornej časti obrazovky.\n\nTeraz, keď už máš nakreslené
        pozadie a zadefinované premenné, je načase vytvoriť objekty \"sprite\". Väčšinou
        býva najjednoduchšie začať tými, ktoré sú súčasťou prostredia, ako napríklad
        plošiny. "
      CSD U3 platform scoreboard_2018: "# Zobrazenie skóre v hre\n\n<img src=\"https://images.code.org/ea490a1915a70676fd3a783adce93cdd-image-1476142534609.png\"
        style=\"float:right;\">\n\nSkóre určite potrebuješ vo svojej hre zobraziť.
        Funkcia `showScore` už je napísaná, ale zobrazuje len text „Score“ a nie samotnú
        hodnotu skóre. ([Show me where](#triggercallout=code_triggered)) Príklad fungujúceho
        zobrazenia skóre nájdeš v [Lekcii 16, úlohe 9](../../16/puzzle/9).\n\n# Urob
        toto\n\n-   Prečítaj si kód vo funkcii `showScore`.\n-   Zavolaj funkciu vo
        vnútri cyklu kreslenia hneď po nakreslení pozadia.\n-   Použi blok `text`
        na zobrazenie skóre v hornej časti obrazovky.\n\nTeraz, keď už máš nakreslené
        pozadie a zadefinované premenné, je načase vytvoriť objekty \"sprite\". Väčšinou
        býva najjednoduchšie začať tými, ktoré sú súčasťou prostredia, ako napríklad
        plošiny. "
      CSD U3 platform scoreboard_2019: "# Zobrazenie skóre v hre\n\n<img src=\"https://images.code.org/ea490a1915a70676fd3a783adce93cdd-image-1476142534609.png\"
        style=\"float:right;\">\n\nSkóre určite potrebuješ vo svojej hre zobraziť.
        Funkcia `showScore` už je napísaná, ale zobrazuje len text „Score“ a nie samotnú
        hodnotu skóre. ([Show me where](#triggercallout=code_triggered)) Príklad fungujúceho
        zobrazenia skóre nájdeš v [Lekcii 16, úlohe 9](../../16/puzzle/9).\n\n# Urob
        toto\n\n-   Prečítaj si kód vo funkcii `showScore`.\n-   Zavolaj funkciu vo
        vnútri cyklu kreslenia hneď po nakreslení pozadia.\n-   Použi blok `text`
        na zobrazenie skóre v hornej časti obrazovky.\n\nTeraz, keď už máš nakreslené
        pozadie a zadefinované premenné, je načase vytvoriť objekty \"sprite\". Väčšinou
        býva najjednoduchšie začať tými, ktoré sú súčasťou prostredia, ako napríklad
        plošiny. "
      CSD U3 platform variable1: |-
        # Premenná „skóre“

        Keď už máš vytvorené pozadia, musíš si vybrať, kedy sa ktoré z nich zobrazí. Pre toto potrebuješ premennú, v ktorej budeš ukladať aktuálne skore hráča.
        Premennej priraď hodnotu už na samotnom začiatku programu. Takto bude premenná k dispozícií kedykoľvek po jej definovaní.

        # Urob toto

        -   Vytvor premennú na začiatku svojho programu. ( [Show me the block](#triggercallout=callout) )
        -   Nastav skóre na 0.
      CSD U3 platform variable1_2018: |-
        # Premenná „skóre“

        Keď už máš vytvorené pozadia, musíš si vybrať, kedy sa ktoré z nich zobrazí. Pre toto potrebuješ premennú, v ktorej budeš ukladať aktuálne skore hráča.
        Premennej priraď hodnotu už na samotnom začiatku programu. Takto bude premenná k dispozícií kedykoľvek po jej definovaní.

        # Urob toto

        -   Vytvor premennú na začiatku svojho programu. ( [Show me the block](#triggercallout=callout) )
        -   Nastav skóre na 0.
      CSD U3 platform variable1_2019: |-
        # Premenná „skóre“

        Keď už máš vytvorené pozadia, musíš si vybrať, kedy sa ktoré z nich zobrazí. Pre toto potrebuješ premennú, v ktorej budeš ukladať aktuálne skore hráča.
        Premennej priraď hodnotu už na samotnom začiatku programu. Takto bude premenná k dispozícií kedykoľvek po jej definovaní.

        # Urob toto

        -   Vytvor premennú na začiatku svojho programu. ( [Show me the block](#triggercallout=callout) )
        -   Nastav skóre na 0.
      CSD U3 rect: "# Explore Game Lab\n\nWelcome to Game Lab, where you can create
        interactive animations and games!   \n\nYou've already practiced the basics
        of putting shapes on a grid.  In Game Lab, you'll do the same with the display
        area on the left.\n\n# Do This\n\n-   Look at the line of code in the workspace
        below these instructions ( [Show me where](#triggercallout=block_trigger)
        ) and discuss with your partner where you think the shape will be drawn on
        the grid.\n-   Click <img src=\"https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20
        PM.png\" width=100> to run the program and see what happens. ( [Show me where](#triggercallout=run_trigger)
        )\n-   Change the numbers inside the block, then try running the program again.\n-
        \  Try to place the rectangle near the bottom right of the screen."
      CSD U3 rect_2018: |-
        # Preskúmaj Game Lab

        Vitaj v Game Labe, kde môžeš vytvárať interaktívne animácie a hry!
        Už si si precvičil/a základy vytvárania tvarov v mriežke. V Game Labe budeš robiť to isté v ľavej časti obrazovky.

        # Urob toto

        -   Pozri sa na riadok kódu na pracovnej ploche pod týmito pokynmi ([Ukáž mi kde](#triggercallout=block_trigger)) a so svojím kamarátom porozmýšľajte, kde v mriežke bude asi nakreslený tvar.
        -   Kliknutím na tlačidlo <img src="https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20 PM.png" width=100> spusti program a sleduj, čo sa stane.
        -   Zmeň čísla vnútri bloku a program spusti znova.
        -   Skús umiestniť obdĺžnik do pravého dolného rohu obrazovky.
      CSD U3 rect_2019: |-
        # Preskúmaj Game Lab

        Vitaj v Game Labe, kde môžeš vytvárať interaktívne animácie a hry!
        Už si si precvičil/a základy vytvárania tvarov v mriežke. V Game Labe budeš robiť to isté v ľavej časti obrazovky.

        # Urob toto

        -   Pozri sa na riadok kódu na pracovnej ploche pod týmito pokynmi ([Ukáž mi kde](#triggercallout=block_trigger)) a so svojím kamarátom porozmýšľajte, kde v mriežke bude asi nakreslený tvar.
        -   Kliknutím na tlačidlo <img src="https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20 PM.png" width=100> spusti program a sleduj, čo sa stane.
        -   Zmeň čísla vnútri bloku a program spusti znova.
        -   Skús umiestniť obdĺžnik do pravého dolného rohu obrazovky.
      CSD U3 sequence: |-
        <img src="https://images.code.org/30d68fb30db5b61187f104f46292e052-image-1493060980724.08.05 PM.png" style="float:right">

        # Order Matters

        In Game Lab, it matters what order your code is in.  New shapes are drawn on top of the ones that came before, covering up the shapes that are drawn first.  You can see the difference when you use more than one color in your code.

        # Do This

        -   Look at the code that draws the two rectangles.  The first is drawn red, and the second is drawn blue.
        -   Change the red rectangle's color to green.
        -   Change the order of the code so the green rectangle appears on top.
      CSD U3 sequence_2018: |-
        <img src="https://images.code.org/30d68fb30db5b61187f104f46292e052-image-1493060980724.08.05 PM.png" style="float:right">

        # Order Matters

        In Game Lab, it matters what order your code is in.  New shapes are drawn on top of the ones that came before, covering up the shapes that are drawn first.  You can see the difference when you use more than one color in your code.

        # Do This

        -   Look at the code that draws the two rectangles.  The first is drawn red, and the second is drawn blue.
        -   Change the red rectangle's color to green.
        -   Change the order of the code so the green rectangle appears on top.
      CSD U3 sequence_2019: |-
        <img src="https://images.code.org/30d68fb30db5b61187f104f46292e052-image-1493060980724.08.05 PM.png" style="float:right">

        # Order Matters

        In Game Lab, it matters what order your code is in.  New shapes are drawn on top of the ones that came before, covering up the shapes that are drawn first.  You can see the difference when you use more than one color in your code.

        # Do This

        -   Look at the code that draws the two rectangles.  The first is drawn red, and the second is drawn blue.
        -   Change the red rectangle's color to green.
        -   Change the order of the code so the green rectangle appears on top.
      CSD U4 - Design Mode Input Widgets: |-
        # Input Elements

        <img src="https://images.code.org/108fcc6fc89bf88edde00353afb33d75-image-1469814642375.49.23.png" style="float: right; width: 150px"/>

        Buttons are a great way to navigate around your app, and text labels are the primary way to display content in your app. When it comes to taking input from your users, sometimes you need a place for them to type or boxes to check. The **Text Input**, **Dropdown**, **Radio Button**, and **Checkbox** elements all provide ways for your users to input information to your app.

        # Do This

        Choose at least two of the input elements, and for each one:

        -   Drag it out and position it on the screen
        -   Change the id to something meaningful
        -   Read through the properties and experiment with them
        -   Add a label element next to each that describes what they do (don't forget to give it an id too!)
      CSD U4 - Design Mode Project: |-
        # Mocking Up Your App

        Using your paper prototype, create a digital version of your screen using the Design Mode elements you've learned about.

        # Do This

        -   Rename the screen to match your _namespace_.
        -   Use the built-in elements to lay out your app screen, giving each a proper ID
            -   For example, if your namespace is "home\_" you might create IDs like:
                -   `home_title`
                -   `home_login_button`
                -   `home_logo`
        -   For any components of your app that can't be recreated with the built in elements you can either:
            -   Redesign to utilize built in elements
            -   Find an image to use in place of your element
            -   Draw the element using your preferred image editor
        -   Share your design regularly with your teammates to ensure consistent style
      CSD U4 - Design Mode Project_2018: |-
        # Mocking Up Your App

        Using your paper prototype, create a digital version of your screen using the Design Mode elements you've learned about.

        # Do This

        -   Rename the screen to match your _namespace_.
        -   Use the built-in elements to lay out your app screen, giving each a proper ID
            -   For example, if your namespace is `home_` you might create IDs like:
                -   `home_title`
                -   `home_login_button`
                -   `home_logo`
        -   For any components of your app that can't be recreated with the built in elements you can either:
            -   Redesign to utilize built in elements
            -   Find an image to use in place of your element
            -   Draw the element using your preferred image editor
        -   Make sure that you and your teammates are regularly looking at each other's designs to ensure consistent style
      CSD U4 - Design Mode Project_2019: |-
        # Mocking Up Your App

        Using your paper prototype, create a digital version of your screen using the Design Mode elements you've learned about.

        # Do This

        -   Rename the screen to match your _namespace_.
        -   Use the built-in elements to lay out your app screen, giving each a proper ID
            -   For example, if your namespace is `home_` you might create IDs like:
                -   `home_title`
                -   `home_login_button`
                -   `home_logo`
        -   For any components of your app that can't be recreated with the built in elements you can either:
            -   Redesign to utilize built in elements
            -   Find an image to use in place of your element
            -   Draw the element using your preferred image editor
        -   Make sure that you and your teammates are regularly looking at each other's designs to ensure consistent style
      CSD U4 - Design Mode Text: "# Adding Text\n\n<img src=\"https://images.code.org/86ba633e04f90f3ca47dff3dcd064847-image-1469812708683.15.36.png\"
        style=\"float: right; width: 75px\"/>\nThe label element lets you add any
        text you'd like to your app. Just drag out a label block and set its \"text\"
        property. \n\n# Do This\n\nUse a label element to create a title for this
        app.\n\n-   Drag out a label and place it on the top of the screen\n-   Change
        the id to \"titleLabel\"\n-   Change the text to \"My App\"\n-   Increase
        the font size\n-   Choose a color you like for the title"
      CSD U5 Amazon Data Video: Watch this video to learn how this problem is solved
        by Amazon. As you watch think about what data is being collected and where
        it's coming from.
      CSD U5 Amazon Data Video_2018: Watch this video to learn how this problem is
        solved by Amazon. As you watch think about what data is being collected and
        where it's coming from.
      CSD U5 Amazon Data Video_2019: Watch this video to learn how this problem is
        solved by Amazon. As you watch think about what data is being collected and
        where it's coming from.
      CSD U5 Netflix Data Video: Watch this video to learn how this problem is solved
        by Netflix. As you watch think about what data is being collected and where
        it's coming from.
      CSD U5 Netflix Data Video_2018: Watch this video to learn how this problem is
        solved by Netflix. As you watch think about what data is being collected and
        where it's coming from.
      CSD U5 Netflix Data Video_2019: Watch this video to learn how this problem is
        solved by Netflix. As you watch think about what data is being collected and
        where it's coming from.
      CSD U5 Pizza: |-
        # Pizza Party

        The pizza party data has been put into an app for you, and the answers from another class have been added.  Because this is an app, we can automate the creation of the bar chart from the given data.

        # Do This

        -   Click "Run" to see the list of answers that the classes have given.
        -   Discuss with a partner what you think the chart of this data will look like.
        -   Click "Show Chart" to see for yourself.

        # Spreadsheet Version

        The pizza party data has also been put into a spreadsheet for you, if you would like to use it instead.  To use the spreadsheet, you'll need to make your own copy of it.

        -   This link will make you your own copy of the "Pizza Topping Choices" data: [Pizza Topping Choices](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/copy)
        -   You can also download a CSV version of the file [here](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/export?format=csv).
      CSD U5 Pizza 2: |-
        # Pizza Party

        When people work with data, they know to leave off answers that don't make sense, and that some answers, such as "peppers", "pepppers" and "green peppers", actually meant the same thing. Computers don't know how to do this, so we have to clean the data before the computer is able to use it.

        This version of the app has a second column for data to be cleaned.

        ## Do this

        -   Click "Run" to see the new list of answers to be cleaned.
        -   Click on each answer that needs to be cleaned and correct it so that the computer will chart it properly. (You may want to delete some answers entirely.)
        -   When you are finished, click "Show Chart" to see the new chart of cleaned answers.
      CSD U5 Pizza 2_2018: |-
        # Pizza Party

        When people work with data, they know to leave off answers that don't make sense, and that some answers, such as "peppers", "pepppers" and "green peppers", actually meant the same thing. Computers don't know how to do this, so we have to clean the data before the computer is able to use it.

        This version of the app has a second column for data to be cleaned.

        ## Do this

        -   Click "Run" to see the new list of answers to be cleaned.
        -   Click on each answer that needs to be cleaned and correct it so that the computer will chart it properly. (You may want to delete some answers entirely.)
        -   When you are finished, click "Show Chart" to see the new chart of cleaned answers.
      CSD U5 Pizza 2_2019: |-
        # Pizza Party

        When people work with data, they know to leave off answers that don't make sense, and that some answers, such as "peppers", "pepppers" and "green peppers", actually meant the same thing. Computers don't know how to do this, so we have to clean the data before the computer is able to use it.

        This version of the app has a second column for data to be cleaned.

        ## Do this

        -   Click "Run" to see the new list of answers to be cleaned.
        -   Click on each answer that needs to be cleaned and correct it so that the computer will chart it properly. (You may want to delete some answers entirely.)
        -   When you are finished, click "Show Chart" to see the new chart of cleaned answers.
      CSD U5 Pizza_2018: |-
        # Pizza Party

        The pizza party data has been put into an app for you, and the answers from another class have been added.  Because this is an app, we can automate the creation of the bar chart from the given data.

        # Do This

        -   Click "Run" to see the list of answers that the classes have given.
        -   Discuss with a partner what you think the chart of this data will look like.
        -   Click "Show Chart" to see for yourself.

        # Spreadsheet Version

        The pizza party data has also been put into a spreadsheet for you, if you would like to use it instead.  To use the spreadsheet, you'll need to make your own copy of it.

        -   This link will make you your own copy of the "Pizza Topping Choices" data: [Pizza Topping Choices](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/copy)
        -   You can also download a CSV version of the file [here](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/export?format=csv).
      CSD U5 Pizza_2019: |-
        # Pizza Party

        The pizza party data has been put into an app for you, and the answers from another class have been added.  Because this is an app, we can automate the creation of the bar chart from the given data.

        # Do This

        -   Click "Run" to see the list of answers that the classes have given.
        -   Discuss with a partner what you think the chart of this data will look like.
        -   Click "Show Chart" to see for yourself.

        # Spreadsheet Version

        The pizza party data has also been put into a spreadsheet for you, if you would like to use it instead.  To use the spreadsheet, you'll need to make your own copy of it.

        -   This link will make you your own copy of the "Pizza Topping Choices" data: [Pizza Topping Choices](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/copy)
        -   You can also download a CSV version of the file [here](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/export?format=csv).
      CSD U5 Waze Data Video: Watch this video to learn how this problem is solved
        by Waze. As you watch think about what data is being collected and where it's
        coming from.
      CSD U5 Waze Data Video_2018: Watch this video to learn how this problem is solved
        by Waze. As you watch think about what data is being collected and where it's
        coming from.
      CSD U5 Waze Data Video_2019: Watch this video to learn how this problem is solved
        by Waze. As you watch think about what data is being collected and where it's
        coming from.
      CSD U5 binary 1: |-
        # 5-Bit Number

        When you only had four bits, the highest number that you could make was fifteen.  Now you'll have a chance to work with more bits to make higher numbers.

        In this activity, the dots are replaced with numbers, but you still add up everything that's showing to see what number the binary code stands for.  The left-most bit doesn't have a number yet, so you'll have to give it one.

        # Do This

        -   Click on the bits to turn them on and off, and see the different numbers you can make.
        -   With your partner, discuss the pattern in the numbers.  Decide what number you think should go in the left most box.
        -   Click "Edit" to change the value of the left most bit.
        -   Once you've decided on the value, try to make the following numbers: 16, 27, 31
      CSD U5 binary 1_2018: |-
        # 5-Bit Number

        When you only had four bits, the highest number that you could make was fifteen.  Now you'll have a chance to work with more bits to make higher numbers.

        In this activity, the dots are replaced with numbers, but you still add up everything that's showing to see what number the binary code stands for.  The left-most bit doesn't have a number yet, so you'll have to give it one.

        # Do This

        -   Click on the bits to turn them on and off, and see the different numbers you can make.
        -   With your partner, discuss the pattern in the numbers.  Decide what number you think should go in the left most box.
        -   Click "Edit" to change the value of the left most bit.
        -   Once you've decided on the value, try to make the following numbers: 16, 27, 31
      CSD U5 binary 1_2019: |-
        # 5-Bit Number

        When you only had four bits, the highest number that you could make was fifteen.  Now you'll have a chance to work with more bits to make higher numbers.

        In this activity, the dots are replaced with numbers, but you still add up everything that's showing to see what number the binary code stands for.  The left-most bit doesn't have a number yet, so you'll have to give it one.

        # Do This

        -   Click on the bits to turn them on and off, and see the different numbers you can make.
        -   With your partner, discuss the pattern in the numbers.  Decide what number you think should go in the left most box.
        -   Click "Edit" to change the value of the left most bit.
        -   Once you've decided on the value, try to make the following numbers: 16, 27, 31
      CSD U5 binary 2: |-
        # 6-Bit Number

        This widget helps you to calculate 6-bit binary numbers.

        # Do This

        -   With your partner, answer the following questions:
            1.  What's the biggest number you can make with this widget?
            2.  The record for most skips by a dog and person in one minute is 59.  How would you encode 59 in binary?
      CSD U5 binary 2_2018: |-
        # 6-Bit Number

        This widget helps you to calculate 6-bit binary numbers.

        # Do This

        -   With your partner, answer the following questions:
            1.  What's the biggest number you can make with this widget?
            2.  The record for most skips by a dog and person in one minute is 59.  How would you encode 59 in binary?
      CSD U5 binary 2_2019: |-
        # 6-Bit Number

        This widget helps you to calculate 6-bit binary numbers.

        # Do This

        -   With your partner, answer the following questions:
            1.  What's the biggest number you can make with this widget?
            2.  The record for most skips by a dog and person in one minute is 59.  How would you encode 59 in binary?
      CSD U5 binary 4-new: |-
        # Decoding multiple numbers

        Here's a widget that can calculate numbers of 4, 5, or 6 bits.  You can use it to find the two world records encoded in the binary string below.

        ![](<https://images.code.org/13b0d3307e688575b53e3e6bc86fb739-image-1505426509385.01.06 PM.png>)

        1.  Most number of people lifted and thrown in two minutes. (4 bits)
        2.  Most canned drinks opened by a parrot in one minute. (6 bits)

        # Do This

        -   Decode the two numbers from the binary string.
      CSD U5 binary 4-new_2018: |-
        # Decoding multiple numbers

        Here's a widget that can calculate numbers of 4, 5, or 6 bits.  You can use it to find the two world records encoded in the binary string below.

        ![](<https://images.code.org/13b0d3307e688575b53e3e6bc86fb739-image-1505426509385.01.06 PM.png>)

        1.  Most number of people lifted and thrown in two minutes. (4 bits)
        2.  Most canned drinks opened by a parrot in one minute. (6 bits)

        # Do This

        -   Decode the two numbers from the binary string.
      CSD U5 binary 4-new_2019: |-
        # Decoding multiple numbers

        Here's a widget that can calculate numbers of 4, 5, or 6 bits.  You can use it to find the two world records encoded in the binary string below.

        ![](<https://images.code.org/13b0d3307e688575b53e3e6bc86fb739-image-1505426509385.01.06 PM.png>)

        1.  Most number of people lifted and thrown in two minutes. (4 bits)
        2.  Most canned drinks opened by a parrot in one minute. (6 bits)

        # Do This

        -   Decode the two numbers from the binary string.
      CSD U5 binary 5-new: |-
        # Decoding multiple numbers

        Here's a widget that can calculate numbers up to to eight bits. You can use it to find the values of the two world records below.

        Don't forget to make sure that the "1" bit is always the right most bit.  If you have extra bits on the left side of the widget, just keep them turned off.

        ![](<https://images.code.org/e86788ff9b92a2b01b99749fa1aba8e8-image-1505426626592.01.14 PM.png>)

        1.  Longest tail on a dog (in inches) (5 bits)
        2.  Most spoons balanced on someone's face (5 bits)

        # Do This

        -   Decode the two numbers from a the binary string.
      CSD U5 binary 5-new_2018: |-
        # Decoding multiple numbers

        Here's a widget that can calculate numbers up to to eight bits. You can use it to find the values of the two world records below.

        Don't forget to make sure that the "1" bit is always the right most bit.  If you have extra bits on the left side of the widget, just keep them turned off.

        ![](<https://images.code.org/e86788ff9b92a2b01b99749fa1aba8e8-image-1505426626592.01.14 PM.png>)

        1.  Longest tail on a dog (in inches) (5 bits)
        2.  Most spoons balanced on someone's face (5 bits)

        # Do This

        -   Decode the two numbers from a the binary string.
            -   _Hint: You'll need to read the numbers in order, with the first answer using the first five bits, and the second answer using the five bits after that._
      CSD U5 binary 5-new_2019: |-
        # Decoding multiple numbers

        Here's a widget that can calculate numbers up to to eight bits. You can use it to find the values of the two world records below.

        Don't forget to make sure that the "1" bit is always the right most bit.  If you have extra bits on the left side of the widget, just keep them turned off.

        ![](<https://images.code.org/e86788ff9b92a2b01b99749fa1aba8e8-image-1505426626592.01.14 PM.png>)

        1.  Longest tail on a dog (in inches) (5 bits)
        2.  Most spoons balanced on someone's face (5 bits)

        # Do This

        -   Decode the two numbers from a the binary string.
            -   _Hint: You'll need to read the numbers in order, with the first answer using the first five bits, and the second answer using the five bits after that._
      CSD U5 binary 6-new: |-
        # Decoding multiple numbers

        Here's a new bit string.  This time, you don't know the bit length of the two numbers.  Try to decode the numbers without knowing the bit length.

        ![](<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46 PM.png>)

        1.  Largest wind chime, in feet (? bits)
        2.  Furthest arrow shot with someone's feet (in feet) (? bits)

        # Do This

        -   Try to decode the two numbers from the binary string.
        -   Discuss with your partner why you cannot know for sure whether your answer is correct.
      CSD U5 binary 6-new_2018: |-
        # Decoding multiple numbers

        Here's a new bit string.  This time, you don't know the bit length of the two numbers.  Try to decode the numbers without knowing the bit length.

        ![](<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46 PM.png>)

        1.  Largest wind chime, in feet (? bits)
        2.  Furthest arrow shot with someone's feet (in feet) (? bits)

        # Do This

        -   Try to decode the two numbers from the binary string.
        -   Discuss with your partner why you cannot know for sure whether your answer is correct.
      CSD U5 binary 6-new_2019: |-
        # Decoding multiple numbers

        Here's a new bit string.  This time, you don't know the bit length of the two numbers.  Try to decode the numbers without knowing the bit length.

        ![](<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46 PM.png>)

        1.  Largest wind chime, in feet (? bits)
        2.  Furthest arrow shot with someone's feet (in feet) (? bits)

        # Do This

        -   Try to decode the two numbers from the binary string.
        -   Discuss with your partner why you cannot know for sure whether your answer is correct.
      CSD U5 binary 7-new: |-
        # Bit Length

        If you don't know how many bits long each number is, you won't be able to decode a string of numbers.

        For example, the following binary string could be decoded many different ways.

        ![](<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46 PM.png>)

        If you split the string like this, the string reads 10, 84.

        ![](<https://images.code.org/c8586b93427166ae6ecfdb8b1ff66bdd-image-1505427228630.13.01 PM.png>) ![](<https://images.code.org/7d9814dc4bae8512dfaebbe459c29c9b-image-1505427230882.13.08 PM.png>)

        If you split it like this, the string reads 42, 20.

        ![](<https://images.code.org/2e62b4a71b98b68bdf04713c508e4cb2-image-1505427233001.13.13 PM.png>) ![](<https://images.code.org/10a316c870b575db4b30a687815bf481-image-1505427235482.13.19 PM.png>)

        To solve this problem, people agree on a fixed length for every number.  The following string uses the same two numbers, but each number takes up exactly eight bits, no matter how many bits it actually needs.

        ![](<https://images.code.org/257cb728fde57421e58ef31164be5a51-image-1505427467235.13.26 PM.png>)

        # Do This

        -   Use the binary widget to decode the string that uses eight bit numbers.
        -   Check you answer with a partner to see whether you got the same answer.
      CSD U5 binary 7-new_2018: |-
        # Bit Length

        If you don't know how many bits long each number is, you won't be able to decode a string of numbers.

        For example, the following binary string could be decoded many different ways.

        ![](<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46 PM.png>)

        If you split the string like this, the string reads 10, 84.

        ![](<https://images.code.org/c8586b93427166ae6ecfdb8b1ff66bdd-image-1505427228630.13.01 PM.png>) ![](<https://images.code.org/7d9814dc4bae8512dfaebbe459c29c9b-image-1505427230882.13.08 PM.png>)

        If you split it like this, the string reads 42, 20.

        ![](<https://images.code.org/2e62b4a71b98b68bdf04713c508e4cb2-image-1505427233001.13.13 PM.png>) ![](<https://images.code.org/10a316c870b575db4b30a687815bf481-image-1505427235482.13.19 PM.png>)

        To solve this problem, people agree on a fixed length for every number.  The following string uses the same two numbers, but each number takes up exactly eight bits, no matter how many bits it actually needs.

        ![](<https://images.code.org/257cb728fde57421e58ef31164be5a51-image-1505427467235.13.26 PM.png>)

        # Do This

        -   Use the binary widget to decode the string that uses eight bit numbers.
        -   Check you answer with a partner to see whether you got the same answer.
      CSD U5 binary 7-new_2019: |-
        # Bit Length

        If you don't know how many bits long each number is, you won't be able to decode a string of numbers.

        For example, the following binary string could be decoded many different ways.

        ![](<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46 PM.png>)

        If you split the string like this, the string reads 10, 84.

        ![](<https://images.code.org/c8586b93427166ae6ecfdb8b1ff66bdd-image-1505427228630.13.01 PM.png>) ![](<https://images.code.org/7d9814dc4bae8512dfaebbe459c29c9b-image-1505427230882.13.08 PM.png>)

        If you split it like this, the string reads 42, 20.

        ![](<https://images.code.org/2e62b4a71b98b68bdf04713c508e4cb2-image-1505427233001.13.13 PM.png>) ![](<https://images.code.org/10a316c870b575db4b30a687815bf481-image-1505427235482.13.19 PM.png>)

        To solve this problem, people agree on a fixed length for every number.  The following string uses the same two numbers, but each number takes up exactly eight bits, no matter how many bits it actually needs.

        ![](<https://images.code.org/257cb728fde57421e58ef31164be5a51-image-1505427467235.13.26 PM.png>)

        # Do This

        -   Use the binary widget to decode the string that uses eight bit numbers.
        -   Check you answer with a partner to see whether you got the same answer.
      CSD U5 binary video_2019: |-
        ## Otázky na zamyslenie

        -   Prečo sú všetky typy dát v počítači uložené ako čísla?
        -   Ak je všetko uložené ako číslo, ako si myslíte, že počítač rozlišuje medzi číslami, písmenami, obrázkami a zvukom?
      CSD U5 black white images pixelation: |-
        # Do This

        Complete the "X" shape by typing 0s and 1s. You can always click "Readable Format" if you want to clean up your work.
      CSD U5 black white images pixelation 2: |-
        # Do This

        Use the pixelation widget to draw a smiley face

        ![](<https://images.code.org/3e81e7e5c95a63173242552de2e9c094-image-1491425592286.52.47 PM.png>)
      CSD U5 black white images pixelation 2_2018: |-
        # Do This

        Use the pixelation widget to draw a smiley face

        ![](<https://images.code.org/3e81e7e5c95a63173242552de2e9c094-image-1491425592286.52.47 PM.png>)
      CSD U5 black white images pixelation 2_2019: |-
        # Do This

        Use the pixelation widget to draw a smiley face

        ![](<https://images.code.org/3e81e7e5c95a63173242552de2e9c094-image-1491425592286.52.47 PM.png>)
      CSD U5 black white images pixelation 3: |-
        # Do This

        The width and height sliders are set incorrectly for this image so it doesn't look like anything. Change them until you find the image.

        ![](<https://images.code.org/c2abe82051e700f22ce613e407e71536-image-1491426050751.00.17 PM.png>)
      CSD U5 black white images pixelation 3_2018: |-
        # Do This

        The width and height sliders are set incorrectly for this image so it doesn't look like anything. Change them until you find the image.

        ![](<https://images.code.org/c2abe82051e700f22ce613e407e71536-image-1491426050751.00.17 PM.png>)
      CSD U5 black white images pixelation 3_2019: |-
        # Do This

        The width and height sliders are set incorrectly for this image so it doesn't look like anything. Change them until you find the image.

        ![](<https://images.code.org/c2abe82051e700f22ce613e407e71536-image-1491426050751.00.17 PM.png>)
      CSD U5 black white images pixelation 4: |-
        # Do This

        Add eyebrows to this smiley face. Remember to use the "Readable Format" if you get stuck.

        ![](<https://images.code.org/269725fa3d9d6857912fe4a20464a830-image-1491427249017.18.37 PM.png>)
      CSD U5 black white images pixelation 4_2018: |-
        # Do This

        Add eyebrows to this smiley face. Remember to use the "Readable Format" if you get stuck.

        ![](<https://images.code.org/269725fa3d9d6857912fe4a20464a830-image-1491427249017.18.37 PM.png>)
      CSD U5 black white images pixelation 4_2019: |-
        # Do This

        Add eyebrows to this smiley face. Remember to use the "Readable Format" if you get stuck.

        ![](<https://images.code.org/269725fa3d9d6857912fe4a20464a830-image-1491427249017.18.37 PM.png>)
      CSD U5 black white images pixelation 5: |-
        # Do This

        Now it's your turn. Draw anything you want in the pixelation widget. Feel free to change the width and height of your image if you wish.
      CSD U5 black white images pixelation 5_2018: |-
        # Do This

        Now it's your turn. Draw anything you want in the pixelation widget. Feel free to change the width and height of your image if you wish.
      CSD U5 black white images pixelation 5_2019: |-
        # Do This

        Now it's your turn. Draw anything you want in the pixelation widget. Feel free to change the width and height of your image if you wish.
      CSD U5 black white images pixelation_2018: |-
        # Do This

        Complete the "X" shape by typing 0s and 1s. You can always click "Readable Format" if you want to clean up your work.
      CSD U5 black white images pixelation_2019: |-
        # Do This

        Complete the "X" shape by typing 0s and 1s. You can always click "Readable Format" if you want to clean up your work.
      CSD U6 Catch the Mouse: Embedded Prediction
      CSD U6 Catch the Mouse prediction: |-
        # Catch the Mouse

        This is a clicker game, similar to the one that you built in the last lesson.

        Look at the code with your partner and answer the following question:

        -   How many times do you need to click the mouse before the LED starts to blink?

        Write your answer in the box below, then run the code and see what happens.
      CSD U6 Catch the Mouse prediction_2018: |-
        # Catch the Mouse

        This is a clicker game, similar to the one that you built in the last lesson.

        Look at the code with your partner and answer the following question:

        -   How many times do you need to click the mouse before the LED starts to blink?

        Write your answer in the box below, then run the code and see what happens.
      CSD U6 Catch the Mouse prediction_2019: |-
        # Catch the Mouse

        This is a clicker game, similar to the one that you built in the last lesson.

        Look at the code with your partner and answer the following question:

        -   How many times do you need to click the mouse before the LED starts to blink?

        Write your answer in the box below, then run the code and see what happens.
      CSD U6 Catch the Mouse_2018: Embedded Prediction
      CSD U6 Catch the Mouse_2019: Embedded Prediction
      CSD U6 Driver pt 2: |-
        # Limiting Turn

        You might have noticed that it was really hard to steer the car unless your hands were moving slowly and carefully. This is because the number that `roll` returns can be a really big number depending on how much the accelerometer is being turned. Remember, `roll` has a range from -90 to 90.

        # Do This

        Find a way to make `roll` a smaller number while still using it to steer the car. You have all of the math operators available to you for this.

        _Challenge_: Can you keep the car from going off the side of the screen?
      CSD U6 Driver pt 2_2018: |-
        # Limiting Turn

        You might have noticed that it was really hard to steer the car unless your hands were moving slowly and carefully. This is because the number that `roll` returns can be a really big number depending on how much the accelerometer is being turned. Remember, `roll` has a range from -90 to 90.

        # Do This

        Find a way to make `roll` a smaller number while still using it to steer the car. You have all of the math operators available to you for this.

        _Challenge_: Can you keep the car from going off the side of the screen?
      CSD U6 Driver pt 2_2019: |-
        # Limiting Turn

        You might have noticed that it was really hard to steer the car unless your hands were moving slowly and carefully. This is because the number that `roll` returns can be a really big number depending on how much the accelerometer is being turned. Remember, `roll` has a range from -90 to 90.

        # Do This

        Find a way to make `roll` a smaller number while still using it to steer the car. You have all of the math operators available to you for this.

        _Challenge_: Can you keep the car from going off the side of the screen?
      CSD U6 Driver pt1: |-
        # Steering Wheel

        This game is similar to the goalie game that you just played, except a little different. Use your board as a steering wheel for the car (moving side to side). You have to get to the checkered flag at while avoiding the red flags along the way!

        # Do This

        -   Make the car move down the screen while the program runs.
        -   Give the car the ability to steer side to side.

        Think back to the programs you've made up until this point, how can you update these values?
      CSD U6 Driver pt1_2018: |-
        # Steering Wheel

        This game is similar to the goalie game that you just played, except a little different. Use your board as a steering wheel for the car (moving side to side). You have to get to the checkered flag at while avoiding the red flags along the way!

        # Do This

        -   Make the car move down the screen while the program runs.
        -   Give the car the ability to steer side to side.

        Think back to the programs you've made up until this point, how can you update these values?
      CSD U6 Driver pt1_2019: |-
        # Steering Wheel

        This game is similar to the goalie game that you just played, except a little different. Use your board as a steering wheel for the car (moving side to side). You have to get to the checkered flag at while avoiding the red flags along the way!

        # Do This

        -   Make the car move down the screen while the program runs.
        -   Give the car the ability to steer side to side.

        Think back to the programs you've made up until this point, how can you update these values?
      CSD U6 LED all: |-
        # Multi-function Light

        This app should let you choose between three types of lights: on, blink, and pulse.  It should also have a button that turns the light completely off.  Right now only the "on" button works, and the "off" button is completely missing.

        # Do This

        -   Add code to make the "blink" and "pulse" buttons work.
        -   In design mode, add a new "off" button.
        -   Add code to make the "off" button work.
      CSD U6 LED all_2018: |-
        # Multi-function Light

        This app should let you choose between three types of lights: on, blink, and pulse.  It should also have a button that turns the light completely off.  Right now only the "on" button works, and the "off" button is completely missing.

        # Do This

        -   Add code to make the "blink" and "pulse" buttons work.
        -   In design mode, add a new "off" button.
        -   Add code to make the "off" button work.
      CSD U6 LED all_2019: |-
        # Multi-function Light

        This app should let you choose between three types of lights: on, blink, and pulse.  It should also have a button that turns the light completely off.  Right now only the "on" button works, and the "off" button is completely missing.

        # Do This

        -   Add code to make the "blink" and "pulse" buttons work.
        -   In design mode, add a new "off" button.
        -   Add code to make the "off" button work.
      CSD U6 LED toggle: |-
        # Light Switch

        There are three more LED blocks that you haven't used yet. One of them can make the button work like a light switch, turning the LED on when it's off, but off when it's on.

        # Do This

        -   Try the `blink`, `toggle` and `pulse` blocks to see what they do.
        -   Use one of the blocks to make the button work like a light switch.
            -   If the LED is off, the button should turn it on.
            -   If the LED is on, the button should turn it off.
      CSD U6 LED toggle_2018: |-
        # Light Switch

        There are three more LED blocks that you haven't used yet. One of them can make the button work like a light switch, turning the LED on when it's off, but off when it's on.

        # Do This

        -   Try the `blink`, `toggle` and `pulse` blocks to see what they do.
        -   Use one of the blocks to make the button work like a light switch.
            -   If the LED is off, the button should turn it on.
            -   If the LED is on, the button should turn it off.
      CSD U6 LED toggle_2019: |-
        # Light Switch

        There are three more LED blocks that you haven't used yet. One of them can make the button work like a light switch, turning the LED on when it's off, but off when it's on.

        # Do This

        -   Try the `blink`, `toggle` and `pulse` blocks to see what they do.
        -   Use one of the blocks to make the button work like a light switch.
            -   If the LED is off, the button should turn it on.
            -   If the LED is on, the button should turn it off.
      CSD U6 LEDbutton predict embed: |-
        # Using Events

        This program uses events.  Look at the code with a partner and discuss what you think it will do.  Once you have answered the questions click "Run" to check your answer.

        -   Will the light turn on when the program is "Run"?  Why or why not?
      CSD U6 LEDbutton predict embed_2018: |-
        # Using Events

        This program uses events.  Look at the code with a partner and discuss what you think it will do.  Once you have answered the questions click "Run" to check your answer.

        -   Will the light turn on when the program is "Run"?  Why or why not?
      CSD U6 LEDbutton predict embed_2019: |-
        # Using Events

        This program uses events.  Look at the code with a partner and discuss what you think it will do.  Once you have answered the questions click "Run" to check your answer.

        -   Will the light turn on when the program is "Run"?  Why or why not?
      CSD U6 LEDs color: |-
        # Adding Some Color

        You probably noticed when you used `colorLeds[0].on()` in the last level, the LEDs turned on as white. If you don't specify a color, `on()` will turn on all three parts of the LED (red, green, and blue) to produce white. You'll see a new command in the toolbox called `colorLeds[0].color()` which lets you specify a color, either as a string like "blue" or an RGB value using color `color()` command.

        # Do This

        Use the `.color()` command to set each of the color LEDs to a different color.
      CSD U6 LEDs color_2018: |-
        # Adding Some Color

        You probably noticed when you used `colorLeds[0].on()` in the last level, the LEDs turned on as white. If you don't specify a color, `on()` will turn on all three parts of the LED (red, green, and blue) to produce white. You'll see a new command in the toolbox called `colorLeds[0].color()` which lets you specify a color, either as a string like "blue" or an RGB value using color `color()` command.

        # Do This

        Use the `.color()` command to set each of the color LEDs to a different color.
      CSD U6 LEDs color_2019: |-
        # Adding Some Color

        You probably noticed when you used `colorLeds[0].on()` in the last level, the LEDs turned on as white. If you don't specify a color, `on()` will turn on all three parts of the LED (red, green, and blue) to produce white. You'll see a new command in the toolbox called `colorLeds[0].color()` which lets you specify a color, either as a string like "blue" or an RGB value using color `color()` command.

        # Do This

        Use the `.color()` command to set each of the color LEDs to a different color.
      CSD U6 Pedometer: |-
        # Jogger

        This program should use the `shake` event, which is triggered when the board is shaken.  It should add a step to the jogger's total every time the user shakes the board.

        # Do This

        -   Change the event so it triggers every time the board is shaken.
        -   Add code inside the event so that `steps` increases every time the board is shaken.
      CSD U6 Pedometer_2018: |-
        # Jogger

        This program should use the `shake` event, which is triggered when the board is shaken.  It should add a step to the jogger's total every time the user shakes the board.

        # Do This

        -   Change the event so it triggers every time the board is shaken.
        -   Add code inside the event so that `steps` increases every time the board is shaken.
      CSD U6 Pedometer_2019: |-
        # Jogger

        This program should use the `shake` event, which is triggered when the board is shaken.  It should add a step to the jogger's total every time the user shakes the board.

        # Do This

        -   Change the event so it triggers every time the board is shaken.
        -   Add code inside the event so that `steps` increases every time the board is shaken.
      CSD U6 add LED button: |-
        # Using Events

        This program has two buttons.  The "on" button works, but the "off" button still needs to be programmed.

        # Do This

        -   Add code so that the second button turns the LED off.
      CSD U6 add LED button_2018: |-
        # Using Events

        This program has two buttons.  The "on" button works, but the "off" button still needs to be programmed.

        # Do This

        -   Add code so that the second button turns the LED off.
      CSD U6 add LED button_2019: |-
        # Using Events

        This program has two buttons.  The "on" button works, but the "off" button still needs to be programmed.

        # Do This

        -   Add code so that the second button turns the LED off.
      CSD U6 airplane predict markdown: |-
        # Accelerometer

        Look at the code below. What do you think it's going to do? Give it a guess, and run the code to find out!
      CSD U6 airplane predict markdown_2018: |-
        # Accelerometer

        Look at the code below. What do you think it's going to do? Give it a guess, and run the code to find out!
      CSD U6 airplane predict markdown_2019: |-
        # Accelerometer

        Look at the code below. What do you think it's going to do? Give it a guess, and run the code to find out!
      CSD U6 analog challenge: |-
        # Challenge

        _Check with your teacher before pursuing this challenge_

        Now that you've practiced taking input from the various analog sensors and changing their scale to meet your needs, can you come up with an interesting use for sensor data? It's easy to display the raw numbers coming out of a sensor, but far more interesting to present that data in different ways.

        Consider the following ways you might communicate sensor data:

        -   Use the board outputs
        -   Change the width, height, or position of a UI element
        -   Use conditionals to display different images based on sensor values
      CSD U6 analog challenge_2018: |-
        # Challenge

        _Check with your teacher before pursuing this challenge_

        Now that you've practiced taking input from the various analog sensors and changing their scale to meet your needs, can you come up with an interesting use for sensor data? It's easy to display the raw numbers coming out of a sensor, but far more interesting to present that data in different ways.

        Consider the following ways you might communicate sensor data:

        -   Use the board outputs
        -   Change the width, height, or position of a UI element
        -   Use conditionals to display different images based on sensor values
      CSD U6 analog challenge_2019: |-
        # Challenge

        _Check with your teacher before pursuing this challenge_

        Now that you've practiced taking input from the various analog sensors and changing their scale to meet your needs, can you come up with an interesting use for sensor data? It's easy to display the raw numbers coming out of a sensor, but far more interesting to present that data in different ways.

        Consider the following ways you might communicate sensor data:

        -   Use the board outputs
        -   Change the width, height, or position of a UI element
        -   Use conditionals to display different images based on sensor values
      CSD U6 analog change: |-
        # Change Event

        The data event is fine if you don't mind your code running constantly, but sometimes that's not the most efficient solution to your problem. The sensor "change" event only fires if the sensor value has changed since the last reading, which can make sure your program isn't running code when it's not necessary.

        # Do This

        Using the provided event handler, write a program that buzzes the buzzer and updates "temp\_value" whenever the temperature sensor reading changes. Place your thumb over the temperature sensor to get it to change and see how your program responds.
      CSD U6 analog change_2018: |-
        # Change Event

        The data event is fine if you don't mind your code running constantly, but sometimes that's not the most efficient solution to your problem. The sensor "change" event only fires if the sensor value has changed since the last reading, which can make sure your program isn't running code when it's not necessary.

        # Do This

        Using the provided event handler, write a program that buzzes the buzzer and updates "temp\_value" whenever the temperature sensor reading changes. Place your thumb over the temperature sensor to get it to change and see how your program responds.
      CSD U6 analog change_2019: |-
        # Change Event

        The data event is fine if you don't mind your code running constantly, but sometimes that's not the most efficient solution to your problem. The sensor "change" event only fires if the sensor value has changed since the last reading, which can make sure your program isn't running code when it's not necessary.

        # Do This

        Using the provided event handler, write a program that buzzes the buzzer and updates "temp\_value" whenever the temperature sensor reading changes. Place your thumb over the temperature sensor to get it to change and see how your program responds.
      CSD U6 analog data: |-
        # Data Event

        Each of these analog sensors emits a special event called "data" which occurs every time new data comes in from the sensor. Using this event, we can write programs that continually update.

        # Do This

        This is the first program you worked on in this lesson, let's see if we can make it continually update the sound reading using the "data" event.

        -   Create an event handler to respond to sound sensor's "data" event
        -   Move the existing code into your event handler
      CSD U6 analog data_2018: |-
        # Data Event

        Each of these analog sensors emits a special event called "data" which occurs every time new data comes in from the sensor. Using this event, you can rewrite the first program you worked on in this lesson so that it continually updates.

        # Do This

        -   Create an event handler to respond to sound sensor's "data" event
        -   Move the existing code into your event handler
      CSD U6 analog data_2019: |-
        # Data Event

        Each of these analog sensors emits a special event called "data" which occurs every time new data comes in from the sensor. Using this event, you can rewrite the first program you worked on in this lesson so that it continually updates.

        # Do This

        -   Create an event handler to respond to sound sensor's "data" event
        -   Move the existing code into your event handler
      CSD U6 analog light: |-
        # Light Sensor Updates

        This app is very similar to the last, but we've added a button with the ID "update\_button". Write a program that displays the current value of the light sensor every time the update button is clicked.

        # Do This

        Use an event handler to update the text of "light\_value" using the `lightSensor.value` block.
      CSD U6 analog light_2018: |-
        # Light Sensor Updates

        This app is very similar to the last, but we've added a button with the ID "update\_button". Write a program that displays the current value of the light sensor every time the update button is clicked.

        # Do This

        Use an event handler to update the text of "light\_value" using the `lightSensor.value` block.
      CSD U6 analog light_2019: |-
        # Light Sensor Updates

        This app is very similar to the last, but we've added a button with the ID "update\_button". Write a program that displays the current value of the light sensor every time the update button is clicked.

        # Do This

        Use an event handler to update the text of "light\_value" using the `lightSensor.value` block.
      CSD U6 analog rbg 1: |-
        # Displaying Sensor Readings in Color

        In the earlier prediction level you saw how the `setScale()` method can convert the full range of sensor readings (0-1023) into a range that can be used for RGB values (0-255). Let's build on that idea to make an app that can communicate the current value of all three analog sensors with a single color.

        # Do This

        To start, we just need to set the sensor scales correctly - don't worry about actually setting the color of the background yet.

        -   Using the `sensor.setScale()` block, set each of light and sound sensors to the right scale for an RGB color channel.
        -   Create a variable for each of the three colors and assign each one to the value of a different sensor.
        -   Use `console.log()` to test that your variables are in the correct range.

        _Hint: Order matters. You need to set the scale of a sensor before checking its value_

        _Hint: Remember that the temperature sensor can be read in both Celsius and Fahrenheit - either way it should already give you a value that's within the necessary range for RGB_
      CSD U6 analog rbg 1_2018: |-
        # Displaying Sensor Readings in Color

        In the earlier prediction level you saw how the `setScale()` method can convert the full range of sensor readings (0-1023) into a range that can be used for RGB values (0-255). Let's build on that idea to make an app that can communicate the current value of all three analog sensors with a single color.

        # Do This

        To start, we just need to set the sensor scales correctly - don't worry about actually setting the color of the background yet.

        -   Using the `sensor.setScale()` block, set each of light and sound sensors to the right scale for an RGB color channel.
        -   Create a variable for each of the three colors and assign each one to the value of a different sensor.
        -   Use `console.log()` to test that your variables are in the correct range.

        _Hint: Order matters. You need to set the scale of a sensor before checking its value_

        _Hint: Remember that the temperature sensor can be read in both Celsius and Fahrenheit - either way it should already give you a value that's within the necessary range for RGB_
      CSD U6 analog rbg 1_2019: |-
        # Displaying Sensor Readings in Color

        In the earlier prediction level you saw how the `setScale()` method can convert the full range of sensor readings (0-1023) into a range that can be used for RGB values (0-255). Let's build on that idea to make an app that can communicate the current value of all three analog sensors with a single color.

        # Do This

        To start, we just need to set the sensor scales correctly - don't worry about actually setting the color of the background yet.

        -   Using the `sensor.setScale()` block, set each of light and sound sensors to the right scale for an RGB color channel.
        -   Create a variable for each of the three colors and assign each one to the value of a different sensor.
        -   Use `console.log()` to test that your variables are in the correct range.

        _Hint: Order matters. You need to set the scale of a sensor before checking its value_

        _Hint: Remember that the temperature sensor can be read in both Celsius and Fahrenheit - either way it should already give you a value that's within the necessary range for RGB_
      CSD U6 analog rbg 2: |-
        # Putting Color on the Screen

        Now that your sensor data is in a scale that works for RGB, you can go about setting the screen color.

        # Do This

        -   Add a `setProperty()` block and set it to change the screen's background color.
        -   Add an `rgb()` block to the last parameter of `setProperty()`.
        -   Use the three color variables you created as inputs to the `rgb()` block.
      CSD U6 analog rbg 2_2018: |-
        # Putting Color on the Screen

        Now that your sensor data is in a scale that works for RGB, you can go about setting the screen color.

        # Do This

        -   Add a `setProperty()` block and set it to change the screen's background color.
        -   Add an `rgb()` block to the last parameter of `setProperty()`.
        -   Use the three color variables you created as inputs to the `rgb()` block.
      CSD U6 analog rbg 2_2019: |-
        # Putting Color on the Screen

        Now that your sensor data is in a scale that works for RGB, you can go about setting the screen color.

        # Do This

        -   Add a `setProperty()` block and set it to change the screen's background color.
        -   Add an `rgb()` block to the last parameter of `setProperty()`.
        -   Use the three color variables you created as inputs to the `rgb()` block.
      CSD U6 analog rgb 3: |-
        # Continuous Updates

        This sensor-to-color app isn't super useful if it only sets the color once when you start the app. You can use the sensors' "data" event to make your app continually update the background color every time the value changes.

        Move your `setProperty()` block into a an event handler for one of the sensors to make the app update continually.
      CSD U6 analog rgb 3_2018: |-
        # Continuous Updates

        This sensor-to-color app isn't super useful if it only sets the color once when you start the app. You can use the sensors' "data" event to make your app continually update the background color every time the value changes.

        Move your `setProperty()` block into a an event handler for one of the sensors to make the app update continually.
      CSD U6 analog rgb 3_2019: |-
        # Continuous Updates

        This sensor-to-color app isn't super useful if it only sets the color once when you start the app. You can use the sensors' "data" event to make your app continually update the background color every time the value changes.

        Move your `setProperty()` block into a an event handler for one of the sensors to make the app update continually.
      CSD U6 analog sound: |-
        # Reading the Sound Sensor

        The `soundSensor.value` block allows you to get the current sound sensor reading

        # Do This

        In this app we've already added a text label with the id "sound\_value". Using the `soundSensor.value` block, display the value of the sound sensor.

        _Tip: You can drag the `soundSensor.value` block directly into any other block where you could type a value instead._

        ![](https://images.code.org/3bd9ac3f869e42f48aaf190944fe1c22-image-1511293198110.png)
      CSD U6 analog sound_2018: |-
        # Reading the Sound Sensor

        The `soundSensor.value` block allows you to get the current sound sensor reading

        # Do This

        In this app we've already added a text label with the id "sound\_value". Using the `soundSensor.value` block, display the value of the sound sensor.

        _Tip: You can drag the `soundSensor.value` block directly into any other block where you could type a value instead._

        ![](https://images.code.org/3bd9ac3f869e42f48aaf190944fe1c22-image-1511293198110.png)
      CSD U6 analog sound_2019: |-
        # Reading the Sound Sensor

        The `soundSensor.value` block allows you to get the current sound sensor reading

        # Do This

        In this app we've already added a text label with the id "sound\_value". Using the `soundSensor.value` block, display the value of the sound sensor.

        _Tip: You can drag the `soundSensor.value` block directly into any other block where you could type a value instead._

        ![](https://images.code.org/3bd9ac3f869e42f48aaf190944fe1c22-image-1511293198110.png)
      CSD U6 analog temp: |-
        # Make a Thermometer App

        While the light and sound sensors have just a raw value with the `value` property, the temperature sensor is a little bit smarter. Instead of `tempSensor.value`, there are two properties `tempSensor.F` and `tempSensor.C` which convert the raw input value to either Fahrenheit or Celsius.

        # Do This

        Make a simple thermometer app that reads in values from the temperature sensor. Your app can display the temperature in either Fahrenheit or Celsius (or both!)

        -   Using Design Mode, create a button for updating and a label to display the temperature
        -   Add an event handler to respond to your update button being clicked
        -   Add code to your event handler to read the temperature sensor and display the value on screen
      CSD U6 analog temp_2018: |-
        # Make a Thermometer App

        While the light and sound sensors have just a raw value with the `value` property, the temperature sensor is a little bit smarter. Instead of `tempSensor.value`, there are two properties `tempSensor.F` and `tempSensor.C` which convert the raw input value to either Fahrenheit or Celsius.

        # Do This

        Make a simple thermometer app that reads in values from the temperature sensor. Your app can display the temperature in either Fahrenheit or Celsius (or both!)

        -   Using Design Mode, create a button for updating and a label to display the temperature
        -   Add an event handler to respond to your update button being clicked
        -   Add code to your event handler to read the temperature sensor and display the value on screen
      CSD U6 analog temp_2019: |-
        # Make a Thermometer App

        While the light and sound sensors have just a raw value with the `value` property, the temperature sensor is a little bit smarter. Instead of `tempSensor.value`, there are two properties `tempSensor.F` and `tempSensor.C` which convert the raw input value to either Fahrenheit or Celsius.

        # Do This

        Make a simple thermometer app that reads in values from the temperature sensor. Your app can display the temperature in either Fahrenheit or Celsius (or both!)

        -   Using Design Mode, create a button for updating and a label to display the temperature
        -   Add an event handler to respond to your update button being clicked
        -   Add code to your event handler to read the temperature sensor and display the value on screen
      CSD U6 analog threshold: |-
        # Change Threshold

        By default a sensor's "change" event fires every time the sensor value changes at all, even by one. The light and sound sensors are constantly fluctuating, so you probably want the "change" event to be a little less responsive. The `threshold` property allows you to set how much a sensor should change before considering it a "change" event - so setting `soundSensor.threshold = 100` would cause the sound sensor's "change" event only to trigger if its value increased or decreased by at least 100.

        # Do This

        This app changes the background color of the screen whenever the sound sensor value changes, but we want to only respond to big changes in volume (like a loud noise). Use the `soundSensor.threshold` block to fix it.

        -   Add a `soundSensor.threshold` block before the event handler
        -   Test out which how different threshold values impact the "change" event
        -   Choose a threshold value that makes the screen background change only when a loud noise is sensed.

        _Tip: Your threshold depends on how much ambient noise there is in the room, and how much it changes. A threshold that works in a quiet room may not work in a louder classroom._
      CSD U6 analog threshold_2018: |-
        # Change Threshold

        By default a sensor's "change" event fires every time the sensor value changes at all, even by one. The light and sound sensors are constantly fluctuating, so you probably want the "change" event to be a little less responsive. The `threshold` property allows you to set how much a sensor should change before considering it a "change" event - so setting `soundSensor.threshold = 100` would cause the sound sensor's "change" event only to trigger if its value increased or decreased by at least 100.

        # Do This

        This app changes the background color of the screen whenever the sound sensor value changes, but we want to only respond to big changes in volume (like a loud noise). Use the `soundSensor.threshold` block to fix it.

        -   Add a `soundSensor.threshold` block before the event handler
        -   Test out how different threshold values impact the "change" event
        -   Choose a threshold value that makes the screen background change only when a loud noise is sensed.

        _Tip: Your threshold depends on how much ambient noise there is in the room, and how much it changes. A threshold that works in a quiet room may not work in a louder classroom._
      CSD U6 analog threshold_2019: |-
        # Change Threshold

        By default a sensor's "change" event fires every time the sensor value changes at all, even by one. The light and sound sensors are constantly fluctuating, so you probably want the "change" event to be a little less responsive. The `threshold` property allows you to set how much a sensor should change before considering it a "change" event - so setting `soundSensor.threshold = 100` would cause the sound sensor's "change" event only to trigger if its value increased or decreased by at least 100.

        # Do This

        This app changes the background color of the screen whenever the sound sensor value changes, but we want to only respond to big changes in volume (like a loud noise). Use the `soundSensor.threshold` block to fix it.

        -   Add a `soundSensor.threshold` block before the event handler
        -   Test out how different threshold values impact the "change" event
        -   Choose a threshold value that makes the screen background change only when a loud noise is sensed.

        _Tip: Your threshold depends on how much ambient noise there is in the room, and how much it changes. A threshold that works in a quiet room may not work in a louder classroom._
      CSD U6 array piano: |-
        # Piano Panic

        So far you’ve just been using the elements of an array. Now, you're going to change what's inside the array.

        Our good friend the piano is back, except now it plays notes from two arrays: `notes`, which holds natural notes (C, D, E, F, G, A, B), and `sharpNotes`, which holds sharp notes (C#, D#, F#, G#, A#).

        # Do this

        The `sharpNotes` array only has one item inside of it right now.

        -   Fix the array so that the sharp keys on the piano can actually play the right note.

        _Hint: Modifying arrays is much easier in text mode.  You can always switch between block and text mode by clicking the button at the top right of your code workspace._
      CSD U6 array piano_2018: |-
        # Piano Panic

        So far you’ve just been using the elements of an array. Now, you're going to change what's inside the array.

        Our good friend the piano is back, except now it plays notes from two arrays: `notes`, which holds natural notes (C, D, E, F, G, A, B), and `sharpNotes`, which holds sharp notes (C#, D#, F#, G#, A#).

        # Do this

        The `sharpNotes` array only has one item inside of it right now.

        -   Fix the array so that the sharp keys on the piano can actually play the right note.

        _Hint: Modifying arrays is much easier in text mode.  You can always switch between block and text mode by clicking the button at the top right of your code workspace._
      CSD U6 array piano_2019: |-
        # Piano Panic

        So far you’ve just been using the elements of an array. Now, you're going to change what's inside the array.

        Our good friend the piano is back, except now it plays notes from two arrays: `notes`, which holds natural notes (C, D, E, F, G, A, B), and `sharpNotes`, which holds sharp notes (C#, D#, F#, G#, A#).

        # Do this

        The `sharpNotes` array only has one item inside of it right now.

        -   Fix the array so that the sharp keys on the piano can actually play the right note.

        _Hint: Modifying arrays is much easier in text mode.  You can always switch between block and text mode by clicking the button at the top right of your code workspace._
      CSD U6 arrays video: |-
        ## Questions to Consider

        -   When might an array be more useful than a variable?
        -   Why do you always need to assign an array to a variable?
        -   How can you access the elements in your array?
      CSD U6 board getters: |-
        # Using the Circuit Playground

        You can also use getters and setters with the Circuit Playground.  For this level, you'll need to plug in your board.

        Read through the code and predict what the program will do, then hit "Run" to test your prediction.
      CSD U6 board getters_2018: |-
        # Using the Circuit Playground

        You can also use getters and setters with the Circuit Playground.  For this level, you'll need to plug in your board.

        Read through the code and predict what the program will do, then hit "Run" to test your prediction.
      CSD U6 board getters_2019: |-
        # Using the Circuit Playground

        You can also use getters and setters with the Circuit Playground.  For this level, you'll need to plug in your board.

        Read through the code and predict what the program will do, then hit "Run" to test your prediction.
      CSD U6 challenge motorcycle_2018: |-
        # Challenge

        Use this program to experiment some more with getting and setting properties. Some ideas you might try include:

        -   Use the toggle switch to change the motorcycle's movement to go up and down.
        -   Use a dropdown with color names to change the motorcycle's color
        -   Make the buzzer or LED turn on when the motorcycle reaches the top or bottom of the screen.
      CSD U6 challenge motorcycle_2019: |-
        # Challenge

        Use this program to experiment some more with getting and setting properties. Some ideas you might try include:

        -   Use the toggle switch to change the motorcycle's movement to go up and down.
        -   Use a dropdown with color names to change the motorcycle's color
        -   Make the buzzer or LED turn on when the motorcycle reaches the top or bottom of the screen.
      CSD U6 change: |-
        # Change

        In the last level, the program only got the interval value from the slider when you pressed the left button.  Sometimes, though, you'll want to change the interval of the LED as soon as the user chooses a new value.   For that, you'll need the "change" event.

        # Do This

        -   Look at the first event block in the program and find where it says "change".
        -   Inside the event block, get the interval value from the slider and use it to make the LED blink at that new rate.
        -   Run your program, moving the slider to see whether the LED speed changes automatically.
      CSD U6 change_2018: |-
        # Change

        In the last level, the program only got the interval value from the slider when you pressed the left button.  Sometimes, though, you'll want to change the interval of the LED as soon as the user chooses a new value.   For that, you'll need the "change" event.

        # Do This

        -   Look at the first event block in the program and find where it says "change".
        -   Inside the event block, get the interval value from the slider and use it to make the LED blink at that new rate.
        -   Run your program, moving the slider to see whether the LED speed changes automatically.
      CSD U6 change_2019: |-
        # Change

        In the last level, the program only got the interval value from the slider when you pressed the left button.  Sometimes, though, you'll want to change the interval of the LED as soon as the user chooses a new value.   For that, you'll need the "change" event.

        # Do This

        -   Look at the first event block in the program and find where it says "change".
        -   Inside the event block, get the interval value from the slider and use it to make the LED blink at that new rate.
        -   Run your program, moving the slider to see whether the LED speed changes automatically.
      CSD U6 circuit createButton: |-
        <div style="float: right" markdown="1">

        ![expandable](https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_alligator.png)

        </div>

        # Make Your Own Buttons

        Similar to LEDs, buttons are a really simple circuit that you can add to your board pretty easily. Like LEDs, buttons should be wired from a numbered pin to a ground pin, but unlike LEDs, a button circuit should be disconnected in the middle. When you connect the circuit, it will produce a button press event.

        # Do This

        -   Grab two wires.
        -   Connect one wire to an open numbered pin.
        -   Connect the second wire to a ground pin.
        -   Update line 2 so that it's referencing the pin you chose.
        -   Run the provided code.
        -   With the program running, touch the unconnected ends of both wires together to "press" the button.

        _Tip: A button circuit can be made with many different kinds of materials, as long as they are electrically conductive. Try making buttons with foil, silverware, or paper clips._
      CSD U6 circuit createButton_2018: |-
        <div style="float: right" markdown="1">

        ![expandable](https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_alligator.png)

        </div>

        # Make Your Own Buttons

        Similar to LEDs, buttons are a really simple circuit that you can add to your board pretty easily. Like LEDs, buttons should be wired from a numbered pin to a ground pin, but unlike LEDs, a button circuit should be disconnected in the middle. When you connect the circuit, it will produce a button press event.

        # Do This

        -   Grab two wires.
        -   Connect one wire to an open numbered pin.
        -   Connect the second wire to a ground pin.
        -   Update line 2 so that it's referencing the pin you chose.
        -   Run the provided code.
        -   With the program running, touch the unconnected ends of both wires together to "press" the button.

        _Tip: A button circuit can be made with many different kinds of materials, as long as they are electrically conductive. Try making buttons with foil, silverware, or paper clips._
      CSD U6 circuit createButton_2019: |-
        <div style="float: right" markdown="1">

        ![expandable](https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_alligator.png)

        </div>

        # Make Your Own Buttons

        Similar to LEDs, buttons are a really simple circuit that you can add to your board pretty easily. Like LEDs, buttons should be wired from a numbered pin to a ground pin, but unlike LEDs, a button circuit should be disconnected in the middle. When you connect the circuit, it will produce a button press event.

        # Do This

        -   Grab two wires.
        -   Connect one wire to an open numbered pin.
        -   Connect the second wire to a ground pin.
        -   Update line 2 so that it's referencing the pin you chose.
        -   Run the provided code.
        -   With the program running, touch the unconnected ends of both wires together to "press" the button.

        _Tip: A button circuit can be made with many different kinds of materials, as long as they are electrically conductive. Try making buttons with foil, silverware, or paper clips._
      CSD U6 circuit createLed: |-
        # Creating Board Objects

        You might have noticed that the new blocks we're using are in a different toolbox drawer. The **Circuit** drawer contains all of the board objects that are built into the Circuit Playground, but when you start wiring your own circuits the Maker Toolkit no longer knows where everything is.

        The new **Maker** drawer contains general purpose commands instead of ones that are customized for the Circuit Playground. In addition to the `pinMode()` and `digitalWrite()` commands you've seen, it includes commands to create new objects on the board that can be programmed in the same way as the blocks in the **Circuit** drawer. The `var myLed = createLed()` command, for example, creates a new LED object that behaves just like the `led` blocks you've been using.

        # Do This

        Now that you're creating new board objects that we don't have blocks for, you'll need to work in text mode. You can still drag out blocks that you're familiar with from the **Circuit** drawer, you'll just need to change the name of the object.

        -   Keep your LED wired just as it was before (connected to pin 2)
        -   Make sure you're in text mode, not block mode.
        -   Drag out an `led.blink()` block below the comment `// Blink myLed`.
        -   Replace the text `led` with `myLed`.
        -   Test your code.
      CSD U6 circuit createLed_2018: |-
        # Creating Board Objects

        You might have noticed that the new blocks we're using are in a different toolbox drawer. The **Circuit** drawer contains all of the board objects that are built into the Circuit Playground, but when you start wiring your own circuits the Maker Toolkit no longer knows where everything is.

        The new **Maker** drawer contains general purpose commands instead of ones that are customized for the Circuit Playground. In addition to the `pinMode()` and `digitalWrite()` commands you've seen, it includes commands to create new objects on the board that can be programmed in the same way as the blocks in the **Circuit** drawer. The `var myLed = createLed()` command, for example, creates a new LED object that behaves just like the `led` blocks you've been using.

        # Do This

        Now that you're creating new board objects that we don't have blocks for, you'll need to work in text mode. You can still drag out blocks that you're familiar with from the **Circuit** drawer, you'll just need to change the name of the object.

        -   Keep your LED wired just as it was before (connected to pin 2)
        -   Make sure you're in text mode, not block mode.
        -   Drag out an `led.blink()` block below the comment `// Blink myLed`.
        -   Replace the text `led` with `myLed`.
        -   Test your code.
      CSD U6 circuit createLed_2019: |-
        # Creating Board Objects

        You might have noticed that the new blocks we're using are in a different toolbox drawer. The **Circuit** drawer contains all of the board objects that are built into the Circuit Playground, but when you start wiring your own circuits the Maker Toolkit no longer knows where everything is.

        The new **Maker** drawer contains general purpose commands instead of ones that are customized for the Circuit Playground. In addition to the `pinMode()` and `digitalWrite()` commands you've seen, it includes commands to create new objects on the board that can be programmed in the same way as the blocks in the **Circuit** drawer. The `var myLed = createLed()` command, for example, creates a new LED object that behaves just like the `led` blocks you've been using.

        # Do This

        Now that you're creating new board objects that we don't have blocks for, you'll need to work in text mode. You can still drag out blocks that you're familiar with from the **Circuit** drawer, you'll just need to change the name of the object.

        -   Keep your LED wired just as it was before (connected to pin 2)
        -   Make sure you're in text mode, not block mode.
        -   Drag out an `led.blink()` block below the comment `// Blink myLed`.
        -   Replace the text `led` with `myLed`.
        -   Test your code.
      CSD U6 circuit multi led: |-
        # Wiring Multiple LEDs

        Using the `createLed()` block you can connect and control as many LEDs as your board has room for. Each LED needs to be connected to a separate numbered pin, but they can all share the same ground pin.

        # Do This

        Leave the current LED connected to pin 2, but add another one to a numbered pin of your choice. For your new LED:

        -   Add a `var myLed = createLed()` block.
        -   Replace the variable label `myLed` with a unique label.
        -   Make sure you're in text mode, not block mode.
        -   Add an `led.blink()` command.
        -   Replace the text `led` with your new LED variable.
        -   Test your code.

        _Challenge: Try adding a third LED and make all three LED blink at different intervals._
      CSD U6 circuit multi led_2018: |-
        # Wiring Multiple LEDs

        Using the `createLed()` block you can connect and control as many LEDs as your board has room for. Each LED needs to be connected to a separate numbered pin, but they can all share the same ground pin.

        # Do This

        Leave the current LED connected to pin 2, but add another one to a numbered pin of your choice. For your new LED:

        -   Add a `var myLed = createLed()` block.
        -   Replace the variable label `myLed` with a unique label.
        -   Make sure you're in text mode, not block mode.
        -   Add an `led.blink()` command.
        -   Replace the text `led` with your new LED variable.
        -   Test your code.

        _Challenge: Try adding a third LED and make all three LED blink at different intervals._
      CSD U6 circuit multi led_2019: |-
        # Wiring Multiple LEDs

        Using the `createLed()` block you can connect and control as many LEDs as your board has room for. Each LED needs to be connected to a separate numbered pin, but they can all share the same ground pin.

        # Do This

        Leave the current LED connected to pin 2, but add another one to a numbered pin of your choice. For your new LED:

        -   Add a `var myLed = createLed()` block.
        -   Replace the variable label `myLed` with a unique label.
        -   Make sure you're in text mode, not block mode.
        -   Add an `led.blink()` command.
        -   Replace the text `led` with your new LED variable.
        -   Test your code.

        _Challenge: Try adding a third LED and make all three LED blink at different intervals._
      CSD U6 circuit pinMode: |-
        # Wire a Circuit

        You can use any of the numbered pads to add additional circuits to your board. Let's use pin 2 to add another LED.

        # Do This

        -   Using a wire, connect pin 2 to the positive (+) side of an LED
        -   Using another wire, connect the negative (-) side of the LED to a ground (GND) pin (it doesn't matter which one)
        -   Run this program to test your circuit. If it worked, your LED should turn on.

        _Debugging Tip: LEDs only work if the electricity is flowing from positive to negative. If your LED doesn't light up, make sure that it's oriented the right way._
      CSD U6 circuit pinMode_2018: |-
        # Wire a Circuit

        You can use any of the numbered pads to add additional circuits to your board. Let's use pin 2 to add another LED.

        # Do This

        -   Using a wire, connect pin 2 to the positive (+) side of an LED
        -   Using another wire, connect the negative (-) side of the LED to a ground (GND) pin (it doesn't matter which one)
        -   Run this program to test your circuit. If it worked, your LED should turn on.

        _Debugging Tip: LEDs only work if the electricity is flowing from positive to negative. If your LED doesn't light up, make sure that it's oriented the right way._
      CSD U6 circuit pinMode_2019: |-
        # Wire a Circuit

        You can use any of the numbered pads to add additional circuits to your board. Let's use pin 2 to add another LED.

        # Do This

        -   Using a wire, connect pin 2 to the positive (+) side of an LED
        -   Using another wire, connect the negative (-) side of the LED to a ground (GND) pin (it doesn't matter which one)
        -   Run this program to test your circuit. If it worked, your LED should turn on.

        _Debugging Tip: LEDs only work if the electricity is flowing from positive to negative. If your LED doesn't light up, make sure that it's oriented the right way._
      CSD U6 circuit predict multi: |-
        # Make a Prediction

        All of the devices that you've used so far are actually circuits connected to numbered pins! Look for **#13** on your board to see which circuit is connected to pin 13, then read through this code and predict what will happen when the program is run.
      CSD U6 circuit predict multi_2018: |-
        # Make a Prediction

        All of the devices that you've used so far are actually circuits connected to numbered pins! Look for **#13** on your board to see which circuit is connected to pin 13, then read through this code and predict what will happen when the program is run.
      CSD U6 circuit predict multi_2019: |-
        # Make a Prediction

        All of the devices that you've used so far are actually circuits connected to numbered pins! Look for **#13** on your board to see which circuit is connected to pin 13, then read through this code and predict what will happen when the program is run.
      CSD U6 circuit smart bike blinker buttons: |-
        # Smart Bike - Blinker Controls

        With your turn signal LEDs hooked up, you just need to program some buttons to control them. You may want to place buttons elsewhere on the bike to make controlling your turn signals easier, but for now we'll just use the built in left and right buttons.

        # Do This

        -   Add event handlers to blink the left turn signal when the left button is pressed.
        -   Add event handlers to blink the right turn signal when the right button is pressed.
        -   Test your code!

        _Hint: You'll need to be in text mode to make the blinkers work, since there are no built-in blocks for the elements that you add on to the board._
      CSD U6 circuit smart bike blinker buttons_2018: |-
        # Smart Bike - Blinker Controls

        With your turn signal LEDs hooked up, you just need to program some buttons to control them. You may want to place buttons elsewhere on the bike to make controlling your turn signals easier, but for now we'll just use the built in left and right buttons.

        # Do This

        -   Add event handlers to blink the left turn signal when the left button is pressed.
        -   Add event handlers to blink the right turn signal when the right button is pressed.
        -   Test your code!

        _Hint: You'll need to be in text mode to make the blinkers work, since there are no built-in blocks for the elements that you add on to the board._
      CSD U6 circuit smart bike blinker buttons_2019: |-
        # Smart Bike - Blinker Controls

        With your turn signal LEDs hooked up, you just need to program some buttons to control them. You may want to place buttons elsewhere on the bike to make controlling your turn signals easier, but for now we'll just use the built in left and right buttons.

        # Do This

        -   Add event handlers to blink the left turn signal when the left button is pressed.
        -   Add event handlers to blink the right turn signal when the right button is pressed.
        -   Test your code!

        _Hint: You'll need to be in text mode to make the blinkers work, since there are no built-in blocks for the elements that you add on to the board._
      CSD U6 circuit smart bike blinkers: "# Smart Bike - Blinkers\n\nUsing your planning
        guide, wire up the two LEDs that will serve as the blinkers. In order to make
        sure that the blinkers can be mounted at the end of the handlebars, make sure
        you wire them so that they can stretch out in opposite directions.\n\n# Do
        This\n\nUsing alligator clips, wire, or other conductive material, connect
        two LEDs to your board, one for each turn signal blinker.\n\n-   Hook up each
        LED to a different numbered pin on the board.\n-   Use the `createLed()` block
        to create an LED object for each blinker.\n\n_Tip: Make your wiring easier
        by considering how your blinkers will be mounted when selecting a pin to use._ "
      CSD U6 circuit smart bike blinkers_2018: "# Smart Bike - Blinkers\n\nUsing your
        planning guide, wire up the two LEDs that will serve as the blinkers. In order
        to make sure that the blinkers can be mounted at the end of the handlebars,
        make sure you wire them so that they can stretch out in opposite directions.\n\n#
        Do This\n\nUsing alligator clips, wire, or other conductive material, connect
        two LEDs to your board, one for each turn signal blinker.\n\n-   Hook up each
        LED to a different numbered pin on the board.\n-   Use the `createLed()` block
        to create an LED object for each blinker.\n\n_Tip: Make your wiring easier
        by considering how your blinkers will be mounted when selecting a pin to use._ "
      CSD U6 circuit smart bike blinkers_2019: "# Smart Bike - Blinkers\n\nUsing your
        planning guide, wire up the two LEDs that will serve as the blinkers. In order
        to make sure that the blinkers can be mounted at the end of the handlebars,
        make sure you wire them so that they can stretch out in opposite directions.\n\n#
        Do This\n\nUsing alligator clips, wire, or other conductive material, connect
        two LEDs to your board, one for each turn signal blinker.\n\n-   Hook up each
        LED to a different numbered pin on the board.\n-   Use the `createLed()` block
        to create an LED object for each blinker.\n\n_Tip: Make your wiring easier
        by considering how your blinkers will be mounted when selecting a pin to use._ "
      CSD U6 circuit smart bike buzzer: |-
        # Smart Bike - Buzzer

        Now that we know how to add more buttons, you can add a button to control the smart bike's horn.

        # Do This

        Using the button that you've already wired to the board, find a good spot to place your horn button. Then:

        -   Create a button object for your horn button
        -   Add an event handler to buzz when button is pressed

        _Hint: The button object that you create won't be in the `onBoardEvent()` dropdown, so you'll need to type the name you've chosen in. Make sure not to use quotation marks!_
      CSD U6 circuit smart bike buzzer_2018: |-
        # Smart Bike - Buzzer

        Now that we know how to add more buttons, you can add a button to control the smart bike's horn.

        # Do This

        Using the button that you've already wired to the board, find a good spot to place your horn button. Then:

        -   Create a button object for your horn button
        -   Add an event handler to buzz when button is pressed

        _Hint: The button object that you create won't be in the `onBoardEvent()` dropdown, so you'll need to type the name you've chosen in. Make sure not to use quotation marks!_
      CSD U6 circuit smart bike buzzer_2019: |-
        # Smart Bike - Buzzer

        Now that we know how to add more buttons, you can add a button to control the smart bike's horn.

        # Do This

        Using the button that you've already wired to the board, find a good spot to place your horn button. Then:

        -   Create a button object for your horn button
        -   Add an event handler to buzz when button is pressed

        _Hint: The button object that you create won't be in the `onBoardEvent()` dropdown, so you'll need to type the name you've chosen in. Make sure not to use quotation marks!_
      CSD U6 circuit smart bike final: |-
        # Smart Bike - Final Touches

        At this point your smart bike should have all of its basic functionality in place. Now is your chance to add any finishing touches.

        # Do This

        You may want to divide and conquer at this point, allowing some members of your group to focus on the physical aspects of the prototype while others work on improving the code. As this is a prototype, don't worry about making everything perfect, but do try to ensure that the prototype communicates your design well enough to test and get feedback.
      CSD U6 circuit smart bike final_2018: |-
        # Smart Bike - Final Touches

        At this point your smart bike should have all of its basic functionality in place. Now is your chance to add any finishing touches.

        # Do This

        You may want to divide and conquer at this point, allowing some members of your group to focus on the physical aspects of the prototype while others work on improving the code. As this is a prototype, don't worry about making everything perfect, but do try to ensure that the prototype communicates your design well enough to test and get feedback.
      CSD U6 circuit smart bike final_2019: |-
        # Smart Bike - Final Touches

        At this point your smart bike should have all of its basic functionality in place. Now is your chance to add any finishing touches.

        # Do This

        You may want to divide and conquer at this point, allowing some members of your group to focus on the physical aspects of the prototype while others work on improving the code. As this is a prototype, don't worry about making everything perfect, but do try to ensure that the prototype communicates your design well enough to test and get feedback.
      CSD U6 circuit smart bike light: |-
        # Smart Bike - Headlight

        The last part of the smart bike plan that we need to figure out is the automatic headlight.

        # Do This

        First you'll need to decide what to use for your headlight. You could add another LED circuit, or perhaps you can find a way to mount the board that allows for using the color LEDs as a headlight. Once you've figured out the physical layout of your lights, add code to your program that turns on and off the headlight based on how light or dark it is.

        _Hint: If you're using the built-in color LEDs, you might need to protect the light sensor to make sure that it's responding to the ambient light level and not the light from the LEDs._
      CSD U6 circuit smart bike light_2018: |-
        # Smart Bike - Headlight

        The last part of the smart bike plan that we need to figure out is the automatic headlight.

        # Do This

        First you'll need to decide what to use for your headlight. You could add another LED circuit, or perhaps you can find a way to mount the board that allows for using the color LEDs as a headlight. Once you've figured out the physical layout of your lights, add code to your program that turns on and off the headlight based on how light or dark it is.

        _Hint: If you're using the built-in color LEDs, you might need to protect the light sensor to make sure that it's responding to the ambient light level and not the light from the LEDs._
      CSD U6 circuit smart bike light_2019: |-
        # Smart Bike - Headlight

        The last part of the smart bike plan that we need to figure out is the automatic headlight.

        # Do This

        First you'll need to decide what to use for your headlight. You could add another LED circuit, or perhaps you can find a way to mount the board that allows for using the color LEDs as a headlight. Once you've figured out the physical layout of your lights, add code to your program that turns on and off the headlight based on how light or dark it is.

        _Hint: If you're using the built-in color LEDs, you might need to protect the light sensor to make sure that it's responding to the ambient light level and not the light from the LEDs._
      CSD U6 colorLED on: |-
        <img src="//curriculum.code.org/images/circuitplayground/colorLedonoff.gif" style="float: right; margin: 10px;">

        # colorLeds

        The color LEDs can use the same basic commands that you used with the red LED, such as `on()` and `off()`. This program should turn on and off the bottom LEDs as shown in the picture, but only one LED is working.

        # Do This

        -   Read and run the code to see how the program turns the bottom left LED on and off.
        -   Add more code to make both bottom LEDs turn on and off.
      CSD U6 colorLED on_2018: |-
        <img src="//curriculum.code.org/images/circuitplayground/colorLedonoff.gif" style="float: right; margin: 10px;">

        # colorLeds

        The color LEDs can use the same basic commands that you used with the red LED, such as `on()` and `off()`. This program should turn on and off the bottom LEDs as shown in the picture, but only one LED is working.

        # Do This

        -   Read and run the code to see how the program turns the bottom left LED on and off.
        -   Add more code to make both bottom LEDs turn on and off.
      CSD U6 colorLED on_2019: |-
        <img src="//curriculum.code.org/images/circuitplayground/colorLedonoff.gif" style="float: right; margin: 10px;">

        # colorLeds

        The color LEDs can use the same basic commands that you used with the red LED, such as `on()` and `off()`. This program should turn on and off the bottom LEDs as shown in the picture, but only one LED is working.

        # Do This

        -   Read and run the code to see how the program turns the bottom left LED on and off.
        -   Add more code to make both bottom LEDs turn on and off.
      CSD U6 colorLeds debug: |-
        <img src="https://images.code.org/e055be621221385d3503962bee5aa616-image-1491493475417.44.28.png" style="width:250px; float:right">

        # Debug: colorLeds

        Can you debug the index values so that the rainbow shows up on the board like in the picture?
      CSD U6 colorLeds debug_2018: |-
        <img src="https://images.code.org/723f036c40ef2770426d5d437e69fcde-image-1527268321449.png" style="width:250px; float:right">

        # Debug: colorLeds

        Can you debug the index values so that the rainbow shows up on the board like in the picture?
      CSD U6 colorLeds debug_2019: |-
        <img src="https://images.code.org/723f036c40ef2770426d5d437e69fcde-image-1527268321449.png" style="width:250px; float:right">

        # Debug: colorLeds

        Can you debug the index values so that the rainbow shows up on the board like in the picture?
      CSD U6 colorLeds intensity: |-
        # Changing Brightness

        The `intensity()` command lets you set an LED's brightness (or _intensity_) from 0 - 100. This program lets you choose three levels of brightness for your rainbow lights, but the medium level doesn't work yet.

        # Do This

        -   Read the program and see how the "Bright" and "Dim" buttons work.
        -   Add code to make the "Medium" button make the rainbow a medium level of brightness (between "Bright" and "Dim"). ([Show me where](#triggercallout=code_triggered))
      CSD U6 colorLeds intensity_2018: |-
        # Changing Brightness

        The `intensity()` command lets you set an LED's brightness (or _intensity_) from 0 - 100. This program lets you choose three levels of brightness for your rainbow lights, but the medium level doesn't work yet.

        # Do This

        -   Read the program and see how the "Bright" and "Dim" buttons work.
        -   Add code to make the "Medium" button make the rainbow a medium level of brightness (between "Bright" and "Dim"). ([Show me where](#triggercallout=code_triggered))
      CSD U6 colorLeds intensity_2019: |-
        # Changing Brightness

        The `intensity()` command lets you set an LED's brightness (or _intensity_) from 0 - 100. This program lets you choose three levels of brightness for your rainbow lights, but the medium level doesn't work yet.

        # Do This

        -   Read the program and see how the "Bright" and "Dim" buttons work.
        -   Add code to make the "Medium" button make the rainbow a medium level of brightness (between "Bright" and "Dim"). ([Show me where](#triggercallout=code_triggered))
      CSD U6 colorLeds light pattern: |-
        # Light Patterns

        This app already has one light pattern program, which can be activated by clicking a button. Notice that we put this pattern into a function to make the code cleaner and clearer.

        # Do This

        Create a light pattern function of your own - maybe the colors of your favorite holiday, college, sports team, or try to create an image with the lights.

        After you've created your new function, add a button and event handler so that you can switch between the two light patterns.
      CSD U6 colorLeds light pattern_2018: |-
        # Light Patterns

        This app already has one light pattern program, which can be activated by clicking a button. Notice that we put this pattern into a function to make the code cleaner and clearer.

        # Do This

        Create a light pattern function of your own - maybe the colors of your favorite holiday, college, sports team, or try to create an image with the lights.

        After you've created your new function, add a button and event handler so that you can switch between the two light patterns.
      CSD U6 colorLeds light pattern_2019: |-
        # Light Patterns

        This app already has one light pattern program, which can be activated by clicking a button. Notice that we put this pattern into a function to make the code cleaner and clearer.

        # Do This

        Create a light pattern function of your own - maybe the colors of your favorite holiday, college, sports team, or try to create an image with the lights.

        After you've created your new function, add a button and event handler so that you can switch between the two light patterns.
      CSD U6 colorLeds predict embed: |-
        # colorLEDs

        This program uses the colorLEDs array, which lets you control the color LEDs in your Circuit Playground.

        What do you think this code will do?  Write your prediction in the box below, then run the code to see what happens.
      CSD U6 colorLeds predict embed_2018: |-
        # colorLEDs

        This program uses the colorLEDs array, which lets you control the color LEDs in your Circuit Playground.

        What do you think this code will do?  Write your prediction in the box below, then run the code to see what happens.
      CSD U6 colorLeds predict embed_2019: |-
        # colorLEDs

        This program uses the colorLEDs array, which lets you control the color LEDs in your Circuit Playground.

        What do you think this code will do?  Write your prediction in the box below, then run the code to see what happens.
      CSD U6 create LED app: |-
        # Make Your App - The Screen

        Now, you and your partner can make your own app using the LED.  Discuss with your partner what kind of app you want to make.

        # Do This

        -   Discuss with your partner what screen elements you will need in your app.  Do you want...
            -   Buttons?
            -   Images?
            -   Text?
        -   In Design Mode, add the elements, making sure you give each a meaningful ID.
      CSD U6 create LED app 2: |-
        # Make Your App - The Code

        Next, you'll need to add the code that makes your app work.

        # Do This

        -   Discuss with your partner what code you will need in your app.  Do you need...
            -   Events?
            -   Variables?
            -   Setters?
            -   Random Numbers?
        -   In Code Mode, add in the code that will make your app work.
      CSD U6 create LED app 2_2018: |-
        # Make Your App - The Code

        Next, you'll need to add the code that makes your app work.

        # Do This

        -   Discuss with your partner what code you will need in your app.  Do you need...
            -   Events?
            -   Variables?
            -   Setters?
            -   Random Numbers?
        -   In Code Mode, add in the code that will make your app work.
      CSD U6 create LED app 2_2019: |-
        # Make Your App - The Code

        Next, you'll need to add the code that makes your app work.

        # Do This

        -   Discuss with your partner what code you will need in your app.  Do you need...
            -   Events?
            -   Variables?
            -   Setters?
            -   Random Numbers?
        -   In Code Mode, add in the code that will make your app work.
      CSD U6 create LED app_2018: |-
        # Make Your App - The Screen

        Now, you and your partner can make your own app using the LED.  Discuss with your partner what kind of app you want to make.

        # Do This

        -   Discuss with your partner what screen elements you will need in your app.  Do you want...
            -   Buttons?
            -   Images?
            -   Text?
        -   In Design Mode, add the elements, making sure you give each a meaningful ID.
      CSD U6 create LED app_2019: |-
        # Make Your App - The Screen

        Now, you and your partner can make your own app using the LED.  Discuss with your partner what kind of app you want to make.

        # Do This

        -   Discuss with your partner what screen elements you will need in your app.  Do you want...
            -   Buttons?
            -   Images?
            -   Text?
        -   In Design Mode, add the elements, making sure you give each a meaningful ID.
      CSD U6 design motorcycle: |-
        # Add Your Own Elements

        Now it's time to add some elements of your own. The motorcycle should be able to move up and down right now, but how can you control its speed?

        # Do This

        -   Add a slider in design mode.
            -   Make sure you set the min and max values of the slider in design mode.
        -   Create an event that will trigger when the slider value is changed.
        -   Add code to get the slider value and store it into the `speed` variable when the event is triggered.
      CSD U6 design motorcycle_2018: |-
        # Add Your Own Elements

        Now it's time to add some elements of your own. The motorcycle should be able to move up and down right now, but how can you control its speed?

        # Do This

        -   Add a slider in design mode.
            -   Make sure you set the min and max values of the slider in design mode.
        -   Create an event that will trigger when the slider value is changed.
        -   Add code to get the slider value and store it into the `speed` variable when the event is triggered.
      CSD U6 design motorcycle_2019: |-
        # Add Your Own Elements

        Now it's time to add some elements of your own. The motorcycle should be able to move up and down right now, but how can you control its speed?

        # Do This

        -   Add a slider in design mode.
            -   Make sure you set the min and max values of the slider in design mode.
        -   Create an event that will trigger when the slider value is changed.
        -   Add code to get the slider value and store it into the `speed` variable when the event is triggered.
      CSD U6 directional LEDs roll: |-
        # Roll

        This program should display "Left" or "Right" on the screen, depending on which way the board is tilted.

        # Do this

        -   Use the "roll" property of the accelerometer to determine whether the board is tilted to the left or right.
        -   Use a conditional to change the text for the "direction" element to be either "Left" or "Right", depending on the board's orientation.
      CSD U6 directional LEDs roll_2018: |-
        # Roll

        This program should display "Left" or "Right" on the screen, depending on which way the board is tilted.

        # Do this

        -   Use the "roll" property of the accelerometer to determine whether the board is tilted to the left or right.
        -   Use a conditional to change the text for the "direction" element to be either "Left" or "Right", depending on the board's orientation.
      CSD U6 directional LEDs roll_2019: |-
        # Roll

        This program should display "Left" or "Right" on the screen, depending on which way the board is tilted.

        # Do this

        -   Use the "roll" property of the accelerometer to determine whether the board is tilted to the left or right.
        -   Use a conditional to change the text for the "direction" element to be either "Left" or "Right", depending on the board's orientation.
      CSD U6 directional leds pitch: |-
        # Pitch

        This program lights the top LEDs (0 and 9) when you tilt the board forward. If you tilt the board back, the LEDs at the bottom (4 and 5) should light.

        # Do This

        -   Use the board's pitch to make LEDs 4 and 5 light up when you tilt the board back.
        -   Run your code and test it a few times.
      CSD U6 directional leds pitch_2018: |-
        # Pitch

        This program lights the top LEDs (0 and 9) when you tilt the board forward. If you tilt the board back, the LEDs at the bottom (4 and 5) should light.

        # Do This

        -   Use the board's pitch to make LEDs 4 and 5 light up when you tilt the board back.
        -   Run your code and test it a few times.
      CSD U6 directional leds pitch_2019: |-
        # Pitch

        This program lights the top LEDs (0 and 9) when you tilt the board forward. If you tilt the board back, the LEDs at the bottom (4 and 5) should light.

        # Do This

        -   Use the board's pitch to make LEDs 4 and 5 light up when you tilt the board back.
        -   Run your code and test it a few times.
      CSD U6 emoji race demo: |-
        # Emoji Race!

        This is an example of a race game that you'll build by the end of this lesson. To play, pair up with another student. The student on the left will the click the left button on the Circuit Playground as fast as they can, while the student on the right clicks the right button. Whoever can get their emoji to the bottom of the screen first wins.

        # Do This

        Turn to a classmate and make a list of the following information.

        -   What components of the board does this program use?
        -   What events is this program responding to?
        -   What functions might you create to make this program work?
      CSD U6 emoji race demo_2018: |-
        # Emoji Race!

        This is an example of a race game that you'll build by the end of this lesson. To play, pair up with another student. The student on the left will the click the left button on the Circuit Playground as fast as they can, while the student on the right clicks the right button. Whoever can get their emoji to the bottom of the screen first wins.

        # Do This

        Turn to a classmate and make a list of the following information.

        -   What components of the board does this program use?
        -   What events is this program responding to?
        -   What functions might you create to make this program work?
      CSD U6 emoji race demo_2019: |-
        # Emoji Race!

        This is an example of a race game that you'll build by the end of this lesson. To play, pair up with another student. The student on the left will the click the left button on the Circuit Playground as fast as they can, while the student on the right clicks the right button. Whoever can get their emoji to the bottom of the screen first wins.

        # Do This

        Turn to a classmate and make a list of the following information.

        -   What components of the board does this program use?
        -   What events is this program responding to?
        -   What functions might you create to make this program work?
      CSD U6 emotion machine 1: |-
        # Changing Images

        The first thing you'll need your emotion machine to do is change to the appropriate image when a button is clicked. If you look at the starting code, you'll see that we already added `setProperty("face", "image", "icon://fa-smile-o")` to change to a smiley face when you click happy.

        # Do This

        <div markdown="1" style="float:right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/uploads/select_image.gif)

        </div>

        Create an event handler for "sad\_button" and make it change to a sad emoji. To do this you'll need to set the "image" property of the image with id "face".

        _Tip: when you click the last dropdown in the `setProperty` block click "Choose..." to go to your media library. From there you can select an icon from our icon library or upload an image of your own._
      CSD U6 emotion machine 1_2018: |-
        # Changing Images

        The first thing you'll need your emotion machine to do is change to the appropriate image when a button is clicked. If you look at the starting code, you'll see that we already added `setProperty("face", "image", "icon://fa-smile-o")` to change to a smiley face when you click happy.

        # Do This

        <div markdown="1" style="float:right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/uploads/select_image.gif)

        </div>

        Create an event handler for "sad\_button" and make it change to a sad emoji. To do this you'll need to set the "image" property of the image with id "face".

        _Tip: when you click the last dropdown in the `setProperty` block click "Choose..." to go to your media library. From there you can select an icon from our icon library or upload an image of your own._
      CSD U6 emotion machine 1_2019: |-
        # Changing Images

        The first thing you'll need your emotion machine to do is change to the appropriate image when a button is clicked. If you look at the starting code, you'll see that we already added `setProperty("face", "image", "icon://fa-smile-o")` to change to a smiley face when you click happy.

        # Do This

        <div markdown="1" style="float:right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/uploads/select_image.gif)

        </div>

        Create an event handler for "sad\_button" and make it change to a sad emoji. To do this you'll need to set the "image" property of the image with id "face".

        _Tip: when you click the last dropdown in the `setProperty` block click "Choose..." to go to your media library. From there you can select an icon from our icon library or upload an image of your own._
      CSD U6 emotion machine 2: |-
        # Changing Color

        If you look back at the example for this app, you should notice that not only do the emojis change when you click a button, but their color changes as well.

        # Do This

        In each of the event handlers, set the "icon-color" property of "face". Pick a warm color for happy and a cool color for sad.
      CSD U6 emotion machine 2_2018: |-
        # Changing Color

        If you look back at the example for this app, you should notice that not only do the emojis change when you click a button, but their color changes as well.

        # Do This

        In each of the event handlers, set the "icon-color" property of "face". Pick a warm color for happy and a cool color for sad.
      CSD U6 emotion machine 2_2019: |-
        # Changing Color

        If you look back at the example for this app, you should notice that not only do the emojis change when you click a button, but their color changes as well.

        # Do This

        In each of the event handlers, set the "icon-color" property of "face". Pick a warm color for happy and a cool color for sad.
      CSD U6 emotion machine 3: |-
        # Setting Text

        Your happy and sad buttons should be almost completely functional now. The only thing they still need to do is change the text at the bottom of the screen.

        # Do This

        Make each of the event handlers change the text of "feeling" to the appropriate emotion (either "happy" or "sad")
      CSD U6 emotion machine 3_2018: |-
        # Setting Text

        Your happy and sad buttons should be almost completely functional now. The only thing they still need to do is change the text at the bottom of the screen.

        # Do This

        Make each of the event handlers change the text of "feeling" to the appropriate emotion (either "happy" or "sad")
      CSD U6 emotion machine 3_2019: |-
        # Setting Text

        Your happy and sad buttons should be almost completely functional now. The only thing they still need to do is change the text at the bottom of the screen.

        # Do This

        Make each of the event handlers change the text of "feeling" to the appropriate emotion (either "happy" or "sad")
      CSD U6 emotion machine 4: |-
        # Add Another Emotion

        In the example app you saw earlier, you could set the emotion to happy, sad, or meh. Your app only has happy and sad, can you add a third emotion?

        # Do This

        Using all of the same techniques you used for the happy and sad buttons, create a third emotion button. You could stick with meh, or you could pick an emotion of your own.

        When you're all done, feel free to add more emotions or features before submitting your final version.
      CSD U6 emotion machine 4_2018: |-
        # Add Another Emotion

        In the example app you saw earlier, you could set the emotion to happy, sad, or meh. Your app only has happy and sad, can you add a third emotion?

        # Do This

        Using all of the same techniques you used for the happy and sad buttons, create a third emotion button. You could stick with meh, or you could pick an emotion of your own.

        When you're all done, feel free to add more emotions or features before submitting your final version.
      CSD U6 emotion machine 4_2019: |-
        # Add Another Emotion

        In the example app you saw earlier, you could set the emotion to happy, sad, or meh. Your app only has happy and sad, can you add a third emotion?

        # Do This

        Using all of the same techniques you used for the happy and sad buttons, create a third emotion button. You could stick with meh, or you could pick an emotion of your own.

        When you're all done, feel free to add more emotions or features before submitting your final version.
      CSD U6 emotion machine example: |-
        # The Emotion Machine

        Check out this Emotion Machine app that you'll be building next. Try clicking on the buttons to see how it works.

        # Do This

        Try out the app, and then with a neighbor discuss:

        -   What events handlers does this app use?
        -   Which elements are being changed with code?
        -   Which properties are being changed when you click a button?
      CSD U6 emotion machine example_2018: |-
        # The Emotion Machine

        Check out this Emotion Machine app that you'll be building next. Try clicking on the buttons to see how it works.

        # Do This

        Try out the app, and then with a neighbor discuss:

        -   What events handlers does this app use?
        -   Which elements are being changed with code?
        -   Which properties are being changed when you click a button?
      CSD U6 emotion machine example_2019: |-
        # The Emotion Machine

        Check out this Emotion Machine app that you'll be building next. Try clicking on the buttons to see how it works.

        # Do This

        Try out the app, and then with a neighbor discuss:

        -   What events handlers does this app use?
        -   Which elements are being changed with code?
        -   Which properties are being changed when you click a button?
      CSD U6 for loop button array: |-
        # Looping Over Arrays

        One of the most powerful ways to use a for loop is to loop over an array, running code on each item in the array. We can do this by using the for loop counter variable (usually `i`) as the index of your array.

        # Do This

        This program should loop over the array `buttons` and do two things to each button - change the background color to red, and change the height to 50 px.

        -   Add a second `setProperty` block inside the loop
        -   Change the target to `buttons[i]`
        -   Set the "height" property to 50

        ![expandable](https://images.code.org/df3d514bae5c23de9e0fbdf1d7798432-image-1512431649584.png)
      CSD U6 for loop button array_2018: |-
        # Looping Over Arrays

        One of the most powerful ways to use a for loop is to loop over an array, running code on each item in the array. We can do this by using the for loop counter variable (usually `i`) as the index of your array.

        # Do This

        This program should loop over the array `buttons` and do two things to each button - change the background color to red, and change the height to 50 px.

        -   Add a second `setProperty` block inside the loop
        -   Change the target to `buttons[i]`
        -   Set the "height" property to 50

        ![expandable](https://images.code.org/df3d514bae5c23de9e0fbdf1d7798432-image-1512431649584.png)
      CSD U6 for loop button array_2019: |-
        # Looping Over Arrays

        One of the most powerful ways to use a for loop is to loop over an array, running code on each item in the array. We can do this by using the for loop counter variable (usually `i`) as the index of your array.

        # Do This

        This program should loop over the array `buttons` and do two things to each button - change the background color to red, and change the height to 50 px.

        -   Add a second `setProperty` block inside the loop
        -   Change the target to `buttons[i]`
        -   Set the "height" property to 50

        ![expandable](https://images.code.org/df3d514bae5c23de9e0fbdf1d7798432-image-1512431649584.png)
      CSD U6 for loop click exit: |-
        # Knowing When to Stop

        If you clicked the button too many times in the last level, you got an error. Whenever you're writing code that repeats, you should think about when to _stop_ repeating.

        # Do This

        This program is similar to the previous one, but there is a conditional inside the event handler. You'll need to complete the conditional so that we don't try to toggle an LED that doesn't exist.

        _Would your code work without changes for a board with more or fewer LEDs? If not, could you modify it so it would?_
      CSD U6 for loop click exit_2018: |-
        # Knowing When to Stop

        If you clicked the button too many times in the last level, you got an error. Whenever you're writing code that repeats, you should think about when to _stop_ repeating.

        # Do This

        This program is similar to the previous one, but there is a conditional inside the event handler. You'll need to complete the conditional so that we don't try to toggle an LED that doesn't exist.

        _Would your code work without changes for a board with more or fewer LEDs? If not, could you modify it so it would?_
      CSD U6 for loop click exit_2019: |-
        # Knowing When to Stop

        If you clicked the button too many times in the last level, you got an error. Whenever you're writing code that repeats, you should think about when to _stop_ repeating.

        # Do This

        This program is similar to the previous one, but there is a conditional inside the event handler. You'll need to complete the conditional so that we don't try to toggle an LED that doesn't exist.

        _Would your code work without changes for a board with more or fewer LEDs? If not, could you modify it so it would?_
      CSD U6 for loop click predict question: |-
        # Make a Prediction

        Read through the code for this program and predict what will happen each time the button is clicked?
      CSD U6 for loop click predict question_2018: |-
        # Make a Prediction

        Read through the code for this program and predict what will happen each time the button is clicked?
      CSD U6 for loop click predict question_2019: |-
        # Make a Prediction

        Read through the code for this program and predict what will happen each time the button is clicked?
      CSD U6 for loop images: |-
        # Constructing a for loop from scratch

        Now that you've had some practice modifying for loops to process arrays, let's see if you can do it yourself.

        # Do This

        We've provided the design elements and an array to start with, but the rest is on you.

        -   Add an event handler to respond to the "thumbsup\_button" being clicked
        -   Place a _for loop_ inside the event handler
        -   Modify the exit condition of the _for loop_ so that it will run until it gets to the end of the array `images`
        -   Inside your _for loop_ change the current image to "icon://fa-thumbs-o-up"

        _Challenge: Can you add a second button that turns all of the images back to thumbs down?_
      CSD U6 for loop images_2018: |-
        # Constructing a for loop from scratch

        Now that you've had some practice modifying for loops to process arrays, let's see if you can do it yourself.

        # Do This

        We've provided the design elements and an array to start with, but the rest is on you.

        -   Add an event handler to respond to the "thumbsup\_button" being clicked
        -   Place a _for loop_ inside the event handler
        -   Modify the exit condition of the _for loop_ so that it will run until it gets to the end of the array `images`
        -   Inside your _for loop_ change the current image to "icon://fa-thumbs-o-up"

        _Challenge: Can you add a second button that turns all of the images back to thumbs down?_
      CSD U6 for loop images_2019: |-
        # Constructing a for loop from scratch

        Now that you've had some practice modifying for loops to process arrays, let's see if you can do it yourself.

        # Do This

        We've provided the design elements and an array to start with, but the rest is on you.

        -   Add an event handler to respond to the "thumbsup\_button" being clicked
        -   Place a _for loop_ inside the event handler
        -   Modify the exit condition of the _for loop_ so that it will run until it gets to the end of the array `images`
        -   Inside your _for loop_ change the current image to "icon://fa-thumbs-o-up"

        _Challenge: Can you add a second button that turns all of the images back to thumbs down?_
      CSD U6 for loop led bonus 1_2018: |-
        # Challenge: Add More Buttons

        Extend the program by adding more buttons that change the board to different colors.

        # Do This

        Add your new buttons in Design Mode and create event handlers to respond to your buttons and change the LED colors.
      CSD U6 for loop led bonus 2_2018: |-
        # Challenge: Color Patterns

        Extend the program by adding more buttons that create different patterns of light.

        # Do This

        Add your new buttons in Design Mode and create event handlers to respond to your buttons and change the LED colors.

        _Hint: As you design your patterns, consider whether a function with parameters could help simplify your program._
      CSD U6 for loop led bonus 3_2018: |-
        # Challenge: Music

        Use what you learned in the Making Music lesson to make the board play music when the lights change.

        # Do This

        Create some arrays of notes for different songs and add code to your event handlers to play your music.
      CSD U6 for loop led color_2019: |-
        # Add Some Color

        Now that you can turn the LEDs on and off, it's time to add some color.

        # Do This

        Add event handlers to "button\_red" and "button\_green" that turns all the LEDs those colors.
      CSD U6 for loop led function: |-
        # Switching Colors with a Function

        We could write a for loop for each different color that we want to set LEDs to, but that would be a lot of duplicate code that's _almost_ the same. This is the perfect place to use a _function with a parameter_! You've seen and used functions with parameters before, but now you're going to make one from scratch.

        # Do This

        Create a function called `setLedsColor` that takes a parameter `color` and uses it to change the color of all of the LEDs

        -   At the bottom of your program, drag out a function with parameter block ![expandable](https://images.code.org/bd6ec3d9a651cf760a7dc8e1949658c0-image-1512761901850.png)
        -   Change the name from `myFunction` to `setLedsColor`
        -   Change the parameter name from `n` to `color`
        -   Inside your function, add a _for loop_ that repeats until it reaches the end of `colorLeds`
        -   Inside your _for loop_, set the color of the current led to the parameter `color` (eg. `colorLeds[i].color(color)`

        We'll add event handlers that use this function in the next level, but for now you can test your function by your program and typing this into the debug console: `setLedsColor("blue")`
      CSD U6 for loop led function call: |-
        # Calling Your Function

        Now that you've created a function that can behave differently based on the parameter it is passed, we can use it in multiple different event handlers to change the lights to different colors.

        # Do This

        We'll start simple by just creating an event handler for "button\_red"

        -   Create a new event handler to respond to "button\_red"
        -   Inside your event handler, add a "call function with parameter" block
            ![expandable](https://images.code.org/ee8e026b59682066eccfc4795b5c5036-image-1512771755527.png)
        -   Change the name from `myFunction` to `setLedsColor`
        -   Change the parameter from `n` to "red" (note the quotation marks!)
        -   Test your program, the "Red" button should turn all of your LEDs red
      CSD U6 for loop led function call_2018: |-
        # Calling Your Function

        Now that you've created a function that can behave differently based on the parameter it is passed, we can use it in multiple different event handlers to change the lights to different colors.

        # Do This

        We'll start simple by just creating an event handler for "button\_red"

        -   Create a new event handler to respond to "button\_red"
        -   Inside your event handler, add a "call function with parameter" block
            ![expandable](https://images.code.org/ee8e026b59682066eccfc4795b5c5036-image-1512771755527.png)
        -   Change the name from `myFunction` to `setLedsColor`
        -   Change the parameter from `n` to "red" (note the quotation marks!)
        -   Test your program, the "Red" button should turn all of your LEDs red
      CSD U6 for loop led function finish: |-
        # Finish the App

        If your red button worked, the only thing left is to call your new function when all of the remaining buttons is pressed.

        # Do This

        For each of the remaining buttons (green, blue, and white):

        -   Create a new event handler
        -   Call your `setLedsColor` function with the appropriate color ("green", "blue", or "white")
        -   Test your program to make sure all of the buttons work

        When you've got all of your buttons working properly, click "Submit" to turn your program in.
      CSD U6 for loop led function finish_2018: |-
        # Finish the App

        If your red button worked, the only thing left is to call your new function when all of the remaining buttons is pressed.

        # Do This

        For each of the remaining buttons (green, blue, and white):

        -   Create a new event handler
        -   Call your `setLedsColor` function with the appropriate color ("green", "blue", or "white")
        -   Test your program to make sure all of the buttons work

        When you've got all of your buttons working properly, click "Submit" to turn your program in.
      CSD U6 for loop led function_2018: |-
        # Switching Colors with a Function

        We could write a for loop for each different color that we want to set LEDs to, but that would be a lot of duplicate code that's _almost_ the same. This is the perfect place to use a _function with a parameter_! You've seen and used functions with parameters before, but now you're going to make one from scratch.

        # Do This

        Create a function called `setLedsColor` that takes a parameter `color` and uses it to change the color of all of the LEDs

        -   At the bottom of your program, drag out a function with parameter block ![expandable](https://images.code.org/bd6ec3d9a651cf760a7dc8e1949658c0-image-1512761901850.png)
        -   Change the name from `myFunction` to `setLedsColor`
        -   Change the parameter name from `n` to `color`
        -   Inside your function, add a _for loop_ that repeats until it reaches the end of `colorLeds`
        -   Inside your _for loop_, set the color of the current led to the parameter `color` (eg. `colorLeds[i].color(color)`

        We'll add event handlers that use this function in the next level, but for now you can test your function by your program and typing this into the debug console: `setLedsColor("blue")`
      CSD U6 for loop led off: |-
        # Turning all the Color LEDs Off

        Now that you've got one button to turn the color LEDs on, you can make another turn them off.

        # Do This

        Add an event handler to "button\_off" with a for loop that turns each color LED off.
      CSD U6 for loop led off_2018: |-
        # Turning all the Color LEDs Off

        Now that you've got one button to turn the color LEDs on, you can make another turn them off.

        # Do This

        Add an event handler to "button\_off" with a for loop that turns each color LED off.
      CSD U6 for loop led off_2019: |-
        # Turning all the Color LEDs Off

        Now that you've got one button to turn the color LEDs on, you can make another turn them off.

        # Do This

        Add an event handler to "button\_off" with a for loop that turns each color LED off.
      CSD U6 for loop led on: |-
        # Turning all the Color LEDs On

        Now that you know how to use a _for loop_ to process all of the elements in an array, you can turn on all of the Color LEDs much more easily than before.

        # Do This

        We're going to start an app that will control all of the Color LEDs on your board. The first step is to wire up the button that turns all of the LEDs on.

        -   Add an event handler for "button\_on"
        -   Place a _for loop_ in your event handler that repeats until it reaches in the end of the array `colorLeds`
        -   Inside the for loop, call `colorLeds[i].on()` to turn on the current color LED
      CSD U6 for loop led on_2018: |-
        # Turning all the Color LEDs On

        Now that you know how to use a _for loop_ to process all of the elements in an array, you can turn on all of the Color LEDs much more easily than before.

        # Do This

        Over the next few levels, you'll create an app that will control all of the Color LEDs on your board. The first step is to wire up the button that turns all of the LEDs on.  (Don't worry about the rest of the comments in the workspace.  You'll work on those in later levels.)

        -   Add an event handler for "button\_on"
        -   Place a _for loop_ in your event handler that repeats until it reaches in the end of the array `colorLeds`
        -   Inside the for loop, call `colorLeds[i].on()` to turn on the current color LED
      CSD U6 for loop led on_2019: |-
        # Turning all the Color LEDs On

        Now that you know how to use a _for loop_ to process all of the elements in an array, you can turn on all of the Color LEDs much more easily than before.

        # Do This

        Over the next few levels, you'll create an app that will control all of the Color LEDs on your board. The first step is to wire up the button that turns all of the LEDs on.  (Don't worry about the rest of the comments in the workspace.  You'll work on those in later levels.)

        -   Add an event handler for "button\_on"
        -   Place a _for loop_ in your event handler that repeats until it reaches in the end of the array `colorLeds`
        -   Inside the for loop, call `colorLeds[i].on()` to turn on the current color LED
      CSD U6 for loop led personalize_2019: |-
        # Make it Your Own

        Think of a new button that you would like in this project.  Don't forget about the other LED options, such as pulse and blink.

        # Do This

        Add a new button to the project, and program it with a behavior of your choice.
      CSD U6 for loop list.length: |-
        # Array Length

        In the last program we told the loop to run three times with the code `for (var i = 0; i < 3; i++)`. This works, but we could write smarter programs by using the length of the array to decide how many times to loop.

        # Do This

        Change the exit condition of this for loop so that it runs while `i < buttons.length`.
      CSD U6 for loop list.length_2018: |-
        # Array Length

        In the last program we told the loop to run three times with the code `for (var i = 0; i < 3; i++)`. This works, but we could write smarter programs by using the length of the array to decide how many times to loop.

        # Do This

        Change the exit condition of this for loop so that it runs while `i < buttons.length`.
      CSD U6 for loop list.length_2019: |-
        # Array Length

        In the last program we told the loop to run three times with the code `for (var i = 0; i < 3; i++)`. This works, but we could write smarter programs by using the length of the array to decide how many times to loop.

        # Do This

        Change the exit condition of this for loop so that it runs while `i < buttons.length`.
      CSD U6 frequency: |-
        # Frequency

        This buzzer controller has been expanded to control frequency as well, but the code isn't finished yet.

        # Do This

        -   Using the `duration` variable as a model, create a `frequency` variable that gets the value from the _frequency_ slider.
        -   Modify the line of code that makes the buzzer sound so that it uses the `frequency` variable rather than the default frequency of `500`.
        -   Run your code, then change the frequency and the duration to hear the difference in the buzzer.  (Don't forget to hit the button after you make a change!)
      CSD U6 frequency_2018: |-
        # Frequency

        This buzzer controller has been expanded to control frequency as well, but the code isn't finished yet.

        # Do This

        -   Using the `duration` variable as a model, create a `frequency` variable that gets the value from the _frequency_ slider.
        -   Modify the line of code that makes the buzzer sound so that it uses the `frequency` variable rather than the default frequency of `500`.
        -   Run your code, then change the frequency and the duration to hear the difference in the buzzer.  (Don't forget to hit the button after you make a change!)
      CSD U6 frequency_2019: |-
        # Frequency

        This buzzer controller has been expanded to control frequency as well, but the code isn't finished yet.

        # Do This

        -   Using the `duration` variable as a model, create a `frequency` variable that gets the value from the _frequency_ slider.
        -   Modify the line of code that makes the buzzer sound so that it uses the `frequency` variable rather than the default frequency of `500`.
        -   Run your code, then change the frequency and the duration to hear the difference in the buzzer.  (Don't forget to hit the button after you make a change!)
      CSD U6 functions paramters video_2019: |-
        ## Questions to Consider

        -   How do parameters make functions more useful?
        -   How do you know when you can combine multiple functions into one?
      CSD U6 game project board events: |-
        # Board Events

        Go back to the Events section of your activity guide and find any events that respond to your board (ones that would use `onBoardEvent()`). Create event handlers for each of those now. If these events rely on functions you haven't written yet, just leave yourself a comment in the code.
      CSD U6 game project board events_2018: |-
        # Board Events

        Go back to the Events section of your activity guide and find any events that respond to your board (ones that would use `onBoardEvent()`). Create event handlers for each of those now. If these events rely on functions you haven't written yet, just leave yourself a comment in the code.
      CSD U6 game project board events_2019: |-
        # Board Events

        Go back to the Events section of your activity guide and find any events that respond to your board (ones that would use `onBoardEvent()`). Create event handlers for each of those now. If these events rely on functions you haven't written yet, just leave yourself a comment in the code.
      CSD U6 game project finish: |-
        # Finishing Touches and Testing

        At this point you should have most of your program in place. Now you need to add whatever finishing touches are needed and do a little testing. When your app is ready, have your classmates try it out. See if you can find any bugs, confusing design choices, or missing features you'd like to work on.

        Once you're all done with this version of your program, click Submit to turn it in.
      CSD U6 game project finish_2018: |-
        # Finishing Touches and Testing

        At this point you should have most of your program in place. Now you need to add whatever finishing touches are needed and do a little testing. When your app is ready, have your classmates try it out. See if you can find any bugs, confusing design choices, or missing features you'd like to work on.

        Once you're all done with this version of your program, click Submit to turn it in.
      CSD U6 game project finish_2019: |-
        # Finishing Touches and Testing

        At this point you should have most of your program in place. Now you need to add whatever finishing touches are needed and do a little testing. When your app is ready, have your classmates try it out. See if you can find any bugs, confusing design choices, or missing features you'd like to work on.

        Once you're all done with this version of your program, click Submit to turn it in.
      CSD U6 game project functions call: |-
        # Calling your Functions

        With your functions defined, you can can call them wherever you need. Go through your event handlers, or anywhere else in your program that your function should be used, and add calls to the function you created.
      CSD U6 game project functions call_2018: |-
        # Calling your Functions

        With your functions defined, you can can call them wherever you need. Go through your event handlers, or anywhere else in your program that your function should be used, and add calls to the function you created.
      CSD U6 game project functions call_2019: |-
        # Calling your Functions

        With your functions defined, you can can call them wherever you need. Go through your event handlers, or anywhere else in your program that your function should be used, and add calls to the function you created.
      CSD U6 game project functions define: "# Define Your Functions\n\nDefine all
        of your functions at the bottom of the program, under the comment `// Create
        your functions here`.\n\nRight now we're only worrying about writing the function
        _definitions_, the part which looks like:\n\n    function myFunction() {\n
        \   \t// Things my function does\n    }"
      CSD U6 game project functions define_2018: "# Define Your Functions\n\nDefine
        all of your functions at the bottom of the program, under the comment `//
        Create your functions here`.\n\nRight now we're only worrying about writing
        the function _definitions_, the part which looks like:\n\n    function myFunction()
        {\n    \t// Things my function does\n    }"
      CSD U6 game project functions define_2019: "# Define Your Functions\n\nDefine
        all of your functions at the bottom of the program, under the comment `//
        Create your functions here`.\n\nRight now we're only worrying about writing
        the function _definitions_, the part which looks like:\n\n    function myFunction()
        {\n    \t// Things my function does\n    }"
      CSD U6 game project screen links: |-
        # UI Element Events

        Now that all of your screens are designed, you can add any event handlers that will respond to _screen interaction_. These should be listed in the "Events" section of your activity guide. If you run into new events that you hadn't thought of in the planning stage, make sure you add them to your project guide.

        Don't worry about making these completely functional yet. If your events rely on board elements or your own functions, we'll take care of that in later levels.
      CSD U6 game project screen links_2018: |-
        # UI Element Events

        Now that all of your screens are designed, you can add any event handlers that will respond to _screen interaction_. These should be listed in the "Events" section of your activity guide. If you run into new events that you hadn't thought of in the planning stage, make sure you add them to your project guide.

        Don't worry about making these completely functional yet. If your events rely on board elements or your own functions, we'll take care of that in later levels.
      CSD U6 game project screen links_2019: |-
        # UI Element Events

        Now that all of your screens are designed, you can add any event handlers that will respond to _screen interaction_. These should be listed in the "Events" section of your activity guide. If you run into new events that you hadn't thought of in the planning stage, make sure you add them to your project guide.

        Don't worry about making these completely functional yet. If your events rely on board elements or your own functions, we'll take care of that in later levels.
      CSD U6 game project screens: |-
        # Create Your Screens

        The first thing you'll need to do is create all of the screens that you've sketched in your planning guide.

        # Do This

        Use Design Mode to create all of the screens that your program will need. Don't forget to **pick sensible IDs** for all of your design elements.
      CSD U6 game project screens_2018: |-
        # Create Your Screens

        The first thing you'll need to do is create all of the screens that you've sketched in your planning guide.

        # Do This

        Use Design Mode to create all of the screens that your program will need. Don't forget to **pick sensible IDs** for all of your design elements.
      CSD U6 game project screens_2019: |-
        # Create Your Screens

        The first thing you'll need to do is create all of the screens that you've sketched in your planning guide.

        # Do This

        Use Design Mode to create all of the screens that your program will need. Don't forget to **pick sensible IDs** for all of your design elements.
      CSD U6 get toggle: |-
        # change

        This program has events that detect three different changes: the toggle switch, the interval slider, and the duration slider.  Because there are so many different things that cause the LED and buzzer to reset, it uses functions to organize the code.

        # Do This

        -   Read the `updateLED` function to see what it does.
        -   Add code to `updateBuzzer` to make the buzzer only turn on when the toggle switch is open.
      CSD U6 get toggle_2018: |-
        # change

        This program has events that detect three different changes: the toggle switch, the interval slider, and the frequency slider.  Because there are so many different things that cause the LED and buzzer to reset, it uses functions to organize the code.

        # Do This

        -   Read the `updateLED` function to see what it does.
        -   Add code to `updateBuzzer` to make the buzzer only turn on when the toggle switch is open.
      CSD U6 get toggle_2019: |-
        # change

        This program has events that detect three different changes: the toggle switch, the interval slider, and the frequency slider.  Because there are so many different things that cause the LED and buzzer to reset, it uses functions to organize the code.

        # Do This

        -   Read the `updateLED` function to see what it does.
        -   Add code to `updateBuzzer` to make the buzzer only turn on when the toggle switch is open.
      CSD U6 getProperty Demo: |-
        # Updating Properties

        Here's an example of an app that uses both `getProperty` and `setProperty` to update elements on the screen. Read through the code, and then test it out by filling out the input fields and clicking "Save"

        _Note: you don't need to change any code here, but read through the provided code to see how it works._
      CSD U6 getProperty Demo_2018: |-
        # Updating Properties

        Here's an example of an app that uses both `getProperty` and `setProperty` to update elements on the screen. Read through the code, and then test it out by filling out the input fields and clicking "Save"

        _Note: you don't need to change any code here, but read through the provided code to see how it works._
      CSD U6 getProperty Demo_2019: |-
        # Updating Properties

        Here's an example of an app that uses both `getProperty` and `setProperty` to update elements on the screen. Read through the code, and then test it out by filling out the input fields and clicking "Save"

        _Note: you don't need to change any code here, but read through the provided code to see how it works._
      CSD U6 getProperty board predict: Predict Level (See contained level for markdown)
      CSD U6 getProperty board predict_2018: Predict Level (See contained level for
        markdown)
      CSD U6 getProperty board predict_2019: Predict Level (See contained level for
        markdown)
      CSD U6 getProperty buzzer: |-
        # Using the Circuit Playground

        Here's the same code you saw in the last level, but this time there's another dropdown menu to control the buzzer.  You'll have to add the code to make it work.

        # Do This

        -   Using the LED code as a model, add new code inside the buttonL event that will play a long or short buzz according to the chosen value property of the *buzzer\_input* dropdown menu.
        -   Add new code that will turn the buzzer off when the right button is pressed.
            -   (Hint: the event is already in the code.)
      CSD U6 getProperty buzzer_2018: |-
        # Using the Circuit Playground

        Here's the same code you saw in the last level, but this time there's another dropdown menu to control the buzzer.  You'll have to add the code to make it work.

        # Do This

        -   Using the LED code as a model, add new code inside the buttonL event that will play a long or short buzz according to the chosen value property of the *buzzer\_input* dropdown menu.
        -   Add new code that will turn the buzzer off when the right button is pressed.
            -   (Hint: the event is already in the code.)
      CSD U6 getProperty buzzer_2019: |-
        # Using the Circuit Playground

        Here's the same code you saw in the last level, but this time there's another dropdown menu to control the buzzer.  You'll have to add the code to make it work.

        # Do This

        -   Using the LED code as a model, add new code inside the buttonL event that will play a long or short buzz according to the chosen value property of the *buzzer\_input* dropdown menu.
        -   Add new code that will turn the buzzer off when the right button is pressed.
            -   (Hint: the event is already in the code.)
      CSD U6 getProperty dropdown: |-
        # Dropdowns

        Text Inputs are nice when you want users to be able to enter _anything_ they want, but often you want to restrict them to just a few choices. For example, if you want your user to pick a color, you probably want to make sure they can only choose colors that will actually work.

        The provided dropdown with the ID "color\_input" allows a user to choose from a handful of background colors. When the "Set Color" button is clicked, the screen will turn that color.

        # Do This

        -   Inside the event block, create a variable called `color` and assign it a value using the `getProperty` block.
            -   Hint: You'll need to use the "value" property to get the user's choice.
        -   Use the `setProperty` block to set the "background-color" property of "screen1" to your variable `color`.
            -   Hint: Make sure you type `color` without quotation marks.
        -   Test your program by picking a color and clicking "Set Color".
      CSD U6 getProperty dropdown_2018: |-
        # Dropdowns

        Text Inputs are nice when you want users to be able to enter _anything_ they want, but often you want to restrict them to just a few choices. For example, if you want your user to pick a color, you probably want to make sure they can only choose colors that will actually work.

        The provided dropdown with the ID "color\_input" allows a user to choose from a handful of background colors. When the "Set Color" button is clicked, the screen will turn that color.

        # Do This

        -   Inside the event block, create a variable called `color` and assign it a value using the `getProperty` block.
            -   Hint: You'll need to use the "value" property to get the user's choice.
        -   Use the `setProperty` block to set the "background-color" property of "screen1" to your variable `color`.
            -   Hint: Make sure you type `color` without quotation marks.
        -   Test your program by picking a color and clicking "Set Color".
      CSD U6 getProperty dropdown_2019: |-
        # Dropdowns

        Text Inputs are nice when you want users to be able to enter _anything_ they want, but often you want to restrict them to just a few choices. For example, if you want your user to pick a color, you probably want to make sure they can only choose colors that will actually work.

        The provided dropdown with the ID "color\_input" allows a user to choose from a handful of background colors. When the "Set Color" button is clicked, the screen will turn that color.

        # Do This

        -   Inside the event block, create a variable called `color` and assign it a value using the `getProperty` block.
            -   Hint: You'll need to use the "value" property to get the user's choice.
        -   Use the `setProperty` block to set the "background-color" property of "screen1" to your variable `color`.
            -   Hint: Make sure you type `color` without quotation marks.
        -   Test your program by picking a color and clicking "Set Color".
      CSD U6 getProperty input: |-
        # getProperty and Variables

        This program uses the `name` variable to display the name typed into "name\_input" when the Submit button is clicked. It should do the same for *friend\_input* and *friend\_output*, but it's missing a block.

        # Do This

        -   Read the code and comments, then run the program to see how it works. (Make sure you type in your name and your friend's name before hitting "Submit".)
        -   Use a `getProperty` block to store the text property of *friend\_input* into your the variable "friend\_name". ([Show me where.](#triggercallout=code_triggered))
      CSD U6 getProperty input_2018: |-
        # getProperty and Variables

        This program uses the `name` variable to display the name typed into "name\_input" when the Submit button is clicked. It should do the same for *friend\_input* and *friend\_output*, but it's missing a block.

        # Do This

        -   Read the code and comments, then run the program to see how it works. (Make sure you type in your name and your friend's name before hitting "Submit".)
        -   Use a `getProperty` block to store the text property of *friend\_input* into your the variable "friend\_name". ([Show me where.](#triggercallout=code_triggered))
      CSD U6 getProperty input_2019: |-
        # getProperty and Variables

        This program uses the `name` variable to display the name typed into "name\_input" when the Submit button is clicked. It should do the same for *friend\_input* and *friend\_output*, but it's missing a block.

        # Do This

        -   Read the code and comments, then run the program to see how it works. (Make sure you type in your name and your friend's name before hitting "Submit".)
        -   Use a `getProperty` block to store the text property of *friend\_input* into your the variable "friend\_name". ([Show me where.](#triggercallout=code_triggered))
      CSD U6 getters debug: |-
        # LED and Buzzer Controller

        This program operates the LED and the buzzer, but it has some problems.

        # Do This

        -   Read the program to understand how it is supposed to work.
        -   Find and correct the bugs so that the program works properly.
      CSD U6 getters debug_2018: |-
        # LED and Buzzer Controller

        This program operates the LED and the buzzer, but it has some problems.

        # Do This

        -   Read the program to understand how it is supposed to work.
        -   Find and correct the bugs so that the program works properly.
      CSD U6 getters debug_2019: |-
        # LED and Buzzer Controller

        This program operates the LED and the buzzer, but it has some problems.

        # Do This

        -   Read the program to understand how it is supposed to work.
        -   Find and correct the bugs so that the program works properly.
      CSD U6 goalie: |-
        # Updating Values with Data

        In this program the goalie is trying to block the soccer ball, but right now the ball isn't moving.

        # Do This

        -   Use the counter pattern to update the ball's `x` value so that it moves across the screen.
      CSD U6 goalie_2018: |-
        # Updating Values with Data

        In this program the goalie is trying to block the soccer ball, but right now the ball isn't moving.

        # Do This

        -   Use the counter pattern to update the ball's `x` value so that it moves across the screen.
      CSD U6 goalie_2019: |-
        # Updating Values with Data

        In this program the goalie is trying to block the soccer ball, but right now the ball isn't moving.

        # Do This

        -   Use the counter pattern to update the ball's `x` value so that it moves across the screen.
      CSD U6 hardware software video_2019: |-
        ## Questions to Consider

        -   What's the difference between hardware and software?
        -   What does the operating system of a computer do?
      CSD U6 interval: Predict Level
      CSD U6 interval predict: |-
        # Interval

        Now we're using the slider to affect the behavior of the LED.   Just as we could change the values for the frequency and duration of the buzzer, we can change the value for the blink or pulse interval of the LED.

        # Do This

        -   Read the code and predict what the program will do, then hit "Run" to test your prediction.
      CSD U6 interval predict_2018: |-
        # Interval

        Now we're using the slider to affect the behavior of the LED.   Just as we could change the values for the frequency and duration of the buzzer, we can change the value for the blink or pulse interval of the LED.

        # Do This

        -   Read the code and predict what the program will do, then hit "Run" to test your prediction.
      CSD U6 interval predict_2019: |-
        # Interval

        Now we're using the slider to affect the behavior of the LED.   Just as we could change the values for the frequency and duration of the buzzer, we can change the value for the blink or pulse interval of the LED.

        # Do This

        -   Read the code and predict what the program will do, then hit "Run" to test your prediction.
      CSD U6 interval_2018: Predict Level
      CSD U6 interval_2019: Predict Level
      CSD U6 investigate orientation: "# Pitch and Roll\n\nThis program displays the
        board's pitch and roll, and it will also change colors depending on their
        values.  \n\n# Do This\n\nMake the program change the following colors by
        tilting the board to the correct pitch and roll.\n\n<div style=\"display:inline-block;
        background-color: skyblue; height: 30px; width:30px\">&nbsp;</div> Pitch:
        0 | Roll: -20\n\n<p/>\n\n<div style=\"display:inline-block; background-color:
        burlywood; height: 30px; width:30px\">&nbsp;</div> Pitch: 30 | Roll: 0\n\n<p/>\n\n<div
        style=\"display:inline-block; background-color: mistyrose; height: 30px; width:30px\">&nbsp;</div>
        Pitch: -15 | Roll: 10\n\n<p/>\n\n<div style=\"display:inline-block; background-color:
        yellowgreen; height: 30px; width:30px\">&nbsp;</div> Pitch: 5 | Roll: -25\n\n<p/>\n\n<div
        style=\"display:inline-block; background-color: thistle; height: 30px; width:30px\">&nbsp;</div>
        Pitch: 10 | Roll: 30\n\n<p/>\n\nWhich way should you tilt to get a positive
        pitch?\n\nWhich way should you tilt to get a negative roll?"
      CSD U6 investigate orientation_2018: "# Pitch and Roll\n\nThis program displays
        the board's pitch and roll, and it will also change colors depending on their
        values.  \n\n# Do This\n\nMake the program change the following colors by
        tilting the board to the correct pitch and roll.\n\n<div style=\"display:inline-block;
        background-color: skyblue; height: 30px; width:30px\">&nbsp;</div> Pitch:
        0 | Roll: -20\n\n<p/>\n\n<div style=\"display:inline-block; background-color:
        burlywood; height: 30px; width:30px\">&nbsp;</div> Pitch: 30 | Roll: 0\n\n<p/>\n\n<div
        style=\"display:inline-block; background-color: mistyrose; height: 30px; width:30px\">&nbsp;</div>
        Pitch: -15 | Roll: 10\n\n<p/>\n\n<div style=\"display:inline-block; background-color:
        yellowgreen; height: 30px; width:30px\">&nbsp;</div> Pitch: 5 | Roll: -25\n\n<p/>\n\n<div
        style=\"display:inline-block; background-color: thistle; height: 30px; width:30px\">&nbsp;</div>
        Pitch: 10 | Roll: 30\n\n<p/>\n\nWhich way should you tilt to get a positive
        pitch?\n\nWhich way should you tilt to get a negative roll?"
      CSD U6 investigate orientation_2019: "# Pitch and Roll\n\nThis program displays
        the board's pitch and roll, and it will also change colors depending on their
        values.  \n\n# Do This\n\nMake the program change the following colors by
        tilting the board to the correct pitch and roll.\n\n<div style=\"display:inline-block;
        background-color: skyblue; height: 30px; width:30px\">&nbsp;</div> Pitch:
        0 | Roll: -20\n\n<p/>\n\n<div style=\"display:inline-block; background-color:
        burlywood; height: 30px; width:30px\">&nbsp;</div> Pitch: 30 | Roll: 0\n\n<p/>\n\n<div
        style=\"display:inline-block; background-color: mistyrose; height: 30px; width:30px\">&nbsp;</div>
        Pitch: -15 | Roll: 10\n\n<p/>\n\n<div style=\"display:inline-block; background-color:
        yellowgreen; height: 30px; width:30px\">&nbsp;</div> Pitch: 5 | Roll: -25\n\n<p/>\n\n<div
        style=\"display:inline-block; background-color: thistle; height: 30px; width:30px\">&nbsp;</div>
        Pitch: 10 | Roll: 30\n\n<p/>\n\nWhich way should you tilt to get a positive
        pitch?\n\nWhich way should you tilt to get a negative roll?"
      CSD U6 iter create notes: |-
        # Music Player

        This program lets you play music by waving a wand over the different notes, but it's missing a function definition.

        # Do This

        -   Create a `checkNotes()` function that will call `checkNote(note)` on everything in the "notes" array.
      CSD U6 iter create notes_2018: |-
        # Music Player

        This program lets you play music by waving a wand over the different notes, but it's missing a function definition.

        # Do This

        -   Create a `checkNotes()` function that will call `checkNote(note)` on everything in the "notes" array.
      CSD U6 iter create notes_2019: |-
        # Music Player

        This program lets you play music by waving a wand over the different notes, but it's missing a function definition.

        # Do This

        -   Create a `checkNotes()` function that will call `checkNote(note)` on everything in the "notes" array.
      CSD U6 iter modify bugs: |-
        # Bug Shaker

        This program shakes bugs around when the board is shaken, but it's only working for one bug.

        # Do This

        -   Change the `moveBugs()` function so that it calls `moveBug(color)` on every bug color.
            -   (Hint: Look at the `detectHits()` function for clues how to do this.)
      CSD U6 iter modify bugs_2018: |-
        # Bug Shaker

        This program shakes bugs around when the board is shaken, but it's only working for one bug.

        # Do This

        -   Change the `moveBugs()` function so that it calls `moveBug(color)` on every bug color.
            -   (Hint: Look at the `detectHits()` function for clues how to do this.)
      CSD U6 iter modify bugs_2019: |-
        # Bug Shaker

        This program shakes bugs around when the board is shaken, but it's only working for one bug.

        # Do This

        -   Change the `moveBugs()` function so that it calls `moveBug(color)` on every bug color.
            -   (Hint: Look at the `detectHits()` function for clues how to do this.)
      CSD U6 iter predict bubbles: "![](https://images.code.org/52f474adbbc3bdd87aaae407c9ebf588-image-1515690462464.png)"
      CSD U6 iter predict bubbles contained: |-
        # Fish Bubbles

        This program uses the sound sensor in the same way as the clouds program.  How many bubbles will move when you blow on the board?
      CSD U6 iter predict bubbles contained_2018: |-
        # Fish Bubbles

        This program uses the sound sensor in the same way as the clouds program.  How many bubbles will move when you blow on the board?
      CSD U6 iter predict bubbles contained_2019: |-
        # Fish Bubbles

        This program uses the sound sensor in the same way as the clouds program.  How many bubbles will move when you blow on the board?
      CSD U6 iter predict bubbles_2018: "![](https://images.code.org/52f474adbbc3bdd87aaae407c9ebf588-image-1515690462464.png)"
      CSD U6 iter predict bubbles_2019: "![](https://images.code.org/52f474adbbc3bdd87aaae407c9ebf588-image-1515690462464.png)"
      CSD U6 light pattern challenge_2018: |-
        # Challenge: More Patterns

        Add some more patterns to your app. Find a partner and add their pattern as an option. Make sure to put each pattern into its own function.
      CSD U6 light pattern challenge_2019: |-
        # Challenge: More Patterns

        Add some more patterns to your app. Find a partner and add their pattern as an option. Make sure to put each pattern into its own function.
      CSD U6 light pattern off: |-
        # Turning It Off

        When you start this app your lights are off, but as soon as choose a pattern, there's no way to turn the lights back off!

        # Do This

        Create a function that turns all of the LEDs off, and then add a "Off" button to your app and make it turn off all of the color LEDs.
      CSD U6 light pattern off_2018: |-
        # Turning It Off

        When you start this app your lights are off, but as soon as choose a pattern, there's no way to turn the lights back off!

        # Do This

        Create a function that turns all of the LEDs off, and then add a "Off" button to your app and make it turn off all of the color LEDs.
      CSD U6 light pattern off_2019: |-
        # Turning It Off

        When you start this app your lights are off, but as soon as you choose a pattern, there's no way to turn the lights back off!

        # Do This

        Create a function that turns all of the LEDs off, and then add a "Off" button to your app and make it turn off all of the color LEDs.
      CSD U6 light show predict: |-
        # Put on a Light Show

        This app lets you put on a light show with the LED.

        Look at the code with your partner and answer the following questions:

        -   What does this line of code do: `setProperty("screen", "background-color", rgb(randomNumber(0,255), randomNumber(0,255), randomNumber(0,255)));`?

        Once you have answered the question, run the code and click the buttons to see what happens.
      CSD U6 light show predict_2018: |-
        # Put on a Light Show

        This app lets you put on a light show with the LED.

        Look at the code with your partner and answer the following questions:

        -   What does this line of code do: `setProperty("screen", "background-color", rgb(randomNumber(0,255), randomNumber(0,255), randomNumber(0,255)));`?

        Once you have answered the question, run the code and click the buttons to see what happens.
      CSD U6 light show predict_2019: |-
        # Put on a Light Show

        This app lets you put on a light show with the LED.

        Look at the code with your partner and answer the following questions:

        -   What does this line of code do: `setProperty("screen", "background-color", rgb(randomNumber(0,255), randomNumber(0,255), randomNumber(0,255)));`?

        Once you have answered the question, run the code and click the buttons to see what happens.
      CSD U6 move motorcycle: |-
        # Movement with Properties

        Earlier we used `setProperty` to change the x and y position of elements on the screen, but we could only move them to either a single specific location, or a random location. By using `getProperty` to find out an element's current position, we can use the **counter pattern** from Unit 3 to update that position.

        # Do This

        -   Read the program and discuss with your partner how the left button makes the motorcycle go up.
        -   Using the working left button as an example, program the right button to make the motorcycle go down.
      CSD U6 move motorcycle_2018: |-
        # Movement with Properties

        Earlier we used `setProperty` to change the x and y position of elements on the screen, but we could only move them to either a single specific location, or a random location. By using `getProperty` to find out an element's current position, we can use the **counter pattern** from Unit 3 to update that position.

        # Do This

        -   Read the program and discuss with your partner how the left button makes the motorcycle go up.
        -   Using the working left button as an example, program the right button to make the motorcycle go down.
      CSD U6 move motorcycle_2019: |-
        # Movement with Properties

        Earlier we used `setProperty` to change the x and y position of elements on the screen, but we could only move them to either a single specific location, or a random location. By using `getProperty` to find out an element's current position, we can use the **counter pattern** from Unit 3 to update that position.

        # Do This

        -   Read the program and discuss with your partner how the left button makes the motorcycle go up.
        -   Using the working left button as an example, program the right button to make the motorcycle go down.
      CSD U6 params create colors: |-
        # Color Picker

        In this program, pressing the buttons at the bottom of the screen changes the color of the images and the color LEDs.

        # Do This

        -   Create a function `chooseColor(color)` that changes each of the images and the color LEDs to the given color.
        -   Call your function in the event blocks so that all the buttons work.
      CSD U6 params create colors_2018: |-
        # Color Picker

        In this program, pressing the buttons at the bottom of the screen changes the color of the images and the color LEDs.

        # Do This

        -   Create a function `chooseColor(color)` that changes each of the images and the color LEDs to the given color.
        -   Call your function in the event blocks so that all the buttons work.
      CSD U6 params create colors_2019: |-
        # Color Picker

        In this program, pressing the buttons at the bottom of the screen changes the color of the images and the color LEDs.

        # Do This

        -   Create a function `chooseColor(color)` that changes each of the images and the color LEDs to the given color.
        -   Call your function in the event blocks so that all the buttons work.
      CSD U6 params modify clouds_2019: |-
        # Clouds

        This program makes the clouds move when you blow on the sound sensor, but it's not finished.

        # Do This

        -   Create a new function `moveCloud(name)` that will move any cloud.
            -   (Hint: you will use almost all the same code as the `moveCloud0` function)
        -   Call your new `moveCloud(name)` function inside the event block, once for each cloud name.
            -   (Hint: this is similar to how the `loopCloud(name)` function is called many times.)
      CSD U6 params predict contained: |-
        # Bug Crawl

        Look at the program below, paying special attention to the function `crawl(bug)`.  What happens if you press the left or right button?
      CSD U6 params predict contained_2018: |-
        # Bug Crawl

        Look at the program below, paying special attention to the function `crawl(bug)`.  What happens if you press the left or right button?
      CSD U6 params predict contained_2019: |-
        # Bug Crawl

        Look at the program below, paying special attention to the function `crawl(bug)`.  What happens if you press the left or right button?
      CSD U6 params starchaser 1: |-
        # Make your `loopStar(color)` function

        Right now only the red star works, so you'll need to change this code.

        # Do This

        -   Use the code from the `loopRedStar()` function to create a `loopStar(color)` function that will work with any star.
        -   Test your function by calling `loopStar("red")` and `loopStar("blue")` inside the `loopStars()` function.
      CSD U6 params starchaser 1_2018: |-
        # Make your `loopStar(color)` function

        Right now only the red star works, so you'll need to change this code.

        # Do This

        -   Use the code from the `loopRedStar()` function to create a `loopStar(color)` function that will work with any star.
        -   Test your function by calling `loopStar("red")` and `loopStar("blue")` inside the `loopStars()` function.
      CSD U6 params starchaser 1_2019: |-
        # Make your `loopStar(color)` function

        Right now only the red star works, so you'll need to change this code.

        # Do This

        -   Use the code from the `loopRedStar()` function to create a `loopStar(color)` function that will work with any star.
        -   Test your function by calling `loopStar("red")` and `loopStar("blue")` inside the `loopStars()` function.
      CSD U6 params starchaser 2: |-
        # Star Chaser

        Now you'll need to make all the stars loop around the screen.

        # Do This

        -   Use a `for` loop inside your `loopStars()` function to make every star in "starArray" loop around the screen.
      CSD U6 params starchaser 2_2018: |-
        # Star Chaser

        Now you'll need to make all the stars loop around the screen.

        # Do This

        -   Use a `for` loop inside your `loopStars()` function to make every star in "starArray" loop around the screen.
      CSD U6 params starchaser 2_2019: |-
        # Star Chaser

        Now you'll need to make all the stars loop around the screen.

        # Do This

        -   Use a `for` loop inside your `loopStars()` function to make every star in "starArray" loop around the screen.
      CSD U6 params starchaser 3: |-
        # Star Chaser

        All the stars loop, but you can still only catch the red star.

        # Do This

        -   Use code from the `moveRedStar()` function to make a `moveStar(color)` function that can move any star.
        -   Use code from the `checkRedStar()` function to make a `checkStar(color)` function that works for any star.
        -   Test your code by calling `checkStar("red")` and `checkStar("blue")` inside your event block.
      CSD U6 params starchaser 3_2018: |-
        # Star Chaser

        All the stars loop, but you can still only catch the red star.

        # Do This

        -   Use code from the `moveRedStar()` function to make a `moveStar(color)` function that can move any star.
        -   Use code from the `checkRedStar()` function to make a `checkStar(color)` function that works for any star.
        -   Test your code by calling `checkStar("red")` and `checkStar("blue")` inside your event block.
      CSD U6 params starchaser 3_2019: |-
        # Star Chaser

        All the stars loop, but you can still only catch the red star.

        # Do This

        -   Use code from the `moveRedStar()` function to make a `moveStar(color)` function that can move any star.
        -   Use code from the `checkRedStar()` function to make a `checkStar(color)` function that works for any star.
        -   Test your code by calling `checkStar("red")` and `checkStar("blue")` inside your event block.
      CSD U6 params starchaser 4: |-
        # Star Chaser

        Now make it work for all the stars

        # Do This

        -   Create a `checkStars()` functions that uses a `for` loop to check every star in the star array.
        -   Test your code by calling the `checkStars()` function inside the event block.
      CSD U6 params starchaser 4_2018: |-
        # Star Chaser

        Now make it work for all the stars

        # Do This

        -   Create a `checkStars()` functions that uses a `for` loop to check every star in the star array.
        -   Test your code by calling the `checkStars()` function inside the event block.
      CSD U6 params starchaser 4_2019: |-
        # Star Chaser

        Now make it work for all the stars

        # Do This

        -   Create a `checkStars()` functions that uses a `for` loop to check every star in the star array.
        -   Test your code by calling the `checkStars()` function inside the event block.
      CSD U6 params starchaser 5: |-
        # Star Chaser

        Now you can add extra stars, and your functions will work with them, too.

        # Do This

        -   In design mode, copy one of the stars, and change its name and color to "yellow".
        -   Add a new element, "yellow", to your star array.
        -   Test the game with your new star.
      CSD U6 params starchaser 5_2018: |-
        # Star Chaser

        Now you can add extra stars, and your functions will work with them, too.

        # Do This

        -   In design mode, copy one of the stars, and change its name and color to "yellow".
        -   Add a new element, "yellow", to your star array.
        -   Test the game with your new star.
      CSD U6 params starchaser 5_2019: |-
        # Star Chaser

        Now you can add extra stars, and your functions will work with them, too.

        # Do This

        -   In design mode, copy one of the stars, and change its name and color to "yellow".
        -   Add a new element, "yellow", to your star array.
        -   Test the game with your new star.
      CSD U6 params starchaser challenge 1_2018: |-
        # Star Chaser

        Now that you have a working game, you can challenge yourself with some different features.

        # Do This

        -   Start the user with 5 "lives", and take one away every time the user touches the **wrong** star.
        -   Make an end screen, and change to that screen when the user runs out of lives.
      CSD U6 params starchaser challenge 1_2019: |-
        # Star Chaser

        Now that you have a working game, you can challenge yourself with some different features.

        # Do This

        -   Start the user with 5 "lives", and take one away every time the user touches the **wrong** star.
        -   Make an end screen, and change to that screen when the user runs out of lives.
      CSD U6 params starchaser challenge 2_2018: |-
        # Star Chaser

        Now that you have a working game, you can challenge yourself with some different features.

        # Do This

        -   Make the player go back to the middle of the screen when the left button is pressed.
      CSD U6 params starchaser challenge 2_2019: |-
        # Star Chaser

        Now that you have a working game, you can challenge yourself with some different features.

        # Do This

        -   Make the player go back to the middle of the screen when the left button is pressed.
      CSD U6 params starchaser intro: |-
        # Star Chaser

        In this game, the user tries to catch the stars according to the color of the LEDs.

        # Do This

        -   Play the game, and discuss the following with a partner:
            -   What functions might this program need?
            -   What parameters should these functions have?
      CSD U6 params starchaser intro_2018: |-
        # Star Chaser

        In this game, the user tries to catch the stars according to the color of the LEDs.

        # Do This

        -   Play the game, and discuss the following with a partner:
            -   What functions might this program need?
            -   What parameters should these functions have?
      CSD U6 params starchaser intro_2019: |-
        # Star Chaser

        In this game, the user tries to catch the stars according to the color of the LEDs.

        # Do This

        -   Play the game, and discuss the following with a partner:
            -   What functions might this program need?
            -   What parameters should these functions have?
      CSD U6 predict LED button: Embedded Prediction
      CSD U6 predict LED button_2018: Embedded Prediction
      CSD U6 predict LED button_2019: Embedded Prediction
      CSD U6 random array notes: "# Random Song Generator\n\nYou're going to make
        a random song generator. When you press a button, a random note should play.
        Press it enough times, and you have yourself a beautiful arrangement of bleeps
        and bloops. \n\nYou used `randomNumber()` to select an element from an array
        in the previous lesson, so this should be familiar.\n\n# Do This\n\n-   Add
        code to randomly select a note from the `notes` array and play it.\n-   Run
        the program and press the left button to hear your buzzer sing its beautiful
        tune."
      CSD U6 random array notes_2018: "# Random Song Generator\n\nYou're going to
        make a random song generator. When you press a button, a random note should
        play. Press it enough times, and you have yourself a beautiful arrangement
        of bleeps and bloops. \n\nYou used `randomNumber()` to select an element from
        an array in the previous lesson, so this should be familiar.\n\n# Do This\n\n-
        \  Add code to randomly select a note from the `notes` array and play it.\n-
        \  Run the program and press the left button to hear your buzzer sing its
        beautiful tune."
      CSD U6 random array notes_2019: "# Random Song Generator\n\nYou're going to
        make a random song generator. When you press a button, a random note should
        play. Press it enough times, and you have yourself a beautiful arrangement
        of bleeps and bloops. \n\nYou used `randomNumber()` to select an element from
        an array in the previous lesson, so this should be familiar.\n\n# Do This\n\n-
        \  Add code to randomly select a note from the `notes` array and play it.\n-
        \  Run the program and press the left button to hear your buzzer sing its
        beautiful tune."
      CSD U6 sensor experiment embedded: |-
        # Sensor Experiment

        Run the program to the right and experiment with your board. Try interacting with your board in many different ways to figure out what each sensor might be. As you experiment with each sensor, discuss with a neighbor:

        -   What does this sensor measure?
        -   What is its maximum value?
        -   What is its minimum value?
      CSD U6 sensor experiment embedded_2018: |-
        # Sensor Experiment

        Run the program to the right and experiment with your board. Try interacting with your board in many different ways to figure out what each sensor might be. As you experiment with each sensor, discuss with a neighbor:

        -   What does this sensor measure?
        -   What is its maximum value?
        -   What is its minimum value?
      CSD U6 sensor experiment embedded_2019: |-
        # Sensor Experiment

        Run the program to the right and experiment with your board. Try interacting with your board in many different ways to figure out what each sensor might be. As you experiment with each sensor, discuss with a neighbor:

        -   What does this sensor measure?
        -   What is its maximum value?
        -   What is its minimum value?
      CSD U6 setProperty Text: |-
        # Changing the Text

        The `setProperty` block can be used to change lots of things about your design elements, including the text they contain.

        # Do This

        -   Drag out a `setProperty` block
        -   For the first parameter, select "name" (the element's id)
        -   For the second parameter, select "text" (the property you want to set)
        -   For the third parameter, write your name in quotes (the value to set)

        _Note: We've removed the Design Mode tab for now so you can practice working with `setProperty`, but it'll come back later once you're building apps of your own._
      CSD U6 setProperty Text_2018: |-
        # Changing the Text

        The `setProperty` block can be used to change lots of things about your design elements, including the text they contain.

        # Do This

        -   Drag out a `setProperty` block
        -   For the first parameter, select "name" (the element's id)
        -   For the second parameter, select "text" (the property you want to set)
        -   For the third parameter, write your name in quotes (the value to set)

        _Note: We've removed the Design Mode tab for now so you can practice working with `setProperty`, but it'll come back later once you're building apps of your own._
      CSD U6 setProperty Text_2019: |-
        # Changing the Text

        The `setProperty` block can be used to change lots of things about your design elements, including the text they contain.

        # Do This

        -   Drag out a `setProperty` block
        -   For the first parameter, select "name" (the element's id)
        -   For the second parameter, select "text" (the property you want to set)
        -   For the third parameter, write your name in quotes (the value to set)

        _Note: We've removed the Design Mode tab for now so you can practice working with `setProperty`, but it'll come back later once you're building apps of your own._
      CSD U6 setProperty hidden: |-
        # Hidden

        Design elements have a property called "hidden" that controls whether the element should show on screen or not. We are going to use this property to create an alarm app. Notice that when the program starts one button is hidden, and one is not.

        We have already set up an event handler for the "triggerAlarmButton" which will do two things when clicked:

        -   Change the "text" property of "statusLabel" to "on"
        -   Set the "hidden" property of "stopAlarmButton" to `false` (meaning it should _not_ be hidden)

        # Do This

        -   Run the program and click "Trigger Alarm" to see how it works
        -   Add code to the provided event handler that hides the "triggerAlarmButton"

        _Note: the button "stopAlarmButton" is already on the screen, but because its "hidden" property is marked true, it isn't shown when the program starts._
      CSD U6 setProperty hidden 2: |-
        # Showing/Hiding

        This alarm app isn't super useful if you can't turn the alarm off once it's been triggered. Let's fix that.

        # Do This

        Add a second `onEvent` block to watch for the "stopAlarmButton" to be clicked. Inside that block:

        -   Change the status text to "OFF"
        -   Hide the "stopAlarmButton"

        _Hint: "hidden" is a boolean property. If we used `false` to make the button show up, what should you use to make it hidden again?_
      CSD U6 setProperty hidden 2_2018: |-
        # Showing/Hiding

        This alarm app isn't super useful if you can't turn the alarm off once it's been triggered. Let's fix that.

        # Do This

        Add a second `onEvent` block to watch for the "stopAlarmButton" to be clicked. Inside that block:

        -   Change the status text to "OFF"
        -   Hide the "stopAlarmButton"

        _Hint: "hidden" is a boolean property. If we used `false` to make the button show up, what should you use to make it hidden again?_
      CSD U6 setProperty hidden 2_2019: |-
        # Showing/Hiding

        This alarm app isn't super useful if you can't turn the alarm off once it's been triggered. Let's fix that.

        # Do This

        Create a second event to watch for the "stopAlarmButton" to be clicked. When that event is triggered:

        -   Change the status text to "OFF"
        -   Hide the "stopAlarmButton"

        _Hint: "hidden" is a boolean property. If we used `false` to make the button show up, what should you use to make it hidden again?_
      CSD U6 setProperty hidden_2018: |-
        # Hidden

        Design elements have a property called "hidden" that controls whether the element should show on screen or not. We are going to use this property to create an alarm app. Notice that when the program starts one button is hidden, and one is not.

        We have already set up an event handler for the "triggerAlarmButton" which will do two things when clicked:

        -   Change the "text" property of "statusLabel" to "on"
        -   Set the "hidden" property of "stopAlarmButton" to `false` (meaning it should _not_ be hidden)

        # Do This

        -   Run the program and click "Trigger Alarm" to see how it works
        -   Add code to the provided event handler that hides the "triggerAlarmButton"

        _Note: the button "stopAlarmButton" is already on the screen, but because its "hidden" property is marked true, it isn't shown when the program starts._
      CSD U6 setProperty hidden_2019: |-
        # Hidden

        Design elements have a property called "hidden" that controls whether the element should show on screen or not. We are going to use this property to create an alarm app. Notice that when the program starts one button is hidden, and one is not.

        We have already set up an event handler for the "triggerAlarmButton" which will do two things when clicked:

        -   Change the "text" property of "statusLabel" to "on"
        -   Set the "hidden" property of "stopAlarmButton" to `false` (meaning it should _not_ be hidden)

        # Do This

        -   Run the program and click "Trigger Alarm" to see how it works
        -   Add code to the provided event handler that hides the "triggerAlarmButton"

        _Note: the button "stopAlarmButton" is already on the screen, but because its "hidden" property is marked true, it isn't shown when the program starts._
      CSD U6 setProperty xy: |-
        # Changing Position

        Every design element (except for the screen) has an "x" and a "y" property that controls its position.

        # Do This

        <div markdown="1" style="float:right">

        ![expandable](https://images.code.org/3a67642609071cf6766c296b8ca5a68e-image-1526944857178.png)

        </div>

        Using the `setProperty` block, move "red\_button" so that it matches the image to the right. (Click on the image to see the full size.)

        _Note: We've removed the Design Mode tab for now so you can practice working with setProperty, but it'll come back later once you're building apps of your own._
      CSD U6 setProperty xy click: |-
        # Changing With a Click

        It's not really useful to only set a property when your program is first run. After all, you could just do all of that in Design Mode. When you use an `onEvent` block with `setProperty`, you're able to do things you couldn't do with Design Mode alone.

        # Do This

        We've provided an empty `onEvent` block that's watching the "smiley" image. Inside the `onEvent` block, use two `setProperty` blocks to move the smiley somewhere else (it doesn't really matter where for now). Test your program by running it and clicking on the smiley.
      CSD U6 setProperty xy click_2018: |-
        # Changing With a Click

        It's not really useful to only set a property when your program is first run. After all, you could just do all of that in Design Mode. When you use an `onEvent` block with `setProperty`, you're able to do things you couldn't do with Design Mode alone.

        # Do This

        We've provided an empty `onEvent` block that's watching the "smiley" image. Inside the `onEvent` block, use two `setProperty` blocks to move the smiley somewhere else (it doesn't really matter where for now). Test your program by running it and clicking on the smiley.
      CSD U6 setProperty xy click_2019: |-
        # Changing With a Click

        It's not really useful to only set a property when your program is first run. After all, you could just do all of that in Design Mode. When you use an `onEvent` block with `setProperty`, you're able to do things you couldn't do with Design Mode alone.

        # Do This

        We've provided an empty `onEvent` block that's watching the "smiley" image. Inside the `onEvent` block, use two `setProperty` blocks to move the smiley somewhere else (it doesn't really matter where for now). Test your program by running it and clicking on the smiley.
      CSD U6 setProperty xy random: |-
        <img src="https://images.code.org/67c6cc358b235e2c2ae39f3f72a3e0b1-image-1507326303839.gif" style="float:right; max-width: 150px; margin: 10px;">

        # Randomization

        Moving on the first click is fine, but this smiley would be even cooler if it moved somewhere new _every time_ we clicked. Fortunately, we can use the `randomNumber` block to do just that.

        # Do This

        Instead of setting the "x" and "y" properties to a specific number, use the `randomNumber` block to pick a new random "x" and "y" each time the smiley is clicked.

        _Tip: The App Lab screen is 320 pixels wide by 450 pixels tall. What range of random numbers will ensure that the smiley is always visible on screen?_
      CSD U6 setProperty xy random_2018: |-
        <img src="https://images.code.org/67c6cc358b235e2c2ae39f3f72a3e0b1-image-1507326303839.gif" style="float:right; max-width: 150px; margin: 10px;">

        # Randomization

        Moving on the first click is fine, but this smiley would be even cooler if it moved somewhere new _every time_ we clicked. Fortunately, we can use the `randomNumber` block to do just that.

        # Do This

        Instead of setting the "x" and "y" properties to a specific number, use the `randomNumber` block to pick a new random "x" and "y" each time the smiley is clicked.

        _Tip: The App Lab screen is 320 pixels wide by 450 pixels tall. What range of random numbers will ensure that the smiley is always visible on screen?_
      CSD U6 setProperty xy random_2019: |-
        <img src="https://images.code.org/67c6cc358b235e2c2ae39f3f72a3e0b1-image-1507326303839.gif" style="float:right; max-width: 150px; margin: 10px;">

        # Randomization

        Moving on the first click is fine, but this smiley would be even cooler if it moved somewhere new _every time_ we clicked. Fortunately, we can use the `randomNumber` block to do just that.

        # Do This

        Instead of setting the "x" and "y" properties to a specific number, use the `randomNumber` block to pick a new random "x" and "y" each time the smiley is clicked.

        _Tip: The App Lab screen is 320 pixels wide by 450 pixels tall. What range of random numbers will ensure that the smiley is always visible on screen?_
      CSD U6 setProperty xy_2018: |-
        # Changing Position

        Every design element (except for the screen) has an "x" and a "y" property that controls its position.

        # Do This

        <div markdown="1" style="float:right">

        ![expandable](https://images.code.org/3a67642609071cf6766c296b8ca5a68e-image-1526944857178.png)

        </div>

        Using the `setProperty` block, move "red\_button" so that it matches the image to the right. (Click on the image to see the full size.)

        _Note: We've removed the Design Mode tab for now so you can practice working with setProperty, but it'll come back later once you're building apps of your own._
      CSD U6 setProperty xy_2019: |-
        # Changing Position

        Every design element (except for the screen) has an "x" and a "y" property that controls its position.

        # Do This

        <div markdown="1" style="float:right">

        ![expandable](https://images.code.org/3a67642609071cf6766c296b8ca5a68e-image-1526944857178.png)

        </div>

        Using the `setProperty` block, move "red\_button" so that it matches the image to the right. (Click on the image to see the full size.)

        _Note: We've removed the Design Mode tab for now so you can practice working with setProperty, but it'll come back later once you're building apps of your own._
      CSD U6 slider intro: |-
        # Sliders

        Last time, your users were only able to choose between a short and long buzz.  To give the user control over the exact duration of the buzzer, you'll want to use a slider.

        This slider lets users choose a value between 100 and 1000 for the duration of the buzz, but there's something not quite right about how it's working.

        # Do This

        -   Look over the code and find the bug that's keeping the duration from being set correctly.
            -   (Hint: Hover over the yellow triangles for clues as to what might be wrong with the code.)
      CSD U6 slider intro_2018: |-
        # Sliders

        Last time, your users were only able to choose between a short and long buzz.  To give the user control over the exact duration of the buzzer, you'll want to use a slider.

        This slider lets users choose a value between 100 and 1000 for the duration of the buzz, but there's something not quite right about how it's working.

        # Do This

        -   Look over the code and find the bug that's keeping the duration from being set correctly.
            -   (Hint: Hover over the yellow triangles for clues as to what might be wrong with the code.)
      CSD U6 slider intro_2019: |-
        # Sliders

        Last time, your users were only able to choose between a short and long buzz.  To give the user control over the exact duration of the buzzer, you'll want to use a slider.

        This slider lets users choose a value between 100 and 1000 for the duration of the buzz, but there's something not quite right about how it's working.

        # Do This

        -   Look over the code and find the bug that's keeping the duration from being set correctly.
            -   (Hint: Hover over the yellow triangles for clues as to what might be wrong with the code.)
      CSD U6 stillness game predict code: |-
        # Change with the Accelerometer

        This program uses the change event to increase a movement meter every time the board moves. When the movement meter reaches 100, the alarm will sound.

        # Do This

        This program has two bugs that you need to fix:

        -   The movement meter is being triggered by a button press, instead of the accelerometer's `change` event.
        -   The programmer forgot how to use the counter pattern to increase the movement variable.

        Once you have found the bugs, run the program and try to pass the board to your partner without setting off the alarm.
      CSD U6 stillness game predict code_2018: |-
        # Change with the Accelerometer

        This program uses the change event to increase a movement meter every time the board moves. When the movement meter reaches 100, the alarm will sound.

        # Do This

        This program has two bugs that you need to fix:

        -   The movement meter is being triggered by a button press, instead of the accelerometer's `change` event.
        -   The programmer forgot how to use the counter pattern to increase the movement variable.

        Once you have found the bugs, run the program and try to pass the board to your partner without setting off the alarm.
      CSD U6 stillness game predict code_2019: |-
        # Change with the Accelerometer

        This program uses the change event to increase a movement meter every time the board moves. When the movement meter reaches 100, the alarm will sound.

        # Do This

        This program has two bugs that you need to fix:

        -   The movement meter is being triggered by a button press, instead of the accelerometer's `change` event.
        -   The programmer forgot how to use the counter pattern to increase the movement variable.

        Once you have found the bugs, run the program and try to pass the board to your partner without setting off the alarm.
      CSD U6 test LED: |-
        # Control the LED

        Now that you know your board is working, you can try out the different LED blocks.

        # Do This

        -   Click "Run" and discuss with your partner how the code works.
        -   Try the different LED blocks to see what they do.
            -   Hint: Don't forget to hit "Reset" and run your code again after you change it
      CSD U6 test LED_2018: |-
        # Control the LED

        Now that you know your board is working, you can try out the different LED blocks.

        # Do This

        -   Click "Run" and discuss with your partner how the code works.
        -   Try the different LED blocks to see what they do.
            -   Hint: Don't forget to hit "Reset" and run your code again after you change it
      CSD U6 test LED_2019: |-
        # Control the LED

        Now that you know your board is working, you can try out the different LED blocks.

        # Do This

        -   Click "Run" and discuss with your partner how the code works.
        -   Try the different LED blocks to see what they do.
            -   Hint: Don't forget to hit "Reset" and run your code again after you change it
      CSD U6 tugowar buzzer: "# Winning Buzzer\n\nThat last thing that that is missing
        from your project guide's description of this project is the buzzer. It should
        buzz a high tone if player 1 wins and a low tone if player 2 wins. \n\n# Do
        This\n\nSo far we've been able to just use the `player` parameter directly
        to report which player won, but that won't work for buzzing different sounds.
        Inside the conditional that checks if a player won, you'll need to add _another_
        conditional that checks which player it was. If `player == \"red\"` the buzzer
        should play a high note, otherwise (else) it should play a low note."
      CSD U6 tugowar buzzer_2018: "# Winning Buzzer\n\nThat last thing that that is
        missing from your project guide's description of this project is the buzzer.
        It should buzz a high tone if player 1 wins and a low tone if player 2 wins.
        \n\n# Do This\n\nSo far we've been able to just use the `player` parameter
        directly to report which player won, but that won't work for buzzing different
        sounds. Inside the conditional that checks if a player won, you'll need to
        add _another_ conditional that checks which player it was. If `player == \"red\"`
        the buzzer should play a high note, otherwise (else) it should play a low
        note."
      CSD U6 tugowar buzzer_2019: "# Winning Buzzer\n\nThat last thing that that is
        missing from your project guide's description of this project is the buzzer.
        It should buzz a high tone if player 1 wins and a low tone if player 2 wins.
        \n\n# Do This\n\nSo far we've been able to just use the `player` parameter
        directly to report which player won, but that won't work for buzzing different
        sounds. Inside the conditional that checks if a player won, you'll need to
        add _another_ conditional that checks which player it was. If `player == \"red\"`
        the buzzer should play a high note, otherwise (else) it should play a low
        note."
      CSD U6 tugowar conditional: |-
        # Check for a Winner

        Your game should be pretty playable by now. Two players can click their respective buttons, and their emojies will race down the screen. We still need a way for a player to win though.

        # Do This

        Using a conditional inside the `checkWin()` function, you want to check if a player has won each time they click. For now, we can just use `console.log` to report the winner.

        -   Add an if statement to the bottom of `checkWin()`
        -   For the condition of your if statement, check if `player_y` is greater than 350 (or use the bottom of screen value you decided on in the last level)
        -   In your conditional, add a `console.log` that reports which player won
        -   Test your program to make sure that it reports a winner when one of the emojis makes it to the bottom of the screen
      CSD U6 tugowar conditional_2018: |-
        # Check for a Winner

        Your game should be pretty playable by now. Two players can click their respective buttons, and their emojies will race down the screen. We still need a way for a player to win though.

        # Do This

        Using a conditional inside the `checkWin()` function, you want to check if a player has won each time they click. For now, we can just use `console.log` to report the winner.

        -   Add an if statement to the bottom of `checkWin()`
        -   For the condition of your if statement, check if `player_y` is greater than 350 (or use the bottom of screen value you decided on in the last level)
        -   In your conditional, add a `console.log` that reports which player won
        -   Test your program to make sure that it reports a winner when one of the emojis makes it to the bottom of the screen
      CSD U6 tugowar conditional_2019: |-
        # Check for a Winner

        Your game should be pretty playable by now. Two players can click their respective buttons, and their emojies will race down the screen. We still need a way for a player to win though.

        # Do This

        Using a conditional inside the `checkWin()` function, you want to check if a player has won each time they click. For now, we can just use `console.log` to report the winner.

        -   Add an if statement to the bottom of `checkWin()`
        -   For the condition of your if statement, check if `player_y` is greater than 350 (or use the bottom of screen value you decided on in the last level)
        -   In your conditional, add a `console.log` that reports which player won
        -   Test your program to make sure that it reports a winner when one of the emojis makes it to the bottom of the screen
      CSD U6 tugowar demo: |-
        # Grab that Bug!

        This is an example of a tug o' war game that could be built in this lesson. To play, pair up with another student. The student on the left will the click the left button on the Circuit Playground as fast as they can, while the student on the right clicks the right button. Whoever can get the bug over to their side first wins.
      CSD U6 tugowar demo_2018: |-
        # Grab that Bug!

        This is an example of a tug o' war game that could be built in this lesson. To play, pair up with another student. The student on the left will the click the left button on the Circuit Playground as fast as they can, while the student on the right clicks the right button. Whoever can get the bug over to their side first wins.
      CSD U6 tugowar demo_2019: |-
        # Grab that Bug!

        This is an example of a tug o' war game that could be built in this lesson. To play, pair up with another student. The student on the left will the click the left button on the Circuit Playground as fast as they can, while the student on the right clicks the right button. Whoever can get the bug over to their side first wins.
      CSD U6 tugowar design 1: |-
        # Getting Started: Screen Design

        You should have already reviewed the planning guide for this project. Some of the work to turn this project guide into a working program has already been started. Based on the project guide you're going to do the rest of this work.

        # Do This

        We've already created a "start" screen and included a title and "play" button. Using your planning guide, finish creating this screen. Specifically you'll want to:

        -   Update the title text to say "Emoji Race"
        -   Add instructions for playing using the ID "instructions"

        Feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 1.5: |-
        # Game Screen Design

        We've also added a "game" screen where the game will be played. It just needs a couple of tweaks.

        # Do This

        Switch to the "game" screen and, using your planning guide, fix this screen by changing the color of the two emoji images.

        Feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 1.5_2018: |-
        # Game Screen Design

        We've also added a "game" screen where the game will be played. It just needs a couple of tweaks.

        # Do This

        Switch to the "game" screen and, using your planning guide, fix this screen by changing the color of the two emoji images.

        Feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 1.5_2019: |-
        # Game Screen Design

        We've also added a "game" screen where the game will be played. It just needs a couple of tweaks.

        # Do This

        Switch to the "game" screen and, using your planning guide, fix this screen by changing the color of the two emoji images.

        Feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 1_2018: |-
        # Getting Started: Screen Design

        You should have already reviewed the planning guide for this project. Some of the work to turn this project guide into a working program has already been started. Based on the project guide you're going to do the rest of this work.

        # Do This

        We've already created a "start" screen and included a title and "play" button. Using your planning guide, finish creating this screen. Specifically you'll want to:

        -   Update the title text to say "Emoji Race"
        -   Add instructions for playing using the ID "instructions"

        Feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 1_2019: |-
        # Getting Started: Screen Design

        You should have already reviewed the planning guide for this project. Some of the work to turn this project guide into a working program has already been started. Based on the project guide you're going to do the rest of this work.

        # Do This

        We've already created a "start" screen and included a title and "play" button. Using your planning guide, finish creating this screen. Specifically you'll want to:

        -   Update the title text to say "Emoji Race"
        -   Add instructions for playing using the ID "instructions"

        Feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 2: |-
        # Designing the Win Screen

        The final screen in this program shows who won. It's totally blank right now.

        # Do This

        Switch to "win" and design it based on your project guide. Make sure to pay close attention to the ID of each element. Once you've added the required elements, feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 2_2018: |-
        # Designing the Win Screen

        The final screen in this program shows who won. It's totally blank right now.

        # Do This

        Switch to "win" and design it based on your project guide. Make sure to pay close attention to the ID of each element. Once you've added the required elements, feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 2_2019: |-
        # Designing the Win Screen

        The final screen in this program shows who won. It's totally blank right now.

        # Do This

        Switch to "win" and design it based on your project guide. Make sure to pay close attention to the ID of each element. Once you've added the required elements, feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar final: |-
        # Make It Your Own

        You just walked through someone else's plan for creating a program, so now it's time to make it your own. What additional features or challenges do you want to create?

        # Do This

        Select one of the challenges below to add to the game or come up with a challenge of your own.

        -   Change the look and layout of the screens
        -   Use the buzzer or the led to show when one of the buttons has been clicked
        -   Set the "icon-color" property of "winner\_image" to the winning color
        -   Make the emojis start out sad, change to meh halfway, and end up happy
        -   Use a variable and conditionals to make sure that players can only move their emojis when the "game" screen is showing
      CSD U6 tugowar final_2018: |-
        # Make It Your Own

        You just walked through someone else's plan for creating a program, so now it's time to make it your own. What additional features or challenges do you want to create?

        # Do This

        Select one of the challenges below to add to the game or come up with a challenge of your own.

        -   Change the look and layout of the screens
        -   Use the buzzer or the led to show when one of the buttons has been clicked
        -   Set the "icon-color" property of "winner\_image" to the winning color
        -   Make the emojis start out sad, change to meh halfway, and end up happy
        -   Use a variable and conditionals to make sure that players can only move their emojis when the "game" screen is showing
      CSD U6 tugowar final_2019: |-
        # Make It Your Own

        You just walked through someone else's plan for creating a program, so now it's time to make it your own. What additional features or challenges do you want to create?

        # Do This

        Select one of the challenges below to add to the game or come up with a challenge of your own.

        -   Change the look and layout of the screens
        -   Use the buzzer or the led to show when one of the buttons has been clicked
        -   Set the "icon-color" property of "winner\_image" to the winning color
        -   Make the emojis start out sad, change to meh halfway, and end up happy
        -   Use a variable and conditionals to make sure that players can only move their emojis when the "game" screen is showing
      CSD U6 tugowar setProperty: |-
        # Display the Winner

        The winning screen doesn't actually know _who_ won the game. Let's fix that now.

        # Do This

        Before each call to `setScreen`, add a `setProperty` block to change the "text" property of "winner" to display the actual winner.
      CSD U6 tugowar setProperty_2018: |-
        # Display the Winner

        The winning screen doesn't actually know _who_ won the game. Let's fix that now.

        # Do This

        Before the call to `setScreen`, add a `setProperty` block to change the "text" property of "winner" to display the actual winner.
      CSD U6 tugowar setProperty_2019: |-
        # Display the Winner

        The winning screen doesn't actually know _who_ won the game. Let's fix that now.

        # Do This

        Before the call to `setScreen`, add a `setProperty` block to change the "text" property of "winner" to display the actual winner.
      CSD U6 tugowar setScreen: |-
        # Change to the Win Screen

        Now that we have conditionals to check which player won, let's switch to the "win" screen when a player wins.

        # Do This

        Inside the conditional that you've created to check if a player has reached the bottom, add a `setScreen` block to change to the "win" screen. Make sure you test that your new code works before moving on!
      CSD U6 tugowar setScreen_2018: |-
        # Change to the Win Screen

        Now that we have conditionals to check which player won, let's switch to the "win" screen when a player wins.

        # Do This

        Inside the conditional that you've created to check if a player has reached the bottom, add a `setScreen` block to change to the "win" screen. Make sure you test that your new code works before moving on!
      CSD U6 tugowar setScreen_2019: |-
        # Change to the Win Screen

        Now that we have conditionals to check which player won, let's switch to the "win" screen when a player wins.

        # Do This

        Inside the conditional that you've created to check if a player has reached the bottom, add a `setScreen` block to change to the "win" screen. Make sure you test that your new code works before moving on!
      CSD U6 tugowar variables 1: "# The startGame() Function\n\nIf you look at the
        events we planned for in the planning guide, you may notice that two events
        do essentially the same thing. The events that respond to both the \"play\"
        and \"replay\" buttons could be written with identical code, but duplicate
        code like this is a perfect place to use a **function**.\n\n# Do This\n\nWe've
        already added blocks that call a new function named `startGame()` to the appropriate
        event handlers, and we've created an empty function for you to build out.
        \n\n-   Find the `startGame()` function definition ( [Show me where](#triggercallout=block_trigger)
        )\n-   Inside the function:\n    -   Move both of the emoji images to the
        top of the screen by setting each one's \"y\" property to 0\n    -   Change
        the screen to \"game\"\n\nOnce you've fleshed out the `startGame()` function,
        try clicking the \"play\" button to check that it's working."
      CSD U6 tugowar variables 1_2018: "# The startGame() Function\n\nIf you look
        at the events we planned for in the planning guide, you may notice that two
        events do essentially the same thing. The events that respond to both the
        \"play\" and \"replay\" buttons could be written with identical code, but
        duplicate code like this is a perfect place to use a **function**.\n\n# Do
        This\n\nWe've already added blocks that call a new function named `startGame()`
        to the appropriate event handlers, and we've created an empty function for
        you to build out. \n\n-   Find the `startGame()` function definition ( [Show
        me where](#triggercallout=block_trigger) )\n-   Inside the function:\n    -
        \  Move both of the emoji images to the top of the screen by setting each
        one's \"y\" property to 0\n    -   Change the screen to \"game\"\n\nOnce you've
        fleshed out the `startGame()` function, try clicking the \"play\" button to
        check that it's working."
      CSD U6 tugowar variables 1_2019: "# The startGame() Function\n\nIf you look
        at the events we planned for in the planning guide, you may notice that two
        events do essentially the same thing. The events that respond to both the
        \"play\" and \"replay\" buttons could be written with identical code, but
        duplicate code like this is a perfect place to use a **function**.\n\n# Do
        This\n\nWe've already added blocks that call a new function named `startGame()`
        to the appropriate event handlers, and we've created an empty function for
        you to build out. \n\n-   Find the `startGame()` function definition ( [Show
        me where](#triggercallout=block_trigger) )\n-   Inside the function:\n    -
        \  Move both of the emoji images to the top of the screen by setting each
        one's \"y\" property to 0\n    -   Change the screen to \"game\"\n\nOnce you've
        fleshed out the `startGame()` function, try clicking the \"play\" button to
        check that it's working."
      CSD U6 tugowar variables 2: |-
        # Functions with Parameters

        Most of the existing functions you use in App Lab need inputs, or **parameters**, to pass the function necessary information. For example, when changing a screen, you pass the ID of that screen as a parameter, which looks like `setScreen("win")`.

        These parameters show up as a variable that can be used inside the function, and you can create functions that use parameters too!

        # Do This

        <div markdown="1" style="float:right; margin: 20px;">

        ![expandable](https://images.code.org/2eccd9fc9f4887aefd0bfd94d7f332c8-image-1509402194012.png)

        <br/>

        Click to expand

        </div>

        Instead of a separate function to move the red and the blue players, we've created one function called `movePlayer()` that takes the ID of the player image as a parameter called `player`. Inside this function, you can use `player` any place where you need to specify the ID of the player you want to control.

        -   Find where `movePlayer()` is defined ( [Show me where](#triggercallout=block_trigger) )
        -   Inside the `movePlayer()` definition:
            -   Get the current "y" property of the player and save it to a variable called `player_y`
            -   Increase the value of `player_y` by 10
            -   Set the "y" property of player to your new value `player_y`

        Once you've added your code, test it. You should see that _both buttons_ work even though we only created one function - cool!
      CSD U6 tugowar variables 2_2018: |-
        # Functions with Parameters

        Most of the existing functions you use in App Lab need inputs, or **parameters**, to pass the function necessary information. For example, when changing a screen, you pass the ID of that screen as a parameter, which looks like `setScreen("win")`.

        These parameters show up as a variable that can be used inside the function, and you can create functions that use parameters too!

        # Do This

        <div markdown="1" style="float:right; margin: 20px;">

        ![expandable](https://images.code.org/2eccd9fc9f4887aefd0bfd94d7f332c8-image-1509402194012.png)

        <br/>

        Click to expand

        </div>

        Instead of a separate function to move the red and the blue players, we've created one function called `movePlayer()` that takes the ID of the player image as a parameter called `player`. Inside this function, you can use `player` any place where you need to specify the ID of the player you want to control.

        -   Find where `movePlayer()` is defined ( [Show me where](#triggercallout=block_trigger) )
        -   Inside the `movePlayer()` definition:
            -   Get the current "y" property of the player and save it to a variable called `player_y`
            -   Increase the value of `player_y` by 10
            -   Set the "y" property of player to your new value `player_y`

        Once you've added your code, test it. You should see that _both buttons_ work even though we only created one function - cool!
      CSD U6 tugowar variables 2_2019: |-
        # Functions with Parameters

        Most of the existing functions you use in App Lab need inputs, or **parameters**, to pass the function necessary information. For example, when changing a screen, you pass the ID of that screen as a parameter, which looks like `setScreen("win")`.

        These parameters show up as a variable that can be used inside the function, and you can create functions that use parameters too!

        # Do This

        <div markdown="1" style="float:right; margin: 20px;">

        ![expandable](https://images.code.org/2eccd9fc9f4887aefd0bfd94d7f332c8-image-1509402194012.png)

        <br/>

        Click to expand

        </div>

        Instead of a separate function to move the red and the blue players, we've created one function called `movePlayer()` that takes the ID of the player image as a parameter called `player`. Inside this function, you can use `player` any place where you need to specify the ID of the player you want to control.

        -   Find where `movePlayer()` is defined ( [Show me where](#triggercallout=block_trigger) )
        -   Inside the `movePlayer()` definition:
            -   Get the current "y" property of the player and save it to a variable called `player_y`
            -   Increase the value of `player_y` by 10
            -   Set the "y" property of player to your new value `player_y`

        Once you've added your code, test it. You should see that _both buttons_ work even though we only created one function - cool!
      CSD U6 tugowar variables 3: |-
        # The checkWin() Function

        The last function that you need to figure out is the `checkWin()` function, which after each player is moved, and is used to both check if that player has made it to the bottom of the screen and to announce the winner if necessary. For now, we're just going to find out where the player is and log it to the console.

        # Do This

        Just like the `movePlayer()` function, `checkWin()` takes a single parameter called `player`. If you call `checkWin("red")`, then the variable `player` will have the value "red".

        -   Find where the function is defined ( [Show me where](#triggercallout=block_trigger) )
        -   Create a variable called `player_y` and assign it the "y" property of the player
        -   Use either a `console.log()` command or a watcher to report the value of `player_y`
        -   Play the game with only one button, keeping an eye on the value of `player_y`
        -   Decide what value of `player_y` should be considered the bottom of the screen
      CSD U6 tugowar variables 3_2018: |-
        # The checkWin() Function

        The last function that you need to figure out is the `checkWin()` function, which after each player is moved, and is used to both check if that player has made it to the bottom of the screen and to announce the winner if necessary. For now, we're just going to find out where the player is and log it to the console.

        # Do This

        Just like the `movePlayer()` function, `checkWin()` takes a single parameter called `player`. If you call `checkWin("red")`, then the variable `player` will have the value "red".

        -   Find where the function is defined ( [Show me where](#triggercallout=block_trigger) )
        -   Create a variable called `player_y` and assign it the "y" property of the player
        -   Use either a `console.log()` command or a watcher to report the value of `player_y`
        -   Play the game with only one button, keeping an eye on the value of `player_y`
        -   Decide what value of `player_y` should be considered the bottom of the screen
      CSD U6 tugowar variables 3_2019: |-
        # The checkWin() Function

        The last function that you need to figure out is the `checkWin()` function, which after each player is moved, and is used to both check if that player has made it to the bottom of the screen and to announce the winner if necessary. For now, we're just going to find out where the player is and log it to the console.

        # Do This

        Just like the `movePlayer()` function, `checkWin()` takes a single parameter called `player`. If you call `checkWin("red")`, then the variable `player` will have the value "red".

        -   Find where the function is defined ( [Show me where](#triggercallout=block_trigger) )
        -   Create a variable called `player_y` and assign it the "y" property of the player
        -   Use either a `console.log()` command or a watcher to report the value of `player_y`
        -   Play the game with only one button, keeping an eye on the value of `player_y`
        -   Decide what value of `player_y` should be considered the bottom of the screen
      CSD What Makes a Computer a Computer Video_2019: |-
        ## Questions to think about

        -   What made computers different from machines that came before them?
        -   Think of something you do on the computer. What sort of input, output, storage, and processing are happening?
      CSD sprite movement challenge_2018: |-
        # Vylepši svoj obrázok

        Urob svoj obrázok ešte zaujímavejším - zmeň viacero nastavení pre postavy alebo doň pridaj tých postáv ešte viac!
      CSD sprite movement challenge_2019: |-
        # Vylepši svoj obrázok

        Urob svoj obrázok ešte zaujímavejším - zmeň viacero nastavení pre postavy alebo doň pridaj tých postáv ešte viac!
      CSD-Arrays: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      CSD-Arrays_2018: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      CSD-Arrays_2019: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      'CSD: Animating Sprite Movement_2019': |-
        ## Questions to Consider

        -   What is the counter pattern?
        -   How does the counter pattern move sprites across the screen?
      'CSD: Animation Tab_2019': |-
        ## Questions to Consider

        -   What are the steps to adding an image to a sprite?
        -   What are the different ways to get an image?
      'CSD: Drawing in Game Lab 1_2019': |-
        ## Questions to Consider

        -   Where can you find more information about how to use the blocks?
        -   What’s an advantage of using block mode?
      'CSD: Drawing in Game Lab 2_2019': |-
        ## Questions to Consider

        -   What’s the difference between stroke and fill?
      'CSD: For Loop_2019': |-
        ## Questions to Consider

        -   What are loops used for in programming?
        -   Where do loops go in your code?
      'CSD: Introduction to the Draw Loop_2019': |-
        ## Question to Consider

        -   What does the draw function do?
      'CSD: Sprite Velocity_2019': |-
        ## Otázky na zamyslenie

        -   Prečo je lepšie použiť blok "velocity" namiesto počítacieho bloku?
        -   Uveď príklad, kedy by si ho takto využil/a
      'CSD: Sprites in Game Lab_2019': |-
        ## Questions to Consider

        -   What is a sprite?
        -   What are properties?
        -   What problem do sprites solve?
      CSDU2 - PW - Class Style Personal Site: |-
        # Free Play Styling

        Your turn to decide what you want to style! Play with the classes styling and RGB colors to improve your personal website.

        -   Make sure you have completed the checklist below.
        -   Take a screenshot of your home page and save it somewhere on your computer so you can find it later.

        ## Checklist

        -   Somewhere on your site, give text a particular color using RGB values.
        -   On your lists page, give all the list items the same background color.
        -   Use classes to style at least two other elements of your personal website
      CSDU2 - PW - Class Style Personal Site_2018: |-
        # Free Play Styling

        Your turn to decide what you want to style! Play with the classes styling and RGB colors to improve your personal website.

        -   Make sure you have completed the checklist below.
        -   Take a screenshot of your home page and save it somewhere on your computer so you can find it later.

        ## Checklist

        -   Somewhere on your site, give text a particular color using RGB values.
        -   On your lists page, give all the list items the same background color.
        -   Use classes to style at least two other elements of your personal website
      CSDU2 - PW - Class Style Personal Site_2019: |-
        # Free Play Styling

        Your turn to decide what you want to style! Play with the classes styling and RGB colors to improve your personal website.

        -   Make sure you have completed the checklist below.
        -   Take a screenshot of your home page and save it somewhere on your computer so you can find it later.

        ## Checklist

        -   Somewhere on your site, give text a particular color using RGB values.
        -   On your lists page, give all the list items the same background color.
        -   Use classes to style at least two other elements of your personal website
      CSDU2 - Type Anything: |-
        <img src="https://images.code.org/12ffe6980a25a3664eabe69be487a921-image-1485384422334.jpg" style="width:400px; float:right">

        # Welcome to Web Lab!

        The platform you are in is called Web Lab. There are three main parts of the screen in Web Lab.

        # Do This

        -   Try typing something in the workspace.
        -   Press <img src="https://images.code.org/678619085e37ea6ce904ac8abd0df2f2-image-1493226906609.14.45 AM.png" style="width:150px"> to see it in the preview area!
      CSDU2 - Type Anything_2018: |-
        <img src="https://images.code.org/12ffe6980a25a3664eabe69be487a921-image-1485384422334.jpg" style="width:400px; float:right">

        # Welcome to Web Lab!

        The platform you are in is called Web Lab. There are three main parts of the screen in Web Lab.

        # Do This

        -   Try typing something in the workspace.
        -   Press <img src="https://images.code.org/678619085e37ea6ce904ac8abd0df2f2-image-1493226906609.14.45 AM.png" style="width:150px"> to see it in the preview area!
      CSDU2 - Type Anything_2019: |-
        <img src="https://images.code.org/12ffe6980a25a3664eabe69be487a921-image-1485384422334.jpg" style="width:400px; float:right">

        # Welcome to Web Lab!

        The platform you are in is called Web Lab. There are three main parts of the screen in Web Lab.

        # Do This

        -   Try typing something in the workspace.
        -   Press <img src="https://images.code.org/678619085e37ea6ce904ac8abd0df2f2-image-1493226906609.14.45 AM.png" style="width:150px"> to see it in the preview area!
      CSDU4 - Design Mode - 15: "# Design Mode\n\nWelcome to Design Mode in AppLab!
        This will allow you to easily create a digital version of your sketched wireframes
        by adding UI elements from the toolbox and and styling them the way you want!\n\n**Goal:**
        Add a large red button to your app using Design Mode.\n\n# Do This:\n\n-   **Find
        <img src=\"https://images.code.org/278f146396c80c97d0b5d73f24d48aec-image-1444335461720.png\">
        in the Design Toolbox** and drag out a button and resize it. \n\n-   **Change
        the button text** to say \"Click Me\".\n\n-   **Set the color for the button**
        to be red.\n\n<img src=\"https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif\"
        style=\"width: 500px; float: middle\">"
      CSDU4 - Design Mode - 16: |-
        # Activate Your Button

        In the last lesson you focused on laying out a page of your app in Design Mode. This is a great, quick way to get the visual side of an app figured out, but it's not very functional. If you click any of the buttons you added, nothing happens. Now you're work towards adding some basic functionality by making the buttons in your app actually _do_ something!

        **Goal:** Add code using Design Mode to make the button respond to a click.

        # Do This

        Your starter app has two elements, a _label_ with the id `titleLabel` and a _button_ with the id `changeTitleButton`. To start with, you're going to make the button log a message to the console when it's clicked.

        -   In Design Mode, **click on the provided button to edit its properties**
        -   Click on the **Events** tab
        -   Insert an `onEvent` from Design Mode by clicking **Insert and show code** under the **Events Tab**.
        -   Take a look at the block that was added to the **Code Mode** tab.
        -   Run the program, click your button and **look for the output in the _Debug Console_** below the workspace instead of the app window. We will discuss the _Debug Console_ on the next level.
      CSDU4 - Design Mode - 17: |-
        # Updating IDs and Debugging with Console Log

        Here we have a couple buttons with event handlers and `console.log` statements, but they are all switched around!

        We should have given the buttons better ID names so we could tell the difference based on the ID. **Can you update the ID names and `console.log` messages to match the correct button?**

        # Do This

        -   **Change the IDs** of the buttons in Design Mode to more descriptive names.

        -   Switch to Code Mode and notice that the **ID pulldowns have been updated to include the new IDs**. (You still need to select the correct ID from the pulldown menu.)

        -   **Update the `console.log` messages** to match the buttons.
      CSDU4 - Design Mode - 18: "# Layering and Deleting\n\n<img src=\"https://images.code.org/9e620f70869de438c4f0c66663686876-image-1444678130772.gif\"
        style=\"width: 200px; float: right\">User interface elements can overlap one
        another, so you'll want the ability to change the order or **depth** at which
        each one is rendered. \n\nIf you **scroll to the bottom of the Properties
        tab** you'll find buttons which allow you to easily **delete or change the
        depth** of an element.\n\n-   **Delete an Element** by selecting it (clicking
        on it) in the design view and then clicking **Delete** in the properties tab.\n-
        \  **Change the depth** of elements by using the double or single arrows.\n
        \   -   Click the double arrow to send all the way to front or back.\n    -
        \  Click the single arrow to move up or down one layer.\n\n# Do This:\n\nUse
        the **delete** and **depth** tools to **create the \"After\" image**\n\n<table>\n<tr>\n\t<th
        style=\"text-align:center\">Before</th>\n    <th style=\"text-align:center\">After</th>\n</tr>\n<tr>\n\t<td
        align=center><img src=\"https://images.code.org/023f749ecb58c91869a4eacab6701203-image-1444685187662.png\"
        style=\"width:200px ; border: solid 1px black\"></td>\n    <td style=\"text-align:center\"><img
        src=\"https://images.code.org/e45fc7d451c071683fd3b59466b106b0-image-1444684677212.png\"
        style=\"width:200px; border: solid 1px black\"></td>\n</tr>\n</table>"
      CSDU4 - Design Mode - 19: "# Second Screen\n\nMost apps have more than one screen
        or page that each have different contents. With Design Mode you can quickly
        add new screen to your app.\n\n# Do This\n\nYou're going to add a second screen
        to your app and add a button to that screen. Make sure you're using good IDs!\n\n-
        \  Drag out <img src=\"https://images.code.org/4337b39cfd797ed9289b70fb6cb365fb-image-1444353631083.17.39
        PM.png\" style=\"width: 50px\"> from the Design Toolbox into your app. You
        now have two screens!\n-   Using Design Mode create a button in your new screen.
        \ <img src=\"https://images.code.org/bbf464e2fc94bacba39407d6842f2336-image-1478300698068.04.35
        PM.png\" style=\"width: 150px\"> \n-   Set the IDs for your screens and buttons
        to something meaningful, for example _\"homeScreen\"_, _\"detailsScreen\"_,
        _\"homeButton\"_, and _\"detailsButton\"_\n\nYou can always use the screen
        dropdown menu at the top of the app window to switch between your screens
        <img src=\"https://images.code.org/404e0b3f520a413c8a5e62e74b70bb19-image-1478300388689.58.59
        PM.png\" style=\"width: 150px\"> "
      CSDU4 - Design Mode - 20: |-
        # Switching Screens

        You can set which screen is showing in your app with the `setScreen()` command. If you're working in blocks you can select which screen you want to switch to from a dropdown.

        ![](<https://images.code.org/615fae136488e1e6d1349e4383388e08-image-1478303858022.13.25 PM.png>)

        # Do This

        You'll use an `onEvent()` block with `setScreen()` to make the two buttons in your app switch between the two screen.

        -   Drag out two `onEvent()` blocks
        -   Set the IDs for your `onEvent()` blocks for each of your two buttons
        -   Place a `setScreen` block inside each of the `onEvent` blocks.
        -   Choose the appropriate screen from the dropdown of each `setScreen` block.
        -   Test out your app to make sure your buttons let you switch back and forth between the two screens
      CSDU4 - Design Mode - 21: "# Adding Images\n\nSometimes the functionality you
        want to represent in your prototype is too complicated to do with just the
        default buttons and fields. If you want to mock up more advanced interfaces
        (like a map), the easiest way to do it is with an image\n\n# Do This\n\n-
        \  Find and download an image of a map you like\n-   Drag an image element
        into your app ![](<https://images.code.org/cda02ffe3acc869822a551f5cdbf8606-image-1444667846363.37.14
        AM.png>)\n-   Choose your image ![](<https://images.code.org/e5b9571ae54af60a3ae597b787e741ea-image-1444667688762.34.42
        AM.png>)\n    -   **URLs** can be added directly into the \"picture\" field.
        \ \n    -   **Upload images** by clicking \"Choose\".\n    -   **Note:** You
        can always see all the files you've uploaded by clicking the gear at the top
        of the toolbox. ![](<https://images.code.org/53b405b771bc11bf5d24c84c878c80dd-image-1444668067826.35.10
        AM.png>)\n-   Make sure to give your image a good ID!"
      CSDU4 - Design Mode - 3: |-
        # How Do Events Work?

        Event-driven apps are made up of elements that can trigger events (such as buttons) and pieces of code called **event handlers**. Event handlers are commands that "watch" for certain events to occur in your program, and then run some function when an event occurs.

        When you first create an event handler from Design Mode, puts a `console.log()` block inside to help you test the event, but you can put just about any code you want inside the event hander.

        # Do This

        The toolbox has a new block called `setText` which allows you to change the text of an element on the screen. You're going to modify the button event handler so that it changes the title text when clicked.

        -   Drag out a `setText()` block to the _inside_ of the `onEvent()` callback function (where the `console.log()` block currently is)
        -   From the block's dropdown, select "titleLabel" (the id of the element you want to change)
        -   In the block's second input, replace "text" with a new title for the app
        -   Run your program and click the button to see it work
      CSDU4 - Design Mode - 4: |-
        # IDs

        The `id` (we'll typically write **ID**) is a **unique identifier** used for each element in the app.

        Each element that appears in the app must have a **unique ID**. In fact, if you try to run a program that has two buttons with same ID you will get a warning message in the console.

        # Do This

        While each element you drag out in Design Mode gets a default ID, they aren't really that helpful (like `button1` and `button2`), so you should get in the habit of creating your own IDs.

        -   Change the ID of your "click me" button to something useful (like `redButton`)
        -   Drag out a second button
        -   Make the second button blue and give it an ID of `blueButton`
      CSDU4 - Design Mode Icons: |-
        <img src="https://images.code.org/2b405319f597910b1563ae607958171c-image-1475866226306.49.51.png" style="width: 200px; float:right">

        # Icons

        Icons help users find the right functionality while also making your app feel more polished.

        # Do This

        Add a few icons to your app. For each icon:

        -   Drag out an image element
        -   Next to the "Picture" field click "Choose..."
        -   Click on the "Icons" tab and select one
        -   Make sure to give your image a good ID! (do we still need to say it?)
      CSDU4 Connecting Screens: |-
        # Navigating

        Once you start adding multiple screens to an app, you need to make sure that users can always get where they want to go. In the next two levels you'll learn how to make sure a user can always get back to the "homepage" of your app.

        # Do This

        Here's an app with four different pages, but only the "red" screen is linked so far. In this level you'll make the other two buttons take the user to the correct screen.

        -   Add two `onEvent()` blocks, one each for the "greenButton" and "blueButton"
        -   Use the `setScreen()` block to make each button switch to the appropriate screen
        -   Test your app to make sure both buttons work. For example, when you click the green button you should go to the green screen.
      CSDU4 Connecting Screens Getting Back: |-
        # Navigating Back

        Someone using your app can now get to each of the red, green, and blue pages, but they can't get back to the homepage. You can add buttons and event handlers of your own to help them do this.

        # Do This

        Create buttons and event handlers to help a user navigate back to the "home" screen

        -   Use Design Mode to create a button inside each of the "red", "green", and "blue" screens. Make sure to give them descriptive IDs.
        -   Back in your code drag in three `onEvent()` blocks, one for each of the three buttons you made.
        -   Inside each `onEvent()` block use the `setScreen()` block that switches back to your "home" screen.
        -   Test your app. You should now be able to navigate back to the home screen from each of the other three.
      CSDU4 Crowdsource App Demo: |-
        # Crowdsourcing

        Crowdsourcing apps allow multiple users to submit content for everyone to use (the _source_ of content is the _crowd_). This app is very similar to the list app, with the main difference being that the list app assumes a single user while this app allows all users to add to the same list and "like" submissions.

        This example uses a list of crowdsourced information for simplicity, but you could display any kind of information in many different formats. A crowdsourcing app could allow users to submit locations for display on a map, images to go into a gallery, or any number of other types of information.

        # Functionality Missing from this Prototype

        -   User's can't create accounts or profiles
        -   Submitted things aren't added to the list
        -   Clicking on the "like" icons don't change their state
      CSDU4 Crowdsource App Demo_2018: |-
        # Crowdsourcing

        Crowdsourcing apps allow multiple users to submit content for everyone to use (the _source_ of content is the _crowd_). This app is very similar to the list app, with the main difference being that the list app assumes a single user while this app allows all users to add to the same list and "like" submissions.

        This example uses a list of crowdsourced information for simplicity, but you could display any kind of information in many different formats. A crowdsourcing app could allow users to submit locations for display on a map, images to go into a gallery, or any number of other types of information.

        # Functionality Missing from this Prototype

        -   User's can't create accounts or profiles
        -   Submitted things aren't added to the list
        -   Clicking on the "like" icons don't change their state
      CSDU4 Crowdsource App Demo_2019: |-
        # Crowdsourcing

        Crowdsourcing apps allow multiple users to submit content for everyone to use (the _source_ of content is the _crowd_). This app is very similar to the list app, with the main difference being that the list app assumes a single user while this app allows all users to add to the same list and "like" submissions.

        This example uses a list of crowdsourced information for simplicity, but you could display any kind of information in many different formats. A crowdsourcing app could allow users to submit locations for display on a map, images to go into a gallery, or any number of other types of information.

        # Functionality Missing from this Prototype

        -   User's can't create accounts or profiles
        -   Submitted things aren't added to the list
        -   Clicking on the "like" icons don't change their state
      CSDU4 Decision App Demo: |-
        # Decision Maker

        Similar to the quiz app, a decision tree app asks the user a series of questions. The primary difference between the two is that a decision tree doesn't check for right or wrong answers, but instead attempts to give the user a suggestion or help them make a decision based on their answers.

        This simple decision maker asks only three questions,  but more advanced ones actually take the form of a tree as seen below:

        ![](https://images.code.org/aeadfca116011949855c169905ff89a3-image-1476823699500.png)

        Depending on the user's answer to each question, they're given a different page for the next question. This allows the app to gradually narrow down the decision one question at a time. This type of app can be really useful to help users understand complex processes - for example, you might introduce a recycling program by using a decision tree app to help users figure out which bin to sort items into - first asking what material it's made out of, then whether it is clean or not, and so on.

        # Functionality Missing from this Prototype

        -   Question buttons don't direct you to different screens
        -   The final screen doesn't give you a recommended decision
      CSDU4 Decision App Demo_2018: |-
        # Decision Maker

        Similar to the quiz app, a decision tree app asks the user a series of questions. The primary difference between the two is that a decision tree doesn't check for right or wrong answers, but instead attempts to give the user a suggestion or help them make a decision based on their answers.

        This simple decision maker asks only three questions,  but more advanced ones actually take the form of a tree as seen below:

        ![](https://images.code.org/aeadfca116011949855c169905ff89a3-image-1476823699500.png)

        Depending on the user's answer to each question, they're given a different page for the next question. This allows the app to gradually narrow down the decision one question at a time. This type of app can be really useful to help users understand complex processes - for example, you might introduce a recycling program by using a decision tree app to help users figure out which bin to sort items into - first asking what material it's made out of, then whether it is clean or not, and so on.

        # Functionality Missing from this Prototype

        -   Question buttons don't direct you to different screens
        -   The final screen doesn't give you a recommended decision
      CSDU4 Decision App Demo_2019: |-
        # Decision Maker

        Similar to the quiz app, a decision tree app asks the user a series of questions. The primary difference between the two is that a decision tree doesn't check for right or wrong answers, but instead attempts to give the user a suggestion or help them make a decision based on their answers.

        This simple decision maker asks only three questions,  but more advanced ones actually take the form of a tree as seen below:

        ![](https://images.code.org/aeadfca116011949855c169905ff89a3-image-1476823699500.png)

        Depending on the user's answer to each question, they're given a different page for the next question. This allows the app to gradually narrow down the decision one question at a time. This type of app can be really useful to help users understand complex processes - for example, you might introduce a recycling program by using a decision tree app to help users figure out which bin to sort items into - first asking what material it's made out of, then whether it is clean or not, and so on.

        # Functionality Missing from this Prototype

        -   Question buttons don't direct you to different screens
        -   The final screen doesn't give you a recommended decision
      CSDU4 Design Mode Video_2019: |-
        ## Questions to Consider

        -   Where in App Lab can you design the user interface of your app?
        -   What are some types of elements that you can add to your app?
      CSDU4 Functionality visible: |-
        # Controlling Visibility

        Earlier in this lesson, when we were proposing ways to simplify the quiz app, we mentioned that it was possible to show or hide design elements with code. App Lab has two functions that let you control the visibility of an element:

        -   `hideElement()` makes the specified element invisible
        -   `showElement()` makes the specified element visible

        # Do This

        The provided app has an image and two buttons.

        -   Attach an event handler to the "Hide" button that hides the image when clicked
        -   Attach an event handler to the "Show" button that shows the image when clicked
      CSDU4 List App Demo: |-
        # List Manager

        The list manager app allows user to keep track of the state of information and can be modified to serve many different purposes, such as checking in / out loaned items, tracking personal To Dos, or keeping track of where things are in a multi-step process.

        While this example focuses on a single list, more sophisticated list apps could allow the user to create multiple lists, or even move items between lists. This app also only keeps track of the name of an item and whether or not it is "Done," but it could be extended to track and organize any amount of information about the list items.

        # Functionality Missing from this Prototype

        -   Delete buttons don't actually delete items from the list
        -   Add screen doesn't actually add an item to the list
      CSDU4 List App Demo_2018: |-
        # List Manager

        The list manager app allows user to keep track of the state of information and can be modified to serve many different purposes, such as checking in / out loaned items, tracking personal To Dos, or keeping track of where things are in a multi-step process.

        While this example focuses on a single list, more sophisticated list apps could allow the user to create multiple lists, or even move items between lists. This app also only keeps track of the name of an item and whether or not it is "Done," but it could be extended to track and organize any amount of information about the list items.

        # Functionality Missing from this Prototype

        -   Delete buttons don't actually delete items from the list
        -   Add screen doesn't actually add an item to the list
      CSDU4 List App Demo_2019: |-
        # List Manager

        The list manager app allows user to keep track of the state of information and can be modified to serve many different purposes, such as checking in / out loaned items, tracking personal To Dos, or keeping track of where things are in a multi-step process.

        While this example focuses on a single list, more sophisticated list apps could allow the user to create multiple lists, or even move items between lists. This app also only keeps track of the name of an item and whether or not it is "Done," but it could be extended to track and organize any amount of information about the list items.

        # Functionality Missing from this Prototype

        -   Delete buttons don't actually delete items from the list
        -   Add screen doesn't actually add an item to the list
      CSDU4 Project Bug Feature: |-
        # Improving and Iterating

        You've put your app in front of users, gathered feedback, and identified bugs and new features - time to do something about it.

        # Do This

        Each team member is going to implement select features and bug fixes on their own version of the team's app. Start by selecting a sticky note from the **To Do** column of your team's chart and moving it to the **Doing** column. For each sticky you tackle:

        -   Add a comment to the top of your program describing the feature or bug fix you are implementing
        -   Work on your iteration until it works. Try to stay focused on only the single feature or bug that you've selected.
        -   When done, move your sticky to the **Done** column, pick a new one, and start the process over.
      CSDU4 Project Bug Feature_2018: |-
        # Improving and Iterating

        You've put your app in front of users, gathered feedback, and identified bugs and new features - time to do something about it.

        # Do This

        Each team member is going to implement select features and bug fixes on their own version of the team's app. Start by selecting a sticky note from the **To Do** column of your team's chart and moving it to the **Doing** column. For each sticky you tackle:

        -   Add a comment to the top of your program describing the feature or bug fix you are implementing
        -   Work on your iteration until it works. Try to stay focused on only the single feature or bug that you've selected.
        -   When done, move your sticky to the **Done** column, pick a new one, and start the process over.
      CSDU4 Project Bug Feature_2019: |-
        # Improving and Iterating

        You've put your app in front of users, gathered feedback, and identified bugs and new features - time to do something about it.

        # Do This

        Each team member is going to implement select features and bug fixes on their own version of the team's app. Start by selecting a sticky note from the **To Do** column of your team's chart and moving it to the **Doing** column. For each sticky you tackle:

        -   Add a comment to the top of your program describing the feature or bug fix you are implementing
        -   Work on your iteration until it works. Try to stay focused on only the single feature or bug that you've selected.
        -   When done, move your sticky to the **Done** column, pick a new one, and start the process over.
      CSDU4 Project Events: |-
        # Linking Screens

        With all of your screens in place you can start adding events that will change the screens. When you're done with this step you'll actually have an interactive prototype!

        # Do This

        For each screen of your app:

        -   Find all of the button IDs
        -   For each button, add an event handler that watches that ID
        -   In each event handler, use `setScreen()` to move the the right screen
        -   Test it all out!

        Depending on the number of screens and buttons your app has, this can be a pretty involved process. Make sure that you test your work often, using `console.log()` blocks to debug any strange behavior with your app. When you think you've got the whole thing working, compare your app with other members of your group to see if they work the same.
      CSDU4 Project Events_2018: |-
        # Linking Screens

        With all of your screens in place you can start adding events that will change the screens. When you're done with this step you'll actually have an interactive prototype!

        # Do This

        For each screen of your app:

        -   Find all of the button IDs
        -   For each button, add an event handler that watches that ID
        -   In each event handler, use `setScreen()` to move the the right screen
        -   Test it all out!

        Depending on the number of screens and buttons your app has, this can be a pretty involved process. Make sure that you test your work often, using `console.log()` blocks to debug any strange behavior with your app. When you think you've got the whole thing working, compare your app with other members of your group to see if they work the same.
      CSDU4 Project Events_2019: |-
        # Linking Screens

        With all of your screens in place you can start adding events that will change the screens. When you're done with this step you'll actually have an interactive prototype!

        # Do This

        For each screen of your app:

        -   Find all of the button IDs
        -   For each button, add an event handler that watches that ID
        -   In each event handler, use `setScreen()` to move the the right screen
        -   Test it all out!

        Depending on the number of screens and buttons your app has, this can be a pretty involved process. Make sure that you test your work often, using `console.log()` blocks to debug any strange behavior with your app. When you think you've got the whole thing working, compare your app with other members of your group to see if they work the same.
      CSDU4 Project Import: |-
        # Back To Your App

        Now that you've had some practice with importing screens, it's time to start working on your team's app.

        # Do This

        Each member of your team is going to create their own copy of the app, with all of the team members' screens imported in. This will be your copy of the app, and the copy that you will start to add code to in the next lesson.

        -   Collect all of the sharing urls for your team's pages
            -   You can find the share url by going back to the last level of the previous lesson, or by finding the screen in your [projects directory](/projects)
        -   Import each of the screens, one at a time
            -   If you run into an ID error with one of the screens, discuss the issue with the screen's creator so it can be fixed and imported
        -   Delete the default "screen1"
        -   Set the main screen as the default

        Don't worry about adding any code at this point; we'll get to that in the next level.
      CSDU4 Project Import_2018: |-
        # Back To Your App

        Now that you've had some practice with importing screens, it's time to start working on your team's app.

        # Do This

        Each member of your team is going to create their own copy of the app, with all of the team members' screens imported in. This will be your copy of the app, and the copy that you will start to add code to in the next lesson.  (Don't forget that you'll also need to import your own screen into this project.)

        -   Collect all of the sharing urls for your team's pages, **including your own**
            -   Each team member can find the share url for their own screen by going back to the last level of the previous lesson, or by finding the screen in their [projects directory](/projects)
        -   Import each of the screens, one at a time
            -   If you run into an ID error with one of the screens, discuss the issue with the screen's creator so it can be fixed and imported
        -   Delete the default "screen1"
        -   Set the main screen as the default

        Don't worry about adding any code at this point; we'll get to that in the next level.
      CSDU4 Project Import_2019: |-
        # Back To Your App

        Now that you've had some practice with importing screens, it's time to start working on your team's app.

        # Do This

        Each member of your team is going to create their own copy of the app, with all of the team members' screens imported in. This will be your copy of the app, and the copy that you will start to add code to in the next lesson.  (Don't forget that you'll also need to import your own screen into this project.)

        -   Collect all of the sharing urls for your team's pages, **including your own**
            -   Each team member can find the share url for their own screen by going back to the last level of the previous lesson, or by finding the screen in their [projects directory](/projects)
        -   Import each of the screens, one at a time
            -   If you run into an ID error with one of the screens, discuss the issue with the screen's creator so it can be fixed and imported
        -   Delete the default "screen1"
        -   Set the main screen as the default

        Don't worry about adding any code at this point; we'll get to that in the next level.
      CSDU4 Quiz App Demo: |-
        # Quiz Me

        A quiz app can be used to teach, or help reinforce, information important to your chosen topic.

        At its most basic, a quiz app is composed of a screen for each question with two or more buttons for multiple choice answers. Each button links to a page that either confirms that you were correct, or gives you information about why you were were wrong.

        More advanced quiz apps could include features such as:

        -   Different types of questions (such as matching, free response, or even interactive games)
        -   Randomizing the order of questions
        -   Changing the questions based on how we'll you're doing
        -   Providing a final score
        -   Incorporating study material

        # Functionality Missing from this Prototype

        -   Questions aren't actually checked for correctness
      CSDU4 Quiz App Demo_2018: |-
        # Quiz Me

        A quiz app can be used to teach, or help reinforce, information important to your chosen topic.

        At its most basic, a quiz app is composed of a screen for each question with two or more buttons for multiple choice answers. Each button links to a page that either confirms that you were correct, or gives you information about why you were were wrong.

        More advanced quiz apps could include features such as:

        -   Different types of questions (such as matching, free response, or even interactive games)
        -   Randomizing the order of questions
        -   Changing the questions based on how we'll you're doing
        -   Providing a final score
        -   Incorporating study material

        # Functionality Missing from this Prototype

        -   Questions aren't actually checked for correctness
      CSDU4 Quiz App Demo_2019: |-
        # Quiz Me

        A quiz app can be used to teach, or help reinforce, information important to your chosen topic.

        At its most basic, a quiz app is composed of a screen for each question with two or more buttons for multiple choice answers. Each button links to a page that either confirms that you were correct, or gives you information about why you were were wrong.

        More advanced quiz apps could include features such as:

        -   Different types of questions (such as matching, free response, or even interactive games)
        -   Randomizing the order of questions
        -   Changing the questions based on how we'll you're doing
        -   Providing a final score
        -   Incorporating study material

        # Functionality Missing from this Prototype

        -   Questions aren't actually checked for correctness
      CSDU6 - LED buttonL: "# Using Board Events\n\nRight now the LED turns on when
        the left button (`buttonL`) is pressed down. It should turn off when the right
        button (buttonR) is pressed down.\n\n<div style=\"float:right;\" markdown=1>
        \n\n![expandable](https://images.code.org/402489ec13fb6c6f38910829a9633ac3-image-1510874304220.png)
        \n\n</div>\n\n# Do this\n\n-   Add another `onBoardEvent()` block to turn
        the LED off when the right button is pressed down."
      CSDU6 - LED buttonL_2018: "# Using Board Events\n\nRight now the LED turns on
        when the left button (`buttonL`) is pressed down. It should turn off when
        the right button (buttonR) is pressed down.\n\n<div style=\"float:right;\"
        markdown=1> \n\n![expandable](https://images.code.org/402489ec13fb6c6f38910829a9633ac3-image-1510874304220.png)
        \n\n</div>\n\n# Do this\n\n-   Add another `onBoardEvent()` block to turn
        the LED off when the right button is pressed down."
      CSDU6 - LED buttonL_2019: "# Using Board Events\n\nRight now the LED turns on
        when the left button (`buttonL`) is pressed down. It should turn off when
        the right button (buttonR) is pressed down.\n\n<div style=\"float:right;\"
        markdown=1> \n\n![expandable](https://images.code.org/402489ec13fb6c6f38910829a9633ac3-image-1510874304220.png)
        \n\n</div>\n\n# Do this\n\n-   Add another `onBoardEvent()` block to turn
        the LED off when the right button is pressed down."
      CSDU6 - LED toggle buttonL up: |-
        # Other Board Events with the Buttons

        Instead of using the right button, you can make the LED turn off when the left button comes back up.

        # Do this

        -   Create an 'up' event for the left button.
        -   Add code to turn the LED off when the button pops back up.
      CSDU6 - LED toggle buttonL up_2018: |-
        # Other Board Events with the Buttons

        Instead of using the right button, you can make the LED turn off when the left button comes back up.

        # Do this

        -   Create an 'up' event for the left button.
        -   Add code to turn the LED off when the button pops back up.
      CSDU6 - LED toggle buttonL up_2019: |-
        # Other Board Events with the Buttons

        Instead of using the right button, you can make the LED turn off when the left button comes back up.

        # Do this

        -   Create an 'up' event for the left button.
        -   Add code to turn the LED off when the button pops back up.
      CSDU6 - UI and Inputs - dropdown setText: |-
        # setText and getText

        Often you will want to get the text of a UI Element and use it to set the text of another element on the screen. Can you get the text from the dropdown when the user picks a new input and use it to set the text of the "choiceDisplay" label.
      CSDU6 - UI and Inputs - get set with text input: |-
        # setText and getText

        You've seen how to use getText and setText already. Can you make this app get the text the user typed once they hit enter and show it in the text area at the bottom?

        _Tip: The "change" event is triggered when the user clicks "enter" in a field. Use an event handler for the text input watching for the "change" event._
      CSDU6 - UI and Inputs - getNumber: |-
        # getNumber

        **Starter Code:** This program creates a simple calculator but **there is something wrong with it. Try putting in 2 + 2.**

        We can fix this by using `getNumber()` instead of `getText()`. Can you fix the program by changing `getText()` to `getNumber()`?
      CSDU6 - UI and Inputs - getNumber practice: |-
        # getNumber

        **Starter Code:** The program tries to update the valueDisplay whenever the slider value changes but it always sets the value to 10.

        Can you use `getNumber()` to get the value of the slider and update the valueDisplay as it changes?
      CSDU6 - UI and Inputs - getText: |-
        # getText

        Try to set up an event handler that gets the text from the dropdown whenever a user selects a new item from the dropdown. You will need to use the getter `getText()`. Whenever you use a getter you should save it in a variable. Use `console.log()` to make sure it is working.
      CSDU6 - UI and Inputs - hide show: |-
        # Hide and Show

        It is a little weird that both buttons are on the screen at the same time. You don't need the stop alarm button until the alarm is on. Can you make the buttons only show when they are needed?

        -   You will want the stop alarm button to be hidden when the program starts. You can do this in design mode.

        Hint: When you click the trigger alarm button, you should change the text, hide the trigger alarm button, _and_ show the stop alarm button.
      CSDU6 - UI and Inputs - setProperty: |-
        # setProperty background-color

        Change the `background-color` of a button to a new random color each time it is clicked using `setProperty()`.
      CSDU6 - UI and Inputs - setProperty Image: "# setProperty image\n\n**Note:**
        This level starts in Design Mode.\n\nThere is an image element set up for
        you but it does not show when you leave Design Mode because it has not been
        told what image to display. \n\n-   Use the `setProperty()` command to set
        the image of the UI Image Element on the screen."
      CSDU6 - UI and Inputs - setProperty first level: |-
        # setProperty

        **Starter Code:** There is one call to `setProperty()` which sets the text-color to blue when you run the program.

        Can you add more calls to `setProperty()` that change other things about the text when you run the program? Try to change at least 3 more things.
      CSDU6 - UI and Inputs - setScreen: "# setScreen\n\nLets start with a setter
        you have used before `setScreen()`. \n\n-   Make the About Me button on the
        Home page go to the About Me page.\n-   Make the Back button on the About
        Me go to the Home page."
      CSDU6 - UI and Inputs - setText: |-
        # setText

        We are going to start making an alarm app. We have already set up an event handler for the "triggerAlarmButton" which will change the "statusLabel" text to ON when clicked. Can you make the stop alarm button change the text to OFF when clicked?
      CSDU6 - board event challenge_2018: |-
        # Challenge: Sound Board

        Check with your teacher before starting the challenge.

        Now that you know how to use board events, the buttons, switch, and the buzzer, try making a program that turns your board into a sound board when you press the buttons or flip the switch. Play around with the duration and frequencies of the sounds, and listen to how it turns out.
      CSDU6 - board event challenge_2019: |-
        # Challenge: Sound Board

        Check with your teacher before starting the challenge.

        Now that you know how to use board events, the buttons, switch, and the buzzer, try making a program that turns your board into a sound board when you press the buttons or flip the switch. Play around with the duration and frequencies of the sounds, and listen to how it turns out.
      CSDU6 - button LED prediction: See contained level for markdown
      CSDU6 - button LED prediction_2018: See contained level for markdown
      CSDU6 - button LED prediction_2019: See contained level for markdown
      CSDU6 - button_LED_prediction: |-
        # Board Events

        The `onBoardEvent()` block allows you to start taking input from your Circuit Playground. Look at the program with a partner and discuss what you think it'll do. Once you've come up with an answer, click "Run" to check your answer.

        -   What will happen when you press the left button down?
      CSDU6 - button_LED_prediction_2018: |-
        # Board Events

        The `onBoardEvent()` block allows you to start taking input from your Circuit Playground. Look at the program with a partner and discuss what you think it'll do. Once you've come up with an answer, click "Run" to check your answer.

        -   What will happen when you press the left button down?
      CSDU6 - button_LED_prediction_2019: |-
        # Board Events

        The `onBoardEvent()` block allows you to start taking input from your Circuit Playground. Look at the program with a partner and discuss what you think it'll do. Once you've come up with an answer, click "Run" to check your answer.

        -   What will happen when you press the left button down?
      CSDU6 - buzzer duration: |-
        # Buzzer Duration

        As you've noticed, `buzzer.frequency()` has two parameters: frequency and duration. Both of these take a number as input.

        -   Frequency changes how the buzzer sounds. The bigger the number you give it, the higher the buzzer's sound will be.

        -   Duration determines how long the buzzer is going to play a sound for in milliseconds.

        For right now we're going to focus on duration, the second parameter.

        # Do this

        Try out a few things with duration:

        -   Change the duration of the buzzer to something longer than 100.
        -   Try setting the duration to 0, what happens?

        Run the program multiple times to see what happens before you move on.
      CSDU6 - buzzer duration buttons: |-
        # Buzzer and the Buttons

        This program should use the buttons to play long and short buzzes.

        # Do this

        -   Change the duration parameter of `buzzer.frequency` to make the left button play a long buzz, and the right button play a short buzz.
      CSDU6 - buzzer duration buttons_2018: |-
        # Buzzer and the Buttons

        This program should use the buttons to play long and short buzzes.

        # Do this

        -   Change the duration parameter of `buzzer.frequency` to make the left button play a long buzz, and the right button play a short buzz.
      CSDU6 - buzzer duration buttons_2019: |-
        # Buzzer and the Buttons

        This program should use the buttons to play long and short buzzes.

        # Do this

        -   Change the duration parameter of `buzzer.frequency` to make the left button play a long buzz, and the right button play a short buzz.
      CSDU6 - buzzer duration_2018: |-
        # Buzzer Duration

        As you've noticed, `buzzer.frequency()` has two parameters: frequency and duration. Both of these take a number as input.

        -   Frequency changes how the buzzer sounds. The bigger the number you give it, the higher the buzzer's sound will be.

        -   Duration determines how long the buzzer is going to play a sound for in milliseconds.

        For right now we're going to focus on duration, the second parameter.

        # Do this

        Try out a few things with duration:

        -   Change the duration of the buzzer to something longer than 100.
        -   Try setting the duration to 0, what happens?

        Run the program multiple times to see what happens before you move on.
      CSDU6 - buzzer duration_2019: |-
        # Buzzer Duration

        As you've noticed, `buzzer.frequency()` has two parameters: frequency and duration. Both of these take a number as input.

        -   Frequency changes how the buzzer sounds. The bigger the number you give it, the higher the buzzer's sound will be.

        -   Duration determines how long the buzzer is going to play a sound for in milliseconds.

        For right now we're going to focus on duration, the second parameter.

        # Do this

        Try out a few things with duration:

        -   Change the duration of the buzzer to something longer than 100.
        -   Try setting the duration to 0, what happens?

        Run the program multiple times to see what happens before you move on.
      CSDU6 - buzzer intro: |-
        # Using the Buzzer

        You can use the buzzer in a lot of different ways, but right now we're just going to use the `buzzer.frequency()`.

        # Do this

        -   Pull out a `buzzer.frequency()` block from the toolbox and play around with it. You'll notice it has two parameters, what happens when you change either, or both of those?
        -   Run the program and enjoy the music of your Circuit Playground.
      CSDU6 - buzzer intro_2018: |-
        # Using the Buzzer

        You can use the buzzer in a lot of different ways, but right now we're just going to use the `buzzer.frequency()`.

        # Do this

        -   Pull out a `buzzer.frequency()` block from the toolbox and play around with it. You'll notice it has two parameters, what happens when you change either, or both of those?
        -   Run the program and enjoy the music of your Circuit Playground.
      CSDU6 - buzzer intro_2019: |-
        # Using the Buzzer

        You can use the buzzer in a lot of different ways, but right now we're just going to use the `buzzer.frequency()`.

        # Do this

        -   Pull out a `buzzer.frequency()` block from the toolbox and play around with it. You'll notice it has two parameters, what happens when you change either, or both of those?
        -   Run the program and enjoy the music of your Circuit Playground.
      CSDU6 - final project 1: |-
        # Designing the User Interface

        Before worrying about the code for your program, start by laying out the user interface. As you add elements in Design Mode, make sure to give everything a meaningful ID. Even if you don't plan on accessing an element with code, making sure that all of your IDs are descriptive will help make your program more readable and easier to program.
      CSDU6 - final project 1_2018: |-
        # Designing the User Interface

        Before worrying about the code for your program, start by laying out the user interface. As you add elements in Design Mode, make sure to give everything a meaningful ID. Even if you don't plan on accessing an element with code, making sure that all of your IDs are descriptive will help make your program more readable and easier to program.
      CSDU6 - final project 1_2019: |-
        # Designing the User Interface

        Before worrying about the code for your program, start by laying out the user interface. As you add elements in Design Mode, make sure to give everything a meaningful ID. Even if you don't plan on accessing an element with code, making sure that all of your IDs are descriptive will help make your program more readable and easier to program.
      CSDU6 - final project 2: |-
        # Wiring Up the UI

        With your user interface in place, you can now add event handlers for your interface elements. At this point you may want to just include `console.log()` commands to make sure that your events are working as expected - you can add the functional code later one.
      CSDU6 - final project 2_2018: |-
        # Wiring Up the UI

        With your user interface in place, you can now add event handlers for your interface elements. At this point you may want to just include `console.log()` commands to make sure that your events are working as expected - you can add the functional code later one.
      CSDU6 - final project 2_2019: |-
        # Wiring Up the UI

        With your user interface in place, you can now add event handlers for your interface elements. At this point you may want to just include `console.log()` commands to make sure that your events are working as expected - you can add the functional code later one.
      CSDU6 - final project 3: |-
        # Board Input Events

        Now you can add the events which will take input from the board. Again, feel free to just use `console.log()` statements at this point to ensure that your events are working.
      CSDU6 - final project 3_2018: |-
        # Board Input Events

        Now you can add the events which will take input from the board. Again, feel free to just use `console.log()` statements at this point to ensure that your events are working.
      CSDU6 - final project 3_2019: |-
        # Board Input Events

        Now you can add the events which will take input from the board. Again, feel free to just use `console.log()` statements at this point to ensure that your events are working.
      CSDU6 - final project 4: |-
        # Functions

        As you continue to work through your program, look for patterns that can be abstracted into functions. Can you find code that is repeated multiple places, or chunks of code that could be better understood of given a name? Don't forget that you can use parameters to write functions for repeated code that is _mostly_ the same, but varies a bit (such as setting color on multiple LEDs).
      CSDU6 - final project 4_2018: |-
        # Functions

        As you continue to work through your program, look for patterns that can be abstracted into functions. Can you find code that is repeated multiple places, or chunks of code that could be better understood of given a name? Don't forget that you can use parameters to write functions for repeated code that is _mostly_ the same, but varies a bit (such as setting color on multiple LEDs).
      CSDU6 - final project 4_2019: |-
        # Functions

        As you continue to work through your program, look for patterns that can be abstracted into functions. Can you find code that is repeated multiple places, or chunks of code that could be better understood of given a name? Don't forget that you can use parameters to write functions for repeated code that is _mostly_ the same, but varies a bit (such as setting color on multiple LEDs).
      CSDU6 - final project 5: |-
        # Board Output

        If you haven't already, use some of the output elements on the board to communicate useful information to the user.
      CSDU6 - final project 5_2018: |-
        # Board Output

        If you haven't already, use some of the output elements on the board to communicate useful information to the user.
      CSDU6 - final project 5_2019: |-
        # Board Output

        If you haven't already, use some of the output elements on the board to communicate useful information to the user.
      CSDU6 - final project 6: |-
        # Finishing Touches

        Add any finishing touches still needed to make your innovation awesome. If you have time, test out your innovation with some potential users to gather feedback and find opportunities for improvement. When you're totally finished, click the "Submit" button to turn it in!
      CSDU6 - final project 6_2018: |-
        # Finishing Touches

        Add any finishing touches still needed to make your innovation awesome. If you have time, test out your innovation with some potential users to gather feedback and find opportunities for improvement. When you're totally finished, click the "Submit" button to turn it in!
      CSDU6 - final project 6_2019: |-
        # Finishing Touches

        Add any finishing touches still needed to make your innovation awesome. If you have time, test out your innovation with some potential users to gather feedback and find opportunities for improvement. When you're totally finished, click the "Submit" button to turn it in!
      CSDU6 - lightswitch toggleswitch: |-
        # Using the Toggle Switch

        The toggle switch can flip in one of two positions: `open` and `close`.  This program uses it to make a light switch.  Right now it can only turn the light on.

        # Do this

        -   Create a new toggle switch event that is triggered when the switch is flipped to `close`.
        -   Add code so that when the toggle switch is flipped to `close` the light turns off.
      CSDU6 - lightswitch toggleswitch_2018: |-
        # Using the Toggle Switch

        The toggle switch can flip in one of two positions: `open` and `close`.  This program uses it to make a light switch.  Right now it can only turn the light on.

        # Do this

        -   Create a new toggle switch event that is triggered when the switch is flipped to `close`.
        -   Add code so that when the toggle switch is flipped to `close` the light turns off.
      CSDU6 - lightswitch toggleswitch_2019: |-
        # Using the Toggle Switch

        The toggle switch can flip in one of two positions: `open` and `close`.  This program uses it to make a light switch.  Right now it can only turn the light on.

        # Do this

        -   Create a new toggle switch event that is triggered when the switch is flipped to `close`.
        -   Add code so that when the toggle switch is flipped to `close` the light turns off.
      CSDU6 - sensors predict question: |-
        # Make a Prediction

        Read the code in this program and make a prediction below. What do you think this program will do when you run it? How is the user intended to interact with the board? You may need to blow onto the board to see the full range of this app.
      CSDU6 - sensors predict question_2018: |-
        # Make a Prediction

        Read the code in this program and make a prediction below. What do you think this program will do when you run it? How is the user intended to interact with the board? You may need to blow onto the board to see the full range of this app.
      CSDU6 - sensors predict question_2019: |-
        # Make a Prediction

        Read the code in this program and make a prediction below. What do you think this program will do when you run it? How is the user intended to interact with the board? You may need to blow onto the board to see the full range of this app.
      CSDU6 - toggle state LED prediction: See contained level for markdown
      CSDU6 - toggle state LED prediction_2018: See contained level for markdown
      CSDU6 - toggle state LED prediction_2019: See contained level for markdown
      CSDU6 - toggleswitch state setProp: |-
        # State and the Toggle Switch

        This program tells you whether the toggle switch is opened or closed, but it needs the `toggleSwitch.isOpen` block to work.  `toggleSwitch.isOpen` is `true` if the switch is opened and `false` if the switch is closed.

        # Do this

        -   Complete the if-statement with the `toggleSwitch.isOpen` property.
        -   Run the program and press the left button, then flip the toggle switch and press the button again.
      CSDU6 - toggleswitch state setProp_2018: |-
        # State and the Toggle Switch

        This program tells you whether the toggle switch is opened or closed, but it needs the `toggleSwitch.isOpen` block to work.  `toggleSwitch.isOpen` is `true` if the switch is opened and `false` if the switch is closed.

        # Do this

        -   Complete the if-statement with the `toggleSwitch.isOpen` property.
        -   Run the program and press the left button, then flip the toggle switch and press the button again.
      CSDU6 - toggleswitch state setProp_2019: |-
        # State and the Toggle Switch

        This program tells you whether the toggle switch is opened or closed, but it needs the `toggleSwitch.isOpen` block to work.  `toggleSwitch.isOpen` is `true` if the switch is opened and `false` if the switch is closed.

        # Do this

        -   Complete the if-statement with the `toggleSwitch.isOpen` property.
        -   Run the program and press the left button, then flip the toggle switch and press the button again.
      CSDU6 AppLab Input 1: |-
        # Input in App Lab

        _You don't need to make any changes to the code here_

        Take a minute to read through the code and run the program. Discuss with a partner:

        1.  What is the source of input?
        2.  Where and how does the program check for input?
        3.  What does the program do when it gets the right input?
        4.  What is the program doing when there is no input?
      CSDU6 AppLab Input 1_2018: |-
        # Input in App Lab

        _You don't need to make any changes to the code here_

        Take a minute to read through the code and run the program. Discuss with a partner:

        1.  What is the source of input?
        2.  Where and how does the program check for input?
        3.  What does the program do when it gets the right input?
        4.  What is the program doing when there is no input?
      CSDU6 AppLab Input 1_2019: |-
        # Input in App Lab

        _You don't need to make any changes to the code here_

        Take a minute to read through the code and run the program. Discuss with a partner:

        1.  What is the source of input?
        2.  Where and how does the program check for input?
        3.  What does the program do when it gets the right input?
        4.  What is the program doing when there is no input?
      CSDU6 Circuit Playground Test: |-
        # Test Your Board

        This level is just a quick test to make sure your board is working. To run this test, do the following:

        1.  Plug your board into your computer with a USB cable
        2.  Click "Run"
        3.  Wait a few seconds for either a Success or Error screen to pop up
        4.  If your test was successful, move on to the next level. If not, try some of the troubleshooting steps

        ## Troubleshooting

        There are a number of things that could prevent your test from passing.

        1.  Try refreshing the page and running the test again (you should refresh the page for each of the following ideas as well)
        2.  Try connecting your board to a different USB port
        3.  Try a different USB cable. Some USB cables can only be used for charging, so make sure your cable supports data transfer!
        4.  Try a different board
        5.  Go to [studio.code.org/maker/setup](/maker/setup) to run a more detailed test
      CSDU6 Circuit Playground Test_2018: |-
        # Test Your Board

        This level is just a quick test to make sure your board is working. To run this test, do the following:

        1.  Plug your board into your computer with a USB cable
        2.  Click "Run"
        3.  Wait a few seconds for either a Success or Error screen to pop up
        4.  If your test was successful, move on to the next level. If not, try some of the troubleshooting steps

        ## Troubleshooting

        There are a number of things that could prevent your test from passing.

        1.  Try refreshing the page and running the test again (you should refresh the page for each of the following ideas as well)
        2.  Try connecting your board to a different USB port
        3.  Try a different USB cable. Some USB cables can only be used for charging, so make sure your cable supports data transfer!
        4.  Try a different board
        5.  Go to [studio.code.org/maker/setup](/maker/setup) to run a more detailed test
      CSDU6 Circuit Playground Test_2019: |-
        # Test Your Board

        This level is just a quick test to make sure your board is working. To run this test, do the following:

        1.  Plug your board into your computer with a USB cable
        2.  Click "Run"
        3.  Wait a few seconds for either a Success or Error screen to pop up
        4.  If your test was successful, move on to the next level. If not, try some of the troubleshooting steps

        ## Troubleshooting

        There are a number of things that could prevent your test from passing.

        1.  Try refreshing the page and running the test again (you should refresh the page for each of the following ideas as well)
        2.  Try connecting your board to a different USB port
        3.  Try a different USB cable. Some USB cables can only be used for charging, so make sure your cable supports data transfer!
        4.  Try a different board
        5.  Go to [studio.code.org/maker/setup](/maker/setup) to run a more detailed test
      CSDU6 GameLab Input 1: |-
        # Input in Game Lab

        _You don't need to make any changes to the code here_

        Take a minute to read through the code and run the program. Discuss with a partner:

        1.  What is the source of input?
        2.  Where and how does the program check for input?
        3.  What does the program do when it gets the correct input?
        4.  What is the program doing when there is no input?
      CSDU6 GameLab Input 1_2018: |-
        # Input in Game Lab

        _You don't need to make any changes to the code here_

        Take a minute to read through the code and run the program. Discuss with a partner:

        1.  What is the source of input?
        2.  Where and how does the program check for input?
        3.  What does the program do when it gets the correct input?
        4.  What is the program doing when there is no input?
      CSDU6 GameLab Input 1_2019: |-
        # Input in Game Lab

        _You don't need to make any changes to the code here_

        Take a minute to read through the code and run the program. Discuss with a partner:

        1.  What is the source of input?
        2.  Where and how does the program check for input?
        3.  What does the program do when it gets the correct input?
        4.  What is the program doing when there is no input?
      CSDU6 array index predict contained: |-
        # Predict

        The code below will display four things on the screen.  What do you think they will be?
      CSDU6 array index predict contained_2018: |-
        # Predict

        The code below will display four things on the screen.  What do you think they will be?
      CSDU6 array index predict contained_2019: |-
        # Predict

        The code below will display four things on the screen.  What do you think they will be?
      CSDU6 array select days: |-
        # Accessing Items in an Array

        This program uses the Circuit Playground.  It creates an array of the days of the week.  When the left button is pressed, it displays the day as "Tuesday".

        # Do This

        -   Add code that will display the day as "Thursday" when the right button is pressed.
      CSDU6 array select days_2018: |-
        # Accessing Items in an Array

        This program uses the Circuit Playground.  It creates an array of the days of the week.  When the left button is pressed, it displays the day as "Tuesday".

        # Do This

        -   Add code that will display the day as "Thursday" when the right button is pressed.
      CSDU6 array select days_2019: |-
        # Accessing Items in an Array

        This program uses the Circuit Playground.  It creates an array of the days of the week.  When the left button is pressed, it displays the day as "Tuesday".

        # Do This

        -   Add code that will display the day as "Thursday" when the right button is pressed.
      CSDU6 arrays select rainbow: |-
        # Index Practice

        <img src="https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45 PM.png" style="width: 150px; float: right">

        **Starter code** has been provided that creates a list called `colors` and uses it to set the colors of the rectangles on the screen.  Unfortunately, the colors are out of order.

        # Do This

        -   Change the index numbers inside each selection block to make the rainbow appear as in the picture on the right.
      CSDU6 arrays select rainbow_2018: |-
        # Index Practice

        <img src="https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45 PM.png" style="width: 150px; float: right">

        **Starter code** has been provided that creates a list called `colors` and uses it to set the colors of the rectangles on the screen.  Unfortunately, the colors are out of order.

        # Do This

        -   Change the index numbers inside each selection block to make the rainbow appear as in the picture on the right.
      CSDU6 arrays select rainbow_2019: |-
        # Index Practice

        <img src="https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45 PM.png" style="width: 150px; float: right">

        **Starter code** has been provided that creates a list called `colors` and uses it to set the colors of the rectangles on the screen.  Unfortunately, the colors are out of order.

        # Do This

        -   Change the index numbers inside each selection block to make the rainbow appear as in the picture on the right.
      CSDU6 arrays select random: |-
        # Random Selection

        You can also select a random element in the list by using the `randomNumber` block instead of an index.  This program selects a random icon from a list and displays it on the screen when the left button is pressed.  Right now, the icons are always blue.

        # Do This

        -   Add code that will select a random color from the list and use that as the icon color.
      CSDU6 arrays select random_2018: |-
        # Random Selection

        You can also select a random element in the list by using the `randomNumber` block instead of an index.  This program selects a random icon from a list and displays it on the screen when the left button is pressed.  Right now, the icons are always blue.

        # Do This

        -   Add code that will select a random color from the list and use that as the icon color.
      CSDU6 arrays select random_2019: |-
        # Random Selection

        You can also select a random element in the list by using the `randomNumber` block instead of an index.  This program selects a random icon from a list and displays it on the screen when the left button is pressed.  Right now, the icons are always blue.

        # Do This

        -   Add code that will select a random color from the list and use that as the icon color.
      CSDU6 arrays select variable: |-
        # Using Variables

        This program is like the last one, but the icons should always match the colors (red heart, yellow star, green leaf, and blue water).  You can do this using the variable "myIndex", which will store the value of a random number so that it can be used to get the icon and the color from the same place on each list.

        # Do This

        -   Change the code so that both the icon and its color are chosen using the "myIndex" variable.
      CSDU6 arrays select variable_2018: |-
        # Using Variables

        This program is like the last one, but the icons should always match the colors (red heart, yellow star, green leaf, and blue water).  You can do this using the variable "myIndex", which will store the value of a random number so that it can be used to get the icon and the color from the same place on each list.

        # Do This

        -   Change the code so that both the icon and its color are chosen using the "myIndex" variable.
      CSDU6 arrays select variable_2019: |-
        # Using Variables

        This program is like the last one, but the icons should always match the colors (red heart, yellow star, green leaf, and blue water).  You can do this using the variable "myIndex", which will store the value of a random number so that it can be used to get the icon and the color from the same place on each list.

        # Do This

        -   Change the code so that both the icon and its color are chosen using the "myIndex" variable.
      CSDU6 buzzer 2d arrays_2018: |-
        # Challenge: 2D Arrays

        Arrays can hold all sorts of data, like numbers, strings, and even other arrays. When we put an array inside another, this becomes a 2D array. The `buzzer.playSong()` block can be used to play songs that sound more precise with 2D arrays.

        The structure that you've been using to play notes looks like this:

        `buzzer.playNotes( [array of notes to play] , tempo of the whole song);`

        The main difference with `buzzer.playSong()` is each element inside the `[array of notes to play]`, is an array with two elements: the note you want to play, and the duration of the note. Sometime you'll want a quarter note in your song, other times you'll want a full note, or maybe somewhere in between. A full song might look something like this:

        `buzzer.playSong([
          ["G3",0.25],
          ["C4",0.25],
          ["E4",0.25],
          ["G4",0.125],
          [null,0.375],
          ["E4",0.1875],
          ["G4",1]
        ], 120);`

        # Do this

        -   Use the `buzzer.playSong` block to make a different song.
        -   When you get comfortable with the structure, add more notes to the song.
      CSDU6 buzzer 2d arrays_2019: |-
        # Challenge: 2D Arrays

        Arrays can hold all sorts of data, like numbers, strings, and even other arrays. When we put an array inside another, this becomes a 2D array. The `buzzer.playSong()` block can be used to play songs that sound more precise with 2D arrays.

        The structure that you've been using to play notes looks like this:

        `buzzer.playNotes( [array of notes to play] , tempo of the whole song);`

        The main difference with `buzzer.playSong()` is each element inside the `[array of notes to play]`, is an array with two elements: the note you want to play, and the duration of the note. Sometime you'll want a quarter note in your song, other times you'll want a full note, or maybe somewhere in between. A full song might look something like this:

        `buzzer.playSong([
          ["G3",0.25],
          ["C4",0.25],
          ["E4",0.25],
          ["G4",0.125],
          [null,0.375],
          ["E4",0.1875],
          ["G4",1]
        ], 120);`

        # Do this

        -   Use the `buzzer.playSong` block to make a different song.
        -   When you get comfortable with the structure, add more notes to the song.
      CSDU6 buzzer.stop_2018: |-
        # Stopping the Music

        Sometimes you need to be able to stop the music when you want, like in the code below. Duration wasn't specified so now the note plays continuously. Luckily, the `buzzer.stop()` method is here to save your ears.

        # Do this

        -   Find a way to get the note to stop playing with `buzzer.stop()`.
        -   Celebrate your win over the endless note!
      CSDU6 buzzer.stop_2019: |-
        # Stopping the Music

        Sometimes you need to be able to stop the music when you want, like in the code below. Duration wasn't specified so now the note plays continuously. Luckily, the `buzzer.stop()` method is here to save your ears.

        # Do this

        -   Find a way to get the note to stop playing with `buzzer.stop()`.
        -   Celebrate your win over the endless note!
      CSDU6 circuit playground piano: "# Circuit Piano\n\nLook at the code below.
        You're not going to be changing it, but try to see what it does. \n\n# Do
        this\n\n-   Run the program and play with the piano on the screen."
      CSDU6 circuit playground piano_2018: "# Circuit Piano\n\nLook at the code below.
        You're not going to be changing it, but try to see what it does. \n\n# Do
        this\n\n-   Run the program and play with the piano on the screen."
      CSDU6 circuit playground piano_2019: "# Circuit Piano\n\nLook at the code below.
        You're not going to be changing it, but try to see what it does. \n\n# Do
        this\n\n-   Run the program and play with the piano on the screen."
      CSDU6 frequency creation: |-
        # Making the Buzzer Buzz

        Now that you can use the buzzer's frequency, try to make the buzzer play a high sound when the same button pops back up.

        # Do this

        -   Add another onBoardEvent block so the buzzer plays a high sound when the left button comes back **up**
      CSDU6 frequency creation_2018: |-
        # Making the Buzzer Buzz

        Now that you can use the buzzer's frequency, try to make the buzzer play a high sound when the same button pops back up.

        # Do this

        -   Add another onBoardEvent block so the buzzer plays a high sound when the left button comes back **up**
      CSDU6 frequency creation_2019: |-
        # Making the Buzzer Buzz

        Now that you can use the buzzer's frequency, try to make the buzzer play a high sound when the same button pops back up.

        # Do this

        -   Add another onBoardEvent block so the buzzer plays a high sound when the left button comes back **up**
      CSDU6 frequency modification: |-
        # Making the Buzzer Buzz

        The frequency of the buzzer determines how high or how low the buzzer will sound when it plays. The higher the number you give frequency, the higher the buzzer will sound.

        # Do this

        -   Right now the buzzer plays a high note when the left button is pressed. Make the buzzer play a low note instead.
      CSDU6 frequency modification_2018: |-
        # Making the Buzzer Buzz

        The frequency of the buzzer determines how high or how low the buzzer will sound when it plays. The higher the number you give frequency, the higher the buzzer will sound.

        # Do this

        -   Right now the buzzer plays a high note when the left button is pressed. Make the buzzer play a low note instead.
      CSDU6 frequency modification_2019: |-
        # Making the Buzzer Buzz

        The frequency of the buzzer determines how high or how low the buzzer will sound when it plays. The higher the number you give frequency, the higher the buzzer will sound.

        # Do this

        -   Right now the buzzer plays a high note when the left button is pressed. Make the buzzer play a low note instead.
      CSDU6 making new arrays: |-
        # Making New Arrays

        You know how to change arrays, now it's time for you to make your own.

        # Do this

        -   Make a new array with whatever notes you want. They can be in different octaves, arranged in a certain key, etc. Anything you want!
        -   Have the buzzer play a random note from your array when the **right** button is pressed.
      CSDU6 making new arrays_2018: |-
        # Making New Arrays

        You know how to change arrays, now it's time for you to make your own.

        # Do this

        -   Make a new array with whatever notes you want. They can be in different octaves, arranged in a certain key, etc. Anything you want!
        -   Have the buzzer play a random note from your array when the **right** button is pressed.
      CSDU6 making new arrays_2019: |-
        # Making New Arrays

        Now that you can change arrays, it's time for you to make your own.

        # Do this

        -   Make a new array with whatever notes you want. They can be in different octaves, arranged in a certain key, etc. Anything you want!
        -   Have the buzzer play a random note from your array when the **right** button is pressed.
      CSDU6 piano with notes: |-
        # Piano Notes

        This is the same piano that you saw at the beginning of the lesson, but there are some bugs!

        # Do this

        -   Edit the code so that all keys are using a `buzzer.note()` block to play the corresponding note.
        -   Make sure that all the values passed in to `buzzer.note()` are notes, and not frequencies.

        _Hint: Remember to put quotes around the notes! e.g `buzzer.note("A4", 100);`_
      CSDU6 piano with notes_2018: |-
        # Piano Notes

        This is the same piano that you saw at the beginning of the lesson, but there are some bugs!

        # Do this

        -   Edit the code so that all keys are using a `buzzer.note()` block to play the corresponding note.
        -   Make sure that all the values passed in to `buzzer.note()` are notes, and not frequencies.

        _Hint: Remember to put quotes around the notes! e.g `buzzer.note("A4", 100);`_
      CSDU6 piano with notes_2019: |-
        # Piano Notes

        This is the same piano that you saw at the beginning of the lesson, but there are some bugs!

        # Do this

        -   Edit the code so that all keys are using a `buzzer.note()` block to play the corresponding note.
        -   Make sure that all the values passed in to `buzzer.note()` are notes, and not frequencies.

        _Hint: Remember to put quotes around the notes! e.g `buzzer.note("A4", 100);`_
      CSDU6 play null notes: |-
        # Null Notes

        You may have noticed that if you put the same note side-by-side in the array, the buzzer just plays that note as one long sound instead of as individual notes. In music we often want a break (or _rest_) between notes. You can get your buzzer to play a rest by sending it the value `null`.

        `null` is a special value that represents emptiness in computer science. `playNotes` plays each note for the same duration, so a `null` element in the array is just telling `playNotes` to play nothing for the same duration as everything else.

        # Do this

        -   Run the code to hear what it sounds like first.
        -   Examine the array inside `buzzer.playNotes()`.
        -   Put a pause between notes that are the same and side-by-side, and any other place you deem appropriate.

        _Tip: `null` references a value, just like a variable name. Make sure you don't put it in quotation marks!_
      CSDU6 play null notes_2018: |-
        # Null Notes

        You may have noticed that if you put the same note side-by-side in the array, the buzzer just plays that note as one long sound instead of as individual notes. In music we often want a break (or _rest_) between notes. You can get your buzzer to play a rest by sending it the value `null`.

        `null` is a special value that represents emptiness in computer science. `playNotes` plays each note for the same duration, so a `null` element in the array is just telling `playNotes` to play nothing for the same duration as everything else.

        # Do this

        -   Run the code to hear what it sounds like first.
        -   Examine the array inside `buzzer.playNotes()`.
        -   Put a pause between notes that are the same and side-by-side, and any other place you deem appropriate.

        _Tip: `null` references a value, just like a variable name. Make sure you don't put it in quotation marks!_
      CSDU6 play null notes_2019: |-
        # Null Notes

        You may have noticed that if you put the same note side-by-side in the array, the buzzer just plays that note as one long sound instead of as individual notes. In music we often want a break (or _rest_) between notes. You can get your buzzer to play a rest by sending it the value `null`.

        `null` is a special value that represents emptiness in computer science. `playNotes` plays each note for the same duration, so a `null` element in the array is just telling `playNotes` to play nothing for the same duration as everything else.

        # Do this

        -   Run the code to hear what it sounds like first.
        -   Examine the array inside `buzzer.playNotes()`.
        -   Put a pause between notes that are the same and side-by-side, and any other place you deem appropriate.

        _Tip: `null` references a value, just like a variable name. Make sure you don't put it in quotation marks!_
      CSDU6 play predict code: Markdown is in contained level
      CSDU6 play predict code_2018: Markdown is in contained level
      CSDU6 play predict code_2019: Markdown is in contained level
      CSDU6 play predict markdown: |-
        # Make a Prediction

        Look at the code below. What do you think it's going to do?

        Give it a guess and run the code to find out!
      CSDU6 play predict markdown_2018: |-
        # Make a Prediction

        Look at the code below. What do you think it's going to do?

        Give it a guess and run the code to find out!
      CSDU6 play predict markdown_2019: |-
        # Make a Prediction

        Look at the code below. What do you think it's going to do?

        Give it a guess and run the code to find out!
      CSDU6 play songs: |-
        # Making Songs

        You can make and play full songs with `buzzer.playNotes()`. It takes two parameters: an array of notes to play, and a tempo at which to play the notes. In previous bubbles you created arrays of notes and played through them randomly, but `buzzer.playNotes()` plays each note consecutively instead.

        # Do this

        -   Pull out a `buzzer.playNotes` block and change the starting array inside.
        -   Make sure the new array you give it has at least two pairs of notes that are next to each other in the list (Example: `["A5", "A5", "G4", "G4"]`)

        _Hint: Don't forget that you can always switch back and forth between block and text mode._
      CSDU6 play songs_2018: |-
        # Making Songs

        You can make and play full songs with `buzzer.playNotes()`. It takes two parameters: an array of notes to play, and a tempo at which to play the notes. In previous bubbles you created arrays of notes and played through them randomly, but `buzzer.playNotes()` plays each note consecutively instead.

        # Do this

        -   Pull out a `buzzer.playNotes` block and change the starting array inside.
        -   Make sure the new array you give it has at least two pairs of notes that are next to each other in the list (Example: `["A5", "A5", "G4", "G4"]`)

        _Hint: Don't forget that you can always switch back and forth between block and text mode._
      CSDU6 play songs_2019: |-
        # Making Songs

        You can make and play full songs with `buzzer.playNotes()`. It takes two parameters: an array of notes to play, and a tempo at which to play the notes. In previous bubbles you created arrays of notes and played through them randomly, but `buzzer.playNotes()` plays each note consecutively instead.

        # Do this

        -   Pull out a `buzzer.playNotes` block and change the starting array inside.
        -   Make sure the new array you give it has at least two pairs of notes that are next to each other in the list (Example: `["A5", "A5", "G4", "G4"]`)

        _Hint: Don't forget that you can always switch back and forth between block and text mode._
      CSDU6 toggle state prediction: "# More on the Toggle Switch\n\nYou can also
        check whether the toggle switch is in the `open` or `close` position anywhere
        in your program. \n\nWhat different things does the button do when the toggle
        switch is `open` or `close`?"
      CSDU6 toggle state prediction_2018: "# More on the Toggle Switch\n\nYou can
        also check whether the toggle switch is in the `open` or `close` position
        anywhere in your program. \n\nWhat different things does the button do when
        the toggle switch is `open` or `close`?"
      CSDU6 toggle state prediction_2019: "# More on the Toggle Switch\n\nYou can
        also check whether the toggle switch is in the `open` or `close` position
        anywhere in your program. \n\nWhat different things does the button do when
        the toggle switch is `open` or `close`?"
      Course 4 Artist 1: "Help me draw a box.\\\n(Each line is 200 pixels long) \n\n<br/><br/>"
      Course 4 Artist 10: "<img src=\"https://images.code.org/c876143212d195192013582f57c6df04-image-1445625392518.36.18.png\"
        width=\"150px;\" style=\"mix-blend-mode: multiply;\" />\n\n**Play time:**
        \ Here is the code for an interesting shape.   \n\nWhat happens when you repeat
        it multiple times, turning between each iteration?   \n\nNotice that the turns
        in this shape add up to _420 degrees_, which means that when your artist is
        done drawing, it will be facing a different direction than when you started.
        \ That new direction is exactly _60 degrees_ to the _right_ of where you began.\n\n<hr/>\n\n<h4>\n<details>\n<summary><b>Repeat
        4</b></summary>\n<br/>\n\nIf you want to come full circle in just 4 repetitions,
        you need the artist to turn a total of **360 degrees/4 = 90 degrees** each
        time.  You can do that by adding an extra `turn right by 30 degrees` block
        to the outer loop (since **60+30 = 90**.)\n\n<br/>\n<img src=\"https://images.code.org/9da67a628ed72e87520a02a0d917e2af-image-1440132370113.44.12.png\"
        width=\"500px;\" style=\"mix-blend-mode: multiply;\" />\n<br/><br/>\n</details>\n</h4>\n\n<h4>\n<details>\n<summary><b>Repeat
        6</b></summary>\n<br/>\n\nWhen you repeat the shape as-is 6 times, you get
        a total rotation of **6x60 degrees** which is a full **360 degree** cycle.\n\n<img
        src=\"https://images.code.org/b79f96b87097ce3afe8a6a5608d04e36-image-1440132287456.44.27.png\"
        \ width=\"500px;\"  style=\"mix-blend-mode: multiply;\" />\n</details>\n</h4>\n\n<h4>\n<details>\n<summary><b>Repeat
        12</b></summary>\n\n<br/>\n\nIf you want to repeat the image 12 times, you
        need the artist to turn a total of **360 degrees/12 = 30 degrees** each iteration.
        \ That means you will need to adjust the artist back a bit with `turn left
        by 30 degrees` before you repeat the shape again.\n\n<br/><br/>\n<img src=\"https://images.code.org/ad254952522674496918561096817c66-image-1440132424792.44.01.png\"
        width=\"500px;\" style=\"mix-blend-mode: multiply;\" />\n\n</details>\n</h4>\n\nNow
        it's your turn!  Can you recreate each image by repeating the starting shape?
        \ "
      Course 4 Artist 11: "<img src=\"https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png\"
        width=\"200px\"/>\n\nNow for a challenge!  \n\nHere is a design that uses
        only blocks that you have already been shown.  Can you figure out how to recreate
        it?  Feel free to use trial and error. You are not expected to get it perfect
        the first time.\n\nThe repeated shape is almost identical to the one from
        the last puzzle, except that the length used in the first loop is a little
        smaller. "
      Course 4 Artist 12: |-
        <img src="https://images.code.org/70795d84048767ae7fb65883f476b27c-image-1440050836837.01.09.png" width="250px"/>

        Free Play Inspiration: You've now learned everything you need to know to make a pattern like this! If this picture inspires you, try to make something similar. Otherwise, create something all your own.
      Course 4 Artist 13: Still playing?  Here is a blank canvas where you can design
        anything you want!
      Course 4 Artist 2: |-
        Can you use a loop to draw the greyed out square?\
        (Each side is 300px long)
      Course 4 Artist 20: "Still playing?  \n\nHere is a blank canvas where you can
        create whatever you want!"
      Course 4 Artist 3: "Try to figure out what happens if you run this code (or
        press \"Run\" to test it).  \n\nThen, repeat it enough times to complete the
        drawing."
      Course 4 Artist 4: |-
        How many degrees are in a circle?\
        Fill in the repeat block with that number to create a circle of colors.
      Course 4 Artist 5: "Draw the other half of this design so it's symmetrical.
        \nThe triangles are equilateral and are 50 pixels long.  \n\nYou may have
        to run the code several times to figure out all of the blocks that need to
        be added."
      Course 4 Artist 6: Complete the code to draw these three, equilateral triangles.
      Course 4 Artist 7: 'Now nest this loop inside another loop to draw 10 triangles. '
      Course 4 Artist 8: Draw this sun by looping this whole block of code multiple
        times.
      Course 4 Artist 8a: Remember this shape?  Now we're going to let you build it
        without giving you any blocks to start!
      Course 4 Artist 9: 'Loop this design 10 times and make sure to turn between
        each shape that''s drawn. '
      Course 4 Artist Binary 1: |-
        Tu máme funkciu, ktorá vezme binárny reťazec zložený z 1 a 0 a spracuje ich zľava doprava a zhora smerom nadol .

        Pokiaľ Umelec natrafí na 1, štvorec vymaľuje. Pokiaľ natrafí na 0, tak štvorec nechá tak.

        \*\* Spusti tento kód a sleduj, ako Umelec pomocou tejto funkcie nakreslí celý vzor.
      Course 4 Artist Binary Free Play 2b: "<img src=\"https://images.code.org/0a30f23ff6138828d053267719d34fa8-image-1444435986654.00.22.png\"
        width=\"250px\"/>\n\n**Free-Play Inspiration:** You've now learned everything
        you need to know to make a pattern like this! \n\nIf this picture inspires
        you, try to make something similar. Otherwise, create something all your own.
        \n<br/>"
      Course 4 Artist Binary pre1: |-
        Binary is a way of representing information using only two options. In this case, <b>off</b> and <b>on</b>.
        <br/>
        Here, we're going to use the number <b>0</b> as code for "off" and the number <b>1</b> as code for "on".

        <hr/>

        We've provided you with a grid of "pixels" that you can walk through and make designs by turning on only certain squares.

        <b>Use the blocks below to have the artist draw "01010101" in binary in the first row.</b>
      Course 4 Artist For Loops 1: Použite blok s opakovaním pre nakreslenie tohto
        trojuholníka, ktorý je 50 pixelov široký.
      Course 4 Artist For Loops 11: "Remember back in a previous stage when we used
        a variable to control the number of sides in a shape? We are going to do the
        same thing with the `counter` variable now.  \n\nThis pattern starts with
        a triangle and adds one side at a time until it draws a decagon (10 sides).
        Each side should be 100 pixels long. \n\nHow will you use the `counter` variable
        from the `for` loop to recreate this drawing?"
      Course 4 Artist For Loops 11a: "Let's put it all together!   \n\nUsing your
        knowledge of `for` loops and the `counter` variable, create this drawing where
        each shape has two more sides than the last.  Make sure that each side is
        10 times as long as the number of sides in the polygon.\n\nVery little of
        the code has been provided for you."
      Course 4 Artist For Loops 14: "If you turn a little bit more or less than you
        normally would for a shape, it creates a neat effect. \n\nTry using some of
        the code from the last level, but turning 89 degrees to create this twisted
        square spiral."
      Course 4 Artist For Loops 15: "**Free Play:** Try making some drawings of your
        own using `for loops`. We've added a few useful variables for you as well."
      Course 4 Artist For Loops 2: |-
        I've put the code for drawing a triangle inside a `for loop` that counts from 50 to 100 by 10.

        **NOTE:** Make sure you look at the code _before_ you hit "Run".
      Course 4 Artist For Loops 3: Use the last puzzle as a reference to complete
        this one.  The smallest triangle has 20 pixel sides, the largest has 200 pixel
        sides, and each triangle is 20 pixels larger than the last.
      Course 4 Artist For Loops 4: 'How would you modify what you''ve learned to draw
        these squares? They start at 15 pixels long, the largest is 300 pixels long,
        and each square is 15 pixels larger than the last. '
      Course 4 Artist For Loops 6a: Sprav tri malé zmeny v kóde z predošlého levelu,
        aby si vytvoril toto!
      Course 4 Artist For Loops 8: "Len jedná malá zmena v kóde z posledného obrázku
        dokáže vytvoriť takýto obrázok. Vieš zistiť aká je to zmena?\n\nNápoveda:
        Potrebuješ niečo odstrániť!  "
      Course 4 Artist For Loops Challenge: |-
        **Challenge:** Can you figure out how to use all of the things you've learned to create this image of polygons, all with 40 pixel sides?

        Remember, in order to create a spiral, you cannot close the polygon.  This means that each shape will need to have one fewer sides than usual.
      Course 4 Artist For Loops inspire: |-
        <br/><br/>
        <img src="https://images.code.org/9b5897e059bb29bd2faf8504659a3cfc-image-1440719685627.49.33.png" width="250px"/>\
        <br/><br/>
        **Free-Play Inspiration:** You've now learned everything you need to know to make a pattern like this! If this picture inspires you, try to make something similar. Otherwise, create something all your own.
      Course 4 Artist Functions Inspiration: "<img src=\"https://images.code.org/cf373e03bede480ae54aec72ce823454-image-1442951867535.54.11.png\"
        width=\"250px\"/>\n\n**Free-Play Inspiration:** You've now learned everything
        you need to know to make a pattern like this! \n\nIf this picture inspires
        you, try to make something similar. Otherwise, create something all your own. "
      Course 4 Artist Functions challenge: "<img src=\"https://images.code.org/69f1c2b415f907c86aaa6ed2534c3682-image-1442870371171.13.38.png\"
        width=\"250px\"/>\n\n**Challenge Level:** Use what you've learned in this
        stage and others to figure out how to make the drawing above.  "
      Course 4 Artist Inspire: "<img src=\"https://images.code.org/b5e28b084cb331ee030ea3853ed921bd-image-1440060815818.51.21.png\"
        width=\"250px\"/>\n\n**Free-Play Inspiration:** You've now learned everything
        you need to know to make a pattern like this! If this picture inspires you,
        try to make something similar. Otherwise, create something all your own. "
      Course 4 Artist Vars 1: "Let's draw an equilateral triangle. \n\nIt has to be
        exactly 100 pixels long on each side.\n\n<br/>"
      Course 4 Artist Vars 11: "Here’s some more complicated code using the same concepts
        from the last puzzle - what should you set the `sides` variable to in order
        to draw this picture made of squares?\n\n<p style=\"font-size:small; padding:
        15px 15px 15px 40px; background-color:#dcf3f3; border-radius:10px;\">\n\tJust
        for fun: Try using a few different numbers to see what happens to the pattern!\n</p>"
      Course 4 Artist Vars 12: |-
        Let's set the `sides` variable to 5. The more sides we add to this algorithm, the bigger this whole pattern gets!

        Notice that there is another variable called `length`.
        We can now use that variable wherever we have a `move forward` block.

        Set the `length` variable to 75 for this shape.
      Course 4 Artist Vars 13: "When a shape has lots of sides, each side needs to
        be shorter if you want the whole pattern to fit on the screen. \n\nLet's recreate
        the algorithm for this amazing pattern, but instead of manually setting the
        `length` variable, let's use a math block with the `sides` variable inside
        to make sure that each shape fits correctly.  \n\nThe perimeter of each polygon
        is 300 pixels."
      Course 4 Artist Vars 14: |-
        **Free Play**: Check it out! Now your algorithm is nested within one more loop. Experiment with changing the values of your two variables to draw cool patterns.

        For even more effect, try playing with color!  Use random colors inside loops to see how it changes your design.
      Course 4 Artist Vars 2: Instead of using `move forward by 150`, the `move` block
        is now referencing a variable called `length`. Can you set `length` to 150
        to draw this new triangle?
      Course 4 Artist Vars 4: Now I want to make a rectangle that is twice as tall
        as it is wide. We've got a variable called `width` that needs to be set to
        100. Can you use the math blocks to complete the code?
      Course 4 Artist Vars 6: "Here’s some code that can draw any regular polygon.
        \n\nThere’s a new variable called `sides` that is set to 4. \n\nCan you use
        the `sides` variable (along with the math block) to turn the right amount
        regardless of how many sides are in the polygon?"
      Course 4 Artist Vars 7: |-
        Use what you learned in the last puzzle to create this hexagon using the `sides` variable.

        See how you could change just one value to draw a triangle,  square, pentagon, or octagon?
      Course 4 Artist Vars 8: "**Free Play:** Experiment with the number of sides
        this shape has. Can you change the algorithm so that the overall size of the
        shape stays the same, no matter how many sides it has? "
      Course 4 Bee 1: "The bee can't tell what's under the cloud! \n\nUse the `if`
        block to check whether there is a flower under the cloud. \n\nGet nectar one
        time, **ONLY** if there is a flower."
      Course 4 Bee 2: "Use the `if/else` block to check each object to see if it's
        a flower or a honeycomb. \n\nIf it's a flower, collect one nectar...otherwise,
        make one honey!"
      Course 4 Bee 3: "The unknown object is either a flower or a honeycomb. \n\nThis
        time, use the `if/else` block to collect one nectar **if** it is a flower,
        **else** make one honey (because then it would be a honeycomb)."
      Course 4 Bee Params 1: Write a sequence to collect all of the nectar using `get
        3 nectar` which turns, moves to collect the nectar, and then returns to the
        original location.
      Course 4 Bee Params 2: Modify the `get 3 nectar` function so it makes me turn
        right instead of left to the flowers.
      Course 4 Bee Params 3: "Now there are flowers on both sides!  \n\nWe've added
        variables called `left` and `right` for you to use, and now there is a parameter
        called `direction` inside `get 3 nectar`. \n\n**Edit `get 3 nectar` so that
        the bee turns the correct direction when the variables `left` or `right` are
        passed into the function.**"
      Course 4 Bee Params 5: Let's start from scratch - can you create a new function
        called `get 5 nectar` with a direction parameter?
      Course 4 Bee Params 6: |-
        Wouldn't it be nice if we could collect all of these nectars with a single function?

        Try adding a new parameter to your function called `nectar units` to control the amount of nectar to collect. You'll probably want to rename the function too!
      Course 4 Bee Params 7: |-
        Try using your new function to collect all of this nectar.

        <br/>
      Course 4 Bee Params 8: "**Challenge:** Now there's honey to deal with too! \n\nRewrite
        your function to use both the number of honey units and the number of nectar
        units.  How would you use those numbers to decide what you should do?"
      Course 4 EC 1a: "**Extreme Challenge:**  No rules. No clues. Just the challenge!"
      Course 4 EC 1b: "**Extreme Challenge:**  No rules. No clues. Just the challenge!"
      Course 4 EC 2a: "**Extreme Challenge:**  No rules. No clues. Just the challenge!"
      Course 4 EC 2b: "**Extreme Challenge:**  No rules. No clues. Just the challenge!"
      Course 4 EC 2c: "**Extreme Challenge:**  No rules. No clues. Just the challenge!"
      Course 4 Maze 4: Try the `repeat` block to use fewer blocks when solving this
        puzzle...
      Course 4 Play Lab Params 1: "Here's a function called `jump` that causes your
        main character to jump up 100 pixels. \n\nRun the program and use the jump
        function to collect all of the flags by moving the dog with the arrow keys."
      Course 4 Play Lab Params 10: |-
        We've added one last function for you.

        <hr/>

        Use an `if` statement to program your game to call the `level_up` function only when `player_score` becomes greater than a certain number.

        </h4>

        *For example: `player_score` > 6*

        <hr/>

        _Play the game, and make it to level 3 to move to the next puzzle._
      Course 4 Play Lab Params 2: "Now we've got flags that are too high for our current
        jump! Let's use both the \"up\" and \"down\" arrows so that we can have multiple
        jump heights.  \n\nWe need to add a parameter to our jump function called
        `height`.  \n\n-   The up arrow should cause the dog to jump 200 pixels \n-
        \  The down arrow should make it jump only 100 pixels. "
      Course 4 Play Lab Params 3: |-
        We have added another parameter to the jump function so that we can use it with other actors. Each actor is represented by a number, starting from one.

        Edit the `jump` function so that it uses the `actor` parameter to make the correct character jump.
      Course 4 Play Lab Params 4: "Here's a function called `patrol`. \n\nEdit `patrol`
        to move Cat up 400 pixels and then down 400 pixels."
      Course 4 Play Lab Params 5: Edit the the `patrol` function to add an `actor`
        parameter, so that we can call it for each of the actors on the screen. Remember,
        the actors correspond to numbers 1, 2, and 3.
      Course 4 Play Lab Params 6: Add another parameter called `speed` to the `patrol`
        function. Try using a `set speed` block with the new `speed` parameter to
        help Penguin get both flags before the other sprites even get one.
      Course 4 Play Lab Params 7: "Let's have some fun! Look at the code provided
        to see if you can figure out what each block does.  \n\nWhen you're done,
        use the arrow keys to control Dog and collect all of the flags.\n\n**NOTE:**
        You don't need to make any changes to the program"
      Course 4 Play Lab Params 8: Use the `when actor touches` block to send Dog back
        to the top-left ONLY if Dog touches any of the other actors.
      Course 4 Play Lab Params 9: |-
        Here's our game from an earlier stage but most of the code is hidden. We've added a new function called `score_points.`

        * * *

        #### Edit the function so that a new parameter called `points` is added to `player_score`.

        #### The variable `player_score` should increase each time Dog tags Cat with pie, and decrease each time that Cat tags Dog with a sandwich.

        * * *

        _Note: When you're done, click "Run" to play.  When Dog scores 6 points, you will move on to the next puzzle._
      Course 4 Play Lab Vars 1: |-
        This time you don't have to write any code, just hit `Run` to play the game!

        In this game, you're the dog who is trying to collect more flags than the cat. Use the down arrow to control the dog. Press `Finish` when you're done playing.
      Course 4 Play Lab Vars 2: The race in that last puzzle wasn't very fair! Change
        the `dog_speed` variable to make sure you can collect more flags than Cat.
        The first to collect 10 flags wins!
      Course 4 Play Lab Vars 3: "Here's a new kind of game! \n\nYou don't need to
        change anything on this level.\n\n**Directions:** Use the left and right arrows
        to move, and the up arrow to jump. See if you can collect all of the flags."
      Course 4 Play Lab Vars 4: 'Now we''re using a variable called `height` to control
        how high the dog can jump. Update the `height` variable so that the dog can
        jump high enough to reach all the flags. '
      Course 4 Play Lab Vars 6: |-
        In our game, how should we score points?

        1.  Add 1 to your `points` variable each time Dog hits Cat with a piece of pie.

        2.  Use the `when actor 2 touches anything` event to trigger an update to your score. You can increment your variable by setting `points = points + 1.`

        3.  Get your score up to 10 to pass the level.

        **Note:** Use the right arrow to throw pie!
      Course 4 Play Lab Vars 7: "Nice, now let's make sure this game isn't too easy
        to play!  \n\nAny time Dog (actor 1) gets hit by a sandwich from Cat (actor
        2), you should lose a point. \n\nStart with 10 points so it's not too hard.
        Let your score drop down from 10 to 0 to pass the level."
      Course 4 Play Lab Vars 9: "Free Play time! Here are all of the variables we've
        played with so far in this stage, as well as a few more in case you want them.
        \n\nNotice that there are now so many blocks in our toolbox that they need
        to be organized!  Here, we've put each piece into an appropriate category.
        \ Take some time to explore everything that is available. When you're done
        browsing, make a game or story using repeats, variables, and events.  \n\n_Hint:
        scroll down to see all the commands in the workspace._"
      Course 4 Play Labs For Loops 1: Let's make the dog speak every number from 1
        to 100. Use a `for` loop and the counter block to speak the counter variable
        each time the loop is run.
      Course 4 Playlab For Loop Freeplay: "**Freeplay:** Use everything you've learned
        so far to make a game that includes a `for` loop!"
      Course 4 Playlab For Loops 4b: "Now, these two characters are going to race!
        \ \n\nEach of them will move `counter` steps at a time, but their counters
        will have different values because of the `for` loops.  \n\nCan you change
        the **increment** in one of the loops so that the race is a tie?"
      Course 4 Playlab For Loops 5b: Adjust the interval on these `for` loops so that
        the two characters end in the exact same place.
      Course 4 Playlab For Loops 6b: "Now we're going to use `for` loops in a whole
        different way!\n\nThis game gets hard quickly because the time between disappearances
        shrinks fast!\n\n<hr/>\n\n**Edit this `for` loop to create a game that's fun
        for you to play!**  \n\n<hr/>\n\nPress \"Run\" and click Madame Unicorn as
        many times as you can.  Can you beat our score of 24? "
      Course 4 SCF 1: "**Functions Super Challenge:** Use the suggested functions
        to draw four rows of hexagons. Notice how our even numbered rows are shifted
        to the right?"
      Course 4 SCF 1a: "**Functions Super Challenge:** Can you figure out how to collect
        all of this nectar with the fewest blocks possible?"
      Course 4 SCF 1b: "**Functions Super Challenge:** Can you figure out how to collect
        all of this honey with the fewest blocks possible?"
      Course 4 SCF 2: "**Functions Super Challenge:** Use what you learned in the
        previous level to draw an image like this.\n\n_Note: The code becomes more
        simple if you incorporate parameters._  "
      Course 4 SCF 3: "**Functions Super Challenge:** Use what you learned in the
        previous level to draw an image like this.\n\n_Note: The code becomes more
        simple if you incorporate parameters._\n\n<br/>\n<img src=\"https://images.code.org/d3d6a51fafdcc0a09a5c6b0e0f3c2b92-image-1446239805818.08.59.png\"
        width=\"300px\"/>\n<br/>  "
      Course 4 SCFL 1: "**For-Loops Super Challenge:** Solve this puzzle with the
        fewest number of blocks possible."
      Course 4 SCFL 1a: "**For Loops Super Challenge:** Can you get Scrat to his acorn
        using as few blocks as possible?"
      Course 4 SCFL 1b: "**For Loops Super Challenge:** Can you get Scrat to his acorn
        using as few blocks as possible?"
      Course 4 SCFL 2: |-
        **For-Loops Super Challenge:** Solve this puzzle with the fewest number of blocks possible.\
        <br/>
      Course 4 SCFL 3: "**For-Loops Super Challenge:** Can you figure out how to re-create
        this drawing? \n\n<img src=\"https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png\"
        width=\"350px\"/>"
      Course 4 SCFL 4: "**For-Loops Super Challenge:** Can you figure out how to re-create
        this drawing? \n\n<img src=\"https://images.code.org/407f502735beec686187451bdf67aada-image-1446002848700.59.34.png\"
        width=\"350px\"/>"
      Course 4 SCFL 6: "**For-Loops Super Challenge:** Can you figure out how to re-create
        this drawing with a single loop? \n\n<img src=\"https://images.code.org/b0d15d06465d645c5ca533e5da6387b3-image-1446075597132.36.04.png\"
        width=\"350px\"/>"
      Course 4 SCFL 7: "**For-Loops Super Challenge:** The artist wants to catch some
        waves! Can you figure out how to re-create this drawing? \n\n<img src=\"https://images.code.org/fba3423f2e9a405d4d3859de32cdb0f3-image-1446102880655.13.36.png\"
        width=\"350px\"/>"
      Course 4 SCV 1: |-
        <img src="https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png" width="250px"/>

        **Variables Super Challenge:** You've now learned everything you need to know to make a pattern like this! This puzzle is meant to be difficult.  Can you stick with it until you figure out the solution?
      Course 4 SCV 2: |-
        <img src="https://images.code.org/85f0b27009edd86eff78692004b9ed52-image-1444712655590.02.32.png" width="250px"/>

        **Variables Super Challenge:** You've now learned everything you need to know to make a pattern like this! This puzzle is meant to be difficult.  Can you stick with it until you figure out the solution?
      Course 4 SCV 3: |-
        **Variables Super Challenge:** You've now learned everything you need to know to solve this puzzle! This game is meant to be difficult.  Can you stick with it until you figure out the solution?

        * * *

        Now for a game of tag!  Tag Cat to get 2 points. Tag Penguin to get 3 points.  Get exactly 10 points to win!
        But be careful, when Cat and Penguin tag each other, they take points away.

        **Add the blocks necessary to make this game work the way it's been explained.**

        -   **How will you get Dog to move in all directions using the arrow keys?**
        -   **How will you add points when Dog tags Cat or Penguin?**
        -   **How will you subtract points when Cat and Penguin touch?**
      Course 4 SCV 4: "**Variables Super Challenge:** Solve this puzzle with the fewest
        number of blocks possible."
      Course 4 SCV 5: "**Variables Super Challenge:** Solve this puzzle with the fewest
        number of blocks possible."
      Course 4 SCV 6: "<img src=\"https://images.code.org/499fc71a0a06bacb68a9789ad57f8148-image-1445574373673.16.44.png\"
        width=\"250px\"/>\n\n**Variables Super Challenge:** You've now learned everything
        you need to know to make a pattern like this! This puzzle is meant to be difficult.
        \ Can you stick with it until you figure out the solution?  "
      CourseD_Dance_Party_01: |-
        _Spravme si tanečnú párty!_

        Presuň blok 'vytvor' na pracovnú plochu a pripoj ho do vnútra bloku 'nastavenie', pre vytvorenie tvojho prvého tanečníka.

        -   _Ak chceš viac informácií, alebo extra výzvy, môžeš kliknúť na žiarovku vľavo._
      CourseD_Dance_Party_02: |-
        Roztancujme tohto soba!

        Presuň blok <xml><block type="Dancelab_changeMoveLR"><title name="SPRITE">new\_dancer</title><title name="MOVE" config="MOVES.Dab, MOVES.Drop, MOVES.Floss">Floss</title><title name="DIR">-1</title></block></xml> na pracovnú plochu. Napoj ho pod blok <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">4</title><title name="UNIT">"takty"</title></block></xml>. Tvoj tanečník by mal predviesť nový krok po štyroch taktoch.

        **Takty** sa v hudbe používajú na počítanie času. V tomto cvičení sa takt skladá zo štyroch dôb.
      CourseD_Dance_Party_03: "_Teraz sme to roztočili!_ \n\nPridaj blok <xml><block
        type=\"Dancelab_atTimestamp\"><title name=\"TIMESTAMP\">6</title><title name=\"UNIT\">\"takty\"</title></block></xml>
        na tvoju pracovnú plochu. Prikáž tanečníkovi spustiť nový krok po 6 taktoch."
      CourseD_Dance_Party_04: |-
        _Tento tanec potrebuje svetlo!_

        Vo svojich nástrojoch si všimni nový blok, ktorý pridáva efekt na pozadie za tanečníkmi. Sleduj, ako sa efekty menia v čase podľa hudby!
      CourseD_Dance_Party_05: |-
        Použi ďalší nový blok, aby tanečník zmenil kroky **každé 2 takty**!

        -   Zvolením `(Ďalší)`, `(Predchádzajúci)`, alebo `(Náhodné)` prikážeš tanečníkovi urobiť iný krok pri každom zbehnutí kódu.
      CourseD_Dance_Party_06: |-
        _Potrebujeme viac tanečníkov!_

        Vytvor záložného tanečníka s menom 'backup\_dancer1', ktorý bude tancovať s mačkou.
      CourseD_Dance_Party_08: |-
        Každý tanečník má súbor _vlastností_, ktoré kontrolujú jeho vzhľad.

        Dojem toho, že je tanečník v pozadí, môžeš dosiahnuť tak, že zmenšíš jeho _veľkosť_. Vieš spraviť oboch záložných tanečníkov (backup dancer) rovnako veľkých?
      CourseD_Dance_Party_09: |-
        Tanečníci majú vlastnosť "sfarbenie", ktorá im pridá vrstvu farby. Skús zmeniť sfarbenie niektorého zo svojich tanečníkov.

        -   Sfarbenie zmieša farbu ktorú vyberieš s farbami tvojich tanečníkov.
      CourseD_Dance_Party_10: |-
        Teraz vieme ako zmeniť vlastnosti tanečníkov. Tiež môžme nastaviť tieto vlastnosti tak, aby automaticky reagovali použitím tohto bloku:
        <xml>
        <block type="Dancelab_startMapping">

        <title name="SPRITE">right_unicorn</title>
        <title name="PROPERTY">"výška"</title>
        <title name="RANGE">"basy"</title>
        </block></xml>

        Tento program využíva intenzitu "basov" (nízke tóny) v hudbe na kontrolu výšky jedného z tanečníkov. Vieš nastaviť aj druhého tanečníka tak, aby reagoval na hudbu?
      CourseD_Dance_Party_11: |-
        Blok <xml><block type="Dancelab_whenKey"></block></xml> ti umožňuje spustiť kód v momente, keď je stlačená šípka hore.

        Môžeš zmeniť tanečný krok, upraviť vlastnosti tanečníkov, alebo spraviť iba jeden rýchly krok. Buď kreatívny a všimni si nové bloky!
      CourseD_Dance_Party_11_5: "Pozri na tento blok:\n\n<xml>\n  <block type=\"Dancelab_makeNewDanceSpriteGroup\">\n
        \   <title name=\"N\">6</title>\n    <title name=\"COSTUME\">\"Kačíc\"</title>\n
        \   <title name=\"LAYOUT\">\"kruh\"</title>\n  </block></xml>\n  \nTeraz môžeš
        vytvoriť viacerých tanečníkov naraz!\n\nSkús použiť niektorý z blokov \"všetky
        kačice\" na napísanie kódu, ktorý roztancuje všetky kačice spoločne."
      CourseD_Dance_Party_11b: |-
        Je čas na tanečný súboj! Mačka spraví dab, keď stlačíš šípku vľavo. Donúť Robota spraviť "špagát" pri stlačení šípky vpravo a "tlesk" pri stlačení šípky hore.

        **S použitím šípiek donúť Robota tancovať špagát-tlesk-špagát-tlesk ako najrýchlejšie vieš!**
      CourseD_Dance_Party_12: Roztoč to na parkete! Vytvor svoj vlastný tanec, ktorý
        môžeš zdieľať s kamarátmi.
      CourseE_HOC 2018 Level_1: Na cestu potrebuješ zásoby. Zober **loď\* ![](https://images.code.org/0b3162de9dc0abf3e0890d315b8cc699-image-1538697977747.png)
        z \*\*truhly** ![](https://images.code.org/e0cf43fd36a50dd16ee06595047bfd8f-image-1538697999418.png).
      CourseE_HOC 2018 Level_10: Niekde v pamiatke sa ukrýva **kalamár** ![](https://images.code.org/82f305ab1cb4a9ff9044991a18edb16e-image-1538947827218.png).
        Dokážeš ho nájsť?
      CourseE_HOC 2018 Level_11: Vybuduj stenu z **kryštálov** ![](https://images.code.org/d110b8d13c01756fcdbef3768b2e2859-image-1538699770898.png)
        okolo čierneho betónu.  To ti umožní spustiť **potrubie** ![](https://images.code.org/7773cf30f42e6727a23c8cb364d4664b-image-1538699800030.png)
        a dokončiť úlohu![0]
      CourseE_HOC 2018 Level_2: S loďou to pôjde ľahšie ako plávať na otvorenom mori!
        Choď na koniec doku a naloď sa.
      CourseE_HOC 2018 Level_3: Chyť sa vesiel a namier loď cez otvorené more za **treskou**
        ![](https://images.code.org/9b636884eefb1efe18f9f844e1e916a9-image-1538698597353.png).
      CourseE_HOC 2018 Level_4: Nakŕm  **delfína**  treskou ![](https://images.code.org/8c240fd4df4da2795ba7ca942b77a057-image-1538947890991.png).
        Použi blok opakuj pokiaľ neplatí, aby si prešiel oceán rýchlejšie.
      CourseE_HOC 2018 Level_5: Niekde sa tam ukrýva **ulita** ![](https://images.code.org/2eb084fa0c718dee6ca4b6379381f735-image-1538698936660.png)!
        Preskúmaj vrak lode, aby si sa dostal k  **truhlici** ![](https://images.code.org/16cdd5779b38909d4bf47b29535c92b0-image-1538698950602.png).
      CourseE_HOC 2018 Level_6: Vyzerá to, že tam poriadne mrzne! Po ceste k podmorským
        ruinám chyť **lososa** ![](https://images.code.org/c66eadf25b3cdfe20bbfdc91e2c28c94-image-1538699000102.png).
      CourseE_HOC 2018 Level_7a: Objavil si podmorské ruiny. Prehľadaj kamene a nájdi
        **truhlicu** ![](https://images.code.org/29a5fd76b869d755a60d39fbbb4057eb-image-1538699081910.png),
        v ktorej je **kryštálový** ![](https://images.code.org/5f5ebe5121b8f9787d7dbd38ad0a86cc-image-1538699091018.png)
        poklad.
      CourseE_HOC 2018 Level_8: Najprv ľadovce a teraz láva? Prejdi tento vulkanický
        ostrov a nájdi v koralovom útese **tropickú rybku** ![](https://images.code.org/6d3293e7709cb1a43d9f7617fd0cc2b8-image-1538699180397.png).
      CourseE_HOC 2018 Level_9b: Dostal si sa k útesu. Teraz hľadaj **Perlu oceánu**
        ![](https://images.code.org/3035926d2a37aa695b5d47413adcffa2-image-1538699398781.png)
        ! Pre nájdenie **truhlice s pokladom** ![](https://images.code.org/af697397dd70e5b6b93b00eb46c558af-image-1538699377397.png)
        použi modré a červené koraly.
      Crack Random Substitution: |-
        # Break a random substitution cipher!

        This version of the tool gives you more information about the encrypted text and more options for how to try out different substitutions.

        ### Different ways to analyze text

        -   Play with some of the sorting options available in the Random substitution cipher tab to get different views on the letter frequencies in the input text as well as standard English text.
            ![](https://images.code.org/82efbca1807206c9a07de520fdb22027-image-1443572614493.23.28.png)

        ### Different ways to substitute

        -   To substitute a letter you can drag a blue letter of the alphabet directly underneath the orange letter you want changed in the original ciphertext.
            ![](https://images.code.org/da9a7af7568d8c1698872ab91b4d79d7-image-1443572471212.gif)

        ### Play.  Always play.

        -   There are other ways to analyze and substitute characters that you can find by clicking on the buttons and trying out whatever you like.
        -   Remember: you can't break it :)

        See how long it takes you to crack the cipher! Is this a good method of encrypting secret data?

        <img src="http://code.org/api/hour/finish_encryption.png">
      Crack a Caesar Cipher: |-
        # Crack a Caesar cipher!

        This tool lets you play with text and do Caesar ciphers. You can use this to either encrypt a message or decrypt it.

        # Do this

        -   Load a **Sample message** from the message dropdown. This will load a message that has been encrypted with a Caesar cipher.

        ![](https://images.code.org/347139486c8c729bf3c6e72ce67da878-image-1476286380409.gif)

        -   Using the buttons in the Caesar substitution tab, you can shift the alphabet forwards or backwards to try to unscramble the message.

        ![](https://images.code.org/ef9ebc16d2f1442dc46fba9bd48b5d43-image-1476285966821.gif)

        See how long it takes you to crack the cipher! Is this a good method of encrypting secret data?

        <img src="http://code.org/api/hour/begin_encryption.png">
      Dance Party 1-validated: "**Skús predvídať:** Tu je postavička s menom `alien1`!
        \n\nČo myslíš, že sa stane, keď na neho klikneš?  "
      Dance Party 2: "Mimozemšťan bol hrdý na jeho tanečné schopnosti na Marse, ale
        teraz sa vie hýbať iba zo strany na stranu.\n\nVieš zmeniť správanie v bloku
        <xml> <block type=\"gamelab_addBehaviorSimple\" inline=\"true\">\n      <value
        name=\"SPRITE\">\n        <block type=\"sprite_variables_get\">\n          <title
        name=\"VAR\">alien1</title>\n        </block>\n      </value>\n    </block></xml>
        tak, aby sa začal točiť?  "
      Dance Party 2_2019: "Mimozemšťan bol hrdý na jeho tanečné schopnosti na Marse,
        ale teraz sa vie hýbať iba zo strany na stranu.\n\nVieš zmeniť správanie v
        bloku <xml> <block type=\"gamelab_addBehaviorSimple\" inline=\"true\">\n      <value
        name=\"SPRITE\">\n        <block type=\"sprite_variables_get\">\n          <title
        name=\"VAR\">alien1</title>\n        </block>\n      </value>\n    </block></xml>
        tak, aby sa začal točiť?  "
      Dance Party 3: "Vytvor novú postavičku s menom `alien2`. \n\nPrikáž mu zmeniť
        tanečný krok, keď na neho klikneš.  "
      Dance Party 3_2019: "Vytvor novú postavičku s menom `alien2`. \n\nPrikáž mu
        zmeniť tanečný krok, keď na neho klikneš.  "
      Dance Party 4: "Vytvor tretiu postavičku nazvanú `alien3`. \n\nVieš nastaviť
        všetkých mimozemšťanov tak, aby boli v jednej línií? Začína mimozemská tanečná
        párty!"
      Dance Party 4_2019: "Vytvor tretiu postavičku nazvanú `alien3`. \n\nVieš nastaviť
        všetkých mimozemšťanov tak, aby boli v jednej línií? Začína mimozemská tanečná
        párty!"
      Dance Party 5: "V tomto programe môžme zmeniť rôzne veci keď klikneš na postavičky.
        Zmeňme ich farbu! \n\n**Pridaj kód, ktorý zmení farbu každého mimozemšťana,
        keď na neho klikneš.**"
      Dance Party 5_2019: "V tomto programe môžme zmeniť rôzne veci keď klikneš na
        postavičky. Zmeňme ich farbu! \n\n**Pridaj kód, ktorý zmení farbu každého
        mimozemšťana, keď na neho klikneš.**"
      Dance Party 6: |-
        Títo mimozemšťania tu pobehujú ako zbláznení!

        Použi blok <xml><block type="gamelab_removeAllBehaviors" inline="true">
              <value name="SPRITE"/>
            </block></xml>, aby si zastavil mimozemšťana keď na neho klikneš.
      Dance Party 6_2019: |-
        Títo mimozemšťania tu pobehujú ako zbláznení!

        Použi blok <xml><block type="gamelab_removeAllBehaviors" inline="true">
              <value name="SPRITE"/>
            </block></xml>, aby si zastavil mimozemšťana keď na neho klikneš.
      Dance Party 7: "Na koniec pridaj zvonček nazvaný `myBell`. \n\nKeď na neho klikneš,
        nech donúti všetkých mimozemšťanov robiť rovnaký tanečný krok!"
      Dance Party 7_2019: "Na koniec pridaj zvonček nazvaný `myBell`. \n\nKeď na neho
        klikneš, nech donúti všetkých mimozemšťanov robiť rovnaký tanečný krok!"
      Dance Party Freeplay: |-
        Teraz vytvor svoju vlastnú mimozemskú tanečnú párty! Hľadáš inšpiráciu? Skús tieto nápady:

        -   Vytvor dva zvončeky a prikáž mimozemšťanom robiť odlišný krok pre každý z nich
        -   Prikáž mimozemšťanom robiť nový tanečný krok vždy keď sa navzájom dotknú
      Dance Party Freeplay_2019: |-
        Teraz vytvor svoju vlastnú mimozemskú tanečnú párty! Hľadáš inšpiráciu? Skús tieto nápady:

        -   Vytvor dva zvončeky a prikáž mimozemšťanom robiť odlišný krok pre každý z nich
        -   Prikáž mimozemšťanom robiť nový tanečný krok vždy keď sa navzájom dotknú
      Dance Party Predict: "**Skús predvídať:** Tu je sprite s menom `alien1`! \n\nČo
        myslíš, že sa stane, keď na neho klikneš?  "
      Dance Party Predict_2019: "**Skús predvídať:** Tu je postava, ktorá vyzerá ako
        modrý mimozemšťan!   \n\nČo myslíš, že sa stane, keď na neho klikneš?  "
      Dance_2019_01: |-
        Prenes blok <xml><block type="Dancelab_makeAnonymousDanceSprite" block-text="make a new dancer"><title name="COSTUME" config="&quot;CAT&quot;, &quot;PINEAPPLE&quot;">"CAT"</title><title name="LOCATION">{x: 200, y: 200}</title></block></xml> na pracovnú plochu a spoj ho vo vnútri bloku <xml><block type="Dancelab_whenSetup2" next_connection_disabled="true" block-text="setup"></block></xml>.

        Vyber si `mačku` alebo `leňochoda` na vytvorenie prvého tanečníka.

        -   _Ak potrebuješ viac informácií alebo extra výzvy, môžeš klinúť na žiarovku naľavo._
      Dance_2019_02: "Blok <xml><block type=\"Dancelab_whenKey\" block-text=\"when
        up pressed\"></block></xml> spustí kód pri stlačení tlačidiel so šípkami.
        \nPouži blok <xml><block type=\"Dancelab_doMoveEachLR\" block-text=\"do once\"><title
        name=\"GROUP\">\"CAT\"</title><title name=\"MOVE\">MOVES.XClapSide</title><title
        name=\"DIR\">-1</title></block></xml>, aby mačka zatlieskala!\n\n_Uisti sa,
        že stlačíš tlačidlo \"šípka hore\" alebo ![](<https://images.code.org/419e704e6841c0b696016bf5029b8cb9-image-1571864825506.06.45
        PM.png>), potom čo klikneš na tlačidlo Spustiť!_"
      Dance_2019_03: Je čas na tanečný rozstrel! Naprogramuj každého tanečníka tak,
        aby sa pohyboval po stlačení rôznych klávesov. Vyber si svoj obľúbený pohyb
        pre každého tanečníka alebo ho nastav na "(Náhodné)“ pre niečo úplne nepredvídateľné!
      Dance_2019_04: "Nechaj tanečníkov pohybovať sa v rytme hudby!\n\nPripoj blok
        <xml><block type=\"Dancelab_atTimestamp\"><title name=\"TIMESTAMP\">4</title><title
        name=\"UNIT\">\"measures\"</title></block></xml> k bloku <xml><block type=\"Dancelab_changeMoveEachLR\"><title
        name=\"GROUP\">\"SHARK\"</title><title name=\"MOVE\">MOVES.ThisOrThat</title><title
        name=\"DIR\">-1</title></block></xml>  z panela nástrojov. \n\nTvoj tanečník
        by mal začať robiť nový pohyb po štvrtom takte.\n\n**Takty** sa používajú
        na meranie času v hudbe. V tomto návode, sa jeden takt rovná štyrom úderom."
      Dance_2019_05: "_Teraz sme to roztočili!_ \n\nPridaj blok <xml><block type=\"Dancelab_atTimestamp\"><title
        name=\"TIMESTAMP\">6</title><title name=\"UNIT\">\"takty\"</title></block></xml>
        na tvoju pracovnú plochu. Prikáž tanečníkovi spustiť nový krok po 6 taktoch."
      Dance_2019_06: "Použi tento nový blok, aby si nastavil/a okolo hlavného tanečníka
        v strede, aj skupinu vedľajších tanečníkov. \n\n  <xml><block type=\"Dancelab_makeNewDanceSpriteGroup\">\n
        \   <title name=\"N\">???</title>\n    <title name=\"COSTUME\" config=\"&quot;BEAR&quot;,
        &quot;CAT&quot;, &quot;FROG&quot;, &quot;PINEAPPLE&quot;, &quot;SHARK&quot;,
        &quot;UNICORN&quot;, &quot;SLOTH&quot;\">???</title>\n    <title name=\"LAYOUT\">\"circle\"</title>\n
        \ </block></xml>\n\nTeraz môžeš vytvoriť viacero vedľajších tanečníkov naraz!"
      Dance_2019_07: |-
        Každý tanečník má sadu _vlastnostní_, ktoré ovplyvňujú to ako vyzerá.

        Použi <xml><block type="Dancelab_setPropEach" block-text="the set block"><title name="GROUP" config="sprites, &quot;BEAR&quot;, &quot;CAT&quot;, &quot;DUCK&quot;, &quot;FROG&quot;, &quot;PINEAPPLE&quot;, &quot;SHARK&quot;, &quot;UNICORN&quot;, &quot;SLOTH&quot;">???</title><title name="PROPERTY">"scale"</title><title name="VAL">???</title></block></xml> pod zeleným blokom s udalosťami, aby sa tanečníci zdali byť ďalej alebo bližšie.
      Dance_2019_08: Tanečníci majú vlastnosť "odtieň", ktorá pridáva vrstvu farby.
        Skús zmeniť odtieň jedného z vašich tanečníkov (alebo celej skupiny)!
      Dance_2019_09: |-
        Tento **nový blok** je špeciálny druh udalosti, ktorá sa spúšťa znova a znova.

        <xml><block type="Dancelab_everySeconds"><title name="N">2</title><title name="UNIT">"measures"</title></block></xml>

        Umiestnením ďalších nových blokov do panela s nástrojmi vo vnútri opakovacieho bloku, môžete v priebehu času opakovane meniť vlastnosti tanečníkov. Buďte kreatívni a zabavte sa!

        _Keď to dokončíš stlač tlačidlo Dokončiť._
      Dance_2019_10: Roztoč to na parkete! Vytvor svoj vlastný tanec, ktorý môžeš
        zdieľať s kamarátmi.
      Dance_Party_01: |-
        _Spravme si tanečnú párty!_

        Presuň blok 'vytvor' na pracovnú plochu a pripoj ho do vnútra bloku 'nastavenie', pre vytvorenie tvojho prvého tanečníka.

        -   _Ak chceš viac informácií, alebo extra výzvy, môžeš kliknúť na žiarovku vľavo._
      Dance_Party_02: |-
        Roztancujme tohto soba!

        Presuň blok <xml><block type="Dancelab_changeMoveLR"><title name="SPRITE">new\_dancer</title><title name="MOVE" config="MOVES.Dab, MOVES.Drop, MOVES.Floss">Floss</title><title name="DIR">-1</title></block></xml> na pracovnú plochu. Napoj ho pod blok <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">4</title><title name="UNIT">"takty"</title></block></xml>. Tvoj tanečník by mal predviesť nový krok po štyroch taktoch.

        **Takty** sa v hudbe používajú na počítanie času. V tomto cvičení sa takt skladá zo štyroch dôb.
      Dance_Party_03: "_Teraz sme to roztočili!_ \n\nPridaj blok <xml><block type=\"Dancelab_atTimestamp\"><title
        name=\"TIMESTAMP\">6</title><title name=\"UNIT\">\"takty\"</title></block></xml>
        na tvoju pracovnú plochu. Prikáž tanečníkovi spustiť nový krok po 6 taktoch."
      Dance_Party_04: |-
        _Tento tanec potrebuje svetlo!_

        Vo svojich nástrojoch si všimni nový blok, ktorý pridáva efekt na pozadie za tanečníkmi. Sleduj, ako sa efekty menia v čase podľa hudby!
      Dance_Party_05: |-
        Použi ďalší nový blok, aby tanečník zmenil kroky **každé 2 takty**!

        -   Zvolením `(Ďalší)`, `(Predchádzajúci)`, alebo `(Náhodné)` prikážeš tanečníkovi urobiť iný krok pri každom zbehnutí kódu.
      Dance_Party_06: |-
        _Potrebujeme viac tanečníkov!_

        Vytvor záložného tanečníka s menom 'backup\_dancer1', ktorý bude tancovať s mačkou.
      Dance_Party_08: |-
        Každý tanečník má súbor _vlastností_, ktoré kontrolujú jeho vzhľad.

        Dojem toho, že je tanečník v pozadí, môžeš dosiahnuť tak, že zmenšíš jeho _veľkosť_. Vieš spraviť oboch záložných tanečníkov (backup dancer) rovnako veľkých?
      Dance_Party_09: |-
        Tanečníci majú vlastnosť "sfarbenie", ktorá im pridá vrstvu farby. Skús zmeniť sfarbenie niektorého zo svojich tanečníkov.

        -   Sfarbenie zmieša farbu ktorú vyberieš s farbami tvojich tanečníkov.
      Dance_Party_10: |-
        Teraz vieme ako zmeniť vlastnosti tanečníkov. Tiež môžme nastaviť tieto vlastnosti tak, aby automaticky reagovali použitím tohto bloku:
        <xml>
        <block type="Dancelab_startMapping">

        <title name="SPRITE">right_unicorn</title>
        <title name="PROPERTY">"výška"</title>
        <title name="RANGE">"basy"</title>
        </block></xml>

        Tento program využíva intenzitu "basov" (nízke tóny) v hudbe na kontrolu výšky jedného z tanečníkov. Vieš nastaviť aj druhého tanečníka tak, aby reagoval na hudbu?
      Dance_Party_11: |-
        Blok <xml><block type="Dancelab_whenKey"></block></xml> ti umožňuje spustiť kód v momente, keď je stlačená šípka hore.

        Môžeš zmeniť tanečný krok, upraviť vlastnosti tanečníkov, alebo spraviť iba jeden rýchly krok. Buď kreatívny a všimni si nové bloky!
      Dance_Party_11_5: "Pozri na tento blok:\n\n<xml>\n  <block type=\"Dancelab_makeNewDanceSpriteGroup\">\n
        \   <title name=\"N\">6</title>\n    <title name=\"COSTUME\">\"Kačíc\"</title>\n
        \   <title name=\"LAYOUT\">\"kruh\"</title>\n  </block></xml>\n  \nTeraz môžeš
        vytvoriť viacerých tanečníkov naraz!\n\nSkús použiť niektorý z blokov \"všetky
        kačice\" na napísanie kódu, ktorý roztancuje všetky kačice spoločne."
      Dance_Party_11b: |-
        Je čas na tanečný súboj! Mačka spraví dab, keď stlačíš šípku vľavo. Donúť Robota spraviť "špagát" pri stlačení šípky vpravo a "tlesk" pri stlačení šípky hore.

        **S použitím šípiek donúť Robota tancovať špagát-tlesk-špagát-tlesk ako najrýchlejšie vieš!**
      Dance_Party_12: Roztoč to na parkete! Vytvor svoj vlastný tanec, ktorý môžeš
        zdieľať s kamarátmi.
      Dance_Party_extras_alternate_2019: |-
        # Dopredu a dozadu!

        Niekedy si budeš chcieť vytvoriť vzor vlastných tanečných pohybov. Tento nový blok ti to umožní.

        <xml><block type="Dancelab_alternateMoves"><title name="GROUP">sprites</title><title name="N">2</title><title name="MOVE1">MOVES.Roll</title><title name="MOVE2">MOVES.ClapHigh</title></block></xml>

        Pohyby, ktoré si vyberieš vyššie sa budú opakovať v reťazci do nekonečna.

        -   Vytvor meniacu sa choreografiu pre hlavného tanečníka vpredu!
        -   Použi rôzne čísla na zmenu rýchlosti striedania pohybov. Vyskúšaj `1` alebo `0.5` pre rýchlejšie striedanie!
      Dance_Party_extras_battle: |-
        # Tanečné skupiny

        Máme tu tanečný súboj medzi dvomi tanečnými skupinami. Šípky ovládajú jedného z tanečníkov a klávesy "w,a,s,d" ovládajú druhého. Daj si tanečný súboj s kamarátmi a potom skús tento súboj vylepšiť.

        -   Pridaj viac kláves na ovládanie tanečníkov
        -   Uprav tanečníkov na pozadí tak, aby aj oni reagovali na stlačenia kláves
        -   Vymeň tanečníkov každé 4 takty nastavením ich viditeľnosti
      Dance_Party_extras_battle_2019: |-
        # Tanečné skupiny

        Máme tu tanečný súboj medzi dvomi tanečnými skupinami. Šípky ovládajú jedného z tanečníkov a klávesy "w,a,s,d" ovládajú druhého. Daj si tanečný súboj s kamarátmi a potom skús tento súboj vylepšiť.

        -   Pridaj viac kláves na ovládanie tanečníkov
        -   Uprav tanečníkov na pozadí tak, aby aj oni reagovali na stlačenia kláves
        -   Vymeň tanečníkov každé 4 takty nastavením ich viditeľnosti
      Dance_Party_extras_every_beat: |-
        # Štvrťové noty

        Väčšina našich tanečníkov používala celé takty, ale každý z taktov sa skladá zo 4 štvrťových dôb. Tento tanec využíva `každé 0.25 takty` na to, aby tanečník tlieskal na každú štvťovú dobu.

        Tento tanec využíva tiež blok _podmienka_ na kontrolovanie kedy môže blok `každé 0.25 takty` zmeniť tanec. Skús zmeniť čísla v bloku s podmienkou, aby si videl ako to ovplyvní tanec.

        -   Experimentuj s iným dĺžkami dôb (ako 0.5 pre polovičné doby, alebo 0.125 pre osminové doby).
        -   Pridaj nejaké `po` udalosti.
        -   Zmeň "takty" na "sekundy" a skús načasovať svoj tanec týmto spôsobom.
      Dance_Party_extras_every_beat_2019: |-
        # Štvrťové noty

        Väčšina našich tanečníkov používala celé takty, ale každý z taktov sa skladá zo 4 štvrťových nôt. Tento tanec využíva <xml><block type="controls_if"><value name="IF0"><block type="logic_compare"><title name="OP">LT</title><value name="A"><block type="Dancelab_getTime"><title name="UNIT">"measures"</title></block></value><value name="B"><block type="math_number"><title name="NUM">5</title></block></value></block></value><statement name="DO0"></statement></block></xml> na to, aby tanečník tlieskal na každú štvťovú dobu, ale len počas prvých štyroch taktov

        Skús zmeniť čísla v blokoch, aby si videl/a ako to ovplyvní tanec.

        -   Experimentuj s iným dĺžkami nôt (ako 0.5 pre polovičné noty, alebo 0.125 pre osminové noty).
        -   Pridaj nejaké iné udalosti.
      Dance_Party_extras_layout: |-
        # Všetci do formácie!

        Pozri sa na tento tanec, ktorý využíva blok `rozmiestni` na zmenu formácie tanečníkov na pozadí v priebehu tanca. Vyskúšaj niektorý z týchto nápadov na ďalšie vylepšenie:

        -   Vytvor druhú skupinu tanečníkov s iným rozmiestnením
        -   Zmeň rozmiestnenie pri stlačení tlačítka
        -   Zmeň vlastnosti pri zmene formácie
      Dance_Party_extras_layout_2019: |-
        # Všetci do formácie!

        Pozri sa na tento tanec, ktorý využíva blok <xml><block type="Dancelab_layoutSprites" block-text="layout"><title name="GROUP">"MOOSE"</title><title name="FORMAT">???</title></block></xml> na zmenu formácie vedľajších tanečníkov v priebehu tanca. Vyskúšaj niektorý z týchto nápadov na ďalšie vylepšenie:

        -   Vytvor druhú skupinu tanečníkov s iným rozmiestnením
        -   Zmeň rozmiestnenie po stlačení tlačidla
        -   Zmeň vlastnosti tanečníkov pri zmene ich formácie
      Dance_Party_extras_mixed_2019: |-
        # Viac tlačidiel

        Tento tanec ti umožňuje ovládať vlastnosti tanečníkov v reálnom čase, zatiaľ čo automaticky tancujú. Skús zmeniť ďalšie vlastnosti, po stlačení tlačidiel. Napríklad:

        -   Po stlačení tlačidla "nadol“, odtieň tanečníka bude náhodne zmenený.
        -   Pridaj skupinu tanečníkov s náhodným rozostavením, po stlačení "medzerníka".
      Dance_Party_extras_on_beat: |-
        # Basy, Stredy a Výšky

        Tento tanec používa udalosti s "vrcholmi" na spustenie kódu v momente, keď rôzne časti pesničky znejú hlasnejšie. Skús sa pohrať s rôznymi pesničkami, aby si videl ako menia priebeh tanca.
      Dance_Party_extras_on_beat_2019: |-
        # Basy, Stredy a Výšky

        Tento tanec používa udalosti s "vrcholmi" na spustenie kódu v momente, keď rôzne časti pesničky znejú hlasnejšie. Skús sa pohrať s rôznymi pesničkami, aby si videl ako menia priebeh tanca.
      Dance_Party_extras_speed: |-
        # Zrýchli, spomaľ

        Tento finálny tanec využíva blok `nastav rýchlosť` na kontrolovanie toho, ako rýchlo sa tanečníci hýbu. Skús experimentovať s rôznymi rýchlosťami v rôznych momentoch pesničky. Neváhaj ďalej upravovať tento tanec, alebo sa vráť na ktorýkoľvek predchádzajúci tanec a sprav ho ešte viac cool.
      Dance_Party_extras_speed_2019: |-
        # Zrýchli, spomaľ

        Tento finálny tanec využíva blok <xml><block type="Dancelab_setDanceSpeedEach"><title name="GROUP">"SHARK"</title><title name="SPEED">2</title></block></xml> na kontrolovanie toho, ako rýchlo sa tanečníci hýbu. Skús experimentovať s rôznymi rýchlosťami v rôznych momentoch pesničky. Neváhaj ďalej upravovať tento tanec, alebo sa vráť na ktorýkoľvek predchádzajúci tanec a sprav ho ešte viac cool.
      Dance_Party_extras_visible: |-
        # Kam zmizli?

        Tento tanec ukazuje a skrýva dve rôzne skupiny tanečníkov. Pozri si to a potom si uprav tanec podľa vlastného vkusu.

        -   Pridaj ďalšiu skupinu tanečníkov
        -   Ukáž a skry tanečníkov so stlačením šípky
        -   Skry všetkých tanečníkov a nastav nejaký zaujímavý efekt pozadia
      Dance_Party_extras_visible_2019: |-
        # Kam zmizli?

        Tento tanec ukazuje a skrýva dve rôzne skupiny tanečníkov. Pozri si to a potom si uprav tanec podľa vlastného vkusu.

        -   Pridaj ďalšiu skupinu tanečníkov
        -   Ukáž a skry tanečníkov so stlačením šípky
        -   Skry všetkých tanečníkov a nastav nejaký zaujímavý efekt pozadia
      Escape Room Example: |-
        # Room Escape

        In today's workshop you are going to be working on making a room escape app!  This level has an example app that you should play around with to get the feel for what you will be creating.

        # Do This

        -   Click RUN to start the app
        -   Try to find the key that will open the door.
      Final Personal Website: |-
        # Personal Website

        This is it! You have been working on your Personal Website for the whole unit. Put the finishing touches on it and submit it to your teacher! Remember to use the problem solving process as your guide in preparing your final product.

        # Do This

        -   Define: Read the rubric so you know what is expected
        -   Plan: Decide what you still need to work on and put those things in priority order
        -   Try: Implement your improvements to your personal website.
        -   Reflect: Get feedback from a classmate and decide what of that feedback to act on.

        Don't forget to take a screenshot of your home page and save it somewhere on your computer so you can find it later (_Need help with how to screenshot? Check out this <a href="http://www.take-a-screenshot.org/">website </a>._)
      Final Personal Website_2018: |-
        # Personal Website

        This is it! You have been working on your Personal Website for the whole unit. Put the finishing touches on it and submit it to your teacher! Remember to use the problem solving process as your guide in preparing your final product.

        # Do This

        -   Define: Read the rubric so you know what is expected
        -   Plan: Decide what you still need to work on and put those things in priority order
        -   Try: Implement your improvements to your personal website.
        -   Reflect: Get feedback from a classmate and decide what of that feedback to act on.

        Don't forget to take a screenshot of your home page and save it somewhere on your computer so you can find it later (*Need help with how to screenshot? Check out this <a href="http://www.take-a-screenshot.org/" target="_new">website </a>.*)
      Final Personal Website_2019: |-
        # Personal Website

        This is it! You have been working on your Personal Website for the whole unit. Put the finishing touches on it and submit it to your teacher! Remember to use the problem solving process as your guide in preparing your final product.

        # Do This

        -   Define: Read the rubric so you know what is expected
        -   Plan: Decide what you still need to work on and put those things in priority order
        -   Try: Implement your improvements to your personal website.
        -   Reflect: Get feedback from a classmate and decide what of that feedback to act on.

        Don't forget to take a screenshot of your home page and save it somewhere on your computer so you can find it later (*Need help with how to screenshot? Check out this <a href="http://www.take-a-screenshot.org/" target="_new">website </a>.*)
      Final Room Escape App: "# You've done it!\n\nYou made a room escape! Now its
        time to customize it. \n\nConsider:\n\n-   Add more style to the room\n-   Adding
        more things users can interact with in the room\n-   Try to make your secret
        code random\n-   Adding more rooms"
      Fish Tank 1-validated: "**Napíš predpoveď:** Čo myslíš, že sa stane, ked spustíš
        tento kód?"
      Fish Tank 2-validated: |-
        Spravme akvárium!

        Zmeň Dustyho (kôpku trávy) na rybu.
      Fish Tank 2-validated_2019: "Vytvor akvárium!  \n\nZmeň Pracháča (kôpku slamy)
        na akúkoľvek rybu kliknutím na <xml><block type=\"gamelab_allSpritesWithAnimation\"
        block-text=\"the sprite picker block\"><title name=\"ANIMATION\">\"tumbleweed\"</title></block></xml>.\n\nNezabudni
        tiež zmeniť kostým v <xml><block type=\"gamelab_addBehaviorSimple\" block-text=\"the
        add behavior block\"></block></xml>."
      Fish Tank 3-validated: |-
        Ryba začína byť roztržítá.

        Zmeň správanie ryby tak, že bude plávať okolo akvária.
      Fish Tank 3-validated_2019: "Rybe sa začala točiť hlava! \n\nZmeň správanie
        ryby tak, aby plávala vľavo a vpravo."
      Fish Tank 4-validated: |-
        Naše akvárium potrebuje vodu!

        Použi <xml><block type="gamelab_setBackground" inline="true">
            <value name="COLOR">
              <block type="colour_picker">
                <title name="COLOUR">#0000ff</title>
              </block>
            </value>
          </block></xml>, aby si spravil modré pozadie.
      Fish Tank 4-validated_2019: "Naše akvárium bude potrebovať vodu! \n\nPouži <xml><block
        type=\"gamelab_setBackground\" inline=\"true\" block-text=\"the set background
        color block\">\n    <value name=\"COLOR\">\n      <block type=\"colour_picker\">\n
        \       <title name=\"COLOUR\">#0000ff</title>\n      </block>\n    </value>\n
        \ </block></xml> na nastavenie farby pozadia. Odporúčame modrú!"
      Fish Tank 5-validated: Naša ryba je trochu osamelá. Pridaj ďalší sprite do akvária.
      Fish Tank 5-validated_2019: Ryba má dobrodružnú povahu a chcela by stretnúť
        ďalšie morské živočíchy. Pridaj do akvária ďašiu postavu. Postava môže mať
        hociaký kostým, okrem toho, ktorý už má ryba.
      Fish Tank 6-validated: "Čo chceš, aby robil nový kamarát tvojej ryby? \n\nPridaj
        mu správanie a sleduj ich!"
      Fish Tank 6-validated_2019: |-
        Čo chceš, aby robil nový kamarát tvojej ryby?

        Pridaj mu správanie a sleduj ich!
      Fish Tank 7-validated: "Pridali sme veľa nových blokov do panelu nástrojov.
        \n\nPohraj sa s nimi a sprav tvoje akvárium špeciálnym!"
      Fish Tank 7-validated_2019: "Pridali sme veľa nových blokov do panelu nástrojov.
        \n\nPohraj sa s nimi a sprav tvoje akvárium špeciálnym!"
      Fish Tank Predict: "**Napíš predpoveď:** Čo myslíš, že sa stane, ked spustíš
        tento kód?"
      Fish Tank Predict_2019: "**Napíš predpoveď:** Čo myslíš, že sa stane, ked spustíš
        tento kód?"
      Frequency Analysis: |-
        # Break a random substitution cipher!

        Messages encrypted with the **Caesar cipher** are very easy to crack. What if instead of shifting the whole alphabet, we mapped every letter of the alphabet to a random different letter of the alphabet? This is called a **random substitution cipher**.

        In this version of the tool, you'll be interacting more with the graphs that show letter frequency. By analyzing the frequency of the letters in the encrypted input message compared to the frequency of letters in a typical piece of English prose, you can start to narrow in on what some of the letter mappings might be. Did you know that _'E'_ is the most common letter used in the English language? Maybe the most common letter in your encrypted text maps to the letter _'E'_, but maybe not! You'll have to do a bit of guess and check to see if that substitution makes sense.

        # Do this

        -   Load the **Sample message (hard)** from the message dropdown. This will load a message that has been encrypted with a random substitution cipher.\
            ![](https://images.code.org/04c6230c9607110126581c298bc09183-image-1443569176380.gif)

        -   You will crack the message by guessing what each letter of the alphabet contained in the original ciphertext should be changed to. You can do so by dragging the blue letters of the alphabet directly underneath the orange letter you want changed in the original ciphertext. Letters that have been changed using your guesses will no longer be highlighted orange in the message window on the left.
            ![](https://images.code.org/da9a7af7568d8c1698872ab91b4d79d7-image-1443572471212.gif)

        -   Play with some of the sorting options available in the Random substitution cipher tab to get different views on the letter frequencies in the input text as well as standard English text.
            ![](https://images.code.org/82efbca1807206c9a07de520fdb22027-image-1443572614493.23.28.png)

        See how long it takes you to crack the cipher! Is this a good method of encrypting secret data?
      Function intro Ryan: "V pracovnom priestore je **funkcia** s názvom 'postav
        most'. Je v nej zabudovaný celý kód, ktorý potrebuješ na prekročenie rieky!\\\r\n
        \\\r\nDvakrát prichyť malý, zelený  <xml> <block type=\"procedures_callnoreturn\"
        id=\"callMe\"><mutation name=\"postav most\"/></block></xml> blok do pracovného
        priestoru, aby si opravil cestu a dostal hráča {currentPlayerName} k ruditovej
        fakli [redstone_torch]."
      Function intro Ryan_2019: "V pracovnom priestore je **funkcia** s názvom 'postav
        most'. Je v nej zabudovaný celý kód, ktorý potrebuješ na prekročenie rieky!\\\r\n
        \\\r\nDvakrát prichyť malý, zelený  <xml> <block type=\"procedures_callnoreturn\"
        id=\"callMe\"><mutation name=\"postav most\"/></block></xml> blok do pracovného
        priestoru, aby si opravil cestu a dostal hráča {currentPlayerName} k ruditovej
        fakli [redstone_torch]."
      Gamelab StartScreen Change State: |-
        # Changing the State

        Now that you can display a different screen according to the state of your program, you will need a way to change between states.  To go from the "starting" state to the "playing" state, you can have the user press the "s" key.  You'll **only** want the program to check for the key press when the program is in the "starting" state, so your code for this will go inside the "starting" conditional.  Putting one `if` block inside another is called **nesting** conditionals.

        ## Do this

        -   Inside the `if` statement that checks for "starting", add in a new `if` statement that checks whether the user has pressed the "s" key.  (`if (keyDown("s")) {`)
        -   Inside your new `if` statement, set the value of your `gameState` variable to "playing". (`gameState = "playing";`)
        -   Test the code by starting the game and pressing "s".  The game should start playing after the key is pressed.

        If the game isn't starting on the start screen, double check that when the `gameState` variable is created at the beginning of the program, its value is "starting".  (`var gameState = "starting";`)
      Gamelab StartScreen Check State: |-
        # Checking Game State

        Now that you have your game state stored in a variable, you can check it to determine what should be displayed.  This should happen inside the draw loop, since it's something that will change as the program is being run.  The program should check whether the game is in the "playing" state, and only run the program if it is.  We can worry about the other states later.

        ## Do This

        -   Inside the draw loop, add a conditional (`if` statement).
        -   For the condition, check if `gameState == "playing"`.
        -   Move the rest of the code from the draw loop inside the `if` statement, so it only runs if the game is "playing".
        -   Run the program.  Nothing should happen because the game is still in the "starting" state.
        -   Go back to where you set the value of your `gameState` variable and change it from "starting" to "playing".
        -   Run the game again, and it should play normally, because it is now in the "playing" state.
        -   Change the value of the variable back to "starting".

        (It is important to find ways to check your code as you go, rather than wait until the end of many complex changes to run it.  By checking both the playing and starting states, you know that your conditional is working properly and that the game should play while in the "playing" state.)
      Gamelab StartScreen Check States: |-
        # Check all States

        Right now the only state your program can deal with is "playing", but you can add more conditionals to account for the other three states.

        ## Do this

        -   Inside the draw loop, add in three more `if` statements that check for `gameState == "starting"`, `gameState == "won"`, and `gameState == "lost"`, respectively.
        -   Inside each `if` statement, add code that will draw text to the screen, so you can see the results of the different states.  You may also want to use `drawSprites` so you can see the background image and the player sprites, but make sure you are drawing the text on top of the sprites.
        -   Check your code by running the program in the different states.  (Don't worry about making them perfect yet, just make sure that the conditionals are working as they should.)

        In order to keep track of your code, you might find it useful to create a function for each of the different text displays, then call those functions inside the conditionals.
      Gamelab StartScreen End Game: |-
        # Ending the Game

        Next, you'll need to add code that changes the state of the game when you lose.   Scroll down to the bottom of the program, to the `gameStatus` function.  Inside the function, the program checks the score and lives variables to check whether the use should win or lose the game.  Instead of displaying a win or lose message, you'll want to change the state of the game to "won" or "lost";

        ## Do this

        -   Inside the `gameStatus` function, replace the code `text("You Won!", 35, 200);` with `gameState = "won"`.
        -   Inside the `gameStatus` function, replace the code `text("You Lost!", 35, 200);` with `gameState = "lost"`.
        -   Check your code by running the game and losing.
        -   Check your code by running the game and winning.

        (To make the game much easier to win, change the original number of lives to 1000 by replacing `var lives = 3;` to `var lives = 1000;`.)
      Gamelab StartScreen Hide Sprites: |-
        # Hide and Show Sprites

        You may prefer that the platform, coin, and rock sprites only be visible when the game is playing.  You can change the game setup to set their visible property to `false` at the beginning of the game, then set it to `true` when you start the game, then `false` again when the game is won or lost.

        ## Do this

        -   Add code after you create your platforms, gold, and rocks sprite groups that sets those sprite groups' visible properties to `false` (e.g. `platforms.setVisibileEach(false);` )
        -   In the same  three places where you set `gameState = "playing";`, set the sprite groups' visible properties to `true`.
        -   In the same places where you set `gameState = "lost";` and `gameState = "won";`, set the sprite groups' visible
        -   Check your code by running the game and losing and restarting the game.
        -   Check your code by running the game and winning and restarting the game.
      Gamelab StartScreen Intro: |-
        # Start and End Screens

        This tutorial will teach you how to make start and end screens in Game Lab, as well as restart the game from the end screen.

        Hit run to play the game on the left.  Follow the instructions on the start screen to play.  Once the game is over, follow the instructions on the end screen to restart the game.

        In the next bubble, you'll see the code for game play and start to add your own start and end screens.

        ## Start Screen

        The start screen is the introductory screen that appears before the user starts playing the game.  It usually has the title of the game and some basic instructions for playing.  It might also include the game developer.

        ## End Screen

        The end screen appears after the user has won or lost the game.  It sometimes includes the final score, player rankings or other information.  It can also have an option to play the game again.
      Gamelab StartScreen Restart Game: |-
        # Restarting the Game

        Last, you'll need to add code that restarts the game.   This is similar to how you started the game by having the user press the "s" key.  This time, you'll need to check during the "lost" and "won" states.  If the user presses the "r" key during on of these states, you should restart the game by setting the `gameState` to "playing" and also resetting the `score` and `lives` variables to 0 and 3, respectively.

        ## Do this

        -   Inside the `if (gameState == "lost") {` statement, add an if statement that checks whether the user has pressed the "r" key.
        -   Inside your new `if` statement, set `score` to 0, `lives` to 3, and `gameState` to "playing".
        -   Inside the `if (gameState == "won") {` statement, add an if statement that checks whether the user has pressed the "r" key.
        -   Inside your new `if` statement, set `score` to 0, `lives` to 3, and `gameState` to "playing".
        -   Inside the `gameStatus` function, replace the code `text("You Lost!", 35, 200);` with `gameState = "lost"`.
        -   Check your code by running the game and losing and restarting the game.
        -   Check your code by running the game and winning and restarting the game.
      Gamelab StartScreen State: |-
        # Game State Variable

        Our sample game had four different scenarios (or **states**) that we need to keep track of in order to display the right screen: "starting", "playing", "won", and "lost".  The first step in adding a start or end screen to the game is creating a variable to keep track of any changes in the state of the game.

        ## Do This

        -   Declare a variable called `gameState` at the beginning of the program.  (A good place to do this would be near where `score` and `lives` are declared.
        -   Set the initial value of  your `gameState` variable to "starting"

        (Because you are not using this variable yet, you will see a warning triangle next to the line where it is declared.  It also will not affect how the program runs.)
      Gamelab StartScreen base code: |-
        # Game Code

        This is the code for the game without the start and end screens.  The function `gameStatus` (called on line 43 and defined on line 208) checks whether the user has won or lost, but it only adds a text message to the screen.  Gameplay also continues even after the game is over.

        ## Do This

        Read the code, in particular the code before the draw loop (lines 1-24), inside the draw loop (lines 27-43), and inside the `gameStatus` function (lines 209-224).  It's okay if you don't understand everything in the game, but you should see that the code before the draw loop sets up the sprites, and the code inside the draw loop controls the gameplay.
      Geometric Sun: "**Myšlienka projektu:** Vytvor vzor použitím geometrických pojmov
        ako sú tvary. Toto vyžaduje dôslednosť a plánovanie!"
      Geometric Sun_2018: "**Myšlienka projektu:** Vytvor vzor použitím geometrických
        pojmov ako sú tvary. Toto vyžaduje dôslednosť a plánovanie!"
      HOC 2018 Level_1: Na cestu potrebuješ zásoby. Zober **loď\* ![](https://images.code.org/0b3162de9dc0abf3e0890d315b8cc699-image-1538697977747.png)
        z \*\*truhly** ![](https://images.code.org/e0cf43fd36a50dd16ee06595047bfd8f-image-1538697999418.png).
      HOC 2018 Level_10: Niekde v pamiatke sa ukrýva **kalamár** ![](https://images.code.org/82f305ab1cb4a9ff9044991a18edb16e-image-1538947827218.png).
        Dokážeš ho nájsť?
      HOC 2018 Level_11: Vybuduj stenu z **kryštálov** ![](https://images.code.org/d110b8d13c01756fcdbef3768b2e2859-image-1538699770898.png)
        okolo čierneho betónu.  To ti umožní spustiť **potrubie** ![](https://images.code.org/7773cf30f42e6727a23c8cb364d4664b-image-1538699800030.png)
        a dokončiť úlohu![0]
      HOC 2018 Level_12: Blahoželáme! Čaká ťa otvorený vodný svet. Vybudujte koralový
        útes! Sopka! Vrak lode! Je to len na tebe.
      HOC 2018 Level_2: S loďou to pôjde ľahšie ako plávať na otvorenom mori! Choď
        na koniec doku a naloď sa.
      HOC 2018 Level_3: Chyť sa vesiel a namier loď cez otvorené more za **treskou**
        ![](https://images.code.org/9b636884eefb1efe18f9f844e1e916a9-image-1538698597353.png).
      HOC 2018 Level_4: Nakŕm  **delfína**  treskou ![](https://images.code.org/8c240fd4df4da2795ba7ca942b77a057-image-1538947890991.png).
        Použi blok opakuj pokiaľ neplatí, aby si prešiel oceán rýchlejšie.
      HOC 2018 Level_5: Niekde sa tam ukrýva **ulita** ![](https://images.code.org/2eb084fa0c718dee6ca4b6379381f735-image-1538698936660.png)!
        Preskúmaj vrak lode, aby si sa dostal k  **truhlici** ![](https://images.code.org/16cdd5779b38909d4bf47b29535c92b0-image-1538698950602.png).
      HOC 2018 Level_6: Vyzerá to, že tam poriadne mrzne! Po ceste k podmorským ruinám
        chyť **lososa** ![](https://images.code.org/c66eadf25b3cdfe20bbfdc91e2c28c94-image-1538699000102.png).
      HOC 2018 Level_7a: Objavil si podmorské ruiny. Prehľadaj kamene a nájdi **truhlicu**
        ![](https://images.code.org/29a5fd76b869d755a60d39fbbb4057eb-image-1538699081910.png),
        v ktorej je **kryštálový** ![](https://images.code.org/5f5ebe5121b8f9787d7dbd38ad0a86cc-image-1538699091018.png)
        poklad.
      HOC 2018 Level_8: Najprv ľadovce a teraz láva? Prejdi tento vulkanický ostrov
        a nájdi v koralovom útese **tropickú rybku** ![](https://images.code.org/6d3293e7709cb1a43d9f7617fd0cc2b8-image-1538699180397.png).
      HOC 2018 Level_9b: Dostal si sa k útesu. Teraz hľadaj **Perlu oceánu** ![](https://images.code.org/3035926d2a37aa695b5d47413adcffa2-image-1538699398781.png)
        ! Pre nájdenie **truhlice s pokladom** ![](https://images.code.org/af697397dd70e5b6b93b00eb46c558af-image-1538699377397.png)
        použi modré a červené koraly.
      InspirationalArtwork: |-
        Doteraz si sa naučil všetko, čo potrebuješ vedieť, aby si vytvoril takýto vzor!

        Ak ťa tento obrázok inšpiruje, tak skús spraviť niečo podobné. Inak, vytvor niečo vlastné.
      InspirationalArtwork_2018: |-
        Doteraz si sa naučil všetko, čo potrebuješ vedieť, aby si vytvoril takýto vzor!

        Ak ťa tento obrázok inšpiruje, tak skús spraviť niečo podobné. Inak, vytvor niečo vlastné.
      Intro to Web Lab - Part 1_2019: |-
        ## Question to consider:

        -   What are the different parts of Web Lab, and what are they used for?
      Intro to Web Lab - Part 2_2019: |-
        ## Questions to consider

        -   Why are HTML tags useful?
        -   What does the paragraph tag do?
      Introduction to Variables - Part 1_2019: |-
        ## Questions to Consider

        -   What are variables used to do?
        -   How do you create a variable and assign it a value?
        -   What can go into a variable?
      K-1 Bee Loops 2: Use a `repeat` loop to move and then get the nectar and make
        honey!
      K-1 Bee Loops 3: Use three `repeat` loops to get the nectar and make honey!
      K-1 Bee Loops 4: Use `repeat` loops to get the nectar, make honey, and to move!
      K-1 Bee Loops 5: Use `repeat` loops to get the nectar and honey!
      K-1 Bee Loops 6: Use a `repeat` loop to get the nectar, get honey, and to move!
      K-1 Maze Loops 10: |-
        Get me to the pig!\
        Using the `repeat` loop will make it much easier.
      K-1 Maze Loops 11: |-
        Get me to the pig!\
        The `repeat` loop will make this easier.
      K-1 Maze Loops 12: |-
        Get me to the pig!\
        The `repeat` loop will make this easier.
      K-1 Maze Loops 2: Use the `repeat` block to get me to the pig!
      K-1 Maze Loops 3: |-
        Get me to the pig!\
        Be sure to use `repeat` loops.
      K-1 Maze Loops 5: |-
        Get me to the pig!\
        Be sure to use `repeat` loops.
      K-1 Maze Loops 6: |-
        Get me to the pig!\
        Be sure to use `repeat` loops.
      K-1 Maze Loops 7: |-
        Get me to the pig!\
        Be sure to use `repeat` loops.
      K-1 Maze Loops 8: Use `repeat` loops to get me to the pig.
      K-1 Maze Loops Assessment 1: |-
        Look at all we've learned!\
        Use a `repeat` loop to get me to the pig!
      MC HOC 2016 SCORE LEVEL: "Niektoré hry sa hraju na body. Zahraj si naháňačku
        so železnými golemami a použi blok <xml>  <block type=\"craft_addScore\">\n
        \   <title name=\"SCORE\">1</title>\n  </block></xml>, aby si získal bod po
        chytení každého golema. \n\n Získaj 5 bodov a vyhraj!"
      MC_HOC_2017_01_RETRY: "Dvere sú zamknuté, ale na pomoc prichádza agent. \n\nV
        pracovnom priestore prichyť blok 'posuň sa dopredu' k bloku 'pri spustení',
        aby sa agent dostal na prítlačnú dosku [PressurePlate_Up]. Potom stlač tlačidlo
        'Spustiť' a pomocou klávesov so šípkami presuň agenta mimo domu, kde získa
        **truhlicu** [chest]."
      MC_HOC_2017_01_RETRY_2019: "Dvere sú zamknuté, ale na pomoc prichádza agent.
        \n\nV pracovnom priestore prichyť blok 'posuň sa dopredu' k bloku 'pri spustení',
        aby sa agent dostal na prítlačnú dosku [PressurePlate_Up]. Potom stlač tlačidlo
        'Spustiť' a pomocou klávesov so šípkami presuň agenta mimo domu, kde získa
        **truhlicu** [chest]."
      MC_HOC_2017_02_Cole: "{currentPlayerName} vyrazil za dobrodružstvom. Pomôž mu
        získať **mapu** [map_empty], ktorá je za zamknutými dverami napravo. \n\nPrichytením
        kódu do pracovného priestoru posuň agenta na prítlačnú dosku [PressurePlate_Up],
        aby hráč {currentPlayerName} mohol prejsť. "
      MC_HOC_2017_02_Cole_2019: "{currentPlayerName} vyrazil za dobrodružstvom. Pomôž
        mu získať **mapu** [map_empty], ktorá je za zamknutými dverami napravo. \n\nPrichytením
        kódu do pracovného priestoru posuň agenta na prítlačnú dosku [PressurePlate_Up],
        aby hráč {currentPlayerName} mohol prejsť. "
      MC_HOC_2017_03_Cole: "{currentPlayerName} pokračuje v dobrodružstve a potrebuje
        **kompas** [compass], aby sa pripravil na výlet. \n\nNaprogramuj agenta, aby
        otvoril bránu. "
      MC_HOC_2017_03_Cole_2019: "{currentPlayerName} pokračuje v dobrodružstve a potrebuje
        **kompas** [compass], aby sa pripravil na výlet. \n\nNaprogramuj agenta, aby
        otvoril bránu. "
      MC_HOC_2017_04POINT5_RYAN: "Dostal si sa na druhú stranu! \n\nTeraz bezpečne
        preveď hráča {currentPlayerName} bludiskom, aby získal **sekeru** [diamond_axe]"
      MC_HOC_2017_04POINT5_RYAN_2019: "Dostal si sa na druhú stranu! \n\nTeraz bezpečne
        preveď hráča {currentPlayerName} bludiskom, aby získal **sekeru** [diamond_axe]"
      MC_HOC_2017_04_Cole: "Agent sa môže presúvať cez vodu. \n\nPomocou cyklu 'opakuj'
        vyrieš túto úlohu a pomôž hráčovi {currentPlayerName} dostať sa k **vedru**
        [bucket_empty] za dverami. "
      MC_HOC_2017_04_Cole_2019: "Agent sa môže presúvať cez vodu. \n\nPomocou cyklu
        'opakuj' vyrieš túto úlohu a pomôž hráčovi {currentPlayerName} dostať sa k
        **vedru** [bucket_empty] za dverami. "
      MC_HOC_2017_05_Cole: "Ach nie, most je preč! \n\nNaprogramuj agenta tak, aby
        znova postavil most pomocou bloku  <xml>  <block type=\"craft_placeBlock\">\n\n<title
        name=\"TYPE\">       </title>\n</block></xml>. Vďaka tomu sa  {currentPlayerName}
        dostane k **lopate** [diamond_shovel]."
      MC_HOC_2017_05_Cole_2019: "Ach nie, most je preč! \n\nNaprogramuj agenta tak,
        aby znova postavil most pomocou bloku  <xml>  <block type=\"craft_placeBlock\">\n\n<title
        name=\"TYPE\">       </title>\n</block></xml>. Vďaka tomu sa  {currentPlayerName}
        dostane k **lopate** [diamond_shovel]."
      MC_HOC_2017_06_Cole: "Ďalšia rieka, ale táto je oveľa širšia! \n\nOprav tento
        kód tak, aby si agentovi pomohol postaviť most. Vďaka tomu sa {currentPlayerName}
        dostane ku **krompáču** [diamond_pickaxe]. "
      MC_HOC_2017_06_Cole_2019: "Ďalšia rieka, ale táto je oveľa širšia! \n\nOprav
        tento kód tak, aby si agentovi pomohol postaviť most. Vďaka tomu sa {currentPlayerName}
        dostane ku **krompáču** [diamond_pickaxe]. "
      MC_HOC_2017_07_Cole: "Na ceste je ľad! \\\r\n \\\r\nFunkcia 'vymaž cestu' ti
        môže pomôcť zničiť ľad a dostať hráča {currentPlayerName} ku banskému vozíku
        [minecart_normal]! "
      MC_HOC_2017_07_Cole_2019: "Na ceste je ľad! \\\r\n \\\r\nFunkcia 'vymaž cestu'
        ti môže pomôcť zničiť ľad a dostať hráča {currentPlayerName} ku banskému vozíku
        [minecart_normal]! "
      MC_HOC_2017_10_RETRY: "Dokážeš nájsť rozdiel medzi dvoma funkciami v tvojom
        pracovnom priestore? \n\nTieto funkcie použi spolu s ďalšími príkazmi z panela
        nástrojov na uvoľnenie cesty pre banský vozík. Potom získaj **kresadlo** [flint_and_steel].
        \n "
      MC_HOC_2017_10_RETRY_2019: "Dokážeš nájsť rozdiel medzi dvoma funkciami v tvojom
        pracovnom priestore? \n\nTieto funkcie použi spolu s ďalšími príkazmi z panela
        nástrojov na uvoľnenie cesty pre banský vozík. Potom získaj **kresadlo** [flint_and_steel].
        \n "
      MC_HOC_2017_Ali: 'Pozri sa na funkcie nižšie. Ako sa pomocou nich vyhneš strašidlám
        a pomôžeš hráčovi {currentPlayerName} dostať sa bezpečne k **čarovnej knihe**
        [book_enchanted]?  '
      MC_HOC_2017_Ali_2019: 'Pozri sa na funkcie nižšie. Ako sa pomocou nich vyhneš
        strašidlám a pomôžeš hráčovi {currentPlayerName} dostať sa bezpečne k **čarovnej
        knihe** [book_enchanted]?  '
      MC_HOC_2017_FP20x20: "**Voľná hra:** Teraz je to na tebe! Nakóduj agenta a preskúmaj
        s ním tento svet."
      MC_HOC_2017_FP20x20_2019: "**Voľná hra:** Teraz je to na tebe! Nakóduj agenta
        a preskúmaj s ním tento svet."
      Making Music: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      Making Music_2018: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      Making Music_2019: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      NEW Course 4 Artist Functions 1: Can you draw a square that is 100 pixels in
        length, using a repeat loop?
      NEW Course 4 Artist Functions 11: "Now we want to create a new function called
        `draw a line of squares` that draws six squares all in a row.  \n\nCan you
        build this function using this `draw a square 20` function that we created
        for you?\n<br/><br/>\n\n_Note: See that we've changed the pen to be much thinner.
        Click \"edit\" on the `draw a square 20` function to see how!_"
      NEW Course 4 Artist Functions 12: Use the `draw a line of squares` function
        from the last puzzle to draw this pattern.
      NEW Course 4 Artist Functions 13: "Can you draw a star shape using the `draw
        a line of squares` function?  \n\n(Be sure to `move forward` 60 pixels before
        you turn 144 degrees!)"
      NEW Course 4 Artist Functions 14: It's free-play time! Draw anything you like!
      NEW Course 4 Artist Functions 2: "Can you draw 3 squares 20 pixels apart from
        one another? \n\nEach square is 100 pixels in size."
      NEW Course 4 Artist Functions 3: "Here is a new type of Block. It is called
        a `function` block. Click \"edit\" then fill it with the code for drawing
        a square with 100 pixel sides. \n\nWhen you're done editing the function,
        click \"Close\" to go back to your program."
      NEW Course 4 Artist Functions 4: 'Use the `draw a square` function to draw this
        pattern. '
      NEW Course 4 Artist Functions 7: "Are you getting the hang of how to use function
        blocks? Let's modify `draw a square` so that it draws squares that are 200
        pixels in size. \n\nClick on \"edit\" to enter the `draw a square` function
        editor.\n\nRemember to click on \"Close\" to get out of the function editor. "
      NEW Course 4 Artist Functions 8: We have created a new function for you called
        `draw a triangle`.  Can you edit the function definition to draw a triangle
        with 100 pixel sides?
      NEW Course 4 Artist Functions 9: Can you solve this by adding only one block?
      NEW Course 4 Artist Params 1: Let's define this function to draw a square with
        50 pixel sides. Click "edit" to get started.
      NEW Course 4 Artist Params 10: "Create a `draw a hexagon` function block with
        a length parameter. \n\nThis hexagon has sides that are 100 pixels in length."
      NEW Course 4 Artist Params 11: "Can you figure out how to draw this shape? \n\nEdit
        the function to use the `sides` parameter."
      NEW Course 4 Artist Params 12: "Can you complete this drawing? \n\nThe sides
        of all the shapes are 100 pixels long."
      NEW Course 4 Artist Params 12a: "This image is similar to the last.  \n\nCan
        you use a `for` loop with your function to make this design?"
      NEW Course 4 Artist Params 13: "Let's edit this `draw a polygon` function. \n\nIt
        already has a `sides` parameter. Now, let's add a `length` parameter. \n\nThe
        perimeter of each shape is 200 pixels. Do you remember the equation to make
        shapes the same size when they have a different number of sides?"
      NEW Course 4 Artist Params 14: "Edit `draw a spiral edge` to use `length` and
        `sides` parameters, then recreate these shapes.\n\n-   The smallest side length
        of the square is 5 pixels.\n-   The smallest side length of the triangle is
        10 pixels.\n-   The smallest side length of the hexagon is 2 pixels.\n-   All
        increase to 100 pixels.  "
      NEW Course 4 Artist Params 15: "**Freeplay:** Here are the functions you've
        written, and some more for you to play with. Play with the pen width to see
        how different your drawings look!"
      NEW Course 4 Artist Params 2: Create a `draw triangle` function from scratch
        that makes a triangle with  50 pixel sides.
      NEW Course 4 Artist Params 3: "Now let's use the function to draw 5 triangles
        in a row. \n\nEach triangle is 30 pixels apart."
      NEW Course 4 Artist Params 4: Do you notice anything different about these function
        blocks? Click “Run” to see what happens.
      NEW Course 4 Artist Params 5: "Replace the `???` in the `length` parameter input
        block. \n\nThe pentagon has 100 pixel sides."
      NEW Course 4 Artist Params 6: "Fill in the `length` parameter to draw these
        shapes by replacing the `???` with the right numbers.  \n\nThe square and
        triangle have 100 pixel sides.\\\nThe hexagon sides are 75 pixels long. "
      NEW Course 4 Artist Params 7: "Can you complete this drawing? \n\nThe sides
        of each triangle are 25 pixels larger than the last.\\\nThe first triangle
        has 25 pixel sides."
      NEW Course 4 Artist Params 8: "The code for this triangle function is broken.
        \n\nCan you edit the function to fix it, and then make triangles of length
        25, 50, and 75?"
      NEW Course 4 Artist Params 9: "Click \"edit\" to fill in the function definition
        of `draw a square` and add a parameter.\\\nIt should take a length parameter
        just like the triangle. \n\n**This time, draw 3 squares:** 25, 50 and 75 pixels
        in length. The lefthand corners are each 100 pixels away from the last."
      NEW Course 4 Artist Params inspire: "<img src=\"https://images.code.org/1df195df9d808f0dd539bef0f5c2958b-image-1443049871563.02.54.png\"
        width=\"250px\"/>\n\n**Free-Play Inspiration:** You've now learned everything
        you need to know to make a pattern like this! \n\nIf this picture inspires
        you, try to make something similar. Otherwise, create something all your own.\n\nNotice:
        We've used the `set alpha` block to make the \"petals\" fade toward the outside."
      NEW Course 4 Artist Vars 12: Now, recreate the algorithm from the last level
        and create a pentagon with sides of length 150.
      NEW Course 4 Artist Vars 2: 'Drag a number block to the `set length` block and
        to the `repeat _ times` block to draw a set of 50 pixel triangles. '
      NEW Course 4 Artist Vars 4: "Let's try it again! \n\nCan you set the `length`
        variable to 60 to make this cool design with hexagons?"
      NEW Course 4 Artist Vars 6: "Draw this pattern of pentagons with 100 pixel sides
        by setting the right value for `length` and dropping the `length` variable
        into all of the the correct places. \n\nSee how you only have to set the value
        for `length` once, and the code uses the right value everywhere?"
      NEW Course 4 Bee For Loops 10a: "Ready for a challenge?  Take what you've learned
        about loops and try to solve this problem. \n\nRemember: You may have to run
        through solutions multiple times before you figure out all of the steps."
      NEW Course 4 Bee For Loops 2: "Add the code necessary to make sure the bee collects
        all the nectar. \n\nLook at how much code you need for this puzzle!\\\n(We'll
        learn a simpler way in the next puzzle.)"
      NEW Course 4 Bee For Loops 3: 'Ah, the `for loop` makes this much easier! All
        the code you need is here, take a look at how it is put together then click
        `Run` to see how it works. '
      NEW Course 4 Bee For Loops 4: 'Replace the ??? in the `for loop` with the largest
        amount of nectar the bee has to collect. '
      NEW Course 4 Bee For Loops 4 4: Now we need to `move forward` `counter` times,
        then `get nectar` `counter` times.  Can you use two `repeat` loops to solve
        this challenge?
      NEW Course 4 Bee For Loops 5: "`Cyklus for` môžeš použiť aj na odpočítavanie.
        Skús pozbierať nektár odpočítavaním od 5 do 1."
      NEW Course 4 Bee For Loops 6: |-
        Posledné číslo v tvojom cykle for sa nazýva `prírastok`. Zakaždým, keď cyklus prebehne, tak sa premenná počítadlo zmení o hodnotu  prírastku.

        Skús pozbierať tieto kvety s použitím prírastku 2.
      NEW Course 4 Bee For Loops 7: "Now, let's combine the `counter` variable with
        a math block! How can you use the `counter` variable to navigate this garden
        with the fewest number of blocks possible? \n\nWhat do you need to do to collect
        3, 6, 9, 12, 15 nectar this time?  The secret is in the `counter` variable!\n\nRemember:
        If your loop is counting up, the increment is added to your `counter` variable
        each time through."
      NEW Course 4 Bee For Loops 8: "Máš to! \n\nAký by mal byť tvoj prírastok, aby
        si pozbieral 3, 6, 9, 12, 15 nektárov?"
      NEW Course 4 Play Lab Params 11: "It's free play time! Have fun with all the
        blocks in your tool box.\\\n<br/>\n\n<h5>\n<details>\n<summary><b>Need some
        ideas?</b></summary>\n\t<br>\n\t<h5>\n\t\t<ul>\n        \t<li><strong>Tag</strong>
        - Have character 2 patrol and use your arrow keys to make character 1 chase
        until they collide. </li>\n            <li><strong>Whack-a-Sprite</strong>
        - Have a character constantly pop up at a random location. Award points for
        clicking the sprite before it disappears. </li>\n            <li><strong>Best
        Guess</strong> - Make both characters disappear, change location to a random
        spot, then reappear as a random character.  Click on the first one and get
        a point...but if you click on the second one you LOSE a point! </li>\n        </ul>\n\t</h5>\n\n</details>\n</h5>"
      NetSim Standalone Automatic DNS: |-
        # Domain Name System (DNS)

        In this version of the Internet Simulator, a Domain Name System (DNS) is provided for you and knows the IP addresses of all connected computers. You can only see the hostnames of other connected computers.\
        ![](https://images.code.org/3ac2c23ed610abc7e785ec85054e89a9-image-1434746293690.PNG)

        The address of the DNS is always \<yourRouterNumber>.15. Send a message with protocol `GET [hostname]`, for example `GET Bob2`, to the DNS to get another student's address. You can keep track of the responses in the Notes section in the DNS tab.\
        ![](https://images.code.org/c81c1a6b876eb46674a7f7e5e70506ce-image-1434746797267.png)

        Your teacher will hand out more specific instructions for this activity.
      NetSim Standalone Broadcast: |-
        # Broadcast messages in the Internet Simulator

        In this version of the Internet Simulator, you can connect to up to 5 other people in a room. When you send messages in the room, everyone receives them. What are some of the challenges of this system, and how might you solve them?

        Your teacher will hand out more specific instructions for this activity.
      NetSim Standalone Classroom Routers: |-
        # Routing messages

        In this version of the Internet Simulator, everyone connects to a router and has a specific address. To send messages, you have to address your message to the specific address of the recipient, and the router will take care of delivering it to the right computer. If there are other routers created in your class, ask for the address of one of your classmates and send them a message! View the Log Router to see the path the messages have taken through the network.

        Your teacher will hand out more specific instructions for this activity.
      NetSim Standalone Freeplay: |-
        # Internet Simulator Freeplay

        In this version of the Internet Simulator, most of the options are turned on and are configurable. Messages can be sent to any router within the class, and messages will take different paths to reach their destination.

        Your teacher will hand out more specific instructions for this activity.
      NetSim Standalone Manual DNS: |-
        # Introduction to DNS

        In this version of the simulator you can't see the other students' addresses.  Instead, one of you must act as a name service, to help share addresses with each other. From the DNS tab in the left column, one person can take over as DNS.

        Your teacher will hand out more specific instructions for this activity.
      NetSim Standalone Packets TCP: |-
        # Packets and Making a Reliable Internet

        Messages on the Internet can take many paths to get to their destination, and sometimes along the way the message gets dropped. In this version of the Internet Simulator:

        -   There is a 10% chance of a packet being dropped
        -   Multiple packets may take different paths to the destination
        -   The default max packet size is set to 6 additional characters

        Your teacher will hand out more specific instructions for this activity.
      NetSim Standalone SendAB: |-
        # Sending bits with the Internet Simulator

        You and your partner share a single wire that can only be in state A or state B. You can set the wire to either state at any time, and you can read the state of the wire at any time. Can you figure out a way to effectively communicate with just this system?

        Your teacher will hand out more specific instructions for this activity.
      NetSim Standalone Sending Numbers: "# Sending Numbers with the Internet Simulator\n\nYou
        and your partner can now reliably send messages back and forth without extra
        coordination! While you're always sending bits back and forth, you can also
        represent those bits as decimal numbers. What kinds of information can you
        represent with this system? \n\nYour teacher will hand out more specific instructions
        for this activity."
      NetSim Standalone Sending Numbers Ascii: "# Sending Text with the Internet Simulator\n\nNow
        that you've transmitted information represented as decimal numbers, you can
        map those numbers to text characters to send text-based information back and
        forth. With a text-based protocol, you can easily represent and communicate
        all kinds of information. \n\nYour teacher will hand out more specific instructions
        for this activity."
      New Minecraft Hero Project: "**Voľná hra:** Teraz je to na tebe! Nakóduj agenta
        a preskúmaj s ním tento svet."
      OPD-K5 CS Video: "## Getting Started: Why Computer Science (CS) Fundamentals?\n\nYou'll
        complete this free, self-paced course using the same learning platform you
        can use in your classroom with your students. \n\nLet's start by learning
        a bit about what Computer Science (CS) Fundamentals is, and how it's worked
        for teachers and students around the globe. In the next level, we'll cover
        how to interact with the CS Fundamentals learning platform, which you'll be
        using to complete this course.\n\n> ## Reflect\n>\n> What are your first impressions
        of CS Fundamentals?\n>\n> [Tweet your thoughts](https://twitter.com/teachcode)
        and be sure to tag @teachcode in your tweet so we can respond.\n>\n> <a href=\"http://ctt.ec/Bfjw3\"
        target=\"blank\">Share on Twitter >></a>\n>\n> Don't have a Twitter account?
        You can also find us on [Facebook](https://www.facebook.com/Code.org/) or
        [Instagram](https://www.instagram.com/codeorg/)."
      OPD-K5 CS Video_copy: "## Get to know CS Fundamentals\n\nLet's start by learning
        a bit about what Computer Science (CS) Fundamentals is, and how it has worked
        for teachers and students around the globe. "
      OPD-K5 Closing: |-
        > **If you enjoyed this course, sign up for an in-person workshop:**
        >
        > [Sign up now](http://code.org/professional-development-workshops) to continue learning computer science and its pedagogy. The free in-person workshops are a valuable place to collaborate and engage with other passionate educators in your area.
      OPD-K5 Closing_copy: |-
        > **If you enjoyed this course, sign up for an in-person workshop:**
        >
        > <a href="http://code.org/professional-development-workshops" target="blank">Sign up now</a> to continue learning computer science and its pedagogy. The free in-person workshops are a valuable place to collaborate and engage with other passionate educators in your area.
      OPD-K5 EventsVid: |-
        Watch this video that defines "events" and shows how they work in CS Fundamentals. Afterwards, you will try some puzzles that require you to code events.

        > An event is a line of code that tells your computer to "listen" for something to happen, then take an action. For example, on web pages, you often can display a drop down menu when you roll over the navigation bar with your mouse. The "mouse rollover" is an "event" that triggers an action.
      OPD-K5 FirstProgram: Watch the video below, which explains the very first program
        that young students will write in [Course A](https://studio.code.org/s/coursea-2018?section_id=2042045).
        On the next page, you'll get to write a similar program of your own!
      OPD-K5 FirstProgram_copy: Watch the video below, which explains a program that
        young students will write in <a href="https://studio.code.org/s/coursea-2019"
        target="blank">Course A</a>. On the next page, you'll get to write a similar
        program of your own!
      OPD-K5 LessonPlanning: "So far, you've been introduced to some of our unplugged
        lesson plans. However, there are lesson plans for every single CS Fundamentals
        lesson -- both plugged and online. You can find the full list of lesson plans
        for each course below:\n<br/>\n<br/> \n[Course A lesson plans](https://curriculum.code.org/csf-18/coursea/)<br/>
        \n[Course B lesson plans](https://curriculum.code.org/csf-18/courseb/)<br/>\n[Course
        C lesson plans](https://curriculum.code.org/csf-18/coursec/)<br/> \n[Course
        D lesson plans](https://curriculum.code.org/csf-18/coursed/)<br/> \n[Course
        E lesson plans](https://curriculum.code.org/csf-18/coursee/)<br/> \n[Course
        F lesson plans](https://curriculum.code.org/csf-18/coursef/)<br/> \n\nHowever,
        you may want to adapt these lessons, or build your own! The video below explains
        the structure of the CS Fundamentals lessons, but also provides tips in case
        if you want to develop your own lessons."
      OPD-K5 Problem Solving: |-
        # Best Practices > Meta-Cognitive Problem Solving

        Explicitly teaching meta-cognitive problem solving strategies before, during and after coding is extremely important in helping students process their learning. Mega-cognitive problem solving involves thinking about your thought process itself, and reflecting on _how_ you solve problems. Watch the video below to learn about Code.org's "Puzzle Solving Recipe" that can help students have success with difficult problems:

        [This worksheet](http://code.org/curriculum/docs/k-5/PuzzleSolvingStudent.png) details the different steps of the Puzzle Solving Recipe.

        <img src="https://images.code.org/18ec61f8b911b83ca1cdea404a34c40e-image-1434399798952.png" width="650px" style="margin-right:45px; border-radius:10px;">

        > ## Reflect:
        >
        > How might you explicitly teach problem solving in your CS classroom?
        >
        > [Tweet your thoughts](https://twitter.com/teachcode) and be sure to tag @teachcode in your tweet so we can respond.
        >
        > <a href="http://ctt.ec/ic2bx" target="blank"><h4><i class="fa fa-external-link-square" ></i> Share on Twitter</h4></a>
      OPD-K5 RepeatBlock: Watch the video below, which explains how loops work and
        introduces the 'Repeat' block in CS Fundamentals.
      OPD-K5 RepeatBlock_copy: Watch the video below, which explains how loops work
        and introduces the 'Repeat' block in CS Fundamentals.
      OPD-K5 Unplugged Video: |-
        ## Looking Ahead > Getting "Unplugged"

        <img src="https://images.code.org/ae83fdee9390a1155e5173b2a06f9773-image-1434399991310.JPG" class="level-image">

        In teaching computer science, you might think it would be best to have access to top tier technology -- new computers, fast Internet, the latest apps. But at Code.org, we've found that some of the most impactful computer science lessons are actually "unplugged," or conducted with little to no technology at all. In these lessons, students learn computer concepts without a computer.

        That's why all of our CS Fundamentals courses use unplugged activities to introduce computer science concepts with physical manipulatives before students write computer programs using those concepts. An example of this would be doing a dance of repeated movements with the class to understand the concept of how loops repeat commands in a computer program. This way when the students go on to writing programs using loops, the unplugged activity has set them up with something they are already familiar with and they can relate this new concept back to that activity.

        Watch the video below to understand the benefits of using unplugged activities to teach computer science.

        **As you work your way through Stages 4-8**, you'll have a chance to review some of our unplugged activities for each of the core concepts covered in this course.
      OPD-K5 Unplugged Video_copy: "It might seem counterproductive to teach computer
        science away from the computer! However, we've found that some of the most
        impactful  lessons are actually \"unplugged,\" or conducted with little to
        no technology at all. \n\nAll of our CS Fundamentals courses use unplugged
        activities to introduce computer science concepts with physical manipulatives
        before students write computer programs using those concepts. We also use
        unplugged activities to teach important concepts that are not coding, like
        digital citizenship. Watch the video below to understand the benefits of using
        unplugged activities to teach computer science."
      OPD-K5 WhatIsCS: Have you ever wondered "Exactly what is computer science?"
        Or, "Why are some computer programs written with words and some are written
        using images?" If so, watch this video; it's a great introduction to the field
        of computer science.
      OPD-K5 WhatIsCS_copy: |-
        <span style="font-size: 1.1em">
        Have you ever wondered what computer science is, or what kinds of different program languages there are? This video provides an introduction to the field of computer science.
        </span>
      OPD-K5 conditionals free response: |-
        # Reflect on Conditionals

        In this lesson, we explored how conditionals help programmers add logic to their code.

        Now take a moment to reflect. How would you explain the concept of conditionals to your students? What is the benefit of journaling as a teaching practice for comptuer science?
      OPD-K5 events free response: |-
        # Reflect on Events

        In this lesson, you stretched your coding muscles by using events to trigger certain actions in your program.

        Now take a moment to reflect. How would you explain the concept of events to your students? What are the steps you could take to debug a program?
      OPD-K5 for loops free response: |-
        # Reflect on For Loops

        Take a moment to reflect. How would you explain the concept of for loops to your students? What is one teaching practice that you could use to teach this concept?
      OPD-K5 functions free response: |-
        # Reflect on Functions

        In this lesson, we explored how functions can make you a faster and better programmer by allowing you to reuse segments of your code. In the next lesson, we'll look at the concept of variables.

        Now take a moment to reflect. How would you explain the concept of functions to your students? What is one teaching practice that you could use to teach this concept?
      OPD-K5 loops free response: |-
        # Reflect on Loops

        In this lesson, we explored how loops can be used to make code more efficient. In the next lesson, we'll look at how events can add interactivity into a program.

        Now take a moment to reflect. How can you connect the concept of loops to your students’ prior experience outside of the CS classroom? What are the benefits of pair programming, and how could you use the it when teaching this lesson?
      OPD-K5 projects free response: |-
        # Reflect on end-of-course projects

        Take a moment to reflect. How would you use end-of-course proejcts in your classroom? What is the benefit of having students complete a project?
      OPD-K5 sequencing free response: "# Reflect on Sequencing\n\nCongratulations!
        You just wrote some code. You are officially a programmer!\n\nDid you notice
        that the last puzzle was a little more difficult? It was a challenge puzzle.
        Challenge puzzles are meant to stretch the boundaries of what students will
        do. We make it clear that they should be attempted, but do not require that
        they be completed for students to succeed for the lesson.\n\nNow take a moment
        to reflect. How would you describe the difference between computer science
        and coding? How would you explain sequencing and algorithms to your students? "
      OPD-K5 sprite lab free response: "# Reflect on Sprite Lab\n\nTake a moment to
        reflect. How would you use Sprite Lab in your classroom? "
      OPD-K5 variables free response: |-
        # Reflect on Variables

        Take a moment to reflect. How would you explain the concept of variables to your students? What is one teaching practice that you could use to teach this concept?
      OPD-K5 whats your plan: "# What's your plan?\n\nThroughout the course, you will
        be asked to write reflections on what you have learned. Once you submit your
        response, it will save, and you can always come back to it. We will revisit
        it at the end of this online course.\n\nTake a moment now to reflect. How
        and when will you complete this online course to make ensure you get the most
        benefit from the experience? "
      OPD-K5-events-2: "Pripoj blok `mávni normálne` k bloku `keď klikneš`, potom
        stlač tlačidlo \"Spustiť\". \n\n* * *\n\nKlikni na hernú plochu aby si dostal
        Flappyho k cieľu."
      OPD-K5-events-3: "Blok `pri spustení` ti umožní spustiť tvoj kód hneď ako tvoja
        hra začne. \n\nVyskúšaj pridať blok, ktorým zmeníš rýchlosť hry po stlačení
        tlačidla \"Spustiť\". \n\n* * *\n\nZahraj si túto hru a doleť až k cieľu,
        aby si mohol pokračovať."
      OPD-K5-events-4: "Teraz sme pridali aj zem. \n\nUmiestni blok `ukonči hru` pod
        blok `keď dopadne na zem`. \n\n* * *\n\nZahraj si hru a na jej konci nechaj
        Flappyho spadnúť na zem."
      OPD-K5-events-5: "Flappy skrz prekážky preletí, pokiaľ ho nenaprogramuješ tak,
        aby do nich narazil ak sa im nevyhne. \n\nPripoj blok `ukonči hru` ku bloku
        `keď narazí na prekážku`, aby sa hra skončila akonáhle Flappy narazí do prvej
        prekážky."
      OPD-K5-events-6: "Pridali sme počítadlo bodov, Flappy získa jeden zakaždým,
        keď sa vyhne prekážke. \n\nPridaj blok `pridaj bod` pod udalosť `keď obíde
        prekážku`, potom stlač \"Spustiť\" a dostaň Flappyho cez prvé prekážky."
      OPD-K5-forloops-2: |-
        Napíš kód, ktorý pomôže včele pozbierať všetok nektár.

        Potrebuješ veľa blokov pre túto výzvu, ale v ďalšej úlohe sa naučíme jednoduchší spôsob.
      OPD-K5-forloops-6: |-
        Cyklus `for` môžeš použiť aj na odpočítavanie.

        Skús pozbierať nektár odpočítavaním od **5** do **1** počítané po **1**.
      OPD-K5-forloops-7: |-
        Posledné číslo v tvojom cykle `for` sa nazýva **"prírastok"**. Zakaždým, keď cyklus prebehne, tak sa premenná počítadlo zmení o hodnotu  **prírastku**.

        Skús pozbierať tieto kvety s použitím **prírastku** 2.
      OPD-K5-projects-2: |-
        It is amazing how much you have learned! Let's make a game step by step.

        Using new blocks in your toolbox, choose a new background, then pick an actor to be in your game.
      OPD-K5-projects-3: "Použi bloky ako udalosti a akcie, aby si hráčom mohol hýbať
        pomocou šípok. \n\n Úlohu dokončíš posunutím hráča ku všetkým terčom."
      OPD-K5-projects-4: |-
        Let's add some more characters to your game!

        Use the `set actor` block to add more characters then move to the goal to complete this puzzle.
      OPD-K5-projects-5: |-
        Viacero postáv, ktoré sa hýbu je dobrý začiatok na vytvorenie hry. Potrebujeme ešte niečo pridať, aby sa to viac podobalo na ozajstnú hru. Pridajme skóre!

        Použi bloky s udalosťami ako napríklad 'keď sa postava dotkne', aby si ovplyvnil skóre alebo vyhral. Nazbieraj 5 bodov alebo vyhraj, aby si vyriešil túto úlohu.
      OPD-K5-projects-6: Skvelá práca! Máš všetky základné časti fungujúcej hry. Teraz
        si skontroluj, či hra funguje presne tak, ako chceš. A nakoniec klikni na
        "Dokončiť"!
      OPD-K5-projects-7: You've finished! Now you can play your game or share it with
        your friends and classmates!
      OPD-K5-spritelab-2: "Vytvor akvárium!  \n\nZmeň Pracháča (kôpku slamy) na akúkoľvek
        rybu kliknutím na <xml><block type=\"gamelab_allSpritesWithAnimation\" block-text=\"the
        sprite picker block\"><title name=\"ANIMATION\">\"tumbleweed\"</title></block></xml>.\n\nNezabudni
        tiež zmeniť kostým v <xml><block type=\"gamelab_addBehaviorSimple\" block-text=\"the
        add behavior block\"></block></xml>."
      OPD-K5-spritelab-3: "Rybe sa začala točiť hlava! \n\nZmeň správanie ryby tak,
        aby plávala vľavo a vpravo."
      OPD-K5-spritelab-4: "Naše akvárium bude potrebovať vodu! \n\nPouži <xml><block
        type=\"gamelab_setBackground\" inline=\"true\" block-text=\"the set background
        color block\">\n    <value name=\"COLOR\">\n      <block type=\"colour_picker\">\n
        \       <title name=\"COLOUR\">#0000ff</title>\n      </block>\n    </value>\n
        \ </block></xml> na nastavenie farby pozadia. Odporúčame modrú!"
      OPD-K5-spritelab-6: Ryba má dobrodružnú povahu a chcela by stretnúť ďalšie morské
        živočíchy. Pridaj do akvária ďašiu postavu. Postava môže mať hociaký kostým,
        okrem toho, ktorý už má ryba.
      OPD-K5-spritelab-7: |-
        Čo chceš, aby robil nový kamarát tvojej ryby?

        Pridaj mu správanie a sleduj ich!
      OPD-K5-variables-1: |-
        Nakreslime rovnostranný trojuholník.

        Každú stranu musí mať dlhú presne 50 pixelov.
      OPD-K5-variables-2: |-
        Teraz pouźi ďalší cyklus a nakresli tri také isté trojuholníky za sebou.

        Môžeš doň vložiť kód z predošlej úlohy.
      OPD-K5-variables-5: |-
        Skôr ako sa to skomplikuje, môžeš presunúť dĺžku 50 do premennej, takže ju budeme môcť využívať v zopár ďalších úlohách?

        ![expandable](https://images.code.org/73447d004093c6be8ab01a1358155f16-image-1498068386665.gif)
      OPD-K5-variables-6: Teraz použi premennú `dĺžka`, aby umelec skočil dopredu
        a dole o `dĺžka` pixelov medzi trojuhoníkmi.
      Overworld Chop Tree: Drevo je veľmi dôležitý zdroj. Vyrába sa z neho veľa vecí.
        Kráčaj ku stromu a použi príkaz`znič blok` na to, aby si ho vyrúbal.
      Overworld Chop Tree_2019: Drevo je veľmi dôležitý zdroj. Vyrába sa z neho veľa
        vecí. Kráčaj ku stromu a použi príkaz`znič blok` na to, aby si ho vyrúbal.
      Overworld House Frame Chosen: Vybuduj zvyšok svojho domu z hocijakého materiálu,
        ktorý sa ti páči. Príkaz `opakuj` ti pri tom veľmi pomôže.
      Overworld House Frame Chosen_2019: Vybuduj zvyšok svojho domu z hocijakého materiálu,
        ktorý sa ti páči. Príkaz `opakuj` ti pri tom veľmi pomôže.
      Overworld Move to Sheep: Pohni sa ešte o jeden krok dopredu, aby si sa dostal
        ku ovci.
      Overworld Move to Sheep_2019: Pohni sa ešte o jeden krok dopredu, aby si sa
        dostal ku ovci.
      Overworld Place Wall: Každý dom sa začína stenou. Postav prvú časť domu tak,
        že použiješ príkazy `umiestni` a `posuň sa dopredu` v  opakovacom cykle.
      Overworld Place Wall_2019: Každý dom sa začína stenou. Postav prvú časť domu
        tak, že použiješ príkazy `umiestni` a `posuň sa dopredu` v  opakovacom cykle.
      Overworld Shear Sheep: Je čas na strihanie oviec! Použi príkaz `ostrihaj` na
        to, aby si z oboch oviec zozbieral/a vlnu.
      Overworld Shear Sheep_2019: Je čas na strihanie oviec! Použi príkaz `ostrihaj`
        na to, aby si z oboch oviec zozbieral/a vlnu.
      Pixelation - Lesson 15 - Color Shades: |-
        # Color Pixelation: Task 2

        **Directions:**
        <img src='https://images.code.org/548d1daa698a17b1005b1747f152587f-image-1439476855059.png' style="width: 150px; float:right">We start you out with the row of shades of red that Maddie created in the video. Experiment with 6-bit color by filling in the bottom row of the image with shades of a different color.  Here is an example with some shades of blue.  Try your own color!
      Pixelation - Lesson 15 - Color Shades 4x4: "# Pixelation: Task 3\n\n<img src
        = \"https://code.org/images/cspunit1/ColorTask3.png\" style=\"float:right;
        margin:0 20px\" width=200>\n\n**Directions:**\nWe start you out with the 4x4
        image Maddie created in the video.\n\nYour task is to fill a 4x4 grid with
        colors using _12-bits per pixel_. The result should look something like (but
        not exactly) the image shown at right.  \n\nHere are the requirements:\n\n-
        \  Row 1 - fill with shades of red. \n-   Row 2 - shades of green. \n-   Row
        3 - shades of blue. \n-   Row 4 - shades of gray."
      Pixelation - Lesson 15 - Complete 3-bit color: "# Color Pixelation: Task 1\n\n**Directions:**\n\n-
        \  We start you with the 4x2 image Maddie was creating, but we've left out
        the last two squares. \n-   Finish off the image by figuring out which two
        colors are missing and encode them."
      Pixelation 4x4 Empty: The width and height are now encoded in the pixel data.
        Can you figure out how to adjust the dimensions?
      Pixelation Bee: |-
        # Example of 12 bits per pixel

        -   This larger image of a bee encodes color with 12 bits per pixel, but viewing in hex makes it easier to see the color of each pixel.
        -   If you switch to binary mode - hold on to your hat - it's a lot of bits.
        -   Here's another mind-blowing thing to try: slide the bits per pixel up to 24 bits per pixel. What happens? Can you explain this behavior?
      Pixelation Flappy: |-
        # Example of more bits per pixel

        Here is a bigger image at 9 bits per pixel. With 9 bits per pixel you can express 512 different colors. Click through to see the next image which is even more sophisticated, but easier to understand.
      Predict Loop I: |-
        # Predict

        What will print as a result of this loop?
      Predict Loop I_2018: |-
        # Predict

        What will print as a result of this loop?
      Predict Loop I_2019: |-
        # Predict

        What will print as a result of this loop?
      Revisiting the Counter Pattern: "Today you’re going to learn how to use and
        create **functions**.\n\nCreating a function lets you make your own blocks!
        There are two parts to a function: \n\nMaking a newly named block that has
        all of the code you want to run inside of it. \n\\-xml of function definition-
        \n\nThe single green block itself that you use, or call, to run the function
        you created.\n\\-xml of function call-\n\nPrepare to get familiar with functions,
        learn how to edit them, and create your own!"
      Revisiting the Counter Pattern_2018: "Today you’re going to learn how to use
        and create **functions**.\n\nCreating a function lets you make your own blocks!
        There are two parts to a function: \n\nMaking a newly named block that has
        all of the code you want to run inside of it. \n\\-xml of function definition-
        \n\nThe single green block itself that you use, or call, to run the function
        you created.\n\\-xml of function call-\n\nPrepare to get familiar with functions,
        learn how to edit them, and create your own!"
      Revisiting the Counter Pattern_2019: "Today you’re going to learn how to use
        and create **functions**.\n\nCreating a function lets you make your own blocks!
        There are two parts to a function: \n\nMaking a newly named block that has
        all of the code you want to run inside of it. \n\\-xml of function definition-
        \n\nThe single green block itself that you use, or call, to run the function
        you created.\n\\-xml of function call-\n\nPrepare to get familiar with functions,
        learn how to edit them, and create your own!"
      Robot Doodle: "**Myšlienka projektu:** Vytvor obrázok niečoho dobre známeho
        zo skutočného života. Toto vyžaduje dôslednosť a plánovanie!"
      Robot Doodle_2018: "**Myšlienka projektu:** Vytvor obrázok niečoho dobre známeho
        zo skutočného života. Toto vyžaduje dôslednosť a plánovanie!"
      Room Escape Workshop - 1: |-
        # Setting Up Rooms

        <img src="https://images.code.org/9d103d74f7c2da05aeccd5fc317e6ab6-image-1490368234432.08.44 AM.png" style="width:200px; float:right">

        In order to make your room escape you will need to set up the room the user will be able to adventure around in. Some of the work has already been done for you.  You just need to decide what the different parts of the room will look like by picking pictures!

        # Do This

        -   The level starts in Design Mode
        -   For each image element that is blank (gray rectangle) add an appropriate image. For example you will need a door image for the image element labeled door.
        -   An example of what the room might look like are on the right.
      Room Escape Workshop - 10: |-
        # Door Open

        <img src="https://images.code.org/3651f7d5306bdcfd2d9a3d9bb842626e-image-1491066778787.12.36 PM.png" style="width:200px;float:right">

        Getting close! Lets set up the door to get ready for opening it.

        # Do This

        -   Add image for the outdoors
        -   Give it a good ID (maybe _outside_)
        -   Hide the image for the outdoors (It will be shown when door opens)
      Room Escape Workshop - 10 - 2: |-
        # Door Open

        <img src="https://images.code.org/57407cb51f50e08ecddb8ce7d2d89157-image-1491065952915.58.58 PM.png" style="width:200px;float:right">

        Open the door if they have the key!

        # Do This

        -   Add an `onEvent` block for clicking on the door
        -   Add an `if` statement inside the `onEvent` to check if the key position has moved to the bottom of the screen
            -   Add an if statement
            -   In the if statement add the `==`
            -   On one side of the `==` put the x position you move the key to when it is clicked
            -   On the other side add the `getXPosition()` block - The ID for that should be the ID of your key!
        -   Inside the `if` statement use `showElement` to show the hidden outdoors image if they got the key
      Room Escape Workshop - 3: |-
        # Hide the Code

        <img src="https://images.code.org/6fa80456a39d9b6417545f5f66ec83a5-image-1490368827625.png" style="width:400px;float:right">

        1.  In Design Mode Click on the white square where it says "CODE". Change it to show a secret code of your choice
        2.  Drag the picture down to cover the secret code

        ![](<>)
      Room Escape Workshop - 3-2: |-
        # Move Picture

        Now make it so the user can find the secret code by clicking the picture. When they click the picture it should move up and out of the way.

        # Do This

        -   Pull out an `onEvent` block
        -   Change the id spot in the `onEvent` block to picture (which is the ID of the picture element)
        -   Inside the `onEvent` block add the `setPosition` block with the following inputs
            -   ID: picture
            -   The next two inputs are x and y values - test out some numbers to try to get the picture to move like in the pictures on the right
      Room Escape Workshop - 4: "# Setting Up the Safe\n\nYou have generated a secret
        code and made it so users can navigate to the second room. Lets give the user
        the ability to enter the secret code when they click on the safe\n\n# Do This\n\n-
        \  Add an `onEvent` block\n    -   Pick the ID for the safe\n-   Inside the
        `onEvent` block add a <img src=\"https://images.code.org/c0964a8543728d018d5d9583319e22b9-image-1491060910093.34.36
        AM.png\" style=\"width:300px\"> block\n    -   On the left side change the
        _x_ (the name of the variable) to be _guess_ \n    -   On the right side change
        _\"Enter a value\"_ (the prompt to ask the user) to _\"Enter the code\"_"
      Room Escape Workshop - 5: "# Checking the Secret Code\n\nNow that you have collected
        a guess of the secret code from the user you will need to check if it is correct!
        We can do this using an `if` statement. An if statement checks if a condition
        is true, in this case it will check if the number the user entered is equal
        to the secret code\n\n# Do This\n\n-   Inside the `onEvent` block for the
        safe below the prompt command add an <img src=\"https://images.code.org/5e9a434b1ad6b8f010db928b668127a5-image-1491061131564.37.01
        AM.png\" style=\"width:100px\"> statement \n-   Create the condition by pulling
        out the <img src=\"https://images.code.org/f0680979704c30975550211b03ed222e-image-1491061134985.37.08
        AM.png\" style=\"width:100px\"> block which will check if two things are equal\n-
        \  On one side of <img src=\"https://images.code.org/f0680979704c30975550211b03ed222e-image-1491061134985.37.08
        AM.png\" style=\"width:100px\"> put _guess_ (the name of the value we used
        to store the users guess)\n-   On the other side put the value for your secret
        code"
      Room Escape Workshop - 7: "# Showing inside the safe\n\n<img src=\"https://images.code.org/71e74305187a46d0badeb29a9a69ac56-image-1490371014841.55.37
        AM.png\" style=\"width:200px;float:right\">\n\nOnce you have the program working
        to check the secret code you are going to want to \"open\" the safe and show
        the key inside. First you will need to create these elements in design mode.\n\n#
        Do This\n\n-   Go to Design Mode and add a gray square image\n    -   Click
        and Drag a Image Element <img src=\"https://images.code.org/8f4bc108415d83e5c528c9204502efc2-image-1491059181186.06.13
        AM.png\" style=\"width:75px\"> onto the screen\n    -   Give it a good ID
        (maybe _insideSafe_)\n    -   Find an gray square to use as the picture\n
        \   -   This will act as the inside of the safe as it will hide the front
        of the safe when shown\n-   Add a key image\n    -   Click and Drag a Image
        Element <img src=\"https://images.code.org/8f4bc108415d83e5c528c9204502efc2-image-1491059181186.06.13
        AM.png\" style=\"width:75px\"> onto the screen\n    -   Give it a good ID
        (maybe _key_)\n    -   Find an key image to use \n-   Click the hidden property
        in Design Mode for the gray square and key. When they are hidden it will look
        something like below in Design Mode\n\n<img src=\"https://images.code.org/2c2c7e9996515f2b30d416b558fd1360-image-1489605526794.17.55
        PM.png\" style=\"width:200px\">"
      Room Escape Workshop - 8: |-
        # Showing inside the safe

        Now set up the code to show the key and the gray square when the user inputs the correct code.

        # Do This

        -   Inside the `if` statement you created in the `onEvent` command for the safe add:
            -   The `showElement` block to show the gray square
            -   The `showElement` block to show the key
      Room Escape Workshop - 9-2: "# Click Key\n\n<img src=\"https://images.code.org/1a736d2774860bebc5072b8ae8b38f34-image-1491066638078.10.00
        PM.png\" style=\"width:170px;float:right\">\n\nOnce a user clicks the key
        you will want to show they are holding it. You can do this by moving the key
        to the bottom corner of the room. \n\n# Do This\n\n-   Add an `onEvent` block
        for when the user clicks the key. \n-   Inside the `onEvent` block:\n    -
        \  Use `setPosition` to move the key to the bottom corner of the screen"
      Standalone_Artist_2: Nakresli tento diamant so 120 a 60 stupňovými uhlami a
        dĺžkou strán 150 pixelov.
      Standalone_Artist_3: Dokážeš nakresliť tento šesťuholník so stranami 100 pixelov
        a s otočeniami o 60 stupňov?
      Standalone_Artist_4: Teraz sa môžeš hrať s novým blokom, cyklom. Pomôže ti zopakovať
        sériu príkazov. Čo sa stane ak tieto príkazy zopakuješ 6 krát?
      Standalone_Artist_5: Koľko krát potrebuješ diamant zopakovať aby ti vznikla
        kvetina?
      Standalone_Artist_5.5: 'Všimni si, ako sa kód pre diamant použitím cyklu zjednodušil?
        Ak celú radu zopakuješ 12 krát, vznikne ti kvetina. Nápoveda: Po slučke s
        diamantom sa budeš musieť otočiť o 30 stupňov, aby si nekreslil/a stále po
        tom istom.'
      Standalone_Artist_6: 'Zopakuj kód pre šesťuholník 6 krát a vytvoríš kresbu.
        Pod akým uhlom sa vždy otáčaš? Nápoveda: vydelte počet stupňov v kruhu počtom
        opakovaní.'
      Standalone_Artist_7: 'Funkcia je len ďalším nástrojom ako sa neopakovať. Táto
        funkcia nakreslí kvetinu, takže ju môžeš použiť kedykoľvek, keď chceš nakresliť
        kvetinu. Použi ju v kombinácii s novým blokom skoč a nakresli tieto kvetiny.
        Nápoveda: Kvetiny sú od seba vzdialené 150 pixelov'
      Standalone_Artist_8: Táto funkcia sa volá "Nakresli tvar" a naprogramovali sme
        ju aby sme kreslili šesťuholník. Spusti kód nech vidíš čo vie a pohraj sa
        s ňou aby si zistil/a viac. Vedel/a by si ju použiť tak, aby nakreslila rad
        štvorcov, trojuholníkov alebo osemuholníkov?
      Standalone_Artist_9: A teraz smelo do toho a nakresli obrázok aký len chceš!
        Dokonca máš jednú nevyužitú funkciu, ktorá spraví čokoľvek si zmyslíš!
      The Accelerometer: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      The Accelerometer_2018: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      The Accelerometer_2019: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      U4 Model Design 1: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model.png)

        <br/>

        Click to expand

        </div>

        # Creating a digital prototype

        Using the prototype to the right (click the image to enlarge it) you're going to create a digital prototype of the example app "Recycling Finder". We've already added a few of the elements for you, including the title, but it doesn't look quite right yet. We'll go over each element of this as we go, but for now let's **just focus on the title**.

        <!--<img src="https://images.code.org/66633526e03550bedb8503fefdc2ece3-image-1502921575904.png" style="width: 300px; float: right; clear: both;">-->

        # Do This

        -   **Make sure you are in Design Mode,** the switch appears above your app window on the left.
        -   **Click on the title text** to view its properties.
        -   **Change the property "text"** to "Recycling Finder".
        -   **Change the "font size"** to make the title larger.
        -   **Change the "text alignment"** so the title is centered on the screen.

        _Note: Make sure you click **"Run"** before moving on to save your progress._
      U4 Model Design 1_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model.png)

        <br/>

        Click to expand

        </div>

        # Creating a digital prototype

        Using the prototype to the right (click the image to enlarge it) you're going to create a digital prototype of the example app "Recycling Finder". We've already added a few of the elements for you, including the title, but it doesn't look quite right yet. We'll go over each element of this as we go, but for now let's **just focus on the title**.

        <!--<img src="https://images.code.org/66633526e03550bedb8503fefdc2ece3-image-1502921575904.png" style="width: 300px; float: right; clear: both;">-->

        # Do This

        -   **Make sure you are in Design Mode,** the switch appears above your app window on the left.
        -   **Click on the title text** to view its properties.
        -   **Change the property "text"** to "Recycling Finder".
        -   **Change the "font size"** to make the title larger.
        -   **Change the "text alignment"** so the title is centered on the screen.

        _Note: Make sure you click **"Run"** before moving on to save your progress._
      U4 Model Design 1_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model.png)

        <br/>

        Click to expand

        </div>

        # Creating a digital prototype

        Using the prototype to the right (click the image to enlarge it) you're going to create a digital prototype of the example app "Recycling Finder". We've already added a few of the elements for you, including the title, but it doesn't look quite right yet. We'll go over each element of this as we go, but for now let's **just focus on the title**.

        <!--<img src="https://images.code.org/66633526e03550bedb8503fefdc2ece3-image-1502921575904.png" style="width: 300px; float: right; clear: both;">-->

        # Do This

        -   **Make sure you are in Design Mode,** the switch appears above your app window on the left.
        -   **Click on the title text** to view its properties.
        -   **Change the property "text"** to "Recycling Finder".
        -   **Change the "font size"** to make the title larger.
        -   **Change the "text alignment"** so the title is centered on the screen.

        _Note: Make sure you click **"Run"** before moving on to save your progress._
      U4 Model Design 2: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/c0a6e147bc1cb940893f87ffd25b5015-image-1505758331506.png)

        <br/>

        Click to expand

        </div>

        # Adding more text

        Each screen of your app is composed of multiple design _elements_. You can drag out elements from the "Design Toolbox" on the left side of the workspace. To add more blocks of text, just drag out additional "label" elements.

        # Do This

        -   **Drag out a new "label" element** and place it where the "home\_description" text should be.
        -   **Change the id** to match the prototype (home\_description)
        -   **Change the field "text"** to match the prototype.
        -   **Resize** the text area by clicking and dragging the bottom right corner.
        -   **Change any other properties** to make the text look like you want it to.
      U4 Model Design 2_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/c0a6e147bc1cb940893f87ffd25b5015-image-1505758331506.png)

        <br/>

        Click to expand

        </div>

        # Adding more text

        Each screen of your app is composed of multiple design _elements_. You can drag out elements from the "Design Toolbox" on the left side of the workspace. To add more blocks of text, just drag out additional "label" elements.

        # Do This

        -   **Drag out a new "label" element** and place it where the "home\_description" text should be.
        -   **Change the id** to match the prototype (home\_description)
        -   **Change the field "text"** to match the prototype.
        -   **Resize** the text area by clicking and dragging the bottom right corner.
        -   **Change any other properties** to make the text look like you want it to.
      U4 Model Design 2_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/c0a6e147bc1cb940893f87ffd25b5015-image-1505758331506.png)

        <br/>

        Click to expand

        </div>

        # Adding more text

        Each screen of your app is composed of multiple design _elements_. You can drag out elements from the "Design Toolbox" on the left side of the workspace. To add more blocks of text, just drag out additional "label" elements.

        # Do This

        -   **Drag out a new "label" element** and place it where the "home\_description" text should be.
        -   **Change the id** to match the prototype (home\_description)
        -   **Change the field "text"** to match the prototype.
        -   **Resize** the text area by clicking and dragging the bottom right corner.
        -   **Change any other properties** to make the text look like you want it to.
      U4 Model Design 3: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/cad5b0e54f67976fee68ecf29c2a603b-image-1505758463551.png)

        <br/>

        Click to expand

        </div>

        # Adding images

        The prototype just has a plain black square where the logo should be - let's add an image to spice it up. The "image" element allows you to either upload an image from your computer or select from a library of graphic icons.

        # Do This

        -   **Drag out a new "image" element** and place between the description and the title.
        -   **Change the id** to match the prototype.
        -   **Click the "Choose..." link** next to the "image" field.
        -   **Select the "Icons" tab** and choose an icon for your logo.
        -   **Change the color** of the icon using the "icon color" field.
      U4 Model Design 3_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/cad5b0e54f67976fee68ecf29c2a603b-image-1505758463551.png)

        <br/>

        Click to expand

        </div>

        # Adding images

        The prototype just has a plain black square where the logo should be - let's add an image to spice it up. The "image" element allows you to either upload an image from your computer or select from a library of graphic icons.

        # Do This

        -   **Drag out a new "image" element** and place between the description and the title.
        -   **Change the id** to match the prototype.
        -   **Click the "Choose..." link** next to the "image" field.
        -   **Select the "Icons" tab** and choose an icon for your logo.
        -   **Change the color** of the icon using the "icon color" field.
      U4 Model Design 3_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/cad5b0e54f67976fee68ecf29c2a603b-image-1505758463551.png)

        <br/>

        Click to expand

        </div>

        # Adding images

        The prototype just has a plain black square where the logo should be - let's add an image to spice it up. The "image" element allows you to either upload an image from your computer or select from a library of graphic icons.

        # Do This

        -   **Drag out a new "image" element** and place between the description and the title.
        -   **Change the id** to match the prototype.
        -   **Click the "Choose..." link** next to the "image" field.
        -   **Select the "Icons" tab** and choose an icon for your logo.
        -   **Change the color** of the icon using the "icon color" field.
      U4 Model Design 4: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/17b565cb2f5da12babc16fbd22685732-image-1505758655682.png)

        <br/>

        Click to expand

        </div>

        # Adding buttons

        Buttons allow your user to interact with your app. This prototype screen will need three buttons (each shaded gray on the prototype.) We've already added the Search button, so you just need to add Contact and About.

        # Do This

        -   **Drag out a new "button" element** for each of the two remaining buttons.
        -   **Change the ids** to match the prototype.
        -   **Change the text** to match the prototype.
        -   **Modify other properties** to make the screen look like you'd like.

        <img src="https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif" style="width: 500px;">
      U4 Model Design 4_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/17b565cb2f5da12babc16fbd22685732-image-1505758655682.png)

        <br/>

        Click to expand

        </div>

        # Adding buttons

        Buttons allow your user to interact with your app. This prototype screen will need three buttons (each shaded gray on the prototype.) We've already added the Search button, so you just need to add Contact and About.

        # Do This

        -   **Drag out a new "button" element** for each of the two remaining buttons.
        -   **Change the ids** to match the prototype.
        -   **Change the text** to match the prototype.
        -   **Modify other properties** to make the screen look like you'd like.

        <img src="https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif" style="width: 500px;">
      U4 Model Design 4_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/17b565cb2f5da12babc16fbd22685732-image-1505758655682.png)

        <br/>

        Click to expand

        </div>

        # Adding buttons

        Buttons allow your user to interact with your app. This prototype screen will need three buttons (each shaded gray on the prototype.) We've already added the Search button, so you just need to add Contact and About.

        # Do This

        -   **Drag out a new "button" element** for each of the two remaining buttons.
        -   **Change the ids** to match the prototype.
        -   **Change the text** to match the prototype.
        -   **Modify other properties** to make the screen look like you'd like.

        <img src="https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif" style="width: 500px;">
      U4 Model Design 5: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/d257d0b06a24195a40adc60e4c96c0e1-image-1505759167176.png)

        <br/>

        Click to expand

        </div>

        # Making a Search Box

        The search box in our prototype can be created using a "Text Input" element. This is a box that your user can type into, and later your software can read what was entered and do something with it.

        # Do This

        -   **Add a Text Input** element.
        -   **Change the id** to match the prototype.
        -   **Add a Label** with the text "Location" next to your text input.
      U4 Model Design 5_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/d257d0b06a24195a40adc60e4c96c0e1-image-1505759167176.png)

        <br/>

        Click to expand

        </div>

        # Making a Search Box

        The search box in our prototype can be created using a "Text Input" element. This is a box that your user can type into, and later your software can read what was entered and do something with it.

        # Do This

        -   **Add a Text Input** element.
        -   **Change the id** to match the prototype.
        -   **Add a Label** with the text "Location" next to your text input.
      U4 Model Design 5_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/d257d0b06a24195a40adc60e4c96c0e1-image-1505759167176.png)

        <br/>

        Click to expand

        </div>

        # Making a Search Box

        The search box in our prototype can be created using a "Text Input" element. This is a box that your user can type into, and later your software can read what was entered and do something with it.

        # Do This

        -   **Add a Text Input** element.
        -   **Change the id** to match the prototype.
        -   **Add a Label** with the text "Location" next to your text input.
      U4 Model Design 6: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/7c8f4893c0b1f4bcd2280c950e389c95-image-1505759396699.png)

        <br/>

        Click to expand

        </div>

        # Checkboxes

        The type of recyclables you're searching for can be set using "Checkbox" elements. We already added a checkbox and label for glass, so you just need to add ones for paper and plastic.

        # Do This

        -   **Add a Checkbox** for each of the options.
        -   **Change the ids** to match the prototype.
        -   **Add labels** to describe each checkbox.
      U4 Model Design 6_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/7c8f4893c0b1f4bcd2280c950e389c95-image-1505759396699.png)

        <br/>

        Click to expand

        </div>

        # Checkboxes

        The type of recyclables you're searching for can be set using "Checkbox" elements. We already added a checkbox and label for glass, so you just need to add ones for paper and plastic.

        # Do This

        -   **Add a Checkbox** for each of the options.
        -   **Change the ids** to match the prototype.
        -   **Add labels** to describe each checkbox.
      U4 Model Design 6_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/7c8f4893c0b1f4bcd2280c950e389c95-image-1505759396699.png)

        <br/>

        Click to expand

        </div>

        # Checkboxes

        The type of recyclables you're searching for can be set using "Checkbox" elements. We already added a checkbox and label for glass, so you just need to add ones for paper and plastic.

        # Do This

        -   **Add a Checkbox** for each of the options.
        -   **Change the ids** to match the prototype.
        -   **Add labels** to describe each checkbox.
      U4 Model Design 7: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model.png)

        <br/>

        Click to expand

        </div>

        # Finishing Touches

        By now you should have a fairly complete (though non-functional) digital version of the paper prototype we started with. All that's left to do is check back over your paper prototype and add any final touches you might have missed.

        # Do This

        -   **Check over the prototype** to make sure you've included everything.
        -   **Read through your IDs** and fix any that aren't descriptive.
        -   **Clean up** any rough edges by resizing or moving around elements.
      U4 Model Design 7_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model.png)

        <br/>

        Click to expand

        </div>

        # Finishing Touches

        By now you should have a fairly complete (though non-functional) digital version of the paper prototype we started with. All that's left to do is check back over your paper prototype and add any final touches you might have missed.

        # Do This

        -   **Check over the prototype** to make sure you've included everything.
        -   **Read through your IDs** and fix any that aren't descriptive.
        -   **Clean up** any rough edges by resizing or moving around elements.
      U4 Model Design 7_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model.png)

        <br/>

        Click to expand

        </div>

        # Finishing Touches

        By now you should have a fairly complete (though non-functional) digital version of the paper prototype we started with. All that's left to do is check back over your paper prototype and add any final touches you might have missed.

        # Do This

        -   **Check over the prototype** to make sure you've included everything.
        -   **Read through your IDs** and fix any that aren't descriptive.
        -   **Clean up** any rough edges by resizing or moving around elements.
      U4 Model Program 1: |-
        # Adding a New Screen

        To complete your app, you're going to need more than than just a home screen. Each card that you created in your paper prototype is represented by a "screen" in App Lab. To create more screens, just click the dropdown at the top of the app display and select "New Screen..."

        <img src="https://images.code.org/2b49c36a57fb904d4fcf219ca498647d-image-1504714832027.png" style="width: 200px">

        # Do This

        -   **Create a New Screen** and give it the ID "about".
      U4 Model Program 1.5: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model_about.png)

        <br/>

        Click to expand

        </div>

        # Design the About Screen

        To add elements to your new About screen, you'll need to first select it from the screens dropdown.

        # Do This

        -   **Complete the About screen** using the prototype to the right.
        -   **Use the screens dropdown** to switch between your Home and About screens.
      U4 Model Program 1.5_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model_about.png)

        <br/>

        Click to expand

        </div>

        # Design the About Screen

        To add elements to your new About screen, you'll need to first select it from the screens dropdown.

        # Do This

        -   **Complete the About screen** using the prototype to the right.
        -   **Use the screens dropdown** to switch between your Home and About screens.
      U4 Model Program 1.5_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model_about.png)

        <br/>

        Click to expand

        </div>

        # Design the About Screen

        To add elements to your new About screen, you'll need to first select it from the screens dropdown.

        # Do This

        -   **Complete the About screen** using the prototype to the right.
        -   **Use the screens dropdown** to switch between your Home and About screens.
      U4 Model Program 1_2018: |-
        # Adding a New Screen

        To complete your app, you're going to need more than just a home screen. Each card that you created in your paper prototype is represented by a "screen" in App Lab. To create more screens, just click the dropdown at the top of the app display and select "New Screen..."

        <img src="https://images.code.org/2b49c36a57fb904d4fcf219ca498647d-image-1504714832027.png" style="width: 200px">

        # Do This

        -   **Create a New Screen** and give it the ID "about".
      U4 Model Program 1_2019: |-
        # Adding a New Screen

        To complete your app, you're going to need more than just a home screen. Each card that you created in your paper prototype is represented by a "screen" in App Lab. To create more screens, just click the dropdown at the top of the app display and select "New Screen..."

        <img src="https://images.code.org/2b49c36a57fb904d4fcf219ca498647d-image-1504714832027.png" style="width: 200px">

        # Do This

        -   **Create a New Screen** and give it the ID "about".
      U4 Model Program 2: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/9ca7398a9b7403dc39ec6a6b2d2b8a5e-image-1477346132059.png)

        <br/>

        Click to expand

        </div>

        # Screen Import

        In addition to adding new blank screens, you can import screens from "Import Screen..." To import a screen from someone else, you'll need them to give you the sharing URL.

        **Note:** Screens you import _must not_ share any IDs with elements already in your app!

        # Do This

        Another student has created a search results screen that you can import into your app. Their app's share link is **<a href="https://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/" target="_blank">https\://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/</a>**

        -   **Select "Import Screen...** from the screens dropdown.
        -   **Copy and paste the above url** into the import screens dialog.
        -   **Select the screen** you wish to import.
        -   **Click Import** to import the screen.
        -   **Use the screens dropdown** to switch between your Home, About, and Search screens.
      U4 Model Program 2.5: |-
        # Contact Screen Import

        Yet another student created a Contact screen that you can import into your app. Their share link is **<a href ="https://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/" target="_blank">https\://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/</a>**

        # Do This

        -   **Select "Import Screen...** from the screens dropdown.
        -   **Copy and paste the above url** into the import screens dialog.
        -   **Select the screen** you wish to import.
        -   **Click Import** to import the screen.
        -   **Use the screens dropdown** to make sure your app has Home, About, Contact, and Search screens.
      U4 Model Program 2.5_2018: |-
        # Contact Screen Import

        Yet another student created a Contact screen that you can import into your app. Their share link is **<a href ="https://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/" target="_blank">https\://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/</a>**

        # Do This

        -   **Select "Import Screen...** from the screens dropdown.
        -   **Copy and paste the above url** into the import screens dialog.
        -   **Select the screen** you wish to import.
        -   **Click Import** to import the screen.
        -   **Use the screens dropdown** to make sure your app has Home, About, Contact, and Search screens.
      U4 Model Program 2.5_2019: |-
        # Contact Screen Import

        Yet another student created a Contact screen that you can import into your app. Their share link is **<a href ="https://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/" target="_blank">https\://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/</a>**

        # Do This

        -   **Select "Import Screen...** from the screens dropdown.
        -   **Copy and paste the above url** into the import screens dialog.
        -   **Select the screen** you wish to import.
        -   **Click Import** to import the screen.
        -   **Use the screens dropdown** to make sure your app has Home, About, Contact, and Search screens.
      U4 Model Program 2_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/9ca7398a9b7403dc39ec6a6b2d2b8a5e-image-1477346132059.png)

        <br/>

        Click to expand

        </div>

        # Screen Import

        In addition to adding new blank screens, you can import screens from "Import Screen..." To import a screen from someone else, you'll need them to give you the sharing URL.

        **Note:** Screens you import _must not_ share any IDs with elements already in your app!

        # Do This

        Another student has created a search results screen that you can import into your app. Their app's share link is **<a href="https://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/" target="_blank">https\://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/</a>**

        -   **Select "Import Screen...** from the screens dropdown.
        -   **Copy and paste the above url** into the import screens dialog.
        -   **Select the screen** you wish to import.
        -   **Click Import** to import the screen.
        -   **Use the screens dropdown** to switch between your Home, About, and Search screens.
      U4 Model Program 2_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/9ca7398a9b7403dc39ec6a6b2d2b8a5e-image-1477346132059.png)

        <br/>

        Click to expand

        </div>

        # Screen Import

        In addition to adding new blank screens, you can import screens from "Import Screen..." To import a screen from someone else, you'll need them to give you the sharing URL.

        **Note:** Screens you import _must not_ share any IDs with elements already in your app!

        # Do This

        Another student has created a search results screen that you can import into your app. Their app's share link is **<a href="https://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/" target="_blank">https\://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/</a>**

        -   **Select "Import Screen...** from the screens dropdown.
        -   **Copy and paste the above url** into the import screens dialog.
        -   **Select the screen** you wish to import.
        -   **Click Import** to import the screen.
        -   **Use the screens dropdown** to switch between your Home, About, and Search screens.
      U4 Model Program 3: |-
        # Button Events

        With our screens in place, it's time to start actually _programming_ the app so that it responds to button clicks. For each button on each screen, you'll want to add an `onEvent` block that watches for that button to be clicked and responds appropriately. To start off with we'll just watch the "home\_search\_btn" button and print something to the console when it's clicked

        # Do This

        You're now in Code Mode (you can use the buttons above your app to switch between Code Mode and Design Mode). This is where you can write the code that will respond to users interacting with your app.

        ![](https://images.code.org/278b27dd31b6ca014c0dd32c5f964a54-image-1505764431751.png)

        -   **Drag out an `onEvent` block** from the code toolbox.
        -   **Select "home\_search\_btn"** from the "id" dropdown.
        -   **Drag out a `console.log` block** from the variables drawer.
        -   **Run your app**.
        -   **Click the Search button** and look for messages in the console.
      U4 Model Program 3_2018: |-
        # Button Events

        With our screens in place, it's time to start actually _programming_ the app so that it responds to button clicks. For each button on each screen, you'll want to add an `onEvent` block that watches for that button to be clicked and responds appropriately. To start off with we'll just watch the `home_search_btn` button and print something to the console when it's clicked

        # Do This

        You're now in Code Mode (you can use the buttons above your app to switch between Code Mode and Design Mode). This is where you can write the code that will respond to users interacting with your app.

        ![](https://images.code.org/278b27dd31b6ca014c0dd32c5f964a54-image-1505764431751.png)

        -   **Drag out an `onEvent` block** from the code toolbox.
        -   **Select `home_search_btn`** from the "id" dropdown.
        -   **Drag out a `console.log` block** from the variables drawer.
        -   **Run your app**.
        -   **Click the Search button** and look for messages in the console.
      U4 Model Program 3_2019: |-
        # Button Events

        With our screens in place, it's time to start actually _programming_ the app so that it responds to button clicks. For each button on each screen, you'll want to add an `onEvent` block that watches for that button to be clicked and responds appropriately. To start off with we'll just watch the `home_search_btn` button and print something to the console when it's clicked

        # Do This

        You're now in Code Mode (you can use the buttons above your app to switch between Code Mode and Design Mode). This is where you can write the code that will respond to users interacting with your app.

        ![](https://images.code.org/278b27dd31b6ca014c0dd32c5f964a54-image-1505764431751.png)

        -   **Drag out an `onEvent` block** from the code toolbox.
        -   **Select `home_search_btn`** from the "id" dropdown.
        -   **Drag out a `console.log` block** from the variables drawer.
        -   **Run your app**.
        -   **Click the Search button** and look for messages in the console.
      U4 Model Program 4: |-
        # Changing Screens On Click

        The `setScreen` block will change your app to whichever screen you specify. If you place a `setScreen` block _inside_ an `onEvent` block, you can program your buttons to change to the correct screen.

        # Do This

        Using the `onEvent` block that you've created, make your program change to the "search" screen when the "home\_search\_btn" is clicked.

        -   **Drag out a `setScreen` block** an put it inside the `onEvent` block.
        -   **Select "search"** from the `setScreen` dropdown.
        -   **Run your app** and test the "home\_search\_btn" button.
      U4 Model Program 4_2018: |-
        # Changing Screens On Click

        The `setScreen` block will change your app to whichever screen you specify. If you place a `setScreen` block _inside_ an `onEvent` block, you can program your buttons to change to the correct screen.

        # Do This

        Using the `onEvent` block that you've created, make your program change to the "search" screen when the `home_search_btn` is clicked.

        -   **Drag out a `setScreen` block** an put it inside the `onEvent` block.
        -   **Select "search"** from the `setScreen` dropdown.
        -   **Run your app** and test the `home_search_btn` button.
      U4 Model Program 4_2019: |-
        # Changing Screens On Click

        The `setScreen` block will change your app to whichever screen you specify. If you place a `setScreen` block _inside_ an `onEvent` block, you can program your buttons to change to the correct screen.

        # Do This

        Using the `onEvent` block that you've created, make your program change to the "search" screen when the `home_search_btn` is clicked.

        -   **Drag out a `setScreen` block** an put it inside the `onEvent` block.
        -   **Select "search"** from the `setScreen` dropdown.
        -   **Run your app** and test the `home_search_btn` button.
      U4 Model Program 5: |-
        # Wire Up the Other Buttons

        Now that you've made one button work, just follow the same pattern for all of your others.

        # Do This

        -   **Add an `onEvent` block** for each button.
        -   **Select the button ID** from the "id" dropdown.
        -   **Add a `setScreen` block** inside each `onEvent` block.
        -   **Select the screen ID** from each `setScreen` dropdown.
        -   **Run your app** and test that all of the buttons work.
      U4 Model Program 5_2018: |-
        # Wire Up the Other Buttons

        Now that you've made one button work, just follow the same pattern for all of your others.

        # Do This

        -   **Add an `onEvent` block** for each button.
        -   **Select the button ID** from the "id" dropdown.
        -   **Add a `setScreen` block** inside each `onEvent` block.
        -   **Select the screen ID** from each `setScreen` dropdown.
        -   **Run your app** and test that all of the buttons work.
      U4 Model Program 5_2019: |-
        # Wire Up the Other Buttons

        Now that you've made one button work, just follow the same pattern for all of your others.

        # Do This

        -   For each button, create an event that links to the appropriate screen when the button is pressed.
        -   Run your app and test that all of the buttons work.
      Underground Avoiding Lava: Láva sa ukrýva pod niektorými z týchto blokov, ktoré
        budeš potrebovať zakryť predtým, než sa posunieš vpred. K tomu môžeš použiť
        príkaz `ak`. Pridaj príkaz `posuň sa dopredu`  na správne miesto, aby si vyťažil
        tieto bloky.
      Underground Avoiding Lava_2019: Láva sa ukrýva pod niektorými z týchto blokov,
        ktoré budeš potrebovať zakryť predtým, než sa posunieš vpred. K tomu môžeš
        použiť príkaz `ak`. Pridaj príkaz `posuň sa dopredu`  na správne miesto, aby
        si vyťažil tieto bloky.
      Underground If Statements: Teraz to bude zapeklité. Vyťaž 3 červené kamene,
        no nespadni pritom do lávy. Použí príkaz  `ak` aby si umiestnil kamene cez
        všetku lávu, ktorú odkryješ.
      Underground If Statements_2019: Teraz to bude zapeklité. Vyťaž 3 červené kamene,
        no nespadni pritom do lávy. Použí príkaz  `ak` aby si umiestnil kamene cez
        všetku lávu, ktorú odkryješ.
      Using Accelerometer Events: "Today you’re going to learn how to use and create
        **functions**.\n\nCreating a function lets you make your own blocks! There
        are two parts to a function: \n\nMaking a newly named block that has all of
        the code you want to run inside of it. \n\\-xml of function definition- \n\nThe
        single green block itself that you use, or call, to run the function you created.\n\\-xml
        of function call-\n\nPrepare to get familiar with functions, learn how to
        edit them, and create your own!"
      Using Accelerometer Events_2018: "Today you’re going to learn how to use and
        create **functions**.\n\nCreating a function lets you make your own blocks!
        There are two parts to a function: \n\nMaking a newly named block that has
        all of the code you want to run inside of it. \n\\-xml of function definition-
        \n\nThe single green block itself that you use, or call, to run the function
        you created.\n\\-xml of function call-\n\nPrepare to get familiar with functions,
        learn how to edit them, and create your own!"
      Using Accelerometer Events_2019: "Today you’re going to learn how to use and
        create **functions**.\n\nCreating a function lets you make your own blocks!
        There are two parts to a function: \n\nMaking a newly named block that has
        all of the code you want to run inside of it. \n\\-xml of function definition-
        \n\nThe single green block itself that you use, or call, to run the function
        you created.\n\\-xml of function call-\n\nPrepare to get familiar with functions,
        learn how to edit them, and create your own!"
      'Video: Intro to CSS Part 2_2019': |-
        ## Question to Consider

        -   How does the web page know what stylesheet it should be using?
      'Video: Intro to CSS_2019': |-
        ## Questions to Consider

        -   How is the style of a web page different from structure?
        -   Why might you want your web page to have a certain style?
      Vigenere: "# Encrypt and decrypt a message with the Vigenère cipher\n\nThis
        is an interactive version of the Vigenère cipher that animates the encryption
        and decryption as it’s happening, given a piece of text to encrypt or decrypt
        and the key.\n\n# Do this\n\n### Encrypt a message\n\nClick Step several times,
        and trace what’s happening. Pay attention to:\n\n-   How the ciphertext is
        being produced\n-   What happens when you get to the last character of the
        key\n-   After you’ve stepped through a few characters click Play to watch
        the rest animate\n-   Hit Restart and play the animation again. You can use
        the speed slider to speed it up or slow it down  \n\n![](https://images.code.org/06858f88ac12997bba73f4f76638a068-image-1443574425185.gif)\n\n###
        Decrypt a message\n\nEncrypt a message as above, then:  \n\n-   Highlight
        and copy the ciphertext\n-   Paste it into the plaintext area. Note: Don’t
        change the key\n-   Change the Encrypt/Decrypt toggle to Decrypt\n-   Hit
        Step a few times, and then Play\n\nYou should see the original text emerge.\\\n![](https://images.code.org/dc89d6c19c17adb23b6b5ff9a62c4583-image-1443574425182.gif)\n\nHow
        hard would it be to crack a message encrypted with this cipher? Does the length
        of the key make a difference?"
      Virtual Pet 1: |-
        Toto je žirafa Geraldine, tvoje nové domáce zvieratko .

        Čo myslíš, že sa stane, ked stlačíš "▶ Spustiť" a potom na ňu klikneš?
      Virtual Pet 1 Predict: |-
        **Napíš predpoveď:** Toto je Geraldine, tvoje nové domáce zvieratko žirafa.

        Čo myslíš, že sa stane, ked stlačíš "▶ Spustiť" a potom na ňu klikneš?
      Virtual Pet 1_2019: "**Free Play**: Whoa! Check out this cool pet! \n\nWhile
        reading the code below, ask yourself:\n\n-   How do you command the pet to
        move? \n-   What happens when the pet touches the ice cream cone? How about
        the pepper?\n-   How is the `energy` variable used? How can you check the
        pet's current `energy` value?\n\nRun the code and play with the pet! When
        you are done, click **Finish**."
      Virtual Pet 2: |-
        V rohu je blatová mláka.

        Vytvor takú **udalosť**, že keď sa Geraldine dotkne mláky, tak sa jej farba zmení na hnedú.
      Virtual Pet 2_2019: "Now it's your turn to create your own virtual pet! Start
        by giving it a look you like.\n\n1.  Click the **Costumes** tab at the top-left
        of your screen (next to **Code**). \n2.  Edit the starting costume, or add
        a new one that you like. \n3.  Change the sprite's costume to your own in
        the code below.\n4.  Click **Run** to see your pet's new look!"
      Virtual Pet 3: |-
        Nemôžeme mať špinavú žirafu, ktorá sa túla po okolí!

        1.  Pridaj na obrazovku nový mydlový sprite.
        2.  Dokážeš to spraviť tak, že keď sa žirafa a mydlo dotknú, tak sa žirafa vráti naspäť k svojej normálnej farbe?

        * * *

        Použi tento blok, aby si vrátil farbu:
        <xml><block type="gamelab_removeTint" inline="true">
              <value name="THIS">
                <block type="sprite_variables_get">
                  <title name="VAR">mySprite</title>
                </block>
              </value>
            </block></xml>
      Virtual Pet 3_2019: "Vytvor udalosti, vďaka ktorým sa bude tvoje zvieratko pohybovať
        podľa príkazov!\n\nZačni s použitím <xml><block type=\"gamelab_keyPressed\"
        block-text=\"the while up key pressed event block\"><title name=\"CONDITION\">\"while\"</title><title
        name=\"KEY\">\"up\"</title></block></xml> spolu s <xml><block type=\"gamelab_moveInDirection\"
        block-text=\"the move in direction action block\"><title name=\"DIRECTION\">\"North\"</title></block></xml>,
        na to aby sa tvoje zbieratko hýbalo na sever **pokiaľ** je stlačená šípka
        hore. \n\nZopakuj tento postup aj pre ďalšie tri smery (juh, západ, východ)
        a tlačidlá šípok (dole, vľavo, vpravo)!"
      Virtual Pet 4: |-
        Nechceme čakať, aby sa žirafa vždy sama vyčistila.

        Pridaj správanie k tvojmu mydlu, aby bolo pretiahnuteľné, a potom ho pretiahni ponad žirafu, aby si ju vyčistil!
      Virtual Pet 4_2019: "Vytvor dáke potulné jedlo!\n\n1.  Pridaj **dve** postavy.
        \n2.  Jedna postava bude vyzerať ako jedlo, ktoré tvoje zvieratko **má rado**
        \ a druhá ako niečo čo **nemá rado**.\n3.  Vytvor pre každú postavu jedla
        správanie **potulovať sa** hneď ako sa objaví. "
      Virtual Pet 5: "Všetko toto hranie berie energiu!\n\nPridaj takú akciu ku každej
        udalosti, keď sa žirafa dotkne iného sprite, že sa žirafa zmenší o 5.  "
      Virtual Pet 5_2019: |-
        Pre **simuláciu** "jedenia" vo virtuálnom svete použi blok <xml><block type="gamelab_checkTouching" block-text="the when touching block"></block></xml> s blokom <xml><block type="gamelab_jumpTo" block-text="the jump to location block"></block></xml>!

        1.  Vytvor udalosť, ktorá umožní tvojim postavám jedla skočiť kdekoľvek po tom, čo sa ich dotkne zvieratko..
        2.  Zopakuj postup aj pre ďalšiu postavu jedla.
      Virtual Pet 6: "Vyrovnaná výživa je dôležitá! Musíme nakŕmiť žirafu, aby naspäť
        získala silu.\n\nPridaj na scénu jablko a nechaj ho vrátiť žirafu do pôvodnej
        veľkosti, keď sa dotknú.  "
      Virtual Pet 6_2019: "Na to, aby jedenie jedla ovplyvnilo energiu tvojho zvieratka,
        použi blok <xml><block type=\"variables_set\" block-text=\"the set variable
        block\"><title name=\"VAR\">energy</title></block></xml> spolu s blokom <xml><block
        type=\"math_change\" block-text=\"the change variable block\"><title name=\"VAR\">energy</title></block></xml>!
        Čím viac bude mať energie, tým rýchlejšie sa bude pohybovať! \n\n1.  Na začiatku
        programu nastav premennú `energia` na 5.\n2.  Ak zvieratko zje jedlo, ktoré
        **má rado**, pridaj do `energie` 1.\n3.  Ak zvieratko zje jedlo, ktoré **nemá
        rado**, nastav `energiu` späť na 5.\n4.  Zmeň udalosť pre každé tlačítko šípky
        tak, aby zvieratko namiesto špecifických čísiel menilo `energiu` v pixeloch."
      Virtual Pet 7_2019: "Skontrolovať hodnotu `energie` tvojho zvieratka môžeš cez
        blok <xml><block type=\"gamelab_printText\" block-text=\"the print block\"></block></xml>.
        Je to nový blok, ktorý sa nachádza v kategórii `World` ! \n\nVytvor udalosť,
        ktorá pri kliknutí na postavu zvieratka umožní vytlačiť hodnotu `energie`. "
      Virtual Pet 8_2019: "**Voľná hra:** Tvoje virtuálne zvieratko je _VIRTUÁLNE
        ÚŽASNÉ!_ \n\nČo by si ešte mohol vymyslieť? Vyskúšaj tieto nápady:\n\n-   Zmeň
        farbu pozadia alebo pridaj obrázok.\n-   Skús viac tlačiť. Napríklad vytlač
        _\"Yum! Energia zvýšená!\"_ keď zvieratko zje niečo čo má rado, alebo _\"Fuj!
        Energia zrušená!\"_ keď zje niečo čo nemá rado.\n-   Pridaj ďalšiu postavu,
        ktorá bude s tvojím zvieratkom reagovať inak. Čo napríklad postava **hračka**?\n-
        \  Pridaj ďalšiu premennú, ktorá ovplyvní zvieratko alebo priestor. Čo by
        mohlo vytvoriť `šťastie` alebo `vek`?\n-   Skúšaj rôzne správania! Skús upraviť
        správanie **potulovať sa** na pomalšie alebo naopak zrýchli postavy jedla
        (tip: ich \"rýchlosť\" je momentálne 5...)."
      Virtual Pet Freeplay: "Voľná hra: Čo viac dokážeš spraviť so svojou žirafou?\n\n-
        \  Dokážeš pridať viac špeciálnych vecí pre tvôjho virtuálneho miláčika?\n-
        \  Dokážěs jej dať nejakých priateľov?  "
      'Widget: Text Compression': V texte hľadajte vzory (opakované slová alebo frázy).
        Zadajte vzory, ktoré vidíte, do slovníka vpravo. Pri zadávaní položiek do
        slovníka, symbol pre položku sa vloží do textu namiesto vzoru.
      behaviors 1: |-
        Odhadni, čo sa bude diať! Naštuduj si kód.

        -   Postava sa bude točiť.
        -   Postava sa zmenší.
        -   Postava sa pohne.
        -   Postava zmení farby.
      behaviors 2: |-
        Leť s raketou ku hviezdam!

        -   Uprav správanie rakety tak, aby v zobrazenej ploche letela nahor.
      behaviors 3: |-
        Pomôž roveru predbehnúť robota!

        -   Uprav správanie roveru tak, aby bol rýchlejší ako robot.
      behaviors 3a: |-
        Uprav správanie `spinning right` (točenie vpravo).  Namiesto bloku pre kostýmy použi blok <xml><block type="sprite_parameter_get" block-text="this sprite"><title name="VAR">this sprite</title></block></xml>. V takom prípade bude funkcia fungovať pre všetky postavy bez ohľadu na ich kostým.

        **Odstráň chybu:** Nechaj sa všetky hviezdy točiť tým istým smerom!
      behaviors 4: Odhadni, čo sa bude diať! Ktorou cestou sa satelit vyberie k solárnemu
        systému?
      behaviors 5: |-
        Napíš svoje vlastné správanie.

        -   Napíš pre kozmonauta nové správanie tak, aby išiel k jednej zo štyroch kozmických lodí na zobrazenej ploche.
      behaviors 6: |-
        Make the ball roll.

        -   Create a new behavior and use it to make the ball roll. Your behavior should combine two different actions.

        ![](<https://images.code.org/4c81af6da51ce5b8ce83e9056dbfe34c-image-1567714812224.2019-09-05 16_19_45.gif>)
      behaviors 7: |-
        Drive off into the horizon!

        -   Create a new behavior and use it to make the car move up (north) and shrink. If you do it right, it could look like it is driving off into the horizon.

        ![](<https://images.code.org/e0ea2b008bf557ea81e99a27dd03ef03-image-1567713536857.2019-09-05 15_58_25.gif>)
      behaviors free play: "**Voľná hra.**Vytvor si svoju vlastnú scénu z vesmíru!"
      comment_intro_maze_2018: |-
        _"Hmm, čo robí tento program?"_

        * * *

        Vyrieš úlohu a použi nový blok <xml><block type="comment">
            <title name="TEXT"> </title>
          </block></xml>. Zapíš si tam svoje poznámky. Pomôže ti to spomenúť si, čo program robí a prečo, keď sa k nemu neskôr vrátiš.

        Komentáre slúžia len pre **teba** a nijako neovplyvnia vykonávanie programu.
      course1_artist_loops_challenge2: Let's play a game! Draw as many X's as you
        can! Can you get 3 in a row?
      course1_artist_loops_challenge3: |-
        **Tweet!**

        _"Can you help me make two bird houses?"_
      course1_artist_loops_challenge4: _"Poďme hádzať kockami! Pomôžeš mi ich nakresliť?"_
      course1_maze_debugging_challenge1: Debug this level. Remove the extra blocks,
        and add the missing blocks. Get the bird to the pig!
      course1_maze_debugging_challenge2: Analyzuj tento level. Toto sú tie správne
        bloky, ale sú v nesprávnom poradí!
      course1_maze_seq_challenge2: You can only move up to four times in each direction.
        Can you find a path before you run out of blocks?
      course1_playlab_events_challenge1: |-
        _"Where are my friends hiding? In this game, clicking on me will show my friend Olive the cat!"_

        Clicking Olive will make Robin appear! Can you write code to show the rest of the characters too?

        In this puzzle, make sure to click for hints! The hints will help you do this project step-by-step!

        ![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png>)
      course1_playlab_events_challenge2: |-
        _"Let's have a party! Give my friends something to do when you click or tap them."_

        What will the animals say? What else will happen?

        In this puzzle, make sure to click for hints! The hints will give you fun things to try!

        ![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png>)
      course2_artist_nestedLoops_challenge1: |-
        Prídeš na to, ako nakresliť takýto obrázok?

        -   Oba útvary majú **strany o dĺžke 50 pixelov**
        -   Pri kreslení _osemuholníkov_ sa musíš otáčať o \*\* 45 stupňov\*\*.
        -   Pri kreslení _trojuholníkov_ sa musíš otáčať o **120 stupňov**.
      course2_artist_nestedLoops_challenge2: |-
        Can you figure out how to make a picture like this?

        -   The first inner loop should make an octagon.
        -   The second inner loop should make a hexagon.
        -   The third inner loop should make a square.
      course2_artist_prog_challenge1: Draw rooms for each of the animals. There are
        many different ways to solve this puzzle, so have some fun!
      course2_artist_prog_challenge2: _Help me paint the yellow lines on this road!_
      course2_bee_conditionals_challenge1: "Pozberaj všetok nektár a vyrob z neho
        med. Nektár môžeš zberať len z kvetov a med vyrábať z plástov.\nSkontroluj
        každé pole a zisti, či je tam kvet, alebo plást. "
      course2_bee_conditionals_challenge2: Collect all of the nectar and make all
        the honey. You can collect all of the nectar in one flower by using the `while
        nectar > 0` loop.
      course2_collector_loops_challenge2: |-
        _"Let's hunt for treasure - using loops!"_

        Help the collector by debugging this code. Get all of the treasure!
      course2_collector_prog_challenge1: Pozri sa pozorne! Vieš pozbierať všetkých
        **10** drahokamov?
      course2_collector_prog_challenge2: There are **20** pieces of treasure in this
        cave. Collect at least half to finish the challenge!
      course2_harvester_loops_challenge1: Pozbieraj všetku kukuricu.
      course2_harvester_loops_challenge2: Pozbieraj všetok šalát. Vyhni sa stromom
        a poliam!
      course2_maze_programming_challenge1: _"The pig is hiding! Can you help me find
        a way around?"_
      course2_maze_programming_challenge2: Niekedy existuje viac spôsobov ako vyriešiť
        jeden problém. Niekedy je rýchlešie ísť dozadu ako ísť dopredu!
      course3_artist_functions_challenge1: Once you define a function, you can call
        it over and over again - whenever and wherever you want! Try this code to
        see how it works, then change it to make your own impressive design!
      course3_artist_functions_challenge2: |-
        Not only can you jump to some pre-set locations, like the corners of the canvas, you can also use a `jump to` command to get to absolutely any spot you like! Try this code to see how it works, then make the program your own!

        <xml>
          <block type="jump_to_xy">
            <title name="XPOS">???</title>
            <title name="YPOS">???</title>
            </block></xml>
      course3_bee_debugging_challenge1: Watch how the bee gets the nectar. Can you
        use the same kind of pattern to help the bee make all of the honey?
      course3_bee_functions_challenge1: You are on your own for this challenge.  This
        could "bee" harder than it looks!
      course3_bee_functions_challenge2: You are on your own for this challenge!
      course3_bee_functions_challenge3: Create a new function to collect all the nectar
        and honey while there is a path ahead. Use it to complete the puzzle!
      course3_bee_functions_challenge4: Use everything you have learned to complete
        this puzzle!
      course3_collector_debugging_challenge2: Are you an expert of nested loops? Use
        what you have learned so far to collect all of the treasure!
      course3_farmer_condLoops_challenge1: "The pumpkins mark the place where you
        should turn. _Turn right at the pumpkins._ Otherwise keep going forward, but
        remember to collect all of the lettuce or corn along the way. \n\n**Each hidden
        crop has only one corn or lettuce.**"
      course3_farmer_condLoops_challenge2: "_\"It's a vegetable maze!\"_ \n\nTurn
        right at pumpkins, turn left at the lettuce. Collect everything to complete
        the level."
      course3_farmer_until_challenge2: Use If/Else blocks to follow the curvy path.
        At each corner, use the `remove 1` command in a loop to clear the piles.
      course3_maze_debugging_challenge1: _"Am I just going around in circles?"_
      course3_maze_debugging_challenge2: _"If I turn too often, I might get dizzy!
        Help me reach the pig with only four `turn` commands."_
      course3_maze_until_challenge1: No hints, just challenge. Get the zombie to the
        sunflower.
      course3_playLab_challenge1: "_The **squirrels** are terrified to see that a
        **dinosaur** has come to town! Can the brave **knight** keep them all from
        panicking?_\n\nRules:\n\n1.  _Touching the squirrels scores you points._\n2.
        \ _Touching the dinosaur takes many points away._\n\nHere is a different kind
        of game that has already been started for you! Play it to see how it works.
        \n\nSomething should happen when you get enough points or when you run out
        of points. Add some code to the `win game` and `lose game` functions to make
        the game work the way it should. \nClick the hints for ideas!"
      course4_artist_binary_challenge1: V tejto úlohe môžeš použiť každú binárnu hodnotu
        (0 or 1) iba raz. Na dokončenie kresby skús použiť vnorený cyklus.
      course4_artist_binary_challenge2: |-
        V tejto mriežke je 256 bitov - to znamená, že aj pri malej zmene môžu vzniknúť veľké problémy. Si dostatočne vytrvalý/á, aby si vrátil/a logo späť do pôvodného stavu?

        ![](https://images.code.org/74e15f513982b47762dd33ebbc21e5e9-image-1498776314610.png)
      course4_artist_concept_challenge2: Create five pinwheel designs using the code
        below.
      course4_artist_functions_challenge2: |-
        Not only can you jump to some pre-set locations, like the corners of the canvas, you can also use a `jump to` command to get to absolutely any spot you like! Try this code to see how it works, then make the program your own!

        <xml>
          <block type="jump_to_xy">
            <title name="XPOS">???</title>
            <title name="YPOS">???</title>
            </block></xml>
      course4_artist_fwp_challenge1: Skús spustiť tento program a spraviť v ňom zmeny
        a pozri, čo sa stane. Vedel by si povedať ako funguje? (Alebo ho celý vymaž
        a nahraď niečim úplne iným)
      course4_artist_variables_challenge1: Can you create a `length` variable and
        use it to create this interesting pattern?
      course4_bee_for_challenge1: Use this for loop to collect all of the nectar.
        There are a few actions that you will want to `repeat 'counter' times`.
      course4_bee_fwp_challenge1: Use one `for loop` in a function to collect all
        of the corn. The same `for loop` can count to different maximum values by
        using the `length` parameter.
      course4_bee_fwp_challenge2: |-
        Let's see if you can handle this one final test! Give it everything you've got!

        Use one `for loop` in a function to collect all of the vegetables in the row. Make the `for loop` count to different maximum values by using the `length` parameter. Make your program as short as possible by using a second `for loop` outside the function.

        Good luck!
      course4_collector_nested_loops_challenge2: "_\"Poďme pátrať po poklade - pomocou
        cyklov!\"_ \n\nPomôž zberateľke získať aspoň 2 drahokamy len s blokmi, ktoré
        máš v paneli nástrojov. Je však možné pozbierať všetky 4."
      course4_harvester_nested_loops_challenge1: _"Potrebujem pomoc na farme! Pomôž
        mi pozbierať túto kukuricu a použi na to len tie bloky, ktoré sú v paneli
        nástrojov."_
      course4_playlab_variables_challenge1: Use these blocks to make the actors share
        a knock-knock joke. Change the punchline and setup to tell your own joke!
      courseA_artist_loops10: "## Čas vrátiť sa späť na pevninu. Pômož mi s kladením
        kameňov, aby som nespadol!"
      courseA_artist_loops10_2018: "## Čas vrátiť sa späť na pevninu. Pômož mi s kladením
        kameňov, aby som nespadol!"
      courseA_artist_loops10_2019: "## Čas vrátiť sa späť na pevninu. Pômož mi s kladením
        kameňov, aby som nespadol!"
      courseA_artist_loops11: |-
        ## Pomôž mi postaviť schody, aby som mohol sledovať ako loď odpláva.

        ![expandable](https://images.code.org/ed19f00a2350b186fbe86ea805e17925-image-1498065450651.gif)
      courseA_artist_loops11_2018: |-
        ## Pomôž mi postaviť schody, aby som mohol sledovať ako loď odpláva.

        ![expandable](https://images.code.org/ed19f00a2350b186fbe86ea805e17925-image-1498065450651.gif)
      courseA_artist_loops11_2019: |-
        ## Pomôž mi postaviť schody, aby som mohol sledovať ako loď odpláva.

        ![expandable](https://images.code.org/ed19f00a2350b186fbe86ea805e17925-image-1498065450651.gif)
      courseA_artist_loops12: |-
        Umelec v diaľke uvidel niečo smiešne. Nakresli, čo si myslíš, že uvidel.

        * * *

        ### Nápady

        ![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)
        ![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)
        ![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)
        ![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)
      courseA_artist_loops12_2018: |-
        Umelec v diaľke uvidel niečo smiešne. Nakresli, čo si myslíš, že uvidel.

        * * *

        ### Nápady

        ![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)
        ![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)
        ![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)
        ![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)
      courseA_artist_loops12_2019: |-
        Umelec v diaľke uvidel niečo smiešne. Nakresli, čo si myslíš, že uvidel.

        * * *

        ### Nápady

        ![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)
        ![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)
        ![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)
        ![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)
      courseA_artist_loops2: |-
        Pomôž umelcovi nakresliť túto čiaru 2 krát dopredu.

        ![](https://images.code.org/04501f26a36673460f5c8fe04e3e7686-image-1498002095108.gif)
      courseA_artist_loops2_2018: |-
        Pomôž umelcovi nakresliť túto čiaru 2 krát dopredu.

        ![](https://images.code.org/04501f26a36673460f5c8fe04e3e7686-image-1498002095108.gif)
      courseA_artist_loops2_2019: |-
        Pomôž umelcovi nakresliť túto čiaru 2 krát dopredu.

        ![](https://images.code.org/04501f26a36673460f5c8fe04e3e7686-image-1498002095108.gif)
      courseA_artist_loops3: Umelec sa pokúša nakresliť čiaru 5 krát, ale nedarí sa
        mu. Vieš mu pomôcť?
      courseA_artist_loops3_2018: Umelec sa pokúša nakresliť čiaru 5 krát, ale nedarí
        sa mu. Vieš mu pomôcť?
      courseA_artist_loops3_2019: Umelec sa pokúša nakresliť čiaru 5 krát, ale nedarí
        sa mu. Vieš mu pomôcť?
      courseA_artist_loops4: |-
        Teraz použi tento cyklus <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="2-6">5</title></block></xml>, na nakreslenie čiary päť krát!

        ![](https://images.code.org/b2bc7f52ffdac2ad0d8e7c2d798c24df-image-1501875818062.gif)
      courseA_artist_loops4_2018: |-
        Teraz použi tento cyklus <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="2-6">5</title></block></xml>, na nakreslenie čiary päť krát!

        ![](https://images.code.org/b2bc7f52ffdac2ad0d8e7c2d798c24df-image-1501875818062.gif)
      courseA_artist_loops4_2019: |-
        Teraz použi tento cyklus <xml><block type="controls_repeat_simplified_dropdown" block-text="repeat"><title name="TIMES" config="2-6">5</title></block></xml>, na nakreslenie čiary päť krát!

        ![](https://images.code.org/b2bc7f52ffdac2ad0d8e7c2d798c24df-image-1501875818062.gif)
      courseA_artist_loops5: |-
        ## Nakresli čiaru, ktorá bude zložená zo siedmich ťahov. Toto bude náš horizont

        ![expandable](https://images.code.org/dc7c4317177f2b94421c5aa589c31ac7-image-1498002771889.gif)
      courseA_artist_loops5_2018: |-
        ## Nakresli čiaru, ktorá bude zložená zo siedmich ťahov. Toto bude náš horizont

        ![expandable](https://images.code.org/dc7c4317177f2b94421c5aa589c31ac7-image-1498002771889.gif)
      courseA_artist_loops5_2019: |-
        ## Nakresli čiaru, ktorá bude zložená zo siedmich ťahov. Toto bude náš horizont

        ![expandable](https://images.code.org/dc7c4317177f2b94421c5aa589c31ac7-image-1498002771889.gif)
      courseA_artist_loops6: |-
        ## Poďme do pozadia vložiť pekný kopec!

        ![expandable](https://images.code.org/f64d93b6d9a7d9c3edfce3c227c0dd49-image-1498062074031.gif)
      courseA_artist_loops6_2018: |-
        ## Poďme do pozadia vložiť pekný kopec!

        ![expandable](https://images.code.org/f64d93b6d9a7d9c3edfce3c227c0dd49-image-1498062074031.gif)
      courseA_artist_loops6_2019: |-
        ## Poďme do pozadia vložiť pekný kopec!

        ![expandable](https://images.code.org/f64d93b6d9a7d9c3edfce3c227c0dd49-image-1498062074031.gif)
      courseA_artist_loops7: |-
        ## Použi cyklus <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml> , aby si do vody pridal/a vlny.

        ![expandable](https://images.code.org/01c5f6772a8b608a2fca5f6de7e25c67-image-1498062629139.gif)
      courseA_artist_loops7_2018: |-
        ## Použi cyklus <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml> , aby si do vody pridal/a vlny.

        ![expandable](https://images.code.org/01c5f6772a8b608a2fca5f6de7e25c67-image-1498062629139.gif)
      courseA_artist_loops7_2019: Použi blok "opakovať", aby si do vody pridal vlny
      courseA_artist_loops8: |-
        ## Potrebujeme rebrík do loďe.

        ![expandable](https://images.code.org/ee90228fae25ecca1fba589b721f9120-image-1498063066878.gif)
      courseA_artist_loops8_2018: |-
        ## Potrebujeme rebrík do loďe.

        ![expandable](https://images.code.org/ee90228fae25ecca1fba589b721f9120-image-1498063066878.gif)
      courseA_artist_loops8_2019: |-
        ## Potrebujeme rebrík do loďe.

        ![expandable](https://images.code.org/ee90228fae25ecca1fba589b721f9120-image-1498063066878.gif)
      courseA_artist_loops9: |-
        ## **Výzva:**  Schody dolu na mólo sú zlomené. Pomôž mi ich opraviť.

        ![expandable](https://images.code.org/9d36df1afb6a738ba7bcff8734403ff3-image-1498063282074.gif)
      courseA_artist_loops9_2018: |-
        ## **Výzva:**  Schody dolu na mólo sú zlomené. Pomôž mi ich opraviť.

        ![expandable](https://images.code.org/9d36df1afb6a738ba7bcff8734403ff3-image-1498063282074.gif)
      courseA_artist_loops9_2019: |-
        ## **Výzva:**  Schody dolu na mólo sú zlomené. Pomôž mi ich opraviť.

        ![expandable](https://images.code.org/9d36df1afb6a738ba7bcff8734403ff3-image-1498063282074.gif)
      courseA_artist_loops_challenge1: |-
        You can use a loop to draw many lines in a row.

        Can you draw a house? Make it look just the way you like it!  Try looking for patterns that repeat!

        Here are some ideas:

        ![](https://images.code.org/6e59e881e0aa1d31186e81a203655a0b-image-1501785654664.png)
      courseA_artist_loops_challenge1_2018: |-
        You can use a loop to draw many lines in a row.

        Can you draw a house? Make it look just the way you like it!  Try looking for patterns that repeat!

        Here are some ideas:

        ![](https://images.code.org/6e59e881e0aa1d31186e81a203655a0b-image-1501785654664.png)
      courseA_artist_loops_challenge1_2019: |-
        You can use a loop to draw many lines in a row.

        Can you draw a house? Make it look just the way you like it!  Try looking for patterns that repeat!

        Here are some ideas:

        ![](https://images.code.org/6e59e881e0aa1d31186e81a203655a0b-image-1501785654664.png)
      courseA_artist_loops_challenge2a: |-
        _"Help me get the camp site ready!"_

        Use the blocks in the toolbox to draw these three tents.
      courseA_artist_loops_challenge2a_2018: |-
        _"Help me get the camp site ready!"_

        Use the blocks in the toolbox to draw these three tents.
      courseA_artist_loops_challenge2a_2019: |-
        _"Help me get the camp site ready!"_

        Use the blocks in the toolbox to draw these three tents.
      courseA_collector_loops1: "**Voľná hra.** Toto je dobrodružka Laurel! Posúvaj
        ju po ploche a pozbieraj toľko drahokamov, koľko len vieš. \n\nPresuň bloky
        na pracovnú plochu a zisti, ako sa dostať k drahokamom. Získaj aspoň jeden,
        aby si prešiel tento level."
      courseA_collector_loops12: |-
        _"Heuréka! Pozbieral čo najviac drahokamov!"_\
        (Nemusíš to pozbierať všetko.)
      courseA_collector_loops12_2018: |-
        _"Heuréka! Pozbieral čo najviac drahokamov!"_\
        (Nemusíš to pozbierať všetko.)
      courseA_collector_loops12_2019: |-
        _"Heuréka! Pozbieral čo najviac drahokamov!"_\
        (Nemusíš to pozbierať všetko.)
      courseA_collector_loops1_2018: "**Voľná hra.** Toto je dobrodružka Laurel! Posúvaj
        ju po ploche a pozbieraj toľko drahokamov, koľko len vieš. \n\nPresuň bloky
        na pracovnú plochu a zisti, ako sa dostať k drahokamom. Získaj aspoň jeden,
        aby si prešiel tento level."
      courseA_collector_loops1_2019: "**Voľná hra.** Toto je dobrodružka Laurel! Posúvaj
        ju po ploche a pozbieraj toľko drahokamov, koľko len vieš. \n\nPresuň bloky
        na pracovnú plochu a zisti, ako sa dostať k drahokamom. Získaj aspoň jeden,
        aby si prešiel tento level."
      courseA_collector_loops2: |-
        Get all three piles! Move Laurel to each piece of treasure, then use this block:
          <xml><block type="collector_collect"/></xml>
      courseA_collector_loops2_2018: 'Pozbieraj všetky 3 kôpky! Posuň Laurel ku drahokamu
        a potom použi tento blok: <xml><block type="collector_collect"/></xml>'
      courseA_collector_loops2_2019: Pozbieraj všetky 3 drahokamy! Posuň Laurel ku
        drahokamu a potom použi blok "zbieraj".
      courseA_collector_loops3: Ako môze Laurel pozbierať všetkých päť kôp drahokamov
        s použitím iba jedného bloku <xml><block type="maze_moveEast"/></xml>?
      courseA_collector_loops3_2018: Ako môze Laurel pozbierať všetkých päť kôp drahokamov
        s použitím iba jedného bloku <xml><block type="maze_moveEast"/></xml>?
      courseA_collector_loops3_2019: Ako môze Laurel pozbierať všetkých päť kôp drahokamov
        s použitím iba jedného bloku <xml><block type="maze_moveEast"/></xml>?
      courseA_collector_loops_challenge1: _"Can you help me spot some bugs? I know
        which way I want to go, but I'm not sure how many steps to take."_
      courseA_collector_loops_challenge1_2018: _"Can you help me spot some bugs? I
        know which way I want to go, but I'm not sure how many steps to take."_
      courseA_collector_loops_challenge1_2019: _"Can you help me spot some bugs? I
        know which way I want to go, but I'm not sure how many steps to take."_
      courseA_collector_preLoops1: "This is Laurel the Adventurer! \n\nPress \"Run\"
        to see her walk up to the treasure and grab it."
      courseA_collector_preLoops2: "Great!  Now you get to add code yourself!  \n\nSnap
        a ![](https://images.code.org/563c0deb5c51d43cdfa72d62dec3419d-image-1508904559201.05.30.png)
        block to the bottom of the program and click \"Run\"!"
      courseA_collector_preLoops3: To grab the treasure, snap two ![](https://images.code.org/54c206b62a02f1d7ea8f1bee52664ecb-image-1508905670742.25.37.png)
        blocks and one ![](https://images.code.org/563c0deb5c51d43cdfa72d62dec3419d-image-1508904559201.05.30.png)
        block to the bottom of the program and click "Run"!
      courseA_collector_preLoops7: |-
        Get all three piles! Move Laurel to each piece of treasure, then use this block:
          <xml><block type="collector_collect"/></xml>
      courseA_harvester_loops1: Pomôž záhradníčke pozbierať všetku kukuricu!
      courseA_harvester_loops10: Pomôž záhradníčke pozbierať všetkých 5 klasov kukurice!
      courseA_harvester_loops10_2019: Pomôž záhradníčke pozbierať všetkých 5 klasov
        kukurice!
      courseA_harvester_loops11: 'Vyskúšajte to ešte raz sami! '
      courseA_harvester_loops11_2019: 'Vyskúšajte to ešte raz sami! '
      courseA_harvester_loops1_2019: Pomôž záhradníčke pozbierať všetku kukuricu!
      courseA_harvester_loops2: Záhradníčka musí pozbierať všetku kukuricu! Vidíš
        tam nejaký vzor?
      courseA_harvester_loops2_2019: Záhradníčka musí pozbierať všetku kukuricu! Vidíš
        tam nejaký vzor?
      courseA_harvester_loops3: Dokážeš pozbierať všetku kukuricu použitím len **jedného**
        bloku posunúť?
      courseA_harvester_loops3_2019: Dokážeš pozbierať všetku kukuricu použitím len
        **jedného** bloku posunúť?
      courseA_harvester_loops4: |-
        _"Potrebujem pomôcť s nájdením chyby!"_

        Dokážeš pomôcť záhradníčke nájsť chybu v kóde?
      courseA_harvester_loops4_2019: |-
        _"Potrebujem pomôcť s nájdením chyby!"_

        Dokážeš pomôcť záhradníčke nájsť chybu v kóde?
      courseA_harvester_loops5: Vyskúšaj to! Dokážeš zobrať aj tú kukuricu na konci?
      courseA_harvester_loops5_2019: Vyskúšaj to! Dokážeš zobrať aj tú kukuricu na
        konci?
      courseA_harvester_loops5a: Pozri na všetku tú kukuricu! Dokážeš ju všetku pozbierať?
      courseA_harvester_loops5a_2019: Pozri na všetku tú kukuricu! Dokážeš ju všetku
        pozbierať?
      courseA_harvester_loops5b: Dokážeš svoj kód zmeniť tak aby záhradníčka pozbierala
        všetku kukricu?
      courseA_harvester_loops5b_2019: Dokážeš svoj kód zmeniť tak aby záhradníčka
        pozbierala všetku kukricu?
      courseA_harvester_loops6: Budeš potrebovať blok **jeden** <xml><block type="maze_moveWest"
        block-text="move west"></block></xml> a blok **jeden** <xml><block type="maze_moveNorth"
        block-text="move north"></block></xml> block na dokončenie tejto úlohy!
      courseA_harvester_loops6_2019: Budeš potrebovať blok **jeden** <xml><block type="maze_moveWest"
        block-text="move west"></block></xml> a blok **jeden** <xml><block type="maze_moveNorth"
        block-text="move north"></block></xml> block na dokončenie tejto úlohy!
      courseA_harvester_loops7: 'Teraz to vyskúšajte sami! '
      courseA_harvester_loops7_2019: 'Teraz to vyskúšajte sami! '
      courseA_harvester_loops9: Dokážeš prísť na to pozbierať\_všetku kukuricu?
      courseA_harvester_loops9_2019: Dokážeš prísť na to pozbierať\_všetku kukuricu?
      courseA_harvester_seq1: Pomôž záhradníčke pozbierať kukuricu!
      courseA_harvester_seq10: Záhradníčka musí pozbierať všetku kukuricu! Vidíš tam
        nejaký vzor?
      courseA_harvester_seq10_2019: Záhradníčka musí pozbierať všetku kukuricu! Vidíš
        tam nejaký vzor?
      courseA_harvester_seq11: Vyskúšaj to sám/a! Pozbieraj všetku kukuricu.
      courseA_harvester_seq11_2019: Vyskúšaj to sám/a! Pozbieraj všetku kukuricu.
      courseA_harvester_seq12: "_Ďakujem za pomoc!_ \n\nPozbieraj všetku kukuricu."
      courseA_harvester_seq12_2019: "_Ďakujem za pomoc!_ \n\nPozbieraj všetku kukuricu."
      courseA_harvester_seq13: Pomôž záhradníčke pozbierať kukuricu!
      courseA_harvester_seq13_2019: Pomôž záhradníčke pozbierať kukuricu!
      courseA_harvester_seq1_2019: Pomôž záhradníčke pozbierať kukuricu!
      courseA_harvester_seq2: 'Použi **tri** krát <xml><block type="maze_moveWest"/></xml>
        aby si dostal záhradníčku ku kukurici! '
      courseA_harvester_seq2_2019: 'Use **three** <xml><block type="maze_moveWest"
        block-text="move west"/></xml> blocks to get the harvester to the corn! '
      courseA_harvester_seq3: Použi **tri** krát <xml><block type="maze_moveNorth"/></xml>
        aby si dostal záhradníčku ku kukurici! Nezabudni na záver kukuricu zobrať.
      courseA_harvester_seq3_2019: Use **three** <xml><block type="maze_moveNorth"
        block-text="move north"/></xml> blocks to get the harvester to the corn! Don't
        forget to pick the corn at the end.
      courseA_harvester_seq4: Pridaj_jeden_blok, aby záhradníčka pozbierala kukuricu.
      courseA_harvester_seq4_2019: Pridaj_jeden_blok, aby záhradníčka pozbierala kukuricu.
      courseA_harvester_seq5: Dokážeš zistiť, prečo je tento kód nesprávny? Pomôž
        záhradníčke pozbierať kukuricu!
      courseA_harvester_seq5_2019: Dokážeš zistiť, prečo je tento kód nesprávny? Pomôž
        záhradníčke pozbierať kukuricu!
      courseA_harvester_seq6: Vyskúšaj to sám/sama!
      courseA_harvester_seq6_2019: Vyskúšaj to sám/sama!
      courseA_harvester_seq7: Musíš sa posunúť 2 smermi, aby si sa dostal ku kukurici!
        Pomôž záhradníčke vybrať si ten správny smer.
      courseA_harvester_seq7_2019: Musíš sa posunúť 2 smermi, aby si sa dostal ku
        kukurici! Pomôž záhradníčke vybrať si ten správny smer.
      courseA_harvester_seq8: Teraz záhradníčka musí kukuricu zobrať až 2-krát!
      courseA_harvester_seq8_2019: Teraz záhradníčka musí kukuricu zobrať až 2-krát!
      courseA_harvester_seq9: Na dokončenie úlohy pridaj ešte 2 bloky!
      courseA_harvester_seq9_2019: Na dokončenie úlohy pridaj ešte 2 bloky!
      courseA_maze_ramp2_2018: Aby si dokončil tvoj kód, spoj oba bloky <xml><block
        type="maze_moveEast"/></xml> a <xml><block type="when_run"/></xml>, a potom
        stlač "▶ Spustiť".
      courseA_maze_ramp2_2019: Attach both <xml><block type="maze_moveEast" block-text="move
        east"/></xml> blocks to the <xml><block type="when_run" block-text="when run"/></xml>
        block to finish your code, then click "▶ Run".
      courseA_maze_ramp3a_2018: Zober <xml><block type="maze_moveNorth"/></xml> z
        panelu nástrojov a pridaj ho na spodok ostatných blokov, aby si dokončíl tento
        kód, potom klikni "▶ Spustiť".
      courseA_maze_ramp3a_2019: Zober <xml><block type="maze_moveNorth"/></xml> z
        panelu nástrojov a pridaj ich na spodok ostatných blokov, aby si dokončíl
        tento kód, potom klikni "▶ Spustiť".
      courseA_maze_ramp3b_2018: "Na konci tohto kódu je jeden blok navyše! \n\nPotiahni
        ho naspäť do panelu nástrojov, aby si ho zahodil preč."
      courseA_maze_ramp3b_2019: "Na konci tohto kódu je jeden blok navyše! \n\nPotiahni
        ho naspäť do panelu nástrojov, aby si ho zahodil preč."
      courseA_maze_ramp4a_2018: Dokážeš prísť na to, ktorý blok potrebuješ pridať
        na spodok ostatných blokov, aby si dokončíl tento kód?
      courseA_maze_ramp4a_2019: Dokážeš prísť na to, ktorý blok potrebuješ pridať
        na spodok ostatných blokov, aby si dokončíl tento kód?
      courseA_maze_ramp5a_2018: Skús túto úlohu vyriešiť bez pomoci!
      courseA_maze_ramp5a_2019: Skús túto úlohu vyriešiť bez pomoci!
      courseA_maze_seq1: _"Zahraj sa s týmito blokmi a skús ma dostať ku zlému prasiatku!"_
      courseA_maze_seq10: |-
        **Challenge:** Go around the TNT to get the bird to the pig!

        ![expandable](https://images.code.org/a656e421bc90e530a7e1ce636e507752-image-1497996976195.gif)
      courseA_maze_seq10_2018: "**Výzva:** Aby si dostal vtáka k prasiatku, musíš
        sa vyhnúť TNT!"
      courseA_maze_seq10_2019: "**Výzva:** Aby si dostal vtáka k prasiatku, musíš
        sa vyhnúť TNT!"
      courseA_maze_seq10_copy: |-
        **Challenge:** Go around the TNT to get the bird to the pig!

        ![expandable](https://images.code.org/a656e421bc90e530a7e1ce636e507752-image-1497996976195.gif)
      courseA_maze_seq11: |-
        Čas na krátku hádanku! Pohni sa jedným smerom, potom iným, aby sa vtáčik dostal ku prasiatku!

        ![expandable](https://images.code.org/bb4571384fc56702704a0c9395ee3695-image-1497996380902.gif)
      courseA_maze_seq11_2018: Čas na kratšiu úlohu! Aby ste dostali vtáka k prasiatku
        sa najprv pohni jedným smerom a potom druhým.
      courseA_maze_seq11_2019: Čas na kratšiu úlohu! Aby ste dostali vtáka k prasiatku
        sa najprv pohni jedným smerom a potom druhým.
      courseA_maze_seq12: |-
        Get that pig!

        ![expandable](https://images.code.org/c6ae5024441e2305db82d06679e5a281-image-1497997160569.gif)
      courseA_maze_seq12_2018: Dostaň to prasiatko!
      courseA_maze_seq12_2019: Dostaň to prasiatko!
      courseA_maze_seq13_2019: Dostaň sa ku prasiatku akoukoľvek cestou!
      courseA_maze_seq1_2018: _"Zahraj sa s týmito blokmi a skús ma dostať ku zlému
        prasiatku!"_
      courseA_maze_seq1_2019: _"Zahraj sa s týmito blokmi a skús ma dostať ku zlému
        prasiatku!"_
      courseA_maze_seq2: |-
        _"Chyba! Oprav kód nech sa dostanem k prasiatku."_

        ![expandable](https://images.code.org/4af4959874b3ca1fdd3008dc4f77add4-image-1497994904322.gif)
      courseA_maze_seq3: |-
        _"Fix the code to get me to the pig!"_

        ![expandable](https://images.code.org/4adca88dc6df7378846a91d0fb0e59d1-image-1497995239069.gif)
      courseA_maze_seq4: "_\"Something is not quite right.\"_ \n\nREMOVE a block to
        get the bird to the pig!\n\n![expandable](https://images.code.org/6af44fb0ba5ac5dd5502e2538f51fb9c-image-1497996162453.gif)"
      courseA_maze_seq5: |-
        Try this one yourself from the beginning.

        ![expandable](https://images.code.org/e4ef591b4580db478330c298d1af756f-image-1497997080163.gif)
      courseA_maze_seq5_2018: Vyskúšaj si to ešte raz.
      courseA_maze_seq5_2019: Vyskúšaj si to ešte raz.
      courseA_maze_seq5_copy: |-
        Try this one yourself from the beginning.

        ![expandable](https://images.code.org/e4ef591b4580db478330c298d1af756f-image-1497997080163.gif)
      courseA_maze_seq5a_2018: |-
        _"Nááá prasiatko!"_

        Čo môžeš pridať na koniec kódu, aby si vtáka dostal/a k prasiatku?
      courseA_maze_seq5a_2019: |-
        _"Nááá prasiatko!"_

        Čo môžeš pridať na koniec kódu, aby si vtáka dostal/a k prasiatku?
      courseA_maze_seq6: |-
        Pohni sa jedným smerom, potom iným, aby sa vtáčik dostal ku prasiatku!

        ![expandable](https://images.code.org/8f71c406afa60c6898937d950c670205-image-1497996506419.gif)
      courseA_maze_seq6_2018: Pohni sa jedným smerom, potom iným, aby sa vtáčik dostal
        ku prasiatku!
      courseA_maze_seq6_2019: Pohni sa jedným smerom, potom iným, aby sa vtáčik dostal
        ku prasiatku!
      courseA_maze_seq6_copy: |-
        Pohni sa jedným smerom, potom iným, aby sa vtáčik dostal ku prasiatku!

        ![expandable](https://images.code.org/8f71c406afa60c6898937d950c670205-image-1497996506419.gif)
      courseA_maze_seq7: |-
        Figure out what is missing and then add blocks to get the bird to the pig!

        ![expandable](https://images.code.org/35bdb628dabd4259b581286b071c02f3-image-1497996651260.gif)
      courseA_maze_seq7_copy: |-
        Figure out what is missing and then add blocks to get the bird to the pig!

        ![expandable](https://images.code.org/35bdb628dabd4259b581286b071c02f3-image-1497996651260.gif)
      courseA_maze_seq8: |-
        Solve this level and get the bird to the pig!

        ![expandable](https://images.code.org/fb4735244f74a4e001d1fa7b5c6028f9-image-1497998330218.gif)
      courseA_maze_seq8_2018: Vyrieš túto úlohu a dostaň vtáčika ku prasaťu!
      courseA_maze_seq8_2019: Vyrieš túto úlohu a dostaň vtáčika ku prasaťu!
      courseA_maze_seq8_copy: |-
        Solve this level and get the bird to the pig!

        ![expandable](https://images.code.org/fb4735244f74a4e001d1fa7b5c6028f9-image-1497998330218.gif)
      courseA_maze_seq9: |-
        **Challenge:** Debug this level by adding blocks to get the bird to the pig!

        ![expandable](https://images.code.org/3f35068dd3cf51c420a536fa078f854d-image-1497996843105.gif)
      courseA_maze_seq_challenge1: Debug this level. Remove the extra blocks, and
        add the missing blocks. Get the bird to the pig!
      courseA_maze_seq_challenge1_2018: Debug this level. Remove the extra blocks,
        and add the missing blocks. Get the bird to the pig!
      courseA_maze_seq_challenge1_2019: Debug this level. Remove the extra blocks,
        and add the missing blocks. Get the bird to the pig!
      courseA_maze_seq_challenge2_2019: Nájdi cestu a priveď vtáka ku prasiatku. Vyhni
        sa TNT, lebo bude lietať perie!
      courseA_playLab_events1_2019: Toto je Play Lab. Presuň bloky do svojho pracovného
        priestoru a uvidíš, čo sa stane!
      courseA_playLab_events2_2019: Pes Jorge chce povedať "Ahoj". Môžeš mu s tým
        pomôcť?
      courseA_playLab_events3: |-
        Pomôž psovi Jorgemu rozbehnúť sa, pripoj blok <xml><block type="studio_move">
            <title name="SPRITE">1</title>
            <title name="DIR">8</title>
          </block></xml> k bloku udalosti <xml><block type="studio_whenArrow">
            <title name="VALUE">left</title>
          </block></xml>, ktorú už máš na pracovnej ploche.

        Pre dokončenie úlohy dostaň Jorgeho ku vlajke!
      courseA_playLab_events3_2018: |-
        Pomôž psovi Jorgemu rozbehnúť sa, pripoj blok <xml><block type="studio_move">
            <title name="SPRITE">1</title>
            <title name="DIR">8</title>
          </block></xml> k bloku udalosti <xml><block type="studio_whenArrow">
            <title name="VALUE">left</title>
          </block></xml>, ktorú už máš na pracovnej ploche.

        Pre dokončenie úlohy dostaň Jorgeho ku vlajke!
      courseA_playLab_events3_2019: |-
        Pomôž psovi Jorgemu rozbehnúť sa, pripoj blok <xml><block type="studio_move" block-text="move dog west">
            <title name="SPRITE">1</title>
            <title name="DIR">8</title>
          </block></xml> k bloku udalosti <xml><block type="studio_whenArrow" block-text="when left arrow">
            <title name="VALUE">left</title>
          </block></xml>, ktorú už máš na pracovnej ploche.

        Pre dokončenie úlohy dostaň Jorgeho ku vlajke!
      courseA_playLab_events4: Now, add more blocks to get Jorge to move right when
        the right arrow button is clicked.
      courseA_playLab_events4_2018: Teraz pridaj ešte jeden blok s udalosťou, aby
        sa Jorge posunul doprava po kliknutí na šípku vpravo.
      courseA_playLab_events4_2019: Now, add another event block to get Jorge to move
        right when the right arrow button is clicked. Use the arrow keys or press
        the arrow buttons to move Jorge to both flags and finish the level!
      courseA_playLab_events5: Pridaj udalosti tak, aby sa Jorge hýbal hore a dole
        po stlačení šípiek na klávensnici.
      courseA_playLab_events5_2018: Pridaj udalosti tak, aby sa Jorge hýbal hore a
        dole po stlačení šípiek na klávensnici.
      courseA_playLab_events5_2019: Pridaj udalosti tak, aby sa Jorge hýbal hore a
        dole po stlačení tlačidla \`hore\` a \`dole\`. Pre dokončenie úlohy pomôž
        Jorgemu získať všetky vlajky!
      courseA_playLab_events6_2019: Sprav to ešte zaujímavejšie, zmeň aj pozadie a
        prehraj náhodný zvuk po kliknutí na Jorgeho. Keď bude tvoj kód hotový, klikni
        na Jorgeho aby si to vyskúšal/a!
      courseA_playLab_events7_2018: _Voľná hra:_ Pridaj do tejto hry čo len chceš.
        Dokážeš aby dinosaurus zmizol potom, ako doňho Jorge narazí?
      courseA_playLab_events7_2019: _Voľná hra:_ Pridaj do tejto hry čo len chceš.
        Dokážeš aby dinosaurus zmizol potom, ako doňho Jorge narazí?
      courseA_playlab_events_challenge1: |-
        Clicking Olive will make Robin appear! Can you write code to show the rest of the characters too?

        In this puzzle, make sure to click for hints! The hints will help you do this project step-by-step!

        ![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png>)
      courseA_playlab_events_challenge1_2018: |-
        Clicking Olive will make Robin appear! Can you write code to show the rest of the characters too?

        In this puzzle, make sure to click for hints! The hints will help you do this project step-by-step!

        ![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png>)
      courseA_playlab_events_challenge1_2019: |-
        Clicking Olive will make Robin appear! Can you write code to show the rest of the characters too?

        In this puzzle, make sure to click for hints! The hints will help you do this project step-by-step!

        ![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png>)
      courseA_playlab_events_challenge2: |-
        Give everyone something to do when you click on them. What will the animals say? What else will happen?

        In this puzzle, make sure to click for hints. The hints will give you fun things to try!

        ![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png>)
      courseA_playlab_events_challenge2_2018: |-
        Give everyone something to do when you click on them. What will the animals say? What else will happen?

        In this puzzle, make sure to click for hints. The hints will give you fun things to try!

        ![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png>)
      courseA_playlab_events_challenge2_2019: |-
        Give everyone something to do when you click on them. What will the animals say? What else will happen?

        In this puzzle, make sure to click for hints. The hints will give you fun things to try!

        ![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png>)
      courseB_Scrat_ramp1_2018: Aby si dostal Scrata k žaluďu, pripoj blok <xml><block
        type="maze_moveEast"/></xml> na spodok bloku <xml><block type="when_run"/></xml>,
        potom stlač "▶ Spustiť"!
      courseB_Scrat_ramp1_2019: Aby si dostal Scrata k žaluďu, pripoj blok <xml><block
        type="maze_moveEast"/></xml> na spodok bloku <xml><block type="when_run"/></xml>,
        potom stlač "▶ Spustiť"!
      courseB_Scrat_ramp2_2018: Pripoj oba bloky <xml><block type="maze_moveEast"/></xml>
        na spodok bloku <xml><block type="when_run"/></xml>, aby si dokončil tvoj
        kód, potom stlač "▶ Spustiť".
      courseB_Scrat_ramp2_2019: Pripoj oba bloky <xml><block type="maze_moveEast"/></xml>
        na spodok bloku <xml><block type="when_run"/></xml>, aby si dokončil tvoj
        kód, potom stlač "▶ Spustiť".
      courseB_Scrat_ramp3a_2018: Zober <xml><block type="maze_moveNorth"/></xml> z
        panelu nástrojov a pridaj ich na spodok ostatných blokov, aby si dokončíl
        tento kód, potom klikni "▶ Spustiť".
      courseB_Scrat_ramp3a_2019: Zober <xml><block type="maze_moveNorth"/></xml> z
        panelu nástrojov a pridaj ich na spodok ostatných blokov, aby si dokončíl
        tento kód, potom klikni "▶ Spustiť".
      courseB_Scrat_ramp3b_2018: |-
        Na konci tohto kódu je jeden blok navyše!

        Potiahni ho naspäť do panelu nástrojov, aby si ho zahodil preč.
      courseB_Scrat_ramp3b_2019: |-
        Na konci tohto kódu je jeden blok navyše!

        Potiahni ho naspäť do panelu nástrojov, aby si ho zahodil preč.
      courseB_Scrat_ramp4a_2018: Dokážeš prísť na to, ktorý blok potrebuješ pridať
        na spodok ostatných blokov, aby si dokončíl tento kód?
      courseB_Scrat_ramp4a_2019: Dokážeš prísť na to, ktorý blok potrebuješ pridať
        na spodok ostatných blokov, aby si dokončíl tento kód?
      courseB_Scrat_ramp5a_2018: Skús túto úlohu vyriešiť bez pomoci!
      courseB_Scrat_ramp5a_2019: Skús túto úlohu vyriešiť bez pomoci!
      courseB_artist_loops10: |-
        Použi, čo si sa naučil, a nakresli obrázok toho, čo si myslíš, že umelec uvidel, keď prišiel domov.

        * * *

        ### Ideas

        ![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)
        ![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)
        ![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)
        ![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)
      courseB_artist_loops10_2018: |-
        Použi, čo si sa naučil, a nakresli obrázok toho, čo si myslíš, že umelec uvidel, keď prišiel domov.

        * * *

        ### Ideas

        ![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)
        ![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)
        ![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)
        ![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)
      courseB_artist_loops10_2019: |-
        Použi, čo si sa naučil, a nakresli obrázok toho, čo si myslíš, že umelec uvidel, keď prišiel domov.

        * * *

        ### Ideas

        ![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)
        ![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)
        ![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)
        ![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)
      courseB_artist_loops1_2019: Toto je nový typ úlohy nazývaný "Umelec". V tomto
        leveli sa trochu pohraj a nakresli niečo zábavné.
      courseB_artist_loops2_2019: Umelec sa pokúša nakresliť čiaru **6** krát, ale
        nedarí sa mu. Vieš mu pomôcť?
      courseB_artist_loops3_2019: Pomôž umelcovi nakresliť čiaru 7 krát, aby vytvoril
        záhradný múr.
      courseB_artist_loops4_2019: Now we need to get the soil ready to plant. Find
        the bugs in the code and help the artist prepare the ground.
      courseB_artist_loops5_2019: Je čas opraviť schody! Opakuj tento vzor **5** krát,
        aby umelec dosiahol na vrchol kríkov.
      courseB_artist_loops6: Za kríkmi je nádherný vinič plný kvetov. Dokáźeš sa vyštverať
        po viniči, aby si uvidel kam smeruje?
      courseB_artist_loops6_2018: Za kríkmi je nádherný vinič plný kvetov. Dokáźeš
        sa vyštverať po viniči, aby si uvidel kam smeruje?
      courseB_artist_loops6_2019: Za kríkmi je nádherný vinič plný kvetov. Dokáźeš
        sa vyštverať po viniči, aby si uvidel kam smeruje?
      courseB_artist_loops7: "**Výzva:** Toto je skrytá záhrada! Prejdime sa okolo."
      courseB_artist_loops7_2018: "**Výzva:** Toto je skrytá záhrada! Prejdime sa
        okolo."
      courseB_artist_loops7_2019: "**Výzva:** Toto je skrytá záhrada! Prejdime sa
        okolo."
      courseB_artist_loops8_2019: Je čas ísť domov. Môžeš opraviť tento rebrík s použitím
        iba jedného bloku, aby sa umelec dostal dolu?
      courseB_artist_loops9_2019: Poďme domov skratkou cez rybník. Pomôžeš umelcovi
        ostať na kameňoch?
      courseB_artist_loops_challenge1: _"Poďme hádzať kockami! Pomôžeš mi ich nakresliť?"_
      courseB_artist_loops_challenge1_2018: _"Poďme hádzať kockami! Pomôžeš mi ich
        nakresliť?"_
      courseB_artist_loops_challenge1_2019: _"Poďme hádzať kockami! Pomôžeš mi ich
        nakresliť?"_
      courseB_artist_loops_challenge2: Nakresli toľko X, koľko len dokážes. Dokážeš
        dostať 3 do jedného riadku?
      courseB_artist_loops_challenge2_2018: Nakresli toľko X, koľko len dokážes. Dokážeš
        dostať 3 do jedného riadku?
      courseB_artist_loops_challenge2_2019: Nakresli toľko X, koľko len dokážes. Dokážeš
        dostať 3 do jedného riadku?
      courseB_collector_loops1: "**Voľná hra.** Toto je dobrodružka Laurel! Posúvaj
        ju po ploche a pozbieraj toľko drahokamov, koľko len vieš. \n\nPresuň bloky
        na pracovnú plochu a zisti, ako sa dostať k drahokamom. Získaj aspoň jeden,
        aby si prešiel tento level."
      courseB_collector_loops10_2019: Pomôž Laurel pozbierať všetky drahokamy z tejto
        jaskyne.
      courseB_collector_loops11_2019: Heuréka! Pozbieraj toľko drahokamov, koľko dokážeš!
      courseB_collector_loops1_2018: "**Voľná hra:** Pohybuj Laurel po hracej ploche
        a pozbieraj toľko drahokamov, koľko zvládneš. Na splnenie úlohy musíš zobrať
        aspoň jeden.  \n\n* * *\n\nPresuň bloky na pracovnú plochu a skús prísť na
        to, ako drahokamy pozbierať.  "
      courseB_collector_loops1_2019: "**Voľná hra:** Pohybuj Laurel po hracej ploche
        a pozbieraj toľko drahokamov, koľko zvládneš. Na splnenie úlohy musíš zobrať
        aspoň jeden.  \n\n* * *\n\nPresuň bloky na pracovnú plochu a skús prísť na
        to, ako drahokamy pozbierať.  "
      courseB_collector_loops2: |-
        Posuň Laurel k drahokamu a potom použi blok <xml><block type="collector_collect"/></xml> na jeho pozbieranie.

        Pozbieraj všetky štyri kôpky, aby si prešiel tento level.
      courseB_collector_loops2_2018: |-
        Posuň Laurel k drahokamu a potom použi blok <xml><block type="collector_collect"/></xml> na jeho pozbieranie.

        Pozbieraj všetky štyri kôpky, aby si prešiel tento level.
      courseB_collector_loops2_2019: |-
        Posuň Laurel k drahokamu a potom použi blok <xml><block type="collector_collect"/></xml> na jeho pozbieranie.

        Pozbieraj všetky štyri kôpky, aby si prešiel tento level.
      courseB_collector_loops3: Ako môze Laurel pozbierať všetkých päť kôp drahokamov
        s použitím iba jedného bloku <xml><block type="maze_moveEast"/></xml>?
      courseB_collector_loops3_2018: Ako môze Laurel pozbierať všetkých päť kôp drahokamov
        s použitím iba jedného bloku <xml><block type="maze_moveEast"/></xml>?
      courseB_collector_loops3_2019: Ako môze Laurel pozbierať všetkých päť kôp drahokamov
        s použitím iba jedného bloku <xml><block type="maze_moveEast"/></xml>?
      courseB_collector_loops4_2019: Oprav Laurelinu cestu, aby pozbierala všetky
        drahokamy!
      courseB_collector_loops5_2019: 'Pridaj ďalšie príkazy ku kódu z predošlej úlohy
        a pozbieraj všetky poklady. '
      courseB_collector_loops6_2019: Vymysli kód, ktorý pomôže Laurel pozbierať všetky
        drahokamy!
      courseB_collector_loops7_2019: Napíš kód na pozbieranie všetkých týchto drahokamov.
      courseB_collector_loops8_2019: "**Výzva:** Drahokamy sú na týchto schodoch!
        Napíš kód, ktorý pomôže Laurel všetky pozbierať."
      courseB_collector_loops9_2019: _"Pomôž mi pozbierať drahokamy z tohto hlbokého
        údolia."_
      courseB_collector_loops_challenge1_2019: 'Tentokrát máš obmedzený počet blokov.
        Pozbieraj všetky drahokamy! '
      courseB_collector_loops_challenge2a: |-
        _"Poďme zbierať drahokamy!"_

        Pomôž Laurel pozbierať aspoň **5** drahokamov, aby si dokončil túto úlohu.
      courseB_collector_loops_challenge2a_2018: |-
        _"Poďme zbierať drahokamy!"_

        Pomôž Laurel pozbierať aspoň **5** drahokamov, aby si dokončil túto úlohu.
      courseB_collector_loops_challenge2a_2019: |-
        _"Poďme zbierať drahokamy!"_

        Pomôž Laurel pozbierať aspoň **5** drahokamov, aby si dokončil túto úlohu.
      courseB_iceage_loops1: Pomôž Scratovi prejsť po šmykľavom ľade až k žaluďu!
      courseB_iceage_loops10: Pomôž Scratovi prejsť celú cestu až k vytúženému žaluďu!
      courseB_iceage_loops10_2019: Pomôž Scratovi prejsť celú cestu až k vytúženému
        žaluďu!
      courseB_iceage_loops11: Pomôž Scratovi dostať sa k žaluďu!
      courseB_iceage_loops11_2019: Pomôž Scratovi dostať sa k žaluďu!
      courseB_iceage_loops12: Dostaň sa k žaluďu ľubovoľným spôsobom!
      courseB_iceage_loops12_2019: Dostaň sa k žaluďu ľubovoľným spôsobom!
      courseB_iceage_loops1_2019: Pomôž Scratovi prejsť po šmykľavom ľade až k žaluďu!
      courseB_iceage_loops2: Použi obidva bloky <xml><block type="maze_moveWest"/></xml>
        a <xml><block type="maze_moveSouth"/></xml>, aby si sa dostal k žaluďu!
      courseB_iceage_loops2_2019: Použi obidva bloky <xml><block type="maze_moveWest"/></xml>
        a <xml><block type="maze_moveSouth"/></xml>, aby si sa dostal k žaluďu!
      courseB_iceage_loops3: Dokážeš sa dostať k žaluďu s pomocou jediného bloku <xml><block
        type="maze_moveWest"/></xml>? Skús použiť cyklus!
      courseB_iceage_loops3_2019: Dokážeš sa dostať k žaluďu s pomocou jediného bloku
        <xml><block type="maze_moveWest"/></xml>? Skús použiť cyklus!
      courseB_iceage_loops4: Pridaj ešte jeden blok, aby sa Scrat dostal až k žaluďu!
      courseB_iceage_loops4_2019: Pridaj ešte jeden blok, aby sa Scrat dostal až k
        žaluďu!
      courseB_iceage_loops6: Vieš pridať jeden cyklus a dostať sa k žaluďu?
      courseB_iceage_loops6_2019: Vieš pridať jeden cyklus a dostať sa k žaluďu?
      courseB_iceage_loops7: Scrat naozaj chce ten žaluď!
      courseB_iceage_loops7_2019: Scrat naozaj chce ten žaluď!
      courseB_iceage_loops8: Dokážeš opraviť tento kód?
      courseB_iceage_loops8_2019: Dokážeš opraviť tento kód?
      courseB_iceage_loops9: Žaluď je tak ďaleko! Dokážeš použiť cykly a pomôcť Scratovi
        sa poň dostať?
      courseB_iceage_loops9_2019: Žaluď je tak ďaleko! Dokážeš použiť cykly a pomôcť
        Scratovi sa poň dostať?
      courseB_maze_seq10_2019: Oprav chyby, aby sa Scrat dostal k žaluďu.
      courseB_maze_seq11_2019: To si celý ty! Dostaň Scrata k žaluďu.
      courseB_maze_seq12_2019: A teraz získaj ten žaluď hocijakým spôsobom!
      courseB_maze_seq1_2019: |-
        Pohraj sa s týmito blokmi a zisti, čo robia so Scratom.
        Na dokončenie levelu dostaň Scrata k žaluďu.
      courseB_maze_seq3: _"Oprav kód nech sa dostanem k prasiatku!"_
      courseB_maze_seq4_2019: Použi **2** pohybové bloky, aby sa Scrat dostal k žaluďu.
      courseB_maze_seq5_2019: Táto úloha je trochu náročná!
      courseB_maze_seq6_2019: Pohni sa jedným smerom, potom iným, aby sa Scrat dostal
        k žaluďu!
      courseB_maze_seq7_2019: Zisti, čo tu chýba a potom pridaj bloky, aby sa Scrat
        dostal k žaluďu!
      courseB_maze_seq8_2019: Si na ťahu! Čo potrebuješ, aby sa Scrat dostal k žaluďu?
      courseB_maze_seq9: "**Challenge:** Move around the TNT to get the bird to the
        pig."
      courseB_maze_seq9_2018: "**Výzva:** Prejdi okolo rozbitého ľadu, aby sa Scrat
        dostal k žaluďu."
      courseB_maze_seq9_2019: "**Výzva:** Prejdi okolo rozbitého ľadu, aby sa Scrat
        dostal k žaluďu."
      courseB_maze_seq_challenge1: Máš iba štyri kusy z každého bloku. Dokážes nájsť
        cestu skôr, ako minieš všetky bloky?
      courseB_maze_seq_challenge1_2018: Máš iba štyri kusy z každého bloku. Dokážes
        nájsť cestu skôr, ako minieš všetky bloky?
      courseB_maze_seq_challenge1_2019: Máš iba štyri kusy z každého bloku. Dokážes
        nájsť cestu skôr, ako minieš všetky bloky?
      courseB_maze_seq_challenge2_2019: Analyzuj tento level. Toto sú tie správne
        bloky, ale sú v nesprávnom poradí!
      courseB_playLab_events1: "Táto hra sa volá \"Play Lab\". \n\nPozrime sa, či
        prídeš na to, čo každý blok robí."
      courseB_playLab_events1_2018: "Táto hra sa volá \"Play Lab\". \n\nPozrime sa,
        či prídeš na to, čo každý blok robí."
      courseB_playLab_events1_2019: "Táto hra sa volá \"Play Lab\". \n\nPozrime sa,
        či prídeš na to, čo každý blok robí."
      courseB_playlab_events2_2019: Prikáž dračici Daisy, aby povedala niečo, keď
        stlačíš "Spustiť".
      courseB_playlab_events3: Použi udalosť, aby Dračica Daisy zmenila náhodne ![](https://images.code.org/c365e065614fea592612264f33624c09-image-1475698889081.17.53.png)
        náladu , ked na ňu klikneš.
      courseB_playlab_events3_2018: Použi udalosť, aby Dračica Daisy zmenila náhodne
        ![](https://images.code.org/c365e065614fea592612264f33624c09-image-1475698889081.17.53.png)
        náladu , ked na ňu klikneš.
      courseB_playlab_events3_2019: Použi udalosť, aby Dračica Daisy zmenila náhodne
        ![](https://images.code.org/c365e065614fea592612264f33624c09-image-1475698889081.17.53.png)
        náladu , ked na ňu klikneš.
      courseB_playlab_events4: "Knight time!  \n\nAdd an event so that the knight
        moves toward the dragon when the left arrow is clicked."
      courseB_playlab_events4_2018: |-
        Doba rytierov! Dostaň draka, aby si dokončil tento level.

        Pridaj takú udalosť, že sa rytier pohne smerom k drakovi, keď stlačíš ľavú šípku.
      courseB_playlab_events4_2019: |-
        Doba rytierov! Dostaň draka, aby si dokončil tento level.

        Pridaj takú udalosť, že sa rytier pohne smerom k drakovi, keď stlačíš ľavú šípku.
      courseB_playlab_events5_2018: |-
        Teraz pridaj takú udalosť, vďaka ktorej rytier po stlačení pravej šípky utečie preč od draka..

        Na dokončenie úlohy pohni rytierom doprava.
      courseB_playlab_events5_2019: |-
        Teraz pridaj takú udalosť, vďaka ktorej rytier po stlačení pravej šípky utečie preč od draka..

        Na dokončenie úlohy pohni rytierom doprava.
      courseB_playlab_events6: |-
        Pomôž tvojmu rytierovi získať všetky vlajky!

        Aby si to spravil, tak budeš potebovať pridať udalosti, ktoré pomôžu rytierovi hýbať sa hore, dole, doľava a doprava.
      courseB_playlab_events6_2018: |-
        Pomôž tvojmu rytierovi získať všetky vlajky!

        Aby si to spravil, tak budeš potebovať pridať udalosti, ktoré pomôžu rytierovi hýbať sa hore, dole, doľava a doprava.
      courseB_playlab_events6_2019: |-
        Pomôž tvojmu rytierovi získať všetky vlajky!

        Aby si to spravil, tak budeš potebovať pridať udalosti, ktoré pomôžu rytierovi hýbať sa hore, dole, doľava a doprava.
      courseB_playlab_events7: "Make this game fun by setting the knight to vanish
        when he runs into the dragon on his way to get the flags! \n\nPlay a sound
        when they collide to make it feel more real.\n\nVisit all of the goals, then
        run into the dragon to pass the level."
      courseB_playlab_events7_2018: |-
        Sprav túto hru zábavnou pridaním týchto vecí!

        1.  Nastav rytiera, aby zmizol, keď narazí do draka.
        2.  Prehraj zvuk, keď sa zrazia, aby to znelo reálnejšie.

        * * *

        Na dokončenie úlohy prejdi cez všetky ciele a potom naraz do draka.
      courseB_playlab_events7_2019: |-
        Sprav túto hru zábavnou pridaním týchto vecí!

        1.  Nastav rytiera, aby zmizol, keď narazí do draka.
        2.  Prehraj zvuk, keď sa zrazia, aby to znelo reálnejšie.

        * * *

        Na dokončenie úlohy prejdi cez všetky ciele a potom naraz do draka.
      courseB_playlab_eventsFP_2019: "**Voľná zábava:** Použi svoju predstavivosť.
        Ako možěs spraviť túto hru viac zábavnou?"
      courseB_playlab_events_challenge1: "Je čas na Veľké Zvieracie Preteky! Prikáž
        zviaratám hýbať sa dole vždy, keď stlačíš `▼`. \n\nKto bude najrýchlejší?"
      courseB_playlab_events_challenge1_2018: "Je čas na Veľké Zvieracie Preteky!
        Prikáž zviaratám hýbať sa dole vždy, keď stlačíš `▼`. \n\nKto bude najrýchlejší?"
      courseB_playlab_events_challenge1_2019: "Je čas na Veľké Zvieracie Preteky!
        Prikáž zviaratám hýbať sa dole vždy, keď stlačíš `▼`. \n\nKto bude najrýchlejší?"
      courseB_playlab_events_challenge2: |-
        Nechajme zvieratá zmiznúť, keď na ne klikneš.
        Najprv sa skús pohrať so psom, potom pomôž ostatným zvieratám, aby sa pridali. Môžeš pridať aj zvuky a pripočítavať body do skóre, čím vytvoríš hru Zvieracia naháňačka!

         ![](https://images.code.org/d48437a0b08be90110541e0ef21076e0-image-1497907722000.gif)
      courseB_playlab_events_challenge2_2018: |-
        Nechajme zvieratá zmiznúť, keď na ne klikneš.
        Najprv sa skús pohrať so psom, potom pomôž ostatným zvieratám, aby sa pridali. Môžeš pridať aj zvuky a pripočítavať body do skóre, čím vytvoríš hru Zvieracia naháňačka!

         ![](https://images.code.org/d48437a0b08be90110541e0ef21076e0-image-1497907722000.gif)
      courseB_playlab_events_challenge2_2019: |-
        Nechajme zvieratá zmiznúť, keď na ne klikneš.
        Najprv sa skús pohrať so psom, potom pomôž ostatným zvieratám, aby sa pridali. Môžeš pridať aj zvuky a pripočítavať body do skóre, čím vytvoríš hru Zvieracia naháňačka!

         ![](https://images.code.org/d48437a0b08be90110541e0ef21076e0-image-1497907722000.gif)
      courseB_starWars_prog1: |-
        ![Rey](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)_"Choď pozbierať kusy kovu, BB-8!"_

        Dávaj pozor na múry a debničky. Kus kovu vyzerá takto: ![picture of scrap metal](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)
      courseB_starWars_prog10: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Dokážeš to všetko pozbierať?"_'
      courseB_starWars_prog10_2018: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Dokážeš to všetko pozbierať?"_'
      courseB_starWars_prog10_2019: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Dokážeš to všetko pozbierať?"_'
      courseB_starWars_prog11: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Pokračuj!"_'
      courseB_starWars_prog11_2018: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Pokračuj!"_'
      courseB_starWars_prog11_2019: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Pokračuj!"_'
      courseB_starWars_prog1_2018: |-
        ![Rey](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)_"Choď pozbierať kusy kovu, BB-8!"_

        Dávaj pozor na múry a debničky. Kus kovu vyzerá takto: ![picture of scrap metal](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)
      courseB_starWars_prog1_2019: |-
        ![Rey](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)_"Choď pozbierať kusy kovu, BB-8!"_

        Dávaj pozor na múry a debničky. Kus kovu vyzerá takto: ![picture of scrap metal](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)
      courseB_starWars_prog2: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Pozbieraj všetok kov."_'
      courseB_starWars_prog2_2018: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Pozbieraj všetok kov."_'
      courseB_starWars_prog2_2019: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Pozbieraj všetok kov."_'
      courseB_starWars_prog3: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Pokračuj BB-8!"_'
      courseB_starWars_prog3_2018: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Pokračuj BB-8!"_'
      courseB_starWars_prog3_2019: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Pokračuj BB-8!"_'
      courseB_starWars_prog4: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Pozbieraj to, BB-8!"_'
      courseB_starWars_prog4_2018: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Pozbieraj to, BB-8!"_'
      courseB_starWars_prog4_2019: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Pozbieraj to, BB-8!"_'
      courseB_starWars_prog5: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Dokážeš to všetko pozbierať?"_'
      courseB_starWars_prog5_2018: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Dokážeš to všetko pozbierať?"_'
      courseB_starWars_prog5_2019: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Dokážeš to všetko pozbierať?"_'
      courseB_starWars_prog6: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Ty to dokážeš!"_'
      courseB_starWars_prog6_2018: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Ty to dokážeš!"_'
      courseB_starWars_prog6_2019: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Ty to dokážeš!"_'
      courseB_starWars_prog7: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Choď to pozbierať!"_'
      courseB_starWars_prog7_2018: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Choď to pozbierať!"_'
      courseB_starWars_prog7_2019: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Choď to pozbierať!"_'
      courseB_starWars_prog8: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Zotrvaj v tom, BB-8."_

        **Výzva**: Pozbieraj všetky kusy kovu.
      courseB_starWars_prog8_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Zotrvaj v tom, BB-8."_

        **Výzva**: Pozbieraj všetky kusy kovu.
      courseB_starWars_prog8_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Zotrvaj v tom, BB-8."_

        **Výzva**: Pozbieraj všetky kusy kovu.
      courseB_starWars_prog9: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Ty to dokážeš!"_'
      courseB_starWars_prog9_2018: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Ty to dokážeš!"_'
      courseB_starWars_prog9_2019: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Ty to dokážeš!"_'
      courseC19_playLab_EOC1: |-
        It is amazing how much you have learned! Let's make a game step by step.

        Using new blocks in your toolbox, choose a new background, then pick an actor to be in your game.
      courseC19_playLab_EOC2: "Použi bloky ako udalosti a akcie, aby si hráčom mohol
        hýbať pomocou šípok. \n\n Úlohu dokončíš posunutím hráča ku všetkým terčom."
      courseC19_playLab_EOC3: |-
        Let's add some more characters to your game!

        Use the `set actor` block to add more characters then move to the goal to complete this puzzle.
      courseC19_playLab_EOC4: |-
        Viacero postáv, ktoré sa hýbu je dobrý začiatok na vytvorenie hry. Potrebujeme ešte niečo pridať, aby sa to viac podobalo na ozajstnú hru. Pridajme skóre!

        Použi bloky s udalosťami ako napríklad 'keď sa postava dotkne', aby si ovplyvnil skóre alebo vyhral. Nazbieraj 5 bodov alebo vyhraj, aby si vyriešil túto úlohu.
      courseC19_playLab_EOC5: Skvelá práca! Máš všetky základné časti fungujúcej hry.
        Teraz si skontroluj, či hra funguje presne tak, ako chceš. A nakoniec klikni
        na "Dokončiť"!
      courseC19_playLab_EOC6: You've finished! Now you can play your game or share
        it with your friends and classmates!
      courseC_PlayLab_events6_2019: Napíš program na pohyb tučniaka Waddles použitím
        kláves hore / dole / doľava / doprava tak, aby zasiahol všetky ciele.
      courseC_PlayLab_events7: "Blok \"opakuj donekonečna\" púšťa kód znova a znova
        donekonečna. Použi tento blok, aby si donekonečna hýbal s Dinosaurom (postava
        2) hore a dole o 400 pixelov. \n\n![](https://images.code.org/0cbe6dd5f4e2251e3f121dbabc0cc19d-image-1523040103822.com-resize.gif)"
      courseC_PlayLab_events7_2018: "Blok \"opakuj donekonečna\" púšťa kód znova a
        znova donekonečna. Použi tento blok, aby si donekonečna hýbal s Dinosaurom
        (postava 2) hore a dole o 400 pixelov. \n\n![](https://images.code.org/0cbe6dd5f4e2251e3f121dbabc0cc19d-image-1523040103822.com-resize.gif)"
      courseC_PlayLab_events7_2019: "Blok \"opakuj donekonečna\" púšťa kód znova a
        znova donekonečna. Použi tento blok, aby si donekonečna hýbal s Dinosaurom
        (postava 2) hore a dole o 400 pixelov. \n\n![](https://images.code.org/0cbe6dd5f4e2251e3f121dbabc0cc19d-image-1523040103822.com-resize.gif)"
      courseC_PlayLab_events8: "Sprav to tak, aby Waddles (postava 1) povedal \"Au!\"
        a prehral zvuk \"úderu\" ak narazí do dinosaura. \n\nKeď budeš mať hotovo,
        zahraj sa a uvidíš či to funguje.\n\n![](https://images.code.org/a634f249021651f60a1acf37bf78d07d-image-1475342557950.gif)"
      courseC_PlayLab_events8_2018: "Sprav to tak, aby Waddles (postava 1) povedal
        \"Au!\" a prehral zvuk \"úderu\" ak narazí do dinosaura. \n\nKeď budeš mať
        hotovo, zahraj sa a uvidíš či to funguje.\n\n![](https://images.code.org/a634f249021651f60a1acf37bf78d07d-image-1475342557950.gif)"
      courseC_PlayLab_events8_2019: "Sprav to tak, aby Waddles (postava 1) povedal
        \"Au!\" a prehral zvuk \"úderu\" ak narazí do dinosaura. \n\nKeď budeš mať
        hotovo, zahraj sa a uvidíš či to funguje.\n\n![](https://images.code.org/a634f249021651f60a1acf37bf78d07d-image-1475342557950.gif)"
      courseC_PlayLab_eventsA_embed_2019: Poďme sa hrať. Získaj 5 bodov, narážím tučniaka
        do chobotnice!
      courseC_PlayLab_events_challenge1: |-
        Použi nový blok na to, aby sa tučniak Waddles vrátil späť na začiatok vždy, keď narazí do dinosaura a keď získa bod. Tvoja hra tak bude náročnejšia a zábavnejšia.

        Zahraj si a posúvaj Waddlesa šípkami, až kým nezískaš dostatok bodov. Na ukončenie úlohy musíš tučniaka posunúť do `stredo-ľavej` časti obrazovky.
      courseC_PlayLab_events_challenge1_2018: |-
        Použi nový blok na to, aby sa tučniak Waddles vrátil späť na začiatok vždy, keď narazí do dinosaura a keď získa bod. Tvoja hra tak bude náročnejšia a zábavnejšia.

        Zahraj si a posúvaj Waddlesa šípkami, až kým nezískaš 5 alebo viac bodov. Na ukončenie úlohy musíš tučniaka posunúť do `stredo-ľavej` časti obrazovky.
      courseC_PlayLab_events_challenge1_2019: |-
        Použi nový blok na to, aby sa tučniak Waddles vrátil späť na začiatok vždy, keď narazí do dinosaura a keď získa bod. Tvoja hra tak bude náročnejšia a zábavnejšia.

        Zahraj si a posúvaj Waddlesa šípkami, až kým nezískaš 5 alebo viac bodov. Na ukončenie úlohy musíš tučniaka posunúť do `stredo-ľavej` časti obrazovky.
      courseC_artist_loop1: "Skvelé! \n\nDodajme tomu viac štýlu! Použi blok 'nastav
        vzor' predtým ako začne opakovanie."
      courseC_artist_loop1_2018: "_\"Skvelé!\"_ \n\nDodajme tomu viac štýlu! Zmeň
        štetecpoužitím bloku <xml><block type=\"draw_line_style_pattern\"> <title
        name=\"VALUE\">DEFAULT</title></block></xml> predtým ako začne opakovanie."
      courseC_artist_loop1_2019: "_\"Skvelé!\"_ \n\nDodajme tomu viac štýlu! Zmeň
        štetecpoužitím bloku <xml><block type=\"draw_line_style_pattern\"> <title
        name=\"VALUE\">DEFAULT</title></block></xml> predtým ako začne opakovanie."
      courseC_artist_loops1a: "**Voľná hra:** Postavme niečo väčšie, krok po kroku!
        \ Môžeš nakresliť, čo len chceš, ale my ti ukážeme, ako vytvoriť niečo takéto:\n\n![expandable](https://images.code.org/5b67ed8d878d6c2a5009eee054427fd5-image-1496711253365.05.35.png)\n\nPouži
        blok  `jump to 200 over 200 down`, aby si Umelca dostal do stredu hracej plochy
        a potom použi blok `použi nálepku`.  \n\n* * *\n\nKeď budeš spokojný so svojím
        výtvorom, stlač \"Dokončiť\"."
      courseC_artist_loops1a_2018: "**Voľná hra:** Postavme niečo väčšie, krok po
        kroku!\n\nPouži blok  `jump to 200 over 200 down`, aby si Umelca dostal do
        stredu hracej plochy a potom použi blok `použi nálepku`.  \n\n* * *\n\nKeď
        budeš spokojný so svojím výtvorom, stlač \"Dokončiť\"."
      courseC_artist_loops1a_2019: "**Voľná hra:** Postavme niečo väčšie, krok po
        kroku!\n\nPouži blok  `jump to 200 over 200 down`, aby si Umelca dostal do
        stredu hracej plochy a potom použi blok `použi nálepku`.  \n\n* * *\n\nKeď
        budeš spokojný so svojím výtvorom, stlač \"Dokončiť\"."
      courseC_artist_loops1b_2019: "Zmeň smer svojej nálepky pridaním bloku `otoč
        sa` do tvojho kódu. \n\n* * *\n\nStlač \"Dokončiť\" keď budeš spokojný so
        svojím výtvorom.\n\n![expandable](https://images.code.org/30fe9d37758abd27055d9a6e5a890680-image-1553097358155.png)\n![expandable](https://images.code.org/61feed00662019b99ac774322231f084-image-1553097362176.png)\n![expandable](https://images.code.org/fd123bb703ea4c630218a12eb5994053-image-1553097354066.png)"
      courseC_artist_loops2a: Teraz použi opakovanie, aby sa tvoj vtáčik otočil dokola
        12 krát pod 30 stupňovým uhlom.
      courseC_artist_loops2a_2018: Teraz použi opakovanie, aby sa tvoj vtáčik otočil
        dokola 12 krát pod 30 stupňovým uhlom.
      courseC_artist_loops2a_2019: |-
        Teraz, pomocou opakovania vytvor viac kópii tvojej nálepky. Skúste zmeniť čísla v blokoch `otoč sa` a `opakuj` , aby si vytvoril rôzne vzory.

        * * *

        Stlač "Dokončiť" keď budeš spokojný s výsledkom.

        ![expandable](https://images.code.org/8b4352a1abe72419043d278752261b57-image-1553097917337.png)
        ![expandable](https://images.code.org/5211e2fe2852e25a884a790155ba47d5-image-1553097923167.png)
        ![expandable](https://images.code.org/0e3fbe8bbd20526cc735dfd26d2473ee-image-1553097925789.png)
      courseC_artist_loops3a: "Toľko zábavy!  \n\nTeraz pridaj nálepku netopiera hneď
        po vtáčikovi, aby si vyrobil obrázok ako ten dole.\n\n* * *\n\n![expandable](https://images.code.org/3aa37f679eabc7a5a337291db614dd98-image-1496711069351.03.49.png)"
      courseC_artist_loops3a_2018: "Toľko zábavy!  \n\nTeraz pridaj nálepku netopiera
        hneď po vtáčikovi, aby si vyrobil obrázok ako ten dole.\n\n* * *\n\n![expandable](https://images.code.org/3aa37f679eabc7a5a337291db614dd98-image-1496711069351.03.49.png)"
      courseC_artist_loops3a_2019: "Toľko zábavy!  \n\nTeraz pridaj aj druhú nálepku
        navrch tej prvej, aby si vytvoril obrázok podobný tým dole.\n\n* * *\n\nStlač
        \"Dokončiť\" keď budeš spokojný so svojím výtvorom.\n\n![expandable](https://images.code.org/3aa37f679eabc7a5a337291db614dd98-image-1496711069351.03.49.png)\n![expandable](https://images.code.org/dd0e0eee69d37493c5ba584164316a9f-image-1553098351969.png)\n![expandable](https://images.code.org/880908899d8e6ceac8a8ce1bd0bf47eb-image-1553098355311.png)"
      courseC_artist_loops4a: |-
        Pridaj k svojmu kódu blok, ktorý posunie umelca dopredu o 75 pixelov medzi pečiatkovaním netopiera a vtáčika. Uisti sa, že v tejto úlohe použiješ blok `skoč k/na 200 cez 200 dole` vo vnútri svojho cyklu, tak aby si zostal v strede!

        * * *

        ![expandable](https://images.code.org/5b67ed8d878d6c2a5009eee054427fd5-image-1496711253365.05.35.png)
      courseC_artist_loops4a_2018: |-
        Uprav svoj kód, aby si posunul umelca dopredu o 75 pixelov medzi pečiatkovaním netopiera a vtáčika. Uisti sa, že v tejto úlohe použiješ blok `skoč k/na 200 cez 200 dole` vo vnútri svojho cyklu, tak aby si zostal v strede!

        * * *

        ![expandable](https://images.code.org/5b67ed8d878d6c2a5009eee054427fd5-image-1496711253365.05.35.png)
      courseC_artist_loops4a_2019: |-
        Uprav svoj kód tak, že sa posunieš dopredu po každom opečiatkovaní. Uisti sa, že v tejto úlohe použiješ blok `skoč na pozíciu v strede do stredu` vo vnútri svojho cyklu, tak aby si zostal v strede!

        * * *

        Stlač "Dokončiť" , keď budeš spokojný s tým čo si vytvoril.

        ![expandable](https://images.code.org/5b67ed8d878d6c2a5009eee054427fd5-image-1496711253365.05.35.png)
        ![expandable](https://images.code.org/5774170704916cfddcf2e98c2c01d718-image-1553099207939.png)
        ![expandable](https://images.code.org/9b016314df4aed5165c76282bab0cea1-image-1553099212229.png)
        ![expandable](https://images.code.org/2cf50b8e9ae75803f15908304c22a10b-image-1553099215987.png)
      courseC_artist_loops5a: |-
        Čo sa stane ak nahradíš jednu alebo aj obe nálepky inými stvoreniami?

        * * *

        ![expandable](https://images.code.org/cadb5e244db64a781bc02b55f2e7ccca-image-1496711397989.08.28.png)
      courseC_artist_loops5a_2018: |-
        Čo sa stane ak nahradíš jednu alebo aj obe nálepky inými stvoreniami?

        * * *

        ![expandable](https://images.code.org/cadb5e244db64a781bc02b55f2e7ccca-image-1496711397989.08.28.png)
      courseC_artist_loops5a_2019: |-
        Čo sa stane ak nahradíš jednu alebo aj obe nálepky inými stvoreniami?

        * * *

        ![expandable](https://images.code.org/cadb5e244db64a781bc02b55f2e7ccca-image-1496711397989.08.28.png)
      courseC_artist_loops5b: "Čo sa stane keď stlačíš `posuň sa dopredu` a potom
        `posuň sa dozadu` o 100, 200 alebo 400 pixelov, niekde vo vnútri cyklu?  \n\n-
        \  Skús použiť blok `nastav vzor`predtým ako tvoj cyklus začne a vytvoríš
        umelecké dielo!\n    * * *\n    ![expandable](https://images.code.org/d523de02389fd23db3029327c03b727d-image-1497039953252.24.18.png)"
      courseC_artist_loops5b_2018: "Čo sa stane keď stlačíš `posuň sa dopredu` a potom
        `posuň sa dozadu` o 100, 200 alebo 400 pixelov, niekde vo vnútri cyklu?  \n\n-
        \  Skús použiť blok `nastav vzor`predtým ako tvoj cyklus začne a vytvoríš
        umelecké dielo!\n    * * *\n    ![expandable](https://images.code.org/d523de02389fd23db3029327c03b727d-image-1497039953252.24.18.png)"
      courseC_artist_loops5b_2019: "Čo sa stane keď stlačíš `posuň sa dopredu` a potom
        `posuň sa dozadu` o 100, 200 alebo 400 pixelov, niekde vo vnútri cyklu?  \n\n-
        \  Skús použiť blok `nastav vzor`predtým ako tvoj cyklus začne a vytvoríš
        umelecké dielo!\n\n* * *\n\n![expandable](https://images.code.org/d523de02389fd23db3029327c03b727d-image-1497039953252.24.18.png)\n![expandable](https://images.code.org/55285e9e5c5ae1cf1c895cc0bf92824d-image-1553100970790.png)\n![expandable](https://images.code.org/6b8e67db2a3b341bc56fa53f67c284c2-image-1553100974645.png)"
      courseC_artist_loops6a: |-
        Pridaj aj tretiu nálepku, kdekoľvek v cykle chceš! Ako to teraz vyzerá?

        -   Ak to cheš mať pestrejšie, nastav si iný vzor!

        * * *

        ![expandable](https://images.code.org/b0f999ef4b9ab6bd9780e9fbac07dc8d-image-1497040845047.39.55.png)
      courseC_artist_loops6a_2018: |-
        Pridaj aj tretiu nálepku, kdekoľvek v cykle chceš! Ako to teraz vyzerá?

        -   Ak to cheš mať pestrejšie, nastav si iný vzor!

        * * *

        ![expandable](https://images.code.org/b0f999ef4b9ab6bd9780e9fbac07dc8d-image-1497040845047.39.55.png)
      courseC_artist_loops6a_2019: |-
        Add a third sticker anywhere in the loop that you want! What does it look like now?

        -   Change the pattern on your brush for more variety!

        * * *

        ![expandable](https://images.code.org/edc53f27379e018e61a6ab9dcc2717ea-image-1560984648573.png)
        ![expandable](https://images.code.org/c41b00a743f245f98d2cfb66cb18e771-image-1560984690182.png)
        ![expandable](https://images.code.org/4c8910f72a7f0cd81713ded7b866a883-image-1560984706203.png)
      courseC_artist_loops7a: |-
        Vyskúšaj zmeniť cyklus `opakovať`, aby sa spustil rozdielny počet krát. Ako veľmi sa musíš otočiť, aby si skončil tam, kde si začal, teda prešiel plný kruh?

        -   Vyskúšaj zmeniť to, koľko krát sa otočíš
        -   Vyskúšaj sa otočiť 6 krát o 60 stupňov
        -   Vyskúšaj sa otočiť 18 krát o 20 stupňov

        * * *

        Tento obrázok potrebuje piráta, nindžu a žirafu. Cyklus sa opakuje 18 krát s 20 stupňovými otočeniami.

        ![expandable](https://images.code.org/99411638acb44e8a7ba5b9696fe11fa4-image-1496714175039.53.24.png)
      courseC_artist_loops7a_2018: |-
        Vyskúšaj zmeniť cyklus `opakovať`, aby sa spustil rozdielny počet krát. Ako veľmi sa musíš otočiť, aby si skončil tam, kde si začal, teda prešiel plný kruh?

        -   Vyskúšaj zmeniť to, koľko krát sa otočíš
        -   Vyskúšaj sa otočiť 6 krát o 60 stupňov
        -   Vyskúšaj sa otočiť 18 krát o 20 stupňov

        * * *

        Tento obrázok potrebuje piráta, nindžu a žirafu. Cyklus sa opakuje 18 krát s 20 stupňovými otočeniami.

        ![expandable](https://images.code.org/99411638acb44e8a7ba5b9696fe11fa4-image-1496714175039.53.24.png)
      courseC_artist_loops7a_2019: |-
        Try changing the `repeat` loop to run a different number of times.  How far do you have to turn to go around in a full circle?

        -   Try changing how many times you spin
            -   Try a 60 degree turn for 6 times around
            -   Try a 20 degree turn for 18 times around

        * * *

        The first image uses a pirate, a ninja, and a giraffe. They loop 18 times with a 20 degree turn.

        ![expandable](https://images.code.org/99411638acb44e8a7ba5b9696fe11fa4-image-1496714175039.53.24.png)
        ![expandable](https://images.code.org/9f28cb9b434b914846c3846bc6652f66-image-1560982666379.png)
        ![expandable](https://images.code.org/e9128684956504b0172708d63b65f93a-image-1560982686482.png)
        ![expandable](https://images.code.org/8e9cf52ecaf72678c65558f18f3e0d3e-image-1560982695632.png)
      courseC_artist_loops8a: |-
        Teraz vytvor niečo vlastné.  Čo sa stane, keď vytvoríš dva samostatné kruhy z rozdielnych nálepiek?

        * * *

        Potrebuješ inšpiráciu? Skús vytvoriť vzor ako je tento.

        ![expandable](https://images.code.org/d8e0ad6294aa5e04e4aab56631a6b50b-image-1496714582863.02.14.png)
      courseC_artist_loops8a_2018: |-
        Teraz vytvor niečo vlastné.  Čo sa stane, keď vytvoríš dva samostatné kruhy z rozdielnych nálepiek?

        * * *

        Potrebuješ inšpiráciu? Skús vytvoriť vzor ako je tento.

        ![expandable](https://images.code.org/d8e0ad6294aa5e04e4aab56631a6b50b-image-1496714582863.02.14.png)
      courseC_artist_loops8a_2019: |-
        Teraz vytvor niečo vlastné.  Čo sa stane, keď vytvoríš dva samostatné kruhy z rozdielnych nálepiek?

        * * *

        Potrebuješ inšpiráciu? Skús vytvoriť vzor ako je tento.

        ![expandable](https://images.code.org/d8e0ad6294aa5e04e4aab56631a6b50b-image-1496714582863.02.14.png)
      courseC_artist_loopsPre1a: |-
        Teraz vlož tento kód do opakovacieho bloku a nastav ho na **6** opakovaní.

        -   Všimni si, že na koniec cyklu sme pridali otočenie o 60 stupňov, vďaka čomu  pri 6 opakovaniach urobíme kompletnú otočku.
      courseC_artist_loopsPre1a_2018: |-
        Teraz vlož tento kód do opakovacieho bloku a nastav ho na **6** opakovaní.

        -   Všimni si, že na koniec cyklu sme pridali otočenie o 60 stupňov, vďaka čomu  pri 6 opakovaniach urobíme kompletnú otočku.
      courseC_artist_loopsPre1a_2019: |-
        Teraz vlož tento kód do opakovacieho bloku a nastav ho na **6** opakovaní.

        -   Všimni si, že na koniec cyklu sme pridali otočenie o 60 stupňov, vďaka čomu  pri 6 opakovaniach urobíme kompletnú otočku.
      courseC_artist_loopsPrePre1a: |-
        Použi blok <xml><block type="jump_to_xy" id="callMe"><title name="XPOS">200</title><title name="YPOS">200</title></block></xml> aby sa umelec dostal do stredu.\
        Potom nakresli 50 pixelovú čiaru s blokom <xml><block type="draw_move_by_constant"><title name="DIR">moveForward</title><title name="VALUE">50</title></block></xml>.
      courseC_artist_loopsPrePre1a_2018: |-
        ### Umelec je na zlom mieste!

        Použi blok <xml><block type="jump_to_xy" id="callMe"><title name="XPOS">200</title><title name="YPOS">200</title></block></xml> aby sa umelec dostal do stredu.\
        Potom nakresli 50 pixelovú čiaru s blokom <xml><block type="draw_move_by_constant"><title name="DIR">moveForward</title><title name="VALUE">50</title></block></xml>.
      courseC_artist_loopsPrePre1a_2019: |-
        ### Umelec je na zlom mieste!

        Použi blok <xml><block type="jump_to_xy" id="callMe"><title name="XPOS">200</title><title name="YPOS">200</title></block></xml> aby sa umelec dostal do stredu.\
        Potom nakresli 50 pixelovú čiaru s blokom <xml><block type="draw_move_by_constant"><title name="DIR">moveForward</title><title name="VALUE">50</title></block></xml>.
      courseC_artist_prog1: |-
        _"Ahoj, ja som umelec. Pomocou kódu dokážem nakresliť takmer všetko."_

        Pohraj sa s blokmi z panela nástrojov a zisti, čo dokážu!
      courseC_artist_prog1_2018: |-
        _"Ahoj, ja som umelec. Pomocou kódu dokážem nakresliť takmer všetko."_

        Pohraj sa s blokmi z panela nástrojov a zisti, čo dokážu!
      courseC_artist_prog1_2019: |-
        _"Ahoj, ja som umelec. Pomocou kódu dokážem nakresliť takmer všetko."_

        Pohraj sa s blokmi z panela nástrojov a zisti, čo dokážu!
      courseC_artist_prog2: |-
        _"Vytvorme klietku pre moju príšerku!"_

        Presuň bloky na pracovnú plochu a pomocou umelca prekresli sivé čiary na obrázku. (Každá z čiar má 100 pixelov)
      courseC_artist_prog2_2018: |-
        _"Vytvorme klietku pre moju príšerku!"_

        Presuň bloky na pracovnú plochu a pomocou umelca prekresli sivé čiary na obrázku. (Každá z čiar má 100 pixelov)
      courseC_artist_prog2_2019: |-
        _"Vytvorme klietku pre moju príšerku!"_

        Presuň bloky na pracovnú plochu a pomocou umelca prekresli sivé čiary na obrázku. (Každá z čiar má 100 pixelov)
      courseC_artist_prog3: |-
        _"Táto raketa potrebuje okno!"_

        Strana vnútorného štvorca je dlhá 100 pixelov a všetky uhly majú 90 stupňov.
      courseC_artist_prog3_2018: |-
        _"Táto raketa potrebuje okno!"_

        Strana vnútorného štvorca je dlhá 100 pixelov a všetky uhly majú 90 stupňov.
      courseC_artist_prog3_2019: |-
        _"Táto raketa potrebuje okno!"_

        Strana vnútorného štvorca je dlhá 100 pixelov a všetky uhly majú 90 stupňov.
      courseC_artist_prog4: |-
        _"Och, nie! Starlin mimozemšťan práve ušiel! Pomôžme tejto astronautke!"_

        Dokonči Starlinu raketu, aby mohla dobehnúť svojho mimozemšťana.
        (Každá strana trojuholníka má 100 pixelov a vonkajší uhol 120 stupňov.)
      courseC_artist_prog4_2018: |-
        _"Och, nie! Starlin mimozemšťan práve ušiel! Pomôžme tejto astronautke!"_

        Dokonči Starlinu raketu, aby mohla dobehnúť svojho mimozemšťana.
        (Každá strana trojuholníka má 100 pixelov a vonkajší uhol 120 stupňov.)
      courseC_artist_prog4_2019: |-
        _"Och, nie! Starlin mimozemšťan práve ušiel! Pomôžme tejto astronautke!"_

        Dokonči Starlinu raketu, aby mohla dobehnúť svojho mimozemšťana.
        (Každá strana trojuholníka má 100 pixelov a vonkajší uhol 120 stupňov.)
      courseC_artist_prog5: "_\"Možno by sme mali vyrobiť ceduľku pre každé z našich
        zvieratiek, ak by sa náhodou stratili!\"_\n\nDokonči túto ceduľku tak, že
        po jej obvode nakreslíš obĺžnik. \n(Dlhá strana má 200 pixelov a krátka strana
        má 100 pixelov)"
      courseC_artist_prog5_2018: "_\"Možno by sme mali vyrobiť ceduľku pre každé z
        našich zvieratiek, ak by sa náhodou stratili!\"_\n\nDokonči túto ceduľku tak,
        že po jej obvode nakreslíš obĺžnik. \n(Dlhá strana má 200 pixelov a krátka
        strana má 100 pixelov)"
      courseC_artist_prog5_2019: "_\"Možno by sme mali vyrobiť ceduľku pre každé z
        našich zvieratiek, ak by sa náhodou stratili!\"_\n\nDokonči túto ceduľku tak,
        že po jej obvode nakreslíš obĺžnik. \n(Dlhá strana má 200 pixelov a krátka
        strana má 100 pixelov)"
      courseC_artist_prog6: |-
        _"Teraz ceduľka pre Belle!"_

        Nakresli tento diamant so stranami dlhými 200 pixelov.
      courseC_artist_prog6_2018: |-
        _"Teraz ceduľka pre Belle!"_

        Nakresli tento štvorec so stranou dlhou 200 pixelov.
      courseC_artist_prog6_2019: |-
        _"Teraz ceduľka pre Belle!"_

        Nakresli tento štvorec so stranou dlhou 200 pixelov.
      courseC_artist_prog7: "**Výzva.** Toto je špeciálna ceduľka! \n\nDokážeš prísť
        nato ako nakresliť jej obrys? \n(Dlhá strana má 150 pixelov a krátka strana
        má 75 pixelov.)"
      courseC_artist_prog7_2018: "**Výzva.** Toto je špeciálna ceduľka! \n\nDokážeš
        prísť nato ako nakresliť jej obrys? \n(Dlhá strana má 150 pixelov a krátka
        strana má 75 pixelov.)"
      courseC_artist_prog7_2019: "**Výzva.** Toto je špeciálna ceduľka! \n\nDokážeš
        prísť nato ako nakresliť jej obrys? \n(Dlhá strana má 150 pixelov a krátka
        strana má 75 pixelov.)"
      courseC_artist_prog8: |-
        Ešte jedna ceduľka. Toto je trojuholník pre Pi.
        (Každá strana má 150 pixelov)
      courseC_artist_prog8_2018: |-
        Ešte jedna ceduľka. Toto je trojuholník pre Pi.
        (Každá strana má 150 pixelov)
      courseC_artist_prog8_2019: |-
        Ešte jedna ceduľka. Toto je trojuholník pre Pi.
        (Každá strana má 150 pixelov)
      courseC_artist_prog_challenge1: Nakresli izbu pre každé zo zvierat. Existuje
        mnoho rôznych spôsobov ako vyriešiť túto úlohu, takže sa zabav! Každý štvorec
        má stranu dlhú 100 pixelov.
      courseC_artist_prog_challenge1_2018: Nakresli izbu pre každé zo zvierat. Existuje
        mnoho rôznych spôsobov ako vyriešiť túto úlohu, takže sa zabav! Každý štvorec
        má stranu dlhú 100 pixelov.
      courseC_artist_prog_challenge1_2019: Nakresli izbu pre každé zo zvierat. Existuje
        mnoho rôznych spôsobov ako vyriešiť túto úlohu, takže sa zabav! Každý štvorec
        má stranu dlhú 100 pixelov.
      courseC_artist_prog_challenge2a: |-
        -   "Pomôž mi dokresliť žlté čiary na túto cestu!"

        Tieto tri čiary majú dĺžku 150, 100 a 200 pixelov!
      courseC_artist_prog_challenge2a_2018: |-
        -   "Pomôž mi dokresliť žlté čiary na túto cestu!"

        Tieto tri čiary majú dĺžku 150, 100 a 200 pixelov!
      courseC_artist_prog_challenge2a_2019: |-
        -   "Pomôž mi dokresliť žlté čiary na túto cestu!"

        Tieto tri čiary majú dĺžku 150, 100 a 200 pixelov!
      courseC_collector_loops_challenge2: |-
        _"Poďme loviť poklady!"_

        Pomôž Laurel získať aspoň **5** drahokamov.
      courseC_collector_loops_challenge2_2018: |-
        _"Poďme loviť poklady!"_

        Pomôž Laurel získať aspoň **5** drahokamov.
      courseC_collector_loops_challenge2_2019: |-
        _"Poďme loviť poklady!"_

        Pomôž Laurel získať aspoň **5** drahokamov.
      courseC_collector_prog1: |-
        **Voľná hra.** Toto je dobrodružka Laurel! Posúvaj ju po ploche a pozbieraj toľko drahokamov, koľko len vieš. Na ich pozbieranie použi blok "zbieraj"!

        Presuň bloky na pracovnú plochu a zisti, ako sa dostať k drahokamom. Získaj aspoň jeden, aby si prešiel tento level.
      courseC_collector_prog1_2018: |-
        **Voľná hra.** Toto je dobrodružka Laurel! Posúvaj ju po ploche a pozbieraj toľko drahokamov, koľko len vieš. Na ich pozbieranie použi blok "zbieraj"!

        Presuň bloky na pracovnú plochu a zisti, ako sa dostať k drahokamom. Získaj aspoň jeden, aby si prešiel tento level.
      courseC_collector_prog1_2019: |-
        **Voľná hra.** Toto je dobrodružka Laurel! Posúvaj ju po ploche a pozbieraj toľko drahokamov, koľko len vieš. Na ich pozbieranie použi blok "zbieraj"!

        Presuň bloky na pracovnú plochu a zisti, ako sa dostať k drahokamom. Získaj aspoň jeden, aby si prešiel tento level.
      courseC_collector_prog2: Posuň Laurel k drahokamu a potom použi <xml><block
        type="collector_collect"/></xml> na jeho pozbieranie.
      courseC_collector_prog2_2018: Posuň Laurel k drahokamu a potom použi <xml><block
        type="collector_collect"/></xml> na jeho pozbieranie.
      courseC_collector_prog2_2019: Posuň Laurel k drahokamu a potom použi <xml><block
        type="collector_collect"/></xml> na jeho pozbieranie.
      courseC_collector_prog3: "_\"Na poradí záleží!\"_ \n\nVšetky bloky, ktoré potrebuješ
        tam už máš, len nie sú spojené. \n\nUsporiadaj ich tak, aby si zozbieral všetky
        drahokamy a vyriešil túto úlohu."
      courseC_collector_prog3_2018: "_\"Na poradí záleží!\"_ \n\nVšetky bloky, ktoré
        potrebuješ tam už máš, len nie sú spojené. \n\nUsporiadaj ich tak, aby si
        zozbieral všetky drahokamy a vyriešil túto úlohu."
      courseC_collector_prog3_2019: "_\"Na poradí záleží!\"_ \n\nVšetky bloky, ktoré
        potrebuješ tam už máš, len nie sú spojené. \n\nUsporiadaj ich tak, aby si
        zozbieral všetky drahokamy a vyriešil túto úlohu."
      courseC_collector_prog4: "_\"Na poradí záleží!\"_ \n\nVšetky bloky, ktoré potrebuješ
        tam už máš, len nie sú spojené. \n\nUsporiadaj tieto bloky tak, aby si zozbieral
        všetky drahokamy a vyriešil túto úlohu."
      courseC_collector_prog4_2018: "_\"Na poradí záleží!\"_ \n\nVšetky bloky, ktoré
        potrebuješ tam už máš, len nie sú spojené. \n\nUsporiadaj tieto bloky tak,
        aby si zozbieral všetky drahokamy a vyriešil túto úlohu."
      courseC_collector_prog4_2019: "_\"Na poradí záleží!\"_ \n\nVšetky bloky, ktoré
        potrebuješ tam už máš, len nie sú spojené. \n\nUsporiadaj tieto bloky tak,
        aby si zozbieral všetky drahokamy a vyriešil túto úlohu."
      courseC_collector_prog5: |-
        _"Pomôž mi pozbierať každý jeden drahokam!"_

        Tieto bloky nie sú v správnom poradí. Dokážeš to napraviť?
      courseC_collector_prog5_2018: |-
        _"Pomôž mi pozbierať každý jeden drahokam!"_

        Tieto bloky nie sú v správnom poradí. Dokážeš to napraviť?
      courseC_collector_prog5_2019: |-
        _"Pomôž mi pozbierať každý jeden drahokam!"_

        Tieto bloky nie sú v správnom poradí. Dokážeš to napraviť?
      courseC_collector_prog6: |-
        _"Pomôž mi pozbierať všetky drahokamy!"_

        Tieto bloky nie sú v správnom poradí. Usporiadaj ich tak, aby si pozbieral všetky drahokamy.
      courseC_collector_prog6_2018: |-
        _"Pomôž mi pozbierať všetky drahokamy!"_

        Tieto bloky nie sú v správnom poradí. Usporiadaj ich tak, aby si pozbieral všetky drahokamy.
      courseC_collector_prog6_2019: |-
        _"Pomôž mi pozbierať všetky drahokamy!"_

        Tieto bloky nie sú v správnom poradí. Usporiadaj ich tak, aby si pozbieral všetky drahokamy.
      courseC_collector_prog7: "**Výzva:** _\"Čo sa tu deje?\"_\n\nAj keď tieto bloky
        usporiadame do správneho poradia, stále nám bude niešo chýbať. \nVyuži bloky
        z panela nástrojov na to, aby si pozbieral všetky poklady."
      courseC_collector_prog7_2018: "**Výzva:** _\"Čo sa tu deje?\"_\n\nAj keď tieto
        bloky usporiadame do správneho poradia, stále nám bude niešo chýbať. \nVyuži
        bloky z panela nástrojov na to, aby si pozbieral všetky poklady."
      courseC_collector_prog7_2019: "**Výzva:** _\"Čo sa tu deje?\"_\n\nAj keď tieto
        bloky usporiadame do správneho poradia, stále nám bude niešo chýbať. \nVyuži
        bloky z panela nástrojov na to, aby si pozbieral všetky poklady."
      courseC_collector_prog8: _"Pokračuj v dobrej práci! Pomôž mi pozbierať všetky
        drahokamy."_
      courseC_collector_prog8_2018: _"Pokračuj v dobrej práci! Pomôž mi pozbierať
        všetky drahokamy."_
      courseC_collector_prog8_2019: _"Pokračuj v dobrej práci! Pomôž mi pozbierať
        všetky drahokamy."_
      courseC_collector_prog9: _"Pozbierajme všetky drahokamy!"_
      courseC_collector_prog9_2018: _"Pozbierajme všetky drahokamy!"_
      courseC_collector_prog9_2019: _"Pozbierajme všetky drahokamy!"_
      courseC_collector_prog_challenge2: V tejto jaskyni nájdeš 20 pokladov. Pozbieraj
        aspoň **10** na dokončenie výzvy!
      courseC_collector_prog_challenge2_2018: V tejto jaskyni nájdeš 20 pokladov.
        Pozbieraj aspoň **10** na dokončenie výzvy!
      courseC_collector_prog_challenge2_2019: V tejto jaskyni nájdeš 20 pokladov.
        Pozbieraj aspoň **10** na dokončenie výzvy!
      courseC_data wizard: Press Run. The wizard will make animals appear. Count them.
        What do you notice?
      courseC_flappy_events1: "Pripoj blok `mávni normálne` k bloku `keď klikneš`,
        potom stlač tlačidlo \"Spustiť\". \n\n* * *\n\nKlikni na hernú plochu aby
        si dostal Flappyho k cieľu."
      courseC_flappy_events10: "A teraz si vytvor tvoju vlastnú hru Flappy! \n\nMôžeš
        zmeniť celý výzor hry a vymyslieť si vlastné pravidlá, dokonca aj zmeniť gravitáciu.\nKeď
        škončíš, klikni na \"Dokončiť\" a tvoju hru si na mobile budú môcť zahrať
        aj tvoji kamaráti."
      courseC_flappy_events10_2018: "A teraz si vytvor tvoju vlastnú hru Flappy! \n\nMôžeš
        zmeniť celý výzor hry a vymyslieť si vlastné pravidlá, dokonca aj zmeniť gravitáciu.\nKeď
        škončíš, klikni na \"Dokončiť\" a tvoju hru si na mobile budú môcť zahrať
        aj tvoji kamaráti."
      courseC_flappy_events10_2019: "A teraz si vytvor tvoju vlastnú hru Flappy! \n\nMôžeš
        zmeniť celý výzor hry a vymyslieť si vlastné pravidlá, dokonca aj zmeniť gravitáciu.\nKeď
        škončíš, klikni na \"Dokončiť\" a tvoju hru si na mobile budú môcť zahrať
        aj tvoji kamaráti."
      courseC_flappy_events1_2018: "Pripoj blok `mávni normálne` k bloku `keď klikneš`,
        potom stlač tlačidlo \"Spustiť\". \n\n* * *\n\nKlikni na hernú plochu aby
        si dostal Flappyho k cieľu."
      courseC_flappy_events1_2019: "Pripoj blok `mávni normálne` k bloku `keď klikneš`,
        potom stlač tlačidlo \"Spustiť\". \n\n* * *\n\nKlikni na hernú plochu aby
        si dostal Flappyho k cieľu."
      courseC_flappy_events2: "Blok `pri spustení` ti umožní spustiť tvoj kód hneď
        ako tvoja hra začne. \n\nVyskúšaj pridať blok, ktorým zmeníš rýchlosť hry
        po stlačení tlačidla \"Spustiť\". \n\n* * *\n\nZahraj si túto hru a doleť
        až k cieľu, aby si mohol pokračovať."
      courseC_flappy_events2_2018: "Blok `pri spustení` ti umožní spustiť tvoj kód
        hneď ako tvoja hra začne. \n\nVyskúšaj pridať blok, ktorým zmeníš rýchlosť
        hry po stlačení tlačidla \"Spustiť\". \n\n* * *\n\nZahraj si túto hru a doleť
        až k cieľu, aby si mohol pokračovať."
      courseC_flappy_events2_2019: "Blok `pri spustení` ti umožní spustiť tvoj kód
        hneď ako tvoja hra začne. \n\nVyskúšaj pridať blok, ktorým zmeníš rýchlosť
        hry po stlačení tlačidla \"Spustiť\". \n\n* * *\n\nZahraj si túto hru a doleť
        až k cieľu, aby si mohol pokračovať."
      courseC_flappy_events3: "Teraz sme pridali aj zem. \n\nUmiestni blok `ukonči
        hru` pod blok `keď dopadne na zem`. \n\n* * *\n\nZahraj si hru a na jej konci
        nechaj Flappyho spadnúť na zem."
      courseC_flappy_events3_2018: "Teraz sme pridali aj zem. \n\nUmiestni blok `ukonči
        hru` pod blok `keď dopadne na zem`. \n\n* * *\n\nZahraj si hru a na jej konci
        nechaj Flappyho spadnúť na zem."
      courseC_flappy_events3_2019: "Teraz sme pridali aj zem. \n\nUmiestni blok `ukonči
        hru` pod blok `keď dopadne na zem`. \n\n* * *\n\nZahraj si hru a na jej konci
        nechaj Flappyho spadnúť na zem."
      courseC_flappy_events4: "Flappy skrz prekážky preletí, pokiaľ ho nenaprogramuješ
        tak, aby do nich narazil ak sa im nevyhne. \n\nPripoj blok `ukonči hru` ku
        bloku `keď narazí na prekážku`, aby sa hra skončila akonáhle Flappy narazí
        do prvej prekážky."
      courseC_flappy_events4_2018: "Flappy skrz prekážky preletí, pokiaľ ho nenaprogramuješ
        tak, aby do nich narazil ak sa im nevyhne. \n\nPripoj blok `ukonči hru` ku
        bloku `keď narazí na prekážku`, aby sa hra skončila akonáhle Flappy narazí
        do prvej prekážky."
      courseC_flappy_events4_2019: "Flappy skrz prekážky preletí, pokiaľ ho nenaprogramuješ
        tak, aby do nich narazil ak sa im nevyhne. \n\nPripoj blok `ukonči hru` ku
        bloku `keď narazí na prekážku`, aby sa hra skončila akonáhle Flappy narazí
        do prvej prekážky."
      courseC_flappy_events5: "Pridali sme počítadlo bodov, Flappy získa jeden zakaždým,
        keď sa vyhne prekážke. \n\nPridaj blok `pridaj bod` pod udalosť `keď obíde
        prekážku`, potom stlač \"Spustiť\" a dostaň Flappyho cez prvé prekážky."
      courseC_flappy_events5_2018: "Pridali sme počítadlo bodov, Flappy získa jeden
        zakaždým, keď sa vyhne prekážke. \n\nPridaj blok `pridaj bod` pod udalosť
        `keď obíde prekážku`, potom stlač \"Spustiť\" a dostaň Flappyho cez prvé prekážky."
      courseC_flappy_events5_2019: "Pridali sme počítadlo bodov, Flappy získa jeden
        zakaždým, keď sa vyhne prekážke. \n\nPridaj blok `pridaj bod` pod udalosť
        `keď obíde prekážku`, potom stlač \"Spustiť\" a dostaň Flappyho cez prvé prekážky."
      courseC_flappy_events6: "Stlač šípku nadol vo vnútri bloku `nastav normálnu
        rýchlosť` na zvolenie inej sily mávnutia krídiel. \n\nUvidíš či budeš vedieť
        skórovať aj potom ako Flappy máva krídlami každým kliknutím viac alebo menej."
      courseC_flappy_events6_2018: "Stlač šípku nadol vo vnútri bloku `nastav normálnu
        rýchlosť` na zvolenie inej sily mávnutia krídiel. \n\nUvidíš či budeš vedieť
        skórovať aj potom ako Flappy máva krídlami každým kliknutím viac alebo menej."
      courseC_flappy_events6_2019: "Stlač šípku nadol vo vnútri bloku `nastav normálnu
        rýchlosť` na zvolenie inej sily mávnutia krídiel. \n\nUvidíš či budeš vedieť
        skórovať aj potom ako Flappy máva krídlami každým kliknutím viac alebo menej."
      courseC_flappy_events7: A teraz skús zmeniť pozadie pridaním nového bloku pod
        blok `pri spustení`.
      courseC_flappy_events7_2018: A teraz skús zmeniť pozadie pridaním nového bloku
        pod blok `pri spustení`.
      courseC_flappy_events7_2019: A teraz skús zmeniť pozadie pridaním nového bloku
        pod blok `pri spustení`.
      courseC_flappy_events8: "Prostredie môžeš nastaviť kedykoľvek, nie len pri začiatku
        hry. \n\nSkús ho nastaviť na **náhodné** keď sa stane nejaká udalosť, napríklad
        keď sa Flappy vyhne prekážke."
      courseC_flappy_events8_2018: "Prostredie môžeš nastaviť kedykoľvek, nie len
        pri začiatku hry. \n\nSkús ho nastaviť na **náhodné** keď sa stane nejaká
        udalosť, napríklad keď sa Flappy vyhne prekážke."
      courseC_flappy_events8_2019: "Prostredie môžeš nastaviť kedykoľvek, nie len
        pri začiatku hry. \n\nSkús ho nastaviť na **náhodné** keď sa stane nejaká
        udalosť, napríklad keď sa Flappy vyhne prekážke."
      courseC_flappy_events9: Pre zmenu sa hra neskončí keď vtáčik narazí do prekážky,
        ale len vynulujeme skóre.
      courseC_flappy_events9_2018: Pre zmenu sa hra neskončí keď vtáčik narazí do
        prekážky, ale len vynulujeme skóre.
      courseC_flappy_events9_2019: Pre zmenu sa hra neskončí keď vtáčik narazí do
        prekážky, ale len vynulujeme skóre.
      courseC_harvester_loops1: |-
        Opakovanie môžeš použiť aj na iné príkazy ako pohyb.

        Použi opakovanie na pozbieranie všetkých tekvíc.
      courseC_harvester_loops10: Pozbieraj všetky kukurice a tekvice.
      courseC_harvester_loops10_2018: Pozbieraj všetky kukurice a tekvice.
      courseC_harvester_loops10_2019: Pozbieraj všetky kukurice a tekvice.
      courseC_harvester_loops11: Pozbieraj všetky kukurice a tekvice.
      courseC_harvester_loops11_2018: Pozbieraj všetky kukurice a tekvice.
      courseC_harvester_loops11_2019: Pozbieraj všetky kukurice a tekvice.
      courseC_harvester_loops1_2018: |-
        Opakovanie môžeš použiť aj na iné príkazy ako pohyb.

        Použi opakovanie na pozbieranie všetkých tekvíc.
      courseC_harvester_loops1_2019: |-
        Opakovanie môžeš použiť aj na iné príkazy ako pohyb.

        Použi opakovanie na pozbieranie všetkých tekvíc.
      courseC_harvester_loops2: Dokážeš skombinovať dve rôzne opakovania tak, aby
        si sa pohol smerom k tekviciam a všetky ich pozbieral?
      courseC_harvester_loops2_2018: Dokážeš skombinovať dve rôzne opakovania tak,
        aby si sa pohol smerom k tekviciam a všetky ich pozbieral?
      courseC_harvester_loops2_2019: Dokážeš skombinovať dve rôzne opakovania tak,
        aby si sa pohol smerom k tekviciam a všetky ich pozbieral?
      courseC_harvester_loops3: Pozbieraj všetky tekvice.
      courseC_harvester_loops3_2018: Pozbieraj všetky tekvice.
      courseC_harvester_loops3_2019: Pozbieraj všetky tekvice.
      courseC_harvester_loops4: |-
        Teraz tu rastie už aj kukurica!

        Pozbieraj všetky tekvice a kukurice.
      courseC_harvester_loops4_2018: |-
        Teraz tu rastie už aj kukurica!

        Pozbieraj všetky tekvice a kukurice.
      courseC_harvester_loops4_2019: |-
        Teraz tu rastie už aj kukurica!

        Pozbieraj všetky tekvice a kukurice.
      courseC_harvester_loops5: Pozbieraj všetky kukurice a tekvice.
      courseC_harvester_loops5_2018: Pozbieraj všetky kukurice a tekvice.
      courseC_harvester_loops5_2019: Pozbieraj všetky kukurice a tekvice.
      courseC_harvester_loops6: Pozbieraj všetky kukurice a tekvice.
      courseC_harvester_loops6_2018: Pozbieraj všetky kukurice a tekvice.
      courseC_harvester_loops6_2019: Pozbieraj všetky kukurice a tekvice.
      courseC_harvester_loops7: Pozbieraj všetky kukurice a tekvice.
      courseC_harvester_loops7_2018: Pozbieraj všetky kukurice a tekvice.
      courseC_harvester_loops7_2019: Pozbieraj všetky kukurice a tekvice.
      courseC_harvester_loops8: |-
        \*\* Výzva: \*\* Pozbieraj všetky tekvice a kukurice.

        Túto úlohu môžeš splniť akýmkoľvek spôsobom chceš, ale buď bude treba veľa práce, alebo veľa myslenia!
      courseC_harvester_loops8_2018: |-
        \*\* Výzva: \*\* Pozbieraj všetky tekvice a kukurice.

        Túto úlohu môžeš splniť akýmkoľvek spôsobom chceš, ale buď bude treba veľa práce, alebo veľa myslenia!
      courseC_harvester_loops8_2019: |-
        \*\* Výzva: \*\* Pozbieraj všetky tekvice a kukurice.

        Túto úlohu môžeš splniť akýmkoľvek spôsobom chceš, ale buď bude treba veľa práce, alebo veľa myslenia!
      courseC_harvester_loops9: Pozbieraj všetky kukurice a tekvice.
      courseC_harvester_loops9_2018: Pozbieraj všetky kukurice a tekvice.
      courseC_harvester_loops9_2019: Pozbieraj všetky kukurice a tekvice.
      courseC_harvester_loops_challenge2: Pozbieraj všetok šalát. Vyhni sa stromom
        a poliam!
      courseC_harvester_loops_challenge2_2018: Pozbieraj všetok šalát. Vyhni sa stromom
        a poliam!
      courseC_harvester_loops_challenge2_2019: Pozbieraj všetok šalát. Vyhni sa stromom
        a poliam!
      courseC_maze_debugging1: |-
        Tento kód nie je úplne správny!

        Oprav ho tak, aby sa Scrat dostal k žaluďu.
      courseC_maze_debugging1_2018: |-
        Tento kód nie je úplne správny!

        Oprav ho tak, aby sa Scrat dostal k žaluďu.
      courseC_maze_debugging1_2019: |-
        Tento kód nie je úplne správny!

        Oprav ho tak, aby sa Scrat dostal k žaluďu.
      courseC_maze_debugging3: |-
        Niečo tu nesedí.

        Odstráň bloky tak, aby sa Scrat dostal k žaluďu!
      courseC_maze_debugging3_2018: |-
        Niečo tu nesedí.

        Odstráň bloky tak, aby sa Scrat dostal k žaluďu!
      courseC_maze_debugging3_2019: |-
        Niečo tu nesedí.

        Odstráň bloky tak, aby sa Scrat dostal k žaluďu!
      courseC_maze_debugging_challenge2: Ak sa Scrat otáča príliš často, môže sa mu
        zakrútiť hlava! Pomôž mu dostať sa k žaluďu iba pomocou štyroch blokov `otoč
        sa`.
      courseC_maze_debugging_challenge2_2018: Ak sa Scrat otáča príliš často, môže
        sa mu zakrútiť hlava! Pomôž mu dostať sa k žaluďu iba pomocou štyroch blokov
        `otoč sa`.
      courseC_maze_debugging_challenge2_2019: Ak sa Scrat otáča príliš často, môže
        sa mu zakrútiť hlava! Pomôž mu dostať sa k žaluďu iba pomocou štyroch blokov
        `otoč sa`.
      courseC_maze_programming1: V tejto úlohe pospájaj všetky bloky, klikni na tlačítko
        "Spustiť" a sleduj, čo sa stane!
      courseC_maze_programming1_2018: V tejto úlohe pospájaj všetky bloky, klikni
        na tlačítko "Spustiť" a sleduj, čo sa stane!
      courseC_maze_programming1_2019: V tejto úlohe pospájaj všetky bloky, klikni
        na tlačítko "Spustiť" a sleduj, čo sa stane!
      courseC_maze_programming2: Na dokončenie kódu vytiahni z panela nástrojov ešte
        jeden blok <xml><block type="maze_moveForward"/></xml> a pripoj ho ku kódu.
      courseC_maze_programming2_2018: Na dokončenie kódu vytiahni z panela nástrojov
        ešte jeden blok <xml><block type="maze_moveForward"/></xml> a pripoj ho ku
        kódu.
      courseC_maze_programming2_2019: Na dokončenie kódu vytiahni z panela nástrojov
        ešte jeden blok <xml><block type="maze_moveForward"/></xml> a pripoj ho ku
        kódu.
      courseC_maze_programming3: |-
        _"To prasiatko mi pije krv."_

        Na pracovnej ploche je jeden blok navyše, ktorý spôsobí, že vták narazí.
        Odpoj ho od ostatných šedých blokov a presuň ho späť do panela nástrojov.
      courseC_maze_programming3_2018: |-
        _"To prasiatko mi pije krv."_

        Na pracovnej ploche je jeden blok navyše, ktorý spôsobí, že vták narazí.
        Odpoj ho od ostatných šedých blokov a presuň ho späť do panela nástrojov.
      courseC_maze_programming3_2019: |-
        _"To prasiatko mi pije krv."_

        Na pracovnej ploche je jeden blok navyše, ktorý spôsobí, že vták narazí.
        Odpoj ho od ostatných šedých blokov a presuň ho späť do panela nástrojov.
      courseC_maze_programming4: "_\"Nájdi cestu a priveď ma k tomu nezbednému prasiatku.\"_
        \n\nVyhni sa TNT, inak bude lietať perie!"
      courseC_maze_programming4_2018: "_\"Nájdi cestu a priveď ma k tomu nezbednému
        prasiatku.\"_ \n\nVyhni sa TNT, inak bude lietať perie!"
      courseC_maze_programming4_2019: "_\"Nájdi cestu a priveď ma k tomu nezbednému
        prasiatku.\"_ \n\nVyhni sa TNT, inak bude lietať perie!"
      courseC_maze_programming5: |-
        _"Nasleduj cestu a priveď ma k prasiatku"_

        Vyhni sa TNT.
      courseC_maze_programming5_2018: |-
        _"Nasleduj cestu a priveď ma k prasiatku"_

        Vyhni sa TNT.
      courseC_maze_programming5_2019: |-
        _"Nasleduj cestu a priveď ma k prasiatku"_

        Vyhni sa TNT.
      courseC_maze_programming6: |-
        _"Ukľudni sa a pomôž mi nájsť to zlé prasiatko. Inak sa nahnevám!"_

        Dostaň vtáka k prasiatku a vyhni sa TNT.
      courseC_maze_programming6_2018: |-
        _"Ukľudni sa a pomôž mi nájsť to zlé prasiatko. Inak sa nahnevám!"_

        Dostaň vtáka k prasiatku a vyhni sa TNT.
      courseC_maze_programming6_2019: |-
        _"Ukľudni sa a pomôž mi nájsť to zlé prasiatko. Inak sa nahnevám!"_

        Dostaň vtáka k prasiatku a vyhni sa TNT.
      courseC_maze_programming7: |-
        _A teraz sa už nahnevám!_

        **Výzva:** V tomto kóde je veľa chýb. Niektoré bloky budeš musieť odstrániť a iné zas pridať.
      courseC_maze_programming7_2018: |-
        _A teraz sa už nahnevám!_

        **Výzva:** V tomto kóde je veľa chýb. Niektoré bloky budeš musieť odstrániť a iné zas pridať.
      courseC_maze_programming7_2019: |-
        _A teraz sa už nahnevám!_

        **Výzva:** V tomto kóde je veľa chýb. Niektoré bloky budeš musieť odstrániť a iné zas pridať.
      courseC_maze_programming8: _"Zachovaj pokoj a pomôž mi nájsť to zlé prasiatko."_
      courseC_maze_programming8_2018: _"Zachovaj pokoj a pomôž mi nájsť to zlé prasiatko."_
      courseC_maze_programming8_2019: _"Zachovaj pokoj a pomôž mi nájsť to zlé prasiatko."_
      courseC_maze_programming8_predict1: _"Zachovaj pokoj a pomôž mi nájsť to zlé
        prasiatko."_
      courseC_maze_programming8_predict1_2018: _"Zachovaj pokoj a pomôž mi nájsť to
        zlé prasiatko."_
      courseC_maze_programming8_predict1_2019: _"Zachovaj pokoj a pomôž mi nájsť to
        zlé prasiatko."_
      courseC_maze_programming9: _"A teraz ma dostaň k prasiatku cestou, ktorou len
        chceš!"_
      courseC_maze_programming9_2018: _"A teraz ma dostaň k prasiatku cestou, ktorou
        len chceš!"_
      courseC_maze_programming9_2019: _"A teraz ma dostaň k prasiatku cestou, ktorou
        len chceš!"_
      courseC_maze_programming_challenge1: 'Vták potrebuje tvoju pomoc! Prasiatko
        sa mu skrylo, tvojou úlohou je ho nájsť. '
      courseC_maze_programming_challenge1_2018: 'Vták potrebuje tvoju pomoc! Prasiatko
        sa mu skrylo, tvojou úlohou je ho nájsť. '
      courseC_maze_programming_challenge1_2019: 'Vták potrebuje tvoju pomoc! Prasiatko
        sa mu skrylo, tvojou úlohou je ho nájsť. '
      courseC_maze_programming_challenge2: Niekedy existuje viac spôsobov ako vyriešiť
        jeden problém. Niekedy je rýchlešie ísť dozadu ako ísť dopredu!
      courseC_maze_programming_challenge2_2018: Niekedy existuje viac spôsobov ako
        vyriešiť jeden problém. Niekedy je rýchlešie ísť dozadu ako ísť dopredu!
      courseC_maze_programming_challenge2_2019: Niekedy existuje viac spôsobov ako
        vyriešiť jeden problém. Niekedy je rýchlešie ísť dozadu ako ísť dopredu!
      courseC_starWars_loops1: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _\"Pozbieraj ten šrot, BB-8!\"_ \n\nNa pozbieranie šrotu použi 5 rovnakých
        blokov. Šrot vyzerá takto: ![](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)"
      courseC_starWars_loops10: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8 ideš!"_

        Ide ti to výborne! Pokračuj v tom!
      courseC_starWars_loops10_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8 ideš!"_

        Ide ti to výborne! Pokračuj v tom!
      courseC_starWars_loops10_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8 ideš!"_

        Ide ti to výborne! Pokračuj v tom!
      courseC_starWars_loops11: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Pokračuj BB-8!"_

        Už si skoro tam! Teraz si zvoľ cestu, ktorou chceš ísť ty!
      courseC_starWars_loops11_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Pokračuj BB-8!"_

        Už si skoro tam! Teraz si zvoľ cestu, ktorou chceš ísť ty!
      courseC_starWars_loops11_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Pokračuj BB-8!"_

        Už si skoro tam! Teraz si zvoľ cestu, ktorou chceš ísť ty!
      courseC_starWars_loops1_2018: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _\"Pozbieraj ten šrot, BB-8!\"_ \n\nNa pozbieranie šrotu použi 5 rovnakých
        blokov. Šrot vyzerá takto: ![](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)"
      courseC_starWars_loops1_2019: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _\"Pozbieraj ten šrot, BB-8!\"_ \n\nNa pozbieranie šrotu použi 5 rovnakých
        blokov. Šrot vyzerá takto: ![](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)"
      courseC_starWars_loops2: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"ideš BB-8!"_

        Ak chceš pozbierať všetky kusy šrotu, vytvor cyklus použitím len jedného bloku vo vnútri opakovania.
      courseC_starWars_loops2_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"ideš BB-8!"_

        Ak chceš pozbierať všetky kusy šrotu, vytvor cyklus použitím len jedného bloku vo vnútri opakovania.
      courseC_starWars_loops2_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"ideš BB-8!"_

        Ak chceš pozbierať všetky kusy šrotu, vytvor cyklus použitím len jedného bloku vo vnútri opakovania.
      courseC_starWars_loops2_copy: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"ideš BB-8!"_

        Ak chceš pozbierať všetky kusy šrotu, vytvor cyklus použitím len jedného bloku vo vnútri opakovania.
      courseC_starWars_loops4: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Len tak ďalej, BB-8."_

        V tejto úlohe použi dva bloky 'opakuj' aby sa BB-8 dostal ku všetkým kúskom šrotu s čo najmenej blokmi!
      courseC_starWars_loops4_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Len tak ďalej, BB-8."_

        V tejto úlohe použi dva bloky 'opakuj' aby sa BB-8 dostal ku všetkým kúskom šrotu s čo najmenej blokmi!
      courseC_starWars_loops4_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Len tak ďalej, BB-8."_

        V tejto úlohe použi dva bloky 'opakuj' aby sa BB-8 dostal ku všetkým kúskom šrotu s čo najmenej blokmi!
      courseC_starWars_loops4_copy: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Len tak ďalej, BB-8."_

        V tejto úlohe použi dva bloky 'opakuj' aby sa BB-8 dostal ku všetkým kúskom šrotu s čo najmenej blokmi!
      courseC_starWars_loops5: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8, ideš!"_'
      courseC_starWars_loops5_2018: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8, ideš!"_'
      courseC_starWars_loops5_2019: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8, ideš!"_'
      courseC_starWars_loops5_copy: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8, ideš!"_'
      courseC_starWars_loops6: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Dokážeš to všetko pozbierať?"_

        Cykly fungujú dokonca aj s viac ako jedným blokom vo vnútri! Dokážeš dať túto postupnosť do cyklu?
      courseC_starWars_loops6_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Dokážeš to všetko pozbierať?"_

        Cykly fungujú dokonca aj s viac ako jedným blokom vo vnútri! Dokážeš dať túto postupnosť do cyklu?
      courseC_starWars_loops6_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Dokážeš to všetko pozbierať?"_

        Cykly fungujú dokonca aj s viac ako jedným blokom vo vnútri! Dokážeš dať túto postupnosť do cyklu?
      courseC_starWars_loops6_copy: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Dokážeš to všetko pozbierať?"_

        Cykly fungujú dokonca aj s viac ako jedným blokom vo vnútri! Dokážeš dať túto postupnosť do cyklu?
      courseC_starWars_loops7: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Ty to dokážeš!!"_

        Pokúsiš sa pozbierať všetky kusy kovu s použitím iba jedného cyklu? Pokús sa to najskôr naprogramovať celé bez cyklu, potom nájdi opakujúci sa kód a daj ho do cyklu.
      courseC_starWars_loops7_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Ty to dokážeš!!"_

        Pokúsiš sa pozbierať všetky kusy kovu s použitím iba jedného cyklu? Pokús sa to najskôr naprogramovať celé bez cyklu, potom nájdi opakujúci sa kód a daj ho do cyklu.
      courseC_starWars_loops7_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Ty to dokážeš!!"_

        Pokúsiš sa pozbierať všetky kusy kovu s použitím iba jedného cyklu? Pokús sa to najskôr naprogramovať celé bez cyklu, potom nájdi opakujúci sa kód a daj ho do cyklu.
      courseC_starWars_loops7_copy: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Ty to dokážeš!!"_

        Pokúsiš sa pozbierať všetky kusy kovu s použitím iba jedného cyklu? Pokús sa to najskôr naprogramovať celé bez cyklu, potom nájdi opakujúci sa kód a daj ho do cyklu.
      courseC_starWars_loops8: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Keep it up, BB-8."_

        **Výzva:** Na vyriešenie tejto úlohy skombinuj nápady z predchádzajúcich levelov.
      courseC_starWars_loops8_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Keep it up, BB-8."_

        **Výzva:** Na vyriešenie tejto úlohy skombinuj nápady z predchádzajúcich levelov.
      courseC_starWars_loops8_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Keep it up, BB-8."_

        **Výzva:** Na vyriešenie tejto úlohy skombinuj nápady z predchádzajúcich levelov.
      courseC_starWars_loops8_copy: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Keep it up, BB-8."_

        **Výzva:** Na vyriešenie tejto úlohy skombinuj nápady z predchádzajúcich levelov.
      courseC_starWars_loops9: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Pokračuj!"_

        Použi, čo si sa zatiaľ naučil a pozbieraj všetok šrot!
      courseC_starWars_loops9_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Pokračuj!"_

        Použi, čo si sa zatiaľ naučil a pozbieraj všetok šrot!
      courseC_starWars_loops9_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Pokračuj!"_

        Použi, čo si sa zatiaľ naučil a pozbieraj všetok šrot!
      courseD_artist_1_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)_“Ahoj,
        som Elza z Arendellu, pomôž mi nakresliť tvar.\"_\n\nNakresli šesťuholník
        so stranami dlhými 50 pixelov.  \n\n* * *\n\nAby si nakreslil šesťuholník,
        potrebuješ: \n\n-   posuň sa dopredu o **50** pixelov\n-   otoč sa vpravo
        o **60** stupňov\n-   zopakuj **6** krát"
      courseD_artist_1_2018_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)_“Ahoj,
        som Elza z Arendellu, pomôž mi nakresliť tvar.\"_\n\nNakresli šesťuholník
        so stranami dlhými 50 pixelov.  \n\n* * *\n\nAby si nakreslil šesťuholník,
        potrebuješ: \n\n-   posuň sa dopredu o **50** pixelov\n-   otoč sa vpravo
        o **60** stupňov\n-   zopakuj **6** krát"
      courseD_artist_2_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)_\"Dobrá
        práca!\"_\n\nZa šesťuholníkom sa otoč vpravo o **60** stupňov a nakresli úsečku
        dlhú **150** pixelov.   \n\nDokonči tak, že umiestniš Elzu do stredu herného
        poľa, pričom použiješ <xml><block type=\"jump_to\"><title name=\"VALUE\">middle
        center</title></block></xml> block."
      courseD_artist_2_2018_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)_\"Dobrá
        práca!\"_\n\nZa šesťuholníkom sa otoč vpravo o **60** stupňov a nakresli úsečku
        dlhú **150** pixelov.   \n\nDokonči tak, že umiestniš Elzu do stredu herného
        poľa, pričom použiješ <xml><block type=\"jump_to\" block-text=\"jump to the
        middle center position\"><title name=\"VALUE\">middle center</title></block></xml>
        block."
      courseD_artist_3_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _Skús vytvoriť snehovú vločku.”_

        Na vytvorenie snehovej vločky z tohto kódu, vnor celý kód do vnútra `opakujúceho sa` cyklu a spusti ho dokopy **6** krát. Mal by ti na to stačiť jeden blok.
      courseD_artist_3_2018_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _Skús vytvoriť snehovú vločku.”_

        Na vytvorenie snehovej vločky z tohto kódu, vnor celý kód do vnútra `opakujúceho sa` cyklu a spusti ho dokopy **6** krát. Mal by ti na to stačiť jeden blok.
      courseD_artist_4_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Skús naše snehové vločky ozvláštniť!"_

        **Pre inšpiráciu:** Kam potrebuješ pridať kód, ak chceš nakresliť malý štvorec na vrchu každej dlhej úsečky?

        * * *

        Pri tejto úlohe môžeš skúšať čokoľvek chceš, ale mám nápad:

        Skús vytvoriť malý štvorec na konci každej úsečky

        -   každá strana by mala byť dlhá 15 pixelov
        -   otoč sa o 90 stupňov
        -   zopakuj akciu dokopy 4 krát
      courseD_artist_4_2018_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Skús naše snehové vločky ozvláštniť!"_

        **Pre inšpiráciu:** Kam potrebuješ pridať kód, ak chceš nakresliť malý štvorec na vrchu každej dlhej úsečky?

        * * *

        Pri tejto úlohe môžeš skúšať čokoľvek chceš, ale mám nápad:

        Skús vytvoriť malý štvorec na konci každej úsečky

        -   každá strana by mala byť dlhá 15 pixelov
        -   otoč sa o 90 stupňov
        -   zopakuj akciu dokopy 4 krát
      courseD_artist_5_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Skús meniť tvary alebo dĺžku úsečiek tak, aby si vytvoril svoje vlastné!"_

        **Pre inšpiráciu:**Svoju kresbu môžeš akokoľvek meniť, ale mám nápad:

        -   Skús vymeniť typy tvarov v strede snehových vločiek s tvarmi na konci každej úsečky!
      courseD_artist_5_2018_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Try changing the shapes or the lengths of the lines to make this your own!\"_\n\n<br/>
        \ \n\n**Inspiration:** You can change your drawing in any way you want, but
        here is an idea:\n\n-   Try switching the types of shape in the middle of
        the snowflake with the one at the end of each line!"
      courseD_artist_6_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Vyskúšajme niečo nové. Teraz poďme korčuľovať kľukato.\"_\n\n<br/>  \n\n**Inšpiruj
        sa:** Skús zmeniť dlhú 150 pixelovú úsečku na 6 krátkych úsečiek po **25**
        pixelov\n\n-   Otoč sa striedavo o **45** stupňov na rôzne strany a rob krátke
        úsečky, aby vznikol kľukatý vzor\n-   Kam potrebuješ vložiť blok `opakuj`,
        aby sa to podarilo?\n-   Koľko krát potrebuješ zopakovať vzor z 2 krátkych
        úsečiek, aby ich bolo spolu 6?"
      courseD_artist_6_2018_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Vyskúšajme niečo nové. Teraz poďme korčuľovať kľukato.\"_\n\n<br/>  \n\n**Inšpiruj
        sa:** Skús zmeniť dlhú 150 pixelovú úsečku na 6 krátkych úsečiek po **25**
        pixelov\n\n-   Otoč sa striedavo o **45** stupňov na rôzne strany a rob krátke
        úsečky, aby vznikol kľukatý vzor\n-   Kam potrebuješ vložiť blok `opakuj`,
        aby sa to podarilo?\n-   Koľko krát potrebuješ zopakovať vzor z 2 krátkych
        úsečiek, aby ich bolo spolu 6?"
      courseD_artist_binary1: "Pripravili sme ti mriežku zloženú z \"pixelov\". Môžeš
        po nej chodiť a kresliť obrázky tak, že \"zapneš\" jednotlivé políčka. \n\nPomôž
        umelcovi v prvom rade nakresliť vzor \"01010101\"."
      courseD_artist_binary1_2018: "Pripravili sme ti mriežku zloženú z \"pixelov\".
        Môžeš po nej chodiť a kresliť obrázky tak, že \"zapneš\" jednotlivé políčka.
        \n\nPomôž umelcovi v prvom rade nakresliť vzor \"01010101\"."
      courseD_artist_binary1_2019: "Pripravili sme ti mriežku zloženú z \"pixelov\".
        Môžeš po nej chodiť a kresliť obrázky tak, že \"zapneš\" jednotlivé políčka.
        \n\nPomôž umelcovi v prvom rade nakresliť vzor \"01010101\"."
      courseD_artist_binary2: |-
        Tu máme funkciu, ktorá vezme binárny reťazec zložený z 1 a 0 a spracuje ich zľava doprava a zhora smerom nadol.

        * * *

        Pokiaľ Umelec natrafí na 1, štvorec vymaľuje. Pokiaľ natrafí na 0, tak štvorec nechá tak.

        * * *

        Spusti tento kód a sleduj, ako Umelec pomocou tejto funkcie nakreslí celý vzor.
      courseD_artist_binary2_2018: |-
        Tu máme funkciu, ktorá vezme binárny reťazec zložený z 1 a 0 a spracuje ich zľava doprava a zhora smerom nadol.

        * * *

        Pokiaľ Umelec natrafí na 1, štvorec vymaľuje. Pokiaľ natrafí na 0, tak štvorec nechá tak.

        * * *

        Spusti tento kód a sleduj, ako Umelec pomocou tejto funkcie nakreslí celý vzor.
      courseD_artist_binary2_2019: |-
        Tu máme funkciu, ktorá vezme binárny reťazec zložený z 1 a 0 a spracuje ich zľava doprava a zhora smerom nadol.

        * * *

        Pokiaľ Umelec natrafí na 1, štvorec vymaľuje. Pokiaľ natrafí na 0, tak štvorec nechá tak.

        * * *

        Spusti tento kód a sleduj, ako Umelec pomocou tejto funkcie nakreslí celý vzor.
      courseD_artist_binary_challenge1_2018: V tejto úlohe môžeš použiť každú binárnu
        hodnotu (0 or 1) iba raz. Na dokončenie kresby skús použiť vnorený cyklus.
      courseD_artist_binary_challenge1_2019: V tejto úlohe môžeš použiť každú binárnu
        hodnotu (0 or 1) iba raz. Na dokončenie kresby skús použiť vnorený cyklus.
      courseD_artist_binary_challenge2_2018: |-
        V tejto mriežke je 256 bitov - to znamená, že aj pri malej zmene môžu vzniknúť veľké problémy. Si dostatočne vytrvalý/á, aby si vrátil/a logo späť do pôvodného stavu?

        ![](https://images.code.org/74e15f513982b47762dd33ebbc21e5e9-image-1498776314610.png)
      courseD_artist_binary_challenge2_2019: |-
        V tejto mriežke je 256 bitov - to znamená, že aj pri malej zmene môžu vzniknúť veľké problémy. Si dostatočne vytrvalý/á, aby si vrátil/a logo späť do pôvodného stavu?

        ![](https://images.code.org/74e15f513982b47762dd33ebbc21e5e9-image-1498776314610.png)
      courseD_artist_nestedLoops1a: "Teraz tento trojuholník zopakuj 6 krát.\n\nPo
        každom trojuholníku sa musíš otočiť o 60 stupňov, aby si mohol nakresliť ďalší. "
      courseD_artist_nestedLoops1a_2018: "Teraz tento trojuholník zopakuj 6 krát.\n\nPo
        každom trojuholníku sa musíš otočiť o 60 stupňov, aby si mohol nakresliť ďalší. "
      courseD_artist_nestedLoops1a_2019: "Teraz tento trojuholník zopakuj 6 krát.\n\nPo
        každom trojuholníku sa musíš otočiť o 60 stupňov, aby si mohol nakresliť ďalší. "
      courseD_artist_nestedLoops2: |-
        Tentoraz vyrieš úlohu s čo najmenším počtom blokov.

        Po každom trojuholníku sa musíš otočiť o 60 stupňov, aby si mohol nakresliť ďalší.
        Všimni si, o čo jednoduchšie to je s použitím **vnorených cyklov**.
      courseD_artist_nestedLoops2_2018: |-
        Tentoraz vyrieš úlohu s čo najmenším počtom blokov.

        Po každom trojuholníku sa musíš otočiť o 60 stupňov, aby si mohol nakresliť ďalší.
        Všimni si, o čo jednoduchšie to je s použitím **vnorených cyklov**.
      courseD_artist_nestedLoops2_2019: |-
        Tentoraz vyrieš úlohu s čo najmenším počtom blokov.

        Po každom trojuholníku sa musíš otočiť o 60 stupňov, aby si mohol nakresliť ďalší.
        Všimni si, o čo jednoduchšie to je s použitím **vnorených cyklov**.
      courseD_artist_nestedLoops4: "Výborne! A teraz urob to isté s týmito kruhmi.
        \n\n-   Každý kruh nakreslíš tak, že sa posunieš o jeden pixel a následne
        otočíš o 1 stupeň a zopakuješ to 360 krát.\n-   Každý kruh začína presne 50
        pixelov od miesta, kde skončil predošlý kruh."
      courseD_artist_nestedLoops4_2018: "Výborne! A teraz urob to isté s týmito kruhmi.
        \n\n-   Každý kruh nakreslíš tak, že sa posunieš o jeden pixel a následne
        otočíš o 1 stupeň a zopakuješ to 360 krát.\n-   Každý kruh začína presne 50
        pixelov od miesta, kde skončil predošlý kruh."
      courseD_artist_nestedLoops4_2019: "Výborne! A teraz urob to isté s týmito kruhmi.
        \n\n-   Každý kruh nakreslíš tak, že sa posunieš o jeden pixel a následne
        otočíš o 1 stupeň a zopakuješ to 360 krát.\n-   Každý kruh začína presne 50
        pixelov od miesta, kde skončil predošlý kruh."
      courseD_artist_nestedLoops5: |-
        Čo sa stane, ak sa medzi kreslením jednotlivých kruhov ešte otočíš o 90 stupňov?

        (Aby si nakreslil takýto obrázok, aj tu musíš medzi kreslením jednotlivých kruhov vždy skočiť o 50 pixelov.)
      courseD_artist_nestedLoops5_2018: |-
        Čo sa stane, ak sa medzi kreslením jednotlivých kruhov ešte otočíš o 90 stupňov?

        (Aby si nakreslil takýto obrázok, aj tu musíš medzi kreslením jednotlivých kruhov vždy skočiť o 50 pixelov.)
      courseD_artist_nestedLoops5_2019: |-
        Čo sa stane, ak sa medzi kreslením jednotlivých kruhov ešte otočíš o 90 stupňov?

        (Aby si nakreslil takýto obrázok, aj tu musíš medzi kreslením jednotlivých kruhov vždy skočiť o 50 pixelov.)
      courseD_artist_nestedLoops7: |-
        Na nakreslenie tohto obrázka využi, čo si sa zatiaľ naučil.

        -   Každý štvorec má stranu o dĺžke **100 pixelov** a **90 stupňové uhly**
        -   Budeš sa musieť otočiť o \*\*60 stupňov po každom štvorci \*\*. Prečo? Pretože tam je 6 štvorcov a 360 stupňov (úplné otočenie) delených 6-imi je 60 stupňov.
        -   Uisti sa, že pred ďalším štvorcom skočíš o **50 pixelov**
      courseD_artist_nestedLoops7_2018: |-
        Na nakreslenie tohto obrázka využi, čo si sa zatiaľ naučil.

        -   Každý štvorec má stranu o dĺžke **100 pixelov** a **90 stupňové uhly**
        -   Budeš sa musieť otočiť o \*\*60 stupňov po každom štvorci \*\*. Prečo? Pretože tam je 6 štvorcov a 360 stupňov (úplné otočenie) delených 6-imi je 60 stupňov.
        -   Uisti sa, že pred ďalším štvorcom skočíš o **50 pixelov**
      courseD_artist_nestedLoops7_2019: |-
        Na nakreslenie tohto obrázka využi, čo si sa zatiaľ naučil.

        -   Každý štvorec má stranu o dĺžke **100 pixelov** a **90 stupňové uhly**
        -   Budeš sa musieť otočiť o \*\*60 stupňov po každom štvorci \*\*. Prečo? Pretože tam je 6 štvorcov a 360 stupňov (úplné otočenie) delených 6-imi je 60 stupňov.
        -   Uisti sa, že pred ďalším štvorcom skočíš o **50 pixelov**
      courseD_artist_nestedLoops8: |-
        Využi, čo si sa naučil v posledných úlohách a nakresli tento obrázok od začiatku.

        -   Každý šesťuholník má **50 pixelov dlhé strany** a na konci hrany je potrebné sa otočiť o **60 stupňov**
      courseD_artist_nestedLoops8_2018: |-
        Využi, čo si sa naučil v posledných úlohách a nakresli tento obrázok od začiatku.

        -   Každý šesťuholník má **50 pixelov dlhé strany** a na konci hrany je potrebné sa otočiť o **60 stupňov**
      courseD_artist_nestedLoops8_2019: |-
        Využi, čo si sa naučil v posledných úlohách a nakresli tento obrázok od začiatku.

        -   Každý šesťuholník má **50 pixelov dlhé strany** a na konci hrany je potrebné sa otočiť o **60 stupňov**
      courseD_artist_nestedLoops9: |-
        \*\*Výzva: \*\* Prídeš na to, ako nakresliť takýto obrázok?

        -   Oba útvary majú **strany o dĺžke 50 pixelov**
        -   Medzi každou dvojicou útvarov, musíš skočiť dopredu o dĺžku jednej strany a otočiť sa o 45 stupňov.
      courseD_artist_nestedLoops9_2018: |-
        \*\*Výzva: \*\* Prídeš na to, ako nakresliť takýto obrázok?

        -   Oba útvary majú **strany o dĺžke 50 pixelov**
        -   Medzi každou dvojicou útvarov, musíš skočiť dopredu o dĺžku jednej strany a otočiť sa o 45 stupňov.
      courseD_artist_nestedLoops9_2019: |-
        \*\*Výzva: \*\* Prídeš na to, ako nakresliť takýto obrázok?

        -   Oba útvary majú **strany o dĺžke 50 pixelov**
        -   Medzi každou dvojicou útvarov, musíš skočiť dopredu o dĺžku jednej strany a otočiť sa o 45 stupňov.
      courseD_artist_nestedLoops9_predict1: |-
        **Challenge:** Can you figure out how to make a picture like this?

        -   Both shapes have 50 pixel sides
      courseD_artist_nestedLoops9_predict1_2018: |-
        **Challenge:** Can you figure out how to make a picture like this?

        -   Both shapes have 50 pixel sides
      courseD_artist_nestedLoops9_predict1_2019: |-
        **Challenge:** Can you figure out how to make a picture like this?

        -   Both shapes have 50 pixel sides
      courseD_artist_nestedLoopsFP: |-
        Teraz je rad na tebe. S vedomosťami, ktoré už máš, nakresli niečo, čo by sa páčilo tebe!

        Nič ti nenapadá? Skús teda nakresliť jeden z týhcto obrázkov:

        ![expandable](https://images.code.org/7ac814e356b3548f57bfab8a9eb31dff-image-1497993113904.png)
        ![expandable](https://images.code.org/bd29d35c9a8abf9d27591b90b0f3ec0f-image-1497993121072.png)
        ![expandable](https://images.code.org/2970f34785e51ae98be7aff6fe0827ce-image-1497993126938.png)
      courseD_artist_nestedLoopsFP_2018: |-
        Teraz je rad na tebe. S vedomosťami, ktoré už máš, nakresli niečo, čo by sa páčilo tebe!

        Nič ti nenapadá? Skús teda nakresliť jeden z týhcto obrázkov:

        ![expandable](https://images.code.org/7ac814e356b3548f57bfab8a9eb31dff-image-1497993113904.png)
        ![expandable](https://images.code.org/bd29d35c9a8abf9d27591b90b0f3ec0f-image-1497993121072.png)
        ![expandable](https://images.code.org/2970f34785e51ae98be7aff6fe0827ce-image-1497993126938.png)
      courseD_artist_nestedLoopsFP_2019: |-
        Teraz je rad na tebe. S vedomosťami, ktoré už máš, nakresli niečo, čo by sa páčilo tebe!

        Nič ti nenapadá? Skús teda nakresliť jeden z týhcto obrázkov:

        ![expandable](https://images.code.org/7ac814e356b3548f57bfab8a9eb31dff-image-1497993113904.png)
        ![expandable](https://images.code.org/bd29d35c9a8abf9d27591b90b0f3ec0f-image-1497993121072.png)
        ![expandable](https://images.code.org/2970f34785e51ae98be7aff6fe0827ce-image-1497993126938.png)
      courseD_artist_nestedLoops_challenge1: |-
        Prídeš na to, ako nakresliť takýto obrázok?

        -   Oba útvary majú **strany o dĺžke 50 pixelov**
        -   Pri kreslení _osemuholníkov_ sa musíš otáčať o \*\* 45 stupňov\*\*.
        -   Pri kreslení _trojuholníkov_ sa musíš otáčať o **120 stupňov**.
      courseD_artist_nestedLoops_challenge1_2018: |-
        Prídeš na to, ako nakresliť takýto obrázok?

        -   Oba útvary majú **strany o dĺžke 50 pixelov**
        -   Pri kreslení _osemuholníkov_ sa musíš otáčať o \*\* 45 stupňov\*\*.
        -   Pri kreslení _trojuholníkov_ sa musíš otáčať o **120 stupňov**.
      courseD_artist_nestedLoops_challenge1_2019: |-
        Prídeš na to, ako nakresliť takýto obrázok?

        -   Oba útvary majú **strany o dĺžke 50 pixelov**
        -   Pri kreslení _osemuholníkov_ sa musíš otáčať o \*\* 45 stupňov\*\*.
        -   Pri kreslení _trojuholníkov_ sa musíš otáčať o **120 stupňov**.
      courseD_artist_nestedLoops_challenge2: |-
        Tento kód má zopár chybičiek! Vieš ich nájsť a opraviť, aby sa obrázok na pracovnej ploche nakreslil správne?

        -   Prvý vnorený cyklus by mal vykresliť osemuholník.
        -   Druhý vnorený cyklus by mal vykresliť šesťuholník.
        -   Tretí vnorený cyklus by mal vykresliť štvorec.
      courseD_artist_nestedLoops_challenge2_2018: |-
        Tento kód má zopár chybičiek! Vieš ich nájsť a opraviť, aby sa obrázok na pracovnej ploche nakreslil správne?

        -   Prvý vnorený cyklus by mal vykresliť osemuholník.
        -   Druhý vnorený cyklus by mal vykresliť šesťuholník.
        -   Tretí vnorený cyklus by mal vykresliť štvorec.
      courseD_artist_nestedLoops_challenge2_2019: |-
        Tento kód má zopár chybičiek! Vieš ich nájsť a opraviť, aby sa obrázok na pracovnej ploche nakreslil správne?

        -   Prvý vnorený cyklus by mal vykresliť osemuholník.
        -   Druhý vnorený cyklus by mal vykresliť šesťuholník.
        -   Tretí vnorený cyklus by mal vykresliť štvorec.
      courseD_artist_project1: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Ahoj, som Elsa z Arendellu, pomôž mi nakresliť tvar.”_\n\nNakresli malý
        tvar o šírke **20 a 50** pixelov.  Akýkoľvek tvar chceš.  \n\n<hr/>\n\nSkús
        vytvoriť mnohouholník, ako jeden z týchto:\\\n![](https://images.code.org/14e58b3901ca7c13319cc64f18ae5d82-image-1495765942356.21.06.png)\n![](https://images.code.org/8f79d689ea4936a3725a37025f8fda40-image-1495765942357.25.49.png)\n![](https://images.code.org/e5d222ae7356af4811aa153640af135e-image-1495765942357.26.09.png)
        \ \n\nAlebo aj abstraktný tvar, ako jeden z týchto:\\\n![](https://images.code.org/8471c095219da3044b3830bebeedefb3-image-1496436883704.32.19.png)\n![](https://images.code.org/2fe6ed2db5308f4b34f7632fc6b8a64d-image-1496436883705.40.32.png)\n![](https://images.code.org/abb0947f634bc4b712d47516587a6cb8-image-1496436883705.47.21.png)"
      courseD_artist_project1_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Ahoj, som Elsa z Arendellu, pomôž mi nakresliť tvar.”_\n\nNakresli malý
        tvar o šírke **20 a 50** pixelov.  Akýkoľvek tvar chceš.  \n\n<hr/>\n\nSkús
        vytvoriť mnohouholník, ako jeden z týchto:\\\n![](https://images.code.org/14e58b3901ca7c13319cc64f18ae5d82-image-1495765942356.21.06.png)\n![](https://images.code.org/8f79d689ea4936a3725a37025f8fda40-image-1495765942357.25.49.png)\n![](https://images.code.org/e5d222ae7356af4811aa153640af135e-image-1495765942357.26.09.png)
        \ \n\nAlebo aj abstraktný tvar, ako jeden z týchto:\\\n![](https://images.code.org/8471c095219da3044b3830bebeedefb3-image-1496436883704.32.19.png)\n![](https://images.code.org/2fe6ed2db5308f4b34f7632fc6b8a64d-image-1496436883705.40.32.png)\n![](https://images.code.org/abb0947f634bc4b712d47516587a6cb8-image-1496436883705.47.21.png)"
      courseD_artist_project1_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Ahoj, som Elsa z Arendellu, pomôž mi nakresliť tvar.”_\n\nNakresli malý
        tvar o šírke **20 a 50** pixelov.  Akýkoľvek tvar chceš.  \n\n<hr/>\n\nSkús
        vytvoriť mnohouholník, ako jeden z týchto:\\\n![](https://images.code.org/14e58b3901ca7c13319cc64f18ae5d82-image-1495765942356.21.06.png)\n![](https://images.code.org/8f79d689ea4936a3725a37025f8fda40-image-1495765942357.25.49.png)\n![](https://images.code.org/e5d222ae7356af4811aa153640af135e-image-1495765942357.26.09.png)
        \ \n\nAlebo aj abstraktný tvar, ako jeden z týchto:\\\n![](https://images.code.org/8471c095219da3044b3830bebeedefb3-image-1496436883704.32.19.png)\n![](https://images.code.org/2fe6ed2db5308f4b34f7632fc6b8a64d-image-1496436883705.40.32.png)\n![](https://images.code.org/abb0947f634bc4b712d47516587a6cb8-image-1496436883705.47.21.png)"
      courseD_artist_project1a: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Poďme teraz skúsiť niečo nové. Nastal čas korčuľovať sa cik-cak."_

        <img src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png" width="200px" style="float: left; margin: 0 15px 15px 0;" />

        Nakresli schodový vzor. Použi otočky medzi 75 a 105 stupňami, ale uisti sa, že pre pravú i ľavú otočku používaš rovnaký uhol.\
        (Neskôr uvidíš prečo.)
      courseD_artist_project1a_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Poďme teraz skúsiť niečo nové. Nastal čas korčuľovať sa cik-cak."_

        <img src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png" width="200px" style="float: left; margin: 0 15px 15px 0;" />

        Nakresli schodový vzor. Použi otočky medzi 75 a 105 stupňami, ale uisti sa, že pre pravú i ľavú otočku používaš rovnaký uhol.\
        (Neskôr uvidíš prečo.)
      courseD_artist_project1a_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Poďme teraz skúsiť niečo nové. Nastal čas korčuľovať sa cik-cak."_

        <img src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png" width="200px" style="float: left; margin: 0 15px 15px 0;" />

        Nakresli schodový vzor. Použi otočky medzi 75 a 105 stupňami, ale uisti sa, že pre pravú i ľavú otočku používaš rovnaký uhol.\
        (Neskôr uvidíš prečo.)
      courseD_artist_project2: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“A teraz si nakreslime viac rovnakých tvarov.”_\n\nVezmi svoj tvar a nakresli
        ho dva alebo tri razy, medzi nimi skoč dopredu o niekoľko pixlov.  \n\n-   Ak
        skočíš dopredu o **menej** pixelov ako je šírka tvojho tvaru, tvary sa môžu
        prekrývať\n-   Ak skočíš dopredu o **viac** pixelov ako je šírka tvojho tvaru,
        bude medzi nimi medzera\n\n<hr/>\n\nTvoje tvary možno budú v priamom rade
        ako na týchto príkladoch:\n\n![](https://images.code.org/cefc818d8636c7ce185738311870ff1d-image-1495820778762.39.25.png)\n![](https://images.code.org/80dc77914de15685dc696825dff61723-image-1495820778762.39.43.png)\n![](https://images.code.org/00cda078f119b1ddb0af27ae4a44b089-image-1495820778761.39.08.png)\n<br/>
        \ <br/>\n\nAlebo možno budú tvoje tvary uložené do oblúka či kruhu ako tu:
        \n\n![](https://images.code.org/0c4066fe7547bc1f4495aacbeecdea6d-image-1496437220447.47.04.png)\n![](https://images.code.org/4069376b784c147a8d443d49e22f783f-image-1496437220446.40.15.png)\n![](https://images.code.org/02704ab3fb3356f76c544bb64c1a7cce-image-1496437220446.32.04.png)"
      courseD_artist_project2_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“A teraz si nakreslime viac rovnakých tvarov.”_\n\nVezmi svoj tvar a nakresli
        ho dva alebo tri razy, medzi nimi skoč dopredu o niekoľko pixlov.  \n\n-   Ak
        skočíš dopredu o **menej** pixelov ako je šírka tvojho tvaru, tvary sa môžu
        prekrývať\n-   Ak skočíš dopredu o **viac** pixelov ako je šírka tvojho tvaru,
        bude medzi nimi medzera\n\n<hr/>\n\nTvoje tvary možno budú v priamom rade
        ako na týchto príkladoch:\n\n![](https://images.code.org/cefc818d8636c7ce185738311870ff1d-image-1495820778762.39.25.png)\n![](https://images.code.org/80dc77914de15685dc696825dff61723-image-1495820778762.39.43.png)\n![](https://images.code.org/00cda078f119b1ddb0af27ae4a44b089-image-1495820778761.39.08.png)\n<br/>
        \ <br/>\n\nAlebo možno budú tvoje tvary uložené do oblúka či kruhu ako tu:
        \n\n![](https://images.code.org/0c4066fe7547bc1f4495aacbeecdea6d-image-1496437220447.47.04.png)\n![](https://images.code.org/4069376b784c147a8d443d49e22f783f-image-1496437220446.40.15.png)\n![](https://images.code.org/02704ab3fb3356f76c544bb64c1a7cce-image-1496437220446.32.04.png)"
      courseD_artist_project2_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“A teraz si nakreslime viac rovnakých tvarov.”_\n\nVezmi svoj tvar a nakresli
        ho dva alebo tri razy, medzi nimi skoč dopredu o niekoľko pixlov.  \n\n-   Ak
        skočíš dopredu o **menej** pixelov ako je šírka tvojho tvaru, tvary sa môžu
        prekrývať\n-   Ak skočíš dopredu o **viac** pixelov ako je šírka tvojho tvaru,
        bude medzi nimi medzera\n\n<hr/>\n\nTvoje tvary možno budú v priamom rade
        ako na týchto príkladoch:\n\n![](https://images.code.org/cefc818d8636c7ce185738311870ff1d-image-1495820778762.39.25.png)\n![](https://images.code.org/80dc77914de15685dc696825dff61723-image-1495820778762.39.43.png)\n![](https://images.code.org/00cda078f119b1ddb0af27ae4a44b089-image-1495820778761.39.08.png)\n<br/>
        \ <br/>\n\nAlebo možno budú tvoje tvary uložené do oblúka či kruhu ako tu:
        \n\n![](https://images.code.org/0c4066fe7547bc1f4495aacbeecdea6d-image-1496437220447.47.04.png)\n![](https://images.code.org/4069376b784c147a8d443d49e22f783f-image-1496437220446.40.15.png)\n![](https://images.code.org/02704ab3fb3356f76c544bb64c1a7cce-image-1496437220446.32.04.png)"
      courseD_artist_project2a: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Teraz poďme späť po tej istej ceste.\"_\n\nOtoč sa o 180 stupňov a nakresli
        znovu presne ten istý vzor!  \n\n-   Ďalšie úlohy budú jednoduchšie, ak vložíš
        svoj kód do cyklu. Nechaj Elsu kresliť, urob otočku o 180 stupňov, zase nechaj
        Elsu kresliť a znovu otočka o 180 stupňov.\n\n<hr/>\n\nTakto vyzerajú schody
        pri použití uhla 76 stupňov:\n\n![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)"
      courseD_artist_project2a_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Teraz poďme späť po tej istej ceste.\"_\n\nOtoč sa o 180 stupňov a nakresli
        znovu presne ten istý vzor!  \n\n-   Ďalšie úlohy budú jednoduchšie, ak vložíš
        svoj kód do cyklu. Nechaj Elsu kresliť, urob otočku o 180 stupňov, zase nechaj
        Elsu kresliť a znovu otočka o 180 stupňov.\n\n<hr/>\n\nTakto vyzerajú schody
        pri použití uhla 76 stupňov:\n\n![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)"
      courseD_artist_project2a_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Teraz poďme späť po tej istej ceste.\"_\n\nOtoč sa o 180 stupňov a nakresli
        znovu presne ten istý vzor!  \n\n-   Ďalšie úlohy budú jednoduchšie, ak vložíš
        svoj kód do cyklu. Nechaj Elsu kresliť, urob otočku o 180 stupňov, zase nechaj
        Elsu kresliť a znovu otočka o 180 stupňov.\n\n<hr/>\n\nTakto vyzerajú schody
        pri použití uhla 76 stupňov:\n\n![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)"
      courseD_artist_project3: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Poďme z toho vytvoriť snehovú vločku."_

        Po nakreslení radu tvarov skoč s Elsou späť do stredu. Použi blok `skoč na pozíciu v strede do stredu` a otoč ju, aby ďalší rad tvarov nakreslila iným smerom.

        Aké úžasné snehové vločky vieš vytvoriť!

        * * *

        Pozri si tieto príklady s polygónmi:\
        ![](https://images.code.org/b32ebfb3be559bf8a6d017a854e0b97e-image-1495821528995.42.08.png)
        ![](https://images.code.org/08d7155f6829f82d878dfa57ad5dcaf3-image-1495821528996.42.26.png)
        ![](https://images.code.org/7d461ee9046871e6993406e558f28176-image-1495821528996.42.58.png)

        Abstraktné tvary môžu vytvoriť snehovú vločku podobnú na niektorú z týchto:\
        ![](https://images.code.org/376d7ba20b6bb86e08b1675370e87b92-image-1496695869798.44.00.png)
        ![](https://images.code.org/4f649cc779920632674afac5acce5c95-image-1496695869798.47.51.png)
        ![](https://images.code.org/a68f925ffd87241ebc09183acc908b4b-image-1496695869796.31.49.png)
      courseD_artist_project3_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Poďme z toho vytvoriť snehovú vločku."_

        Po nakreslení radu tvarov skoč s Elsou späť do stredu. Použi blok `skoč na pozíciu v strede do stredu` a otoč ju, aby ďalší rad tvarov nakreslila iným smerom.

        Aké úžasné snehové vločky vieš vytvoriť!

        * * *

        Pozri si tieto príklady s polygónmi:\
        ![](https://images.code.org/b32ebfb3be559bf8a6d017a854e0b97e-image-1495821528995.42.08.png)
        ![](https://images.code.org/08d7155f6829f82d878dfa57ad5dcaf3-image-1495821528996.42.26.png)
        ![](https://images.code.org/7d461ee9046871e6993406e558f28176-image-1495821528996.42.58.png)

        Abstraktné tvary môžu vytvoriť snehovú vločku podobnú na niektorú z týchto:\
        ![](https://images.code.org/376d7ba20b6bb86e08b1675370e87b92-image-1496695869798.44.00.png)
        ![](https://images.code.org/4f649cc779920632674afac5acce5c95-image-1496695869798.47.51.png)
        ![](https://images.code.org/a68f925ffd87241ebc09183acc908b4b-image-1496695869796.31.49.png)
      courseD_artist_project3_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Poďme z toho vytvoriť snehovú vločku."_

        Po nakreslení radu tvarov skoč s Elsou späť do stredu. Použi blok `skoč na pozíciu v strede do stredu` a otoč ju, aby ďalší rad tvarov nakreslila iným smerom.

        Aké úžasné snehové vločky vieš vytvoriť!

        * * *

        Pozri si tieto príklady s polygónmi:\
        ![](https://images.code.org/b32ebfb3be559bf8a6d017a854e0b97e-image-1495821528995.42.08.png)
        ![](https://images.code.org/08d7155f6829f82d878dfa57ad5dcaf3-image-1495821528996.42.26.png)
        ![](https://images.code.org/7d461ee9046871e6993406e558f28176-image-1495821528996.42.58.png)

        Abstraktné tvary môžu vytvoriť snehovú vločku podobnú na niektorú z týchto:\
        ![](https://images.code.org/376d7ba20b6bb86e08b1675370e87b92-image-1496695869798.44.00.png)
        ![](https://images.code.org/4f649cc779920632674afac5acce5c95-image-1496695869798.47.51.png)
        ![](https://images.code.org/a68f925ffd87241ebc09183acc908b4b-image-1496695869796.31.49.png)
      courseD_artist_project3a: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Trochu sa zatočme a vyrobme si opäť snehovú vločku."_

        Zrotuj svoj obrazec 5 alebo 6 krát dookola.

        -   Ak budeš rotovať 5 krát,  skús obrazec otáčať o 72 stupňov
        -   Ak zvolíš 6 otočení, skús použiť 60 stupňov
            <hr/>

        Tu je príklad, kde Elsa zrotovala obrazec 6 krát:

        ![](https://images.code.org/b0fe02e728f80ae7a4b731f32371a37b-image-1496697582505.19.34.png)
      courseD_artist_project3a_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Trochu sa zatočme a vyrobme si opäť snehovú vločku."_

        Zrotuj svoj obrazec 5 alebo 6 krát dookola.

        -   Ak budeš rotovať 5 krát,  skús obrazec otáčať o 72 stupňov
        -   Ak zvolíš 6 otočení, skús použiť 60 stupňov
            <hr/>

        Tu je príklad, kde Elsa zrotovala obrazec 6 krát:

        ![](https://images.code.org/b0fe02e728f80ae7a4b731f32371a37b-image-1496697582505.19.34.png)
      courseD_artist_project3a_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Trochu sa zatočme a vyrobme si opäť snehovú vločku."_

        Zrotuj svoj obrazec 5 alebo 6 krát dookola.

        -   Ak budeš rotovať 5 krát,  skús obrazec otáčať o 72 stupňov
        -   Ak zvolíš 6 otočení, skús použiť 60 stupňov
            <hr/>

        Tu je príklad, kde Elsa zrotovala obrazec 6 krát:

        ![](https://images.code.org/b0fe02e728f80ae7a4b731f32371a37b-image-1496697582505.19.34.png)
      courseD_artist_project4: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Čo sa stane, ak nakreslíme jednu snehovú vločku na druhú?\"_\n\nSkús navrstviť
        dve snehové vločky vytvorené z odlišných tvarov na seba s malým natočením
        medzi nimi - pozri čo vznikne! "
      courseD_artist_project4_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Čo sa stane, ak nakreslíme jednu snehovú vločku na druhú?\"_\n\nSkús navrstviť
        dve snehové vločky vytvorené z odlišných tvarov na seba s malým natočením
        medzi nimi - pozri čo vznikne! "
      courseD_artist_project4_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Čo sa stane, ak nakreslíme jednu snehovú vločku na druhú?\"_\n\nSkús navrstviť
        dve snehové vločky vytvorené z odlišných tvarov na seba s malým natočením
        medzi nimi - pozri čo vznikne! "
      courseD_artist_project4a: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)  _"A čo urobíme teraz? Poďme si vytvoriť našu vlastnú zázračnú zimnú krajinu!"_

        Skús sa pohrať s kódom, ktorý už máš vytvorený. Nakresli čokoľvek chceš!

        -   Čo sa stane, keď použiješ dva rôzne uhly pri kreslení schodového vzoru?
        -   Čo sa stane, keď diamantový vzor predĺžiš alebo skrátiš?
        -   Ako to vyzerá, ak nakreslíš druhú vločku cez prvú?
      courseD_artist_project4a_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)  _"A čo urobíme teraz? Poďme si vytvoriť našu vlastnú zázračnú zimnú krajinu!"_

        Skús sa pohrať s kódom, ktorý už máš vytvorený. Nakresli čokoľvek chceš!

        -   Čo sa stane, keď použiješ dva rôzne uhly pri kreslení schodového vzoru?
        -   Čo sa stane, keď diamantový vzor predĺžiš alebo skrátiš?
        -   Ako to vyzerá, ak nakreslíš druhú vločku cez prvú?
      courseD_artist_project4a_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)  _"A čo urobíme teraz? Poďme si vytvoriť našu vlastnú zázračnú zimnú krajinu!"_

        Skús sa pohrať s kódom, ktorý už máš vytvorený. Nakresli čokoľvek chceš!

        -   Čo sa stane, keď použiješ dva rôzne uhly pri kreslení schodového vzoru?
        -   Čo sa stane, keď diamantový vzor predĺžiš alebo skrátiš?
        -   Ako to vyzerá, ak nakreslíš druhú vločku cez prvú?
      courseD_artist_project5: '![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Využi svoju tvorivú fantáziu a vyskúšaj rôzne tvary a uhly - uvidíme aké
        rôzne nové snehové vločky sa ti podarí nakresliť!"_  '
      courseD_artist_project5_2018: '![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Využi svoju tvorivú fantáziu a vyskúšaj rôzne tvary a uhly - uvidíme aké
        rôzne nové snehové vločky sa ti podarí nakresliť!"_  '
      courseD_artist_project5_2019: '![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Využi svoju tvorivú fantáziu a vyskúšaj rôzne tvary a uhly - uvidíme aké
        rôzne nové snehové vločky sa ti podarí nakresliť!"_  '
      courseD_artist_ramp11: |-
        Great!  Now let's make a square using Artist!  The blocks are a little different, but the idea is the same.

        * * *

        Each side of the square has a length of 200 pixels, and you will need to turn 90 degrees to make each angle.
      courseD_artist_ramp12: |-
        Use what you've learned to draw this triangle inside of a square.

        * * *

        ##### The sides are each 200 pixels long. You will need to turn 90 degrees to make the square and 120 degrees to make the triangle.
      courseD_autorun_binary2_2019: |-
        Tu máme funkciu, ktorá vezme binárny reťazec zložený z 1 a 0 a spracuje ich zľava doprava a zhora smerom nadol.

        * * *

        Pokiaľ Umelec natrafí na 1, štvorec vymaľuje. Pokiaľ natrafí na 0, tak štvorec nechá tak.

        * * *

        Spusti tento kód a sleduj, ako Umelec pomocou tejto funkcie nakreslí celý vzor.
      courseD_bee_conditionals10: |-
        Podmienky môžu byť nápomocné aj vtedy, keď presne vieš, čo sa na každom mieste nachádza!

        Pozberaj všetok nektár a urob z neho med.
      courseD_bee_conditionals10_2018: |-
        Podmienky môžu byť nápomocné aj vtedy, keď presne vieš, čo sa na každom mieste nachádza!

        Pozberaj všetok nektár a urob z neho med.
      courseD_bee_conditionals10_2019: |-
        Podmienky môžu byť nápomocné aj vtedy, keď presne vieš, čo sa na každom mieste nachádza!

        Pozberaj všetok nektár a urob z neho med.
      courseD_bee_conditionals1_predict1: |-
        _"Tento oblak mi zacláňa vo výhľade!"_

         Skontroluj, či je pod oblakom kvet. Ak sa tam kvet nachádza, pozberaj  nektár.
      courseD_bee_conditionals1_predict1_2018: |-
        _"Tento oblak mi zacláňa vo výhľade!"_

         Skontroluj, či je pod oblakom kvet. Ak sa tam kvet nachádza, pozberaj  nektár.
      courseD_bee_conditionals1_predict1_2019: |-
        _"Tento oblak mi zacláňa vo výhľade!"_

         Skontroluj, či je pod oblakom kvet. Ak sa tam kvet nachádza, pozberaj  nektár.
      courseD_bee_conditionals1_predict1_copy: |-
        _"Tento oblak mi zacláňa vo výhľade!"_

         Skontroluj, či je pod oblakom kvet. Ak sa tam kvet nachádza, pozberaj  nektár.
      courseD_bee_conditionals2: |-
        Viac oblakov!

        Skôr ako zoberieš nektár, skontroluj, či sa pod každým oblakom nachádza kvet. Ak je pod oblakom kvet, včela _ihneď_ pozbiera nektár.

        Pamätaj: Nie pod všetkými oblakmi sa skrýva tá istá vec!
      courseD_bee_conditionals2_2018: |-
        Viac oblakov!

        Skôr ako zoberieš nektár, skontroluj, či sa pod každým oblakom nachádza kvet. Ak je pod oblakom kvet, včela _ihneď_ pozbiera nektár.

        Pamätaj: Nie pod všetkými oblakmi sa skrýva tá istá vec!
      courseD_bee_conditionals2_2019: |-
        Viac oblakov!

        Skôr ako zoberieš nektár, skontroluj, či sa pod každým oblakom nachádza kvet. Ak je pod oblakom kvet, včela _ihneď_ pozbiera nektár.

        Pamätaj: Nie pod všetkými oblakmi sa skrýva tá istá vec!
      courseD_bee_conditionals2_copy: |-
        Viac oblakov!

        Skôr ako zoberieš nektár, skontroluj, či sa pod každým oblakom nachádza kvet. Ak je pod oblakom kvet, včela _ihneď_ pozbiera nektár.

        Pamätaj: Nie pod všetkými oblakmi sa skrýva tá istá vec!
      courseD_bee_conditionals3: Nektár môžeš zbierať len z kvetov, ale musíš skontrolovať
        každé miestečko, aby si si overil, či sa tam nenachádza kvet. Ak sa pod oblakom
        nachádza kvet, včela bude musieť _ihneď_ pozberať nektár.
      courseD_bee_conditionals3_2018: Nektár môžeš zbierať len z kvetov, ale musíš
        skontrolovať každé miestečko, aby si si overil, či sa tam nenachádza kvet.
        Ak sa pod oblakom nachádza kvet, včela bude musieť _ihneď_ pozberať nektár.
      courseD_bee_conditionals3_2019: Nektár môžeš zbierať len z kvetov, ale musíš
        skontrolovať každé miestečko, aby si si overil, či sa tam nenachádza kvet.
        Ak sa pod oblakom nachádza kvet, včela bude musieť _ihneď_ pozberať nektár.
      courseD_bee_conditionals3_copy: Nektár môžeš zbierať len z kvetov, ale musíš
        skontrolovať každé miestečko, aby si si overil, či sa tam nenachádza kvet.
        Ak sa pod oblakom nachádza kvet, včela bude musieť _ihneď_ pozberať nektár.
      courseD_bee_conditionals4: |-
        Vieme, že z každého kvetu je možné dostať nektár, ale v tejto úlohe kvety nie sú rovnomerne rozložené.

        Zober všetok nektár, s použitím čo najmänšieho počtu blokov.
      courseD_bee_conditionals4_2018: |-
        Vieme, že z každého kvetu je možné dostať nektár, ale v tejto úlohe kvety nie sú rovnomerne rozložené.

        Zober všetok nektár, s použitím čo najmänšieho počtu blokov.
      courseD_bee_conditionals4_2019: |-
        Vieme, že z každého kvetu je možné dostať nektár, ale v tejto úlohe kvety nie sú rovnomerne rozložené.

        Zober všetok nektár, s použitím čo najmänšieho počtu blokov.
      courseD_bee_conditionals4_copy: |-
        Vieme, že z každého kvetu je možné dostať nektár, ale v tejto úlohe kvety nie sú rovnomerne rozložené.

        Zober všetok nektár, s použitím čo najmänšieho počtu blokov.
      courseD_bee_conditionals6: "_\"Teraz chcem len vyrábať med.\"_ \n\nPod niekotorými
        z týchto oblakov sa môžu schovávať plásty. Skontroluj všetky oblaky, či sa
        tam nachádzajú plásty! Ak je tam plást, včela z neho _ihneď_ spraví med."
      courseD_bee_conditionals6_2018: "_\"Teraz chcem len vyrábať med.\"_ \n\nPod
        niekotorými z týchto oblakov sa môžu schovávať plásty. Skontroluj všetky oblaky,
        či sa tam nachádzajú plásty! Ak je tam plást, včela z neho _ihneď_ spraví
        med."
      courseD_bee_conditionals6_2019: "_\"Teraz chcem len vyrábať med.\"_ \n\nPod
        niekotorými z týchto oblakov sa môžu schovávať plásty. Skontroluj všetky oblaky,
        či sa tam nachádzajú plásty! Ak je tam plást, včela z neho _ihneď_ spraví
        med."
      courseD_bee_conditionals7: "Niekedy sa pod oblakom skrýva kvet a niekedy včelí
        plást! \n\nPouži blok `ak/inak` na získanie nektáru z kvetov a výrobu medu
        z plástov. Pamätaj: ak je tam kvet, včela musí zobrať nektár  _ihneď_. Ak
        je tam plást, včela musí  _ihneď_ spraviť med."
      courseD_bee_conditionals7_2018: "Niekedy sa pod oblakom skrýva kvet a niekedy
        včelí plást! \n\nPouži blok `ak/inak` na získanie nektáru z kvetov a výrobu
        medu z plástov. Pamätaj: ak je tam kvet, včela musí zobrať nektár  _ihneď_.
        Ak je tam plást, včela musí  _ihneď_ spraviť med."
      courseD_bee_conditionals7_2019: "Niekedy sa pod oblakom skrýva kvet a niekedy
        včelí plást! \n\nPouži blok `ak/inak` na získanie nektáru z kvetov a výrobu
        medu z plástov. Pamätaj: ak je tam kvet, včela musí zobrať nektár  _ihneď_.
        Ak je tam plást, včela musí  _ihneď_ spraviť med."
      courseD_bee_conditionals7_predict2: |-
        Niekedy sa pod oblakom skrýva kvet a niekedy včelí plást!

        Použi blok `ak/inak` na získanie nektáru z kvetov a výrobu medu z plástov. Zapamätaj si, že pod každým oblakom je vždy len _jeden_plást alebo _jeden_kvet.
      courseD_bee_conditionals7_predict2_2018: "Niekedy sa pod oblakom skrýva kvet
        a niekedy plást! \n\nPouži blok `ak/inak` na získanie nektáru z kvetov a výrobu
        medu z plástov. Zapamätaj si, že pod každým oblakom je vždy len _jeden_plást
        alebo _jeden_kvet."
      courseD_bee_conditionals7_predict2_2019: "Niekedy sa pod oblakom skrýva kvet
        a niekedy plást! \n\nPouži blok `ak/inak` na získanie nektáru z kvetov a výrobu
        medu z plástov. Zapamätaj si, že pod každým oblakom je vždy len _jeden_plást
        alebo _jeden_kvet."
      courseD_bee_conditionals8: |-
        **Výzva:** Pod každým z oblakov bude buď kvet alebo včelí plást!

        Ak bude kvet, pozberaj nektár.
        V opačnom prípade, vyrob med (lebo je to plást).
      courseD_bee_conditionals8_2018: |-
        **Výzva:** Pod každým z oblakov bude buď kvet alebo včelí plást!

        Ak bude kvet, pozberaj nektár.
        V opačnom prípade, vyrob med (lebo je to plást).
      courseD_bee_conditionals8_2019: |-
        **Výzva:** Pod každým z oblakov bude buď kvet alebo včelí plást!

        Ak bude kvet, pozberaj nektár.
        V opačnom prípade, vyrob med (lebo je to plást).
      courseD_bee_conditionals9: |-
        Pozberaj všetok nektár a vyrob z neho med. Nektár môžeš zberať len z kvetov a med vyrábať z plástov.
        Skontroluj každé pole a zisti, či je tam kvet, alebo plást. Pod každým oblakom je buď jeden kvet, alebo jeden plást.
      courseD_bee_conditionals9_2018: |-
        Pozberaj všetok nektár a vyrob z neho med. Nektár môžeš zberať len z kvetov a med vyrábať z plástov.
        Skontroluj každé pole a zisti, či je tam kvet, alebo plást. Pod každým oblakom je buď jeden kvet, alebo jeden plást.
      courseD_bee_conditionals9_2019: |-
        Pozberaj všetok nektár a vyrob z neho med. Nektár môžeš zberať len z kvetov a med vyrábať z plástov.
        Skontroluj každé pole a zisti, či je tam kvet, alebo plást. Pod každým oblakom je buď jeden kvet, alebo jeden plást.
      courseD_bee_conditionals_challenge1: |-
        Pozberaj všetok nektár a vyrob z neho med. Nektár môžeš zberať len z kvetov a med vyrábať z plástov.
        Skontroluj každé pole a zisti, či je tam kvet, alebo plást.
      courseD_bee_conditionals_challenge1_2018: |-
        Pozberaj všetok nektár a vyrob z neho med. Nektár môžeš zberať len z kvetov a med vyrábať z plástov.
        Skontroluj každé pole a zisti, či je tam kvet, alebo plást.
      courseD_bee_conditionals_challenge1_2019: |-
        Pozberaj všetok nektár a vyrob z neho med. Nektár môžeš zberať len z kvetov a med vyrábať z plástov.
        Skontroluj každé pole a zisti, či je tam kvet, alebo plást.
      courseD_bee_conditionals_challenge2: Collect all of the nectar and make all
        the honey. You can collect all of the nectar in one flower by using the `while
        nectar > 0` loop.
      courseD_bee_conditionals_challenge2_2018: Collect all of the nectar and make
        all the honey. You can collect all of the nectar in one flower by using the
        `while nectar > 0` loop.
      courseD_bee_conditionals_challenge2_2019: Collect all of the nectar and make
        all the honey. You can collect all of the nectar in one flower by using the
        `while nectar > 0` loop.
      courseD_bee_debugging_challenge1: Watch how the bees gets the nectar. Can you
        use the same kind of pattern to help the bee make all of the honey?
      courseD_bee_debugging_challenge1a: |-
        _"Buzz buzz! I know how to get nectar, now help me make honey!"_

        Watch how the bee gets the nectar. Can you use the same kind of pattern to help the bee make all of the honey?
      courseD_bee_nestedLoops1: |-
        "_Chystá sa niečo **VČEĽKÉ**!_"

        Pomôž včele zozbierať všetok nektár.
      courseD_bee_nestedLoops1_2018: |-
        "_Chystá sa niečo **VČEĽKÉ**!_"

        Pomôž včele zozbierať všetok nektár.
      courseD_bee_nestedLoops1_2019: |-
        "_Chystá sa niečo **VČEĽKÉ**!_"

        Pomôž včele zozbierať všetok nektár.
      courseD_bee_nestedLoops1a: |-
        _"Toto bude **VČEĽKÉ**!"_

        Pomôž včele zozbierať všetok nektár.
      courseD_bee_nestedLoops1a_2018: |-
        _"Toto bude **VČEĽKÉ**!"_

        Pomôž včele zozbierať všetok nektár.
      courseD_bee_nestedLoops1a_2019: |-
        _"Toto bude **VČEĽKÉ**!"_

        Pomôž včele zozbierať všetok nektár.
      courseD_bee_nestedLoops2: Aj v tejto úlohe pomôž včele zozbierať všetok nektár,
        skús ale použiť čo najmenej blokov.
      courseD_bee_nestedLoops2_2018: Aj v tejto úlohe pomôž včele zozbierať všetok
        nektár, skús ale použiť čo najmenej blokov.
      courseD_bee_nestedLoops2_2019: Aj v tejto úlohe pomôž včele zozbierať všetok
        nektár, skús ale použiť čo najmenej blokov.
      courseD_bee_nestedLoops2_predict1: Aj v tejto úlohe pomôž včele zozbierať všetok
        nektár, skús ale použiť čo najmenej blokov.
      courseD_bee_nestedLoops2_predict1_2018: Aj v tejto úlohe pomôž včele zozbierať
        všetok nektár, skús ale použiť čo najmenej blokov.
      courseD_bee_nestedLoops2_predict1_2019: Aj v tejto úlohe pomôž včele zozbierať
        všetok nektár, skús ale použiť čo najmenej blokov.
      courseD_bee_nestedLoops7: "**Výzva:** Vymysli, ako pozbierať všetok nektár pomocou
        dostupných blokov."
      courseD_bee_nestedLoops7_2018: "**Výzva:** Vymysli, ako pozbierať všetok nektár
        pomocou dostupných blokov."
      courseD_bee_nestedLoops7_2019: "**Výzva:** Vymysli, ako pozbierať všetok nektár
        pomocou dostupných blokov."
      courseD_bee_nestedLoops8: 'Pozbieraj všetok nektár z každého kvetu a v plástoch
        vyrob med. '
      courseD_bee_nestedLoops8_2018: 'Pozbieraj všetok nektár z každého kvetu a v
        plástoch vyrob med. '
      courseD_bee_nestedLoops8_2019: 'Pozbieraj všetok nektár z každého kvetu a v
        plástoch vyrob med. '
      courseD_bee_nestedLoops9: Vyrob všetok med.
      courseD_bee_nestedLoops9_2018: Vyrob všetok med.
      courseD_bee_nestedLoops9_2019: Vyrob všetok med.
      courseD_bee_nestedLoops9_predict2: Vyrob všetok med.
      courseD_bee_nestedLoops9_predict2_2018: Vyrob všetok med.
      courseD_bee_nestedLoops9_predict2_2019: Vyrob všetok med.
      courseD_bounce_events10s_2018: |-
        Teraz máme kôš navrchu ihriska.

        Pripoj blok `pridaj bod` pod blok s udalosťou `keď je lopta v bránke` a blok `pridaj bod súperovi` pod blok  s udalosťou `keď lopta netrafí ruku` a hra môže začať.

        * * *

        Skús získať čo najviac bodov predtým, ako tvoj súper získa 2 body.
      courseD_bounce_events10s_2019: |-
        Teraz máme kôš navrchu ihriska.

        Pripoj blok `pridaj bod` pod blok s udalosťou `keď je lopta v bránke` a blok `pridaj bod súperovi` pod blok  s udalosťou `keď lopta netrafí ruku` a hra môže začať.

        * * *

        Skús získať čo najviac bodov predtým, ako tvoj súper získa 2 body.
      courseD_bounce_events11s_2018: |-
        Teraz máš loptu vo svojich rukách! Pridaj blok `hodiť novú loptu` všade tam, kde je potrebné vhodiť do hry loptu.

        * * *

        Skús získať čo najviac bodov predtým, ako tvoj súper získa 2 body!
      courseD_bounce_events11s_2019: |-
        Teraz máš loptu vo svojich rukách! Pridaj blok `hodiť novú loptu` všade tam, kde je potrebné vhodiť do hry loptu.

        * * *

        Skús získať čo najviac bodov predtým, ako tvoj súper získa 2 body!
      courseD_bounce_events1s_2018: |-
        Dostaň sa ku košu!

        Pripoj správny blok ku udalosti  `keď šípka vľavo`, stlač "Spustiť" a šípkou posuň hráča ku košu.
      courseD_bounce_events1s_2019: |-
        Dostaň sa ku košu!

        Pripoj správny blok ku udalosti  `keď šípka vľavo`, stlač "Spustiť" a šípkou posuň hráča ku košu.
      courseD_bounce_events2s_2018: Teraz pripoj blok ku udalosti `keď šípka vpravo`,
        aby sa ruka mohla dostať ku obom košom.
      courseD_bounce_events2s_2019: Teraz pripoj blok ku udalosti `keď šípka vpravo`,
        aby sa ruka mohla dostať ku obom košom.
      courseD_bounce_events5s_2018: K ruke hodíme loptu. Pridaj blok ku bloku s udalosťou
        `keď lopta zasiahne ruku`, aby sa lopta odrazila do koša.
      courseD_bounce_events5s_2019: K ruke hodíme loptu. Pridaj blok ku bloku s udalosťou
        `keď lopta zasiahne ruku`, aby sa lopta odrazila do koša.
      courseD_bounce_events6s_2018: "Teraz máme kôš hore.  \n\nPridaj kód (bloky),
        aby sa lopta odrazila od steny a trafila do koša."
      courseD_bounce_events6s_2019: "Teraz máme kôš hore.  \n\nPridaj kód (bloky),
        aby sa lopta odrazila od steny a trafila do koša."
      courseD_bounce_events7s_2018: "Pridaj bloky so zvukom, aby zašuchotala sieťka,
        keď lopta trafí kôš, a aby zapískala píšťalka, keď lopta netrafí ruku. \n\n*
        * *\n\nOdrážaj loptu, kým nezasiahne svoj cieľ."
      courseD_bounce_events7s_2019: "Pridaj bloky so zvukom, aby zašuchotala sieťka,
        keď lopta trafí kôš, a aby zapískala píšťalka, keď lopta netrafí ruku. \n\n*
        * *\n\nOdrážaj loptu, kým nezasiahne svoj cieľ."
      courseD_collector_debugging1: |-
        _"Oh nie! Vidím tu problém"_

        Oprav chyby a pozbieraj všetky drahokamy.
      courseD_collector_debugging10_predict1: |-
        _"To je ako na ostrove pokladov!"_

        Pomôž Laurel opraviť kód a pozbierať všetky drahokamy.
      courseD_collector_debugging1a_2018: |-
        _"Oh nie! Vidím tu problém"_

        Oprav chyby a pozbieraj všetky drahokamy.
      courseD_collector_debugging1a_2019: |-
        _"Oh nie! Vidím tu problém"_

        Oprav chyby a pozbieraj všetky drahokamy.
      courseD_collector_debugging2: |-
        _"Dokážeš to!"_

        Oprav chyby a pozbieraj všetky drahokamy.
      courseD_collector_debugging2a_2018: |-
        _"Dokážeš to!"_

        Oprav chyby a pozbieraj všetky drahokamy.
      courseD_collector_debugging2a_2019: |-
        _"Dokážeš to!"_

        Oprav chyby a pozbieraj všetky drahokamy.
      courseD_collector_debugging3: |-
        _"Buď vytrvalý a určite na to prídeš."_

        Oprav chyby a pozbieraj všetky drahokamy.
      courseD_collector_debugging3a_2018: |-
        _"Buď vytrvalý a určite na to prídeš."_

        Oprav chyby a pozbieraj všetky drahokamy.
      courseD_collector_debugging3a_2019: |-
        _"Buď vytrvalý a určite na to prídeš."_

        Oprav chyby a pozbieraj všetky drahokamy.
      courseD_collector_debugging4: |-
        _"Nepoddaj sa frustrácii. Zvládneš to!"_

        Oprav chyby a pozbieraj všetky drahokamy.
      courseD_collector_debugging4a_2018: |-
        _"Nepoddaj sa frustrácii. Zvládneš to!"_

        Oprav chyby a pozbieraj všetky drahokamy.
      courseD_collector_debugging4a_2019: |-
        _"Nepoddaj sa frustrácii. Zvládneš to!"_

        Oprav chyby a pozbieraj všetky drahokamy.
      courseD_collector_debugging5: |-
        _"Z tejto úlohy sa mi točí hlava!"_

        Všetky príkazy ktoré potrebuješ sú už tu...teraz použi svoje schopnosti v hľadaní chýb a vyrieš túto úlohu.
      courseD_collector_debugging5a_2018: |-
        _"Z tejto úlohy sa mi točí hlava!"_

        Všetky príkazy ktoré potrebuješ sú už tu...teraz použi svoje schopnosti v hľadaní chýb a vyrieš túto úlohu.
      courseD_collector_debugging5a_2019: |-
        _"Z tejto úlohy sa mi točí hlava!"_

        Všetky príkazy ktoré potrebuješ sú už tu...teraz použi svoje schopnosti v hľadaní chýb a vyrieš túto úlohu.
      courseD_collector_debugging6: "**Výzva:** Všetky bloky ktoré potrebuješ sú už
        tu...teraz použi svoje schopnosti v hľadaní chýb a pozbieraj všetky drahokamy."
      courseD_collector_debugging6a_2018: 'Výzva: Použí kód, ktorý už máš na pracovnej
        ploche nato, aby si pozbieral aspoň 6 drahokamov!'
      courseD_collector_debugging6a_2019: 'Výzva: Použí kód, ktorý už máš na pracovnej
        ploche nato, aby si pozbieral aspoň 6 drahokamov!'
      courseD_collector_debugging8: |-
        _"Toľko drahokamov!"_

        Pomôž Laurel opraviť kód a pozbierať všetky drahokamy.
      courseD_collector_debugging8a_2018: |-
        _"Toľko drahokamov!"_

        Pomôž Laurel opraviť kód a pozbierať všetky drahokamy.
      courseD_collector_debugging8a_2019: |-
        _"Toľko drahokamov!"_

        Pomôž Laurel opraviť kód a pozbierať všetky drahokamy.
      courseD_collector_debugging9: |-
        _"To je ako na ostrove pokladov!"_

        Pomôž Laurel opraviť kód a pozbierať všetky drahokamy.
      courseD_collector_debugging9a_2018: |-
        _"To je ako na ostrove pokladov!"_

        Pomôž Laurel opraviť kód a pozbierať všetky drahokamy.
      courseD_collector_debugging9a_2019: |-
        _"To je ako na ostrove pokladov!"_

        Pomôž Laurel opraviť kód a pozbierať všetky drahokamy.
      courseD_collector_nested_loops_challenge2: "_\"Poďme pátrať po poklade - pomocou
        cyklov!\"_ \n\nPomôž zberateľke získať aspoň 2 drahokamy len s blokmi, ktoré
        máš v paneli nástrojov. Je však možné pozbierať všetky 4."
      courseD_collector_nested_loops_challenge2_2018: "_\"Poďme pátrať po poklade
        - pomocou cyklov!\"_ \n\nPomôž zberateľke získať aspoň 2 drahokamy len s blokmi,
        ktoré máš v paneli nástrojov. Je však možné pozbierať všetky 4."
      courseD_collector_nested_loops_challenge2_2019: "_\"Poďme pátrať po poklade
        - pomocou cyklov!\"_ \n\nPomôž zberateľke získať aspoň 2 drahokamy len s blokmi,
        ktoré máš v paneli nástrojov. Je však možné pozbierať všetky 4."
      courseD_collector_nested_loops_challenge2a: "_\"Poďme pátrať po poklade - pomocou
        cyklov!\"_ \n\nPomôž Laurel získať aspoň 2 drahokamy len s blokmi, ktoré máš
        v paneli nástrojov. Je však možné pozbierať všetky 4."
      courseD_collector_ramp10: Walk Laurel around this square collecting the treasure
        as you find it.
      courseD_collector_ramp8: |-
        This puzzle is a lot like the last one, but now it stars Laurel the Adventurer!

        * * *

        Take the same path as before, but this time, use a repeat loop to collect treasure when you get to it.
      courseD_collector_ramp9: Now there's more treasure.  Can you help Laurel collect
        it all?
      courseD_farmer_condLoops1: |-
        _"Pomôžeš mi dnes pozbierať kukuricu?"_
        Pomož skontrolovať záhradníčke riadky kukurice a zisti, či sa už dá pozberať. Použi podmienky a skontroluj každý výhonok. Každá byľ bude mať buď **0 alebo 1** kukuricu, ktorú môžeš pozbierať.
      courseD_farmer_condLoops1_2018: |-
        _"Pomôžeš mi dnes pozbierať kukuricu?"_
        Pomož skontrolovať záhradníčke riadky kukurice a zisti, či sa už dá pozberať. Použi podmienky a skontroluj každý výhonok. Každá byľ bude mať buď **0 alebo 1** kukuricu, ktorú môžeš pozbierať.
      courseD_farmer_condLoops1_2019: |-
        _"Pomôžeš mi dnes pozbierať kukuricu?"_
        Pomož skontrolovať záhradníčke riadky kukurice a zisti, či sa už dá pozberať. Použi podmienky a skontroluj každý výhonok. Každá byľ bude mať buď **0 alebo 1** kukuricu, ktorú môžeš pozbierať.
      courseD_farmer_condLoops2: |-
        _"Pozberaj šalát aj kukuricu!"_
        V tejto záhrade je všetko pomiešané. Je tam **kukurica a šalát**!\
        Pomôž záhradníčke pozberať dozretú úrodu. Každá rastlina bude mať **jednu** kukuricu alebo **jeden** šalát.
      courseD_farmer_condLoops2_2018: |-
        _"Pozberaj šalát aj kukuricu!"_
        V tejto záhrade je všetko pomiešané. Je tam **kukurica a šalát**!\
        Pomôž záhradníčke pozberať dozretú úrodu. Každá rastlina bude mať **jednu** kukuricu alebo **jeden** šalát.
      courseD_farmer_condLoops2_2019: |-
        _"Pozberaj šalát aj kukuricu!"_
        V tejto záhrade je všetko pomiešané. Je tam **kukurica a šalát**!\
        Pomôž záhradníčke pozberať dozretú úrodu. Každá rastlina bude mať **jednu** kukuricu alebo **jeden** šalát.
      courseD_farmer_condLoops3: |-
        _"Kukurica, šalát a tekvice! Pomôž mi pozbierať všetky."_

        Každá rastlina bude mať buď kukuricu, hlávku šalátu, alebo tekvicu.
      courseD_farmer_condLoops3_2018: |-
        _"Kukurica, šalát a tekvice! Pomôž mi pozbierať všetky."_

        Každá rastlina bude mať buď kukuricu, hlávku šalátu, alebo tekvicu.
      courseD_farmer_condLoops3_2019: |-
        _"Kukurica, šalát a tekvice! Pomôž mi pozbierať všetky."_

        Každá rastlina bude mať buď kukuricu, hlávku šalátu, alebo tekvicu.
      courseD_farmer_condLoops4: "_\"Gosh! Now the lettuce is growing in clusters!\"_
        \ \n\nThe harvester wants to pick everything from her lettuce garden. Each
        plant will now have more than one head of lettuce on it, so the farmer will
        need to keep picking while there is still lettuce growing.  \n\n##### (Remember:
        This garden only has lettuce!)"
      courseD_farmer_condLoops4_2018: "_\"A sakra! Šalát sa začal rozrastať!\"_  \n\nZáhradníčka
        chce pozbierať všetok šalát zo svojej záhrady. Každá rastlina má teraz viac
        ako len jednu hlávku šalátu, takže záhradníčka musí zbierať, zatiaľ čo nový
        šalát stále dorastá.  \n\n##### (Zapamätaj si: V tejto záhrade rastie len
        šalát!)"
      courseD_farmer_condLoops4_2019: "_\"A sakra! Šalát sa začal rozrastať!\"_  \n\nZáhradníčka
        chce pozbierať všetok šalát zo svojej záhrady. Každá rastlina má teraz viac
        ako len jednu hlávku šalátu, takže záhradníčka musí zbierať, zatiaľ čo nový
        šalát stále dorastá.  \n\n##### (Zapamätaj si: V tejto záhrade rastie len
        šalát!)"
      courseD_farmer_condLoops5: |-
        _"Aká bohatá úroda!"_

        Na poli rastie množstvo kukurice a šalátu a na konci jedna tekvica. Pozberáš celú úrodu?
      courseD_farmer_condLoops5_2018: |-
        _"Aká bohatá úroda!"_

        Na poli rastie množstvo kukurice a šalátu a na konci jedna tekvica. Pozberáš celú úrodu?
      courseD_farmer_condLoops5_2019: |-
        _"Aká bohatá úroda!"_

        Na poli rastie množstvo kukurice a šalátu a na konci jedna tekvica. Pozberáš celú úrodu?
      courseD_farmer_condLoops6: |-
        _"Poďme ešte o krok ďalej!"_

        Zistíš, ako zobrať tekvicu? Určite po ceste pozbieraj všetku kukuricu!
      courseD_farmer_condLoops6_2018: |-
        _"Poďme ešte o krok ďalej!"_

        Zistíš, ako zobrať tekvicu? Určite po ceste pozbieraj všetku kukuricu!
      courseD_farmer_condLoops6_2019: |-
        _"Poďme ešte o krok ďalej!"_

        Zistíš, ako zobrať tekvicu? Určite po ceste pozbieraj všetku kukuricu!
      courseD_farmer_condLoops7: "\\*\\*Výzva: Pozbieraj všetku kukuricu a šalát a
        potom zober tekvicu."
      courseD_farmer_condLoops7_2018: "\\*\\*Výzva: Pozbieraj všetku kukuricu a šalát
        a potom zober tekvicu."
      courseD_farmer_condLoops7_2019: "\\*\\*Výzva: Pozbieraj všetku kukuricu a šalát
        a potom zober tekvicu."
      courseD_farmer_condLoops8: Pozbieraj všetku kukuricu a šalát a potom zober tekvicu.
      courseD_farmer_condLoops8_2018: Pozbieraj všetku kukuricu a šalát a potom zober
        tekvicu.
      courseD_farmer_condLoops8_2019: Pozbieraj všetku kukuricu a šalát a potom zober
        tekvicu.
      courseD_farmer_condLoops9: Pozbieraj všetku kukuricu a šalát a potom zober tekvicu.
      courseD_farmer_condLoops9_2018: Pozbieraj všetku kukuricu a šalát a potom zober
        tekvicu.
      courseD_farmer_condLoops9_2019: Pozbieraj všetku kukuricu a šalát a potom zober
        tekvicu.
      courseD_farmer_condLoops9_predict1: Pozbieraj všetku kukuricu a šalát a potom
        zober tekvicu.
      courseD_farmer_condLoops9_predict1_2018: Pozbieraj všetku kukuricu a šalát a
        potom zober tekvicu.
      courseD_farmer_condLoops9_predict1_2019: Pozbieraj všetku kukuricu a šalát a
        potom zober tekvicu.
      courseD_farmer_condLoops_challenge1: "The pumpkins mark the place where you
        should `turn right`. Otherwise keep going forward, but remember to collect
        all of the lettuce or corn along the way. \n\n**Each hidden crop has only
        one corn or lettuce.**"
      courseD_farmer_condLoops_challenge1_2018: "The pumpkins mark the place where
        you should `turn right`. Otherwise keep going forward, but remember to collect
        all of the lettuce or corn along the way. \n\n**Each hidden crop has only
        one corn or lettuce.**"
      courseD_farmer_condLoops_challenge1_2019: "The pumpkins mark the place where
        you should `turn right`. Otherwise keep going forward, but remember to collect
        all of the lettuce or corn along the way. \n\n**Each hidden crop has only
        one corn or lettuce.**"
      courseD_farmer_condLoops_challenge2: "_\"It's a very varied vegetable maze!\"_
        \n\nTurn right at pumpkins, turn left at lettuce. Collect everything to complete
        the level."
      courseD_farmer_condLoops_challenge2_2018: "_\"It's a very varied vegetable maze!\"_
        \n\nTurn right at pumpkins, turn left at lettuce. Collect everything to complete
        the level."
      courseD_farmer_condLoops_challenge2_2019: "_\"It's a very varied vegetable maze!\"_
        \n\nTurn right at pumpkins, turn left at lettuce. Collect everything to complete
        the level."
      courseD_farmer_until_challenge2: Use `If/Else` blocks to follow the curvy path.
        At each corner, use the `remove 1` block in a loop to clear the piles.
      courseD_farmer_while1: "_\"Ahoj, ja som farmárka. Potrebujem tvoju pomoc s vyrovnaním
        poľa na mojej farme tak, aby bolo pripravené pre výsadbu!\"_  \n\n Presuň
        ma na hromadu hliny a použi blok \"odstráň\", aby si ju odstránil."
      courseD_farmer_while1_2018: "_\"Ahoj, ja som farmárka. Potrebujem tvoju pomoc
        s vyrovnaním poľa na mojej farme tak, aby bolo pripravené pre výsadbu!\"_
        \ \n\n Presuň ma na hromadu hliny a použi blok \"odstráň\", aby si ju odstránil."
      courseD_farmer_while1_2019: "_\"Ahoj, ja som farmárka. Potrebujem tvoju pomoc
        s vyrovnaním poľa na mojej farme tak, aby bolo pripravené pre výsadbu!\"_
        \ \n\n Presuň ma na hromadu hliny a použi blok \"odstráň\", aby si ju odstránil."
      courseD_farmer_while3: |-
        _"Posuň ma na hromadu hliny a povedz mi koľko plných lopát treba odstrániť."_

        Na vyriešenie úlohy použi čo najmänší počet blokov.
      courseD_farmer_while3_2018: |-
        _"Posuň ma na hromadu hliny a povedz mi koľko plných lopát treba odstrániť."_

        Na vyriešenie úlohy použi čo najmänší počet blokov.
      courseD_farmer_while3_2019: |-
        _"Posuň ma na hromadu hliny a povedz mi koľko plných lopát treba odstrániť."_

        Na vyriešenie úlohy použi čo najmänší počet blokov.
      courseD_farmer_while4: |-
        _"Neviem koľko hliny je na tejto hromade!"_

        Pomôž farmárke odstrániť celú hromadu pomocou cyklu `pokiaľ tam je` .
      courseD_farmer_while4_2018: |-
        _"Neviem koľko hliny je na tejto hromade!"_

        Pomôž farmárke odstrániť celú hromadu pomocou cyklu `pokiaľ tam je` .
      courseD_farmer_while4_2019: |-
        _"Neviem koľko hliny je na tejto hromade!"_

        Pomôž farmárke odstrániť celú hromadu pomocou cyklu `pokiaľ tam je` .
      courseD_farmer_while4_predict1: |-
        _"Neviem koľko hliny je na tejto hromade!"_

        Pomôž farmárke odstrániť celú hromadu pomocou cyklu `pokiaľ tam je` .
      courseD_farmer_while4_predict1_2018: |-
        _"Neviem koľko hliny je na tejto hromade!"_

        Pomôž farmárke odstrániť celú hromadu pomocou cyklu `pokiaľ tam je` .
      courseD_farmer_while4_predict1_2019: |-
        _"Neviem koľko hliny je na tejto hromade!"_

        Pomôž farmárke odstrániť celú hromadu pomocou cyklu `pokiaľ tam je` .
      courseD_farmer_while6: |-
        Pozrite na tie jamy! Každá z nich potrebuje iné množstvo hliny.

        Môžeš použiť cyklus `pokiaľ` aby si ich všetky naplnil.
      courseD_farmer_while6_2018: |-
        Pozrite na tie jamy! Každá z nich potrebuje iné množstvo hliny.

        Môžeš použiť cyklus `pokiaľ` aby si ich všetky naplnil.
      courseD_farmer_while6_2019: |-
        Pozrite na tie jamy! Každá z nich potrebuje iné množstvo hliny.

        Môžeš použiť cyklus `pokiaľ` aby si ich všetky naplnil.
      courseD_farmer_while8: "**Výzva:** Vyplň všetky jamy použitím čo njamenšieho
        počtu blokov."
      courseD_farmer_while8_2018: "**Výzva:** Vyplň všetky jamy použitím čo njamenšieho
        počtu blokov."
      courseD_farmer_while8_2019: "**Výzva:** Vyplň všetky jamy použitím čo njamenšieho
        počtu blokov."
      courseD_farmer_while_challenge1: Fill all of the holes and remove all of the
        piles.
      courseD_farmer_while_challenge1_2018: Fill all of the holes and remove all of
        the piles.
      courseD_farmer_while_challenge1_2019: Fill all of the holes and remove all of
        the piles.
      courseD_farmer_while_challenge2: Fill all of the holes and remove all of the
        piles.
      courseD_harvester_nested_loops_challenge1: _"Potrebujem pomoc na farme! Pomôž
        mi pozbierať túto kukuricu a použi na to len tie bloky, ktoré sú v paneli
        nástrojov."_
      courseD_harvester_nested_loops_challenge1_2018: _"Potrebujem pomoc na farme!
        Pomôž mi pozbierať túto kukuricu a použi na to len tie bloky, ktoré sú v paneli
        nástrojov."_
      courseD_harvester_nested_loops_challenge1_2019: _"Potrebujem pomoc na farme!
        Pomôž mi pozbierať túto kukuricu a použi na to len tie bloky, ktoré sú v paneli
        nástrojov."_
      courseD_iceage_loops1: Pomôž Scratovi prejsť po šmykľavom ľade až k žaluďu!
      courseD_iceage_loops10: Pomôž Scratovi prejsť celú cestu až k vytúženému žaluďu!
      courseD_iceage_loops10_2019: Pomôž Scratovi prejsť celú cestu až k vytúženému
        žaluďu!
      courseD_iceage_loops11: Pomôž Scratovi dostať sa k žaluďu!
      courseD_iceage_loops11_2019: Pomôž Scratovi dostať sa k žaluďu!
      courseD_iceage_loops12: Dostaň sa k žaluďu ľubovoľným spôsobom!
      courseD_iceage_loops12_2019: Dostaň sa k žaluďu ľubovoľným spôsobom!
      courseD_iceage_loops1_2019: Pomôž Scratovi prejsť po šmykľavom ľade až k žaluďu!
      courseD_iceage_loops2: |-
        Použi blok <xml><block type="maze_turn">

        <title name="DIR">turnLeft</title>
        </block></xml> na získanie žaluďa!
      courseD_iceage_loops2_2019: |-
        Použi blok <xml><block type="maze_turn">

        <title name="DIR">turnLeft</title>
        </block></xml> na získanie žaluďa!
      courseD_iceage_loops3: Dokážeš sa dostať k žaluďu s použitím len jedného bloku
        <xml><block type="maze_moveForward"/></xml>? Skús použiť cyklus!
      courseD_iceage_loops3_2019: Dokážeš sa dostať k žaluďu s pomocou jediného bloku  <xml><block
        type="maze_moveForward" block-text="move forward"/></xml>? Skús použiť cyklus!
      courseD_iceage_loops4: Pridaj ešte jeden blok, aby sa Scrat dostal až k žaluďu!
      courseD_iceage_loops4_2019: Pridaj ešte jeden blok, aby sa Scrat dostal až k
        žaluďu!
      courseD_iceage_loops6: Vieš pridať jeden cyklus a dostať sa k žaluďu?
      courseD_iceage_loops6_2019: Vieš pridať jeden cyklus a dostať sa k žaluďu?
      courseD_iceage_loops7: Scrat naozaj chce ten žaluď!
      courseD_iceage_loops7_2019: Scrat naozaj chce ten žaluď!
      courseD_iceage_loops8: Dokážeš opraviť tento kód?
      courseD_iceage_loops8_2019: Dokážeš opraviť tento kód?
      courseD_iceage_loops9: Žaluď je tak ďaleko! Dokážeš použiť cykly a pomôcť Scratovi
        sa poň dostať?
      courseD_iceage_loops9_2019: Žaluď je tak ďaleko! Dokážeš použiť cykly a pomôcť
        Scratovi sa poň dostať?
      courseD_maze_intro4_2019: '"Nájdi cestu a priveď ma k prasiatku."'
      courseD_maze_intro5a_2019: Count the spaces on the grid carefully!
      courseD_maze_intro5c_2019: Watch out for TNT! Help Red get to the pig.
      courseD_maze_nestedLoops3: |-
        _"Zombík hladný!"_

        Dostaň zombíka k slnečnici použitím čo najmenšieho počtu blokov.
      courseD_maze_nestedLoops3_2018: |-
        _"Zombík hladný!"_

        Dostaň zombíka k slnečnici použitím čo najmenšieho počtu blokov.
      courseD_maze_nestedLoops3_2019: |-
        _"Zombík hladný!"_

        Dostaň zombíka k slnečnici použitím čo najmenšieho počtu blokov.
      courseD_maze_nestedLoops4: 'Dostaň zombíka k slnečnici použitím čo najmenšieho
        počtu blokov!  '
      courseD_maze_nestedLoops4_2018: 'Dostaň zombíka k slnečnici použitím čo najmenšieho
        počtu blokov!  '
      courseD_maze_nestedLoops4_2019: 'Dostaň zombíka k slnečnici použitím čo najmenšieho
        počtu blokov!  '
      courseD_maze_nestedLoops6: |-
        _"Musieť jesť slnečnica!"_

        Dostaň zombíka k slnečnici pomocou dostupných blokov.
      courseD_maze_nestedLoops6_2018: |-
        _"Musieť jesť slnečnica!"_

        Dostaň zombíka k slnečnici pomocou dostupných blokov.
      courseD_maze_nestedLoops6_2019: |-
        _"Musieť jesť slnečnica!"_

        Dostaň zombíka k slnečnici pomocou dostupných blokov.
      courseD_maze_ramp1: V tejto hre pospájaj všetky bloky dokopy, potom klikni na
        tlačítko "Spustiť" a sleduj, čo sa stane.
      courseD_maze_ramp1_2018: V tejto hre pospájaj všetky bloky dokopy, potom klikni
        na tlačítko "Spustiť" a sleduj, čo sa stane.
      courseD_maze_ramp1_2019: V tejto hre pospájaj všetky bloky dokopy, potom klikni
        na tlačítko "Spustiť" a sleduj, čo sa stane.
      courseD_maze_ramp2: Aby sa vták dostal až k prasiatku, z panela nástrojov presuň
        ešte jeden blok `posuň sa dopredu` a pripoj ho k ostatným blokom napojených
        na blok `pri spustení`.
      courseD_maze_ramp2_2018: Aby sa vták dostal až k prasiatku, z panela nástrojov
        presuň ešte jeden blok `posuň sa dopredu` a pripoj ho k ostatným blokom napojených
        na blok `pri spustení`.
      courseD_maze_ramp2_2019: Aby sa vták dostal až k prasiatku, z panela nástrojov
        presuň ešte jeden blok `posuň sa dopredu` a pripoj ho k ostatným blokom napojených
        na blok `pri spustení`.
      courseD_maze_ramp3: |-
        _"To prasiatko mi pije krv."_

        Na pracovnej ploche je jeden blok navyše, ktorý spôsobí, že vták narazí.
        Odpoj ho od ostatných blokov a presuň ho späť do panela nástrojov.
      courseD_maze_ramp3_2018: |-
        _"To prasiatko mi pije krv."_

        Na pracovnej ploche je jeden blok navyše, ktorý spôsobí, že vták narazí.
        Odpoj ho od ostatných blokov a presuň ho späť do panela nástrojov.
      courseD_maze_ramp3_2019: |-
        Pomôž vtákovi dostať sa k prasiatku. Na ploche je navyše jeden modrý blok `posuň sa dopredu`.

        Blok, ktorý je navyše odhoď tak, že ho odpojíš od ostatných blokov a presunieš ho naspäť do panela nástrojov.
      courseD_maze_ramp4: "_\"Nájdi cestu a priveď ma k tomu nezbednému prasiatku.\"_
        \n\nVyhni sa TNT, inak bude lietať perie!"
      courseD_maze_ramp4_2018: "_\"Nájdi cestu a priveď ma k tomu nezbednému prasiatku.\"_
        \n\nVyhni sa TNT, inak bude lietať perie!"
      courseD_maze_ramp4_2019: '_"Sleduj cestu a doveď ma k žaluďu."_ '
      courseD_maze_ramp5: |-
        _"Nasleduj cestu a priveď ma k prasiatku"_

        Vyhni sa TNT.
      courseD_maze_ramp5_2018: |-
        _"Nasleduj cestu a priveď ma k prasiatku"_

        Vyhni sa TNT.
      courseD_maze_ramp5_2019: |-
        _"Nasleduj cestu a priveď ma k prasiatku"_

        Vyhni sa TNT.
      courseD_maze_ramp5a: Sústreď sa na správne poradie krokov a nájdi cestu k tomu
        prasiatku!
      courseD_maze_ramp5a_2018: Sústreď sa na správne poradie krokov a nájdi cestu
        k tomu prasiatku!
      courseD_maze_ramp5a_2019: Count the spaces on the grid carefully!
      courseD_maze_ramp5b: "**Výzva:** Prejdi týmto bludiskom a pomôž vtákovi dostať
        sa k prasiatku!"
      courseD_maze_ramp5b_2018: "**Výzva:** Prejdi týmto bludiskom a pomôž vtákovi
        dostať sa k prasiatku!"
      courseD_maze_ramp5b_2019: "**Výzva:** Prejdi týmto bludiskom a pomôž vtákovi
        dostať sa k prasiatku!"
      courseD_maze_ramp5c: Pomôž vtákovi dostať sa k prasiatku.
      courseD_maze_ramp5c_2018: Pomôž vtákovi dostať sa k prasiatku.
      courseD_maze_ramp5c_2019: Pomôž Scratovi dostať sa k žaluďu.
      courseD_maze_ramp5d: Dostaň vtáka k prasiatku.
      courseD_maze_ramp5d_2018: Dostaň vtáka k prasiatku.
      courseD_maze_ramp5d_2019: Dostaň vtáka k prasiatku.
      courseD_maze_ramp6: |-
        _"Keep calm and help me find the bad pig. Otherwise I might get angry!"_

        When you have several of the same block in a row, try using a `repeat` loop, instead.  This will do the same thing with less code!
      courseD_maze_ramp7: "_\"It's time to get angry!\"_  \n\nUse what you've learned
        to get the bird to the pig!"
      courseD_maze_until10: Pomôž zombiemu dostať sa k slnečnici.
      courseD_maze_until10_2018: Pomôž zombiemu dostať sa k slnečnici.
      courseD_maze_until10_2019: Pomôž zombiemu dostať sa k slnečnici.
      courseD_maze_until10_predict2: Pomôž zombiemu dostať sa k slnečnici.
      courseD_maze_until10_predict2_2018: Pomôž zombiemu dostať sa k slnečnici.
      courseD_maze_until10_predict2_2019: Pomôž zombiemu dostať sa k slnečnici.
      courseD_maze_until4: |-
        _"Drahý človeče. Som zombie. Som hladný. Musím ... sa dostať... k slnečnici..."_

        Môžeš priviezť zombieho k slnečnici, ak použiješ len tie bloky, ktoré sú k dispozícii?
      courseD_maze_until4_2018: |-
        _"Drahý človeče. Som zombie. Som hladný. Musím ... sa dostať... k slnečnici..."_

        Môžeš priviezť zombieho k slnečnici, ak použiješ len tie bloky, ktoré sú k dispozícii?
      courseD_maze_until4_2019: |-
        _"Drahý človeče. Som zombie. Som hladný. Musím ... sa dostať... k slnečnici..."_

        Môžeš priviezť zombieho k slnečnici, ak použiješ len tie bloky, ktoré sú k dispozícii?
      courseD_maze_until5: Použi blok `ak` a pomôž zombiemu rozhodnúť sa, kedy sa
        má otočiť, aby získal slnečnicu.
      courseD_maze_until5_2018: Použi blok `ak` a pomôž zombiemu rozhodnúť sa, kedy
        sa má otočiť, aby získal slnečnicu.
      courseD_maze_until5_2019: Použi blok `ak` a pomôž zombiemu rozhodnúť sa, kedy
        sa má otočiť, aby získal slnečnicu.
      courseD_maze_until6: Pomôž zombiemu dostať sa k slnečnici.
      courseD_maze_until6_2018: Pomôž zombiemu dostať sa k slnečnici.
      courseD_maze_until6_2019: Pomôž zombiemu dostať sa k slnečnici.
      courseD_maze_until7: Pomôž zombiemu dostať sa k slnečnici.
      courseD_maze_until7_2018: Pomôž zombiemu dostať sa k slnečnici.
      courseD_maze_until7_2019: Pomôž zombiemu dostať sa k slnečnici.
      courseD_maze_until8: Pomôž zombiemu dostať sa k slnečnici.
      courseD_maze_until9: "**Výzva:** Vyhni sa chomperom a pomôž zombiemu dostať
        sa k slnečnici."
      courseD_maze_until9_2018: "**Výzva:** Vyhni sa chomperom a pomôž zombiemu dostať
        sa k slnečnici."
      courseD_maze_until9_2019: "**Výzva:** Vyhni sa chomperom a pomôž zombiemu dostať
        sa k slnečnici."
      courseD_maze_until_challenge1: No hints, just challenge. Get the zombie to the
        sunflower.
      courseD_playLab_cond1: "Aby sme sa mohli začať hrať, pirát Pegleg (postava 1)
        sa musí vedieť hýbať všetkými smermi. Pomôž Peglegovi tak, že pripojíš správne
        bloky ku jednotlivým udalostiam. \n\n* * *\n\nNa vyriešenie úlohy pomôž Peglegovi
        pozbierať všetky vlajky."
      courseD_playLab_cond1_2018: "Aby sme sa mohli začať hrať, pirát Pegleg (postava
        1) sa musí vedieť hýbať všetkými smermi. Pomôž Peglegovi tak, že pripojíš
        správne bloky ku jednotlivým udalostiam. \n\n* * *\n\nNa vyriešenie úlohy
        pomôž Peglegovi pozbierať všetky vlajky."
      courseD_playLab_cond2: "Čas začať zbierať body!\n\nUprav program tak, aby Pegleg
        (postava 1) získal bod vždy, keď sa dotkne draka (postava 2). "
      courseD_playLab_cond2_2018: "Čas začať zbierať body!\n\nUprav program tak, aby
        Pegleg (postava 1) získal bod vždy, keď sa dotkne draka (postava 2). "
      courseD_playLab_cond3: 'Použi cyklus `opakuj donekonečna` na to, aby drak (postava
        2) každú sekundu náhodne zmenil náladu.  '
      courseD_playLab_cond3_2018: 'Použi cyklus `opakuj donekonečna` na to, aby drak
        (postava 2) každú sekundu náhodne zmenil náladu.  '
      courseD_playLab_cond3a: "Je načase využiť to, čo sme sa naučili o podmienkach
        a spraviť túto hru trochu zábavnejšou. \n\nPridaj kód, vďaka ktorému Pegleg
        dostane 2 body _AK_ má drak veselú náladu. _INAK_ dostane len 1 bod."
      courseD_playLab_cond3a_2018: "Je načase využiť to, čo sme sa naučili o podmienkach
        a spraviť túto hru trochu zábavnejšou. \n\nPridaj kód, vďaka ktorému Pegleg
        dostane 2 body _AK_ má drak veselú náladu. _INAK_ dostane len 1 bod."
      courseD_playLab_cond4: |-
        A teraz to začne byť zabavné!

        Pridaj kód, vďaka ktorému ninja (postava 3) hneď od začiatku hry začne naháňať Peglega. Ukonči hru ako prehru, ak ho ninja chytí.
      courseD_playLab_cond4_2018: |-
        A teraz to začne byť zabavné!

        Pridaj kód, vďaka ktorému ninja (postava 3) hneď od začiatku hry začne naháňať Peglega. Ukonči hru ako prehru, ak ho ninja chytí.
      courseD_playLab_cond5: |-
        A teraz potrebujeme pridať spôsob ako hru vyhrať.

        Pridaj cyklus `opakuj donekonečna`, ktorý bude neustále kontrolovať skóre a **ak** je skóre väčšie ako 5, ukončí hru ako **výhru**.
      courseD_playLab_cond5_2018: |-
        A teraz potrebujeme pridať spôsob ako hru vyhrať.

        Pridaj cyklus `opakuj donekonečna`, ktorý bude neustále kontrolovať skóre a **ak** je skóre väčšie ako 5, ukončí hru ako **výhru**.
      courseD_playLab_cond6: |-
        Hmmm, túto hru ale vyhráme naozaj ťažko!
        Upravme ju tak, aby bola trochu zábavnejšia. Táto úloha má 2 časti:

        * * *

        1.  Spomaľ ninju (postava 3) ešte predtým, ako začne naháňať piráta (postava 1)

        2.  Použi cyklus `opakuj donekonečna`, ktorý skontroluje, či sa pirát nachádza v "bezpečnej zóne", pod líniou chobotníc (t. j. viac ako 225 pixelov smerom dole). Ak áno, nastav ninju, aby **utekal** od piráta. Inak nastav ninju, aby **naháňal** piráta.
      courseD_playLab_cond6_2018: "Hmmm, túto hru ale vyhráme naozaj ťažko!\nUpravme
        ju tak, aby bola trochu zábavnejšia. Táto úloha má 2 časti:\n\n* * *\n\n1.
        \ Spomaľ ninju (postava 3) ešte predtým, ako začne naháňať piráta (postava
        1)\n\n2.  Použi cyklus `opakuj donekonečna`, ktorý skontroluje, či sa pirát
        nachádza v \"bezpečnej zóne\", pod líniou chobotníc (t. j. viac ako 225 pixelov
        smerom dole). Ak áno, nastav ninju, aby **utekal** od piráta. Inak nastav
        ninju, aby **naháňal** piráta.  "
      courseD_playLab_cond6a: |-
        Nechceme, aby sa pirát zdržiaval v "bezpečnej zóne" príliš dlho!

        Pridaj ku bloku `ak` taký kód, ktorý po príchode piráta (postava 1) do bezpečnej zóny počká 1 sekundu a potom mu bude po bode odčítavať po celý čas, čo sa nachádza pod chobotnicami.
      courseD_playLab_cond6a_2018: |-
        Nechceme, aby sa pirát zdržiaval v "bezpečnej zóne" príliš dlho!

        Pridaj ku bloku `ak` taký kód, ktorý po príchode piráta (postava 1) do bezpečnej zóny počká 1 sekundu a potom mu bude po bode odčítavať po celý čas, čo sa nachádza pod chobotnicami.
      courseD_playLab_condFP_2018: |-
        A teraz si vytvor hru, ktorou sa pochváliš kamarátom!

        * * *

        Môžeš napríklad:

        -   Nechať piráta a ninju spolupracovať, aby za chytenie draka dostávali body obaja
        -   Nechať chobotnice naháňať piráta
        -   Nechať každú postavu, ktorá sa zrazí s ninjom zmiznúť
        -   Vymyslieť vlastnú hru!
      courseD_scrat_ramp1: V tejto hre pospájaj všetky bloky dokopy, potom klikni
        na tlačítko "Spustiť" a sleduj, čo sa stane.
      courseD_scrat_ramp2: Aby sa vták dostal až k prasiatku, z panela nástrojov presuň
        ešte jeden blok `posuň sa dopredu` a pripoj ho k ostatným blokom napojených
        na blok `pri spustení`.
      courseD_scrat_ramp3: |-
        _"To prasiatko mi pije krv."_

        Na pracovnej ploche je jeden blok navyše, ktorý spôsobí, že vták narazí.
        Vyhoď ho tak, že ho presunieš späť do panela nástrojov.
      courseD_scrat_ramp4: Vyhni sa TNT, lebo bude lietať perie!
      courseD_scrat_ramp5: |-
        _"Nasleduj cestu a priveď ma k prasiatku"_

        Vyhni sa TNT.
      courseD_scrat_ramp6: Help Scrat get to the acorn using a loop!
      courseD_scrat_ramp7: Pomôž Scratovi dostať sa k žaluďu!
      courseD_scrat_ramp8: "**Challenge:** Use what you've learned to get Scrat to
        the acorn!"
      courseE_aboutme_1: "![](https://images.code.org/93e1c04857ff781bb5c4cc76b15ed563-image-1557179820861.png)
        _\"Ahojte! Volám sa Rikki a toto by som vám chcela o sebe povedať!\"_\n\n**Voľná
        hra**: Rikki s pomocou Sprite Lab vytvorí _interaktívny plagát_ s osobnými
        \ informáciami, ktorý bude zdielať na webe.   \n\nRikki ti povolila prístup
        k jej plagátu, dokonca môžeš aj upravovať jej kód. \n\nSkús sa trochu pohrať
        s jej plagátom a kódom, a potom stlač **Dokončiť**."
      courseE_aboutme_2: "![](https://images.code.org/2bae4bc7c7d59fac0cd4b1370d3c4a11-image-1557179992653.png)
        _\"To som ja, Rikki! Pomôžem ti vytvoriť super plagát. Najprv stlač tlačidlo
        Kostými!\"_\n\n1.  Stlač tlačidlo **Kostými** v ľavom hornom rohu (vedľa tlačidla
        **Kód**). \n2.  Uprav prvý kostým, alebo pridaj iný, ktorý sa ti páči. \n3.
        \ Zmeň kostým postavy podľa seba prostredníctvom kódu nižšie.\n4.  Stlač **Spustiť**
        pre zobrazenie nového vzhľadu tvojej postavy!"
      courseE_aboutme_3: "![](https://images.code.org/2bae4bc7c7d59fac0cd4b1370d3c4a11-image-1557179992653.png)
        _\"Napíš niečo o sebe, ale len ak si si istý, že je to bezpečné!\"_\n\nPouži
        <xml><block type=\"gamelab_spriteClicked\" block-text=\"the when sprite clicked
        event block\"></block></xml> a <xml><block type=\"gamelab_printText\" block-text=\"the
        print text block\"></block></xml> (in the `World` blocks category) na zdieľanie
        informácií o sebe, keď niekto klikne na tvoju postavu! \n\n**Vždy sa uisti,
        že je bezpečné tieto informácie zdielať.**\n\n* * *\n\n#### Príklady informácií,
        ktoré SÚ a NIE SÚ bezpečné na zdieľanie\n\n| SÚ bezpečné   | NIE SÚ bezpečné
        \            |\n| ------------- | --------------------------- |\n| Meno          |
        Meno a priezvisko           |\n| Obľúbené veci | Adresa                      |\n|
        Osobné názory | Telefónne číslo alebo email |"
      courseE_aboutme_4: |-
        ![](https://images.code.org/2bae4bc7c7d59fac0cd4b1370d3c4a11-image-1557179992653.png) _"Pridaj na plagát viac postáv! Nezabudni im dať kostými!"_

        Pridaj **najmenej dve** ďalšie postavy na plagát. Každej postave daj iný kostým!
      courseE_aboutme_5: |-
        ![](https://images.code.org/0c3ec1da3493c3e10f5ec714ef1670e3-image-1557185359875.png) _"Zdieľaj o sebe viac informácií prostredníctvom svojich nových postáv!"_

        Pridaj možnosť, aby postavy po kliknutí vypísali nejakú informáciu. Uisti sa, že informácie ktoré zdieľaš sú bezpečné!
      courseE_aboutme_6: "![](https://images.code.org/4e9c4465463d0c061b2b47b23d5817ca-image-1557185863600.png)
        _\"Wow! Tvoj plagát je takmer taký parádny ako môj! Takmer. \U0001F609\"_\n\nKoho
        je tento svet?! Je tvoj! \n\nTak pokračuj! Tu je niekoľko nápadov ako ho ešte
        vylepšiť:\n\n-   Pridaj pozadie! Vyber si pozadie, ktoré sa hodí k tvojmu
        plagátu.\n-   Pridaj správanie! Pridel každej postave iné správanie po kliknutí
        na ňu.\n-   Pridaj viac udalostí! Využi ďalšie bloky v kategórii blokov `Udalosti`."
      courseE_artist_concept1: "Vytvor tento obrázok.\n\n-   Šesťuholníky so stranami
        dlhými 50 pixelov. \n-   Šesťuholníky sú od seba vzdialené 100 pixelov.\n-
        \  Stopa pera pri šesťuholníkoch je 1 pixel, 4 pixely a 8 pixelov."
      courseE_artist_concept1_2018: "Vytvor tento obrázok.\n\n-   Šesťuholníky so
        stranami dlhými 50 pixelov. \n-   Šesťuholníky sú od seba vzdialené 100 pixelov.\n-
        \  Stopa pera pri šesťuholníkoch je 1 pixel, 4 pixely a 8 pixelov."
      courseE_artist_concept4: |-
        Vytvor túto kresbu.

        Každý štvorec má stranu dlhú **20 pixelov** a **15 štvorcov v rade**.
      courseE_artist_concept4_2018: |-
        Vytvor túto kresbu.

        Každý štvorec má stranu dlhú **20 pixelov** a **15 štvorcov v rade**.
      courseE_artist_concept_challenge1: |-
        <img src="https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png" width="200px"/>

        Now for a challenge!

        Here is a design that uses only blocks that you have already been shown.  Can you figure out how to recreate it?  Feel free to use trial and error. You don't have to draw it perfectly the first time.
      courseE_artist_concept_challenge1_2018: |-
        <img src="https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png" width="200px"/>

        Now for a challenge!

        Here is a design that uses only blocks that you have already been shown.  Can you figure out how to recreate it?  Feel free to use trial and error. You don't have to draw it perfectly the first time.
      courseE_artist_concept_challenge2: Create five pinwheel designs using the code
        below.
      courseE_artist_concept_challenge2_2018: Create five pinwheel designs using the
        code below.
      courseE_artist_functions1: |-
        _"Me zombie artist. Me love drawing!"_

        Help the zombie draw glasses using squares with sides of 100 pixels.\
        The bridge between the glasses is 75 pixels long.
      courseE_artist_functions10: |-
        Tento krát použi rad zložený z 8 šesťuholníkov so stranami dlhými 25 pixelov.

        -   Na vytvorenie šesť uholníka opakuj stranu 6-krát s pootočením o 60 stupňov.
        -   Skoč 25 pixelov medzi šesťuholníkmi.
        -   Na kresbu diamantu budeš potrebovať meniť veľkosť supňa 60 a 120.
      courseE_artist_functions10_2018: |-
        Tento krát použi rad zložený z 8 šesťuholníkov so stranami dlhými 25 pixelov.

        -   Na vytvorenie šesť uholníka opakuj stranu 6-krát s pootočením o 60 stupňov.
        -   Skoč 25 pixelov medzi šesťuholníkmi.
        -   Na kresbu diamantu budeš potrebovať meniť veľkosť supňa 60 a 120.
      courseE_artist_functions10_2019: |-
        Tento krát použi rad zložený z 8 šesťuholníkov so stranami dlhými 25 pixelov.

        -   Na vytvorenie šesť uholníka opakuj stranu 6-krát s pootočením o 60 stupňov.
        -   Skoč 25 pixelov medzi šesťuholníkmi.
        -   Na kresbu diamantu budeš potrebovať meniť veľkosť supňa 60 a 120.
      courseE_artist_functions1_copy: |-
        _"Me zombie artist. Me love drawing!"_

        Help the zombie draw glasses using squares with sides of 100 pixels.\
        The bridge between the glasses is 75 pixels long.
      courseE_artist_functions2: "Functions let you define new blocks! \n\nWe've moved
        the blocks needed for drawing a square into a function called `draw a square`.
        This time, use the `draw a square` function to create the glasses. \n\n* *
        *\n\nThe squares are 75 pixels apart."
      courseE_artist_functions2_2018: "Tu je funkcia `nakresli štvorec`. Použi ju
        na dokončenie tejto kresby. \n\n* * *\n\nŠtvorce sú od seba vzdialené 75 pixelov."
      courseE_artist_functions2_2019: "Tu je funkcia `nakresli štvorec`. Použi ju
        na dokončenie tejto kresby. \n\n* * *\n\nŠtvorce sú od seba vzdialené 75 pixelov."
      courseE_artist_functions2_copy: "Functions let you define new blocks! \n\nWe've
        moved the blocks needed for drawing a square into a function called `draw
        a square`. This time, use the `draw a square` function to create the glasses.
        \n\n* * *\n\nThe squares are 75 pixels apart."
      courseE_artist_functions3: "We will come back to functions shortly. Let's take
        a break to practice making this star. \n\nYou can make this drawing by adding
        a repeat block."
      courseE_artist_functions3_2018: |-
        Poskladaj funckiu, ktorá vytvorí túto hviezdu.

        * * *

        -   Každé rameno hviezdy je dlhé 25 pixelov
        -   Potrebuješ sa otáčať o 45 stupňov aby si mal 8 ramien
        -   Je v poriadku chodiť dopredu a dozadu po jednom ramene
      courseE_artist_functions3_2019: |-
        Poskladaj funckiu, ktorá vytvorí túto hviezdu.

        * * *

        -   Každé rameno hviezdy je dlhé 25 pixelov
        -   Potrebuješ sa otáčať o 45 stupňov aby si mal 8 ramien
        -   Je v poriadku chodiť dopredu a dozadu po jednom ramene
      courseE_artist_functions3_copy: "We will come back to functions shortly. Let's
        take a break to practice making this star. \n\nYou can make this drawing by
        adding a repeat block."
      courseE_artist_functions4: |-
        Now that you can draw a star, try drawing four stars!

        -   Each branch of the star is 25 pixels long
        -   Turn 45 degrees between branches
        -   Jump 100 pixels between each star
      courseE_artist_functions4_copy: |-
        Now that you can draw a star, try drawing four stars!

        -   Each branch of the star is 25 pixels long
        -   Turn 45 degrees between branches
        -   Jump 100 pixels between each star
      courseE_artist_functions5: |-
        When is drawing three stars harder than drawing four? When you also have to jump over the moon!

        Draw only those three stars to finish this puzzle.
      courseE_artist_functions5_2018: |-
        Kedy je ťažšie nakresliť tri hviezdy ako štyri? Vtedy ak musíš pritom ešte aj preskočiť mesiac!

        Na dokončenie úlohy, nakresli len tie tri hviezdy.

        * * *

        -   Skok medzi prvou a druhou hviezdou je **200** pixelov
        -   Skok medzi druhou a treťou hviezdou je **100** pixelov
      courseE_artist_functions5_2019: |-
        Kedy je ťažšie nakresliť tri hviezdy ako štyri? Vtedy ak musíš pritom ešte aj preskočiť mesiac!

        Na dokončenie úlohy, nakresli len tie tri hviezdy.

        * * *

        -   Skok medzi prvou a druhou hviezdou je **200** pixelov
        -   Skok medzi druhou a treťou hviezdou je **100** pixelov
      courseE_artist_functions5_copy: |-
        When is drawing three stars harder than drawing four? When you also have to jump over the moon!

        Draw only those three stars to finish this puzzle.
      courseE_artist_functions6: "You are doing great! \n\nMake this window by drawing
        a square, then turning 90 degrees before drawing another, and so on."
      courseE_artist_functions7: "Let's take the code for the window and add it to
        function `draw a window`. Now, we can call the function any time we need to
        draw a window without having to write the code again. \n\n![](https://images.code.org/615a5e93abdaffeed438a976a56fc1f5-image-1497998528859.gif)\n\nTry
        solving this puzzle by creating `draw a window` and calling it five times.
        Watch out for the door!\n\n-   The top windows are 50 pixels away from each
        other.  \n-   The bottom windows are 100 pixels below the top set."
      courseE_artist_functions7_2018: "Kresliť všetky tie okná osobitne by bolo otravné!\n\nVyskúšaj
        túto úlohu vyriešiť  vytvorením funkcie  `nakresliť okno` a zavolaj ju 5-krát.
        Pozor na dvere!\n\n* * *\n\n-   Každé okno je tvorené štyrmi **25** pixelovými
        štvorcami.\n-   Vrchné okná sú od seba vzdialené **100** pixelov. \n-   Spodné
        okná sú od vrchných vzdialené  **150** pixelov."
      courseE_artist_functions7_2019: "Kresliť všetky tie okná osobitne by bolo otravné!\n\nVyskúšaj
        túto úlohu vyriešiť  vytvorením funkcie  `nakresliť okno` a zavolaj ju 5-krát.
        Pozor na dvere!\n\n* * *\n\n-   Každé okno je tvorené štyrmi **25** pixelovými
        štvorcami.\n-   Vrchné okná sú od seba vzdialené **100** pixelov. \n-   Spodné
        okná sú od vrchných vzdialené  **150** pixelov."
      courseE_artist_functions8: |-
        **Challenge:** Did you know that you can call functions from _inside_ other functions?!

        Create as many functions as you think you need to make this drawing of 50 pixel squares.
      courseE_artist_functions8a_2018: "_\"Funkcie jednoducho!\"_\n\nTeraz postavíme
        niečo efektné! Začni s vytvorením funkcie pre tento štvorec. "
      courseE_artist_functions8a_2019: "_\"Funkcie jednoducho!\"_\n\nTeraz postavíme
        niečo efektné! Začni s vytvorením funkcie pre tento štvorec. "
      courseE_artist_functions8b_2018: |-
        _"Zombiemu sa toči hlava."_

        Zavolaj funkciu `nakresli štvorec` zvnútra funkcie `nakresli rad štvorcov`, aby to bolo ešte jednoduchšie!

        * * *

        -   Štvorce sú od seba vzdialené _50_ pixelov.
      courseE_artist_functions8b_2019: |-
        _"Zombiemu sa toči hlava."_

        Zavolaj funkciu `nakresli štvorec` zvnútra funkcie `nakresli rad štvorcov`, aby to bolo ešte jednoduchšie!

        * * *

        -   Štvorce sú od seba vzdialené _50_ pixelov.
      courseE_artist_functions8c_2018: Pridaj ešte jednu funkciu, ktorá vytvorí tento
        rad spojených štvorcov, použi funkciu `nakresli rad štvorcov`.
      courseE_artist_functions8c_2019: Pridaj ešte jednu funkciu, ktorá vytvorí tento
        rad spojených štvorcov, použi funkciu `nakresli rad štvorcov`.
      courseE_artist_functions9: "Create this image using the limited blocks provided.
        \n\n-   Each triangle has sides of **50 pixels**  \n-   To draw a diamond,
        you will need to alternate between turning **60 degrees and 120 degrees**."
      courseE_artist_functions9_2018: "**Výzva:** Vytvor tento obrázok len pomocou
        limitovaných dostupných blokov. \n\n-   Každý trojuhlník má strany dlhé **50
        pixelov:**  \n-   Aby si nakreslil/a diamant, musíš striedať otočky medzi
        **60 stupňov a 120 stupňov**."
      courseE_artist_functions9_2019: "**Výzva:** Vytvor tento obrázok len pomocou
        limitovaných dostupných blokov. \n\n-   Každý trojuhlník má strany dlhé **50
        pixelov:**  \n-   Aby si nakreslil/a diamant, musíš striedať otočky medzi
        **60 stupňov a 120 stupňov**."
      courseE_artist_functionsProj_2018: "**Inšpirácia:** Použi čo si sa naučil/a
        a vytvor čo len chceš! \n\nDokážeš vytvoriť niečo ako táto ružica?"
      courseE_artist_functionsProj_2019: "**Inšpirácia:** Použi čo si sa naučil/a
        a vytvor čo len chceš! \n\nDokážeš vytvoriť niečo ako táto ružica?"
      courseE_artist_functions_challenge1: Once you define a function, you can call
        it over and over again - whenever and wherever you want! Try this code to
        see how it works, then change it to make your own impressive design!
      courseE_artist_functions_challenge1_2018: Once you define a function, you can
        call it over and over again - whenever and wherever you want! Try this code
        to see how it works, then change it to make your own impressive design!
      courseE_artist_functions_challenge1_2019: Once you define a function, you can
        call it over and over again - whenever and wherever you want! Try this code
        to see how it works, then change it to make your own impressive design!
      courseE_artist_functions_challenge2: |-
        Not only can you jump to some pre-set locations, like the corners of the canvas, you can also use a `jump to` command to get to absolutely any spot you like! Try this code to see how it works, then make the program your own!

        <xml>
          <block type="jump_to_xy">
            <title name="XPOS">???</title>
            <title name="YPOS">???</title>
            </block></xml>
      courseE_artist_functions_challenge2_2018: |-
        Not only can you jump to some pre-set locations, like the corners of the canvas, you can also use a `jump to` command to get to absolutely any spot you like! Try this code to see how it works, then make the program your own!

        <xml>
          <block type="jump_to_xy">
            <title name="XPOS">???</title>
            <title name="YPOS">???</title>
            </block></xml>
      courseE_artist_functions_challenge2_2019: |-
        Not only can you jump to some pre-set locations, like the corners of the canvas, you can also use a `jump to` command to get to absolutely any spot you like! Try this code to see how it works, then make the program your own!

        <xml>
          <block type="jump_to_xy">
            <title name="XPOS">???</title>
            <title name="YPOS">???</title>
            </block></xml>
      courseE_artist_functions_predict1: 'Here is a puzzle that uses a function that
        we have defined. '
      courseE_artist_functions_predict1_2018: 'Here is a puzzle that uses a function
        that we have defined. '
      courseE_artist_functions_predict1_2019: 'Here is a puzzle that uses a function
        that we have defined. '
      courseE_artist_functions_predict1_copy: 'Here is a puzzle that uses a function
        that we have defined. '
      courseE_artist_ramp8: |-
        Great!  Now let's use that `repeat` loop to make a square using Artist!  The blocks for artist are a little different than other puzzles, but the idea is the same.

        * * *

        ##### Each side of the square has a length of 200 pixels, and you will need to turn 90 degrees to make each angle.
      courseE_artist_ramp8_2: |-
        Great!  Now let's use that `repeat` loop to make a square using Artist!  The blocks for artist are a little different than other puzzles, but the idea is the same.

        * * *

        ##### Each side of the square has a length of 200 pixels, and you will need to turn 90 degrees to make each angle.
      courseE_artist_ramp9: |-
        Use what you've learned to draw this triangle.

        * * *

        ##### The sides are each 100 pixels long. You will need to turn 120 degrees at each corner.
      courseE_artist_ramp9_2: |-
        Use what you've learned to draw this triangle.

        * * *

        ##### The sides are each 100 pixels long. You will need to turn 120 degrees at each corner.
      courseE_bee_concept1: |-
        _"Môžeš oVČIELKOvať  všetky tieto kvety?"_

        Pozberaj nekátr zo všetkých kvetov.
      courseE_bee_concept1_2018: |-
        _"Môžeš oVČIELKOvať  všetky tieto kvety?"_

        Pozberaj nekátr zo všetkých kvetov.
      courseE_bee_concept2: |-
        Pomôž včele vyrobiť med.

        Med môžeš vyorbiť len pri úli, ale môžeš skontrolovať miesta, či sa tam úľ nachádza.
      courseE_bee_concept2_2018: |-
        Pomôž včele vyrobiť med.

        Med môžeš vyorbiť len pri úli, ale môžeš skontrolovať miesta, či sa tam úľ nachádza.
      courseE_bee_concept5: "Pomôž včele pozbierať všetok nektár. \n\nNektár môžeš
        zbierať len z kvetov, ale musíš skontrolovať každé miestečko, aby si overil,
        či sa tam nenachádza kvet."
      courseE_bee_concept5_2018: "Pomôž včele pozbierať všetok nektár. \n\nNektár
        môžeš zbierať len z kvetov, ale musíš skontrolovať každé miestečko, aby si
        overil, či sa tam nenachádza kvet."
      courseE_bee_functions10: "_\"Show me the HONEY!\"_\n\nSolve this puzzle by creating
        a function that causes the bee to: \n\n-   turn toward the branch in the path\n-
        \  move forward\n-   make all of the honey\n-   return to the main path \n-
        \  turn back to the original direction"
      courseE_bee_functions2: "Functions are blocks of code that perform a task.  \n\nUse
        the `get 2 nectar` function to collect the nectar from each flower."
      courseE_bee_functions3: Funkcie sú bloky kódu, ktoré plnia úlohu. Použi funkciu
        "get 5" aby si získal 5 nektárov naraz. Uisti sa, že používaš slučku aby si
        mal ideálny počet blokov.
      courseE_bee_functions4: "The `move and get nectar` function turns the bee, collects
        nectar, and then returns the bee to where it started.  \n\nUse the `move and
        get nectar` function to collect all of the nectar."
      courseE_bee_functions8: "**Challenge:** These flowers can have a different amount
        of nectar each time you run the puzzle.   \n\nCreate a function that collects
        all of the nectar from each flower."
      courseE_bee_functions_challenge1: You are on your own for this challenge.  This
        could "bee" harder than it looks!
      courseE_farmer_functions1: |-
        _"Už sme sa niekedy stretli? Ja som záhradníčka!"_

        Pomôž záhradníčke dostať sa k tekvici a zobrať ju.
      courseE_farmer_functions10a1_2018: "**Výzva:** Použi všetko čo už vieš a skús
        vyriešiť túto úlohu pomocou maximálne 19 blokov!"
      courseE_farmer_functions10a1_2019: "**Výzva:** Použi všetko čo už vieš a skús
        vyriešiť túto úlohu pomocou maximálne 19 blokov!"
      courseE_farmer_functions10b: Use your new function twice to solve this puzzle.
      courseE_farmer_functions11_predict: Figure out which function to use and which
        one to delete, then solve this puzzle!
      courseE_farmer_functions11_predict_2018: Figure out which function to use and
        which one to delete, then solve this puzzle!
      courseE_farmer_functions11_predict_2019: Figure out which function to use and
        which one to delete, then solve this puzzle!
      courseE_farmer_functions13_2018: |-
        Na vyriešenie tejto úlohy použi najviac 23 blokov.

        * * *

        ##### Na každej rastline narastie buď _jedna_ kukurica alebo nič. Pre najlepšie riešenie budeš musieť zmeniť kódy funkcií.
      courseE_farmer_functions13_2019: |-
        Na vyriešenie tejto úlohy použi najviac 23 blokov.

        * * *

        ##### Na každej rastline narastie buď _jedna_ kukurica alebo nič. Pre najlepšie riešenie budeš musieť zmeniť kódy funkcií.
      courseE_farmer_functions1_2018: |-
        _"Už sme sa niekedy stretli? Ja som záhradníčka!"_

        Pomôž záhradníčke dostať sa k tekvici a zobrať ju.
      courseE_farmer_functions1_2019: |-
        _"Už sme sa niekedy stretli? Ja som záhradníčka!"_

        Pomôž záhradníčke dostať sa k tekvici a zobrať ju.
      courseE_farmer_functions1a: |-
        \_"Joj, všade samá zelenina!"-

        Teraz pomôž záhradníčke zozbierať všetku kukuricu cestou k tekvici na konci.

        * * *

        ##### Pozor: Každé políčko na ceste vedúcej k tekvici bude obsahovať buď _jednu_ kukuricu alebo žiadnu.  Použi `ak` blok na zistenie či tam je kukurica predtým, ako ju skúsiš zobrať!
      courseE_farmer_functions1a_2018: |-
        _"Joj, všade samá zelenina!"_

        Teraz pomôž záhradníčke zozbierať všetku kukuricu cestou k tekvici na konci.

        * * *

        ##### Pozor: Každé políčko na ceste vedúcej k tekvici obsahuje buď **1** kukuricu alebo žiadnu.  Použi funkciu `kukurica` a uisti sa, že zozbieraš celú úrodu.
      courseE_farmer_functions1a_2019: |-
        _"Joj, všade samá zelenina!"_

        Teraz pomôž záhradníčke zozbierať všetku kukuricu cestou k tekvici na konci.

        * * *

        ##### Pozor: Každé políčko na ceste vedúcej k tekvici obsahuje buď **1** kukuricu alebo žiadnu.  Použi funkciu `kukurica` a uisti sa, že zozbieraš celú úrodu.
      courseE_farmer_functions2b: |-
        Help the harvester pick the corn and pumpkins.

        * * *

        ##### Each sprout will either grow _one_ corn or nothing.
      courseE_farmer_functions2b_2018: |-
        Použi funkciu a pomôž záhradníčke zozbierať kukuricu a tekvice.

        * * *

        ##### Na každej zelenej rastline rastie buď _jedna_ kukurica alebo nič.
      courseE_farmer_functions2b_2019: |-
        Použi funkciu a pomôž záhradníčke zozbierať kukuricu a tekvice.

        * * *

        ##### Na každej zelenej rastline rastie buď _jedna_ kukurica alebo nič.
      courseE_farmer_functions2ba: "_\"Cítim sa tak funkčne!\"_\n\nAko sa ti v predošlej
        úlohe páčili tie opakujúce sa bloky kódu?  Cykly nám tu nepomôžu, ale **môžme**
        použiť funkcie.  \n\nV tejto úlohe sme vložili opakujúci sa kód do funkcie
        `kukurica a tekvica`. Takže ty už teraz len vlož **blok volania funkcie**
        `kukurica a tekvica` tam, kde ho potrebuješ.\n\n* * *\n\n##### Na každom výhonku
        narastie buď _jedna_ kukurica alebo nič."
      courseE_farmer_functions2ba_2018: |-
        _"Cítim sa tak funkčne!"_

        Teraz môže byť na každom políčku viacero tekvíc!  Pozorne si pozri definície funkcií nižšie a zisti, ako ich môžeš využiť.

        * * *

        ##### Na každom výhonku narastie buď _jedna_ kukurica alebo nič.
      courseE_farmer_functions2ba_2019: |-
        _"Cítim sa tak funkčne!"_

        Teraz môže byť na každom políčku viacero tekvíc!  Pozorne si pozri definície funkcií nižšie a zisti, ako ich môžeš využiť.

        * * *

        ##### Na každom výhonku narastie buď _jedna_ kukurica alebo nič.
      courseE_farmer_functions3c: "Now, fill-in the function yourself by pulling the
        blocks from the code and dropping them into the **function definition**.  \n\nDon't
        forget to add the little **function call** blocks to use the function in your
        program when you're done."
      courseE_farmer_functions3c1_2018: |-
        Ako sa ti páčilo to veľké množstvo opakujúceho sa kódu v predošlej úlohe? Môžeme ušetriť miesto tak, že tento kód nazveme `pozbieraj popri ceste` a z tejto novej funkcie budeme volať ostatné funkcie!

        Použi `pozbieraj popri ceste` na vyriešenie tejto úlohy s čo najmenším počtom blokov.
      courseE_farmer_functions3c1_2019: |-
        Ako sa ti páčilo to veľké množstvo opakujúceho sa kódu v predošlej úlohe? Môžeme ušetriť miesto tak, že tento kód nazveme `pozbieraj popri ceste` a z tejto novej funkcie budeme volať ostatné funkcie!

        Použi `pozbieraj popri ceste` na vyriešenie tejto úlohy s čo najmenším počtom blokov.
      courseE_farmer_functions3c_2018: Výborne!  Teraz vyskúšaj svoje funkcie na dlhšej
        cestičke.
      courseE_farmer_functions3c_2019: Výborne!  Teraz vyskúšaj svoje funkcie na dlhšej
        cestičke.
      courseE_farmer_functions4b: Use your new function to solve this puzzle.
      courseE_farmer_functions5c: Your function will come in handy here.
      courseE_farmer_functions6c: |-
        _"Lettuce pick all of the produce!"_

        Now the sprouts can be either corn **or** lettuce.  What do you need to add to this program to check each sprout before you pick?

        * * *

        ##### Note: Each sprout will turn into either **one** corn or **one** lettuce.
      courseE_farmer_functions7a1_2018: |-
        _"Funkcie **šalát** robia viac s menšou námahou!"_

        Vytvor funkciu pomocou ktorej záhradníčka prejde po ceste do štvorca a zoberie jednu hlávku šalátu v strede kazdej strany.
      courseE_farmer_functions7a1_2019: |-
        _"Funkcie **šalát** robia viac s menšou námahou!"_

        Vytvor funkciu pomocou ktorej záhradníčka prejde po ceste do štvorca a zoberie jednu hlávku šalátu v strede kazdej strany.
      courseE_farmer_functions7b: "_\"This harvest is a-MAZE-ing!\"_\n\nHelp the harvester
        find her way down this confusing path and to the pumpkin by turning **left**
        at the corn and **right** at the lettuce.  \n\n_(Don't forget to collect all
        of the produce along the way!)_"
      courseE_farmer_functions8a1_2018: Skús znovu napísať svoju funkciu. Je stále
        užitočná?  Ako ju môžeš použiť pri riešení tejto úlohy?
      courseE_farmer_functions8a1_2019: Skús znovu napísať svoju funkciu. Je stále
        užitočná?  Ako ju môžeš použiť pri riešení tejto úlohy?
      courseE_farmer_functions8b: "**Challenge:** Not all corners are marked in this
        maze, that means that you will need to use your navigation code more than
        once to get where you need to go.  \n\nCan you figure out what you need to
        do?"
      courseE_farmer_functions9a1_2018: |-
        \*Táto úloha je a-MAZE-ing! (amazing - úžasná, maze - bludisko)\*\*

        Je tvoja funkcia užitočná aj pri tejto úlohe?
      courseE_farmer_functions9a1_2019: |-
        \*Táto úloha je a-MAZE-ing! (amazing - úžasná, maze - bludisko)\*\*

        Je tvoja funkcia užitočná aj pri tejto úlohe?
      courseE_farmer_functions9b: Take a good look at this puzzle.  Can you figure
        out the pattern?
      courseE_farmer_ramp11a: "Ach jaj!  Táto hromada je taká veľká, že je ťažké  odhadnúť
        koľko je v nej hliny.  \n\n* * *\n\nPridali sme nový blok do panela nástrojov
        - je to blok `pokiaľ tam je hromada, vykonaj`.  Použi ho na odstránenie hromady
        a odoberaj z nej hlinu  len kým tam nejaká je! "
      courseE_farmer_ramp11a_2018: "Ach jaj!  Táto hromada je taká veľká, že je ťažké
        \ odhadnúť koľko je v nej hliny.  \n\n* * *\n\nPridali sme nový blok do panela
        nástrojov - je to blok `pokiaľ tam je hromada, vykonaj`.  Použi ho na odstránenie
        hromady a odoberaj z nej hlinu  len kým tam nejaká je! "
      courseE_farmer_ramp11a_2019: "Ach jaj!  Táto hromada je taká veľká, že je ťažké
        \ odhadnúť koľko je v nej hliny.  \n\n* * *\n\nPridali sme nový blok do panela
        nástrojov - je to blok `pokiaľ tam je hromada, vykonaj`.  Použi ho na odstránenie
        hromady a odoberaj z nej hlinu  len kým tam nejaká je! "
      courseE_farmer_ramp11b: A teraz to skús znova ale s viacerými hromadami!
      courseE_farmer_ramp11b_2018: A teraz to skús znova ale s viacerými hromadami!
      courseE_farmer_ramp11b_2019: A teraz to skús znova ale s viacerými hromadami!
      courseE_farmer_ramp12_forswap: Pozbieraj všetok šalát.
      courseE_farmer_ramp12_forswap_2018: Pozbieraj všetok šalát.
      courseE_farmer_ramp12_forswap_2019: Pozbieraj všetok šalát.
      courseE_farmer_ramp12b: Teraz záhradníčka potrebuje pozbierať všetok šalát.
        Použi blok `pokiaľ tam je šalát` a daj ho do bloku pre cyklus `opakuj`!
      courseE_farmer_ramp12b_2018: Teraz záhradníčka potrebuje pozbierať všetok šalát.
        Použi blok `pokiaľ tam je šalát` a daj ho do bloku pre cyklus `opakuj`!
      courseE_farmer_ramp12b_2019: Teraz záhradníčka potrebuje pozbierať všetok šalát.
        Použi blok `pokiaľ tam je šalát` a daj ho do bloku pre cyklus `opakuj`!
      courseE_farmer_ramp12c: "The lettuce is now only at the end of the path.\\\nTravel
        down the path **until** you reach a head of lettuce, then continue to pick
        it **while** there is still some left.  "
      courseE_farmer_ramp12c_2018: "Šalát je tento raz až na konci cestičky.\\\nChoď
        po cestičke **pokiaľ neplatí**, že si na políčku s hlávkou šalátu, potom pokračuj
        a zbieraj šalát **pokiaľ** tam nejaký je.  "
      courseE_farmer_ramp12c_2019: "The lettuce is now only at the end of the path.\\\nTravel
        down the path **until** you reach a head of lettuce, then continue to pick
        it **while** there is still some left.  "
      courseE_farmer_ramp12d: |-
        Šalát je roztrúsený po celej záhrade.\
        Prejdi po každej cestičke **dokiaľ** sa nedostaneš ku hlavičke šalátu, potom pokračuj v zbere **pokiaľ** sa tam ešte nejaká je.
      courseE_farmer_ramp12d_2018: "Šalát je rozptýlený po celej záhrade.\\\nChoď
        po cestičke **pokiaľ nie** si na políčku s hlávkou šalátu, potom pokračuj
        a zbieraj šalát **pokiaľ** tam nejaký je.  "
      courseE_farmer_ramp12d_2019: |-
        Šalát je roztrúsený po celej záhrade.\
        Prejdi po každej cestičke **dokiaľ** sa nedostaneš ku hlavičke šalátu, potom pokračuj v zbere **pokiaľ** sa tam ešte nejaká je.
      courseE_farmer_ramp12e: |-
        Šalát je roztrúsený po celej záhrade.\
        Prejdi po každej cestičke **dokiaľ** sa nedostaneš ku hlavičke šalátu, potom pokračuj v zbere **pokiaľ** sa tam ešte nejaká je.
      courseE_farmer_ramp12e_2018: |-
        Šalát je roztrúsený po celej záhrade.\
        Prejdi po každej cestičke **dokiaľ** sa nedostaneš ku hlavičke šalátu, potom pokračuj v zbere **pokiaľ** sa tam ešte nejaká je.
      courseE_farmer_ramp12e_2019: |-
        Šalát je roztrúsený po celej záhrade.\
        Prejdi po každej cestičke **dokiaľ** sa nedostaneš ku hlavičke šalátu, potom pokračuj v zbere **pokiaľ** sa tam ešte nejaká je.
      courseE_farmer_ramp12f: "**Výzva**: jediný spôsob ako pozbierať celú úrodu je
        posúvať sa dopredu pokiaľ sa nedostaneš k šalátu, potom sa otoč vľavo **ak**
        je cesta vľavo, inak sa otoč vpravo."
      courseE_farmer_ramp12f_2018: "**Výzva**: jediný spôsob ako pozbierať celú úrodu
        je posúvať sa dopredu pokiaľ sa nedostaneš k šalátu, potom sa otoč vľavo **ak**
        je cesta vľavo, inak sa otoč vpravo."
      courseE_farmer_ramp12f_2019: "**Výzva**: jediný spôsob ako pozbierať celú úrodu
        je posúvať sa dopredu pokiaľ sa nedostaneš k šalátu, potom sa otoč vľavo **ak**
        je cesta vľavo, inak sa otoč vpravo."
      courseE_farmer_ramp12g: Posúvaj sa dopredu pokiaľ sa nedostaneš k šalátu, potom
        sa otoč vľavo **ak** je cesta vľavo, inak sa otoč vpravo.
      courseE_farmer_ramp12g_2018: Posúvaj sa dopredu pokiaľ sa nedostaneš k šalátu,
        potom sa otoč vľavo **ak** je cesta vľavo, inak sa otoč vpravo.
      courseE_farmer_ramp12g_2019: Posúvaj sa dopredu pokiaľ sa nedostaneš k šalátu,
        potom sa otoč vľavo **ak** je cesta vľavo, inak sa otoč vpravo.
      courseE_playLab_challenge1: "_The **squirrels** are terrified to see that a
        **dinosaur** has come to town! Can the brave **knight** keep them all from
        panicking?_\n\nRules:\n\n1.  _Touching the squirrels scores you points._\n2.
        \ _Touching the dinosaur takes many points away._\n\nHere is a different kind
        of game that has already been started for you! Play it to see how it works.
        \n\nSomething should happen when you get enough points or when you run out
        of points. Add some code to the `win game` and `lose game` functions to make
        the game work the way it should. \nClick the hints for ideas!"
      courseE_playLab_scaffold1: |-
        It is amazing how much you have learned! Let's make a game step by step.

        Using new blocks in your toolbox, choose a new background, then pick an actor to be in your game.
      courseE_playLab_scaffold2: "Use  blocks like event handlers and actions to make
        your player move according to the arrows on your keyboard.  \n\nGet the player
        to the targets to complete this puzzle."
      courseE_playLab_scaffold3: |-
        Let's add some more characters to your game!

        Use the `set actor` block to add more characters then move to the goal to complete this puzzle.
      courseE_playLab_scaffold4: |-
        Multiple characters and getting the actors moving is a great start to a game, but we need to do more to make this feel like a real game. Let's add a score!

        Use event blocks like the `when actor touches` to change the score. Score 10 points to complete this puzzle.
      courseE_playLab_scaffold5: Great job! You have all the basic components of a
        working game. Now spend some time making sure the game works the way you want.
        Include a way to win or lose your game, then play until you meet one of those
        conditions.
      courseE_playLab_scaffold6: You've finished! Now you can play your game or share
        it with your friends and classmates!
      courseF_artist_for1: "**Voľná hra:** Experimentuj s cyklom `for` a s premennou
        `počítadlo`. \n\nVytiahni niekoľko blokov a pozri sa, čo sa stane.  "
      courseF_artist_for10: |-
        **Voľná hra:** Skús použiť premennú `počítadlo` spolu s ďalšími kresliacimi blokmi, aby si vytvoril magické obrázky ako tento.

        ![](https://images.code.org/5a4eec10a53aa78ad6b12fb5e48680f8-image-1497991505852.png)
      courseF_artist_for10_2018: |-
        **Voľná hra:** Skús použiť premennú `počítadlo` spolu s ďalšími kresliacimi blokmi, aby si vytvoril magické obrázky ako tento.

        ![](https://images.code.org/5a4eec10a53aa78ad6b12fb5e48680f8-image-1497991505852.png)
      courseF_artist_for10_2019: |-
        **Voľná hra:** Skús použiť premennú `počítadlo` spolu s ďalšími kresliacimi blokmi, aby si vytvoril magické obrázky ako tento.

        ![](https://images.code.org/5a4eec10a53aa78ad6b12fb5e48680f8-image-1497991505852.png)
      courseF_artist_for1_2018: "**Voľná hra:** Experimentuj s cyklom `for` a s premennou
        `počítadlo`. \n\nVytiahni niekoľko blokov a pozri sa, čo sa stane.  "
      courseF_artist_for1_2019: "**Voľná hra:** Experimentuj s cyklom `for` a s premennou
        `počítadlo`. \n\nVytiahni niekoľko blokov a pozri sa, čo sa stane.  "
      courseF_artist_for2: Použi cyklus `opakuj` vo vnútri cyklu `for` na vytvorenie
        tejto kopy trojuholníkov, ktoré majú strany dlhé od 50 do 100 pixelov.
      courseF_artist_for2_2018: Použi cyklus `opakuj` vo vnútri cyklu `for` na vytvorenie
        tejto kopy trojuholníkov, ktoré majú strany dlhé od 50 do 100 pixelov.
      courseF_artist_for2_2019: Použi cyklus `opakuj` vo vnútri cyklu `for` na vytvorenie
        tejto kopy trojuholníkov, ktoré majú strany dlhé od 50 do 100 pixelov.
      courseF_artist_for3: Vytvor tieto trojuholníky, ktoré majú strany od 20 do 200
        pixelov, a kde každý trojuholník je o 20 pixelov väčší ako ten predošlý.
      courseF_artist_for3_2018: Vytvor tieto trojuholníky, ktoré majú strany od 20
        do 200 pixelov, a kde každý trojuholník je o 20 pixelov väčší ako ten predošlý.
      courseF_artist_for3_2019: Vytvor tieto trojuholníky, ktoré majú strany od 20
        do 200 pixelov, a kde každý trojuholník je o 20 pixelov väčší ako ten predošlý.
      courseF_artist_for5: |-
        Len jedná malá zmena v kóde z posledného obrázku dokáže vytvoriť takýto obrázok. Vieš zistiť aká je to zmena?

        * * *

        Nápoveda: Potrebuješ niečo odstrániť!
      courseF_artist_for5_2018: |-
        Len jedná malá zmena v kóde z posledného obrázku dokáže vytvoriť takýto obrázok. Vieš zistiť aká je to zmena?

        * * *

        Nápoveda: Potrebuješ niečo odstrániť!
      courseF_artist_for5_2019: |-
        Len jedná malá zmena v kóde z posledného obrázku dokáže vytvoriť takýto obrázok. Vieš zistiť aká je to zmena?

        * * *

        Nápoveda: Potrebuješ niečo odstrániť!
      courseF_artist_for6: |-
        Ak sa otočíš o trochu viac alebo menej, ako by si sa normálne, tak to spraví vkusný efekt.

        Pretvor tvoj kód z predošlej úlohy, ale teraz sa otoč o 89 stupňov, aby si vytvoril takúto pokrútenú štvorcovú špirálu.
      courseF_artist_for6_2018: |-
        Ak sa otočíš o trochu viac alebo menej, ako by si sa normálne, tak to spraví vkusný efekt.

        Pretvor tvoj kód z predošlej úlohy, ale teraz sa otoč o 89 stupňov, aby si vytvoril takúto pokrútenú štvorcovú špirálu.
      courseF_artist_for6_2019: |-
        Ak sa otočíš o trochu viac alebo menej, ako by si sa normálne, tak to spraví vkusný efekt.

        Pretvor tvoj kód z predošlej úlohy, ale teraz sa otoč o 89 stupňov, aby si vytvoril takúto pokrútenú štvorcovú špirálu.
      courseF_artist_for7: 'Sprav tri malé zmeny v kóde z predošlého levelu, aby si
        vytvoril toto!  '
      courseF_artist_for7_2018: 'Sprav tri malé zmeny v kóde z predošlého levelu,
        aby si vytvoril toto!  '
      courseF_artist_for7_2019: 'Sprav tri malé zmeny v kóde z predošlého levelu,
        aby si vytvoril toto!  '
      courseF_artist_for9: |-
        **Inšpirácia:** Použi počítadlo vo vnútri bloku `nastav alfa`, aby si dostal niečo ako tento vyblednutý stred.\
        (Tento šesťuholníkový vzor bol vytvorený otáčaním o 60 stupňov.)
      courseF_artist_for9_2018: |-
        **Inšpirácia:** Použi počítadlo vo vnútri bloku `nastav alfa`, aby si dostal niečo ako tento vyblednutý stred.\
        (Tento šesťuholníkový vzor bol vytvorený otáčaním o 60 stupňov.)
      courseF_artist_for9_2019: |-
        **Inšpirácia:** Použi počítadlo vo vnútri bloku `nastav alfa`, aby si dostal niečo ako tento vyblednutý stred.\
        (Tento šesťuholníkový vzor bol vytvorený otáčaním o 60 stupňov.)
      courseF_artist_for_challenge1: |-
        Dokážeš prísť na to, ako vytvoriť tento obrázok?

        <img src="https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png" width="350px"/>
      courseF_artist_for_challenge1_2018: |-
        Dokážeš prísť na to, ako vytvoriť tento obrázok?

        <img src="https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png" width="350px"/>
      courseF_artist_for_challenge1_2019: |-
        Dokážeš prísť na to, ako vytvoriť tento obrázok?

        <img src="https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png" width="350px"/>
      courseF_artist_for_challenge2: |-
        Dokážeš prísť na to, ako vytvoriť tento obrázok s jediným cyklom?

        <img src="https://images.code.org/b0d15d06465d645c5ca533e5da6387b3-image-1446075597132.36.04.png" width="350px"/>
      courseF_artist_for_challenge2_2018: |-
        Dokážeš prísť na to, ako vytvoriť tento obrázok s jediným cyklom?

        <img src="https://images.code.org/b0d15d06465d645c5ca533e5da6387b3-image-1446075597132.36.04.png" width="350px"/>
      courseF_artist_for_challenge2_2019: |-
        Dokážeš prísť na to, ako vytvoriť tento obrázok s jediným cyklom?

        <img src="https://images.code.org/b0d15d06465d645c5ca533e5da6387b3-image-1446075597132.36.04.png" width="350px"/>
      courseF_artist_fwp1: Today, we're going to keep using the powerful function
        editor. See if you remember how to edit the `draw a square` function to find
        the bugs.
      courseF_artist_fwp2: "Edit the function to accept a parameter called `length`.
        \ \n\nThe sides of each square should be 25 pixels larger than the last.  The
        first square has 25 pixel sides."
      courseF_artist_fwp2_predict1: "Edit the function to accept a parameter called
        `length`.  \n\nThe sides of each square should be 25 pixels larger than the
        last.  The first square has 25 pixel sides. Replace the '???' with the correct
        values to draw the picture."
      courseF_artist_fwp3: "Now try creating the function from scratch!  \n\nCreate
        a function called `draw a square` and use it to outline these four boxes.\\\nMake
        sure to add a parameter for `length`!\n\n* * *\n\nStarting from the upper
        right, the box widths are 50, 100, 150, and 200."
      courseF_artist_fwp4: |-
        Great job!  Now edit this function to add a parameter for the number of sides in your polygon.

        The sides of all the shapes are 100 pixels long.
      courseF_artist_fwp5: "Use the function from the last puzzle to draw this series
        of shapes.  \n\nThe triangle has 21 pixel sides, and the sides in each following
        shape are 7 pixels longer than the last.\\\nUse the `multiplication` block
        to make this all happen with just one function call.\n\n* * *\n\nThe `multipication`
        block looks like this <xml><block type=\"math_arithmetic\" inline=\"true\">\n
        \     <title name=\"OP\">MULTIPLY</title>\n    </block></xml>"
      courseF_artist_fwp6: |-
        **Challenge:** Edit `draw a spiral edge` to use `length` and `sides` parameters, then recreate these shapes.

        -   The square goes from 3 pixels to 90 pixels.
        -   The hexagon goes from 3 pixels to 100 pixels.
        -   The triangle goes from 3 pixels to 95 pixels.
      courseF_artist_fwp7: |-
        Finish off the `draw a spiral edge` function to also ask for a minimum length for the center of the spiral.

        -   The smallest side in the center of this square is 50 pixels long
        -   The longest side at the outside of this spiral is 200 pixels long
      courseF_artist_fwp8: |-
        Freeplay! Can you figure out how to make this drawing using the function that you just created?

        -   The red spiral goes from 50 to 200 pixels
        -   The blue spiral goes from 25 to 150 pixels
        -   The green spiral goes from 100 to 350 pixels
      courseF_artist_fwp9: "**Freeplay:** Below there are functions you've written,
        and more for you to play with. Play with the pen width to see how different
        your drawings look! Suggestions are in the hints!"
      courseF_artist_fwp_challenge1: Try running this program. Make changes to see
        what happens. Can you figure out how it works? You can also delete it and
        replace it with something totally different.
      courseF_artist_fwp_challenge2: |-
        Wow! Use what you learned in the previous level to draw an image like this.

        _Hint: Use parameters to make your code simpler._

        <br/>
        <img src="https://images.code.org/d3d6a51fafdcc0a09a5c6b0e0f3c2b92-image-1446239805818.08.59.png" width="300px"/>
        <br/>
      courseF_artist_variables10: "Tu je tvoj kód z predošlej úlohy. Skús zmeniť premennú
        rôznymi spôsobmi. \n\n-   Čo sa stane, ak začneš s `dĺžka` menšou než 150?\n-
        \  Čo ak zakaždým vynásobiš tvoju premennú číslom 1.25 namiesto pripočítania
        10?\n-   Čo spraví tvoj kód, ak sa otočíš o 119 stupňov?"
      courseF_artist_variables10_2018: "Tu je tvoj kód z predošlej úlohy. Skús zmeniť
        premennú rôznymi spôsobmi. \n\n-   Čo sa stane, ak začneš s `dĺžka` menšou
        než 150?\n-   Čo ak zakaždým vynásobiš tvoju premennú číslom 1.25 namiesto
        pripočítania 10?\n-   Čo spraví tvoj kód, ak sa otočíš o 119 stupňov?"
      courseF_artist_variables10_2019: "Tu je tvoj kód z predošlej úlohy. Skús zmeniť
        premennú rôznymi spôsobmi. \n\n-   Čo sa stane, ak začneš s `dĺžka` menšou
        než 150?\n-   Čo ak zakaždým vynásobiš tvoju premennú číslom 1.25 namiesto
        pripočítania 10?\n-   Čo spraví tvoj kód, ak sa otočíš o 119 stupňov?"
      courseF_artist_variables2: |-
        Teraz pouźi ďalší cyklus a nakresli tri také isté trojuholníky za sebou.

        Môžeš doň vložiť kód z predošlej úlohy.
      courseF_artist_variables2_2018: |-
        Teraz pouźi ďalší cyklus a nakresli tri také isté trojuholníky za sebou.

        Môžeš doň vložiť kód z predošlej úlohy.
      courseF_artist_variables2_2019: |-
        Teraz pouźi ďalší cyklus a nakresli tri také isté trojuholníky za sebou.

        Môžeš doň vložiť kód z predošlej úlohy.
      courseF_artist_variables3: |-
        Skôr ako sa to skomplikuje, môžeš presunúť dĺžku 50 do premennej, takže ju budeme môcť využívať v zopár ďalších úlohách?

        ![expandable](https://images.code.org/73447d004093c6be8ab01a1358155f16-image-1498068386665.gif)
      courseF_artist_variables3_2018: |-
        Skôr ako sa to skomplikuje, môžeš presunúť dĺžku 50 do premennej, takže ju budeme môcť využívať v zopár ďalších úlohách?

        ![expandable](https://images.code.org/73447d004093c6be8ab01a1358155f16-image-1498068386665.gif)
      courseF_artist_variables3_2019: |-
        Skôr ako sa to skomplikuje, môžeš presunúť dĺžku 50 do premennej, takže ju budeme môcť využívať v zopár ďalších úlohách?

        ![expandable](https://images.code.org/73447d004093c6be8ab01a1358155f16-image-1498068386665.gif)
      courseF_artist_variables4: Teraz použi premennú `dĺžka`, aby umelec skočil dopredu
        a dole o `dĺžka` pixelov medzi trojuhoníkmi.
      courseF_artist_variables4_2018: Teraz použi premennú `dĺžka`, aby umelec skočil
        dopredu a dole o `dĺžka` pixelov medzi trojuhoníkmi.
      courseF_artist_variables4_2019: Teraz použi premennú `dĺžka`, aby umelec skočil
        dopredu a dole o `dĺžka` pixelov medzi trojuhoníkmi.
      courseF_artist_variables6: |-
        **EJHA!**

        My vlastne potrebujeme trojuholníky široké 60 pixelov, spolu so skokmi o 60 pixelov.

        Nie si rád, že používaš premennú?
      courseF_artist_variables6_2018: |-
        **EJHA!**

        My vlastne potrebujeme trojuholníky široké 60 pixelov, spolu so skokmi o 60 pixelov.

        Nie si rád, že používaš premennú?
      courseF_artist_variables6_2019: |-
        **EJHA!**

        My vlastne potrebujeme trojuholníky široké 60 pixelov, spolu so skokmi o 60 pixelov.

        Nie si rád, že používaš premennú?
      courseF_artist_variables6a: Použi, čo si sa naučil, aby si vytvoril tento návrh,
        kde sú štvorce široké 80 pixelov a umelec preskočí o 80 pixelov dole medzi
        každými dvomi.
      courseF_artist_variables6a_2018: Použi, čo si sa naučil, aby si vytvoril tento
        návrh, kde sú štvorce široké 80 pixelov a umelec preskočí o 80 pixelov dole
        medzi každými dvomi.
      courseF_artist_variables6a_2019: Použi, čo si sa naučil, aby si vytvoril tento
        návrh, kde sú štvorce široké 80 pixelov a umelec preskočí o 80 pixelov dole
        medzi každými dvomi.
      courseF_artist_variables7: |-
        Začnime túto sekciu nakreslením trojuholníka so stranami dĺžky 150 pixelov.

        Uisti sa, že používaš premennú `dĺžka (length)` a cyklus opakuj.
      courseF_artist_variables7_2018: |-
        Začnime túto sekciu nakreslením trojuholníka so stranami dĺžky 150 pixelov.

        Uisti sa, že používaš premennú `dĺžka (length)` a cyklus opakuj.
      courseF_artist_variables7_2019: |-
        Začnime túto sekciu nakreslením trojuholníka so stranami dĺžky 150 pixelov.

        Uisti sa, že používaš premennú `dĺžka (length)` a cyklus opakuj.
      courseF_artist_variables8: |-
        Prerob trojuholníkový kód z predošlej úlohy, ale tentokrát použi blok `nastav dĺžka (length) na`, aby si zmenil premennú `dĺžka` na `dĺžka`+10 na konci každej iterácie cyklu.

        <xml>
        <block type="variables_set" inline="false">
        <title name="VAR">length</title>
        <value name="VALUE">
        <block type="math_arithmetic" inline="true">
        <title name="OP">ADD</title>
        <value name="A">
        <block type="variables_get">
        <title name="VAR">length</title>
        </block>
        </value>
        <value name="B">
        <block type="math_number">
        <title name="NUM">10</title>
        </block>
        </value>
        </block>
        </value>
        </block>
        </xml>

        Dĺžka prvej strany trojuholníka je 150 pixelov.
      courseF_artist_variables8_2018: |-
        Prerob trojuholníkový kód z predošlej úlohy, ale tentokrát použi blok `nastav dĺžka (length) na`, aby si zmenil premennú `dĺžka` na `dĺžka`+10 na konci každej iterácie cyklu.

        <xml>
        <block type="variables_set" inline="false">
        <title name="VAR">length</title>
        <value name="VALUE">
        <block type="math_arithmetic" inline="true">
        <title name="OP">ADD</title>
        <value name="A">
        <block type="variables_get">
        <title name="VAR">length</title>
        </block>
        </value>
        <value name="B">
        <block type="math_number">
        <title name="NUM">10</title>
        </block>
        </value>
        </block>
        </value>
        </block>
        </xml>

        Dĺžka prvej strany trojuholníka je 150 pixelov.
      courseF_artist_variables8_2019: |-
        Prerob trojuholníkový kód z predošlej úlohy, ale tentokrát použi blok `nastav dĺžka (length) na`, aby si zmenil premennú `dĺžka` na `dĺžka`+10 na konci každej iterácie cyklu.

        <xml>
        <block type="variables_set" inline="false">
        <title name="VAR">length</title>
        <value name="VALUE">
        <block type="math_arithmetic" inline="true">
        <title name="OP">ADD</title>
        <value name="A">
        <block type="variables_get">
        <title name="VAR">length</title>
        </block>
        </value>
        <value name="B">
        <block type="math_number">
        <title name="NUM">10</title>
        </block>
        </value>
        </block>
        </value>
        </block>
        </xml>

        Dĺžka prvej strany trojuholníka je 150 pixelov.
      courseF_artist_variables9: "Čas na nejaké umenie! \n\nSleduj, čo sa stane, ak
        zopakuješ kód z predošlej úlohy **30** krát namiesto 3!\n\nNeobmedzuj sa,
        sprav tvoje čiary hocijakou farbou alebo vzorom len tak pre zábavu."
      courseF_artist_variables9_2018: "Čas na nejaké umenie! \n\nSleduj, čo sa stane,
        ak zopakuješ kód z predošlej úlohy **30** krát namiesto 3!\n\nNeobmedzuj sa,
        sprav tvoje čiary hocijakou farbou alebo vzorom len tak pre zábavu."
      courseF_artist_variables9_2019: "Čas na nejaké umenie! \n\nSleduj, čo sa stane,
        ak zopakuješ kód z predošlej úlohy **30** krát namiesto 3!\n\nNeobmedzuj sa,
        sprav tvoje čiary hocijakou farbou alebo vzorom len tak pre zábavu."
      courseF_artist_variablesFP: |-
        **Voľná hra:** Použi, čo si sa naučil, a vytvor svoju vlastnú kresbu.

        Ako môžeš použiť premenné so štvorcami, päťuholníkmi alebo šesťuholníkmi?
      courseF_artist_variablesFP_2018: |-
        **Voľná hra:** Použi, čo si sa naučil, a vytvor svoju vlastnú kresbu.

        Ako môžeš použiť premenné so štvorcami, päťuholníkmi alebo šesťuholníkmi?
      courseF_artist_variablesFP_2019: |-
        **Voľná hra:** Použi, čo si sa naučil, a vytvor svoju vlastnú kresbu.

        Ako môžeš použiť premenné so štvorcami, päťuholníkmi alebo šesťuholníkmi?
      courseF_artist_variables_challenge1: Challenge alert! Can you create a `length`
        variable and use it to create this interesting pattern?
      courseF_artist_variables_challenge1_2018: Challenge alert! Can you create a
        `length` variable and use it to create this interesting pattern?
      courseF_artist_variables_challenge1_2019: Challenge alert! Can you create a
        `length` variable and use it to create this interesting pattern?
      courseF_artist_variables_challenge2: |-
        <img src="https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png" width="250px"/>

        You've now learned everything you need to know to make a pattern like this! This puzzle is meant to be difficult.  Can you stick with it until you figure out the solution?
      courseF_artist_variables_challenge2_2018: |-
        <img src="https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png" width="250px"/>

        You've now learned everything you need to know to make a pattern like this! This puzzle is meant to be difficult.  Can you stick with it until you figure out the solution?
      courseF_artist_variables_challenge2_2019: |-
        <img src="https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png" width="250px"/>

        You've now learned everything you need to know to make a pattern like this! This puzzle is meant to be difficult.  Can you stick with it until you figure out the solution?
      courseF_bee_conditionals10: |-
        Podmienky môžu byť nápomocné aj vtedy, keď presne vieš, čo sa na každom mieste nachádza!

        Pozberaj všetok nektár a urob z neho med.
      courseF_bee_conditionals1_predict1: |-
        _"Tento oblak mi zacláňa vo výhľade!"_

         Skontroluj, či je pod oblakom kvet. Ak sa tam kvet nachádza, pozberaj  nektár.
      courseF_bee_conditionals2: |-
        _"Je veľmi zamračené a nevidíš kvety!"_

        Skôr ako zoberieš nektár, skontroluj, či sa pod každým oblakom nachádza kvet. Ak je pod oblakom kvet, včela **ihneď** pozbiera nektár.

        Pamätaj: Nie pod všetkými oblakmi sa skrýva tá istá vec!

        Skontroluje
      courseF_bee_conditionals3: Nektár môžeš zbierať len z kvetov, ale musíš skontrolovať
        každé miestečko, aby si si overil, či sa tam nenachádza kvet. Ak sa pod oblakom
        nachádza kvet, včela bude musieť _ihneď_ pozberať nektár.
      courseF_bee_conditionals4: |-
        Vieme, že z každého kvetu je možné dostať nektár, ale v tejto úlohe kvety nie sú rovnomerne rozložené.

        Zober všetok nektár, s použitím čo najmänšieho počtu blokov.
      courseF_bee_conditionals7_predict2: "Niekedy oblak zakrýva kvetinku a niekedy
        zakrýva úľ! \n\nPouži blok `ak/inak` a pozberaj nektár pri kvetoch a vyrob
        med pri pláste."
      courseF_bee_conditionals8: |-
        **Výzva:** Pod každým z oblakov bude buď kvet alebo včelí plást!

        Ak bude kvet, pozberaj nektár.
        V opačnom prípade, vyrob med (lebo je to plást).
      courseF_bee_for10: |-
        **Výzva:** Použi, čo si sa naučil o cykloch `for`, a skús vyriešiť tento problém.

        Nezabudni. Mal by si prejsť cez riešenia niekoľko krát, kým vymyslíš všetky kroky.
      courseF_bee_for10_2018: |-
        **Výzva:** Použi, čo si sa naučil o cykloch `for`, a skús vyriešiť tento problém.

        Nezabudni. Mal by si prejsť cez riešenia niekoľko krát, kým vymyslíš všetky kroky.
      courseF_bee_for10_2019: |-
        **Výzva:** Použi, čo si sa naučil o cykloch `for`, a skús vyriešiť tento problém.

        Nezabudni. Mal by si prejsť cez riešenia niekoľko krát, kým vymyslíš všetky kroky.
      courseF_bee_for11: |-
        Ak tvoj cyklus odpočítava, tak prírastok je **odčítaný** z tvojej premennej počítadlo (counter) pri každom prechode.

        Aký má byť prírastok, aby si pozbieral 15, potom 12, potom 9, 6, 3 nektáre?
      courseF_bee_for11_2018: |-
        Ak tvoj cyklus odpočítava, tak prírastok je **odčítaný** z tvojej premennej počítadlo (counter) pri každom prechode.

        Aký má byť prírastok, aby si pozbieral 15, potom 12, potom 9, 6, 3 nektáre?
      courseF_bee_for11_2019: |-
        Ak tvoj cyklus odpočítava, tak prírastok je **odčítaný** z tvojej premennej počítadlo (counter) pri každom prechode.

        Aký má byť prírastok, aby si pozbieral 15, potom 12, potom 9, 6, 3 nektáre?
      courseF_bee_for2: |-
        Napíš kód, ktorý pomôže včele pozbierať všetok nektár.

        Potrebuješ veľa blokov pre túto výzvu, ale v ďalšej úlohe sa naučíme jednoduchší spôsob.
      courseF_bee_for2_2018: |-
        Napíš kód, ktorý pomôže včele pozbierať všetok nektár.

        Potrebuješ veľa blokov pre túto výzvu, ale v ďalšej úlohe sa naučíme jednoduchší spôsob.
      courseF_bee_for2_2019: |-
        Napíš kód, ktorý pomôže včele pozbierať všetok nektár.

        Potrebuješ veľa blokov pre túto výzvu, ale v ďalšej úlohe sa naučíme jednoduchší spôsob.
      courseF_bee_for6: |-
        Cyklus `for` môžeš použiť aj na odpočítavanie.

        Skús pozbierať nektár odpočítavaním od **5** do **1** počítané po **1**.
      courseF_bee_for6_2018: |-
        Cyklus `for` môžeš použiť aj na odpočítavanie.

        Skús pozbierať nektár odpočítavaním od **5** do **1** počítané po **1**.
      courseF_bee_for6_2019: |-
        Cyklus `for` môžeš použiť aj na odpočítavanie.

        Skús pozbierať nektár odpočítavaním od **5** do **1** počítané po **1**.
      courseF_bee_for7: |-
        Posledné číslo v tvojom cykle `for` sa nazýva **"prírastok"**. Zakaždým, keď cyklus prebehne, tak sa premenná počítadlo zmení o hodnotu  **prírastku**.

        Skús pozbierať tieto kvety s použitím **prírastku** 2.
      courseF_bee_for7_2018: |-
        Posledné číslo v tvojom cykle `for` sa nazýva **"prírastok"**. Zakaždým, keď cyklus prebehne, tak sa premenná počítadlo zmení o hodnotu  **prírastku**.

        Skús pozbierať tieto kvety s použitím **prírastku** 2.
      courseF_bee_for7_2019: |-
        Posledné číslo v tvojom cykle `for` sa nazýva **"prírastok"**. Zakaždým, keď cyklus prebehne, tak sa premenná počítadlo zmení o hodnotu  **prírastku**.

        Skús pozbierať tieto kvety s použitím **prírastku** 2.
      courseF_bee_for8: "Máš to! \n\nAký by mal byť tvoj **prírastok**, aby si pozbieral
        3, 6, 9, 12, 15 nektárov?"
      courseF_bee_for8_2018: "Máš to! \n\nAký by mal byť tvoj **prírastok**, aby si
        pozbieral 3, 6, 9, 12, 15 nektárov?"
      courseF_bee_for8_2019: "Máš to! \n\nAký by mal byť tvoj **prírastok**, aby si
        pozbieral 3, 6, 9, 12, 15 nektárov?"
      courseF_bee_for9: |-
        Teraz skombinujme premennú `počítadlo` s `matematickým` blokom!

        Ako môžeš použíť premennú `počítadlo` na prejdenie cez túto záhradu s najmenším počtom blokov?
      courseF_bee_for9_2018: |-
        Teraz skombinujme premennú `počítadlo` s `matematickým` blokom!

        Ako môžeš použíť premennú `počítadlo` na prejdenie cez túto záhradu s najmenším počtom blokov?
      courseF_bee_for9_2019: |-
        Teraz skombinujme premennú `počítadlo` s `matematickým` blokom!

        Ako môžeš použíť premennú `počítadlo` na prejdenie cez túto záhradu s najmenším počtom blokov?
      courseF_bee_for_challenge1: |-
        Môžeš použiť tento `cyklus for` na pozbieranie všetkého nektáru. Neuveriteľné! (Un-bee-lievable)

        Je tam niekoľko akcií, ktoré chceš `zopakovať 'počítadlo' krát`.
      courseF_bee_for_challenge1_2018: |-
        Môžeš použiť tento `cyklus for` na pozbieranie všetkého nektáru. Neuveriteľné! (Un-bee-lievable)

        Je tam niekoľko akcií, ktoré chceš `zopakovať 'počítadlo' krát`.
      courseF_bee_for_challenge1_2019: |-
        Môžeš použiť tento `cyklus for` na pozbieranie všetkého nektáru. Neuveriteľné! (Un-bee-lievable)

        Je tam niekoľko akcií, ktoré chceš `zopakovať 'počítadlo' krát`.
      courseF_bee_for_challenge2: Vyrieš túto úlohu použitím čo najmenšieho možného
        počtu blokov.
      courseF_bee_for_challenge2_2018: Vyrieš túto úlohu použitím čo najmenšieho možného
        počtu blokov.
      courseF_bee_for_challenge2_2019: Vyrieš túto úlohu použitím čo najmenšieho možného
        počtu blokov.
      courseF_bee_functions2: "To make things easier, it's time to learn about functions!\n\nFrom
        here on out, you will be using a new _function editor_.  This editor is a
        separate window that will appear when you go to edit a function.  You won't
        see all of the code from your function while you're coding in the workspace,
        but don't worry...it's still there!  \n\n* * *\n\nLet's practice with this
        function that gets nectar only if the bee is at a flower.  To see the code
        inside, click the blue \"edit\" button!\n\nUse the `get only nectar` function
        to collect the nectar from each flower."
      courseF_bee_functions3: Now it's your turn to make a function to get some honey
        **only** if there is a honeycomb!  Click "edit" to build the `only make honey`
        function, then use it to solve this puzzle.
      courseF_bee_functions3a: |-
        Each cloud could be hiding either one flower or one honeycomb!  Write a function that gets nectar if the bee is at a flower, otherwise it gets honey.

        Use your function to solve the puzzle!
      courseF_bee_functions4: "Did you know that you can call a function from _inside_
        another function?  \n\nUse your `check nectar or honey` function inside the
        new `move and check` function to help the bee turn, go get what's under the
        cloud, then back-up and turn back around!"
      courseF_bee_functions5a: Now, build `move and check` so that it takes the bee
        to the cloud whenever there is a path to the right, then use it to solve this
        puzzle!
      courseF_bee_functions6: |-
        _"This field is a-MAZE-ing!"_

        Build your own function to help the bee through the maze by turning left at flowers and right at honeycomb.  Don't forget to collect nectar and make honey along the way!
      courseF_bee_functions7: |-
        Rebuild your function from the last puzzle to solve this maze.

        Turn left at the honeycomb and right at the flowers.\
        **Note:** Some corners are unmarked!
      courseF_bee_functions8a: "Underneath this cloud, there might be a flower with
        an unknown amount of nectar, or a honeycomb with an unknown amount of honey.
        \ \n\nCan you write a program that can handle either?"
      courseF_bee_functionsPre7: "Now try building a function to solve this maze.
        \ How is it different from last time?  \n\nTurn left at the honeycomb and
        right at the flowers.\\\n**Note:** Some corners are unmarked!"
      courseF_bee_functions_challenge1: Create a new function to collect all the nectar
        and honey while there is a path ahead. Use it to complete the puzzle!
      courseF_bee_functions_challenge2: Use everything you have learned to complete
        this puzzle!
      courseF_bee_fwp1: "Check beneath the clouds to see if the flowers have any nectar.
        \ \n\nFor this whole stage, each flower will have exactly **one** unit of
        nectar, and each honeycomb will need exactly **one** unit of honey. "
      courseF_bee_fwp2: "Here's some code that solves the last puzzle.\\\nLet's pull
        it into a function, then call the function to check this row for nectar.  \n\n*
        * *\n\nThis may seem like a strange step now, but it will be really helpful
        soon!"
      courseF_bee_fwp3: "Time to put the function to the test! \n\nLet's see if it
        makes collecting these three rows of nectar any easier."
      courseF_bee_fwp4: "_\"How is your function holding up?\"_   \n\nWe need to make
        some adjustments here. Click \"edit\" to add a `length` parameter to the function
        so that it will still work when the row is a different length."
      courseF_bee_fwp5: |-
        _"You're doing great so far!"_

        Let's use this function to collect the nectar.
      courseF_bee_fwp6: "You can make code shorter and more efficient when you combine
        functions with other programming elements.  \n\n* * *\n\nWhat blocks can you
        use with your function to build a short and sweet solution to this puzzle?"
      courseF_bee_fwp7: "**Challenge:** Something looks a little different. Modify
        your function to make honey as well."
      courseF_bee_fwp_challenge1: Use one `for loop` in a function to collect all
        of the corn. The same `for loop` can count to different maximum values by
        using the `length` parameter.
      courseF_bee_fwp_challenge2: |-
        _"**Lettuce** see if you can handle this one final test! Give it everything you've got!"_

        Use one `for loop` in a function to collect all of the vegetables in the row. Make the `for loop` count to different maximum values by using the `length` parameter. Make your program as short as possible by using a second `for loop` outside the function.

        Good luck!
      courseF_bee_variables_3_2018: "_\"Such an a-MAZE-ing garden! (Aká nádherná záhrada!)\"_
        \n\nV tejto úlohe každý kúsok potrebuje premennú o jedna menšiu ako predošlý
        kúsok. Odčítaj jedna z premennej vždy keď prejdeš cez cyklus, ak chceš použiť
        rovnakú funkciu na vyriešenie tohto levelu."
      courseF_bee_variables_3_2019: "_\"Such an a-MAZE-ing garden! (Aká nádherná záhrada!)\"_
        \n\nV tejto úlohe každý kúsok potrebuje premennú o jedna menšiu ako predošlý
        kúsok. Odčítaj jedna z premennej vždy keď prejdeš cez cyklus, ak chceš použiť
        rovnakú funkciu na vyriešenie tohto levelu."
      courseF_bee_variables_4_2018: |-
        "Neuveriteľné! (Un-BEE-lievable|)"

        Uprav kód, aby fungoval pre túto úlohu.
      courseF_bee_variables_4_2019: |-
        "Pokračujme!"

        Uprav kód, aby fungoval pre túto úlohu.
      courseF_playlab_variables1a: "Variables can be used to store text that you want
        to use later.  \n\nHave Kiki, the soccer player,  scream \"Goal!\" by assigning
        that text to the `shout` variable."
      courseF_playlab_variables2b: |-
        We can make sentences more interesting by mixing pieces of text with variables.

        Insert the variable `color` into the middle of a sentence by putting it into the empty slot in the `join` block.
      courseF_playlab_variables3b_josh: 'Help Kiki have a conversation with Brian
        by using the variable `age` in all of the places where age `12` should be
        used. '
      courseF_playlab_variables4b: "Now, Pirate Pegleg has some questions for Brian.\n\nThis
        code uses an `ask` block, so you can type Brian's answers after you click
        \"Run\". \n\nPut the variables in the correct places to create this conversation."
      courseF_playlab_variables5c: |-
        Let's combine the `ask` block with an `if/else` statement to have some fun!

        Pirate Pegleg is going to ask you a question.  Drag a copy of the `answer` variable into the conditional for the `if` statement to check whether or not you entered the correct color.
      courseF_playlab_variables6c: |-
        In the rest of this stage, we will use multiple `ask` blocks and multiple `if/else` statements to create a game that **you** control!

        Start by setting the "codename" variable to a word that you can remember.  Then, use an `ask` block to get a codename from the users.  You will need an `if/else` block to see if the codename entered matches the codename that you have set.
      courseF_playlab_variables7b: "Time to make your own project!  \n\nCreate some
        questions and weave the answers together into your very own story.\n\nIf you
        need ideas, click the hints icon."
      courseF_playlab_variables7c: "Add another `ask` block to ask the user to guess
        a color.  \n\nKeep your `if/else` statement such that your codename always
        wins the game, but every other codename always loses."
      courseF_playlab_variables8c: Use the `join` block (in the toolbox under "Text")
        to make the win/lose messages more personal by incorporating both the `codename`
        and the `color` variables into the responses.
      courseF_playlab_variables_challenge1: Use these blocks to make the actors share
        a knock-knock joke. Change the punchline and setup to tell your own joke!
      courseF_playlab_variables_challenge2: "Now for a game of tag! Tag Cat (actor
        2) to get 2 points. Tag Penguin (actor 3) to get 3 points.  Get exactly 10
        points to win!  \n\nBut be careful, when Cat and Penguin tag each other, they
        take points away.\n\n* * *\n\nAdd the blocks necessary to make this game work
        the way it's been explained.\n\n-   How will you get Dog to move in all directions
        using the arrow keys?\n-   How will you add points when Dog tags Cat or Penguin?\n-
        \  How will you subtract points when Cat and Penguin touch?"
      coursea_maze_ramp1_2018: Aby sa vták dostal k prasiatku, pripoj blok <xml><block
        type="maze_moveEast"/></xml> na spodok bloku <xml><block type="when_run"/></xml>
        a stlač "▶ Spustiť"!
      coursea_maze_ramp1_2019: Aby sa vták dostal k prasiatku, pripoj blok <xml><block
        type="maze_moveEast" block-text="move east"/></xml> na spodok bloku <xml><block
        type="when_run" block-text="when run"/></xml> a stlač "▶ Spustiť"!
      csd U3 conditional statements video_2019: |-
        ## Otázka na zamyslenie

        -   Kedy by sa ti hodilo použiť výraz `if`?
      csd u5 recommender sample: "# Sample App\n\nHere is an example of an app that
        uses data to help the user solve a problem.  With a partner, play through
        the app a few times to see how it works.\n\nDiscuss the following questions
        with your partner:\n\n-   What choice does the app help the user to make?
        \n-   What data does it use to make that recommendation?\n-   How do you think
        the creators of the app decided on the algorithm that they use to make the
        choice?"
      csd u5 recommender sample_2019: "# Sample App\n\nHere is an example of an app
        that uses data to help the user solve a problem.  With a partner, play through
        the app a few times to see how it works.\n\nDiscuss the following questions
        with your partner:\n\n-   What choice does the app help the user to make?
        \n-   What data does it use to make that recommendation?\n-   How do you think
        the creators of the app decided on the algorithm that they use to make the
        choice?"
      frozen circle: Kružnica je zvláštny tvar. Dokážeš zistiť, akým číslom treba
        nahradiť otázniky, aby sa nakreslila kružnica?
      frozen circle function: Použi nový blok "Vytvor kružnicu" pre nakreslenie 10
        prekrývajúcich sa kružníc. Nezabudni medzi kružnicami skočiť dopredu.
      frozen circle function in circle: Teraz si vytvorme 20 prekrývajúcich sa kružníc
        a po každej z nich sa otočíme o 18 stupňov.
      frozen circle function with parameter: Tu je blok "Vytvor kružnicu", ktorý dokáže
        kresliť kružnice rôznych veľkostí. Dokážeš ho použiť na vytvorenie malej kružnice
        s veľkosťou 5 a väčšej kružnice s veľkosťou 10?
      frozen cross: Vytvor znamienko plus pomocou bloku "Opakuj". Všimol si si, že
        Elsa sa môže pohybovať dopredu i dozadu?
      frozen cross rotate: Teraz to skús zopakovať 10-krát. O koľko stupňov sa musíš
        otočiť medzi jednotlivými čiarami?
      frozen cross rotate dense: 'Zopakujme to 90-krát! Koľkokrát sa 90 vojde do 360?
        Tip: Je to naozaj malé číslo.'
      frozen diamond: Použi opakovanie okolo týchto blokov pre vytvorenie kosoštvorca.
        Vyzerá ako štvorec, ale má iné uhly. Tento má uhly 60 a 120 stupňov namiesto
        90 stupňov v každom rohu.
      frozen diamond mini snowflake: Vedel si, že každá snehová vločka má iný tvar?
        Vytvorme novú vločku pomocou ďaľšieho bloku "Opakuj", ktorým kosoštvorec zopakujeme
        4-krát. Po každom kosoštvorci sa otočíme o 90 stupňov.
      frozen diamond snowflake: Teraz vytvor novú vločku pomocou bloku "Opakuj" tak,
        že kosoštvorec zopakuješ 10-krát a po každom z nich sa otočíš vpravo o 36
        stupňov.
      frozen freeplay: Oficiálne se z teba stal majster umelec! Vytvor zimnú krajinu
        zázrakov.
      frozen perpendicular: Teraz skúsme vytvoriť dve čiary, ktoré sú na seba kolmé.
        Budeš musieť použiť blok "Otoč sa" spolu s blokom "Posuň sa".
      frozen snowflake branch: Skús použiť blok "Vytvor rameno vločky", aby si vytvoril
        tri ramená, ktoré začnú vyzerať ako snehová vločka.
      frozen snowflake full: A teraz to zopakujme 8 krát, aby sme nakreslili prekrásnu
        vločku!
      frozen snowflower: Zložité snehové vzory je možné vytvoriť pomocou veľmi jednoduchých
        tvarov. Dokážeš vytvoriť vzor opakovaním 5 kružníc s veľkosťou 5 a 5 kružníc
        s veľkosťou 10?
      frozen square iterative: Zdá sa, že sme na polceste k vytvoreniu štvorca. Dajme
        dohromady 4 čiary tak, aby vytvorili štvorec.
      frozen square loop: Ahoj, som Anna z Arendelle! Vytvorme štvorec pomocou bloku
        "Opakuj", vďaka ktorému nám stačí použiť menej blokov. Koľkokrát (???) musí
        blok "Opakuj" vykonať príkazy na vnútorných blokoch pre to, aby vznikol štvorec?
      frozen square loop 3x: Vytvor tri štvorce tak, že sa po každom štvorci otočíš.
        Uisti sa, že sa pred každým novým štvorcom otočíš o 120 stupňov.
      frozen square snowflake: Dokážeš vytvoriť snehovú vločku pomocou blokov "Opakuj"
        a "Otoč sa" tak, že nakreslíš 10-krát štvorec a medzi štvorcami sa vždy o
        36 stupňov otočíš?
      grade2_collector_10: "Už si takmer hotový! \n\nNa dokončenie lekcie pozbieraj
        toľko pokladov, koľko sa len vieš!"
      grade2_collector_10_2018: "Už si takmer hotový! \n\nNa dokončenie lekcie pozbieraj
        toľko pokladov, koľko sa len vieš!"
      grade2_collector_10_2019: "Už si takmer hotový! \n\nNa dokončenie lekcie pozbieraj
        toľko pokladov, koľko sa len vieš!"
      grade2_collector_A: Pomôž Laurel pozbierať všetky drahokamy.
      grade2_collector_A_2018: Pomôž Laurel pozbierať všetky drahokamy.
      grade2_collector_A_2019: Pomôž Laurel pozbierať všetky drahokamy.
      grade5_artist_variables_triangles1: |-
        Nakreslime rovnostranný trojuholník.

        Každú stranu musí mať dlhú presne 50 pixelov.
      grade5_artist_variables_triangles1_2018: |-
        Nakreslime rovnostranný trojuholník.

        Každú stranu musí mať dlhú presne 50 pixelov.
      grade5_artist_variables_triangles1_2019: |-
        Nakreslime rovnostranný trojuholník.

        Každú stranu musí mať dlhú presne 50 pixelov.
      grade5_pixelation: "# Make your own image of any size\n\n![](https://images.code.org/01c15fed4f1a2c6c3af531edc35e736e-image-1439596066108.png)\n![](https://images.code.org/24efcaa184d1fc852f37c32911b3b87c-image-1439596070178.png)\n![](https://images.code.org/c9a5d0fd5ba445b7f6b5744e08b50e49-image-1439596071878.png)\n![](https://images.code.org/f14e1b8dd722b0ca5bc54fa96b34f2eb-image-1439596074236.png)\n![](https://images.code.org/fe938c0c16453b9d461b4023098079df-image-1439596075744.png)\n![](https://images.code.org/02c88a7da51289b2f2d1f64bd8c97b28-image-1439596077514.png)\n![](https://images.code.org/309e3157dcfd91956181007f483f8e58-image-1439596079084.png)\n\n**Directions:**\n\n-
        \  Encode an image of anything you like using `binary`.\n-   The binary language
        will be represented with `0` and `1` only.\n-   You might want to do some
        planning and sketching with graph paper first. \n-   Depict something, perhaps
        your name written out, your initials, an icon or logo of some sort.\n-   Get
        creative! The image doesn't have to be a perfect square, it can be long and
        skinny."
      iceage_click_hello: "Can you help Sid call for his friends when you click on
        him? \nOnce you're done, press \"Run\" to play.  Click on Sid to see your
        code work!"
      iceage_free_play: "Time to create your own game or story!  \n\nWhen you're done,
        click \"Finish\" to let friends try your game on their phones, tablets, or
        computers!\nDon't know what to make? Click the hints for details."
      iceage_hello1: "Sid (actor 1) wants to gather everyone for a new adventure.
        Can you help him say \"Hello!\" by dragging the `say` block out and connecting
        it to the bottom of the `when run` event?   \n\nDon't forget to type \"Hello!\"
        inside!"
      iceage_hello2: Manny (actor 2) found Sid (actor 1) and wants to invite him on
        an adventure. Help them greet each other by using the the `actor ___ say`
        block twice.
      iceage_move_events: "Scrat is still looking for acorns! \nHelp him scamper around
        by attaching a `move actor 1` block to each of the events and changing the
        direction to work for each arrow key. \nWhen you’re done, click \"Run\" and
        try to collect all of the acorns."
      iceage_move_to_actor: Diego (actor 1) is searching for Manny (actor 2). Can
        you help bring the two together? Connect a block to the `when actor touches`
        event to play a sound when they find each other.
      iceage_move_to_flag: Scrat is looking for his acorn! Can you help him move the
        last 200 pixels?
      iceage_repeat: The `repeat forever` block allows you to run code continuously.
        Can you put blocks inside of it to help Granny get some exercise by moving
        left and right repeatedly?
      iceage_sound_and_points: "Here is your code from the last puzzle, as well as
        the code to move Granny left and right. \nCan you finish the program to make
        it so that you both **play a sound** and **score a point** when Sid and Granny
        collide? \nPress \"Run\" to play the game."
      iceage_throw_hearts: "Sid wants to let his grandmother, Granny, know that he
        loves her.   \n\nUse the `actor __ throw` command to have Sid (actor 1) throw
        hearts at Granny (actor 2)! \nSet Granny's mood to happy when she gets hit
        with the hearts."
      iceage_warn_ice_age: "Everyone needs to move faster because an ice storm is
        coming! \nChange the scene to an icy background and set Sid’s (actor 1) speed
        to fast.\nPress \"Run\" and move Sid to Diego to warn him."
      mike3bit: "# 3-Bit Color\n\n**Directions:**\n\n-   We start you with the 4x2
        image Maddie was creating, but we've left out the last few pixels. \n-   Finish
        off the image by figuring out which colors are missing and encoding them."
      mike3bitbird: "# 3-Bit Color\n\nHere's an example of an image made with 3-bit
        color. Try changing it to understand how it works. \n\n_If you want to reset
        the image, press \"Start Over\"._"
      mike3bitfreeplay: |-
        # 3-Bit Color

        You have one last chance to experiment and get creative with the pixelation widget. Make something awesome and share it with your classmates!

        -   _Hint:_ You can copy and paste the value of a pixel to use it repeatedly.
      mike3bitmario: "# 3-Bit Color\n\n**Challenge:** \n\nA careless binary coder
        typed in ONE extra 0 or 1 somewhere within this image's data. The extra bit
        that is causing Mario to glitch out! \n\nDelete the extra bit to restore Mario
        back to normal!\n\n![](<https://images.code.org/8b7c17ba204a1a4d33e1bd6de7f01d76-image-1477306657312.54.57
        AM.png>)"
      ramp_artist_loops1: |-
        Aký nádherný deň!
        Pomôž umelcovi zachrániť kvety pred zimou posunom dopredu o 60 pixelov.
      ramp_artist_loops1_2018: |-
        Aký nádherný deň!
        Pomôž umelcovi zachrániť kvety pred zimou posunom dopredu o 60 pixelov.
      ramp_artist_loops1_2019: |-
        Aký nádherný deň!
        Pomôž umelcovi zachrániť kvety pred zimou posunom dopredu o 60 pixelov.
      ramp_artist_loops2: Pridaj trochu farebnosti a zopakuj postup 5 krát, spolu
        s náhodnou zmenou farby medzi jednotlivými opakovaniami.
      ramp_artist_loops2_2018: Pridaj trochu farebnosti a zopakuj postup 5 krát, spolu
        s náhodnou zmenou farby medzi jednotlivými opakovaniami.
      ramp_artist_loops2_2019: Pridaj trochu farebnosti a zopakuj postup 5 krát, spolu
        s náhodnou zmenou farby medzi jednotlivými opakovaniami.
      ramp_artist_loops3: Opäť nakresli pestrofarebnú čiaru, ale tentokrát použi cyklus
        Opakuj.
      ramp_artist_loops3_2018: Opäť nakresli pestrofarebnú čiaru, ale tentokrát použi
        cyklus Opakuj.
      ramp_artist_loops3_2019: Opäť nakresli pestrofarebnú čiaru, ale tentokrát použi
        cyklus Opakuj.
      ramp_artist_loops4: Čo sa stane ak pridáš obrat o 72 stupňov doprava ako posledný
        príkaz v cykle opakuj?
      ramp_artist_loops4_2018: Čo sa stane ak pridáš obrat o 72 stupňov doprava ako
        posledný príkaz v cykle opakuj?
      ramp_artist_loops4_2019: You can create this star by looping a sequence of `move
        forward` and `turn right by 144 degrees` blocks.
      ramp_artist_loops5: |-
        Cykly nám pomáhajú písať kod jednoduchšie!

        Použi cykly a nakresli schodisko.

        -   Každý stupienok má dĺžku 50 pixelov a je 20 pixelov vysoký
        -   Nezabudni, že sa budeš potrebovať otočiť o 90 stupňov v oboch smeroch
      ramp_artist_loops5_2018: |-
        Cykly nám pomáhajú písať kod jednoduchšie!

        Použi cykly a nakresli schodisko.

        -   Každý stupienok má dĺžku 50 pixelov a je 20 pixelov vysoký
        -   Nezabudni, že sa budeš potrebovať otočiť o 90 stupňov v oboch smeroch
      ramp_artist_loops5_2019: |-
        Cykly nám pomáhajú písať kod jednoduchšie!

        Použi cykly a nakresli schodisko.

        -   Každý stupienok má dĺžku 50 pixelov a je 20 pixelov vysoký
        -   Nezabudni, že sa budeš potrebovať otočiť o 90 stupňov v oboch smeroch
      ramp_artist_loops6: |-
        Toto schodisko je omnoho väčšie, ale na jeho nakreslenie potrebuješ toľko isto riadkov kódu ako v poslednom príklade!

        Uprav cyklus tak, aby si ho nakreslil.
      ramp_artist_loops6_2018: |-
        Toto schodisko je omnoho väčšie, ale na jeho nakreslenie potrebuješ toľko isto riadkov kódu ako v poslednom príklade!

        Uprav cyklus tak, aby si ho nakreslil.
      ramp_artist_loops6_2019: |-
        Toto schodisko je omnoho väčšie, ale na jeho nakreslenie potrebuješ toľko isto riadkov kódu ako v poslednom príklade!

        Uprav cyklus tak, aby si ho nakreslil.
      ramp_artist_loops7: Nájdi opakujúci sa vzor a skráť tento kód pomocou cyklov!
      ramp_artist_loops7_2018: Nájdi opakujúci sa vzor a skráť tento kód pomocou cyklov!
      ramp_artist_loops7_2019: Nájdi opakujúci sa vzor a skráť tento kód pomocou cyklov!
      ramp_artist_loops8: "**Výzva:** Skús upraviť kód tak, aby si nakreslil obrázok
        podľa predlohy s použitím cyklov."
      ramp_artist_loops8_2018: "**Výzva:** Skús upraviť kód tak, aby si nakreslil
        obrázok podľa predlohy s použitím cyklov."
      ramp_artist_loops8_2019: "**Výzva:** Skús upraviť kód tak, aby si nakreslil
        obrázok podľa predlohy s použitím cyklov."
      ramp_artist_loops9: Nakresli štvorec s dĺžkou strán 200 pixelov.
      ramp_artist_loops9_2018: Nakresli štvorec s dĺžkou strán 200 pixelov.
      ramp_artist_loops9_2019: Nakresli štvorec s dĺžkou strán 200 pixelov.
      simconfig: |-
        # Modify and Predict

        Pick one of the variables that control this simulation to modify and predict how that will change the outcome.

        After you have written down your prediction, run the simulation 5 times and write down your findings. Was your prediction accurate?
      simstarter: |-
        # Collecting Data

        Run this simulation 5 times. Each time, use the Collecting Data activity guide to record:

        -   How many apples did the elephant collect?
        -   How many apples did the hippo collect?
        -   How much time did it take for all of the apples to be collected?
