---
th-TH:
  data:
    authored_hints:
      2-3 Artist 1 new:
        2-3_Artist_1_new_a: หากคุณใช้บล็อก "ย้ายไปด้านหน้า100 พิกเซล" ฉันก็จะวาดเส้นให้โดยอัตโนมัติ
        2-3_Artist_1_new_b: มีปัญหากับการเลี้ยวที่หัวมุมหรือเปล่า? ให้ใช้บล็อก `หันขวาไป
          90 องศา`
      2-3 Artist 11:
        2-3_Artist_11_a: 'มีปัญหากับมุมหรือไม่? คุณต้องสร้างมุมรวมกัน 360 องศาด้วยการหัน
          8 ครั้ง ดังนั้น 360/8 ได้เท่าไร? '
      2-3 Artist 12:
        2-3_Artist_12_a: วงกลมมี 360 องศาดังนั้นหากอาร์ตติสต้องการหันทีละ 1 องศา เขาจะต้องหันถึง
          360 ครั้ง
      2-3 Artist 2 new:
        2-3_Artist_2_new_a: อาร์ตติสดูเหมือนจะไม่ได้หันไปในทิศทางที่ถูกต้อง คุณช่วยให้พวกเขาหันก่อนที่จะวาดเส้นได้ไหม?
      2-3 Artist 3new:
        2-3_Artist_3new_a: 100 ลบ 70 ได้เท่าไร ขึ้นอยู่กับเรื่องราวที่เกี่ยวข้อง เพราะนั่นคือความสูงของหมวก
        2-3_Artist_3new_b: อาร์ตติสดูเหมือนจะไม่ได้หันไปในทิศทางที่ถูกต้อง คุณช่วยให้พวกเขาหันก่อนที่จะวาดเส้นได้ไหม?
      2-3 Artist 4:
        2-3_Artist_4_a: เพื่อที่จะสร้างบ้านให้เสร็จ ที่เราต้องทำก็คือวาดสี่เหลี่ยมจตุรัสขึ้นมารูปหนึ่ง
      2-3 Artist 6:
        2-3_Artist_6_a: 'To make those little angles, you have to turn _farther_ each
          time than you did with the square.   '
        2-3_Artist_6_b: เนื่องจากตอนนี้หันไปถูกทางแล้ว จะง่ายกว่าถ้าเริ่มต้นด้วยการก้าวไปข้างหน้า
          แล้วหันซ้ายไปเพื่อสร้างรูปสามเหลี่ยม
        2-3_Artist_6_c: ด้านแต่ละด้านของรูปสามเหลี่ยมมีความยาวเท่ากันกับด้านแต่ละด้านของสี่เหลี่ยมจตุรัส....
          100 พิกเซล!
      2-3 Artist 7:
        2-3_Artist_7_a: วิธีที่ง่ายที่สุดในการแก้ปริศนาด่านนี้คือการวาดสี่เหลี่ยมจตุรัสรูปแรกที่จบลงด้วยศิลปินชี้ลงไปด้านล่าง
          ก่อนที่จะเริ่มต้นวาดสี่เหลี่ยมจตุรัสรูปที่สองของคุณต่อไป
      2-3 Artist 8:
        2-3_Artist_8_a: ถ้าคุณตัด 200 ลงครึ่งหนึ่ง จำนวนพิกเซลที่เป็นความกว้างของสี่เหลี่ยมจตุรัสแต่ละรูปจะเป็นเท่าใด?
      2-3 Artist 9 NEW:
        2-3_Artist_9_a: รูปเพชรเม็ดนี้ จริงๆแล้วก็แค่เป็นเพียงรูปสี่เหลี่ยมจตุรัสที่ตั้งอยู่บนด้านๆ
          หนึ่งเท่านั่นเอง
      2-3 Artist Debugging 10:
        2-3_Artist_Debugging_10_a: Remember, you want the control panel 10 pixels
          _wider_...so be sure to **add** 10 to whatever number you change.
        2-3_Artist_Debugging_10_b: "\\*\\* การลองผิดและลองถูกเป็นสิ่งที่ยอมรับกันที่นี่!
          \\*\\* เริ่มต้นด้วยการเปลี่ยนตัวเลขทีละตัว  \n\nตัวเลขใดทำอะไรบ้าง  \n\nถ้าหากคุณเกิดสับสน
          เพียงแค่คลิก  \" เริ่มเล่นใหม่ \" แล้วโค้ดของคุณจะถูกตั้งค่าใหม่อีกครั้ง"
      2-3 Artist Debugging 2:
        2-3_Artist_Debugging_2_a: 'บอกใบ้: หนวดแมวแต่ละเส้นมีความยาว 75 พิกเซล'
      2-3 Artist Debugging 3:
        2-3_Artist_Debugging_3_a: ทิศทางที่หันไปนั้น มีอยู่ทิศหนึ่งที่หันน้อยไป 15
          องศา
        2-3_Artist_Debugging_3_b: ถ้าโปรแกรมทำงานเร็วเกินไป จนไม่สามารถสังเกตุได้ว่าเกิดอะไรขึ้น
          ให้ลองลดความเร็วลงโดยใช้แถบเลื่อน
      2-3 Artist Debugging 7:
        2-3_Artist_Debugging_7_a: จะเกิดอะไรขึ้นถ้าคุณให้ศิลปินเคลื่อนไหวหรือกระโดดถอยหลัง
          หลังจากที่เขาวาดเส้นแรกเสร็จแล้ว?
      2-3 Artist Debugging 8:
        2-3_Artist_Debugging_8_a: |-
          How many times did my shape repeat?

          How many times _should_ the shape repeat?

          Where can you change that in the program?
      2-3 Artist Debugging 9:
        2-3_Artist_Debugging_9_a: ศิลปินต้องหันออกไปทางซ้ายเพิ่มอีก ๖๐ องศาก่อนที่จะเริ่มต้นวาด!
        2-3_Artist_Debugging_9_b: คุณไม่จำเป็นต้องเพิ่มบล็อกเข้าไปอีกบล็อกหนึ่งเพื่อเพิ่มองศาการหัน
          เพียงแค่บวกอีก 60 องศาเข้าไปกับจำนวนองศาในบล็อก `หันซ้าย` ที่มีอยู่เดิม!
      2-3 Artist Functions 1:
        2-3_Artist_Functions_1_a: กรอบสี่เหลี่ยมจตุรัสแต่ละกรอบมีด้าน 100 พิกเซล นั่นหมายความว่าคุณจะต้องเคลื่อนที่ไปข้างหน้า
          175 พิกเซลก่อนที่จะวาดกรอบแว่นอันที่สองของคุณ
        2-3_Artist_Functions_1_b: โอเคที่จะวาดเส้นทับซ้อนกันเพื่อทำแว่นตาของคุณ
      2-3 Artist Functions 11:
        2-3_Artist_Functions_11_a: คุณจะต้องเปลี่ยนไม่เพียงแต่จำนวนและความยาวของด้านภายในฟังก์ชัน
          แต่ยังรวมไปถึงมุมที่ศิลปินจะหันระหว่างการวาดแต่ละด้านอีกด้วย
      2-3 Artist Functions 12:
        2-3_Artist_Functions_12_a: ลองเรียกใช้โค้ดก่อนเพื่อดูว่าคุณต้องการเพิ่มอะไรไหม
      2-3 Artist Functions 2:
        2-3_Artist_Functions_2_a: |-
          โปรแกรมของคุณควร:

          -   ใช้ฟังก์ชัน
          -   ย้ายไปข้างหน้า 100+75 พิกเซล
          -   ใช้ฟังก์ชัน
      2-3 Artist Functions 3:
        2-3_Artist_Functions_3_a: "\\*\\* 115 + 45 = 160 \\*\\*"
      2-3 Artist Functions 4:
        2-3_Artist_Functions_4_a: ศิลปินต้องหัน 120 องศาระหว่างการวาดรูปสี่เหลี่ยมจตุรัสแต่ละรูปเพื่อให้การออกแบบนี้เสร็จสมบูรณ์
      2-3 Artist Loops New 11:
        2-3_Artist_Loops_New_11_a: |-
          Remember that the code from the last puzzle was:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat">
                  <title name="TIMES">8</title>
                  <statement name="DO">
                    <block type="draw_colour" inline="true">
                      <value name="COLOUR">
                        <block type="colour_random"/>
                      </value>
                      <next>
                        <block type="draw_turn_by_constant_dropdown">
                          <title name="DIR">turnRight</title>
                          <title name="VALUE" config="45,60,90,120,180">45</title>
                          <next>
                            <block type="draw_move_by_constant">
                              <title name="DIR">moveForward</title>
                              <title name="VALUE">50</title>
                              <next>
                                <block type="draw_turn_by_constant_dropdown">
                                  <title name="DIR">turnLeft</title>
                                  <title name="VALUE" config="45,60,90,120,180">90</title>
                                  <next>
                                    <block type="draw_move_by_constant">
                                      <title name="DIR">moveForward</title>
                                      <title name="VALUE">50</title>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
          </xml>
        2-3_Artist_Loops_New_11_b: การหันเปลี่ยนทิศทางของคุณควรที่จะวางไว้ที่**ส่วนท้าย**ของโค้ดภายในลูป
      2-3 Artist Loops New 12:
        2-3_Artist Loops_New_12_a: "ก่อนที่จะเริ่มวาดรูปเพชร \n\nศิลปินต้องหันซ้าย
          60 องศาเพื่อให้อยู้บนเส้นทางที่ถูกต้อง"
        2-3_Artist Loops_New_12_b: หลังจากที่ศิลปินเดินไปข้างหน้า 100 พิกเซล, เขาจะต้องหันขวา
          120 องศาเพื่อที่จะสร้างมุมแคบ
        2-3_Artist Loops_New_12_c: ศิลปินจะต้องหันขวาเพียง 60 องศาเพื่อสร้างมุมกว้าง
      2-3 Artist Loops New 13:
        2-3_Artist_Loops_New_13_a: |-
          ในตอนท้ายของการวาดเพชรแต่ละเม็ด ศิลปินหันหน้าไปในทิศทางที่เหมาะสมแล้วที่จะเริ่มต้นวาดเพชรเม็ดต่อไป

          ด้วยเหตุนี้เราไม่จำเป็นต้องเพิ่มบล็อก`หันซ้าย`เข้าไป ก่อนที่เราจะเริ่มต้นวาดเพชรเม็ดใหม่อีกครั้ง
        2-3_Artist_Loops_New_13_b: "To make each diamond, the artist needs to:   \n\n-
          \  move\n-   turn right 120 degrees\n-   move\n-   turn right 60 degrees
          \ \n\nThen do it all again!"
      2-3 Artist Loops New 9:
        2-3_Artist_Loops_New_9_a: ศิลปินต้องหันไปทางขวา 45 องศา ก่อนที่เขาจะเริ่มต้นการวาดภาพ
        2-3_Artist_Loops_New_9_b: รูปตัว V เป็นเพียงครึ่งหนึ่งของสี่เหลี่ยม  อะไรคือโค้ดที่จะใช้วาดครึ่งหนึ่งของสี่เหลี่ยม?
      2-3 Artist Nested Loops 1:
        2-3_Artist_Nested_Loops_1_a: อย่าลืมใส่บล็อกสีเทาทั้งหมดไว้ภายในลูปของคุณ.
      2-3 Artist Nested Loops 3:
        2-3_Artist_Nested_Loops_3_a: |-
          ต้องการความช่วยเหลือเกี่ยวกับมุมไหม?

          **360/12 = 30**.
        2-3_Artist_Nested_Loops_3_b: อย่าลืมวางโค้ดสีเทาทั้งหมดและบล็อกที่ใช้ในการหันไปของคุณไว้ภายในลูป
      2-3 Artist Nested Loops 4:
        2-3_Artist_Nested_Loops_3_a: |-
          ต้องการความช่วยเหลือเกี่ยวกับมุมไหม?

          **360/12 = 30**.
      2-3 Artist Nested Loops 5:
        2-3_Artist_Nested_Loops_5_a: "ลองใช้บล็อก `กระโดดไปข้างหน้า` เพื่อย้ายจากด้านบนของบานหน้าต่างไปยังบานหน้าต่างที่คุณจะเริ่มต้นถัดไป
          \n\nถ้าบานหน้าต่างของคุณมีด้านแต่ละด้านยาว 20 พิกเซลและห่างกัน 20 พิกเซล
          ระยะทางไกลเท่าไรที่คุณจะต้องกระโดดข้ามไป?"
      2-3 Artist Nested Loops 7:
        2-3_Artist_Nested_Loops_7_a: |-
          คุณควรจะหันไปมากแค่ไหน ในแต่ละลูป?

          360/10  มีค่าเท่าใด?
      2-3 Artist Nested Loops 9:
        2-3_Artist_Nested_Loops_9_a: |-
          ต้องการความช่วยเหลือในการค้นหามุมที่ถูกต้องหรือไม่

          360/12 = 30.
      2-3 Bee Conditionals 14:
        2-3_Bee_Conditionals_14_a: Having a hard time figuring out how to get the
          blocks down?  Try treating the red flower exactly the same as a purple flower!
        2-3_Bee_Conditionals_14_b: If the red flower were purple, could you figure
          out how to use an extra `repeat` loop to cut down on code?
        2-3_Bee_Conditionals_14_c: |-
          Try breaking this up into two separate chunks:

          ![](https://images.code.org/895a52f3febff9edb83979f7861cf67a-image-1469640892331.png)

          1.  Gather nectar 3 times
              -   Move forward 5 times
              -   Check to see if nectar, if so: get it
              -   Turn left

          2.  Make honey
              -   Move forward one time
              -   Make two honey
      2-3 Bee Conditionals 15:
        2-3_Bee_Conditionals_15_a: 'Remember: Purple flowers only have either 0 or
          1 nectar and they can change each time you run the program.'
      2-3 Bee Conditionals 3:
        2-3_Bee_Conditionals_3_a: The code will be shortest if you use a loop each
          time you move forward, another loop to gather nectar, and another one to
          make honey.
      2-3 Bee Conditionals 6:
        2-3_Bee_Conditionals_6_a: 'Remember: Purple flowers change between 0 and 1
          nectar when you run your program!'
      2-3 Bee Debugging 1:
        2-3_Bee_Debugging_1_a: เมื่อคุณค้นหาและแก้ไขบล็อกที่ไม่ถูกต้องนั้น คุณเห็นรูปแบบใดๆที่สามารถทำได้ง่ายขึ้นโดยใช้ลูป
          `ทำซ้ำ` ไหม?
      2-3 Bee Debugging 2:
        2-3_Bee_Debugging_2_a: เมื่อคุณค้นหาและแก้ไขบล็อกที่ไม่ถูกต้องนั้น คุณเห็นรูปแบบใดๆที่สามารถทำได้ง่ายขึ้นโดยใช้ลูป
          `ทำซ้ำ` ไหม?
      2-3 Bee Debugging 4:
        2-3_Bee_Debugging_4_a: มีที่ไหนอีกไหมที่ผึ้งทำอะไรที่ไม่เข้าท่า? จะเกิดอะไรขึ้นเมื่อคุณจัดการเปลี่ยนบล็อกนั้นเสียใหม่?
      2-3 Bee Functions 4:
        2-3_Bee_Functions_4_a: คุณไม่จำเป็นต้องใช้ลูปกับฟังก์ชัน ลองเคลื่อนย้ายผึ้งโดยใช้ฟังก์ชันจากนั้นย้ายผึ้งและใช้ฟังก์ชันอีกครั้ง
      2-3 Bee Functions 6:
        2-3_Bee_Functions_6_a: คุณไม่จำเป็นต้องใช้ลูปกับฟังก์ชัน ลองเคลื่อนย้ายผึ้งโดยใช้ฟังก์ชันจากนั้นย้ายผึ้งและใช้ฟังก์ชันอีกครั้ง
      2-3 Bee Functions 8:
        2-3_Bee_Functions_8_a: "หากปริศนาดูเหมือนว่าจะท้าทายเกินไป ให้ลองสร้างฟังก์ชั่นทีละเล็กทีละน้อยในแต่ละครั้ง
          \ \n\nเพิ่มบล็อกบางอย่างแล้วลองเอาออก เพิ่มใหม่แล้วลองอีกครั้ง  ในไม่ช้า
          คุณจะได้รับความสำเร็จ!\n\n![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)"
      2-3 Bee Functions 9:
        2-3_Bee_Functions_8_a: "หากปริศนาดูเหมือนว่าจะท้าทายเกินไป ให้ลองสร้างฟังก์ชั่นทีละเล็กทีละน้อยในแต่ละครั้ง
          \ \n\nเพิ่มบล็อกบางอย่างแล้วลองเอาออก เพิ่มใหม่แล้วลองอีกครั้ง  ในไม่ช้า
          คุณจะได้รับความสำเร็จ!"
        2-3_Bee_Functions_8_b: |-
          Remember to build your code inside of the green function block.

          ![](https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)
      2-3 Bee Loops 2:
        2-3_Bee_Loops_2_a: คุณควรจบการเขียนโค้ด ลงด้วยบล็อกสี่บล็อกอยู่ภายในลูปของคุณ
      2-3 Bee Loops 3:
        2-3_Bee_Loops_3_a: คุณควรมีบล็อก 6 บล็อกอยู่ภายในลูปของคุณ
      2-3 Bee Loops 3B:
        2-3_Bee_Loops_3B_a: คุณจะต้องใช้ลูป`ทำซ้ำ`ที่แตกต่างกันสองลูป โดยวางลูปหนึ่งตามอีกลูปหนึ่ง
      2-3 Bee Loops 4:
        2-3_Bee_Loops_4_a: คุณควรจบด้วย บล็อก 5 บล็อกอยู่ภายในลูปของคุณ
      2-3 Bee Loops 4A:
        2-3_Bee_Loops_4A_a: ภารกิจแรกคือการหันไป ไม่ใช่การเคลื่อนไหว
        2-3_Bee_Loops_4A_b: ชิ้นสุดท้ายของโปรแกรมสามารถเสร็จสิ้นได้โดยการเขียนโค้ดไว้ที่ตอนท้ายของโปรแกรมของ
          โดยให้อยู่ภายนอกลูปของคุณ
        2-3_Bee_Loops_4A_c: ถ้าคุณไม่สามารถหาได้ว่าลูปควรจะอยู่ที่ไหน ให้ลองเขียนโค้ดออกมาแบบเต็มรูปก่อน
          แล้วดูว่าคุณสามารถรวมมันเข้าไปไว้ในลูป `ทำซ้ำ`ตอนท้าย
      2-3 Bee Loops 5:
        2-3_Bee_Loops_5_a: หากคุณไม่สามารถบอกได้ว่าบล็อกใดที่จะใส่ภายใน `ทำซ้ำ`ได้ทันที
          ให้เริ่มต้นด้วยการเขียนโค้ดออกมาทีละขั้นและมองหารูปแบบ.
      2-3 Bee Loops 6:
        2-3_Bee_Loops_6_a: ถ้าคุณไม่สามารถบอกได้ว่าอะไรควรไปที่ลูป `ทำซ้ำ`ให้ลองลากบล็อกออกมาทีละรายการและดูว่าคุณสามารถค้นหารูปแบบได้หรือไม่?
        2-3_Bee_Loops_6_b: ควรมีบล็อก 6 บล็อกอยู่ภายในลูป `ทำซ้ำ`ของคุณเมื่อคุณทำเสร็จ
      2-3 Bee Loops 7:
        2-3_Bee_Loops_7_a: ภารกิจแรกคือการหันไป ไม่ใช่การเคลื่อนไหว
        2-3_Bee_Loops_7_b: 'ถ้าคุณไม่สามารถวาดภาพลูปไว้ในหัวได้ตั้งแต่แรก ลองเขียนโค้ดออกมาแบบเต็มรูปก่อน
          แล้วมองหารูปแบบ  '
      2-3 Maze 1:
        2-3_Maze_1_a: การใช้บล็อก ' เดินไปข้างหน้า ' นั้นให้ลากบล็อกจากพื้นที่ของกล่องเครื่องมือออกไปยังพื้นที่ทำงานและเชื่อมต่อเข้ากับบล็อก
          ' เมื่อเรียกใช้งาน '
      2-3 Maze 16:
        2-3_Maze_16_a: ถ้ามองไม่เห็นรูปแบบที่ชัดเจน ก็ให้ลองเขียนโค้ดออกมาดูก่อน และดูว่ามีอะไรที่มีการทำซ้ำแล้วซ้ำอีก
          ก่อนที่คุณจะรวมมันเอาเข้าไปไว้ในลูป
        2-3_Maze_16_b: |-
          เมื่อต้องการใส่บล็อกจำนวนมากไว้ภายในลูป `ทำซ้ำ` ก็เพียงแค่ลากลูปออกไปไว้ในพื้นที่ทำงานแล้วลากบล็อกทั้งหมดจากโปรแกรมตอนเริ่มต้นมาไว้ภายในลูป

          เชื่อมต่อทั้งหมดเข้าไปกับบล็อก `เมื่อเรียกใช้งาน` ก็จะถือได้ว่าคุณพร้อมแล้ว!
      2-3 Maze 6:
        2-3_Maze_6_a: มีวิธีแก้ปริศนานี้สองวิธี
      2-3 Maze Loops 17:
        2-3_Maze_Loops_17_a: ถ้ามองไม่เห็นรูปแบบที่ชัดเจน ก็ให้ลองเขียนโค้ดออกมาดูก่อน
          และดูว่ามีอะไรที่มีการทำซ้ำแล้วซ้ำอีก ก่อนที่คุณจะรวมมันเอาเข้าไปไว้ในลูป
        2-3_Maze_Loops_17_b: โค้ดเริ่มต้นถูกลบไปหรือเปล่า? คลิก `เริ่มเล่นใหม่` ก็จะได้มันกลับคืนมา!
      2-3 Maze Loops 18:
        2-3_Maze_Loops_18_a: ถ้ามองไม่เห็นรูปแบบที่ชัดเจน ก็ให้ลองเขียนโค้ดออกมาดูก่อน
          และดูว่ามีอะไรที่มีการทำซ้ำแล้วซ้ำอีก ก่อนที่คุณจะรวมมันเอาเข้าไปไว้ในลูป
      2-3 Maze Loops 19:
        2-3_Maze_Loops_19_a: หากคุณติดขัดอยู่ ให้ลองเขียนโค้ดโดยไม่ใช้ลูปก่อน และมองหารูปแบบ
        2-3_Maze_Loops_19_b: การวางลูปทำซ้ำไว้ภายในลูปอีกลูปหนึ่ง สามารถช่วยลดจำนวนของบล็อกที่ใช้ลงได้
      2-3 Maze Loops 20:
        2-3_Maze_Loops_20_a: มองหาขั้นตอนที่เป็นรูปแบบบันไดในเขาวงกตนี้ เพื่อค้นหาที่ที่สามารถนำลูปมาใช้
      2-3 Maze Loops 21:
        2-3_Maze_Loops_21_a: หากคุณมีปัญหาในการมองเห็นขั้นตอนรูปแบบบันได ให้ลองปิดเส้นทางที่เป็นบล็อกด้วยนิ้วของคุณ
      4-5 Artist 1:
        4-5_Artist_1_a: "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
      4-5 Artist 11:
        4-5_Artist_11_a: ภายในลูปของคุณ ให้แน่ใจว่าศิลปินกระโดดข้ามถอยหลังและกระโดดขึ้นไป
          หลังจากวาดแต่ละเส้นแล้ว
      4-5 Artist 3:
        4-5_Artist_3_a: |-
          หากกระถางดอกไม้ เท่ากับ 600 พิกเซลโดยรอบแล้ว และมีด้านยาวสองด้านเท่ากับ 200 พิกเซล วิธีที่จะคิดคำนวณด้านสั้นเพิ่มคือ:

          **600 - 200 - 200 = 200**

          ซึ่งหมายความว่าด้านสั้นทั้งสองรวมกันเท่ากับ 200 พิกเซล

          \*\* 200/2 คืออะไรเอ่ย? \*\*
        4-5_Artist_3_b: หากคุณมองไม่ออกว่า ลูป `ทำซ้ำ`นั้นควรจะอยู่ที่ใด ให้ลองเขียนโค้ดออกมาทั้งหมดก่อนและมองหารูปแบบ
      4-5 Artist 4:
        4-5_Artist_4_a: "มี 360 องศาในวงกลม! \n\nนั่นคือจำนวนครั้งที่คุณต้องการที่จะทำซ้ำโค้ดนี้
          (หันไป 1 องศาในแต่ละครั้ง) จนเป็นรูปวงกลม!"
      4-5 Artist 5:
        4-5_Artist_5_a: |-
          Trial and error is a great method, but you can also solve the problem by dividing the 90 degree angle into thirds.

          **90 / 3 = \_\_\_\_\_**
      4-5 Artist 7:
        4-5_Artist_7_a: 'มุมใดที่เล็กที่สุด? มุมไหนคือมุมที่ศิลปินยืนอยู่? '
      4-5 Artist 8:
        4-5_Artist_8_a: "ด้านยาวมีความยาว 240 พิกเซล ซึ่งหมายความว่า 2 ด้านสั้นรวมกันยาว:\n\n
          800 - 240 - 240 = 320\n\n320/2 คืออะไร? "
        4-5_Artist_8_b: "This image can be done 2 ways!  \n\n-   Draw two rectangles
          that are **120** long and **160** tall, with an overlapping side\n\n-   Draw
          one rectangle that is **240** long and **160** tall, then add a line in
          the middle."
      4-5 Artist 9:
        4-5_Artist_9_a: 'When a triangle is an equilateral, all sides and all angles
          are the same.  '
        4-5_Artist_9_b: คุณจะต้องวาดสามเหลี่ยมสามรูปที่มีขนาดเดียวกัน อย่าลืมกระโดดข้ามไปยังตำแหน่งใหม่ของคุณหลังจากวาดแต่ละรูปแล้ว
      4-5 Artist Assessment 1:
        4-5_Artist_Assessment_1_a: เพื่อให้ปริศนานี้เสร็จสมบูรณ์ คุณจะต้องวาดเพียงรูปสามเหลี่ยมภายนอกเท่านั้น
      4-5 Artist Patterns 11:
        4-5_Artist_Patterns_11_a: If there are 360 degrees in a circle and each loop
          turns 3 degrees, how many times would you need to loop draw half of a full
          circle?
      4-5 Artist Patterns 2:
        4-5_Artist_Patterns_2_a: สังเกตุให้ดีว่าสี่เหลี่ยมจตุรัสนั้นมีด้านแต่ละด้านยาว
          20 พิกเซล คุณต้องกระโดดข้ามไป 20 พิกเซลก่อนที่คุณจะเริ่มวาดรูปสี่เหลี่ยมรูปต่อไป
      4-5 Artist Patterns 3:
        4-5_Artist_Patterns_3_a: ให้ระมัดระวังในการดึงบล็อกทั้งบล็อกของ "โค้ดจากกล่องเครื่องมือในแต่ละครั้งที่คุณต้องการลองใช้บล็อกใหม่
        4-5_Artist_Patterns_3_b: ถ้าโค้ดของคุณชักจะยุ่งเหยิงเกินไป คุฯสามารถคลิก "เริ่มเล่นใหม่"
          ได้ตลอดเวลา
      4-5 Artist Patterns 5:
        4-5_Artist_Patterns_5_a: |-
          ตอนนี้ เมื่อศิลปินวาดเพชรเสร็จแต่ละเม็ดนั้น ศิลปินหันหน้าไปในทิศทางตรงกันข้ามกับทิศทางที่เขาควรจะหันหน้าไปเพื่อเริ่มวาดเพชรเม็ดต่อไป

          เขาต้องหันไปกี่องศาเพื่อหันไปในทิศทางที่ถูกต้อง?
      4-5 Bee Conditionals 4:
        remember_quantum: |-
          **ข้อควรจำ:** ปริศนานี้เปลี่ยนแปลงทุกครั้งที่ถูกเรียกใช้งาน

          คุณควรที่จะต้องใช้บล็อกเงื่อนไข  (`ถ้า(if)` หรือ `ถ้า/อย่างอื่น(if/else)`) เพื่อแก้ปัญหาที่ท้าทายนี้
      4-5 Bee Conditionals 5:
        remember_quantum: |-
          **ข้อควรจำ:** ปริศนานี้เปลี่ยนแปลงทุกครั้งที่ถูกเรียกใช้งาน

          คุณควรที่จะต้องใช้บล็อกเงื่อนไข  (`ถ้า(if)` หรือ `ถ้า/อย่างอื่น(if/else)`) เพื่อแก้ปัญหาที่ท้าทายนี้
      4-5 Bee Conditionals 6:
        4-5 Bee Conditionals 6_a: คุณสามารถแก้ปริศนานี้โดยใช้เฉพาะบล็อกที่อยู่ในพื้นที่ทำงาน
          มันควรถูกจัดลำดับอย่างไร?
        4-5 Bee Conditionals 6_b: ให้แน่ใจว่าคุณกำลังตรวจสอบเพื่อดูว่าดอกไม้มีน้ำหวานมากกว่า
          **0** อย่างน้อย **3** ครั้ง เพื่อแก้ปริศนานี้
      4-5 Bee Debugging 1:
        4-5_Bee_Debugging_1_a: If you are having trouble figuring out what's not right,
          try running it to see where things go wrong.
      4-5 Bee Nested Loops Rows:
        4-5_Bee_Nested_Loops_Rows_a: Try treating this puzzle like a long rectangle
          where the bee needs to move forward, then turn left several times to complete
          the path.
      4-5 Maze 10:
        4-5_Maze_10_a: |-
          หากคุณไม่รู้วิธีการใช้ลูปเพื่อแก้ปริศนาได้ในทันที ให้ลองแก้มันด้วยวิธีที่อาจต้องใช้เวลานานหน่อยก่อน แล้วมองหารูปแบบ

          อะไรคือสิ่งที่คุณควรใส่ `ทำซ้ำ`ไว้รอบๆ เพื่อให้โค้ดสั้นลง?
      4-5 Maze 4:
        4-5_Maze_4_a: หากคุณกำลังลำบากใจในการที่จะหาว่าจะวางทำซ้ำไว้ที่ไหน ให้ลองเขียนโค้ดทุกอย่างออกมาก่อนและมองหารูปแบบที่ซ้ำๆ
          กัน
      4-5 Maze 5:
        4-5_Maze_5_a: ลองใช้ลูป`ทำซ้ำ`เมื่อใดก็ตามที่คุณต้องการย้ายไปข้างหน้ามากกว่าสองก้าว
        4-5_Maze_5_b: คุณสามารถใช้ลูป`ทำซ้ำ` ได้มากกว่าหนึ่งครั้งในหนึ่งปริศนา
      4-5 Maze 6:
        4-5_Maze_6_a: |-
          ลองแกะรอยเส้นทางด้วยนิ้วของคุณว่า
          มันเป็นเส้นทางที่สั้นที่สุดที่คุณสามารถค้นหาได้หรือไม่?
      4-5 Maze 7:
        4-5_Maze_7_a: "\\*\\* ต้องการให้โค้ดของคุณมีขนาดเล็กที่สุดเท่าที่จะทำได้ ใช่ไหม?
          \\*\\* \n\nค้นหารูปแบบในบล็อกของคุณ คุณเห็นสิ่งที่ซ้ำๆ กันไหม?  ลองวางลูปไว้รอบมันแทน!"
      4-5 Nested Loops 12:
        4-5_Nested_Loops_12_a: "**360 / 36 = ?**"
      4-5 Nested Loops 6:
        4-5_Nested_Loops_6_a: |-
          Don't forget to make a turn after your inner loop.

          You'll be looping 6 triangles over 360 degrees.

          **360 / 6 = ?**
      4-5 Nested Loops 7:
        4-5_Nested_Loops_7_a: |-
          This design will loop 10 times over 360 degrees.

          **360 / 10 = ?**
      4-5 Nested Loops 8:
        4-5_Nested_Loops_8_a: |-
          You will be looping this shape 6 times over 360 degrees.

          **360 / 6 = ?**
      4-5 While Loops 8:
        4-5_While_Loops_8_a: แต่ละรายการจะต้องมีลูป `ในขณะที่` ของมันเอง.
      Course 4 Artist 11:
        Course_4_Artist_11_a: 'รูปครึ่ง-หกเหลี่ยมมี \*\* ความยาว 30 \*\* และหันขวาไป
          \*\* 60 องศา \*\*\*  '
        Course_4_Artist_11_b: 'รูป 2/3 สามเหลี่ยม มี \*\* ความยาว 80 \*\* และหันขวาไป
          \*\* 120 องศา \*\* '
      Course 4 Artist 12:
        Course_4_Artist_12_a: 'เป็นการวาดรูปร่างที่ประกอบกันขึ้นมาจากการวาดซ้ำๆกัน
          ของ \*\* ครึ่่งรูปของหกเหลี่ยม \*\* ตามด้วย \*\* 2/3 ของรูปสามเหลี่ยม \*\* '
        Course_4_Artist_12_b: 'รูปร่างที่วาดมีสัดส่วนเกือบจะเหมือนกับที่ทำในปริศนาสุดท้าย
          ยกเว้นรูปครึ่ง-หกเหลี่ยมมีขนาดใหญ่ขึ้นมานิดหนึ่ง '
        Course_4_Artist_12_c: |-
          1.  The first three lines are 60 pixels long and you need to turn 60 degrees.

          2.  The next two lines are 80 pixels long and you need to turn 120 degrees
        Course_4_Artist_12_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_colour" inline="true" id="draw-color">
                  <value name="COLOUR">
                    <block type="colour_picker">
                      <title name="COLOUR">#843179</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_repeat">
                      <title name="TIMES">6</title>
                      <statement name="DO">
                        <block type="controls_repeat">
                          <title name="TIMES">3</title>
                          <statement name="DO">
                            <block type="draw_move_by_constant">
                              <title name="DIR">moveForward</title>
                              <title name="VALUE">60</title>
                              <next>
                                <block type="draw_turn_by_constant">
                                  <title name="DIR">turnRight</title>
                                  <title name="VALUE">60</title>
                                </block>
                              </next>
                            </block>
                          </statement>
                          <next>
                            <block type="controls_repeat">
                              <title name="TIMES">2</title>
                              <statement name="DO">
                                <block type="draw_move_by_constant">
                                  <title name="DIR">moveForward</title>
                                  <title name="VALUE">80</title>
                                  <next>
                                    <block type="draw_turn_by_constant">
                                      <title name="DIR">turnRight</title>
                                      <title name="VALUE">120</title>
                                    </block>
                                  </next>
                                </block>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      Course 4 Artist 6:
        Course_4_Artist_6_a: There are 3 triangles within the 360 degree rotation...how
          many times does 3 go into 360?
      Course 4 Artist 8a:
        Course_4_Artist_8a: |-
          ต้องการความช่วยเหลือว่า จะต้องหันไปกี่องศาไหม?

          มีรูปสามเหลี่ยม 3 รูป อยู่ภายในองศาการหมุน 360 องศา

          360 หาร 3 ได้เท่าไร?
      Course 4 Artist 9:
        Course_4_Artist_9_a: |-
          อยากทราบไหมว่าจะต้องหันไปเท่าไร

           360 หารด้วย 10 ได้เท่าไร?
      Course 4 Artist Binary Free Play 2b:
        Course_4_Artist_Binary_Free_Play_2b_a: This code uses two `for loops`. One
          counts up from 1 to 8, the other counts down from 8 to 1.
        Course_4_Artist_Binary_Free_Play_2b_b: Each `for loop` has three repeats.  The
          first draws the leftmost set of 1s, the second draws the 0s in the middle
          and the third draws the 1s on the right.
        Course_4_Artist_Binary_Free_Play_2b_c: In each repeat you need `counter` for
          1s and `16-(2 x counter)` for 0s.
        Course_4_Artist_Binary_Free_Play_2b_d: |-
          **Solution:**

          <xml><block type="when_run" deletable="false" movable="false"><next><block type="controls_for_counter" inline="true"><mutation counter="counter"></mutation><value name="FROM"><block type="math_number"><title name="NUM">1</title></block></value><value name="TO"><block type="math_number"><title name="NUM">8</title></block></value><value name="BY"><block type="math_number"><title name="NUM">1</title></block></value><statement name="DO"><block type="controls_repeat_ext" inline="true"><value name="TIMES"><block type="variables_get"><title name="VAR">counter</title></block></value><statement name="DO"><block type="procedures_callnoreturn" inline="true"><mutation name="draw"><arg name="binary"></arg></mutation><value name="ARG0"><block type="text"><title name="TEXT">1</title></block></value></block></statement><next><block type="controls_repeat_ext" inline="true"><value name="TIMES"><block type="math_arithmetic" inline="true"><title name="OP">MINUS</title><value name="A"><block type="math_number"><title name="NUM">16</title></block></value><value name="B"><block type="math_arithmetic" inline="true"><title name="OP">MULTIPLY</title><value name="A"><block type="variables_get"><title name="VAR">counter</title></block></value><value name="B"><block type="math_number"><title name="NUM">2</title></block></value></block></value></block></value><statement name="DO"><block type="procedures_callnoreturn" inline="true"><mutation name="draw"><arg name="binary"></arg></mutation><value name="ARG0"><block type="text"><title name="TEXT">0</title></block></value></block></statement><next><block type="controls_repeat_ext" inline="true"><value name="TIMES"><block type="variables_get"><title name="VAR">counter</title></block></value><statement name="DO"><block type="procedures_callnoreturn" inline="true"><mutation name="draw"><arg name="binary"></arg></mutation><value name="ARG0"><block type="text"><title name="TEXT">1</title></block></value></block></statement></block></next></block></next></block></statement><next><block type="controls_for_counter" inline="true"><mutation counter="counter"></mutation><value name="FROM"><block type="math_number"><title name="NUM">8</title></block></value><value name="TO"><block type="math_number"><title name="NUM">1</title></block></value><value name="BY"><block type="math_number"><title name="NUM">1</title></block></value><statement name="DO"><block type="controls_repeat_ext" inline="true"><value name="TIMES"><block type="variables_get"><title name="VAR">counter</title></block></value><statement name="DO"><block type="procedures_callnoreturn" inline="true"><mutation name="draw"><arg name="binary"></arg></mutation><value name="ARG0"><block type="text"><title name="TEXT">1</title></block></value></block></statement><next><block type="controls_repeat_ext" inline="true"><value name="TIMES"><block type="math_arithmetic" inline="true"><title name="OP">MINUS</title><value name="A"><block type="math_number"><title name="NUM">16</title></block></value><value name="B"><block type="math_arithmetic" inline="true"><title name="OP">MULTIPLY</title><value name="A"><block type="variables_get"><title name="VAR">counter</title></block></value><value name="B"><block type="math_number"><title name="NUM">2</title></block></value></block></value></block></value><statement name="DO"><block type="procedures_callnoreturn" inline="true"><mutation name="draw"><arg name="binary"></arg></mutation><value name="ARG0"><block type="text"><title name="TEXT">0</title></block></value></block></statement><next><block type="controls_repeat_ext" inline="true"><value name="TIMES"><block type="variables_get"><title name="VAR">counter</title></block></value><statement name="DO"><block type="procedures_callnoreturn" inline="true"><mutation name="draw"><arg name="binary"></arg></mutation><value name="ARG0"><block type="text"><title name="TEXT">1</title></block></value></block></statement></block></next></block></next></block></statement></block></next></block></next></block></xml>
      Course 4 Artist For Loops 11:
        Course_4_Artist_For_Loops_11_a: "The turn angle will change with each shape!
          \ \n\nUse the math block to enter 360 divided by the number of sides the
          shape has to get the angle right. "
      Course 4 Artist For Loops 11a:
        Course_4_Artist_For_Loops_11a_a: '360 divided by the number of sides a shape
          has is the number of degrees you''ll need to turn. '
        Course_4_Artist_For_Loops_11a_b: 'Each time, you will need to move forward
          by 10 times the length of the current number of sides. '
      Course 4 Artist For Loops 3:
        Course_4_Artist_For_Loops_3_a: To have the `for` loop drive your movement,
          make sure that you're using `counter` as your distance.
      Course 4 Artist For Loops 4:
        Course_4_Artist_For_Loops_4_a: |-
          **What is the smallest number you will need?\
          What is the largest number?\
          How big is the increase each time?**

          Those are the questions you need to ask to fill in the blanks of the `for` loop.
      Course 4 Artist For Loops Challenge:
        Course_4_Artist_For_Loops_Challenge_a: The largest shape has 19 sides. The
          smallest has just two.
        Course_4_Artist_For_Loops_Challenge_b: The `for` loop counts up by two each
          time through.
      Course 4 Artist For Loops inspire:
        Course_4_Artist_For_Loops_inspire_a: The foundation of this code is the same
          as the solution to the previous challenge puzzle...with a couple of changes.
        Course_4_Artist_For_Loops_inspire_b: Try a `for` loop that goes from 3 to
          10 with an increment of 1.
        Course_4_Artist_For_Loops_inspire_c: There are two iterations of the same
          repeat loop inside the `for` loop, but the second repeat turns the opposite
          direction.
        Course_4_Artist_For_Loops_inspire_d: "**Solution:**  \n\n<xml>\n  <block type=\"when_run\"
          deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_for_counter\"
          inline=\"true\" movable=\"false\">\n      <mutation counter=\"counter\"></mutation>\n
          \       <value name=\"FROM\">\n          <block type=\"math_number\">\n
          \           <title name=\"NUM\">3</title>\n          </block>\n        </value>\n
          \       <value name=\"TO\">\n          <block type=\"math_number\">\n            <title
          name=\"NUM\">10</title>\n          </block>\n        </value>\n        <value
          name=\"BY\">\n          <block type=\"math_number\">\n            <title
          name=\"NUM\">1</title>\n          </block>\n        </value>\n        <statement
          name=\"DO\">\n          <block type=\"controls_repeat_ext\" inline=\"true\">\n
          \           <value name=\"TIMES\">\n              <block type=\"math_arithmetic\"
          inline=\"true\">\n                <title name=\"OP\">MINUS</title>\n                <value
          name=\"A\">\n                  <block type=\"variables_get\">\n                    <title
          name=\"VAR\">counter</title>\n                  </block>\n                </value>\n
          \               <value name=\"B\">\n                  <block type=\"math_number\">\n
          \                   <title name=\"NUM\">1</title>\n                  </block>\n
          \               </value>\n              </block>\n            </value>\n
          \           <statement name=\"DO\">\n              <block type=\"draw_move\"
          inline=\"true\">\n                <title name=\"DIR\">moveForward</title>\n
          \               <value name=\"VALUE\">\n                  <block type=\"math_number\">\n
          \                   <title name=\"NUM\">40</title>\n                  </block>\n
          \               </value>\n                <next>\n                  <block
          type=\"draw_turn\" inline=\"true\">\n                    <title name=\"DIR\">turnRight</title>\n
          \                   <value name=\"VALUE\">\n                      <block
          type=\"math_arithmetic\" inline=\"true\">\n                        <title
          name=\"OP\">DIVIDE</title>\n                        <value name=\"A\">\n
          \                         <block type=\"math_number\">\n                            <title
          name=\"NUM\">360</title>\n                          </block>\n                        </value>\n
          \                       <value name=\"B\">\n                          <block
          type=\"variables_get\">\n                            <title name=\"VAR\">counter</title>\n
          \                         </block>\n                        </value>\n                      </block>\n
          \                   </value>\n                  </block>\n                </next>\n
          \             </block>\n            </statement>\n            <next>\n              <block
          type=\"controls_repeat_ext\" inline=\"true\">\n                <value name=\"TIMES\">\n
          \                 <block type=\"math_arithmetic\" inline=\"true\">\n                    <title
          name=\"OP\">MINUS</title>\n                    <value name=\"A\">\n                      <block
          type=\"variables_get\">\n                        <title name=\"VAR\">counter</title>\n
          \                     </block>\n                    </value>\n                    <value
          name=\"B\">\n                      <block type=\"math_number\">\n                        <title
          name=\"NUM\">1</title>\n                      </block>\n                    </value>\n
          \                 </block>\n                </value>\n                <statement
          name=\"DO\">\n                  <block type=\"draw_move\" inline=\"true\">\n
          \                   <title name=\"DIR\">moveForward</title>\n                    <value
          name=\"VALUE\">\n                      <block type=\"math_number\">\n                        <title
          name=\"NUM\">40</title>\n                      </block>\n                    </value>\n
          \                   <next>\n                      <block type=\"draw_turn\"
          inline=\"true\">\n                        <title name=\"DIR\">turnLeft</title>\n
          \                       <value name=\"VALUE\">\n                          <block
          type=\"math_arithmetic\" inline=\"true\">\n                            <title
          name=\"OP\">DIVIDE</title>\n                            <value name=\"A\">\n
          \                             <block type=\"math_number\">\n                                <title
          name=\"NUM\">360</title>\n                              </block>\n                            </value>\n
          \                           <value name=\"B\">\n                              <block
          type=\"variables_get\">\n                                <title name=\"VAR\">counter</title>\n
          \                             </block>\n                            </value>\n
          \                         </block>\n                        </value>\n                      </block>\n
          \                   </next>\n                  </block>\n                </statement>\n
          \             </block>\n            </next>\n          </block>\n        </statement>\n
          \     </block>\n    </next>\n  </block>\n</xml>"
      Course 4 Artist Functions Inspiration:
        Course_4_Artist_Functions_Inspiration_a: Start with the code from the last
          puzzle and add an extra `turn right` of three degrees inside the repeat
          loop.
        Course_4_Artist_Functions_Inspiration_b: Try turning by more than 90 degrees
          outside of the `repeat loop`, but still inside the `for loop`.
        Course_4_Artist_Functions_Inspiration_c: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_for_counter" inline="true">
                <mutation counter="counter"></mutation>
                  <value name="FROM">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <value name="TO">
                    <block type="math_number">
                      <title name="NUM">14</title>
                    </block>
                  </value>
                  <value name="BY">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="draw_colour" inline="true" id="draw-color">
                      <value name="COLOUR">
                        <block type="colour_random"/>
                      </value>
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="variables_get">
                              <title name="VAR">counter</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="procedures_callnoreturn">
                            <mutation name="draw a square 20"></mutation>
                              <next>
                                <block type="jump_by_constant">
                                  <title name="DIR">jumpForward</title>
                                  <title name="VALUE">20</title>
                                  <next>
                                    <block type="draw_turn_by_constant">
                                      <title name="DIR">turnRight</title>
                                      <title name="VALUE">3</title>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </statement>
                          <next>
                            <block type="draw_turn_by_constant">
                              <title name="DIR">turnLeft</title>
                              <title name="VALUE">100</title>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
            </xml>
      Course 4 Artist Functions challenge:
        Course_4_Artist_Functions_challenge_a: Part of understanding how to use functions
          is figuring out which ones you need, and which ones you don't.
        Course_4_Artist_Functions_challenge_b: Use a `for loop`, then use its counter
          variable inside of a nested `repeat` loop.
        Course_4_Artist_Functions_challenge_c: Each iteration, you should draw a square
          then jump forward.
        Course_4_Artist_Functions_challenge_d: You will need to turn left by 90 degrees
          outside of your `repeat`, but still inside the `for loop`.
      Course 4 Artist Inspire:
        Course_4_Artist_Inspire_a: After you complete one square, try jumping forward
          half of its length before turning and making another.
        Course_4_Artist_Inspire_b: Each square and jump is repeated four times (using
          a left turn inbetween) to make a full pinwheel-like unit.
        Course_4_Artist_Inspire_c: Each pinwheel is also repeated four times, with
          a right turn of **360/sides**.
        Course_4_Artist_Inspire_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_colour" inline="true" id="draw-color">
                  <value name="COLOUR">
                    <block type="colour_picker">
                      <title name="COLOUR">#843179</title>
                    </block>
                  </value>
                  <next>
                    <block type="variables_set" inline="false">
                      <title name="VAR">sides</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">4</title>
                        </block>
                      </value>
                      <next>
                        <block type="variables_set" inline="false">
                          <title name="VAR">length</title>
                          <value name="VALUE">
                            <block type="math_arithmetic" inline="true">
                              <title name="OP">DIVIDE</title>
                              <value name="A">
                                <block type="math_number">
                                  <title name="NUM">200</title>
                                </block>
                              </value>
                              <value name="B">
                                <block type="variables_get">
                                  <title name="VAR">sides</title>
                                </block>
                              </value>
                            </block>
                          </value>
                          <next>
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="variables_get">
                                  <title name="VAR">sides</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="controls_repeat_ext" inline="true">
                                  <value name="TIMES">
                                    <block type="variables_get">
                                      <title name="VAR">sides</title>
                                    </block>
                                  </value>
                                  <statement name="DO">
                                    <block type="controls_repeat_ext" inline="true">
                                      <value name="TIMES">
                                        <block type="variables_get">
                                          <title name="VAR">sides</title>
                                        </block>
                                      </value>
                                      <statement name="DO">
                                        <block type="draw_move" inline="true">
                                          <title name="DIR">moveForward</title>
                                          <value name="VALUE">
                                            <block type="variables_get">
                                              <title name="VAR">length</title>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="draw_turn" inline="true">
                                              <title name="DIR">turnRight</title>
                                              <value name="VALUE">
                                                <block type="math_arithmetic" inline="true">
                                                  <title name="OP">DIVIDE</title>
                                                  <value name="A">
                                                    <block type="math_number">
                                                      <title name="NUM">360</title>
                                                    </block>
                                                  </value>
                                                  <value name="B">
                                                    <block type="variables_get">
                                                      <title name="VAR">sides</title>
                                                    </block>
                                                  </value>
                                                </block>
                                              </value>
                                            </block>
                                          </next>
                                        </block>
                                      </statement>
                                      <next>
                                        <block type="jump" inline="true">
                                          <title name="DIR">jumpForward</title>
                                          <value name="VALUE">
                                            <block type="math_arithmetic" inline="true">
                                              <title name="OP">DIVIDE</title>
                                              <value name="A">
                                                <block type="variables_get">
                                                  <title name="VAR">length</title>
                                                </block>
                                              </value>
                                              <value name="B">
                                                <block type="math_number">
                                                  <title name="NUM">2</title>
                                                </block>
                                              </value>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="draw_turn" inline="true">
                                              <title name="DIR">turnLeft</title>
                                              <value name="VALUE">
                                                <block type="math_arithmetic" inline="true">
                                                  <title name="OP">DIVIDE</title>
                                                  <value name="A">
                                                    <block type="math_number">
                                                      <title name="NUM">360</title>
                                                    </block>
                                                  </value>
                                                  <value name="B">
                                                    <block type="variables_get">
                                                      <title name="VAR">sides</title>
                                                    </block>
                                                  </value>
                                                </block>
                                              </value>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </statement>
                                  <next>
                                    <block type="jump" inline="true">
                                      <title name="DIR">jumpForward</title>
                                      <value name="VALUE">
                                        <block type="variables_get">
                                          <title name="VAR">length</title>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn" inline="true">
                                          <title name="DIR">turnRight</title>
                                          <value name="VALUE">
                                            <block type="math_arithmetic" inline="true">
                                              <title name="OP">DIVIDE</title>
                                              <value name="A">
                                                <block type="math_number">
                                                  <title name="NUM">360</title>
                                                </block>
                                              </value>
                                              <value name="B">
                                                <block type="variables_get">
                                                  <title name="VAR">sides</title>
                                                </block>
                                              </value>
                                            </block>
                                          </value>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      Course 4 Artist Vars 13:
        Course_4_Artist_Vars_13_a: You need two repeat loops (one inside the other)
          both repeating `sides` times.
        Course_4_Artist_Vars_13_b: "The inner repeat loop draws an octagon (turning
          to the left).   \n\nAfterwards, you need to move forward and turn right
          only in the outer loop."
        Course_4_Artist_Vars_13_c: To adjust the shape to stay the same size when
          the number of sides change, use the math block to divide the length in pixels
          by the number of sides.
      Course 4 Artist Vars 6:
        Course_4_Artist_Vars_6_a: To draw a regular polygon, turn **360/sides** each
          time.
      Course 4 Artist Vars 8:
        Course_4_Artist_Vars_8_a: If you divide your starting length by the number
          of sides, the length of each side will get shorter as the number of sides
          gets higher.
      Course 4 Bee Params 7:
        notice_pattern: 'Do you see a pattern in how the number of nectar changes? '
        count_with_for: Notice that the nectar goes up in steps. What kind of block
          can you use to do the same thing many times while counting up?
      Course 4 Bee Params 8:
        Course_4_Bee_Params_8_a: It's okay to ask for a honey number and a nectar
          number each time.  If there's none of something, the number can be 0.
      Course 4 Play Lab Params 2:
        Course_4_Play_Lab_Params_2_a: You will need to click "edit" on the jump function
          and update it so that it uses the `height` parameter.
      Course 4 Play Lab Vars 2:
        Course_4_Play_Lab_Vars_2_a: Make sure to set the number for `dog_speed` to
          something larger than `cat_speed`.
      Course 4 Play Labs For Loops 2:
        Course_4_Play_Labs_For_Loops_2_a: What would you add to your `for` loop every
          time to skip the even numbers?
      Course 4 Playlab For Loops 4b:
        Course_4_Playlab_For_Loops_4b_a: The flags are about 330 pixels away from
          the characters.
        Course_4_Playlab_For_Loops_4b_b: How can you make each character reach 330
          pixels in the same number of moves with different starting and stopping
          numbers?
        Course_4_Playlab_For_Loops_4b_c: Remember, it doesn't matter how much a character
          passes the flag by on its last step, as long as it takes each character
          the same number of steps to get to the flag.
      Course 4 Playlab For Loops 5b:
        Course_4_Playlab_For_Loops_5b_a: The characters are about 175 pixels away
          from the center.
        Course_4_Playlab_For_Loops_5b_b: Remember, a character's next step will be
          longer than their last, since the counter keeps getting larger.
      Course 4 SCF 1:
        Course_4_SCF_1_a: Each hexagon has 40 pixel sides.
        Course_4_SCF_1_b: There is a 120 pixel jump between each hexagon in each horizontal
          line.
        Course_4_SCF_1_c: "Before you draw the second row of hexagons, you need to
          turn right by 60 degrees and jump forward 40 pixels.  \n\nOnce you're in
          the correct vertical location, you have to turn your artist back again and
          jump backward 320 pixels."
        Course_4_SCF_1_d: "Before you draw the third row of hexagons, you need to
          turn right by 60 degrees and jump forward 40 pixels.  \n\nOnce you're in
          the correct vertical location, you have to turn your artist back again and
          jump backward 440 pixels (120 pixels farther than your `shift down/forward`
          function. "
        Course_4_SCF_1_e: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat_ext" inline="true">
                  <value name="TIMES">
                    <block type="math_number">
                      <title name="NUM">2</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="procedures_callnoreturn">
                    <mutation name="draw a line of hexagons"></mutation>
                      <next>
                        <block type="procedures_callnoreturn">
                        <mutation name="shift down/forward"></mutation>
                          <next>
                            <block type="procedures_callnoreturn">
                            <mutation name="draw a line of hexagons"></mutation>
                              <next>
                                <block type="procedures_callnoreturn">
                                <mutation name="shift down/backward"></mutation>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
            <block type="procedures_defnoreturn">
            <mutation></mutation>
              <title name="NAME">draw a hexagon</title>
              <statement name="STACK">
                <block type="controls_repeat_ext" inline="true">
                  <value name="TIMES">
                    <block type="math_number">
                      <title name="NUM">6</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="draw_move" inline="true">
                      <title name="DIR">moveForward</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">40</title>
                        </block>
                      </value>
                      <next>
                        <block type="draw_turn" inline="true">
                          <title name="DIR">turnRight</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">60</title>
                            </block>
                          </value>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </statement>
            </block>
            <block type="procedures_defnoreturn">
            <mutation></mutation>
              <title name="NAME">shift down/backward</title>
              <statement name="STACK">
                <block type="draw_turn" inline="true">
                  <title name="DIR">turnRight</title>
                  <value name="VALUE">
                    <block type="math_number">
                      <title name="NUM">60</title>
                    </block>
                  </value>
                  <next>
                    <block type="jump" inline="true">
                      <title name="DIR">jumpForward</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">40</title>
                        </block>
                      </value>
                      <next>
                        <block type="draw_turn" inline="true">
                          <title name="DIR">turnLeft</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">60</title>
                            </block>
                          </value>
                          <next>
                            <block type="jump" inline="true">
                              <title name="DIR">jumpBackward</title>
                              <value name="VALUE">
                                <block type="math_number">
                                  <title name="NUM">440</title>
                                </block>
                              </value>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </statement>
            </block>
            <block type="procedures_defnoreturn">
            <mutation></mutation>
              <title name="NAME">draw a line of hexagons</title>
              <statement name="STACK">
                <block type="controls_repeat_ext" inline="true">
                  <value name="TIMES">
                    <block type="math_number">
                      <title name="NUM">3</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="procedures_callnoreturn">
                    <mutation name="draw a hexagon"></mutation>
                      <next>
                        <block type="jump" inline="true">
                          <title name="DIR">jumpForward</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">120</title>
                            </block>
                          </value>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </statement>
            </block>
            <block type="procedures_defnoreturn">
            <mutation></mutation>
              <title name="NAME">shift down/forward</title>
              <statement name="STACK">
                <block type="draw_turn" inline="true">
                  <title name="DIR">turnRight</title>
                  <value name="VALUE">
                    <block type="math_number">
                      <title name="NUM">60</title>
                    </block>
                  </value>
                  <next>
                    <block type="jump" inline="true">
                      <title name="DIR">jumpForward</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">40</title>
                        </block>
                      </value>
                      <next>
                        <block type="draw_turn" inline="true">
                          <title name="DIR">turnLeft</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">60</title>
                            </block>
                          </value>
                          <next>
                            <block type="jump" inline="true">
                              <title name="DIR">jumpBackward</title>
                              <value name="VALUE">
                                <block type="math_number">
                                  <title name="NUM">320</title>
                                </block>
                              </value>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </statement>
            </block>
          </xml>
      Course 4 SCF 1a:
        Course_4_SCF_1a_a: Remember your functions from stage 16.
        Course_4_SCF_1a_b: "Look at this path as your main route:  \n\n![](https://images.code.org/1c3feab70af706409b3a05af4dc83c2e-image-1469726967858.png)"
        Course_4_SCF_1a_c: You should consider using a `for loop`. Not for the steps,
          but for the function parameter.
        Course_4_SCF_1a_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false" uservisible="false" y="14">
              <next>
                <block type="variables_set" inline="false" uservisible="false">
                  <title name="VAR">left</title>
                  <value name="VALUE">
                    <block type="math_number" uservisible="false">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="variables_set" inline="false" uservisible="false">
                      <title name="VAR">right</title>
                      <value name="VALUE">
                        <block type="math_number" uservisible="false">
                          <title name="NUM">0</title>
                        </block>
                      </value>
                    </block>
                  </next>
                </block>
              </next>
            </block>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_for" inline="true">
                  <title name="VAR">counter</title>
                  <value name="FROM">
                    <block type="math_number">
                      <title name="NUM">3</title>
                    </block>
                  </value>
                  <value name="TO">
                    <block type="math_number">
                      <title name="NUM">21</title>
                    </block>
                  </value>
                  <value name="BY">
                    <block type="math_number">
                      <title name="NUM">3</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="maze_move">
                      <title name="DIR">moveForward</title>
                      <next>
                        <block type="maze_if">
                          <title name="DIR">isPathLeft</title>
                          <statement name="DO">
                            <block type="procedures_callnoreturn" inline="false">
                              <mutation name="get nectar">
                              <arg name="dir"></arg>
                              <arg name="counter"></arg>
                              </mutation>
                              <value name="ARG0">
                                <block type="variables_get">
                                  <title name="VAR">left</title>
                                </block>
                              </value>
                              <value name="ARG1">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                            </block>
                          </statement>
                          <next>
                            <block type="maze_turn">
                              <title name="DIR">turnRight</title>
                              <next>
                                <block type="maze_move">
                                  <title name="DIR">moveForward</title>
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnLeft</title>
                                      <next>
                                        <block type="maze_if">
                                          <title name="DIR">isPathRight</title>
                                          <statement name="DO">
                                            <block type="procedures_callnoreturn" inline="false">
                                              <mutation name="get nectar">
                                              <arg name="dir"></arg>
                                              <arg name="counter"></arg>
                                              </mutation>
                                              <value name="ARG0">
                                                <block type="variables_get">
                                                  <title name="VAR">right</title>
                                                </block>
                                              </value>
                                              <value name="ARG1">
                                                <block type="variables_get">
                                                  <title name="VAR">counter</title>
                                                </block>
                                              </value>
                                            </block>
                                          </statement>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
            <block type="procedures_defnoreturn" editable="false" usercreated="true">
              <mutation>
              <arg name="dir"></arg>
              <arg name="counter"></arg>
              </mutation>
              <title name="NAME">get nectar</title>
              <statement name="STACK">
                <block type="controls_if" inline="false">
                <mutation else="1"></mutation>
                  <value name="IF0">
                    <block type="logic_compare" inline="true" movable="false">
                      <title name="OP">EQ</title>
                      <value name="A">
                        <block type="parameters_get">
                          <title name="VAR">dir</title>
                        </block>
                      </value>
                      <value name="B">
                        <block type="variables_get">
                          <title name="VAR">left</title>
                        </block>
                      </value>
                    </block>
                  </value>
                  <statement name="DO0">
                    <block type="maze_turn">
                      <title name="DIR">turnLeft</title>
                    </block>
                  </statement>
                  <statement name="ELSE">
                    <block type="maze_turn">
                      <title name="DIR">turnRight</title>
                    </block>
                  </statement>
                  <next>
                    <block type="controls_repeat_ext" inline="true">
                      <value name="TIMES">
                        <block type="math_number">
                          <title name="NUM">3</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="maze_move">
                          <title name="DIR">moveForward</title>
                        </block>
                      </statement>
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="parameters_get">
                              <title name="VAR">counter</title>
                            </block>
                          </value>
                          <statement name="DO">
                          <block type="maze_nectar"></block>
                          </statement>
                          <next>
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="math_number">
                                  <title name="NUM">3</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="maze_move">
                                  <title name="DIR">moveBackward</title>
                                </block>
                              </statement>
                              <next>
                                <block type="controls_if" inline="false">
                                <mutation else="1"></mutation>
                                  <value name="IF0">
                                    <block type="logic_compare" inline="true" movable="false">
                                      <title name="OP">EQ</title>
                                      <value name="A">
                                        <block type="parameters_get">
                                          <title name="VAR">dir</title>
                                        </block>
                                      </value>
                                      <value name="B">
                                        <block type="variables_get">
                                          <title name="VAR">left</title>
                                        </block>
                                      </value>
                                    </block>
                                  </value>
                                  <statement name="DO0">
                                    <block type="maze_turn">
                                      <title name="DIR">turnRight</title>
                                    </block>
                                  </statement>
                                  <statement name="ELSE">
                                    <block type="maze_turn">
                                      <title name="DIR">turnLeft</title>
                                    </block>
                                  </statement>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </statement>
            </block>
          </xml>
      Course 4 SCF 1b:
        Course_4_SCF_1b_a: "Notice that the shape of all honey points is similar.
          \ \n\nGood place for a function!"
        Course_4_SCF_1b_b: "Look at this idea for how the bee might travel:  \n\n![](https://images.code.org/996ab4a2de6048cbb99b84c56cc4ad61-image-1469726859769.png)"
        Course_4_SCF_1b_c: You should consider using a `for loop` for the distance
          the bee travels.
        Course_4_SCF_1b_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_for" inline="true">
                  <title name="VAR">counter</title>
                  <value name="FROM">
                    <block type="math_number">
                      <title name="NUM">2</title>
                    </block>
                  </value>
                  <value name="TO">
                    <block type="math_number">
                      <title name="NUM">4</title>
                    </block>
                  </value>
                  <value name="BY">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="procedures_callnoreturn">
                    <mutation name="make honey up and over"></mutation>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnLeft</title>
                          <next>
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="maze_move">
                                  <title name="DIR">moveForward</title>
                                </block>
                              </statement>
                              <next>
                                <block type="maze_turn">
                                  <title name="DIR">turnRight</title>
                                  <next>
                                    <block type="controls_repeat_ext" inline="true">
                                      <value name="TIMES">
                                        <block type="variables_get">
                                          <title name="VAR">counter</title>
                                        </block>
                                      </value>
                                      <statement name="DO">
                                        <block type="maze_move">
                                          <title name="DIR">moveForward</title>
                                        </block>
                                      </statement>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
            <block type="procedures_defnoreturn" editable="false" usercreated="true">
            <mutation></mutation>
              <title name="NAME">make honey up and over</title>
              <statement name="STACK">
                <block type="maze_move">
                  <title name="DIR">moveForward</title>
                  <next>
                    <block type="maze_turn">
                      <title name="DIR">turnRight</title>
                      <next>
                        <block type="maze_move">
                          <title name="DIR">moveForward</title>
                          <next>
                            <block type="maze_honey">
                              <next>
                                <block type="maze_honey">
                                  <next>
                                    <block type="maze_move">
                                      <title name="DIR">moveBackward</title>
                                      <next>
                                        <block type="maze_turn">
                                          <title name="DIR">turnLeft</title>
                                          <next>
                                            <block type="maze_move">
                                              <title name="DIR">moveBackward</title>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </statement>
            </block>
          </xml>
      Course 4 SCF 2:
        Course_4_SCF_2_a: Each octagon has 40 pixel sides.
        Course_4_SCF_2_b: There is a 136 pixel jump between each octagon in each horizontal
          line.
        Course_4_SCF_2_c: "Before you draw the second row of octagons, you need to
          turn right by 45 degrees and jump forward 96 pixels.  \n\nOnce you're in
          the correct vertical location, you have to turn your artist back again and
          jump backward 408 pixels. "
        Course_4_SCF_2_d: "Notice that because there are fewer octagons in the even
          rows, you don't have to jump back any further to get to the starting place
          for the odd rows.  \n\nThis means you can use the same function for all
          rows."
        Course_4_SCF_2_e: |-
          **Solution:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat_ext" inline="true">
                  <value name="TIMES">
                    <block type="math_number">
                      <title name="NUM">2</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="procedures_callnoreturn" inline="false">
                      <mutation name="draw octagons">
                      <arg name="numOctagons"></arg>
                      </mutation>
                      <value name="ARG0">
                        <block type="math_number">
                          <title name="NUM">2</title>
                        </block>
                      </value>
                      <next>
                        <block type="procedures_callnoreturn">
                        <mutation name="shift down"></mutation>
                          <next>
                            <block type="procedures_callnoreturn" inline="false">
                              <mutation name="draw octagons">
                              <arg name="numOctagons"></arg>
                              </mutation>
                              <value name="ARG0">
                                <block type="math_number">
                                  <title name="NUM">3</title>
                                </block>
                              </value>
                              <next>
                                <block type="procedures_callnoreturn">
                                <mutation name="shift down"></mutation>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                  <next>
                    <block type="procedures_callnoreturn" inline="false">
                      <mutation name="draw octagons">
                      <arg name="numOctagons"></arg>
                      </mutation>
                      <value name="ARG0">
                        <block type="math_number">
                          <title name="NUM">2</title>
                        </block>
                      </value>
                    </block>
                  </next>
                </block>
              </next>
            </block>
            <block type="procedures_defnoreturn" editable="false">
              <mutation>
              <arg name="numOctagons"></arg>
              </mutation>
              <title name="NAME">draw octagons</title>
              <statement name="STACK">
                <block type="controls_repeat_ext" inline="true">
                  <value name="TIMES">
                    <block type="parameters_get">
                      <title name="VAR">numOctagons</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="procedures_callnoreturn">
                    <mutation name="draw an octagon"></mutation>
                      <next>
                        <block type="jump" inline="true">
                          <title name="DIR">jumpForward</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">136</title>
                            </block>
                          </value>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </statement>
            </block>
            <block type="procedures_defnoreturn" editable="false">
            <mutation></mutation>
              <title name="NAME">draw an octagon</title>
              <statement name="STACK">
                <block type="controls_repeat_ext" inline="true">
                  <value name="TIMES">
                    <block type="math_number">
                      <title name="NUM">8</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="draw_move" inline="true">
                      <title name="DIR">moveForward</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">40</title>
                        </block>
                      </value>
                      <next>
                        <block type="draw_turn" inline="true">
                          <title name="DIR">turnRight</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">45</title>
                            </block>
                          </value>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </statement>
            </block>
            <block type="procedures_defnoreturn" editable="false">
            <mutation></mutation>
              <title name="NAME">shift down</title>
              <statement name="STACK">
                <block type="draw_turn" inline="true">
                  <title name="DIR">turnRight</title>
                  <value name="VALUE">
                    <block type="math_number">
                      <title name="NUM">45</title>
                    </block>
                  </value>
                  <next>
                    <block type="jump" inline="true">
                      <title name="DIR">jumpForward</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">96</title>
                        </block>
                      </value>
                      <next>
                        <block type="draw_turn" inline="true">
                          <title name="DIR">turnLeft</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">45</title>
                            </block>
                          </value>
                          <next>
                            <block type="jump" inline="true">
                              <title name="DIR">jumpBackward</title>
                              <value name="VALUE">
                                <block type="math_number">
                                  <title name="NUM">408</title>
                                </block>
                              </value>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </statement>
            </block>
          </xml>
      Course 4 SCF 3:
        Course_4_SCF_3_a: "![](https://images.code.org/9310e6352e85a8265b424c9d57ca28d1-image-1446239776339.gif)"
        Course_4_SCF_3_b: 'This is a series of octagons with sides that are `counter`
          pixels long. '
        Course_4_SCF_3_c: 'Each octagon is called from inside a `for` loop that goes
          from 200 down to 2 by 2. '
        Course_4_SCF_3_d: 'Don''t forget to turn by 22.5 degrees at the end of each
          iteration. '
        Course_4_SCF_3_e: Both the color of each octagon and the width of the pen
          are controlled by the `counter` variable.
        Course_4_SCF_3_f: |-
          **Solution:**

          <xml>
            <block type="procedures_defnoreturn" editable="false">
              <mutation>
              <arg name="length"></arg>
              </mutation>
              <title name="NAME">draw an octagon</title>
              <statement name="STACK">
                <block type="controls_repeat_ext" inline="true">
                  <value name="TIMES">
                    <block type="math_number">
                      <title name="NUM">8</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="draw_move" inline="true">
                      <title name="DIR">moveForward</title>
                      <value name="VALUE">
                        <block type="parameters_get">
                          <title name="VAR">length</title>
                        </block>
                      </value>
                      <next>
                        <block type="draw_turn" inline="true">
                          <title name="DIR">turnRight</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">45</title>
                            </block>
                          </value>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </statement>
            </block>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_for_counter" inline="true">
                <mutation counter="counter"></mutation>
                  <value name="FROM">
                    <block type="math_number">
                      <title name="NUM">200</title>
                    </block>
                  </value>
                  <value name="TO">
                    <block type="math_number">
                      <title name="NUM">2</title>
                    </block>
                  </value>
                  <value name="BY">
                    <block type="math_number">
                      <title name="NUM">2</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="draw_colour" inline="true" id="draw-color">
                      <value name="COLOUR">
                        <block type="colour_rgb" inline="false">
                          <value name="RED">
                            <block type="math_arithmetic" inline="true">
                              <title name="OP">MINUS</title>
                              <value name="A">
                                <block type="math_number">
                                  <title name="NUM">255</title>
                                </block>
                              </value>
                              <value name="B">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                            </block>
                          </value>
                          <value name="GREEN">
                            <block type="variables_get">
                              <title name="VAR">counter</title>
                            </block>
                          </value>
                          <value name="BLUE">
                            <block type="math_arithmetic" inline="true">
                              <title name="OP">MULTIPLY</title>
                              <value name="A">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <value name="B">
                                <block type="math_number">
                                  <title name="NUM">2</title>
                                </block>
                              </value>
                            </block>
                          </value>
                        </block>
                      </value>
                      <next>
                        <block type="draw_width" inline="false">
                          <value name="WIDTH">
                            <block type="math_arithmetic" inline="true">
                              <title name="OP">DIVIDE</title>
                              <value name="A">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <value name="B">
                                <block type="math_number">
                                  <title name="NUM">4</title>
                                </block>
                              </value>
                            </block>
                          </value>
                          <next>
                            <block type="procedures_callnoreturn" inline="false">
                              <mutation name="draw an octagon">
                              <arg name="length"></arg>
                              </mutation>
                              <value name="ARG0">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_turn" inline="true">
                                  <title name="DIR">turnLeft</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">22.5</title>
                                    </block>
                                  </value>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCFL 1:
        Course_4_SCFL_1_a: "Take a look at this option for movement:  \n\n![](https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png)"
        Course_4_SCFL_1_b: 'Try using two `for` loops: One for climbing up and grabbing
          nectar, and the other for climbing down and making honey.'
        Course_4_SCFL_1_c: "Notice that one `for` loop needs several regular loops
          inside that repeat `counter` times to make the increasing stair pattern.
          \n\nThe other `for` loop only needs one regular loop to make `counter` amount
          of honey."
        Course_4_SCFL_1_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_for" inline="true">
                  <title name="VAR">counter</title>
                  <value name="FROM">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <value name="TO">
                    <block type="math_number">
                      <title name="NUM">3</title>
                    </block>
                  </value>
                  <value name="BY">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="controls_repeat_ext" inline="true">
                      <value name="TIMES">
                        <block type="variables_get">
                          <title name="VAR">counter</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="maze_moveForward"/>
                      </statement>
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="variables_get">
                              <title name="VAR">counter</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="maze_nectar"/>
                          </statement>
                          <next>
                            <block type="maze_turn">
                              <title name="DIR">turnLeft</title>
                              <next>
                                <block type="controls_repeat_ext" inline="true">
                                  <value name="TIMES">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <statement name="DO">
                                    <block type="maze_moveForward"/>
                                  </statement>
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnRight</title>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_turn">
                      <title name="DIR">turnRight</title>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                          <next>
                            <block type="controls_for" inline="true">
                              <title name="VAR">counter</title>
                              <value name="FROM">
                                <block type="math_number">
                                  <title name="NUM">2</title>
                                </block>
                              </value>
                              <value name="TO">
                                <block type="math_number">
                                  <title name="NUM">10</title>
                                </block>
                              </value>
                              <value name="BY">
                                <block type="math_number">
                                  <title name="NUM">2</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="maze_moveForward">
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnLeft</title>
                                      <next>
                                        <block type="maze_moveForward">
                                          <next>
                                            <block type="maze_turn">
                                              <title name="DIR">turnRight</title>
                                              <next>
                                                <block type="controls_repeat_ext" inline="true">
                                                  <value name="TIMES">
                                                    <block type="variables_get">
                                                      <title name="VAR">counter</title>
                                                    </block>
                                                  </value>
                                                  <statement name="DO">
                                                    <block type="maze_honey"/>
                                                  </statement>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCFL 1a:
        Course_4_SCFL_1a_a: You may have to travel farther overall to use the smallest
          number of blocks.
        Course_4_SCFL_1a_b: "Take a look at this option for movement:  \n\n![](https://images.code.org/253d710ff7d1b494fe8fd20cfc92baaf-image-1469726263579.png)"
        Course_4_SCFL_1a_c: A `for loop` will help you execute the same pattern, but
          with a changing number of steps.  Notice that the number of steps needed
          decreases from 7 to 5 by 1.
        Course_4_SCFL_1a_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_for" inline="true">
                  <title name="VAR">counter</title>
                  <value name="FROM">
                    <block type="math_number">
                      <title name="NUM">7</title>
                    </block>
                  </value>
                  <value name="TO">
                    <block type="math_number">
                      <title name="NUM">5</title>
                    </block>
                  </value>
                  <value name="BY">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="controls_repeat_ext" inline="true">
                      <value name="TIMES">
                        <block type="math_number">
                          <title name="NUM">2</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="maze_moveForward"/>
                      </statement>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnLeft</title>
                          <next>
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="maze_moveForward"/>
                              </statement>
                              <next>
                                <block type="maze_turn">
                                  <title name="DIR">turnLeft</title>
                                  <next>
                                    <block type="controls_repeat_ext" inline="true">
                                      <value name="TIMES">
                                        <block type="math_number">
                                          <title name="NUM">2</title>
                                        </block>
                                      </value>
                                      <statement name="DO">
                                        <block type="maze_moveForward"/>
                                      </statement>
                                      <next>
                                        <block type="maze_turn">
                                          <title name="DIR">turnLeft</title>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCFL 1b:
        Course_4_SCFL_1b_a: Try using a `for loop`.
        Course_4_SCFL_1b_b: "Take a look at this option for movement:  \n\n![](https://images.code.org/1957633c453f4025a3fd6ce0e201398b-image-1469642319721.png)"
        Course_4_SCFL_1b_c: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_for" inline="true">
                  <title name="VAR">counter</title>
                  <value name="FROM">
                    <block type="math_number">
                      <title name="NUM">3</title>
                    </block>
                  </value>
                  <value name="TO">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <value name="BY">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="controls_repeat_ext" inline="true">
                      <value name="TIMES">
                        <block type="variables_get">
                          <title name="VAR">counter</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="maze_moveForward"/>
                      </statement>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnLeft</title>
                          <next>
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="maze_moveForward"/>
                              </statement>
                              <next>
                                <block type="maze_turn">
                                  <title name="DIR">turnRight</title>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCFL 2:
        Course_4_SCFL_2_a: "Take a look at this option for movement:  \n\n![](https://images.code.org/a69c63a039031254097f19231dd7bf95-image-1469726483169.png)"
        Course_4_SCFL_2_b: Notice that there are three points during each iteration
          of this `for` loop where you stop to interact with objects.
        Course_4_SCFL_2_c: During each iteration of the `for` loop, the number for
          each object relates to the `counter` variable in some way.
        Course_4_SCFL_2_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_for" inline="true">
                  <title name="VAR">counter</title>
                  <value name="FROM">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <value name="TO">
                    <block type="math_number">
                      <title name="NUM">4</title>
                    </block>
                  </value>
                  <value name="BY">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="maze_moveForward">
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="variables_get">
                              <title name="VAR">counter</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="maze_nectar"/>
                          </statement>
                          <next>
                            <block type="maze_turn">
                              <title name="DIR">turnRight</title>
                              <next>
                                <block type="maze_moveForward">
                                  <next>
                                    <block type="maze_moveForward">
                                      <next>
                                        <block type="controls_repeat_ext" inline="true">
                                          <value name="TIMES">
                                            <block type="math_arithmetic" inline="true">
                                              <title name="OP">MULTIPLY</title>
                                              <value name="A">
                                                <block type="variables_get">
                                                  <title name="VAR">counter</title>
                                                </block>
                                              </value>
                                              <value name="B">
                                                <block type="math_number">
                                                  <title name="NUM">3</title>
                                                </block>
                                              </value>
                                            </block>
                                          </value>
                                          <statement name="DO">
                                            <block type="maze_honey"/>
                                          </statement>
                                          <next>
                                            <block type="maze_turn">
                                              <title name="DIR">turnLeft</title>
                                              <next>
                                                <block type="maze_moveForward">
                                                  <next>
                                                    <block type="maze_moveForward">
                                                      <next>
                                                        <block type="maze_turn">
                                                          <title name="DIR">turnRight</title>
                                                          <next>
                                                            <block type="controls_repeat_ext" inline="true">
                                                              <value name="TIMES">
                                                                <block type="math_arithmetic" inline="true">
                                                                  <title name="OP">POWER</title>
                                                                  <value name="A">
                                                                    <block type="math_number">
                                                                      <title name="NUM">2</title>
                                                                    </block>
                                                                  </value>
                                                                  <value name="B">
                                                                    <block type="variables_get">
                                                                      <title name="VAR">counter</title>
                                                                    </block>
                                                                  </value>
                                                                </block>
                                                              </value>
                                                              <statement name="DO">
                                                                <block type="maze_nectar"/>
                                                              </statement>
                                                            </block>
                                                          </next>
                                                        </block>
                                                      </next>
                                                    </block>
                                                  </next>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCFL 3:
        Course_4_SCFL_3_a: The `pen width` is 1. The first square has 50 pixel sides,
          and each square is 50 pixels wider than the last.
        Course_4_SCFL_3_b: The opacity on the brush is always `counter`/2.
        Course_4_SCFL_3_c: After you make each square, don't forget to jump backward,
          turn, jump again, then turn back!
        Course_4_SCFL_3_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="draw_colour" inline="true" id="draw-color">
                      <value name="COLOUR">
                        <block type="colour_picker">
                          <title name="COLOUR">#0000cd</title>
                        </block>
                      </value>
                      <next>
                        <block type="controls_for_counter" inline="true">
                        <mutation counter="counter"></mutation>
                          <value name="FROM">
                            <block type="math_number">
                              <title name="NUM">50</title>
                            </block>
                          </value>
                          <value name="TO">
                            <block type="math_number">
                              <title name="NUM">350</title>
                            </block>
                          </value>
                          <value name="BY">
                            <block type="math_number">
                              <title name="NUM">50</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="alpha" inline="true" id="alpha">
                              <value name="VALUE">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">DIVIDE</title>
                                  <value name="A">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="math_number">
                                      <title name="NUM">2</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                              <next>
                                <block type="controls_repeat_ext" inline="true">
                                  <value name="TIMES">
                                    <block type="math_number">
                                      <title name="NUM">4</title>
                                    </block>
                                  </value>
                                  <statement name="DO">
                                    <block type="draw_move" inline="true">
                                      <title name="DIR">moveForward</title>
                                      <value name="VALUE">
                                        <block type="variables_get">
                                          <title name="VAR">counter</title>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn" inline="true">
                                          <title name="DIR">turnRight</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                        </block>
                                      </next>
                                    </block>
                                  </statement>
                                  <next>
                                    <block type="jump" inline="true">
                                      <title name="DIR">jumpBackward</title>
                                      <value name="VALUE">
                                        <block type="math_number">
                                          <title name="NUM">25</title>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn" inline="true">
                                          <title name="DIR">turnRight</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="jump" inline="true">
                                              <title name="DIR">jumpBackward</title>
                                              <value name="VALUE">
                                                <block type="math_number">
                                                  <title name="NUM">25</title>
                                                </block>
                                              </value>
                                              <next>
                                                <block type="draw_turn" inline="true">
                                                  <title name="DIR">turnLeft</title>
                                                  <value name="VALUE">
                                                    <block type="math_number">
                                                      <title name="NUM">90</title>
                                                    </block>
                                                  </value>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </statement>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCFL 4:
        Course_4_SCFL_4_a: The color change happens using the `set color with red,
          green, blue` block.  Red is always the value of `counter`, green is always
          `255 - counter`, and blue remains constant at 255 exactly.
        Course_4_SCFL_4_b: Each shape is a square with sides that are `counter` pixels
          long, starting with 5px, and increasing by 5px all the way up to 200px.
        Course_4_SCFL_4_c: The artist turns 15 degrees between each square.
        Course_4_SCFL_4_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_for_counter" inline="true">
                    <mutation counter="counter"></mutation>
                      <value name="FROM">
                        <block type="math_number">
                          <title name="NUM">5</title>
                        </block>
                      </value>
                      <value name="TO">
                        <block type="math_number">
                          <title name="NUM">200</title>
                        </block>
                      </value>
                      <value name="BY">
                        <block type="math_number">
                          <title name="NUM">5</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="draw_colour" inline="true" id="draw-color">
                          <value name="COLOUR">
                            <block type="colour_rgb" inline="false">
                              <value name="RED">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <value name="GREEN">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">MINUS</title>
                                  <value name="A">
                                    <block type="math_number">
                                      <title name="NUM">255</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                              <value name="BLUE">
                                <block type="math_number">
                                  <title name="NUM">255</title>
                                </block>
                              </value>
                            </block>
                          </value>
                          <next>
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="math_number">
                                  <title name="NUM">4</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="draw_move" inline="true">
                                  <title name="DIR">moveForward</title>
                                  <value name="VALUE">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="draw_turn_by_constant">
                                      <title name="DIR">turnRight</title>
                                      <title name="VALUE">90</title>
                                    </block>
                                  </next>
                                </block>
                              </statement>
                              <next>
                                <block type="draw_turn" inline="true">
                                  <title name="DIR">turnLeft</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">15</title>
                                    </block>
                                  </value>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCFL 6:
        Course_4_SCFL_6_a: The color change happens using the `set color with red,
          green, blue` block.  Red is set constant at 255, green is always the value
          of `counter`, and blue is always `255 - counter`.
        Course_4_SCFL_6_b: The code for this is much more simple than you might think.  Just
          set the color inside the `for loop`, move forward, then turn.
        Course_4_SCFL_6_c: 'The `for loop` goes from 5 to 250 by 2. '
        Course_4_SCFL_6_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_for_counter" inline="true">
                    <mutation counter="counter"></mutation>
                      <value name="FROM">
                        <block type="math_number">
                          <title name="NUM">5</title>
                        </block>
                      </value>
                      <value name="TO">
                        <block type="math_number">
                          <title name="NUM">250</title>
                        </block>
                      </value>
                      <value name="BY">
                        <block type="math_number">
                          <title name="NUM">2</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="draw_colour" inline="true" id="draw-color">
                          <value name="COLOUR">
                            <block type="colour_rgb" inline="false">
                              <value name="RED">
                                <block type="math_number">
                                  <title name="NUM">255</title>
                                </block>
                              </value>
                              <value name="GREEN">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <value name="BLUE">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">MINUS</title>
                                  <value name="A">
                                    <block type="math_number">
                                      <title name="NUM">255</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                            </block>
                          </value>
                          <next>
                            <block type="draw_move" inline="true">
                              <title name="DIR">moveForward</title>
                              <value name="VALUE">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_turn" inline="true">
                                  <title name="DIR">turnRight</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">80</title>
                                    </block>
                                  </value>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCFL 7:
        Course_4_SCFL_7_a: The color change happens using the `set color with red,
          green, blue` block.  Red is set to `counter`. Green is  `255 - counter`,
          and blue is set constant at 255.
        Course_4_SCFL_7_b: 'This drawing is made using two similar `for loops`.  One
          goes from 5 to 200 by 2, the other goes from 200 to 5 by 2. '
        Course_4_SCFL_7_c: Inside each `for loop` you move forward 5 pixels before
          you turn by `360 / counter`. Don't forget to set your brush to width `counter`
          before you do!
        Course_4_SCFL_7_d: You'll need to turn left by 225 degrees between the two
          `for loops`.
        Course_4_SCFL_7_e: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="alpha" inline="true" id="alpha">
                  <value name="VALUE">
                    <block type="math_number_dropdown">
                      <title name="NUM" config="100,90,80,70,60,50,40,30,20,10,0">20</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_for_counter" inline="true">
                    <mutation counter="counter"></mutation>
                      <value name="FROM">
                        <block type="math_number">
                          <title name="NUM">5</title>
                        </block>
                      </value>
                      <value name="TO">
                        <block type="math_number">
                          <title name="NUM">200</title>
                        </block>
                      </value>
                      <value name="BY">
                        <block type="math_number">
                          <title name="NUM">2</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="draw_width" inline="false">
                          <value name="WIDTH">
                            <block type="variables_get">
                              <title name="VAR">counter</title>
                            </block>
                          </value>
                          <next>
                            <block type="draw_colour" inline="true" id="draw-color">
                              <value name="COLOUR">
                                <block type="colour_rgb" inline="false">
                                  <value name="RED">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <value name="GREEN">
                                    <block type="math_arithmetic" inline="true">
                                      <title name="OP">MINUS</title>
                                      <value name="A">
                                        <block type="math_number">
                                          <title name="NUM">255</title>
                                        </block>
                                      </value>
                                      <value name="B">
                                        <block type="variables_get">
                                          <title name="VAR">counter</title>
                                        </block>
                                      </value>
                                    </block>
                                  </value>
                                  <value name="BLUE">
                                    <block type="math_number">
                                      <title name="NUM">255</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                              <next>
                                <block type="draw_move" inline="true">
                                  <title name="DIR">moveForward</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">5</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="draw_turn" inline="true">
                                      <title name="DIR">turnLeft</title>
                                      <value name="VALUE">
                                        <block type="math_arithmetic" inline="true">
                                          <title name="OP">DIVIDE</title>
                                          <value name="A">
                                            <block type="math_number">
                                              <title name="NUM">360</title>
                                            </block>
                                          </value>
                                          <value name="B">
                                            <block type="variables_get">
                                              <title name="VAR">counter</title>
                                            </block>
                                          </value>
                                        </block>
                                      </value>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                      <next>
                        <block type="draw_turn" inline="true">
                          <title name="DIR">turnLeft</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">225</title>
                            </block>
                          </value>
                          <next>
                            <block type="controls_for_counter" inline="true">
                            <mutation counter="counter"></mutation>
                              <value name="FROM">
                                <block type="math_number">
                                  <title name="NUM">200</title>
                                </block>
                              </value>
                              <value name="TO">
                                <block type="math_number">
                                  <title name="NUM">5</title>
                                </block>
                              </value>
                              <value name="BY">
                                <block type="math_number">
                                  <title name="NUM">2</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="draw_width" inline="false">
                                  <value name="WIDTH">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="draw_colour" inline="true" id="draw-color">
                                      <value name="COLOUR">
                                        <block type="colour_rgb" inline="false">
                                          <value name="RED">
                                            <block type="variables_get">
                                              <title name="VAR">counter</title>
                                            </block>
                                          </value>
                                          <value name="GREEN">
                                            <block type="math_arithmetic" inline="true">
                                              <title name="OP">MINUS</title>
                                              <value name="A">
                                                <block type="math_number">
                                                  <title name="NUM">255</title>
                                                </block>
                                              </value>
                                              <value name="B">
                                                <block type="variables_get">
                                                  <title name="VAR">counter</title>
                                                </block>
                                              </value>
                                            </block>
                                          </value>
                                          <value name="BLUE">
                                            <block type="math_number">
                                              <title name="NUM">255</title>
                                            </block>
                                          </value>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_move" inline="true">
                                          <title name="DIR">moveForward</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">5</title>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="draw_turn" inline="true">
                                              <title name="DIR">turnRight</title>
                                              <value name="VALUE">
                                                <block type="math_arithmetic" inline="true">
                                                  <title name="OP">DIVIDE</title>
                                                  <value name="A">
                                                    <block type="math_number">
                                                      <title name="NUM">360</title>
                                                    </block>
                                                  </value>
                                                  <value name="B">
                                                    <block type="variables_get">
                                                      <title name="VAR">counter</title>
                                                    </block>
                                                  </value>
                                                </block>
                                              </value>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCV 1:
        Course_4_SCV_1_a: 'Variables are helpful because you can add to them each
          time through a loop. '
        Course_4_SCV_1_b: This puzzle has one loop that creates the polygon, one loop
          that repeats the polygon `sides` times, then another loop that does it all
          again after adding 5 to `sides`.
        Course_4_SCV_1_c: Using a variable for `sides` and one for `length` makes
          the code cleaner because you can loop the same code multiple times, instead
          of creating a new copy for each set of numbers.
        Course_4_SCV_1_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="variables_set" inline="false">
                      <title name="VAR">length</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">500</title>
                        </block>
                      </value>
                      <next>
                        <block type="variables_set" inline="false">
                          <title name="VAR">sides</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">0</title>
                            </block>
                          </value>
                          <next>
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="math_number">
                                  <title name="NUM">2</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="draw_colour" inline="true" id="draw-color">
                                  <value name="COLOUR">
                                    <block type="colour_random"/>
                                  </value>
                                  <next>
                                    <block type="variables_set" inline="false">
                                      <title name="VAR">sides</title>
                                      <value name="VALUE">
                                        <block type="math_arithmetic" inline="true">
                                          <title name="OP">ADD</title>
                                          <value name="A">
                                            <block type="variables_get">
                                              <title name="VAR">sides</title>
                                            </block>
                                          </value>
                                          <value name="B">
                                            <block type="math_number">
                                              <title name="NUM">5</title>
                                            </block>
                                          </value>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="controls_repeat_ext" inline="true">
                                          <value name="TIMES">
                                            <block type="variables_get">
                                              <title name="VAR">sides</title>
                                            </block>
                                          </value>
                                          <statement name="DO">
                                            <block type="controls_repeat_ext" inline="true">
                                              <value name="TIMES">
                                                <block type="variables_get">
                                                  <title name="VAR">sides</title>
                                                </block>
                                              </value>
                                              <statement name="DO">
                                                <block type="draw_move" inline="true">
                                                  <title name="DIR">moveForward</title>
                                                  <value name="VALUE">
                                                    <block type="math_arithmetic" inline="true">
                                                      <title name="OP">DIVIDE</title>
                                                      <value name="A">
                                                        <block type="variables_get">
                                                          <title name="VAR">length</title>
                                                        </block>
                                                      </value>
                                                      <value name="B">
                                                        <block type="variables_get">
                                                          <title name="VAR">sides</title>
                                                        </block>
                                                      </value>
                                                    </block>
                                                  </value>
                                                  <next>
                                                    <block type="draw_turn" inline="true">
                                                      <title name="DIR">turnLeft</title>
                                                      <value name="VALUE">
                                                        <block type="math_arithmetic" inline="true">
                                                          <title name="OP">DIVIDE</title>
                                                          <value name="A">
                                                            <block type="math_number">
                                                              <title name="NUM">360</title>
                                                            </block>
                                                          </value>
                                                          <value name="B">
                                                            <block type="variables_get">
                                                              <title name="VAR">sides</title>
                                                            </block>
                                                          </value>
                                                        </block>
                                                      </value>
                                                    </block>
                                                  </next>
                                                </block>
                                              </statement>
                                              <next>
                                                <block type="draw_turn" inline="true">
                                                  <title name="DIR">turnRight</title>
                                                  <value name="VALUE">
                                                    <block type="math_arithmetic" inline="true">
                                                      <title name="OP">DIVIDE</title>
                                                      <value name="A">
                                                        <block type="math_number">
                                                          <title name="NUM">360</title>
                                                        </block>
                                                      </value>
                                                      <value name="B">
                                                        <block type="variables_get">
                                                          <title name="VAR">sides</title>
                                                        </block>
                                                      </value>
                                                    </block>
                                                  </value>
                                                </block>
                                              </next>
                                            </block>
                                          </statement>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCV 2:
        Course_4_SCV_2_a: |-
          The completed image is made up of 10 of these "flowers":\
          ![](https://images.code.org/bac2a606dfa59c00409294499540267d-image-1469641972385.png)

          ...which are made up of 10 of these decagons:\
          ![](https://images.code.org/1e15f278c9c1606f90a2490ec3a94eb4-image-1469642051512.png)
        Course_4_SCV_2_b: 'This design uses nested loops (three deep). All loops run
          `sides` times. '
        Course_4_SCV_2_c: The artist turns to the left when creating each decagon,
          but turns to the right in both of the other loops.
        Course_4_SCV_2_d: To prevent all of your 10 petal "flowers" from getting drawn
          in the same place, make sure to jump forward by `length`/`sides` before
          you turn 360/`sides` degrees as part of your outermost loop.
        Course_4_SCV_2_e: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="variables_set" inline="false">
                      <title name="VAR">length</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">400</title>
                        </block>
                      </value>
                      <next>
                        <block type="variables_set" inline="false">
                          <title name="VAR">sides</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">10</title>
                            </block>
                          </value>
                          <next>
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="variables_get">
                                  <title name="VAR">sides</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="draw_colour" inline="true" id="draw-color">
                                  <value name="COLOUR">
                                    <block type="colour_picker">
                                      <title name="COLOUR">#ff0000</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="controls_repeat_ext" inline="true">
                                      <value name="TIMES">
                                        <block type="variables_get">
                                          <title name="VAR">sides</title>
                                        </block>
                                      </value>
                                      <statement name="DO">
                                        <block type="controls_repeat_ext" inline="true">
                                          <value name="TIMES">
                                            <block type="variables_get">
                                              <title name="VAR">sides</title>
                                            </block>
                                          </value>
                                          <statement name="DO">
                                            <block type="draw_move" inline="true">
                                              <title name="DIR">moveForward</title>
                                              <value name="VALUE">
                                                <block type="math_arithmetic" inline="true">
                                                  <title name="OP">DIVIDE</title>
                                                  <value name="A">
                                                    <block type="variables_get">
                                                      <title name="VAR">length</title>
                                                    </block>
                                                  </value>
                                                  <value name="B">
                                                    <block type="variables_get">
                                                      <title name="VAR">sides</title>
                                                    </block>
                                                  </value>
                                                </block>
                                              </value>
                                              <next>
                                                <block type="draw_turn" inline="true">
                                                  <title name="DIR">turnLeft</title>
                                                  <value name="VALUE">
                                                    <block type="math_arithmetic" inline="true">
                                                      <title name="OP">DIVIDE</title>
                                                      <value name="A">
                                                        <block type="math_number">
                                                          <title name="NUM">360</title>
                                                        </block>
                                                      </value>
                                                      <value name="B">
                                                        <block type="variables_get">
                                                          <title name="VAR">sides</title>
                                                        </block>
                                                      </value>
                                                    </block>
                                                  </value>
                                                </block>
                                              </next>
                                            </block>
                                          </statement>
                                          <next>
                                            <block type="draw_turn" inline="true">
                                              <title name="DIR">turnRight</title>
                                              <value name="VALUE">
                                                <block type="math_arithmetic" inline="true">
                                                  <title name="OP">DIVIDE</title>
                                                  <value name="A">
                                                    <block type="math_number">
                                                      <title name="NUM">360</title>
                                                    </block>
                                                  </value>
                                                  <value name="B">
                                                    <block type="variables_get">
                                                      <title name="VAR">sides</title>
                                                    </block>
                                                  </value>
                                                </block>
                                              </value>
                                            </block>
                                          </next>
                                        </block>
                                      </statement>
                                      <next>
                                        <block type="jump" inline="true">
                                          <title name="DIR">jumpForward</title>
                                          <value name="VALUE">
                                            <block type="math_arithmetic" inline="true">
                                              <title name="OP">DIVIDE</title>
                                              <value name="A">
                                                <block type="variables_get">
                                                  <title name="VAR">length</title>
                                                </block>
                                              </value>
                                              <value name="B">
                                                <block type="variables_get">
                                                  <title name="VAR">sides</title>
                                                </block>
                                              </value>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="draw_turn" inline="true">
                                              <title name="DIR">turnRight</title>
                                              <value name="VALUE">
                                                <block type="math_arithmetic" inline="true">
                                                  <title name="OP">DIVIDE</title>
                                                  <value name="A">
                                                    <block type="math_number">
                                                      <title name="NUM">360</title>
                                                    </block>
                                                  </value>
                                                  <value name="B">
                                                    <block type="variables_get">
                                                      <title name="VAR">sides</title>
                                                    </block>
                                                  </value>
                                                </block>
                                              </value>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCV 3:
        Course_4_SCV_3_a: 'Use your math block to add and subtract points to the `points`
          variable when sprites collide. '
        Course_4_SCV_3_b: You can change the parameter for how far you move your sprite
          each time one of the arrow keys is pressed.
        Course_4_SCV_3_c: |-
          **Solution:**

          <xml><block type="when_run"><next><block type="variables_set" inline="false"><title name="VAR">points</title><value name="VALUE"><block type="math_number"><title name="NUM">0</title></block></value></block></next></block><block type="studio_whenArrow"><title name="VALUE">up</title><next><block type="studio_moveDistanceParams" inline="true"><title name="SPRITE">0</title><title name="DIR">1</title><value name="DISTANCE"><block type="math_number"><title name="NUM">25</title></block></value></block></next></block><block type="studio_whenArrow"><title name="VALUE">down</title><next><block type="studio_moveDistanceParams" inline="true"><title name="SPRITE">0</title><title name="DIR">4</title><value name="DISTANCE"><block type="math_number"><title name="NUM">25</title></block></value></block></next></block><block type="studio_whenArrow"><title name="VALUE">left</title><next><block type="studio_moveDistanceParams" inline="true"><title name="SPRITE">0</title><title name="DIR">8</title><value name="DISTANCE"><block type="math_number"><title name="NUM">25</title></block></value></block></next></block><block type="studio_whenArrow"><title name="VALUE">right</title><next><block type="studio_moveDistanceParams" inline="true"><title name="SPRITE">0</title><title name="DIR">2</title><value name="DISTANCE"><block type="math_number"><title name="NUM">25</title></block></value></block></next></block><block type="studio_whenSpriteCollided"><title name="SPRITE1">0</title><title name="SPRITE2">1</title><next><block type="variables_set" inline="false"><title name="VAR">points</title><value name="VALUE"><block type="math_arithmetic" inline="true"><title name="OP">ADD</title><value name="A"><block type="variables_get"><title name="VAR">points</title></block></value><value name="B"><block type="math_number"><title name="NUM">2</title></block></value></block></value></block></next></block><block type="studio_whenSpriteCollided"><title name="SPRITE1">0</title><title name="SPRITE2">2</title><next><block type="variables_set" inline="false"><title name="VAR">points</title><value name="VALUE"><block type="math_arithmetic" inline="true"><title name="OP">ADD</title><value name="A"><block type="variables_get"><title name="VAR">points</title></block></value><value name="B"><block type="math_number"><title name="NUM">3</title></block></value></block></value></block></next></block>
          <block type="studio_whenSpriteCollided">
              <title name="SPRITE1">1</title>
              <title name="SPRITE2">2</title>
              <next>
                <block type="variables_set" inline="false">
                  <title name="VAR">points</title>
                  <value name="VALUE">
                    <block type="math_arithmetic" inline="true">
                      <title name="OP">MINUS</title>
                      <value name="A">
                        <block type="variables_get">
                          <title name="VAR">points</title>
                        </block>
                      </value>
                      <value name="B">
                        <block type="math_number">
                          <title name="NUM">1</title>
                        </block>
                      </value>
                    </block>
                  </value>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCV 4:
        Course_4_SCV_4_a: Three variables will help you out here.  One for units of
          nectar, one for units of honey, and one for how far the bee should move
          each iteration.
        Course_4_SCV_4_b: 'It will be very helpful to use three loops inside of your
          main loop.  One for moving forward, one for collecting nectar and one for
          making honey. '
        Course_4_SCV_4_c: "Take a look at this option for movement:  \n\n![](https://images.code.org/78f8fb83da67c5b80126555a362b8b20-image-1469641782259.png)"
        Course_4_SCV_4_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="variables_set" inline="false">
                  <title name="VAR">honey</title>
                  <value name="VALUE">
                    <block type="math_number">
                      <title name="NUM">4</title>
                    </block>
                  </value>
                  <next>
                    <block type="variables_set" inline="false">
                      <title name="VAR">nectar</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">6</title>
                        </block>
                      </value>
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="math_number">
                              <title name="NUM">5</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">MINUS</title>
                                  <value name="A">
                                    <block type="variables_get">
                                      <title name="VAR">nectar</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="math_number">
                                      <title name="NUM">1</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="maze_moveForward"/>
                              </statement>
                              <next>
                                <block type="controls_repeat_ext" inline="true">
                                  <value name="TIMES">
                                    <block type="variables_get">
                                      <title name="VAR">nectar</title>
                                    </block>
                                  </value>
                                  <statement name="DO">
                                    <block type="maze_nectar"/>
                                  </statement>
                                  <next>
                                    <block type="maze_moveForward">
                                      <next>
                                        <block type="controls_repeat_ext" inline="true">
                                          <value name="TIMES">
                                            <block type="variables_get">
                                              <title name="VAR">honey</title>
                                            </block>
                                          </value>
                                          <statement name="DO">
                                            <block type="maze_honey"/>
                                          </statement>
                                          <next>
                                            <block type="maze_moveForward">
                                              <next>
                                                <block type="maze_turn">
                                                  <title name="DIR">turnRight</title>
                                                  <next>
                                                    <block type="variables_set" inline="false">
                                                      <title name="VAR">honey</title>
                                                      <value name="VALUE">
                                                        <block type="math_arithmetic" inline="true">
                                                          <title name="OP">ADD</title>
                                                          <value name="A">
                                                            <block type="variables_get">
                                                              <title name="VAR">honey</title>
                                                            </block>
                                                          </value>
                                                          <value name="B">
                                                            <block type="math_number">
                                                              <title name="NUM">1</title>
                                                            </block>
                                                          </value>
                                                        </block>
                                                      </value>
                                                      <next>
                                                        <block type="variables_set" inline="false">
                                                          <title name="VAR">nectar</title>
                                                          <value name="VALUE">
                                                            <block type="math_arithmetic" inline="true">
                                                              <title name="OP">MINUS</title>
                                                              <value name="A">
                                                                <block type="variables_get">
                                                                  <title name="VAR">nectar</title>
                                                                </block>
                                                              </value>
                                                              <value name="B">
                                                                <block type="math_number">
                                                                  <title name="NUM">1</title>
                                                                </block>
                                                              </value>
                                                            </block>
                                                          </value>
                                                        </block>
                                                      </next>
                                                    </block>
                                                  </next>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </statement>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCV 5:
        Course_4_SCV_5_a: |-
          Take a look at this option for movement:

          ![](https://images.code.org/7f6f09c55cf9552a91fc1d33f44a7315-image-1469641639330.png)
        Course_4_SCV_5_b: Each time through the loop, the flowers have two less nectar
          and the bee needs to make one more honey.
        Course_4_SCV_5_c: Notice that at the beginning of the outside loop, the bee
          moves as many times as there is nectar in the next flower.
        Course_4_SCV_5_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="variables_set" inline="false">
                  <title name="VAR">honey</title>
                  <value name="VALUE">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="variables_set" inline="false">
                      <title name="VAR">nectar</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">5</title>
                        </block>
                      </value>
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="math_number">
                              <title name="NUM">3</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="variables_get">
                                  <title name="VAR">nectar</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="maze_move">
                                  <title name="DIR">moveForward</title>
                                </block>
                              </statement>
                              <next>
                                <block type="maze_turn">
                                  <title name="DIR">turnRight</title>
                                  <next>
                                    <block type="controls_repeat_ext" inline="true">
                                      <value name="TIMES">
                                        <block type="variables_get">
                                          <title name="VAR">nectar</title>
                                        </block>
                                      </value>
                                      <statement name="DO">
                                        <block type="maze_nectar"/>
                                      </statement>
                                      <next>
                                        <block type="maze_move">
                                          <title name="DIR">moveForward</title>
                                          <next>
                                            <block type="controls_repeat_ext" inline="true">
                                              <value name="TIMES">
                                                <block type="variables_get">
                                                  <title name="VAR">honey</title>
                                                </block>
                                              </value>
                                              <statement name="DO">
                                                <block type="maze_honey"/>
                                              </statement>
                                              <next>
                                                <block type="variables_set" inline="false">
                                                  <title name="VAR">honey</title>
                                                  <value name="VALUE">
                                                    <block type="math_arithmetic" inline="true">
                      <title name="OP">ADD</title>
                      <value name="A">
                        <block type="variables_get">
                          <title name="VAR">honey</title>
                        </block>
                      </value>
                      <value name="B">
                        <block type="math_number">
                          <title name="NUM">1</title>
                        </block>
                      </value>
                    </block>
                                                  </value>
                                                  <next>
                                                    <block type="variables_set" inline="false">
                                                      <title name="VAR">nectar</title>
                                                      <value name="VALUE">
                                                        <block type="math_arithmetic" inline="true">
                      <title name="OP">MINUS</title>
                      <value name="A">
                        <block type="variables_get">
                          <title name="VAR">nectar</title>
                        </block>
                      </value>
                      <value name="B">
                        <block type="math_number">
                          <title name="NUM">2</title>
                        </block>
                      </value>
                    </block>
                                                      </value>
                                                    </block>
                                                  </next>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </statement>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCV 6:
        Course_4_SCV_6_a: |-
          Take a look at what a single completed shape looks like

          ![](https://images.code.org/9e30d3a87186cefe730984feee195806-image-1469642178866.png)
        Course_4_SCV_6_b: 'You will benefit from creating 8 variables: red1, green1,
          blue1, red2, green2, blue2, length, and sides.'
        Course_4_SCV_6_c: Each of the shape's 5 sides is broken up into pieces of
          `length`/`sides` where the zig is teal (rgb = 0,175,200) and the zag is
          purple (rgb = 100, 50, 150).
        Course_4_SCV_6_d: 'To zig, turn left by `360`/`sides`.  To zag, turn right
          by `360`/`sides`. '
        Course_4_SCV_6_e: 'The rest of the program is very standard for making a full
          360 degree rotation from a shape, except that we are overlapping the shapes
          by half, so we have to turn right by `180`/`sides`, which means that we
          need twice as many of them as usual (`sides`\*`2` repetitions). '
        Course_4_SCV_6_f: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="variables_set" inline="false">
                      <title name="VAR">red1</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">0</title>
                        </block>
                      </value>
                      <next>
                        <block type="variables_set" inline="false">
                          <title name="VAR">green1</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">175</title>
                            </block>
                          </value>
                          <next>
                            <block type="variables_set" inline="false">
                              <title name="VAR">blue1</title>
                              <value name="VALUE">
                                <block type="math_number">
                                  <title name="NUM">200</title>
                                </block>
                              </value>
                              <next>
                                <block type="variables_set" inline="false">
                                  <title name="VAR">red2</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">100</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="variables_set" inline="false">
                                      <title name="VAR">green2</title>
                                      <value name="VALUE">
                                        <block type="math_number">
                                          <title name="NUM">50</title>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="variables_set" inline="false">
                                          <title name="VAR">blue2</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">150</title>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="variables_set" inline="false">
                                              <title name="VAR">length</title>
                                              <value name="VALUE">
                                                <block type="math_number">
                                                  <title name="NUM">70</title>
                                                </block>
                                              </value>
                                              <next>
                                                <block type="variables_set" inline="false">
                                                  <title name="VAR">sides</title>
                                                  <value name="VALUE">
                                                    <block type="math_number">
                                                      <title name="NUM">5</title>
                                                    </block>
                                                  </value>
                                                  <next>
                                                    <block type="controls_repeat_ext" inline="true">
                                                      <value name="TIMES">
                                                        <block type="math_arithmetic" inline="true">
                                                          <title name="OP">MULTIPLY</title>
                                                          <value name="A">
                                                            <block type="math_number">
                                                              <title name="NUM">2</title>
                                                            </block>
                                                          </value>
                                                          <value name="B">
                                                            <block type="variables_get">
                                                              <title name="VAR">sides</title>
                                                            </block>
                                                          </value>
                                                        </block>
                                                      </value>
                                                      <statement name="DO">
                                                        <block type="controls_repeat_ext" inline="true">
                                                          <value name="TIMES">
                                                            <block type="variables_get">
                                                              <title name="VAR">sides</title>
                                                            </block>
                                                          </value>
                                                          <statement name="DO">
                                                            <block type="controls_repeat_ext" inline="true">
                                                              <value name="TIMES">
                                                                <block type="variables_get">
                                                                  <title name="VAR">sides</title>
                                                                </block>
                                                              </value>
                                                              <statement name="DO">
                                                                <block type="draw_colour" inline="true" id="draw-color">
                                                                  <value name="COLOUR">
                                                                    <block type="colour_rgb" inline="false">
                                                                      <value name="RED">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">red1</title>
                                                                      </block>
                                                                      </value>
                                                                      <value name="GREEN">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">green1</title>
                                                                      </block>
                                                                      </value>
                                                                      <value name="BLUE">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">blue1</title>
                                                                      </block>
                                                                      </value>
                                                                    </block>
                                                                  </value>
                                                                  <next>
                                                                    <block type="draw_move" inline="true">
                                                                      <title name="DIR">moveForward</title>
                                                                      <value name="VALUE">
                                                                      <block type="math_arithmetic" inline="true">
                                                                      <title name="OP">DIVIDE</title>
                                                                      <value name="A">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">length</title>
                                                                      </block>
                                                                      </value>
                                                                      <value name="B">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">sides</title>
                                                                      </block>
                                                                      </value>
                                                                      </block>
                                                                      </value>
                                                                      <next>
                                                                      <block type="draw_turn" inline="true">
                                                                      <title name="DIR">turnLeft</title>
                                                                      <value name="VALUE">
                                                                      <block type="math_arithmetic" inline="true">
                                                                      <title name="OP">DIVIDE</title>
                                                                      <value name="A">
                                                                      <block type="math_number">
                                                                      <title name="NUM">360</title>
                                                                      </block>
                                                                      </value>
                                                                      <value name="B">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">sides</title>
                                                                      </block>
                                                                      </value>
                                                                      </block>
                                                                      </value>
                                                                      <next>
                                                                      <block type="draw_colour" inline="true" id="draw-color">
                                                                      <value name="COLOUR">
                                                                      <block type="colour_rgb" inline="false">
                                                                      <value name="RED">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">red2</title>
                                                                      </block>
                                                                      </value>
                                                                      <value name="GREEN">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">green2</title>
                                                                      </block>
                                                                      </value>
                                                                      <value name="BLUE">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">blue2</title>
                                                                      </block>
                                                                      </value>
                                                                      </block>
                                                                      </value>
                                                                      <next>
                                                                      <block type="draw_move" inline="true">
                                                                      <title name="DIR">moveForward</title>
                                                                      <value name="VALUE">
                                                                      <block type="math_arithmetic" inline="true">
                                                                      <title name="OP">DIVIDE</title>
                                                                      <value name="A">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">length</title>
                                                                      </block>
                                                                      </value>
                                                                      <value name="B">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">sides</title>
                                                                      </block>
                                                                      </value>
                                                                      </block>
                                                                      </value>
                                                                      <next>
                                                                      <block type="draw_turn" inline="true">
                                                                      <title name="DIR">turnRight</title>
                                                                      <value name="VALUE">
                                                                      <block type="math_arithmetic" inline="true">
                                                                      <title name="OP">DIVIDE</title>
                                                                      <value name="A">
                                                                      <block type="math_number">
                                                                      <title name="NUM">360</title>
                                                                      </block>
                                                                      </value>
                                                                      <value name="B">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">sides</title>
                                                                      </block>
                                                                      </value>
                                                                      </block>
                                                                      </value>
                                                                      </block>
                                                                      </next>
                                                                      </block>
                                                                      </next>
                                                                      </block>
                                                                      </next>
                                                                      </block>
                                                                      </next>
                                                                    </block>
                                                                  </next>
                                                                </block>
                                                              </statement>
                                                              <next>
                                                                <block type="draw_turn" inline="true">
                                                                  <title name="DIR">turnRight</title>
                                                                  <value name="VALUE">
                                                                    <block type="math_arithmetic" inline="true">
                                                                      <title name="OP">DIVIDE</title>
                                                                      <value name="A">
                                                                      <block type="math_number">
                                                                      <title name="NUM">360</title>
                                                                      </block>
                                                                      </value>
                                                                      <value name="B">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">sides</title>
                                                                      </block>
                                                                      </value>
                                                                    </block>
                                                                  </value>
                                                                </block>
                                                              </next>
                                                            </block>
                                                          </statement>
                                                          <next>
                                                            <block type="draw_turn" inline="true">
                                                              <title name="DIR">turnRight</title>
                                                              <value name="VALUE">
                                                                <block type="math_arithmetic" inline="true">
                                                                  <title name="OP">DIVIDE</title>
                                                                  <value name="A">
                                                                    <block type="math_number">
                                                                      <title name="NUM">180</title>
                                                                    </block>
                                                                  </value>
                                                                  <value name="B">
                                                                    <block type="variables_get">
                                                                      <title name="VAR">sides</title>
                                                                    </block>
                                                                  </value>
                                                                </block>
                                                              </value>
                                                            </block>
                                                          </next>
                                                        </block>
                                                      </statement>
                                                    </block>
                                                  </next>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      CourseD_Dance_Party_01:
        validation: |-
          **จะผ่านเลเวลนี้ไปได้อย่างไร?**

          -   ต้องมีนักเต้นอยู่บนหน้าจอ

          _เลเวลนี้จะสิ้นสุดลงหลังผ่านไป 4 ห้องเพลง_
        challenges: "**ความท้าทายใหม่ๆ** \n\n-   เลือกเพลงอื่นที่จะเปิดฟัง\n-   เปลี่ยนชื่อนักเต้นของคุณ"
      CourseD_Dance_Party_02:
        validation: |-
          **จะผ่านเลเวลนี้ไปได้อย่างไร?**

          -   นักเต้นต้องสลับไปเต้นท่าใหม่หลังผ่านไป 4 ห้องดนตรี

          _เลเวลจะสิ้นสุดลงหลังผ่านไป 7 ห้องดนตรี_
      CourseD_Dance_Party_03:
        validation: |-
          **จะผ่านเลเวลนี้ไปได้อย่างไร?**

          -   หลังผ่านไป 6 ห้องดนตรี นักเต้นต้องเต้นท่าอื่นที่ต่างจากท่าที่ใช้หลังผ่านไป 4 ห้องดนตรี

          _เลเวลจะสิ้นสุดลงหลังผ่านไป 11 ห้องดนตรี_
      CourseD_Dance_Party_04:
        validation: |-
          **จะผ่านเลเวลนี้ไปได้อย่างไร?**

          -   คุณจำเป็นต้องปรับเปลี่ยนแบ็กกราวนด์เอฟเฟกต์บ้างก่อนจะถึงห้องดนตรีที่ 7 ของเพลง

          \_เลเวลนี้จะสิ้นสุดลงหลังผ่านไป 9 ห้องดนตรี
        challenges: "**ความท้าทายที่คุณอาจสนใจ** \n\nเปลี่ยนแบ็กกราวนด์เอฟเฟกต์ตรงท่อนอื่นของเพลงได้ด้วยการต่อบล็อกใหม่เข้ากับเหตุการณ์
          <xml><block type=\"Dancelab_atTimestamp\"><title name=\"TIMESTAMP\">???</title><title
          name=\"UNIT\">\"measures\"</title></block></xml>"
      CourseD_Dance_Party_06:
        validation: |-
          **จะผ่านเลเวลนี้ไปได้อย่างไร?**

          -   คุณต้องมีนักเต้นอย่างน้อยสองคน

          \_เลเวลนี้จะสิ้นสุดลงหลังผ่านไป 5 ห้องดนตรี
        challenges: "**ความท้าทายที่คุณอาจสนใจ** \n\n-   เพิ่มนักเต้นคนที่สาม (หรือหลายๆ
          คนเท่าที่คุณต้องการ!)\n-   ทำให้นักเต้นทุกคนเต้นด้วยท่วงท่าที่แตกกันไปเมื่อมาถึงเพลงแต่ละท่อน"
      CourseD_Dance_Party_08:
        validation: |-
          **จะผ่านเลเวลนี้ไปได้อย่างไร?**

          -   นักเต้นสองคนต้องมีขนาดอื่นที่ไม่ใช่ 100

          _เลเวลนี้จะสิ้นสุดลงหลังผ่านไป 5 ห้องเพลง_
        challenges: "**ความท้าทายที่คุณอาจสนใจ** \n\n-   ทดลองโดยเปลี่ยนคุณสมบัติอื่น
          (ความกว้าง ความสูง การหมุน เป็นต้น)"
      CourseD_Dance_Party_09:
        validation: |-
          **จะผ่านเลเวลนี้ไปได้อย่างไร?**

          -   เปลี่ยนระดับอ่อนสีของนักเต้นอย่างน้อยหนึ่งคน

          _เลเวลนี้จะสิ้นสุดลงหลังผ่านไป 7 ห้องเพลง_
      CourseD_Dance_Party_10:
        validation: |-
          **จะผ่านเลเวลนี้ไปได้อย่างไร?**

          -   ต้องเปลี่ยนคุณสมบัติของนักเต้นสองคนขึ้นไป

          _เลเวลนี้จะสิ้นสุดลงหลังผ่านไป 7 ห้องดนตรี_
      CourseD_Dance_Party_11:
        validation: |-
          **จะผ่านเลเวลนี้ไปได้อย่างไร?**

          -   อย่าลืมใช้จินตนาการ!

          _เลเวลนี้จะสิ้นสุดลงหลังผ่านไป 7 ห้องดนตรี_
      CourseD_Dance_Party_11_5:
        validation: |-
          **จะผ่านเลเวลนี้ไปได้อย่างไร?**

          -   อย่าลืมใช้จินตนาการ!

          _เลเวลนี้จะสิ้นสุดลงหลังผ่านไป 7 ห้องดนตรี_
      CourseD_Dance_Party_11b:
        validation: |-
          **จะผ่านเลเวลนี้ไปได้อย่างไร?**

          -   ใช้บล็อก `เมื่อลูกศรซ้ายถูกกด` เพื่อทำให้หุ่นยนต์เต้นเมื่อคุณกดปุ่มดังกล่าว

          _เลเวลนี้จะสิ้นสุดลงหลังผ่านไป 7 ห้องดนตรี_
      CourseE_HOC 2018 Level_10:
        voyage_aquatic_10a: เห็น **ตะเกียงใต้ทะเล** ![](https://images.code.org/471b33234222ddffb463aeb65de6b371-image-1539183353423.net-resizeimage.png)?
          หรือไม่ คุณจะใช้มันเป็นเงื่อนไขเพื่อผ่านสิ่งก่อสร้างใต้สมุทรไปได้อย่างไร
      CourseE_HOC 2018 Level_7a:
        aquatic7: คุณสามารถใช้บล็อก `ถ้ามีเส้นทาง (if path)` เพื่อช่วยคุณให้สามารถหันไปทางขวาได้
      CourseE_HOC 2018 Level_9b:
        voyage_aquatic_9a: เห็นบล็อกปะการังสีแดงและสีฟ้าไหม? คุณสามารถใช้เป็นเครื่องนำทางเพื่อหันขวาและหันซ้ายผ่านแนวปะการังไปได้
      Dance_2019_01:
        validation: |-
          **จะผ่านเลเวลนี้ไปได้อย่างไร?**

          -   ต้องมีนักเต้นอยู่บนหน้าจอ

          _เลเวลนี้จะสิ้นสุดลงหลังผ่านไป 4 ห้องเพลง_
        challenges: |-
          **ตัวเลือกความท้าทาย**

          -   เลือกเล่นเพลงที่ต่างออกไป
          -   เคลื่อนย้ายนักเต้นของคุณไปยังตำแหน่งใหม่
          -   สร้างนักเต้นมากกว่าหนึ่งคน
      Dance_2019_02:
        validation: |-
          **จะผ่านเลเวลนี้ไปได้อย่างไร?**

          -   นักเต้นจะต้องขยับท่วงท่า
          -   คุณต้องกดปุ่มลูกศร

          \_เลเวลนี้จะจบลงหลังจากผ่านไป 4 ห้องดนตรี
        challenges: |-
          **ตัวเลือกความท้าทาย**

          ใช้บล็อก <xml><block type="Dancelab_whenKey"><title name="KEY"></title></block></xml> มากกว่าหนึ่งบล็อก
      Dance_2019_03:
        validation: |-
          **จะผ่านเลเวลนี้ไปได้อย่างไร?**

          -   นักเต้นทั้งสองคนจะต้องขยับท่วงท่า
          -   คุณต้องกดปุ่มลูกศร

          _เลเวลนี้จะจบลงหลังจากผ่านไป 4 ห้องดนตรี_
        challenges: |-
          **ตัวเลือกความท้าทาย**

          -   ทำให้นักเต้นตอบสนองต่อลูกศรปุ่มซ้ายและปุ่มขวา
      Dance_2019_04:
        validation: |-
          **จะผ่านเลเวลนี้ไปได้อย่างไร?**

          -   นักเต้นต้องสลับไปเต้นท่าใหม่หลังผ่านไป 4 ห้องดนตรี

          _เลเวลจะสิ้นสุดลงหลังผ่านไป 7 ห้องดนตรี_
      Dance_2019_05:
        validation: |-
          **จะผ่านเลเวลนี้ไปได้อย่างไร?**

          -   หลังผ่านไป 6 ห้องดนตรี นักเต้นต้องเต้นท่าอื่นที่ต่างจากท่าที่ใช้หลังผ่านไป 4 ห้องดนตรี

          _เลเวลจะสิ้นสุดลงหลังผ่านไป 11 ห้องดนตรี_
        challenges: |-
          **ตัวเลือกความท้าทาย**

          -   เปลี่ยนพื้นหลังเมื่อใดก็ตามที่นักเต้นเปลี่ยนท่า
      Dance_2019_06:
        validation: |-
          **จะผ่านเลเวลนี้ไปได้อย่างไร?**

          -   สร้างนักเต้นนำหนึ่งคนและนักเต้นประกอบอีกหนึ่งกลุ่มภายในห้องดนตรี 4 ห้องแรกของเพลง

          \_เลเวลนี้จะจบลงหลังจากผ่านไป 7 ห้องดนตรี
        challenges: |-
          **ตัวเลือกความท้าทาย**

          -   สร้างนักเต้นประกอบหลายให้มีหลายกลุ่ม
      Dance_2019_07:
        validation: |-
          **จะผ่านเลเวลนี้ไปได้อย่างไร?**

          -   เปลี่ยนขนาดนักเต้นอย่างน้อยหนึ่งคนหลังเสียงดนตรีเริ่มขึ้น

          \_เลเวลนี้จะจบลงหลังจากผ่านไป 6 ห้องดนตรี
        challenges: |-
          **ตัวเลือกความท้าทาย**

          -   ทดลองเปลี่ยนคุณสมบัติอื่นๆ เช่น ความกว้าง หรือการหมุน
      Dance_2019_08:
        validation: |-
          **จะผ่านเลเวลนี้ไปได้อย่างไร?**

          -   เปลี่ยนระดับอ่อนสีของนักเต้นอย่างน้อยหนึ่งคน

          \_เลเวลนี้จะจบลงหลังจากผ่านไป 6 ห้องดนตรี
        tint_hint: สังเกตหรือไม่ว่านักเต้นไม่เปลี่ยนสีไปตามที่คุณเลือก? ซึ่งเป็นเพราะ
          **ระดับอ่อนสี** ผสมสีที่คุณเลือกเข้ากับสีของนักเต้น
      Dance_2019_09:
        validation: |-
          **จะผ่านเลเวลนี้ไปได้อย่างไร?**

          -   เพียงกดปุ่ม "สำเร็จ"!
        repeat_every_ideas: |-
          **ต้องการไอเดียหรือเปล่า?**

          -   เปลี่ยนขนาดของนักเต้นซ้ำหลายครัั้งเพื่อทำให้เติบโตขึ้น
          -   เปลี่ยนการหมุนของนักเต้นซ้ำหลายครั้งเพื่อทำให้เกิดการหมุน
          -   เปลี่ยนตำแหน่งแนวตั้งหรือแนวนอนของนักเต้นซ้ำหลายครั้งเพื่อทำให้เคลื่อนที่ไปบนหน้าจอ

          _คุณสามารถใช้จำนวนติดลบเพื่อสร้างเอฟเฟกต์ตรงกันข้ามได้อีกด้วย!_
        next_previous: |-
          **ตัวเลือกความท้าทาย**

          -   คุณสามารถใช้บล็อกเหตุการณ์ใหม่นี้เพื่อเคลื่อนดูรายการท่าเต้นตามการกำหนดค่าของท่าเต้นไปยัง `(สุ่ม)` `(ถัดไป)` หรือ `(ก่อนหน้า)`
              <xml><block type="Dancelab_changeMoveEachLR">
              <title name="GROUP">???</title>
              <title name="MOVE">"rand"</title>
              <title name="DIR">-1</title>
              </block></xml>
      Dance_Party_01:
        validation: |-
          **จะผ่านเลเวลนี้ไปได้อย่างไร?**

          -   ต้องมีนักเต้นอยู่บนหน้าจอ

          _เลเวลนี้จะสิ้นสุดลงหลังผ่านไป 4 ห้องเพลง_
        challenges: "**ความท้าทายใหม่ๆ** \n\n-   เลือกเพลงอื่นที่จะเปิดฟัง\n-   เปลี่ยนชื่อนักเต้นของคุณ"
      Dance_Party_02:
        validation: |-
          **จะผ่านเลเวลนี้ไปได้อย่างไร?**

          -   นักเต้นต้องสลับไปเต้นท่าใหม่หลังผ่านไป 4 ห้องดนตรี

          _เลเวลจะสิ้นสุดลงหลังผ่านไป 7 ห้องดนตรี_
      Dance_Party_03:
        validation: |-
          **จะผ่านเลเวลนี้ไปได้อย่างไร?**

          -   หลังผ่านไป 6 ห้องดนตรี นักเต้นต้องเต้นท่าอื่นที่ต่างจากท่าที่ใช้หลังผ่านไป 4 ห้องดนตรี

          _เลเวลจะสิ้นสุดลงหลังผ่านไป 11 ห้องดนตรี_
      Dance_Party_04:
        validation: |-
          **จะผ่านเลเวลนี้ไปได้อย่างไร?**

          -   คุณจำเป็นต้องปรับเปลี่ยนแบ็กกราวนด์เอฟเฟกต์บ้างก่อนจะถึงห้องดนตรีที่ 7 ของเพลง

          \_เลเวลนี้จะสิ้นสุดลงหลังผ่านไป 9 ห้องดนตรี
        challenges: "**ความท้าทายที่คุณอาจสนใจ** \n\nเปลี่ยนแบ็กกราวนด์เอฟเฟกต์ตรงท่อนอื่นของเพลงได้ด้วยการต่อบล็อกใหม่เข้ากับเหตุการณ์
          <xml><block type=\"Dancelab_atTimestamp\"><title name=\"TIMESTAMP\">???</title><title
          name=\"UNIT\">\"measures\"</title></block></xml>"
      Dance_Party_05:
        validation: |-
          **จะผ่านเลเวลนี้ไปได้อย่างไร?**

          -   นักเต้นของคุณต้องเต้นด้วยท่าต่างๆ อย่างน้อย 4 ท่าในหนึ่งรอบก่อนเลเวลนี้จะสิ้นสุดลง

          _เลเวลนี้สิ้นสุดลงหลัง 12 ห้องดนตรี_
      Dance_Party_06:
        validation: |-
          **จะผ่านเลเวลนี้ไปได้อย่างไร?**

          -   คุณต้องมีนักเต้นอย่างน้อยสองคน

          \_เลเวลนี้จะสิ้นสุดลงหลังผ่านไป 5 ห้องดนตรี
        challenges: "**ความท้าทายที่คุณอาจสนใจ** \n\n-   เพิ่มนักเต้นคนที่สาม (หรือหลายๆ
          คนเท่าที่คุณต้องการ!)\n-   ทำให้นักเต้นทุกคนเต้นด้วยท่วงท่าที่แตกกันไปเมื่อมาถึงเพลงแต่ละท่อน"
      Dance_Party_08:
        validation: |-
          **จะผ่านเลเวลนี้ไปได้อย่างไร?**

          -   นักเต้นสองคนต้องมีขนาดอื่นที่ไม่ใช่ 100

          _เลเวลนี้จะสิ้นสุดลงหลังผ่านไป 5 ห้องเพลง_
        challenges: "**ความท้าทายที่คุณอาจสนใจ** \n\n-   ทดลองโดยเปลี่ยนคุณสมบัติอื่น
          (ความกว้าง ความสูง การหมุน เป็นต้น)"
      Dance_Party_09:
        validation: |-
          **จะผ่านเลเวลนี้ไปได้อย่างไร?**

          -   เปลี่ยนระดับอ่อนสีของนักเต้นอย่างน้อยหนึ่งคน

          _เลเวลนี้จะสิ้นสุดลงหลังผ่านไป 7 ห้องเพลง_
      Dance_Party_10:
        validation: |-
          **จะผ่านเลเวลนี้ไปได้อย่างไร?**

          -   ต้องเปลี่ยนคุณสมบัติของนักเต้นสองคนขึ้นไป

          _เลเวลนี้จะสิ้นสุดลงหลังผ่านไป 7 ห้องดนตรี_
      Dance_Party_11:
        validation: |-
          **จะผ่านเลเวลนี้ไปได้อย่างไร?**

          -   อย่าลืมใช้จินตนาการ!

          _เลเวลนี้จะสิ้นสุดลงหลังผ่านไป 7 ห้องดนตรี_
      Dance_Party_11_5:
        validation: |-
          **จะผ่านเลเวลนี้ไปได้อย่างไร?**

          -   อย่าลืมใช้จินตนาการ!

          _เลเวลนี้จะสิ้นสุดลงหลังผ่านไป 7 ห้องดนตรี_
      Dance_Party_11b:
        validation: |-
          **จะผ่านเลเวลนี้ไปได้อย่างไร?**

          -   ใช้บล็อก `เมื่อลูกศรซ้ายถูกกด` เพื่อทำให้หุ่นยนต์เต้นเมื่อคุณกดปุ่มดังกล่าว

          _เลเวลนี้จะสิ้นสุดลงหลังผ่านไป 7 ห้องดนตรี_
      Dance_Party_extras_alternate_2019:
        alternate: บล็อกสำรองอยู่ในหมวดหมู่ “นักเต้น”
      Function intro Ryan:
        Function_intro_Ryan_b: ถ้าคุณเรียกใช้งานฟังก์ชั่นอย่างถูกต้อง นี่คือเส้นทางที่คุณจะเดินทางไป
        Function_intro_Ryan_a: คุณสามารถเรียกฟังก์ชั่นได้หลายครั้งในโปรแกรมของคุณ
          ลองเรียกใช้งานดูสักสองครั้งเพื่อพิชิตปริศนาด่านนี้ให้สาเร็จ
      Function intro Ryan_2019:
        Function_intro_Ryan_b: ถ้าคุณเรียกใช้งานฟังก์ชั่นอย่างถูกต้อง นี่คือเส้นทางที่คุณจะเดินทางไป
        Function_intro_Ryan_a: คุณสามารถเรียกฟังก์ชั่นได้หลายครั้งในโปรแกรมของคุณ
          ลองเรียกใช้งานดูสักสองครั้งเพื่อพิชิตปริศนาด่านนี้ให้สาเร็จ
      HOC 2018 Level_10:
        voyage_aquatic_10a: เห็น **ตะเกียงใต้ทะเล** ![](https://images.code.org/471b33234222ddffb463aeb65de6b371-image-1539183353423.net-resizeimage.png)?
          หรือไม่ คุณจะใช้มันเป็นเงื่อนไขเพื่อผ่านสิ่งก่อสร้างใต้สมุทรไปได้อย่างไร
      HOC 2018 Level_7a:
        aquatic7: คุณสามารถใช้บล็อก `ถ้ามีเส้นทาง (if path)` เพื่อช่วยคุณให้สามารถหันไปทางขวาได้
      HOC 2018 Level_9b:
        voyage_aquatic_9a: เห็นบล็อกปะการังสีแดงและสีฟ้าไหม? คุณสามารถใช้เป็นเครื่องนำทางเพื่อหันขวาและหันซ้ายผ่านแนวปะการังไปได้
      MC_HOC_2017_01_RETRY:
        MC_HOC_2017_01_RETRY_a: ลากบล็อก `ไปข้างหน้า`หนึ่งบล็อกจากกล่องเครื่องมือไปยังพื้นที่ทำงานแล้ว
          ต่อเข้ากับข้างใต้ของบล็อก`เมื่อเรียกใช้งาน` ให้เรียบร้อย
        MC_HOC_2017_01_RETRY_b: อย่าลืมคลิกปุ่ม " เริ่ม " เพื่อเรียกใช้งานคำสั่งต่างๆ
          ให้เอเจนท์ทำ
        MC_HOC_2017_01_RETRY_c: เมื่อเอเจนท์ทำตามคำสั่งทั้งหมดแล้ว ก็ถึงเวลาที่คุณจะพาผู้เล่นเคลื่อนไหวไปที่ใดๆ
          โดยการใช้แป้นลูกศรได้!
      MC_HOC_2017_01_RETRY_2019:
        MC_HOC_2017_01_RETRY_a: ลากบล็อก `ไปข้างหน้า`หนึ่งบล็อกจากกล่องเครื่องมือไปยังพื้นที่ทำงานแล้ว
          ต่อเข้ากับข้างใต้ของบล็อก`เมื่อเรียกใช้งาน` ให้เรียบร้อย
        MC_HOC_2017_01_RETRY_b: อย่าลืมคลิกปุ่ม " เริ่ม " เพื่อเรียกใช้งานคำสั่งต่างๆ
          ให้เอเจนท์ทำ
        MC_HOC_2017_01_RETRY_c: เมื่อเอเจนท์ทำตามคำสั่งทั้งหมดแล้ว ก็ถึงเวลาที่คุณจะพาผู้เล่นเคลื่อนไหวไปที่ใดๆ
          โดยการใช้แป้นลูกศรได้!
      MC_HOC_2017_02_Cole:
        MC_HOC_2017_02_Cole_a: พาเอเจนท์เดินไปข้างหน้าสองช่องเพื่อให้ไปยืนบนแป้นกด  ซึ่งจะไปเปิดประตูให้กับผู้เล่นของคุณ
        MC_HOC_2017_02_Cole_b: |-
          กดปุ่ม  " เริ่ม "

          คุณสามารถเรียกใช้งานโค้ดของคุณแม้ว่าโค้ดนั้นจะยังทำงานไม่ถูกต้องก็ตาม  เริ่มหรือตั้งค่าโค้ดของคุณใหม่ซ้ำแล้วซ้ำเล่า จนกว่าคุณจะคิดออกว่าอะไรที่ทำให้โค้ดของคุณทำงานไม่ถูกต้อง
        MC_HOC_2017_02_Cole_c: เมื่อเอเจนท์เปิดประตูได้สำเร็จ คุณสามารถใช้แป้นลูกศรเพื่อพาผู้เล่นของคุณไปยังแผนที่ได้!
        MC_HOC_2017_02_Cole_d: ตรวจสอบให้แน่ใจว่าเอเจนท์ใช้เส้นทางที่กำหนดไว้ให้บนแผนที่!
      MC_HOC_2017_02_Cole_2019:
        MC_HOC_2017_02_Cole_a: พาเอเจนท์เดินไปข้างหน้าสองช่องเพื่อให้ไปยืนบนแป้นกด  ซึ่งจะไปเปิดประตูให้กับผู้เล่นของคุณ
        MC_HOC_2017_02_Cole_b: |-
          กดปุ่ม  " เริ่ม "

          คุณสามารถเรียกใช้งานโค้ดของคุณแม้ว่าโค้ดนั้นจะยังทำงานไม่ถูกต้องก็ตาม  เริ่มหรือตั้งค่าโค้ดของคุณใหม่ซ้ำแล้วซ้ำเล่า จนกว่าคุณจะคิดออกว่าอะไรที่ทำให้โค้ดของคุณทำงานไม่ถูกต้อง
        MC_HOC_2017_02_Cole_c: เมื่อเอเจนท์เปิดประตูได้สำเร็จ คุณสามารถใช้แป้นลูกศรเพื่อพาผู้เล่นของคุณไปยังแผนที่ได้!
        MC_HOC_2017_02_Cole_d: ตรวจสอบให้แน่ใจว่าเอเจนท์ใช้เส้นทางที่กำหนดไว้ให้บนแผนที่!
      MC_HOC_2017_03_Cole:
        MC_HOC_2017_03_Cole_a: เมื่อคุณพาเอเจนท์ให้ไปอยู่ที่แป้นกดแล้ว คุณสามารถใช้แป้นลูกศรของคุณเพื่อพาผู้เล่นให้เดินไปที่เข็มทิศได้!
        MC_HOC_2017_03_Cole_b: มีความรู้สึกไหมว่า โค้ดนั้นมีความยาวไม่น้อยทีเดียว?  ลองใช้ลูป`ทำซ้ำ`เข้ามาช่วยและดูว่าคุณสามารถคิดหาวิธีที่จะทำให้โค้ดสั้นลงได้ไหม!
      MC_HOC_2017_03_Cole_2019:
        MC_HOC_2017_03_Cole_a: เมื่อคุณพาเอเจนท์ให้ไปอยู่ที่แป้นกดแล้ว คุณสามารถใช้แป้นลูกศรของคุณเพื่อพาผู้เล่นให้เดินไปที่เข็มทิศได้!
        MC_HOC_2017_03_Cole_b: มีความรู้สึกไหมว่า โค้ดนั้นมีความยาวไม่น้อยทีเดียว?  ลองใช้ลูป`ทำซ้ำ`เข้ามาช่วยและดูว่าคุณสามารถคิดหาวิธีที่จะทำให้โค้ดสั้นลงได้ไหม!
      MC_HOC_2017_04POINT5_RYAN:
        MC_HOC_2017_04POINT5_RYAN_b: 'ใช้บล็อก `หันขวา` เพื่อเปลี่ยนทิศทางของเอเจนท์ '
        MC_HOC_2017_04POINT5_RYAN_a: เอเจนท์จำเป็นต้องไปถึงแค่เพียงแป้นกดอันแรกเท่านั้น
          เพื่อให้อเล็กซ์ หรือ สตีฟผ่านเข้าไปเอาขวานมาได้
      MC_HOC_2017_04POINT5_RYAN_2019:
        MC_HOC_2017_04POINT5_RYAN_b: 'ใช้บล็อก `หันขวา` เพื่อเปลี่ยนทิศทางของเอเจนท์ '
        MC_HOC_2017_04POINT5_RYAN_a: เอเจนท์จำเป็นต้องไปถึงแค่เพียงแป้นกดอันแรกเท่านั้น
          เพื่อให้อเล็กซ์ หรือ สตีฟผ่านเข้าไปเอาขวานมาได้
      MC_HOC_2017_04_Cole:
        MC_HOC_2017_04_Cole_a: เอเจนท์ต้องเดิน `ไปข้างหน้า` 7 ก้าว (ครั้ง) คุณจะใช้ลูป
          `ทำซ้ำ` มาช่วยให้มันเป็นจริงได้อย่างไร?
        MC_HOC_2017_04_Cole_c: |-
          กดปุ่ม  " เริ่ม "

          คุณสามารถเรียกใช้งานโค้ดของคุณแม้ว่าโค้ดนั้นจะยังทำงานไม่ถูกต้องก็ตาม  เริ่มหรือตั้งค่าโค้ดของคุณใหม่ซ้ำแล้วซ้ำเล่า จนกว่าคุณจะคิดออกว่าอะไรที่ทำให้โค้ดของคุณทำงานไม่ถูกต้อง
        MC_HOC_2017_04_Cole_b: เมื่อเอเจนท์มาอยู่บนแป้นกดเรียบร้อยแล้ว เอเจนท์ก็สามารถเปิดประตูให้กับผู้เล่นของคุณ
      MC_HOC_2017_04_Cole_2019:
        MC_HOC_2017_04_Cole_a: เอเจนท์ต้องเดิน `ไปข้างหน้า` 7 ก้าว (ครั้ง) คุณจะใช้ลูป
          `ทำซ้ำ` มาช่วยให้มันเป็นจริงได้อย่างไร?
        MC_HOC_2017_04_Cole_c: |-
          กดปุ่ม  " เริ่ม "

          คุณสามารถเรียกใช้งานโค้ดของคุณแม้ว่าโค้ดนั้นจะยังทำงานไม่ถูกต้องก็ตาม  เริ่มหรือตั้งค่าโค้ดของคุณใหม่ซ้ำแล้วซ้ำเล่า จนกว่าคุณจะคิดออกว่าอะไรที่ทำให้โค้ดของคุณทำงานไม่ถูกต้อง
        MC_HOC_2017_04_Cole_b: เมื่อเอเจนท์มาอยู่บนแป้นกดเรียบร้อยแล้ว เอเจนท์ก็สามารถเปิดประตูให้กับผู้เล่นของคุณ
      MC_HOC_2017_05_Cole:
        MC_HOC_2017_05_Cole_a: คุณรู้หรือไม่ว่า คุณสามารถวางโค้ดได้มากกว่า 1 ชื้นไว้ภายในลูป?
          ลองวางบล็อก ไปข้างหน้า**และ** วางไม้กระดาน.. ไว้ภายในบล็อก `ทำซ้ำ` เพื่อพิชิตปริศนาด่านนี้
        MC_HOC_2017_05_Cole_b: พาเอเจนท์ข้ามแม่น้าไป ในขณะเดียวกันก็สร้างสะพานพร้อมกันไปด้วย
      MC_HOC_2017_05_Cole_2019:
        MC_HOC_2017_05_Cole_a: คุณรู้หรือไม่ว่า คุณสามารถวางโค้ดได้มากกว่า 1 ชื้นไว้ภายในลูป?
          ลองวางบล็อก ไปข้างหน้า**และ** วางไม้กระดาน.. ไว้ภายในบล็อก `ทำซ้ำ` เพื่อพิชิตปริศนาด่านนี้
        MC_HOC_2017_05_Cole_b: พาเอเจนท์ข้ามแม่น้าไป ในขณะเดียวกันก็สร้างสะพานพร้อมกันไปด้วย
      MC_HOC_2017_06_Cole:
        MC_HOC_2017_06_Cole_a: จะต้องใช้ลูปสักกี่ครั้ง? หรือ_ควร_ที่จะใช้สักกี่ครั้ง
          ถึงจะทำงานได้?
        MC_HOC_2017_06_Cole_b: 'ช่วยเอเจนท์สร้างสะพานข้ามแม่น้าให้ไปถึงอีกฝั่งหนึ่งให้ได้ '
      MC_HOC_2017_06_Cole_2019:
        MC_HOC_2017_06_Cole_a: จะต้องใช้ลูปสักกี่ครั้ง? หรือ_ควร_ที่จะใช้สักกี่ครั้ง
          ถึงจะทำงานได้?
        MC_HOC_2017_06_Cole_b: 'ช่วยเอเจนท์สร้างสะพานข้ามแม่น้าให้ไปถึงอีกฝั่งหนึ่งให้ได้ '
      MC_HOC_2017_07_Cole:
        MC_HOC_2017_07_Cole_c: สิ่งที่คุณต้องทำ ก็คือให้เอเจนท์เคลียร์เส้นทางไปยังรถเหมืองให้ได้
        MC_HOC_2017_07_Cole_a: หากต้องการพิชิตด่านนี้ให้ได้ ต้องคิดให้ออกว่าจะเรียกใช้ฟังก์ชั่น
          `เคลียร์เส้นทาง` ให้เรียกใช้งานซ้า ๆ กันให้เท่ากับจำนวนที่คุณต้องการเรียกใช้บล็อก
          `เคลียร์เส้นทาง` สีเขียวจากกล่องเครื่องมือ
        MC_HOC_2017_07_Cole_b: ลองเรียกใช้งานบล็อกฟังก์ชั่นผสมกับบล็อกอื่น ๆ ในกล่องเครื่องมือเพื่อพิชิตด่านนี้ให้ได้
      MC_HOC_2017_07_Cole_2019:
        MC_HOC_2017_07_Cole_c: สิ่งที่คุณต้องทำ ก็คือให้เอเจนท์เคลียร์เส้นทางไปยังรถเหมืองให้ได้
        MC_HOC_2017_07_Cole_a: หากต้องการพิชิตด่านนี้ให้ได้ ต้องคิดให้ออกว่าจะเรียกใช้ฟังก์ชั่น
          `เคลียร์เส้นทาง` ให้เรียกใช้งานซ้า ๆ กันให้เท่ากับจำนวนที่คุณต้องการเรียกใช้บล็อก
          `เคลียร์เส้นทาง` สีเขียวจากกล่องเครื่องมือ
        MC_HOC_2017_07_Cole_b: ลองเรียกใช้งานบล็อกฟังก์ชั่นผสมกับบล็อกอื่น ๆ ในกล่องเครื่องมือเพื่อพิชิตด่านนี้ให้ได้
      MC_HOC_2017_10_RETRY:
        MC_HOC_2017_10_Cole_b: ไม่รู้ว่าจะไปทางไหนดี? ลองมองหาส่วนที่มีเส้นทางวาดเป็นจุดๆ
          ให้อยู่แล้วสิ!
        MC_HOC_2017_10_Cole_a: ใช้ฟังก์ชั่น เพื่อเอาชนะด่านนี้ได้ง่ายขึ้น
      MC_HOC_2017_10_RETRY_2019:
        MC_HOC_2017_10_Cole_b: ไม่รู้ว่าจะไปทางไหนดี? ลองมองหาส่วนที่มีเส้นทางวาดเป็นจุดๆ
          ให้อยู่แล้วสิ!
        MC_HOC_2017_10_Cole_a: ใช้ฟังก์ชั่น เพื่อเอาชนะด่านนี้ได้ง่ายขึ้น
      MC_HOC_2017_Ali:
        MC_HOC_2017_08_RY_a: |-
          กดปุ่ม  " เริ่ม "

          คุณสามารถเรียกใช้งานโค้ดของคุณแม้ว่าโค้ดนั้นจะยังทำงานไม่ถูกต้องก็ตาม  เริ่มหรือตั้งค่าโค้ดของคุณใหม่ซ้ำแล้วซ้ำเล่า จนกว่าคุณจะคิดออกว่าอะไรที่ทำให้โค้ดของคุณทำงานไม่ถูกต้อง
        MC_HOC_2017_08_RY_b: มีวิธีการมากมายที่จะเอาชนะในด่านนี้ได้ สองดูสักสองสามวิธีสิ
        MC_HOC_2017_08_RY_c: ลองเขียนโค้ดให้เดินไล่ไปตามเส้นประเป็นทางแบบง่าย ๆ ให้ข้ามผ่านลาวาไปได้
      MC_HOC_2017_Ali_2019:
        MC_HOC_2017_08_RY_a: |-
          กดปุ่ม  " เริ่ม "

          คุณสามารถเรียกใช้งานโค้ดของคุณแม้ว่าโค้ดนั้นจะยังทำงานไม่ถูกต้องก็ตาม  เริ่มหรือตั้งค่าโค้ดของคุณใหม่ซ้ำแล้วซ้ำเล่า จนกว่าคุณจะคิดออกว่าอะไรที่ทำให้โค้ดของคุณทำงานไม่ถูกต้อง
        MC_HOC_2017_08_RY_b: มีวิธีการมากมายที่จะเอาชนะในด่านนี้ได้ สองดูสักสองสามวิธีสิ
        MC_HOC_2017_08_RY_c: ลองเขียนโค้ดให้เดินไล่ไปตามเส้นประเป็นทางแบบง่าย ๆ ให้ข้ามผ่านลาวาไปได้
      MC_HOC_2017_FP20x20:
        MC_HOC_2017_13_Cole_a: ลองให้เอเจนท์สร้างรางสำหรับรถเหมืองเพื่อช่วยให้คุณสามารถสำรวจโลกได้!
      MC_HOC_2017_FP20x20_2019:
        MC_HOC_2017_13_Cole_a: ลองให้เอเจนท์สร้างรางสำหรับรถเหมืองเพื่อช่วยให้คุณสามารถสำรวจโลกได้!
      NEW Course 4 Artist Functions 13:
        NEW_Course_4_Artist_Functions_13_a: Try editing the `draw a line of squares`
          function so that you don't have to call it twice.
        NEW_Course_4_Artist_Functions_13_c: What code would you need if you were going
          to try to make a star using regular lines instead of boxes?
      NEW Course 4 Artist Functions 4:
        NEW_Course_4_Artist_Functions_4_a: You will have to use a `turn right by 120
          degrees` block after each square.
      NEW Course 4 Artist Functions 9:
        NEW_Course_4_Artist_Functions_9_a: Try running the code before you add any
          blocks.   What makes the drawing look a little off?
        NEW_Course_4_Artist_Functions_9_b: If you can't quite put your finger on what's
          going wrong, try slowing down the artist's by moving the slider to the left.
      NEW Course 4 Artist Params 11:
        NEW_Course_4_Artist_Params_11_a: There is more than one number that needs
          to be replaced by a variable inside the function.
      NEW Course 4 Artist Params 13:
        NEW_Course_4_Artist_Params_13_a: 'You will need to divide the _perimeter_
          by the number of sides in order to keep the shapes the same size overall. '
      NEW Course 4 Artist Params 14:
        NEW_Course_4_Artist_Params_14_a: It's okay to run the program a few times
          to figure out how the function works with different parameters.
      NEW Course 4 Artist Params inspire:
        brush_width: We set the brush width to 1, then the color to blue before we
          did anything else.
        double_loop: Try putting a `for loop` inside of a `repeat` loop.
        specifics: |-
          The `for loop` runs from three to seventeen for each of the six "petals" before moving on to create the next, drawing shapes with only an odd number of sides.

          The `set alpha` block uses division to fade the color as the counter gets higher.
        after: When you're done with each "petal", be sure to `move forward` 20 pixels
          before you make a 60 degree rotation.
        solution: |-
          **Solution**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="draw_colour" inline="true" id="draw-color">
                      <value name="COLOUR">
                        <block type="colour_picker">
                          <title name="COLOUR">#0000cd</title>
                        </block>
                      </value>
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="math_number">
                              <title name="NUM">6</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="controls_for_counter" inline="true">
                            <mutation counter="counter"></mutation>
                              <value name="FROM">
                                <block type="math_number">
                                  <title name="NUM">3</title>
                                </block>
                              </value>
                              <value name="TO">
                                <block type="math_number">
                                  <title name="NUM">17</title>
                                </block>
                              </value>
                              <value name="BY">
                                <block type="math_number">
                                  <title name="NUM">2</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="alpha" inline="true" id="alpha">
                                  <value name="VALUE">
                                    <block type="math_arithmetic" inline="true">
                                      <title name="OP">DIVIDE</title>
                                      <value name="A">
                                        <block type="math_number">
                                          <title name="NUM">500</title>
                                        </block>
                                      </value>
                                      <value name="B">
                                        <block type="variables_get">
                                          <title name="VAR">counter</title>
                                        </block>
                                      </value>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="procedures_callnoreturn" inline="false">
                                      <mutation name="draw a polygon">
                                      <arg name="length"></arg>
                                      <arg name="sides"></arg>
                                      </mutation>
                                      <value name="ARG0">
                                        <block type="math_number">
                                          <title name="NUM">30</title>
                                        </block>
                                      </value>
                                      <value name="ARG1">
                                        <block type="variables_get">
                                          <title name="VAR">counter</title>
                                        </block>
                                      </value>
                                    </block>
                                  </next>
                                </block>
                              </statement>
                              <next>
                                <block type="draw_move" inline="true">
                                  <title name="DIR">moveForward</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">20</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="draw_turn" inline="true">
                                      <title name="DIR">turnRight</title>
                                      <value name="VALUE">
                                        <block type="math_number">
                                          <title name="NUM">60</title>
                                        </block>
                                      </value>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </statement>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
            </xml>
      NEW Course 4 Bee For Loops 10a:
        NEW_Course_4_Bee_For_Loops_10a_a: Can you find a pattern between the number
          of steps you need to take and the number of nectars to gather?
        NEW_Course_4_Bee_For_Loops_10a_b: You'll need to have 2 repeats, one will
          use a math block.
      NEW Course 4 Bee For Loops 7:
        NEW_Course_4_Bee_For_Loops_7_a: |-
          Try doing some math with the counter variable.

          What do you have to do to the counter at each flower to equal the amount of nectar you need to collect?
      NEW Course 4 Bee For Loops 8:
        NEW_Course_4_Bee_For_Loops_8_a: "If your loop is counting up, the increment
          is added to your counter variable each time through. \n\nWhat do you need
          to add to each number to get the number after it?"
      New Minecraft Hero Project:
        MC_HOC_2017_13_Cole_a: Try having the Agent build some bridges so that Alex
          or Steve can walk around beyond the edges of the map.
      OPD-K5-events-2:
        courseC_flappy_events1_a: "![](https://images.code.org/5f1d0edf6ebb44d98ffdce623cfe0ad4-image-1501192487040.gif)"
      OPD-K5-events-3:
        courseC_flappy_events2_a: 'บล็อกที่คุณต้องการเพิ่มเข้ามาเรียกว่า `กำหนดความเร็ว...`. '
        courseC_flappy_events2_b: Connect the `set speed` block to the `when run`
          block to solve this puzzle.
      OPD-K5-events-4:
        courseC_flappy_events3_a: ถ้ามีบางอย่างทำงานไม่ถูกต้องให้ตรวจสอบให้แน่ใจว่าบล็อกของคุณเชื่อมต่อกับอีเวนท์อย่างถูกต้องในพื้นที่ทำงาน
      OPD-K5-events-5:
        courseC_flappy_events4_a: เชื่อมต่อบล็อก `จบเกม` เข้ากับ `เมื่อชนสิ่งกีดขวาง`
          ในการแก้ปริศนานี้
      OPD-K5-events-6:
        courseC_flappy_events5_a: คุณจะต้องใช้บล็อก`ได้แต้ม`ก่อนที่จะสามารถผ่านด่านนี้ไปได้
      OPD-K5-forloops-1:
        courseF_bee_for1_a: Drag a purple number block into the blank space on the
          `repeat` loop to tell it how many times to repeat.
        courseF_bee_for1_b: You will need two blocks in your ‘repeat’ loop to collect
          all of the nectar.
      OPD-K5-forloops-2:
        courseF_bee_for2_a: If you’re confused, work one flower at a time, and test
          often.
        courseF_bee_for2_b: Remember to move forward between each loop, so you reach
          each flower.
      OPD-K5-forloops-5:
        courseF_bee_for4_a: Use a `for` loop that goes from 1 to 7 with an increment
          of 1 to solve this puzzle.
        courseF_bee_for4_b: Within your `for` loop, you will want to have a `move
          forward` command, and a loop to collect nectar.
        courseF_bee_for4_c: Make sure to use the `counter` variable inside your nested
          `repeat` loop to get enough nectar!
      OPD-K5-forloops-6:
        courseF_bee_for6_a: Don't forget to use a `counter` variable inside your `repeat`
          loop.
        courseF_bee_for6_b: Within your `for` loop, you will want to have a `move
          forward` command, and a loop to collect nectar.
        courseF_bee_for6_c: Your loop should count **from 5 to 1**.
      OPD-K5-forloops-7:
        courseF_bee_for7_a: Your `for` loop will need to count from 1 to 7 by 2.
        courseF_bee_for7_b: Within your `for` loop, you will want to have a `move
          forward` command, and a loop to collect nectar.
        courseF_bee_for7_c: Remember to use the `counter` variable in your `repeat`
          loop.
      OPD-K5-projects-2:
        courseE_playLab_scaffold1_a: The `set actor 1 to ??? image` block can be used
          to add an actor to the stage.
        courseE_playLab_scaffold1_b: Put the `set actor` block under `when run` to
          make your actor appear at the beginning of the program.
        courseE_playLab_scaffold1_c: Use `set ??? background` to choose a background
          for your scene.
      OPD-K5-projects-3:
        courseE_playLab_scaffold1_a: Pull on the dropdown menu of the `when ____ arrow`
          event to change the direction the block controls.
        courseE_playLab_scaffold1_b: You should have four `when arrow` event blocks,
          with a direction to move underneath each.
        courseE_playLab_scaffold1_c: When you are done, you should be able to move
          your hero with the arrow keys!
      OPD-K5-projects-5:
        courseE_playLab_scaffold4_a: Use `score point` to add a point, and `remove
          point` to subtract one.
      OPD-K5-variables-1:
        grade5_artist_variables_triangles1_a: To make an internal angle of 60 degrees
          in this triangle, remember to turn the artist 120 degrees.
        grade5_artist_variables_triangles1_b: Use the `repeat` loop to make your code
          shorter.
        grade5_artist_variables_triangles1_c: Inside your loop, you will want to move
          forward 50 pixels, then turn left 120 degrees.
      OPD-K5-variables-2:
        courseF_artist_variables2_a: Remember to move forward after drawing each triangle.
        courseF_artist_variables2_b: Your new loop will contain the loop for your
          triangle, then a `move forward` command.
      OPD-K5-variables-5:
        courseF_artist_variables3_a: 'The variable `length` will be used in two places
          in your code: In the side length of your triangle, and in the amount you
          move forward between triangles.'
        courseF_artist_variables3_b: 'A number block with value 50 should only be
          in one place: after the `set length` block.'
      OPD-K5-variables-6:
        courseF_artist_variables4_a: Your code won't be much different than it was
          in the last puzzle, except that you will need to turn the artist to jump
          down, then turn him back to get ready to draw the next triangle.
        courseF_artist_variables4_c: |-
          This is the pattern your artist will be following:

          ![](https://images.code.org/41ae98c1633755cf4553f90a80e125cf-image-1500325529204.6_hint.gif)
        courseF_artist_variables4_b: |-
          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="variables_set">
                  <title name="VAR">length</title>
                  <value name="VALUE">
                    <block type="math_number">
                      <title name="NUM">50</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_repeat_ext">
                      <value name="TIMES">
                        <block type="math_number">
                          <title name="NUM">3</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="controls_repeat_ext">
                          <value name="TIMES">
                            <block type="math_number">
                              <title name="NUM">3</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="draw_move">
                              <title name="DIR">moveForward</title>
                              <value name="VALUE">
                                <block type="variables_get">
                                  <title name="VAR">length</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_turn">
                                  <title name="DIR">turnLeft</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">120</title>
                                    </block>
                                  </value>
                                </block>
                              </next>
                            </block>
                          </statement>
                          <next>
                            <block type="jump">
                              <title name="DIR">jumpForward</title>
                              <value name="VALUE">
                                <block type="variables_get">
                                  <title name="VAR">length</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_turn">
                                  <title name="DIR">turnRight</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">90</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="jump">
                                      <title name="DIR">jumpForward</title>
                                      <value name="VALUE">
                                        <block type="variables_get">
                                          <title name="VAR">length</title>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn">
                                          <title name="DIR">turnLeft</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      OPD-K5-variables-7:
        courseF_artist_variables5_a: The second half of your code should look almost
          the same as the first half, except you will be turning _left_, jumping,
          then turning _right_.
        courseF_artist_variables5_b: The first half of your code will draw three triangles,
          and the second half will draw the other three.
        courseF_artist_variables5_c: Start by duplicating the code in the first half
          of your program, then alter it to make the design shown.
        courseF_artist_variables5_d: |-
          This is the pattern your artist will follow:

          ![](https://images.code.org/e4ac66f8e9a4503e49c4fad1e4fafc1d-image-1500326800109.7_hint.gif)
      Overworld Avoid Monsters:
        mc_8_a: มีเส้นทางสองสามแบบให้คุณเลือก เส้นทางไหนสั้นที่สุด?
        mc_8_b: ใช้ลูป `ทำซ้ำ`เพื่อทำให้โค้ดของคุณง่ายขึ้น
        mc_8_c: จุดมุ่งหมายของคุณคือเข้าไปให้ถึงประตูบ้านที่อยู่บนสุดของจอภาพ
      Overworld Avoid Monsters_2019:
        mc_8_a: มีเส้นทางสองสามแบบให้คุณเลือก เส้นทางไหนสั้นที่สุด?
        mc_8_b: ใช้ลูป `ทำซ้ำ`เพื่อทำให้โค้ดของคุณง่ายขึ้น
        mc_8_c: จุดมุ่งหมายของคุณคือเข้าไปให้ถึงประตูบ้านที่อยู่บนสุดของจอภาพ
      Overworld Chop Tree:
        mc_2_a: You need to `move forward` twice to stand in front of the tree.
        mc_2_b: คำสั่ง`ทำลายบล็อก` จะตัดต้นไม้ที่อยู่ตรงหน้าคุณลง
      Overworld Chop Tree_2019:
        mc_2_a: You need to `move forward` twice to stand in front of the tree.
        mc_2_b: คำสั่ง`ทำลายบล็อก` จะตัดต้นไม้ที่อยู่ตรงหน้าคุณลง
      Overworld Chop Trees:
        mc_4_a: 'คุณสามารถตัดต้นไม้ลงในลำดับใดก็ได้ เส้นทางใดจะใช้บล็อกจำนวนน้อยที่สุด?  '
        mc_4_b: คำสั่ง`ทำลายบล็อก` จะตัดต้นไม้ที่อยู่ตรงหน้าคุณลง
      Overworld Chop Trees_2019:
        mc_4_a: 'คุณสามารถตัดต้นไม้ลงในลำดับใดก็ได้ เส้นทางใดจะใช้บล็อกจำนวนน้อยที่สุด?  '
        mc_4_b: คำสั่ง`ทำลายบล็อก` จะตัดต้นไม้ที่อยู่ตรงหน้าคุณลง
      Overworld House Frame Chosen:
        mc_6_a: คลิกลูกศรคว่ำลงที่อยู่บนบล็อก `วาง` เพื่อเลือกว่าคุณต้องการนำวัสดุอะไรมาวาง
        mc_6_b: ไม่ต้องกลัวว่าคุณจะทำผิด! เรียกใช้งานโค้ดเพื่อดูว่าเกิดอะไรขึ้น แม่ว่าคุณจะยังไม่สามารถแก้ปริศนาได้ก็ตาม
        mc_6_c: คุณสามารถใส่บล็อกได้มากกว่าหนึ่งบล็อกภายในลูป `ทำซ้ำ`
      Overworld House Frame Chosen_2019:
        mc_6_a: คลิกลูกศรคว่ำลงที่อยู่บนบล็อก `วาง` เพื่อเลือกว่าคุณต้องการนำวัสดุอะไรมาวาง
        mc_6_b: ไม่ต้องกลัวว่าคุณจะทำผิด! เรียกใช้งานโค้ดเพื่อดูว่าเกิดอะไรขึ้น แม่ว่าคุณจะยังไม่สามารถแก้ปริศนาได้ก็ตาม
        mc_6_c: คุณสามารถใส่บล็อกได้มากกว่าหนึ่งบล็อกภายในลูป `ทำซ้ำ`
      Overworld Move to Sheep:
        mc_1_a: 'บล็อก`ไปข้างหน้า`อยู่บนสุดของกล่องเครื่องมือ  '
        mc_1_b: 'ให้แน่ใจว่าบล็อก `ไปข้างหน้า` ต่อติดกับบล็อก `เมื่อเรียกใช้งาน`  '
      Overworld Move to Sheep_2019:
        mc_1_a: 'บล็อก`ไปข้างหน้า`อยู่บนสุดของกล่องเครื่องมือ  '
        mc_1_b: 'ให้แน่ใจว่าบล็อก `ไปข้างหน้า` ต่อติดกับบล็อก `เมื่อเรียกใช้งาน`  '
      Overworld Place Wall:
        mc_5_a: ใช้บล็อก `วาง` เป็นบล็อกแรกตามมาด้วยบล็อก `ไปข้างหน้า`
        mc_5_b: ให้แน่ใจว่าคุณได้วางบล็อกทั้งสองบล็อกไว้ภายในลูป `ทำซ้ำ` เพื่อที่จะเรียกใช้งานโค้ดได้มากกว่าหนึ่งครั้ง
        mc_5_c: ไม่ต้องกลัวว่าคุณจะทำผิด! เรียกใช้งานโค้ดเพื่อดูว่าเกิดอะไรขึ้น แม่ว่าคุณจะยังไม่สามารถแก้ปริศนาได้ก็ตาม
      Overworld Place Wall_2019:
        mc_5_a: ใช้บล็อก `วาง` เป็นบล็อกแรกตามมาด้วยบล็อก `ไปข้างหน้า`
        mc_5_b: ให้แน่ใจว่าคุณได้วางบล็อกทั้งสองบล็อกไว้ภายในลูป `ทำซ้ำ` เพื่อที่จะเรียกใช้งานโค้ดได้มากกว่าหนึ่งครั้ง
        mc_5_c: ไม่ต้องกลัวว่าคุณจะทำผิด! เรียกใช้งานโค้ดเพื่อดูว่าเกิดอะไรขึ้น แม่ว่าคุณจะยังไม่สามารถแก้ปริศนาได้ก็ตาม
      Overworld Plant Crops:
        mc_7_a: ให้ใช้บล็อก `ปลูกพืช` เพื่อปลูกพืชผลลงบนบริเวณที่คุณยืนอยู่
        mc_7_b: แถบทั้งสองของที่ดินที่เป็นสีน้ำตาลเข้มซึ่งขนาบสายน้ำอยู่นั้นต้องเต็มไปด้วยพืชผล
        mc_7_c: คุณสามารถใส่บล็อกได้มากกว่าหนึ่งบล็อกภายในลูป `ทำซ้ำ`
      Overworld Plant Crops_2019:
        mc_7_a: ให้ใช้บล็อก `ปลูกพืช` เพื่อปลูกพืชผลลงบนบริเวณที่คุณยืนอยู่
        mc_7_b: แถบทั้งสองของที่ดินที่เป็นสีน้ำตาลเข้มซึ่งขนาบสายน้ำอยู่นั้นต้องเต็มไปด้วยพืชผล
        mc_7_c: คุณสามารถใส่บล็อกได้มากกว่าหนึ่งบล็อกภายในลูป `ทำซ้ำ`
      Overworld Powered Minecart:
        mc_13_a: ให้ใช้ `วางราง` เพื่อวางรางลงบนตารางส่เหลี่ยมที่คุณยืนอยู่
        mc_13_b: ใช้ลูป `ทำซ้ำ` เพื่อทำให้โค้ดของคุณสั้นลง
      Overworld Powered Minecart_2019:
        mc_13_a: ให้ใช้ `วางราง` เพื่อวางรางลงบนตารางส่เหลี่ยมที่คุณยืนอยู่
        mc_13_b: ใช้ลูป `ทำซ้ำ` เพื่อทำให้โค้ดของคุณสั้นลง
      Overworld Shear Sheep:
        mc_3_a: 'บล็อก `ตัดขน` จัดการตัดขนแกะที่อยู่ตรงหน้า คุณมีแกะอยู่ตรงหน้าหรือเปล่า?  '
        mc_3_b: 'ถ้าคุณต้องการเปลี่ยนด้านที่คุณต้องการหันหน้าไป ให้ใช้บล็อก`หัน`มาช่วย  '
        mc_3_c: ไม่ต้องกลัวว่าคุณจะทำผิด! เรียกใช้งานโค้ดเพื่อดูว่าเกิดอะไรขึ้น แม่ว่าคุณจะยังไม่สามารถแก้ปริศนาได้ก็ตาม
      Overworld Shear Sheep_2019:
        mc_3_a: 'บล็อก `ตัดขน` จัดการตัดขนแกะที่อยู่ตรงหน้า คุณมีแกะอยู่ตรงหน้าหรือเปล่า?  '
        mc_3_b: 'ถ้าคุณต้องการเปลี่ยนด้านที่คุณต้องการหันหน้าไป ให้ใช้บล็อก`หัน`มาช่วย  '
        mc_3_c: ไม่ต้องกลัวว่าคุณจะทำผิด! เรียกใช้งานโค้ดเพื่อดูว่าเกิดอะไรขึ้น แม่ว่าคุณจะยังไม่สามารถแก้ปริศนาได้ก็ตาม
      Underground Avoiding Lava:
        mc_11_a: โค้ดทั้งหมดได้มีการวางไว้ให้เรียบร้อยแล้วเพื่อเช็คดูและจัดการกับลาวา
          สิ่งที่คัณต้องทำก็คือเพิ่มบล็อกเข้าไปเพื่อเดินไปข้างหน้า
        mc_11_b: คำสั่งเพื่อ`ไปข้างหน้า` ควรอยู่ภายในบล็อกข้อความ `ถ้า` หรืออยู่ภายหลัง?
      Underground Avoiding Lava_2019:
        mc_11_a: โค้ดทั้งหมดได้มีการวางไว้ให้เรียบร้อยแล้วเพื่อเช็คดูและจัดการกับลาวา
          สิ่งที่คัณต้องทำก็คือเพิ่มบล็อกเข้าไปเพื่อเดินไปข้างหน้า
        mc_11_b: คำสั่งเพื่อ`ไปข้างหน้า` ควรอยู่ภายในบล็อกข้อความ `ถ้า` หรืออยู่ภายหลัง?
      Underground If Statements:
        mc_12_a: บริเวณที่เป็นจุดแต้มด้วยสีแดงเป็นบริเวณที่มีสินแร่หินสีแดงฝังอยู่
        mc_12_b: คุณสามารถใช้ลูป `ทำซ้ำ`เพื่อให้โค้ดของคุณสั้นลงได้ไหม?
        mc_12_c: 'ให้ใช้ข้อความ `ถ้า` เพื่อเช็คดูว่ามีลาวาไหม หากมีก็จะถมด้วยหินกรวด '
      Underground If Statements_2019:
        mc_12_a: บริเวณที่เป็นจุดแต้มด้วยสีแดงเป็นบริเวณที่มีสินแร่หินสีแดงฝังอยู่
        mc_12_b: คุณสามารถใช้ลูป `ทำซ้ำ`เพื่อให้โค้ดของคุณสั้นลงได้ไหม?
        mc_12_c: 'ให้ใช้ข้อความ `ถ้า` เพื่อเช็คดูว่ามีลาวาไหม หากมีก็จะถมด้วยหินกรวด '
      Underground Iron:
        mc_10_a: บล็อกแหล่งแร่เหล็กเป็นบริเวณที่ส่งประกายที่ตั้งอยู่ด้านหลังคบไฟ!
          คุณจะไปที่นั่นได้ย่างไร?
        mc_10_b: เมื่อคุณได้มายืนอยูที่ขอบของแอ่งลาวา ให้ใช้บล็อก `วางหินกรวดข้างหน้า`
          เพื่อทำทางที่ปลอดภัย เมื่อทำเสร็จแล้วคุณก็สามารถเดินข้ามไปได้!
        mc_10_c: ไม่ต้องกลัวว่าคุณจะทำผิด! เรียกใช้งานโค้ดเพื่อดูว่าเกิดอะไรขึ้น แม่ว่าคุณจะยังไม่สามารถแก้ปริศนาได้ก็ตาม
      Underground Iron_2019:
        mc_10_a: บล็อกแหล่งแร่เหล็กเป็นบริเวณที่ส่งประกายที่ตั้งอยู่ด้านหลังคบไฟ!
          คุณจะไปที่นั่นได้ย่างไร?
        mc_10_b: เมื่อคุณได้มายืนอยูที่ขอบของแอ่งลาวา ให้ใช้บล็อก `วางหินกรวดข้างหน้า`
          เพื่อทำทางที่ปลอดภัย เมื่อทำเสร็จแล้วคุณก็สามารถเดินข้ามไปได้!
        mc_10_c: ไม่ต้องกลัวว่าคุณจะทำผิด! เรียกใช้งานโค้ดเพื่อดูว่าเกิดอะไรขึ้น แม่ว่าคุณจะยังไม่สามารถแก้ปริศนาได้ก็ตาม
      Underground Mining Coal:
        mc_9_a: คุณหันหน้าไปถูกทางหรืิเปล่า? ในการ`ทำลายบล็อก`นั้นจะทำลายบล็อกที่อยู่ข้างหน้าของคุณ
        mc_9_b: รอยด่างบนกำแพงนั้นเป็นถ่านหิน ให้ใช้ `ทำลายบล็อก`กับรอยด่างเหล่านี้เพื่อขุดเอาถ่านหิน
        mc_9_c: ให้ใช้บล็อก `วางคบไฟ`เพื่อวางคบไฟไว้ตรงที่คุณยืนอยู่
      Underground Mining Coal_2019:
        mc_9_a: คุณหันหน้าไปถูกทางหรืิเปล่า? ในการ`ทำลายบล็อก`นั้นจะทำลายบล็อกที่อยู่ข้างหน้าของคุณ
        mc_9_b: รอยด่างบนกำแพงนั้นเป็นถ่านหิน ให้ใช้ `ทำลายบล็อก`กับรอยด่างเหล่านี้เพื่อขุดเอาถ่านหิน
        mc_9_c: ให้ใช้บล็อก `วางคบไฟ`เพื่อวางคบไฟไว้ตรงที่คุณยืนอยู่
      behaviors 2:
        behavior hint: "Try editing the behaviors! \n\n-   Which direction does the
          rocket need to move?"
      behaviors 3:
        behavior hint: "Try editing the behaviors! \n\n-   Which value is controlling
          the speed of each sprite?"
      behaviors 3a:
        behavior hint: "Try editing the behaviors! \n\n-   Which value is controlling
          the speed of each sprite?"
      behaviors 5:
        target hint: You can pick any of the four ships. Which one does the astronaut
          want?
        behavior hint: Edit the behavior to solve this puzzle. The astronaut sprite
          needs to move in two different directions to end up going diagonally.
      behaviors 6:
        behavior hint: "Try editing the behaviors! \n\n-   Which value is controlling
          the speed of each sprite?"
      behaviors 7:
        behaviors_hint1: You can create a new behavior that uses two different actions
          or combine two existing behaviors.
        sprites_idea1: |-
          For fun, you can use a similar behavior to make a ship fly off into space or a character run to the foreground. Try changing the background and sprite costumes in your scene!

          ![](<https://images.code.org/7070e44239b53f4b33a5b4fe054bb61c-image-1567714335486.2019-09-05 16_05_19.gif>)

          ![](<https://images.code.org/278494432d56f1f5d41e345a51223695-image-1567714335485.2019-09-05 16_11_12.gif>)
      comment_intro_maze_2018:
        courseC_maze_programming4_a: Comments are also helpful when other people try
          to read your code.
        courseC_maze_programming4_b: Add a comment when you change directions- what
          would have happened if you turned the other way?
      course1_artist_loops_challenge1:
        courseA_artist_loops_challenge1_a: |-
          You can use loops like this to create the walls and the roof. Try repeating different blocks.

          ![](https://images.code.org/1581a2f599b501103064fc9864aa964d-image-1491863694560.png)

          Design your own or click the ![](https://images.code.org/53090194cea5dbf35ce9e35205156f5d-image-1491864793265.png) for some ideas!
        courseA_artist_loops_challenge1_b: "![](https://images.code.org/34f3bae38f77f07eaf455188c0b008e5-image-1491864823946.png)"
        courseA_artist_loops_challenge1_c: "![](https://images.code.org/24b208839971803f3f6cd6ae41da56df-image-1491864839734.png)"
        courseA_artist_loops_challenge1_d: "![](https://images.code.org/d3ccefffa0cc77bdd4a597cdb49fc85e-image-1491864847347.png)"
      course1_artist_loops_challenge2:
        harvey_tictactoe: คุณสามารถใช้บล็อก `กระโดด` เพื่อเคลื่อนที่ไปยังพื้นที่อื่น
      course1_artist_loops_challenge3:
        courseA_artist_loops_challenge2_a: 'บล็อกพวกนี้: <xml>  <block type="simple_move_up_left"/></xml>
          จะทำให้ศิลปินเดินตามทางลาดเอียงได้นะ!'
        courseA_artist_loops_challenge2_b: เมื่อสร้างบ้านนกหลังแรกเสร็จแล้ว `กระโดด`เพื่อไปยังหลังถัดไปเลย!
        courseA_artist_loops_challenge2_c: คุณต้องการบล็อกเยอะมากอยู่ในลูปเพื่อการท้าทายนี้
      course1_artist_loops_challenge4:
        courseB_artist_loops_challenge1_a: 'Blocks like this: <xml>  <block type="simple_move_up_right"/></xml>
          will let your artist move at a slant!'
        courseB_artist_loops_challenge1_b: When you finish one of the dice, `jump`
          to the next!
        courseB_artist_loops_challenge1_c: 'You will need to `move` or `jump` over
          some of the same lines twice. '
      course1_collector_loops_challenge1:
        courseA_collector_loops_challenge1_a: ลองเปลี่ยนจำนวนตัวเลขในแต่ละลูปดู ถ้ามีบางอย่างที่ดูแล้วไม่น่าจะถูกต้อง
        courseA_collector_loops_challenge1_b: คุณไม่จำเป็นต้องใช้ ลูป ถ้าคุณแค่ทำบางอย่างแค่เพียงครั้งเดียวเท่านั้น
        courseA_collector_loops_challenge1_c: มีอัญมณีอยู่ 6 อย่างบริเวณด้านขวาของถ้ำ
          แต่คุณต้องเดินไปและเก็บขึ้นมาเพียง 5 ครั้งเท่านั้น คุณรู้ไหมว่าทำไม?
      course1_collector_loops_challenge2:
        courseA_collector_loops_challenge2_b: คุณต้องใช้บล็อค ![](<https://images.code.org/803e9ee8b5bc9311a26edf955cd3c03f-image-1491001702274.07.34
          PM.png>) บล็อคเดียวเท่านั้นเพื่อแก้โจทย์นี้
        courseA_collector_loops_challenge2_a: |-
          You can move back over the path a second time before moving south.

          ![](<https://images.code.org/88c28c76dbea70e20253083d22b5f5fd-image-1491001404225.01.21 PM.png>)
      course1_collector_loops_challenge3:
        courseB_collector_loops_challenge1_b: |-
          เริ่มต้นโดยการวนลูปคำสั่ง `เคลื่อนไปทางใต้` และ `เก็บสมบัติ`

          <xml>
            <block type="maze_moveSouth"/><next>
            <block type="collector_collect"/></next>
            </xml>
        courseB_collector_loops_challenge1_a: |-
          รูปแบบที่อยู่ทางด้านทิศเหนือจะแตกต่างจากรูปแบบที่อยู่ทางด้านทิศใต้อยู่เล็กน้อย

          <xml>
            <block type="collector_collect"/><next>
            <block type="maze_moveNorth"/></next>next>
            </xml>
        courseB_collector_loops_challenge1_c: "เคลื่อนไปทางทิศตะวันออกสองครั้งในแต่ละเส้นทาง\n\n<xml>\n
          \ <block type=\"maze_moveEast\"/><next>\n  <block type=\"maze_moveEast\"/></next>next>\n
          \ </xml>\n\nคุณสามารถทำสิ่งนี้ได้โดยใช้บล็อกเพียงแค่ 14 บล็อกเท่านั้น คลิกหาคำใบ้อีกครั้งเพื่อดูเฉลยวิธีการแก้ปัญหา "
        courseB_collector_loops_challenge1_d: |-
          Try this!

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat_simplified">
                  <title name="TIMES">5</title>
                  <statement name="DO">
                    <block type="maze_moveSouth">
                      <next>
                        <block type="collector_collect"/>
                      </next>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_moveEast">
                      <next>
                        <block type="maze_moveEast">
                          <next>
                            <block type="controls_repeat_simplified">
                              <title name="TIMES">5</title>
                              <statement name="DO">
                                <block type="collector_collect">
                                  <next>
                                    <block type="maze_moveNorth"/>
                                  </next>
                                </block>
                              </statement>
                              <next>
                                <block type="maze_moveEast">
                                  <next>
                                    <block type="maze_moveEast">
                                      <next>
                                        <block type="controls_repeat_simplified">
                                          <title name="TIMES">5</title>
                                          <statement name="DO">
                                            <block type="maze_moveSouth">
                                              <next>
                                                <block type="collector_collect"/>
                                              </next>
                                            </block>
                                          </statement>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      course1_collector_loops_challenge4:
        courseB_collector_loops_challenge2_a: ถ้าทำอะไรพลาดไป อย่ากลัวที่จะเริ่มต้นใหม่
          อย่ายอมแพ้นะ!
        courseB_collector_loops_challenge2_b: |-
          ถ้าคุณทำตามรูปแบบนี้ซ้ำหลายรอบ ลอเรลจะไม่เดินชนกำแพงที่อยู่ด้านล่างของถ้ำเลย!

          <xml><block type="maze_moveEast">
                      <next>
                        <block type="collector_collect">
                          <next>
                            <block type="maze_moveWest">
                              <next>
                                <block type="maze_moveWest">
                                  <next>
                                    <block type="maze_moveSouth"/>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block></xml>
        courseB_collector_loops_challenge2_c: ลองใช้บล็อก `ทำซ้ำ` เพื่อเก็บกองสมบัติกองสุดท้ายให้หมดดูสิ!
        courseB_collector_loops_challenge2_d: |-
          ลองใช้วิธีนี้สิ:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat_simplified_dropdown">
                  <title name="TIMES" config="3-10">4</title>
                  <statement name="DO">
                    <block type="maze_moveEast">
                      <next>
                        <block type="collector_collect">
                          <next>
                            <block type="maze_moveWest">
                              <next>
                                <block type="maze_moveWest">
                                  <next>
                                    <block type="maze_moveSouth"/>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                  <next>
                    <block type="controls_repeat_simplified_dropdown">
                      <title name="TIMES" config="3-10">6</title>
                      <statement name="DO">
                        <block type="collector_collect"/>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      course1_maze_debugging_challenge1:
        courseA_maze_seq_challenge1_a: บางเส้นทางอาจจะพาไปโดนระเบิด TNT เข้าให้ถ้าคุณเคลื่อนที่ไกลเกินไป
      course1_maze_debugging_challenge2:
        courseB_maze_seq_challenge2_a: ไม่มีความจำเป็นสำหรับคุณในการแก้ปริศนานี้ ที่จะต้องเพิ่มบล็อกใหม่เข้าไปหรือลบบล็อกที่มีอยู่ในพื้่นที่ทำงานออก
        courseB_maze_seq_challenge2_b: จัดวางบล็อกเหล่านี้ใหม่และเลือกใช้เส้นทางที่พาดไปตรงกลาง
      course1_maze_seq_challenge1:
        courseA_maze_seq_challenge2_a: ลองนับจำนวนช่องว่างใช้นิ้วของคุณ จำไว้ว่าต้องไม่นับรวมเอาที่ที่คุณเริ่มต้น!
      course1_maze_seq_challenge2:
        courseB_maze_seq_challenge1_a: The shortest path might not work this time.
        courseB_maze_seq_challenge1_b: ควรเริ่มจากเดินไปทางตะวันตกก่อน
      course1_playlab_events_challenge1:
        courseA_playlab_events_challenge1_a: "ให้แวดเดิล เจ้านกเพนกวินปรากฎตัวเมื่อคุณคลิกที่รอบิน
          เจ้านกสีแดง\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title
          name=\"SPRITE\">2</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">3</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_b: "ทำให้บู เจ้าผีน้อยปรากฎตัวขึ้นเมื่อคุณคลิกเจ้าแวดเดิล!\n\n<xml>
          \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">3</title>\n
          \   <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n
          \       <title name=\"SPRITE\">4</title>\n      </block>\n    </next>\n
          \ </block></xml>"
        courseA_playlab_events_challenge1_c: ทำให้เจ้าอสูรขนปุย เจย์เด็น ปรากฎตัวขึ้น
          เมื่อคุณคลิกบู เจ้าผีน้อย!
        courseA_playlab_events_challenge1_d: "ทำให้เจ้าหุ่นยนต์สปีฟ ปรากฎตัวขึ้น เมื่อคุณคลิกที่เจ้าอสูรขนปุย!\n\n<xml>
          \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">5</title>\n
          \   <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n
          \       <title name=\"SPRITE\">6</title>\n      </block>\n    </next>\n
          \ </block></xml>"
        courseA_playlab_events_challenge1_e: "สุดท้ายให้พ่อมดเว็นเดลย์ ปรากฎตัวขึ้นเมื่อคุณคลิกที่เจ้าหุ่นยนต์สปีฟ\n\n<xml>
          \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">6</title>\n
          \   <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n
          \       <title name=\"SPRITE\">7</title>\n      </block>\n    </next>\n
          \ </block></xml>"
      course1_playlab_events_challenge2:
        courseA_playlab_events_challenge2_a: "You can make a bird sing.\n\n<xml> \n
          \ <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">2</title>\n
          \   <next>\n          <block type=\"studio_saySprite\">\n            <title
          name=\"SPRITE\">2</title>\n            <title name=\"TEXT\">Tweet</title>\n
          \         </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge2_b: "You can make a robot beep.\n\n<xml>\n
          \ <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">6</title>\n
          \   <next>\n      \n          <block type=\"studio_playSound\">\n            <title
          name=\"SOUND\">winpoint</title>\n          </block>\n        </next>\n  </block></xml>"
        courseA_playlab_events_challenge2_c: |-
          You can make an angry monster growl.

          <xml>  <block type="studio_whenSpriteClicked">
              <title name="SPRITE">5</title>
              <next>
                <block type="studio_setSpriteEmotion">
                  <title name="SPRITE">5</title>
                  <title name="VALUE">2</title>
                  <next>
                    <block type="studio_saySprite">
                      <title name="SPRITE">5</title>
                      <title name="TEXT">Roar!</title>
                      <next>
                        <block type="studio_setSpriteEmotion">
                          <title name="SPRITE">5</title>
                          <title name="VALUE">0</title>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block></xml>
      course2_artist_nestedLoops_challenge1:
        courseD_artist_nestedLoops_challenge1_a: เริ่มต้นด้วยการสร้างลูปซ้อนกันเพื่อสร้างแปดเหลี่ยมด้านเท่าสี่รูป
          หมุน 45 องศาเพื่อสร้างแปดเหลี่ยม กระโดด แล้วหัน 90 องศาหลังจากวาดรูปสามเหลี่ยมเสร็จในแต่ละกลุ่ม
          (รูปทรงในแต่ละกลุ่มประกอบด้วยรูปแปดเหล่ี่ยมตามมาด้วยรูปสามเหลี่ยม)
        courseD_artist_nestedLoops_challenge1_b: เพิ่มโค้ดเพื่อวาดรูปทรงสามเหลี่ยมไว้ภายในลูปที่ซ้อนกัน
          (nested loop - ลูปซ้อนลูป) การวาดรูปสามเหลี่ยมจะใช้การหัน 120 องศาในแต่ละมุม
        courseD_artist_nestedLoops_challenge1_c: |-
          ใช้ลูปซ้อนลูป (nested loop):

          -   ทำซ้ำ 8 ครั้ง
          -   วาดรูปทรงแปดเหลี่ยม
          -   วาดรูปทรงสามเหลี่ยม
          -   กระโดดไปข้างหน้า 50 พิกเซล
          -   หันไปทางขวา 90 องศา
      course2_artist_nestedLoops_challenge2:
        courseD_artist_nestedLoops_challenge2_a: เพื่อที่จะวาดรูปแปดหลี่ยมรูปหนึ่งนั้น
          ศิลปินต้องหันไปแต่ละครั้ง 45 องศาเป็นจำนวนทั้งสิ้น 8 ครั้ง
        courseD_artist_nestedLoops_challenge2_b: เพื่อที่จะวาดรูปสี่หลี่ยมจตุรัสรูปหนึ่งนั้น
          ศิลปินต้องหันไปแต่ละครั้ง 90 องศาเป็นจำนวนทั้งสิ้น 4 ครั้ง
      course2_artist_prog_challenge1:
        courseC_artist_prog_challenge1_a: 'อาคารที่เป็นรูปสี่เหลี่ยมผืนผ้ากว้าง 200
          พิกเซล และสูง 100 พิกเซล '
      course2_artist_prog_challenge2:
        courseC_artist_prog_challenge2_a: "คุณสามารถใส่คำสั่งต่างๆ ไว้ภายในบล็อก `ทำซ้ำ`
          เพื่อลูปคำสั่งเหล่านั้นซ้ำแล้วซ้ำเล่า  ลองทำดู!\n\n<xml>\n  \n          <block
          type=\"controls_repeat\">\n            <title name=\"TIMES\">6</title>\n
          \           <statement name=\"DO\">\n              <block type=\"draw_move_by_constant_dropdown\">\n
          \               <title name=\"DIR\">moveForward</title>\n                <title
          name=\"VALUE\" config=\"25,50,100,150,200,300\">25</title>\n                <next>\n
          \                 <block type=\"jump_by_constant_dropdown\">\n                    <title
          name=\"DIR\">jumpForward</title>\n                    <title name=\"VALUE\"
          config=\"25,50,100,150,200,300\">25</title>\n                  </block>\n
          \               </next>\n              </block>\n              </statement></block></xml>"
      course2_bee_conditionals_challenge1:
        courseD_bee_conditionals_challenge1_a: |-
          คุณสามารถหาเส้นทางที่เข้าถึงดอกไม้และรังผึ้งทั้งหมดไม่ต้องชนต้นไม้ใดๆ เลย เส้นทางที่ดีที่สุดเป็นทางวังวน

          \*\* คุณสามารถแก้ปริศนานี้โดยไม่ต้องหันซ้ายเลย\*\*
        courseD_bee_conditionals_challenge1_b: สำกรับปริศนาด่านนี้ แต่ละพื้นที่อาจจะมีดอกไม้
          รวงผึ้ง หรือว่างเปล่า  ซึ่งหมายความว่า คุณสามารถใช้การทำซ้ำเงื่อนไขของคุณที่เป็น
          `ถ้า/ไม่เช่นนั้น (if/else)` ในแต่ละช่องที่ผึ้งบินผ่านไป
      course2_bee_conditionals_challenge2:
        courseD_bee_conditionals_challenge1_b: |-
          Just like the `if at flower` blocks, the code inside a `while nectar > 0` will only run if the bee is at a flower. The main differences is that the code inside will run repetitively until there is no nectar left.  Try this pattern:

          <xml>  <block type="bee_whileNectarAmount">
              <title name="ARG1">nectarRemaining</title>
              <title name="OP">&gt;</title>
              <title name="ARG2">0</title>                    <statement name="DO">
                                <block type="maze_nectar"/>
                              </statement>
            </block></xml>
      course2_collector_loops_challenge2:
        courseC_maze_loops_challenge2_a: The original code would work great - if there
          was only one piece of treasure in each pile!
        courseC_maze_loops_challenge2_b: Use loops so you don't run out of `collect`
          blocks!
      course2_collector_prog_challenge1:
        courseC_collector_prog_challenge1_a: คุณสามารถใช้คำสั่ง `เก็บ` ให้บ่อยๆมากขึ้น
          เพื่อเก็บสมบัติที่มีอยู่มากมาย
      course2_collector_prog_challenge2:
        courseC_collector_prog_challenge1_a: คุณสามารถใช้คำสั่ง `เก็บ` ให้บ่อยๆมากขึ้น
          เพื่อเก็บสมบัติที่มีอยู่มากมาย
      course2_harvester_loops_challenge1:
        courseC_harvester_loops_challenge1_a: Don't even think about try about trying
          this without loops!
        courseC_harvester_loops_challenge1_b: You can repeat `move forward` and `pick
          corn` as many times as you need to, then `turn right` at each corner.
        courseC_harvester_loops_challenge1_c: |-
          The best way to collect the first four corn uses a `repeat` block inside of another `repeat` block. You can use this pattern for the rest of the puzzle too!

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat">
                  <title name="TIMES">2</title>
                  <statement name="DO">
                    <block type="controls_repeat">
                      <title name="TIMES">2</title>
                      <statement name="DO">
                        <block type="maze_move">
                          <title name="DIR">moveForward</title>
                          <next>
                            <block type="harvester_corn"/>
                          </next>
                        </block>
                      </statement>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                        </block>
                      </next>
                    </block>
                  </statement>
                  </block></next></block></xml>
      course2_harvester_loops_challenge2:
        courseC_harvester_loops_challenge2_a: One way to solve this looks like a zig-zag.
          Another way looks like a spiral! There are lots of different solutions to
          a puzzle like this. Be persistent!
        courseC_harvester_loops_challenge2_b: You can repeat `move forward` and `pick
          lettuce` as many times as you need to, then turn at each corner.
        courseC_harvester_loops_challenge2_c: |-
          This zig-zag pattern can be repeated twice to finish the puzzle with just 20 blocks!

          ![](<https://images.code.org/26cfaf6fe4a275e266b51e9ef3711171-image-1493502306380.18.52 PM copy.png>)
        courseC_harvester_loops_challenge2_d: |-
          This spiral pattern can be coded with just 18 blocks!

          ![](<https://images.code.org/0bfc0a0ed6783fae908368a6e6d12c02-image-1493501358990.18.52 PM.png>)
      course2_maze_loops_challenge1:
        courseC_maze_loops_challenge1_a: Think about this path as being three different
          pieces. Each one has a pattern you can repeat.
        courseC_maze_loops_challenge1_b: ในระหว่างบล็อก `ทำซ้ำ`แต่ละบล็อก คุณจะต้อง
          `หันซ้าย` หรือ `หันขวา` เพื่อเตรียมสะแครทให้พร้อมสำหรับรูปแบบถัดไป
        courseC_maze_loops_challenge1_c: |-
          If you make it this far, you just need to `turn left` then `move forward` a few times. Don't give up!

          ![](<https://images.code.org/7696c5c16b8ddf1d53436cdc7fb6346d-image-1494101728016.14.34 PM.png>)
      course2_maze_programming_challenge2:
        courseC_maze_programming_challenge2_a: _If you send me backwards, be extra
          careful that I turn the correct way!_
        courseC_maze_programming_challenge2_b: The shortest solution use only 5 blocks,
          but it uses the `repeat` block!
      course3_artist_functions_challenge1:
        courseE_artist_functions_challenge1_a: If you call the function one more time,
          you can create the same design in the final corner. You can also `jump to`
          other positions or change the whole thing around however you want!
      course3_artist_functions_challenge2:
        courseE_artist_functions_challenge1_a: |-
          <xml>
            <block type="jump_to_xy">
              <title name="XPOS">350</title>
              <title name="YPOS">200</title>
            </block>
            </xml>

          This `jump to` block lets you move the zombie artist to any pixel on the grid, whenever you want. It works by moving him a number of pixels over to the right and a number of pixels down. This is always counted from the top left corner, which it means it doesn't matter where the zombie artist is _before_ the command is run!

          ![](https://images.code.org/b90fdddc778a27e199221271ce91307a-image-1496450976440.png)
      course3_bee_debugging_challenge1:
        courseD_bee_debugging_challenge1_a: Why does the first half of this program
          work? Think about why the bee needs to move backward. How much nectar does
          the bee collect each time it moves over a flower?
        courseD_bee_debugging_challenge1_b: On the way back, have the bee follow the
          same pattern. How much honey does the bee need to make each time it moves
          over a honey comb?
        courseD_bee_debugging_challenge1_c: |-
          After the bee makes it to the bottom row, have it repeat these commands:

          -   Repeat 2 times:
              -   Move forward
              -   Make 3 honey
          -   Move backward
      course3_bee_functions_challenge1:
        courseE_bee_functions_challenge1_a: "หากปริศนาดูเหมือนว่าจะท้าทายเกินไป ให้ลองสร้างฟังก์ชั่นทีละเล็กทีละน้อยในแต่ละครั้ง
          \ \n\nเพิ่มบล็อกบางอย่างแล้วลองเอาออก เพิ่มใหม่แล้วลองอีกครั้ง  ในไม่ช้า
          คุณจะได้รับความสำเร็จ!"
        courseE_bee_functions_challenge1_b: Remember to build your code inside of
          the green function block.
      course3_bee_functions_challenge2:
        courseE_bee_functions_challenge1_a: "หากปริศนาดูเหมือนว่าจะท้าทายเกินไป ให้ลองสร้างฟังก์ชั่นทีละเล็กทีละน้อยในแต่ละครั้ง
          \ \n\nเพิ่มบล็อกบางอย่างแล้วลองเอาออก เพิ่มใหม่แล้วลองอีกครั้ง  ในไม่ช้า
          คุณจะได้รับความสำเร็จ!"
        courseE_bee_functions_challenge1_b: Remember to build your code inside of
          the green function block.
      course3_bee_functions_challenge3:
        courseF_bee_functions_challenge1_a: You can use the functions in the tool
          box to help you. You can call a function inside of another function's definition!
      course3_bee_functions_challenge4:
        courseF_bee_functions_challenge2_a: |-
          If there is a path to the right, you should do the following:

          -   Get any nectar or make any honey.
          -   Turn right towards the side path.
          -   Move to the end of the side path.
          -   Turn right.

          If you repeat the above actions twice, you will be ready to move back down the main path.

          **Only click for another hint if you want to see the full solution!**
        courseF_bee_functions_challenge2_b: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat_ext" inline="true">
                  <value name="TIMES">
                    <block type="math_number">
                      <title name="NUM">4</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="maze_untilBlocked">
                      <statement name="DO">
                        <block type="maze_move">
                          <title name="DIR">moveForward</title>
                          <next>
                            <block type="maze_if">
                              <title name="DIR">isPathRight</title>
                              <statement name="DO">
                                <block type="procedures_callnoreturn" id="function">
                                  <mutation name="move and check"/>
                                </block>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </statement>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnLeft</title>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
            <block type="procedures_defnoreturn" editable="false" usercreated="true">
              <mutation/>
              <title name="NAME">check nectar or honey</title>
              <statement name="STACK">
                <block type="bee_ifElseFlower">
                  <title name="LOC">atFlower</title>
                  <statement name="DO">
                    <block type="bee_whileNectarAmount">
                      <title name="ARG1">nectarRemaining</title>
                      <title name="OP">&gt;</title>
                      <title name="ARG2">0</title>
                      <statement name="DO">
                        <block type="maze_nectar"/>
                      </statement>
                    </block>
                  </statement>
                  <statement name="ELSE">
                    <block type="bee_whileNectarAmount">
                      <title name="ARG1">honeyAvailable</title>
                      <title name="OP">&gt;</title>
                      <title name="ARG2">0</title>
                      <statement name="DO">
                        <block type="maze_honey"/>
                      </statement>
                    </block>
                  </statement>
                </block>
              </statement>
            </block>
            <block type="procedures_defnoreturn" deletable="false" movable="false" editable="false">
              <mutation/>
              <title name="NAME">move and check</title>
              <statement name="STACK">
                <block type="controls_repeat_ext" inline="true">
                  <value name="TIMES">
                    <block type="math_number">
                      <title name="NUM">2</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="procedures_callnoreturn">
                      <mutation name="check nectar or honey"/>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                          <next>
                            <block type="maze_untilBlocked">
                              <statement name="DO">
                                <block type="maze_move">
                                  <title name="DIR">moveForward</title>
                                </block>
                              </statement>
                              <next>
                                <block type="maze_turn">
                                  <title name="DIR">turnRight</title>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </statement>
            </block>
          </xml>
      course3_collector_debugging_challenge2:
        courseD_collector_debugging_challenge2_a: "Start by focusing on collect TWO
          gems from each of the first two piles.\n\n![](<https://images.code.org/8493c16a5b913b91e28b36eb2b280b8c-image-1494775939149.25.04
          AM copy.png>)\nUse these blocks.\n\n<xml>\n<block type=\"collector_collect\"></block>\n<block
          type=\"controls_repeat\" limit=\"2\">\n    <title name=\"TIMES\">2</title>\n
          \ </block>\n<block type=\"maze_move\" x=\"175px\" y=\"17px\">\n                    <title
          name=\"DIR\">moveForward</title>\n                  </block>\n                  \n
          \n   <block type=\"controls_repeat\" limit=\"2\" x=\"175px\" y=\"56px\">\n
          \   <title name=\"TIMES\">2</title>\n  </block>\n\n\n\n</xml>"
        courseD_collector_debugging_challenge2_b: "Next, collect the remaining gems
          in this row.\n\n![](<https://images.code.org/22fff9fb20a50beaf4800aa022a5deb0-image-1494775944657.25.04
          AM.png>)\nAdd these blocks to your program.\n\n<xml><block type=\"maze_move\">\n
          \                   <title name=\"DIR\">moveBackward</title>\n                  </block>\n<block
          type=\"controls_repeat\">\n        <title name=\"TIMES\">4</title>\n        <statement
          name=\"DO\">\n          \n        </statement>\n      </block>\n</xml>"
        courseD_collector_debugging_challenge2_c: "Finally, collect the remaining
          treasure. Add these blocks to your program.\n\n<xml>\n  <block type=\"maze_turn\">\n
          \               <title name=\"DIR\">turnRight</title>\n              </block>\n
          \     <block type=\"controls_repeat\">\n        <title name=\"TIMES\">4</title>\n
          \       <statement name=\"DO\">\n          \n        </statement>\n      </block>\n</xml>"
        courseD_collector_debugging_challenge2_d: |-
          Here is the complete solution for this puzzle.

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat">
                  <title name="TIMES">4</title>
                  <statement name="DO">
                    <block type="controls_repeat">
                      <title name="TIMES">4</title>
                      <statement name="DO">
                        <block type="controls_repeat">
                          <title name="TIMES">2</title>
                          <statement name="DO">
                            <block type="maze_move">
                              <title name="DIR">moveForward</title>
                              <next>
                                <block type="controls_repeat">
                                  <title name="TIMES">2</title>
                                  <statement name="DO">
                                    <block type="collector_collect"/>
                                  </statement>
                                </block>
                              </next>
                            </block>
                          </statement>
                          <next>
                            <block type="maze_move">
                              <title name="DIR">moveBackward</title>
                            </block>
                          </next>
                        </block>
                      </statement>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
          </xml>
      course3_farmer_condLoops_challenge1:
        courseD_farmer_condLoops_challenge1_a: The `STEP` button could be very helpful
          in this challenge.
        courseD_farmer_condLoops_challenge1_b: Normally you would just `pick pumpkin`
          if you are at a pumpkin. What else do you need to do if you're at a pumpkin?
      course3_farmer_condLoops_challenge2:
        courseD_farmer_condLoops_challenge2_a: The amount of each vegetable in each
          space varies. Use `while` loops for these.
      course3_maze_debugging_challenge1:
        courseC_maze_debugging_challenge1_a: Left or right? It's up to you!
        courseC_maze_debugging_challenge1_b: Scrat's path is the shape of a rectangle!
          He needs to turn the same way each time!
        courseC_maze_debugging_challenge1_c: If you are getting stuck, you can always
          start over, or remove all the code and find your own way!
      course3_maze_debugging_challenge2:
        courseC_maze_debugging_challenge2_a: One way to solve this is to add more
          steps forward in between the turns.
        courseC_maze_debugging_challenge2_b: If you are getting stuck, you can always
          start over or remove all the code and find your own way!
        courseC_maze_debugging_challenge2_c: |-
          There are two different paths you can follow just using `move forward`, and only four turns. If you find a way to use the `repeat` block, there may be even more!

          ![](<https://images.code.org/8a4665671cda35fea1f629a5bcc39e26-image-1493502743154.48.05 PM.png>)
      course3_playLab_challenge1:
        courseE_playLab_challenge1_a: |-
          Here are some things you could do when the player wins the game:

          -   Make the dinosaur vanish.
          -   Stop the squirrels.
          -   Make the squirrels and knight happy.
          -   Set a new background.
          -   Make the knight thank the player for helping.
          -   Make all of the actors vanish and show a "You Win!" message.
        courseE_playLab_challenge1_b: |-
          Here are some things you could do when the player loses the game:

          -   Make the knight vanish.
          -   Make the squirrels sad.
          -   Make the dinosaur say something.
          -   Set a new background.
          -   Make all of the actors vanish and show a "Game Over" message.
      course4_artist_binary_challenge2:
        courseD_artist_binary_challenge2_a: |-
          The best tip I have for you is to press `⟲ Start Over` if it starts to get really messy.

          There are only few lines wrong in the original program. If one approach fails, back up and try again. There is a solution!
      course4_artist_concept_challenge2:
        courseE_artist_concept_challenge2_a: Once you define a function, you can call
          it over and over again - whenever and wherever you want!
        courseE_artist_concept_challenge2_b: |-
          You can jump to different positions on the canvas using this command:

          <xml>  <block type="jump_to">
              <title name="VALUE">???</title>
            </block></xml>
      course4_artist_functions_challenge2:
        courseE_artist_functions_challenge1_a: |-
          <xml>
            <block type="jump_to_xy">
              <title name="XPOS">350</title>
              <title name="YPOS">200</title>
            </block>
            </xml>

          This `jump to` block lets you move the zombie artist to any pixel on the grid, whenever you want. It works by moving him a number of pixels over to the right and a number of pixels down. This is always counted from the top left corner, which it means it doesn't matter where the zombie artist is _before_ the command is run!

          ![](https://images.code.org/b90fdddc778a27e199221271ce91307a-image-1496450976440.png)
      course4_artist_variables_challenge1:
        courseF_artist_variables_challenge1_a: Each vertical line has a length of
          `10`. Each horizontal line should have a length of `length`.
        courseF_artist_variables_challenge1_b: You will want to increase the value
          of `length` by 10 **twice** inside the loop.
        courseF_artist_variables_challenge1_c: To complete the pattern you will need
          to turn left twice, turn right twice, and move forward a total of four times.
        courseF_artist_variables_challenge1_d: |-
          This puzzle just uses one loop. Without any variables, a similar path might just be a zig-zag.

          ![](<https://images.code.org/664fdd219502d004fb07886f834fa3d5-image-1496868743379.51.36 PM.png>)

          If you are having trouble, start by creating this image, then try to see where you can use variables to change the length of the horizontal lines.
        courseF_artist_variables_challenge1_e: |-
          Here is the solution.

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="variables_set" inline="false">
                  <title name="VAR">length</title>
                  <value name="VALUE">
                    <block type="math_number">
                      <title name="NUM">10</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_repeat_ext" inline="true">
                      <value name="TIMES">
                        <block type="math_number">
                          <title name="NUM">18</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="draw_move" inline="true">
                          <title name="DIR">moveForward</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">10</title>
                            </block>
                          </value>
                          <next>
                            <block type="draw_turn" inline="true">
                              <title name="DIR">turnRight</title>
                              <value name="VALUE">
                                <block type="math_number">
                                  <title name="NUM">90</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_move" inline="true">
                                  <title name="DIR">moveForward</title>
                                  <value name="VALUE">
                                    <block type="variables_get">
                                      <title name="VAR">length</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="variables_set" inline="false">
                                      <title name="VAR">length</title>
                                      <value name="VALUE">
                                        <block type="math_arithmetic" inline="true">
                                          <title name="OP">ADD</title>
                                          <value name="A">
                                            <block type="variables_get">
                                              <title name="VAR">length</title>
                                            </block>
                                          </value>
                                          <value name="B">
                                            <block type="math_number">
                                              <title name="NUM">10</title>
                                            </block>
                                          </value>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn" inline="true">
                                          <title name="DIR">turnLeft</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="draw_move" inline="true">
                                              <title name="DIR">moveForward</title>
                                              <value name="VALUE">
                                                <block type="math_number">
                                                  <title name="NUM">10</title>
                                                </block>
                                              </value>
                                              <next>
                                                <block type="draw_turn" inline="true">
                                                  <title name="DIR">turnLeft</title>
                                                  <value name="VALUE">
                                                    <block type="math_number">
                                                      <title name="NUM">90</title>
                                                    </block>
                                                  </value>
                                                  <next>
                                                    <block type="draw_move" inline="true">
                                                      <title name="DIR">moveForward</title>
                                                      <value name="VALUE">
                                                        <block type="variables_get">
                                                          <title name="VAR">length</title>
                                                        </block>
                                                      </value>
                                                      <next>
                                                        <block type="variables_set" inline="false">
                                                          <title name="VAR">length</title>
                                                          <value name="VALUE">
                                                            <block type="math_arithmetic" inline="true">
                                                              <title name="OP">ADD</title>
                                                              <value name="A">
                                                                <block type="variables_get">
                                                                  <title name="VAR">length</title>
                                                                </block>
                                                              </value>
                                                              <value name="B">
                                                                <block type="math_number">
                                                                  <title name="NUM">10</title>
                                                                </block>
                                                              </value>
                                                            </block>
                                                          </value>
                                                          <next>
                                                            <block type="draw_turn" inline="true">
                                                              <title name="DIR">turnRight</title>
                                                              <value name="VALUE">
                                                                <block type="math_number">
                                                                  <title name="NUM">90</title>
                                                                </block>
                                                              </value>
                                                            </block>
                                                          </next>
                                                        </block>
                                                      </next>
                                                    </block>
                                                  </next>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      course4_bee_fwp_challenge1:
        courseF_bee_fwp_challenge1_a: |-
          The main program should look something like this:

          <xml>
          <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="procedures_callnoreturn" inline="false">
                  <mutation name="pick row">
                    <arg name="length"/>
                  </mutation>
                  <value name="ARG0">
                    <block type="math_number">
                      <title name="NUM">3</title>
                    </block>
                  </value>
                  <next>
                    <block type="maze_move">
                      <title name="DIR">moveForward</title>
                      <next>
                        <block type="maze_move">
                          <title name="DIR">moveForward</title>
                          <next>
                            <block type="procedures_callnoreturn" inline="false">
                              <mutation name="pick row">
                                <arg name="length"/>
                              </mutation>
                              <value name="ARG0">
                                <block type="math_number">
                                  <title name="NUM">5</title>
                                </block>
                              </value>
                              <next>
                                <block type="maze_move">
                                  <title name="DIR">moveForward</title>
                                  <next>
                                    <block type="maze_move">
                                      <title name="DIR">moveForward</title>
                                      <next>
                                        <block type="procedures_callnoreturn" inline="false">
                                          <mutation name="pick row">
                                            <arg name="length"/>
                                          </mutation>
                                          <value name="ARG0">
                                            <block type="math_number">
                                              <title name="NUM">6</title>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="maze_move">
                                              <title name="DIR">moveForward</title>
                                              <next>
                                                <block type="maze_move">
                                                  <title name="DIR">moveForward</title>
                                                  <next>
                                                    <block type="procedures_callnoreturn" inline="false">
                                                      <mutation name="pick row">
                                                        <arg name="length"/>
                                                      </mutation>
                                                      <value name="ARG0">
                                                        <block type="math_number">
                                                          <title name="NUM">4</title>
                                                        </block>
                                                      </value>
                                                    </block>
                                                  </next>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block></xml>
        courseF_bee_fwp_challenge1_b: |-
          Look at how much corn is available to harvest in each space. Do you see the counter pattern? The `length` parameter should be used to set the maximum value in the `for loop`.

          Don't forget to have the farmer move back to the main path after harvesting!
        courseF_bee_fwp_challenge1_c: |-
          Place a `for loop` inside a function and set it to count from `1` to `length` by `1`.
          Inside this loop, you should move forward and pick all of the corn.

          <xml>
          <block type="controls_for" inline="true">
                      <title name="VAR">counter</title>
                      <value name="FROM">
                        <block type="math_number">
                          <title name="NUM">1</title>
                        </block>
                      </value>
                      <value name="TO">
                        <block type="parameters_get">
                          <title name="VAR">length</title>
                        </block>
                      </value>
                      <value name="BY">
                        <block type="math_number">
                          <title name="NUM">1</title>
                        </block>
                      </value>
                      <statement name="DO">
                      </statement>
          </block></xml>
        courseF_bee_fwp_challenge1_d: |-
          Inside the `for loop` you will want to `move forward` then `get nectar` **counter times**.
          After the `for loop` you can just `move backward` **length times**.

          You may need to read this hint several times to understand it. The part in **bold** is a hint about how to use the two `repeat` loops you will need.
        courseF_bee_fwp_challenge1_e: |-
          **Here is the solution:**

          <xml>
            <block type="procedures_defnoreturn" editable="false" usercreated="true">
              <mutation>
                <arg name="length"/>
              </mutation>
              <title name="NAME">pick row</title>
              <statement name="STACK">
                <block type="maze_turn">
                  <title name="DIR">turnLeft</title>
                  <next>
                    <block type="controls_for" inline="true">
                      <title name="VAR">counter</title>
                      <value name="FROM">
                        <block type="math_number">
                          <title name="NUM">1</title>
                        </block>
                      </value>
                      <value name="TO">
                        <block type="parameters_get">
                          <title name="VAR">length</title>
                        </block>
                      </value>
                      <value name="BY">
                        <block type="math_number">
                          <title name="NUM">1</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="maze_move">
                          <title name="DIR">moveForward</title>
                          <next>
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="harvester_corn"/>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </statement>
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="parameters_get">
                              <title name="VAR">length</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="maze_move">
                              <title name="DIR">moveBackward</title>
                            </block>
                          </statement>
                          <next>
                            <block type="maze_turn">
                              <title name="DIR">turnRight</title>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </statement>
              </block></xml>
      course4_bee_fwp_challenge2:
        courseF_bee_fwp_challenge2_a: |-
          Start by making sure you understand how this function is _supposed_ to work. As the farmer moves down each path, she will only try to collect corn. Instead, how can you make her check for each of the 3 vegetables and pick only the one she finds?

          Add conditional statements to the function to check for corn, pumpkins, and lettuce.
        courseF_bee_fwp_challenge2_b: "Are you running out of `move forward` blocks?\nTry
          using a _second_ `for loop` in your main program. \n\n**Note:** Be careful
          not to confuse `counter` with `counter2` in your code."
        courseF_bee_fwp_challenge2_c: |-
          **Here is what your function should look like:**

          <xml><block type="procedures_defnoreturn" deletable="false" movable="false" editable="false" usercreated="true">
              <mutation>
                <arg name="length"/>
              </mutation>
              <title name="NAME">pick row</title>
              <statement name="STACK">
                <block type="maze_turn">
                  <title name="DIR">turnLeft</title>
                  <next>
                    <block type="controls_for" inline="true">
                      <title name="VAR">counter</title>
                      <value name="FROM">
                        <block type="math_number">
                          <title name="NUM">1</title>
                        </block>
                      </value>
                      <value name="TO">
                        <block type="parameters_get">
                          <title name="VAR">length</title>
                        </block>
                      </value>
                      <value name="BY">
                        <block type="math_number">
                          <title name="NUM">1</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="maze_move">
                          <title name="DIR">moveForward</title>
                          <next>
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="harvester_ifHasCrop">
                                  <title name="LOC">Corn</title>
                                  <statement name="DO">
                                    <block type="harvester_corn"/>
                                  </statement>
                                  <next>
                                    <block type="harvester_ifHasCrop">
                                      <title name="LOC">Pumpkin</title>
                                      <statement name="DO">
                                        <block type="harvester_pumpkin"/>
                                      </statement>
                                      <next>
                                        <block type="harvester_ifHasCrop">
                                          <title name="LOC">Lettuce</title>
                                          <statement name="DO">
                                            <block type="harvester_lettuce"/>
                                          </statement>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </statement>
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="parameters_get">
                              <title name="VAR">length</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="maze_move">
                              <title name="DIR">moveBackward</title>
                            </block>
                          </statement>
                          <next>
                            <block type="maze_turn">
                              <title name="DIR">turnRight</title>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </statement>
            </block>
          </xml>
        courseF_bee_fwp_challenge2_d: |-
          **Here is what your main program should look like:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_for" inline="true">
                  <title name="VAR">counter2</title>
                  <value name="FROM">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <value name="TO">
                    <block type="math_number">
                      <title name="NUM">6</title>
                    </block>
                  </value>
                  <value name="BY">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="maze_move">
                      <title name="DIR">moveForward</title>
                      <next>
                        <block type="procedures_callnoreturn" inline="false">
                          <mutation name="pick row">
                            <arg name="length"/>
                          </mutation>
                          <value name="ARG0">
                            <block type="variables_get">
                              <title name="VAR">counter2</title>
                            </block>
                          </value>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
              </block></xml>
      course4_collector_nested_loops_challenge2:
        courseD_bee_nested_loops_challenge2_a: Don't forget that you can `repeat`
          a single command or a longer pattern. You can even `repeat` a `repeat` block!
        courseD_bee_nested_loops_challenge2_b: To get all 4 gems, first use a loop
          to move away from the center. Turn left or right, then use a nested loop
          to move from the first pile of treasure to the second. If you repeat the
          nested loop enough times, the collector will move around the _entire_ cave!
        courseD_bee_nested_loops_challenge2_c: The shortest program that reaches all
          the treasure uses only one `collect` block and two turns.
        courseD_bee_nested_loops_challenge2_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat_dropdown">
                  <title name="TIMES" config="3-10">3</title>
                  <statement name="DO">
                    <block type="maze_move">
                      <title name="DIR">moveForward</title>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_turn">
                      <title name="DIR">turnLeft</title>
                      <next>
                        <block type="controls_repeat_dropdown">
                          <title name="TIMES" config="3-10">3</title>
                          <statement name="DO">
                            <block type="collector_collect">
                              <next>
                                <block type="controls_repeat_dropdown">
                                  <title name="TIMES" config="3-10">3</title>
                                  <statement name="DO">
                                    <block type="maze_move">
                                      <title name="DIR">moveForward</title>
                                    </block>
                                  </statement>
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnLeft</title>
                                      <next>
                                        <block type="controls_repeat_dropdown">
                                          <title name="TIMES" config="3-10">3</title>
                                          <statement name="DO">
                                            <block type="maze_move">
                                              <title name="DIR">moveForward</title>
                                            </block>
                                          </statement>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </statement>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      course4_harvester_nested_loops_challenge1:
        courseD_harvester_nested_loops_challenge1_a: You have probably already used
          a loop to create a zig-zag pattern. If you remember that algorithm, you
          can make a few additions to it here.
      course4_playlab_variables_challenge1:
        courseF_playlab_variables_challenge1_a: |-
          You will need additional blocks from the tool box to get the actors to talk.

          <xml><block type="studio_saySpriteParamsTime" inline="true">
                <value name="SPRITE">
                  <block type="math_number">
                    <title name="NUM">1</title>
                  </block>
                </value>
                                <value name="TEXT">
                            <block type="text">
                              <title name="TEXT">Knock knock.</title>
                            </block>
                          </value>
                <value name="TIME">
                  <block type="math_number">
                    <title name="NUM">1</title>
                  </block>
                </value>
                </block></xml>
      courseA_artist_loops2:
        courseA_artist_loops2_a: ไม่สามารถคิดออกว่าวิธีการวาดเส้นทำได้อย่างไร  ให้เริ่มด้วยการต่อบล็อกต่างๆ
          เข้าไปกับบล็อก<xml><block type="when_run"/></xml>เพื่อดูว่าเกิดอะไรขึ้น
        courseA_artist_loops2_b: ใช้บล็อกนี้ <xml><block type="simple_move_right"/></xml>เพื่อแก้ปริศนาในด่านนี้
      courseA_artist_loops2_2018:
        courseA_artist_loops2_a: ไม่สามารถคิดออกว่าวิธีการวาดเส้นทำได้อย่างไร  ให้เริ่มด้วยการต่อบล็อกต่างๆ
          เข้าไปกับบล็อก<xml><block type="when_run"/></xml>เพื่อดูว่าเกิดอะไรขึ้น
        courseA_artist_loops2_b: ใช้บล็อกนี้ <xml><block type="simple_move_right"/></xml>เพื่อแก้ปริศนาในด่านนี้
      courseA_artist_loops2_2019:
        courseA_artist_loops2_a: ไม่สามารถคิดออกว่าวิธีการวาดเส้นทำได้อย่างไร  ให้เริ่มด้วยการต่อบล็อกต่างๆ
          เข้าไปกับบล็อก<xml><block type="when_run"/></xml>เพื่อดูว่าเกิดอะไรขึ้น
        courseA_artist_loops2_b: ใช้บล็อกนี้ <xml><block type="simple_move_right"/></xml>เพื่อแก้ปริศนาในด่านนี้
      courseA_artist_loops3:
        courseA_artist_loops3_a: ลองลากตามรอยช้าๆไปตามโปรแกรม ด้วยการใช้นิ้วมือของคุณ
          เพื่อดูว่ามีอะไรไม่ถูกต้อง
        courseA_artist_loops3_b: |-
          คุณต้องใช้บล็อกแบบนี้เพื่อแก้ปริศนา

          ![](<https://images.code.org/16a3ab2e639eacee18ee5405ed9966dc-image-1498670745551.24.49 AM.png>)
      courseA_artist_loops3_2018:
        courseA_artist_loops3_a: ลองลากตามรอยช้าๆไปตามโปรแกรม ด้วยการใช้นิ้วมือของคุณ
          เพื่อดูว่ามีอะไรไม่ถูกต้อง
        courseA_artist_loops3_b: |-
          คุณต้องใช้บล็อกแบบนี้เพื่อแก้ปริศนา

          ![](<https://images.code.org/16a3ab2e639eacee18ee5405ed9966dc-image-1498670745551.24.49 AM.png>)
      courseA_artist_loops3_2019:
        courseA_artist_loops3_a: ลองลากตามรอยช้าๆไปตามโปรแกรม ด้วยการใช้นิ้วมือของคุณ
          เพื่อดูว่ามีอะไรไม่ถูกต้อง
        courseA_artist_loops3_b: |-
          คุณต้องใช้บล็อกแบบนี้เพื่อแก้ปริศนา

          ![](<https://images.code.org/16a3ab2e639eacee18ee5405ed9966dc-image-1498670745551.24.49 AM.png>)
      courseA_artist_loops4:
        courseA_artist_loops4_a: ถ้าคุณต้องการให้ลูปซ้ำมากกว่า 4 ครั้งคุณสามารถเปลี่ยนหมายเลขที่ด้านบนของบล็อกได้
        courseA_artist_loops4_b: |-
          เนื่องจากคุณสามารถใข้บล็อก<xml><block type="simple_move_right"/></xml>ได้เพียงครั้งเดียว ลองวางมันไว้ภายในบล็อกลูป
          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="2-6">5</title></block></xml>
      courseA_artist_loops4_2018:
        courseA_artist_loops4_a: ถ้าคุณต้องการให้ลูปซ้ำมากกว่า 4 ครั้งคุณสามารถเปลี่ยนหมายเลขที่ด้านบนของบล็อกได้
        courseA_artist_loops4_b: |-
          เนื่องจากคุณสามารถใข้บล็อก<xml><block type="simple_move_right"/></xml>ได้เพียงครั้งเดียว ลองวางมันไว้ภายในบล็อกลูป
          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="2-6">5</title></block></xml>
      courseA_artist_loops4_2019:
        courseA_artist_loops4_a: ถ้าคุณต้องการให้ลูปซ้ำมากกว่า 4 ครั้งคุณสามารถเปลี่ยนหมายเลขที่ด้านบนของบล็อกได้
        courseA_artist_loops4_b: |-
          เนื่องจากคุณสามารถใข้บล็อก<xml><block type="simple_move_right"/></xml>ได้เพียงครั้งเดียว ลองวางมันไว้ภายในบล็อกลูป
          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="2-6">5</title></block></xml>
      courseA_artist_loops5:
        courseA_artist_loops5_a: ลองใช้สิ่งที่คุณได้เรียนรู้เกี่ยวกับบล็อก<xml><block
          type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
          เพื่อทำให้ปริศนานี้เสร็จสมบูรณ์!
        courseA_artist_loops5_b: ถ้าคุณต้องการให้ลูปซ้ำมากกว่า 4 ครั้งคุณสามารถเปลี่ยนหมายเลขที่ด้านบนของบล็อกได้
        courseA_artist_loops5_c: |-
          เนื่องจากคุณสามารถใข้บล็อก<xml><block type="simple_move_right"/></xml>ได้เพียงครั้งเดียว ลองวางมันไว้ภายในบล็อกลูป
          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
      courseA_artist_loops5_2018:
        courseA_artist_loops5_a: ลองใช้สิ่งที่คุณได้เรียนรู้เกี่ยวกับบล็อก<xml><block
          type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
          เพื่อทำให้ปริศนานี้เสร็จสมบูรณ์!
        courseA_artist_loops5_b: ถ้าคุณต้องการให้ลูปซ้ำมากกว่า 4 ครั้งคุณสามารถเปลี่ยนหมายเลขที่ด้านบนของบล็อกได้
        courseA_artist_loops5_c: |-
          เนื่องจากคุณสามารถใข้บล็อก<xml><block type="simple_move_right"/></xml>ได้เพียงครั้งเดียว ลองวางมันไว้ภายในบล็อกลูป
          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
      courseA_artist_loops5_2019:
        courseA_artist_loops5_a: ลองใช้สิ่งที่คุณได้เรียนรู้เกี่ยวกับบล็อก<xml><block
          type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
          เพื่อทำให้ปริศนานี้เสร็จสมบูรณ์!
        courseA_artist_loops5_b: ถ้าคุณต้องการให้ลูปซ้ำมากกว่า 4 ครั้งคุณสามารถเปลี่ยนหมายเลขที่ด้านบนของบล็อกได้
        courseA_artist_loops5_c: |-
          เนื่องจากคุณสามารถใข้บล็อก<xml><block type="simple_move_right"/></xml>ได้เพียงครั้งเดียว ลองวางมันไว้ภายในบล็อกลูป
          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
      courseA_artist_loops6:
        courseA_artist_loops6_a: คิดไม่ออก..วิธีที่จะวาดเนินเขาหรือเปล่า?  ลองเล่นกับบล็อกต่างๆ
          ดูสักนิด เพื่อดูว่าแต่ละบล็อกวาดอะไร
        courseA_artist_loops6_b: คุณต้องใช้บล็อก 2 บล็อกที่วาดไปสองทิศทางเพื่อแก้ปริศนานี้
      courseA_artist_loops6_2018:
        courseA_artist_loops6_a: คิดไม่ออก..วิธีที่จะวาดเนินเขาหรือเปล่า?  ลองเล่นกับบล็อกต่างๆ
          ดูสักนิด เพื่อดูว่าแต่ละบล็อกวาดอะไร
        courseA_artist_loops6_b: คุณต้องใช้บล็อก 2 บล็อกที่วาดไปสองทิศทางเพื่อแก้ปริศนานี้
      courseA_artist_loops6_2019:
        courseA_artist_loops6_a: คิดไม่ออก..วิธีที่จะวาดเนินเขาหรือเปล่า?  ลองเล่นกับบล็อกต่างๆ
          ดูสักนิด เพื่อดูว่าแต่ละบล็อกวาดอะไร
        courseA_artist_loops6_b: คุณต้องใช้บล็อก 2 บล็อกที่วาดไปสองทิศทางเพื่อแก้ปริศนานี้
      courseA_artist_loops7:
        courseA_artist_loops7_a: คิดไม่ออกว่าจะวางลูปไว้ที่ไหน? ลองเขียนโค้ดทีละขั้นตอนและค้นหารูปแบบดู
        courseA_artist_loops7_b: เขียนรหัสสำหรับคลื่นหนึ่งลูกก่อน แล้วดูว่าคุณสามารถทำซ้ำเพื่อที่จะวาดอีกสองลูกได้ไหม
        courseA_artist_loops7_c: |-
          โปรดจำไว้ว่าคุณสามารถใส่บล็อกได้มากกว่าหนึ่งบล็อกไว้ในลูป<xml>\<block type=""controls\_repeat"">

          <title name=""TIMES"">???</title>
          </block></xml>
      courseA_artist_loops7_2018:
        courseA_artist_loops7_a: คิดไม่ออกว่าจะวางลูปไว้ที่ไหน? ลองเขียนโค้ดทีละขั้นตอนและค้นหารูปแบบดู
        courseA_artist_loops7_b: เขียนรหัสสำหรับคลื่นหนึ่งลูกก่อน แล้วดูว่าคุณสามารถทำซ้ำเพื่อที่จะวาดอีกสองลูกได้ไหม
        courseA_artist_loops7_c: |-
          โปรดจำไว้ว่าคุณสามารถใส่บล็อคได้มากกว่าหนึ่งบล็อกไว้ในลูป<xml>\<block type=""controls\_repeat"">

          <title name=""TIMES"">???</title>
          </block></xml>
      courseA_artist_loops7_2019:
        courseA_artist_loops7_a: คิดไม่ออกว่าจะวางลูปไว้ที่ไหน? ลองเขียนโค้ดทีละขั้นตอนและค้นหารูปแบบดู
        courseA_artist_loops7_b: เขียนรหัสสำหรับคลื่นหนึ่งลูกก่อน แล้วดูว่าคุณสามารถทำซ้ำเพื่อที่จะวาดอีกสองลูกได้ไหม
        courseA_artist_loops7_c: |-
          โปรดจำไว้ว่าคุณสามารถใส่บล็อคได้มากกว่าหนึ่งบล็อกไว้ในลูป<xml>\<block type=""controls\_repeat"">

          <title name=""TIMES"">???</title>
          </block></xml>
      courseA_artist_loops8:
        courseA_artist_loops8_a: ลองเรียกใช้งานโค้ด เพื่อดูสิ่งที่ถูกเขียนขึ้นไว้แล้วว่า
          ทำอะไรให้คุณบ้าง
        courseA_artist_loops8_b: คุณจะวนลูปโค้ดที่คุณได้รับมาอย่างไร
        courseA_artist_loops8_c: |-
          โค้ดทำอะไรได้บ้าง
          มันควรจะทำอะไร?
          มันบอกอะไรแก่คุณ?
      courseA_artist_loops8_2018:
        courseA_artist_loops8_a: ลองเรียกใช้งานโค้ด เพื่อดูสิ่งที่ถูกเขียนขึ้นไว้แล้วว่า
          ทำอะไรให้คุณบ้าง
        courseA_artist_loops8_b: คุณจะวนลูปโค้ดที่คุณได้รับมาอย่างไร
        courseA_artist_loops8_c: |-
          โค้ดทำอะไรได้บ้าง
          มันควรจะทำอะไร?
          มันบอกอะไรแก่คุณ?
      courseA_artist_loops8_2019:
        courseA_artist_loops8_a: ลองเรียกใช้งานโค้ด เพื่อดูสิ่งที่ถูกเขียนขึ้นไว้แล้วว่า
          ทำอะไรให้คุณบ้าง
        courseA_artist_loops8_b: คุณจะวนลูปโค้ดที่คุณได้รับมาอย่างไร
        courseA_artist_loops8_c: |-
          โค้ดทำอะไรได้บ้าง
          มันควรจะทำอะไร?
          มันบอกอะไรแก่คุณ?
      courseA_artist_loops9:
        courseA_artist_loops9_a: เพิ่มบล็อกอีกหนึ่งบล็อกให้กับโค้ดที่ให้มา เพื่อวาดส่วนที่เหลือของบันได
        courseA_artist_loops9_b: "บล็อกที่คุณเพิ่มควรไปอยู่ภายในของลูป<xml>\\<block
          type=\"\"controls_repeat_simplified\\_dropdown\"\">\\<title name=\"\"TIMES\"\"
          config=\"\"3-10\"\">5</title></block>\n</xml> "
        courseA_artist_loops9_c: ถ้าคุณไม่สามารถหาตำแหน่งที่จะวางลูปไว้ ให้ลองเขียนโค้ดทีละขั้นตอนและมองหารูปแบบ
      courseA_artist_loops9_2018:
        courseA_artist_loops9_a: เพิ่มบล็อกอีกหนึ่งบล็อกให้กับโค้ดที่ให้มา เพื่อวาดส่วนที่เหลือของบันได
        courseA_artist_loops9_b: "บล็อกที่คุณเพิ่มควรไปอยู่ภายในของลูป<xml>\\<block
          type=\"\"controls_repeat_simplified\\_dropdown\"\">\\<title name=\"\"TIMES\"\"
          config=\"\"3-10\"\">5</title></block>\n</xml> "
        courseA_artist_loops9_c: ถ้าคุณไม่สามารถหาตำแหน่งที่จะวางลูปไว้ ให้ลองเขียนโค้ดทีละขั้นตอนและมองหารูปแบบ
      courseA_artist_loops9_2019:
        courseA_artist_loops9_a: เพิ่มบล็อกอีกหนึ่งบล็อกให้กับโค้ดที่ให้มา เพื่อวาดส่วนที่เหลือของบันได
        courseA_artist_loops9_b: "บล็อกที่คุณเพิ่มควรไปอยู่ภายในของลูป<xml>\\<block
          type=\"\"controls_repeat_simplified\\_dropdown\"\">\\<title name=\"\"TIMES\"\"
          config=\"\"3-10\"\">5</title></block>\n</xml> "
        courseA_artist_loops9_c: ถ้าคุณไม่สามารถหาตำแหน่งที่จะวางลูปไว้ ให้ลองเขียนโค้ดทีละขั้นตอนและมองหารูปแบบ
      courseA_artist_loops_challenge2a:
        courseA_artist_loops_challenge2_a: Blocks like this <xml>  <block type="simple_move_up_left"/></xml>
          will let your artist move at a slant!
        courseA_artist_loops_challenge2_b: When you finish one tent, `jump` up twice
          to get to the next!
        courseA_artist_loops_challenge2_c: All of your blocks will need to be inside
          of a loop to finish this puzzle.
      courseA_artist_loops_challenge2a_2018:
        courseA_artist_loops_challenge2_a: Blocks like this <xml>  <block type="simple_move_up_left"/></xml>
          will let your artist move at a slant!
        courseA_artist_loops_challenge2_b: When you finish one tent, `jump` up twice
          to get to the next!
        courseA_artist_loops_challenge2_c: All of your blocks will need to be inside
          of a loop to finish this puzzle.
      courseA_artist_loops_challenge2a_2019:
        courseA_artist_loops_challenge2_a: Blocks like this <xml>  <block type="simple_move_up_left"/></xml>
          will let your artist move at a slant!
        courseA_artist_loops_challenge2_b: When you finish one tent, `jump` up twice
          to get to the next!
        courseA_artist_loops_challenge2_c: All of your blocks will need to be inside
          of a loop to finish this puzzle.
      courseA_collector_loops1:
        courseA_collector_loops1_a: |-
          หลังจากที่คุณได้มาอยู่ที่ตารางที่มีสมบัติแล้ว ให้ใช้บล็อกนี้เพื่อเก็บสมบัติ
          <xml>  <block type="collector_collect"/></xml>
        courseA_collector_loops1_b: วิธีการแก้ปัญหาง่ายๆ คือไปทางตะวันออก 2 ครั้งแล้วเก็บสมบัติ
      courseA_collector_loops1_2018:
        courseA_collector_loops1_a: |-
          หลังจากที่คุณได้มาอยู่ที่ตารางที่มีสมบัติแล้ว ให้ใช้บล็อกนี้เพื่อเก็บสมบัติ
          <xml>  <block type="collector_collect"/></xml>
        courseA_collector_loops1_b: วิธีการแก้ปัญหาง่ายๆ คือไปทางตะวันออก 2 ครั้งแล้วเก็บสมบัติ
      courseA_collector_loops1_2019:
        courseA_collector_loops1_a: |-
          หลังจากที่คุณได้มาอยู่ที่ตารางที่มีสมบัติแล้ว ให้ใช้บล็อกนี้เพื่อเก็บสมบัติ
          <xml>  <block type="collector_collect"/></xml>
        courseA_collector_loops1_b: วิธีการแก้ปัญหาง่ายๆ คือไปทางตะวันออก 2 ครั้งแล้วเก็บสมบัติ
      courseA_collector_loops2:
        courseA_collector_loops2_a: คุณต้องขยับเดินเข้าไปก่อนที่คุณจะสามารถเก็บรวบรวมสมบัติได้
        courseA_collector_loops2_b: |-
          หลังจากที่คุณได้มาอยู่ที่ตารางที่มีสมบัติแล้ว ให้ใช้บล็อกนี้เพื่อเก็บสมบัติ
          <xml>  <block type="collector_collect"/></xml>
      courseA_collector_loops2_2018:
        courseA_collector_loops2_a: คุณต้องขยับเดินเข้าไปก่อนที่คุณจะสามารถเก็บรวบรวมสมบัติได้
        courseA_collector_loops2_b: |-
          หลังจากที่คุณได้มาอยู่ที่ตารางที่มีสมบัติแล้ว ให้ใช้บล็อกนี้เพื่อเก็บสมบัติ
          <xml>  <block type="collector_collect"/></xml>
      courseA_collector_loops2_2019:
        courseA_collector_loops2_a: คุณต้องขยับเดินเข้าไปก่อนที่คุณจะสามารถเก็บรวบรวมสมบัติได้
        courseA_collector_loops2_b: |-
          หลังจากที่คุณได้มาอยู่ที่ตารางที่มีสมบัติแล้ว ให้ใช้บล็อกนี้เพื่อเก็บสมบัติ
          <xml>  <block type="collector_collect"/></xml>
      courseA_collector_loops3:
        courseA_collector_loops3_a: ลองใช้บล็อกลูป <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml>ดู!
        courseA_collector_loops3_b: โปรดจำไว้ว่า คุณสามารถใส่บล็อกมากกว่าหนึ่งบล็อกภายในบล็อกลูป<xml><block
          type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
      courseA_collector_loops3_2018:
        courseA_collector_loops3_a: ลองใช้บล็อกลูป <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml>ดู!
        courseA_collector_loops3_b: โปรดจำไว้ว่า คุณสามารถใส่บล็อกมากกว่าหนึ่งบล็อกภายในบล็อกลูป<xml><block
          type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
      courseA_collector_loops3_2019:
        courseA_collector_loops3_a: "Try using a \n\n<xml><block type=\"controls_repeat_simplified_dropdown\"><title
          name=\"TIMES\" config=\"3-10\">???</title></block></xml>\n\n loop!"
        courseA_collector_loops3_b: โปรดจำไว้ว่า คุณสามารถใส่บล็อกมากกว่าหนึ่งบล็อกภายในบล็อกลูป<xml><block
          type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
      courseA_collector_loops4:
        courseA_collector_loops4_a: เพื่อที่จะเปลี่ยนให้ลอเรลไปไกลได้เท่าใดนั้น ให้เปลี่ยนจำนวนครั้งของรอบที่ลูปต้องวนซ้ำ
        courseA_collector_loops4_b: อย่าลืมว่า ลอเรลต้องเดินลงไปเพื่อเก็บสมบัติหลังจากเธอเสร็จจากการวนลูปทำซ้ำ<xml><block
          type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>เรียบร้อยแล้ว!
      courseA_collector_loops4_2018:
        courseA_collector_loops4_a: เพื่อที่จะเปลี่ยนให้ลอเรลไปไกลได้เท่าใดนั้น ให้เปลี่ยนจำนวนครั้งของรอบที่ลูปต้องวนซ้ำ
        courseA_collector_loops4_b: อย่าลืมว่า ลอเรลต้องเดินลงไปเพื่อเก็บสมบัติหลังจากเธอเสร็จจากการวนลูปทำซ้ำ<xml><block
          type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>เรียบร้อยแล้ว!
      courseA_collector_loops4_2019:
        courseA_collector_loops4_a: เพื่อที่จะเปลี่ยนให้ลอเรลไปไกลได้เท่าใดนั้น ให้เปลี่ยนจำนวนครั้งของรอบที่ลูปต้องวนซ้ำ
        courseA_collector_loops4_b: อย่าลืมว่า ลอเรลต้องเดินลงไปเพื่อเก็บสมบัติหลังจากเธอเสร็จจากการวนลูปทำซ้ำ<xml><block
          type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>เรียบร้อยแล้ว!
      courseA_collector_loops5:
        courseA_collector_loops5_a: ถ้าคุณไม่สามารถหาคำตอบได้ทันที ให้ลองใช้กระดาษสักแผ่นหนึ่งเพื่อที่จะลองวาดดูว่าลูกศรใดที่คุณจะต้องใช้และมองหารูปแบบว่าเป็นแบบใด
        courseA_collector_loops5_b: ลองแยกปัญหาออกเป็น 2 ส่วน ส่วนที่เคลื่อนไหวไปทางด้านข้างและส่วนที่เคลื่อนไหวไปทางด้านล่าง
        courseA_collector_loops5_c: คุณจะต้องเริ่มต้นด้วยลูปที่พาลอเรลไปทางทิศตะวันตกและเก็บรวบรวมสมบัติไปตลอดทาง
      courseA_collector_loops5_2018:
        courseA_collector_loops5_a: ถ้าคุณไม่สามารถหาคำตอบได้ทันที ให้ลองใช้กระดาษสักแผ่นหนึ่งเพื่อที่จะลองวาดดูว่าลูกศรใดที่คุณจะต้องใช้และมองหารูปแบบว่าเป็นแบบใด
        courseA_collector_loops5_b: ลองแยกปัญหาออกเป็น 2 ส่วน ส่วนที่เคลื่อนไหวไปทางด้านข้างและส่วนที่เคลื่อนไหวไปทางด้านล่าง
        courseA_collector_loops5_c: คุณจะต้องเริ่มต้นด้วยลูปที่พาลอเรลไปทางทิศตะวันตกและเก็บรวบรวมสมบัติไปตลอดทาง
      courseA_collector_loops5_2019:
        courseA_collector_loops5_a: ถ้าคุณไม่สามารถหาคำตอบได้ทันที ให้ลองใช้กระดาษสักแผ่นหนึ่งเพื่อที่จะลองวาดดูว่าลูกศรใดที่คุณจะต้องใช้และมองหารูปแบบว่าเป็นแบบใด
        courseA_collector_loops5_b: ลองแยกปัญหาออกเป็น 2 ส่วน ส่วนที่เคลื่อนไหวไปทางด้านข้างและส่วนที่เคลื่อนไหวไปทางด้านล่าง
        courseA_collector_loops5_c: คุณจะต้องเริ่มต้นด้วยลูปที่พาลอเรลไปทางทิศตะวันตกและเก็บรวบรวมสมบัติไปตลอดทาง
      courseA_collector_loops6:
        courseA_collector_loops6_a: ไม่สามารถหาได้ว่ามีอะไรผิดปกติ ลองเรียกใช้งานโค้ดครั้งหนึ่งหรือสองครั้งเพื่อดูว่าเกิดอะไรขึ้น
        courseA_collector_loops6_b: โซลูชั่นที่สั้นที่สุด ได้จากการใช้บล็อกลูป <xml><block
          type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
          จำนวนสองบล็อกวางไว้ให้ตามกันมา
      courseA_collector_loops6_2018:
        courseA_collector_loops6_a: ไม่สามารถหาได้ว่ามีอะไรผิดปกติ ลองเรียกใช้งานโค้ดครั้งหนึ่งหรือสองครั้งเพื่อดูว่าเกิดอะไรขึ้น
        courseA_collector_loops6_b: โซลูชั่นที่สั้นที่สุด ได้จากการใช้บล็อกลูป <xml><block
          type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
          จำนวนสองบล็อกวางไว้ให้ตามกันมา
      courseA_collector_loops6_2019:
        courseA_collector_loops6_a: ไม่สามารถหาได้ว่ามีอะไรผิดปกติ ลองเรียกใช้งานโค้ดครั้งหนึ่งหรือสองครั้งเพื่อดูว่าเกิดอะไรขึ้น
        courseA_collector_loops6_b: โซลูชั่นที่สั้นที่สุด ได้จากการใช้บล็อกลูป <xml><block
          type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
          จำนวนสองบล็อกวางไว้ให้ตามกันมา
      courseA_collector_loops7:
        courseA_collector_loops7_a: ถ้าคุณไม่สามารถคิดออกว่าอะไรจะเกิดขึ้นถัดมา ลองเรียกใช้งานโค้ดเพื่อดูว่าเมื่อจบแล้วลอเรลได้อะไรบ้าง
      courseA_collector_loops7_2018:
        courseA_collector_loops7_a: ถ้าคุณไม่สามารถคิดออกว่าอะไรจะเกิดขึ้นถัดมา ลองเรียกใช้งานโค้ดเพื่อดูว่าเมื่อจบแล้วลอเรลได้อะไรบ้าง
      courseA_collector_loops7_2019:
        courseA_collector_loops7_a: ถ้าคุณไม่สามารถคิดออกว่าอะไรจะเกิดขึ้นถัดมา ลองเรียกใช้งานโค้ดเพื่อดูว่าเมื่อจบแล้วลอเรลได้อะไรบ้าง
      courseA_collector_loops8:
        courseA_collector_loops8_a: หากคุณมีปัญหาในการแก้ปริศนานี้ให้ ลองเขียนสิ่งที่คุณคิดลงบนกระดาษและมองหารูปแบบดู
        courseA_collector_loops8_b: ลองแยกปริศนานี้ออกเป็นปัญหาสามส่วน และใช้บล็อกลูปสำหรับการเคลื่อนไหวแต่ละทิศทาง
        courseA_collector_loops8_c: จำไว้ว่าคุณสามารถเขียนโค้ดทีละหนึ่งชิ้นแล้วกด
          " เริ่ม" เพื่อดูว่าคุณควรจะทำอะไรต่อไป
      courseA_collector_loops8_2018:
        courseA_collector_loops8_a: หากคุณมีปัญหาในการแก้ปริศนานี้ให้ ลองเขียนสิ่งที่คุณคิดลงบนกระดาษและมองหารูปแบบดู
        courseA_collector_loops8_b: ลองแยกปริศนานี้ออกเป็นปัญหาสามส่วน และใช้บล็อกลูปสำหรับการเคลื่อนไหวแต่ละทิศทาง
        courseA_collector_loops8_c: จำไว้ว่าคุณสามารถเขียนโค้ดทีละหนึ่งชิ้นแล้วกด
          " เริ่ม" เพื่อดูว่าคุณควรจะทำอะไรต่อไป
      courseA_collector_loops8_2019:
        courseA_collector_loops8_a: หากคุณมีปัญหาในการแก้ปริศนานี้ให้ ลองเขียนสิ่งที่คุณคิดลงบนกระดาษและมองหารูปแบบดู
        courseA_collector_loops8_b: ลองแยกปริศนานี้ออกเป็นปัญหาสามส่วน และใช้บล็อกลูปสำหรับการเคลื่อนไหวแต่ละทิศทาง
        courseA_collector_loops8_c: จำไว้ว่าคุณสามารถเขียนโค้ดทีละหนึ่งชิ้นแล้วกด
          " เริ่ม" เพื่อดูว่าคุณควรจะทำอะไรต่อไป
      courseA_collector_loops9:
        courseA_collector_loops9_a: 'ถ้าคุณไม่สามารถหาได้ว่า จุดที่ดีที่สุดที่จะใช้ลูปอยู่ที่ใด
          ให้ลองเขียนโค้ดออกมาทีละขั้นตอนและมองหารูปแบบ '
        courseA_collector_loops9_b: Try putting 2 of your <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml> loops inside of another
          loop to make your code shorter!
      courseA_collector_loops9_2018:
        courseA_collector_loops9_a: 'ถ้าคุณไม่สามารถหาได้ว่า จุดที่ดีที่สุดที่จะใช้ลูปอยู่ที่ใด
          ให้ลองเขียนโค้ดออกมาทีละขั้นตอนและมองหารูปแบบ '
        courseA_collector_loops9_b: Try putting 2 of your <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml> loops inside of another
          loop to make your code shorter!
      courseA_collector_loops9_2019:
        courseA_collector_loops9_a: 'ถ้าคุณไม่สามารถหาได้ว่า จุดที่ดีที่สุดที่จะใช้ลูปอยู่ที่ใด
          ให้ลองเขียนโค้ดออกมาทีละขั้นตอนและมองหารูปแบบ '
        courseA_collector_loops9_b: Try putting 2 of your <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml> loops inside of another
          loop to make your code shorter!
      courseA_collector_loops_challenge1:
        courseA_collector_loops_challenge1_a: Try changing the numbers in each loop
          if something seems wrong.
        courseA_collector_loops_challenge1_b: คุณไม่จำเป็นต้องใช้ ลูป ถ้าคุณแค่ทำบางอย่างแค่เพียงครั้งเดียวเท่านั้น
        courseA_collector_loops_challenge1_c: There are 6 gems on the right side of
          the cave when you start, but you only need to get treasure 5 times moving
          South. Do you know why?
        courseA_collector_loops_challenge1_d: |-
          The starting program doesn't collect the last 2 gems. Try adding this code at the very end:

          <xml><block type="maze_moveEast">
                                  <next>
                                    <block type="collector_collect_simplified">
                                      <next>
                                        <block type="maze_moveSouth">
                                          <next>
                                            <block type="collector_collect"/>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block></xml>
      courseA_collector_loops_challenge1_2018:
        courseA_collector_loops_challenge1_a: Try changing the numbers in each loop
          if something seems wrong.
        courseA_collector_loops_challenge1_b: คุณไม่จำเป็นต้องใช้ ลูป ถ้าคุณแค่ทำบางอย่างแค่เพียงครั้งเดียวเท่านั้น
        courseA_collector_loops_challenge1_c: There are 6 gems on the right side of
          the cave when you start, but you only need to get treasure 5 times moving
          South. Do you know why?
        courseA_collector_loops_challenge1_d: |-
          The starting program doesn't collect the last 2 gems. Try adding this code at the very end:

          <xml><block type="maze_moveEast">
                                  <next>
                                    <block type="collector_collect_simplified">
                                      <next>
                                        <block type="maze_moveSouth">
                                          <next>
                                            <block type="collector_collect"/>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block></xml>
      courseA_collector_loops_challenge1_2019:
        courseA_collector_loops_challenge1_a: Try changing the numbers in each loop
          if something seems wrong.
        courseA_collector_loops_challenge1_b: คุณไม่จำเป็นต้องใช้ ลูป ถ้าคุณแค่ทำบางอย่างแค่เพียงครั้งเดียวเท่านั้น
        courseA_collector_loops_challenge1_c: There are 6 gems on the right side of
          the cave when you start, but you only need to get treasure 5 times moving
          South. Do you know why?
        courseA_collector_loops_challenge1_d: |-
          The starting program doesn't collect the last 2 gems. Try adding this code at the very end:

          <xml><block type="maze_moveEast">
                                  <next>
                                    <block type="collector_collect_simplified">
                                      <next>
                                        <block type="maze_moveSouth">
                                          <next>
                                            <block type="collector_collect"/>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block></xml>
      courseA_collector_loops_challenge2:
        courseA_collector_loops_challenge2_b: You only need to use 1 block to solve
          this.
        courseA_collector_loops_challenge2_a: You can move back over the path a second
          time before moving south.
      courseA_collector_loops_challenge2kp:
        courseA_collector_loops_challenge2kp_b: Try this path to get you to a solution.
        courseA_collector_loops_challenge2kp_a: Can you use loops to solve this puzzle?
      courseA_collector_loops_challenge2kp_2018:
        courseA_collector_loops_challenge2kp_b: Try this path to get you to a solution.
        courseA_collector_loops_challenge2kp_a: Can you use loops to solve this puzzle?
      courseA_collector_loops_challenge2kp_2019:
        courseA_collector_loops_challenge2kp_b: Try this path to get you to a solution.
        courseA_collector_loops_challenge2kp_a: Can you use loops to solve this puzzle?
      courseA_collector_preLoops4:
        courseA_collector_preLoops4_a: To grab the treasure, snap two ![](https://images.code.org/2df8a25d7e96207f57d1a6b504950b70-image-1508906116743.34.37.png)
          blocks and one ![](https://images.code.org/563c0deb5c51d43cdfa72d62dec3419d-image-1508904559201.05.30.png)
          block to the bottom of the program and click "Run"!
      courseA_collector_preLoops5:
        courseA_collector_preLoops5_a: You'll need to go two different directions
          to get even one gem!
      courseA_collector_preLoops6:
        courseA_collector_preLoops6_a: You will need to use two ![](https://images.code.org/563c0deb5c51d43cdfa72d62dec3419d-image-1508904559201.05.30.png)
          blocks to solve this puzzle.
      courseA_collector_preLoops7:
        courseA_collector_loops2_b: |-
          หลังจากที่คุณได้มาอยู่ที่ตารางที่มีสมบัติแล้ว ให้ใช้บล็อกนี้เพื่อเก็บสมบัติ
          <xml>  <block type="collector_collect"/></xml>
      courseA_harvester_loops1:
        courseA_harvester_loops1_a: |-
          เมื่อคุณเดินมาถึงฝักข้าวโพด ให้ใช้บล็อกนี้ในการเก็บข้าวโพด

          <xml><block type="harvester_corn"/></xml>
      courseA_harvester_loops1_2019:
        courseA_harvester_loops1_a: |-
          เมื่อคุณเดินมาถึงฝักข้าวโพด ให้ใช้บล็อกนี้ในการเก็บข้าวโพด

          <xml><block type="harvester_corn"/></xml>
      courseA_harvester_loops2:
        courseA_harvester_loops2_a: "โค้ดของคุณต้องใช้บล็อก  `เคลื่อนที่ไปทางทิศตะวันตก`
          อย่างบล็อกนี้ **สี่** บล็อก\n\n<xml><block type=\"maze_moveWest\"/></xml>\n\nและบล็อก
          `เก็บข้าวโพด` อย่างบล็อกนี้ **สี่** บล็อก <xml>\n\n  <block type=\"harvester_corn\"/>\n</xml> "
        courseA_harvester_loops2_b: 'If you''re still having trouble, try saying the
          steps out loud. '
      courseA_harvester_loops2_2019:
        courseA_harvester_loops2_a: "โค้ดของคุณต้องใช้บล็อก  `เคลื่อนที่ไปทางทิศตะวันตก`
          อย่างบล็อกนี้ **สี่** บล็อก\n\n<xml><block type=\"maze_moveWest\"/></xml>\n\nและบล็อก
          `เก็บข้าวโพด` อย่างบล็อกนี้ **สี่** บล็อก <xml>\n\n  <block type=\"harvester_corn\"/>\n</xml> "
        courseA_harvester_loops2_b: 'If you''re still having trouble, try saying the
          steps out loud. '
      courseA_harvester_loops3:
        courseA_harvester_loops3_a: |-
          ให้ใช้บล็อก `ทำซ้ำ` แบบนี้เพื่อช่วยคุณ!

          <xml><block type="controls_repeat_simplified_dropdown">

          <title name="TIMES" config="2-10">4</title>
          </block></xml>
        courseA_harvester_loops3_b: "เมื่อต้องการทำซ้ำโค้ด ให้ลากลูป `ทำซ้ำ` ออกมาจากกล่องเครื่องมือ
          (<xml><block type=\"controls_repeat_simplified_dropdown\">\n    <title name=\"TIMES\"
          config=\"2-10\">4</title>\n  </block></xml>) แล้วใส่บล็อกที่คุณต้องการไว้ภายในลูปนั้น "
      courseA_harvester_loops3_2019:
        courseA_harvester_loops3_a: |-
          ให้ใช้บล็อก `ทำซ้ำ` แบบนี้เพื่อช่วยคุณ!

          <xml><block type="controls_repeat_simplified_dropdown">

          <title name="TIMES" config="2-10">4</title>
          </block></xml>
        courseA_harvester_loops3_b: "เมื่อต้องการทำซ้ำโค้ด ให้ลากลูป `ทำซ้ำ` ออกมาจากกล่องเครื่องมือ
          (<xml><block type=\"controls_repeat_simplified_dropdown\">\n    <title name=\"TIMES\"
          config=\"2-10\">4</title>\n  </block></xml>) แล้วใส่บล็อกที่คุณต้องการไว้ภายในลูปนั้น "
      courseA_harvester_loops4:
        courseA_harvester_loops4_a: ไม่ต้องกังวลที่จะกดปุ่ม `เริ่ม` เพื่อดูว่าจะเกิดอะไรขึ้น!
        courseA_harvester_loops4_b: ดูว่าข้าวโพดมีกี่ฝัก? แล้วดูว่าโค้ดของคุณจะทำซ้ำกี่ครั้ง?
      courseA_harvester_loops4_2019:
        courseA_harvester_loops4_a: ไม่ต้องกังวลที่จะกดปุ่ม `เริ่ม` เพื่อดูว่าจะเกิดอะไรขึ้น!
        courseA_harvester_loops4_b: ดูว่าข้าวโพดมีกี่ฝัก? แล้วดูว่าโค้ดของคุณจะทำซ้ำกี่ครั้ง?
      courseA_harvester_loops5:
        courseA_harvester_loops5_a: หากคุณติดขัด ทำอะไรไม่ถูก ให้ลองแบ่งการแก้ปริศนาออกเป็น
          2 ส่วน ส่วนหนึ่งก่อนที่จะมาถึงหัวมุม และอีกส่วนหนึ่งหลังจากที่ผ่านหัวมุมไปแล้ว
        courseA_harvester_loops5_b: |-
          โค้ดที่เสร็จแล้วของคุณจะมีบล็อกลูป `ทำซ้ำ`  <xml><block type="controls_repeat_simplified_dropdown">

          <title name="TIMES" config="2-10">6</title>
          </block></xml>หนึ่งลูป บล็อก `เคลื่อนไปทางใต้`   <xml><block type="maze_moveSouth" limit="1"/></xml> **หนึ่ง** บล็อกและบล็อก `เคลื่อนไปทางตะวันออก`   <xml><block type="maze_moveEast" limit="1"/> </xml> อีก **หนึ่ง** บล็อก
        courseA_harvester_loops5_c: ใช้เส้นทางนี้เพื่อเดินไปเก็บข้าวโพดให้หมด
      courseA_harvester_loops5_2019:
        courseA_harvester_loops5_a: หากคุณติดขัด ทำอะไรไม่ถูก ให้ลองแบ่งการแก้ปริศนาออกเป็น
          2 ส่วน ส่วนหนึ่งก่อนที่จะมาถึงหัวมุม และอีกส่วนหนึ่งหลังจากที่ผ่านหัวมุมไปแล้ว
        courseA_harvester_loops5_b: |-
          โค้ดที่เสร็จแล้วของคุณจะมีบล็อกลูป `ทำซ้ำ`  <xml><block type="controls_repeat_simplified_dropdown">

          <title name="TIMES" config="2-10">6</title>
          </block></xml>หนึ่งลูป บล็อก `เคลื่อนไปทางใต้`   <xml><block type="maze_moveSouth" limit="1"/></xml> **หนึ่ง** บล็อกและบล็อก `เคลื่อนไปทางตะวันออก`   <xml><block type="maze_moveEast" limit="1"/> </xml> อีก **หนึ่ง** บล็อก
        courseA_harvester_loops5_c: ใช้เส้นทางนี้เพื่อเดินไปเก็บข้าวโพดให้หมด
      courseA_harvester_loops5a:
        courseA_harvester_loops5a_a: คุณต้องการใช้ลูป`ทำซ้ำ` อีกอันหนึ่งหลังจากใช้ไปอันหนึ่งแล้ว
        courseA_harvester_loops5a_b: ลูปหนึ่งจะทำซ้ำ `เคลื่อนไปทางใต้`<xml><block
          type="maze_moveSouth" limit="1"/></xml> และอีกอันหนึ่งจะทำซ้ำ`เคลื่อนไปทางตะวันออก`
          <xml><block type="maze_moveEast" limit="1"/></xml>
        courseA_harvester_loops5a_c: ใช้เส้นทางนี้เพื่อเดินไปตามเส้นทางสองทิศทาง
      courseA_harvester_loops5a_2019:
        courseA_harvester_loops5a_a: คุณต้องการใช้ลูป`ทำซ้ำ` อีกอันหนึ่งหลังจากใช้ไปอันหนึ่งแล้ว
        courseA_harvester_loops5a_b: ลูปหนึ่งจะทำซ้ำ `เคลื่อนไปทางใต้`<xml><block
          type="maze_moveSouth" limit="1"/></xml> และอีกอันหนึ่งจะทำซ้ำ`เคลื่อนไปทางตะวันออก`
          <xml><block type="maze_moveEast" limit="1"/></xml>
        courseA_harvester_loops5a_c: ใช้เส้นทางนี้เพื่อเดินไปตามเส้นทางสองทิศทาง
      courseA_harvester_loops5b:
        courseA_harvester_loops5b_a: กดปุ่ม `เริ่ม` และดูว่าเกิดอะไรขึ้น!
        courseA_harvester_loops5b_b: ลูปของคุณมีการทำซ้ำด้วยจำนวนครั้งที่ถูกต้องหรือไม่?
        courseA_harvester_loops5b_c: เดินไปตามเส้นทางที่ให้มานี้ ทิศทางหนึ่งและก็เปลี่ยนไปอีกทิศทางหนึ่ง
      courseA_harvester_loops5b_2019:
        courseA_harvester_loops5b_a: กดปุ่ม `เริ่ม` และดูว่าเกิดอะไรขึ้น!
        courseA_harvester_loops5b_b: ลูปของคุณมีการทำซ้ำด้วยจำนวนครั้งที่ถูกต้องหรือไม่?
        courseA_harvester_loops5b_c: เดินไปตามเส้นทางที่ให้มานี้ ทิศทางหนึ่งและก็เปลี่ยนไปอีกทิศทางหนึ่ง
      courseA_harvester_loops6:
        courseA_harvester_loops6_a: หากคุณคิดไม่ออก ให้ลองเขียนขั้นตอนลงบนกระดาษและมองหารูปแบบที่ซ้ำๆ
          กัน
        courseA_harvester_loops6_b: นี่คือเส้นทางที่คุณควรใช้ เพื่อเก็บข้าวโพดทั้งหมด
      courseA_harvester_loops6_2019:
        courseA_harvester_loops6_a: หากคุณคิดไม่ออก ให้ลองเขียนขั้นตอนลงบนกระดาษและมองหารูปแบบที่ซ้ำๆ
          กัน
        courseA_harvester_loops6_b: นี่คือเส้นทางที่คุณควรใช้ เพื่อเก็บข้าวโพดทั้งหมด
      courseA_harvester_loops7:
        courseA_harvester_loops7_a: |-
          คุณต้องใช้บล็อกลูป `ทำซ้ำ` <xml><block type="controls_repeat_simplified_dropdown">

          <title name="TIMES" config="2-10">5</title>
          </block></xml>สองบล็อกมาต่อกัน!
        courseA_harvester_loops7_b: ให้ใช้ลูปสองลูปเพื่อเดินไปตามเส้นทางที่ให้มานี้
      courseA_harvester_loops7_2019:
        courseA_harvester_loops7_a: |-
          คุณต้องใช้บล็อกลูป `ทำซ้ำ` <xml><block type="controls_repeat_simplified_dropdown">

          <title name="TIMES" config="2-10">5</title>
          </block></xml>สองบล็อกมาต่อกัน!
        courseA_harvester_loops7_b: ให้ใช้ลูปสองลูปเพื่อเดินไปตามเส้นทางที่ให้มานี้
      courseA_harvester_loops9:
        courseA_harvester_loops9_a: แบ่งปริศนานี้ออกเป็นสามส่วนที่แตกต่างกัน ส่วนหนึ่งสำหรับการเดินไปจนถึงหัวมุมแรก
          ส่วนหนึ่งสำหรับการเดินไปจนถึงหัวมุมที่สอง และส่วนหนึ่งสำหรับการเดินไปจนถึงหัวมุมสุดท้าย
        courseA_harvester_loops9_b: อย่ากลัวที่จะเรียกใช้งานโค้ดแต่ละส่วนของคุณ และดูว่าจะเกิดอะไรขึ้น!
        courseA_harvester_loops9_c: เดินไปตามเส้นทางนี้เพื่อไปเก็บข้าวโพดให้หมด
      courseA_harvester_loops9_2019:
        courseA_harvester_loops9_a: แบ่งปริศนานี้ออกเป็นสามส่วนที่แตกต่างกัน ส่วนหนึ่งสำหรับการเดินไปจนถึงหัวมุมแรก
          ส่วนหนึ่งสำหรับการเดินไปจนถึงหัวมุมที่สอง และส่วนหนึ่งสำหรับการเดินไปจนถึงหัวมุมสุดท้าย
        courseA_harvester_loops9_b: อย่ากลัวที่จะเรียกใช้งานโค้ดแต่ละส่วนของคุณ และดูว่าจะเกิดอะไรขึ้น!
        courseA_harvester_loops9_c: เดินไปตามเส้นทางนี้เพื่อไปเก็บข้าวโพดให้หมด
      courseA_harvester_seq1:
        courseA_harvester_seq1_a: |-
          ใช้บล็อกนี้ในการเก็บข้าวโพดเมื่อเกษตรกรเดินไปเจอฝักข้าวโพด!

          <xml>
          <block type="harvester_corn"/>
          </xml>
        courseA_harvester_seq1_b: |-
          เกษตรกรต้องเดินไปทางทิศตะวันออกสามครั้งเพื่อไปให้ถึงฝักข้าวโพด ให้ใช้บล็อกนี้

          <xml>
          <block type="maze_moveEast"/>
          </xml>
      courseA_harvester_seq10:
        courseA_harvester_seq10_a: ถ้ารู้สึกว่าปัญหานี้ยาก ให้ลองเขียนขั้นตอนต่างๆลงบนกระดาษสักแผ่นหนึ่งก่อน
        courseA_harvester_seq10_b: You need to `Move East`, then `Move North`. Do
          this two times. Don't forget to get all the corn too!
        courseA_harvester_seq10_c: ลองใช้เส้นทางนี้ในการเก็บข้าวโพดทั้งหมด
      courseA_harvester_seq10_2019:
        courseA_harvester_seq10_a: ถ้ารู้สึกว่าปัญหานี้ยาก ให้ลองเขียนขั้นตอนต่างๆลงบนกระดาษสักแผ่นหนึ่งก่อน
        courseA_harvester_seq10_b: You need to `Move East`, then `Move North`. Do
          this two times. Don't forget to get all the corn too!
        courseA_harvester_seq10_c: ลองใช้เส้นทางนี้ในการเก็บข้าวโพดทั้งหมด
      courseA_harvester_seq13:
        courseA_bee_seq1_a: |-
          ใช้บล็อกอันนี้เพื่อให้เกษตรกรเก็บข้าวโพด

          <xml>
          <block type="harvester_corn"/>
          </xml>
      courseA_harvester_seq13_2019:
        courseA_bee_seq1_a: |-
          ใช้บล็อกอันนี้เพื่อให้เกษตรกรเก็บข้าวโพด

          <xml>
          <block type="harvester_corn"/>
          </xml>
      courseA_harvester_seq1_2019:
        courseA_harvester_seq1_a: |-
          ใช้บล็อกนี้ในการเก็บข้าวโพดเมื่อเกษตรกรเดินไปเจอฝักข้าวโพด!

          <xml>
          <block type="harvester_corn"/>
          </xml>
        courseA_harvester_seq1_b: |-
          เกษตรกรต้องเดินไปทางทิศตะวันออกสามครั้งเพื่อไปให้ถึงฝักข้าวโพด ให้ใช้บล็อกนี้

          <xml>
          <block type="maze_moveEast"/>
          </xml>
      courseA_harvester_seq2:
        courseA_harvester_seq2_a: อย่าลืมใช้บล็อก <xml><block type="harvester_corn"/></xml>
          เพื่อเก็บข้าวโพด!
        courseA_harvester_seq2_b: ลองขีดๆเขียนๆ ขั้นตอนลงบนแผ่นกระดาษ เพื่อหาวิธีแก้ปัญหานี้ดู!
      courseA_harvester_seq2_2019:
        courseA_harvester_seq2_a: อย่าลืมใช้บล็อก <xml><block type="harvester_corn"/></xml>
          เพื่อเก็บข้าวโพด!
        courseA_harvester_seq2_b: ลองขีดๆเขียนๆ ขั้นตอนลงบนแผ่นกระดาษ เพื่อหาวิธีแก้ปัญหานี้ดู!
      courseA_harvester_seq3:
        courseA_harvester_seq3_a: |-
          คุณจำได้ไหมว่าได้ใช้บล็อกนี้ด้วยหรือเปล่า?

          <xml><block type="harvester_corn"/></xml>
        courseA_harvester_seq3_b: ลองเปล่งเสียงขั้นตอนต่างๆ ออกมาดัง ๆ และดูซิว่ามันจะช่วยให้คุณพบคำตอบได้ง่ายขึ้นไหม
      courseA_harvester_seq3_2019:
        courseA_harvester_seq3_a: |-
          คุณจำได้ไหมว่าได้ใช้บล็อกนี้ด้วยหรือเปล่า?

          <xml><block type="harvester_corn"/></xml>
        courseA_harvester_seq3_b: ลองเปล่งเสียงขั้นตอนต่างๆ ออกมาดัง ๆ และดูซิว่ามันจะช่วยให้คุณพบคำตอบได้ง่ายขึ้นไหม
      courseA_harvester_seq4:
        courseA_harvester_seq4_a: ช่องว่างระหว่างเกษตรกรกับฝักข้าวโพดมีด้วยกันกี่ช่อง?
          บล็อกที่ต่อกันอยู่แล้วในที่พื้นที่ทำงานของคุณมีอยู่แล้วกี่บล็อก?
        courseA_harvester_seq4_b: "คุณต้องใช้บล็อก `เคลื่อนที่ไปทางทิศตะวันออก` \n<xml><block
          type=\"maze_moveEast\"/></xml>\nห้าบล็อกและบล็อก `เก็บข้าวโพด` \n<xml><block
          type=\"harvester_corn\"/></xml>หนึ่งบล็อก"
      courseA_harvester_seq4_2019:
        courseA_harvester_seq4_a: ช่องว่างระหว่างเกษตรกรกับฝักข้าวโพดมีด้วยกันกี่ช่อง?
          บล็อกที่ต่อกันอยู่แล้วในที่พื้นที่ทำงานของคุณมีอยู่แล้วกี่บล็อก?
        courseA_harvester_seq4_b: "คุณต้องใช้บล็อก `เคลื่อนที่ไปทางทิศตะวันออก` \n<xml><block
          type=\"maze_moveEast\"/></xml>\nห้าบล็อกและบล็อก `เก็บข้าวโพด` \n<xml><block
          type=\"harvester_corn\"/></xml>หนึ่งบล็อก"
      courseA_harvester_seq5:
        courseA_harvester_seq5_a: บล็อกไหนที่ทำให้เกษตรกรเคลื่อนที่ไปผิดทิศทาง
        courseA_harvester_seq5_b: คุณต้องเอาบล็อกออกไปบล็อกหนึ่ง
        courseA_harvester_seq5_c: |-
          โยนบล็อกนี้ทิ้งขยะไป

          <xml><block type="maze_moveNorth"/></xml>
      courseA_harvester_seq5_2019:
        courseA_harvester_seq5_a: บล็อกไหนที่ทำให้เกษตรกรเคลื่อนที่ไปผิดทิศทาง
        courseA_harvester_seq5_b: คุณต้องเอาบล็อกออกไปบล็อกหนึ่ง
        courseA_harvester_seq5_c: |-
          โยนบล็อกนี้ทิ้งขยะไป

          <xml><block type="maze_moveNorth"/></xml>
      courseA_harvester_seq6:
        courseA_harvester_seq6_a: หากคุณคิดไม่ออก ให้ลองพูดขั้นตอนต่างๆ ออกมาดังๆ
          มันอาจจะช่วยให้คุณหาเส้นทางที่ถูกต้องได้
      courseA_harvester_seq6_2019:
        courseA_harvester_seq6_a: หากคุณคิดไม่ออก ให้ลองพูดขั้นตอนต่างๆ ออกมาดังๆ
          มันอาจจะช่วยให้คุณหาเส้นทางที่ถูกต้องได้
      courseA_harvester_seq7:
        courseA_harvester_seq7_a: ให้ลองแบ่งการแก้ปริศนาออกเป็น 2 ส่วน ส่วนหนึ่งก่อนที่จะจะถึงหัวมุม
          และอีกส่วนหนึ่งหลังจากที่ผ่านหัวมุมไปแล้ว
        courseA_harvester_seq7_b: มีปัญหาอะไรไหมครับ? นี่คือเส้นทางที่เกษตรกรควรใช้
      courseA_harvester_seq7_2019:
        courseA_harvester_seq7_a: ให้ลองแบ่งการแก้ปริศนาออกเป็น 2 ส่วน ส่วนหนึ่งก่อนที่จะจะถึงหัวมุม
          และอีกส่วนหนึ่งหลังจากที่ผ่านหัวมุมไปแล้ว
        courseA_harvester_seq7_b: มีปัญหาอะไรไหมครับ? นี่คือเส้นทางที่เกษตรกรควรใช้
      courseA_harvester_seq8:
        courseA_harvester_seq8_a: Your final code should have **4** movement blocks
          and **2** pick blocks.
      courseA_harvester_seq8_2019:
        courseA_harvester_seq8_a: Your final code should have **4** movement blocks
          and **2** pick blocks.
      courseA_harvester_seq9:
        courseA_harvester_seq9_a: เรียกใช้งานโค้ดสักสองสามครั้งเพื่อดูว่าเกิดอะไรขึ้น
          สังเกตุดูว่าเกษตรกรหยุดตรงไหน?
        courseA_harvester_seq9_b: อย่าลืมเก็บข้าวโพดให้หมดด้วย คุณต้องใช้บล็อกเก็บข้าวโพดทั้งหมดรวมกัน
          **3** บล็อก
        courseA_harvester_seq9_c: คุณควรใช้เส้นทางนี้เพื่อเก็บข้าวโพดทั้งหมด
      courseA_harvester_seq9_2019:
        courseA_harvester_seq9_a: เรียกใช้งานโค้ดสักสองสามครั้งเพื่อดูว่าเกิดอะไรขึ้น
          สังเกตุดูว่าเกษตรกรหยุดตรงไหน?
        courseA_harvester_seq9_b: อย่าลืมเก็บข้าวโพดให้หมดด้วย คุณต้องใช้บล็อกเก็บข้าวโพดทั้งหมดรวมกัน
          **3** บล็อก
        courseA_harvester_seq9_c: คุณควรใช้เส้นทางนี้เพื่อเก็บข้าวโพดทั้งหมด
      courseA_maze_ramp2_2018:
        '1': |-
          โค้ดของคุณควรเป็นแบบนี้:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp2_2019:
        '1': |-
          โค้ดของคุณควรเป็นแบบนี้:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp3a_2018:
        '1': |-
          โค้ดของคุณควรเป็นแบบนี้:
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveNorth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp3a_2019:
        '1': |-
          โค้ดของคุณควรเป็นแบบนี้:
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveNorth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp3b_2018:
        '1': |-
          โค้ดของคุณควรเป็นแบบนี้:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveSouth">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp3b_2019:
        '1': |-
          โค้ดของคุณควรเป็นแบบนี้:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveSouth">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp4a_2018:
        '1': |-
          โค้ดของคุณควรเป็นแบบนี้:
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveSouth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp4a_2019:
        '1': |-
          โค้ดของคุณควรเป็นแบบนี้:
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveSouth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp5a_2018:
        '1': |-
          โค้ดของคุณควรเป็นแบบนี้:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest">
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp5a_2019:
        '1': |-
          โค้ดของคุณควรเป็นแบบนี้:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest">
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_seq1:
        courseA_maze_seq1_a: |-
          หากคุณมีปัญหาในการทำให้เจ้านกเคลื่อนไหว ให้ตรวจสอบให้แน่ใจว่าบล็อกเหล่านี้ได้ถูกต่ออย่างถูกต้องกับบล็อก <xml>
          <block type="when_run"/>
          </xml>
        courseA_maze_seq1_b: "ต้องให้เจ้านกนี่เคลื่อนที่ไปทางทิศตะวันตก 3 ครั้งเพื่อไปให้ถึงเจ้าหมูนั่น
          โดยใช้บล็อกอันนี้: \n\n<xml><block type=\"maze_moveWest\"/></xml>"
      courseA_maze_seq10:
        courseA_maze_seq10_a: ถ้ารู้สึกว่าปัญหานี้ยาก ให้ลองเขียนขั้นตอนต่างๆลงบนกระดาษสักแผ่นหนึ่งก่อน
        courseA_maze_seq10_b: You will need to go 3 directions to solve this puzzle.
      courseA_maze_seq10_2018:
        courseA_maze_seq10_a: ถ้ารู้สึกว่าปัญหานี้ยาก ให้ลองเขียนขั้นตอนต่างๆลงบนกระดาษสักแผ่นหนึ่งก่อน
        courseA_maze_seq10_b: คุณต้องเคลื่อนไหวไปถึงสามทิศทางที่ต่างกันเพื่อแก้ปริศนาข้อนี้
      courseA_maze_seq10_2019:
        courseA_maze_seq10_a: ถ้ารู้สึกว่าปัญหานี้ยาก ให้ลองเขียนขั้นตอนต่างๆลงบนกระดาษสักแผ่นหนึ่งก่อน
        courseA_maze_seq10_b: คุณต้องเคลื่อนไหวไปถึงสามทิศทางที่ต่างกันเพื่อแก้ปริศนาข้อนี้
      courseA_maze_seq10_copy:
        courseA_maze_seq10_a: ถ้ารู้สึกว่าปัญหานี้ยาก ให้ลองเขียนขั้นตอนต่างๆลงบนกระดาษสักแผ่นหนึ่งก่อน
        courseA_maze_seq10_b: You will need to go 3 directions to solve this puzzle.
      courseA_maze_seq13:
        courseA_maze_seq13_a: หากเส้นทางที่คุณเลือกใช้ไม่ชัดเจน ลองใช้นิ้วลากเป็นเส้นทางของคุณจากเจ้านกไปยังเจ้าหมู
        courseA_maze_seq13_b: ไม่ต้องกลัวว่าคุณจะทำผิด! ลองเพิ่มบล็อกเข้าไปและเรียกโค้ดมาใช้งาน
          เพื่อดูว่าจะเกิดอะไรขึ้น
        courseA_maze_seq13_c: |-
          บล็อก <xml><block type="maze_moveNorth"/></xml>

          <xml><block type="maze_moveEast"/></xml> เหล่านี้จะช่วยให้คุณเข้าใกล้เจ้าหมูได้ยื่งขึ้น
      courseA_maze_seq13_2018:
        courseA_maze_seq13_a: หากเส้นทางที่คุณเลือกใช้ไม่ชัดเจน ลองใช้นิ้วลากเป็นเส้นทางของคุณจากเจ้านกไปยังเจ้าหมู
        courseA_maze_seq13_b: ไม่ต้องกลัวว่าคุณจะทำผิด! ลองเพิ่มบล็อกเข้าไปและเรียกโค้ดมาใช้งาน
          เพื่อดูว่าจะเกิดอะไรขึ้น
        courseA_maze_seq13_c: |-
          บล็อก <xml><block type="maze_moveNorth"/></xml>

          <xml><block type="maze_moveEast"/></xml> เหล่านี้จะช่วยให้คุณเข้าใกล้เจ้าหมูได้ยื่งขึ้น
      courseA_maze_seq13_2019:
        courseA_maze_seq13_a: หากเส้นทางที่คุณเลือกใช้ไม่ชัดเจน ลองใช้นิ้วลากเป็นเส้นทางของคุณจากเจ้านกไปยังเจ้าหมู
        courseA_maze_seq13_b: ไม่ต้องกลัวว่าคุณจะทำผิด! ลองเพิ่มบล็อกเข้าไปและเรียกโค้ดมาใช้งาน
          เพื่อดูว่าจะเกิดอะไรขึ้น
        courseA_maze_seq13_c: |-
          บล็อก <xml><block type="maze_moveNorth"/></xml>

          <xml><block type="maze_moveEast"/></xml> เหล่านี้จะช่วยให้คุณเข้าใกล้เจ้าหมูได้ยื่งขึ้น
      courseA_maze_seq1_2018:
        courseA_maze_seq1_a: |-
          หากคุณมีปัญหาในการทำให้เจ้านกเคลื่อนไหว ให้ตรวจสอบให้แน่ใจว่าบล็อกเหล่านี้ได้ถูกต่ออย่างถูกต้องกับบล็อก <xml>
          <block type="when_run"/>
          </xml>
        courseA_maze_seq1_b: "ต้องให้เจ้านกนี่เคลื่อนที่ไปทางทิศตะวันตก 3 ครั้งเพื่อไปให้ถึงเจ้าหมูนั่น
          โดยใช้บล็อกอันนี้: \n\n<xml><block type=\"maze_moveWest\"/></xml>"
      courseA_maze_seq1_2019:
        courseA_maze_seq1_a: |-
          หากคุณมีปัญหาในการทำให้เจ้านกเคลื่อนไหว ให้ตรวจสอบให้แน่ใจว่าบล็อกเหล่านี้ได้ถูกต่ออย่างถูกต้องกับบล็อก <xml>
          <block type="when_run"/>
          </xml>
        courseA_maze_seq1_b: "ต้องให้เจ้านกนี่เคลื่อนที่ไปทางทิศตะวันตก 3 ครั้งเพื่อไปให้ถึงเจ้าหมูนั่น
          โดยใช้บล็อกอันนี้: \n\n<xml><block type=\"maze_moveWest\"/></xml>"
      courseA_maze_seq2:
        courseA_maze_seq2_a: This program is missing 1 block. Can you figure out which
          one?
        courseA_maze_seq2_b: Try running the code first to see where the bird ends
          up. Where do you need to go from there?
      courseA_maze_seq3:
        courseA_maze_seq3_a: 1 of the blocks is moving the bird in the wrong direction.
          Can you figure out which one and replace it with the correct block?
        courseA_maze_seq3_b: Try using the step button to find where the program goes
          wrong. Is it the 1st step? The 2nd?
        courseA_maze_seq3_c: This <xml><block type="maze_moveNorth"/></xml> block
          doesn't seem to be moving the bird in the right direction. Can you replace
          it with a different block?
      courseA_maze_seq4:
        courseA_maze_seq4_a: If you are having trouble, try to figure out what the
          correct path is and then remove the block that doesn't fit.
        courseA_maze_seq4_b: Try running the code as it is. Does something go wrong?
          Which block can you remove? How can you fix it?
      courseA_maze_seq5:
        courseA_maze_seq5_a: ลองขีดๆเขียนๆ ขั้นตอนลงบนแผ่นกระดาษ เพื่อหาวิธีแก้ปัญหานี้ดู!
        courseA_maze_seq5_b: You will need 2 blocks, pointing in 2 directions.
      courseA_maze_seq5_2018:
        '1': ลองขีดๆเขียนๆ ขั้นตอนลงบนแผ่นกระดาษ เพื่อหาวิธีแก้ปัญหานี้ดู!
        '2': |-
          คุณต้องลองใช้บล็อกนี้ดู:

          <xml><block type="maze_moveSouth"/></xml>
      courseA_maze_seq5_2019:
        '1': ลองขีดๆเขียนๆ ขั้นตอนลงบนแผ่นกระดาษ เพื่อหาวิธีแก้ปัญหานี้ดู!
        '2': |-
          คุณต้องลองใช้บล็อกนี้ดู:

          <xml><block type="maze_moveSouth"/></xml>
      courseA_maze_seq5_copy:
        courseA_maze_seq5_a: ลองขีดๆเขียนๆ ขั้นตอนลงบนแผ่นกระดาษ เพื่อหาวิธีแก้ปัญหานี้ดู!
        courseA_maze_seq5_b: You will need 2 blocks, pointing in 2 directions.
      courseA_maze_seq5a_2018:
        '1': ลองเปล่งเสียงขั้นตอนต่างๆ ออกมาดัง ๆ และดูซิว่ามันจะช่วยให้คุณพบคำตอบได้ง่ายขึ้นไหม
      courseA_maze_seq5a_2019:
        '1': ลองเปล่งเสียงขั้นตอนต่างๆ ออกมาดัง ๆ และดูซิว่ามันจะช่วยให้คุณพบคำตอบได้ง่ายขึ้นไหม
      courseA_maze_seq6:
        courseA_maze_seq6_a: โค้ดที่คุณเขียนเสร็จควรประกอบด้วยบล็อกที่ช่วยในการเคลื่อนไหวจำนวน
          3 บล็อกด้วยกัน
        courseA_maze_seq6_b: หากคุณติดขัด ทำอะไรไม่ถูก ให้ลองแบ่งการแก้ปริศนาออกเป็น
          2 ส่วน ส่วนหนึ่งก่อนที่จะมาถึงหัวมุม และอีกส่วนหนึ่งหลังจากที่ผ่านหัวมุมไปแล้ว
      courseA_maze_seq6_2018:
        courseA_maze_seq6_a: โค้ดที่คุณเขียนเสร็จควรประกอบด้วยบล็อกที่ช่วยในการเคลื่อนไหวจำนวน
          3 บล็อกด้วยกัน
        courseA_maze_seq6_b: หากคุณติดขัด ทำอะไรไม่ถูก ให้ลองแบ่งการแก้ปริศนาออกเป็น
          2 ส่วน ส่วนหนึ่งก่อนที่จะมาถึงหัวมุม และอีกส่วนหนึ่งหลังจากที่ผ่านหัวมุมไปแล้ว
      courseA_maze_seq6_2019:
        courseA_maze_seq6_a: โค้ดที่คุณเขียนเสร็จควรประกอบด้วยบล็อกที่ช่วยในการเคลื่อนไหวจำนวน
          3 บล็อกด้วยกัน
        courseA_maze_seq6_b: หากคุณติดขัด ทำอะไรไม่ถูก ให้ลองแบ่งการแก้ปริศนาออกเป็น
          2 ส่วน ส่วนหนึ่งก่อนที่จะมาถึงหัวมุม และอีกส่วนหนึ่งหลังจากที่ผ่านหัวมุมไปแล้ว
      courseA_maze_seq6_copy:
        courseA_maze_seq6_a: โค้ดที่คุณเขียนเสร็จควรประกอบด้วยบล็อกที่ช่วยในการเคลื่อนไหวจำนวน
          3 บล็อกด้วยกัน
        courseA_maze_seq6_b: หากคุณติดขัด ทำอะไรไม่ถูก ให้ลองแบ่งการแก้ปริศนาออกเป็น
          2 ส่วน ส่วนหนึ่งก่อนที่จะมาถึงหัวมุม และอีกส่วนหนึ่งหลังจากที่ผ่านหัวมุมไปแล้ว
      courseA_maze_seq7:
        courseA_maze_seq7_a: There is 1 block that you need to add to move the bird
          to the pig.
        courseA_maze_seq7_b: If you can't figure out what to do, try drawing the puzzle
          on paper and use your finger to figure out which way to move.
      courseA_maze_seq7_copy:
        courseA_maze_seq7_a: There is 1 block that you need to add to move the bird
          to the pig.
        courseA_maze_seq7_b: If you can't figure out what to do, try drawing the puzzle
          on paper and use your finger to figure out which way to move.
      courseA_maze_seq8:
        courseA_maze_seq8_a: ถ้าหากคุณติดขัด ลองวาดเป็นภาพลงบนกระดาษเพื่อดูว่าจะให้เจ้านกเคลื่อนที่อย่างไร
      courseA_maze_seq8_2018:
        courseA_maze_seq8_a: ถ้าหากคุณติดขัด ลองวาดเป็นภาพลงบนกระดาษเพื่อดูว่าจะให้เจ้านกเคลื่อนที่อย่างไร
      courseA_maze_seq8_2019:
        courseA_maze_seq8_a: ถ้าหากคุณติดขัด ลองวาดเป็นภาพลงบนกระดาษเพื่อดูว่าจะให้เจ้านกเคลื่อนที่อย่างไร
      courseA_maze_seq8_copy:
        courseA_maze_seq8_a: ถ้าหากคุณติดขัด ลองวาดเป็นภาพลงบนกระดาษเพื่อดูว่าจะให้เจ้านกเคลื่อนที่อย่างไร
      courseA_maze_seq9:
        courseA_maze_seq9_a: Stuck? Try tracing the bird's path with your finger.
        courseA_maze_seq9_b: If you're not sure what to do, try pressing "Start over"
          and running the code to see what goes wrong.
        courseA_maze_seq9_c: You will need to move in 3 directions to solve this puzzle.
      courseA_maze_seq_challenge1:
        courseA_maze_seq_challenge1_a: There are two solutions to this puzzle.
      courseA_maze_seq_challenge1_2018:
        courseA_maze_seq_challenge1_a: There are two solutions to this puzzle.
      courseA_maze_seq_challenge1_2019:
        courseA_maze_seq_challenge1_a: There are two solutions to this puzzle.
      courseA_maze_seq_challenge2:
        courseA_maze_seq_challenge2_a: ลองนับจำนวนช่องว่างใช้นิ้วของคุณ จำไว้ว่าต้องไม่นับรวมเอาที่ที่คุณเริ่มต้น!
      courseA_maze_seq_challenge2_2018:
        courseA_maze_seq_challenge2_a: ลองนับจำนวนช่องว่างใช้นิ้วของคุณ จำไว้ว่าต้องไม่นับรวมเอาที่ที่คุณเริ่มต้น!
      courseA_maze_seq_challenge2_2019:
        courseA_maze_seq_challenge2_a: ลองนับจำนวนช่องว่างใช้นิ้วของคุณ จำไว้ว่าต้องไม่นับรวมเอาที่ที่คุณเริ่มต้น!
      courseA_playLab_events2:
        courseA_playLab_events2_a: Look for a block that makes the dog say something.
        courseA_playLab_events2_b: |-
          This is the code you need to complete this puzzle:

          <xml>
          <block type="when_run" movable="false" deletable="false">
          <next>
          <block type="studio_saySpriteChoices">
              <title name="SPRITE">1</title>
              <title name="VALUE">Hi there.</title>
            </block>
          </next>
          </block>
          </xml>
      courseA_playLab_events2_2018:
        courseA_playLab_events2_a: Look for a block that makes the dog say something.
        courseA_playLab_events2_b: |-
          This is the code you need to complete this puzzle:

          <xml>
          <block type="when_run" movable="false" deletable="false">
          <next>
          <block type="studio_saySpriteChoices">
              <title name="SPRITE">1</title>
              <title name="VALUE">Hi there.</title>
            </block>
          </next>
          </block>
          </xml>
      courseA_playLab_events2_2019:
        courseA_playLab_events2_a: Look for a block that makes the dog say something.
        courseA_playLab_events2_b: |-
          This is the code you need to complete this puzzle:

          <xml>
          <block type="when_run" movable="false" deletable="false">
          <next>
          <block type="studio_saySpriteChoices">
              <title name="SPRITE">1</title>
              <title name="VALUE">Hi there.</title>
            </block>
          </next>
          </block>
          </xml>
      courseA_playLab_events3:
        courseA_playLab_events3_a: |-
          Drag this block  <xml><block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">8</title>
            </block></xml> out and snap it to the bottom of <xml><block type="studio_whenArrow">
              <title name="VALUE">left</title>
            </block></xml>
        courseA_playLab_events3_b: Remember to use the left arrow key to move Jorge
          to the flag once you have written your program. When the flag turns green,
          you've finished!
      courseA_playLab_events3_2018:
        courseA_playLab_events3_a: |-
          Drag this block  <xml><block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">8</title>
            </block></xml> out and snap it to the bottom of <xml><block type="studio_whenArrow">
              <title name="VALUE">left</title>
            </block></xml>
        courseA_playLab_events3_b: Remember to use the left arrow key to move Jorge
          to the flag once you have written your program. When the flag turns green,
          you've finished!
      courseA_playLab_events3_2019:
        courseA_playLab_events3_a: |-
          Drag this block  <xml><block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">8</title>
            </block></xml> out and snap it to the bottom of <xml><block type="studio_whenArrow">
              <title name="VALUE">left</title>
            </block></xml>
        courseA_playLab_events3_b: Remember to use the left arrow key to move Jorge
          to the flag once you have written your program. When the flag turns green,
          you've finished!
      courseA_playLab_events4:
        courseA_playLab_events4_a: |-
          Here is the event block that you will need to get Jorge to move right:

          <xml><block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">2</title>
            </block></xml>
        courseA_playLab_events4_b: |-
          This is the code you will need to complete this puzzle:

          <xml><block type="studio_whenArrow">
              <title name="VALUE">right</title>
              <next>
            <block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">2</title>
            </block></next></block></xml>
      courseA_playLab_events4_2018:
        courseA_playLab_events4_a: |-
          Here is the event block that you will need to get Jorge to move right:

          <xml><block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">2</title>
            </block></xml>
        courseA_playLab_events4_b: |-
          This is the code you will need to complete this puzzle:

          <xml><block type="studio_whenArrow">
              <title name="VALUE">right</title>
              <next>
            <block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">2</title>
            </block></next></block></xml>
      courseA_playLab_events4_2019:
        courseA_playLab_events4_a: |-
          Here is the event block that you will need to get Jorge to move right:

          <xml><block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">2</title>
            </block></xml>
        courseA_playLab_events4_b: |-
          This is the code you will need to complete this puzzle:

          <xml><block type="studio_whenArrow">
              <title name="VALUE">right</title>
              <next>
            <block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">2</title>
            </block></next></block></xml>
      courseA_playLab_events5:
        courseA_playLab_events5_a: "Here are the event blocks that you will need to
          use to move Jorge up and down:\n\n<xml><block type=\"studio_whenArrow\">\n
          \   <title name=\"VALUE\">up</title>\n  </block></xml>\n\nand \n\n<xml><block
          type=\"studio_whenArrow\">\n    <title name=\"VALUE\">down</title>\n  </block></xml>"
        courseA_playLab_events5_b: |-
          Did you know that you can change the key for  the event arrow by clicking on the picture in the block and choosing a new key?

          ![](https://images.code.org/b010b6a8131689af53b33148753c15b4-image-1492639642316.gif)
      courseA_playLab_events5_2018:
        courseA_playLab_events5_a: "Here are the event blocks that you will need to
          use to move Jorge up and down:\n\n<xml><block type=\"studio_whenArrow\">\n
          \   <title name=\"VALUE\">up</title>\n  </block></xml>\n\nand \n\n<xml><block
          type=\"studio_whenArrow\">\n    <title name=\"VALUE\">down</title>\n  </block></xml>"
        courseA_playLab_events5_b: |-
          Did you know that you can change the key for  the event arrow by clicking on the picture in the block and choosing a new key?

          ![](https://images.code.org/b010b6a8131689af53b33148753c15b4-image-1492639642316.gif)
      courseA_playLab_events5_2019:
        courseA_playLab_events5_a: "Here are the event blocks that you will need to
          use to move Jorge up and down:\n\n<xml><block type=\"studio_whenArrow\">\n
          \   <title name=\"VALUE\">up</title>\n  </block></xml>\n\nand \n\n<xml><block
          type=\"studio_whenArrow\">\n    <title name=\"VALUE\">down</title>\n  </block></xml>"
        courseA_playLab_events5_b: |-
          Did you know that you can change the key for  the event arrow by clicking on the picture in the block and choosing a new key?

          ![](https://images.code.org/b010b6a8131689af53b33148753c15b4-image-1492639642316.gif)
      courseA_playLab_events6:
        courseA_playLab_events6_a: |-
          Here is the event block that you would use to have Jorge do something when clicked:

          <xml><block type="studio_whenSpriteClicked">
              <title name="SPRITE">1</title>
            </block></xml>
        courseA_playLab_events6_b: |-
          Here is the block you would use to change the background:

          <xml><block type="studio_setBackground">
              <title name="VALUE">random</title>
            </block></xml>
        courseA_playLab_events6_c: |-
          Here is the block you would use to play a random sound:

          <xml><block type="studio_playSound">
              <title name="SOUND">random</title>
            </block></xml>
      courseA_playLab_events6_2018:
        courseA_playLab_events6_a: |-
          Here is the event block that you would use to have Jorge do something when clicked:

          <xml><block type="studio_whenSpriteClicked">
              <title name="SPRITE">1</title>
            </block></xml>
        courseA_playLab_events6_b: |-
          Here is the block you would use to change the background:

          <xml><block type="studio_setBackground">
              <title name="VALUE">random</title>
            </block></xml>
        courseA_playLab_events6_c: |-
          Here is the block you would use to play a random sound:

          <xml><block type="studio_playSound">
              <title name="SOUND">random</title>
            </block></xml>
      courseA_playLab_events6_2019:
        courseA_playLab_events6_a: |-
          Here is the event block that you would use to have Jorge do something when clicked:

          <xml><block type="studio_whenSpriteClicked">
              <title name="SPRITE">1</title>
            </block></xml>
        courseA_playLab_events6_b: |-
          Here is the block you would use to change the background:

          <xml><block type="studio_setBackground">
              <title name="VALUE">random</title>
            </block></xml>
        courseA_playLab_events6_c: |-
          Here is the block you would use to play a random sound:

          <xml><block type="studio_playSound">
              <title name="SOUND">random</title>
            </block></xml>
      courseA_playLab_events7:
        courseA_playLab_events7_a: |-
          Use this block to control what happens when the actors collide.

          <xml><block type="studio_whenSpriteCollided">
              <title name="SPRITE1">1</title>
              <title name="SPRITE2">0</title>
            </block></xml>
      courseA_playLab_events7_2018:
        courseA_playLab_events7_a: |-
          Use this block to control what happens when the actors collide.

          <xml><block type="studio_whenSpriteCollided">
              <title name="SPRITE1">1</title>
              <title name="SPRITE2">0</title>
            </block></xml>
      courseA_playLab_events7_2019:
        courseA_playLab_events7_a: |-
          Use this block to control what happens when the actors collide.

          <xml><block type="studio_whenSpriteCollided">
              <title name="SPRITE1">1</title>
              <title name="SPRITE2">0</title>
            </block></xml>
      courseA_playlab_events_challenge1:
        courseA_playlab_events_challenge1_a: "ให้แวดเดิล เจ้านกเพนกวินปรากฎตัวเมื่อคุณคลิกที่รอบิน
          เจ้านกสีแดง\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title
          name=\"SPRITE\">2</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">3</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_b: "ทำให้บู เจ้าผีน้อยปรากฎตัวขึ้นเมื่อคุณคลิกเจ้าแวดเดิล!\n\n<xml>
          \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">3</title>\n
          \   <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n
          \       <title name=\"SPRITE\">4</title>\n      </block>\n    </next>\n
          \ </block></xml>"
        courseA_playlab_events_challenge1_c: ทำให้เจ้าอสูรขนปุย เจย์เด็น ปรากฎตัวขึ้น
          เมื่อคุณคลิกบู เจ้าผีน้อย!
        courseA_playlab_events_challenge1_d: "ทำให้เจ้าหุ่นยนต์สปีฟ ปรากฎตัวขึ้น เมื่อคุณคลิกที่เจ้าอสูรขนปุย!\n\n<xml>
          \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">5</title>\n
          \   <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n
          \       <title name=\"SPRITE\">6</title>\n      </block>\n    </next>\n
          \ </block></xml>"
        courseA_playlab_events_challenge1_e: "Finally, make Wendel the Wizard show
          when you click Spiff!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n
          \   <title name=\"SPRITE\">6</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">7</title>\n
          \     </block>\n    </next>\n  </block></xml>"
      courseA_playlab_events_challenge1_2018:
        courseA_playlab_events_challenge1_a: "ให้แวดเดิล เจ้านกเพนกวินปรากฎตัวเมื่อคุณคลิกที่รอบิน
          เจ้านกสีแดง\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title
          name=\"SPRITE\">2</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">3</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_b: "ทำให้บู เจ้าผีน้อยปรากฎตัวขึ้นเมื่อคุณคลิกเจ้าแวดเดิล!\n\n<xml>
          \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">3</title>\n
          \   <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n
          \       <title name=\"SPRITE\">4</title>\n      </block>\n    </next>\n
          \ </block></xml>"
        courseA_playlab_events_challenge1_c: ทำให้เจ้าอสูรขนปุย เจย์เด็น ปรากฎตัวขึ้น
          เมื่อคุณคลิกบู เจ้าผีน้อย!
        courseA_playlab_events_challenge1_d: "ทำให้เจ้าหุ่นยนต์สปีฟ ปรากฎตัวขึ้น เมื่อคุณคลิกที่เจ้าอสูรขนปุย!\n\n<xml>
          \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">5</title>\n
          \   <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n
          \       <title name=\"SPRITE\">6</title>\n      </block>\n    </next>\n
          \ </block></xml>"
        courseA_playlab_events_challenge1_e: "Finally, make Wendel the Wizard show
          when you click Spiff!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n
          \   <title name=\"SPRITE\">6</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">7</title>\n
          \     </block>\n    </next>\n  </block></xml>"
      courseA_playlab_events_challenge1_2019:
        courseA_playlab_events_challenge1_a: "ให้แวดเดิล เจ้านกเพนกวินปรากฎตัวเมื่อคุณคลิกที่รอบิน
          เจ้านกสีแดง\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title
          name=\"SPRITE\">2</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">3</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_b: "ทำให้บู เจ้าผีน้อยปรากฎตัวขึ้นเมื่อคุณคลิกเจ้าแวดเดิล!\n\n<xml>
          \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">3</title>\n
          \   <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n
          \       <title name=\"SPRITE\">4</title>\n      </block>\n    </next>\n
          \ </block></xml>"
        courseA_playlab_events_challenge1_c: ทำให้เจ้าอสูรขนปุย เจย์เด็น ปรากฎตัวขึ้น
          เมื่อคุณคลิกบู เจ้าผีน้อย!
        courseA_playlab_events_challenge1_d: "ทำให้เจ้าหุ่นยนต์สปีฟ ปรากฎตัวขึ้น เมื่อคุณคลิกที่เจ้าอสูรขนปุย!\n\n<xml>
          \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">5</title>\n
          \   <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n
          \       <title name=\"SPRITE\">6</title>\n      </block>\n    </next>\n
          \ </block></xml>"
        courseA_playlab_events_challenge1_e: "Finally, make Wendel the Wizard show
          when you click Spiff!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n
          \   <title name=\"SPRITE\">6</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">7</title>\n
          \     </block>\n    </next>\n  </block></xml>"
      courseA_playlab_events_challenge2:
        courseA_playlab_events_challenge2_a: "You can make a bird sing.\n\n<xml> \n
          \ <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">2</title>\n
          \   <next>\n          <block type=\"studio_saySprite\">\n            <title
          name=\"SPRITE\">2</title>\n            <title name=\"TEXT\">Tweet</title>\n
          \         </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge2_b: "You can make a robot beep.\n\n<xml>\n
          \ <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">6</title>\n
          \   <next>\n      \n          <block type=\"studio_playSound\">\n            <title
          name=\"SOUND\">winpoint</title>\n          </block>\n        </next>\n  </block></xml>"
        courseA_playlab_events_challenge2_c: |-
          You can make an angry monster growl.

          <xml>  <block type="studio_whenSpriteClicked">
              <title name="SPRITE">5</title>
              <next>
                <block type="studio_setSpriteEmotion">
                  <title name="SPRITE">5</title>
                  <title name="VALUE">2</title>
                  <next>
                    <block type="studio_saySprite">
                      <title name="SPRITE">5</title>
                      <title name="TEXT">Roar!</title>
                      <next>
                        <block type="studio_setSpriteEmotion">
                          <title name="SPRITE">5</title>
                          <title name="VALUE">0</title>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block></xml>
      courseA_playlab_events_challenge2_2018:
        courseA_playlab_events_challenge2_a: "You can make a bird sing.\n\n<xml> \n
          \ <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">2</title>\n
          \   <next>\n          <block type=\"studio_saySprite\">\n            <title
          name=\"SPRITE\">2</title>\n            <title name=\"TEXT\">Tweet</title>\n
          \         </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge2_b: "You can make a robot beep.\n\n<xml>\n
          \ <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">6</title>\n
          \   <next>\n      \n          <block type=\"studio_playSound\">\n            <title
          name=\"SOUND\">winpoint</title>\n          </block>\n        </next>\n  </block></xml>"
        courseA_playlab_events_challenge2_c: |-
          You can make an angry monster growl.

          <xml>  <block type="studio_whenSpriteClicked">
              <title name="SPRITE">5</title>
              <next>
                <block type="studio_setSpriteEmotion">
                  <title name="SPRITE">5</title>
                  <title name="VALUE">2</title>
                  <next>
                    <block type="studio_saySprite">
                      <title name="SPRITE">5</title>
                      <title name="TEXT">Roar!</title>
                      <next>
                        <block type="studio_setSpriteEmotion">
                          <title name="SPRITE">5</title>
                          <title name="VALUE">0</title>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block></xml>
      courseA_playlab_events_challenge2_2019:
        courseA_playlab_events_challenge2_a: "You can make a bird sing.\n\n<xml> \n
          \ <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">2</title>\n
          \   <next>\n          <block type=\"studio_saySprite\">\n            <title
          name=\"SPRITE\">2</title>\n            <title name=\"TEXT\">Tweet</title>\n
          \         </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge2_b: "You can make a robot beep.\n\n<xml>\n
          \ <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">6</title>\n
          \   <next>\n      \n          <block type=\"studio_playSound\">\n            <title
          name=\"SOUND\">winpoint</title>\n          </block>\n        </next>\n  </block></xml>"
        courseA_playlab_events_challenge2_c: |-
          You can make an angry monster growl.

          <xml>  <block type="studio_whenSpriteClicked">
              <title name="SPRITE">5</title>
              <next>
                <block type="studio_setSpriteEmotion">
                  <title name="SPRITE">5</title>
                  <title name="VALUE">2</title>
                  <next>
                    <block type="studio_saySprite">
                      <title name="SPRITE">5</title>
                      <title name="TEXT">Roar!</title>
                      <next>
                        <block type="studio_setSpriteEmotion">
                          <title name="SPRITE">5</title>
                          <title name="VALUE">0</title>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block></xml>
      courseB_Scrat_ramp1_2018:
        '1': If Scrat isn't doing what you want, make sure both of the blocks have
          been fully clicked together, then click "Run" again.
        '2': ไม่ต้องกลัวว่าคุณจะทำผิด! ลองทำบางอย่างดู และถ้ามันไม่ได้ผล ลองทำอย่างอื่นดู!
      courseB_Scrat_ramp1_2019:
        '1': If Scrat isn't doing what you want, make sure both of the blocks have
          been fully clicked together, then click "Run" again.
        '2': ไม่ต้องกลัวว่าคุณจะทำผิด! ลองทำบางอย่างดู และถ้ามันไม่ได้ผล ลองทำอย่างอื่นดู!
      courseB_Scrat_ramp2_2018:
        '1': |-
          โค้ดของคุณควรเป็นแบบนี้:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp2_2019:
        '1': |-
          โค้ดของคุณควรเป็นแบบนี้:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp3a_2018:
        '1': |-
          โค้ดของคุณควรเป็นแบบนี้:
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveNorth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp3a_2019:
        '1': |-
          โค้ดของคุณควรเป็นแบบนี้:
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveNorth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp3b_2018:
        '1': |-
          โค้ดของคุณควรเป็นแบบนี้:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveSouth">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp3b_2019:
        '1': |-
          โค้ดของคุณควรเป็นแบบนี้:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveSouth">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp4a_2018:
        '1': |-
          โค้ดของคุณควรเป็นแบบนี้:
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveSouth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp4a_2019:
        '1': |-
          โค้ดของคุณควรเป็นแบบนี้:
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveSouth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp5a_2018:
        '1': |-
          โค้ดของคุณควรเป็นแบบนี้:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest">
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp5a_2019:
        '1': |-
          โค้ดของคุณควรเป็นแบบนี้:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest">
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_artist_loops2:
        courseB_artist_loops2_a: ถ้าคุณต้องการให้ลูปซ้ำมากกว่า 4 ครั้งคุณสามารถเปลี่ยนหมายเลขที่ด้านบนของบล็อกได้
        courseB_artist_loops2_b: Try running the code first to see where the artist
          ends up.
      courseB_artist_loops2_2018:
        courseB_artist_loops2_a: ถ้าคุณต้องการให้ลูปซ้ำมากกว่า 4 ครั้งคุณสามารถเปลี่ยนหมายเลขที่ด้านบนของบล็อกได้
        courseB_artist_loops2_b: Try running the code first to see where the artist
          ends up.
      courseB_artist_loops2_2019:
        courseB_artist_loops2_a: ถ้าคุณต้องการให้ลูปซ้ำมากกว่า 4 ครั้งคุณสามารถเปลี่ยนหมายเลขที่ด้านบนของบล็อกได้
        courseB_artist_loops2_b: Try running the code first to see where the artist
          ends up.
      courseB_artist_loops3:
        courseB_artist_loops3_a: Remember to use a `repeat` loop for better code!
        courseB_artist_loops3_b: The artist will want to move South to draw this line.
      courseB_artist_loops3_2018:
        courseB_artist_loops3_a: |-
          Remember to use a `repeat` <xml><block type="controls_repeat_simplified">
              <title name="TIMES">???</title>
            </block></xml> loop for better code!
        courseB_artist_loops3_b: The artist will want to move South to draw this line.
      courseB_artist_loops3_2019:
        courseB_artist_loops3_a: |-
          Remember to use a `repeat` <xml><block type="controls_repeat_simplified">
              <title name="TIMES">???</title>
            </block></xml> loop for better code!
        courseB_artist_loops3_b: The artist will want to move South to draw this line.
      courseB_artist_loops4:
        courseB_artist_loops4_a: The jump block lets you move forward without drawing
          a line.
        courseB_artist_loops4_b: You will need to add a block inside of the repeat
          loop to solve this puzzle.
        courseB_artist_loops4_c: Don't forget to change the number of times the loop
          repeats.
      courseB_artist_loops4_2018:
        courseB_artist_loops4_a: The jump block lets you move forward without drawing
          a line.
        courseB_artist_loops4_b: You will need to add a block inside of the repeat
          loop to solve this puzzle.
        courseB_artist_loops4_c: Don't forget to change the number of times the loop
          repeats.
      courseB_artist_loops4_2019:
        courseB_artist_loops4_a: The jump block lets you move forward without drawing
          a line.
        courseB_artist_loops4_b: You will need to add a block inside of the repeat
          loop to solve this puzzle.
        courseB_artist_loops4_c: Don't forget to change the number of times the loop
          repeats.
      courseB_artist_loops5:
        courseB_artist_loops5_a: Drag out a `repeat` loop, then put the other blocks
          inside of it. How many times do you need to repeat?
      courseB_artist_loops5_2018:
        courseB_artist_loops5_a: |-
          Drag out a `repeat` <xml><block type="controls_repeat_simplified">
              <title name="TIMES">???</title>
            </block></xml> loop, then put the other blocks inside of it. How many times do you need to repeat?
      courseB_artist_loops5_2019:
        courseB_artist_loops5_a: |-
          Drag out a `repeat` <xml><block type="controls_repeat_simplified">
              <title name="TIMES">???</title>
            </block></xml> loop, then put the other blocks inside of it. How many times do you need to repeat?
      courseB_artist_loops6:
        courseB_artist_loops6_b: Try writing the moves down on a piece of paper and
          look for a pattern.
      courseB_artist_loops6_2018:
        courseB_artist_loops6_b: Try writing the moves down on a piece of paper and
          look for a pattern.
      courseB_artist_loops6_2019:
        courseB_artist_loops6_b: Try writing the moves down on a piece of paper and
          look for a pattern.
      courseB_artist_loops7:
        courseB_artist_loops7_a: This challenge uses **4** loops, one right after
          another!
        courseB_artist_loops7_b: |-
          Notice that every loop makes a stair pattern that goes a different direction.

          ![](https://images.code.org/7d08d5514766c5c15074e90731991505-image-1466705649513.gif)
        courseB_artist_loops7_c: |-
          The loops should do this:

          -   Loop 1
              -   Right
              -   Down

          -   Loop 2
              -   Right
              -   Up

          -   Loop 3
              -   Left
              -   Up

          -   Loop 4
              -   Left
              -   Down
      courseB_artist_loops7_2018:
        courseB_artist_loops7_a: This challenge uses **4** loops, one right after
          another!
        courseB_artist_loops7_b: |-
          Notice that every loop makes a stair pattern that goes a different direction.

          ![](https://images.code.org/7d08d5514766c5c15074e90731991505-image-1466705649513.gif)
        courseB_artist_loops7_c: |-
          The loops should do this:

          -   Loop 1
              -   Right
              -   Down

          -   Loop 2
              -   Right
              -   Up

          -   Loop 3
              -   Left
              -   Up

          -   Loop 4
              -   Left
              -   Down
      courseB_artist_loops7_2019:
        courseB_artist_loops7_a: This challenge uses **4** loops, one right after
          another!
        courseB_artist_loops7_b: |-
          Notice that every loop makes a stair pattern that goes a different direction.

          ![](https://images.code.org/7d08d5514766c5c15074e90731991505-image-1466705649513.gif)
        courseB_artist_loops7_c: |-
          The loops should do this:

          -   Loop 1
              -   Right
              -   Down

          -   Loop 2
              -   Right
              -   Up

          -   Loop 3
              -   Left
              -   Up

          -   Loop 4
              -   Left
              -   Down
      courseB_artist_loops8:
        courseB_artist_loops8_a: How many times should you repeat the pattern to make
          the ladder?
        courseB_artist_loops8_b: Try running the code you're given to see what it
          does.
      courseB_artist_loops8_2018:
        courseB_artist_loops8_a: How many times should you repeat the pattern to make
          the ladder?
        courseB_artist_loops8_b: Try running the code you're given to see what it
          does.
      courseB_artist_loops8_2019:
        courseB_artist_loops8_a: How many times should you repeat the pattern to make
          the ladder?
        courseB_artist_loops8_b: Try running the code you're given to see what it
          does.
      courseB_artist_loops9:
        courseB_artist_loops9_a: Remember that jump blocks can be used to move without
          drawing a line.
        courseB_artist_loops9_b: You will want to use the W block to solve this puzzle.
        courseB_artist_loops9_c: คิดไม่ออกว่าจะวางลูปไว้ที่ไหน? ลองเขียนโค้ดทีละขั้นตอนและค้นหารูปแบบดู
      courseB_artist_loops9_2018:
        courseB_artist_loops9_a: Remember that jump blocks can be used to move without
          drawing a line.
        courseB_artist_loops9_b: You will want to use the W block to solve this puzzle.
        courseB_artist_loops9_c: คิดไม่ออกว่าจะวางลูปไว้ที่ไหน? ลองเขียนโค้ดทีละขั้นตอนและค้นหารูปแบบดู
      courseB_artist_loops9_2019:
        courseB_artist_loops9_a: Remember that jump blocks can be used to move without
          drawing a line.
        courseB_artist_loops9_b: You will want to use the W block to solve this puzzle.
        courseB_artist_loops9_c: คิดไม่ออกว่าจะวางลูปไว้ที่ไหน? ลองเขียนโค้ดทีละขั้นตอนและค้นหารูปแบบดู
      courseB_artist_loops_challenge1:
        courseB_artist_loops_challenge1_a: 'Blocks like this: <xml>  <block type="simple_move_up_right"/></xml>
          will let your artist move at a slant!'
        courseB_artist_loops_challenge1_b: When you finish one of the dice, `jump`
          to the next!
        courseB_artist_loops_challenge1_c: 'You will need to `move` or `jump` over
          some of the same lines twice. '
      courseB_artist_loops_challenge1_2018:
        courseB_artist_loops_challenge1_a: 'Blocks like this: <xml>  <block type="simple_move_up_right"/></xml>
          will let your artist move at a slant!'
        courseB_artist_loops_challenge1_b: When you finish one of the dice, `jump`
          to the next!
        courseB_artist_loops_challenge1_c: 'You will need to `move` or `jump` over
          some of the same lines twice. '
      courseB_artist_loops_challenge1_2019:
        courseB_artist_loops_challenge1_a: 'Blocks like this: <xml>  <block type="simple_move_up_right"/></xml>
          will let your artist move at a slant!'
        courseB_artist_loops_challenge1_b: When you finish one of the dice, `jump`
          to the next!
        courseB_artist_loops_challenge1_c: 'You will need to `move` or `jump` over
          some of the same lines twice. '
      courseB_artist_loops_challenge2:
        courseB_artist_loops_challenge2_a: The code to draw an X is already given
          to you. All you need to do is repeat the X and `jump` to the next spot.
        courseB_artist_loops_challenge2_b: You can use `jump` blocks to move to other
          spaces without drawing.
      courseB_artist_loops_challenge2_2018:
        courseB_artist_loops_challenge2_a: The code to draw an X is already given
          to you. All you need to do is repeat the X and `jump` to the next spot.
        courseB_artist_loops_challenge2_b: You can use `jump` blocks to move to other
          spaces without drawing.
      courseB_artist_loops_challenge2_2019:
        courseB_artist_loops_challenge2_a: The code to draw an X is already given
          to you. All you need to do is repeat the X and `jump` to the next spot.
        courseB_artist_loops_challenge2_b: You can use `jump` blocks to move to other
          spaces without drawing.
      courseB_collector_loops1:
        courseB_collector_loops1_a: The <xml><block type="collector_collect_simplified"/></xml>
          block can be used to pick up treasure when you are standing on top of it.
      courseB_collector_loops10:
        courseB_collector_loops10_a: If you can't figure out where to put the `repeat`
          loops, write out the code step-by-step and look for a pattern.
        courseB_collector_loops10_b: Try writing the moves down on a piece of paper
          and looking for a pattern.
      courseB_collector_loops10_2018:
        courseB_collector_loops10_a: If you can't figure out where to put the `repeat`
          loops, write out the code step-by-step and look for a pattern.
        courseB_collector_loops10_b: Try writing the moves down on a piece of paper
          and looking for a pattern.
      courseB_collector_loops10_2019:
        courseB_collector_loops10_a: If you can't figure out where to put the `repeat`
          loops, write out the code step-by-step and look for a pattern.
        courseB_collector_loops10_b: Try writing the moves down on a piece of paper
          and looking for a pattern.
      courseB_collector_loops1_2018:
        courseB_collector_loops1_a: The <xml><block type="collector_collect_simplified"/></xml>
          block can be used to pick up treasure when you are standing on top of it.
      courseB_collector_loops1_2019:
        courseB_collector_loops1_a: The <xml><block type="collector_collect_simplified"/></xml>
          block can be used to pick up treasure when you are standing on top of it.
      courseB_collector_loops2:
        courseB_collector_loops2_a: คุณต้องขยับเดินเข้าไปก่อนที่คุณจะสามารถเก็บรวบรวมสมบัติได้
        courseB_collector_loops2_b: When you have reached a spot with treasure, use
          the <xml><block type="collector_collect"/></xml> block to pick it up.
      courseB_collector_loops2_2018:
        courseB_collector_loops2_a: คุณต้องขยับเดินเข้าไปก่อนที่คุณจะสามารถเก็บรวบรวมสมบัติได้
        courseB_collector_loops2_b: When you have reached a spot with treasure, use
          the <xml><block type="collector_collect"/></xml> block to pick it up.
      courseB_collector_loops2_2019:
        courseB_collector_loops2_a: คุณต้องขยับเดินเข้าไปก่อนที่คุณจะสามารถเก็บรวบรวมสมบัติได้
        courseB_collector_loops2_b: When you have reached a spot with treasure, use
          the <xml><block type="collector_collect"/></xml> block to pick it up.
      courseB_collector_loops3:
        courseB_collector_prog3_a: Try using a <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">5</title></block></xml> block to collect your
          treasure.
        courseB_collector_prog3_b: โปรดจำไว้ว่าคุณสามารถใส่บล็อกได้มากกว่าหนึ่งบล็อกในลูปทำซ้ำ
      courseB_collector_loops3_2018:
        courseB_collector_prog3_a: Try using a <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">5</title></block></xml> block to collect your
          treasure.
        courseB_collector_prog3_b: โปรดจำไว้ว่าคุณสามารถใส่บล็อกได้มากกว่าหนึ่งบล็อกในลูปทำซ้ำ
      courseB_collector_loops3_2019:
        courseB_collector_prog3_a: Try using a <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">5</title></block></xml> block to collect your
          treasure.
        courseB_collector_prog3_b: โปรดจำไว้ว่าคุณสามารถใส่บล็อกได้มากกว่าหนึ่งบล็อกในลูปทำซ้ำ
      courseB_collector_loops4:
        courseB_collector_loops4_a: Try using the step button to figure out where
          things go wrong.
        courseB_collector_loops4_b: เพื่อที่จะเปลี่ยนให้ลอเรลไปไกลได้เท่าใดนั้น ให้เปลี่ยนจำนวนครั้งของรอบที่ลูปต้องวนซ้ำ
        courseB_collector_loops4_c: Laurel needs to walk down and collect the treasure
          after she finishes the `repeat` loop!
      courseB_collector_loops4_2018:
        courseB_collector_loops4_a: Try using the step button to figure out where
          things go wrong.
        courseB_collector_loops4_b: เพื่อที่จะเปลี่ยนให้ลอเรลไปไกลได้เท่าใดนั้น ให้เปลี่ยนจำนวนครั้งของรอบที่ลูปต้องวนซ้ำ
        courseB_collector_loops4_c: |-
          Laurel needs to walk down and collect the treasure after she finishes the `repeat` <xml><block type="controls_repeat_simplified">
              <title name="TIMES">???</title>
            </block></xml>loop!
      courseB_collector_loops4_2019:
        courseB_collector_loops4_a: Try using the step button to figure out where
          things go wrong.
        courseB_collector_loops4_b: เพื่อที่จะเปลี่ยนให้ลอเรลไปไกลได้เท่าใดนั้น ให้เปลี่ยนจำนวนครั้งของรอบที่ลูปต้องวนซ้ำ
        courseB_collector_loops4_c: |-
          Laurel needs to walk down and collect the treasure after she finishes the `repeat` <xml><block type="controls_repeat_simplified">
              <title name="TIMES">???</title>
            </block></xml>loop!
      courseB_collector_loops5:
        courseB_collector_loops5_a: Use more than one loop to get the job done.
        courseB_collector_loops5_b: Try running the code a couple of times to see
          what happens.
      courseB_collector_loops5_2018:
        courseB_collector_loops5_a: Use more than one loop to get the job done.
        courseB_collector_loops5_b: Try running the code a couple of times to see
          what happens.
      courseB_collector_loops5_2019:
        courseB_collector_loops5_a: Use more than one loop to get the job done.
        courseB_collector_loops5_b: Try running the code a couple of times to see
          what happens.
      courseB_collector_loops6:
        courseB_collector_loops6_a: Can't figure out where things start going wrong?
          Use the "Step" button to run through your program one block at a time.
        courseB_collector_loops6_b: You can change the number of times the repeat
          loop runs by clicking on the "3" and choosing a different number.
        courseB_collector_loops6_c: You will want to use 3 `repeat` loops to solve
          this puzzle.
        courseB_collector_loops6_d: If you're confused, try breaking this puzzle into
          3 pieces.
      courseB_collector_loops6_2018:
        courseB_collector_loops6_a: Can't figure out where things start going wrong?
          Use the "Step" button to run through your program one block at a time.
        courseB_collector_loops6_b: You can change the number of times the repeat
          loop runs by clicking on the "3" and choosing a different number.
        courseB_collector_loops6_c: |-
          You will want to use 3 `repeat` <xml><block type="controls_repeat_simplified">
              <title name="TIMES">???</title>
            </block></xml> loops to solve this puzzle.
        courseB_collector_loops6_d: If you're confused, try breaking this puzzle into
          3 pieces.
      courseB_collector_loops6_2019:
        courseB_collector_loops6_a: Can't figure out where things start going wrong?
          Use the "Step" button to run through your program one block at a time.
        courseB_collector_loops6_b: You can change the number of times the repeat
          loop runs by clicking on the "3" and choosing a different number.
        courseB_collector_loops6_c: |-
          You will want to use 3 `repeat` <xml><block type="controls_repeat_simplified">
              <title name="TIMES">???</title>
            </block></xml> loops to solve this puzzle.
        courseB_collector_loops6_d: If you're confused, try breaking this puzzle into
          3 pieces.
      courseB_collector_loops7:
        courseB_collector_loops7_a: If you are having a hard time with the puzzle,
          try drawing it on paper to help you figure it out.
        courseB_collector_loops7_b: You will need 3 repeat loops to solve this puzzle,
          and don't forget the extra treasure at the end!
      courseB_collector_loops7_2018:
        courseB_collector_loops7_a: If you are having a hard time with the puzzle,
          try drawing it on paper to help you figure it out.
        courseB_collector_loops7_b: You will need 3 repeat loops to solve this puzzle,
          and don't forget the extra treasure at the end!
      courseB_collector_loops7_2019:
        courseB_collector_loops7_a: If you are having a hard time with the puzzle,
          try drawing it on paper to help you figure it out.
        courseB_collector_loops7_b: You will need 3 repeat loops to solve this puzzle,
          and don't forget the extra treasure at the end!
      courseB_collector_loops8:
        courseB_collector_loops8_challenge_a: If you can't figure out where to put
          the repeat loops, write out the code step-by-step and look for a pattern.
      courseB_collector_loops8_2018:
        courseB_collector_loops8_challenge_a: If you can't figure out where to put
          the repeat loops, write out the code step-by-step and look for a pattern.
      courseB_collector_loops8_2019:
        courseB_collector_loops8_challenge_a: If you can't figure out where to put
          the repeat loops, write out the code step-by-step and look for a pattern.
      courseB_collector_loops9:
        courseB_collector_loops9_a: Does this seem too hard?  Break it up into 3 little
          problems to make it feel easier.
        courseB_collector_loops9_b: You will need 3 repeat loops, one after the other,
          for this solution.
      courseB_collector_loops9_2018:
        courseB_collector_loops9_a: Does this seem too hard?  Break it up into 3 little
          problems to make it feel easier.
        courseB_collector_loops9_b: You will need 3 repeat loops, one after the other,
          for this solution.
      courseB_collector_loops9_2019:
        courseB_collector_loops9_a: Does this seem too hard?  Break it up into 3 little
          problems to make it feel easier.
        courseB_collector_loops9_b: You will need 3 repeat loops, one after the other,
          for this solution.
      courseB_collector_loops_challenge1:
        courseB_collector_loops_challenge1_b: |-
          Start by looping the following commands:

          <xml>
            <block type="maze_moveSouth">
              <next>
              <block type="collector_collect"></block>
              </next>
              </block>
          </xml>
        courseB_collector_loops_challenge1_c: "Move East twice between each path.\n\n<xml>\n
          \ <block type=\"maze_moveEast\"><next>\n  <block type=\"maze_moveEast\"></block></next></block>\n
          \ </xml>\n\nYou can do this with only 14 blocks. Click for one more hint
          to see a solution. "
        courseB_collector_loops_challenge1_d: |-
          Try this!

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat_simplified">
                  <title name="TIMES">5</title>
                  <statement name="DO">
                    <block type="maze_moveSouth">
                      <next>
                        <block type="collector_collect"/>
                      </next>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_moveEast">
                      <next>
                        <block type="maze_moveEast">
                          <next>
                            <block type="controls_repeat_simplified">
                              <title name="TIMES">5</title>
                              <statement name="DO">
                                <block type="collector_collect">
                                  <next>
                                    <block type="maze_moveNorth"/>
                                  </next>
                                </block>
                              </statement>
                              <next>
                                <block type="maze_moveEast">
                                  <next>
                                    <block type="maze_moveEast">
                                      <next>
                                        <block type="controls_repeat_simplified">
                                          <title name="TIMES">5</title>
                                          <statement name="DO">
                                            <block type="maze_moveSouth">
                                              <next>
                                                <block type="collector_collect"/>
                                              </next>
                                            </block>
                                          </statement>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseB_collector_loops_challenge1_2018:
        courseB_collector_loops_challenge1_b: |-
          Start by looping the following commands:

          <xml>
            <block type="maze_moveSouth">
              <next>
              <block type="collector_collect"></block>
              </next>
              </block>
          </xml>
        courseB_collector_loops_challenge1_c: "Move East twice between each path.\n\n<xml>\n
          \ <block type=\"maze_moveEast\"><next>\n  <block type=\"maze_moveEast\"></block></next></block>\n
          \ </xml>\n\nYou can do this with only 14 blocks. Click for one more hint
          to see a solution. "
        courseB_collector_loops_challenge1_d: |-
          Try this!

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat_simplified">
                  <title name="TIMES">5</title>
                  <statement name="DO">
                    <block type="maze_moveSouth">
                      <next>
                        <block type="collector_collect"/>
                      </next>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_moveEast">
                      <next>
                        <block type="maze_moveEast">
                          <next>
                            <block type="controls_repeat_simplified">
                              <title name="TIMES">5</title>
                              <statement name="DO">
                                <block type="collector_collect">
                                  <next>
                                    <block type="maze_moveNorth"/>
                                  </next>
                                </block>
                              </statement>
                              <next>
                                <block type="maze_moveEast">
                                  <next>
                                    <block type="maze_moveEast">
                                      <next>
                                        <block type="controls_repeat_simplified">
                                          <title name="TIMES">5</title>
                                          <statement name="DO">
                                            <block type="maze_moveSouth">
                                              <next>
                                                <block type="collector_collect"/>
                                              </next>
                                            </block>
                                          </statement>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseB_collector_loops_challenge1_2019:
        courseB_collector_loops_challenge1_b: |-
          Start by looping the following commands:

          <xml>
            <block type="maze_moveSouth">
              <next>
              <block type="collector_collect"></block>
              </next>
              </block>
          </xml>
        courseB_collector_loops_challenge1_c: "Move East twice between each path.\n\n<xml>\n
          \ <block type=\"maze_moveEast\"><next>\n  <block type=\"maze_moveEast\"></block></next></block>\n
          \ </xml>\n\nYou can do this with only 14 blocks. Click for one more hint
          to see a solution. "
        courseB_collector_loops_challenge1_d: |-
          Try this!

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat_simplified">
                  <title name="TIMES">5</title>
                  <statement name="DO">
                    <block type="maze_moveSouth">
                      <next>
                        <block type="collector_collect"/>
                      </next>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_moveEast">
                      <next>
                        <block type="maze_moveEast">
                          <next>
                            <block type="controls_repeat_simplified">
                              <title name="TIMES">5</title>
                              <statement name="DO">
                                <block type="collector_collect">
                                  <next>
                                    <block type="maze_moveNorth"/>
                                  </next>
                                </block>
                              </statement>
                              <next>
                                <block type="maze_moveEast">
                                  <next>
                                    <block type="maze_moveEast">
                                      <next>
                                        <block type="controls_repeat_simplified">
                                          <title name="TIMES">5</title>
                                          <statement name="DO">
                                            <block type="maze_moveSouth">
                                              <next>
                                                <block type="collector_collect"/>
                                              </next>
                                            </block>
                                          </statement>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseB_collector_loops_challenge2:
        courseB_collector_loops_challenge2_a: ถ้าทำอะไรพลาดไป อย่ากลัวที่จะเริ่มต้นใหม่
          อย่ายอมแพ้นะ!
        courseB_collector_loops_challenge2_b: |-
          ถ้าคุณทำตามรูปแบบนี้ซ้ำหลายรอบ ลอเรลจะไม่เดินชนกำแพงที่อยู่ด้านล่างของถ้ำเลย!

          <xml><block type="maze_moveEast">
                      <next>
                        <block type="collector_collect">
                          <next>
                            <block type="maze_moveWest">
                              <next>
                                <block type="maze_moveWest">
                                  <next>
                                    <block type="maze_moveSouth"/>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block></xml>
        courseB_collector_loops_challenge2_c: ลองใช้บล็อก `ทำซ้ำ` เพื่อเก็บกองสมบัติกองสุดท้ายให้หมดดูสิ!
        courseB_collector_loops_challenge2_d: |-
          ลองใช้วิธีนี้สิ:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat_simplified_dropdown">
                  <title name="TIMES" config="3-10">4</title>
                  <statement name="DO">
                    <block type="maze_moveEast">
                      <next>
                        <block type="collector_collect">
                          <next>
                            <block type="maze_moveWest">
                              <next>
                                <block type="maze_moveWest">
                                  <next>
                                    <block type="maze_moveSouth"/>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                  <next>
                    <block type="controls_repeat_simplified_dropdown">
                      <title name="TIMES" config="3-10">6</title>
                      <statement name="DO">
                        <block type="collector_collect"/>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseB_collector_loops_challenge2a:
        courseB_collector_loops_challenge2a_a: If something goes wrong, try debugging
          it. Don't give up!
        courseB_collector_loops_challenge2a_b: Look at this option for getting through
          the maze. Do you see a pattern that you can repeat?
        courseB_collector_loops_challenge2a_c: To collect all of the treasure, you
          will either need to add two  <xml> <block type="collector_collect"/></xml>
          blocks inside your loop, or put the block inside of its own `repeat` block.
      courseB_collector_loops_challenge2a_2018:
        courseB_collector_loops_challenge2a_a: If something goes wrong, try debugging
          it. Don't give up!
        courseB_collector_loops_challenge2a_b: Look at this option for getting through
          the maze. Do you see a pattern that you can repeat?
        courseB_collector_loops_challenge2a_c: To collect all of the treasure, you
          will either need to add two  <xml> <block type="collector_collect"/></xml>
          blocks inside your loop, or put the block inside of its own `repeat` block.
      courseB_collector_loops_challenge2a_2019:
        courseB_collector_loops_challenge2a_a: If something goes wrong, try debugging
          it. Don't give up!
        courseB_collector_loops_challenge2a_b: Look at this option for getting through
          the maze. Do you see a pattern that you can repeat?
        courseB_collector_loops_challenge2a_c: To collect all of the treasure, you
          will either need to add two  <xml> <block type="collector_collect"/></xml>
          blocks inside your loop, or put the block inside of its own `repeat` block.
      courseB_iceage_loops1:
        courseB_iceage_loops1_a: ระวังรอยแยกในน้ำแข็ง เจ้ากระรอกเขี้ยวดาบสแกรทจะพลาดหล่นลงไปได้!
        courseB_iceage_loops1_b: |-
          คุณจะต้องใช้บล็อกอันนี้:
          <xml><block type="maze_moveEast"/></xml>
      courseB_iceage_loops10:
        courseB_iceage_loops10_a: ระวังแผ่นน้ำแข็งที่แตกร้าว เจ้ากระรอกเขี้ยวดาบสแกรทอาจจะตกลงไปในน้ำได้!
        courseB_iceage_loops10_b: ลองพูดขั้นตอนออกมาดังๆ หรือจดขั้นตอนเหล่านั้นลงบนกระดาษ
          คุณเห็นรูปแบบอะไรไหม?
        courseB_iceage_loops10_c: ปริศนานี้ยาวมาก! ลองให้เจ้ากระรอกเขี้ยวดาบสแกรทเดินตามเส้นทางดู
      courseB_iceage_loops10_2019:
        courseB_iceage_loops10_a: ระวังแผ่นน้ำแข็งที่แตกร้าว เจ้ากระรอกเขี้ยวดาบสแกรทอาจจะตกลงไปในน้ำได้!
        courseB_iceage_loops10_b: ลองพูดขั้นตอนออกมาดังๆ หรือจดขั้นตอนเหล่านั้นลงบนกระดาษ
          คุณเห็นรูปแบบอะไรไหม?
        courseB_iceage_loops10_c: ปริศนานี้ยาวมาก! ลองให้เจ้ากระรอกเขี้ยวดาบสแกรทเดินตามเส้นทางดู
      courseB_iceage_loops1_2019:
        courseB_iceage_loops1_a: ระวังรอยแยกในน้ำแข็ง เจ้ากระรอกเขี้ยวดาบสแกรทจะพลาดหล่นลงไปได้!
        courseB_iceage_loops1_b: |-
          คุณจะต้องใช้บล็อกอันนี้:
          <xml><block type="maze_moveEast"/></xml>
      courseB_iceage_loops2:
        courseB_iceage_loops2_a: แบ่งปริศนานี้เป็นสองส่วน ส่วนหนึ่งก่อนถึงหัวมุมและอีกส่วนหนึ่งหลังจากผ่านหัวมุมไปแล้ว
        courseB_iceage_loops2_b: หากคุณเกิดติดขัดไม่รู้ว่าจะไปต่ออย่างไร ให้ลองพูดขั้นตอนต่างๆ
          ออกมาดังๆ
        courseB_iceage_loops2_c: ลองไปตามเส้นทางนี้ดู เพื่อพาเจ้ากระรอกเขี้ยวดาบไปให้ถึงลูกโอ๊ค
      courseB_iceage_loops2_2019:
        courseB_iceage_loops2_a: แบ่งปริศนานี้เป็นสองส่วน ส่วนหนึ่งก่อนถึงหัวมุมและอีกส่วนหนึ่งหลังจากผ่านหัวมุมไปแล้ว
        courseB_iceage_loops2_b: หากคุณเกิดติดขัดไม่รู้ว่าจะไปต่ออย่างไร ให้ลองพูดขั้นตอนต่างๆ
          ออกมาดังๆ
        courseB_iceage_loops2_c: ลองไปตามเส้นทางนี้ดู เพื่อพาเจ้ากระรอกเขี้ยวดาบไปให้ถึงลูกโอ๊ค
      courseB_iceage_loops3:
        courseB_iceage_loops3_a: |-
          ให้ใช้บล็อกใหม่บล็อกนี้!
          <xml><block type="controls_repeat_simplified_dropdown">

          <title name="TIMES" config="3-10">5</title>
          </block></xml>
        courseB_iceage_loops3_b: |-
          การทำซ้ำโค้ดนั้น ให้ลากเอาบล็อกลูป `ทำซ้ำ` <xml><block type="controls_repeat_simplified">

          <title name="TIMES">???</title>
          </block></xml>ออกมา แล้วใส่บล็อกที่คุณต้องการไว้ภายใน
      courseB_iceage_loops3_2019:
        courseB_iceage_loops3_a: |-
          ให้ใช้บล็อกใหม่บล็อกนี้!
          <xml><block type="controls_repeat_simplified_dropdown">

          <title name="TIMES" config="3-10">5</title>
          </block></xml>
        courseB_iceage_loops3_b: |-
          การทำซ้ำโค้ดนั้น ให้ลากเอาบล็อกลูป `ทำซ้ำ` <xml><block type="controls_repeat_simplified">

          <title name="TIMES">???</title>
          </block></xml>ออกมา แล้วใส่บล็อกที่คุณต้องการไว้ภายใน
      courseB_iceage_loops4:
        courseB_iceage_loops4_a: ลองเขียนขั้นตอนต่าง ๆที่เจ้ากระรอกเขี้ยวดาบสแกรทน่าจะใช้เพื่อไปให้ถึงลูกโอ็คลงบนกระดาษ
          คุณเห็นรูปแบบอะไรไหม?
        courseB_iceage_loops4_b: อย่ากลัวที่จะเรียกใช้งานโค้ดของคุณ และดูว่าจะเกิดอะไรขึ้น!
        courseB_iceage_loops4_c: ที่เห็นอยู่นี่ เป็นแนวทางที่เจ้ากระรอกเขี้ยวกดาบสแกรทน่าจะใช้
      courseB_iceage_loops4_2019:
        courseB_iceage_loops4_a: ลองเขียนขั้นตอนต่าง ๆที่เจ้ากระรอกเขี้ยวดาบสแกรทน่าจะใช้เพื่อไปให้ถึงลูกโอ็คลงบนกระดาษ
          คุณเห็นรูปแบบอะไรไหม?
        courseB_iceage_loops4_b: อย่ากลัวที่จะเรียกใช้งานโค้ดของคุณ และดูว่าจะเกิดอะไรขึ้น!
        courseB_iceage_loops4_c: ที่เห็นอยู่นี่ เป็นแนวทางที่เจ้ากระรอกเขี้ยวกดาบสแกรทน่าจะใช้
      courseB_iceage_loops6:
        courseB_iceage_loops6_a: Your final code will have **three** movement blocks.
        courseB_iceage_loops6_b: คุณต้องเพิ่มลูปทำซ้ำเข้าไปอีก**หนึ่ง**ลูป!
        courseB_iceage_loops6_c: Your final path should look like this.
      courseB_iceage_loops6_2019:
        courseB_iceage_loops6_a: Your final code will have **three** movement blocks.
        courseB_iceage_loops6_b: คุณต้องเพิ่มลูปทำซ้ำเข้าไปอีก**หนึ่ง**ลูป!
        courseB_iceage_loops6_c: Your final path should look like this.
      courseB_iceage_loops7:
        courseB_iceage_loops7_a: หากคุณติด คิดไม่ออก ให้ลองเขียนขั้นตอนต่าง ๆ ลงบนกระดาษ
          คุณเห็นรูปแบบไหมครับ?
        courseB_iceage_loops7_b: นี่เป็นหนทางที่เจ้ากระรอกเขี้ยวดาบสแกรทน่าจะใช้ เพื่อไปให้ถึงลูกโอ็คนั่น
      courseB_iceage_loops7_2019:
        courseB_iceage_loops7_a: หากคุณติด คิดไม่ออก ให้ลองเขียนขั้นตอนต่าง ๆ ลงบนกระดาษ
          คุณเห็นรูปแบบไหมครับ?
        courseB_iceage_loops7_b: นี่เป็นหนทางที่เจ้ากระรอกเขี้ยวดาบสแกรทน่าจะใช้ เพื่อไปให้ถึงลูกโอ็คนั่น
      courseB_iceage_loops8:
        courseB_iceage_loops8_a: Are the movement blocks right? What else can you
          change?
        courseB_iceage_loops8_b: ลูปแรกควรทำซ้ำ **3** ครั้ง ลูปที่สองควรทำซ้ำ **5**
          ลูปที่สามควรทำซ้ำ **4** และลูปสุดท้ายควรทำซ้ำ **4** ครั้ง
        courseB_iceage_loops8_c: ใช้ลูปเพื่อช่วยเจ้ากระรอกเขี้ยวดาบสแกรทให้เดินไปตามทางเส้นนี้
      courseB_iceage_loops8_2019:
        courseB_iceage_loops8_a: Are the movement blocks right? What else can you
          change?
        courseB_iceage_loops8_b: ลูปแรกควรทำซ้ำ **3** ครั้ง ลูปที่สองควรทำซ้ำ **5**
          ลูปที่สามควรทำซ้ำ **4** และลูปสุดท้ายควรทำซ้ำ **4** ครั้ง
        courseB_iceage_loops8_c: ใช้ลูปเพื่อช่วยเจ้ากระรอกเขี้ยวดาบสแกรทให้เดินไปตามทางเส้นนี้
      courseB_iceage_loops9:
        courseB_iceage_loops9_a: มีปัญหาอะไรไหมครับ? ลองแบ่งปริศนานี้เป็นชิ้นเล็กๆ
          และไม่ต้องกลัวที่จะลองเรียกใช้งานโค้ดของคุณในขณะที่คุณยังเขียนโค้ดไม่สมบูรณ์!
        courseB_iceage_loops9_b: โค้ดที่คุณเขียนเสร็จ ควรจะมีลูปใช้งานอยู่จำนวน **4**
          ลูป
        courseB_iceage_loops9_c: เจ้ากระรอกเขี้ยวดาบควรลองใช้เส้นทางนี้ดู เพื่อไปให้ถึงลูกโอ๊ค
      courseB_iceage_loops9_2019:
        courseB_iceage_loops9_a: มีปัญหาอะไรไหมครับ? ลองแบ่งปริศนานี้เป็นชิ้นเล็กๆ
          และไม่ต้องกลัวที่จะลองเรียกใช้งานโค้ดของคุณในขณะที่คุณยังเขียนโค้ดไม่สมบูรณ์!
        courseB_iceage_loops9_b: โค้ดที่คุณเขียนเสร็จ ควรจะมีลูปใช้งานอยู่จำนวน **4**
          ลูป
        courseB_iceage_loops9_c: เจ้ากระรอกเขี้ยวดาบควรลองใช้เส้นทางนี้ดู เพื่อไปให้ถึงลูกโอ๊ค
      courseB_maze_seq1:
        courseB_maze_seq1_a: Connect blocks to the <xml><block type="when_run"/></xml>
          block to make the bird move!
        courseB_maze_seq1_b: Drag three of these <xml><block type="maze_moveSouth"/></xml>
          arrows out and connect them to the <xml><block type="when_run"/></xml> block
          to get your bird to the pig.
      courseB_maze_seq10:
        courseB_maze_seq10_a: Try writing down the steps on a piece of paper first.
        courseB_maze_seq10_b: You will need to move in two different directions to
          reach the pig.
      courseB_maze_seq11:
        courseB_maze_seq11_a: Try writing down the steps on a piece of paper first.
        courseB_maze_seq11_b: 'Solve the puzzle in two parts: one before the corner
          and one after the corner.'
      courseB_maze_seq1_2018:
        courseB_maze_seq1_a: Connect blocks to the <xml><block type="when_run"/></xml>
          block to make Scrat move!
        courseB_maze_seq1_b: Drag three of these <xml><block type="maze_moveSouth"/></xml>
          arrows out and connect them to the <xml><block type="when_run"/></xml> block
          to get Scrat to the acorn.
      courseB_maze_seq1_2019:
        courseB_maze_seq1_a: Connect blocks to the <xml><block type="when_run"/></xml>
          block to make Scrat move!
        courseB_maze_seq1_b: Drag three of these <xml><block type="maze_moveSouth"/></xml>
          arrows out and connect them to the <xml><block type="when_run"/></xml> block
          to get Scrat to the acorn.
      courseB_maze_seq2:
        courseB_maze_seq2_a: This program is missing one block. Can you figure out
          which one?
        courseB_maze_seq2_b: Try running the code you are given to see what the bird
          needs to do next.
      courseB_maze_seq3:
        courseB_maze_seq3_a: One of the blocks is moving the bird in the wrong direction.
          Can you figure out which one and replace it with the correct block?
        courseB_maze_seq3_b: Try using the step button to find where the program goes
          wrong. Is it the first step? The second?
        courseB_maze_seq3_c: The <xml><block type="maze_moveWest"/></xml> block doesn't
          seem to be moving the bird in the right direction.
      courseB_maze_seq4:
        courseB_maze_seq4_a: Try adding one instruction at a time until you get to
          the pig.
        courseB_maze_seq4_b: You will want to use the <xml><block type="maze_moveEast"/></xml>
          block to solve this puzzle.
      courseB_maze_seq4_2018:
        courseB_maze_seq4_a: Try adding one instruction at a time until you get to
          the acorn.
        courseB_maze_seq4_b: You will want to use the <xml><block type="maze_moveEast"/></xml>
          block to solve this puzzle.
      courseB_maze_seq4_2019:
        courseB_maze_seq4_a: Try adding one instruction at a time until you get to
          the acorn.
        courseB_maze_seq4_b: You will want to use the <xml><block type="maze_moveEast"/></xml>
          block to solve this puzzle.
      courseB_maze_seq5:
        courseB_maze_seq5_a: If you get stuck, try drawing out the path on paper.
        courseB_maze_seq5_b: There are 2 ways to solve this puzzle!
        courseB_maze_seq5_c: Not sure how to get to the pig?  Try this path.
      courseB_maze_seq5_2018:
        courseB_maze_seq5_a: If you get stuck, try drawing out the path on paper.
        courseB_maze_seq5_b: There are 2 ways to solve this puzzle!
        courseB_maze_seq5_c: Not sure how to get to the acorn?  Try this path.
      courseB_maze_seq5_2019:
        courseB_maze_seq5_a: If you get stuck, try drawing out the path on paper.
        courseB_maze_seq5_b: There are 2 ways to solve this puzzle!
        courseB_maze_seq5_c: Not sure how to get to the acorn?  Try this path.
      courseB_maze_seq6:
        courseB_maze_seq6_a: โค้ดที่ถูกต้องควรประกอบด้วยบล็อกที่ทำให้มีการเคลื่อนไหวจำนวนสามบล็อก
        courseB_maze_seq6_b: If you get stuck, try solving the puzzle in two parts,
          one sideways and one up-and-down.
        courseB_maze_seq5_c: There are two ways to solve this puzzle.
        courseB_maze_seq5_d: Not sure how to get to the pig? Try this path!
      courseB_maze_seq6_2018:
        courseB_maze_seq6_a: โค้ดที่ถูกต้องควรประกอบด้วยบล็อกที่ทำให้มีการเคลื่อนไหวจำนวนสามบล็อก
        courseB_maze_seq6_b: If you get stuck, try solving the puzzle in two parts,
          one sideways and one up-and-down.
        courseB_maze_seq5_c: There are two ways to solve this puzzle.
        courseB_maze_seq5_d: Not sure how to get to the acorn? Try this path!
      courseB_maze_seq6_2019:
        courseB_maze_seq6_a: โค้ดที่ถูกต้องควรประกอบด้วยบล็อกที่ทำให้มีการเคลื่อนไหวจำนวนสามบล็อก
        courseB_maze_seq6_b: If you get stuck, try solving the puzzle in two parts,
          one sideways and one up-and-down.
        courseB_maze_seq5_c: There are two ways to solve this puzzle.
        courseB_maze_seq5_d: Not sure how to get to the acorn? Try this path!
      courseB_maze_seq7:
        courseB_maze_seq7_a: Add 1 block to move the bird to the pig.
        courseB_maze_seq7_b: Try running the code that's given to you and see where
          you end up.
        courseB_maze_seq7_c: Can't get to the pig?  Try this path!
      courseB_maze_seq7_2018:
        courseB_maze_seq7_a: Add 1 block to move Scrat to the acorn.
        courseB_maze_seq7_b: Try running the code that's given to you and see where
          you end up.
        courseB_maze_seq7_c: Can't get to the acorn?  Try this path!
      courseB_maze_seq7_2019:
        courseB_maze_seq7_a: Add 1 block to move Scrat to the acorn.
        courseB_maze_seq7_b: Try running the code that's given to you and see where
          you end up.
        courseB_maze_seq7_c: Can't get to the acorn?  Try this path!
      courseB_maze_seq8:
        courseB_maze_seq8_a: Try adding one block at a time until you solve the puzzle.
        courseB_maze_seq8_b: มีวิธีแก้ปริศนานี้สองวิธี
        courseB_maze_seq8_c: Don't know which way to go? Try this path!
      courseB_maze_seq8_2018:
        courseB_maze_seq8_a: Try adding one block at a time until you solve the puzzle.
        courseB_maze_seq8_b: There is more than one way to solve this puzzle!
        courseB_maze_seq8_c: Don't know which way to go? Try this path!
      courseB_maze_seq8_2019:
        courseB_maze_seq8_a: Try adding one block at a time until you solve the puzzle.
        courseB_maze_seq8_b: There is more than one way to solve this puzzle!
        courseB_maze_seq8_c: Don't know which way to go? Try this path!
      courseB_maze_seq9:
        courseB_maze_seq9_a: Try writing down all of the steps on a piece of paper
          first.
        courseB_maze_seq9_b: Build your program a block at a time and test as you
          build.
        courseB_maze_seq9_c: There are two ways to solve this puzzle.
        courseB_maze_seq9_d: Stuck?  Try this path!
      courseB_maze_seq9_2018:
        courseB_maze_seq9_a: Try writing down all of the steps on a piece of paper
          first.
        courseB_maze_seq9_b: Build your program a block at a time and test as you
          build.
        courseB_maze_seq9_c: There are two ways to solve this puzzle.
        courseB_maze_seq9_d: Stuck?  Try this path!
      courseB_maze_seq9_2019:
        courseB_maze_seq9_a: Try writing down all of the steps on a piece of paper
          first.
        courseB_maze_seq9_b: Build your program a block at a time and test as you
          build.
        courseB_maze_seq9_c: There are two ways to solve this puzzle.
        courseB_maze_seq9_d: Stuck?  Try this path!
      courseB_maze_seq_challenge1:
        courseB_maze_seq_challenge1_a: The shortest path might not work this time.
        courseB_maze_seq_challenge1_b: Try using the <xml><block type="maze_moveWest"/></xml>
          block to start.
      courseB_maze_seq_challenge1_2018:
        courseB_maze_seq_challenge1_a: The shortest path might not work this time.
        courseB_maze_seq_challenge1_b: Try using the <xml><block type="maze_moveWest"/></xml>
          block to start.
      courseB_maze_seq_challenge1_2019:
        courseB_maze_seq_challenge1_a: The shortest path might not work this time.
        courseB_maze_seq_challenge1_b: Try using the <xml><block type="maze_moveWest"/></xml>
          block to start.
      courseB_maze_seq_challenge2:
        courseB_maze_seq_challenge2_a: ไม่มีความจำเป็นสำหรับคุณในการแก้ปริศนานี้ ที่จะต้องเพิ่มบล็อกใหม่เข้าไปหรือลบบล็อกที่มีอยู่ในพื้่นที่ทำงานออก
        courseB_maze_seq_challenge2_b: Rearrange the blocks and take the staircase
          pattern path.
      courseB_maze_seq_challenge2_2018:
        courseB_maze_seq_challenge2_a: ไม่มีความจำเป็นสำหรับคุณในการแก้ปริศนานี้ ที่จะต้องเพิ่มบล็อกใหม่เข้าไปหรือลบบล็อกที่มีอยู่ในพื้่นที่ทำงานออก
        courseB_maze_seq_challenge2_b: Rearrange the blocks and take the staircase
          pattern path.
      courseB_maze_seq_challenge2_2019:
        courseB_maze_seq_challenge2_a: ไม่มีความจำเป็นสำหรับคุณในการแก้ปริศนานี้ ที่จะต้องเพิ่มบล็อกใหม่เข้าไปหรือลบบล็อกที่มีอยู่ในพื้่นที่ทำงานออก
        courseB_maze_seq_challenge2_b: Rearrange the blocks and take the staircase
          pattern path.
      courseB_playlab_events2:
        courseB_playlab_events2_a: |-
          This is the block to have Daisy say something:

          <xml>
            <block type="studio_saySpriteChoices">
              <title name="SPRITE">0</title>
              <title name="VALUE">Hi there.</title>
            </block>
            </xml>
      courseB_playlab_events2_2018:
        courseB_playlab_events2_a: |-
          This is the block to have Daisy say something:

          <xml>
            <block type="studio_saySpriteChoices">
              <title name="SPRITE">0</title>
              <title name="VALUE">Hi there.</title>
            </block>
            </xml>
      courseB_playlab_events2_2019:
        courseB_playlab_events2_a: |-
          This is the block to have Daisy say something:

          <xml>
            <block type="studio_saySpriteChoices">
              <title name="SPRITE">0</title>
              <title name="VALUE">Hi there.</title>
            </block>
            </xml>
      courseB_playlab_events3:
        courseB_playlab_events3_a: |-
          This is the block you should use to add the event:

          <xml>
          <block type="studio_whenSpriteClicked">
              <title name="SPRITE">0</title>
            </block>
            </xml>
        courseB_playlab_events3_b: |-
          This is the block you need to switch Daisy's mood:

          <xml>
          <block type="studio_setSpriteEmotion">
              <title name="SPRITE">0</title>
              <title name="VALUE">random</title>
            </block>
            </xml>
      courseB_playlab_events3_2018:
        courseB_playlab_events3_a: |-
          This is the block you should use to add the event:

          <xml>
          <block type="studio_whenSpriteClicked">
              <title name="SPRITE">0</title>
            </block>
            </xml>
        courseB_playlab_events3_b: |-
          This is the block you need to switch Daisy's mood:

          <xml>
          <block type="studio_setSpriteEmotion">
              <title name="SPRITE">0</title>
              <title name="VALUE">random</title>
            </block>
            </xml>
      courseB_playlab_events3_2019:
        courseB_playlab_events3_a: |-
          This is the block you should use to add the event:

          <xml>
          <block type="studio_whenSpriteClicked">
              <title name="SPRITE">0</title>
            </block>
            </xml>
        courseB_playlab_events3_b: |-
          This is the block you need to switch Daisy's mood:

          <xml>
          <block type="studio_setSpriteEmotion">
              <title name="SPRITE">0</title>
              <title name="VALUE">random</title>
            </block>
            </xml>
      courseB_playlab_events4:
        courseB_playlab_events4_a: |-
          This is the event that controls the left arrow:

          <xml>
            <block type="studio_whenArrow">
              <title name="VALUE">left</title>
            </block>
            </xml>
        courseB_playlab_events4_b: |-
          This is the block that makes the knight move left.

          <xml>
          <block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">8</title>
            </block>
            </xml>
      courseB_playlab_events4_2018:
        courseB_playlab_events4_a: |-
          This is the event that controls the left arrow:

          <xml>
            <block type="studio_whenArrow">
              <title name="VALUE">left</title>
            </block>
            </xml>
        courseB_playlab_events4_b: |-
          This is the block that makes the knight move left.

          <xml>
          <block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">8</title>
            </block>
            </xml>
      courseB_playlab_events4_2019:
        courseB_playlab_events4_a: |-
          This is the event that controls the left arrow:

          <xml>
            <block type="studio_whenArrow">
              <title name="VALUE">left</title>
            </block>
            </xml>
        courseB_playlab_events4_b: |-
          This is the block that makes the knight move left.

          <xml>
          <block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">8</title>
            </block>
            </xml>
      courseB_playlab_events5:
        courseB_playlab_events5_a: "This is the event block that controls the right
          arrow: \n\n<xml>\n  <block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">right</title>\n
          \ </block>\n  </xml>"
        courseB_playlab_events5_b: "This is the block that makes the knight run away.
          \n\n<xml>\n<block type=\"studio_move\">\n    <title name=\"SPRITE\">1</title>\n
          \   <title name=\"DIR\">2</title>\n  </block>\n</xml>"
      courseB_playlab_events5_2018:
        courseB_playlab_events5_a: "This is the event block that controls the right
          arrow: \n\n<xml>\n  <block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">right</title>\n
          \ </block>\n  </xml>"
        courseB_playlab_events5_b: "This is the block that makes the knight run away.
          \n\n<xml>\n<block type=\"studio_move\">\n    <title name=\"SPRITE\">1</title>\n
          \   <title name=\"DIR\">2</title>\n  </block>\n</xml>"
      courseB_playlab_events5_2019:
        courseB_playlab_events5_a: "This is the event block that controls the right
          arrow: \n\n<xml>\n  <block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">right</title>\n
          \ </block>\n  </xml>"
        courseB_playlab_events5_b: "This is the block that makes the knight run away.
          \n\n<xml>\n<block type=\"studio_move\">\n    <title name=\"SPRITE\">1</title>\n
          \   <title name=\"DIR\">2</title>\n  </block>\n</xml>"
      courseB_playlab_events6:
        courseB_playlab_events6_a: |-
          You will need these event blocks:

          <xml>
            <block type="studio_whenArrow" id="callMe">
              <title name="VALUE">up</title>
            </block>
            <block type="studio_whenArrow" id="callMe">
              <title name="VALUE">down</title>
            </block>
            </xml>
        courseB_playlab_events6_b: |-
          Use the drop down arrows on the green `when ___ arrow pressed` event blocks to choose different directions.

          ![](https://images.code.org/b4c76f19fc2d2694c1f731e5f6e786b8-image-1501003990996.gif)
        courseB_playlab_events6_c: Get to all of the flags to pass!
      courseB_playlab_events6_2018:
        courseB_playlab_events6_a: |-
          You will need these event blocks:

          <xml>
            <block type="studio_whenArrow" id="callMe">
              <title name="VALUE">up</title>
            </block>
            <block type="studio_whenArrow" id="callMe">
              <title name="VALUE">down</title>
            </block>
            </xml>
        courseB_playlab_events6_b: |-
          Use the drop down arrows on the green `when ___ arrow pressed` event blocks to choose different directions.

          ![](https://images.code.org/b4c76f19fc2d2694c1f731e5f6e786b8-image-1501003990996.gif)
        courseB_playlab_events6_c: Get to all of the flags to pass!
      courseB_playlab_events6_2019:
        courseB_playlab_events6_a: |-
          You will need these event blocks:

          <xml>
            <block type="studio_whenArrow" id="callMe">
              <title name="VALUE">up</title>
            </block>
            <block type="studio_whenArrow" id="callMe">
              <title name="VALUE">down</title>
            </block>
            </xml>
        courseB_playlab_events6_b: |-
          Use the drop down arrows on the green `when ___ arrow pressed` event blocks to choose different directions.

          ![](https://images.code.org/b4c76f19fc2d2694c1f731e5f6e786b8-image-1501003990996.gif)
        courseB_playlab_events6_c: Get to all of the flags to pass!
      courseB_playlab_events7:
        courseB_playlab_events7_a: |-
          This is the event block that you will need:

          <xml>
          <block type="studio_whenSpriteCollided">
              <title name="SPRITE1">0</title>
              <title name="SPRITE2">1</title>
            </block>
          </xml>
        courseB_playlab_events7_b: |-
          This is the block you need to play a sound.

          <xml>
          <block type="studio_playSound">
              <title name="SOUND">slap</title>
            </block>
          </xml>
        courseB_playlab_events7_c: |-
          This is the block you need to make the knight vanish:

          <xml>
          <block type="studio_vanish">
              <title name="SPRITE">1</title>
            </block>
          </xml>
      courseB_playlab_events7_2018:
        courseB_playlab_events7_a: |-
          This is the event block that you will need:

          <xml>
          <block type="studio_whenSpriteCollided">
              <title name="SPRITE1">0</title>
              <title name="SPRITE2">1</title>
            </block>
          </xml>
        courseB_playlab_events7_b: |-
          This is the block you need to play a sound.

          <xml>
          <block type="studio_playSound">
              <title name="SOUND">slap</title>
            </block>
          </xml>
        courseB_playlab_events7_c: |-
          This is the block you need to make the knight vanish:

          <xml>
          <block type="studio_vanish">
              <title name="SPRITE">1</title>
            </block>
          </xml>
      courseB_playlab_events7_2019:
        courseB_playlab_events7_a: |-
          This is the event block that you will need:

          <xml>
          <block type="studio_whenSpriteCollided">
              <title name="SPRITE1">0</title>
              <title name="SPRITE2">1</title>
            </block>
          </xml>
        courseB_playlab_events7_b: |-
          This is the block you need to play a sound.

          <xml>
          <block type="studio_playSound">
              <title name="SOUND">slap</title>
            </block>
          </xml>
        courseB_playlab_events7_c: |-
          This is the block you need to make the knight vanish:

          <xml>
          <block type="studio_vanish">
              <title name="SPRITE">1</title>
            </block>
          </xml>
      courseB_playlab_events_challenge1:
        courseB_playlab_events_challenge1_a: "Make the other animals move down when
          you press `▼`. \n\n<xml>\n  <block type=\"studio_whenArrow\" movable=\"false\">\n
          \   <title name=\"VALUE\">down</title>\n  </block>\n</xml>"
        courseB_playlab_events_challenge1_b: |-
          Change the speed of the animals by using this block:

          <xml>
            <block type="studio_setSpriteSpeed">
              <title name="SPRITE">0</title>
              <title name="VALUE">Studio.SpriteSpeed.NORMAL</title>
            </block></xml>
        courseB_playlab_events_challenge1_c: |-
          What will the everyone say when the race is over? Make them talk with this event:

          <xml>
            <block type="studio_whenSpriteClicked">
              <title name="SPRITE">2</title>
              <next>
                <block type="studio_saySpriteChoices">
                  <title name="SPRITE">2</title>
                  <title name="VALUE">Woo hoo!</title>
                </block>
              </next>
            </block>
          </xml>
      courseB_playlab_events_challenge1_2018:
        courseB_playlab_events_challenge1_a: "Make the other animals move down when
          you press `▼`. \n\n<xml>\n  <block type=\"studio_whenArrow\" movable=\"false\">\n
          \   <title name=\"VALUE\">down</title>\n  </block>\n</xml>"
        courseB_playlab_events_challenge1_b: |-
          Change the speed of the animals by using this block:

          <xml>
            <block type="studio_setSpriteSpeed">
              <title name="SPRITE">0</title>
              <title name="VALUE">Studio.SpriteSpeed.NORMAL</title>
            </block></xml>
        courseB_playlab_events_challenge1_c: |-
          What will the everyone say when the race is over? Make them talk with this event:

          <xml>
            <block type="studio_whenSpriteClicked">
              <title name="SPRITE">2</title>
              <next>
                <block type="studio_saySpriteChoices">
                  <title name="SPRITE">2</title>
                  <title name="VALUE">Woo hoo!</title>
                </block>
              </next>
            </block>
          </xml>
      courseB_playlab_events_challenge1_2019:
        courseB_playlab_events_challenge1_a: "Make the other animals move down when
          you press `▼`. \n\n<xml>\n  <block type=\"studio_whenArrow\" movable=\"false\">\n
          \   <title name=\"VALUE\">down</title>\n  </block>\n</xml>"
        courseB_playlab_events_challenge1_b: |-
          Change the speed of the animals by using this block:

          <xml>
            <block type="studio_setSpriteSpeed">
              <title name="SPRITE">0</title>
              <title name="VALUE">Studio.SpriteSpeed.NORMAL</title>
            </block></xml>
        courseB_playlab_events_challenge1_c: |-
          What will the everyone say when the race is over? Make them talk with this event:

          <xml>
            <block type="studio_whenSpriteClicked">
              <title name="SPRITE">2</title>
              <next>
                <block type="studio_saySpriteChoices">
                  <title name="SPRITE">2</title>
                  <title name="VALUE">Woo hoo!</title>
                </block>
              </next>
            </block>
          </xml>
      courseB_playlab_events_challenge2:
        courseB_playlab_events_challenge2_a: Each animal in the game should disappear
          when clicked. It should also come back after a second or two!
        courseB_playlab_events_challenge2_b: |-
          Use other event blocks to make the other animals disappear!

          <xml>
            <block type="studio_whenSpriteClicked">
              <title name="SPRITE">1</title>
            </block>
            </xml>
        courseB_playlab_events_challenge2_c: |-
          Use extra commands to play sounds or score points when you click the animals!

          <xml>
            <block type="studio_playSound">
              <title name="SOUND">slap</title>
            </block>
            <block type="studio_changeScore"/></xml>
        courseB_playlab_events_challenge2_d: |-
          Mix it up!

          Make some animals give more points than others.
          Use different sounds.
          Change the animals' moods!
      courseB_playlab_events_challenge2_2018:
        courseB_playlab_events_challenge2_a: Each animal in the game should disappear
          when clicked. It should also come back after a second or two!
        courseB_playlab_events_challenge2_b: |-
          Use other event blocks to make the other animals disappear!

          <xml>
            <block type="studio_whenSpriteClicked">
              <title name="SPRITE">1</title>
            </block>
            </xml>
        courseB_playlab_events_challenge2_c: |-
          Use extra commands to play sounds or score points when you click the animals!

          <xml>
            <block type="studio_playSound">
              <title name="SOUND">slap</title>
            </block>
            <block type="studio_changeScore"/></xml>
        courseB_playlab_events_challenge2_d: |-
          Mix it up!

          Make some animals give more points than others.
          Use different sounds.
          Change the animals' moods!
      courseB_playlab_events_challenge2_2019:
        courseB_playlab_events_challenge2_a: Each animal in the game should disappear
          when clicked. It should also come back after a second or two!
        courseB_playlab_events_challenge2_b: |-
          Use other event blocks to make the other animals disappear!

          <xml>
            <block type="studio_whenSpriteClicked">
              <title name="SPRITE">1</title>
            </block>
            </xml>
        courseB_playlab_events_challenge2_c: |-
          Use extra commands to play sounds or score points when you click the animals!

          <xml>
            <block type="studio_playSound">
              <title name="SOUND">slap</title>
            </block>
            <block type="studio_changeScore"/></xml>
        courseB_playlab_events_challenge2_d: |-
          Mix it up!

          Make some animals give more points than others.
          Use different sounds.
          Change the animals' moods!
      courseB_starWars_prog1:
        courseB_starWars_prog1_a: ลองเพิ่มบล็อกทีละบล็อกจากนั้นเรียกใช้งานโค้ดของคุณเพื่อดูว่าเกิดอะไรขึ้น
        courseB_starWars_prog1_b: |-
          คุณจะต้องเคลื่อนที่ไปทางทิศตะวันออกเพื่อแก้ปริศนาด่านนี้ คุณคิดว่าจะต้องไปไกลเท่าใด?
          <xml><block type="studio_moveEast"/></xml>
      courseB_starWars_prog1_2018:
        courseB_starWars_prog1_a: ลองเพิ่มบล็อกทีละบล็อกจากนั้นเรียกใช้งานโค้ดของคุณเพื่อดูว่าเกิดอะไรขึ้น
        courseB_starWars_prog1_b: |-
          คุณจะต้องเคลื่อนที่ไปทางทิศตะวันออกเพื่อแก้ปริศนาด่านนี้ คุณคิดว่าจะต้องไปไกลเท่าใด?
          <xml><block type="studio_moveEast"/></xml>
      courseB_starWars_prog1_2019:
        courseB_starWars_prog1_a: ลองเพิ่มบล็อกทีละบล็อกจากนั้นเรียกใช้งานโค้ดของคุณเพื่อดูว่าเกิดอะไรขึ้น
        courseB_starWars_prog1_b: |-
          คุณจะต้องเคลื่อนที่ไปทางทิศตะวันออกเพื่อแก้ปริศนาด่านนี้ คุณคิดว่าจะต้องไปไกลเท่าใด?
          <xml><block type="studio_moveEast"/></xml>
      courseB_starWars_prog2:
        courseB_starWars_prog2_a: ให้แบ่งปัญหาออกเป็นสองส่วน ส่วนแรกไปเอากองโลหะกองหนึ่งให้ได้
          แล้วหาวิธีไปเอาอีกกองหนึ่ง
      courseB_starWars_prog2_2018:
        courseB_starWars_prog2_a: ให้แบ่งปัญหาออกเป็นสองส่วน ส่วนแรกไปเอากองโลหะกองหนึ่งให้ได้
          แล้วหาวิธีไปเอาอีกกองหนึ่ง
      courseB_starWars_prog2_2019:
        courseB_starWars_prog2_a: ให้แบ่งปัญหาออกเป็นสองส่วน ส่วนแรกไปเอากองโลหะกองหนึ่งให้ได้
          แล้วหาวิธีไปเอาอีกกองหนึ่ง
      courseB_starWars_prog3:
        courseB_starWars_prog3_a: คุณต้องมีการเคลื่อนไหวไปใน 3 ทิศทางเพื่อแก้ปริศนาด่านนี้
        courseB_starWars_prog3_b: สร้างโค้ดทีละชิ้น เรียกใช้งานเพื่อดูว่าคุณจะต้องทำอย่างไรต่อไป
      courseB_starWars_prog3_2018:
        courseB_starWars_prog3_a: คุณต้องมีการเคลื่อนไหวไปใน 3 ทิศทางเพื่อแก้ปริศนาด่านนี้
        courseB_starWars_prog3_b: สร้างโค้ดทีละชิ้น เรียกใช้งานเพื่อดูว่าคุณจะต้องทำอย่างไรต่อไป
      courseB_starWars_prog3_2019:
        courseB_starWars_prog3_a: คุณต้องมีการเคลื่อนไหวไปใน 3 ทิศทางเพื่อแก้ปริศนาด่านนี้
        courseB_starWars_prog3_b: สร้างโค้ดทีละชิ้น เรียกใช้งานเพื่อดูว่าคุณจะต้องทำอย่างไรต่อไป
      courseB_starWars_prog4:
        courseB_starWars_prog4_a: สร้างโค้ดทีละชิ้น เรียกใช้งานเพื่อดูว่าคุณจะต้องทำอย่างไรต่อไป
        courseB_starWars_prog4_b: |-
          ลองใช้บล็อกลูป `ทำซ้ำ` เพื่อให้ได้โค้ดที่สั้นลง
          <xml>  <block type="controls_repeat_simplified">

          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog4_2018:
        courseB_starWars_prog4_a: สร้างโค้ดทีละชิ้น เรียกใช้งานเพื่อดูว่าคุณจะต้องทำอย่างไรต่อไป
        courseB_starWars_prog4_b: |-
          ลองใช้บล็อกลูป `ทำซ้ำ` เพื่อให้ได้โค้ดที่สั้นลง
          <xml>  <block type="controls_repeat_simplified">

          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog4_2019:
        courseB_starWars_prog4_a: สร้างโค้ดทีละชิ้น เรียกใช้งานเพื่อดูว่าคุณจะต้องทำอย่างไรต่อไป
        courseB_starWars_prog4_b: |-
          ลองใช้บล็อกลูป `ทำซ้ำ` เพื่อให้ได้โค้ดที่สั้นลง
          <xml>  <block type="controls_repeat_simplified">

          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog5:
        courseB_starWars_prog5_a: รูปแบบดูจะไปเหมือนกับปริศนาที่แล้วใช่ไหม
        courseB_starWars_prog5_b: บีบี-8 จะคว้าเศษซากโลหะตอนที่เขากลิ้งผ่านและทับมันไป
        courseB_starWars_prog5_c: แกะรอยเส้นทางโดยใช้นิ้วของคุณลากผ่านไป นับจำนวนเศษโลหะไปด้วย
        courseB_starWars_prog5_da: |-
          ดูสิ่งที่เกิดขึ้น หากว่าคุณใช้วิธีการแก้ปัญหาเดียวกัน เป็นปริศนาขั้นบันได:

          ![](https://images.code.org/866b4121069423bf03d92dcb8f2276af-image-1503709785988.09.24.png)
      courseB_starWars_prog5_2018:
        courseB_starWars_prog5_a: รูปแบบดูจะไปเหมือนกับปริศนาที่แล้วใช่ไหม
        courseB_starWars_prog5_b: บีบี-8 จะคว้าเศษซากโลหะตอนที่เขากลิ้งผ่านและทับมันไป
        courseB_starWars_prog5_c: แกะรอยเส้นทางโดยใช้นิ้วของคุณลากผ่านไป นับจำนวนเศษโลหะไปด้วย
        courseB_starWars_prog5_da: |-
          ดูสิ่งที่เกิดขึ้น หากว่าคุณใช้วิธีการแก้ปัญหาเดียวกัน เป็นปริศนาขั้นบันได:

          ![](https://images.code.org/866b4121069423bf03d92dcb8f2276af-image-1503709785988.09.24.png)
      courseB_starWars_prog5_2019:
        courseB_starWars_prog5_a: รูปแบบดูจะไปเหมือนกับปริศนาที่แล้วใช่ไหม
        courseB_starWars_prog5_b: บีบี-8 จะคว้าเศษซากโลหะตอนที่เขากลิ้งผ่านและทับมันไป
        courseB_starWars_prog5_c: แกะรอยเส้นทางโดยใช้นิ้วของคุณลากผ่านไป นับจำนวนเศษโลหะไปด้วย
        courseB_starWars_prog5_da: |-
          ดูสิ่งที่เกิดขึ้น หากว่าคุณใช้วิธีการแก้ปัญหาเดียวกัน เป็นปริศนาขั้นบันได:

          ![](https://images.code.org/866b4121069423bf03d92dcb8f2276af-image-1503709785988.09.24.png)
      courseB_starWars_prog6:
        courseB_starWars_prog6_a: รูปแบบที่เห็นอยู่นี้ เป็นรูปแบบขั้นบันได ที่มีการเคลื่อนไหวสองครั้งในแต่ละทิศทาง
        courseB_starWars_prog6_b: |-
          ลองใช้บล็อกลูป `ทำซ้ำ` เพื่อให้ได้โค้ดที่สั้นลง
          <xml>  <block type="controls_repeat_simplified">

          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog6_2018:
        courseB_starWars_prog6_a: รูปแบบที่เห็นอยู่นี้ เป็นรูปแบบขั้นบันได ที่มีการเคลื่อนไหวสองครั้งในแต่ละทิศทาง
        courseB_starWars_prog6_b: |-
          ลองใช้บล็อกลูป `ทำซ้ำ` เพื่อให้ได้โค้ดที่สั้นลง
          <xml>  <block type="controls_repeat_simplified">

          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog6_2019:
        courseB_starWars_prog6_a: รูปแบบที่เห็นอยู่นี้ เป็นรูปแบบขั้นบันได ที่มีการเคลื่อนไหวสองครั้งในแต่ละทิศทาง
        courseB_starWars_prog6_b: |-
          ลองใช้บล็อกลูป `ทำซ้ำ` เพื่อให้ได้โค้ดที่สั้นลง
          <xml>  <block type="controls_repeat_simplified">

          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog7:
        courseB_starWars_prog7_a: รูปแบบดูจะไปเหมือนกับปริศนาที่แล้วใช่ไหม
        courseB_starWars_prog7_b: บีบี-8 จะคว้าเศษซากโลหะตอนที่เขากลิ้งผ่านและทับมันไป
        courseB_starWars_prog7_c: ลองวาดรูปแบบขั้นบันไดให้ทับซ้อนไปบนปริศนานี้ ดูว่ามันครอบคลุมเศษซากโลหะทั้งหมดหรือไม่?
      courseB_starWars_prog7_2018:
        courseB_starWars_prog7_a: รูปแบบดูจะไปเหมือนกับปริศนาที่แล้วใช่ไหม
        courseB_starWars_prog7_b: บีบี-8 จะคว้าเศษซากโลหะตอนที่เขากลิ้งผ่านและทับมันไป
        courseB_starWars_prog7_c: ลองวาดรูปแบบขั้นบันไดให้ทับซ้อนไปบนปริศนานี้ ดูว่ามันครอบคลุมเศษซากโลหะทั้งหมดหรือไม่?
      courseB_starWars_prog7_2019:
        courseB_starWars_prog7_a: รูปแบบดูจะไปเหมือนกับปริศนาที่แล้วใช่ไหม
        courseB_starWars_prog7_b: บีบี-8 จะคว้าเศษซากโลหะตอนที่เขากลิ้งผ่านและทับมันไป
        courseB_starWars_prog7_c: ลองวาดรูปแบบขั้นบันไดให้ทับซ้อนไปบนปริศนานี้ ดูว่ามันครอบคลุมเศษซากโลหะทั้งหมดหรือไม่?
      courseB_starWars_prog8:
        courseB_starWars_prog8_a: ไม่เป็นไร ที่คุณจะย้อนกลับไปใช้เส้นทางที่คุณได้เคลื่อนที่ผ่านไปแล้วอีกครั้งหนึ่ง
        courseB_starWars_prog8_b: ลองใช้บล็อก `ทำซ้ำ`เพื่อดูว่าเกิดอะไรขึ้นกับโค้ดที่คุณใส่เอาไว้ข้างในบล็อกนั้น
      courseB_starWars_prog8_2018:
        courseB_starWars_prog8_a: ไม่เป็นไร ที่คุณจะย้อนกลับไปใช้เส้นทางที่คุณได้เคลื่อนที่ผ่านไปแล้วอีกครั้งหนึ่ง
        courseB_starWars_prog8_b: ลองใช้บล็อก `ทำซ้ำ`เพื่อดูว่าเกิดอะไรขึ้นกับโค้ดที่คุณใส่เอาไว้ข้างในบล็อกนั้น
      courseB_starWars_prog8_2019:
        courseB_starWars_prog8_a: ไม่เป็นไร ที่คุณจะย้อนกลับไปใช้เส้นทางที่คุณได้เคลื่อนที่ผ่านไปแล้วอีกครั้งหนึ่ง
        courseB_starWars_prog8_b: ลองใช้บล็อก `ทำซ้ำ`เพื่อดูว่าเกิดอะไรขึ้นกับโค้ดที่คุณใส่เอาไว้ข้างในบล็อกนั้น
      courseB_starWars_prog9:
        courseB_starWars_prog9_a: ไม่ต้องกลัวว่าคุณจะทำผิด! เรียกใช้งานโค้ดเพื่อดูว่าเกิดอะไรขึ้น
          แม่ว่าคุณจะยังไม่สามารถแก้ปริศนาได้ก็ตาม
        courseB_starWars_prog9_b: มีวิธีการแก้ปริศนานี้ได้ หลากหลายวิธี
        courseB_starWars_prog9_c: คุณสามารถใช้ลูป `ทำซ้ำ`ได้ที่นี่หรือไม่
      courseB_starWars_prog9_2018:
        courseB_starWars_prog9_a: ไม่ต้องกลัวว่าคุณจะทำผิด! เรียกใช้งานโค้ดเพื่อดูว่าเกิดอะไรขึ้น
          แม่ว่าคุณจะยังไม่สามารถแก้ปริศนาได้ก็ตาม
        courseB_starWars_prog9_b: มีวิธีการแก้ปริศนานี้ได้ หลากหลายวิธี
        courseB_starWars_prog9_c: คุณสามารถใช้ลูป `ทำซ้ำ`ได้ที่นี่หรือไม่
      courseB_starWars_prog9_2019:
        courseB_starWars_prog9_a: ไม่ต้องกลัวว่าคุณจะทำผิด! เรียกใช้งานโค้ดเพื่อดูว่าเกิดอะไรขึ้น
          แม่ว่าคุณจะยังไม่สามารถแก้ปริศนาได้ก็ตาม
        courseB_starWars_prog9_b: มีวิธีการแก้ปริศนานี้ได้ หลากหลายวิธี
        courseB_starWars_prog9_c: คุณสามารถใช้ลูป `ทำซ้ำ`ได้ที่นี่หรือไม่
      courseC19_playLab_EOC1:
        courseE_playLab_scaffold1_a: The `set actor 1 to ??? image` block can be used
          to add an actor to the stage.
        courseE_playLab_scaffold1_b: Put the `set actor` block under `when run` to
          make your actor appear at the beginning of the program.
        courseE_playLab_scaffold1_c: Use `set ??? background` to choose a background
          for your scene.
      courseC19_playLab_EOC2:
        courseE_playLab_scaffold1_a: Pull on the dropdown menu of the `when ____ arrow`
          event to change the direction the block controls.
        courseE_playLab_scaffold1_b: You should have four `when arrow` event blocks,
          with a direction to move underneath each.
        courseE_playLab_scaffold1_c: When you are done, you should be able to move
          your hero with the arrow keys!
      courseC19_playLab_EOC4:
        courseE_playLab_scaffold4_a: Use `score point` to add a point, and `remove
          point` to subtract one.
      courseC_PlayLab_events1:
        courseC_PlayLab_events1_a: |-
          Attach this block to the `when run` block:

          <xml>
            <block type="studio_saySpriteChoices">
              <title name="SPRITE">0</title>
              <title name="VALUE">Hi there.</title>
            </block>
          </xml>
      courseC_PlayLab_events1_2018:
        courseC_PlayLab_events1_a: |-
          Attach this block to the `when run` block:

          <xml>
            <block type="studio_saySpriteChoices">
              <title name="SPRITE">0</title>
              <title name="VALUE">Hi there.</title>
            </block>
          </xml>
      courseC_PlayLab_events1_2019:
        courseC_PlayLab_events1_a: |-
          Attach this block to the `when run` block:

          <xml>
            <block type="studio_saySpriteChoices">
              <title name="SPRITE">0</title>
              <title name="VALUE">Hi there.</title>
            </block>
          </xml>
      courseC_PlayLab_events2:
        courseC_PlayLab_events2_a: |-
          ต่อบล็อกนี้สองบล็อกเข้ากับบล็อก `เมื่อเรียกใช้งาน`:

          <xml>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">0</title>
          <title name="VALUE">Hi there.</title>
          </block>
          </xml>
        courseC_PlayLab_events2_b: 'ให้ใช้รายการเลือกแบบดึงลง(drop down menu) ที่อยูบนบล็อกที่สองของ
          `นักแสดง__ พูดว่า` เพื่อเปลี่ยนสิ่งที่นักแสดงพูด:'
      courseC_PlayLab_events2_2018:
        courseC_PlayLab_events2_a: |-
          ต่อบล็อกนี้สองบล็อกเข้ากับบล็อก `เมื่อเรียกใช้งาน`:

          <xml>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">0</title>
          <title name="VALUE">Hi there.</title>
          </block>
          </xml>
        courseC_PlayLab_events2_b: 'ให้ใช้รายการเลือกแบบดึงลง(drop down menu) ที่อยูบนบล็อกที่สองของ
          `นักแสดง__ พูดว่า` เพื่อเปลี่ยนสิ่งที่นักแสดงพูด:'
      courseC_PlayLab_events2_2019:
        courseC_PlayLab_events2_a: |-
          ต่อบล็อกนี้สองบล็อกเข้ากับบล็อก `เมื่อเรียกใช้งาน`:

          <xml>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">0</title>
          <title name="VALUE">Hi there.</title>
          </block>
          </xml>
        courseC_PlayLab_events2_b: 'ให้ใช้รายการเลือกแบบดึงลง(drop down menu) ที่อยูบนบล็อกที่สองของ
          `นักแสดง__ พูดว่า` เพื่อเปลี่ยนสิ่งที่นักแสดงพูด:'
      courseC_PlayLab_events3:
        courseC_PlayLab_events3_a: คุณจะต้องย้าย จอร์จไปทางขวาประมาณ 25 พิกเซล เพื่อแก้ปริศนานี้.
        courseC_PlayLab_events3_b: มีบล็อกในกล่องเครื่องมือไหม ที่ดูเหมือนว่ามันจะสามารถย้ายนักแสดงได้?
        courseC_PlayLab_events3_c: |-
          ต่อบล็อกนี้กับบล็อก `เมื่อเรียกใช้งาน`:
          <xml>
          <block type="studio_moveDistance">

          <title name="SPRITE">0</title>
          <title name="DIR">2</title>
          <title name="DISTANCE">25</title>
          </block>
          </xml>
      courseC_PlayLab_events3_2018:
        courseC_PlayLab_events3_a: คุณจะต้องย้าย จอร์จไปทางขวาประมาณ 25 พิกเซล เพื่อแก้ปริศนานี้.
        courseC_PlayLab_events3_b: มีบล็อกในกล่องเครื่องมือไหม ที่ดูเหมือนว่ามันจะสามารถย้ายนักแสดงได้?
        courseC_PlayLab_events3_c: |-
          Attach this block to the `when run` block:

          <xml>
          <block type="studio_moveDistance">
              <title name="SPRITE">0</title>
              <title name="DIR">2</title>
              <title name="DISTANCE">25</title>
            </block>
          </xml>
      courseC_PlayLab_events3_2019:
        courseC_PlayLab_events3_a: คุณจะต้องย้าย จอร์จไปทางขวาประมาณ 25 พิกเซล เพื่อแก้ปริศนานี้.
        courseC_PlayLab_events3_b: มีบล็อกในกล่องเครื่องมือไหม ที่ดูเหมือนว่ามันจะสามารถย้ายนักแสดงได้?
        courseC_PlayLab_events3_c: |-
          Attach this block to the `when run` block:

          <xml>
          <block type="studio_moveDistance">
              <title name="SPRITE">0</title>
              <title name="DIR">2</title>
              <title name="DISTANCE">25</title>
            </block>
          </xml>
      courseC_PlayLab_events4:
        courseC_PlayLab_events4_b: จอร์จต้องขยับไปทางขวา 100 พิกเซลเพื่อไปให้ถึงแมว
        courseC_PlayLab_events4_a: เพื่อแก้ปริศนานี้ คุณจะต้องต่อบล็อก `นักแสดง__พูด`
          เข้ากับอีเวนท์ `เมื่อนักแสดง_สัมผัส...`
      courseC_PlayLab_events4_2018:
        courseC_PlayLab_events4_b: จอร์จต้องขยับไปทางขวา 100 พิกเซลเพื่อไปให้ถึงแมว
        courseC_PlayLab_events4_a: เพื่อแก้ปริศนานี้ คุณจะต้องต่อบล็อก `นักแสดง__พูด`
          เข้ากับอีเวนท์ `เมื่อนักแสดง_สัมผัส...`
      courseC_PlayLab_events4_2019:
        courseC_PlayLab_events4_b: จอร์จต้องขยับไปทางขวา 100 พิกเซลเพื่อไปให้ถึงแมว
        courseC_PlayLab_events4_a: เพื่อแก้ปริศนานี้ คุณจะต้องต่อบล็อก `นักแสดง__พูด`
          เข้ากับอีเวนท์ `เมื่อนักแสดง_สัมผัส...`
      courseC_PlayLab_events5:
        courseC_PlayLab_events5_a: คุณจะต้องคลิกที่รายการเลือกแบบดึงลง(drop down menu)
          ในบล็อก `นักแสดง... พูดว่า` เพื่อค้นหาข้อความ ที่นักแสดงบอกว่า "มีอะไรใหม่บ้างมั้ย?
          "
        courseC_PlayLab_events5_b: คลิกที่อ๊อกเทเวียเมื่อคุณเรียกใช้งานโปรแกรมของคุณเพื่อตรวจสอบว่าการทำงานถูกต้องไหม!
      courseC_PlayLab_events5_2018:
        courseC_PlayLab_events5_a: คุณจะต้องคลิกที่รายการเลือกแบบดึงลง(drop down menu)
          ในบล็อก `นักแสดง... พูดว่า` เพื่อค้นหาข้อความ ที่นักแสดงบอกว่า "มีอะไรใหม่บ้างมั้ย?
          "
        courseC_PlayLab_events5_b: คลิกที่อ๊อกเทเวียเมื่อคุณเรียกใช้งานโปรแกรมของคุณเพื่อตรวจสอบว่าการทำงานถูกต้องไหม!
      courseC_PlayLab_events5_2019:
        courseC_PlayLab_events5_a: คุณจะต้องคลิกที่รายการเลือกแบบดึงลง(drop down menu)
          ในบล็อก `นักแสดง... พูดว่า` เพื่อค้นหาข้อความ ที่นักแสดงบอกว่า "มีอะไรใหม่บ้างมั้ย?
          "
        courseC_PlayLab_events5_b: คลิกที่อ๊อกเทเวียเมื่อคุณเรียกใช้งานโปรแกรมของคุณเพื่อตรวจสอบว่าการทำงานถูกต้องไหม!
      courseC_PlayLab_events6:
        courseC_PlayLab_events6_a: Each green `when arrow` block should have one action
          below it.
        courseC_PlayLab_events6_b: ใช้เมนูแบบดร็อปดาว์นลงบนบล็อก `ย้ายนักแสดงที่ 1`
          เพื่อเปลี่ยนทิศทางที่ แวดเดิลเคลื่อนที่
        courseC_PlayLab_events6_c: เมื่อคุณเสร็จแล้ว คุณควรจะสามารถย้าย แวดเดิลไปรอบๆ
          โดยใช้ปุ่มลูกศรบนคอมพิวเตอร์ของคุณ
      courseC_PlayLab_events6_2018:
        courseC_PlayLab_events6_a: Each green `when arrow` block should have one action
          below it.
        courseC_PlayLab_events6_b: ใช้เมนูแบบดร็อปดาว์นลงบนบล็อก `ย้ายนักแสดงที่ 1`
          เพื่อเปลี่ยนทิศทางที่ แวดเดิลเคลื่อนที่
        courseC_PlayLab_events6_c: เมื่อคุณเสร็จแล้ว คุณควรจะสามารถย้าย แวดเดิลไปรอบๆ
          โดยใช้ปุ่มลูกศรบนคอมพิวเตอร์ของคุณ
      courseC_PlayLab_events6_2019:
        courseC_PlayLab_events6_a: Each green `when arrow` block should have one action
          below it.
        courseC_PlayLab_events6_b: ใช้เมนูแบบดร็อปดาว์นลงบนบล็อก `ย้ายนักแสดงที่ 1`
          เพื่อเปลี่ยนทิศทางที่ แวดเดิลเคลื่อนที่
        courseC_PlayLab_events6_c: เมื่อคุณเสร็จแล้ว คุณควรจะสามารถย้าย แวดเดิลไปรอบๆ
          โดยใช้ปุ่มลูกศรบนคอมพิวเตอร์ของคุณ
      courseC_PlayLab_events7:
        courseC_PlayLab_events7_a: 'ใช้บล็อกทั้งสอง `ให้นักแสดง 2 ขยับ ขึ้นข้างบน
          400 พิกเซล` และ ให้นักแสดง 2 ขยับ ลงข้างล่าง 400 พิกเซล ไว้ภายในลูป `ทำซ้ำตลอดไป`
          เพื่อแก้ปริศนาด่านนี้ '
        courseC_PlayLab_events7_b: ลูป `ทำซ้ำตลอดไป` ไม่จำเป็นต้องเชื่อมต่อกับบล็อกอีเวนท์อื่นๆ
          มันจะทำงานด้วยตัวของมันเอง
      courseC_PlayLab_events7_2018:
        courseC_PlayLab_events7_a: 'ใช้บล็อกทั้งสอง `ให้นักแสดง 2 ขยับ ขึ้นข้างบน
          400 พิกเซล` และ ให้นักแสดง 2 ขยับ ลงข้างล่าง 400 พิกเซล ไว้ภายในลูป `ทำซ้ำตลอดไป`
          เพื่อแก้ปริศนาด่านนี้ '
        courseC_PlayLab_events7_b: ลูป `ทำซ้ำตลอดไป` ไม่จำเป็นต้องเชื่อมต่อกับบล็อกอีเวนท์อื่นๆ
          มันจะทำงานด้วยตัวของมันเอง
      courseC_PlayLab_events7_2019:
        courseC_PlayLab_events7_a: 'ใช้บล็อกทั้งสอง `ให้นักแสดง 2 ขยับ ขึ้นข้างบน
          400 พิกเซล` และ ให้นักแสดง 2 ขยับ ลงข้างล่าง 400 พิกเซล ไว้ภายในลูป `ทำซ้ำตลอดไป`
          เพื่อแก้ปริศนาด่านนี้ '
        courseC_PlayLab_events7_b: ลูป `ทำซ้ำตลอดไป` ไม่จำเป็นต้องเชื่อมต่อกับบล็อกอีเวนท์อื่นๆ
          มันจะทำงานด้วยตัวของมันเอง
      courseC_PlayLab_events8:
        courseC_PlayLab_events8_a: You will need to connect blocks to the `when actor
          touches` block to make this happen correctly.
        courseC_PlayLab_events8_b: บล็อก `นักแสดง.... พูดว่า`และ`เล่นเสียง....` ในกล่องเครื่องมือจะช่วยคุณได้!
      courseC_PlayLab_events8_2018:
        courseC_PlayLab_events8_a: You will need to connect blocks to the `when actor
          touches` block to make this happen correctly.
        courseC_PlayLab_events8_b: บล็อก `นักแสดง.... พูดว่า`และ`เล่นเสียง....` ในกล่องเครื่องมือจะช่วยคุณได้!
      courseC_PlayLab_events8_2019:
        courseC_PlayLab_events8_a: You will need to connect blocks to the `when actor
          touches` block to make this happen correctly.
        courseC_PlayLab_events8_b: บล็อก `นักแสดง.... พูดว่า`และ`เล่นเสียง....` ในกล่องเครื่องมือจะช่วยคุณได้!
      courseC_PlayLab_events9:
        courseC_PlayLab_events9_a: บล็อก ' ได้คะแนน ' จะช่วยคุณแก้ปริศนานี้
        courseC_PlayLab_events9_b: ตรวจสอบให้แน่ใจว่าบล็อกใหม่ของคุณ `นักแสดงที่..
          สัมผัส` เป็น นักแสดงที่ 1และนักแสดงที่ 3.
        courseC_PlayLab_events9_c: คุณสามารถมีอีเวนท์ได้มากกว่าหนึ่งอีเวนท์สำหรับ
          `เมื่อนักแสดง.. สัมผัส` ในพื้นที่ทำงานของคุณในเวลาเดียวกัน, ดังนั้นคุณจึงไม่ต้องลบอันแรกออกไป!
      courseC_PlayLab_events9_2018:
        courseC_PlayLab_events9_a: บล็อก ' ได้คะแนน ' จะช่วยคุณแก้ปริศนานี้
        courseC_PlayLab_events9_b: ตรวจสอบให้แน่ใจว่าบล็อกใหม่ของคุณ `นักแสดงที่..
          สัมผัส` เป็น นักแสดงที่ 1และนักแสดงที่ 3.
        courseC_PlayLab_events9_c: คุณสามารถมีอีเวนท์ได้มากกว่าหนึ่งอีเวนท์สำหรับ
          `เมื่อนักแสดง.. สัมผัส` ในพื้นที่ทำงานของคุณในเวลาเดียวกัน, ดังนั้นคุณจึงไม่ต้องลบอันแรกออกไป!
      courseC_PlayLab_events9_2019:
        courseC_PlayLab_events9_a: บล็อก ' ได้คะแนน ' จะช่วยคุณแก้ปริศนานี้
        courseC_PlayLab_events9_b: ตรวจสอบให้แน่ใจว่าบล็อกใหม่ของคุณ `นักแสดงที่..
          สัมผัส` เป็น นักแสดงที่ 1และนักแสดงที่ 3.
        courseC_PlayLab_events9_c: คุณสามารถมีอีเวนท์ได้มากกว่าหนึ่งอีเวนท์สำหรับ
          `เมื่อนักแสดง.. สัมผัส` ในพื้นที่ทำงานของคุณในเวลาเดียวกัน, ดังนั้นคุณจึงไม่ต้องลบอันแรกออกไป!
      courseC_PlayLab_eventsA:
        courseC_PlayLab_eventsA_a: ใช้บล็อก `ตั้งพื้นหลังเป็น__` และบล็อก`ตั้งค่านักแสดงเป็นความเร็ว
          ____` เพื่อใช้แก้ปริศนานี้
        courseC_PlayLab_eventsA_b: จำเป็นอย่างยิ่งที่คุณจะต้องลากบล็อกอีเวนท์`เมื่อเรียกใช้งาน`
          ลงไปไว้ที่พื้นที่ทำงานเพื่อใช้แก้ปริศนานี้
      courseC_PlayLab_eventsA_2018:
        courseC_PlayLab_eventsA_a: ใช้บล็อก `ตั้งพื้นหลังเป็น__` และบล็อก`ตั้งค่านักแสดงเป็นความเร็ว
          ____` เพื่อใช้แก้ปริศนานี้
        courseC_PlayLab_eventsA_b: จำเป็นอย่างยิ่งที่คุณจะต้องลากบล็อกอีเวนท์`เมื่อเรียกใช้งาน`
          ลงไปไว้ที่พื้นที่ทำงานเพื่อใช้แก้ปริศนานี้
      courseC_PlayLab_eventsA_2019:
        courseC_PlayLab_eventsA_a: ใช้บล็อก `ตั้งพื้นหลังเป็น__` และบล็อก`ตั้งค่านักแสดงเป็นความเร็ว
          ____` เพื่อใช้แก้ปริศนานี้
        courseC_PlayLab_eventsA_b: จำเป็นอย่างยิ่งที่คุณจะต้องลากบล็อกอีเวนท์`เมื่อเรียกใช้งาน`
          ลงไปไว้ที่พื้นที่ทำงานเพื่อใช้แก้ปริศนานี้
      courseC_PlayLab_eventsA_embed_2019:
        courseC_PlayLab_eventsA_a: Use the arrow keys to move the penguin. You do
          not need to write any code to finish this level.
      courseC_PlayLab_eventsFP:
        idea1: |-
          -   ต้องการไอเดียหรือไม่? \*

          \*\* ใครน่ะ? \*\* ทำให้ผู้แสดงปรากฏขึ้นด้วยภาพแบบสุ่ม ดังนั้นไม่มีใครรู้ว่าผู้ที่แสดงคนต่อไปจะเป็นใคร
        idea2: |-
          -   ต้องการไอเดียหรือไม่? \*

          \*\* ไปผจญภัยกัน \*\*-เปลี่ยนพื้นหลังแล้วมีผู้เล่นพูดเกี่ยวกับว่าตอนนี้พวกเขาอยู่ที่ไหน
        idea3: |-
          _Need an idea?_

          **Pinball** - Make one character move using the arrow keys (use `when up arrow`, `when down arrow` blocks), then play random sounds when it collides with other characters on the screen.
      courseC_PlayLab_eventsFP_2018:
        idea1: |-
          -   ต้องการไอเดียหรือไม่? \*

          \*\* ใครน่ะ? \*\* ทำให้ผู้แสดงปรากฏขึ้นด้วยภาพแบบสุ่ม ดังนั้นไม่มีใครรู้ว่าผู้ที่แสดงคนต่อไปจะเป็นใคร
        idea2: |-
          -   ต้องการไอเดียหรือไม่? \*

          \*\* ไปผจญภัยกัน \*\*-เปลี่ยนพื้นหลังแล้วมีผู้เล่นพูดเกี่ยวกับว่าตอนนี้พวกเขาอยู่ที่ไหน
        idea3: |-
          _Need an idea?_

          **Pinball** - Make one character move using the arrow keys (use `when up arrow`, `when down arrow` blocks), then play random sounds when it collides with other characters on the screen.
      courseC_PlayLab_eventsFP_2019:
        idea1: |-
          _Need an idea?_

          **Who's there?** Make characters appear with random images, so no one knows who's showing up next.

          <img src= "https://images.code.org/dbd6ece9d0fb213039ea5dccb91fc425-image-1563577859889.gif" style="width: 200px">
        idea2: |-
          _Need an idea?_

          **Going on an Adventure** - Change the background, then have the characters talk about where they are now.

          <img src= "https://images.code.org/a7f740d73074deb128cdc2826abda9e6-image-1563576781779.gif" style="width: 200px">
        idea3: |-
          _Need an idea?_

          **Pinball** - Make one character move using the arrow keys (use `when up arrow`, `when down arrow` blocks), then play random sounds when it collides with other characters on the screen.
      courseC_PlayLab_events_challenge1:
        courseC_PlayLab_events_challenge_a: |-
          You can use this block to move actors to different places on the game space.

          <xml> <block type="studio_setSpritePosition">
              <title name="SPRITE">0</title>
              <title name="VALUE">12</title>
            </block></xml>
        courseC_PlayLab_events_challenge_b: Try using `set actor 1 to the middle left
          position` when it touches either of the other actors. This will reset the
          game so the player can keep trying!
        courseC_PlayLab_events_challenge_c: |-
          You might also want to try changing the speed of the different actors to make the game easier or more challenging!

          <xml>  <block type="studio_setSpriteSpeed">
              <title name="SPRITE">0</title>
              <title name="VALUE">Studio.SpriteSpeed.FAST</title>
            </block></xml>
      courseC_PlayLab_events_challenge1_2018:
        courseC_PlayLab_events_challenge_a: |-
          You can use this block to move actors to different places on the game space.

          <xml> <block type="studio_setSpritePosition">
              <title name="SPRITE">0</title>
              <title name="VALUE">12</title>
            </block></xml>
        courseC_PlayLab_events_challenge_b: Try using `set actor 1 to the middle left
          position` when it touches either of the other actors. This will reset the
          game so the player can keep trying!
        courseC_PlayLab_events_challenge_c: |-
          You might also want to try changing the speed of the different actors to make the game easier or more challenging!

          <xml>  <block type="studio_setSpriteSpeed">
              <title name="SPRITE">0</title>
              <title name="VALUE">Studio.SpriteSpeed.FAST</title>
            </block></xml>
      courseC_PlayLab_events_challenge1_2019:
        courseC_PlayLab_events_challenge_a: |-
          You can use this block to move actors to different places on the game space.

          <xml> <block type="studio_setSpritePosition">
              <title name="SPRITE">0</title>
              <title name="VALUE">12</title>
            </block></xml>
        courseC_PlayLab_events_challenge_b: Try using `set actor 1 to the middle left
          position` when it touches either of the other actors. This will reset the
          game so the player can keep trying!
        courseC_PlayLab_events_challenge_c: |-
          You might also want to try changing the speed of the different actors to make the game easier or more challenging!

          <xml>  <block type="studio_setSpriteSpeed">
              <title name="SPRITE">0</title>
              <title name="VALUE">Studio.SpriteSpeed.FAST</title>
            </block></xml>
      courseC_artist_loop1:
        courseC_artist_loop1_a: คุณไม่จำเป็นต้องทำการเปลี่ยนแปลงใดๆกับลูป เพียงแค่ใส่บล็อกเพิ่มอีกหนึ่งบล็อกก่อนบล็อกลูป
        courseC_artist_loop1_b: |-
          นี่คือบล็อกที่คุณจะใช้ตั้งค่ารูปแบบ:

          <xml>
          <block type="draw_line_style_pattern">
          <title name="VALUE">DEFAULT</title>
          </block>
          </xml>
      courseC_artist_loop1_2018:
        courseC_artist_loop1_a: คุณไม่จำเป็นต้องทำการเปลี่ยนแปลงใดๆกับลูป เพียงแค่ใส่บล็อกเพิ่มอีกหนึ่งบล็อกก่อนบล็อกลูป
        courseC_artist_loop1_b: |-
          นี่คือบล็อกที่คุณจะใช้ตั้งค่ารูปแบบ:

          <xml>
          <block type="draw_line_style_pattern">
          <title name="VALUE">DEFAULT</title>
          </block>
          </xml>
      courseC_artist_loop1_2019:
        courseC_artist_loop1_a: คุณไม่จำเป็นต้องทำการเปลี่ยนแปลงใดๆกับลูป เพียงแค่ใส่บล็อกเพิ่มอีกหนึ่งบล็อกก่อนบล็อกลูป
        courseC_artist_loop1_b: |-
          นี่คือบล็อกที่คุณจะใช้ตั้งค่ารูปแบบ:

          <xml>
          <block type="draw_line_style_pattern">
          <title name="VALUE">DEFAULT</title>
          </block>
          </xml>
      courseC_artist_loops1a:
        courseC_artist_loops1a_a: |-
          นี่คือบล็อกที่คุณต้องใช้:

          <xml>
          <block type="jump_to_xy">
          <title name="XPOS">200</title>
          <title name="YPOS">200</title>
          </block>
          </xml>
        courseC_artist_loops1a_b: |-
          ใช้บล็อกนี้เพื่อวาดโดยใช้สติกเกอร์

          <xml>
          <block type="sticker">
          <title name="VALUE">Bird</title>
          </block>
          </xml>
      courseC_artist_loops1a_2018:
        courseC_artist_loops1a_a: |-
          นี่คือบล็อกที่คุณต้องใช้:

          <xml>
          <block type="jump_to_xy">
          <title name="XPOS">200</title>
          <title name="YPOS">200</title>
          </block>
          </xml>
        courseC_artist_loops1a_b: |-
          ใช้บล็อกนี้เพื่อวาดโดยใช้สติกเกอร์

          <xml>
          <block type="sticker">
          <title name="VALUE">Bird</title>
          </block>
          </xml>
      courseC_artist_loops1a_2019:
        courseC_artist_loops1a_a: |-
          นี่คือบล็อกที่คุณต้องใช้:

          <xml>
          <block type="jump_to_xy">
          <title name="XPOS">200</title>
          <title name="YPOS">200</title>
          </block>
          </xml>
        courseC_artist_loops1a_b: |-
          ใช้บล็อกนี้เพื่อวาดโดยใช้สติกเกอร์

          <xml>
          <block type="sticker">
          <title name="VALUE">Bird</title>
          </block>
          </xml>
      courseC_artist_loops1b_2019:
        courseC_artist_loops1b_a: |-
          This is the first block you will need:

          <xml>
            <block type="draw_turn_by_constant_dropdown">
              <title name="DIR">???</title>
              <title name="VALUE" config="45,60,90,120,180">???</title>
            </block>
          </xml>

          You can choose either left or right and any number of degrees.
      courseC_artist_loops2a:
        courseC_artist_loops2a_a: ภายในลูปของคุณ คุณจะต้องการกระโดดออกไปที่ 200 ลงไปที่
          200 ตำแหน่ง แล้ววาดสติกเกอร์นก แล้วหันไป 30 องศา
        courseC_artist_loops2a_b: คลิกตัวเลขที่ด้านบนของบล็อกลูป `ทำซ้ำ`เพื่อเปลี่ยนจำนวนครั้งของการวนซ้ำ
      courseC_artist_loops2a_2018:
        courseC_artist_loops2a_a: ภายในลูปของคุณ คุณจะต้องการกระโดดออกไปที่ 200 ลงไปที่
          200 ตำแหน่ง แล้ววาดสติกเกอร์นก แล้วหันไป 30 องศา
        courseC_artist_loops2a_b: คลิกตัวเลขที่ด้านบนของบล็อกลูป `ทำซ้ำ`เพื่อเปลี่ยนจำนวนครั้งของการวนซ้ำ
      courseC_artist_loops2a_2019:
        courseC_artist_loops2a_a: ภายในลูปของคุณ คุณจะต้องการกระโดดออกไปที่ 200 ลงไปที่
          200 ตำแหน่ง แล้ววาดสติกเกอร์นก แล้วหันไป 30 องศา
        courseC_artist_loops2a_b: คลิกตัวเลขที่ด้านบนของบล็อกลูป `ทำซ้ำ`เพื่อเปลี่ยนจำนวนครั้งของการวนซ้ำ
      courseC_artist_loops3a:
        courseC_artist_loops3a_a: คุณจะต้องการที่จะเพิ่มบล็อกเพียงหนึ่งบล็อกภายในลูปของคุณ
          หลังจากวาดสติกเกอร์นก.
        courseC_artist_loops3a_b: ใช้เมนูแบบดรอปดาว์นที่อยู่บนบล็อก `วาดสติ๊กเกอร์`
          เพื่อค้นหาสติ๊กเกอร์ค้างคาว
      courseC_artist_loops3a_2018:
        courseC_artist_loops3a_a: คุณจะต้องการที่จะเพิ่มบล็อกเพียงหนึ่งบล็อกภายในลูปของคุณ
          หลังจากวาดสติกเกอร์นก.
        courseC_artist_loops3a_b: ใช้เมนูแบบดรอปดาว์นที่อยู่บนบล็อก `วาดสติ๊กเกอร์`
          เพื่อค้นหาสติ๊กเกอร์ค้างคาว
      courseC_artist_loops3a_2019:
        courseC_artist_loops3a_a: คุณจะต้องการที่จะเพิ่มบล็อกเพียงหนึ่งบล็อกภายในลูปของคุณ
          หลังจากวาดสติกเกอร์นก.
        courseC_artist_loops3a_b: ใช้เมนูแบบดรอปดาว์นที่อยู่บนบล็อก `วาดสติ๊กเกอร์`
          เพื่อค้นหาสติ๊กเกอร์ค้างคาว
      courseC_artist_loops4a:
        courseC_artist_loops4a_a: |-
          ใช้บล็อกนี้เพื่อกระโดดไปข้างหน้า:

          <xml>
          <block type="jump_by_constant">
          <title name="DIR">jumpForward</title>
          <title name="VALUE">100</title>
          </block>
          </xml>

          อย่าลืมเปลี่ยนระยะทาง
      courseC_artist_loops4a_2018:
        courseC_artist_loops4a_a: |-
          ใช้บล็อกนี้เพื่อกระโดดไปข้างหน้า:

          <xml>
          <block type="jump_by_constant">
          <title name="DIR">jumpForward</title>
          <title name="VALUE">100</title>
          </block>
          </xml>

          อย่าลืมเปลี่ยนระยะทาง
      courseC_artist_loops4a_2019:
        courseC_artist_loops4a_a: |-
          ใช้บล็อกนี้เพื่อกระโดดไปข้างหน้า:

          <xml>
          <block type="jump_by_constant">
          <title name="DIR">jumpForward</title>
          <title name="VALUE">100</title>
          </block>
          </xml>

          อย่าลืมเปลี่ยนระยะทาง
        courseC_artist_loops4a_b: |-
          Your program should look like this!

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat">
                  <title name="TIMES">???</title>
                  <statement name="DO">
                    <block type="jump_to">
                      <title name="VALUE">13</title>
                      <next>
                        <block type="draw_turn_by_constant_dropdown">
                          <title name="DIR">???</title>
                          <title name="VALUE" config="1,2,5,10,12,20,30,45,60,90,120,180">???</title>
                          <next>
                            <block type="sticker">
                              <title name="VALUE">Cat</title>
                              <next>
                                <block type="jump_by_constant">
                                  <title name="DIR">jumpForward</title>
                                  <title name="VALUE">???</title>
                                  <next>
                                    <block type="sticker">
                                      <title name="VALUE">Dog</title>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
          </xml>
      courseC_artist_loops5a:
        courseC_artist_loops5a_a: ใช้รายการเลือกแบบดึงลง (drop down menus) จากบล็อก
          `วาดสติกเกอร์` เพื่อเปลี่ยนรูปลักษณ์
      courseC_artist_loops5a_2018:
        courseC_artist_loops5a_a: ใช้รายการเลือกแบบดึงลง (drop down menus) จากบล็อก
          `วาดสติกเกอร์` เพื่อเปลี่ยนรูปลักษณ์
      courseC_artist_loops5a_2019:
        courseC_artist_loops5a_a: ใช้รายการเลือกแบบดึงลง (drop down menus) จากบล็อก
          `วาดสติกเกอร์` เพื่อเปลี่ยนรูปลักษณ์
      courseC_artist_loops5b:
        courseC_artist_loops5b_a: |-
          ใช้บล็อกนี้สำหรับตั้งค่ารูปแบบของเส้นต่างๆ:

          <xml>
          <block type="draw_line_style_pattern">
          <title name="VALUE">DEFAULT</title>
          </block>
          </xml>
        courseC_artist_loops5b_b: เมื่อต้องการออกแบบให้เหมือนตัวอย่างข้างต้น คุณจะต้องเดินถอยหลังไปด้วยระยะทางเดียวกับที่คุณเดินไปข้างหน้า
      courseC_artist_loops5b_2018:
        courseC_artist_loops5b_a: |-
          ใช้บล็อกนี้สำหรับตั้งค่ารูปแบบของเส้นต่างๆ:

          <xml>
          <block type="draw_line_style_pattern">
          <title name="VALUE">DEFAULT</title>
          </block>
          </xml>
        courseC_artist_loops5b_b: เมื่อต้องการออกแบบให้เหมือนตัวอย่างข้างต้น คุณจะต้องเดินถอยหลังไปด้วยระยะทางเดียวกับที่คุณเดินไปข้างหน้า
      courseC_artist_loops5b_2019:
        courseC_artist_loops5b_a: |-
          ใช้บล็อกนี้สำหรับตั้งค่ารูปแบบของเส้นต่างๆ:

          <xml>
          <block type="draw_line_style_pattern">
          <title name="VALUE">DEFAULT</title>
          </block>
          </xml>
        courseC_artist_loops5b_b: เมื่อต้องการออกแบบให้เหมือนตัวอย่างข้างต้น คุณจะต้องเดินถอยหลังไปด้วยระยะทางเดียวกับที่คุณเดินไปข้างหน้า
        courseC_artist_loops5b_c: |-
          Your program should look like this!

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_line_style_pattern">
                  <title name="VALUE">rainbowLine</title>
                  <next>
                    <block type="controls_repeat">
                      <title name="TIMES">4</title>
                      <statement name="DO">
                        <block type="jump_to">
                          <title name="VALUE">13</title>
                          <next>
                            <block type="draw_move_by_constant">
                              <title name="DIR">moveForward</title>
                              <title name="VALUE">???</title>
                              <next>
                                <block type="draw_move_by_constant">
                                  <title name="DIR">moveBackward</title>
                                  <title name="VALUE">???</title>
                                  <next>
                                    <block type="draw_turn_by_constant_dropdown">
                                      <title name="DIR">???</title>
                                      <title name="VALUE" config="1,2,5,10,12,20,30,45,60,90,120,180">???</title>
                                      <next>
                                        <block type="sticker">
                                          <title name="VALUE">Cat</title>
                                          <next>
                                            <block type="jump_by_constant">
                                              <title name="DIR">jumpForward</title>
                                              <title name="VALUE">???</title>
                                              <next>
                                                <block type="sticker">
                                                  <title name="VALUE">Dog</title>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseC_artist_loops6a:
        courseC_artist_loops6a_a: เมื่อต้องการออกแบบให้เหมือนตัวอย่างข้างต้น ให้กระโดดไปข้างหน้าให้น้อยกว่า
          75 พิกเซล โดยอยู่ระหว่างสติกเกอร์แต่ละอัน
      courseC_artist_loops6a_2018:
        courseC_artist_loops6a_a: เมื่อต้องการออกแบบให้เหมือนตัวอย่างข้างต้น ให้กระโดดไปข้างหน้าให้น้อยกว่า
          75 พิกเซล โดยอยู่ระหว่างสติกเกอร์แต่ละอัน
      courseC_artist_loops6a_2019:
        courseC_artist_loops6a_a: เมื่อต้องการออกแบบให้เหมือนตัวอย่างข้างต้น ให้กระโดดไปข้างหน้าให้น้อยกว่า
          75 พิกเซล โดยอยู่ระหว่างสติกเกอร์แต่ละอัน
      courseC_artist_loops7a:
        courseC_artist_loops7a_a: |-
          A circle has 360 degrees. Multiply the degrees in your turn times the number of times you repeat. Does it equal 360?
          Check the suggested rotations to see that this works!
      courseC_artist_loops7a_2018:
        courseC_artist_loops7a_a: |-
          A circle has 360 degrees. Multiply the degrees in your turn times the number of times you repeat. Does it equal 360?
          Check the suggested rotations to see that this works!
      courseC_artist_loops7a_2019:
        courseC_artist_loops7a_a: |-
          A circle has 360 degrees. Multiply the degrees in your turn times the number of times you repeat. Does it equal 360?
          Check the suggested rotations to see that this works!
      courseC_artist_loopsPre1a:
        courseC_artist_loopsPre1a_a: จำไว้ว่าให้ใส่บล็อก `หันไป` ไว้ภายในบล็อกลูป
        courseC_artist_loopsPre1a_b: 'บล็อกลูป `ทำซ้ำ` นั้นควรที่จะมีบล็อก 3 บล็อกอยู่ภายในได้แก่:
          บล็อก`กระโดดออกไปที่ 200 ลงไปที่ 200 ตำแหน่ง` บล็อก`ไปข้างหน้า 50 พิกเซล`,
          และบล็อก `หันขวาไป 60 องศา`'
      courseC_artist_loopsPre1a_2018:
        courseC_artist_loopsPre1a_a: จำไว้ว่าให้ใส่บล็อก `หันไป` ไว้ภายในบล็อกลูป
        courseC_artist_loopsPre1a_b: 'บล็อกลูป `ทำซ้ำ` นั้นควรที่จะมีบล็อก 3 บล็อกอยู่ภายในได้แก่:
          บล็อก`กระโดดออกไปที่ 200 ลงไปที่ 200 ตำแหน่ง` บล็อก`ไปข้างหน้า 50 พิกเซล`,
          และบล็อก `หันขวาไป 60 องศา`'
      courseC_artist_loopsPre1a_2019:
        courseC_artist_loopsPre1a_a: จำไว้ว่าให้ใส่บล็อก `หันไป` ไว้ภายในบล็อกลูป
        courseC_artist_loopsPre1a_b: 'บล็อกลูป `ทำซ้ำ` นั้นควรที่จะมีบล็อก 3 บล็อกอยู่ภายในได้แก่:
          บล็อก`กระโดดออกไปที่ 200 ลงไปที่ 200 ตำแหน่ง` บล็อก`ไปข้างหน้า 50 พิกเซล`,
          และบล็อก `หันขวาไป 60 องศา`'
      courseC_artist_loopsPrePre1a:
        courseC_artist_loopsPrePre1a_a: |-
          บล็อกที่คุณต้องใช้บล็อกแรกคือ:

          ![](<https://images.code.org/60e3354a2e7dd37b64833eac1e8694be-image-1499710228373.08.14 AM.png>)
        courseC_artist_loopsPrePre1a_b: |-
          เคลื่อนที่ไปข้างหน้า 50 พิกเซล ใช้บล็อกนี้:
          ![](<https://images.code.org/411fca4606a09641e6eedf5069ac4efa-image-1499710237929.08.27 AM.png>)
      courseC_artist_loopsPrePre1a_2018:
        courseC_artist_loopsPrePre1a_a: |-
          บล็อกที่คุณต้องใช้บล็อกแรกคือ:

          <xml>  <block type="jump_to_xy" id="callMe">

          <title name="XPOS">200</title>
          <title name="YPOS">200</title>
          </block></xml>
        courseC_artist_loopsPrePre1a_b: |-
          เคลื่อนที่ไปข้างหน้า 50 พิกเซล ใช้บล็อกนี้:

          <xml><block type="draw_move_by_constant">

          <title name="DIR">moveForward</title>
          <title name="VALUE">50</title>
          </block></xml>
      courseC_artist_loopsPrePre1a_2019:
        courseC_artist_loopsPrePre1a_a: |-
          บล็อกที่คุณต้องใช้บล็อกแรกคือ:

          <xml>  <block type="jump_to_xy" id="callMe">

          <title name="XPOS">200</title>
          <title name="YPOS">200</title>
          </block></xml>
        courseC_artist_loopsPrePre1a_b: |-
          เคลื่อนที่ไปข้างหน้า 50 พิกเซล ใช้บล็อกนี้:

          <xml><block type="draw_move_by_constant">

          <title name="DIR">moveForward</title>
          <title name="VALUE">50</title>
          </block></xml>
      courseC_artist_prog2:
        courseC_artist_prog2_a: '**หากคุณใช้บล็อก<xml><block type="draw_move_by_constant"><title
          name="DIR">moveForward</title><title name="VALUE">100</title></block></xml>
          ฉันก็จะวาดเส้นขี้นมาเส้นหนึ่ง**'
        courseC_artist_prog2_b: มีปัญหาในการเลี้ยวมุมไหม? ให้ใช้บล็อก<xml><block type="draw_turn_by_constant_dropdown"><title
          name="DIR">turnRight</title><title name="VALUE" config="45,60,90,120,180">90</title></block></xml>
      courseC_artist_prog2_2018:
        courseC_artist_prog2_a: '**หากคุณใช้บล็อก<xml><block type="draw_move_by_constant"><title
          name="DIR">moveForward</title><title name="VALUE">100</title></block></xml>
          ฉันก็จะวาดเส้นขี้นมาเส้นหนึ่ง**'
        courseC_artist_prog2_b: มีปัญหาในการเลี้ยวมุมไหม? ให้ใช้บล็อก<xml><block type="draw_turn_by_constant_dropdown"><title
          name="DIR">turnRight</title><title name="VALUE" config="45,60,90,120,180">90</title></block></xml>
      courseC_artist_prog2_2019:
        courseC_artist_prog2_a: '**หากคุณใช้บล็อก<xml><block type="draw_move_by_constant"><title
          name="DIR">moveForward</title><title name="VALUE">100</title></block></xml>
          ฉันก็จะวาดเส้นขี้นมาเส้นหนึ่ง**'
        courseC_artist_prog2_b: มีปัญหาในการเลี้ยวมุมไหม? ให้ใช้บล็อก<xml><block type="draw_turn_by_constant_dropdown"><title
          name="DIR">turnRight</title><title name="VALUE" config="45,60,90,120,180">90</title></block></xml>
      courseC_artist_prog3:
        courseC_artist_prog3_a: |-
          เมื่อต้องการสร้างหน้าต่างนี้ ก็แค่เพียงวาดสี่เหลี่ยมจัตุรัสที่มีด้านยาวด้านละ 100 พิกเซล
          \-ไปข้างหน้า
          \-หัน
          \-ไปข้างหน้า
          \-หัน
          \-ไปข้างหน้า
          \-หัน
          \-ไปข้างหน้า
        courseC_artist_prog3_b: ต้องการทำให้โค้ดสั้นลงหรือไม่ ลองใช้บล็อกลูปในปริศนานี้ดู
      courseC_artist_prog3_2018:
        courseC_artist_prog3_a: |-
          เมื่อต้องการสร้างหน้าต่างนี้ ก็แค่เพียงวาดสี่เหลี่ยมจัตุรัสที่มีด้านยาวด้านละ 100 พิกเซล
          \-ไปข้างหน้า
          \-หัน
          \-ไปข้างหน้า
          \-หัน
          \-ไปข้างหน้า
          \-หัน
          \-ไปข้างหน้า
        courseC_artist_prog3_b: ต้องการทำให้โค้ดสั้นลงหรือไม่ ลองใช้บล็อกลูปในปริศนานี้ดู
      courseC_artist_prog3_2019:
        courseC_artist_prog3_a: |-
          เมื่อต้องการสร้างหน้าต่างนี้ ก็แค่เพียงวาดสี่เหลี่ยมจัตุรัสที่มีด้านยาวด้านละ 100 พิกเซล
          \-ไปข้างหน้า
          \-หัน
          \-ไปข้างหน้า
          \-หัน
          \-ไปข้างหน้า
          \-หัน
          \-ไปข้างหน้า
        courseC_artist_prog3_b: ต้องการทำให้โค้ดสั้นลงหรือไม่ ลองใช้บล็อกลูปในปริศนานี้ดู
      courseC_artist_prog4:
        courseC_artist_prog4_a: เพื่อให้เสร็จสิ้นการวาดจรวด เพียงแค่คุณวาดรูปสามเหลี่ยมไว้ด้านบน!
        courseC_artist_prog4_b: คุณสามารถใช้รายการเลือกแบบดึงลง(drop down menu) ที่อยุ่บนบล็อก
          ' หัน... ไป... องศา' เพื่อเลือกดูขนาดองศาของมุมที่คุณต้องการใช้!
        courseC_artist_prog4_c: |-
          เมื่อต้องการวาดรูปสามเหลี่ยมคุณจะต้อง:
          \-ย้ายไปข้างหน้า
          \-เลี้ยวซ้าย ๑๒๐ องศา
          \-ย้ายไปข้างหน้า
          \-เลี้ยวซ้าย ๑๒๐ องศา
          \-ย้ายไปข้างหน้า
      courseC_artist_prog4_2018:
        courseC_artist_prog4_a: เพื่อให้เสร็จสิ้นการวาดจรวด เพียงแค่คุณวาดรูปสามเหลี่ยมไว้ด้านบน!
        courseC_artist_prog4_b: คุณสามารถใช้รายการเลือกแบบดึงลง(drop down menu) ที่อยุ่บนบล็อก
          ' หัน... ไป... องศา' เพื่อเลือกดูขนาดองศาของมุมที่คุณต้องการใช้!
        courseC_artist_prog4_c: |-
          เมื่อต้องการวาดรูปสามเหลี่ยมคุณจะต้อง:
          \-ย้ายไปข้างหน้า
          \-เลี้ยวซ้าย ๑๒๐ องศา
          \-ย้ายไปข้างหน้า
          \-เลี้ยวซ้าย ๑๒๐ องศา
          \-ย้ายไปข้างหน้า
      courseC_artist_prog4_2019:
        courseC_artist_prog4_a: เพื่อให้เสร็จสิ้นการวาดจรวด เพียงแค่คุณวาดรูปสามเหลี่ยมไว้ด้านบน!
        courseC_artist_prog4_b: คุณสามารถใช้รายการเลือกแบบดึงลง(drop down menu) ที่อยุ่บนบล็อก
          ' หัน... ไป... องศา' เพื่อเลือกดูขนาดองศาของมุมที่คุณต้องการใช้!
        courseC_artist_prog4_c: |-
          เมื่อต้องการวาดรูปสามเหลี่ยมคุณจะต้อง:
          \-ย้ายไปข้างหน้า
          \-เลี้ยวซ้าย ๑๒๐ องศา
          \-ย้ายไปข้างหน้า
          \-เลี้ยวซ้าย ๑๒๐ องศา
          \-ย้ายไปข้างหน้า
      courseC_artist_prog5:
        courseC_artist_prog5_a: Slow the slider down all the way until you can run
          your code line-by-line to see where things go wrong.
        courseC_artist_prog5_b: อย่ากลัวที่จะทำผิดพลาด! ลองเพิ่มบล็อกดู และเรียกใช้งานโค้ดเพื่อดูว่าจะเกิดอะไรขึ้น
          แม้ว่าคุณจะไม่คิดว่าคุณแก้ปริศนาได้แล้วก็ตาม
        courseC_artist_prog5_c: คุณสามารถใช้รายการเลือกแบบดึงลง(drop down menu) ที่อยุ่บนบล็อก
          ' หัน... ไป... องศา' เพื่อเลือกดูขนาดองศาของมุมที่คุณต้องการใช้!
        courseC_artist_prog5_d: Each turn should be 90 degrees to the right.
      courseC_artist_prog5_2018:
        courseC_artist_prog5_a: Slow the slider down all the way until you can run
          your code line-by-line to see where things go wrong.
        courseC_artist_prog5_b: อย่ากลัวที่จะทำผิดพลาด! ลองเพิ่มบล็อกดู และเรียกใช้งานโค้ดเพื่อดูว่าจะเกิดอะไรขึ้น
          แม้ว่าคุณจะไม่คิดว่าคุณแก้ปริศนาได้แล้วก็ตาม
        courseC_artist_prog5_c: |-
          คุณสามารถใช้เมนูดรอปดาวน์บนบล็อก ' เลี้ยว' เพื่อเลือกดูมุมที่คุณต้องการใช้!
          คุณสามารถใช้รายการเลือกแบบดึงลง(drop down menu) ที่อยุ่บนบล็อกเพื่อเปลี่ยนขนาดให้เป็นไปตามที่คุณต้องการ!
        courseC_artist_prog5_d: Each turn should be 90 degrees to the right.
      courseC_artist_prog5_2019:
        courseC_artist_prog5_a: Slow the slider down all the way until you can run
          your code line-by-line to see where things go wrong.
        courseC_artist_prog5_b: อย่ากลัวที่จะทำผิดพลาด! ลองเพิ่มบล็อกดู และเรียกใช้งานโค้ดเพื่อดูว่าจะเกิดอะไรขึ้น
          แม้ว่าคุณจะไม่คิดว่าคุณแก้ปริศนาได้แล้วก็ตาม
        courseC_artist_prog5_c: |-
          คุณสามารถใช้เมนูดรอปดาวน์บนบล็อก ' เลี้ยว' เพื่อเลือกดูมุมที่คุณต้องการใช้!
          คุณสามารถใช้รายการเลือกแบบดึงลง(drop down menu) ที่อยุ่บนบล็อกเพื่อเปลี่ยนขนาดให้เป็นไปตามที่คุณต้องการ!
        courseC_artist_prog5_d: Each turn should be 90 degrees to the right.
      courseC_artist_prog6:
        courseC_artist_prog6_a: ศิลปินได้หันหน้าไปในทิศทางที่ถูกต้องแล้ว เพื่อที่จะวาดเส้นแรกของเขา
        courseC_artist_prog6_b: เพชรเม็ดนี้เป็นเพียงสี่เหลี่ยมจตุรัสที่ตั้งอยู่บนมุมของมันเองเท่านั้น
        courseC_artist_prog6_c: เนื่องจากรูปทรงเพชรนี้ก็คือสี่เหลี่ยมจตุรัสนั่นเอง
          อย่าลืมหัน 90 องศาในแต่ละมุมด้วย
      courseC_artist_prog6_2018:
        courseC_artist_prog6_a: ศิลปินได้หันหน้าไปในทิศทางที่ถูกต้องแล้ว เพื่อที่จะวาดเส้นแรกของเขา
        courseC_artist_prog6_b: เพชรเม็ดนี้เป็นเพียงสี่เหลี่ยมจตุรัสที่ตั้งอยู่บนมุมของมันเองเท่านั้น
        courseC_artist_prog6_c: เนื่องจากรูปทรงเพชรนี้ก็คือสี่เหลี่ยมจตุรัสนั่นเอง
          อย่าลืมหัน 90 องศาในแต่ละมุมด้วย
      courseC_artist_prog6_2019:
        courseC_artist_prog6_a: ศิลปินได้หันหน้าไปในทิศทางที่ถูกต้องแล้ว เพื่อที่จะวาดเส้นแรกของเขา
        courseC_artist_prog6_b: เพชรเม็ดนี้เป็นเพียงสี่เหลี่ยมจตุรัสที่ตั้งอยู่บนมุมของมันเองเท่านั้น
        courseC_artist_prog6_c: เนื่องจากรูปทรงเพชรนี้ก็คือสี่เหลี่ยมจตุรัสนั่นเอง
          อย่าลืมหัน 90 องศาในแต่ละมุมด้วย
      courseC_artist_prog7:
        courseC_artist_prog7_a: ทุกมุมไม่ 45 ก็ 90 องศา
        courseC_artist_prog7_b: |-
          มันทำงานขั้นตอนแรกไหม?\
          ขั้นตอนที่สองทำงานไหม?\
          ผิดตรงไหน?
        courseC_artist_prog7_c: |-
          คุณสามารถใช้เมนูดรอปดาวน์บนบล็อก ' เลี้ยว' เพื่อเลือกดูมุมที่คุณต้องการใช้!
          คุณสามารถใช้รายการเลือกแบบดึงลง(drop down menu) ที่อยุ่บนบล็อกหันไป เพื่อเลือกดูขนาดองศาของมุมที่คุณต้องการใช้!
        courseC_artist_prog7_d: |-
          คุณต้องการ:
          \-ย้ายไปข้างหน้า
          \-เลี้ยวขวา 45 องศา
          \-ย้ายไปข้างหน้า
          \-เลี้ยวขวา 90 องศา
          \-ย้ายไปข้างหน้า
          \-เลี้ยวขวา 45 องศา

          ทำซ้ำรูปแบบนี้ 2 ครั้ง!
        courseC_artist_prog7_e: อย่ากลัวที่จะทำผิดพลาด! ลองเพิ่มบล็อกดู และเรียกใช้งานโค้ดเพื่อดูว่าจะเกิดอะไรขึ้น
          แม้ว่าคุณจะไม่คิดว่าคุณแก้ปริศนาได้แล้วก็ตาม
      courseC_artist_prog7_2018:
        courseC_artist_prog7_a: ทุกมุมไม่ 45 ก็ 90 องศา
        courseC_artist_prog7_b: |-
          มันทำงานขั้นตอนแรกไหม?\
          ขั้นตอนที่สองทำงานไหม?\
          ผิดตรงไหน?
        courseC_artist_prog7_c: |-
          คุณสามารถใช้เมนูดรอปดาวน์บนบล็อก ' เลี้ยว' เพื่อเลือกดูมุมที่คุณต้องการใช้!
          คุณสามารถใช้รายการเลือกแบบดึงลง(drop down menu) ที่อยุ่บนบล็อกหันไป เพื่อเลือกดูขนาดองศาของมุมที่คุณต้องการใช้!
        courseC_artist_prog7_d: |-
          คุณต้องการ:
          \-ย้ายไปข้างหน้า
          \-เลี้ยวขวา 45 องศา
          \-ย้ายไปข้างหน้า
          \-เลี้ยวขวา 90 องศา
          \-ย้ายไปข้างหน้า
          \-เลี้ยวขวา 45 องศา

          ทำซ้ำรูปแบบนี้ 2 ครั้ง!
        courseC_artist_prog7_e: อย่ากลัวที่จะทำผิดพลาด! ลองเพิ่มบล็อกดู และเรียกใช้งานโค้ดเพื่อดูว่าจะเกิดอะไรขึ้น
          แม้ว่าคุณจะไม่คิดว่าคุณแก้ปริศนาได้แล้วก็ตาม
      courseC_artist_prog7_2019:
        courseC_artist_prog7_a: ทุกมุมไม่ 45 ก็ 90 องศา
        courseC_artist_prog7_b: |-
          มันทำงานขั้นตอนแรกไหม?\
          ขั้นตอนที่สองทำงานไหม?\
          ผิดตรงไหน?
        courseC_artist_prog7_c: |-
          คุณสามารถใช้เมนูดรอปดาวน์บนบล็อก ' เลี้ยว' เพื่อเลือกดูมุมที่คุณต้องการใช้!
          คุณสามารถใช้รายการเลือกแบบดึงลง(drop down menu) ที่อยุ่บนบล็อกหันไป เพื่อเลือกดูขนาดองศาของมุมที่คุณต้องการใช้!
        courseC_artist_prog7_d: |-
          คุณต้องการ:
          \-ย้ายไปข้างหน้า
          \-เลี้ยวขวา 45 องศา
          \-ย้ายไปข้างหน้า
          \-เลี้ยวขวา 90 องศา
          \-ย้ายไปข้างหน้า
          \-เลี้ยวขวา 45 องศา

          ทำซ้ำรูปแบบนี้ 2 ครั้ง!
        courseC_artist_prog7_e: อย่ากลัวที่จะทำผิดพลาด! ลองเพิ่มบล็อกดู และเรียกใช้งานโค้ดเพื่อดูว่าจะเกิดอะไรขึ้น
          แม้ว่าคุณจะไม่คิดว่าคุณแก้ปริศนาได้แล้วก็ตาม
      courseC_artist_prog_challenge1:
        courseC_artist_prog_challenge1_a: You can draw this as a rectangle with a
          line in the middle or two different squares!
      courseC_artist_prog_challenge1_2018:
        courseC_artist_prog_challenge1_a: You can draw this as a rectangle with a
          line in the middle or two different squares!
      courseC_artist_prog_challenge1_2019:
        courseC_artist_prog_challenge1_a: You can draw this as a rectangle with a
          line in the middle or two different squares!
      courseC_artist_prog_challenge2a:
        courseC_artist_prog_challenge2_a: After you draw the first line, turn left
          before you draw your second line.
        courseC_artist_prog_challenge2_b: After you draw the second line, turn right
          before you draw your third line.
      courseC_artist_prog_challenge2a_2018:
        courseC_artist_prog_challenge2_a: After you draw the first line, turn left
          before you draw your second line.
        courseC_artist_prog_challenge2_b: After you draw the second line, turn right
          before you draw your third line.
      courseC_artist_prog_challenge2a_2019:
        courseC_artist_prog_challenge2_a: After you draw the first line, turn left
          before you draw your second line.
        courseC_artist_prog_challenge2_b: After you draw the second line, turn right
          before you draw your third line.
      courseC_collector_loops_challenge2:
        courseC_maze_loops_challenge2_b: Use loops so you don't run out of `collect`
          blocks!
      courseC_collector_loops_challenge2_2018:
        courseC_maze_loops_challenge2_b: Use loops so you don't run out of `collect`
          blocks!
      courseC_collector_loops_challenge2_2019:
        courseC_maze_loops_challenge2_b: Use loops so you don't run out of `collect`
          blocks!
      courseC_collector_prog1:
        courseC_collector_prog1_a: When you are standing on a space with treasure,
          use the <xml><block type="collector_collect"/></xml> block to pick it up.
        courseC_collector_prog1_b: The most simple solution would be to move forward
          once, then collect treasure.
      courseC_collector_prog1_2018:
        courseC_collector_prog1_a: When you are standing on a space with treasure,
          use the <xml><block type="collector_collect"/></xml> block to pick it up.
        courseC_collector_prog1_b: The most simple solution would be to move forward
          once, then collect treasure.
      courseC_collector_prog1_2019:
        courseC_collector_prog1_a: When you are standing on a space with treasure,
          use the <xml><block type="collector_collect"/></xml> block to pick it up.
        courseC_collector_prog1_b: The most simple solution would be to move forward
          once, then collect treasure.
      courseC_collector_prog2:
        courseC_collector_prog2_a: คุณสามารถใช้บล็อก <xml><block type="maze_move"><title
          name="DIR">moveForward</title></block></xml> สี่บล็อกหรือใช้บล็อก <xml><block
          type="controls_repeat_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
          เพื่อทำให้โปรแกรมของคุณให้สั้นลง
        courseC_collector_prog2_b: อย่ากลัวที่จะทำผิดพลาด! ลองเพิ่มบล็อกดู และเรียกใช้งานโค้ดเพื่อดูว่าจะเกิดอะไรขึ้น
          แม้ว่าคุณจะไม่คิดว่าคุณแก้ปริศนาได้แล้วก็ตาม
      courseC_collector_prog2_2018:
        courseC_collector_prog2_a: คุณสามารถใช้บล็อก <xml><block type="maze_move"><title
          name="DIR">moveForward</title></block></xml> สี่บล็อกหรือใช้บล็อก <xml><block
          type="controls_repeat_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
          เพื่อทำให้โปรแกรมของคุณให้สั้นลง
        courseC_collector_prog2_b: อย่ากลัวที่จะทำผิดพลาด! ลองเพิ่มบล็อกดู และเรียกใช้งานโค้ดเพื่อดูว่าจะเกิดอะไรขึ้น
          แม้ว่าคุณจะไม่คิดว่าคุณแก้ปริศนาได้แล้วก็ตาม
      courseC_collector_prog2_2019:
        courseC_collector_prog2_a: คุณสามารถใช้บล็อก <xml><block type="maze_move"><title
          name="DIR">moveForward</title></block></xml> สี่บล็อกหรือใช้บล็อก <xml><block
          type="controls_repeat_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
          เพื่อทำให้โปรแกรมของคุณให้สั้นลง
        courseC_collector_prog2_b: อย่ากลัวที่จะทำผิดพลาด! ลองเพิ่มบล็อกดู และเรียกใช้งานโค้ดเพื่อดูว่าจะเกิดอะไรขึ้น
          แม้ว่าคุณจะไม่คิดว่าคุณแก้ปริศนาได้แล้วก็ตาม
      courseC_collector_prog3:
        courseC_collector_prog3_a: โปรแกรมจะเรียกใช้งานบล็อกที่เชื่อมต่อกับบล็อก<xml>\<block
          type=""เมื่อเรียกใช้งาน"/"></block></xml>เท่านั้น
        courseC_collector_prog3_b: ลองใช้ปุ่ม  "ขั้นตอน " เพื่อเรียกใช้งานโค้ดของคุณทีละหนึ่งบรรทัดในแต่ละครั้ง
          คุณเห็นไหมว่ารหัสไม่ถูกต้องตรงไหน?
        courseC_collector_prog3_c: หากคุณมีปัญหาในการแก้ปริศนานี้ ลองเขียนขั้นตอนต่างๆลงบนกระดาษ
      courseC_collector_prog3_2018:
        courseC_collector_prog3_a: โปรแกรมจะเรียกใช้งานบล็อกที่เชื่อมต่อกับบล็อก<xml>\<block
          type=""เมื่อเรียกใช้งาน"/"></block></xml>เท่านั้น
        courseC_collector_prog3_b: ลองใช้ปุ่ม  "ขั้นตอน " เพื่อเรียกใช้งานโค้ดของคุณทีละหนึ่งบรรทัดในแต่ละครั้ง
          คุณเห็นไหมว่ารหัสไม่ถูกต้องตรงไหน?
        courseC_collector_prog3_c: หากคุณมีปัญหาในการแก้ปริศนานี้ ลองเขียนขั้นตอนต่างๆลงบนกระดาษ
      courseC_collector_prog3_2019:
        courseC_collector_prog3_a: โปรแกรมจะเรียกใช้งานบล็อกที่เชื่อมต่อกับบล็อก<xml>\<block
          type=""เมื่อเรียกใช้งาน"/"></block></xml>เท่านั้น
        courseC_collector_prog3_b: ลองใช้ปุ่ม  "ขั้นตอน " เพื่อเรียกใช้งานโค้ดของคุณทีละหนึ่งบรรทัดในแต่ละครั้ง
          คุณเห็นไหมว่ารหัสไม่ถูกต้องตรงไหน?
        courseC_collector_prog3_c: หากคุณมีปัญหาในการแก้ปริศนานี้ ลองเขียนขั้นตอนต่างๆลงบนกระดาษ
      courseC_collector_prog4:
        courseC_collector_prog4_a: หากคุณเกิดติดขัดขึ้นมา ลองเขียนขั้นตอนลงบนกระดาษ
        courseC_collector_prog4_b: อย่ากลัวที่จะทำผิดพลาด! ลองเพิ่มบล็อกดู และเรียกใช้งานโค้ดเพื่อดูว่าจะเกิดอะไรขึ้น
          แม้ว่าคุณจะไม่คิดว่าคุณแก้ปริศนาได้แล้วก็ตาม
        courseC_collector_prog4_c: Try this option for a path.
      courseC_collector_prog4_2018:
        courseC_collector_prog4_a: หากคุณเกิดติดขัดขึ้นมา ลองเขียนขั้นตอนลงบนกระดาษ
        courseC_collector_prog4_b: อย่ากลัวที่จะทำผิดพลาด! ลองเพิ่มบล็อกดู และเรียกใช้งานโค้ดเพื่อดูว่าจะเกิดอะไรขึ้น
          แม้ว่าคุณจะไม่คิดว่าคุณแก้ปริศนาได้แล้วก็ตาม
        courseC_collector_prog4_c: Try this option for a path.
      courseC_collector_prog4_2019:
        courseC_collector_prog4_a: หากคุณเกิดติดขัดขึ้นมา ลองเขียนขั้นตอนลงบนกระดาษ
        courseC_collector_prog4_b: อย่ากลัวที่จะทำผิดพลาด! ลองเพิ่มบล็อกดู และเรียกใช้งานโค้ดเพื่อดูว่าจะเกิดอะไรขึ้น
          แม้ว่าคุณจะไม่คิดว่าคุณแก้ปริศนาได้แล้วก็ตาม
        courseC_collector_prog4_c: Try this option for a path.
      courseC_collector_prog5:
        courseC_collector_prog5_a: "\"Does it work at the first step?\nDoes it work
          at the second step? \nWhere do things go wrong?\""
        courseC_collector_prog5_b: ถ้าคุณแก้ไขข้อผิดพลาดหนึ่งและโปรแกรมยังคงไม่ทำงาน
          ให้ใช้ขั้นตอนข้างต้นเพื่อค้นหาบั๊กเพิ่มเติม
        courseC_collector_prog5_c: หากคุณเกิดติดขัดขึ้นมา ลองเขียนขั้นตอนลงบนกระดาษ
        courseC_collector_prog5_d: เดินตามเส้นทางไปเพื่อเก็บรวบรวมสมบัติ
      courseC_collector_prog5_2018:
        courseC_collector_prog5_a: "\"Does it work at the first step?\nDoes it work
          at the second step? \nWhere do things go wrong?\""
        courseC_collector_prog5_b: ถ้าคุณแก้ไขข้อผิดพลาดหนึ่งและโปรแกรมยังคงไม่ทำงาน
          ให้ใช้ขั้นตอนข้างต้นเพื่อค้นหาบั๊กเพิ่มเติม
        courseC_collector_prog5_c: หากคุณเกิดติดขัดขึ้นมา ลองเขียนขั้นตอนลงบนกระดาษ
        courseC_collector_prog5_d: เดินตามเส้นทางไปเพื่อเก็บรวบรวมสมบัติ
      courseC_collector_prog5_2019:
        courseC_collector_prog5_a: "\"Does it work at the first step?\nDoes it work
          at the second step? \nWhere do things go wrong?\""
        courseC_collector_prog5_b: ถ้าคุณแก้ไขข้อผิดพลาดหนึ่งและโปรแกรมยังคงไม่ทำงาน
          ให้ใช้ขั้นตอนข้างต้นเพื่อค้นหาบั๊กเพิ่มเติม
        courseC_collector_prog5_c: หากคุณเกิดติดขัดขึ้นมา ลองเขียนขั้นตอนลงบนกระดาษ
        courseC_collector_prog5_d: เดินตามเส้นทางไปเพื่อเก็บรวบรวมสมบัติ
      courseC_collector_prog6:
        courseC_collector_prog6_a: |-
          เจอสิ่งที่ผิดไหม?

          ลองใช้ปุ่ม  "ขั้นตอน" เพื่อค้นหาข้อผิดพลาดโดยการเรียกใช้งานโค้ดของคุณทีละบรรทัด
        courseC_collector_prog6_b: Stuck?  Try this path to collect the treasure.
      courseC_collector_prog6_2018:
        courseC_collector_prog6_a: |-
          เจอสิ่งที่ผิดไหม?

          ลองใช้ปุ่ม  "ขั้นตอน" เพื่อค้นหาข้อผิดพลาดโดยการเรียกใช้งานโค้ดของคุณทีละบรรทัด
        courseC_collector_prog6_b: Stuck?  Try this path to collect the treasure.
      courseC_collector_prog6_2019:
        courseC_collector_prog6_a: |-
          เจอสิ่งที่ผิดไหม?

          ลองใช้ปุ่ม  "ขั้นตอน" เพื่อค้นหาข้อผิดพลาดโดยการเรียกใช้งานโค้ดของคุณทีละบรรทัด
        courseC_collector_prog6_b: Stuck?  Try this path to collect the treasure.
      courseC_collector_prog7:
        courseC_collector_prog7_a: 'มีโค้ดที่ดีอยู่แล้วจำนวนมากในพื้นที่ทำงาน คุณไม่จำเป็นต้องลบอันไหนออกไป
          เพื่อแก้ปริศนาด่านนี้  '
        courseC_collector_prog7_b: ไม่เห็นบล็อกที่คุณต้องการที่จะทำให้นักผจญภัยเคลื่อนที่ไปในทิศทางที่ถูกต้องหรือเปล่า
          ไปดึงเอามาจากกล่องเครื่องมือก็ได้
        courseC_collector_prog7_c: มีปัญหาในการวางเส้นทางการเก็บรวบรวมสมบัติทั้งหมดหรือไม่
          ลองเส้นทางนี้ดู!
      courseC_collector_prog7_2018:
        courseC_collector_prog7_a: 'มีโค้ดที่ดีอยู่แล้วจำนวนมากในพื้นที่ทำงาน คุณไม่จำเป็นต้องลบอันไหนออกไป
          เพื่อแก้ปริศนาด่านนี้  '
        courseC_collector_prog7_b: ไม่เห็นบล็อกที่คุณต้องการที่จะทำให้นักผจญภัยเคลื่อนที่ไปในทิศทางที่ถูกต้องหรือเปล่า
          ไปดึงเอามาจากกล่องเครื่องมือก็ได้
        courseC_collector_prog7_c: มีปัญหาในการวางเส้นทางการเก็บรวบรวมสมบัติทั้งหมดหรือไม่
          ลองเส้นทางนี้ดู!
      courseC_collector_prog7_2019:
        courseC_collector_prog7_a: 'มีโค้ดที่ดีอยู่แล้วจำนวนมากในพื้นที่ทำงาน คุณไม่จำเป็นต้องลบอันไหนออกไป
          เพื่อแก้ปริศนาด่านนี้  '
        courseC_collector_prog7_b: ไม่เห็นบล็อกที่คุณต้องการที่จะทำให้นักผจญภัยเคลื่อนที่ไปในทิศทางที่ถูกต้องหรือเปล่า
          ไปดึงเอามาจากกล่องเครื่องมือก็ได้
        courseC_collector_prog7_c: มีปัญหาในการวางเส้นทางการเก็บรวบรวมสมบัติทั้งหมดหรือไม่
          ลองเส้นทางนี้ดู!
      courseC_collector_prog_challenge1:
        courseC_collector_prog_challenge1_a: You can use the `collect` block many
          times to collect the extra treasure.
      courseC_collector_prog_challenge1_2018:
        courseC_collector_prog_challenge1_a: You can use the `collect` block many
          times to collect the extra treasure.
      courseC_collector_prog_challenge1_2019:
        courseC_collector_prog_challenge1_a: You can use the `collect` block many
          times to collect the extra treasure.
      courseC_collector_prog_challenge2:
        courseC_collector_prog_challenge1_a: You can use more than one `collect` block
          at each space.
        courseC_collector_prog_challenge1_b: Lost your way?  Try this path to solve
          the puzzle!
      courseC_collector_prog_challenge2_2018:
        courseC_collector_prog_challenge1_a: You can use more than one `collect` block
          at each space.
        courseC_collector_prog_challenge1_b: Lost your way?  Try this path to solve
          the puzzle!
      courseC_collector_prog_challenge2_2019:
        courseC_collector_prog_challenge1_a: You can use more than one `collect` block
          at each space.
        courseC_collector_prog_challenge1_b: Lost your way?  Try this path to solve
          the puzzle!
      courseC_flappy_events1:
        courseC_flappy_events1_a: "![](https://images.code.org/5f1d0edf6ebb44d98ffdce623cfe0ad4-image-1501192487040.gif)"
      courseC_flappy_events1_2018:
        courseC_flappy_events1_a: "![](https://images.code.org/5f1d0edf6ebb44d98ffdce623cfe0ad4-image-1501192487040.gif)"
      courseC_flappy_events1_2019:
        courseC_flappy_events1_a: "![](https://images.code.org/5f1d0edf6ebb44d98ffdce623cfe0ad4-image-1501192487040.gif)"
      courseC_flappy_events2:
        courseC_flappy_events2_a: 'บล็อกที่คุณต้องการเพิ่มเข้ามาเรียกว่า `กำหนดความเร็ว...`. '
        courseC_flappy_events2_b: Connect the `set speed` block to the `when run`
          block to solve this puzzle.
      courseC_flappy_events2_2018:
        courseC_flappy_events2_a: 'บล็อกที่คุณต้องการเพิ่มเข้ามาเรียกว่า `กำหนดความเร็ว...`. '
        courseC_flappy_events2_b: Connect the `set speed` block to the `when run`
          block to solve this puzzle.
      courseC_flappy_events2_2019:
        courseC_flappy_events2_a: 'บล็อกที่คุณต้องการเพิ่มเข้ามาเรียกว่า `กำหนดความเร็ว...`. '
        courseC_flappy_events2_b: Connect the `set speed` block to the `when run`
          block to solve this puzzle.
      courseC_flappy_events3:
        courseC_flappy_events3_a: ถ้ามีบางอย่างทำงานไม่ถูกต้องให้ตรวจสอบให้แน่ใจว่าบล็อกของคุณเชื่อมต่อกับอีเวนท์อย่างถูกต้องในพื้นที่ทำงาน
      courseC_flappy_events3_2018:
        courseC_flappy_events3_a: ถ้ามีบางอย่างทำงานไม่ถูกต้องให้ตรวจสอบให้แน่ใจว่าบล็อกของคุณเชื่อมต่อกับอีเวนท์อย่างถูกต้องในพื้นที่ทำงาน
      courseC_flappy_events3_2019:
        courseC_flappy_events3_a: ถ้ามีบางอย่างทำงานไม่ถูกต้องให้ตรวจสอบให้แน่ใจว่าบล็อกของคุณเชื่อมต่อกับอีเวนท์อย่างถูกต้องในพื้นที่ทำงาน
      courseC_flappy_events4:
        courseC_flappy_events4_a: เชื่อมต่อบล็อก `จบเกม` เข้ากับ `เมื่อชนสิ่งกีดขวาง`
          ในการแก้ปริศนานี้
      courseC_flappy_events4_2018:
        courseC_flappy_events4_a: เชื่อมต่อบล็อก `จบเกม` เข้ากับ `เมื่อชนสิ่งกีดขวาง`
          ในการแก้ปริศนานี้
      courseC_flappy_events4_2019:
        courseC_flappy_events4_a: เชื่อมต่อบล็อก `จบเกม` เข้ากับ `เมื่อชนสิ่งกีดขวาง`
          ในการแก้ปริศนานี้
      courseC_flappy_events5:
        courseC_flappy_events5_a: คุณจะต้องใช้บล็อก`ได้แต้ม`ก่อนที่จะสามารถผ่านด่านนี้ไปได้
      courseC_flappy_events5_2018:
        courseC_flappy_events5_a: คุณจะต้องใช้บล็อก`ได้แต้ม`ก่อนที่จะสามารถผ่านด่านนี้ไปได้
      courseC_flappy_events5_2019:
        courseC_flappy_events5_a: คุณจะต้องใช้บล็อก`ได้แต้ม`ก่อนที่จะสามารถผ่านด่านนี้ไปได้
      courseC_flappy_events6:
        courseC_flappy_events6_a: ลองเชื่อมต่อบล็อก `กระพือปีกถี่ ____` เข้ากับอีเวนท์
          `เมื่อคลิก`
      courseC_flappy_events6_2018:
        courseC_flappy_events6_a: ลองเชื่อมต่อบล็อก `กระพือปีกถี่ ____` เข้ากับอีเวนท์
          `เมื่อคลิก`
      courseC_flappy_events6_2019:
        courseC_flappy_events6_a: ลองเชื่อมต่อบล็อก `กระพือปีกถี่ ____` เข้ากับอีเวนท์
          `เมื่อคลิก`
      courseC_flappy_events7:
        courseC_flappy_events7_a: "คุณสามารถเปลี่ยนพื้นหลังโดยใช้บล็อก `กำหนดฉากเป็น__`\n "
      courseC_flappy_events7_2018:
        courseC_flappy_events7_a: "คุณสามารถเปลี่ยนพื้นหลังโดยใช้บล็อก `กำหนดฉากเป็น__`\n "
      courseC_flappy_events7_2019:
        courseC_flappy_events7_a: "คุณสามารถเปลี่ยนพื้นหลังโดยใช้บล็อก `กำหนดฉากเป็น__`\n "
      courseC_flappy_events8:
        courseC_flappy_events8_a: ลองต่อบล็อก `กำหนดฉาก__` อันที่สองกับอีเวนท์ `เมื่อผ่านสิ่งกีดขวาง`
          เพื่อที่จะผ่านด่านนี้ไป
      courseC_flappy_events8_2018:
        courseC_flappy_events8_a: ลองต่อบล็อก `กำหนดฉาก__` อันที่สองกับอีเวนท์ `เมื่อผ่านสิ่งกีดขวาง`
          เพื่อที่จะผ่านด่านนี้ไป
      courseC_flappy_events8_2019:
        courseC_flappy_events8_a: ลองต่อบล็อก `กำหนดฉาก__` อันที่สองกับอีเวนท์ `เมื่อผ่านสิ่งกีดขวาง`
          เพื่อที่จะผ่านด่านนี้ไป
      courseC_flappy_events9:
        courseC_flappy_events9_a: ต่อบล็อก `ตั้งค่า คะแนนเป็น 0` เข้ากับอีเวนท์ `เมื่อผ่านสิ่งกีดขวาง`
          เพื่อที่จะผ่านด่านนี้ไป
      courseC_flappy_events9_2018:
        courseC_flappy_events9_a: ต่อบล็อก `ตั้งค่า คะแนนเป็น 0` เข้ากับอีเวนท์ `เมื่อผ่านสิ่งกีดขวาง`
          เพื่อที่จะผ่านด่านนี้ไป
      courseC_flappy_events9_2019:
        courseC_flappy_events9_a: ต่อบล็อก `ตั้งค่า คะแนนเป็น 0` เข้ากับอีเวนท์ `เมื่อผ่านสิ่งกีดขวาง`
          เพื่อที่จะผ่านด่านนี้ไป
      courseC_harvester_loops1:
        courseC_harvester_loops1_a: เมื่อคุณได้มาถึงที่ปลูกฟักทองแล้ว ให้ใช้<xml><block
          type="harvester_pumpkin"/></xml>ในการเก็บรวบรวมฟักทอง
        courseC_harvester_loops1_b: คุณสามารถใช้ลูปกับบล็อก <xml><block type="harvester_pumpkin"/></xml>
          เพื่อเก็บฟักทองมากกว่าหนึ่งผลจากจตุรัส
      courseC_harvester_loops1_2018:
        courseC_harvester_loops1_a: เมื่อคุณได้มาถึงที่ปลูกฟักทองแล้ว ให้ใช้<xml><block
          type="harvester_pumpkin"/></xml>ในการเก็บรวบรวมฟักทอง
        courseC_harvester_loops1_b: คุณสามารถใช้ลูปกับบล็อก <xml><block type="harvester_pumpkin"/></xml>
          เพื่อเก็บฟักทองมากกว่าหนึ่งผลจากจตุรัส
      courseC_harvester_loops1_2019:
        courseC_harvester_loops1_a: เมื่อคุณได้มาถึงที่ปลูกฟักทองแล้ว ให้ใช้<xml><block
          type="harvester_pumpkin"/></xml>ในการเก็บรวบรวมฟักทอง
        courseC_harvester_loops1_b: คุณสามารถใช้ลูปกับบล็อก <xml><block type="harvester_pumpkin"/></xml>
          เพื่อเก็บฟักทองมากกว่าหนึ่งผลจากจตุรัส
      courseC_harvester_loops2:
        courseC_harvester_loops2_a: หากคุณคิดไม่ออก ให้ลองเขียนขั้นตอนลงบนกระดาษและมองหารูปแบบที่ซ้ำๆ
          กัน
        courseC_harvester_loops2_b: คุณต้องการใช้ลูป`ทำซ้ำ` อีกอันหนึ่งหลังจากใช้ไปอันหนึ่งแล้ว
        courseC_harvester_loops2_c: ลูปหนึ่งจะทำซ้ำคำสั่ง `ย้ายไปข้างหน้า` และอีกลูปหนึ่งจะทำซ้ำคำสั่ง
          `เก็บฟักทอง`
      courseC_harvester_loops2_2018:
        courseC_harvester_loops2_a: หากคุณคิดไม่ออก ให้ลองเขียนขั้นตอนลงบนกระดาษและมองหารูปแบบที่ซ้ำๆ
          กัน
        courseC_harvester_loops2_b: คุณต้องการใช้ลูป`ทำซ้ำ` อีกอันหนึ่งหลังจากใช้ไปอันหนึ่งแล้ว
        courseC_harvester_loops2_c: ลูปหนึ่งจะทำซ้ำคำสั่ง `ย้ายไปข้างหน้า` และอีกลูปหนึ่งจะทำซ้ำคำสั่ง
          `เก็บฟักทอง`
      courseC_harvester_loops2_2019:
        courseC_harvester_loops2_a: หากคุณคิดไม่ออก ให้ลองเขียนขั้นตอนลงบนกระดาษและมองหารูปแบบที่ซ้ำๆ
          กัน
        courseC_harvester_loops2_b: คุณต้องการใช้ลูป`ทำซ้ำ` อีกอันหนึ่งหลังจากใช้ไปอันหนึ่งแล้ว
        courseC_harvester_loops2_c: ลูปหนึ่งจะทำซ้ำคำสั่ง `ย้ายไปข้างหน้า` และอีกลูปหนึ่งจะทำซ้ำคำสั่ง
          `เก็บฟักทอง`
      courseC_harvester_loops3:
        courseC_harvester_loops3_a: ไม่ต้องกลัวว่าคุณจะทำผิด! ลองเพิ่มบล็อกเข้าไปและเรียกโค้ดมาใช้งาน
          เพื่อดูว่าจะเกิดอะไรขึ้นถึงแม้ว่าคุณยังจะแก้ปริศนาไม่ออกก็ตาม
        courseC_harvester_loops3_b: สำหรับฟักทองลูกแรก คุณสามารถใช้โค้ดที่คล้ายกับของปริศนาสุดท้าย
          ซึ่งขึ้นอยู่กับว่าคุณต้องการที่จะหันไปทางไหนหลังจากนั้น
        courseC_harvester_loops3_c: ถ้าคุณต้องการที่จะทำให้รหัสของคุณง่ายขึ้น คุณสามารถใส่ลูปอันหนึ่ง
          ภายในลูปอีกอันหนึ่ง! ที่เราเรียกมันว่า \*\* ลูปซ้อนลูป \*\*
      courseC_harvester_loops3_2018:
        courseC_harvester_loops3_a: ไม่ต้องกลัวว่าคุณจะทำผิด! ลองเพิ่มบล็อกเข้าไปและเรียกโค้ดมาใช้งาน
          เพื่อดูว่าจะเกิดอะไรขึ้นถึงแม้ว่าคุณยังจะแก้ปริศนาไม่ออกก็ตาม
        courseC_harvester_loops3_b: สำหรับฟักทองลูกแรก คุณสามารถใช้โค้ดที่คล้ายกับของปริศนาสุดท้าย
          ซึ่งขึ้นอยู่กับว่าคุณต้องการที่จะหันไปทางไหนหลังจากนั้น
        courseC_harvester_loops3_c: ถ้าคุณต้องการที่จะทำให้รหัสของคุณง่ายขึ้น คุณสามารถใส่ลูปอันหนึ่ง
          ภายในลูปอีกอันหนึ่ง! ที่เราเรียกมันว่า \*\* ลูปซ้อนลูป \*\*
      courseC_harvester_loops3_2019:
        courseC_harvester_loops3_a: ไม่ต้องกลัวว่าคุณจะทำผิด! ลองเพิ่มบล็อกเข้าไปและเรียกโค้ดมาใช้งาน
          เพื่อดูว่าจะเกิดอะไรขึ้นถึงแม้ว่าคุณยังจะแก้ปริศนาไม่ออกก็ตาม
        courseC_harvester_loops3_b: สำหรับฟักทองลูกแรก คุณสามารถใช้โค้ดที่คล้ายกับของปริศนาสุดท้าย
          ซึ่งขึ้นอยู่กับว่าคุณต้องการที่จะหันไปทางไหนหลังจากนั้น
        courseC_harvester_loops3_c: ถ้าคุณต้องการที่จะทำให้รหัสของคุณง่ายขึ้น คุณสามารถใส่ลูปอันหนึ่ง
          ภายในลูปอีกอันหนึ่ง! ที่เราเรียกมันว่า \*\* ลูปซ้อนลูป \*\*
      courseC_harvester_loops4:
        courseC_harvester_loops4_a: ใช้บล็อกใหม่ `เก็บข้าวโพด` ในการเก็บรวบรวมข้าวโพด
        courseC_harvester_loops4_b: คุณสามารถใช้บล็อกลูปทำซ้ำหลายครั้งในโค้ดของคุณ
          บางอันใช้เก็บข้าวโพดและบางอันใช้เก็บฟักทอง
        courseC_harvester_loops4_c: ถ้าคุณต้องการที่จะทำให้รหัสของคุณง่ายขึ้น คุณสามารถใส่ลูปอันหนึ่ง
          ภายในลูปอีกอันหนึ่ง! ที่เราเรียกมันว่า \*\* ลูปซ้อนลูป \*\*
      courseC_harvester_loops4_2018:
        courseC_harvester_loops4_a: ใช้บล็อกใหม่ `เก็บข้าวโพด` ในการเก็บรวบรวมข้าวโพด
        courseC_harvester_loops4_b: คุณสามารถใช้บล็อกลูปทำซ้ำหลายครั้งในโค้ดของคุณ
          บางอันใช้เก็บข้าวโพดและบางอันใช้เก็บฟักทอง
        courseC_harvester_loops4_c: ถ้าคุณต้องการที่จะทำให้รหัสของคุณง่ายขึ้น คุณสามารถใส่ลูปอันหนึ่ง
          ภายในลูปอีกอันหนึ่ง! ที่เราเรียกมันว่า \*\* ลูปซ้อนลูป \*\*
      courseC_harvester_loops4_2019:
        courseC_harvester_loops4_a: ใช้บล็อกใหม่ `เก็บข้าวโพด` ในการเก็บรวบรวมข้าวโพด
        courseC_harvester_loops4_b: คุณสามารถใช้บล็อกลูปทำซ้ำหลายครั้งในโค้ดของคุณ
          บางอันใช้เก็บข้าวโพดและบางอันใช้เก็บฟักทอง
        courseC_harvester_loops4_c: ถ้าคุณต้องการที่จะทำให้รหัสของคุณง่ายขึ้น คุณสามารถใส่ลูปอันหนึ่ง
          ภายในลูปอีกอันหนึ่ง! ที่เราเรียกมันว่า \*\* ลูปซ้อนลูป \*\*
      courseC_harvester_loops5:
        courseC_harvester_loops5_a: ถ้าคุณเกิดติดขัดขึ้นมา ให้ลองวาดโปรแกรมทั้งหมด
          แล้วมองหารูปแบบการทำซ้ำ
        courseC_harvester_loops5_b: ขั้นบันไดนี้ดูคุ้นๆ จากปริศนาอื่นๆหรือไม่ การเคลื่อนไหวควรจะคล้ายกัน
          ขอให้จำไว้ว่าให้เก็บรวบรวมพืชผลไปตลอดเส้นทาง
      courseC_harvester_loops5_2018:
        courseC_harvester_loops5_a: ถ้าคุณเกิดติดขัดขึ้นมา ให้ลองวาดโปรแกรมทั้งหมด
          แล้วมองหารูปแบบการทำซ้ำ
        courseC_harvester_loops5_b: ขั้นบันไดนี้ดูคุ้นๆ จากปริศนาอื่นๆหรือไม่ การเคลื่อนไหวควรจะคล้ายกัน
          ขอให้จำไว้ว่าให้เก็บรวบรวมพืชผลไปตลอดเส้นทาง
      courseC_harvester_loops5_2019:
        courseC_harvester_loops5_a: ถ้าคุณเกิดติดขัดขึ้นมา ให้ลองวาดโปรแกรมทั้งหมด
          แล้วมองหารูปแบบการทำซ้ำ
        courseC_harvester_loops5_b: ขั้นบันไดนี้ดูคุ้นๆ จากปริศนาอื่นๆหรือไม่ การเคลื่อนไหวควรจะคล้ายกัน
          ขอให้จำไว้ว่าให้เก็บรวบรวมพืชผลไปตลอดเส้นทาง
      courseC_harvester_loops6:
        courseC_harvester_loops6_a: โปรดจำไว้ว่าคุณสามารถใส่บล็อกหลายๆ บล็อกไว้ในลูปทำซ้ำลูปเดียวได้
        courseC_harvester_loops6_b: อย่าลืมเลี้ยวเมื่อคุณเดินไปจนสุดแถวของข้าวโพดแล้ว
      courseC_harvester_loops6_2018:
        courseC_harvester_loops6_a: โปรดจำไว้ว่าคุณสามารถใส่บล็อกหลายๆ บล็อกไว้ในลูปทำซ้ำลูปเดียวได้
        courseC_harvester_loops6_b: อย่าลืมเลี้ยวเมื่อคุณเดินไปจนสุดแถวของข้าวโพดแล้ว
      courseC_harvester_loops6_2019:
        courseC_harvester_loops6_a: โปรดจำไว้ว่าคุณสามารถใส่บล็อกหลายๆ บล็อกไว้ในลูปทำซ้ำลูปเดียวได้
        courseC_harvester_loops6_b: อย่าลืมเลี้ยวเมื่อคุณเดินไปจนสุดแถวของข้าวโพดแล้ว
      courseC_harvester_loops7:
        courseC_harvester_loops7_a: คุณสามารถแก้ปริศนานี้ได้สองวิธี เก็บข้าวโพดหรือไม่ก็เก็บฟักทองก่อน
        courseC_harvester_loops7_b: คุณจะต้องใช้ลูป `ทำซ้ำ`หลายๆ ลูป เพื่อแก้ปริศนานี้
      courseC_harvester_loops7_2018:
        courseC_harvester_loops7_a: คุณสามารถแก้ปริศนานี้ได้สองวิธี เก็บข้าวโพดหรือไม่ก็เก็บฟักทองก่อน
        courseC_harvester_loops7_b: คุณจะต้องใช้ลูป `ทำซ้ำ`หลายๆ ลูป เพื่อแก้ปริศนานี้
      courseC_harvester_loops7_2019:
        courseC_harvester_loops7_a: คุณสามารถแก้ปริศนานี้ได้สองวิธี เก็บข้าวโพดหรือไม่ก็เก็บฟักทองก่อน
        courseC_harvester_loops7_b: คุณจะต้องใช้ลูป `ทำซ้ำ`หลายๆ ลูป เพื่อแก้ปริศนานี้
      courseC_harvester_loops8:
        courseC_harvester_loops8_a: รูปร่างของขั้นบันไดนี่ดูค้นตาจังจากปริศนาอันก่อน?
          ขั้นตอนของการเคลื่อนไหวน่าจะคล้ายคลึงกัน เพียงให้จำไว้ว่าคุณต้องเก็บพืชผลตามเส้นทางไปด้วย
        courseC_harvester_loops8_b: ถ้าคุณต้องการที่จะทำให้รหัสของคุณง่ายขึ้นไปอีก
          คุณสามารถใส่ลูป`ทำซ้ำ` ภายในลูป`ทำซ้ำ` อีกอันหนึ่ง! ที่เราเรียกมันว่า \*\*
          ลูปซ้อนลูป \*\*
      courseC_harvester_loops8_2018:
        courseC_harvester_loops8_a: รูปร่างของขั้นบันไดนี่ดูค้นตาจังจากปริศนาอันก่อน?
          ขั้นตอนของการเคลื่อนไหวน่าจะคล้ายคลึงกัน เพียงให้จำไว้ว่าคุณต้องเก็บพืชผลตามเส้นทางไปด้วย
        courseC_harvester_loops8_b: ถ้าคุณต้องการที่จะทำให้รหัสของคุณง่ายขึ้นไปอีก
          คุณสามารถใส่ลูป`ทำซ้ำ` ภายในลูป`ทำซ้ำ` อีกอันหนึ่ง! ที่เราเรียกมันว่า \*\*
          ลูปซ้อนลูป \*\*
      courseC_harvester_loops8_2019:
        courseC_harvester_loops8_a: รูปร่างของขั้นบันไดนี่ดูค้นตาจังจากปริศนาอันก่อน?
          ขั้นตอนของการเคลื่อนไหวน่าจะคล้ายคลึงกัน เพียงให้จำไว้ว่าคุณต้องเก็บพืชผลตามเส้นทางไปด้วย
        courseC_harvester_loops8_b: ถ้าคุณต้องการที่จะทำให้รหัสของคุณง่ายขึ้นไปอีก
          คุณสามารถใส่ลูป`ทำซ้ำ` ภายในลูป`ทำซ้ำ` อีกอันหนึ่ง! ที่เราเรียกมันว่า \*\*
          ลูปซ้อนลูป \*\*
      courseC_harvester_loops_challenge1a:
        courseC_harvester_loops_challenge1_a: This is too hard without loops!
        courseC_harvester_loops_challenge1_b: You can repeat `move forward` and `pick
          corn` as many times as you need, then `turn right` at each corner.
        courseC_harvester_loops_challenge1_c: |-
          The best way to collect the corn in the middle uses a `repeat` block inside of another `repeat` block.

          <xml><block type="controls_repeat">
                  <title name="TIMES">2</title>
                  <statement name="DO">
                    <block type="controls_repeat">
                      <title name="TIMES">4</title>
                      <statement name="DO">
                        <block type="maze_move">
                          <title name="DIR">moveForward</title>
                          <next>
                            <block type="harvester_corn"/>
                          </next>
                        </block>
                      </statement>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                        </block>
                      </next>
                    </block>
                  </statement>
                  </block></xml>
      courseC_harvester_loops_challenge1a_2018:
        courseC_harvester_loops_challenge1_a: This is too hard without loops!
        courseC_harvester_loops_challenge1_b: You can repeat `move forward` and `pick
          corn` as many times as you need, then `turn right` at each corner.
        courseC_harvester_loops_challenge1_c: |-
          After picking corn the first two times, you can use a nested loop to pick the next eight pieces.

          <xml><block type="controls_repeat">
                  <title name="TIMES">2</title>
                  <statement name="DO">
                    <block type="controls_repeat">
                      <title name="TIMES">4</title>
                      <statement name="DO">
                        <block type="maze_move">
                          <title name="DIR">moveForward</title>
                          <next>
                            <block type="harvester_corn"/>
                          </next>
                        </block>
                      </statement>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                        </block>
                      </next>
                    </block>
                  </statement>
                  </block></xml>
      courseC_harvester_loops_challenge1a_2019:
        courseC_harvester_loops_challenge1_a: This is too hard without loops!
        courseC_harvester_loops_challenge1_b: You can repeat `move forward` and `pick
          corn` as many times as you need, then `turn right` at each corner.
        courseC_harvester_loops_challenge1_c: |-
          The best way to collect the corn in the middle uses a `repeat` block inside of another `repeat` block.

          <xml><block type="controls_repeat">
                  <title name="TIMES">2</title>
                  <statement name="DO">
                    <block type="controls_repeat">
                      <title name="TIMES">4</title>
                      <statement name="DO">
                        <block type="maze_move">
                          <title name="DIR">moveForward</title>
                          <next>
                            <block type="harvester_corn"/>
                          </next>
                        </block>
                      </statement>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                        </block>
                      </next>
                    </block>
                  </statement>
                  </block></xml>
      courseC_harvester_loops_challenge2:
        courseC_harvester_loops_challenge2_a: One way to solve this looks like a zig-zag.
          Another way looks like a spiral! There are lots of different solutions to
          a puzzle like this. Be persistent!
        courseC_harvester_loops_challenge2_b: You can repeat `move forward` and `pick
          lettuce` as many times as you need to, then turn at each corner.
        courseC_harvester_loops_challenge2_c: |-
          This zig-zag pattern can be repeated twice to finish the puzzle with just 20 blocks!

          ![](<https://images.code.org/26cfaf6fe4a275e266b51e9ef3711171-image-1493502306380.18.52 PM copy.png>)
        courseC_harvester_loops_challenge2_d: |-
          This spiral pattern can be coded with just 18 blocks!

          ![](<https://images.code.org/0bfc0a0ed6783fae908368a6e6d12c02-image-1493501358990.18.52 PM.png>)
      courseC_harvester_loops_challenge2_2018:
        courseC_harvester_loops_challenge2_a: One way to solve this looks like a zig-zag.
          Another way looks like a spiral! There are lots of different solutions to
          a puzzle like this. Be persistent!
        courseC_harvester_loops_challenge2_b: You can repeat `move forward` and `pick
          lettuce` as many times as you need to, then turn at each corner.
        courseC_harvester_loops_challenge2_c: |-
          This zig-zag pattern can be repeated twice to finish the puzzle with just 20 blocks!

          ![](<https://images.code.org/26cfaf6fe4a275e266b51e9ef3711171-image-1493502306380.18.52 PM copy.png>)
        courseC_harvester_loops_challenge2_d: |-
          This spiral pattern can be coded with just 18 blocks!

          ![](<https://images.code.org/0bfc0a0ed6783fae908368a6e6d12c02-image-1493501358990.18.52 PM.png>)
      courseC_harvester_loops_challenge2_2019:
        courseC_harvester_loops_challenge2_a: One way to solve this looks like a zig-zag.
          Another way looks like a spiral! There are lots of different solutions to
          a puzzle like this. Be persistent!
        courseC_harvester_loops_challenge2_b: You can repeat `move forward` and `pick
          lettuce` as many times as you need to, then turn at each corner.
        courseC_harvester_loops_challenge2_c: |-
          This zig-zag pattern can be repeated twice to finish the puzzle with just 20 blocks!

          ![](<https://images.code.org/26cfaf6fe4a275e266b51e9ef3711171-image-1493502306380.18.52 PM copy.png>)
        courseC_harvester_loops_challenge2_d: |-
          This spiral pattern can be coded with just 18 blocks!

          ![](<https://images.code.org/0bfc0a0ed6783fae908368a6e6d12c02-image-1493501358990.18.52 PM.png>)
      courseC_maze_debugging1:
        courseC_maze_debugging1_a: |-
          ทุกอย่างทำงานด้วยดีหลังจากขั้นตอนแรกหรือไม่?
          มันยังคงทำงานอยู่หลังจากขั้นตอนที่สองหรือไม่?
          ตรงไหนที่ผิด?
        courseC_maze_debugging1_b: มีบล็อก 1 บล็อกที่คุณต้องเพิ่มเพื่อให้ปริศนานี้เสร็จสมบูรณ์
      courseC_maze_debugging1_2018:
        courseC_maze_debugging1_a: |-
          ทุกอย่างทำงานด้วยดีหลังจากขั้นตอนแรกหรือไม่?
          มันยังคงทำงานอยู่หลังจากขั้นตอนที่สองหรือไม่?
          ตรงไหนที่ผิด?
        courseC_maze_debugging1_b: มีบล็อก 1 บล็อกที่คุณต้องเพิ่มเพื่อให้ปริศนานี้เสร็จสมบูรณ์
      courseC_maze_debugging1_2019:
        courseC_maze_debugging1_a: |-
          ทุกอย่างทำงานด้วยดีหลังจากขั้นตอนแรกหรือไม่?
          มันยังคงทำงานอยู่หลังจากขั้นตอนที่สองหรือไม่?
          ตรงไหนที่ผิด?
        courseC_maze_debugging1_b: มีบล็อก 1 บล็อกที่คุณต้องเพิ่มเพื่อให้ปริศนานี้เสร็จสมบูรณ์
      courseC_maze_debugging2:
        courseC_maze_debugging2_a: มีโค้ดที่มีคุณค่าในพื้นที่ทำงานเป็นจำนวนมาก อย่าเพียงแค่ลบออกทั้งหมดแล้วเริ่มต้นใหม่!
        courseC_maze_debugging2_b: |-
          ทุกอย่างทำงานด้วยดีหลังจากขั้นตอนแรกหรือไม่?
          มันยังคงทำงานอยู่หลังจากขั้นตอนที่สองหรือไม่?
          ตรงไหนที่ผิด?
        courseC_maze_debugging2_c: ไม่สามารถหาได้ว่ามีอะไรผิดปกติ ลองเรียกใช้งานโค้ดครั้งหนึ่งหรือสองครั้งเพื่อดูว่าเกิดอะไรขึ้น
      courseC_maze_debugging2_2018:
        courseC_maze_debugging2_a: มีโค้ดที่มีคุณค่าในพื้นที่ทำงานเป็นจำนวนมาก อย่าเพียงแค่ลบออกทั้งหมดแล้วเริ่มต้นใหม่!
        courseC_maze_debugging2_b: |-
          ทุกอย่างทำงานด้วยดีหลังจากขั้นตอนแรกหรือไม่?
          มันยังคงทำงานอยู่หลังจากขั้นตอนที่สองหรือไม่?
          ตรงไหนที่ผิด?
        courseC_maze_debugging2_c: ไม่สามารถหาได้ว่ามีอะไรผิดปกติ ลองเรียกใช้งานโค้ดครั้งหนึ่งหรือสองครั้งเพื่อดูว่าเกิดอะไรขึ้น
      courseC_maze_debugging2_2019:
        courseC_maze_debugging2_a: มีโค้ดที่มีคุณค่าในพื้นที่ทำงานเป็นจำนวนมาก อย่าเพียงแค่ลบออกทั้งหมดแล้วเริ่มต้นใหม่!
        courseC_maze_debugging2_b: |-
          ทุกอย่างทำงานด้วยดีหลังจากขั้นตอนแรกหรือไม่?
          มันยังคงทำงานอยู่หลังจากขั้นตอนที่สองหรือไม่?
          ตรงไหนที่ผิด?
        courseC_maze_debugging2_c: ไม่สามารถหาได้ว่ามีอะไรผิดปกติ ลองเรียกใช้งานโค้ดครั้งหนึ่งหรือสองครั้งเพื่อดูว่าเกิดอะไรขึ้น
      courseC_maze_debugging3:
        courseC_maze_debugging3_a: |-
          เมื่อต้องการลบบล็อกใดบล็อคหนึ่งออกจากตรงกลางของโค้ด ให้ลากบล็อกทั้งหมดไปยังส่วนอื่นของพื้นที่ทำงาน

          แล้วลากบล็อกที่คุณต้องการลบกลับไปยังกล่องเครื่องมือ

          สุดท้าย ให้ใส่บล็อกอื่นๆของคุณกลับเข้าที่

          ![](https://images.code.org/bbafa5a100505b2b99a3f43ad3195471-image-1479933232821.gif)
        courseC_maze_debugging3_b: ไม่สามารถหาได้ว่ามีอะไรผิดปกติ ลองเรียกใช้งานโค้ดครั้งหนึ่งหรือสองครั้งเพื่อดูว่าเกิดอะไรขึ้น
      courseC_maze_debugging3_2018:
        courseC_maze_debugging3_a: |-
          เมื่อต้องการลบบล็อกใดบล็อคหนึ่งออกจากตรงกลางของโค้ด ให้ลากบล็อกทั้งหมดไปยังส่วนอื่นของพื้นที่ทำงาน

          แล้วลากบล็อกที่คุณต้องการลบกลับไปยังกล่องเครื่องมือ

          สุดท้าย ให้ใส่บล็อกอื่นๆของคุณกลับเข้าที่

          ![](https://images.code.org/bbafa5a100505b2b99a3f43ad3195471-image-1479933232821.gif)
        courseC_maze_debugging3_b: ไม่สามารถหาได้ว่ามีอะไรผิดปกติ ลองเรียกใช้งานโค้ดครั้งหนึ่งหรือสองครั้งเพื่อดูว่าเกิดอะไรขึ้น
      courseC_maze_debugging3_2019:
        courseC_maze_debugging3_a: |-
          เมื่อต้องการลบบล็อกใดบล็อคหนึ่งออกจากตรงกลางของโค้ด ให้ลากบล็อกทั้งหมดไปยังส่วนอื่นของพื้นที่ทำงาน

          แล้วลากบล็อกที่คุณต้องการลบกลับไปยังกล่องเครื่องมือ

          สุดท้าย ให้ใส่บล็อกอื่นๆของคุณกลับเข้าที่

          ![](https://images.code.org/bbafa5a100505b2b99a3f43ad3195471-image-1479933232821.gif)
        courseC_maze_debugging3_b: ไม่สามารถหาได้ว่ามีอะไรผิดปกติ ลองเรียกใช้งานโค้ดครั้งหนึ่งหรือสองครั้งเพื่อดูว่าเกิดอะไรขึ้น
      courseC_maze_debugging4:
        courseC_maze_debugging4_a: ใช้ปุ่ม  "ขั้นตอน " เพื่อเรียกใช้งานผ่านคำสั่งทีละครั้ง
          คุณคิดว่าจะช่วยให้คุณค้นหาบรรทัดที่ผิดได้หรือไม่
        courseC_maze_debugging4_b: One of the turns is making Scrat go in the wrong
          direction. Can you figure out which one?
      courseC_maze_debugging4_2018:
        courseC_maze_debugging4_a: ใช้ปุ่ม  "ขั้นตอน " เพื่อเรียกใช้งานผ่านคำสั่งทีละครั้ง
          คุณคิดว่าจะช่วยให้คุณค้นหาบรรทัดที่ผิดได้หรือไม่
        courseC_maze_debugging4_b: One of the turns is making Scrat go in the wrong
          direction. Can you figure out which one?
      courseC_maze_debugging4_2019:
        courseC_maze_debugging4_a: ใช้ปุ่ม  "ขั้นตอน " เพื่อเรียกใช้งานผ่านคำสั่งทีละครั้ง
          คุณคิดว่าจะช่วยให้คุณค้นหาบรรทัดที่ผิดได้หรือไม่
        courseC_maze_debugging4_b: One of the turns is making Scrat go in the wrong
          direction. Can you figure out which one?
      courseC_maze_debugging5:
        courseC_maze_debugging5_a: "There are lots of helpful blocks in the workspace
          already.  Don't delete them all! \n\nUse the \"Step\" button to go through
          and figure out where the code goes wrong."
        courseC_maze_debugging5_b: Try saying what Scrat should do out loud.  Is it
          the same as the code in the workspace?  What goes wrong?
      courseC_maze_debugging5_2018:
        courseC_maze_debugging5_a: "There are lots of helpful blocks in the workspace
          already.  Don't delete them all! \n\nUse the \"Step\" button to go through
          and figure out where the code goes wrong."
        courseC_maze_debugging5_c: You can change the direction of the turn block
          by clicking on the dropdown.
        courseC_maze_debugging5_b: Try saying what Scrat should do out loud.  Is it
          the same as the code in the workspace?  What goes wrong?
      courseC_maze_debugging5_2019:
        courseC_maze_debugging5_a: "There are lots of helpful blocks in the workspace
          already.  Don't delete them all! \n\nUse the \"Step\" button to go through
          and figure out where the code goes wrong."
        courseC_maze_debugging5_c: You can change the direction of the turn block
          by clicking on the dropdown.
        courseC_maze_debugging5_b: Try saying what Scrat should do out loud.  Is it
          the same as the code in the workspace?  What goes wrong?
      courseC_maze_debugging6:
        courseC_maze_debugging6_a: |-
          -   What is Scrat supposed to do?
          -   What does Scrat do?
          -   What does that tell you?
        courseC_maze_debugging6_b: |-
          Once you've found and fixed the first bug, go through the debugging process again to find the second one.

          Repeat the process until the program works!
      courseC_maze_debugging6_2018:
        courseC_maze_debugging6_a: |-
          -   What is Scrat supposed to do?
          -   What does Scrat do?
          -   What does that tell you?
        courseC_maze_debugging6_b: |-
          Once you've found and fixed the first bug, go through the debugging process again to find the second one.

          Repeat the process until the program works!
      courseC_maze_debugging6_2019:
        courseC_maze_debugging6_a: |-
          -   What is Scrat supposed to do?
          -   What does Scrat do?
          -   What does that tell you?
        courseC_maze_debugging6_b: |-
          Once you've found and fixed the first bug, go through the debugging process again to find the second one.

          Repeat the process until the program works!
      courseC_maze_debugging7:
        courseC_maze_debugging7_a: |-
          -   Does everything work at the first step?
          -   How about the second step?
          -   Where does it go wrong?
        courseC_maze_debugging7_b: อย่าลืมที่จะใช้ปุ่ม "ขั้นตอน " เพื่อเรียกใช้งานโปรแกรมทีละบรรทัด!
        courseC_maze_debugging7_c: |-
          หลังจากที่คุณค้นหาและแก้ไขข้อผิดพลาดแรกแล้วให้ตรวจสอบให้แน่ใจว่าได้ใช้กระบวนการตรวจแก้จุดบกพร่องหรือดีบั๊กอีกครั้งเพื่อค้นหาข้อผิดพลาดรายการถัดไป

          ทำซ้ำกระบวนการดีบั๊กจนกว่าโปรแกรมจะทำงาน!
      courseC_maze_debugging7_2018:
        courseC_maze_debugging7_a: |-
          -   Does everything work at the first step?
          -   How about the second step?
          -   Where does it go wrong?
        courseC_maze_debugging7_b: อย่าลืมที่จะใช้ปุ่ม "ขั้นตอน " เพื่อเรียกใช้งานโปรแกรมทีละบรรทัด!
        courseC_maze_debugging7_c: |-
          หลังจากที่คุณค้นหาและแก้ไขข้อผิดพลาดแรกแล้วให้ตรวจสอบให้แน่ใจว่าได้ใช้กระบวนการตรวจแก้จุดบกพร่องหรือดีบั๊กอีกครั้งเพื่อค้นหาข้อผิดพลาดรายการถัดไป

          ทำซ้ำกระบวนการดีบั๊กจนกว่าโปรแกรมจะทำงาน!
      courseC_maze_debugging7_2019:
        courseC_maze_debugging7_a: |-
          -   Does everything work at the first step?
          -   How about the second step?
          -   Where does it go wrong?
        courseC_maze_debugging7_b: อย่าลืมที่จะใช้ปุ่ม "ขั้นตอน " เพื่อเรียกใช้งานโปรแกรมทีละบรรทัด!
        courseC_maze_debugging7_c: |-
          หลังจากที่คุณค้นหาและแก้ไขข้อผิดพลาดแรกแล้วให้ตรวจสอบให้แน่ใจว่าได้ใช้กระบวนการตรวจแก้จุดบกพร่องหรือดีบั๊กอีกครั้งเพื่อค้นหาข้อผิดพลาดรายการถัดไป

          ทำซ้ำกระบวนการดีบั๊กจนกว่าโปรแกรมจะทำงาน!
      courseC_maze_debugging_challenge1:
        courseC_maze_debugging_challenge1_a: Left or right? It's up to you!
        courseC_maze_debugging_challenge1_b: Scrat's path is the shape of a rectangle!
          He needs to turn the same way each time.
        courseC_maze_debugging_challenge1_c: If you are getting stuck, you can always
          start over and find a new way!
      courseC_maze_debugging_challenge1_2018:
        courseC_maze_debugging_challenge1_a: Left or right? It's up to you!
        courseC_maze_debugging_challenge1_b: Scrat's path is the shape of a rectangle!
          He needs to turn the same way each time.
        courseC_maze_debugging_challenge1_c: If you are getting stuck, you can always
          start over and find a new way!
      courseC_maze_debugging_challenge1_2019:
        courseC_maze_debugging_challenge1_a: Left or right? It's up to you!
        courseC_maze_debugging_challenge1_b: Scrat's path is the shape of a rectangle!
          He needs to turn the same way each time.
        courseC_maze_debugging_challenge1_c: If you are getting stuck, you can always
          start over and find a new way!
      courseC_maze_debugging_challenge2:
        courseC_maze_debugging_challenge2_b: If you are getting stuck, try debugging
          the code.  Where does it go wrong?
        courseC_maze_debugging_challenge2_c: |-
          There are two different paths you can follow by just moving forward and turning four times. If you find one way to use a loop, there may be even more!

          ![](<https://images.code.org/8a4665671cda35fea1f629a5bcc39e26-image-1493502743154.48.05 PM.png>)
      courseC_maze_debugging_challenge2_2018:
        courseC_maze_debugging_challenge2_b: If you are getting stuck, try debugging
          the code.  Where does it go wrong?
        courseC_maze_debugging_challenge2_c: |-
          There are two different paths you can follow by just moving forward and turning four times. If you find one way to use a loop, there may be even more!

          ![](<https://images.code.org/8a4665671cda35fea1f629a5bcc39e26-image-1493502743154.48.05 PM.png>)
      courseC_maze_debugging_challenge2_2019:
        courseC_maze_debugging_challenge2_b: If you are getting stuck, try debugging
          the code.  Where does it go wrong?
        courseC_maze_debugging_challenge2_c: |-
          There are two different paths you can follow by just moving forward and turning four times. If you find one way to use a loop, there may be even more!

          ![](<https://images.code.org/8a4665671cda35fea1f629a5bcc39e26-image-1493502743154.48.05 PM.png>)
      courseC_maze_loops_challenge1a:
        courseC_maze_loops_challenge1_a: Think about this path as being two different
          pieces. Each one has a pattern you can repeat.
        courseC_maze_loops_challenge1_b: Can you remember how to use loops to repeat
          a staircase pattern?
      courseC_maze_loops_challenge1a_2018:
        courseC_maze_loops_challenge1_a: Think about this path as being two different
          pieces. Each one has a pattern you can repeat.
        courseC_maze_loops_challenge1_b: Can you remember how to use loops to repeat
          a staircase pattern?
      courseC_maze_loops_challenge1a_2019:
        courseC_maze_loops_challenge1_a: Think about this path as being two different
          pieces. Each one has a pattern you can repeat.
        courseC_maze_loops_challenge1_b: Can you remember how to use loops to repeat
          a staircase pattern?
      courseC_maze_programming1:
        courseC_maze_programming1_0: ให้แน่ใจว่าบล็อกทั้งหมดมีการต่อติดกันอย่างสมบูรณฺ์
          แล้วให้คลิก "เริ่ม" อีกครั้งหนึ่ง
      courseC_maze_programming1_2018:
        courseC_maze_programming1_0: ให้แน่ใจว่าบล็อกทั้งหมดมีการต่อติดกันอย่างสมบูรณฺ์
          แล้วให้คลิก "เริ่ม" อีกครั้งหนึ่ง
      courseC_maze_programming1_2019:
        courseC_maze_programming1_0: ให้แน่ใจว่าบล็อกทั้งหมดมีการต่อติดกันอย่างสมบูรณฺ์
          แล้วให้คลิก "เริ่ม" อีกครั้งหนึ่ง
      courseC_maze_programming2:
        courseC_maze_programming2_a: การใช้บล็อก <xml><block type="maze_moveForward"/></xml>
          นั้นให้ลากบล็อกจากกล่องเครื่องมือออกไปยังพื้นที่ทำงานและเชื่อมต่อเข้ากับบล็อก<xml><block
          type="when_run"/></xml>
        courseC_maze_programming2_b: ให้แน่ใจว่าบล็อกทั้งหมดมีการต่อติดกันอย่างสมบูรณฺ์
          แล้วให้คลิก "เริ่ม" อีกครั้งหนึ่ง
      courseC_maze_programming2_2018:
        courseC_maze_programming2_a: การใช้บล็อก <xml><block type="maze_moveForward"/></xml>
          นั้นให้ลากบล็อกจากกล่องเครื่องมือออกไปยังพื้นที่ทำงานและเชื่อมต่อเข้ากับบล็อก<xml><block
          type="when_run"/></xml>
        courseC_maze_programming2_b: ให้แน่ใจว่าบล็อกทั้งหมดมีการต่อติดกันอย่างสมบูรณฺ์
          แล้วให้คลิก "เริ่ม" อีกครั้งหนึ่ง
      courseC_maze_programming2_2019:
        courseC_maze_programming2_a: การใช้บล็อก <xml><block type="maze_moveForward"/></xml>
          นั้นให้ลากบล็อกจากกล่องเครื่องมือออกไปยังพื้นที่ทำงานและเชื่อมต่อเข้ากับบล็อก<xml><block
          type="when_run"/></xml>
        courseC_maze_programming2_b: ให้แน่ใจว่าบล็อกทั้งหมดมีการต่อติดกันอย่างสมบูรณฺ์
          แล้วให้คลิก "เริ่ม" อีกครั้งหนึ่ง
      courseC_maze_programming3:
        courseC_maze_programming3_a: Try running the code first to see where it goes
          wrong.
        courseC_maze_programming3_b: |-
          ![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)

          เมื่อต้องการลบบล็อกใดบล็อคหนึ่งออกจากตรงกลางของโค้ด ให้ลากบล็อกทั้งหมดไปยังส่วนอื่นของพื้นที่ทำงาน

          แล้วลากบล็อกที่คุณต้องการลบกลับไปยังกล่องเครื่องมือ

          สุดท้าย ให้ใส่บล็อกอื่นๆของคุณกลับเข้าที่
      courseC_maze_programming3_2018:
        courseC_maze_programming3_a: Try running the code first to see where it goes
          wrong.
        courseC_maze_programming3_b: |-
          ![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)

          เมื่อต้องการลบบล็อกใดบล็อคหนึ่งออกจากตรงกลางของโค้ด ให้ลากบล็อกทั้งหมดไปยังส่วนอื่นของพื้นที่ทำงาน

          แล้วลากบล็อกที่คุณต้องการลบกลับไปยังกล่องเครื่องมือ

          สุดท้าย ให้ใส่บล็อกอื่นๆของคุณกลับเข้าที่
      courseC_maze_programming3_2019:
        courseC_maze_programming3_a: Try running the code first to see where it goes
          wrong.
        courseC_maze_programming3_b: |-
          ![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)

          เมื่อต้องการลบบล็อกใดบล็อคหนึ่งออกจากตรงกลางของโค้ด ให้ลากบล็อกทั้งหมดไปยังส่วนอื่นของพื้นที่ทำงาน

          แล้วลากบล็อกที่คุณต้องการลบกลับไปยังกล่องเครื่องมือ

          สุดท้าย ให้ใส่บล็อกอื่นๆของคุณกลับเข้าที่
      courseC_maze_programming4:
        courseC_maze_programming4_a: Remember that when you turn, you are turning
          from the _bird's_ point of view.  If you turn right, the bird will point
          down.
        courseC_maze_programming4_b: |-
          To follow the path:

          -   move forward
          -   turn one way
          -   move forward
          -   turn back the other way
          -   move forward
      courseC_maze_programming4_2018:
        courseC_maze_programming4_a: Remember that when you turn, you are turning
          from the _bird's_ point of view.  If you turn right, the bird will point
          down.
        courseC_maze_programming4_b: |-
          To follow the path:

          -   move forward
          -   turn one way
          -   move forward
          -   turn back the other way
          -   move forward
      courseC_maze_programming4_2019:
        courseC_maze_programming4_a: Remember that when you turn, you are turning
          from the _bird's_ point of view.  If you turn right, the bird will point
          down.
        courseC_maze_programming4_b: |-
          To follow the path:

          -   move forward
          -   turn one way
          -   move forward
          -   turn back the other way
          -   move forward
      courseC_maze_programming5:
        courseC_maze_programming5_a: Try using the "Step" button to run your code
          line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: The bird will need to make one turn to complete
          this puzzle. Can you figure out which way?
        courseC_maze_programming5_c: The solution will have two `move forward` blocks,
          a turn, and two more `move forward` blocks.
      courseC_maze_programming5_2018:
        courseC_maze_programming5_a: Try using the "Step" button to run your code
          line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: The bird will need to make one turn to complete
          this puzzle. Can you figure out which way?
        courseC_maze_programming5_c: The solution will have two `move forward` blocks,
          a turn, and two more `move forward` blocks.
      courseC_maze_programming5_2019:
        courseC_maze_programming5_a: Try using the "Step" button to run your code
          line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: The bird will need to make one turn to complete
          this puzzle. Can you figure out which way?
        courseC_maze_programming5_c: The solution will have two `move forward` blocks,
          a turn, and two more `move forward` blocks.
      courseC_maze_programming6:
        courseC_maze_programming6_a: มีวิธีแก้ปริศนานี้สองวิธี
        courseC_maze_programming6_b: ตามนิ้วของคุณไป จากเจ้านกตัวนั้นไปยังเจ้าหมูนั่น
          ก้าวไหนบ้างที่คุณต้องใช้
        courseC_maze_programming6_c: จำไว้ว่า สิ่งที่คุณต้องทำคือการหันหน้าไปทางอื่นก่อน
          เพราะตอนนี้เจ้านกเริ่มต้นด้วยการหันหน้าชนกำแพง
        courseC_maze_programming6_d: รู้สีกว่าทางตันหรือเปล่า  ลองดูเส้นทางสีแดงทีให้ไว้สิ!
      courseC_maze_programming6_2018:
        courseC_maze_programming6_a: มีวิธีแก้ปริศนานี้สองวิธี
        courseC_maze_programming6_b: ตามนิ้วของคุณไป จากเจ้านกตัวนั้นไปยังเจ้าหมูนั่น
          ก้าวไหนบ้างที่คุณต้องใช้
        courseC_maze_programming6_c: จำไว้ว่า สิ่งที่คุณต้องทำคือการหันหน้าไปทางอื่นก่อน
          เพราะตอนนี้เจ้านกเริ่มต้นด้วยการหันหน้าชนกำแพง
        courseC_maze_programming6_d: รู้สีกว่าทางตันหรือเปล่า  ลองดูเส้นทางสีแดงทีให้ไว้สิ!
      courseC_maze_programming6_2019:
        courseC_maze_programming6_a: มีวิธีแก้ปริศนานี้สองวิธี
        courseC_maze_programming6_b: ตามนิ้วของคุณไป จากเจ้านกตัวนั้นไปยังเจ้าหมูนั่น
          ก้าวไหนบ้างที่คุณต้องใช้
        courseC_maze_programming6_c: จำไว้ว่า สิ่งที่คุณต้องทำคือการหันหน้าไปทางอื่นก่อน
          เพราะตอนนี้เจ้านกเริ่มต้นด้วยการหันหน้าชนกำแพง
        courseC_maze_programming6_d: รู้สีกว่าทางตันหรือเปล่า  ลองดูเส้นทางสีแดงทีให้ไว้สิ!
      courseC_maze_programming7:
        courseC_maze_programming7_a: Don't forget to use the "Step" button to go through
          block by block and look for errors.
        courseC_maze_programming7_b: หากคุณมีปัญหาในการแก้ปริศนานี้ ลองเขียนขั้นตอนต่างๆลงบนกระดาษ
      courseC_maze_programming7_2018:
        courseC_maze_programming7_a: Don't forget to use the "Step" button to go through
          block by block and look for errors.
        courseC_maze_programming7_b: หากคุณมีปัญหาในการแก้ปริศนานี้ ลองเขียนขั้นตอนต่างๆลงบนกระดาษ
      courseC_maze_programming7_2019:
        courseC_maze_programming7_a: Don't forget to use the "Step" button to go through
          block by block and look for errors.
        courseC_maze_programming7_b: หากคุณมีปัญหาในการแก้ปริศนานี้ ลองเขียนขั้นตอนต่างๆลงบนกระดาษ
      courseC_maze_programming8:
        courseC_maze_programming8_a: Remember you can use the "Step" button to look
          through your code line-by-line if you get stuck.
        courseC_maze_programming8_b: อย่ากลัวที่จะทำผิดพลาด! ลองเพิ่มบล็อกดู และเรียกใช้งานโค้ดเพื่อดูว่าจะเกิดอะไรขึ้น
          แม้ว่าคุณจะไม่คิดว่าคุณแก้ปริศนาได้แล้วก็ตาม
      courseC_maze_programming8_2018:
        courseC_maze_programming8_a: Remember you can use the "Step" button to look
          through your code line-by-line if you get stuck.
        courseC_maze_programming8_b: อย่ากลัวที่จะทำผิดพลาด! ลองเพิ่มบล็อกดู และเรียกใช้งานโค้ดเพื่อดูว่าจะเกิดอะไรขึ้น
          แม้ว่าคุณจะไม่คิดว่าคุณแก้ปริศนาได้แล้วก็ตาม
      courseC_maze_programming8_2019:
        courseC_maze_programming8_a: Remember you can use the "Step" button to look
          through your code line-by-line if you get stuck.
        courseC_maze_programming8_b: อย่ากลัวที่จะทำผิดพลาด! ลองเพิ่มบล็อกดู และเรียกใช้งานโค้ดเพื่อดูว่าจะเกิดอะไรขึ้น
          แม้ว่าคุณจะไม่คิดว่าคุณแก้ปริศนาได้แล้วก็ตาม
      courseC_maze_programming_challenge1:
        courseC_maze_programming_challenge1_a: There are many ways to get to the pig.
          Use your finger to find a path and then program it!
      courseC_maze_programming_challenge1_2018:
        courseC_maze_programming_challenge1_a: There are many ways to get to the pig.
          Use your finger to find a path and then program it!
      courseC_maze_programming_challenge1_2019:
        courseC_maze_programming_challenge1_a: There are many ways to get to the pig.
          Use your finger to find a path and then program it!
      courseC_maze_programming_challenge2:
        courseC_maze_programming_challenge2_a: _"If you send me backwards, be extra
          careful that I turn the correct way!"_
        courseC_maze_programming_challenge2_b: |-
          The shortest solution uses only 5 blocks, but it uses this block:

          <xml><block type="controls_repeat_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
      courseC_maze_programming_challenge2_2018:
        courseC_maze_programming_challenge2_a: _"If you send me backwards, be extra
          careful that I turn the correct way!"_
        courseC_maze_programming_challenge2_b: |-
          The shortest solution uses only 5 blocks, but it uses this block:

          <xml><block type="controls_repeat_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
      courseC_maze_programming_challenge2_2019:
        courseC_maze_programming_challenge2_a: _"If you send me backwards, be extra
          careful that I turn the correct way!"_
        courseC_maze_programming_challenge2_b: |-
          The shortest solution uses only 5 blocks, but it uses this block:

          <xml><block type="controls_repeat_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
      courseC_starWars_loops1:
        courseC_starWars_loops1_a: เมื่อ บีบี-8 กลิ้งทับเศษโลหะ มันจะเก็บเศษโลหะไปด้วยโดยอัตโนมัติ
        courseC_starWars_loops1_b: ไม่ต้องกลัวว่าคุณจะทำผิด! เรียกใช้งานโค้ดเพื่อดูว่าเกิดอะไรขึ้น
          แม่ว่าคุณจะยังไม่สามารถแก้ปริศนาได้ก็ตาม
        courseC_starWars_loops1_c: คุณต้องเคลื่อนไหวด้วยบล็อก `ไปข้างหน้า` ห้าครั้งเพื่อแก้ไขปริศนาด่านนี้
      courseC_starWars_loops10:
        courseC_starWars_loops10_a: รูปแบบนี้ดูเหมือนจะเป็นรูปแบบขั้นบันได-ขนาดยักษ์?
          มาดูซิว่าคุณสามารถใช้สิ่งที่คุณเรียนรู้จากปริศนาก่อนหน้านี้มาใช้ในการหันซ้ายหันขวาได้อย่างถูกต้องเพียงไร
        courseC_starWars_loops10_b: ถ้าคุณต้องการใช้โค้ดให้น้อยลง คุณสามารถวางบล็อกลูป
          `ทำซ้ำ` ไว้ภายในบล็อกลูป `ทำซ้ำ` อีกอันหนึ่ง โดยเราเรียกว่าเป็นการทำ**ลูปซ้อนลูป**
        courseC_starWars_loops10_c: ไม่ต้องกลัวว่าคุณจะทำผิด! เรียกใช้งานโค้ดเพื่อดูว่าเกิดอะไรขึ้น
          แม่ว่าคุณจะยังไม่สามารถแก้ปริศนาได้ก็ตาม
      courseC_starWars_loops10_2018:
        courseC_starWars_loops10_a: รูปแบบนี้ดูเหมือนจะเป็นรูปแบบขั้นบันได-ขนาดยักษ์?
          มาดูซิว่าคุณสามารถใช้สิ่งที่คุณเรียนรู้จากปริศนาก่อนหน้านี้มาใช้ในการหันซ้ายหันขวาได้อย่างถูกต้องเพียงไร
        courseC_starWars_loops10_b: ถ้าคุณต้องการใช้โค้ดให้น้อยลง คุณสามารถวางบล็อกลูป
          `ทำซ้ำ` ไว้ภายในบล็อกลูป `ทำซ้ำ` อีกอันหนึ่ง โดยเราเรียกว่าเป็นการทำ**ลูปซ้อนลูป**
        courseC_starWars_loops10_c: ไม่ต้องกลัวว่าคุณจะทำผิด! เรียกใช้งานโค้ดเพื่อดูว่าเกิดอะไรขึ้น
          แม่ว่าคุณจะยังไม่สามารถแก้ปริศนาได้ก็ตาม
      courseC_starWars_loops10_2019:
        courseC_starWars_loops10_a: รูปแบบนี้ดูเหมือนจะเป็นรูปแบบขั้นบันได-ขนาดยักษ์?
          มาดูซิว่าคุณสามารถใช้สิ่งที่คุณเรียนรู้จากปริศนาก่อนหน้านี้มาใช้ในการหันซ้ายหันขวาได้อย่างถูกต้องเพียงไร
        courseC_starWars_loops10_b: ถ้าคุณต้องการใช้โค้ดให้น้อยลง คุณสามารถวางบล็อกลูป
          `ทำซ้ำ` ไว้ภายในบล็อกลูป `ทำซ้ำ` อีกอันหนึ่ง โดยเราเรียกว่าเป็นการทำ**ลูปซ้อนลูป**
        courseC_starWars_loops10_c: ไม่ต้องกลัวว่าคุณจะทำผิด! เรียกใช้งานโค้ดเพื่อดูว่าเกิดอะไรขึ้น
          แม่ว่าคุณจะยังไม่สามารถแก้ปริศนาได้ก็ตาม
      courseC_starWars_loops1_2018:
        courseC_starWars_loops1_a: เมื่อ บีบี-8 กลิ้งทับเศษโลหะ มันจะเก็บเศษโลหะไปด้วยโดยอัตโนมัติ
        courseC_starWars_loops1_b: ไม่ต้องกลัวว่าคุณจะทำผิด! เรียกใช้งานโค้ดเพื่อดูว่าเกิดอะไรขึ้น
          แม่ว่าคุณจะยังไม่สามารถแก้ปริศนาได้ก็ตาม
        courseC_starWars_loops1_c: คุณต้องเคลื่อนไหวด้วยบล็อก `ไปข้างหน้า` ห้าครั้งเพื่อแก้ไขปริศนาด่านนี้
      courseC_starWars_loops1_2019:
        courseC_starWars_loops1_a: เมื่อ บีบี-8 กลิ้งทับเศษโลหะ มันจะเก็บเศษโลหะไปด้วยโดยอัตโนมัติ
        courseC_starWars_loops1_b: ไม่ต้องกลัวว่าคุณจะทำผิด! เรียกใช้งานโค้ดเพื่อดูว่าเกิดอะไรขึ้น
          แม่ว่าคุณจะยังไม่สามารถแก้ปริศนาได้ก็ตาม
        courseC_starWars_loops1_c: คุณต้องเคลื่อนไหวด้วยบล็อก `ไปข้างหน้า` ห้าครั้งเพื่อแก้ไขปริศนาด่านนี้
      courseC_starWars_loops2:
        courseC_starWars_loops2_a: การทำซ้ำโค้ดนั้น ให้ลากเอาบล็อกลูป `ทำซ้ำ` ออกมา
          แล้วใส่บล็อกที่คุณต้องการไว้ภายใน
      courseC_starWars_loops2_2018:
        courseC_starWars_loops2_a: การทำซ้ำโค้ดนั้น ให้ลากเอาบล็อกลูป `ทำซ้ำ` ออกมา
          แล้วใส่บล็อกที่คุณต้องการไว้ภายใน
      courseC_starWars_loops2_2019:
        courseC_starWars_loops2_a: การทำซ้ำโค้ดนั้น ให้ลากเอาบล็อกลูป `ทำซ้ำ` ออกมา
          แล้วใส่บล็อกที่คุณต้องการไว้ภายใน
      courseC_starWars_loops2_copy:
        courseC_starWars_loops2_a: การทำซ้ำโค้ดนั้น ให้ลากเอาบล็อกลูป `ทำซ้ำ` ออกมา
          แล้วใส่บล็อกที่คุณต้องการไว้ภายใน
      courseC_starWars_loops4:
        courseC_starWars_loops4_c: คลิกที่ลูกศรเล็กๆที่อยู่ติดกับคำว่า "ซ้าย" บนบล็อกหัน
          จะช่วยให้คุณสามารถเปลี่ยนเป็น "ขวา" ได้
        courseC_starWars_loops4_a: ให้ใช้บล็อก `ทำซ้ำ` สองบล็อก
        courseC_starWars_loops4_b: ลูป `ทำซ้ำ` แต่ละลูปจะมีเพียงคำสั่งหนึ่งเดียวอยู่ภายใน
          คือ `ไปข้างหน้า`
      courseC_starWars_loops4_2018:
        courseC_starWars_loops4_c: คลิกที่ลูกศรเล็กๆที่อยู่ติดกับคำว่า "ซ้าย" บนบล็อกหัน
          จะช่วยให้คุณสามารถเปลี่ยนเป็น "ขวา" ได้
        courseC_starWars_loops4_a: ให้ใช้บล็อก `ทำซ้ำ` สองบล็อก
        courseC_starWars_loops4_b: ลูป `ทำซ้ำ` แต่ละลูปจะมีเพียงคำสั่งหนึ่งเดียวอยู่ภายใน
          คือ `ไปข้างหน้า`
      courseC_starWars_loops4_2019:
        courseC_starWars_loops4_c: คลิกที่ลูกศรเล็กๆที่อยู่ติดกับคำว่า "ซ้าย" บนบล็อกหัน
          จะช่วยให้คุณสามารถเปลี่ยนเป็น "ขวา" ได้
        courseC_starWars_loops4_a: ให้ใช้บล็อก `ทำซ้ำ` สองบล็อก
        courseC_starWars_loops4_b: ลูป `ทำซ้ำ` แต่ละลูปจะมีเพียงคำสั่งหนึ่งเดียวอยู่ภายใน
          คือ `ไปข้างหน้า`
      courseC_starWars_loops4_copy:
        courseC_starWars_loops4_c: คลิกที่ลูกศรเล็กๆที่อยู่ติดกับคำว่า "ซ้าย" บนบล็อกหัน
          จะช่วยให้คุณสามารถเปลี่ยนเป็น "ขวา" ได้
        courseC_starWars_loops4_a: ให้ใช้บล็อก `ทำซ้ำ` สองบล็อก
        courseC_starWars_loops4_b: ลูป `ทำซ้ำ` แต่ละลูปจะมีเพียงคำสั่งหนึ่งเดียวอยู่ภายใน
          คือ `ไปข้างหน้า`
      courseC_starWars_loops5:
        courseC_starWars_loops5_b: การที่จะเคลื่อนที่ไปด้านล่างได้นั้น คุณต้องหันก่อนแล้วเคลื่อนที่ไปข้างหน้า
        courseC_starWars_loops5_a: โซลูชั่นที่ดีที่สุด คือดารใช้บล็อกหันหนึ่งครั้ง
          ตามด้วยบล็อก `ไปข้างหน้า` หนึ่งบล็อก แล้วตามด้วยบล็อกหันอีกหนึ่งครั้ง จบด้วยลูปหนึ่งลูป
      courseC_starWars_loops5_2018:
        courseC_starWars_loops5_a: The best solution uses a single `move forward`,
          then a turn, then a loop.
      courseC_starWars_loops5_2019:
        courseC_starWars_loops5_a: The best solution uses a single `move forward`,
          then a turn, then a loop.
      courseC_starWars_loops5_copy:
        courseC_starWars_loops5_b: การที่จะเคลื่อนที่ไปด้านล่างได้นั้น คุณต้องหันก่อนแล้วเคลื่อนที่ไปข้างหน้า
        courseC_starWars_loops5_a: โซลูชั่นที่ดีที่สุด คือดารใช้บล็อกหันหนึ่งครั้ง
          ตามด้วยบล็อก `ไปข้างหน้า` หนึ่งบล็อก แล้วตามด้วยบล็อกหันอีกหนึ่งครั้ง จบด้วยลูปหนึ่งลูป
      courseC_starWars_loops6:
        courseC_starWars_loops6_a: ลองเขียนขั้นตอนการเคลื่อนไหวทั้งหมดลงบนกระดาษและมองหารูปแบบดู
        courseC_starWars_loops6_b: ถ้าคุณต้องการใช้โค้ดให้น้อยลง คุณสามารถวางบล็อกลูป
          `ทำซ้ำ` ไว้ภายในบล็อกลูป `ทำซ้ำ` อีกอันหนึ่ง โดยเราเรียกว่าเป็นการทำ**ลูปซ้อนลูป**
      courseC_starWars_loops6_2018:
        courseC_starWars_loops6_a: ลองเขียนขั้นตอนการเคลื่อนไหวทั้งหมดลงบนกระดาษและมองหารูปแบบดู
        courseC_starWars_loops6_b: ถ้าคุณต้องการใช้โค้ดให้น้อยลง คุณสามารถวางบล็อกลูป
          `ทำซ้ำ` ไว้ภายในบล็อกลูป `ทำซ้ำ` อีกอันหนึ่ง โดยเราเรียกว่าเป็นการทำ**ลูปซ้อนลูป**
      courseC_starWars_loops6_2019:
        courseC_starWars_loops6_a: ลองเขียนขั้นตอนการเคลื่อนไหวทั้งหมดลงบนกระดาษและมองหารูปแบบดู
        courseC_starWars_loops6_b: ถ้าคุณต้องการใช้โค้ดให้น้อยลง คุณสามารถวางบล็อกลูป
          `ทำซ้ำ` ไว้ภายในบล็อกลูป `ทำซ้ำ` อีกอันหนึ่ง โดยเราเรียกว่าเป็นการทำ**ลูปซ้อนลูป**
      courseC_starWars_loops6_copy:
        courseC_starWars_loops6_a: ลองเขียนขั้นตอนการเคลื่อนไหวทั้งหมดลงบนกระดาษและมองหารูปแบบดู
        courseC_starWars_loops6_b: ถ้าคุณต้องการใช้โค้ดให้น้อยลง คุณสามารถวางบล็อกลูป
          `ทำซ้ำ` ไว้ภายในบล็อกลูป `ทำซ้ำ` อีกอันหนึ่ง โดยเราเรียกว่าเป็นการทำ**ลูปซ้อนลูป**
      courseC_starWars_loops7:
        courseC_starWars_loops7_a: รุปแบบมันจะดูยากกว่าที่เป็นอยู่จริง ให้คุณลองเริ่มด้วยแบบขั้นบันไดอย่างง่ายๆ
          ดูว่าเส้นทางมันครอบคลุมบริเวณที่เศษโลหะกองอยู่ไหม?
        courseC_starWars_loops7_b: ถ้าคุณมีปัญหากับปริศนานี้และคิดไม่ออก ลองเขียนแนวทางการเดินลงบนแผ่นกระดาษสักแผ่น
          แล้วมองหารูปแบบดู
        courseC_starWars_loops7_c: ไม่ต้องกลัวว่าคุณจะทำผิด! เรียกใช้งานโค้ดเพื่อดูว่าเกิดอะไรขึ้น
          แม่ว่าคุณจะยังไม่สามารถแก้ปริศนาได้ก็ตาม
      courseC_starWars_loops7_2018:
        courseC_starWars_loops7_a: รุปแบบมันจะดูยากกว่าที่เป็นอยู่จริง ให้คุณลองเริ่มด้วยแบบขั้นบันไดอย่างง่ายๆ
          ดูว่าเส้นทางมันครอบคลุมบริเวณที่เศษโลหะกองอยู่ไหม?
        courseC_starWars_loops7_b: ถ้าคุณมีปัญหากับปริศนานี้และคิดไม่ออก ลองเขียนแนวทางการเดินลงบนแผ่นกระดาษสักแผ่น
          แล้วมองหารูปแบบดู
        courseC_starWars_loops7_c: ไม่ต้องกลัวว่าคุณจะทำผิด! เรียกใช้งานโค้ดเพื่อดูว่าเกิดอะไรขึ้น
          แม่ว่าคุณจะยังไม่สามารถแก้ปริศนาได้ก็ตาม
      courseC_starWars_loops7_2019:
        courseC_starWars_loops7_a: รุปแบบมันจะดูยากกว่าที่เป็นอยู่จริง ให้คุณลองเริ่มด้วยแบบขั้นบันไดอย่างง่ายๆ
          ดูว่าเส้นทางมันครอบคลุมบริเวณที่เศษโลหะกองอยู่ไหม?
        courseC_starWars_loops7_b: ถ้าคุณมีปัญหากับปริศนานี้และคิดไม่ออก ลองเขียนแนวทางการเดินลงบนแผ่นกระดาษสักแผ่น
          แล้วมองหารูปแบบดู
        courseC_starWars_loops7_c: ไม่ต้องกลัวว่าคุณจะทำผิด! เรียกใช้งานโค้ดเพื่อดูว่าเกิดอะไรขึ้น
          แม่ว่าคุณจะยังไม่สามารถแก้ปริศนาได้ก็ตาม
      courseC_starWars_loops7_copy:
        courseC_starWars_loops7_a: รุปแบบมันจะดูยากกว่าที่เป็นอยู่จริง ให้คุณลองเริ่มด้วยแบบขั้นบันไดอย่างง่ายๆ
          ดูว่าเส้นทางมันครอบคลุมบริเวณที่เศษโลหะกองอยู่ไหม?
        courseC_starWars_loops7_b: ถ้าคุณมีปัญหากับปริศนานี้และคิดไม่ออก ลองเขียนแนวทางการเดินลงบนแผ่นกระดาษสักแผ่น
          แล้วมองหารูปแบบดู
        courseC_starWars_loops7_c: ไม่ต้องกลัวว่าคุณจะทำผิด! เรียกใช้งานโค้ดเพื่อดูว่าเกิดอะไรขึ้น
          แม่ว่าคุณจะยังไม่สามารถแก้ปริศนาได้ก็ตาม
      courseC_starWars_loops8:
        course_starWars_loops8_a: Try thinking about this problem in small parts.
          Take your time. You don't need to solve it on the first try!
        course_starWars_loops8_b: Think of the first half of this problem as a stair
          step problem. How did you solve that before?
        course_starWars_loops8_c: |-
          Take a look at this path.

          ![](https://images.code.org/7d696dd3b1e6984a1d6041f366d5c96b-image-1510198804955.37.04.png)
      courseC_starWars_loops8_2018:
        course_starWars_loops8_a: Try thinking about this problem in small parts.
          Take your time. You don't need to solve it on the first try!
        course_starWars_loops8_b: Think of the first half of this problem as a stair
          step problem. How did you solve that before?
        course_starWars_loops8_c: |-
          Take a look at this path.

          ![](https://images.code.org/7d696dd3b1e6984a1d6041f366d5c96b-image-1510198804955.37.04.png)
      courseC_starWars_loops8_2019:
        course_starWars_loops8_a: Try thinking about this problem in small parts.
          Take your time. You don't need to solve it on the first try!
        course_starWars_loops8_b: Think of the first half of this problem as a stair
          step problem. How did you solve that before?
        course_starWars_loops8_c: |-
          Take a look at this path.

          ![](https://images.code.org/7d696dd3b1e6984a1d6041f366d5c96b-image-1510198804955.37.04.png)
      courseC_starWars_loops8_copy:
        course_starWars_loops8_a: Try thinking about this problem in small parts.
          Take your time. You don't need to solve it on the first try!
        course_starWars_loops8_b: Think of the first half of this problem as a stair
          step problem. How did you solve that before?
        course_starWars_loops8_c: |-
          Take a look at this path.

          ![](https://images.code.org/7d696dd3b1e6984a1d6041f366d5c96b-image-1510198804955.37.04.png)
      courseC_starWars_loops9:
        course_starWars_loops9_b: You can put more than one block inside a `repeat`
          loop.
        course_starWars_loops9_c: |-
          คุณไม่จำเป็นต้องหันซ้ายเพื่อแก้ปริศนานี้ การเหันทั้งหมดของคุณสามารถหันไปทางขวาอย่างเดียว

          ![](https://images.code.org/3dd00d424aa4112934053548b48bbb69-image-1510198997590.40.57.png)
      courseC_starWars_loops9_2018:
        course_starWars_loops9_b: You can put more than one block inside a `repeat`
          loop.
        course_starWars_loops9_c: |-
          คุณไม่จำเป็นต้องหันซ้ายเพื่อแก้ปริศนานี้ การเหันทั้งหมดของคุณสามารถหันไปทางขวาอย่างเดียว

          ![](https://images.code.org/3dd00d424aa4112934053548b48bbb69-image-1510198997590.40.57.png)
      courseC_starWars_loops9_2019:
        course_starWars_loops9_b: You can put more than one block inside a `repeat`
          loop.
        course_starWars_loops9_c: |-
          คุณไม่จำเป็นต้องหันซ้ายเพื่อแก้ปริศนานี้ การเหันทั้งหมดของคุณสามารถหันไปทางขวาอย่างเดียว

          ![](https://images.code.org/3dd00d424aa4112934053548b48bbb69-image-1510198997590.40.57.png)
      courseD_artist_1_2018:
        courseD_artist_project1_a: Use the drop down menu on the `turn` blocks to
          choose the angle you need!
        courseD_artist_project1_b: Remember that `move forward` draws a line, while
          `jump forward` does not.
      courseD_artist_1_2018_2019:
        courseD_artist_project1_a: Use the drop down menu on the `turn` blocks to
          choose the angle you need!
        courseD_artist_project1_b: Remember that `move forward` draws a line, while
          `jump forward` does not.
      courseD_artist_2_2018:
        courseD_artist_project1_b: Remember that `move` draws a line, while `jump`
          does not.
        courseD_artist_project1_a: Use the drop down menu on the `turn` blocks to
          choose the angle you need!
      courseD_artist_2_2018_2019:
        courseD_artist_project1_b: Remember that `move` draws a line, while `jump`
          does not.
        courseD_artist_project1_a: Use the drop down menu on the `turn` blocks to
          choose the angle you need!
      courseD_artist_5_2018:
        '1': If you are switching your shapes, don't forget that you will need to
          switch their angles, too!
      courseD_artist_5_2018_2019:
        '1': If you are switching your shapes, don't forget that you will need to
          switch their angles, too!
      courseD_artist_binary1:
        courseD_artist_binary1_a: ใส่ค่าไบนารีที่เป็นเลข 0 (ศูนย์) หรือ 1(หนึ่ง) ที่คุณต้องการ
          ลงไปแทน "???"
        courseD_artist_binary1_b: ศิลปินจะวาดช่องเป็นสีขาวแทนค่า 1 และวาดช่องเป็นสีดำแทนค่า
          0 ทุกๆตัวเลข
        courseD_artist_binary1_c: |-
          ต่อไปนี้คือวิธีที่คุณใส่ข้อมูลไบนารีโค้ดของคุณ:

          ![](https://images.code.org/ec0f974e32c4323fc61cb49b48b8f1c0-image-1500334311345.2_hint.gif)
      courseD_artist_binary1_2018:
        courseD_artist_binary1_a: ใส่ค่าไบนารีที่เป็นเลข 0 (ศูนย์) หรือ 1(หนึ่ง) ที่คุณต้องการ
          ลงไปแทน "???"
        courseD_artist_binary1_b: ศิลปินจะวาดช่องเป็นสีขาวแทนค่า 1 และวาดช่องเป็นสีดำแทนค่า
          0 ทุกๆตัวเลข
        courseD_artist_binary1_c: |-
          ต่อไปนี้คือวิธีที่คุณใส่ข้อมูลไบนารีโค้ดของคุณ:

          ![](https://images.code.org/ec0f974e32c4323fc61cb49b48b8f1c0-image-1500334311345.2_hint.gif)
      courseD_artist_binary1_2019:
        courseD_artist_binary1_a: ใส่ค่าไบนารีที่เป็นเลข 0 (ศูนย์) หรือ 1(หนึ่ง) ที่คุณต้องการ
          ลงไปแทน "???"
        courseD_artist_binary1_b: ศิลปินจะวาดช่องเป็นสีขาวแทนค่า 1 และวาดช่องเป็นสีดำแทนค่า
          0 ทุกๆตัวเลข
        courseD_artist_binary1_c: |-
          ต่อไปนี้คือวิธีที่คุณใส่ข้อมูลไบนารีโค้ดของคุณ:

          ![](https://images.code.org/ec0f974e32c4323fc61cb49b48b8f1c0-image-1500334311345.2_hint.gif)
      courseD_artist_binary2:
        courseD_artist_binary2_a: เพียงคลิก `เริ่ม`เพื่อดูโปรแกรมนี้ทำงาน
      courseD_artist_binary2_2018:
        courseD_artist_binary2_a: เพียงคลิก `เริ่ม`เพื่อดูโปรแกรมนี้ทำงาน
      courseD_artist_binary2_2019:
        courseD_artist_binary2_a: เพียงคลิก `เริ่ม`เพื่อดูโปรแกรมนี้ทำงาน
      courseD_artist_binary3:
        courseD_artist_binary3_a: One of the four binary patterns in the toolbox will
          solve this puzzle!
        courseD_artist_binary3_b: ไม่ต้องกลัวว่าคุณจะทำผิด! ลองเขียนไบนารีและเรียกใช้งานโค้ด
          เพื่อดูว่าจะเกิดอะไรขึ้น ถึงแม้ว่าคุณยังจะแก้ปริศนาไม่ออกก็ตาม
      courseD_artist_binary3_2018:
        courseD_artist_binary3_a: One of the four binary patterns in the toolbox will
          solve this puzzle!
        courseD_artist_binary3_b: ไม่ต้องกลัวว่าคุณจะทำผิด! ลองเขียนไบนารีและเรียกใช้งานโค้ด
          เพื่อดูว่าจะเกิดอะไรขึ้น ถึงแม้ว่าคุณยังจะแก้ปริศนาไม่ออกก็ตาม
      courseD_artist_binary3_2019:
        courseD_artist_binary3_a: One of the four binary patterns in the toolbox will
          solve this puzzle!
        courseD_artist_binary3_b: ไม่ต้องกลัวว่าคุณจะทำผิด! ลองเขียนไบนารีและเรียกใช้งานโค้ด
          เพื่อดูว่าจะเกิดอะไรขึ้น ถึงแม้ว่าคุณยังจะแก้ปริศนาไม่ออกก็ตาม
      courseD_artist_binary4:
        courseD_artist_binary4_a: ให้มองดูที่สี่เหลี่ยมจตุรัสสามอันแรกแถวบนสุด คุณสามารถทำรูปทั้งสามเหล่านี้ซ้ำแล้วซ้ำอีกเพื่อให้ได้รูปแบบทั้งผืนตามที่คุณต้องการ
          ได้หรือไม่?
        courseD_artist_binary4_b: อย่ากลัวที่จะทำผิดพลาด! ลองเขียนไบนารีและเรียกใช้งานโค้ด
          เพื่อดูว่าจะเกิดอะไรขึ้น ถึงแม้ว่าคุณเองจะไม่ได้คิดว่าคุณจะสามารถแก้ไขปริศนาได้แล้วก็ตาม
      courseD_artist_binary4_2018:
        courseD_artist_binary4_a: ให้มองดูที่สี่เหลี่ยมจตุรัสสามอันแรกแถวบนสุด คุณสามารถทำรูปทั้งสามเหล่านี้ซ้ำแล้วซ้ำอีกเพื่อให้ได้รูปแบบทั้งผืนตามที่คุณต้องการ
          ได้หรือไม่?
        courseD_artist_binary4_b: อย่ากลัวที่จะทำผิดพลาด! ลองเขียนไบนารีและเรียกใช้งานโค้ด
          เพื่อดูว่าจะเกิดอะไรขึ้น ถึงแม้ว่าคุณเองจะไม่ได้คิดว่าคุณจะสามารถแก้ไขปริศนาได้แล้วก็ตาม
      courseD_artist_binary4_2019:
        courseD_artist_binary4_a: ให้มองดูที่สี่เหลี่ยมจตุรัสสามอันแรกแถวบนสุด คุณสามารถทำรูปทั้งสามเหล่านี้ซ้ำแล้วซ้ำอีกเพื่อให้ได้รูปแบบทั้งผืนตามที่คุณต้องการ
          ได้หรือไม่?
        courseD_artist_binary4_b: อย่ากลัวที่จะทำผิดพลาด! ลองเขียนไบนารีและเรียกใช้งานโค้ด
          เพื่อดูว่าจะเกิดอะไรขึ้น ถึงแม้ว่าคุณเองจะไม่ได้คิดว่าคุณจะสามารถแก้ไขปริศนาได้แล้วก็ตาม
      courseD_artist_binary5:
        courseD_artist_binary5_a: ลองเรียกใช้งานโค้ดดูก่อน เพื่อดูว่า มีอะไรที่คุณใช้ได้บ้าง
        courseD_artist_binary5_b: คุณแค่สลับแถว เพียงสองแถวเพื่อสร้างรอยยิ้ม
        courseD_artist_binary5_c: หากคุณมีปัญหาในการแก้ปริศนานี้ ลองเขียนโค้ดไบนารีแถวนั้นลงบนกระดาษสักแผ่น
          แล้วมองหาดูว่ามีรูปแบบอะไร
      courseD_artist_binary5_2018:
        courseD_artist_binary5_a: ลองเรียกใช้งานโค้ดดูก่อน เพื่อดูว่า มีอะไรที่คุณใช้ได้บ้าง
        courseD_artist_binary5_b: คุณแค่สลับแถว เพียงสองแถวเพื่อสร้างรอยยิ้ม
        courseD_artist_binary5_c: หากคุณมีปัญหาในการแก้ปริศนานี้ ลองเขียนโค้ดไบนารีแถวนั้นลงบนกระดาษสักแผ่น
          แล้วมองหาดูว่ามีรูปแบบอะไร
      courseD_artist_binary5_2019:
        courseD_artist_binary5_a: ลองเรียกใช้งานโค้ดดูก่อน เพื่อดูว่า มีอะไรที่คุณใช้ได้บ้าง
        courseD_artist_binary5_b: คุณแค่สลับแถว เพียงสองแถวเพื่อสร้างรอยยิ้ม
        courseD_artist_binary5_c: หากคุณมีปัญหาในการแก้ปริศนานี้ ลองเขียนโค้ดไบนารีแถวนั้นลงบนกระดาษสักแผ่น
          แล้วมองหาดูว่ามีรูปแบบอะไร
      courseD_artist_binary6:
        courseD_artist_binary6_a: เริ่มต้นที่ด้านซ้ายบนสุด สังเกตุว่ามันจะไปไกลเท่าไหร่
          ก่อนที่รูปแบบจะเริ่มซ้ำไปซ้ำมา?
        courseD_artist_binary6_b: คุณสามารถสร้างสายอัขระไบนารีทีละเล็กทีละน้อย และทำการทดสอบไปเรื่อยๆ!
      courseD_artist_binary6_2018:
        courseD_artist_binary6_a: เริ่มต้นที่ด้านซ้ายบนสุด สังเกตุว่ามันจะไปไกลเท่าไหร่
          ก่อนที่รูปแบบจะเริ่มซ้ำไปซ้ำมา?
        courseD_artist_binary6_b: คุณสามารถสร้างสายอัขระไบนารีทีละเล็กทีละน้อย และทำการทดสอบไปเรื่อยๆ!
      courseD_artist_binary6_2019:
        courseD_artist_binary6_a: เริ่มต้นที่ด้านซ้ายบนสุด สังเกตุว่ามันจะไปไกลเท่าไหร่
          ก่อนที่รูปแบบจะเริ่มซ้ำไปซ้ำมา?
        courseD_artist_binary6_b: คุณสามารถสร้างสายอัขระไบนารีทีละเล็กทีละน้อย และทำการทดสอบไปเรื่อยๆ!
      courseD_artist_binary7:
        courseD_artist_binary7_a: เริ่มต้นที่ด้านซ้ายบนสุด สังเกตุว่ามันจะไปไกลเท่าไหร่
          ก่อนที่รูปแบบจะเริ่มซ้ำไปซ้ำมา?
        courseD_artist_binary7_b: อย่ากลัวที่จะทำผิดพลาด! ลองเขียนไบนารีและเรียกใช้งานโค้ด
          เพื่อดูว่าจะเกิดอะไรขึ้น ถึงแม้ว่าคุณเองจะไม่ได้คิดว่าคุณจะสามารถแก้ไขปริศนาได้แล้วก็ตาม
      courseD_artist_binary7_2018:
        courseD_artist_binary7_a: เริ่มต้นที่ด้านซ้ายบนสุด สังเกตุว่ามันจะไปไกลเท่าไหร่
          ก่อนที่รูปแบบจะเริ่มซ้ำไปซ้ำมา?
        courseD_artist_binary7_b: อย่ากลัวที่จะทำผิดพลาด! ลองเขียนไบนารีและเรียกใช้งานโค้ด
          เพื่อดูว่าจะเกิดอะไรขึ้น ถึงแม้ว่าคุณเองจะไม่ได้คิดว่าคุณจะสามารถแก้ไขปริศนาได้แล้วก็ตาม
      courseD_artist_binary7_2019:
        courseD_artist_binary7_a: เริ่มต้นที่ด้านซ้ายบนสุด สังเกตุว่ามันจะไปไกลเท่าไหร่
          ก่อนที่รูปแบบจะเริ่มซ้ำไปซ้ำมา?
        courseD_artist_binary7_b: อย่ากลัวที่จะทำผิดพลาด! ลองเขียนไบนารีและเรียกใช้งานโค้ด
          เพื่อดูว่าจะเกิดอะไรขึ้น ถึงแม้ว่าคุณเองจะไม่ได้คิดว่าคุณจะสามารถแก้ไขปริศนาได้แล้วก็ตาม
      courseD_artist_binary8:
        courseD_artist_binary8_a: รูปเกลียวนั้นสามารถสร้างความสับสนในบางครั้ง. แยกเส้นแนวนอนแต่ละเส้นไว้ในใจของคุณในขณะที่คุณออกแบบ
        courseD_artist_binary8_b: ลองเรียกใช้งานโค้ดดูก่อน เพื่อดูว่า มีอะไรที่คุณใช้ได้บ้าง
        courseD_artist_binary8_c: ไม่ต้องกลัวว่าคุณจะทำผิด! ลองเขียนไบนารีและเรียกใช้งานโค้ด
          เพื่อดูว่าจะเกิดอะไรขึ้น ถึงแม้ว่าคุณยังจะแก้ปริศนาไม่ออกก็ตาม
      courseD_artist_binary8_2018:
        courseD_artist_binary8_a: รูปเกลียวนั้นสามารถสร้างความสับสนในบางครั้ง. แยกเส้นแนวนอนแต่ละเส้นไว้ในใจของคุณในขณะที่คุณออกแบบ
        courseD_artist_binary8_b: ลองเรียกใช้งานโค้ดดูก่อน เพื่อดูว่า มีอะไรที่คุณใช้ได้บ้าง
        courseD_artist_binary8_c: ไม่ต้องกลัวว่าคุณจะทำผิด! ลองเขียนไบนารีและเรียกใช้งานโค้ด
          เพื่อดูว่าจะเกิดอะไรขึ้น ถึงแม้ว่าคุณยังจะแก้ปริศนาไม่ออกก็ตาม
      courseD_artist_binary8_2019:
        courseD_artist_binary8_a: รูปเกลียวนั้นสามารถสร้างความสับสนในบางครั้ง. แยกเส้นแนวนอนแต่ละเส้นไว้ในใจของคุณในขณะที่คุณออกแบบ
        courseD_artist_binary8_b: ลองเรียกใช้งานโค้ดดูก่อน เพื่อดูว่า มีอะไรที่คุณใช้ได้บ้าง
        courseD_artist_binary8_c: ไม่ต้องกลัวว่าคุณจะทำผิด! ลองเขียนไบนารีและเรียกใช้งานโค้ด
          เพื่อดูว่าจะเกิดอะไรขึ้น ถึงแม้ว่าคุณยังจะแก้ปริศนาไม่ออกก็ตาม
      courseD_artist_binary_challenge2_2018:
        courseD_artist_binary_challenge2_a: There are only few lines wrong in the
          original program.
      courseD_artist_binary_challenge2_2019:
        courseD_artist_binary_challenge2_a: There are only few lines wrong in the
          original program.
      courseD_artist_nestedLoops1:
        courseD_artist_nestedLoops1_a: วิธีที่ง่ายที่สุดในการวาดรูปนี้คือการวาดเส้นไปข้างหน้าและหันไปทางขวา
        courseD_artist_nestedLoops1_b: คุณสามารถวาดรูปสามเหลี่ยมนี้ด้วยลูป `ทำซ้ำ`โดยมีบล็อกสองบล็อกอยู่ภายใน
          บล็อกไหนที่คุณต้องการ?
        courseD_artist_nestedLoops1_c: ลองเขียนขั้นตอนลงบนกระดาษ และมองหารูปแบบที่สามารถทำให้ง่ายด้วยการใช้ลูป
      courseD_artist_nestedLoops1_2018:
        courseD_artist_nestedLoops1_a: วิธีที่ง่ายที่สุดในการวาดรูปนี้คือการวาดเส้นไปข้างหน้าและหันไปทางขวา
        courseD_artist_nestedLoops1_b: คุณสามารถวาดรูปสามเหลี่ยมนี้ด้วยลูป `ทำซ้ำ`โดยมีบล็อกสองบล็อกอยู่ภายใน
          บล็อกไหนที่คุณต้องการ?
        courseD_artist_nestedLoops1_c: ลองเขียนขั้นตอนลงบนกระดาษ และมองหารูปแบบที่สามารถทำให้ง่ายด้วยการใช้ลูป
      courseD_artist_nestedLoops1_2019:
        courseD_artist_nestedLoops1_a: วิธีที่ง่ายที่สุดในการวาดรูปนี้คือการวาดเส้นไปข้างหน้าและหันไปทางขวา
        courseD_artist_nestedLoops1_b: คุณสามารถวาดรูปสามเหลี่ยมนี้ด้วยลูป `ทำซ้ำ`โดยมีบล็อกสองบล็อกอยู่ภายใน
          บล็อกไหนที่คุณต้องการ?
        courseD_artist_nestedLoops1_c: ลองเขียนขั้นตอนลงบนกระดาษ และมองหารูปแบบที่สามารถทำให้ง่ายด้วยการใช้ลูป
      courseD_artist_nestedLoops1a:
        courseD_artist_nestedLoops1a_a: คุณจะต้องวาดรูปสามเหลี่ยมรวม 6 รูป หลังจากเสร็จการวาดสามเหลี่ยมแต่ละรูปให้หัน
          60 องศาและเริ่มต้นวาดรูปสามเหลี่ยมถัดไป
        courseD_artist_nestedLoops1a_b: ถ้าคุณสร้างสามเหลี่ยมของคุณด้วยลูป ศิลปินควรจะหันหน้าไปทางเดียวกันกับที่พวกเขาเริ่มต้น
          อันนี้จะทำให้ การหันไป 60 องศาง่ายขึ้นมาก
        courseD_artist_nestedLoops1a_c: If you want colors, use the `set color` block
          in your code. You don't have to match the colors in the template image.
      courseD_artist_nestedLoops1a_2018:
        courseD_artist_nestedLoops1a_a: คุณจะต้องวาดรูปสามเหลี่ยมรวม 6 รูป หลังจากเสร็จการวาดสามเหลี่ยมแต่ละรูปให้หัน
          60 องศาและเริ่มต้นวาดรูปสามเหลี่ยมถัดไป
        courseD_artist_nestedLoops1a_b: ถ้าคุณสร้างสามเหลี่ยมของคุณด้วยลูป ศิลปินควรจะหันหน้าไปทางเดียวกันกับที่พวกเขาเริ่มต้น
          อันนี้จะทำให้ การหันไป 60 องศาง่ายขึ้นมาก
        courseD_artist_nestedLoops1a_c: If you want colors, use the `set color` block
          in your code. You don't have to match the colors in the template image.
      courseD_artist_nestedLoops1a_2019:
        courseD_artist_nestedLoops1a_a: คุณจะต้องวาดรูปสามเหลี่ยมรวม 6 รูป หลังจากเสร็จการวาดสามเหลี่ยมแต่ละรูปให้หัน
          60 องศาและเริ่มต้นวาดรูปสามเหลี่ยมถัดไป
        courseD_artist_nestedLoops1a_b: ถ้าคุณสร้างสามเหลี่ยมของคุณด้วยลูป ศิลปินควรจะหันหน้าไปทางเดียวกันกับที่พวกเขาเริ่มต้น
          อันนี้จะทำให้ การหันไป 60 องศาง่ายขึ้นมาก
        courseD_artist_nestedLoops1a_c: If you want colors, use the `set color` block
          in your code. You don't have to match the colors in the template image.
      courseD_artist_nestedLoops2:
        courseD_artist_nestedLoops2_a: ซ้อนลูปของคุณโดยล้อมรอบโค้ดสามเหลี่ยมของคุณด้วยลูป
          `ทำซ้ำ`อีกอันหนึ่ง
        courseD_artist_nestedLoops2_b: อย่าลืมใส่บล็อก`หัน.. ไป`ภายในลูป เพื่อให้ศิลปินหันหน้าไปหลังจากวาดรูปสามเหลี่ยมแต่ละรูป
      courseD_artist_nestedLoops2_2018:
        courseD_artist_nestedLoops2_a: ซ้อนลูปของคุณโดยล้อมรอบโค้ดสามเหลี่ยมของคุณด้วยลูป
          `ทำซ้ำ`อีกอันหนึ่ง
        courseD_artist_nestedLoops2_b: อย่าลืมใส่บล็อก`หัน.. ไป`ภายในลูป เพื่อให้ศิลปินหันหน้าไปหลังจากวาดรูปสามเหลี่ยมแต่ละรูป
      courseD_artist_nestedLoops2_2019:
        courseD_artist_nestedLoops2_a: ซ้อนลูปของคุณโดยล้อมรอบโค้ดสามเหลี่ยมของคุณด้วยลูป
          `ทำซ้ำ`อีกอันหนึ่ง
        courseD_artist_nestedLoops2_b: อย่าลืมใส่บล็อก`หัน.. ไป`ภายในลูป เพื่อให้ศิลปินหันหน้าไปหลังจากวาดรูปสามเหลี่ยมแต่ละรูป
      courseD_artist_nestedLoops3:
        courseD_artist_nestedLoops3_a: "ลองใช้บล็อก `กระโดดไปข้างหน้า` เพื่อย้ายจากด้านบนของบานหน้าต่างไปยังบานหน้าต่างที่คุณจะเริ่มต้นถัดไป
          \n\nถ้าบานหน้าต่างของคุณมีด้านแต่ละด้านยาว 20 พิกเซลและห่างกัน 20 พิกเซล
          ระยะทางไกลเท่าไรที่คุณจะต้องกระโดดข้ามไป?"
        courseD_artist_nestedLoops3_b: 'อย่าลืมที่จะใช้ลูปที่ซ้อนกัน เพื่อให้แก้ปริศนานี้ได้อย่างรวดเร็ว '
        courseD_artist_nestedLoops3_c: 'เริ่มต้นโดยใช้ลูป `ทำซ้ำ` เพื่อสร้างสี่เหลี่ยมจตุรัสหนึ่งรูป
          จากนั้นทำซ้ำสี่เหลี่ยม 8 ครั้ง โดยกระโดดระหว่างทำสี่เหลี่ยม 40 พิกเซล '
      courseD_artist_nestedLoops3_2018:
        courseD_artist_nestedLoops3_a: "ลองใช้บล็อก `กระโดดไปข้างหน้า` เพื่อย้ายจากด้านบนของบานหน้าต่างไปยังบานหน้าต่างที่คุณจะเริ่มต้นถัดไป
          \n\nถ้าบานหน้าต่างของคุณมีด้านแต่ละด้านยาว 20 พิกเซลและห่างกัน 20 พิกเซล
          ระยะทางไกลเท่าไรที่คุณจะต้องกระโดดข้ามไป?"
        courseD_artist_nestedLoops3_b: 'อย่าลืมที่จะใช้ลูปที่ซ้อนกัน เพื่อให้แก้ปริศนานี้ได้อย่างรวดเร็ว '
        courseD_artist_nestedLoops3_c: 'เริ่มต้นโดยใช้ลูป `ทำซ้ำ` เพื่อสร้างสี่เหลี่ยมจตุรัสหนึ่งรูป
          จากนั้นทำซ้ำสี่เหลี่ยม 8 ครั้ง โดยกระโดดระหว่างทำสี่เหลี่ยม 40 พิกเซล '
      courseD_artist_nestedLoops3_2019:
        courseD_artist_nestedLoops3_a: "ลองใช้บล็อก `กระโดดไปข้างหน้า` เพื่อย้ายจากด้านบนของบานหน้าต่างไปยังบานหน้าต่างที่คุณจะเริ่มต้นถัดไป
          \n\nถ้าบานหน้าต่างของคุณมีด้านแต่ละด้านยาว 20 พิกเซลและห่างกัน 20 พิกเซล
          ระยะทางไกลเท่าไรที่คุณจะต้องกระโดดข้ามไป?"
        courseD_artist_nestedLoops3_b: 'อย่าลืมที่จะใช้ลูปที่ซ้อนกัน เพื่อให้แก้ปริศนานี้ได้อย่างรวดเร็ว '
        courseD_artist_nestedLoops3_c: 'เริ่มต้นโดยใช้ลูป `ทำซ้ำ` เพื่อสร้างสี่เหลี่ยมจตุรัสหนึ่งรูป
          จากนั้นทำซ้ำสี่เหลี่ยม 8 ครั้ง โดยกระโดดระหว่างทำสี่เหลี่ยม 40 พิกเซล '
      courseD_artist_nestedLoops4:
        courseD_artist_nestedLoops4_d: เพื่อแก้ปัญหานี้ได้อย่างถูกต้อง, คุณจะต้องเคลื่อนที่ไป\*\*
          ก่อน \*\* ที่คุณจะหัน หรือไม่เช่นนั้นวงกลมของคุณจะถูกขยับผิดตำแหน่งออกไปเล็กน้อย!.
        courseD_artist_nestedLoops4_a: |-
          การทำวงกลม:
          \-ทำซ้ำ 360 ครั้ง
          \-วาดเส้นไปข้างหน้ายาว 1 พิกเซล
          \-เลี้ยวซ้าย 1 องศา
        courseD_artist_nestedLoops4_b: อย่าลืมกระโดดไปข้างหน้า 50 พิกเซลระหว่างวงกลมแต่ละวง
        courseD_artist_nestedLoops4_c: ใช้ลูปที่ซ้อนกันเพื่อวาดวงกลมของคุณ 4 ครั้ง
      courseD_artist_nestedLoops4_2018:
        courseD_artist_nestedLoops4_d: เพื่อแก้ปัญหานี้ได้อย่างถูกต้อง, คุณจะต้องเคลื่อนที่ไป\*\*
          ก่อน \*\* ที่คุณจะหัน หรือไม่เช่นนั้นวงกลมของคุณจะถูกขยับผิดตำแหน่งออกไปเล็กน้อย!.
        courseD_artist_nestedLoops4_a: |-
          การทำวงกลม:
          \-ทำซ้ำ 360 ครั้ง
          \-วาดเส้นไปข้างหน้ายาว 1 พิกเซล
          \-เลี้ยวซ้าย 1 องศา
        courseD_artist_nestedLoops4_b: อย่าลืมกระโดดไปข้างหน้า 50 พิกเซลระหว่างวงกลมแต่ละวง
        courseD_artist_nestedLoops4_c: ใช้ลูปที่ซ้อนกันเพื่อวาดวงกลมของคุณ 4 ครั้ง
      courseD_artist_nestedLoops4_2019:
        courseD_artist_nestedLoops4_d: เพื่อแก้ปัญหานี้ได้อย่างถูกต้อง, คุณจะต้องเคลื่อนที่ไป\*\*
          ก่อน \*\* ที่คุณจะหัน หรือไม่เช่นนั้นวงกลมของคุณจะถูกขยับผิดตำแหน่งออกไปเล็กน้อย!.
        courseD_artist_nestedLoops4_a: |-
          การทำวงกลม:
          \-ทำซ้ำ 360 ครั้ง
          \-วาดเส้นไปข้างหน้ายาว 1 พิกเซล
          \-เลี้ยวซ้าย 1 องศา
        courseD_artist_nestedLoops4_b: อย่าลืมกระโดดไปข้างหน้า 50 พิกเซลระหว่างวงกลมแต่ละวง
        courseD_artist_nestedLoops4_c: ใช้ลูปที่ซ้อนกันเพื่อวาดวงกลมของคุณ 4 ครั้ง
      courseD_artist_nestedLoops5:
        courseD_artist_nestedLoops5_a: |-
          ทำเช่นนี้อย่างง่ายดาย:

          -   ทำซ้ำ 4 ครั้ง
          -   ทำวงกลม
          -   กระโดดไปข้างหน้า 50 พิกเซล
          -   เลี้ยวขวา 90 องศา
        courseD_artist_nestedLoops5_b: เมื่อต้องการทำวงกลม ให้ตั้งค่าลูปทำซ้ำให้ทำซ้ำ
          360 ครั้ง ภายในลูป วาดเส้นไปข้างหน้า1พิกเซลและหันไป 1 องศา.
      courseD_artist_nestedLoops5_2018:
        courseD_artist_nestedLoops5_a: |-
          ทำเช่นนี้อย่างง่ายดาย:

          -   ทำซ้ำ 4 ครั้ง
          -   ทำวงกลม
          -   กระโดดไปข้างหน้า 50 พิกเซล
          -   เลี้ยวขวา 90 องศา
        courseD_artist_nestedLoops5_b: เมื่อต้องการทำวงกลม ให้ตั้งค่าลูปทำซ้ำให้ทำซ้ำ
          360 ครั้ง ภายในลูป วาดเส้นไปข้างหน้า1พิกเซลและหันไป 1 องศา.
      courseD_artist_nestedLoops5_2019:
        courseD_artist_nestedLoops5_a: |-
          ทำเช่นนี้อย่างง่ายดาย:

          -   ทำซ้ำ 4 ครั้ง
          -   ทำวงกลม
          -   กระโดดไปข้างหน้า 50 พิกเซล
          -   เลี้ยวขวา 90 องศา
        courseD_artist_nestedLoops5_b: เมื่อต้องการทำวงกลม ให้ตั้งค่าลูปทำซ้ำให้ทำซ้ำ
          360 ครั้ง ภายในลูป วาดเส้นไปข้างหน้า1พิกเซลและหันไป 1 องศา.
      courseD_artist_nestedLoops7:
        courseD_artist_nestedLoops7_a: You'll need to use nested loops here. First,
          use a loop to draw a square. What will the outer loop do if the inner loop
          draws a square?
        courseD_artist_nestedLoops7_b: |-
          ใช้ลูปที่ซ้อนกันซึ่งลูปภายในเป็นโค้ดสำหรับวาดสี่เหลี่ยม

          -   ทำซ้ำ 6 ครั้ง
          -   วาดสี่เหลี่ยม
          -   กระโดดไปข้างหน้า **50 พิกเซล**
          -   หมุน **60 องศา**
      courseD_artist_nestedLoops7_2018:
        courseD_artist_nestedLoops7_a: You'll need to use nested loops here. First,
          use a loop to draw a square. What will the outer loop do if the inner loop
          draws a square?
        courseD_artist_nestedLoops7_b: |-
          ใช้ลูปที่ซ้อนกันซึ่งลูปภายในเป็นโค้ดสำหรับวาดสี่เหลี่ยม

          -   ทำซ้ำ 6 ครั้ง
          -   วาดสี่เหลี่ยม
          -   กระโดดไปข้างหน้า **50 พิกเซล**
          -   หมุน **60 องศา**
      courseD_artist_nestedLoops7_2019:
        courseD_artist_nestedLoops7_a: You'll need to use nested loops here. First,
          use a loop to draw a square. What will the outer loop do if the inner loop
          draws a square?
        courseD_artist_nestedLoops7_b: |-
          ใช้ลูปที่ซ้อนกันซึ่งลูปภายในเป็นโค้ดสำหรับวาดสี่เหลี่ยม

          -   ทำซ้ำ 6 ครั้ง
          -   วาดสี่เหลี่ยม
          -   กระโดดไปข้างหน้า **50 พิกเซล**
          -   หมุน **60 องศา**
      courseD_artist_nestedLoops8:
        courseD_artist_nestedLoops8_a: To have 8 hexagons in your drawing, you'll
          need to turn **45 degrees** between each of them. Why? Because 360 degrees
          (a full turn around) divided by 8 (the number of hexagons) is 45 degrees.
        courseD_artist_nestedLoops8_b: ถ้าเกิดการติดขัดขึ้นมา ให้เริ่มด้วยการดูปริศนาสุดท้าย
          และเปลี่ยนให้แตกต่างไป
        courseD_artist_nestedLoops8_c: |-
          Use a nested loop:

          -   Repeat 8 times
              -   draw a hexagon
              -   jump forward 50 pixels
              -   turn right 45 degrees
      courseD_artist_nestedLoops8_2018:
        courseD_artist_nestedLoops8_a: To have 8 hexagons in your drawing, you'll
          need to turn **45 degrees** between each of them. Why? Because 360 degrees
          (a full turn around) divided by 8 (the number of hexagons) is 45 degrees.
        courseD_artist_nestedLoops8_b: ถ้าเกิดการติดขัดขึ้นมา ให้เริ่มด้วยการดูปริศนาสุดท้าย
          และเปลี่ยนให้แตกต่างไป
        courseD_artist_nestedLoops8_c: |-
          Use a nested loop:

          -   Repeat 8 times
              -   draw a hexagon
              -   jump forward 50 pixels
              -   turn right 45 degrees
      courseD_artist_nestedLoops8_2019:
        courseD_artist_nestedLoops8_a: To have 8 hexagons in your drawing, you'll
          need to turn **45 degrees** between each of them. Why? Because 360 degrees
          (a full turn around) divided by 8 (the number of hexagons) is 45 degrees.
        courseD_artist_nestedLoops8_b: ถ้าเกิดการติดขัดขึ้นมา ให้เริ่มด้วยการดูปริศนาสุดท้าย
          และเปลี่ยนให้แตกต่างไป
        courseD_artist_nestedLoops8_c: |-
          Use a nested loop:

          -   Repeat 8 times
              -   draw a hexagon
              -   jump forward 50 pixels
              -   turn right 45 degrees
      courseD_artist_nestedLoops9:
        courseD_artist_nestedLoops9_a: เริ่มต้นด้วยการใช้ลูปที่ซ้อนกันเช่นเดียวกับก่อนหน้านี้
          แต่คราวนี้ให้สร้างด้วยสี่เหลี่ยมแทน
        courseD_artist_nestedLoops9_b: Add a second set of nested loops to the end
          of the first set, but this time use triangles.
        courseD_artist_nestedLoops9_c: |-
          Use two nested loops:

          -   Repeat 8 times
              -   draw a square
              -   jump forward 50 pixels
              -   turn right by 45 degrees
          -   Repeat 8 times
              -   draw a triangle
              -   jump forward 50 pixels
              -   turn right by 45 degrees
      courseD_artist_nestedLoops9_2018:
        courseD_artist_nestedLoops9_a: เริ่มต้นด้วยการใช้ลูปที่ซ้อนกันเช่นเดียวกับก่อนหน้านี้
          แต่คราวนี้ให้สร้างด้วยสี่เหลี่ยมแทน
        courseD_artist_nestedLoops9_b: Add a second set of nested loops to the end
          of the first set, but this time use triangles.
        courseD_artist_nestedLoops9_c: |-
          Use two nested loops:

          -   Repeat 8 times
              -   draw a square
              -   jump forward 50 pixels
              -   turn right by 45 degrees
          -   Repeat 8 times
              -   draw a triangle
              -   jump forward 50 pixels
              -   turn right by 45 degrees
      courseD_artist_nestedLoops9_2019:
        courseD_artist_nestedLoops9_a: เริ่มต้นด้วยการใช้ลูปที่ซ้อนกันเช่นเดียวกับก่อนหน้านี้
          แต่คราวนี้ให้สร้างด้วยสี่เหลี่ยมแทน
        courseD_artist_nestedLoops9_b: Add a second set of nested loops to the end
          of the first set, but this time use triangles.
        courseD_artist_nestedLoops9_c: |-
          Use two nested loops:

          -   Repeat 8 times
              -   draw a square
              -   jump forward 50 pixels
              -   turn right by 45 degrees
          -   Repeat 8 times
              -   draw a triangle
              -   jump forward 50 pixels
              -   turn right by 45 degrees
      courseD_artist_nestedLoopsFP:
        courseD_artist_nestedLoopsFP_a: |-
          <img src="https://images.code.org/9257cbf61f238f5a749a949059731934-image-1478732674615.02.25.png" width="200px"/>

          รูปนี้ถูกสร้างขึ้นโดยใช้ลูปซ้อนกันอันเดียวที่ทำซ้ำหกเหลี่ยม (ที่มีด้าน 50px) 15 ครั้งโดยใช้การหันไป 48 องศา
        courseD_artist_nestedLoopsFP_b: |-
          <img src="https://images.code.org/31a85d4e5be5209240195d34b17a177b-image-1478732674613.32.53.png" width="200px"/>

          This image was made using similar code to other levels you've done before, but with circles (repeat 360 times: move forward 1, turn 1 degree).
        courseD_artist_nestedLoopsFP_c: |-
          <img src="https://images.code.org/f654f1512860c6c8cf6795c961a8959c-image-1478732674616.02.58.png" width="200px"/>

          รูปนี้ถูกสร้างขึ้นโดยใช้ลูปซ้อนกันอันเดียวที่ทำซ้ำรูปห้าเหลี่ยมด้านเท่า (ที่มีด้าน 50 px) 15 ครั้งโดยใช้การหันไป 48 องศา
      courseD_artist_nestedLoopsFP_2018:
        courseD_artist_nestedLoopsFP_a: |-
          <img src="https://images.code.org/9257cbf61f238f5a749a949059731934-image-1478732674615.02.25.png" width="200px"/>

          รูปนี้ถูกสร้างขึ้นโดยใช้ลูปซ้อนกันอันเดียวที่ทำซ้ำหกเหลี่ยม (ที่มีด้าน 50px) 15 ครั้งโดยใช้การหันไป 48 องศา
        courseD_artist_nestedLoopsFP_b: |-
          <img src="https://images.code.org/31a85d4e5be5209240195d34b17a177b-image-1478732674613.32.53.png" width="200px"/>

          This image was made using similar code to other levels you've done before, but with circles (repeat 360 times: move forward 1, turn 1 degree).
        courseD_artist_nestedLoopsFP_c: |-
          <img src="https://images.code.org/f654f1512860c6c8cf6795c961a8959c-image-1478732674616.02.58.png" width="200px"/>

          รูปนี้ถูกสร้างขึ้นโดยใช้ลูปซ้อนกันอันเดียวที่ทำซ้ำรูปห้าเหลี่ยมด้านเท่า (ที่มีด้าน 50 px) 15 ครั้งโดยใช้การหันไป 48 องศา
      courseD_artist_nestedLoopsFP_2019:
        courseD_artist_nestedLoopsFP_a: |-
          <img src="https://images.code.org/9257cbf61f238f5a749a949059731934-image-1478732674615.02.25.png" width="200px"/>

          รูปนี้ถูกสร้างขึ้นโดยใช้ลูปซ้อนกันอันเดียวที่ทำซ้ำหกเหลี่ยม (ที่มีด้าน 50px) 15 ครั้งโดยใช้การหันไป 48 องศา
        courseD_artist_nestedLoopsFP_b: |-
          <img src="https://images.code.org/31a85d4e5be5209240195d34b17a177b-image-1478732674613.32.53.png" width="200px"/>

          This image was made using similar code to other levels you've done before, but with circles (repeat 360 times: move forward 1, turn 1 degree).
        courseD_artist_nestedLoopsFP_c: |-
          <img src="https://images.code.org/f654f1512860c6c8cf6795c961a8959c-image-1478732674616.02.58.png" width="200px"/>

          รูปนี้ถูกสร้างขึ้นโดยใช้ลูปซ้อนกันอันเดียวที่ทำซ้ำรูปห้าเหลี่ยมด้านเท่า (ที่มีด้าน 50 px) 15 ครั้งโดยใช้การหันไป 48 องศา
      courseD_artist_nestedLoops_challenge1:
        courseD_artist_nestedLoops_challenge1_a: Start by changing the color to blue,
          then create an octagon with 50 pixel sides and 45 degree left turns.
        courseD_artist_nestedLoops_challenge1_b: Add the code to change the color
          to green, and make a triangle with 50 pixel sides and 120 degree left turns.
        courseD_artist_nestedLoops_challenge1_c: After you've drawn both shapes, you
          will need to jump forward by 50 pixels before you turn right by 90 degrees.
        courseD_artist_nestedLoops_challenge1_d: Put all of your code inside of a
          `repeat 4 times` loop to finish it off.
      courseD_artist_nestedLoops_challenge1_2018:
        courseD_artist_nestedLoops_challenge1_a: Start by changing the color to blue,
          then create an octagon with 50 pixel sides and 45 degree left turns.
        courseD_artist_nestedLoops_challenge1_b: Add the code to change the color
          to green, and make a triangle with 50 pixel sides and 120 degree left turns.
        courseD_artist_nestedLoops_challenge1_c: After you've drawn both shapes, you
          will need to jump forward by 50 pixels before you turn right by 90 degrees.
        courseD_artist_nestedLoops_challenge1_d: Put all of your code inside of a
          `repeat 4 times` loop to finish it off.
      courseD_artist_nestedLoops_challenge1_2019:
        courseD_artist_nestedLoops_challenge1_a: Start by changing the color to blue,
          then create an octagon with 50 pixel sides and 45 degree left turns.
        courseD_artist_nestedLoops_challenge1_b: Add the code to change the color
          to green, and make a triangle with 50 pixel sides and 120 degree left turns.
        courseD_artist_nestedLoops_challenge1_c: After you've drawn both shapes, you
          will need to jump forward by 50 pixels before you turn right by 90 degrees.
        courseD_artist_nestedLoops_challenge1_d: Put all of your code inside of a
          `repeat 4 times` loop to finish it off.
      courseD_artist_nestedLoops_challenge2:
        courseD_artist_nestedLoops_challenge2_a: เพื่อที่จะวาดรูปแปดหลี่ยมรูปหนึ่งนั้น
          ศิลปินต้องหันไปแต่ละครั้ง 45 องศาเป็นจำนวนทั้งสิ้น 8 ครั้ง
        courseD_artist_nestedLoops_challenge2_b: เพื่อที่จะวาดรูปสี่หลี่ยมจตุรัสรูปหนึ่งนั้น
          ศิลปินต้องหันไปแต่ละครั้ง 90 องศาเป็นจำนวนทั้งสิ้น 4 ครั้ง
      courseD_artist_nestedLoops_challenge2_2018:
        courseD_artist_nestedLoops_challenge2_a: เพื่อที่จะวาดรูปแปดหลี่ยมรูปหนึ่งนั้น
          ศิลปินต้องหันไปแต่ละครั้ง 45 องศาเป็นจำนวนทั้งสิ้น 8 ครั้ง
        courseD_artist_nestedLoops_challenge2_b: เพื่อที่จะวาดรูปสี่หลี่ยมจตุรัสรูปหนึ่งนั้น
          ศิลปินต้องหันไปแต่ละครั้ง 90 องศาเป็นจำนวนทั้งสิ้น 4 ครั้ง
      courseD_artist_nestedLoops_challenge2_2019:
        courseD_artist_nestedLoops_challenge2_a: เพื่อที่จะวาดรูปแปดหลี่ยมรูปหนึ่งนั้น
          ศิลปินต้องหันไปแต่ละครั้ง 45 องศาเป็นจำนวนทั้งสิ้น 8 ครั้ง
        courseD_artist_nestedLoops_challenge2_b: เพื่อที่จะวาดรูปสี่หลี่ยมจตุรัสรูปหนึ่งนั้น
          ศิลปินต้องหันไปแต่ละครั้ง 90 องศาเป็นจำนวนทั้งสิ้น 4 ครั้ง
      courseD_artist_project1:
        courseD_artist_project1_a: Use the drop down menu on the `turn` blocks to
          choose the angle you need!
        courseD_artist_project1_b: Remember that `move forward` draws a line, while
          `jump forward` does not.
      courseD_artist_project1_2018:
        courseD_artist_project1_a: Use the drop down menu on the `turn` blocks to
          choose the angle you need!
        courseD_artist_project1_b: Remember that `move forward` draws a line, while
          `jump forward` does not.
      courseD_artist_project1_2019:
        courseD_artist_project1_a: Use the drop down menu on the `turn` blocks to
          choose the angle you need!
        courseD_artist_project1_b: Remember that `move forward` draws a line, while
          `jump forward` does not.
      courseD_artist_project1a:
        courseD_artist_project1a_a: |-
          This stair step uses a 76 degree turn and repeats 4 times.

          <img src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png" width="200px" />
        courseD_artist_project1a_b: These patterns are a lot like the stair steps
          from other puzzles, but using a different angle.
      courseD_artist_project1a_2018:
        courseD_artist_project1a_a: |-
          This stair step uses a 76 degree turn and repeats 4 times.

          <img src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png" width="200px" />
        courseD_artist_project1a_b: These patterns are a lot like the stair steps
          from other puzzles, but using a different angle.
      courseD_artist_project1a_2019:
        courseD_artist_project1a_a: |-
          This stair step uses a 76 degree turn and repeats 4 times.

          <img src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png" width="200px" />
        courseD_artist_project1a_b: These patterns are a lot like the stair steps
          from other puzzles, but using a different angle.
      courseD_artist_project2:
        courseD_artist_project2_a: Remember that `move forward` draws a line, while
          `jump forward` does not.
        courseD_artist_project2_b: After you draw and move the first time, you can
          repeat the code by adding a loop around the outside.
      courseD_artist_project2_2018:
        courseD_artist_project2_a: Remember that `move forward` draws a line, while
          `jump forward` does not.
        courseD_artist_project2_b: After you draw and move the first time, you can
          repeat the code by adding a loop around the outside.
      courseD_artist_project2_2019:
        courseD_artist_project2_a: Remember that `move forward` draws a line, while
          `jump forward` does not.
        courseD_artist_project2_b: After you draw and move the first time, you can
          repeat the code by adding a loop around the outside.
      courseD_artist_project2a:
        courseD_artist_project2a_a: |-
          This drawing was made by nesting a loop of 4 stairs and a `turn right 180 degrees` block inside of a `repeat 2 times` block.

          <img src="https://images.code.org/bb24f9acee8afed2e119c1e920cb43f6-image-1495834479042.16.27.png" width="200px" />
      courseD_artist_project2a_2018:
        courseD_artist_project2a_a: |-
          This drawing was made by nesting a loop of 4 stairs and a `turn right 180 degrees` block inside of a `repeat 2 times` block.

          <img src="https://images.code.org/bb24f9acee8afed2e119c1e920cb43f6-image-1495834479042.16.27.png" width="200px" />
      courseD_artist_project2a_2019:
        courseD_artist_project2a_a: |-
          This drawing was made by nesting a loop of 4 stairs and a `turn right 180 degrees` block inside of a `repeat 2 times` block.

          <img src="https://images.code.org/bb24f9acee8afed2e119c1e920cb43f6-image-1495834479042.16.27.png" width="200px" />
      courseD_artist_project3:
        courseD_artist_project3_a: Use the drop down menu on the `turn` blocks to
          choose the angle you need!
        courseD_artist_project3_b: "Try nested loops!\n\nUse the code that you created
          to draw a line of shapes and nest it inside of another loop.  At the bottom,
          before the outside loop ends, add a block that will turn Elsa around.  \n\n-
          \  Try 72 degrees if you are repeating the outer loop 5 times\n-   Try 60
          degrees if you are repeating the outer loop 6 times"
      courseD_artist_project3_2018:
        courseD_artist_project3_a: Use the drop down menu on the `turn` blocks to
          choose the angle you need!
        courseD_artist_project3_b: "Try nested loops!\n\nUse the code that you created
          to draw a line of shapes and nest it inside of another loop.  At the bottom,
          before the outside loop ends, add a block that will turn Elsa around.  \n\n-
          \  Try 72 degrees if you are repeating the outer loop 5 times\n-   Try 60
          degrees if you are repeating the outer loop 6 times"
      courseD_artist_project3_2019:
        courseD_artist_project3_a: Use the drop down menu on the `turn` blocks to
          choose the angle you need!
        courseD_artist_project3_b: "Try nested loops!\n\nUse the code that you created
          to draw a line of shapes and nest it inside of another loop.  At the bottom,
          before the outside loop ends, add a block that will turn Elsa around.  \n\n-
          \  Try 72 degrees if you are repeating the outer loop 5 times\n-   Try 60
          degrees if you are repeating the outer loop 6 times"
      courseD_artist_project3a:
        courseD_artist_project3a_a: You can choose different amounts to rotate your
          shape! What about 18 times with a 20 degree turn in between?
      courseD_artist_project3a_2018:
        courseD_artist_project3a_a: You can choose different amounts to rotate your
          shape! What about 18 times with a 20 degree turn in between?
      courseD_artist_project3a_2019:
        courseD_artist_project3a_a: You can choose different amounts to rotate your
          shape! What about 18 times with a 20 degree turn in between?
      courseD_artist_project4:
        courseD_artist_project4_a: |-
          Here is the pentagon snowflake with a turn of 36 degrees before a triangle snowflake:

          <img src="https://images.code.org/2ba023db9404f948fab655bfa7923160-image-1495822526223.14.13.png" width="200px" />

          Here's a set of hexagons with squares:

          <img src="https://images.code.org/4d77462f3d07df6f1f5f2dc25e5d2b70-image-1495822526224.15.08.png" width="200px" />
        courseD_artist_project4_b: To try this, draw your first snowflake, turn, then
          draw a second snowflake.
      courseD_artist_project4_2018:
        courseD_artist_project4_a: |-
          Here is the pentagon snowflake with a turn of 36 degrees before a triangle snowflake:

          <img src="https://images.code.org/2ba023db9404f948fab655bfa7923160-image-1495822526223.14.13.png" width="200px" />

          Here's a set of hexagons with squares:

          <img src="https://images.code.org/4d77462f3d07df6f1f5f2dc25e5d2b70-image-1495822526224.15.08.png" width="200px" />
        courseD_artist_project4_b: To try this, draw your first snowflake, turn, then
          draw a second snowflake.
      courseD_artist_project4_2019:
        courseD_artist_project4_a: |-
          Here is the pentagon snowflake with a turn of 36 degrees before a triangle snowflake:

          <img src="https://images.code.org/2ba023db9404f948fab655bfa7923160-image-1495822526223.14.13.png" width="200px" />

          Here's a set of hexagons with squares:

          <img src="https://images.code.org/4d77462f3d07df6f1f5f2dc25e5d2b70-image-1495822526224.15.08.png" width="200px" />
        courseD_artist_project4_b: To try this, draw your first snowflake, turn, then
          draw a second snowflake.
      courseD_artist_project4a:
        courseD_artist_project4a_a: |-
          Here are two different lengths of snowflake, drawn one after another (with a 30 degree turn in between.)

          <img src="https://images.code.org/45dedb51d89d3e5d0a88fe65ecbd7d7b-image-1495833855890.22.39.png" width="200px" />
      courseD_artist_project4a_2018:
        courseD_artist_project4a_a: |-
          Here are two different lengths of snowflake, drawn one after another (with a 30 degree turn in between.)

          <img src="https://images.code.org/45dedb51d89d3e5d0a88fe65ecbd7d7b-image-1495833855890.22.39.png" width="200px" />
      courseD_artist_project4a_2019:
        courseD_artist_project4a_a: |-
          Here are two different lengths of snowflake, drawn one after another (with a 30 degree turn in between.)

          <img src="https://images.code.org/45dedb51d89d3e5d0a88fe65ecbd7d7b-image-1495833855890.22.39.png" width="200px" />
      courseD_artist_project5:
        courseD_artist_project4_a: |-
          Lines of 2 hexagons and 4 triangles:

          <img src="https://images.code.org/37ca9779bafd2ccc5cc801f82358008e-image-1495823683964.34.09.png" width="200px" />
      courseD_artist_project5_2018:
        courseD_artist_project4_a: |-
          Lines of 2 hexagons and 4 triangles:

          <img src="https://images.code.org/37ca9779bafd2ccc5cc801f82358008e-image-1495823683964.34.09.png" width="200px" />
      courseD_artist_project5_2019:
        courseD_artist_project4_a: |-
          Lines of 2 hexagons and 4 triangles:

          <img src="https://images.code.org/37ca9779bafd2ccc5cc801f82358008e-image-1495823683964.34.09.png" width="200px" />
      courseD_artist_ramp11:
        courseD_artist_ramp11a: To draw a side, use the `move forward by 100 pixels`
          block, and change the 100 to a 200.
        courseD_artist_ramp11b: |-
          To draw 4 sides, put a `move forward by 200 pixels` block inside of a repeat loop and make sure the loop is set to draw 4 times.

          Don't forget to turn afterward!
        courseD_artist_ramp11_c: Remember to put the `turn` block inside of your loop!
      courseD_artist_ramp12:
        courseD_artist_ramp12_a: You can either draw the square first, then the triangle,
          or do it the other way around!
        courseD_artist_ramp12_b: Try splitting the problem into 2 parts, and using
          2 loops.
        courseD_artist_ramp12_c: คุณสามารถใช้รายการเลือกแบบดึงลง(drop down menu) ที่อยุ่บนบล็อก
          ' หัน... ไป... องศา' เพื่อเลือกดูขนาดองศาของมุมที่คุณต้องการใช้!
      courseD_autorun_binary2_2019:
        courseD_artist_binary2_a: เพียงคลิก `เริ่ม`เพื่อดูโปรแกรมนี้ทำงาน
      courseD_autorun_binary3_2019:
        courseD_artist_binary3_a: One of the four binary patterns in the toolbox will
          solve this puzzle!
        courseD_artist_binary3_b: ไม่ต้องกลัวว่าคุณจะทำผิด! ลองเขียนไบนารีและเรียกใช้งานโค้ด
          เพื่อดูว่าจะเกิดอะไรขึ้น ถึงแม้ว่าคุณยังจะแก้ปริศนาไม่ออกก็ตาม
      courseD_autorun_binary4_2019:
        courseD_artist_binary4_a: ให้มองดูที่สี่เหลี่ยมจตุรัสสามอันแรกแถวบนสุด คุณสามารถทำรูปทั้งสามเหล่านี้ซ้ำแล้วซ้ำอีกเพื่อให้ได้รูปแบบทั้งผืนตามที่คุณต้องการ
          ได้หรือไม่?
        courseD_artist_binary4_b: อย่ากลัวที่จะทำผิดพลาด! ลองเขียนไบนารีและเรียกใช้งานโค้ด
          เพื่อดูว่าจะเกิดอะไรขึ้น ถึงแม้ว่าคุณเองจะไม่ได้คิดว่าคุณจะสามารถแก้ไขปริศนาได้แล้วก็ตาม
      courseD_autorun_binary5_2019:
        courseD_artist_binary5_a: ลองเรียกใช้งานโค้ดดูก่อน เพื่อดูว่า มีอะไรที่คุณใช้ได้บ้าง
        courseD_artist_binary5_b: คุณแค่สลับแถว เพียงสองแถวเพื่อสร้างรอยยิ้ม
        courseD_artist_binary5_c: หากคุณมีปัญหาในการแก้ปริศนานี้ ลองเขียนโค้ดไบนารีแถวนั้นลงบนกระดาษสักแผ่น
          แล้วมองหาดูว่ามีรูปแบบอะไร
      courseD_autorun_binary6_2019:
        courseD_artist_binary6_a: เริ่มต้นที่ด้านซ้ายบนสุด สังเกตุว่ามันจะไปไกลเท่าไหร่
          ก่อนที่รูปแบบจะเริ่มซ้ำไปซ้ำมา?
        courseD_artist_binary6_b: คุณสามารถสร้างสายอัขระไบนารีทีละเล็กทีละน้อย และทำการทดสอบไปเรื่อยๆ!
      courseD_autorun_binary7_2019:
        courseD_artist_binary7_a: เริ่มต้นที่ด้านซ้ายบนสุด สังเกตุว่ามันจะไปไกลเท่าไหร่
          ก่อนที่รูปแบบจะเริ่มซ้ำไปซ้ำมา?
        courseD_artist_binary7_b: อย่ากลัวที่จะทำผิดพลาด! ลองเขียนไบนารีและเรียกใช้งานโค้ด
          เพื่อดูว่าจะเกิดอะไรขึ้น ถึงแม้ว่าคุณเองจะไม่ได้คิดว่าคุณจะสามารถแก้ไขปริศนาได้แล้วก็ตาม
      courseD_autorun_binary8_2019:
        courseD_artist_binary8_a: รูปเกลียวนั้นสามารถสร้างความสับสนในบางครั้ง. แยกเส้นแนวนอนแต่ละเส้นไว้ในใจของคุณในขณะที่คุณออกแบบ
        courseD_artist_binary8_b: ลองเรียกใช้งานโค้ดดูก่อน เพื่อดูว่า มีอะไรที่คุณใช้ได้บ้าง
        courseD_artist_binary8_c: ไม่ต้องกลัวว่าคุณจะทำผิด! ลองเขียนไบนารีและเรียกใช้งานโค้ด
          เพื่อดูว่าจะเกิดอะไรขึ้น ถึงแม้ว่าคุณยังจะแก้ปริศนาไม่ออกก็ตาม
      courseD_bee_conditionals1_predict1:
        courseD_bee_conditionals1_a: You will need to use an `if` block to check to
          see if there is a flower beneath the cloud before you try to get nectar.
      courseD_bee_conditionals1_predict1_2018:
        courseD_bee_conditionals1_a: You will need to use an `if` block to check to
          see if there is a flower beneath the cloud before you try to get nectar.
      courseD_bee_conditionals1_predict1_2019:
        courseD_bee_conditionals1_a: You will need to use an `if` block to check to
          see if there is a flower beneath the cloud before you try to get nectar.
      courseD_bee_conditionals1_predict1_copy:
        courseD_bee_conditionals1_a: You will need to use an `if` block to check to
          see if there is a flower beneath the cloud before you try to get nectar.
      courseD_bee_conditionals2:
        courseD_bee_conditionals2_hintVid1: ต้องการให้ช่วยอะไรไหมก่อนที่คุณจะเริ่ม?
          ลองดูวิดีโอซิ!
        courseD_bee_conditionals2_a: บางทีดอกไม้ก็จะอยู่ตรงนั้น บางทีก็ไม่อยู่ ถ้าคุณต้องการให้โค้ดของคุณทำงานได้ทั้งสองกรณ๊
          ให้แน่ใจว่าคุณใช้ คำสั่ง `ถ้า(if)`
        courseD_bee_conditionals2_b: You can use a `repeat` loop or a `while path
          ahead` to move through this maze.
        courseD_bee_conditionals2_c: You don't have to check for honeycombs, there
          will only be flowers or blank spaces under the clouds.
        courseD_bee_conditionals2_hintVid2: ดูวิดีโอเรื่องนี้เพื่อช่วยในการแก้ปริศนา
      courseD_bee_conditionals2_2018:
        courseD_bee_conditionals2_hintVid1: ต้องการให้ช่วยอะไรไหมก่อนที่คุณจะเริ่ม?
          ลองดูวิดีโอซิ!
        courseD_bee_conditionals2_a: บางทีดอกไม้ก็จะอยู่ตรงนั้น บางทีก็ไม่อยู่ ถ้าคุณต้องการให้โค้ดของคุณทำงานได้ทั้งสองกรณ๊
          ให้แน่ใจว่าคุณใช้ คำสั่ง `ถ้า(if)`
        courseD_bee_conditionals2_b: You can use a `repeat` loop or a `while path
          ahead` to move through this maze.
        courseD_bee_conditionals2_c: You don't have to check for honeycombs, there
          will only be flowers or blank spaces under the clouds.
        courseD_bee_conditionals2_hintVid2: ดูวิดีโอเรื่องนี้เพื่อช่วยในการแก้ปริศนา
      courseD_bee_conditionals2_2019:
        courseD_bee_conditionals2_a: บางทีดอกไม้ก็จะอยู่ตรงนั้น บางทีก็ไม่อยู่ ถ้าคุณต้องการให้โค้ดของคุณทำงานได้ทั้งสองกรณ๊
          ให้แน่ใจว่าคุณใช้ คำสั่ง `ถ้า(if)`
        courseD_bee_conditionals2_c: You don't have to check for honeycombs, there
          will only be flowers or blank spaces under the clouds.
      courseD_bee_conditionals2_copy:
        courseD_bee_conditionals2_hintVid1: ต้องการให้ช่วยอะไรไหมก่อนที่คุณจะเริ่ม?
          ลองดูวิดีโอซิ!
        courseD_bee_conditionals2_a: บางทีดอกไม้ก็จะอยู่ตรงนั้น บางทีก็ไม่อยู่ ถ้าคุณต้องการให้โค้ดของคุณทำงานได้ทั้งสองกรณ๊
          ให้แน่ใจว่าคุณใช้ คำสั่ง `ถ้า(if)`
        courseD_bee_conditionals2_b: You can use a `repeat` loop or a `while path
          ahead` to move through this maze.
        courseD_bee_conditionals2_c: You don't have to check for honeycombs, there
          will only be flowers or blank spaces under the clouds.
        courseD_bee_conditionals2_hintVid2: ดูวิดีโอเรื่องนี้เพื่อช่วยในการแก้ปริศนา
      courseD_bee_conditionals3:
        courseD_bee_conditionals3_hintVid1: ต้องการให้ช่วยอะไรไหมก่อนที่คุณจะเริ่ม?
          ลองดูวิดีโอซิ!
        courseD_bee_conditionals3_a: ให้แน่ใจว่าคุณใช้ คำสั่ง`ถ้า(if)`เพื่อเช็คพื้นที่ว่างแต่ละอันว่ามีดอกไม้อยู่หรือไม่
        courseD_bee_conditionals3_b: You can use a `repeat` loop or a `while` loop
          to keep the bee moving forward. Use whichever one you like!
        courseD_bee_conditionals3_c: ไม่ต้องกลัวว่าคุณจะทำผิด! ลองเพิ่มบล็อกเข้าไปและเรียกโค้ดมาใช้งาน
          เพื่อดูว่าจะเกิดอะไรขึ้นถึงแม้ว่าคุณยังจะแก้ปริศนาไม่ออกก็ตาม
        courseD_bee_conditionals3_hintVid2: ดูวิดีโอเรื่องนี้เพื่อช่วยในการแก้ปริศนา
      courseD_bee_conditionals3_2018:
        courseD_bee_conditionals3_hintVid1: ต้องการให้ช่วยอะไรไหมก่อนที่คุณจะเริ่ม?
          ลองดูวิดีโอซิ!
        courseD_bee_conditionals3_a: ให้แน่ใจว่าคุณใช้ คำสั่ง`ถ้า(if)`เพื่อเช็คพื้นที่ว่างแต่ละอันว่ามีดอกไม้อยู่หรือไม่
        courseD_bee_conditionals3_b: You can use a `repeat` loop or a `while` loop
          to keep the bee moving forward. Use whichever one you like!
        courseD_bee_conditionals3_c: ไม่ต้องกลัวว่าคุณจะทำผิด! ลองเพิ่มบล็อกเข้าไปและเรียกโค้ดมาใช้งาน
          เพื่อดูว่าจะเกิดอะไรขึ้นถึงแม้ว่าคุณยังจะแก้ปริศนาไม่ออกก็ตาม
        courseD_bee_conditionals3_hintVid2: ดูวิดีโอเรื่องนี้เพื่อช่วยในการแก้ปริศนา
      courseD_bee_conditionals3_2019:
        courseD_bee_conditionals3_a: ให้แน่ใจว่าคุณใช้ คำสั่ง`ถ้า(if)`เพื่อเช็คพื้นที่ว่างแต่ละอันว่ามีดอกไม้อยู่หรือไม่
        courseD_bee_conditionals3_c: ไม่ต้องกลัวว่าคุณจะทำผิด! ลองเพิ่มบล็อกเข้าไปและเรียกโค้ดมาใช้งาน
          เพื่อดูว่าจะเกิดอะไรขึ้นถึงแม้ว่าคุณยังจะแก้ปริศนาไม่ออกก็ตาม
      courseD_bee_conditionals3_copy:
        courseD_bee_conditionals3_hintVid1: ต้องการให้ช่วยอะไรไหมก่อนที่คุณจะเริ่ม?
          ลองดูวิดีโอซิ!
        courseD_bee_conditionals3_a: ให้แน่ใจว่าคุณใช้ คำสั่ง`ถ้า(if)`เพื่อเช็คพื้นที่ว่างแต่ละอันว่ามีดอกไม้อยู่หรือไม่
        courseD_bee_conditionals3_b: You can use a `repeat` loop or a `while` loop
          to keep the bee moving forward. Use whichever one you like!
        courseD_bee_conditionals3_c: ไม่ต้องกลัวว่าคุณจะทำผิด! ลองเพิ่มบล็อกเข้าไปและเรียกโค้ดมาใช้งาน
          เพื่อดูว่าจะเกิดอะไรขึ้นถึงแม้ว่าคุณยังจะแก้ปริศนาไม่ออกก็ตาม
        courseD_bee_conditionals3_hintVid2: ดูวิดีโอเรื่องนี้เพื่อช่วยในการแก้ปริศนา
      courseD_bee_conditionals4:
        courseD_bee_conditionals4_hintVid1: ต้องการให้ช่วยอะไรไหมก่อนที่คุณจะเริ่ม?
          ลองดูวิดีโอซิ!
        courseD_bee_conditionals4_a: คุณถือเสมือนว่า ทุกพื้นที่นั้นหมือนกับว่ามีเมฆปกคลุมอยู่
          แม้ว่าคุณจะสามารถมองเห็นเส้นทางทั้งหมดก็ตาม
        courseD_bee_conditionals4_b: 'Use an `if` statement inside your loop to check
          each space for nectar. '
        courseD_bee_conditionals4_c: Using <xml><block type="maze_untilBlocked"/></xml>
          block, you should move forward and check for a flower. If there is a flower,
          what should the bee do?
        courseD_bee_conditionals4_hintVid2: ดูวิดีโอเรื่องนี้เพื่อช่วยในการแก้ปริศนา
      courseD_bee_conditionals4_2018:
        courseD_bee_conditionals4_hintVid1: ต้องการให้ช่วยอะไรไหมก่อนที่คุณจะเริ่ม?
          ลองดูวิดีโอซิ!
        courseD_bee_conditionals4_a: คุณถือเสมือนว่า ทุกพื้นที่นั้นหมือนกับว่ามีเมฆปกคลุมอยู่
          แม้ว่าคุณจะสามารถมองเห็นเส้นทางทั้งหมดก็ตาม
        courseD_bee_conditionals4_b: 'Use an `if` statement inside your loop to check
          each space for nectar. '
        courseD_bee_conditionals4_c: Using <xml><block type="maze_untilBlocked"/></xml>
          block, you should move forward and check for a flower. If there is a flower,
          what should the bee do?
        courseD_bee_conditionals4_hintVid2: ดูวิดีโอเรื่องนี้เพื่อช่วยในการแก้ปริศนา
      courseD_bee_conditionals4_2019:
        courseD_bee_conditionals4_a: คุณถือเสมือนว่า ทุกพื้นที่นั้นหมือนกับว่ามีเมฆปกคลุมอยู่
          แม้ว่าคุณจะสามารถมองเห็นเส้นทางทั้งหมดก็ตาม
        courseD_bee_conditionals4_b: 'Use an `if` statement inside your loop to check
          each space for nectar. '
      courseD_bee_conditionals4_copy:
        courseD_bee_conditionals4_hintVid1: ต้องการให้ช่วยอะไรไหมก่อนที่คุณจะเริ่ม?
          ลองดูวิดีโอซิ!
        courseD_bee_conditionals4_a: คุณถือเสมือนว่า ทุกพื้นที่นั้นหมือนกับว่ามีเมฆปกคลุมอยู่
          แม้ว่าคุณจะสามารถมองเห็นเส้นทางทั้งหมดก็ตาม
        courseD_bee_conditionals4_b: 'Use an `if` statement inside your loop to check
          each space for nectar. '
        courseD_bee_conditionals4_c: Using <xml><block type="maze_untilBlocked"/></xml>
          block, you should move forward and check for a flower. If there is a flower,
          what should the bee do?
        courseD_bee_conditionals4_hintVid2: ดูวิดีโอเรื่องนี้เพื่อช่วยในการแก้ปริศนา
      courseD_bee_conditionals5:
        courseD_bee_conditionals5_hintVid1: ต้องการให้ช่วยอะไรไหมก่อนที่คุณจะเริ่ม?
          ลองดูวิดีโอซิ!
        courseD_bee_conditionals5_a: ให้คิดว่าทุกด้านของเส้นทางสี่เหลี่ยมผืนผ้าเป็นเส้นทางโดยตัวของมันเอง
          แล้วใช้ลูปซ้อนกันด้วยการใช้บล็อก `ทำซ้ำ` อยู่ด้านนอกและบล็อก\` ขณะที่ยังมีทางข้างหน้า
          ' ลูปอยู่ข้างใน ให้ถามว่ามีวิถีทางกี่ทางที่ผึ้งต้องบินถ้าผึ้งต้องการบินไปมาทุกด้านที่มีดอกไม้?
        courseD_bee_conditionals5_c: There are 3 sides of the rectangle with flowers,
          so the code needs to `repeat 3 times`. In every repeat, the bee will need
          to continue along the path, `while there is a path ahead`. To continue down
          the path, the bee will need to `move forward`. While on the path, the bee
          needs to check for a flower. `if there is a flower`, the bee should `get
          nectar`.
        courseD_bee_conditionals5_b: Inside the `while there is a path ahead` block
          you will need to move forward and check for a flower. How do you check if
          there is a flower? What do you do if there is a flower?
        courseD_bee_conditionals5_hintVid2: ดูวิดีโอเรื่องนี้เพื่อช่วยในการแก้ปริศนา
      courseD_bee_conditionals5_2018:
        courseD_bee_conditionals5_hintVid1: ต้องการให้ช่วยอะไรไหมก่อนที่คุณจะเริ่ม?
          ลองดูวิดีโอซิ!
        courseD_bee_conditionals5_a: ให้คิดว่าทุกด้านของเส้นทางสี่เหลี่ยมผืนผ้าเป็นเส้นทางโดยตัวของมันเอง
          แล้วใช้ลูปซ้อนกันด้วยการใช้บล็อก `ทำซ้ำ` อยู่ด้านนอกและบล็อก\` ขณะที่ยังมีทางข้างหน้า
          ' ลูปอยู่ข้างใน ให้ถามว่ามีวิถีทางกี่ทางที่ผึ้งต้องบินถ้าผึ้งต้องการบินไปมาทุกด้านที่มีดอกไม้?
        courseD_bee_conditionals5_c: There are 3 sides of the rectangle with flowers,
          so the code needs to `repeat 3 times`. In every repeat, the bee will need
          to continue along the path, `while path ahead`. To continue down the path,
          the bee will need to `move forward`. While on the path, the bee needs to
          check for a flower. `if there is a flower`, the bee should `get nectar`.
        courseD_bee_conditionals5_b: Inside the `while path ahead` block you will
          need to move forward and check for a flower. How do you check if there is
          a flower? What do you do if there is a flower?
        courseD_bee_conditionals5_hintVid2: ดูวิดีโอเรื่องนี้เพื่อช่วยในการแก้ปริศนา
      courseD_bee_conditionals5_2019:
        courseD_bee_conditionals5_a: If you use an `if at flower` block, you can solve
          this using a nested loop. Write a program for the left and bottom paths,
          then repeat everything twice!
        courseD_bee_conditionals5_c: To continue down the path, the bee will need
          to `move forward`. As it moves, the bee needs to check for a flower. `if
          there is a flower`, the bee should `get nectar`.
      courseD_bee_conditionals5_copy:
        courseD_bee_conditionals5_hintVid1: ต้องการให้ช่วยอะไรไหมก่อนที่คุณจะเริ่ม?
          ลองดูวิดีโอซิ!
        courseD_bee_conditionals5_a: ให้คิดว่าทุกด้านของเส้นทางสี่เหลี่ยมผืนผ้าเป็นเส้นทางโดยตัวของมันเอง
          แล้วใช้ลูปซ้อนกันด้วยการใช้บล็อก `ทำซ้ำ` อยู่ด้านนอกและบล็อก\` ขณะที่ยังมีทางข้างหน้า
          ' ลูปอยู่ข้างใน ให้ถามว่ามีวิถีทางกี่ทางที่ผึ้งต้องบินถ้าผึ้งต้องการบินไปมาทุกด้านที่มีดอกไม้?
        courseD_bee_conditionals5_c: There are 3 sides of the rectangle with flowers,
          so the code needs to `repeat 3 times`. In every repeat, the bee will need
          to continue along the path, `while there is a path ahead`. To continue down
          the path, the bee will need to `move forward`. While on the path, the bee
          needs to check for a flower. `if there is a flower`, the bee should `get
          nectar`.
        courseD_bee_conditionals5_b: Inside the `while there is a path ahead` block
          you will need to move forward and check for a flower. How do you check if
          there is a flower? What do you do if there is a flower?
        courseD_bee_conditionals5_hintVid2: ดูวิดีโอเรื่องนี้เพื่อช่วยในการแก้ปริศนา
      courseD_bee_conditionals6:
        courseD_bee_conditionals6_hintVid1: ต้องการให้ช่วยอะไรไหมก่อนที่คุณจะเริ่ม?
          ลองดูวิดีโอซิ!
        courseD_bee_conditionals6_a: ให้แน่ใจว่า คุณใช้คำลั่ง `ถ้า(if)` เพื่อเช็คดูรวงผึ้งใต้เมฆแต่ละก้อน
        courseD_bee_conditionals6_b: ในกรณีนี้ คุณไม่จำเป็นต้องเช็คดูว่ามีดอกไม้อยู่ใต้เมฆหรือไม่
        courseD_bee_conditionals6_c: Is there a loop you can use to make your code
          simpler?
        courseD_bee_conditionals6_hintVid2: ดูวิดีโอเรื่องนี้เพื่อช่วยในการแก้ปริศนา
      courseD_bee_conditionals6_2018:
        courseD_bee_conditionals6_hintVid1: ต้องการให้ช่วยอะไรไหมก่อนที่คุณจะเริ่ม?
          ลองดูวิดีโอซิ!
        courseD_bee_conditionals6_a: ให้แน่ใจว่า คุณใช้คำลั่ง `ถ้า(if)` เพื่อเช็คดูรวงผึ้งใต้เมฆแต่ละก้อน
        courseD_bee_conditionals6_b: ในกรณีนี้ คุณไม่จำเป็นต้องเช็คดูว่ามีดอกไม้อยู่ใต้เมฆหรือไม่
        courseD_bee_conditionals6_c: Is there a loop you can use to make your code
          simpler?
        courseD_bee_conditionals6_hintVid2: ดูวิดีโอเรื่องนี้เพื่อช่วยในการแก้ปริศนา
      courseD_bee_conditionals6_2019:
        courseD_bee_conditionals6_a: ให้แน่ใจว่า คุณใช้คำลั่ง `ถ้า(if)` เพื่อเช็คดูรวงผึ้งใต้เมฆแต่ละก้อน
        courseD_bee_conditionals6_b: ในกรณีนี้ คุณไม่จำเป็นต้องเช็คดูว่ามีดอกไม้อยู่ใต้เมฆหรือไม่
        courseD_bee_conditionals6_c: Is there a loop you can use to make your code
          simpler?
      courseD_bee_conditionals7:
        courseD_bee_conditionals7_hintVid1: ต้องการให้ช่วยอะไรไหมก่อนที่คุณจะเริ่ม?
          ลองดูวิดีโอซิ!
        courseD_bee_conditionals7_a: |-
          **ข้อควรจำ:** ปริศนานี้เปลี่ยนแปลงทุกครั้งที่ถูกเรียกใช้งาน

          คุณควรที่จะต้องใช้บล็อกเงื่อนไข  (`ถ้า(if)` หรือ `ถ้า/อย่างอื่น(if/else)`) เพื่อแก้ปัญหาที่ท้าทายนี้
        courseD_bee_conditionals7_b: ถ้าไม่มีดอกไม้ภายใต้ก้อนเมฆ ก็ต้องมีรวงผึ้ง ดังนั้นไม่จำเป็นเลยที่จะต้องคิดถึงกรณีที่เป็นที่ว่าง
          ที่ไม่มีทั้งดอกไม้หรือรวงผึ้ง
        courseD_bee_conditionals7_hintVid2: ดูวิดีโอเรื่องนี้เพื่อช่วยในการแก้ปริศนา
      courseD_bee_conditionals7_2018:
        courseD_bee_conditionals7_hintVid1: ต้องการให้ช่วยอะไรไหมก่อนที่คุณจะเริ่ม?
          ลองดูวิดีโอซิ!
        courseD_bee_conditionals7_a: |-
          **ข้อควรจำ:** ปริศนานี้เปลี่ยนแปลงทุกครั้งที่ถูกเรียกใช้งาน

          คุณควรที่จะต้องใช้บล็อกเงื่อนไข  (`ถ้า(if)` หรือ `ถ้า/อย่างอื่น(if/else)`) เพื่อแก้ปัญหาที่ท้าทายนี้
        courseD_bee_conditionals7_b: ถ้าไม่มีดอกไม้ภายใต้ก้อนเมฆ ก็ต้องมีรวงผึ้ง ดังนั้นไม่จำเป็นเลยที่จะต้องคิดถึงกรณีที่เป็นที่ว่าง
          ที่ไม่มีทั้งดอกไม้หรือรวงผึ้ง
        courseD_bee_conditionals7_hintVid2: ดูวิดีโอเรื่องนี้เพื่อช่วยในการแก้ปริศนา
      courseD_bee_conditionals7_2019:
        courseD_bee_conditionals7_a: |-
          **ข้อควรจำ:** ปริศนานี้เปลี่ยนแปลงทุกครั้งที่ถูกเรียกใช้งาน

          คุณควรที่จะต้องใช้บล็อกเงื่อนไข  (`ถ้า(if)` หรือ `ถ้า/อย่างอื่น(if/else)`) เพื่อแก้ปัญหาที่ท้าทายนี้
        courseD_bee_conditionals7_b: ถ้าไม่มีดอกไม้ภายใต้ก้อนเมฆ ก็ต้องมีรวงผึ้ง ดังนั้นไม่จำเป็นเลยที่จะต้องคิดถึงกรณีที่เป็นที่ว่าง
          ที่ไม่มีทั้งดอกไม้หรือรวงผึ้ง
      courseD_bee_conditionals7_predict2:
        courseD_bee_conditionals7_a: |-
          **ข้อควรจำ:** ปริศนานี้เปลี่ยนแปลงทุกครั้งที่ถูกเรียกใช้งาน

          คุณควรที่จะต้องใช้บล็อกเงื่อนไข  (`ถ้า(if)` หรือ `ถ้า/อย่างอื่น(if/else)`) เพื่อแก้ปัญหาที่ท้าทายนี้
      courseD_bee_conditionals7_predict2_2018:
        courseD_bee_conditionals7_a: |-
          **ข้อควรจำ:** ปริศนานี้เปลี่ยนแปลงทุกครั้งที่ถูกเรียกใช้งาน

          คุณควรที่จะต้องใช้บล็อกเงื่อนไข  (`ถ้า(if)` หรือ `ถ้า/อย่างอื่น(if/else)`) เพื่อแก้ปัญหาที่ท้าทายนี้
      courseD_bee_conditionals7_predict2_2019:
        courseD_bee_conditionals7_a: |-
          **ข้อควรจำ:** ปริศนานี้เปลี่ยนแปลงทุกครั้งที่ถูกเรียกใช้งาน

          คุณควรที่จะต้องใช้บล็อกเงื่อนไข  (`ถ้า(if)` หรือ `ถ้า/อย่างอื่น(if/else)`) เพื่อแก้ปัญหาที่ท้าทายนี้
      courseD_bee_conditionals8:
        courseD_bee_conditionals8_hintVid1: ต้องการให้ช่วยอะไรไหมก่อนที่คุณจะเริ่ม?
          ลองดูวิดีโอซิ!
        courseD_bee_conditionals8_a: |-
          **ข้อควรจำ:** ปริศนานี้เปลี่ยนแปลงทุกครั้งที่ถูกเรียกใช้งาน

          คุณควรที่จะต้องใช้บล็อกเงื่อนไข  (`ถ้า(if)` หรือ `ถ้า/อย่างอื่น(if/else)`) เพื่อแก้ปัญหาที่ท้าทายนี้
        courseD_bee_conditionals8_b: |-
          This puzzle is tricky, because you can't check blank squares, nectar, _and_ honey with just one single conditional.

          Only check for nectar and honey at the end of your path.
        courseD_bee_conditionals8_c: How can you make sure to travel to the end every
          path, no matter how long the path is?
        courseD_bee_conditionals8_d: |-
          Even though there is a cloud right in front of you, you don't have to visit it first. Try starting with the cloud in the bottom right of the square.

          ![](https://images.code.org/166e71553edf23bf13ecd290a8e7e721-image-1501013509361.09.09.png)
        courseD_bee_conditionals8_hintVid2: ดูวิดีโอเรื่องนี้เพื่อช่วยในการแก้ปริศนา
      courseD_bee_conditionals8_2018:
        courseD_bee_conditionals8_hintVid1: ต้องการให้ช่วยอะไรไหมก่อนที่คุณจะเริ่ม?
          ลองดูวิดีโอซิ!
        courseD_bee_conditionals8_a: |-
          **ข้อควรจำ:** ปริศนานี้เปลี่ยนแปลงทุกครั้งที่ถูกเรียกใช้งาน

          คุณควรที่จะต้องใช้บล็อกเงื่อนไข  (`ถ้า(if)` หรือ `ถ้า/อย่างอื่น(if/else)`) เพื่อแก้ปัญหาที่ท้าทายนี้
        courseD_bee_conditionals8_b: |-
          This puzzle is tricky, because you can't check blank squares, nectar, _and_ honey with just one single conditional.

          Only check for nectar and honey at the end of your path.
        courseD_bee_conditionals8_c: How can you make sure to travel to the end every
          path, no matter how long the path is?
        courseD_bee_conditionals8_d: |-
          Even though there is a cloud right in front of you, you don't have to visit it first. Try starting with the cloud in the bottom right of the square.

          ![](https://images.code.org/166e71553edf23bf13ecd290a8e7e721-image-1501013509361.09.09.png)
        courseD_bee_conditionals8_hintVid2: ดูวิดีโอเรื่องนี้เพื่อช่วยในการแก้ปริศนา
      courseD_bee_conditionals8_2019:
        courseD_bee_conditionals8_a: |-
          **ข้อควรจำ:** ปริศนานี้เปลี่ยนแปลงทุกครั้งที่ถูกเรียกใช้งาน

          คุณควรที่จะต้องใช้บล็อกเงื่อนไข  (`ถ้า(if)` หรือ `ถ้า/อย่างอื่น(if/else)`) เพื่อแก้ปัญหาที่ท้าทายนี้
        courseD_bee_conditionals8_b: |-
          This puzzle is tricky, because you can't check blank squares, nectar, _and_ honey with just one single conditional.

          Only check for nectar and honey at the end of your path.
      courseD_bee_conditionals_challenge1:
        courseD_bee_conditionals_challenge1_a: Can you find a path that reaches every
          flower and honeycomb without hitting any trees? The best path is a spiral.
        courseD_bee_conditionals_challenge1_b: สำกรับปริศนาด่านนี้ แต่ละพื้นที่อาจจะมีดอกไม้
          รวงผึ้ง หรือว่างเปล่า  ซึ่งหมายความว่า คุณสามารถใช้การทำซ้ำเงื่อนไขของคุณที่เป็น
          `ถ้า/ไม่เช่นนั้น (if/else)` ในแต่ละช่องที่ผึ้งบินผ่านไป
      courseD_bee_conditionals_challenge1_2018:
        courseD_bee_conditionals_challenge1_a: Can you find a path that reaches every
          flower and honeycomb without hitting any trees? The best path is a spiral.
        courseD_bee_conditionals_challenge1_b: สำกรับปริศนาด่านนี้ แต่ละพื้นที่อาจจะมีดอกไม้
          รวงผึ้ง หรือว่างเปล่า  ซึ่งหมายความว่า คุณสามารถใช้การทำซ้ำเงื่อนไขของคุณที่เป็น
          `ถ้า/ไม่เช่นนั้น (if/else)` ในแต่ละช่องที่ผึ้งบินผ่านไป
      courseD_bee_conditionals_challenge1_2019:
        courseD_bee_conditionals_challenge1_a: Can you find a path that reaches every
          flower and honeycomb without hitting any trees? The best path is a spiral.
        courseD_bee_conditionals_challenge1_b: สำกรับปริศนาด่านนี้ แต่ละพื้นที่อาจจะมีดอกไม้
          รวงผึ้ง หรือว่างเปล่า  ซึ่งหมายความว่า คุณสามารถใช้การทำซ้ำเงื่อนไขของคุณที่เป็น
          `ถ้า/ไม่เช่นนั้น (if/else)` ในแต่ละช่องที่ผึ้งบินผ่านไป
      courseD_bee_conditionals_challenge2:
        courseD_bee_conditionals_challenge1_b: |-
          Just like the `if at flower` blocks, the code inside a `while nectar > 0` will only run if the bee is at a flower. The difference is that the code inside will run over and over until there is no nectar left.  Try this pattern:

          <xml>  <block type="bee_whileNectarAmount">
              <title name="ARG1">nectarRemaining</title>
              <title name="OP">&gt;</title>
              <title name="ARG2">0</title>                    <statement name="DO">
                                <block type="maze_nectar"/>
                              </statement>
            </block></xml>
      courseD_bee_conditionals_challenge2_2018:
        courseD_bee_conditionals_challenge1_b: |-
          Just like the `if at flower` blocks, the code inside a `while nectar > 0` will only run if the bee is at a flower. The difference is that the code inside will run over and over until there is no nectar left.  Try this pattern:

          <xml>  <block type="bee_whileNectarAmount">
              <title name="ARG1">nectarRemaining</title>
              <title name="OP">&gt;</title>
              <title name="ARG2">0</title>                    <statement name="DO">
                                <block type="maze_nectar"/>
                              </statement>
            </block></xml>
      courseD_bee_conditionals_challenge2_2019:
        courseD_bee_conditionals_challenge1_b: |-
          Just like the `if at flower` blocks, the code inside a `while nectar > 0` will only run if the bee is at a flower. The difference is that the code inside will run over and over until there is no nectar left.  Try this pattern:

          <xml>  <block type="bee_whileNectarAmount">
              <title name="ARG1">nectarRemaining</title>
              <title name="OP">&gt;</title>
              <title name="ARG2">0</title>                    <statement name="DO">
                                <block type="maze_nectar"/>
                              </statement>
            </block></xml>
      courseD_bee_debugging_challenge1:
        courseD_bee_debugging_challenge1_a: Why does the first half of this program
          work? Think about why the bee needs to move backward. How much nectar does
          the bee collect each time it moves over a flower?
        courseD_bee_debugging_challenge1_b: On the way back, have the bee follow the
          same pattern. How much honey does the bee need to make each time it moves
          over a honey comb?
        courseD_bee_debugging_challenge1_c: |-
          After the bee makes it to the bottom row, have it repeat these commands:

          -   Repeat 2 times:
              -   Move forward
              -   Make 3 honey
          -   Move backward
      courseD_bee_debugging_challenge1a:
        courseD_bee_debugging_challenge1_a: Why does the first half of this program
          work? Think about why the bee needs to move backward. How much nectar does
          the bee collect each time it moves over a flower?
        courseD_bee_debugging_challenge1_b: To solve this puzzle, have the bee follow
          the same pattern to make honey that it does when collecting nectar.
        courseD_bee_debugging_challenge1_c: |-
          After the bee makes it to the bottom row, have it repeat these commands:

          <xml><block type="controls_repeat">
                              <title name="TIMES">2</title>
                              <statement name="DO">
                                <block type="maze_move">
                                  <title name="DIR">moveForward</title>
                                  <next>
                                    <block type="maze_honey"/>
                                  </next>
                                </block>
                              </statement>
                              <next>
                                <block type="maze_move">
                                  <title name="DIR">moveBackward</title>
                                </block>
                              </next>
                            </block></xml>
      courseD_bee_nestedLoops1:
        courseD_bee_nestedLoops1_a: Not working?  Try using the "Step" button to see
          what happens line by line.
        courseD_bee_nestedLoops1_b: Try writing code for one side of the square first.
          Can you loop this to get all of the nectar?
        courseD_bee_nestedLoops1_c: Remember to use the `get nectar` block once you
          are on a square with a flower.
      courseD_bee_nestedLoops1_2018:
        courseD_bee_nestedLoops1_a: Not working?  Try using the "Step" button to see
          what happens line by line.
        courseD_bee_nestedLoops1_b: Try writing code for one side of the square first.
          Can you loop this to get all of the nectar?
        courseD_bee_nestedLoops1_c: Remember to use the `get nectar` block once you
          are on a square with a flower.
      courseD_bee_nestedLoops1_2019:
        courseD_bee_nestedLoops1_a: Not working?  Try using the "Step" button to see
          what happens line by line.
        courseD_bee_nestedLoops1_b: Try writing code for one side of the square first.
          Can you loop this to get all of the nectar?
        courseD_bee_nestedLoops1_c: Remember to use the `get nectar` block once you
          are on a square with a flower.
      courseD_bee_nestedLoops1a:
        courseD_bee_nestedLoops1_a: Not working?  Try using the "Step" button to see
          what happens line by line.
        courseD_bee_nestedLoops1_c: Remember to use the `get nectar` block once you
          are on a square with a flower.
      courseD_bee_nestedLoops1a_2018:
        courseD_bee_nestedLoops1_a: Not working?  Try using the "Step" button to see
          what happens line by line.
        courseD_bee_nestedLoops1_c: Remember to use the `get nectar` block once you
          are on a square with a flower.
      courseD_bee_nestedLoops1a_2019:
        courseD_bee_nestedLoops1_a: Not working?  Try using the "Step" button to see
          what happens line by line.
        courseD_bee_nestedLoops1_c: Remember to use the `get nectar` block once you
          are on a square with a flower.
      courseD_bee_nestedLoops2:
        courseD_bee_nestedLoops2_a: To solve this puzzle, you will need to nest one
          `repeat` loop inside of another.
        courseD_bee_nestedLoops2_b: Can't figure out where to put the loops? Try writing
          the code on paper step-by-step and look for a pattern.
        courseD_bee_nestedLoops2_c: Remember you can put more than one block inside
          of a loop.
      courseD_bee_nestedLoops2_2018:
        courseD_bee_nestedLoops2_a: To solve this puzzle, you will need to nest one
          `repeat` loop inside of another.
        courseD_bee_nestedLoops2_b: Can't figure out where to put the loops? Try writing
          the code on paper step-by-step and look for a pattern.
        courseD_bee_nestedLoops2_c: Remember you can put more than one block inside
          of a loop.
      courseD_bee_nestedLoops2_2019:
        courseD_bee_nestedLoops2_a: To solve this puzzle, you will need to nest one
          `repeat` loop inside of another.
        courseD_bee_nestedLoops2_b: Can't figure out where to put the loops? Try writing
          the code on paper step-by-step and look for a pattern.
        courseD_bee_nestedLoops2_c: Remember you can put more than one block inside
          of a loop.
      courseD_bee_nestedLoops7:
        courseD_bee_nestedLoops7_a: You will need to repeat `get nectar` inside of
          another `repeat` that also has the `move forward` block inside of it.
        courseD_bee_nestedLoops7_b: You will need to use all three of the available
          `repeat` blocks to solve this puzzle.
        courseD_bee_nestedLoops7_c: |-
          Nest your blocks three deep, like this:

          -   repeat 4
              -   repeat 3
                  -   repeat 12
                      -   get nectar
                  -   move forward
              -   turn right
      courseD_bee_nestedLoops7_2018:
        courseD_bee_nestedLoops7_a: You will need to repeat `get nectar` inside of
          another `repeat` that also has the `move forward` block inside of it.
        courseD_bee_nestedLoops7_b: You will need to use all three of the available
          `repeat` blocks to solve this puzzle.
        courseD_bee_nestedLoops7_c: |-
          Nest your blocks three deep, like this:

          -   repeat 4
              -   repeat 3
                  -   repeat 12
                      -   get nectar
                  -   move forward
              -   turn right
      courseD_bee_nestedLoops7_2019:
        courseD_bee_nestedLoops7_a: You will need to repeat `get nectar` inside of
          another `repeat` that also has the `move forward` block inside of it.
        courseD_bee_nestedLoops7_b: You will need to use all three of the available
          `repeat` blocks to solve this puzzle.
        courseD_bee_nestedLoops7_c: |-
          Nest your blocks three deep, like this:

          -   repeat 4
              -   repeat 3
                  -   repeat 12
                      -   get nectar
                  -   move forward
              -   turn right
      courseD_bounce_events10s_2018:
        courseD_bounce_events10s_a: |-
          You should have both of these events in your code:

          <xml><block type="bounce_whenBallInGoal" deletable="false"><next><block type="bounce_playSound"><title name="SOUND">swish</title><next><block type="bounce_incrementPlayerScore"></block></next></block></next></block><block type="bounce_whenBallMissesPaddle" deletable="false"><next><block type="bounce_playSound"><title name="SOUND">whistle</title><next><block type="bounce_incrementOpponentScore"></block></next></block></next></block></xml>
      courseD_bounce_events10s_2019:
        courseD_bounce_events10s_a: |-
          You should have both of these events in your code:

          <xml><block type="bounce_whenBallInGoal" deletable="false"><next><block type="bounce_playSound"><title name="SOUND">swish</title><next><block type="bounce_incrementPlayerScore"></block></next></block></next></block><block type="bounce_whenBallMissesPaddle" deletable="false"><next><block type="bounce_playSound"><title name="SOUND">whistle</title><next><block type="bounce_incrementOpponentScore"></block></next></block></next></block></xml>
      courseD_bounce_events11s_2018:
        courseD_bounce_events11s_a: You will need to throw a ball when the game starts,
          when you hit the basket, and when the hand misses the ball.
      courseD_bounce_events11s_2019:
        courseD_bounce_events11s_a: You will need to throw a ball when the game starts,
          when you hit the basket, and when the hand misses the ball.
      courseD_bounce_events12s_2018:
        courseD_bounce_events12s_a: You can speed up the basketball or the hand by
          attaching those blocks to the `when run` event.
        courseD_bounce_events12s_b: Try making each shot worth 2 points and changing
          the team logo to the one from your home town!
      courseD_bounce_events12s_2019:
        courseD_bounce_events12s_a: You can speed up the basketball or the hand by
          attaching those blocks to the `when run` event.
        courseD_bounce_events12s_b: Try making each shot worth 2 points and changing
          the team logo to the one from your home town!
      courseD_bounce_events1s_2018:
        courseD_bounce_events1s_a: |-
          You need to add the `move left` block to the `when left arrow` event to make this game work:

           <xml> <block type="bounce_whenLeft" deletable="false" x="20" y="20">
              <next>
                <block type="bounce_moveLeft"/>
              </next>
            </block>

             </xml>
        courseD_bounce_events1s_b: Don't forget to press "Run" and get the hand to
          the basket in order to solve this puzzle.
      courseD_bounce_events1s_2019:
        courseD_bounce_events1s_a: |-
          You need to add the `move left` block to the `when left arrow` event to make this game work:

           <xml> <block type="bounce_whenLeft" deletable="false" x="20" y="20">
              <next>
                <block type="bounce_moveLeft"/>
              </next>
            </block>

             </xml>
        courseD_bounce_events1s_b: Don't forget to press "Run" and get the hand to
          the basket in order to solve this puzzle.
      courseD_bounce_events2s_2018:
        courseD_bounce_events2s_a: |-
          You will need to have two sets of `move` events coded for this to work:

          <xml>
            <block type="bounce_whenLeft" deletable="false" x="20" y="20">
              <next>
                <block type="bounce_moveLeft"/>
              </next>
            </block>
            <block type="bounce_whenRight" deletable="false" x="180" y="20">
              <next>
                <block type="bounce_moveRight"/>
              </next>
            </block>
          </xml>
      courseD_bounce_events2s_2019:
        courseD_bounce_events2s_a: |-
          You will need to have two sets of `move` events coded for this to work:

          <xml>
            <block type="bounce_whenLeft" deletable="false" x="20" y="20">
              <next>
                <block type="bounce_moveLeft"/>
              </next>
            </block>
            <block type="bounce_whenRight" deletable="false" x="180" y="20">
              <next>
                <block type="bounce_moveRight"/>
              </next>
            </block>
          </xml>
      courseD_bounce_events5s_2018:
        courseD_bounce_events5s_a: You do not need to move the hand to solve this
          puzzle.
        courseD_bounce_events5s_b: |-
          Make sure you have added this code to your workspace:

          <xml>  <block type="bounce_whenPaddleCollided" deletable="false"> <next> <block type="bounce_bounceBall"/></next></block></xml>
      courseD_bounce_events5s_2019:
        courseD_bounce_events5s_a: You do not need to move the hand to solve this
          puzzle.
        courseD_bounce_events5s_b: |-
          Make sure you have added this code to your workspace:

          <xml>  <block type="bounce_whenPaddleCollided" deletable="false"> <next> <block type="bounce_bounceBall"/></next></block></xml>
      courseD_bounce_events6s_2018:
        courseD_bounce_events6s_a: |-
          Do you have an event that looks like this?

          <xml><block type="bounce_whenWallCollided" deletable="false"><next><block type="bounce_bounceBall"></block></next></block></block></xml>
        courseD_bounce_events6s_b: If you've written the code correctly, you don't
          have to move the hand to win.
      courseD_bounce_events6s_2019:
        courseD_bounce_events6s_a: |-
          Do you have an event that looks like this?

          <xml><block type="bounce_whenWallCollided" deletable="false"><next><block type="bounce_bounceBall"></block></next></block></block></xml>
        courseD_bounce_events6s_b: If you've written the code correctly, you don't
          have to move the hand to win.
      courseD_bounce_events7s_2018:
        courseD_bounce_events7s_a: You can add sounds in more places if you feel like
          it!
      courseD_bounce_events7s_2019:
        courseD_bounce_events7s_a: You can add sounds in more places if you feel like
          it!
      courseD_collector_debugging1:
        courseD_collector_debugging1_a: |-
          Use the "Step" button to see if everything is right at the first step.

          How about the second?

          Where does it go wrong?
        courseD_collector_debugging1_b: Do you see any patterns that could be made
          more simple using a `repeat` loop?
        courseD_collector_debugging1_c: Remember to use the `collect` block to pick
          up treasure once you have moved to it.
      courseD_collector_debugging10_predict1:
        courseD_collector_debugging9_a: There are several ways to solve this problem...but
          they all involve turns!
        courseD_collector_debugging9_b: Figure out how you would solve the puzzle,
          then move step-by-step to try to make the code match what is in your head.
      courseD_collector_debugging1a_2018:
        courseD_collector_debugging1_a: |-
          Use the "Step" button to see if everything is right at the first step.

          How about the second?

          Where does it go wrong?
        courseD_collector_debugging1_c: Remember to use the `collect` block to pick
          up treasure once you have moved to it.
      courseD_collector_debugging1a_2019:
        courseD_collector_debugging1_a: |-
          Use the "Step" button to see if everything is right at the first step.

          How about the second?

          Where does it go wrong?
        courseD_collector_debugging1_c: Remember to use the `collect` block to pick
          up treasure once you have moved to it.
      courseD_collector_debugging2:
        courseD_collector_debugging2_a: |-
          Use the "Step" button to see if everything is right at the first step.

          How about the second?

          Where does it go wrong?
        courseD_collector_debugging2_b: Do you see any patterns that could be made
          more simple using a `repeat` loop?
        courseD_collector_debugging2_c: Try collecting treasure for one side of this
          pattern. Can you repeat this to collect treasure on the other two sides?
      courseD_collector_debugging2a_2018:
        courseD_collector_debugging2a_a: |-
          Use the "Step" button to see if everything is right at the first step.

          How about the second?

          Where does it go wrong?
        courseD_collector_debugging2a_c: |-
          What happens?

          What is supposed to happen?

          What does that tell you?
      courseD_collector_debugging2a_2019:
        courseD_collector_debugging2a_a: |-
          Use the "Step" button to see if everything is right at the first step.

          How about the second?

          Where does it go wrong?
        courseD_collector_debugging2a_c: |-
          What happens?

          What is supposed to happen?

          What does that tell you?
      courseD_collector_debugging3:
        courseD_collector_debugging3_a: Is there any place where Laurel does something
          that doesn't make sense? What happens when you change those blocks?
        courseD_collector_debugging3_b: Try simplifying the code using nested loops.
      courseD_collector_debugging3a_2018:
        courseD_collector_debugging3_a: Is there any place where Laurel does something
          that doesn't make sense? What happens when you change those blocks?
      courseD_collector_debugging3a_2019:
        courseD_collector_debugging3_a: Is there any place where Laurel does something
          that doesn't make sense? What happens when you change those blocks?
      courseD_collector_debugging4:
        courseD_collector_debugging4_a: "Try using the debugging process a couple
          of times in a row. \n\nWhat causes the first problem?\n\nOnce that problem
          is fixed, what goes wrong?"
        courseD_collector_debugging4_b: "If you're having a hard time figuring out
          how to make the stair step pattern, try tracing it with your finger and
          saying the commands out loud. \n\nDon't forget to point out the direction
          of the turns!"
        courseD_collector_debugging4_c: This loop is only missing one block. Can you
          figure out which one?
      courseD_collector_debugging4a_2018:
        courseD_collector_debugging4_a: "Try using the debugging process a couple
          of times in a row. \n\nWhat causes the first problem?\n\nOnce that problem
          is fixed, what goes wrong?"
        courseD_collector_debugging4_b: "If you're having a hard time figuring out
          how to make the stair step pattern, try tracing it with your finger and
          saying the commands out loud. \n\nDon't forget to point out the direction
          of the turns!"
      courseD_collector_debugging4a_2019:
        courseD_collector_debugging4_a: "Try using the debugging process a couple
          of times in a row. \n\nWhat causes the first problem?\n\nOnce that problem
          is fixed, what goes wrong?"
        courseD_collector_debugging4_b: "If you're having a hard time figuring out
          how to make the stair step pattern, try tracing it with your finger and
          saying the commands out loud. \n\nDon't forget to point out the direction
          of the turns!"
      courseD_collector_debugging5:
        courseD_collector_debugging5_a: |-
          เริ่มด้วยการดูแค่ลูปแรก
          โค้ดทำอะไรได้บ้าง
          มันควรจะทำอะไร?
          มันบอกอะไรแก่คุณ?
        courseD_collector_debugging5_b: Once you have the first loop the way you want
          it, what is left over in your code?
      courseD_collector_debugging5a_2018:
        courseD_collector_debugging5a_a: |-
          What does it do?

          What is it supposed to do?

          What does that tell you?
        courseD_collector_debugging5a_b: Once you have the first line of treasure
          collected, what is left over in your code?
      courseD_collector_debugging5a_2019:
        courseD_collector_debugging5a_a: |-
          What does it do?

          What is it supposed to do?

          What does that tell you?
        courseD_collector_debugging5a_b: Once you have the first line of treasure
          collected, what is left over in your code?
      courseD_collector_debugging6:
        courseD_collector_debugging6_a: |-
          Try running through the code using the "Step" button.  Is everything good at the first step?

          How about the second?

          Where do things go wrong?
        courseD_collector_debugging6_b: It looks like all of the right steps are here,
          you just need more of them.  How can you repeat the `collect` action multiple
          times?
      courseD_collector_debugging6a_2018:
        courseD_collector_debugging6_a: |-
          Try running through the code using the "Step" button.  Is everything good at the first step?

          How about the second?

          Where do things go wrong?
        courseD_collector_debugging6_b: It looks like all of the blocks you need are
          in the workspace. Try clicking "start over" if things get too confusing.
      courseD_collector_debugging6a_2019:
        courseD_collector_debugging6_a: |-
          Try running through the code using the "Step" button.  Is everything good at the first step?

          How about the second?

          Where do things go wrong?
        courseD_collector_debugging6_b: It looks like all of the blocks you need are
          in the workspace. Try clicking "start over" if things get too confusing.
      courseD_collector_debugging8:
        courseD_collector_debugging8_a: Do you see a pattern that you can simplify
          with a loop?
        courseD_collector_debugging8_b: Try using a nested loop to make this code
          shorter.
      courseD_collector_debugging9:
        courseD_collector_debugging9_a: There are several ways to solve this problem...but
          they all involve turns!
        courseD_collector_debugging9_b: Figure out how you would solve the puzzle,
          then move step-by-step to try to make the code match what is in your head.
      courseD_collector_debugging_challenge2:
        courseD_collector_debugging_challenge2_a: "Start by collecting just **two**
          gems from each of the first **two** piles.\n\n![](<https://images.code.org/8493c16a5b913b91e28b36eb2b280b8c-image-1494775939149.25.04
          AM copy.png>)\nUse these blocks.\n\n<xml>\n<block type=\"collector_collect\"></block>\n<block
          type=\"controls_repeat\" limit=\"2\">\n    <title name=\"TIMES\">2</title>\n
          \ </block>\n<block type=\"maze_move\" x=\"175px\" y=\"17px\">\n                    <title
          name=\"DIR\">moveForward</title>\n                  </block>\n                  \n
          \n   <block type=\"controls_repeat\" limit=\"2\" x=\"175px\" y=\"56px\">\n
          \   <title name=\"TIMES\">2</title>\n  </block>\n\n\n\n</xml>"
        courseD_collector_debugging_challenge2_b: "Next, collect the remaining gems
          in this row.\n\n![](<https://images.code.org/22fff9fb20a50beaf4800aa022a5deb0-image-1494775944657.25.04
          AM.png>)\nAdd these blocks to your program.\n\n<xml><block type=\"maze_move\">\n
          \                   <title name=\"DIR\">moveBackward</title>\n                  </block>\n<block
          type=\"controls_repeat\">\n        <title name=\"TIMES\">4</title>\n        <statement
          name=\"DO\">\n          \n        </statement>\n      </block>\n</xml>"
        courseD_collector_debugging_challenge2_c: "Finally, collect the remaining
          treasure. Add these blocks to your program.\n\n<xml>\n  <block type=\"maze_turn\">\n
          \               <title name=\"DIR\">turnRight</title>\n              </block>\n
          \     <block type=\"controls_repeat\">\n        <title name=\"TIMES\">4</title>\n
          \       <statement name=\"DO\">\n          \n        </statement>\n      </block>\n</xml>"
        courseD_collector_debugging_challenge2_d: |-
          Here is the complete solution for this puzzle.

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat">
                  <title name="TIMES">4</title>
                  <statement name="DO">
                    <block type="controls_repeat">
                      <title name="TIMES">4</title>
                      <statement name="DO">
                        <block type="controls_repeat">
                          <title name="TIMES">2</title>
                          <statement name="DO">
                            <block type="maze_move">
                              <title name="DIR">moveForward</title>
                              <next>
                                <block type="controls_repeat">
                                  <title name="TIMES">2</title>
                                  <statement name="DO">
                                    <block type="collector_collect"/>
                                  </statement>
                                </block>
                              </next>
                            </block>
                          </statement>
                          <next>
                            <block type="maze_move">
                              <title name="DIR">moveBackward</title>
                            </block>
                          </next>
                        </block>
                      </statement>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
          </xml>
      courseD_collector_nested_loops_challenge2:
        courseD_bee_nested_loops_challenge2_a: Don't forget that you can `repeat`
          a single command or a longer pattern. You can even `repeat` a `repeat` block!
        courseD_bee_nested_loops_challenge2_b: To get all 4 gems, first use a loop
          to move away from the center. Turn left or right, then use a nested loop
          to move from the first pile of treasure to the second. If you repeat the
          nested loop enough times, the collector will move around the _entire_ cave!
        courseD_bee_nested_loops_challenge2_c: The shortest program that reaches all
          the treasure uses only one `collect` block and two turns.
        courseD_bee_nested_loops_challenge2_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat_dropdown">
                  <title name="TIMES" config="3-10">3</title>
                  <statement name="DO">
                    <block type="maze_move">
                      <title name="DIR">moveForward</title>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_turn">
                      <title name="DIR">turnLeft</title>
                      <next>
                        <block type="controls_repeat_dropdown">
                          <title name="TIMES" config="3-10">3</title>
                          <statement name="DO">
                            <block type="collector_collect">
                              <next>
                                <block type="controls_repeat_dropdown">
                                  <title name="TIMES" config="3-10">3</title>
                                  <statement name="DO">
                                    <block type="maze_move">
                                      <title name="DIR">moveForward</title>
                                    </block>
                                  </statement>
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnLeft</title>
                                      <next>
                                        <block type="controls_repeat_dropdown">
                                          <title name="TIMES" config="3-10">3</title>
                                          <statement name="DO">
                                            <block type="maze_move">
                                              <title name="DIR">moveForward</title>
                                            </block>
                                          </statement>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </statement>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseD_collector_nested_loops_challenge2_2018:
        courseD_bee_nested_loops_challenge2_a: Don't forget that you can `repeat`
          a single command or a longer pattern. You can even `repeat` a `repeat` block!
        courseD_bee_nested_loops_challenge2_b: To get all 4 gems, first use a loop
          to move away from the center. Turn left or right, then use a nested loop
          to move from the first pile of treasure to the second. If you repeat the
          nested loop enough times, the collector will move around the _entire_ cave!
        courseD_bee_nested_loops_challenge2_c: The shortest program that reaches all
          the treasure uses only one `collect` block and two turns.
        courseD_bee_nested_loops_challenge2_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat_dropdown">
                  <title name="TIMES" config="3-10">3</title>
                  <statement name="DO">
                    <block type="maze_move">
                      <title name="DIR">moveForward</title>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_turn">
                      <title name="DIR">turnLeft</title>
                      <next>
                        <block type="controls_repeat_dropdown">
                          <title name="TIMES" config="3-10">3</title>
                          <statement name="DO">
                            <block type="collector_collect">
                              <next>
                                <block type="controls_repeat_dropdown">
                                  <title name="TIMES" config="3-10">3</title>
                                  <statement name="DO">
                                    <block type="maze_move">
                                      <title name="DIR">moveForward</title>
                                    </block>
                                  </statement>
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnLeft</title>
                                      <next>
                                        <block type="controls_repeat_dropdown">
                                          <title name="TIMES" config="3-10">3</title>
                                          <statement name="DO">
                                            <block type="maze_move">
                                              <title name="DIR">moveForward</title>
                                            </block>
                                          </statement>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </statement>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseD_collector_nested_loops_challenge2_2019:
        courseD_bee_nested_loops_challenge2_a: Don't forget that you can `repeat`
          a single command or a longer pattern. You can even `repeat` a `repeat` block!
        courseD_bee_nested_loops_challenge2_b: To get all 4 gems, first use a loop
          to move away from the center. Turn left or right, then use a nested loop
          to move from the first pile of treasure to the second. If you repeat the
          nested loop enough times, the collector will move around the _entire_ cave!
        courseD_bee_nested_loops_challenge2_c: The shortest program that reaches all
          the treasure uses only one `collect` block and two turns.
        courseD_bee_nested_loops_challenge2_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat_dropdown">
                  <title name="TIMES" config="3-10">3</title>
                  <statement name="DO">
                    <block type="maze_move">
                      <title name="DIR">moveForward</title>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_turn">
                      <title name="DIR">turnLeft</title>
                      <next>
                        <block type="controls_repeat_dropdown">
                          <title name="TIMES" config="3-10">3</title>
                          <statement name="DO">
                            <block type="collector_collect">
                              <next>
                                <block type="controls_repeat_dropdown">
                                  <title name="TIMES" config="3-10">3</title>
                                  <statement name="DO">
                                    <block type="maze_move">
                                      <title name="DIR">moveForward</title>
                                    </block>
                                  </statement>
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnLeft</title>
                                      <next>
                                        <block type="controls_repeat_dropdown">
                                          <title name="TIMES" config="3-10">3</title>
                                          <statement name="DO">
                                            <block type="maze_move">
                                              <title name="DIR">moveForward</title>
                                            </block>
                                          </statement>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </statement>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseD_collector_nested_loops_challenge2a:
        courseD_collector_nested_loops_challenge2a_a: Don't forget that you can `repeat`
          a single command or a longer pattern. You can even `repeat` a `repeat` block!
        courseD_collector_nested_loops_challenge2a_b: Can you figure out how to get
          all four gems without using any more blocks than it takes to get two?
      courseD_collector_ramp10:
        courseD_artist_ramp10_a: |-
          Instead of using four `move forward` blocks for each side, try putting one `move forward` block inside of a `repeat` loop, like this:

          <xml><block type="controls_repeat">
                                                      <title name="TIMES">4</title>
                                                      <statement name="DO">
                                                        <block type="maze_moveForward"/>
                                                      </statement>
                                                    </block></xml>
        courseD_artist_ramp10_b: Don't forget to collect one piece of treasure, then
          turn to start on a new side of the square!
        courseD_artist_ramp10_c: If you want to simplify your code, you can put one
          loop inside of another! This is called a **nested loop**.
      courseD_collector_ramp8:
        courseD_collector_ramp8_a: When you get to a square with treasure, use `collect`
          to pick it up. For this puzzle, you'll need to collect treasure more than
          once!
        courseD_collector_ramp8_b: ถ้าคุณต้องการที่จะทำให้รหัสของคุณง่ายขึ้นไปอีก
          คุณสามารถใส่ลูป`ทำซ้ำ` ภายในลูป`ทำซ้ำ` อีกอันหนึ่ง! ที่เราเรียกมันว่า \*\*
          ลูปซ้อนลูป \*\*
      courseD_collector_ramp9:
        courseD_collector_ramp9_a: Start by moving Laurel to the first treasure, then
          collecting it. Can you repeat this sequence to get the second pile?
        courseD_collector_ramp9_b: If you want to simplify your code, you can put
          one repeat loop inside of another! This is called a **nested loop**.
      courseD_farmer_condLoops1:
        courseD_farmer_condLoops1_a: คุณต้องมองหาข้าวโพด 5 ครั้ง โดยใช้บล็อกลูปทำซ้ำ
        courseD_farmer_condLoops1_b: ให้แน่ใจว่าได้ใช้บล็อก `ถ้า นี่คือข้าวโพด` ไม่อย่างนั้นคุณอาจจะพยายามเก็บบางอย่างที่ไม่ได้ปลูกอยู่ตรงนั้น
      courseD_farmer_condLoops1_2018:
        courseD_farmer_condLoops1_a: คุณต้องมองหาข้าวโพด 5 ครั้ง โดยใช้บล็อกลูปทำซ้ำ
        courseD_farmer_condLoops1_b: ให้แน่ใจว่าได้ใช้บล็อก `ถ้า นี่คือข้าวโพด` ไม่อย่างนั้นคุณอาจจะพยายามเก็บบางอย่างที่ไม่ได้ปลูกอยู่ตรงนั้น
      courseD_farmer_condLoops1_2019:
        courseD_farmer_condLoops1_a: คุณต้องมองหาข้าวโพด 5 ครั้ง โดยใช้บล็อกลูปทำซ้ำ
        courseD_farmer_condLoops1_b: ให้แน่ใจว่าได้ใช้บล็อก `ถ้า นี่คือข้าวโพด` ไม่อย่างนั้นคุณอาจจะพยายามเก็บบางอย่างที่ไม่ได้ปลูกอยู่ตรงนั้น
      courseD_farmer_condLoops2:
        courseD_farmer_condLoops2_a: 'วิธีการทำที่ดีที่สุด ด้วยการซ้อนคำสั่ง `ถ้า(if)`
          โดยการวางอันหนึ่งไว้ภายในอีกอันหนึ่ง  '
        courseD_farmer_condLoops2_b: สำหรับปริศนาอันนี้ คุณควรที่จะมี คำสั่ง`ถ้า นอกจากนั้น(if/else)`
          หนึ่งคำสั่งและคำสั่ง`ถ้า(if)` แบบธรรมดาๆอีกหนึ่งคำสั่ง
        courseD_farmer_condLoops2_c: |-
          คำสั่ง `ถ้า(if)` ของคุณมีลักษณะดังนี้

          \-ถ้า นี่คือข้าวโพด
                ทำ-เก็บข้าวโพด
          \-นอกจากนั้น  ถ้า นี่คือผักสลัด
                 ทำ-เก็บผักสลัด

          ถ้าไม่มีอะไรตรงนั้นคุณไม่ต้องเก็บอะไร
      courseD_farmer_condLoops2_2018:
        courseD_farmer_condLoops2_a: 'วิธีการทำที่ดีที่สุด ด้วยการซ้อนคำสั่ง `ถ้า(if)`
          โดยการวางอันหนึ่งไว้ภายในอีกอันหนึ่ง  '
        courseD_farmer_condLoops2_b: สำหรับปริศนาอันนี้ คุณควรที่จะมี คำสั่ง`ถ้า นอกจากนั้น(if/else)`
          หนึ่งคำสั่งและคำสั่ง`ถ้า(if)` แบบธรรมดาๆอีกหนึ่งคำสั่ง
        courseD_farmer_condLoops2_c: |-
          คำสั่ง `ถ้า(if)` ของคุณมีลักษณะดังนี้

          \-ถ้า นี่คือข้าวโพด
                ทำ-เก็บข้าวโพด
          \-นอกจากนั้น  ถ้า นี่คือผักสลัด
                 ทำ-เก็บผักสลัด

          ถ้าไม่มีอะไรตรงนั้นคุณไม่ต้องเก็บอะไร
      courseD_farmer_condLoops2_2019:
        courseD_farmer_condLoops2_a: 'วิธีการทำที่ดีที่สุด ด้วยการซ้อนคำสั่ง `ถ้า(if)`
          โดยการวางอันหนึ่งไว้ภายในอีกอันหนึ่ง  '
        courseD_farmer_condLoops2_b: สำหรับปริศนาอันนี้ คุณควรที่จะมี คำสั่ง`ถ้า นอกจากนั้น(if/else)`
          หนึ่งคำสั่งและคำสั่ง`ถ้า(if)` แบบธรรมดาๆอีกหนึ่งคำสั่ง
        courseD_farmer_condLoops2_c: |-
          คำสั่ง `ถ้า(if)` ของคุณมีลักษณะดังนี้

          \-ถ้า นี่คือข้าวโพด
                ทำ-เก็บข้าวโพด
          \-นอกจากนั้น  ถ้า นี่คือผักสลัด
                 ทำ-เก็บผักสลัด

          ถ้าไม่มีอะไรตรงนั้นคุณไม่ต้องเก็บอะไร
      courseD_farmer_condLoops3:
        courseD_farmer_condLoops3_a: |-
          เมื่อต้องการเก็บรายการทั้งหมดให้ลองซ้อนคำสั่ง `ถ้า(if)` ลึกสามระดับ
          ซึ่งหมายความว่าคุณควรใส่คำสั่ง`ถ้า(if)` หนึ่งคำสั่งภายใน`ถ้า(if)` ของอีกคำสั่งเหนึ่ง แล้วใส่ที่คำสั่งสาม '`ถ้า(if)` ภายในคำสั่งที่สอง
        courseD_farmer_condLoops3_b: สำหรับปริศนาอันนี้ คุณควรที่จะมี คำสั่ง`ถ้า นอกจากนั้น(if/else)`
          สองคำสั่งและคำสั่ง`ถ้า(if)` แบบธรรมดาๆอีกหนึ่งคำสั่ง
      courseD_farmer_condLoops3_2018:
        courseD_farmer_condLoops3_a: |-
          เมื่อต้องการเก็บรายการทั้งหมดให้ลองซ้อนคำสั่ง `ถ้า(if)` ลึกสามระดับ
          ซึ่งหมายความว่าคุณควรใส่คำสั่ง`ถ้า(if)` หนึ่งคำสั่งภายใน`ถ้า(if)` ของอีกคำสั่งเหนึ่ง แล้วใส่ที่คำสั่งสาม '`ถ้า(if)` ภายในคำสั่งที่สอง
        courseD_farmer_condLoops3_b: สำหรับปริศนาอันนี้ คุณควรที่จะมี คำสั่ง`ถ้า นอกจากนั้น(if/else)`
          สองคำสั่งและคำสั่ง`ถ้า(if)` แบบธรรมดาๆอีกหนึ่งคำสั่ง
      courseD_farmer_condLoops3_2019:
        courseD_farmer_condLoops3_a: |-
          เมื่อต้องการเก็บรายการทั้งหมดให้ลองซ้อนคำสั่ง `ถ้า(if)` ลึกสามระดับ
          ซึ่งหมายความว่าคุณควรใส่คำสั่ง`ถ้า(if)` หนึ่งคำสั่งภายใน`ถ้า(if)` ของอีกคำสั่งเหนึ่ง แล้วใส่ที่คำสั่งสาม '`ถ้า(if)` ภายในคำสั่งที่สอง
        courseD_farmer_condLoops3_b: สำหรับปริศนาอันนี้ คุณควรที่จะมี คำสั่ง`ถ้า นอกจากนั้น(if/else)`
          สองคำสั่งและคำสั่ง`ถ้า(if)` แบบธรรมดาๆอีกหนึ่งคำสั่ง
      courseD_farmer_condLoops4:
        grade3_RunningFarm_4courseD_farmer_condLoops4: |-
          No one knows how many heads of lettuce will grow from each sprout.

          Use a `while there is lettuce` loop to keep picking until each piece has been gathered.
        grade3_RunningFarm_4courseD_farmer_condLoops4_b: ลูปข`ขณะที่....` จะรองรับกรณีที่ว่างเปล่าด้วยเช่นกัน!
          เมื่อไม่มีผักสลัด ก็จะไม่มีการเก็บแต่อย่างใดและปล่อยให้โค้ดดำเนินต่อไป
        grade3_RunningFarm_4courseD_farmer_condLoops4_c: You can use either a `while
          path ahead` loop or a `repeat` loop to go through all of the crops.
      courseD_farmer_condLoops4_2018:
        grade3_RunningFarm_4courseD_farmer_condLoops4: |-
          No one knows how many heads of lettuce will grow from each sprout.

          Use a `while there is lettuce` loop to keep picking until each piece has been gathered.
        grade3_RunningFarm_4courseD_farmer_condLoops4_b: ลูปข`ขณะที่....` จะรองรับกรณีที่ว่างเปล่าด้วยเช่นกัน!
          เมื่อไม่มีผักสลัด ก็จะไม่มีการเก็บแต่อย่างใดและปล่อยให้โค้ดดำเนินต่อไป
        grade3_RunningFarm_4courseD_farmer_condLoops4_c: You can use either a `while
          path ahead` loop or a `repeat` loop to go through all of the crops.
      courseD_farmer_condLoops4_2019:
        grade3_RunningFarm_4courseD_farmer_condLoops4: |-
          No one knows how many heads of lettuce will grow from each sprout.

          Use a `while there is lettuce` loop to keep picking until each piece has been gathered.
        grade3_RunningFarm_4courseD_farmer_condLoops4_b: ลูปข`ขณะที่....` จะรองรับกรณีที่ว่างเปล่าด้วยเช่นกัน!
          เมื่อไม่มีผักสลัด ก็จะไม่มีการเก็บแต่อย่างใดและปล่อยให้โค้ดดำเนินต่อไป
        grade3_RunningFarm_4courseD_farmer_condLoops4_c: You can use either a `while
          path ahead` loop or a `repeat` loop to go through all of the crops.
      courseD_farmer_condLoops5:
        courseD_farmer_condLoops5_a: มีลูปใหม่ `ทำซ้ำจนกว่านี่คือฟักทอง` คุณเห็นวิธีใช้มันในปริศนานี้หรือไม่?
        courseD_farmer_condLoops5_b: There could be more than one corn or lettuce
          plant in each spot. Use a `while` loop to gather all of them!
      courseD_farmer_condLoops5_2018:
        courseD_farmer_condLoops5_a: มีลูปใหม่ `ทำซ้ำจนกว่านี่คือฟักทอง` คุณเห็นวิธีใช้มันในปริศนานี้หรือไม่?
        courseD_farmer_condLoops5_b: There could be more than one corn or lettuce
          plant in each spot. Use a `while` loop to gather all of them!
      courseD_farmer_condLoops5_2019:
        courseD_farmer_condLoops5_a: 'There is a new loop: `repeat until there are
          pumpkins`. Can you see how to use it in this puzzle?'
        courseD_farmer_condLoops5_b: There could be more than one corn or lettuce
          plant in each spot. Use a `while` loop to gather all of them!
      courseD_farmer_condLoops6:
        courseD_farmer_condLoops6_a: Use a `while there is corn` loop to make sure
          you get all of the corn along the way. This block won't do anything if there's
          no corn to pick.
        courseD_farmer_condLoops6_b: Make sure to check `if` there's a path ahead
          before you take your next step!
      courseD_farmer_condLoops6_2018:
        courseD_farmer_condLoops6_a: Use a `while path ahead` loop or `if path ahead
          / else` block to move the farmer down each piece of the spiral.
        courseD_farmer_condLoops6_b: You only need to check for corn during most of
          the harvest.  Just pick one pumpkin at the very end of your program.
      courseD_farmer_condLoops6_2019:
        courseD_farmer_condLoops6_a: Use a `while path ahead` loop or a `if path ahead
          / else` block to move the farmer down each piece of the spiral.
        courseD_farmer_condLoops6_b: You only need to check for corn during most of
          the harvest.  Just pick one pumpkin at the very end of your program.
      courseD_farmer_condLoops7:
        courseD_farmer_condLoops7_a: |-
          Notice that the easiest path to get to all of the crops is still a spiral.

          ![](https://images.code.org/ba8b8c624f21ade9ac823b045085c435-image-1479364378437.png)
        courseD_farmer_condLoops7_b: Try using `when path ahead` to keep the harvester
          moving the right number of steps.
      courseD_farmer_condLoops7_2018:
        courseD_farmer_condLoops7_a: |-
          Notice that the easiest path to get to all of the crops is still a spiral.

          ![](https://images.code.org/ba8b8c624f21ade9ac823b045085c435-image-1479364378437.png)
        courseD_farmer_condLoops7_b: Try using `when path ahead` to keep the harvester
          moving the right number of steps.
      courseD_farmer_condLoops7_2019:
        courseD_farmer_condLoops7_a: |-
          Notice that the easiest path to get to all of the crops is still a spiral.

          ![](https://images.code.org/ba8b8c624f21ade9ac823b045085c435-image-1479364378437.png)
        courseD_farmer_condLoops7_b: Try using `while path ahead` to keep the harvester
          moving the right number of steps.
      courseD_farmer_condLoops_challenge1:
        courseD_farmer_condLoops_challenge1_a: The "Step" button could be very helpful
          in this challenge.
        courseD_farmer_condLoops_challenge1_b: Normally you would just `pick pumpkin`
          if you are at a pumpkin. What else do you need to do if you're at a pumpkin?
      courseD_farmer_condLoops_challenge1_2018:
        courseD_farmer_condLoops_challenge1_a: The "Step" button could be very helpful
          in this challenge.
        courseD_farmer_condLoops_challenge1_b: Normally you would just `pick pumpkin`
          if you are at a pumpkin. What else do you need to do if you're at a pumpkin?
      courseD_farmer_condLoops_challenge1_2019:
        courseD_farmer_condLoops_challenge1_a: The "Step" button could be very helpful
          in this challenge.
        courseD_farmer_condLoops_challenge1_b: Normally you would just `pick pumpkin`
          if you are at a pumpkin. What else do you need to do if you're at a pumpkin?
      courseD_farmer_condLoops_challenge2:
        courseD_farmer_condLoops_challenge2_a: The amount of each vegetable in each
          space can change. A `while` loop can help!
      courseD_farmer_condLoops_challenge2_2018:
        courseD_farmer_condLoops_challenge2_a: The amount of each vegetable in each
          space can change. A `while` loop can help!
      courseD_farmer_condLoops_challenge2_2019:
        courseD_farmer_condLoops_challenge2_a: The amount of each vegetable in each
          space can change. A `while` loop can help!
      courseD_farmer_while1:
        courseD_farmer_while1_a: You will need to move forward four times to get to
          the pile. Can you use a `repeat` loop for this?
        courseD_farmer_while1_b: ใช้บล็อก `ตักดินออก 1 ครั้ง` เมื่อคุณยืนอยู่บนกองดินเพื่อปรับหน้าดินให้เรียบ
      courseD_farmer_while1_2018:
        courseD_farmer_while1_a: You will need to move forward four times to get to
          the pile. Can you use a `repeat` loop for this?
        courseD_farmer_while1_b: ใช้บล็อก `ตักดินออก 1 ครั้ง` เมื่อคุณยืนอยู่บนกองดินเพื่อปรับหน้าดินให้เรียบ
      courseD_farmer_while1_2019:
        courseD_farmer_while1_a: You will need to move forward four times to get to
          the pile. Can you use a `repeat` loop for this?
        courseD_farmer_while1_b: ใช้บล็อก `ตักดินออก 1 ครั้ง` เมื่อคุณยืนอยู่บนกองดินเพื่อปรับหน้าดินให้เรียบ
      courseD_farmer_while2:
        courseD_farmer_while2_a: You will only need to move once to get to the hole.
        courseD_farmer_while2_b: You will need the `fill 1` block six times. Can you
          use a loop to make this simpler?
      courseD_farmer_while2_2018:
        courseD_farmer_while2_a: You will only need to move once to get to the hole.
        courseD_farmer_while2_b: You will need the `fill 1` block six times. Can you
          use a loop to make this simpler?
      courseD_farmer_while2_2019:
        courseD_farmer_while2_a: You will only need to move once to get to the hole.
        courseD_farmer_while2_b: You will need the `fill 1` block six times. Can you
          use a loop to make this simpler?
      courseD_farmer_while3:
        courseD_farmer_while3_a: A loop can help you simplify your code here.
        courseD_farmer_while3_b: You shouldn't need any `turn` blocks to get to the
          pile.
      courseD_farmer_while3_2018:
        courseD_farmer_while3_a: A loop can help you simplify your code here.
        courseD_farmer_while3_b: You shouldn't need any `turn` blocks to get to the
          pile.
      courseD_farmer_while3_2019:
        courseD_farmer_while3_a: A loop can help you simplify your code here.
        courseD_farmer_while3_b: You shouldn't need any `turn` blocks to get to the
          pile.
      courseD_farmer_while4:
        courseD_farmer_conditionals4_a: Instead of using a `repeat` loop, use a `while`
          loop to keep digging until the pile is gone.
        courseD_farmer_conditionals4_b: This looks very similar to an earlier puzzle,
          the only difference is which loop you need.
      courseD_farmer_while4_2018:
        courseD_farmer_conditionals4_a: Instead of using a `repeat` loop, use a `while`
          loop to keep digging until the pile is gone.
        courseD_farmer_conditionals4_b: This looks very similar to an earlier puzzle,
          the only difference is which loop you need.
      courseD_farmer_while4_2019:
        courseD_farmer_conditionals4_a: Instead of using a `repeat` loop, use a `while`
          loop to keep digging until the pile is gone.
        courseD_farmer_conditionals4_b: This looks very similar to an earlier puzzle,
          the only difference is which loop you need.
      courseD_farmer_while5:
        courseD_farmer_conditionals5a_a: Try nesting a `while` loop inside of a `repeat`
          loop.
        courseD_farmer_conditionals5a_b: The farmer needs to move forward a total
          of five times to get to the end of the row. What else does the farmer need
          to do?
        courseD_farmer_conditionals5a_c: Move forward 5 times. Each time you move
          forward, remove the pile of dirt by using the `while there is a pile` block.
      courseD_farmer_while5_2018:
        courseD_farmer_conditionals5a_a: Try nesting a `while` loop inside of a `repeat`
          loop.
        courseD_farmer_conditionals5a_b: The farmer needs to move forward a total
          of five times to get to the end of the row. What else does the farmer need
          to do?
        courseD_farmer_conditionals5a_c: Move forward 5 times. Each time you move
          forward, remove the pile of dirt by using the `while there is a pile` block.
      courseD_farmer_while5_2019:
        courseD_farmer_conditionals5a_a: Try nesting a `while` loop inside of a `repeat`
          loop.
        courseD_farmer_conditionals5a_b: The farmer needs to move forward a total
          of five times to get to the end of the row. What else does the farmer need
          to do?
        courseD_farmer_conditionals5a_c: Move forward 5 times. Each time you move
          forward, remove the pile of dirt by using the `while there is a pile` block.
      courseD_farmer_while6:
        courseD_farmer_conditionals6_a: Make sure you're using the `while` loop to
          figure out how many times to fill each hole.
        courseD_farmer_conditionals6_b: Notice that the farmer needs to move forward
          and down several times in a stair-step pattern.
        courseD_farmer_conditionals6_c: |-
          The stair step pattern uses the following blocks

          -   move forward
          -   fill hole
          -   turn right
          -   move forward
          -   fill hole
          -   turn left

          How many times do you need to use this stair step pattern?

          Make sure you are using the `while there is a hole` to fill the hole.
      courseD_farmer_while6_2018:
        courseD_farmer_conditionals6_a: Make sure you're using the `while` loop to
          figure out how many times to fill each hole.
        courseD_farmer_conditionals6_b: Notice that the farmer needs to move forward
          and down several times in a stair-step pattern.
        courseD_farmer_conditionals6_c: |-
          The stair step pattern uses the following blocks

          -   move forward
          -   fill hole
          -   turn right
          -   move forward
          -   fill hole
          -   turn left

          How many times do you need to use this stair step pattern?

          Make sure you are using the `while there is a hole` to fill the hole.
      courseD_farmer_while6_2019:
        courseD_farmer_conditionals6_a: Make sure you're using the `while` loop to
          figure out how many times to fill each hole.
        courseD_farmer_conditionals6_b: Notice that the farmer needs to move forward
          and down several times in a stair-step pattern.
        courseD_farmer_conditionals6_c: |-
          The stair step pattern uses the following blocks

          -   move forward
          -   fill hole
          -   turn right
          -   move forward
          -   fill hole
          -   turn left

          How many times do you need to use this stair step pattern?

          Make sure you are using the `while there is a hole` to fill the hole.
      courseD_farmer_while7:
        courseD_farmer_conditionals8_a: The `while path ahead` block lets you keep
          going, even if you don't know how many squares are in a path.
        courseD_farmer_conditionals8_b: Putting a `while path ahead` loop inside of
          a repeat loop can help you in this puzzle.
        courseD_farmer_conditionals8_c: What do you need to do at the end of each
          path?
      courseD_farmer_while7_2018:
        courseD_farmer_conditionals8_a: The `while path ahead` block lets you keep
          going, even if you don't know how many squares are in a path.
        courseD_farmer_conditionals8_b: Putting a `while path ahead` loop inside of
          a repeat loop can help you in this puzzle.
        courseD_farmer_conditionals8_c: What do you need to do at the end of each
          path?
      courseD_farmer_while7_2019:
        courseD_farmer_conditionals8_a: The `while path ahead` block lets you keep
          going, even if you don't know how many squares are in a path.
        courseD_farmer_conditionals8_b: Putting a `while path ahead` loop inside of
          a repeat loop can help you in this puzzle.
        courseD_farmer_conditionals8_c: What do you need to do at the end of each
          path?
      courseD_farmer_while8:
        courseD_farmer_conditionals8_a: You are going to need to use more than one
          `while` loop.
        courseD_farmer_conditionals8_b: Every hole is at the end of a path, so use
          `while path ahead` before using `while there is a hole`.
        courseD_farmer_conditionals8_c: Notice that you need to repeat the `while
          path ahead`, `while there is a hole` code six times.
      courseD_farmer_while8_2018:
        courseD_farmer_conditionals8_a: You are going to need to use more than one
          `while` loop.
        courseD_farmer_conditionals8_b: Every hole is at the end of a path, so use
          `while path ahead` before using `while there is a hole`.
        courseD_farmer_conditionals8_c: Notice that you need to repeat the `while
          path ahead`, `while there is a hole` code six times.
      courseD_farmer_while8_2019:
        courseD_farmer_conditionals8_a: You are going to need to use more than one
          `while` loop.
        courseD_farmer_conditionals8_b: Every hole is at the end of a path, so use
          `while path ahead` before using `while there is a hole`.
        courseD_farmer_conditionals8_c: Notice that you need to repeat the `while
          path ahead`, `while there is a hole` code six times.
      courseD_farmer_while_challenge1:
        courseD_farmer_while_challenge1_a: Each hole or pile is located one space
          **backward** from the end of the path.
        courseD_farmer_while_challenge1_b: If you use a `while` loop, you can tell
          the farmer to remove a pile or fill a hole, even if one isn't there. That
          means you can program her to remove any dirt or fill any hole, no matter
          where she is.
        courseD_farmer_conditionals8_c: It is possible to solve this without using
          any `repeat` loops. To do this, you will need to use four `while` loops.
      courseD_farmer_while_challenge1_2018:
        courseD_farmer_while_challenge1_a: Each hole or pile is located one space
          **backward** from the end of the path.
        courseD_farmer_while_challenge1_b: If you use a `while` loop, you can tell
          the farmer to remove a pile or fill a hole, even if one isn't there. That
          means you can program her to remove any dirt or fill any hole, no matter
          where she is.
        courseD_farmer_conditionals8_c: It is possible to solve this without using
          any `repeat` loops. To do this, you will need to use four `while` loops.
      courseD_farmer_while_challenge1_2019:
        courseD_farmer_while_challenge1_a: Each hole or pile is located one space
          **backward** from the end of the path.
        courseD_farmer_while_challenge1_b: If you use a `while` loop, you can tell
          the farmer to remove a pile or fill a hole, even if one isn't there. That
          means you can program her to remove any dirt or fill any hole, no matter
          where she is.
        courseD_farmer_conditionals8_c: It is possible to solve this without using
          any `repeat` loops. To do this, you will need to use four `while` loops.
      courseD_farmer_while_challenge2:
        courseD_farmer_while_challenge1_a: Each hole or pile is located one space
          **backward** from the end of the path.
        courseD_farmer_while_challenge1_b: If you use a `while` loop, you can tell
          the farmer to remove a pile or fill a hole, even if one isn't there. That
          means you can program her to remove any dirt and fill any hole, while standing
          in the same place.
        courseD_farmer_conditionals8_c: It is possible to solve this without using
          any `repeat` loops. To do this, you will need to use four `while` loops.
      courseD_harvester_nested_loops_challenge1:
        courseD_harvester_nested_loops_challenge1_a: 'Try following this path to reach
          all of the corn! '
        courseD_harvester_nested_loops_challenge1_b: To collect more than one piece
          of corn, you need to use `pick corn` more than one time.
        courseD_harvester_nested_loops_challenge1_c: You will need to put a small
          loop inside of your main loop to solve this puzzle!
      courseD_harvester_nested_loops_challenge1_2018:
        courseD_harvester_nested_loops_challenge1_a: 'Try following this path to reach
          all of the corn! '
        courseD_harvester_nested_loops_challenge1_b: To collect more than one piece
          of corn, you need to use `pick corn` more than one time.
        courseD_harvester_nested_loops_challenge1_c: You will need to put a small
          loop inside of your main loop to solve this puzzle!
      courseD_harvester_nested_loops_challenge1_2019:
        courseD_harvester_nested_loops_challenge1_a: 'Try following this path to reach
          all of the corn! '
        courseD_harvester_nested_loops_challenge1_b: To collect more than one piece
          of corn, you need to use `pick corn` more than one time.
        courseD_harvester_nested_loops_challenge1_c: You will need to put a small
          loop inside of your main loop to solve this puzzle!
      courseD_iceage_loops1:
        courseD_iceage_loops1_a: ระวังรอยแยกในน้ำแข็ง เจ้ากระรอกเขี้ยวดาบสแกรทจะพลาดหล่นลงไปได้!
        courseD_iceage_loops1_b: |-
          คุณจะต้องใช้บล็อกอันนี้:
          <xml><block type="maze_moveForward"/></xml>
      courseD_iceage_loops10:
        courseB_iceage_loops10_a: ระวังแผ่นน้ำแข็งที่แตกร้าว เจ้ากระรอกเขี้ยวดาบสแกรทอาจจะตกลงไปในน้ำได้!
        courseB_iceage_loops10_b: ลองพูดขั้นตอนออกมาดังๆ หรือจดขั้นตอนเหล่านั้นลงบนกระดาษ
          คุณเห็นรูปแบบอะไรไหม?
        courseB_iceage_loops10_c: ปริศนานี้ยาวมาก! ลองให้เจ้ากระรอกเขี้ยวดาบสแกรทเดินตามเส้นทางดู
      courseD_iceage_loops10_2019:
        courseB_iceage_loops10_a: ระวังแผ่นน้ำแข็งที่แตกร้าว เจ้ากระรอกเขี้ยวดาบสแกรทอาจจะตกลงไปในน้ำได้!
        courseB_iceage_loops10_b: ลองพูดขั้นตอนออกมาดังๆ หรือจดขั้นตอนเหล่านั้นลงบนกระดาษ
          คุณเห็นรูปแบบอะไรไหม?
        courseB_iceage_loops10_c: ปริศนานี้ยาวมาก! ลองให้เจ้ากระรอกเขี้ยวดาบสแกรทเดินตามเส้นทางดู
      courseD_iceage_loops1_2019:
        courseD_iceage_loops1_a: ระวังรอยแยกในน้ำแข็ง เจ้ากระรอกเขี้ยวดาบสแกรทจะพลาดหล่นลงไปได้!
        courseD_iceage_loops1_b: |-
          คุณจะต้องใช้บล็อกอันนี้:
          <xml><block type="maze_moveForward"/></xml>
      courseD_iceage_loops2:
        courseD_iceage_loops2_a: แบ่งปริศนานี้เป็นสองส่วน ส่วนหนึ่งก่อนถึงหัวมุมและอีกส่วนหนึ่งหลังจากผ่านหัวมุมไปแล้ว
        courseD_iceage_loops2_b: หากคุณเกิดติดขัดไม่รู้ว่าจะไปต่ออย่างไร ให้ลองพูดขั้นตอนต่างๆ
          ออกมาดังๆ
        courseD_iceage_loops2_c: ลองไปตามเส้นทางนี้ดู เพื่อพาเจ้ากระรอกเขี้ยวดาบไปให้ถึงลูกโอ๊ค
      courseD_iceage_loops2_2019:
        courseD_iceage_loops2_a: แบ่งปริศนานี้เป็นสองส่วน ส่วนหนึ่งก่อนถึงหัวมุมและอีกส่วนหนึ่งหลังจากผ่านหัวมุมไปแล้ว
        courseD_iceage_loops2_b: หากคุณเกิดติดขัดไม่รู้ว่าจะไปต่ออย่างไร ให้ลองพูดขั้นตอนต่างๆ
          ออกมาดังๆ
        courseD_iceage_loops2_c: ลองไปตามเส้นทางนี้ดู เพื่อพาเจ้ากระรอกเขี้ยวดาบไปให้ถึงลูกโอ๊ค
      courseD_iceage_loops3:
        courseB_iceage_loops3_a: |-
          ให้ใช้บล็อกใหม่บล็อกนี้!
          <xml><block type="controls_repeat_dropdown">

          <title name="TIMES" config="2-10">5</title>
          </block></xml>
        courseB_iceage_loops3_b: ในการทำซ้ำโค้ดนั้น ให้ลากลูป `ทำซ้ำ`ออกมาจากกล่องเครื่องมือ
          แล้วใส่บล็อกที่คุณต้องการทำซ้ำไว้ภายใน
      courseD_iceage_loops3_2019:
        courseB_iceage_loops3_a: |-
          Use this new block!

           <xml><block type="controls_repeat_dropdown">
              <title name="TIMES" config="2-10">5</title>
            </block></xml>
        courseB_iceage_loops3_b: ในการทำซ้ำโค้ดนั้น ให้ลากลูป `ทำซ้ำ`ออกมาจากกล่องเครื่องมือ
          แล้วใส่บล็อกที่คุณต้องการทำซ้ำไว้ภายใน
      courseD_iceage_loops4:
        courseD_iceage_loops4_a: อย่ากลัวที่จะเรียกใช้งานโค้ดของคุณ และดูว่าจะเกิดอะไรขึ้น!
        courseD_iceage_loops4_b: ลองเขียนขั้นตอนต่าง ๆที่เจ้ากระรอกเขี้ยวดาบสแกรทน่าจะใช้เพื่อไปให้ถึงลูกโอ็คลงบนกระดาษ
          คุณเห็นรูปแบบอะไรไหม?
        courseD_iceage_loops4_c: ที่เห็นอยู่นี่ เป็นแนวทางที่เจ้ากระรอกเขี้ยวกดาบสแกรทน่าจะใช้
      courseD_iceage_loops4_2019:
        courseD_iceage_loops4_a: อย่ากลัวที่จะเรียกใช้งานโค้ดของคุณ และดูว่าจะเกิดอะไรขึ้น!
        courseD_iceage_loops4_b: ลองเขียนขั้นตอนต่าง ๆที่เจ้ากระรอกเขี้ยวดาบสแกรทน่าจะใช้เพื่อไปให้ถึงลูกโอ็คลงบนกระดาษ
          คุณเห็นรูปแบบอะไรไหม?
        courseD_iceage_loops4_c: ที่เห็นอยู่นี่ เป็นแนวทางที่เจ้ากระรอกเขี้ยวกดาบสแกรทน่าจะใช้
      courseD_iceage_loops6:
        courseD_iceage_loops6_a: โค้ดของคุณที่เสร็จสมบูรณ์จะประกอบไปด้วยบล็อก `ไปข้างหน้า`
          จำนวน**สาม**บล็อก
        courseD_iceage_loops6_b: คุณต้องเพิ่มลูปทำซ้ำเข้าไปอีก**หนึ่ง**ลูป!
        courseD_iceage_loops6_c: Your final path should look like this.
      courseD_iceage_loops6_2019:
        courseD_iceage_loops6_a: โค้ดของคุณที่เสร็จสมบูรณ์จะประกอบไปด้วยบล็อก `ไปข้างหน้า`
          จำนวน**สาม**บล็อก
        courseD_iceage_loops6_b: คุณต้องเพิ่มลูปทำซ้ำเข้าไปอีก**หนึ่ง**ลูป!
        courseD_iceage_loops6_c: Your final path should look like this.
      courseD_iceage_loops7:
        courseB_iceage_loops7_a: หากคุณติด คิดไม่ออก ให้ลองเขียนขั้นตอนต่าง ๆ ลงบนกระดาษ
          คุณเห็นรูปแบบไหมครับ?
        courseB_iceage_loops7_b: นี่เป็นหนทางที่เจ้ากระรอกเขี้ยวดาบสแกรทน่าจะใช้ เพื่อไปให้ถึงลูกโอ็คนั่น
      courseD_iceage_loops7_2019:
        courseB_iceage_loops7_a: หากคุณติด คิดไม่ออก ให้ลองเขียนขั้นตอนต่าง ๆ ลงบนกระดาษ
          คุณเห็นรูปแบบไหมครับ?
        courseB_iceage_loops7_b: นี่เป็นหนทางที่เจ้ากระรอกเขี้ยวดาบสแกรทน่าจะใช้ เพื่อไปให้ถึงลูกโอ็คนั่น
      courseD_iceage_loops8:
        courseD_iceage_loops8_a: บล็อก `หัน` ไปถูกต้องไหม? มีอะไรอีกไหมที่คุณต้องเปลี่ยน?
        courseD_iceage_loops8_b: ลูปแรกควรทำซ้ำ **3** ครั้ง ลูปที่สองควรทำซ้ำ **5**
          ลูปที่สามควรทำซ้ำ **4** และลูปสุดท้ายควรทำซ้ำ **4** ครั้ง
        courseD_iceage_loops8_c: ใช้ลูปเพื่อช่วยเจ้ากระรอกเขี้ยวดาบสแกรทให้เดินไปตามทางเส้นนี้
      courseD_iceage_loops8_2019:
        courseD_iceage_loops8_a: บล็อก `หัน` ไปถูกต้องไหม? มีอะไรอีกไหมที่คุณต้องเปลี่ยน?
        courseD_iceage_loops8_b: ลูปแรกควรทำซ้ำ **3** ครั้ง ลูปที่สองควรทำซ้ำ **5**
          ลูปที่สามควรทำซ้ำ **4** และลูปสุดท้ายควรทำซ้ำ **4** ครั้ง
        courseD_iceage_loops8_c: ใช้ลูปเพื่อช่วยเจ้ากระรอกเขี้ยวดาบสแกรทให้เดินไปตามทางเส้นนี้
      courseD_iceage_loops9:
        courseD_iceage_loops9_a: มีปัญหาอะไรไหมครับ? ลองแบ่งปริศนานี้เป็นชิ้นเล็กๆ
          และไม่ต้องกลัวที่จะลองเรียกใช้งานโค้ดของคุณในขณะที่คุณยังเขียนโค้ดไม่สมบูรณ์!
        courseD_iceage_loops9_b: โค้ดที่คุณเขียนเสร็จ ควรจะมีลูปใช้งานอยู่จำนวน **4**
          ลูป
        courseD_iceage_loops9_c: เจ้ากระรอกเขี้ยวดาบควรลองใช้เส้นทางนี้ดู เพื่อไปให้ถึงลูกโอ๊ค
      courseD_iceage_loops9_2019:
        courseD_iceage_loops9_a: มีปัญหาอะไรไหมครับ? ลองแบ่งปริศนานี้เป็นชิ้นเล็กๆ
          และไม่ต้องกลัวที่จะลองเรียกใช้งานโค้ดของคุณในขณะที่คุณยังเขียนโค้ดไม่สมบูรณ์!
        courseD_iceage_loops9_b: โค้ดที่คุณเขียนเสร็จ ควรจะมีลูปใช้งานอยู่จำนวน **4**
          ลูป
        courseD_iceage_loops9_c: เจ้ากระรอกเขี้ยวดาบควรลองใช้เส้นทางนี้ดู เพื่อไปให้ถึงลูกโอ๊ค
      courseD_maze_intro4_2019:
        courseC_maze_programming4_a: You can turn right or left from Red's point of
          view. If you are facing right, turning right will make you point downwards.
        courseC_maze_programming4_b: To follow the path, move forward and turn one
          way, then move again and turn the opposite way. Move forward one more time
          to reach the acorn.
      courseD_maze_intro5a_2019:
        courseC_maze_programming5_a: Try using the "Step" button to run your code
          line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: Remember that turns are from Red's perspective.
        courseC_maze_programming5_c: อย่ากลัวที่จะทำผิดพลาด! ลองเพิ่มบล็อกดู และเรียกใช้งานโค้ดเพื่อดูว่าจะเกิดอะไรขึ้น
          แม้ว่าคุณจะไม่คิดว่าคุณแก้ปริศนาได้แล้วก็ตาม
      courseD_maze_nestedLoops3:
        courseD_maze_nestedLoops3_a: To solve this puzzle, you will need to "nest"
          one `repeat` loop inside of another `repeat` loop.
        courseD_maze_nestedLoops3_b: Can't figure out where to put the loops? Try
          writing the code step-by-step and look for a pattern.
        courseD_maze_nestedLoops3_c: Try writing code for one straight piece of path
          and a turn. Can you repeat this to get to the sunflower?
      courseD_maze_nestedLoops3_2018:
        courseD_maze_nestedLoops3_a: To solve this puzzle, you will need to "nest"
          one `repeat` loop inside of another `repeat` loop.
        courseD_maze_nestedLoops3_b: Can't figure out where to put the loops? Try
          writing the code step-by-step and look for a pattern.
        courseD_maze_nestedLoops3_c: Try writing code for one straight piece of path
          and a turn. Can you repeat this to get to the sunflower?
      courseD_maze_nestedLoops3_2019:
        courseD_maze_nestedLoops3_a: To solve this puzzle, you will need to "nest"
          one `repeat` loop inside of another `repeat` loop.
        courseD_maze_nestedLoops3_b: Can't figure out where to put the loops? Try
          writing the code step-by-step and look for a pattern.
        courseD_maze_nestedLoops3_c: Try writing code for one straight piece of path
          and a turn. Can you repeat this to get to the sunflower?
      courseD_maze_nestedLoops4:
        courseD_maze_nestedLoops4_a: |-
          Try using this path through the maze.

          ![](https://images.code.org/565dbbcaf5862da0f60e54195820e814-image-1505961491245.36.09.png)
        courseD_maze_nestedLoops4_b: ถ้ามองไม่เห็นรูปแบบที่ชัดเจน ก็ให้ลองเขียนโค้ดออกมาดูก่อน
          และดูว่ามีอะไรที่มีการทำซ้ำแล้วซ้ำอีก ก่อนที่คุณจะเอาลูปมาใช้งาน
        courseD_maze_nestedLoops4_c: Try using one `repeat` loop inside of another
          to cut down on the amount of code you need.
      courseD_maze_nestedLoops4_2018:
        courseD_maze_nestedLoops4_a: |-
          Try using this path through the maze.

          ![](https://images.code.org/565dbbcaf5862da0f60e54195820e814-image-1505961491245.36.09.png)
        courseD_maze_nestedLoops4_b: ถ้ามองไม่เห็นรูปแบบที่ชัดเจน ก็ให้ลองเขียนโค้ดออกมาดูก่อน
          และดูว่ามีอะไรที่มีการทำซ้ำแล้วซ้ำอีก ก่อนที่คุณจะเอาลูปมาใช้งาน
        courseD_maze_nestedLoops4_c: Try using one `repeat` loop inside of another
          to cut down on the amount of code you need.
      courseD_maze_nestedLoops4_2019:
        courseD_maze_nestedLoops4_a: |-
          Try using this path through the maze.

          ![](https://images.code.org/565dbbcaf5862da0f60e54195820e814-image-1505961491245.36.09.png)
        courseD_maze_nestedLoops4_b: ถ้ามองไม่เห็นรูปแบบที่ชัดเจน ก็ให้ลองเขียนโค้ดออกมาดูก่อน
          และดูว่ามีอะไรที่มีการทำซ้ำแล้วซ้ำอีก ก่อนที่คุณจะเอาลูปมาใช้งาน
        courseD_maze_nestedLoops4_c: Try using one `repeat` loop inside of another
          to cut down on the amount of code you need.
      courseD_maze_nestedLoops5:
        courseD_maze_nestedLoops5_a: มองหาขั้นตอนที่เป็นรูปแบบบันไดในเขาวงกตนี้ เพื่อค้นหาที่ที่สามารถนำเอาลูปซ้อนลูปมาใช้
        courseD_maze_nestedLoops5_b: Can't figure out where to put the loops? Try
          writing the code step-by-step and look for a pattern.
      courseD_maze_nestedLoops5_2018:
        courseD_maze_nestedLoops5_a: มองหาขั้นตอนที่เป็นรูปแบบบันไดในเขาวงกตนี้ เพื่อค้นหาที่ที่สามารถนำเอาลูปซ้อนลูปมาใช้
        courseD_maze_nestedLoops5_b: Can't figure out where to put the loops? Try
          writing the code step-by-step and look for a pattern.
      courseD_maze_nestedLoops5_2019:
        courseD_maze_nestedLoops5_a: มองหาขั้นตอนที่เป็นรูปแบบบันไดในเขาวงกตนี้ เพื่อค้นหาที่ที่สามารถนำเอาลูปซ้อนลูปมาใช้
        courseD_maze_nestedLoops5_b: Can't figure out where to put the loops? Try
          writing the code step-by-step and look for a pattern.
      courseD_maze_nestedLoops6:
        courseD_maze_nestedLoops6_a: If you are stuck, try writing out the code out
          on paper without loops first and look for patterns.
        courseD_maze_nestedLoops6_b: Nesting `repeat` loops can help decrease the
          number of blocks used.
        courseD_maze_nestedLoops6_c: It will take two sets of nested `repeat` loops
          to solve this puzzle.
      courseD_maze_nestedLoops6_2018:
        courseD_maze_nestedLoops6_a: If you are stuck, try writing out the code out
          on paper without loops first and look for patterns.
        courseD_maze_nestedLoops6_b: Nesting `repeat` loops can help decrease the
          number of blocks used.
        courseD_maze_nestedLoops6_c: It will take two sets of nested `repeat` loops
          to solve this puzzle.
      courseD_maze_nestedLoops6_2019:
        courseD_maze_nestedLoops6_a: If you are stuck, try writing out the code out
          on paper without loops first and look for patterns.
        courseD_maze_nestedLoops6_b: Nesting `repeat` loops can help decrease the
          number of blocks used.
        courseD_maze_nestedLoops6_c: It will take two sets of nested `repeat` loops
          to solve this puzzle.
      courseD_maze_ramp1:
        courseC_maze_programming1_a: ถ้าเจ้านกไปไม่ถึงเจ้าหมูนั่น ให้แน่ใจว่าบล็อกทั้งหมดสามบล็อกได้รับการคลิกเอามาต่อเข้าด้วยกันแล้วคลิก
          "เริ่ม" อีกครั้ง
        courseC_maze_programming1_b: อย่ากลัวที่จะทำผิดพลาด! ลองเพิ่มบล็อกดู และเรียกใช้งานโค้ดเพื่อดูว่าจะเกิดอะไรขึ้น
          แม้ว่าคุณจะไม่คิดว่าคุณแก้ปริศนาได้แล้วก็ตาม
      courseD_maze_ramp1_2018:
        courseC_maze_programming1_a: ถ้าเจ้านกไปไม่ถึงเจ้าหมูนั่น ให้แน่ใจว่าบล็อกทั้งหมดสามบล็อกได้รับการคลิกเอามาต่อเข้าด้วยกันแล้วคลิก
          "เริ่ม" อีกครั้ง
        courseC_maze_programming1_b: อย่ากลัวที่จะทำผิดพลาด! ลองเพิ่มบล็อกดู และเรียกใช้งานโค้ดเพื่อดูว่าจะเกิดอะไรขึ้น
          แม้ว่าคุณจะไม่คิดว่าคุณแก้ปริศนาได้แล้วก็ตาม
      courseD_maze_ramp1_2019:
        courseC_maze_programming1_a: ถ้าเจ้านกไปไม่ถึงเจ้าหมูนั่น ให้แน่ใจว่าบล็อกทั้งหมดสามบล็อกได้รับการคลิกเอามาต่อเข้าด้วยกันแล้วคลิก
          "เริ่ม" อีกครั้ง
        courseC_maze_programming1_b: อย่ากลัวที่จะทำผิดพลาด! ลองเพิ่มบล็อกดู และเรียกใช้งานโค้ดเพื่อดูว่าจะเกิดอะไรขึ้น
          แม้ว่าคุณจะไม่คิดว่าคุณแก้ปริศนาได้แล้วก็ตาม
      courseD_maze_ramp2:
        courseC_maze_programming2_a: การใช้บล็อก `ไปข้างหน้า` นั้นให้ลากบล็อกจากกล่องเครื่องมือออกไปยังพื้นที่ทำงานและเชื่อมต่อเข้ากับบล็อก`เมื่อเรียกใช้งาน`
        courseC_maze_programming2_b: ให้แน่ใจว่าบล็อกทั้งหมดสามบล็อกถูกคลิกเอามาต่อเข้ากันกับบล็อก
          `เมื่อเรียกใช้งาน`
      courseD_maze_ramp2_2018:
        courseC_maze_programming2_a: การใช้บล็อก `ไปข้างหน้า` นั้นให้ลากบล็อกจากกล่องเครื่องมือออกไปยังพื้นที่ทำงานและเชื่อมต่อเข้ากับบล็อก`เมื่อเรียกใช้งาน`
        courseC_maze_programming2_b: ให้แน่ใจว่าบล็อกทั้งหมดสามบล็อกถูกคลิกเอามาต่อเข้ากันกับบล็อก
          `เมื่อเรียกใช้งาน`
      courseD_maze_ramp2_2019:
        courseC_maze_programming2_a: การใช้บล็อก `ไปข้างหน้า` นั้นให้ลากบล็อกจากกล่องเครื่องมือออกไปยังพื้นที่ทำงานและเชื่อมต่อเข้ากับบล็อก`เมื่อเรียกใช้งาน`
        courseC_maze_programming2_b: ให้แน่ใจว่าบล็อกทั้งหมดสามบล็อกถูกคลิกเอามาต่อเข้ากันกับบล็อก
          `เมื่อเรียกใช้งาน`
      courseD_maze_ramp3:
        courseC_maze_programming3_a: "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\nTo
          delete a block from the middle of your code, drag all of the blocks underneath
          it away to the right and let them sit in the workspace for a while.  \n\nClick
          on the block you want to delete, and drag it back to the toolbox.\n\nFinally,
          put your other blocks back in place where they belong."
      courseD_maze_ramp3_2018:
        courseC_maze_programming3_a: "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\nTo
          delete a block from the middle of your code, drag all of the blocks underneath
          it away to the right and let them sit in the workspace for a while.  \n\nClick
          on the block you want to delete, and drag it back to the toolbox.\n\nFinally,
          put your other blocks back in place where they belong."
      courseD_maze_ramp3_2019:
        courseC_maze_programming3_a: "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\nTo
          delete a block from the middle of your code, drag all of the blocks underneath
          it away to the right and let them sit in the workspace for a while.  \n\nClick
          on the block you want to delete, and drag it back to the toolbox.\n\nFinally,
          put your other blocks back in place where they belong."
      courseD_maze_ramp4:
        courseC_maze_programming4_a: You can turn right or left from the bird's point
          of view. If you are facing right, turning right will make you point downwards.
        courseC_maze_programming4_b: To follow the path, move forward and turn one
          way, then move again and turn the opposite way. Move forward one more time
          to reach the pig.
      courseD_maze_ramp4_2018:
        courseC_maze_programming4_a: You can turn right or left from the bird's point
          of view. If you are facing right, turning right will make you point downwards.
        courseC_maze_programming4_b: To follow the path, move forward and turn one
          way, then move again and turn the opposite way. Move forward one more time
          to reach the pig.
      courseD_maze_ramp4_2019:
        courseC_maze_programming4_a: You can turn right or left from Scrat's point
          of view. If you are facing right, turning right will make you point downwards.
        courseC_maze_programming4_b: To follow the path, move forward and turn one
          way, then move again and turn the opposite way. Move forward one more time
          to reach the acorn.
      courseD_maze_ramp5:
        courseC_maze_programming5_a: Try using the "Step" button to run your code
          line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: Remember that turns are from the bird's perspective.
        courseC_maze_programming5_c: อย่ากลัวที่จะทำผิดพลาด! ลองเพิ่มบล็อกดู และเรียกใช้งานโค้ดเพื่อดูว่าจะเกิดอะไรขึ้น
          แม้ว่าคุณจะไม่คิดว่าคุณแก้ปริศนาได้แล้วก็ตาม
      courseD_maze_ramp5_2018:
        courseC_maze_programming5_a: Try using the "Step" button to run your code
          line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: Remember that turns are from the bird's perspective.
        courseC_maze_programming5_c: อย่ากลัวที่จะทำผิดพลาด! ลองเพิ่มบล็อกดู และเรียกใช้งานโค้ดเพื่อดูว่าจะเกิดอะไรขึ้น
          แม้ว่าคุณจะไม่คิดว่าคุณแก้ปริศนาได้แล้วก็ตาม
      courseD_maze_ramp5_2019:
        courseC_maze_programming5_a: Try using the "Step" button to run your code
          line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: Remember that turns are from the bird's perspective.
        courseC_maze_programming5_c: อย่ากลัวที่จะทำผิดพลาด! ลองเพิ่มบล็อกดู และเรียกใช้งานโค้ดเพื่อดูว่าจะเกิดอะไรขึ้น
          แม้ว่าคุณจะไม่คิดว่าคุณแก้ปริศนาได้แล้วก็ตาม
      courseD_maze_ramp5a:
        courseC_maze_programming5_a: Try using the "Step" button to run your code
          line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: Remember that turns are from the bird's perspective.
        courseC_maze_programming5_c: อย่ากลัวที่จะทำผิดพลาด! ลองเพิ่มบล็อกดู และเรียกใช้งานโค้ดเพื่อดูว่าจะเกิดอะไรขึ้น
          แม้ว่าคุณจะไม่คิดว่าคุณแก้ปริศนาได้แล้วก็ตาม
      courseD_maze_ramp5a_2018:
        courseC_maze_programming5_a: Try using the "Step" button to run your code
          line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: Remember that turns are from the bird's perspective.
        courseC_maze_programming5_c: อย่ากลัวที่จะทำผิดพลาด! ลองเพิ่มบล็อกดู และเรียกใช้งานโค้ดเพื่อดูว่าจะเกิดอะไรขึ้น
          แม้ว่าคุณจะไม่คิดว่าคุณแก้ปริศนาได้แล้วก็ตาม
      courseD_maze_ramp5a_2019:
        courseC_maze_programming5_a: Try using the "Step" button to run your code
          line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: Remember that turns are from Scrat's perspective.
        courseC_maze_programming5_c: อย่ากลัวที่จะทำผิดพลาด! ลองเพิ่มบล็อกดู และเรียกใช้งานโค้ดเพื่อดูว่าจะเกิดอะไรขึ้น
          แม้ว่าคุณจะไม่คิดว่าคุณแก้ปริศนาได้แล้วก็ตาม
      courseD_maze_ramp5b:
        courseC_maze_programming5_a: Try using the "Step" button to run your code
          line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: Remember that turns are from the bird's perspective.
        courseC_maze_programming5_c: อย่ากลัวที่จะทำผิดพลาด! ลองเพิ่มบล็อกดู และเรียกใช้งานโค้ดเพื่อดูว่าจะเกิดอะไรขึ้น
          แม้ว่าคุณจะไม่คิดว่าคุณแก้ปริศนาได้แล้วก็ตาม
      courseD_maze_ramp5b_2018:
        courseC_maze_programming5_a: Try using the "Step" button to run your code
          line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: Remember that turns are from the bird's perspective.
        courseC_maze_programming5_c: อย่ากลัวที่จะทำผิดพลาด! ลองเพิ่มบล็อกดู และเรียกใช้งานโค้ดเพื่อดูว่าจะเกิดอะไรขึ้น
          แม้ว่าคุณจะไม่คิดว่าคุณแก้ปริศนาได้แล้วก็ตาม
      courseD_maze_ramp5b_2019:
        courseC_maze_programming5_a: Try using the "Step" button to run your code
          line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: Remember that turns are from the bird's perspective.
        courseC_maze_programming5_c: อย่ากลัวที่จะทำผิดพลาด! ลองเพิ่มบล็อกดู และเรียกใช้งานโค้ดเพื่อดูว่าจะเกิดอะไรขึ้น
          แม้ว่าคุณจะไม่คิดว่าคุณแก้ปริศนาได้แล้วก็ตาม
      courseD_maze_ramp6:
        courseC_maze_programming6_a: มีวิธีแก้ปริศนานี้สองวิธี
        courseC_maze_programming6_b: The bird starts facing a wall, so remember to
          turn before you move.
        courseC_maze_programming6_c: จำไว้ว่าคุณสามารถเขียนโค้ดทีละหนึ่งชิ้นแล้วกด
          " เริ่ม" เพื่อดูว่าคุณควรจะทำอะไรต่อไป
      courseD_maze_ramp7:
        courseD_maze_ramp7_b: Don't forget to use the "Step" button to go through
          block by block and look for errors.
        courseD_maze_ramp7_a: Use repeat blocks to run either a single block or a
          chunk of code over and over.
        courseD_maze_ramp7_c: If you want to simplify your code, you can put one repeat
          loop inside of another! This is called a **nested loop**.
      courseD_maze_until1:
        courseD_maze_until1_a: มีลำดับขั้นตินใด ที่คุณสามารถลูปเพื่อจะทำให้โค้ดของคุณสั้นลง?
        courseD_maze_until1_b: ลองใช้ลูปซ้อนลูปเพื่อแก้ปริศนานี้
      courseD_maze_until1_2018:
        courseD_maze_until1_a: มีลำดับขั้นตินใด ที่คุณสามารถลูปเพื่อจะทำให้โค้ดของคุณสั้นลง?
        courseD_maze_until1_b: ลองใช้ลูปซ้อนลูปเพื่อแก้ปริศนานี้
      courseD_maze_until1_2019:
        courseD_maze_until1_a: มีลำดับขั้นตินใด ที่คุณสามารถลูปเพื่อจะทำให้โค้ดของคุณสั้นลง?
        courseD_maze_until1_b: ลองใช้ลูปซ้อนลูปเพื่อแก้ปริศนานี้
      courseD_maze_until3:
        courseD_maze_until3_a: |-
          -   รหัสของคุณทำอะไร?
          -   สิ่งที่มันควรจะทำ?
          -   มันบอกอะไรคุณบ้าง?
        courseD_maze_until3_b: ถ้าคุณทำแล้วติดขัด ให้ลองเขียนขั้นตอนลงบนแผ่นกระดาษ
          และมองหาส่วนที่โค้ดเริ่มทำซ้ำๆ กัน
        courseD_maze_until3_c: มีรูปแบบขั้นตอนที่คุณสามารถปฏิบัติตาม สำหรับปริศนานี้หรือไม่
        courseD_maze_until3_d: อย่าลืมที่จะใช้บล็อก `ทำซ้ำจนกว่า` เพื่อทำให้โค้ดของคุณสั้นลง
      courseD_maze_until3_2018:
        courseD_maze_until3_a: |-
          -   รหัสของคุณทำอะไร?
          -   สิ่งที่มันควรจะทำ?
          -   มันบอกอะไรคุณบ้าง?
        courseD_maze_until3_b: ถ้าคุณทำแล้วติดขัด ให้ลองเขียนขั้นตอนลงบนแผ่นกระดาษ
          และมองหาส่วนที่โค้ดเริ่มทำซ้ำๆ กัน
        courseD_maze_until3_c: มีรูปแบบขั้นตอนที่คุณสามารถปฏิบัติตาม สำหรับปริศนานี้หรือไม่
        courseD_maze_until3_d: อย่าลืมที่จะใช้บล็อก `ทำซ้ำจนกว่า` เพื่อทำให้โค้ดของคุณสั้นลง
      courseD_maze_until3_2019:
        courseD_maze_until3_a: |-
          -   รหัสของคุณทำอะไร?
          -   สิ่งที่มันควรจะทำ?
          -   มันบอกอะไรคุณบ้าง?
        courseD_maze_until3_b: ถ้าคุณทำแล้วติดขัด ให้ลองเขียนขั้นตอนลงบนแผ่นกระดาษ
          และมองหาส่วนที่โค้ดเริ่มทำซ้ำๆ กัน
        courseD_maze_until3_c: มีรูปแบบขั้นตอนที่คุณสามารถปฏิบัติตาม สำหรับปริศนานี้หรือไม่
        courseD_maze_until3_d: อย่าลืมที่จะใช้บล็อก `ทำซ้ำจนกว่า` เพื่อทำให้โค้ดของคุณสั้นลง
      courseD_maze_until4:
        courseD_maze_until4_a: |-
          ใช้ปุ่ม "ขั้นตอน" เพื่อดูรหัสของคุณทำงานเป็นขั้นๆไป

          -   ทุกอย่างทำงานในขั้นแรกหรือไม่?
          -   ทุกอย่างทำงานในขั้นที่สองหรือไม่?
          -   มันผิดพลาดตรงไหน?
        courseD_maze_until4_b: มีรูปแบบขั้นตอนที่คุณสามารถปฏิบัติตาม สำหรับปริศนานี้หรือไม่
        courseD_maze_until4_c: อย่าลืมที่จะใช้บล็อก `ทำซ้ำจนกว่า` เพื่อทำให้โค้ดของคุณสั้นลง
      courseD_maze_until4_2018:
        courseD_maze_until4_a: |-
          ใช้ปุ่ม "ขั้นตอน" เพื่อดูรหัสของคุณทำงานเป็นขั้นๆไป

          -   ทุกอย่างทำงานในขั้นแรกหรือไม่?
          -   ทุกอย่างทำงานในขั้นที่สองหรือไม่?
          -   มันผิดพลาดตรงไหน?
        courseD_maze_until4_b: มีรูปแบบขั้นตอนที่คุณสามารถปฏิบัติตาม สำหรับปริศนานี้หรือไม่
        courseD_maze_until4_c: อย่าลืมที่จะใช้บล็อก `ทำซ้ำจนกว่า` เพื่อทำให้โค้ดของคุณสั้นลง
      courseD_maze_until4_2019:
        courseD_maze_until4_a: |-
          ใช้ปุ่ม "ขั้นตอน" เพื่อดูรหัสของคุณทำงานเป็นขั้นๆไป

          -   ทุกอย่างทำงานในขั้นแรกหรือไม่?
          -   ทุกอย่างทำงานในขั้นที่สองหรือไม่?
          -   มันผิดพลาดตรงไหน?
        courseD_maze_until4_b: มีรูปแบบขั้นตอนที่คุณสามารถปฏิบัติตาม สำหรับปริศนานี้หรือไม่
        courseD_maze_until4_c: อย่าลืมที่จะใช้บล็อก `ทำซ้ำจนกว่า` เพื่อทำให้โค้ดของคุณสั้นลง
      courseD_maze_until5:
        courseD_maze_until5_a: Don't forget to use `if path to the left` to keep the
          zombie checking for a place to turn.
        courseD_maze_until5_b: หากต้องการใช้เพียงบล็อก `เดินไปข้างหน้า` เพียงบล็อกเดียว
          ก็ให้ใส่ไว้ภายในบล็อก `ทำซ้ำจนกว่าดอกทานตะวัน`
        courseD_maze_until5_c: หลังจากก้าวแต่ละก้าว ซอมบี้ควรตรวจสอบว่ามีเส้นทางไปทางซ้ายหรือไม่
          และมันควรจะทำอย่างไรถ้ามันพบเส้นทางนั้นเข้า?
      courseD_maze_until5_2018:
        courseD_maze_until5_b: หากต้องการใช้เพียงบล็อก `เดินไปข้างหน้า` เพียงบล็อกเดียว
          ก็ให้ใส่ไว้ภายในบล็อก `ทำซ้ำจนกว่าดอกทานตะวัน`
      courseD_maze_until5_2019:
        courseD_maze_until5_b: หากต้องการใช้เพียงบล็อก `เดินไปข้างหน้า` เพียงบล็อกเดียว
          ก็ให้ใส่ไว้ภายในบล็อก `ทำซ้ำจนกว่าดอกทานตะวัน`
      courseD_maze_until6:
        courseD_maze_until6_a: This time, try the `if path to the right` to keep the
          zombie on track.
        courseD_maze_until6_b: หากต้องการใช้เพียงบล็อก `เดินไปข้างหน้า` เพียงบล็อกเดียว
          ก็ให้ใส่ไว้ภายในบล็อก `ทำซ้ำจนกว่าดอกทานตะวัน`
        courseD_maze_until6_c: แม้ว่าจะมีการหันไปตอนนี้มากกว่าปริศนาสุดท้าย แต่โค้ดของคุณก็เกือบเหมือนกันเพราะการใช้บล็อก
          `ทำซ้ำจนกว่า`!
      courseD_maze_until6_2018:
        courseD_maze_until6_b: หากต้องการใช้เพียงบล็อก `เดินไปข้างหน้า` เพียงบล็อกเดียว
          ก็ให้ใส่ไว้ภายในบล็อก `ทำซ้ำจนกว่าดอกทานตะวัน`
      courseD_maze_until6_2019:
        courseD_maze_until6_b: หากต้องการใช้เพียงบล็อก `เดินไปข้างหน้า` เพียงบล็อกเดียว
          ก็ให้ใส่ไว้ภายในบล็อก `ทำซ้ำจนกว่าดอกทานตะวัน`
      courseD_maze_until7:
        courseD_maze_until7_a: โค้ดที่คุณเขียนไม่จำเป็นต้องยาวกว่าครั้งก่อน ไม่ใช่เพราะว่าเขาวงกตยาวขึ้น
        courseD_maze_until7_b: แม้ว่าจะมีการหันไปตอนนี้มากกว่าปริศนาสุดท้าย แต่โค้ดของคุณก็เกือบเหมือนกันเพราะการใช้บล็อก
          `ทำซ้ำจนกว่า`!
        courseD_maze_until7_c: จำไว้ว่าให้เช็คดูว่ามีทางไปได้ไหมทางด้านซ้ายมือ เพราะถ้าคุณเลี้ยวขวามันจะทำให้คุณหลงทางได้!
      courseD_maze_until7_2018:
        courseD_maze_until7_a: โค้ดที่คุณเขียนไม่จำเป็นต้องยาวกว่าครั้งก่อน ไม่ใช่เพราะว่าเขาวงกตยาวขึ้น
        courseD_maze_until7_b: แม้ว่าจะมีการหันไปตอนนี้มากกว่าปริศนาสุดท้าย แต่โค้ดของคุณก็เกือบเหมือนกันเพราะการใช้บล็อก
          `ทำซ้ำจนกว่า`!
      courseD_maze_until7_2019:
        courseD_maze_until7_a: โค้ดที่คุณเขียนไม่จำเป็นต้องยาวกว่าครั้งก่อน ไม่ใช่เพราะว่าเขาวงกตยาวขึ้น
        courseD_maze_until7_b: แม้ว่าจะมีการหันไปตอนนี้มากกว่าปริศนาสุดท้าย แต่โค้ดของคุณก็เกือบเหมือนกันเพราะการใช้บล็อก
          `ทำซ้ำจนกว่า`!
      courseD_maze_until8:
        courseD_maze_until8_a: ให้แน่ใจว่าคุณใช้บล็อก ' ถ้า/นอกจากนั้น (if/else) '
          เพื่อให้ซอมบี้มุ่งไปในทิศทางที่ถูกต้อง
        courseD_maze_until8_b: ด้วยการใช้บล็อก `ถ้า/นอกจากนั้น (if/else)` ถ้ามีเส้นทางอยู่ข้างหน้า
          คุณควรจะทำอย่างไร
        courseD_maze_until8_c: ด้วยการใช้บล็อก `ถ้า/นอกจากนั้น (if/else)` ถ้าไม่มีเส้นทางอยู่ข้างหน้า
          คุณควรจะหันหน้าไปทางไหน?
      courseD_maze_until9:
        courseD_maze_until8_a: การใช้ `ถ้าเป็นทางข้างหน้า`จะทำให้คุณสามารถเดินไปข้างหน้าเมื่อใดก็ตามที่เป็นไปได้
          ช่วยให้คุณพลาดจากเส้นทางที่มี เจ้าจอมเขมือบรออยู่
        courseD_maze_until8_b: คุณควรจะเลี่้ยวไปทางไหน ถ้าไม่มีทางให้เดินต่อไปข้างหน้า?
        courseD_maze_until8_c: จำไว้ว่าให้ใช้บล็อก`ทำซ้ำจนกว่า` เพื่อให้คุณไปให้ถึงดอกทานตะวัน!
      courseD_maze_until9_2018:
        courseD_maze_until8_c: จำไว้ว่าให้ใช้บล็อก`ทำซ้ำจนกว่า` เพื่อให้คุณไปให้ถึงดอกทานตะวัน!
      courseD_maze_until9_2019:
        courseD_maze_until8_c: จำไว้ว่าให้ใช้บล็อก`ทำซ้ำจนกว่า` เพื่อให้คุณไปให้ถึงดอกทานตะวัน!
      courseD_playLab_cond1:
        courseD_playLab_cond1_a: ในการแก้ปัญหานี้ให้ต่อบล็อก `ให้นักแสดง 1 ขยับขึ้น`
          เข้ากับอีเวนท์ `เมื่อคุณกดแป้นลูกศรขึ้น` แล้วทำเช่นเดียวกันกับทิศทางอื่นๆ
          ด้วย
        courseD_playLab_cond1_b: ใช้รายการเลือกแบบดึงลง (drop down menus) กับบล็อก`เมื่อคุณกดแป้นลูกศร....`
          และบล็อก `ให้นักแสดง... ขยับ...` เพื่อเปลี่ยนทิศทางที่พวกเขาเคลื่อนไหว
        courseD_playLab_cond1_c: อย่าลืมที่จะพาเจ้าโจรสลัดขาไม้ไปที่ธงทั้งสองเมื่อคุณคลิก
          " เริ่ม "!
      courseD_playLab_cond1_2018:
        courseD_playLab_cond1_a: ในการแก้ปัญหานี้ให้ต่อบล็อก `ให้นักแสดง 1 ขยับขึ้น`
          เข้ากับอีเวนท์ `เมื่อคุณกดแป้นลูกศรขึ้น` แล้วทำเช่นเดียวกันกับทิศทางอื่นๆ
          ด้วย
        courseD_playLab_cond1_b: ใช้รายการเลือกแบบดึงลง (drop down menus) กับบล็อก`เมื่อคุณกดแป้นลูกศร....`
          และบล็อก `ให้นักแสดง... ขยับ...` เพื่อเปลี่ยนทิศทางที่พวกเขาเคลื่อนไหว
        courseD_playLab_cond1_c: อย่าลืมที่จะพาเจ้าโจรสลัดขาไม้ไปที่ธงทั้งสองเมื่อคุณคลิก
          " เริ่ม "!
      courseD_playLab_cond2:
        courseD_playLab_cond2_a: เพื่อที่จะประสบความสำเร็จกับปริศนานี้ ใช้ บล็อก `ทำคะแนน`
          ไว้ด้านล่างของอีเวนท์ `เมื่อนักแสดง 1 สัมผัสนักแสดงที่ 2`
      courseD_playLab_cond2_2018:
        courseD_playLab_cond2_a: เพื่อที่จะประสบความสำเร็จกับปริศนานี้ ใช้ บล็อก `ทำคะแนน`
          ไว้ด้านล่างของอีเวนท์ `เมื่อนักแสดง 1 สัมผัสนักแสดงที่ 2`
      courseD_playLab_cond3:
        courseD_playLab_cond3_a: คุณจะต้องเพิ่มบล็อกสองบล็อกให้กับลูป `ทำซ้ำตลอดไป`  บล็อกอันที่หนึ่งจะเลือกอารมณ์แบบสุ่มให้กับเจ้ามังกร
          (นักแสดงที่ 2) และสำหรับบล็อกอีกอันจะให้รอ 1 วินาทีก่อนที่จะวนลูปอีกครั้งหนึ่ง
      courseD_playLab_cond3_2018:
        courseD_playLab_cond3_a: คุณจะต้องเพิ่มบล็อกสองบล็อกให้กับลูป `ทำซ้ำตลอดไป`  บล็อกอันที่หนึ่งจะเลือกอารมณ์แบบสุ่มให้กับเจ้ามังกร
          (นักแสดงที่ 2) และสำหรับบล็อกอีกอันจะให้รอ 1 วินาทีก่อนที่จะวนลูปอีกครั้งหนึ่ง
      courseD_playLab_cond3a:
        courseD_playLab_cond3_c: |-
          `ถ้า (if)` มังกรมีอารมณ์ดี

          -   `ทำแต้ม`
          -   `ทำแต้ม`
              ไม่เช่นนั้น
          -   `ทำแต้ม`
      courseD_playLab_cond3a_2018:
        courseD_playLab_cond3_c: |-
          `ถ้า (if)` มังกรมีอารมณ์ดี

          -   `ทำแต้ม`
          -   `ทำแต้ม`
              ไม่เช่นนั้น
          -   `ทำแต้ม`
      courseD_playLab_cond4:
        courseD_playLab_cond4_a: คุณต้องการที่จะใช้อีเวนท์`เมื่อเรียกใช้งาน` เพื่อให้นินจาไล่ล่าเจ้าโจรสลัด.
        courseD_playLab_cond4_b: มีบล็อกพิเศษที่เรียกว่า ' กำหนดให้นินจาใส่หน้ากากทั้งหมดไล่ล่าผู้เล่น...
          ' ที่จะทำให้นินจาร้อนรนในการติดตามไล่ล่าไม่ว่าโจรสลัดจะไปไหน!
        courseD_playLab_cond4_c: ใส่บล็อก ' จบเกมพร้อมความพ่ายแพ้ `ภายใต้เหตุการณ์`
          เมื่อนักแสดงที่ 1 สัมผัส นักแสดงที่ 3 \`
      courseD_playLab_cond4_2018:
        courseD_playLab_cond4_a: คุณต้องการที่จะใช้อีเวนท์`เมื่อเรียกใช้งาน` เพื่อให้นินจาไล่ล่าเจ้าโจรสลัด.
        courseD_playLab_cond4_b: มีบล็อกพิเศษที่เรียกว่า ' กำหนดให้นินจาใส่หน้ากากทั้งหมดไล่ล่าผู้เล่น...
          ' ที่จะทำให้นินจาร้อนรนในการติดตามไล่ล่าไม่ว่าโจรสลัดจะไปไหน!
        courseD_playLab_cond4_c: ใส่บล็อก ' จบเกมพร้อมความพ่ายแพ้ `ภายใต้เหตุการณ์`
          เมื่อนักแสดงที่ 1 สัมผัส นักแสดงที่ 3 \`
      courseD_playLab_cond5:
        courseD_playLab_cond5_a: ใช้คำสั่ง`ถ้า (if)` ที่เปรียบเทียบว่า `ทำแต้ม ' นั้น`
          > \` 5 โดยให้ถือว่าการท้าทายนี้ได้จบลงแล้ว
        courseD_playLab_cond5_b: คุณสามารถมีลูป`ทำซ้ำตลอดไป` มากกว่าหนึ่งลูปในพื้นที่ทำงาน
      courseD_playLab_cond5_2018:
        courseD_playLab_cond5_a: ใช้คำสั่ง`ถ้า (if)` ที่เปรียบเทียบว่า `ทำแต้ม ' นั้น`
          > \` 5 โดยให้ถือว่าการท้าทายนี้ได้จบลงแล้ว
        courseD_playLab_cond5_b: คุณสามารถมีลูป`ทำซ้ำตลอดไป` มากกว่าหนึ่งลูปในพื้นที่ทำงาน
      courseD_playLab_cond6:
        courseD_playLab_cond6_a: เพิ่มเติมบล็อก ' ตั้งความเร็วสำหรับทุกๆ นินจาใส่หน้ากาก'
          ตอนเริ่มต้นของโปรแกรมที่จะช่วยให้นินจาช้าลง
        courseD_playLab_cond6_b: คุณต้องใช้บล็อก `ถ้า นักแสดง 1 อยู่ที่แกน Y ที่ >
          255` ภายในบล็อก `ทำซ้ำตลอดไป` เพื่อตรวจสอบตลอดเวลาว่าเจ้าโจรสลัดอยู่ต่ำกว่าเจ้าปลาหมึกยักษ์หรือไม่
      courseD_playLab_cond6_2018:
        courseD_playLab_cond6_a: เพิ่มเติมบล็อก ' ตั้งความเร็วสำหรับทุกๆ นินจาใส่หน้ากาก'
          ตอนเริ่มต้นของโปรแกรมที่จะช่วยให้นินจาช้าลง
        courseD_playLab_cond6_b: คุณต้องใช้บล็อก `ถ้า นักแสดง 1 อยู่ที่แกน Y ที่ >
          255` ภายในบล็อก `ทำซ้ำตลอดไป` เพื่อตรวจสอบตลอดเวลาว่าเจ้าโจรสลัดอยู่ต่ำกว่าเจ้าปลาหมึกยักษ์หรือไม่
      courseD_playLab_cond6a:
        courseD_playLab_cond6_c: เพิ่มบล็อก `รอ 1 วินาที` ไปไว้ด้านบนของ ลูป `ทำซ้ำตลอดไป`
          ที่ใช้ตรวจสอบตำแหน่งของเจ้าโจรสลัด (แต่ต้องไม่อยู่ภายในคำสั่ง `ถ้า (if)`)
          เพื่อไม่ให้เสียคะแนนเร็วเกินไป
      courseD_playLab_cond6a_2018:
        courseD_playLab_cond6_c: เพิ่มบล็อก `รอ 1 วินาที` ไปไว้ด้านบนของ ลูป `ทำซ้ำตลอดไป`
          ที่ใช้ตรวจสอบตำแหน่งของเจ้าโจรสลัด (แต่ต้องไม่อยู่ภายในคำสั่ง `ถ้า (if)`)
          เพื่อไม่ให้เสียคะแนนเร็วเกินไป
      courseD_scrat_ramp1:
        courseC_maze_programming1_a: If Scrat isn't getting to the acorn, make sure
          all three of the blocks have been fully snapped together, then click "Run"
          again.
        courseC_maze_programming1_b: อย่ากลัวที่จะทำผิดพลาด! ลองเพิ่มบล็อกดู และเรียกใช้งานโค้ดเพื่อดูว่าจะเกิดอะไรขึ้น
          แม้ว่าคุณจะไม่คิดว่าคุณแก้ปริศนาได้แล้วก็ตาม
      courseD_scrat_ramp2:
        courseC_maze_programming2_a: การใช้บล็อก `ไปข้างหน้า` นั้นให้ลากบล็อกจากกล่องเครื่องมือออกไปยังพื้นที่ทำงานและเชื่อมต่อเข้ากับบล็อก`เมื่อเรียกใช้งาน`
        courseC_maze_programming2_b: Make sure all three `move forward` blocks are
          attached to the `when run` block.
      courseD_scrat_ramp3:
        courseC_maze_programming3_a: "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\nTo
          delete a block from the middle of your code, drag all of the blocks underneath
          it away to the right and let them sit in the workspace for a while.  \n\nClick
          on the block you want to delete, and drag it back to the toolbox.\n\nFinally,
          put your other blocks back in place where they belong."
        courseC_maze_programming3_b: Remember that turns to the right and left are
          from Scrat's perspective.
      courseD_scrat_ramp4:
        courseC_maze_programming4_a: You can turn right or left from Scrat's point
          of view. If you are facing right, turning right will make you point downwards.
        courseC_maze_programming4_b: To follow the path, move forward and turn one
          way, then move again and turn the opposite way. Move forward one more time
          to reach the acorn.
        courseC_maze_programming4_c: อย่ากลัวที่จะทำผิดพลาด! ลองเพิ่มบล็อกดู และเรียกใช้งานโค้ดเพื่อดูว่าจะเกิดอะไรขึ้น
          แม้ว่าคุณจะไม่คิดว่าคุณแก้ปริศนาได้แล้วก็ตาม
      courseD_scrat_ramp5:
        courseC_maze_programming5_a: Try using the "Step" button to run your code
          line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: How far do you need to move to get to the corner?
        courseC_maze_programming5_c: You will need to turn left at the corner to get
          to the acorn.
      courseD_scrat_ramp6:
        courseC_maze_programming6a_a: Use a `repeat` loop to get Scrat moving!
      courseD_scrat_ramp7:
        courseD_scrat_programming6_a: มีวิธีแก้ปริศนานี้สองวิธี
        courseD_scrat_programming6_b: Remember to turn first before moving, since
          Scrat is facing the wrong direction.
        courseD_scrat_programming6_c: อย่ากลัวที่จะทำผิดพลาด! ลองเพิ่มบล็อกดู และเรียกใช้งานโค้ดเพื่อดูว่าจะเกิดอะไรขึ้น
          แม้ว่าคุณจะไม่คิดว่าคุณแก้ปริศนาได้แล้วก็ตาม
      courseD_scrat_ramp8:
        courseD_maze_ramp7_b: Don't forget to use the "Step" button to go through
          block by block and look for errors.
        courseD_maze_ramp7_a: Use repeat blocks to run either a single block or a
          chunk of code over and over.
        courseD_maze_ramp7_c: อย่ากลัวที่จะทำผิดพลาด! ลองเพิ่มบล็อกดู และเรียกใช้งานโค้ดเพื่อดูว่าจะเกิดอะไรขึ้น
          แม้ว่าคุณจะไม่คิดว่าคุณแก้ปริศนาได้แล้วก็ตาม
      courseE_artist_concept1:
        courseE_artist_concept1_a: The hexagons have 50 pixel sides and 60 degree
          turns to the right.
        courseE_artist_concept1_b: Try using a function here so you don't have to
          write the code for a hexagon over and over again.
        courseE_artist_concept1_c: Use the `set width` block before each function
          call to change the pen width.
      courseE_artist_concept1_2018:
        courseE_artist_concept1_a: The hexagons have 50 pixel sides and 60 degree
          turns to the right.
        courseE_artist_concept1_b: Try using a function here so you don't have to
          write the code for a hexagon over and over again.
        courseE_artist_concept1_c: Use the `set width` block before each function
          call to change the pen width.
      courseE_artist_concept4:
        courseE_artist_concept4_a: There are several ways to solve this puzzle. Can
          you make a plan?
        courseE_artist_concept4_b: Try creating one square. Then make a line of squares.  What
          comes next?
        courseE_artist_concept4_c: After drawing a line of squares, you can either
          turn around and draw another line of squares going left, or you can jump
          back to the left side of the figure to draw another line of squares going
          right. Which do you prefer?
      courseE_artist_concept4_2018:
        courseE_artist_concept4_a: There are several ways to solve this puzzle. Can
          you make a plan?
        courseE_artist_concept4_b: Try creating one square. Then make a line of squares.  What
          comes next?
        courseE_artist_concept4_c: After drawing a line of squares, you can either
          turn around and draw another line of squares going left, or you can jump
          back to the left side of the figure to draw another line of squares going
          right. Which do you prefer?
      courseE_artist_concept_challenge1:
        courseE_artist_concept_challenge1_a: 'รูปครึ่ง-หกเหลี่ยมมี \*\* ความยาว 30
          \*\* และหันขวาไป \*\* 60 องศา \*\*\*  '
        courseE_artist_concept_challenge1_b: 'รูป 2/3 สามเหลี่ยม มี \*\* ความยาว 80
          \*\* และหันขวาไป \*\* 120 องศา \*\* '
        courseE_artist_concept_challenge1_c: |-
          This is the design you want to repeat to make the full shape:

          ![](<https://images.code.org/d6b2afd39119da33d085dcce6077ada8-image-1501705780826.28.43 PM.png>)
      courseE_artist_concept_challenge1_2018:
        courseE_artist_concept_challenge1_a: 'รูปครึ่ง-หกเหลี่ยมมี \*\* ความยาว 30
          \*\* และหันขวาไป \*\* 60 องศา \*\*\*  '
        courseE_artist_concept_challenge1_b: 'รูป 2/3 สามเหลี่ยม มี \*\* ความยาว 80
          \*\* และหันขวาไป \*\* 120 องศา \*\* '
        courseE_artist_concept_challenge1_c: |-
          This is the design you want to repeat to make the full shape:

          ![](<https://images.code.org/d6b2afd39119da33d085dcce6077ada8-image-1501705780826.28.43 PM.png>)
      courseE_artist_concept_challenge2:
        courseE_artist_concept_challenge2_a: Once you define a function, you can call
          it over and over again - whenever and wherever you want!
        courseE_artist_concept_challenge2_b: |-
          You can jump to different positions on the canvas using this command:

          <xml>  <block type="jump_to">
              <title name="VALUE">???</title>
            </block></xml>
      courseE_artist_concept_challenge2_2018:
        courseE_artist_concept_challenge2_a: Once you define a function, you can call
          it over and over again - whenever and wherever you want!
        courseE_artist_concept_challenge2_b: |-
          You can jump to different positions on the canvas using this command:

          <xml>  <block type="jump_to">
              <title name="VALUE">???</title>
            </block></xml>
      courseE_artist_functions1:
        courseE_artist_functions1_a: กรอบสี่เหลี่ยมจตุรัสแต่ละกรอบมีด้าน 100 พิกเซล
          นั่นหมายความว่าคุณจะต้องเคลื่อนที่ไปข้างหน้า 175 พิกเซลก่อนที่จะวาดกรอบแว่นอันที่สองของคุณ
        courseE_artist_functions1_b: โอเคที่จะวาดเส้นทับซ้อนกันเพื่อทำแว่นตาของคุณ
        courseE_artist_functions1_c: For shorter code, try using a `repeat` loop to
          draw the square frames of the glasses.
      courseE_artist_functions10:
        courseD_artist_functions10_b: This drawing is a lot like the last one, but
          the `draw line` function is now drawing a different shape.
        courseD_artist_functions10_a: To avoid using multiple `move forward` blocks,
          create a `draw hexagon` function and call that multiple times.
        courseD_artist_functions10_c: |-
          Do you see where this drawing could use a function called `line of hexagons`?

          ![](https://images.code.org/904e0f38232fd9c15a3d2d172e7dde0b-image-1493140714580.gif)
      courseE_artist_functions10_2018:
        courseD_artist_functions10_b: This drawing is a lot like the last one, but
          the `draw line` function is now drawing a different shape.
        courseD_artist_functions10_a: To avoid using multiple `move forward` blocks,
          create a `draw hexagon` function and call that multiple times.
        courseD_artist_functions10_c: |-
          Do you see where this drawing could use a function called `line of hexagons`?

          ![](https://images.code.org/904e0f38232fd9c15a3d2d172e7dde0b-image-1493140714580.gif)
      courseE_artist_functions10_2019:
        courseD_artist_functions10_b: This drawing is a lot like the last one, but
          the `draw line` function is now drawing a different shape.
        courseD_artist_functions10_a: To avoid using multiple `move forward` blocks,
          create a `draw hexagon` function and call that multiple times.
        courseD_artist_functions10_c: |-
          Do you see where this drawing could use a function called `line of hexagons`?

          ![](https://images.code.org/904e0f38232fd9c15a3d2d172e7dde0b-image-1493140714580.gif)
      courseE_artist_functions1_copy:
        courseE_artist_functions1_a: กรอบสี่เหลี่ยมจตุรัสแต่ละกรอบมีด้าน 100 พิกเซล
          นั่นหมายความว่าคุณจะต้องเคลื่อนที่ไปข้างหน้า 175 พิกเซลก่อนที่จะวาดกรอบแว่นอันที่สองของคุณ
        courseE_artist_functions1_b: โอเคที่จะวาดเส้นทับซ้อนกันเพื่อทำแว่นตาของคุณ
        courseE_artist_functions1_c: For shorter code, try using a `repeat` loop to
          draw the square frames of the glasses.
      courseE_artist_functions2:
        courseD_artist_functions2_b: The function you write should not contain your
          whole program, just the part that draws a square with 100 pixel sides.
        courseD_artist_functions2_c: |-
          Use the green `draw a square` block to "call" your function under the `when run` block. Otherwise, the code in your function will not run.

          <xml><block type="procedures_callnoreturn" limit="2"><mutation name="draw a square"/></block></xml>
        courseD_artist_functions2_a: |-
          โปรแกรมของคุณควร:

          -   ใช้ฟังก์ชัน
          -   ย้ายไปข้างหน้า 100+75 พิกเซล
          -   ใช้ฟังก์ชัน
      courseE_artist_functions2_2018:
        courseD_artist_functions2_b: The function should not contain your whole program,
          just the part that draws a square with 100 pixel sides.
        courseD_artist_functions2_c: |-
          Make sure that you use the green `draw a square` block to "call" your function. Otherwise, the code in your function will not run.

          <xml><block type="procedures_callnoreturn" limit="2"><mutation name="draw a square"/></block></xml>
        courseD_artist_functions2_a: |-
          โปรแกรมของคุณควร:

          -   ใช้ฟังก์ชัน
          -   ย้ายไปข้างหน้า 100+75 พิกเซล
          -   ใช้ฟังก์ชัน
      courseE_artist_functions2_2019:
        courseD_artist_functions2_b: The function should not contain your whole program,
          just the part that draws a square with 100 pixel sides.
        courseD_artist_functions2_c: |-
          Make sure that you use the green `draw a square` block to "call" your function. Otherwise, the code in your function will not run.

          <xml><block type="procedures_callnoreturn" limit="2"><mutation name="draw a square"/></block></xml>
        courseD_artist_functions2_a: |-
          โปรแกรมของคุณควร:

          -   ใช้ฟังก์ชัน
          -   ย้ายไปข้างหน้า 100+75 พิกเซล
          -   ใช้ฟังก์ชัน
      courseE_artist_functions2_copy:
        courseD_artist_functions2_b: The function you write should not contain your
          whole program, just the part that draws a square with 100 pixel sides.
        courseD_artist_functions2_c: |-
          Use the green `draw a square` block to "call" your function under the `when run` block. Otherwise, the code in your function will not run.

          <xml><block type="procedures_callnoreturn" limit="2"><mutation name="draw a square"/></block></xml>
        courseD_artist_functions2_a: |-
          โปรแกรมของคุณควร:

          -   ใช้ฟังก์ชัน
          -   ย้ายไปข้างหน้า 100+75 พิกเซล
          -   ใช้ฟังก์ชัน
      courseE_artist_functions3:
        courseD_artist_functions3_a: |-
          To solve this puzzle, you just need to add a  loop that repeats the starter code 8 times.

          If you can't remember what the starter code was, click "start over" in the upper right corner of the workspace.
        courseD_artist_functions3_b: Your loop should have all 3 starter code blocks
          inside of it.
      courseE_artist_functions3_copy:
        courseD_artist_functions3_a: |-
          To solve this puzzle, you just need to add a  loop that repeats the starter code 8 times.

          If you can't remember what the starter code was, click "start over" in the upper right corner of the workspace.
        courseD_artist_functions3_b: Your loop should have all 3 starter code blocks
          inside of it.
      courseE_artist_functions4:
        courseD_artist_functions4_a: Try using a function!
        courseD_artist_functions4_b: Drag the `draw a star` function block out of
          the toolbox to begin building your function. It should have the same code
          as the previous puzzle, since you are drawing the same star pattern.
        courseD_artist_functions4_c: Use the green `draw a star` block to call this
          function in your main program. Don't forget to jump forward between each
          star!
      courseE_artist_functions4_copy:
        courseD_artist_functions4_a: Try using a function!
        courseD_artist_functions4_b: Drag the `draw a star` function block out of
          the toolbox to begin building your function. It should have the same code
          as the previous puzzle, since you are drawing the same star pattern.
        courseD_artist_functions4_c: Use the green `draw a star` block to call this
          function in your main program. Don't forget to jump forward between each
          star!
      courseE_artist_functions5:
        courseD_artist_functions5_a: Don't give up!  Remember what you have been learning.
        courseD_artist_functions5_b: Functions make it easy to call saved code at
          any time, not just from inside a loop!
        courseD_artist_functions5_c: Start by dragging the code for a star shape into
          the `draw a star` function, then use this function to draw the three stars!
      courseE_artist_functions5_2018:
        courseD_artist_functions5_a: Don't give up!  Remember what you have been learning.
        courseD_artist_functions5_b: Functions make it easy to call saved code at
          any time, not just from inside a loop!
        courseD_artist_functions5_c: Start by creating your `draw a star` function,
          then use this function to draw the three stars!
      courseE_artist_functions5_2019:
        courseD_artist_functions5_a: Don't give up!  Remember what you have been learning.
        courseD_artist_functions5_b: Functions make it easy to call saved code at
          any time, not just from inside a loop!
        courseD_artist_functions5_c: Start by creating your `draw a star` function,
          then use this function to draw the three stars!
      courseE_artist_functions5_copy:
        courseD_artist_functions5_a: Don't give up!  Remember what you have been learning.
        courseD_artist_functions5_b: Functions make it easy to call saved code at
          any time, not just from inside a loop!
        courseD_artist_functions5_c: Start by dragging the code for a star shape into
          the `draw a star` function, then use this function to draw the three stars!
      courseE_artist_functions6:
        grade4_artist_functions_windows0_a: Focus only on making one window for now.  We'll
          create a function in the next puzzle.
        grade4_artist_functions_windows0_b: Try using nested loops. The inner loop
          will make the square and the outer loop will rotate the square four times.
        grade4_artist_functions_windows0_c: ไม่ต้องกลัวว่าคุณจะทำผิด! ลองเพิ่มบล็อกเข้าไปและเรียกโค้ดมาใช้งาน
          เพื่อดูว่าจะเกิดอะไรขึ้นถึงแม้ว่าคุณยังจะแก้ปริศนาไม่ออกก็ตาม
      courseE_artist_functions7:
        courseD_artist_functions7_a: Try creating your function first then add windows
          one at a time.
        courseD_artist_functions7_b: You shouldn't need to add any extra repeat loops.  Just
          jump the artist 100 pixels between each top window, then down 150 pixels
          to get to the bottom windows.
      courseE_artist_functions7_2018:
        courseD_artist_functions7_a: Try creating your function first then add windows
          one at a time.
        courseD_artist_functions7_b: To get from the top windows to the bottom windows,
          simply turn the artist right, jump 150 pixels, then turn the artist right
          again!  Now the artist will be facing the correct direction to finish the
          rest of the house!
      courseE_artist_functions7_2019:
        courseD_artist_functions7_a: Try creating your function first then add windows
          one at a time.
        courseD_artist_functions7_b: To get from the top windows to the bottom windows,
          simply turn the artist right, jump 150 pixels, then turn the artist right
          again!  Now the artist will be facing the correct direction to finish the
          rest of the house!
      courseE_artist_functions8:
        courseD_artist_functions8_f: You only need one `move forward` block, but you
          will need quite a few `jump forward` and/or `jump backward` blocks!
        courseD_artist_functions8_a: |-
          Start by making a function for a square, then try making a function for a line of squares.

          How would you use the `draw a line of squares` function to make this image?
        courseD_artist_functions8_d: |-
          To make a line of squares,

          -   repeat 3 times
              -   draw a square with a side length of **50 pixels**
              -   jump forward **100 pixels**
        courseD_artist_functions8_b: |-
          Think of each row in this picture as a line of 3 squares. How many lines of squares are there and where do you start drawing each of them?

          ![](<https://images.code.org/22a6f5cc5551371057244eee01955f8e-image-1493135135468.4.10 Hint Drawing.png>)
        courseD_artist_functions8_c: At the end of each line of squares, the artist
          will need to jump down and backward before he draws the next line of squares.
        courseD_artist_functions8_g: "![](https://images.code.org/c5b48a0db328c6cb32a024d2bf9c00af-image-1493139855549.gif)"
      courseE_artist_functions8_2018:
        courseD_artist_functions8_f: You only need one `move forward` block, but you
          will need quite a few `jump forward` and/or `jump backward` blocks!
        courseD_artist_functions8_a: |-
          Start by making a function for a square, then try making a function for a line of squares.

          How would you use the `draw a line of squares` function to make this image?
        courseD_artist_functions8_d: |-
          To make a line of squares,

          -   repeat 3 times
              -   draw a square with a side length of **50 pixels**
              -   jump forward **100 pixels**
        courseD_artist_functions8_b: |-
          Think of each row in this picture as a line of 3 squares. How many lines of squares are there and where do you start drawing each of them?

          ![](<https://images.code.org/22a6f5cc5551371057244eee01955f8e-image-1493135135468.4.10 Hint Drawing.png>)
        courseD_artist_functions8_c: At the end of each set of staggered squares,
          the artist will need to jump down and backward before he draws the next
          set of staggered squares.
        courseD_artist_functions8_g: "![](https://images.code.org/c5b48a0db328c6cb32a024d2bf9c00af-image-1493139855549.gif)"
      courseE_artist_functions8_2019:
        courseD_artist_functions8_f: You only need one `move forward` block, but you
          will need quite a few `jump forward` and/or `jump backward` blocks!
        courseD_artist_functions8_a: |-
          Start by making a function for a square, then try making a function for a line of squares.

          How would you use the `draw a line of squares` function to make this image?
        courseD_artist_functions8_d: |-
          To make a line of squares,

          -   repeat 3 times
              -   draw a square with a side length of **50 pixels**
              -   jump forward **100 pixels**
        courseD_artist_functions8_b: |-
          Think of each row in this picture as a line of 3 squares. How many lines of squares are there and where do you start drawing each of them?

          ![](<https://images.code.org/22a6f5cc5551371057244eee01955f8e-image-1493135135468.4.10 Hint Drawing.png>)
        courseD_artist_functions8_c: At the end of each set of staggered squares,
          the artist will need to jump down and backward before he draws the next
          set of staggered squares.
        courseD_artist_functions8_g: "![](https://images.code.org/c5b48a0db328c6cb32a024d2bf9c00af-image-1493139855549.gif)"
      courseE_artist_functions8b_2018:
        courseD_artist_functions8_f: You only need one `move forward` block if you're
          doing this correctly!
        courseD_artist_functions8_a: Start by making a function for a square, then
          try making a function for a line of squares.
        courseD_artist_functions8_d: |-
          To make a line of squares,

          -   repeat 3 times
              -   draw a square
              -   jump forward **100 pixels**
      courseE_artist_functions8b_2019:
        courseD_artist_functions8_f: You only need one `move forward` block if you're
          doing this correctly!
        courseD_artist_functions8_a: Start by making a function for a square, then
          try making a function for a line of squares.
        courseD_artist_functions8_d: |-
          To make a line of squares,

          -   repeat 3 times
              -   draw a square
              -   jump forward **100 pixels**
      courseE_artist_functions8c_2018:
        courseD_artist_functions8_f: This is easier than it looks!  You shouldn't
          need any `move` or `jump` blocks here!
        courseD_artist_functions8_a: The second line of squares is just a 180 degree
          turn different than the first!
        courseD_artist_functions8_c: At the end of each line of squares, the artist
          only needs to turn 180 degrees before drawing the next line of squares.  Put
          the whole thing in a repeat loop to set you up for the next exercise!
      courseE_artist_functions8c_2019:
        courseD_artist_functions8_f: This is easier than it looks!  You shouldn't
          need any `move` or `jump` blocks here!
        courseD_artist_functions8_a: The second line of squares is just a 180 degree
          turn different than the first!
        courseD_artist_functions8_c: At the end of each line of squares, the artist
          only needs to turn 180 degrees before drawing the next line of squares.  Put
          the whole thing in a repeat loop to set you up for the next exercise!
      courseE_artist_functions9:
        courseD_artist_functions9_e: |-
          Can you spot all four places that the `line of triangles` can be used in this drawing?

          ![](https://images.code.org/130e1040ecca7186dea87f42666f5620-image-1493140373966.gif)
        courseD_artist_functions9_a: |-
          This puzzle can be broken into three parts:

          -   make the `draw a triangle` function
          -   make the `draw a line of triangles` function
          -   use your `draw a line of triangles` function four times to complete the drawing
        courseD_artist_functions9_b: This drawing is made by drawing a line of triangles
          4 times and turning either 60 or 120 degrees before you draw the next triangle
          line.
        courseD_artist_functions9_c: |-
          To draw a line of triangles:

          -   repeat 4 times
              -   draw a triangle
              -   jump forward 50 pixels
        courseD_artist_functions9_d: |-
          To draw the diamond:

          -   repeat 2 times
              -   draw a line of triangles
              -   turn 60 degrees
              -   draw a line of triangles
              -   turn 120 degrees
      courseE_artist_functions9_2018:
        courseD_artist_functions9_e: |-
          Can you spot all four places that the `line of triangles` can be used in this drawing?

          ![](https://images.code.org/130e1040ecca7186dea87f42666f5620-image-1493140373966.gif)
        courseD_artist_functions9_a: |-
          This puzzle can be broken into three parts:

          -   make the `draw a triangle` function
          -   make the `draw a line of triangles` function
          -   use your `draw a line of triangles` function four times to complete the drawing
        courseD_artist_functions9_b: This drawing is made by drawing a line of triangles
          4 times and turning either 60 or 120 degrees before you draw the next triangle
          line.
        courseD_artist_functions9_c: |-
          To draw a line of triangles:

          -   repeat 4 times
              -   draw a triangle
              -   jump forward 50 pixels
        courseD_artist_functions9_d: |-
          To draw the diamond:

          -   repeat 2 times
              -   draw a line of triangles
              -   turn 60 degrees
              -   draw a line of triangles
              -   turn 120 degrees
      courseE_artist_functions9_2019:
        courseD_artist_functions9_e: |-
          Can you spot all four places that the `line of triangles` can be used in this drawing?

          ![](https://images.code.org/130e1040ecca7186dea87f42666f5620-image-1493140373966.gif)
        courseD_artist_functions9_a: |-
          This puzzle can be broken into three parts:

          -   make the `draw a triangle` function
          -   make the `draw a line of triangles` function
          -   use your `draw a line of triangles` function four times to complete the drawing
        courseD_artist_functions9_b: This drawing is made by drawing a line of triangles
          4 times and turning either 60 or 120 degrees before you draw the next triangle
          line.
        courseD_artist_functions9_c: |-
          To draw a line of triangles:

          -   repeat 4 times
              -   draw a triangle
              -   jump forward 50 pixels
        courseD_artist_functions9_d: |-
          To draw the diamond:

          -   repeat 2 times
              -   draw a line of triangles
              -   turn 60 degrees
              -   draw a line of triangles
              -   turn 120 degrees
      courseE_artist_functions_challenge1:
        courseE_artist_functions_challenge1_a: If you call the function one more time,
          you can create the same design in the final corner.
        courseE_artist_functions_challenge1_b: You can also `jump to` other positions
          or change the whole design however you want!
      courseE_artist_functions_challenge1_2018:
        courseE_artist_functions_challenge1_a: If you call the function one more time,
          you can create the same design in the final corner.
        courseE_artist_functions_challenge1_b: You can also `jump to` other positions
          or change the whole design however you want!
      courseE_artist_functions_challenge1_2019:
        courseE_artist_functions_challenge1_a: If you call the function one more time,
          you can create the same design in the final corner.
        courseE_artist_functions_challenge1_b: You can also `jump to` other positions
          or change the whole design however you want!
      courseE_artist_functions_challenge2:
        courseE_artist_functions_challenge1_a: |-
          <xml>
            <block type="jump_to_xy">
              <title name="XPOS">350</title>
              <title name="YPOS">200</title>
            </block>
            </xml>

          This `jump to` block lets you move the zombie artist to any pixel on the grid, whenever you want. It works by moving him a number of pixels over to the right and a number of pixels down. This is always counted from the top left corner, which it means it doesn't matter where the zombie artist is _before_ the command is run!

          ![](https://images.code.org/b90fdddc778a27e199221271ce91307a-image-1496450976440.png)
      courseE_artist_functions_challenge2_2018:
        courseE_artist_functions_challenge1_a: |-
          <xml>
            <block type="jump_to_xy">
              <title name="XPOS">350</title>
              <title name="YPOS">200</title>
            </block>
            </xml>

          This `jump to` block lets you move the zombie artist to any pixel on the grid, whenever you want. It works by moving him a number of pixels over to the right and a number of pixels down. This is always counted from the top left corner, which it means it doesn't matter where the zombie artist is _before_ the command is run!

          ![](https://images.code.org/b90fdddc778a27e199221271ce91307a-image-1496450976440.png)
      courseE_artist_functions_challenge2_2019:
        courseE_artist_functions_challenge1_a: |-
          <xml>
            <block type="jump_to_xy">
              <title name="XPOS">350</title>
              <title name="YPOS">200</title>
            </block>
            </xml>

          This `jump to` block lets you move the zombie artist to any pixel on the grid, whenever you want. It works by moving him a number of pixels over to the right and a number of pixels down. This is always counted from the top left corner, which it means it doesn't matter where the zombie artist is _before_ the command is run!

          ![](https://images.code.org/b90fdddc778a27e199221271ce91307a-image-1496450976440.png)
      courseE_artist_ramp8:
        courseE_artist_ramp8_a: To draw a side, use the `move forward by 100 pixels`
          block, and change the 100 to a 200.
        courseE_artist_ramp8_b: |-
          To draw 4 sides, put the `move forward by 100 pixels` block inside of a repeat loop and make sure the loop is set to draw 4 times.

          Don't forget to turn afterward!
        courseE_artist_ramp8_c: 'ลูปของคุณนั้นควรที่จะมีบล็อก 2 บล็อกอยู่ภายในได้แก่:
          บล็อก`ไปข้างหน้า`, และบล็อก `หันขวาไป 90 องศา`'
      courseE_artist_ramp8_2:
        courseE_artist_ramp8_a: To draw a side, use the `move forward by 100 pixels`
          block, and change the 100 to a 200.
        courseE_artist_ramp8_b: |-
          To draw 4 sides, put the `move forward by 100 pixels` block inside of a repeat loop and make sure the loop is set to draw 4 times.

          Don't forget to turn afterward!
        courseE_artist_ramp8_c: 'ลูปของคุณนั้นควรที่จะมีบล็อก 2 บล็อกอยู่ภายในได้แก่:
          บล็อก`ไปข้างหน้า`, และบล็อก `หันขวาไป 90 องศา`'
      courseE_artist_ramp9:
        courseD_artist_ramp12_a: How is this similar to a square?  How is it different?
        courseD_artist_ramp12_b: คุณสามารถใช้รายการเลือกแบบดึงลง(drop down menu) ที่อยุ่บนบล็อก
          ' หัน... ไป... องศา' เพื่อเลือกดูขนาดองศาของมุมที่คุณต้องการใช้!
        courseD_artist_ramp12_c: To draw each side, you will need to move forward
          100 pixels, then turn right 120 degrees. How many sides do you need?
      courseE_artist_ramp9_2:
        courseD_artist_ramp12_a: How is this similar to a square?  How is it different?
        courseD_artist_ramp12_b: คุณสามารถใช้รายการเลือกแบบดึงลง(drop down menu) ที่อยุ่บนบล็อก
          ' หัน... ไป... องศา' เพื่อเลือกดูขนาดองศาของมุมที่คุณต้องการใช้!
        courseD_artist_ramp12_c: To draw each side, you will need to move forward
          100 pixels, then turn right 120 degrees. How many sides do you need?
      courseE_bee_concept1:
        courseE_bee_concept1_b: Are there any patterns that _repeat_ here?
        courseE_bee_concept1_a: If you don't understand how to use nested loops here,
          try writing out the instructions step by step on a piece of paper.  Circle
          the patterns that you see.
      courseE_bee_concept1_2018:
        courseE_bee_concept1_b: Are there any patterns that _repeat_ here?
        courseE_bee_concept1_a: If you don't understand how to use nested loops here,
          try writing out the instructions step by step on a piece of paper.  Circle
          the patterns that you see.
      courseE_bee_concept2:
        courseE_bee_concept2_a: Would a `while` loop help here?
        courseE_bee_concept2_d: You can even check empty spaces to see if honey is
          > 0.
        courseE_bee_concept2_b: You can use `while` loops to move to the end of each
          path, and to collect all of the honey from each space.
        courseE_bee_concept2_c: Which way should the bee turn after each path?
      courseE_bee_concept2_2018:
        courseE_bee_concept2_a: Would a `while` loop help here?
        courseE_bee_concept2_d: 'With this `while` loop you  can check empty spaces
          to see if the amount of honey is > 0. This does the same as the `while there
          is honey` loop. '
        courseE_bee_concept2_b: You can use `while` loops to move to the end of each
          path, and to collect all of the honey from each space.
        courseE_bee_concept2_c: Which way should the bee turn after each path?
      courseE_bee_concept3:
        courseE_bee_concept3a_a: ลองใช้ลูปซ้อนลูป `ทำซ้ำ`พื่อแก้ปริศนานี้
        courseE_bee_concept3a_b: If you can't figure out where to put the loops, try
          writing your code step-by-step and looking for patterns.
        courseE_bee_concept3a_c: There are three groups of flowers, so your outer
          `repeat` loop should repeat three times.
      courseE_bee_concept3_2018:
        courseE_bee_concept3a_a: Try using nested `repeat` or `while` loops to solve
          this puzzle.
        courseE_bee_concept3a_b: If you can't figure out where to put the loops, try
          writing your code step-by-step and looking for patterns.
      courseE_bee_concept4:
        courseE_bee_concept4_a: An `if/else` statement could really help you out here.
        courseE_bee_concept4_b: The stair step pattern can help you get through all
          of the flowers and honeycombs.
        courseE_bee_concept4_c: If you are at a flower, how many times do you have
          to get nectar? Is this the same number for all flowers?
      courseE_bee_concept4_2018:
        courseE_bee_concept4_a: An `if/else` statement could really help you out here.
        courseE_bee_concept4_b: The stair step pattern can help you get through all
          of the flowers and honeycombs.
        courseE_bee_concept4_c: If you are at a flower, how many times do you have
          to get nectar? Is this the same number for all flowers?
      courseE_bee_concept5:
        courseE_bee_concept5_a: The flowers follow a rectangular path.  You can trace
          that rectangle using `while path ahead` even with a different number of
          squares per side.
        courseE_bee_concept5_c: |-
          Here's a picture of a rectangular path the bee could take.

          ![](https://images.code.org/39554a528b5ed168737e846c161f00ee-image-1510202150660.33.23.png)
        courseE_bee_concept5_b: You can check every square for a flower using the
          `if` block, even if you already know there's not one there.
      courseE_bee_concept5_2018:
        courseE_bee_concept5_a: The flowers follow a rectangular path.  You can trace
          that rectangle using `while path ahead` even with a different number of
          squares per side.
        courseE_bee_concept5_c: |-
          Here's a picture of a rectangular path the bee could take.

          ![](https://images.code.org/39554a528b5ed168737e846c161f00ee-image-1510202150660.33.23.png)
        courseE_bee_concept5_b: You can check every square for a flower using the
          `if` block, even if you already know there's not one there.
      courseE_bee_functions1:
        courseE_bee_functions1_a: Remember that left and right turns are from the
          point of view of the bee.
        courseE_bee_functions1_b: Use a `repeat` loop when collecting nectar to make
          your code shorter.
        courseE_bee_functions1_c: Remember that left and right turns are from the
          perspective of the bee.
      courseE_bee_functions10:
        courseE_bee_functions10_a: You will need a `while` loop to collect all of
          the honey, since it varies between honeycombs.
        courseE_bee_functions10_b: Include the turns and movement in your function,
          so you can call it when the bee is on the main path.
        courseE_bee_functions10_c: Remember to call your function in the main program!
      courseE_bee_functions2:
        courseE_bee_functions2_a: The function has been written for you, but you will
          need to call it at each flower.
        courseE_bee_functions2_b: This <xml><block type="procedures_callnoreturn"><mutation
          name="get 2 nectar"/></block></xml> block calls the function given to you.
        courseE_bee_functions2_c: You will want to move forward and get 2 nectar twice
          to solve this puzzle.
      courseE_bee_functions3:
        courseE_bee_functions3_a: 'Your function for this puzzle only needs to collect
          nectar, it shouldn''t have any `move forward` or `turn` blocks in it. '
        courseE_bee_functions3_b: Call your `get 5` function under the `when run`
          block.
        courseE_bee_functions3_c: Your main program will control all of the movement,
          the function is just for what happens when the bee reaches a flower.
        courseE_bee_functions3_d: Try using this path through.
      courseE_bee_functions4:
        courseE_bee_functions4_a: Your function will already travel down the side
          paths and return the bee back to the main road.  You don't need to add that
          part to your program.
        courseE_bee_functions4_b: Use the green `move and get nectar` block to call
          this function.
        courseE_bee_functions4_c: You don't need to change the function, just use
          it in your program.
      courseE_bee_functions5:
        courseE_bee_functions5_a: Edit the function so that it solves the puzzle without
          having to change the main program.
        courseE_bee_functions5_c: The `move forward` block can be changed into a `move
          backward` block. Use this instead of turning all the way around at the end
          of the paths!
        courseE_bee_functions5_b: "Your function should make the bee: \n\n-   turn\n-
          \  move forward\n-   collect all of the nectar\n-   move backward\n-   turn
          back to the direction that the bee started from"
      courseE_bee_functions6:
        courseE_bee_functions6_a: "หากปริศนาดูเหมือนว่าจะท้าทายเกินไป ให้ลองสร้างฟังก์ชั่นทีละเล็กทีละน้อยในแต่ละครั้ง
          \ \n\nเพิ่มบล็อกบางอย่างแล้วลองเอาออก เพิ่มใหม่แล้วลองอีกครั้ง  ในไม่ช้า
          คุณจะได้รับความสำเร็จ!\n\n![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)"
        courseE_bee_functions6_b: It might help in this case to move inside of the
          function, but not all of your `move` blocks need to be there.
      courseE_bee_functions7:
        courseE_bee_functions7_a: "หากปริศนาดูเหมือนว่าจะท้าทายเกินไป ให้ลองสร้างฟังก์ชั่นทีละเล็กทีละน้อยในแต่ละครั้ง
          \ \n\nเพิ่มบล็อกบางอย่างแล้วลองเอาออก เพิ่มใหม่แล้วลองอีกครั้ง  ในไม่ช้า
          คุณจะได้รับความสำเร็จ!"
        courseE_bee_functions7_b: |-
          Remember to build your code inside of the green function block.

          ![](https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)
        courseE_bee_functions7_c: This function should turn the bee to head him down
          the path, collect the nectar, make the honey, then turn the bee around and
          bring him back.
      courseE_bee_functions8:
        courseE_bee_functions8_a: Your function will only need to collect nectar.
          Try using a while loop instead of a repeat loop.
        courseE_bee_functions8_b: Use `while nectar > 0` to make sure you get all
          of the nectar.
        courseE_bee_functions8_c: Your main program will need a stair step movement
          pattern. Remember, the main program is the code under the `when run` block.
      courseE_bee_functions9:
        courseE_bee_functions9_a: You can use the exact same function for this puzzle
          as you did in the last puzzle.  All you need to do is create a function
          that collects all of the nectar when you get to each flower.
        courseE_bee_functions9_b: Even though you know how much nectar some of the
          flowers have, a `while` loop can make one function work for all of them.
      courseE_bee_functions_challenge1:
        courseE_bee_functions_challenge1_a: "หากปริศนาดูเหมือนว่าจะท้าทายเกินไป ให้ลองสร้างฟังก์ชั่นทีละเล็กทีละน้อยในแต่ละครั้ง
          \ \n\nเพิ่มบล็อกบางอย่างแล้วลองเอาออก เพิ่มใหม่แล้วลองอีกครั้ง  ในไม่ช้า
          คุณจะได้รับความสำเร็จ!"
        courseE_bee_functions_challenge1_b: Remember to build your code inside of
          the green function block.
      courseE_bee_functions_challenge2:
        courseE_bee_functions_challenge1_a: "หากปริศนาดูเหมือนว่าจะท้าทายเกินไป ให้ลองสร้างฟังก์ชั่นทีละเล็กทีละน้อยในแต่ละครั้ง
          \ \n\nเพิ่มบล็อกบางอย่างแล้วลองเอาออก เพิ่มใหม่แล้วลองอีกครั้ง  ในไม่ช้า
          คุณจะได้รับความสำเร็จ!"
        courseE_bee_functions_challenge1_b: Remember to build your code inside of
          the green function block.
      courseE_farmer_concept1:
        courseE_farmer_concept1_a: A `while there is a hole` block will help you fill
          any hole until it's flat.
        courseE_farmer_concept1_b: You can use a stair step pattern to get to the
          holes.
      courseE_farmer_concept1_2018:
        courseE_farmer_concept1_a: A `while there is a hole` block will help you fill
          any hole until it's flat.
        courseE_farmer_concept1_b: You can use a stair step pattern to get to the
          holes.
      courseE_farmer_concept2:
        courseE_farmer_concept2_a: The paths are all the same length, but they are
          a different number of squares apart.  A loop isn't ideal here. Try a function.
        courseE_farmer_concept2_b: A function which turns, goes down the path, gathers
          pumpkins, and returns to the main horizontal path could be helpful here.
        courseE_farmer_concept2_c: Your main program can call this function with the
          green `do something` block.
      courseE_farmer_concept2_2018:
        courseE_farmer_concept2_a: The paths are all the same length, but they are
          a different number of squares apart.  A loop isn't ideal here. Try a function.
        courseE_farmer_concept2_b: A function which turns, goes down the path, gathers
          pumpkins, and returns to the main horizontal path could be helpful here.
        courseE_farmer_concept2_c: Your main program can call this function with the
          green `do something` block.
      courseE_farmer_concept3:
        grade3_robotFarmer_ConditionalsIntro_8_a: The `while path ahead` block lets
          you keep going, even if you don't know how many squares are in a path.
        grade3_robotFarmer_ConditionalsIntro_8_b: What should you do once you've reached
          the end of a path?
        grade3_robotFarmer_ConditionalsIntro_8_c: Use a `repeat` loop to run your
          code multiple times for each straight path.
      courseE_farmer_concept3_2018:
        grade3_robotFarmer_ConditionalsIntro_8_a: The `while path ahead` block lets
          you keep going, even if you don't know how many squares are in a path.
        grade3_robotFarmer_ConditionalsIntro_8_b: What should you do once you've reached
          the end of a path?
        grade3_robotFarmer_ConditionalsIntro_8_c: Use a `repeat` loop to run your
          code multiple times for each straight path.
      courseE_farmer_functions1:
        courseE_farmer_functions1_a: The toolbox is organized a little differently
          this time! Click on the different categories to see which blocks you have.
        courseE_farmer_functions1_b: You only need to pick one pumpkin, but could
          you use a loop to get to it?
      courseE_farmer_functions10b:
        courseE_farmer_functions10b_a: You will have to re-create your function first.
        courseE_farmer_functions10b_b: Which way do you need to turn after the first
          pumpkin?
        courseE_farmer_functions10b_c: Look back at the last puzzle if you need help
          making the function.
      courseE_farmer_functions1_2018:
        courseE_farmer_functions1_a: The toolbox is organized a little differently
          this time! Click on the different categories to see which blocks you have.
        courseE_farmer_functions1_b: You only need to pick one pumpkin, but could
          you use a loop to get to it?
      courseE_farmer_functions1_2019:
        courseE_farmer_functions1_a: The toolbox is organized a little differently
          this time! Click on the different categories to see which blocks you have.
        courseE_farmer_functions1_b: You only need to pick one pumpkin, but could
          you use a loop to get to it?
      courseE_farmer_functions1a:
        courseE_farmer_functions1a_a: Think through the `if/else` statements step
          by step. What should you do if you are standing at a corn plant?
        courseE_farmer_functions1a_b: Use a `repeat until` block to get to the pumpkin!
      courseE_farmer_functions1a_2018:
        courseE_farmer_functions1a_a: Make sure you read through the function definition.
          Can you tell what it does?
        courseE_farmer_functions1a_b: Use a `repeat until` block to get to the pumpkin!
      courseE_farmer_functions1a_2019:
        courseE_farmer_functions1a_a: Make sure you read through the function definition.
          Can you tell what it does?
        courseE_farmer_functions1a_b: Use a `repeat until` block to get to the pumpkin!
      courseE_farmer_functions2b:
        courseE_farmer_functions2b_a: You can use a `repeat until pumpkin` to get
          to the ends of the two paths.
        courseE_farmer_functions2b_b: There is no corn on the connecting path, so
          you can just move along it and turn.
        courseE_farmer_functions2b_c: You will need two separate `repeat until` blocks
          to get all of the crops.
      courseE_farmer_functions2b_2018:
        courseE_farmer_functions2b_a: You can `repeat until pumpkin` to get to the
          ends of the two paths.
        courseE_farmer_functions2b_b: There is no corn on the connecting path, so
          you can just move along it and turn.
        courseE_farmer_functions2b_c: You will need two separate `repeat until` blocks
          to get all of the crops.
      courseE_farmer_functions2b_2019:
        courseE_farmer_functions2b_a: You can `repeat until pumpkin` to get to the
          ends of the two paths.
        courseE_farmer_functions2b_b: There is no corn on the connecting path, so
          you can just move along it and turn.
        courseE_farmer_functions2b_c: You will need two separate `repeat until` blocks
          to get all of the crops.
      courseE_farmer_functions2ba:
        courseE_farmer_functions2ba_a: Use the green `corn and pumpkin` block to call
          this function.
        courseE_farmer_functions2ba_b: Drag all of the blocks in the workspace together
          under `when run` to see how this function works.
      courseE_farmer_functions2ba_2018:
        courseE_farmer_functions2ba_a: Use the green `get all pumpkins` block to make
          sure you get all of the pumpkins!
      courseE_farmer_functions2ba_2019:
        courseE_farmer_functions2ba_a: Use the green `get all pumpkins` block to make
          sure you get all of the pumpkins!
      courseE_farmer_functions3c:
        courseE_farmer_functions3c_a: What sequence is repeated often in this program?
          Can you drag these blocks into the function?
        courseE_farmer_functions3c_b: Don't forget to call your function in the main
          program wherever you removed blocks.
      courseE_farmer_functions3c1_2018:
        coursee_farmer_functions3c1_2018_a: You'll need to use the `pick along path`
          function three times to solve this puzzle.
        coursee_farmer_functions3c1_2018_b: What code do you need to add to get around
          the corners?
      courseE_farmer_functions3c1_2019:
        coursee_farmer_functions3c1_2018_a: You'll need to use the `pick along path`
          function three times to solve this puzzle.
        coursee_farmer_functions3c1_2018_b: What code do you need to add to get around
          the corners?
      courseE_farmer_functions4b:
        courseE_farmer_functions4b_a: ไม่ต้องกลัวว่าคุณจะทำผิด! ลองเพิ่มบล็อกเข้าไปและเรียกโค้ดมาใช้งาน
          เพื่อดูว่าจะเกิดอะไรขึ้นถึงแม้ว่าคุณยังจะแก้ปริศนาไม่ออกก็ตาม
        courseE_farmer_functions4b_b: Remember to turn after each path.
        courseE_farmer_functions4b_c: The green `corn and pumpkin` blocks are in the
          Functions tab of the toolbox.
      courseE_farmer_functions5c:
        courseE_farmer_functions5c_a: Are there any other patterns you can loop in
          this puzzle?
        courseE_farmer_functions5c_b: ไม่ต้องกลัวว่าคุณจะทำผิด! ลองเพิ่มบล็อกเข้าไปและเรียกโค้ดมาใช้งาน
          เพื่อดูว่าจะเกิดอะไรขึ้นถึงแม้ว่าคุณยังจะแก้ปริศนาไม่ออกก็ตาม
      courseE_farmer_functions6c:
        courseE_farmer_functions6c_a: Edit your function to check for the lettuce
          as well.
        courseE_farmer_functions6c_b: Would an `if/else` block help to check if there
          is lettuce in a space?
        courseE_farmer_functions6c_c: Don't forget to keep checking for corn!
      courseE_farmer_functions7a1_2018:
        courseE_farmer_functions7a1_2018_a: Create your function under the `functions`
          section in the toolbox.
        courseE_farmer_functions7a1_2018_b: Don't forget to use your function when
          you're done making it!
      courseE_farmer_functions7a1_2019:
        courseE_farmer_functions7a1_2018_a: Create your function under the `functions`
          section in the toolbox.
        courseE_farmer_functions7a1_2018_b: Don't forget to use your function when
          you're done making it!
      courseE_farmer_functions7b:
        courseE_farmer_functions7b_a: You don't need a function here, but you can
          make one if it is helpful to you!
        courseE_farmer_functions7b_b: Use an `if/else` statement to check for crops,
          then turn based on which crop you find.
        courseE_farmer_functions7b_c: A `repeat until pumpkin` loop can help you get
          all the way through the maze.
      courseE_farmer_functions8a1_2018:
        courseE_farmer_functions8a1_2018a: Start this puzzle off by coding the same
          function you made in the last puzzle.
        courseE_farmer_functions8a1_2018b: After the function runs the first time,
          you'll need to make one extra turn before you can run it again.
      courseE_farmer_functions8a1_2019:
        courseE_farmer_functions8a1_2018a: Start this puzzle off by coding the same
          function you made in the last puzzle.
        courseE_farmer_functions8a1_2018b: After the function runs the first time,
          you'll need to make one extra turn before you can run it again.
      courseE_farmer_functions8b:
        courseE_farmer_functions8b_a: Try running the code given to see what it does.
          What do you need after this?
        courseE_farmer_functions8b_b: Drag all of the starter blocks into a function
          so that you can use them more than once.
        courseE_farmer_functions8b_c: How many times do you need to call the function?
      courseE_farmer_functions9a1_2018:
        courseE_farmer_functions9a1_2018a: You'll use the same function that you made
          in the last couple of puzzles.
        courseE_farmer_functions9a1_2018b: Use the same steps from the previous puzzle
          to solve the first half of this puzzle.
        courseE_farmer_functions9a1_2018c: You'll need to `turn` a few times and `move
          forward` to get to the last crop of lettuce before you can call your function
          again.
      courseE_farmer_functions9a1_2019:
        courseE_farmer_functions9a1_2018a: You'll use the same function that you made
          in the last couple of puzzles.
        courseE_farmer_functions9a1_2018b: Use the same steps from the previous puzzle
          to solve the first half of this puzzle.
        courseE_farmer_functions9a1_2018c: You'll need to `turn` a few times and `move
          forward` to get to the last crop of lettuce before you can call your function
          again.
      courseE_farmer_functions9b:
        courseE_farmer_functions9b_a: Can you use nested `if` and `if/else` statements
          to move along the path?
        courseE_farmer_functions9b_b: Use `repeat until pumpkin` to move through all
          of the paths.
        courseE_farmer_functions9b_c: You will want to move through the paths as if
          they are squares getting larger after each loop.
      courseE_farmer_ramp11a:
        courseE_farmer_ramp12_a: 'Instead of using a `repeat` loop to tell the farmer
          how many times to shovel dirt, now you can use a `while there is a pile`
          block.  '
        courseE_farmer_ramp12_b: You only need to move forward once to get to the
          dirt.
      courseE_farmer_ramp11a_2018:
        courseE_farmer_ramp12_a: 'Instead of using a `repeat` loop to tell the farmer
          how many times to shovel dirt, now you can use a `while there is a pile`
          block.  '
        courseE_farmer_ramp12_b: You only need to move forward once to get to the
          dirt.
      courseE_farmer_ramp11a_2019:
        courseE_farmer_ramp12_a: 'Instead of using a `repeat` loop to tell the farmer
          how many times to shovel dirt, now you can use a `while there is a pile`
          block.  '
        courseE_farmer_ramp12_b: You only need to move forward once to get to the
          dirt.
      courseE_farmer_ramp11b:
        courseE_farmer_ramp11b_a: You can nest your `while` loop inside of a `repeat`
          loop to make your code shorter.
      courseE_farmer_ramp11b_2018:
        courseE_farmer_ramp11b_a: You can nest your `while` loop inside of a `repeat`
          loop to make your code shorter.
      courseE_farmer_ramp11b_2019:
        courseE_farmer_ramp11b_a: You can nest your `while` loop inside of a `repeat`
          loop to make your code shorter.
      courseE_farmer_ramp12_forswap:
        courseE_farmer_ramp12_b: You will still need to use a `repeat` loop on the
          outside of it all to tell the farmer how many times to walk forward and
          get lettuce.
      courseE_farmer_ramp12_forswap_2018:
        courseE_farmer_ramp12_b: You will still need to use a `repeat` loop on the
          outside of it all to tell the farmer how many times to walk forward and
          get lettuce.
      courseE_farmer_ramp12_forswap_2019:
        courseE_farmer_ramp12_b: You will still need to use a `repeat` loop on the
          outside of it all to tell the farmer how many times to walk forward and
          get lettuce.
      courseE_farmer_ramp12c:
        courseE_farmer_ramp12b_b: You will still need to use an `until` loop first,
          then use a `while` loop once you get to the lettuce.
      courseE_farmer_ramp12c_2018:
        courseE_farmer_ramp12b_b: You will still need to use an `until` loop first,
          then use a `while` loop once you get to the lettuce.
      courseE_farmer_ramp12c_2019:
        courseE_farmer_ramp12b_b: You will still need to use an `until` loop first,
          then use a `while` loop once you get to the lettuce.
      courseE_farmer_ramp12d:
        courseE_farmer_ramp12d_b: You will still need to put your `until` and `while`
          loops inside of a `repeat` loop to solve this puzzle!
      courseE_farmer_ramp12d_2018:
        courseE_farmer_ramp12d_b: You will still need to put your `until` and `while`
          loops inside of a `repeat` loop to solve this puzzle!
      courseE_farmer_ramp12d_2019:
        courseE_farmer_ramp12d_b: You will still need to put your `until` and `while`
          loops inside of a `repeat` loop to solve this puzzle!
      courseE_farmer_ramp12e:
        courseE_farmer_ramp12e_b: The solution to this puzzle will look a lot like
          the solution to the last puzzle, but turning in the other direction.
      courseE_farmer_ramp12e_2018:
        courseE_farmer_ramp12e_b: The solution to this puzzle will look a lot like
          the solution to the last puzzle, but turning in the other direction.
      courseE_farmer_ramp12e_2019:
        courseE_farmer_ramp12e_b: The solution to this puzzle will look a lot like
          the solution to the last puzzle, but turning in the other direction.
      courseE_farmer_ramp12f:
        courseE_farmer_ramp12f_b: Use an `if/else` block to help the farmer decide
          if she needs to turn right or left.
      courseE_farmer_ramp12f_2018:
        courseE_farmer_ramp12f_b: Use an `if/else` block to help the farmer decide
          if she needs to turn right or left.
      courseE_farmer_ramp12f_2019:
        courseE_farmer_ramp12f_b: Use an `if/else` block to help the farmer decide
          if she needs to turn right or left.
      courseE_farmer_ramp12g:
        courseE_farmer_ramp12G_b: Use an `if/else` block to help the farmer decide
          if she needs to turn right or left.
      courseE_farmer_ramp12g_2018:
        courseE_farmer_ramp12G_b: Use an `if/else` block to help the farmer decide
          if she needs to turn right or left.
      courseE_farmer_ramp12g_2019:
        courseE_farmer_ramp12G_b: Use an `if/else` block to help the farmer decide
          if she needs to turn right or left.
      courseE_playLab_challenge1:
        courseE_playLab_challenge1_a: |-
          Here are some things you could do when the player wins the game:

          -   Make the dinosaur vanish.
          -   Stop the squirrels.
          -   Make the squirrels and knight happy.
          -   Set a new background.
          -   Make the knight thank the player for helping.
          -   Make all of the actors vanish and show a "You Win!" message.
        courseE_playLab_challenge1_b: |-
          Here are some things you could do when the player loses the game:

          -   Make the knight vanish.
          -   Make the squirrels sad.
          -   Make the dinosaur say something.
          -   Set a new background.
          -   Make all of the actors vanish and show a "Game Over" message.
      courseE_playLab_scaffold1:
        courseE_playLab_scaffold1_a: The `set actor 1 to ??? image` block can be used
          to add an actor to the stage.
        courseE_playLab_scaffold1_b: Put the `set actor` block under `when run` to
          make your actor appear at the beginning of the program.
        courseE_playLab_scaffold1_c: Use `set ??? background` to choose a background
          for your scene.
      courseE_playLab_scaffold2:
        courseE_playLab_scaffold1_a: Pull on the dropdown menu of the `when ____ arrow`
          event to change the direction the block controls.
        courseE_playLab_scaffold1_b: You should have four `when arrow` event blocks,
          with a direction to move underneath each.
        courseE_playLab_scaffold1_c: When you are done, you should be able to move
          your hero with the arrow keys!
      courseE_playLab_scaffold4:
        courseE_playLab_scaffold4_a: Use `score point` to add a point, and `remove
          point` to subtract one.
      courseE_playLab_scaffold5:
        courseE_playLab_scaffold5_a: To finish this level, you need to win or lose.
          Use a `end game as win` or `end game as loss` block to finish.
      courseF_artist_for1:
        courseF_artist_for1_a: |-
          Can you draw something like this:

          ![](https://images.code.org/80ae9ab3e449db1ed4e13c86239f7617-image-1475906794954.06.12.png)
      courseF_artist_for10:
        courseF_artist_for10_a: The image in the drawing was made using a counter
          for the `set alpha` and `counter` / 10 as a brush size.
        courseF_artist_for10_b: The image in the drawing uses a turn of 61 degrees.
        courseF_artist_for10_c: |-
          Want to know how the sample image was done?

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_colour" inline="true" id="draw-color">
                  <value name="COLOUR">
                    <block type="colour_picker">
                      <title name="COLOUR">#ff0000</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_for_counter" inline="true">
                    <mutation counter="counter"></mutation>
                      <value name="FROM">
                        <block type="math_number">
                          <title name="NUM">15</title>
                        </block>
                      </value>
                      <value name="TO">
                        <block type="math_number">
                          <title name="NUM">175</title>
                        </block>
                      </value>
                      <value name="BY">
                        <block type="math_number">
                          <title name="NUM">2</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="draw_width" inline="false">
                          <value name="WIDTH">
                            <block type="math_arithmetic" inline="true">
                              <title name="OP">DIVIDE</title>
                              <value name="A">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <value name="B">
                                <block type="math_number">
                                  <title name="NUM">10</title>
                                </block>
                              </value>
                            </block>
                          </value>
                          <next>
                            <block type="alpha" inline="true" id="alpha">
                              <value name="VALUE">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_move" inline="true">
                                  <title name="DIR">moveForward</title>
                                  <value name="VALUE">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="draw_turn" inline="true">
                                      <title name="DIR">turnRight</title>
                                      <value name="VALUE">
                                        <block type="math_number">
                                          <title name="NUM">61</title>
                                        </block>
                                      </value>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_artist_for10_2018:
        courseF_artist_for10_a: The image in the drawing was made using a counter
          for the `set alpha` and `counter` / 10 as a brush size.
        courseF_artist_for10_b: The image in the drawing uses a turn of 61 degrees.
        courseF_artist_for10_c: |-
          Want to know how the sample image was done?

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_colour" inline="true" id="draw-color">
                  <value name="COLOUR">
                    <block type="colour_picker">
                      <title name="COLOUR">#ff0000</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_for_counter" inline="true">
                    <mutation counter="counter"></mutation>
                      <value name="FROM">
                        <block type="math_number">
                          <title name="NUM">15</title>
                        </block>
                      </value>
                      <value name="TO">
                        <block type="math_number">
                          <title name="NUM">175</title>
                        </block>
                      </value>
                      <value name="BY">
                        <block type="math_number">
                          <title name="NUM">2</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="draw_width" inline="false">
                          <value name="WIDTH">
                            <block type="math_arithmetic" inline="true">
                              <title name="OP">DIVIDE</title>
                              <value name="A">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <value name="B">
                                <block type="math_number">
                                  <title name="NUM">10</title>
                                </block>
                              </value>
                            </block>
                          </value>
                          <next>
                            <block type="alpha" inline="true" id="alpha">
                              <value name="VALUE">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_move" inline="true">
                                  <title name="DIR">moveForward</title>
                                  <value name="VALUE">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="draw_turn" inline="true">
                                      <title name="DIR">turnRight</title>
                                      <value name="VALUE">
                                        <block type="math_number">
                                          <title name="NUM">61</title>
                                        </block>
                                      </value>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_artist_for10_2019:
        courseF_artist_for10_a: The image in the drawing was made using a counter
          for the `set alpha` and `counter` / 10 as a brush size.
        courseF_artist_for10_b: The image in the drawing uses a turn of 61 degrees.
        courseF_artist_for10_c: |-
          Want to know how the sample image was done?

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_colour" inline="true" id="draw-color">
                  <value name="COLOUR">
                    <block type="colour_picker">
                      <title name="COLOUR">#ff0000</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_for_counter" inline="true">
                    <mutation counter="counter"></mutation>
                      <value name="FROM">
                        <block type="math_number">
                          <title name="NUM">15</title>
                        </block>
                      </value>
                      <value name="TO">
                        <block type="math_number">
                          <title name="NUM">175</title>
                        </block>
                      </value>
                      <value name="BY">
                        <block type="math_number">
                          <title name="NUM">2</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="draw_width" inline="false">
                          <value name="WIDTH">
                            <block type="math_arithmetic" inline="true">
                              <title name="OP">DIVIDE</title>
                              <value name="A">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <value name="B">
                                <block type="math_number">
                                  <title name="NUM">10</title>
                                </block>
                              </value>
                            </block>
                          </value>
                          <next>
                            <block type="alpha" inline="true" id="alpha">
                              <value name="VALUE">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_move" inline="true">
                                  <title name="DIR">moveForward</title>
                                  <value name="VALUE">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="draw_turn" inline="true">
                                      <title name="DIR">turnRight</title>
                                      <value name="VALUE">
                                        <block type="math_number">
                                          <title name="NUM">61</title>
                                        </block>
                                      </value>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_artist_for1_2018:
        courseF_artist_for1_a: |-
          Can you draw something like this:

          ![](https://images.code.org/efee6df2a8840c89fa535bef72e9e45f-image-1530131926453.png)
      courseF_artist_for1_2019:
        courseF_artist_for1_a: |-
          Can you draw something like this:

          ![](https://images.code.org/efee6df2a8840c89fa535bef72e9e45f-image-1530131926453.png)
      courseF_artist_for2:
        courseF_artist_for2_a: |-
          Use `counter` for the length of your triangles inside your `repeat` loop.

          <xml><block type="draw_move" inline="true">
                <title name="DIR">moveForward</title>
                <value name="VALUE">
                  <block type="variables_get">
                    <title name="VAR">counter</title>
                  </block>
                </value>
              </block>
              </xml>
        courseF_artist_for2_b: Remember to count by 10 within your for loop.
        courseF_artist_for2_c: |-
          This is the pattern that the Artist will follow:

          ![](<https://images.code.org/a2569b7732cf02a12263607c9e355d19-image-1503676269436.3_hint 2.gif>)
      courseF_artist_for2_2018:
        courseF_artist_for2_a: |-
          Use `counter` for the length of your triangles inside your `repeat` loop.

          <xml><block type="draw_move" inline="true">
                <title name="DIR">moveForward</title>
                <value name="VALUE">
                  <block type="variables_get">
                    <title name="VAR">counter</title>
                  </block>
                </value>
              </block>
              </xml>
        courseF_artist_for2_b: Remember to count by 10 within your for loop.
        courseF_artist_for2_c: |-
          This is the pattern that the Artist will follow:

          ![](<https://images.code.org/a2569b7732cf02a12263607c9e355d19-image-1503676269436.3_hint 2.gif>)
      courseF_artist_for2_2019:
        courseF_artist_for2_a: |-
          Use `counter` for the length of your triangles inside your `repeat` loop.

          <xml><block type="draw_move" inline="true">
                <title name="DIR">moveForward</title>
                <value name="VALUE">
                  <block type="variables_get">
                    <title name="VAR">counter</title>
                  </block>
                </value>
              </block>
              </xml>
        courseF_artist_for2_b: Remember to count by 10 within your for loop.
        courseF_artist_for2_c: |-
          This is the pattern that the Artist will follow:

          ![](<https://images.code.org/a2569b7732cf02a12263607c9e355d19-image-1503676269436.3_hint 2.gif>)
      courseF_artist_for3:
        courseF_artist_for3_a: |-
          To have the `for` loop drive your movement, make sure that you're using `counter` as your distance in the `move forward` block.

          <xml>
          <block type="draw_move" inline="true">
                <title name="DIR">moveForward</title>
                <value name="VALUE">
                  <block type="variables_get">
                    <title name="VAR">counter</title>
                  </block>
                </value>
              </block>
          </xml>
        courseF_artist_for3_b: ไม่ต้องกลัวว่าคุณจะทำผิด! ลองเพิ่มบล็อกเข้าไปและเรียกโค้ดมาใช้งาน
          เพื่อดูว่าจะเกิดอะไรขึ้นถึงแม้ว่าคุณยังจะแก้ปริศนาไม่ออกก็ตาม
      courseF_artist_for3_2018:
        courseF_artist_for3_a: |-
          To have the `for` loop drive your movement, make sure that you're using `counter` as your distance in the `move forward` block.

          <xml>
          <block type="draw_move" inline="true">
                <title name="DIR">moveForward</title>
                <value name="VALUE">
                  <block type="variables_get">
                    <title name="VAR">counter</title>
                  </block>
                </value>
              </block>
          </xml>
        courseF_artist_for3_b: ไม่ต้องกลัวว่าคุณจะทำผิด! ลองเพิ่มบล็อกเข้าไปและเรียกโค้ดมาใช้งาน
          เพื่อดูว่าจะเกิดอะไรขึ้นถึงแม้ว่าคุณยังจะแก้ปริศนาไม่ออกก็ตาม
      courseF_artist_for3_2019:
        courseF_artist_for3_a: |-
          To have the `for` loop drive your movement, make sure that you're using `counter` as your distance in the `move forward` block.

          <xml>
          <block type="draw_move" inline="true">
                <title name="DIR">moveForward</title>
                <value name="VALUE">
                  <block type="variables_get">
                    <title name="VAR">counter</title>
                  </block>
                </value>
              </block>
          </xml>
        courseF_artist_for3_b: ไม่ต้องกลัวว่าคุณจะทำผิด! ลองเพิ่มบล็อกเข้าไปและเรียกโค้ดมาใช้งาน
          เพื่อดูว่าจะเกิดอะไรขึ้นถึงแม้ว่าคุณยังจะแก้ปริศนาไม่ออกก็ตาม
      courseF_artist_for4:
        courseF_artist_for4_a: |-
          **What is the smallest number you will need?\
          What is the largest number?\
          How big is the increase each time?**

          Those are the questions you need to ask to fill in the blanks of the `for` loop.
        courseF_artist_for4_b: Your code will be very similar to what you wrote in
          the last puzzle, but remember to draw a square this time!
        courseF_artist_for4_c: ไม่ต้องกลัวว่าคุณจะทำผิด! ลองเพิ่มบล็อกเข้าไปและเรียกโค้ดมาใช้งาน
          เพื่อดูว่าจะเกิดอะไรขึ้นถึงแม้ว่าคุณยังจะแก้ปริศนาไม่ออกก็ตาม
      courseF_artist_for4_2018:
        courseF_artist_for4_a: |-
          **What is the smallest number you will need?\
          What is the largest number?\
          How big is the increase each time?**

          Those are the questions you need to ask to fill in the blanks of the `for` loop.
        courseF_artist_for4_b: Your code will be very similar to what you wrote in
          the last puzzle, but remember to draw a square this time!
        courseF_artist_for4_c: ไม่ต้องกลัวว่าคุณจะทำผิด! ลองเพิ่มบล็อกเข้าไปและเรียกโค้ดมาใช้งาน
          เพื่อดูว่าจะเกิดอะไรขึ้นถึงแม้ว่าคุณยังจะแก้ปริศนาไม่ออกก็ตาม
      courseF_artist_for4_2019:
        courseF_artist_for4_a: |-
          **What is the smallest number you will need?\
          What is the largest number?\
          How big is the increase each time?**

          Those are the questions you need to ask to fill in the blanks of the `for` loop.
        courseF_artist_for4_b: Your code will be very similar to what you wrote in
          the last puzzle, but remember to draw a square this time!
        courseF_artist_for4_c: ไม่ต้องกลัวว่าคุณจะทำผิด! ลองเพิ่มบล็อกเข้าไปและเรียกโค้ดมาใช้งาน
          เพื่อดูว่าจะเกิดอะไรขึ้นถึงแม้ว่าคุณยังจะแก้ปริศนาไม่ออกก็ตาม
      courseF_artist_for5:
        courseF_artist_for5_a: You don't need the `repeat` loop inside when making
          this spiral!
        courseF_artist_for5_b: Your `for` loop, move, and turn blocks can stay exactly
          the same.
      courseF_artist_for5_2018:
        courseF_artist_for5_a: You don't need the `repeat` loop inside when making
          this spiral!
        courseF_artist_for5_b: Your `for` loop, move, and turn blocks can stay exactly
          the same.
      courseF_artist_for5_2019:
        courseF_artist_for5_a: You don't need the `repeat` loop inside when making
          this spiral!
        courseF_artist_for5_b: Your `for` loop, move, and turn blocks can stay exactly
          the same.
      courseF_artist_for6:
        courseF_artist_for6_a: Your `for` loop will count from 15 to 300 by 15.
        courseF_artist_for6_b: Put a `move forward` and a `turn` block within this
          `for` loop.
        courseF_artist_for6_c: All you have to change is the number of degrees in
          the `turn` block.
      courseF_artist_for6_2018:
        courseF_artist_for6_a: Your `for` loop will count from 15 to 300 by 15.
        courseF_artist_for6_b: Put a `move forward` and a `turn` block within this
          `for` loop.
        courseF_artist_for6_c: All you have to change is the number of degrees in
          the `turn` block.
      courseF_artist_for6_2019:
        courseF_artist_for6_a: Your `for` loop will count from 15 to 300 by 15.
        courseF_artist_for6_b: Put a `move forward` and a `turn` block within this
          `for` loop.
        courseF_artist_for6_c: All you have to change is the number of degrees in
          the `turn` block.
      courseF_artist_for7:
        courseF_artist_for7_a: The pen is thinner in this puzzle. You will need to
          set it to `1` before you start.
        courseF_artist_for7_b: Notice that this spiral turns right instead of left!
        courseF_artist_for7_c: The `for` loop in this puzzle goes from 15 to 300 by
          2.
        courseF_artist_for7_d: This image is made by turning just 89 degrees.
      courseF_artist_for7_2018:
        courseF_artist_for7_a: The pen is thinner in this puzzle. You will need to
          set it to `1` before you start.
        courseF_artist_for7_b: Notice that this spiral turns right instead of left!
        courseF_artist_for7_c: The `for` loop in this puzzle goes from 15 to 300 by
          2.
        courseF_artist_for7_d: This image is made by turning just 89 degrees.
      courseF_artist_for7_2019:
        courseF_artist_for7_a: The pen is thinner in this puzzle. You will need to
          set it to `1` before you start.
        courseF_artist_for7_b: Notice that this spiral turns right instead of left!
        courseF_artist_for7_c: The `for` loop in this puzzle goes from 15 to 300 by
          2.
        courseF_artist_for7_d: This image is made by turning just 89 degrees.
      courseF_artist_for8:
        courseF_artist_for8_a: Keep everything else the same in your code, only the
          turn angle needs to change.
        courseF_artist_for8_b: If you want, you can choose a different color for your
          spiral!
      courseF_artist_for8_2018:
        courseF_artist_for8_a: Keep everything else the same in your code, only the
          turn angle needs to change.
        courseF_artist_for8_b: If you want, you can choose a different color for your
          spiral!
      courseF_artist_for8_2019:
        courseF_artist_for8_a: Keep everything else the same in your code, only the
          turn angle needs to change.
        courseF_artist_for8_b: If you want, you can choose a different color for your
          spiral!
      courseF_artist_for9:
        courseF_artist_for9_a: If you put the `set alpha` block inside of your `for`
          loop, and use the `counter` variable to change it, you can create a design
          like this.
        courseF_artist_for9_b: The `set alpha` block changes the opacity of a color.
          The smaller the value, the more transparent the color is.
      courseF_artist_for9_2018:
        courseF_artist_for9_a: If you put the `set alpha` block inside of your `for`
          loop, and use the `counter` variable to change it, you can create a design
          like this.
        courseF_artist_for9_b: The `set alpha` block changes the opacity of a color.
          The smaller the value, the more transparent the color is.
      courseF_artist_for9_2019:
        courseF_artist_for9_a: If you put the `set alpha` block inside of your `for`
          loop, and use the `counter` variable to change it, you can create a design
          like this.
        courseF_artist_for9_b: The `set alpha` block changes the opacity of a color.
          The smaller the value, the more transparent the color is.
      courseF_artist_for_challenge1:
        courseF_artist_for_challenge1_a: The `pen width` is 1. The first square has
          50 pixel sides, and each square is 50 pixels wider than the last.
        courseF_artist_for_challenge1_b: The opacity on the brush is always `counter`/2.
        courseF_artist_for_challenge1_c: After you make each square, don't forget
          to jump backward, turn, jump again, then turn back!
        courseF_artist_for_challenge1_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="draw_colour" inline="true" id="draw-color">
                      <value name="COLOUR">
                        <block type="colour_picker">
                          <title name="COLOUR">#0000cd</title>
                        </block>
                      </value>
                      <next>
                        <block type="controls_for_counter" inline="true">
                        <mutation counter="counter"></mutation>
                          <value name="FROM">
                            <block type="math_number">
                              <title name="NUM">50</title>
                            </block>
                          </value>
                          <value name="TO">
                            <block type="math_number">
                              <title name="NUM">350</title>
                            </block>
                          </value>
                          <value name="BY">
                            <block type="math_number">
                              <title name="NUM">50</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="alpha" inline="true" id="alpha">
                              <value name="VALUE">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">DIVIDE</title>
                                  <value name="A">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="math_number">
                                      <title name="NUM">2</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                              <next>
                                <block type="controls_repeat_ext" inline="true">
                                  <value name="TIMES">
                                    <block type="math_number">
                                      <title name="NUM">4</title>
                                    </block>
                                  </value>
                                  <statement name="DO">
                                    <block type="draw_move" inline="true">
                                      <title name="DIR">moveForward</title>
                                      <value name="VALUE">
                                        <block type="variables_get">
                                          <title name="VAR">counter</title>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn" inline="true">
                                          <title name="DIR">turnRight</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                        </block>
                                      </next>
                                    </block>
                                  </statement>
                                  <next>
                                    <block type="jump" inline="true">
                                      <title name="DIR">jumpBackward</title>
                                      <value name="VALUE">
                                        <block type="math_number">
                                          <title name="NUM">25</title>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn" inline="true">
                                          <title name="DIR">turnRight</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="jump" inline="true">
                                              <title name="DIR">jumpBackward</title>
                                              <value name="VALUE">
                                                <block type="math_number">
                                                  <title name="NUM">25</title>
                                                </block>
                                              </value>
                                              <next>
                                                <block type="draw_turn" inline="true">
                                                  <title name="DIR">turnLeft</title>
                                                  <value name="VALUE">
                                                    <block type="math_number">
                                                      <title name="NUM">90</title>
                                                    </block>
                                                  </value>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </statement>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_artist_for_challenge1_2018:
        courseF_artist_for_challenge1_a: The `pen width` is 1. The first square has
          50 pixel sides, and each square is 50 pixels wider than the last.
        courseF_artist_for_challenge1_b: The opacity on the brush is always `counter`/2.
        courseF_artist_for_challenge1_c: After you make each square, don't forget
          to jump backward, turn, jump again, then turn back!
        courseF_artist_for_challenge1_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="draw_colour" inline="true" id="draw-color">
                      <value name="COLOUR">
                        <block type="colour_picker">
                          <title name="COLOUR">#0000cd</title>
                        </block>
                      </value>
                      <next>
                        <block type="controls_for_counter" inline="true">
                        <mutation counter="counter"></mutation>
                          <value name="FROM">
                            <block type="math_number">
                              <title name="NUM">50</title>
                            </block>
                          </value>
                          <value name="TO">
                            <block type="math_number">
                              <title name="NUM">350</title>
                            </block>
                          </value>
                          <value name="BY">
                            <block type="math_number">
                              <title name="NUM">50</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="alpha" inline="true" id="alpha">
                              <value name="VALUE">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">DIVIDE</title>
                                  <value name="A">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="math_number">
                                      <title name="NUM">2</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                              <next>
                                <block type="controls_repeat_ext" inline="true">
                                  <value name="TIMES">
                                    <block type="math_number">
                                      <title name="NUM">4</title>
                                    </block>
                                  </value>
                                  <statement name="DO">
                                    <block type="draw_move" inline="true">
                                      <title name="DIR">moveForward</title>
                                      <value name="VALUE">
                                        <block type="variables_get">
                                          <title name="VAR">counter</title>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn" inline="true">
                                          <title name="DIR">turnRight</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                        </block>
                                      </next>
                                    </block>
                                  </statement>
                                  <next>
                                    <block type="jump" inline="true">
                                      <title name="DIR">jumpBackward</title>
                                      <value name="VALUE">
                                        <block type="math_number">
                                          <title name="NUM">25</title>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn" inline="true">
                                          <title name="DIR">turnRight</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="jump" inline="true">
                                              <title name="DIR">jumpBackward</title>
                                              <value name="VALUE">
                                                <block type="math_number">
                                                  <title name="NUM">25</title>
                                                </block>
                                              </value>
                                              <next>
                                                <block type="draw_turn" inline="true">
                                                  <title name="DIR">turnLeft</title>
                                                  <value name="VALUE">
                                                    <block type="math_number">
                                                      <title name="NUM">90</title>
                                                    </block>
                                                  </value>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </statement>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_artist_for_challenge1_2019:
        courseF_artist_for_challenge1_a: The `pen width` is 1. The first square has
          50 pixel sides, and each square is 50 pixels wider than the last.
        courseF_artist_for_challenge1_b: The opacity on the brush is always `counter`/2.
        courseF_artist_for_challenge1_c: After you make each square, don't forget
          to jump backward, turn, jump again, then turn back!
        courseF_artist_for_challenge1_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="draw_colour" inline="true" id="draw-color">
                      <value name="COLOUR">
                        <block type="colour_picker">
                          <title name="COLOUR">#0000cd</title>
                        </block>
                      </value>
                      <next>
                        <block type="controls_for_counter" inline="true">
                        <mutation counter="counter"></mutation>
                          <value name="FROM">
                            <block type="math_number">
                              <title name="NUM">50</title>
                            </block>
                          </value>
                          <value name="TO">
                            <block type="math_number">
                              <title name="NUM">350</title>
                            </block>
                          </value>
                          <value name="BY">
                            <block type="math_number">
                              <title name="NUM">50</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="alpha" inline="true" id="alpha">
                              <value name="VALUE">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">DIVIDE</title>
                                  <value name="A">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="math_number">
                                      <title name="NUM">2</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                              <next>
                                <block type="controls_repeat_ext" inline="true">
                                  <value name="TIMES">
                                    <block type="math_number">
                                      <title name="NUM">4</title>
                                    </block>
                                  </value>
                                  <statement name="DO">
                                    <block type="draw_move" inline="true">
                                      <title name="DIR">moveForward</title>
                                      <value name="VALUE">
                                        <block type="variables_get">
                                          <title name="VAR">counter</title>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn" inline="true">
                                          <title name="DIR">turnRight</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                        </block>
                                      </next>
                                    </block>
                                  </statement>
                                  <next>
                                    <block type="jump" inline="true">
                                      <title name="DIR">jumpBackward</title>
                                      <value name="VALUE">
                                        <block type="math_number">
                                          <title name="NUM">25</title>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn" inline="true">
                                          <title name="DIR">turnRight</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="jump" inline="true">
                                              <title name="DIR">jumpBackward</title>
                                              <value name="VALUE">
                                                <block type="math_number">
                                                  <title name="NUM">25</title>
                                                </block>
                                              </value>
                                              <next>
                                                <block type="draw_turn" inline="true">
                                                  <title name="DIR">turnLeft</title>
                                                  <value name="VALUE">
                                                    <block type="math_number">
                                                      <title name="NUM">90</title>
                                                    </block>
                                                  </value>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </statement>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_artist_for_challenge2:
        courseF_artist_for_challenge2_c: 'The `for loop` goes from 5 to 250 by 2. '
        courseF_artist_for_challenge2_a: The color change happens using the `set color
          with red, green, blue` block.  Red is set constant at 255, green is always
          the value of `counter`, and blue is always `255 - counter`.
        courseF_artist_for_challenge2_b: The code for this is simpler than you might
          think.  Just set the color inside the for loop, move forward, then turn.
        courseF_artist_for_challenge2_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_for_counter" inline="true">
                    <mutation counter="counter"></mutation>
                      <value name="FROM">
                        <block type="math_number">
                          <title name="NUM">5</title>
                        </block>
                      </value>
                      <value name="TO">
                        <block type="math_number">
                          <title name="NUM">250</title>
                        </block>
                      </value>
                      <value name="BY">
                        <block type="math_number">
                          <title name="NUM">2</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="draw_colour" inline="true" id="draw-color">
                          <value name="COLOUR">
                            <block type="colour_rgb" inline="false">
                              <value name="RED">
                                <block type="math_number">
                                  <title name="NUM">255</title>
                                </block>
                              </value>
                              <value name="GREEN">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <value name="BLUE">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">MINUS</title>
                                  <value name="A">
                                    <block type="math_number">
                                      <title name="NUM">255</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                            </block>
                          </value>
                          <next>
                            <block type="draw_move" inline="true">
                              <title name="DIR">moveForward</title>
                              <value name="VALUE">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_turn" inline="true">
                                  <title name="DIR">turnRight</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">80</title>
                                    </block>
                                  </value>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>

          ![](<https://images.code.org/4ce89e8d907f670408c3705f040e8677-image-1497728974326.49.09 PM.png>)
      courseF_artist_for_challenge2_2018:
        courseF_artist_for_challenge2_c: 'The `for loop` goes from 5 to 250 by 2. '
        courseF_artist_for_challenge2_a: The color change happens using the `set color
          with red, green, blue` block.  Red is set constant at 255, green is always
          the value of `counter`, and blue is always `255 - counter`.
        courseF_artist_for_challenge2_b: The code for this is simpler than you might
          think.  Just set the color inside the for loop, move forward, then turn.
        courseF_artist_for_challenge2_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_for_counter" inline="true">
                    <mutation counter="counter"></mutation>
                      <value name="FROM">
                        <block type="math_number">
                          <title name="NUM">5</title>
                        </block>
                      </value>
                      <value name="TO">
                        <block type="math_number">
                          <title name="NUM">250</title>
                        </block>
                      </value>
                      <value name="BY">
                        <block type="math_number">
                          <title name="NUM">2</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="draw_colour" inline="true" id="draw-color">
                          <value name="COLOUR">
                            <block type="colour_rgb" inline="false">
                              <value name="RED">
                                <block type="math_number">
                                  <title name="NUM">255</title>
                                </block>
                              </value>
                              <value name="GREEN">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <value name="BLUE">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">MINUS</title>
                                  <value name="A">
                                    <block type="math_number">
                                      <title name="NUM">255</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                            </block>
                          </value>
                          <next>
                            <block type="draw_move" inline="true">
                              <title name="DIR">moveForward</title>
                              <value name="VALUE">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_turn" inline="true">
                                  <title name="DIR">turnRight</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">80</title>
                                    </block>
                                  </value>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_artist_for_challenge2_2019:
        courseF_artist_for_challenge2_c: 'The `for loop` goes from 5 to 250 by 2. '
        courseF_artist_for_challenge2_a: The color change happens using the `set color
          with red, green, blue` block.  Red is set constant at 255, green is always
          the value of `counter`, and blue is always `255 - counter`.
        courseF_artist_for_challenge2_b: The code for this is simpler than you might
          think.  Just set the color inside the for loop, move forward, then turn.
        courseF_artist_for_challenge2_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_for_counter" inline="true">
                    <mutation counter="counter"></mutation>
                      <value name="FROM">
                        <block type="math_number">
                          <title name="NUM">5</title>
                        </block>
                      </value>
                      <value name="TO">
                        <block type="math_number">
                          <title name="NUM">250</title>
                        </block>
                      </value>
                      <value name="BY">
                        <block type="math_number">
                          <title name="NUM">2</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="draw_colour" inline="true" id="draw-color">
                          <value name="COLOUR">
                            <block type="colour_rgb" inline="false">
                              <value name="RED">
                                <block type="math_number">
                                  <title name="NUM">255</title>
                                </block>
                              </value>
                              <value name="GREEN">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <value name="BLUE">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">MINUS</title>
                                  <value name="A">
                                    <block type="math_number">
                                      <title name="NUM">255</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                            </block>
                          </value>
                          <next>
                            <block type="draw_move" inline="true">
                              <title name="DIR">moveForward</title>
                              <value name="VALUE">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_turn" inline="true">
                                  <title name="DIR">turnRight</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">80</title>
                                    </block>
                                  </value>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>

          ![](<https://images.code.org/4ce89e8d907f670408c3705f040e8677-image-1497728974326.49.09 PM.png>)
      courseF_artist_fwp1:
        courseF_artist_fwp1_c: Put all of the code for drawing a square inside the
          function editor.
        courseF_artist_fwp1_a: Remember, you need to turn 90 degrees to draw a square.
        courseF_artist_fwp1_b: You only need to repeat as many times as the number
          of sides in a square.
      courseF_artist_fwp2:
        courseF_artist_fwp2_a: You need to click the "edit" button to get into the
          function.  Once you're there, add a parameter called `length` and use it
          inside your `move forward` block!
        courseF_artist_fwp2_b: When calling your function, use a `for loop` for the
          best possible code!
      courseF_artist_fwp3:
        courseF_artist_fwp3_a: This gets easier if you put it all in a `for` loop.
        courseF_artist_fwp3_b: |-
          Be sure to turn 90 degrees between each square!

          ![](https://images.code.org/97bd8eded03c5aa39740876c8e9f7ff8-image-1469224745277.gif)
      courseF_artist_fwp4:
        courseF_artist_fwp4_b: Remember to **add** a parameter.  Don't remove the
          one that is already there!
        courseF_artist_fwp4_c: You will need to call your function three times to
          draw the shapes.
      courseF_artist_fwp5:
        courseF_artist_fwp5_d: A `for` loop would really help you out here!
        courseF_artist_fwp5_c: You will need to edit the function a little bit, since
          your previous function turned the artist to the right after each side, and
          this image needs a turn to the left.
        courseF_artist_fwp5_a: The length of sides for each shape is 7 times the number
          of sides it has.
        courseF_artist_fwp5_b: Don't forget to jump 100 pixels between shapes.
      courseF_artist_fwp6:
        courseF_artist_fwp6_a: It's okay to run the program a few times to figure
          out how the function works with different parameters.
        courseF_artist_fwp6_b: You don't need to add any `move` or `turn` blocks to
          finish this code.
      courseF_artist_fwp7:
        courseF_artist_fwp7_a: Feeling lost after trying a couple of ideas? Try clicking
          the "Start over" button in the upper right-hand corner.
        courseF_artist_fwp7_b: Your new `min` variable should go in the first slot
          in your `for` loop, inside the function.
      courseF_artist_fwp8:
        courseF_artist_fwp8_a: If your function is correct, you shouldn't need to
          change it for this puzzle.
        courseF_artist_fwp8_b: The only thing you should need to do between function
          calls is change the color of the line.
      courseF_artist_fwp9:
        courseF_artist_fwp9_a: |-
          Try one of these drawings.
          ![](<https://images.code.org/eae6d52956c2bc06b90db3693037df36-image-1493739069435.9.13 hints.png>)
      courseF_artist_fwp_challenge1:
        courseF_artist_fwp_challenge1_b: This is a series of polygons with sides that
          are counter pixels long.
        courseF_artist_fwp_challenge1_c: Each polygon is called from inside a for
          loop that goes from 3 down to 6 by an increment of 1. What shapes is it
          making?
      courseF_artist_fwp_challenge2:
        courseF_artist_fwp_challenge1_a: "![](https://images.code.org/9310e6352e85a8265b424c9d57ca28d1-image-1446239776339.gif)"
        courseF_artist_fwp_challenge1_b: 'This is a series of octagons with sides
          that are `counter` pixels long. '
        courseF_artist_fwp_challenge1_c: 'Each octagon is called from inside a `for`
          loop that goes from 200 down to 2 by 2. '
        courseF_artist_fwp_challenge1_d: 'Don''t forget to turn by 22.5 degrees at
          the end of each iteration. '
        courseF_artist_fwp_challenge1_e: Both the color of each octagon and the width
          of the pen are controlled by the `counter` variable.
        courseF_artist_fwp_challenge1_f: |-
          **Solution:**

          ![Solution Blocks](https://images.code.org/a82cfea836b95ce6625b08afcc3b7b37-image-1469727289590.png)
      courseF_artist_variables10:
        courseF_artist_variables10_a: Have fun with this level! See what little changes
          can do to your code.
        courseF_artist_variables10_b: You can try multiple things, and run your code
          multiple times.
      courseF_artist_variables10_2018:
        courseF_artist_variables10_a: Have fun with this level! See what little changes
          can do to your code.
        courseF_artist_variables10_b: You can try multiple things, and run your code
          multiple times.
      courseF_artist_variables10_2019:
        courseF_artist_variables10_a: Have fun with this level! See what little changes
          can do to your code.
        courseF_artist_variables10_b: You can try multiple things, and run your code
          multiple times.
      courseF_artist_variables2:
        courseF_artist_variables2_a: Remember to move forward after drawing each triangle.
        courseF_artist_variables2_b: Your new loop will contain the loop for your
          triangle, then a `move forward` command.
      courseF_artist_variables2_2018:
        courseF_artist_variables2_a: Remember to move forward after drawing each triangle.
        courseF_artist_variables2_b: Your new loop will contain the loop for your
          triangle, then a `move forward` command.
      courseF_artist_variables2_2019:
        courseF_artist_variables2_a: Remember to move forward after drawing each triangle.
        courseF_artist_variables2_b: Your new loop will contain the loop for your
          triangle, then a `move forward` command.
      courseF_artist_variables3:
        courseF_artist_variables3_a: 'The variable `length` will be used in two places
          in your code: In the side length of your triangle, and in the amount you
          move forward between triangles.'
        courseF_artist_variables3_b: 'A number block with value 50 should only be
          in one place: after the `set variable length` block.'
      courseF_artist_variables3_2018:
        courseF_artist_variables3_a: 'The variable `length` will be used in two places
          in your code: In the side length of your triangle, and in the amount you
          move forward between triangles.'
        courseF_artist_variables3_b: 'A number block with value 50 should only be
          in one place: after the `set length` block.'
      courseF_artist_variables3_2019:
        courseF_artist_variables3_a: 'The variable `length` will be used in two places
          in your code: In the side length of your triangle, and in the amount you
          move forward between triangles.'
        courseF_artist_variables3_b: 'A number block with value 50 should only be
          in one place: after the `set length` block.'
      courseF_artist_variables4:
        courseF_artist_variables4_a: Your code won't be much different than it was
          in the last puzzle, except that you will need to turn the artist to jump
          down, then turn him back to get ready to jump forward again.
        courseF_artist_variables4_c: |-
          This is the pattern your artist will be following:

          ![](https://images.code.org/41ae98c1633755cf4553f90a80e125cf-image-1500325529204.6_hint.gif)
        courseF_artist_variables4_b: "![](https://images.code.org/fc31a4b60dc86d7b820c2d242f83e6ed-image-1477533361197.gif)"
      courseF_artist_variables4_2018:
        courseF_artist_variables4_a: Get him ready to draw the next triangle.
        courseF_artist_variables4_c: |-
          This is the pattern your artist will be following:

          ![](https://images.code.org/41ae98c1633755cf4553f90a80e125cf-image-1500325529204.6_hint.gif)
        courseF_artist_variables4_b: |-
          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="variables_set">
                  <title name="VAR">length</title>
                  <value name="VALUE">
                    <block type="math_number">
                      <title name="NUM">50</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_repeat_ext">
                      <value name="TIMES">
                        <block type="math_number">
                          <title name="NUM">3</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="controls_repeat_ext">
                          <value name="TIMES">
                            <block type="math_number">
                              <title name="NUM">3</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="draw_move">
                              <title name="DIR">moveForward</title>
                              <value name="VALUE">
                                <block type="variables_get">
                                  <title name="VAR">length</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_turn">
                                  <title name="DIR">turnLeft</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">120</title>
                                    </block>
                                  </value>
                                </block>
                              </next>
                            </block>
                          </statement>
                          <next>
                            <block type="jump">
                              <title name="DIR">jumpForward</title>
                              <value name="VALUE">
                                <block type="variables_get">
                                  <title name="VAR">length</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_turn">
                                  <title name="DIR">turnRight</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">90</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="jump">
                                      <title name="DIR">jumpForward</title>
                                      <value name="VALUE">
                                        <block type="variables_get">
                                          <title name="VAR">length</title>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn">
                                          <title name="DIR">turnLeft</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_artist_variables4_2019:
        courseF_artist_variables4_a: Your code won't be much different than it was
          in the last puzzle, except that you will need to turn the artist to jump
          down, then turn him back to get ready to draw the next triangle.
        courseF_artist_variables4_c: |-
          This is the pattern your artist will be following:

          ![](https://images.code.org/41ae98c1633755cf4553f90a80e125cf-image-1500325529204.6_hint.gif)
        courseF_artist_variables4_b: |-
          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="variables_set">
                  <title name="VAR">length</title>
                  <value name="VALUE">
                    <block type="math_number">
                      <title name="NUM">50</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_repeat_ext">
                      <value name="TIMES">
                        <block type="math_number">
                          <title name="NUM">3</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="controls_repeat_ext">
                          <value name="TIMES">
                            <block type="math_number">
                              <title name="NUM">3</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="draw_move">
                              <title name="DIR">moveForward</title>
                              <value name="VALUE">
                                <block type="variables_get">
                                  <title name="VAR">length</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_turn">
                                  <title name="DIR">turnLeft</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">120</title>
                                    </block>
                                  </value>
                                </block>
                              </next>
                            </block>
                          </statement>
                          <next>
                            <block type="jump">
                              <title name="DIR">jumpForward</title>
                              <value name="VALUE">
                                <block type="variables_get">
                                  <title name="VAR">length</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_turn">
                                  <title name="DIR">turnRight</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">90</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="jump">
                                      <title name="DIR">jumpForward</title>
                                      <value name="VALUE">
                                        <block type="variables_get">
                                          <title name="VAR">length</title>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn">
                                          <title name="DIR">turnLeft</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_artist_variables5:
        courseF_artist_variables5_a: The second half of your code should look almost
          the same as the first half, except you will be turning _left_, jumping,
          then turning _right_.
        courseF_artist_variables5_b: The first half of your code will draw three triangles,
          and the second half will draw the other three.
        courseF_artist_variables5_c: Start by duplicating the code in the first half
          of your program, then alter it to make the design shown.
        courseF_artist_variables5_d: |-
          This is the pattern your artist will follow:

          ![](https://images.code.org/e4ac66f8e9a4503e49c4fad1e4fafc1d-image-1500326800109.7_hint.gif)
      courseF_artist_variables5_2018:
        courseF_artist_variables5_a: The second half of your code should look almost
          the same as the first half, except you will be turning _left_, jumping,
          then turning _right_.
        courseF_artist_variables5_b: The first half of your code will draw three triangles,
          and the second half will draw the other three.
        courseF_artist_variables5_c: Start by duplicating the code in the first half
          of your program, then alter it to make the design shown.
        courseF_artist_variables5_d: |-
          This is the pattern your artist will follow:

          ![](https://images.code.org/e4ac66f8e9a4503e49c4fad1e4fafc1d-image-1500326800109.7_hint.gif)
      courseF_artist_variables5_2019:
        courseF_artist_variables5_a: The second half of your code should look almost
          the same as the first half, except you will be turning _left_, jumping,
          then turning _right_.
        courseF_artist_variables5_b: The first half of your code will draw three triangles,
          and the second half will draw the other three.
        courseF_artist_variables5_c: Start by duplicating the code in the first half
          of your program, then alter it to make the design shown.
        courseF_artist_variables5_d: |-
          This is the pattern your artist will follow:

          ![](https://images.code.org/e4ac66f8e9a4503e49c4fad1e4fafc1d-image-1500326800109.7_hint.gif)
      courseF_artist_variables6:
        courseF_artist_variables6_a: Thanks to variables, you only need to change
          one number at the top to make this work.
        courseF_artist_variables6_b: You will need to edit the number block with value
          50, but nothing else in the code needs to be altered.
      courseF_artist_variables6_2018:
        courseF_artist_variables6_a: Thanks to variables, you only need to change
          one number at the top to make this work.
        courseF_artist_variables6_b: You will need to edit the number block with value
          50, but nothing else in the code needs to be altered.
      courseF_artist_variables6_2019:
        courseF_artist_variables6_a: Thanks to variables, you only need to change
          one number at the top to make this work.
        courseF_artist_variables6_b: You will need to edit the number block with value
          50, but nothing else in the code needs to be altered.
      courseF_artist_variables6a:
        courseF_artist_variables6a_a: Remember to use the variable `length` instead
          of an actual number to solve this puzzle.
        courseF_artist_variables6a_b: This code will be very similar to your triangle
          code, just with a different shape!
        courseF_artist_variables6a_c: Write the code for one square first, then add
          the code to move between squares. Finally, add a loop around everything!
        courseF_artist_variables6a_d: |-
          This is the pattern you'll follow!

          ![](https://images.code.org/7fd21023b1498742d1a83ad4132d276e-image-1500328404912.9_hint.gif)
      courseF_artist_variables6a_2018:
        courseF_artist_variables6a_a: Remember to use the variable `length` instead
          of an actual number to solve this puzzle.
        courseF_artist_variables6a_b: This code will be very similar to your triangle
          code, just with a different shape!
        courseF_artist_variables6a_c: Write the code for one square first, then add
          the code to move between squares. Finally, add a loop around everything!
        courseF_artist_variables6a_d: |-
          This is the pattern you'll follow!

          ![](https://images.code.org/7fd21023b1498742d1a83ad4132d276e-image-1500328404912.9_hint.gif)
      courseF_artist_variables6a_2019:
        courseF_artist_variables6a_a: Remember to use the variable `length` instead
          of an actual number to solve this puzzle.
        courseF_artist_variables6a_b: This code will be very similar to your triangle
          code, just with a different shape!
        courseF_artist_variables6a_c: Write the code for one square first, then add
          the code to move between squares. Finally, add a loop around everything!
        courseF_artist_variables6a_d: |-
          This is the pattern you'll follow!

          ![](https://images.code.org/7fd21023b1498742d1a83ad4132d276e-image-1500328404912.9_hint.gif)
      courseF_artist_variables7:
        courseF_artist_variables7_a: Start your code by using the `set length` block.
          Set the length variable to 150.
        courseF_artist_variables7_b: You can use a `repeat` loop to make your code
          for the triangle simpler.
        courseF_artist_variables7_c: You will want to turn left 120 degrees to make
          the corners of the triangle.
      courseF_artist_variables7_2018:
        courseF_artist_variables7_a: Start your code by using the `set length` block.
          Set the length variable to 150.
        courseF_artist_variables7_b: You can use a `repeat` loop to make your code
          for the triangle simpler.
        courseF_artist_variables7_c: You will want to turn left 120 degrees to make
          the corners of the triangle.
      courseF_artist_variables7_2019:
        courseF_artist_variables7_a: Start your code by using the `set length` block.
          Set the length variable to 150.
        courseF_artist_variables7_b: You can use a `repeat` loop to make your code
          for the triangle simpler.
        courseF_artist_variables7_c: You will want to turn left 120 degrees to make
          the corners of the triangle.
      courseF_artist_variables8:
        courseF_artist_variables8_b: Remember to start your code for the triangle
          with the `set length` block, and start it at 150 pixels.
        courseF_artist_variables8_c: Make sure to use the `repeat` loop to draw your
          triangle.
        courseF_artist_variables8_a: "Try putting the set of \n\n<xml>\n<block type=\"variables_set\"
          inline=\"false\">\n                        <title name=\"VAR\">length</title>\n
          \                       <value name=\"VALUE\">\n                          <block
          type=\"math_arithmetic\" inline=\"true\">\n                            <title
          name=\"OP\">ADD</title>\n                            <value name=\"A\">\n
          \                             <block type=\"variables_get\">\n                                <title
          name=\"VAR\">length</title>\n                              </block>\n                            </value>\n
          \                           <value name=\"B\">\n                              <block
          type=\"math_number\">\n                                <title name=\"NUM\">10</title>\n
          \                             </block>\n                            </value>\n
          \                         </block>\n                        </value>\n                      </block>\n</xml>\n\nblocks
          inside your loop at the end."
      courseF_artist_variables8_2018:
        courseF_artist_variables8_b: Remember to start your code for the triangle
          with the `set length` block, and start it at 150 pixels.
        courseF_artist_variables8_c: Make sure to use the `repeat` loop to draw your
          triangle.
        courseF_artist_variables8_a: "Try putting the set of \n\n<xml>\n<block type=\"variables_set\"
          inline=\"false\">\n                        <title name=\"VAR\">length</title>\n
          \                       <value name=\"VALUE\">\n                          <block
          type=\"math_arithmetic\" inline=\"true\">\n                            <title
          name=\"OP\">ADD</title>\n                            <value name=\"A\">\n
          \                             <block type=\"variables_get\">\n                                <title
          name=\"VAR\">length</title>\n                              </block>\n                            </value>\n
          \                           <value name=\"B\">\n                              <block
          type=\"math_number\">\n                                <title name=\"NUM\">10</title>\n
          \                             </block>\n                            </value>\n
          \                         </block>\n                        </value>\n                      </block>\n</xml>\n\nblocks
          inside your loop at the end."
      courseF_artist_variables8_2019:
        courseF_artist_variables8_b: Remember to start your code for the triangle
          with the `set length` block, and start it at 150 pixels.
        courseF_artist_variables8_c: Make sure to use the `repeat` loop to draw your
          triangle.
        courseF_artist_variables8_a: "Try putting the set of \n\n<xml>\n<block type=\"variables_set\"
          inline=\"false\">\n                        <title name=\"VAR\">length</title>\n
          \                       <value name=\"VALUE\">\n                          <block
          type=\"math_arithmetic\" inline=\"true\">\n                            <title
          name=\"OP\">ADD</title>\n                            <value name=\"A\">\n
          \                             <block type=\"variables_get\">\n                                <title
          name=\"VAR\">length</title>\n                              </block>\n                            </value>\n
          \                           <value name=\"B\">\n                              <block
          type=\"math_number\">\n                                <title name=\"NUM\">10</title>\n
          \                             </block>\n                            </value>\n
          \                         </block>\n                        </value>\n                      </block>\n</xml>\n\nblocks
          inside your loop at the end."
      courseF_artist_variables9:
        courseF_artist_variables9_a: For this puzzle, all you need to do is change
          how many times the loop repeats.
        courseF_artist_variables9_b: Make sure the blocks that increment `length`
          are within your loop so the lines keep getting longer.
      courseF_artist_variables9_2018:
        courseF_artist_variables9_a: For this puzzle, all you need to do is change
          how many times the loop repeats.
        courseF_artist_variables9_b: Make sure the blocks that increment `length`
          are within your loop so the lines keep getting longer.
      courseF_artist_variables9_2019:
        courseF_artist_variables9_a: For this puzzle, all you need to do is change
          how many times the loop repeats.
        courseF_artist_variables9_b: Make sure the blocks that increment `length`
          are within your loop so the lines keep getting longer.
      courseF_artist_variablesFP:
        courseF_artist_variablesFP_a: |-
          Try one of these three drawings.
          ![](<https://images.code.org/f0bac32182162bd26a8031f5aa4364ef-image-1493738360437.3.15 hints.png>)
      courseF_artist_variablesFP_2018:
        courseF_artist_variablesFP_a: |-
          Try one of these three drawings.
          ![](<https://images.code.org/f0bac32182162bd26a8031f5aa4364ef-image-1493738360437.3.15 hints.png>)
      courseF_artist_variablesFP_2019:
        courseF_artist_variablesFP_a: |-
          Try one of these three drawings.
          ![](<https://images.code.org/f0bac32182162bd26a8031f5aa4364ef-image-1493738360437.3.15 hints.png>)
      courseF_artist_variables_challenge1:
        courseF_artist_variables_challenge1_a: Each vertical line has a length of
          `10`. Each horizontal line should have a length of `length`.
        courseF_artist_variables_challenge1_b: You will want to increase the value
          of `length` by 10 **twice** inside the loop.
        courseF_artist_variables_challenge1_c: To complete the pattern you will need
          to turn left twice, turn right twice, and move forward a total of four times.
        courseF_artist_variables_challenge1_d: |-
          This puzzle just uses one loop. Without any variables, a similar path might just be a zig-zag.

          ![](<https://images.code.org/664fdd219502d004fb07886f834fa3d5-image-1496868743379.51.36 PM.png>)

          If you are having trouble, start by creating this image, then try to see where you can use variables to change the length of the horizontal lines.
        courseF_artist_variables_challenge1_e: |-
          Here is the solution.

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="variables_set" inline="false">
                  <title name="VAR">length</title>
                  <value name="VALUE">
                    <block type="math_number">
                      <title name="NUM">10</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_repeat_ext" inline="true">
                      <value name="TIMES">
                        <block type="math_number">
                          <title name="NUM">18</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="draw_move" inline="true">
                          <title name="DIR">moveForward</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">10</title>
                            </block>
                          </value>
                          <next>
                            <block type="draw_turn" inline="true">
                              <title name="DIR">turnRight</title>
                              <value name="VALUE">
                                <block type="math_number">
                                  <title name="NUM">90</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_move" inline="true">
                                  <title name="DIR">moveForward</title>
                                  <value name="VALUE">
                                    <block type="variables_get">
                                      <title name="VAR">length</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="variables_set" inline="false">
                                      <title name="VAR">length</title>
                                      <value name="VALUE">
                                        <block type="math_arithmetic" inline="true">
                                          <title name="OP">ADD</title>
                                          <value name="A">
                                            <block type="variables_get">
                                              <title name="VAR">length</title>
                                            </block>
                                          </value>
                                          <value name="B">
                                            <block type="math_number">
                                              <title name="NUM">10</title>
                                            </block>
                                          </value>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn" inline="true">
                                          <title name="DIR">turnLeft</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="draw_move" inline="true">
                                              <title name="DIR">moveForward</title>
                                              <value name="VALUE">
                                                <block type="math_number">
                                                  <title name="NUM">10</title>
                                                </block>
                                              </value>
                                              <next>
                                                <block type="draw_turn" inline="true">
                                                  <title name="DIR">turnLeft</title>
                                                  <value name="VALUE">
                                                    <block type="math_number">
                                                      <title name="NUM">90</title>
                                                    </block>
                                                  </value>
                                                  <next>
                                                    <block type="draw_move" inline="true">
                                                      <title name="DIR">moveForward</title>
                                                      <value name="VALUE">
                                                        <block type="variables_get">
                                                          <title name="VAR">length</title>
                                                        </block>
                                                      </value>
                                                      <next>
                                                        <block type="variables_set" inline="false">
                                                          <title name="VAR">length</title>
                                                          <value name="VALUE">
                                                            <block type="math_arithmetic" inline="true">
                                                              <title name="OP">ADD</title>
                                                              <value name="A">
                                                                <block type="variables_get">
                                                                  <title name="VAR">length</title>
                                                                </block>
                                                              </value>
                                                              <value name="B">
                                                                <block type="math_number">
                                                                  <title name="NUM">10</title>
                                                                </block>
                                                              </value>
                                                            </block>
                                                          </value>
                                                          <next>
                                                            <block type="draw_turn" inline="true">
                                                              <title name="DIR">turnRight</title>
                                                              <value name="VALUE">
                                                                <block type="math_number">
                                                                  <title name="NUM">90</title>
                                                                </block>
                                                              </value>
                                                            </block>
                                                          </next>
                                                        </block>
                                                      </next>
                                                    </block>
                                                  </next>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_artist_variables_challenge1_2018:
        courseF_artist_variables_challenge1_a: Each vertical line has a length of
          `10`. Each horizontal line should have a length of `length`.
        courseF_artist_variables_challenge1_b: You will want to increase the value
          of `length` by 10 **twice** inside the loop.
        courseF_artist_variables_challenge1_c: To complete the pattern you will need
          to turn left twice, turn right twice, and move forward a total of four times.
        courseF_artist_variables_challenge1_d: |-
          This puzzle just uses one loop. Without any variables, a similar path might just be a zig-zag.

          ![](<https://images.code.org/664fdd219502d004fb07886f834fa3d5-image-1496868743379.51.36 PM.png>)

          If you are having trouble, start by creating this image, then try to see where you can use variables to change the length of the horizontal lines.
        courseF_artist_variables_challenge1_e: |-
          Here is the solution.

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="variables_set" inline="false">
                  <title name="VAR">length</title>
                  <value name="VALUE">
                    <block type="math_number">
                      <title name="NUM">10</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_repeat_ext" inline="true">
                      <value name="TIMES">
                        <block type="math_number">
                          <title name="NUM">18</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="draw_move" inline="true">
                          <title name="DIR">moveForward</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">10</title>
                            </block>
                          </value>
                          <next>
                            <block type="draw_turn" inline="true">
                              <title name="DIR">turnRight</title>
                              <value name="VALUE">
                                <block type="math_number">
                                  <title name="NUM">90</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_move" inline="true">
                                  <title name="DIR">moveForward</title>
                                  <value name="VALUE">
                                    <block type="variables_get">
                                      <title name="VAR">length</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="variables_set" inline="false">
                                      <title name="VAR">length</title>
                                      <value name="VALUE">
                                        <block type="math_arithmetic" inline="true">
                                          <title name="OP">ADD</title>
                                          <value name="A">
                                            <block type="variables_get">
                                              <title name="VAR">length</title>
                                            </block>
                                          </value>
                                          <value name="B">
                                            <block type="math_number">
                                              <title name="NUM">10</title>
                                            </block>
                                          </value>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn" inline="true">
                                          <title name="DIR">turnLeft</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="draw_move" inline="true">
                                              <title name="DIR">moveForward</title>
                                              <value name="VALUE">
                                                <block type="math_number">
                                                  <title name="NUM">10</title>
                                                </block>
                                              </value>
                                              <next>
                                                <block type="draw_turn" inline="true">
                                                  <title name="DIR">turnLeft</title>
                                                  <value name="VALUE">
                                                    <block type="math_number">
                                                      <title name="NUM">90</title>
                                                    </block>
                                                  </value>
                                                  <next>
                                                    <block type="draw_move" inline="true">
                                                      <title name="DIR">moveForward</title>
                                                      <value name="VALUE">
                                                        <block type="variables_get">
                                                          <title name="VAR">length</title>
                                                        </block>
                                                      </value>
                                                      <next>
                                                        <block type="variables_set" inline="false">
                                                          <title name="VAR">length</title>
                                                          <value name="VALUE">
                                                            <block type="math_arithmetic" inline="true">
                                                              <title name="OP">ADD</title>
                                                              <value name="A">
                                                                <block type="variables_get">
                                                                  <title name="VAR">length</title>
                                                                </block>
                                                              </value>
                                                              <value name="B">
                                                                <block type="math_number">
                                                                  <title name="NUM">10</title>
                                                                </block>
                                                              </value>
                                                            </block>
                                                          </value>
                                                          <next>
                                                            <block type="draw_turn" inline="true">
                                                              <title name="DIR">turnRight</title>
                                                              <value name="VALUE">
                                                                <block type="math_number">
                                                                  <title name="NUM">90</title>
                                                                </block>
                                                              </value>
                                                            </block>
                                                          </next>
                                                        </block>
                                                      </next>
                                                    </block>
                                                  </next>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_artist_variables_challenge1_2019:
        courseF_artist_variables_challenge1_a: Each vertical line has a length of
          `10`. Each horizontal line should have a length of `length`.
        courseF_artist_variables_challenge1_b: You will want to increase the value
          of `length` by 10 **twice** inside the loop.
        courseF_artist_variables_challenge1_c: To complete the pattern you will need
          to turn left twice, turn right twice, and move forward a total of four times.
        courseF_artist_variables_challenge1_d: |-
          This puzzle just uses one loop. Without any variables, a similar path might just be a zig-zag.

          ![](<https://images.code.org/664fdd219502d004fb07886f834fa3d5-image-1496868743379.51.36 PM.png>)

          If you are having trouble, start by creating this image, then try to see where you can use variables to change the length of the horizontal lines.
        courseF_artist_variables_challenge1_e: |-
          Here is the solution.

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="variables_set" inline="false">
                  <title name="VAR">length</title>
                  <value name="VALUE">
                    <block type="math_number">
                      <title name="NUM">10</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_repeat_ext" inline="true">
                      <value name="TIMES">
                        <block type="math_number">
                          <title name="NUM">18</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="draw_move" inline="true">
                          <title name="DIR">moveForward</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">10</title>
                            </block>
                          </value>
                          <next>
                            <block type="draw_turn" inline="true">
                              <title name="DIR">turnRight</title>
                              <value name="VALUE">
                                <block type="math_number">
                                  <title name="NUM">90</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_move" inline="true">
                                  <title name="DIR">moveForward</title>
                                  <value name="VALUE">
                                    <block type="variables_get">
                                      <title name="VAR">length</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="variables_set" inline="false">
                                      <title name="VAR">length</title>
                                      <value name="VALUE">
                                        <block type="math_arithmetic" inline="true">
                                          <title name="OP">ADD</title>
                                          <value name="A">
                                            <block type="variables_get">
                                              <title name="VAR">length</title>
                                            </block>
                                          </value>
                                          <value name="B">
                                            <block type="math_number">
                                              <title name="NUM">10</title>
                                            </block>
                                          </value>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn" inline="true">
                                          <title name="DIR">turnLeft</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="draw_move" inline="true">
                                              <title name="DIR">moveForward</title>
                                              <value name="VALUE">
                                                <block type="math_number">
                                                  <title name="NUM">10</title>
                                                </block>
                                              </value>
                                              <next>
                                                <block type="draw_turn" inline="true">
                                                  <title name="DIR">turnLeft</title>
                                                  <value name="VALUE">
                                                    <block type="math_number">
                                                      <title name="NUM">90</title>
                                                    </block>
                                                  </value>
                                                  <next>
                                                    <block type="draw_move" inline="true">
                                                      <title name="DIR">moveForward</title>
                                                      <value name="VALUE">
                                                        <block type="variables_get">
                                                          <title name="VAR">length</title>
                                                        </block>
                                                      </value>
                                                      <next>
                                                        <block type="variables_set" inline="false">
                                                          <title name="VAR">length</title>
                                                          <value name="VALUE">
                                                            <block type="math_arithmetic" inline="true">
                                                              <title name="OP">ADD</title>
                                                              <value name="A">
                                                                <block type="variables_get">
                                                                  <title name="VAR">length</title>
                                                                </block>
                                                              </value>
                                                              <value name="B">
                                                                <block type="math_number">
                                                                  <title name="NUM">10</title>
                                                                </block>
                                                              </value>
                                                            </block>
                                                          </value>
                                                          <next>
                                                            <block type="draw_turn" inline="true">
                                                              <title name="DIR">turnRight</title>
                                                              <value name="VALUE">
                                                                <block type="math_number">
                                                                  <title name="NUM">90</title>
                                                                </block>
                                                              </value>
                                                            </block>
                                                          </next>
                                                        </block>
                                                      </next>
                                                    </block>
                                                  </next>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_artist_variables_challenge2:
        courseF_artist_variables_challenge2_a: Variables are helpful because you can
          add to them each time through a loop.
        courseF_artist_variables_challenge2_c: Using one variable for `sides` and
          one for `length` makes the code cleaner because you can loop the same code
          multiple times, instead of creating a new copy for each set of numbers.
        courseF_artist_variables_challenge2_d: |-
          **Solution:**

          ![Solution](https://images.code.org/311b4a946cb8f3b4144b5075be6460a3-image-1469641878222.png)
      courseF_artist_variables_challenge2_2018:
        courseF_artist_variables_challenge2_a: Variables are helpful because you can
          add to them each time through a loop.
        courseF_artist_variables_challenge2_c: Using one variable for `sides` and
          one for `length` makes the code cleaner because you can loop the same code
          multiple times, instead of creating a new copy for each set of numbers.
        courseF_artist_variables_challenge2_d: |-
          **Solution:**

          ![Solution](https://images.code.org/311b4a946cb8f3b4144b5075be6460a3-image-1469641878222.png)
      courseF_artist_variables_challenge2_2019:
        courseF_artist_variables_challenge2_a: Variables are helpful because you can
          add to them each time through a loop.
        courseF_artist_variables_challenge2_c: Using one variable for `sides` and
          one for `length` makes the code cleaner because you can loop the same code
          multiple times, instead of creating a new copy for each set of numbers.
        courseF_artist_variables_challenge2_d: |-
          **Solution:**

          ![Solution](https://images.code.org/1236e605d55d8cc9beafbca5425c8f75-image-1543523947735.png)
      courseF_bee_conditionals10:
        courseF_bee_conditionals10_a: Imagine there is a cloud in every spot. Does
          this help simplify your code?
        courseF_bee_conditionals10_b: Use an `if/else` block to check every space
          for nectar or honey.
        courseF_bee_conditionals10_c: Could a `while` loop help get to the end of
          this path?
      courseF_bee_conditionals2:
        courseF_bee_conditionals2_a: บางทีดอกไม้ก็จะอยู่ตรงนั้น บางทีก็ไม่อยู่ ถ้าคุณต้องการให้โค้ดของคุณทำงานได้ทั้งสองกรณ๊
          ให้แน่ใจว่าคุณใช้ คำสั่ง `ถ้า(if)`
        courseF_bee_conditionals2_b: Try writing the sequence to get you to all of
          the spaces, then add the `if` statement.
      courseF_bee_conditionals3:
        courseF_bee_conditionals3_a: ให้แน่ใจว่าคุณใช้ คำสั่ง`ถ้า(if)`เพื่อเช็คพื้นที่ว่างแต่ละอันว่ามีดอกไม้อยู่หรือไม่
        courseF_bee_conditionals3_b: A `repeat` loop will be useful so you only have
          to use one `if` block.
        courseF_bee_conditionals3_c: Try writing code to check the first cloud. Can
          you loop this to check all of them?
      courseF_bee_conditionals4:
        courseD_bee_conditionals4_a: คุณถือเสมือนว่า ทุกพื้นที่นั้นหมือนกับว่ามีเมฆปกคลุมอยู่
          แม้ว่าคุณจะสามารถมองเห็นเส้นทางทั้งหมดก็ตาม
        courseF_bee_conditionals4_b: 'Use an `if` statement inside your loop to check
          each space for nectar. '
        courseF_bee_conditionals4_c: ใช้บล็อก `ขณะที่มีทางข้างหน้า`คุณควร `เดินไปข้างหน้า`
          และตรวจสอบดอกไม้ ``ถ้าที่ดอกไม้ \` ผึ้งควรทำอย่างไร?
      courseF_bee_conditionals5:
        courseF_bee_conditionals5_a: ให้คิดว่าทุกด้านของเส้นทางสี่เหลี่ยมผืนผ้าเป็นเส้นทางโดยตัวของมันเอง
          แล้วใช้ลูปซ้อนกันด้วยการใช้บล็อก `ทำซ้ำ` อยู่ด้านนอกและบล็อก\` ขณะที่ยังมีทางข้างหน้า
          'อยู่ข้างใน ให้ถามว่ามีวิถีทางกี่ทางที่ผึ้งต้องบินถ้าผึ้งต้องการบินไปมาทุกด้านที่มีดอกไม้?
        courseF_bee_conditionals5_b: Inside the `while there is a path ahead` block,
          you will need to move forward and check for a flower. How do you check if
          there is a flower? What do you do if there is a flower?
        courseF_bee_conditionals5_c: 'There are 3 sides of the rectangle with flowers,
          so the code needs to `repeat 3 times`. In every repeat, the bee will need
          to continue along the path, `while there is a path ahead`. '
        courseF_bee_conditionals5_d: To continue down the path, the bee will need
          to `move forward`. While on the path, the bee needs to check for a flower.
          What should the bee do if there is a flower?
      courseF_bee_conditionals8:
        courseF_bee_conditionals8_a: |-
          **ข้อควรจำ:** ปริศนานี้เปลี่ยนแปลงทุกครั้งที่ถูกเรียกใช้งาน

          คุณควรที่จะต้องใช้บล็อกเงื่อนไข  (`ถ้า(if)` หรือ `ถ้า/อย่างอื่น(if/else)`) เพื่อแก้ปัญหาที่ท้าทายนี้
        courseF_bee_conditionals8_b: |-
          This puzzle is tricky, because you can't check blank squares, nectar, _and_ honey with just one single conditional.

          Only check for nectar and honey at the end of your path.
        courseF_bee_conditionals8_c: What happens if you skip the first flower, then
          use the `while path ahead` block?
      courseF_bee_for1:
        courseF_bee_for1_a: Drag a purple number block into the blank space on the
          `repeat` loop to tell it how many times to repeat.
        courseF_bee_for1_b: You will need two blocks in your ‘repeat’ loop to collect
          all of the nectar.
      courseF_bee_for10:
        courseF_bee_for10_a: Can you find a pattern between the number of steps you
          need to take and the number of nectars to gather?
        courseF_bee_for10_b: The first set of flowers has a total of **14 flowers**.
          To get to this first set, the bee must buzz down **7 squares** (or 14 squares
          divided by 2.) How many flowers are in the next set and how many squares
          will be the bee have to travel to get there?
        courseF_bee_for10_c: "In the puzzle, the first set of flowers has **14** flowers,
          the second set has **10** flowers, third set has **6** flowers, and the
          fourth set has **2** flowers.\n\nIn this drawing, notice there are **7**
          red squares, **5** orange squares, **3** green squares, and **1** blue block.
          \n\n![](<https://images.code.org/602ce14659299af6a59a79ebd0bdb9d4-image-1493221855089.6.11
          Hint Drawing.png>)\n\nHow do the numbers relate?"
        courseF_bee_for10_d: You'll need to have 2 repeats, one will use a math block.
      courseF_bee_for10_2018:
        courseF_bee_for10_a: Can you find a pattern between the number of steps you
          need to take and the number of nectars to gather?
        courseF_bee_for10_b: The first set of flowers has a total of **14 flowers**.
          To get to this first set, the bee must buzz down **7 squares** (or 14 squares
          divided by 2.) How many flowers are in the next set and how many squares
          will be the bee have to travel to get there?
        courseF_bee_for10_c: "In the puzzle, the first set of flowers has **14** flowers,
          the second set has **10** flowers, third set has **6** flowers, and the
          fourth set has **2** flowers.\n\nIn this drawing, notice there are **7**
          red squares, **5** orange squares, **3** green squares, and **1** blue block.
          \n\n![](<https://images.code.org/602ce14659299af6a59a79ebd0bdb9d4-image-1493221855089.6.11
          Hint Drawing.png>)\n\nHow do the numbers relate?"
        courseF_bee_for10_d: You'll need to have 2 repeats, one will use a math block.
      courseF_bee_for10_2019:
        courseF_bee_for10_a: Can you find a pattern between the number of steps you
          need to take and the number of nectars to gather?
        courseF_bee_for10_b: The first set of flowers has a total of **14 flowers**.
          To get to this first set, the bee must buzz down **7 squares** (or 14 squares
          divided by 2.) How many flowers are in the next set and how many squares
          will be the bee have to travel to get there?
        courseF_bee_for10_c: "In the puzzle, the first set of flowers has **14** flowers,
          the second set has **10** flowers, third set has **6** flowers, and the
          fourth set has **2** flowers.\n\nIn this drawing, notice there are **7**
          red squares, **5** orange squares, **3** green squares, and **1** blue block.
          \n\n![](<https://images.code.org/602ce14659299af6a59a79ebd0bdb9d4-image-1493221855089.6.11
          Hint Drawing.png>)\n\nHow do the numbers relate?"
        courseF_bee_for10_d: You'll need to have 2 repeats, one will use a math block.
      courseF_bee_for11:
        courseF_bee_for11_a: |-
          How much less is 12 than 15?\
          How much less is 9 than 12?

          Do you see a pattern?
      courseF_bee_for11_2018:
        courseF_bee_for11_a: |-
          How much less is 12 than 15?\
          How much less is 9 than 12?

          Do you see a pattern?
      courseF_bee_for11_2019:
        courseF_bee_for11_a: |-
          How much less is 12 than 15?\
          How much less is 9 than 12?

          Do you see a pattern?
      courseF_bee_for1_2018:
        courseF_bee_for1_a: Drag a purple number block into the blank space on the
          `repeat` loop to tell it how many times to repeat.
        courseF_bee_for1_b: You will need two blocks in your ‘repeat’ loop to collect
          all of the nectar.
      courseF_bee_for1_2019:
        courseF_bee_for1_a: Drag a purple number block into the blank space on the
          `repeat` loop to tell it how many times to repeat.
        courseF_bee_for1_b: You will need two blocks in your ‘repeat’ loop to collect
          all of the nectar.
      courseF_bee_for2:
        courseF_bee_for2_a: If you’re confused, work one flower at a time, and test
          often.
        courseF_bee_for2_b: Remember to move forward between each loop, so you reach
          each flower.
      courseF_bee_for2_2018:
        courseF_bee_for2_a: If you’re confused, work one flower at a time, and test
          often.
        courseF_bee_for2_b: Remember to move forward between each loop, so you reach
          each flower.
      courseF_bee_for2_2019:
        courseF_bee_for2_a: If you’re confused, work one flower at a time, and test
          often.
        courseF_bee_for2_b: Remember to move forward between each loop, so you reach
          each flower.
      courseF_bee_for4:
        courseF_bee_for4_a: Use a `for` loop that goes from 1 to 7 with an increment
          of 1 to solve this puzzle.
        courseF_bee_for4_b: Within your `for` loop, you will want to have a `move
          forward` command, and a loop to collect nectar.
        courseF_bee_for4_c: Make sure to use the `counter` variable inside your nested
          `repeat` loop to get enough nectar!
      courseF_bee_for4_2018:
        courseF_bee_for4_a: Use a `for` loop that goes from 1 to 7 with an increment
          of 1 to solve this puzzle.
        courseF_bee_for4_b: Within your `for` loop, you will want to have a `move
          forward` command, and a loop to collect nectar.
        courseF_bee_for4_c: Make sure to use the `counter` variable inside your nested
          `repeat` loop to get enough nectar!
      courseF_bee_for4_2019:
        courseF_bee_for4_a: Use a `for` loop that goes from 1 to 7 with an increment
          of 1 to solve this puzzle.
        courseF_bee_for4_b: Within your `for` loop, you will want to have a `move
          forward` command, and a loop to collect nectar.
        courseF_bee_for4_c: Make sure to use the `counter` variable inside your nested
          `repeat` loop to get enough nectar!
      courseF_bee_for5:
        courseF_bee_for5_a: This time, your `move forward` block and your `get nectar`
          block will need to be in separate `repeat` loops, both inside the same `for`
          loop.
        courseF_bee_for5_b: Use the `counter` variable in each loop so the bee moves
          different distances between each flower.
        courseF_bee_for5_c: ไม่ต้องกลัวว่าคุณจะทำผิด! ลองเพิ่มบล็อกเข้าไปและเรียกโค้ดมาใช้งาน
          เพื่อดูว่าจะเกิดอะไรขึ้นถึงแม้ว่าคุณยังจะแก้ปริศนาไม่ออกก็ตาม
      courseF_bee_for5_2018:
        courseF_bee_for5_a: This time, your `move forward` block and your `get nectar`
          block will need to be in separate `repeat` loops, both inside the same `for`
          loop.
        courseF_bee_for5_b: Use the `counter` variable in each loop so the bee moves
          different distances between each flower.
        courseF_bee_for5_c: ไม่ต้องกลัวว่าคุณจะทำผิด! ลองเพิ่มบล็อกเข้าไปและเรียกโค้ดมาใช้งาน
          เพื่อดูว่าจะเกิดอะไรขึ้นถึงแม้ว่าคุณยังจะแก้ปริศนาไม่ออกก็ตาม
      courseF_bee_for5_2019:
        courseF_bee_for5_a: This time, your `move forward` block and your `get nectar`
          block will need to be in separate `repeat` loops, both inside the same `for`
          loop.
        courseF_bee_for5_b: Use the `counter` variable in each loop so the bee moves
          different distances between each flower.
        courseF_bee_for5_c: ไม่ต้องกลัวว่าคุณจะทำผิด! ลองเพิ่มบล็อกเข้าไปและเรียกโค้ดมาใช้งาน
          เพื่อดูว่าจะเกิดอะไรขึ้นถึงแม้ว่าคุณยังจะแก้ปริศนาไม่ออกก็ตาม
      courseF_bee_for6:
        courseF_bee_for6_a: Don't forget to use a `counter` variable inside your `repeat`
          loop.
        courseF_bee_for6_b: Within your `for` loop, you will want to have a `move
          forward` command, and a loop to collect nectar.
        courseF_bee_for6_c: Your loop should count **from 5 to 1**.
      courseF_bee_for6_2018:
        courseF_bee_for6_a: Don't forget to use a `counter` variable inside your `repeat`
          loop.
        courseF_bee_for6_b: Within your `for` loop, you will want to have a `move
          forward` command, and a loop to collect nectar.
        courseF_bee_for6_c: Your loop should count **from 5 to 1**.
      courseF_bee_for6_2019:
        courseF_bee_for6_a: Don't forget to use a `counter` variable inside your `repeat`
          loop.
        courseF_bee_for6_b: Within your `for` loop, you will want to have a `move
          forward` command, and a loop to collect nectar.
        courseF_bee_for6_c: Your loop should count **from 5 to 1**.
      courseF_bee_for7:
        courseF_bee_for7_a: Your `for` loop will need to count from 1 to 7 by 2.
        courseF_bee_for7_b: Within your `for` loop, you will want to have a `move
          forward` command, and a loop to collect nectar.
        courseF_bee_for7_c: Remember to use the `counter` variable in your `repeat`
          loop.
      courseF_bee_for7_2018:
        courseF_bee_for7_a: Your `for` loop will need to count from 1 to 7 by 2.
        courseF_bee_for7_b: Within your `for` loop, you will want to have a `move
          forward` command, and a loop to collect nectar.
        courseF_bee_for7_c: Remember to use the `counter` variable in your `repeat`
          loop.
      courseF_bee_for7_2019:
        courseF_bee_for7_a: Your `for` loop will need to count from 1 to 7 by 2.
        courseF_bee_for7_b: Within your `for` loop, you will want to have a `move
          forward` command, and a loop to collect nectar.
        courseF_bee_for7_c: Remember to use the `counter` variable in your `repeat`
          loop.
      courseF_bee_for8:
        courseF_bee_for8_a: "If your loop is counting up, the increment is added to
          your counter variable each time through. \n\nWhat do you need to add to
          each number to get the next amount of nectar?"
        courseF_bee_for8_b: In this puzzle, you will need to move in a stair step
          pattern to get to the flowers.
        courseF_bee_for8_c: Your loop will count _from 3 to 15_ with some increment.
          What is it?
      courseF_bee_for8_2018:
        courseF_bee_for8_a: "If your loop is counting up, the increment is added to
          your counter variable each time through. \n\nWhat do you need to add to
          each number to get the next amount of nectar?"
        courseF_bee_for8_b: In this puzzle, you will need to move in a stair step
          pattern to get to the flowers.
        courseF_bee_for8_c: Your loop will count _from 3 to 15_ with some increment.
          What is it?
      courseF_bee_for8_2019:
        courseF_bee_for8_a: "If your loop is counting up, the increment is added to
          your counter variable each time through. \n\nWhat do you need to add to
          each number to get the next amount of nectar?"
        courseF_bee_for8_b: In this puzzle, you will need to move in a stair step
          pattern to get to the flowers.
        courseF_bee_for8_c: Your loop will count _from 3 to 15_ with some increment.
          What is it?
      courseF_bee_for9:
        courseF_bee_for9_a: |-
          Try doing some math with the counter variable.

          What do you have to do to the counter at each flower to equal the amount of nectar you need to collect?
        courseF_bee_for9_c: It looks like you will need to turn the bee at the beginning
          of each loop iteration if you want to solve the puzzle.
        courseF_bee_for9_b: "**Remember:** If your loop is counting up, the increment
          is added to your `counter` variable each time through."
      courseF_bee_for9_2018:
        courseF_bee_for9_a: |-
          Try doing some math with the counter variable.

          What do you have to do to the counter at each flower to equal the amount of nectar you need to collect?
        courseF_bee_for9_c: It looks like you will need to turn the bee at the beginning
          of each loop iteration if you want to solve the puzzle.
        courseF_bee_for9_b: "**Remember:** If your loop is counting up, the increment
          is added to your `counter` variable each time through."
      courseF_bee_for9_2019:
        courseF_bee_for9_a: |-
          Try doing some math with the counter variable.

          What do you have to do to the counter at each flower to equal the amount of nectar you need to collect?
        courseF_bee_for9_c: It looks like you will need to turn the bee at the beginning
          of each loop iteration if you want to solve the puzzle.
        courseF_bee_for9_b: "**Remember:** If your loop is counting up, the increment
          is added to your `counter` variable each time through."
      courseF_bee_for_challenge2:
        courseF_bee_for_challenge2_a: "Take a look at this option for movement:  \n\n![](https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png)"
        courseF_bee_for_challenge2_b: 'Try using two `for` loops: One for climbing
          up and grabbing nectar, and the other for climbing down and making honey.'
        courseF_bee_for_challenge2_c: "Notice that one `for` loop needs several regular
          loops inside that repeat `counter` times to make the increasing stair pattern.
          \n\nThe other `for` loop only needs one regular loop to make `counter` amount
          of honey."
        courseF_bee_for_challenge2_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_for" inline="true">
                  <title name="VAR">counter</title>
                  <value name="FROM">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <value name="TO">
                    <block type="math_number">
                      <title name="NUM">3</title>
                    </block>
                  </value>
                  <value name="BY">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="controls_repeat_ext" inline="true">
                      <value name="TIMES">
                        <block type="variables_get">
                          <title name="VAR">counter</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="maze_moveForward"/>
                      </statement>
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="variables_get">
                              <title name="VAR">counter</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="maze_nectar"/>
                          </statement>
                          <next>
                            <block type="maze_turn">
                              <title name="DIR">turnLeft</title>
                              <next>
                                <block type="controls_repeat_ext" inline="true">
                                  <value name="TIMES">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <statement name="DO">
                                    <block type="maze_moveForward"/>
                                  </statement>
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnRight</title>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_turn">
                      <title name="DIR">turnRight</title>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                          <next>
                            <block type="controls_for" inline="true">
                              <title name="VAR">counter</title>
                              <value name="FROM">
                                <block type="math_number">
                                  <title name="NUM">2</title>
                                </block>
                              </value>
                              <value name="TO">
                                <block type="math_number">
                                  <title name="NUM">10</title>
                                </block>
                              </value>
                              <value name="BY">
                                <block type="math_number">
                                  <title name="NUM">2</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="maze_moveForward">
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnLeft</title>
                                      <next>
                                        <block type="maze_moveForward">
                                          <next>
                                            <block type="maze_turn">
                                              <title name="DIR">turnRight</title>
                                              <next>
                                                <block type="controls_repeat_ext" inline="true">
                                                  <value name="TIMES">
                                                    <block type="variables_get">
                                                      <title name="VAR">counter</title>
                                                    </block>
                                                  </value>
                                                  <statement name="DO">
                                                    <block type="maze_honey"/>
                                                  </statement>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_bee_for_challenge2_2018:
        courseF_bee_for_challenge2_a: "Take a look at this option for movement:  \n\n![](https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png)"
        courseF_bee_for_challenge2_b: 'Try using two `for` loops: One for climbing
          up and grabbing nectar, and the other for climbing down and making honey.'
        courseF_bee_for_challenge2_c: "Notice that one `for` loop needs several regular
          loops inside that repeat `counter` times to make the increasing stair pattern.
          \n\nThe other `for` loop only needs one regular loop to make `counter` amount
          of honey."
        courseF_bee_for_challenge2_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_for" inline="true">
                  <title name="VAR">counter</title>
                  <value name="FROM">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <value name="TO">
                    <block type="math_number">
                      <title name="NUM">3</title>
                    </block>
                  </value>
                  <value name="BY">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="controls_repeat_ext" inline="true">
                      <value name="TIMES">
                        <block type="variables_get">
                          <title name="VAR">counter</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="maze_moveForward"/>
                      </statement>
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="variables_get">
                              <title name="VAR">counter</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="maze_nectar"/>
                          </statement>
                          <next>
                            <block type="maze_turn">
                              <title name="DIR">turnLeft</title>
                              <next>
                                <block type="controls_repeat_ext" inline="true">
                                  <value name="TIMES">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <statement name="DO">
                                    <block type="maze_moveForward"/>
                                  </statement>
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnRight</title>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_turn">
                      <title name="DIR">turnRight</title>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                          <next>
                            <block type="controls_for" inline="true">
                              <title name="VAR">counter</title>
                              <value name="FROM">
                                <block type="math_number">
                                  <title name="NUM">2</title>
                                </block>
                              </value>
                              <value name="TO">
                                <block type="math_number">
                                  <title name="NUM">10</title>
                                </block>
                              </value>
                              <value name="BY">
                                <block type="math_number">
                                  <title name="NUM">2</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="maze_moveForward">
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnLeft</title>
                                      <next>
                                        <block type="maze_moveForward">
                                          <next>
                                            <block type="maze_turn">
                                              <title name="DIR">turnRight</title>
                                              <next>
                                                <block type="controls_repeat_ext" inline="true">
                                                  <value name="TIMES">
                                                    <block type="variables_get">
                                                      <title name="VAR">counter</title>
                                                    </block>
                                                  </value>
                                                  <statement name="DO">
                                                    <block type="maze_honey"/>
                                                  </statement>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_bee_for_challenge2_2019:
        courseF_bee_for_challenge2_a: "Take a look at this option for movement:  \n\n![](https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png)"
        courseF_bee_for_challenge2_b: 'Try using two `for` loops: One for climbing
          up and grabbing nectar, and the other for climbing down and making honey.'
        courseF_bee_for_challenge2_c: "Notice that one `for` loop needs several regular
          loops inside that repeat `counter` times to make the increasing stair pattern.
          \n\nThe other `for` loop only needs one regular loop to make `counter` amount
          of honey."
        courseF_bee_for_challenge2_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_for" inline="true">
                  <title name="VAR">counter</title>
                  <value name="FROM">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <value name="TO">
                    <block type="math_number">
                      <title name="NUM">3</title>
                    </block>
                  </value>
                  <value name="BY">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="controls_repeat_ext" inline="true">
                      <value name="TIMES">
                        <block type="variables_get">
                          <title name="VAR">counter</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="maze_moveForward"/>
                      </statement>
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="variables_get">
                              <title name="VAR">counter</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="maze_nectar"/>
                          </statement>
                          <next>
                            <block type="maze_turn">
                              <title name="DIR">turnLeft</title>
                              <next>
                                <block type="controls_repeat_ext" inline="true">
                                  <value name="TIMES">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <statement name="DO">
                                    <block type="maze_moveForward"/>
                                  </statement>
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnRight</title>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_turn">
                      <title name="DIR">turnRight</title>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                          <next>
                            <block type="controls_for" inline="true">
                              <title name="VAR">counter</title>
                              <value name="FROM">
                                <block type="math_number">
                                  <title name="NUM">2</title>
                                </block>
                              </value>
                              <value name="TO">
                                <block type="math_number">
                                  <title name="NUM">10</title>
                                </block>
                              </value>
                              <value name="BY">
                                <block type="math_number">
                                  <title name="NUM">2</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="maze_moveForward">
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnLeft</title>
                                      <next>
                                        <block type="maze_moveForward">
                                          <next>
                                            <block type="maze_turn">
                                              <title name="DIR">turnRight</title>
                                              <next>
                                                <block type="controls_repeat_ext" inline="true">
                                                  <value name="TIMES">
                                                    <block type="variables_get">
                                                      <title name="VAR">counter</title>
                                                    </block>
                                                  </value>
                                                  <statement name="DO">
                                                    <block type="maze_honey"/>
                                                  </statement>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_bee_functions2:
        courseF_bee_functions2_a: The function has been written for you, but you will
          need to call it at each flower.
        courseF_bee_functions2_b: Click on the blue edit button on the `get only nectar`
          function to see what it does.
      courseF_bee_functions3:
        courseF_bee_functions3_a: 'Your function for this puzzle only needs to make
          honey, it shouldn''t have any `move forward` or `turn` blocks in it. '
        courseF_bee_functions3_b: Remember that your function should only get honey
          _if_ there is a honeycomb.
        courseF_bee_functions3_c: Use the green `only make honey` block to call your
          function.
        courseF_bee_functions3_d: Check out this path.
      courseF_bee_functions3a:
        courseF_bee_functions3a_a: 'Your function for this puzzle only needs to get
          nectar or make honey, it shouldn''t have any `move forward` or `turn` blocks
          in it. '
        courseF_bee_functions3a_b: Use a stairstep pattern to check the first four
          clouds.
      courseF_bee_functions4:
        courseF_bee_functions4_a: Your function should travel down the side paths
          and return the bee back to the main road.  You don't need to add that part
          to your main program.
        courseF_bee_functions4_b: Try building the program and using the function
          blocks as you expect the function to behave, then create the function.
      courseF_bee_functions5a:
        courseF_bee_functions5a_a: "Your function should check if there's a path to
          the right, and if there is, travel down the side paths and return the bee
          back to the main road.  \n\nYou don't need to add that part to your main
          program."
        courseF_bee_functions5a_b: Use a `while` loop to travel down all of the main
          paths, since they are different lengths.
        courseF_bee_functions5a_c: Within your `while` loop, make sure to move forward,
          then use your function to check for a path.
      courseF_bee_functions6:
        courseF_bee_functions6_a: "หากปริศนาดูเหมือนว่าจะท้าทายเกินไป ให้ลองสร้างฟังก์ชั่นทีละเล็กทีละน้อยในแต่ละครั้ง
          \ \n\nเพิ่มบล็อกบางอย่างแล้วลองเอาออก เพิ่มใหม่แล้วลองอีกครั้ง  ในไม่ช้า
          คุณจะได้รับความสำเร็จ!\n<xml>\n  <block type=\"procedures_defnoreturn\"
          editable=\"false\">\n    <mutation/>\n    <title name=\"NAME\">get nectar
          make honey</title>\n    <statement name=\"STACK\">\n\n    </statement>\n\n
          \ </block>\n</xml>"
        courseF_bee_functions6_b: Your function should check if there is a flower
          or honeycomb, get nectar or make honey, then turn.
        courseF_bee_functions6_c: Since you are turning within your function, you
          only need one `while` loop to get you through this maze.
      courseF_bee_functions7:
        courseF_bee_functions7_a: You can look back at the last puzzle to see your
          function.
        courseF_bee_functions7_b: Try drawing a path through this maze with your finger.
          Where will the bee have to make a decision?
      courseF_bee_functions8a:
        courseF_bee_functions8a_a: "หากปริศนาดูเหมือนว่าจะท้าทายเกินไป ให้ลองสร้างฟังก์ชั่นทีละเล็กทีละน้อยในแต่ละครั้ง
          \ \n\nเพิ่มบล็อกบางอย่างแล้วลองเอาออก เพิ่มใหม่แล้วลองอีกครั้ง  ในไม่ช้า
          คุณจะได้รับความสำเร็จ!"
        courseF_bee_functions8a_b: Remember to build code inside of the function editor.
      courseF_bee_functionsPre7:
        courseF_bee_functions7_a: "หากปริศนาดูเหมือนว่าจะท้าทายเกินไป ให้ลองสร้างฟังก์ชั่นทีละเล็กทีละน้อยในแต่ละครั้ง
          \ \n\nเพิ่มบล็อกบางอย่างแล้วลองเอาออก เพิ่มใหม่แล้วลองอีกครั้ง  ในไม่ช้า
          คุณจะได้รับความสำเร็จ!"
        courseF_bee_functions7_b: |-
          Remember to build code inside of the green function block.

          <xml>
            <block type="procedures_defnoreturn" editable="false">
              <mutation/>
              <title name="NAME">get nectar make honey</title>
              <statement name="STACK">
              </statement>
            </block>
          </xml>
        courseF_bee_functions7_c: Which way should you turn if there is a honeycomb?
          What about a flower? What if there is nothing?
      courseF_bee_functions_challenge1:
        courseF_bee_functions_challenge1_a: You can use the functions in the tool
          box to help you. You can call a function inside of another function's definition!
      courseF_bee_functions_challenge2:
        courseF_bee_functions_challenge2_a: |-
          If there is a path to the right, you should do the following:

          -   Get any nectar or make any honey.
          -   Turn right towards the side path.
          -   Move to the end of the side path.
          -   Turn right.

          If you repeat the above actions twice, you will be ready to move back down the main path.

          **Only click for another hint if you want to see the full solution!**
        courseF_bee_functions_challenge2_b: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat_ext" inline="true">
                  <value name="TIMES">
                    <block type="math_number">
                      <title name="NUM">4</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="maze_untilBlocked">
                      <statement name="DO">
                        <block type="maze_move">
                          <title name="DIR">moveForward</title>
                          <next>
                            <block type="maze_if">
                              <title name="DIR">isPathRight</title>
                              <statement name="DO">
                                <block type="procedures_callnoreturn" id="function">
                                <mutation name="move and check"></mutation>
                                </block>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </statement>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnLeft</title>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
            <block type="procedures_defnoreturn" editable="false">
            <mutation></mutation>
              <title name="NAME">move and check</title>
              <statement name="STACK">
                <block type="controls_repeat_ext" inline="true">
                  <value name="TIMES">
                    <block type="math_number">
                      <title name="NUM">2</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="procedures_callnoreturn">
                    <mutation name="check nectar or honey"></mutation>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                          <next>
                            <block type="maze_untilBlocked">
                              <statement name="DO">
                                <block type="maze_move">
                                  <title name="DIR">moveForward</title>
                                </block>
                              </statement>
                              <next>
                                <block type="maze_turn">
                                  <title name="DIR">turnRight</title>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </statement>
            </block>
            <block type="procedures_defnoreturn" editable="false" usercreated="true">
            <mutation></mutation>
              <title name="NAME">check nectar or honey</title>
              <statement name="STACK">
                <block type="bee_whileNectarAmount">
                  <title name="ARG1">nectarRemaining</title>
                  <title name="OP">&gt;</title>
                  <title name="ARG2">0</title>
                  <statement name="DO">
                    <block type="maze_nectar"/>
                  </statement>
                  <next>
                    <block type="bee_whileNectarAmount">
                      <title name="ARG1">honeyAvailable</title>
                      <title name="OP">&gt;</title>
                      <title name="ARG2">0</title>
                      <statement name="DO">
                        <block type="maze_honey"/>
                      </statement>
                    </block>
                  </next>
                </block>
              </statement>
            </block>
          </xml>
      courseF_bee_fwp1:
        courseF_bee_fwp1_a: Use `if` statements to make sure you're only getting nectar
          from a flower.
        courseF_bee_fwp1_b: Continue along the path using a `repeat` block. Make sure
          you are using a `move forward` block and checking if there is a flower using
          a `if` statement.
      courseF_bee_fwp2:
        courseF_bee_fwp2_a: "To turn this into a function, simply drag the code into
          the existing function block.  \n\n![](https://images.code.org/4d918c677ecb9f1618c1556566805b32-image-1477621874625.gif)"
        courseF_bee_fwp2_b: Don't forget to connect the `rowOfNectar` block to `when
          run` to call the function that you just built.
      courseF_bee_fwp3:
        courseF_bee_fwp3_a: Your function will run no matter which direction you're
          facing.
        courseF_bee_fwp3_b: There are 3 rows of nectar, what kind of turns and movements
          do you need to make between each row?
        courseF_bee_fwp3_c: To solve this puzzle, you'll need to call your function
          3 times. In between each call, you need to `turn right`, `move forward`
          2 times, then `turn right` again. OR, you need to `turn left`, `move forward`
          2 times, then `turn left` again.
      courseF_bee_fwp4:
        courseF_bee_fwp4_a: You will need to add a parameter and use the resulting
          variable in your loop.
        courseF_bee_fwp4_b: The parameter you create for your function will be used
          to in the repeat loop to determine how many times the bee will move forward
          and check for nectar.
      courseF_bee_fwp5:
        courseF_bee_fwp5_a: Count the number of spaces you need to check in each stretch
          and use those numbers as your parameters to the function call.
        courseF_bee_fwp5_a_b: Remember to turn between each function call.
      courseF_bee_fwp6:
        courseF_bee_fwp6_a: Which block automatically increments a variable that you
          could use as a parameter?
        courseF_bee_fwp6_b: Try using a `for` loop to solve this puzzle.
      courseF_bee_fwp7:
        courseF_bee_fwp7_a: You don't need a second parameter for this function, only
          a second `if` statement.
        courseF_bee_fwp7_b: Add an `if` statement in your function so the bee checks
          for both honeycombs and flowers.
      courseF_bee_fwp8:
        courseF_bee_fwp8_a: How could a `for` loop help in this puzzle?
        courseF_bee_fwp8_b: Since the spiral gets smaller as you go in, your `for`
          loop should count down.
      courseF_bee_fwp_challenge1:
        courseF_bee_fwp_challenge1_a: |-
          The main program should look something like this:

          <xml>
          <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="procedures_callnoreturn" inline="false">
                  <mutation name="pick row">
                    <arg name="length"/>
                  </mutation>
                  <value name="ARG0">
                    <block type="math_number">
                      <title name="NUM">3</title>
                    </block>
                  </value>
                  <next>
                    <block type="maze_move">
                      <title name="DIR">moveForward</title>
                      <next>
                        <block type="maze_move">
                          <title name="DIR">moveForward</title>
                          <next>
                            <block type="procedures_callnoreturn" inline="false">
                              <mutation name="pick row">
                                <arg name="length"/>
                              </mutation>
                              <value name="ARG0">
                                <block type="math_number">
                                  <title name="NUM">5</title>
                                </block>
                              </value>
                              <next>
                                <block type="maze_move">
                                  <title name="DIR">moveForward</title>
                                  <next>
                                    <block type="maze_move">
                                      <title name="DIR">moveForward</title>
                                      <next>
                                        <block type="procedures_callnoreturn" inline="false">
                                          <mutation name="pick row">
                                            <arg name="length"/>
                                          </mutation>
                                          <value name="ARG0">
                                            <block type="math_number">
                                              <title name="NUM">6</title>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="maze_move">
                                              <title name="DIR">moveForward</title>
                                              <next>
                                                <block type="maze_move">
                                                  <title name="DIR">moveForward</title>
                                                  <next>
                                                    <block type="procedures_callnoreturn" inline="false">
                                                      <mutation name="pick row">
                                                        <arg name="length"/>
                                                      </mutation>
                                                      <value name="ARG0">
                                                        <block type="math_number">
                                                          <title name="NUM">4</title>
                                                        </block>
                                                      </value>
                                                    </block>
                                                  </next>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block></xml>
        courseF_bee_fwp_challenge1_b: 'Look at how much corn is available to harvest
          in each space. Do you see the counter pattern? '
        courseF_bee_fwp_challenge1_b1: |-
          The `length` parameter should be used to set the maximum value in the `for loop`.

          Don't forget to have the farmer move back to the main path after harvesting!
        courseF_bee_fwp_challenge1_c: |-
          Place a `for loop` inside a function and set it to count from `1` to `length` by `1`.
          Inside this loop, you should move forward and pick all of the corn.

          <xml>
          <block type="controls_for" inline="true">
                      <title name="VAR">counter</title>
                      <value name="FROM">
                        <block type="math_number">
                          <title name="NUM">1</title>
                        </block>
                      </value>
                      <value name="TO">
                        <block type="parameters_get">
                          <title name="VAR">length</title>
                        </block>
                      </value>
                      <value name="BY">
                        <block type="math_number">
                          <title name="NUM">1</title>
                        </block>
                      </value>
                      <statement name="DO">
                      </statement>
          </block></xml>
        courseF_bee_fwp_challenge1_d: Inside the `for loop` you will want to `move
          forward` then `pick corn` **counter times**.
        courseF_bee_fwp_challenge1_d2: After the `for loop` you can just `move backward`
          **length times**.
        courseF_bee_fwp_challenge1_e: |-
          **Here is the solution:**

          <xml>
            <block type="procedures_defnoreturn" editable="false" usercreated="true">
              <mutation>
                <arg name="length"/>
              </mutation>
              <title name="NAME">pick row</title>
              <statement name="STACK">
                <block type="maze_turn">
                  <title name="DIR">turnLeft</title>
                  <next>
                    <block type="controls_for" inline="true">
                      <title name="VAR">counter</title>
                      <value name="FROM">
                        <block type="math_number">
                          <title name="NUM">1</title>
                        </block>
                      </value>
                      <value name="TO">
                        <block type="parameters_get">
                          <title name="VAR">length</title>
                        </block>
                      </value>
                      <value name="BY">
                        <block type="math_number">
                          <title name="NUM">1</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="maze_move">
                          <title name="DIR">moveForward</title>
                          <next>
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="harvester_corn"/>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </statement>
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="parameters_get">
                              <title name="VAR">length</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="maze_move">
                              <title name="DIR">moveBackward</title>
                            </block>
                          </statement>
                          <next>
                            <block type="maze_turn">
                              <title name="DIR">turnRight</title>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </statement>
              </block></xml>
      courseF_bee_fwp_challenge2:
        courseF_bee_fwp_challenge2_a: |-
          Start by making sure you understand how this function is _supposed_ to work. As the farmer moves down each path, she will only try to collect corn. Instead, how can you make her check for each of the 3 vegetables and pick only the one she finds?

          Add conditional statements to the function to check for corn, pumpkins, and lettuce.
        courseF_bee_fwp_challenge2_b: |-
          Are you running out of `move forward` blocks?
          Try using a _second_ `for loop` in your main program.
        courseF_bee_fwp_challenge2_c: |-
          **Here is what your function should look like:**

          <xml><block type="procedures_defnoreturn" deletable="false" movable="false" editable="false" usercreated="true">
              <mutation>
                <arg name="length"/>
              </mutation>
              <title name="NAME">pick row</title>
              <statement name="STACK">
                <block type="maze_turn">
                  <title name="DIR">turnLeft</title>
                  <next>
                    <block type="controls_for" inline="true">
                      <title name="VAR">counter</title>
                      <value name="FROM">
                        <block type="math_number">
                          <title name="NUM">1</title>
                        </block>
                      </value>
                      <value name="TO">
                        <block type="parameters_get">
                          <title name="VAR">length</title>
                        </block>
                      </value>
                      <value name="BY">
                        <block type="math_number">
                          <title name="NUM">1</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="maze_move">
                          <title name="DIR">moveForward</title>
                          <next>
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="harvester_ifHasCrop">
                                  <title name="LOC">Corn</title>
                                  <statement name="DO">
                                    <block type="harvester_corn"/>
                                  </statement>
                                  <next>
                                    <block type="harvester_ifHasCrop">
                                      <title name="LOC">Pumpkin</title>
                                      <statement name="DO">
                                        <block type="harvester_pumpkin"/>
                                      </statement>
                                      <next>
                                        <block type="harvester_ifHasCrop">
                                          <title name="LOC">Lettuce</title>
                                          <statement name="DO">
                                            <block type="harvester_lettuce"/>
                                          </statement>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </statement>
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="parameters_get">
                              <title name="VAR">length</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="maze_move">
                              <title name="DIR">moveBackward</title>
                            </block>
                          </statement>
                          <next>
                            <block type="maze_turn">
                              <title name="DIR">turnRight</title>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </statement>
            </block>
          </xml>
        courseF_bee_fwp_challenge2_d: |-
          **Here is what your main program should look like:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_for" inline="true">
                  <title name="VAR">counter2</title>
                  <value name="FROM">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <value name="TO">
                    <block type="math_number">
                      <title name="NUM">6</title>
                    </block>
                  </value>
                  <value name="BY">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="maze_move">
                      <title name="DIR">moveForward</title>
                      <next>
                        <block type="procedures_callnoreturn" inline="false">
                          <mutation name="pick row">
                            <arg name="length"/>
                          </mutation>
                          <value name="ARG0">
                            <block type="variables_get">
                              <title name="VAR">counter2</title>
                            </block>
                          </value>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
              </block></xml>
      courseF_bee_variables_3_2018:
        courseF_beevariables_3a: |-
          To subtract one from the variable, you can use this code in your program:
          <xml><block type="variables_set" inline="false">
                              <title name="VAR">gather</title>
                              <value name="VALUE">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">MINUS</title>
                                  <value name="A">
                                    <block type="variables_get">
                                      <title name="VAR">gather</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="math_number">
                                      <title name="NUM">1</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                            </block></xml>
      courseF_bee_variables_3_2019:
        courseF_bee_variables_3_2019_1: |-
          To subtract one from the variable, you can use this code in your program:
          <xml><block type="variables_set" inline="false">
                              <title name="VAR">gather</title>
                              <value name="VALUE">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">MINUS</title>
                                  <value name="A">
                                    <block type="variables_get">
                                      <title name="VAR">gather</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="math_number">
                                      <title name="NUM">1</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                            </block></xml>
      courseF_bee_variables_4_2019:
        courseF_bee_variables_4_2019_1: Instead of subtracting 1 from `gather`, add
          1 each time instead. What should value should the variable have at first?
      courseF_playlab_variables1a:
        courseF_playlab_variables1a_a: You will want to replace the words “What should
          I shout?” in the green block with “Goal!”
      courseF_playlab_variables2b:
        courseF_playlab_variables2b_a: What do you think Kiki will say when you hit
          `Run`?
      courseF_playlab_variables3b_josh:
        courseF_playlab_variables3b_a: 'There are two blocks with empty spaces: an
          `actor say` block, and a `join` block. Add the variable blocks there!'
      courseF_playlab_variables4b:
        courseF_playlab_variables4b_a: You don’t need any more blocks from the toolbox
          here.
        courseF_playlab_variables4b_b: Put the two `age` variables and one `name`
          variable where they make the most sense in the conversation.
      courseF_playlab_variables5c:
        courseF_playlab_variables5c_a: Find an `answer` variable block in the toolbox,
          under “Variables”.
        courseF_playlab_variables5c_b: Test your code! Try entering “red”, and also
          other colors, to see what happens.
      courseF_playlab_variables6c:
        courseF_playlab_variables6c_a: Under the “Input” section, use the `ask` block
          to get input from users.
      courseF_playlab_variables7b:
        courseF_playlab_variables7b_a: Have a cat and a dog talk about their favorite
          foods. Use the ask block to find out the favorite food, then display the
          text to the screen!
        courseF_playlab_variables7b_b: Have your favorite character ask if you want
          to hear a joke. If the answer is yes, display a joke to the screen.
      courseF_playlab_variables7c:
        courseF_playlab_variables7c_a: Put the new `ask` block before your `if/else`
          statement so you can use it there in other stages.
      courseF_playlab_variables8c:
        courseF_playlab_variables8c_a: The `join` block goes into an `actor say` block,
          and lets you use your variables in larger sentences.
      courseF_playlab_variables_challenge1:
        courseF_playlab_variables_challenge1_a: |-
          You will need additional blocks from the tool box to get the actors to talk.

          <xml><block type="studio_saySpriteParamsTime" inline="true">
                <value name="SPRITE">
                  <block type="math_number">
                    <title name="NUM">1</title>
                  </block>
                </value>
                                <value name="TEXT">
                            <block type="text">
                              <title name="TEXT">Knock knock.</title>
                            </block>
                          </value>
                <value name="TIME">
                  <block type="math_number">
                    <title name="NUM">1</title>
                  </block>
                </value>
                </block></xml>
      courseF_playlab_variables_challenge2:
        courseF_playlab_variables_challenge2_a: Add and subtract points to the `score`
          variable when sprites collide.
        courseF_playlab_variables_challenge2_b: You can change how far you move your
          sprite each time one of the arrow keys is pressed.
        courseF_playlab_variables_challenge2_c: |-
          **Solution:**

          <xml>
            <block type="studio_whenArrow">
              <title name="VALUE">up</title>
              <next>
                <block type="studio_moveDistanceParams" inline="true">
                  <title name="SPRITE">0</title>
                  <title name="DIR">1</title>
                  <value name="DISTANCE">
                    <block type="math_number">
                      <title name="NUM">25</title>
                    </block>
                  </value>
                </block>
              </next>
            </block>
            <block type="studio_whenArrow">
              <title name="VALUE">down</title>
              <next>
                <block type="studio_moveDistanceParams" inline="true">
                  <title name="SPRITE">0</title>
                  <title name="DIR">4</title>
                  <value name="DISTANCE">
                    <block type="math_number">
                      <title name="NUM">25</title>
                    </block>
                  </value>
                </block>
              </next>
            </block>
            <block type="studio_whenArrow">
              <title name="VALUE">left</title>
              <next>
                <block type="studio_moveDistanceParams" inline="true">
                  <title name="SPRITE">0</title>
                  <title name="DIR">8</title>
                  <value name="DISTANCE">
                    <block type="math_number">
                      <title name="NUM">25</title>
                    </block>
                  </value>
                </block>
              </next>
            </block>
            <block type="studio_whenArrow">
              <title name="VALUE">right</title>
              <next>
                <block type="studio_moveDistanceParams" inline="true">
                  <title name="SPRITE">0</title>
                  <title name="DIR">2</title>
                  <value name="DISTANCE">
                    <block type="math_number">
                      <title name="NUM">25</title>
                    </block>
                  </value>
                </block>
              </next>
            </block>
            <block type="studio_whenSpriteCollided">
              <title name="SPRITE1">0</title>
              <title name="SPRITE2">1</title>
              <next>
                <block type="studio_setScore" inline="false">
                  <value name="VALUE">
                    <block type="math_arithmetic" inline="true">
                      <title name="OP">ADD</title>
                      <value name="A">
                        <block type="studio_getScore"/>
                      </value>
                      <value name="B">
                        <block type="math_number">
                          <title name="NUM">3</title>
                        </block>
                      </value>
                    </block>
                  </value>
                </block>
              </next>
            </block>
            <block type="studio_whenSpriteCollided">
              <title name="SPRITE1">0</title>
              <title name="SPRITE2">2</title>
              <next>
                <block type="studio_setScore" inline="false">
                  <value name="VALUE">
                    <block type="math_arithmetic" inline="true">
                      <title name="OP">ADD</title>
                      <value name="A">
                        <block type="studio_getScore"/>
                      </value>
                      <value name="B">
                        <block type="math_number">
                          <title name="NUM">3</title>
                        </block>
                      </value>
                    </block>
                  </value>
                </block>
              </next>
            </block>
            <block type="studio_whenSpriteCollided">
              <title name="SPRITE1">1</title>
              <title name="SPRITE2">2</title>
              <next>
                <block type="studio_setScore" inline="false">
                  <value name="VALUE">
                    <block type="math_arithmetic" inline="true">
                      <title name="OP">MINUS</title>
                      <value name="A">
                        <block type="studio_getScore"/>
                      </value>
                      <value name="B">
                        <block type="math_number">
                          <title name="NUM">1</title>
                        </block>
                      </value>
                    </block>
                  </value>
                </block>
              </next>
            </block>
          </xml>
      coursea_maze_ramp1_2018:
        courseC_maze_programming1_a: ถ้าเจ้านกไปไม่ถึงเจ้าหมูนั่น เช็คดูให้แน่ใจว่าบล็อกทั้งสองถูกคลิกต่อกันอย่างสมบูรณ์
          แล้วคลิก " เริ่ม " อีกครั้งหนึ่ง
        courseC_maze_programming1_b: ไม่ต้องกลัวว่าคุณจะทำผิด! ลองทำบางอย่างดู และถ้ามันไม่ได้ผล
          ลองทำอย่างอื่นดู!
      coursea_maze_ramp1_2019:
        courseC_maze_programming1_a: ถ้าเจ้านกไปไม่ถึงเจ้าหมูนั่น เช็คดูให้แน่ใจว่าบล็อกทั้งสองถูกคลิกต่อกันอย่างสมบูรณ์
          แล้วคลิก " เริ่ม " อีกครั้งหนึ่ง
        courseC_maze_programming1_b: ไม่ต้องกลัวว่าคุณจะทำผิด! ลองทำบางอย่างดู และถ้ามันไม่ได้ผล
          ลองทำอย่างอื่นดู!
      grade5_artist_variables_triangles1:
        grade5_artist_variables_triangles1_a: To make an internal angle of 60 degrees
          in this triangle, remember to turn the artist 120 degrees.
        grade5_artist_variables_triangles1_b: Use the `repeat` loop to make your code
          shorter.
        grade5_artist_variables_triangles1_c: Inside your loop, you will want to move
          forward 50 pixels, then turn left 120 degrees.
      grade5_artist_variables_triangles1_2018:
        grade5_artist_variables_triangles1_a: To make an internal angle of 60 degrees
          in this triangle, remember to turn the artist 120 degrees.
        grade5_artist_variables_triangles1_b: Use the `repeat` loop to make your code
          shorter.
        grade5_artist_variables_triangles1_c: Inside your loop, you will want to move
          forward 50 pixels, then turn left 120 degrees.
      grade5_artist_variables_triangles1_2019:
        grade5_artist_variables_triangles1_a: To make an internal angle of 60 degrees
          in this triangle, remember to turn the artist 120 degrees.
        grade5_artist_variables_triangles1_b: Use the `repeat` loop to make your code
          shorter.
        grade5_artist_variables_triangles1_c: Inside your loop, you will want to move
          forward 50 pixels, then turn left 120 degrees.
      iceage_click_hello:
        iceage_click_hello_a: Add one or more `actor 1 say` blocks to the `when clicked`
          event to complete this puzzle.
      iceage_free_play:
        iceage_free_play_a: 'Can you make Sid and Manny have an Ice Crystal fight?  '
        iceage_free_play_b: Make Granny chase Diego.  End the game as a win if she
          catches him.
        iceage_free_play_c: Can you have Sid throw snowflakes at Diego and have Diego
          get bigger each time one hits?  End the game as a win if Diego gets hit
          5 times.
      iceage_hello1:
        iceage_hello1_a: You only need to add one block to solve this puzzle.  Drag
          the `say` block out from the toolbar and connect it to the `when run` event
          block that is already in the workspace. Next, type "Hello!" inside.
      iceage_hello2:
        iceage_hello2_a: 'To solve this puzzle, you will need to have Sid say something
          using the `actor 1 say` block.  You will also need to have Manny say something
          with the `actor 2 say` block. '
      iceage_move_events:
        iceage_move_events_a: 'Each of the `when ___ arrow` events will need to have
          a different `move actor 1` command connected to it to solve this puzzle. '
      iceage_move_to_actor:
        iceage_move_to_actor_a: For this puzzle, you can either move Diego down by
          200 pixels, or move Manny up by 200 pixels.
        iceage_move_to_actor_b: Connect the `play ___ sound` block to the `when actor
          1 touches actor 2` event to finish this challenge.
      iceage_move_to_flag:
        iceage_hello3_a: Use the `move actor 1 right by 200 pixels` block to solve
          this puzzle.
      iceage_repeat:
        iceage_repeat_a: Use both the `move actor 1 left` and `move actor 1 right`
          blocks to solve this puzzle.
      iceage_sound_and_points:
        iceage_sound_and_points_a: คุณจะต้องเพิ่มบล็อกสองบล็อกภายใต้อีเวนท์`เมื่อนักแสดงที่
          1 สัมผัสนักแสดงที่ 2`
        iceage_sound_and_points_b: You will need both the `score a point` block and
          the 'play \_\_\_\_ sound\` block to pass this level.
      iceage_throw_hearts:
        iceage_throw_hearts_a: When do you want to throw hearts at granny?  When an
          arrow is pressed? When you click on Sid?  When you click on Granny?  The
          choice is yours!
        iceage_throw_hearts_b: To get granny to be happy when she receives a heart,
          you will need to connect the `set actor 2 mood to happy` block beneath the
          `when actor 2 touches projectile` event.
      iceage_warn_ice_age:
        iceage_warn_ice_age_a: 'You should only have to add two blocks to get this
          puzzle where it needs to be. '
        iceage_warn_ice_age_b: Add both new blocks beneath the `when run` event to
          have them happen immediately after the program starts.
