---
de-DE:
  data:
    long_instructions:
      2-3 Artist 1 new: Hallo, ich bin ein Künstler. Du kannst mich programmieren,
        um fast alles zu zeichnen. Benutze ein paar Blöcke, um mich über die grauen
        Linien im Bild zeichnen zu lassen (jede Linie ist 100 Pixel lang).
      2-3 Artist 11: 'Gib dem Stoppschild einen Rahmen, indem du ein Achteck mit 100
        Pixel Seiten machst. '
      2-3 Artist 12: 'Zeichne einen Kreis, um den Augapfel fertigzustellen! Wenn der
        Zeichner sich um 1 Grad mit jedem Schleifenschritt dreht, wie oft musst Du
        den Code dann wiederholen, um einen Kreis zu zeichnen? '
      2-3 Artist 2 new: Dieses Haus hat eine halbfertige Wand. Jede Seite hat 100
        Pixel, aber die halbfertige nur 50. Vervollständige die Wand.
      2-3 Artist 3.4: "Der \"springe\"-Baustein bewegt den Künstler, ohne eine Linie
        zu zeichnen. \nZeichne die gestrichelte Linie nach. Verwende dazu \"springe
        vorwärts\" und \"vorwärts bewegen\"-Bausteine."
      2-3 Artist 3new: |-
        Der rote Hut ist 100 Pixel hoch. Zeichne den schwarzen Hut, der 70 Pixel kleiner ist, zu Ende.

        _(Beachte: Die Breite des schwarzen Hutes beträgt 50 Pixel.)_
      2-3 Artist 4: Hilf mir, das Haus für diese Katze zu vervollständigen.
      2-3 Artist 6: |-
        Dieses Haus braucht ein Dach! Zeichne das Dreieck.

        Hinweis: alle drei Seiten sind gleich lang.

        <img src="https://images.code.org/8b10073fd1a7fe53b4da33ec2229894b-image-1468018903891.gif" width="300"/>
      2-3 Artist 7: 'Zeichne die rechte Hälfte des letzten Fensters zu Ende. Jedes
        Quadrat der Fensterscheibe beträgt 25 Pixel. '
      2-3 Artist 8: |-
        Zeit eine Scheune zu bauen.

        Mache die Räume für jedes Tier, indem die Scheune in 2 gleich große Rechtecke aufgeteilt wird.

        Hinweis:
        Die Rechtecke sind 200 Pixel weit und 100 Pixel hoch.

        Es gibt viele verschiedene Wege um das Rätsel zu lösen.
      2-3 Artist 9 NEW: Vervollständige diesen Drachen
      2-3 Artist Assessment 1: "**Prüfung**: Vervollständige den letzten Zahn. Er
        ist 25 Pixel breit und 25 Pixel hoch."
      2-3 Artist Debugging 1: "Dieser Hut sollte nur 50 Pixel breit sein. \nKannst
        du das korrigieren?\n\n<br/>"
      2-3 Artist Debugging 10: "Der Steuerkreuz auf meinem Controller ist zu schmal.
        \n\nKannst du es um 10 Pixel breiter machen?\n\nVersuche den Code zuerst auszuführen,
        um zu sehen, was los ist."
      2-3 Artist Debugging 11: |-
        Meine Schneeflocke fällt auseinander!

        Kannst du herausfinden, was los ist?
      2-3 Artist Debugging 2: "Dieser Code für die Schnurrhaare der Katze ist falsch.
        \n\nKorrigiere diesen Code, um Whisker zu zeichnen, die alle die gleiche Länge
        haben."
      2-3 Artist Debugging 3: "Mein Boot hat ein Loch! \n\nWas musst du ändern, so
        dass sich die Enden treffen?"
      2-3 Artist Debugging 5: Der Code für das Bein und den Fuß ist falsch? Kannst
        du das beheben?
      2-3 Artist Debugging 6: |-
        Sieht aus, als sitze ich auf einem Stuhl, dem ein Bein fehlt!

        Ändere den Code, um das letzte Bein zu zeichnen.
      2-3 Artist Debugging 7: |-
        Sieht so aus, als ob das C im Code spiegelverkehrt gezeichnet wird!

        Kannst du es wieder wie ein C aussehen lassen?
      2-3 Artist Debugging 8: |-
        Mein Lehrer sagt, dass ich beenden soll, was ich anfange!

        Hilf mir, mein Windrad fertigzustellen. Kannst du herausfinden, was los ist?
      2-3 Artist Debugging 9: |-
        Irgendwas ist faul!

        Der Code für diesen Stengel ist falsch. Kannst du herausfinden, wie du den Zeichner dazu bringen kannst, den Stengel auf die richtige Weise zu zeichnen?
      2-3 Artist Debugging Assessment 1: "Warum ist das Quadrat um 75 Pixel zu klein
        geraten?\\\r\n\\\r\nWo ist der Fehler? Kannst du es größer machen?"
      2-3 Artist Free Play: Freies Spiel! Zeichne was du willst.
      2-3 Artist Functions 1: "\"Ich bin ein Zombie-Künstler. Ich liebe es zu zeichnen!\"
        \ \n\nHilf dem Zombie, quadratische Gläser zu zeichnen.  \n\nDie Brücke zwischen
        den Brillengläsern ist 25 Pixel kürzer als die Breite der Quadrate, die 100
        Pixel beträgt."
      2-3 Artist Functions 10: "**Freies Spielen:** Hier sind zwei Funktionen, um
        ein großes und ein kleines Zahnrad zu zeichnen. \n\nVerwende sie, um das Innere
        einer Maschine zu zeichnen!"
      2-3 Artist Functions 11: "Wir haben die Funktion \"Ein Quadrat zeichnen\" in
        \"Ein Sechseck zeichnen\" umbenannt, aber sie gibt uns immer noch Felder!
        \ \n\nKannst du die Funktion \"Draw a hexagon\" ändern, um ein Hexagon mit
        50 Pixel Seiten zu zeichnen? \n\nZeichne das Bild mit der neuen Funktion!"
      2-3 Artist Functions 11.5: "Hier ist die gleiche „Zeichne ein Sechseck“-Funktion.
        \n\nWas passiert, wenn du das Hauptprogramm 6 Mal wiederholst und dich dabei
        jedes Mal um 60 Grad drehst?"
      2-3 Artist Functions 12: |-
        Funktionen sind sehr gut zum mehrfachen Zeichnen von komplexen Dingen.

        Kannst du die "Zeichne eine Blume" Funktion verwenden, um den Rest des Blumenkasten zu füllen?
        Die Pflanzen sind alle 100 Pixel voneinander entfernt.
      2-3 Artist Functions 2: "Mit Funktionen können Sie neue Bausteine definieren!
        \n\nWir haben die Blöcke, die zum Zeichnen eines Quadrats benötigt werden,
        in eine Funktion namens \"Zeichne ein Quadrat\" verschoben. Verwende diesmal
        die Funktion \"Zeichne ein Quadrat\", um die Gläser zu erstellen. \n\nDie
        Quadrate sind 75 Pixel voneinander entfernt."
      2-3 Artist Functions 3: "Bearbeite die Funktion, um ein Quadrat mit einer Seitenlänge
        von 115 zu zeichnen, um die größeren Gläser zu zeichnen. \n\nDie Quadrate
        sind nun 45 Pixel voneinander entfernt."
      2-3 Artist Functions 4: Platziere die Funktion nun in eine Schleife, um diese
        drei Quadrate zu zeichnen.
      2-3 Artist Functions 9: "**Freies Spielen:** Hier ist eine Schneeflocken-Funktion.
        Experimentiere damit, um ein Winterbild zu erstellen! \n\nDies ist ein freies
        Spiel, daher gibt es kein zu lösendes Rätsel. Viel Spaß!"
      2-3 Artist Loops New 1: |-
        Lasst uns den Kopf des Roboters malen! Kannst du ein Quadrat malen, dessen Seiten 100 Pixel lang sind?

        <br/>
      2-3 Artist Loops New 10: Jetzt lass uns einen Haufen V's miteinander verbinden,
        sie in einer Schleife zeichnen.
      2-3 Artist Loops New 11: "Zeit, etwas flottes zu machen! \n\nBaue den Code aus
        dem letzten Puzzle neu, aber diesmal füg eine Linkskurve von 30 Grad innerhalb
        der Schleife hinzu. Wiederhole es jetzt 24 Mal statt 8 Mal."
      2-3 Artist Loops New 12: 'Zeichne einen Diamanten mit einer Seitenlänge von
        100 Pixel. '
      2-3 Artist Loops New 13: "Wir werden mit einem Code (in grau) beginnen, um einen
        Diamanten herzustellen. \n\nWiederhole den Grauen Code, um ein lustiges Muster
        zu erstellen!"
      2-3 Artist Loops New 14: |-
        Spiel mit dem Code für den Diamanten herum und schaue, welche anderen Muster du herstellen kannst.

        Versuche größere oder kleinere Drehungen und schaue wie oft du dich dann bewegen musst.
      2-3 Artist Loops New 15: |-
        Zeichne etwas, wozu du gerade Lust hast!
        <br/><br/>
      2-3 Artist Loops New 2: |-
        Hier ist das gleiche Rätsel, das wir gerade gelöst haben, aber diesmal können wir nur einen "vorwärts bewegen"-Baustein und einen "Drehe"-Baustein verwenden.

        Kannst du einen `wiederhole` Baustein benutzen, um dieses Rätsel zu lösen?
      2-3 Artist Loops New 9: Zeichne ein einfaches V (beide Seiten haben 50 Pixel),
        um den Pfeil zu vervollständigen.
      2-3 Artist Nested Loops 1: |-
        Du hast schon einmal Schleifen benutzt, um Formen zu zeichnen, aber jetzt werden wir Schleifen in andere Schleifen einfügen!

        Erzeuge einen äußeren `Wiederholungsblock` um diese ganzen Bausteine, um das Muster zu zeichnen.

        <br/>
      2-3 Artist Nested Loops 10: Wiederhole diesen Code 12 Mal, um das Muster zu
        zeichnen.
      2-3 Artist Nested Loops 11: Wiederhole diesen Code 4 Mal, um das Muster zu vervollständigen
        und drehe es um 90 Grad nach jedem Kreis.
      2-3 Artist Nested Loops 12: Wiederhole diesen Code 12 Mal, um die Wirbel zu
        vervollständigen.
      2-3 Artist Nested Loops 2: "Wiederhole nun das Zeichnen des Dreiecks 6 mal.
        \n\nNach jedem Dreieck musst du 60 Grad drehen, bevor du das nächste zeichnen
        kannst."
      2-3 Artist Nested Loops 3: "Du musst dein Dreieck 12 Mal wiederholt zeichnen,
        um dieses Muster zu erzeugen. \n\nTeile die Anzahl der Grad in einem Kreis
        (360) durch die Anzahl der Formen, die du zeichnest (12), um herauszufinden,
        wie weit du dich nach jeder Form drehen musst."
      2-3 Artist Nested Loops 4: |-
        Wiederhole diesen Diamanten 12 mal, um eine Blume zu zeichnen!

        Hinweis: Wir verwenden den gleichen Winkel, um 12 Diamanten erneut zu zeichnen, wie bei den 12 Dreiecken.
        Wie viel musst du nach jeder Form drehen?
      2-3 Artist Nested Loops 5: "Fülle die Fenster dieses Gebäudes mittels einer
        verschachtelten Schleife aus. \n\nDie Fenster sind 20 Pixel lang und 20 Pixel
        auseinander."
      2-3 Artist Nested Loops 6: Dieser Dinosaurier hat 8 Spitzen am Schwanz. Jede
        Spitze ist 30 Pixel lang. Das Dreieck muss 8 mal durchlaufen werden, aber
        sorge dafür, dass es sich nach jedem Durchlauf vorwärts bewegt!
      2-3 Artist Nested Loops 7: "Wiederhole das Zeichnen dieses Dreiecks 10 mal,
        um die Sonne zu zeichnen. \n\nDu musst dich nach jedem Dreieck bewegen und
        drehen. \n\nDu kannst herausfinden, wie viel du drehen musst, indem du die
        Anzahl der Grad in einem Kreis durch die Anzahl der Dreiecke teilst, aus denen
        er besteht."
      2-3 Artist Nested Loops 8: "Nun fügen wir etwas Gras zu unserem Bild hinzu.
        \n\nJeder Grasbüschel ist 50 Pixel voneinander entfernt."
      2-3 Artist Nested Loops 9: "Wir beenden dieses Bild, indem wir unsere Blume
        hinzufügen. \n\nWiederhole das Zeichnen des Diamanten 12 mal, um eine Blume
        zu zeichnen."
      2-3 Artist Nested Loops Free Play: Freies Spiel, zeichne irgendetwas Cooles
        mit verschachtelten Schleifen.
      2-3 Bee Conditionals 11: "Ich frage mich, was da draußen los ist!\n\nHilf mir,
        um den Hof herumzufliegen und Nektar nur von den Blumen zu sammeln, die welche
        haben. "
      2-3 Bee Conditionals 13: |-
        Hier ist viel los!

        Nutze das, was du gelernt hast, um den ganzen Nektar zu sammeln und dann den Honig herzustellen.
      2-3 Bee Conditionals 14: |-
        Lasst uns alles zusammenfügen!

        Verwende das, was du gelernt hast, um mir zu helfen, Nektar nur von Blumen zu sammeln, die ihn haben, und verwende so wenig Bausteine wie möglich.

        Vergiss nicht, am Ende Honig zu machen.
      2-3 Bee Conditionals 15: "Dieses Treppenstufenmuster sollte vertraut aussehen.
        \ \n\nKannst du Nektar nur von den Blüten sammeln, die Nektar besitzen, und
        dabei so wenig Blöcke wie möglich verwenden?"
      2-3 Bee Conditionals 2: "Ich bin eine hungrige Biene! \nHilf mir, den gesamten
        Nektar der Blumen mit der geringsten Anzahl von Bausteinen zu sammeln."
      2-3 Bee Conditionals 3: "Schau dir den ganzen Nektar an!\n\nHilf mir, den Nektar
        zu sammeln und den Honig mit so wenig Blöcken wie möglich herzustellen.  "
      2-3 Bee Conditionals 5: "Diese magischen violetten Blumen ändern sich!\n\nJedes
        Mal, wenn du das Puzzle ausprobierst, können lilafarbene Blumen entweder 1
        Nektar oder gar keinen haben.... aber du wirst die Nummer nicht kennen, bis
        du den Code ausgeführt hast! \n\nAchte darauf, dass du keinen Nektar von einer
        violetten Blume sammelst, wenn sie keinen hat. \nDu musst zuerst überprüfen,
        ob der Nektar gleich 1 ist, indem du den Block `wenn Nektar` benutzt."
      2-3 Bee Conditionals Assessment 1: |-
        **Prüfung:** Sammle den ganzen Nektar.\
        Achte darauf, nicht von einer lila Blume Nektar zu sammeln, wenn sie keinen hat.
      2-3 Bee Debugging 1: |-
        Diese Bausteine nerven mich wirklich!

        Bereinige den oder die Fehler, um den gesamten Nektar zu sammeln.
      2-3 Bee Debugging 10: Dieses Puzzle artet in Schleifen aus! Löse die Fehler,
        sammle allen Nektar und erzeuge den Honig.
      2-3 Bee Debugging 2: |-
        Kannst du das Problem hier finden?

        Behebe den oder die Fehler, um den gesamten Nektar zu sammeln.
      2-3 Bee Debugging 3: |-
        Ooh, das hier sticht!

        Behebe den oder die Fehler, um den gesamten Nektar zu sammeln.
      2-3 Bee Debugging 5: "Diese Blume sieht lecker aus! \n\nBeseitige den oder die
        Fehler, um den gesamten Nektar zu sammeln.\\\nDu kannst nun sowohl Ausführen
        als auch Einzelschritt verwenden."
      2-3 Bee Debugging 6: |-
        Was für eine süße Herausforderung!

        Beseitige den/die Fehler, um den gesamten Nektar zu sammeln.
      2-3 Bee Debugging 9: |-
        Sei geduldig mit dieser Bienen-Aufgabe!

        Du musst einige Dinge in diesem Programm lösen, um allen Nektar einzusammeln und Honig daraus zu machen.
      2-3 Bee Debugging Assessment 1: |-
        **Prüfung:** Jetzt ist es an der Zeit zu zeigen was du weißt!

        Löse die Fehler, sammle den Nektar und erzeuge den Honig.
      2-3 Bee Functions 1: |-
        Funktionen sind Code-Bausteine, die eine Aufgabe ausführen.

        Verwende die Funktion `2 Einheiten Nektar holen`, um den Nektar von jeder Blüte zu sammeln.
      2-3 Bee Functions 10: Lila Blüten haben entweder 1 oder 0 Nektar.  Erstelle
        eine Funktion, die Nektar nur aus den lila Blüten sammelt, die Nektar haben.
      2-3 Bee Functions 2: "Funktionen sind Programm-Bausteine, die eine Aufgabe ausführen.
        \n\nVerwende die „hohle 5“- Funktion, um gleichzeitig 5 mal Nektar zu holen."
      2-3 Bee Functions 4: "Die „bewege und hole Nektar“- Funktion dreht die Biene,
        sammelt Nektar und bringt die Biene an den Ausgangsort zurück.  \n\nBenutze
        die Funktion, um den ganzen Nektar zu sammeln."
      2-3 Bee Functions Assessment 1: "**Prüfung:** Benutze die gegebene Funktion,
        um von jeder Blüte Nektar zu sammeln."
      2-3 Bee Functions Assessment 2: "**Prüfung:** Erzeuge eine Funktion, mit der
        man sich drehen, vorwärts bewegen und 3 mal Honig erzeugen kann. Anschließend
        lasse die Biene dahin zurückkehren wo sie angefangen hat und drehe um."
      2-3 Bee Loops 1: |-
        Diese Blumen sehen lecker aus!

        Sammle Nektar von jeder der Blüten mit den geringstmöglichen Bausteinen.
      2-3 Bee Loops 13: "**Prüfung:** Sammle den gesamten Nektar mit den wenigsten
        Bausteinen."
      2-3 Bee Loops 3A: Kannst du eine Schleife verwenden um den ganzen Nektar einzusammeln?
      2-3 Bee Loops 3B: Verwende nun den Wiederholen-Baustein um den ganzen Nektar
        aufzusammeln und den ganzen Honig zu erzeugen.
      2-3 Bee Loops 4: |-
        So eine fleißige Biene!

        Hilf den Bienen, den gesamten Nektar zu sammeln und den ganzen Honig mit den geringstmöglichen Bausteinen herzustellen.
      2-3 Bee Loops 4A: "Wie oft können Schleifen dir bei diesem Puzzle helfen?  \n\nSchleifen
        sind dein Freund! Benutze einige von ihnen, um dieses Rätsel mit den wenigsten
        Bausteinen zu lösen."
      2-3 Bee Loops 5: "Die Form dieses Pfades ist anders als die der anderen. \n\nKannst
        du den gesamten Nektar mit so wenigen Bausteinen wie möglich sammeln?"
      2-3 Bee Loops 7: Füge diese Bausteine in eine Schleife ein, um Nektar von jeder
        Blüte zu sammeln?
      2-3 Bee Loops 8: |-
        Benutze die „Solange Nektar“- Schleife, um den ganzen Nektar zu sammeln.

        Diese Schleife wird solange durchlaufen, wie die Bedingung wahr ist - in diesem Fall: `Nektar > 0`.
      2-3 Bee Loops Assessment 1: "**Prüfung:** Benutze eine Solange-Schleife, um
        den ganzen Nektar dieser Blüten zu sammeln."
      2-3 Maze 1: 'Kannst du mir helfen, das böse Schwein zu fangen? Klinke ein paar
        `vorwärts bewegen` Bausteine unter dem `wenn Ausführen` Baustein ein und drücke
        auf "Ausführen". '
      2-3 Maze 12: |-
        Plötzlich erscheint ein magischer Baustein!  Mit dem Baustein `widerhole` kannst du Code immer wieder wiederholen.

        Kannst du zum Schwein gelangen, indem du eine Schleife erstellst, die nur einen `vorwärts bewegen`-Baustein innerhalb eines `wiederhole` verwendet?
      2-3 Maze 13: Bringt mich zum Schwein! Du kannst diesmal nur einen `vorwärts
        bewegen` Baustein verwenden
      2-3 Maze 15: In diesem Rätsel werden dir zwei `wiederhole` Schleifen helfen,
        das Schwein mit der geringsten Anzahl an Schleifen zu erreichen!
      2-3 Maze Loops 18: "Bring mich mit den wenigsten Bausteinen zur Sonnenblume!
        \ \n\nVersuche, eine `Wiederhole`-Schleife in einer anderen zu verwenden,
        um die Menge an Code zu reduzieren, die du brauchst."
      2-3 Maze Loops 19: "Lasst uns das auf eine andere Ebene bringen! \n\nBenutze
        Schleifen, um mich mit den wenigsten Schlaufen zur Sonnenblume zu bringen."
      2-3 Maze Loops Assessment 1: "**Herausforderung:** Bringe mich mit nur 5 Bausteinen
        zur Sonnenblume! "
      4-5 Artist 1: 'Hilf mir, meine Box fertig zu zeichnen. (Jede Linie ist 300 Pixel
        lang) '
      4-5 Artist 11: Vervollständige die grünen Linien. Die Linien sind 300 Pixel
        lang und 15 Pixel voneinander entfernt.
      4-5 Artist 2: Baue diesen Code in eine Schleife ein um so das Quadrat zu vervollständigen.
      4-5 Artist 3: |-
        Dieses rechteckige Blumenbeet hat einen Umfang von 600. Die lange Seite hat eine Länge von 200.

        Zeichne das Rechteck mit so wenigen Bausteinen wie möglich.
      4-5 Artist 3.5: "Versuche herauszufinden, was passiert, wenn du diesen Code
        ausführst (oder drücke einfach \"Ausführen\" und versuche es). \n\nDann wiederhole
        den Code so oft, bis die Zeichnung vollständig ist!"
      4-5 Artist 4: "Wie viele Grad gibt es in einem Kreis?  \n\nHänge die Bausteine
        in eine Schleife, um einen Kreis bunter Farben zu erzeugen."
      4-5 Artist 5: Womit können wir "???" ersetzen, um sicherzustellen, dass der
        Zombie diese Zeichnung mit der bereitgestellten Schleife vervollständigt?
      4-5 Artist 6: Dieses gleichseitige Dreieck hat Winkel von 60, 60 und 60 Grad.
        Jede Seite ist 200 Pixel groß. Vervollständige die Zeichnung.
      4-5 Artist 7: "Dieses rechtwinklige Dreieck hat Winkel von 30, 60 und 90 Grad.
        \ Die Länge der schrägen Seite (Länge der Hypotenuse) beträgt 200 Pixel. \n\nVervollständige
        die Zeichnung."
      4-5 Artist 8: "Die Mittellinie auf einem Fußballfeld ist _senkrecht_ zu den
        Seitenlinien.\\\nDieses Rechteck hat einen Umfang von insgesamt 800 Pixel
        und ist 240 Pixel lang. Wie groß ist er?   \n\nZeichne die Grenzen und die
        Mittellinie."
      4-5 Artist 9: Zeichne die rechte Hälfte dieses Bildes so, dass das Design symmetrisch
        ist. Die Dreiecke sind gleichseitig und haben Seiten, die 50 Pixel lang sind.
      4-5 Artist Assessment 1: "**Prüfung:** Benutze eine Schleife, um das gleichseitige
        Dreieck zu zeichnen. Jede Seite hat eine Länge von 300 Pixeln."
      4-5 Artist Free Draw 1: Freies Zeichnen!  Zeichne, was deine Inspiration dir
        eingibt.
      4-5 Artist Patterns 1: |-
        Zeichne dieses Quadrat mit einer Schleife.

        Jede Seite ist 20 Pixel lang.
      4-5 Artist Patterns 10: "Dieser Code zeichnet zwei Spalten Sechsecke - wiederhole
        das ganze 4 Mal per Schleife und zeichne das ganze Wabenwerk. \n\nDu musst
        in deiner äußeren Schleife 120 Pixel zurückspringen um sicherzustellen, dass
        der Künstler nicht außerhalb des Bildschirms zeichnet."
      4-5 Artist Patterns 11: Wie oft muss die Schleife durchlaufen werden, damit
        ein Halbkreis gezeichnet wird?
      4-5 Artist Patterns 12: "Was passiert wenn du die Schleife kopierst und eine
        Linksdrehung anstelle einer Rechtsdrehung ausführst? \n\nKannst du das wiederholen,
        um diese Welle zu zeichnen?"
      4-5 Artist Patterns 13: "Nun lass uns das Ganze viermal in einer Schleife wiederholen,
        um diesen Bilderrahmen zu erstellen. Achte auf die Ecken - Du kannst dich
        nicht einfach um 90 Grad drehen! \n\nWenn eine 3-Grad-Drehung 60 Mal einen
        Halbkreis ergibt, welcher dieser Code-Bausteine macht dann einen zusätzlichen
        Viertelkreis für die Ecken?"
      4-5 Artist Patterns 2: |-
        Wenn Du Deine quadratische Schleife in eine andere Schleife platzierst, nennen wir das eine geschachtelte Schleife.

        Was musst Du als äußere Schleife hinzufügen, um sicherzustellen, dass alle 15 Quadrate nebeneinander liegen?
      4-5 Artist Patterns 3: Jetzt gehen wir eine Ebene tiefer! Wir haben diesen ganzen
        Codebaustein in eine weitere Schleife geschachtelt, aber Du musst den Künstler
        wieder an seinen Platz zurückbringen, um die nächste Zeile zu zeichnen. Welchen
        dieser Codeblöcke kann man am Ende der äußersten Schleife platzieren, um das
        ganze Raster zu zeichnen?
      4-5 Artist Patterns 4: |-
        Dieser Diamant hat 50 Pixel Seiten und Winkel von 120 und 60 Grad.

        Benutze eine Schleife, um ihn zu zeichnen.
      4-5 Artist Patterns 5: |-
        Wiederhole diesen Code, so dass eine Reihe von 6 Diamanten entsteht.

        Beachte, dass der Diamantencode so verändert wurde, dass 3 statt 2 Wiederholungen stattfinden - was glaubst du warum?
      4-5 Artist Patterns 6: Wie oft musst du diesen Baustein wiederholen, damit das
        ganze Diamantenraster gezeichnet wird?
      4-5 Artist Patterns 7: Wir wollen den Code der letzten Aufgabe etwas verändern
        und so ein komplizierteres Muster erzeugen. Achte darauf, wie die Diamanten
        sich jetzt überdecken. Versuche es mit einer Änderung des ersten "springe
        rückwärts" Bausteins von 100 auf 50 (halb so weit). Wie weit sollte der Künstler
        beim zweiten "springe rückwärts" Baustein gehen?
      4-5 Artist Patterns 8: Verwende eine Schleife, um dieses Sechseck mit 40 Pixel
        Seiten und 60 Grad Winkel zu zeichnen.
      4-5 Artist Patterns 9: "Wiederhole nun den Code dreimal, um die ganze Zeile
        zu zeichnen. \n\nJedes Sechseck ist von den weitesten Punkten von rechts nach
        links 80 Pixel breit."
      4-5 Artist Patterns 9.5: "Wir wollen diesen Code in einer Schleife laufen lassen,
        um zwei Reihen Sechsecke zu zeichnen. \n\nBeachte, wie unsere zweite Reihe
        nach rechts verschoben wird."
      4-5 Artist Patterns Free Play: Freies Spielen - Entwirf dein eigenes Muster!
      4-5 Bee Conditionals 1: |-
        Die Biene kann nicht unterscheiden, ob dies eine Blume oder eine Wabe ist. Sammle den Nektar nur aus Blüten, aber prüfe erst, ob es sich um eine Wabe oder um eine Blüte handelt!\
        Aber Achtung, es kann sich ändern!
      4-5 Bee Conditionals 2: "Mehr Wolken! \n\nÜberprüfe unter jeder Wolke, ob sie
        eine Blume versteckt, bevor du Nektar sammelst.  \n\nDenkt daran: Nicht alle
        Wolken verbergen das Gleiche!"
      4-5 Bee Conditionals 4: Das unbekannte Objekt ist entweder eine Blume oder eine
        Bienenwabe. Benutze den „wenn/ansonsten"- Baustein um Nektar zu machen, wenn
        es eine Blüte ist, „ansonsten", um Honig zu erzeugen (weil es eine Wabe ist).
      4-5 Bee Conditionals 5: "Vielleicht ist eine Blume oder eine Wabe unter diesen
        Wolken. \n\nBenutze den „wenn/ansonsten\"- Baustein um Nektar zu machen, wenn
        dort eine Blüte ist, „ansonsten\", um Honig zu erzeugen (weil dort eine Wabe
        ist)."
      4-5 Bee Conditionals 6: "Ich bin nicht sicher, wie viel Nektar diese Blume hat,
        aber ich weiß, dass sie entweder 1, 2 oder 3 Nektar hat. \n\nKombiniere die
        bedingten Blöcke (`if` und/oder `if/else`), um nur so viel Nektar zu erhalten,
        wie die Blume hat. \n\nDenke daran, dass sich die Menge des Nektars jedes
        Mal, wenn du das Puzzle ausführst, ändern kann!"
      4-5 Bee Conditionals 7: "Bedenke, dass lila Blüten 3, 2, oder 1 Nektar tragen
        können. \n\nVervollständige die „Prüfe lila Blüte\"- Funktion und benutze
        sie, um den ganzen Nektar bei den Blüten zu sammeln."
      4-5 Bee Conditionals 8: "Schreibe die Funktion für `Prüfe Blüte, erzeuge Honig`.
        \n\nDeine Funktion sollte prüfen, ob die violette Blüte 3, 2 oder 1 Nektar
        hat und den gesamten Nektar sammeln. \nDann gehe vorwärts und machen Honig."
      4-5 Bee Conditionals Assessment 1: |-
        **Prüfung:** Hinter Wolke ist entweder eine Blume mit einem Nektar oder eine Honigwabe mit einem Honig.

        Vervollständige die „sammle Nektar oder erzeuge Honig"- Funktion, dann rufe sie auf um den ganzen Nektar einzusammeln und den Honig zu erzeugen.
      4-5 Bee Debugging 1: |-
        Diese Bausteine nerven mich wirklich.

        Kannst du sie in Ordnung bringen?
      4-5 Bee Debugging 6: "Die lila Blüte hat eine unbekannte Menge Nektar. \n\nBringe
        die Bausteine in Ordnung, so dass der ganze Nektar aus der Blüte herausgeholt
        wird."
      4-5 Bee Debugging Assessment 1: "**Prüfung:** Repariere den Code."
      4-5 Bee Nested Loops 2: "Sammle den ganzen Nektar von allen Blumen. \n\nBenutze
        eine verschachtelte Schleife. "
      4-5 Bee Nested Loops 4: "Sammle den gesamten Nektar jeder Blüte und erzeuge
        Honig bei jeder Honigwabe. \n\nBenutze eine verschachtelte Schleife. "
      4-5 Bee Nested Loops Assessment 1: "**Prüfung:** Sammle den gesamten Nektar
        und erzeuge den gesamten Honig, indem du Schleifen benutzt."
      4-5 Maze 7: "Bringe den Zombie auf schnellstem Weg zur Sonnenblume. \nKannst
        Du die Aufgabe mit weniger als 11 Blöcken lösen?"
      4-5 Maze 9: |-
        Jetzt gibt es einen "Wiederhole bis"-Baustein.
        Hiermit können wir Befehle wiederholen bis der Zombie auf die Sonnenblume trifft.

        Verwende den "Wiederhole bis"-Baustein, um die Aufgabe mit so wenig Blöcken wie möglich zu lösen.
      4-5 Maze Assessment 1: "**Aufgabe:** Gehe zur Sonnenblume und verwende dabei
        so wenig Bausteine wie möglich."
      4-5 Maze Conditionals 1: Benutze den `Wiederholen`-Baustein, um den Zombie zur
        Sonnenblume zu bringen.
      4-5 Maze Conditionals 10: "Kannst du nur 3 Blöcke hinzufügen, um dem Zombie
        zu helfen, ein komplexeres Labyrinth zu lösen? \n\nWenn du es richtig machst,
        kann er jeden kurvigen Weg gehen, egal wie lang er ist!"
      4-5 Maze Conditionals 2: Benutze den `Wiederholen`-Baustein, um den Zombie zur
        Sonnenblume zu bringen.
      4-5 Maze Conditionals 3: 'Benutze den `if`-Baustein, um zu entscheiden, wann
        gedreht werden soll. '
      4-5 Maze Conditionals 4: Ok, löse dieses wie das letzte Puzzle, aber du musst
        dich daran erinnern, wie du den `wenn`-Baustein und `wiederhole bis`-Baustein
        verwendet hast.
      4-5 Maze Conditionals 5: "Ich will Sonnenblume! \n\nVerwende einen `Wenn`-Baustein,
        um den Zomie mit der geringsten Anzahl an Bausteinen zum Ziel zu bringen."
      4-5 Maze Conditionals 6: |-
        "Iss Sonnenblume!"

        Verwenden Sie eine `Wenn`-Anweisung, um den Zombie mit der geringsten Anzahl an Bausteinen zur Sonnenblume zu bringen.
      4-5 Maze Conditionals 7: Die Lösung dieses Rätsels ist nicht viel anders, aber
        Vorsicht vor dem Mampfern!
      4-5 Maze Conditionals 8: "Die „Wenn-Ansonsten“-Bausteine überprüfen eine Bedingung
        und führen dann entweder eine ODER eine andere Anweisung aus. \n\nVerwende
        diesen neuen Baustein, um mich zur Sonnenblume zu bringen."
      4-5 Maze Conditionals 9: |-
        Noch eine Übung mit dem „Wenn-Ansonsten" Baustein!

        Schaffst du es mit dem ersten Versuch?
      4-5 Maze Conditionals Assessment 1: '**Prüfung:** Benutze einen „Wiederholen
        bis"- und einen „Wenn-Ansonsten"- Baustein und bringe mich so mit der geringstmöglichen
        Anzahl an Bausteinen zur Sonnenblume.'
      4-5 Nested Loops 1: 'Vervollständige den Code um die Dreiecke zu zeichnen. Das
        erste ist bereits fertig. Hinweis: Drei Dreiecke in einer 360- Grad- Drehung.'
      4-5 Nested Loops 11: "Kannst du diese 10 Quadrate dieses Gehsteigs mit einer
        verschachtelten Schleife zeichnen? \n\nJedes Quadrat hat eine Seitenlänge
        von 30 Pixeln."
      4-5 Nested Loops 12: Kannst du diese 36 Dreiecke mit einer verschachtelten Schleife
        zeichnen?
      4-5 Nested Loops 2: 'Erstelle nun eine Schleife in einer weiteren Schleife um
        10 Dreiecke zu zeichnen.\\ Dies nennt man eine verschachtelte Schleife.  '
      4-5 Nested Loops 3: |-
        Male eine Sonne indem du den Startbefehl in einer anderen Schleife benutzt. Dies nennt man eine verschachtelte Schleife.

        Um dieses coole Design zu erhalten, musst du vor dem Drehen um eine Dreiecklänge nach vorne springen.
      4-5 Nested Loops 5: Benutze den angegebenen Code in einer Schleife, um eine
        Windmühle zu erstellen.
      4-5 Nested Loops 6: Kannst du ein Sechseck zeichnen, indem du den Dreieckscode
        wiederholst?
      4-5 Nested Loops 7: "Wiederhole dieses Muster 10 Mal. \n\nWie viel musst du
        jedes Mal drehen, wenn du eine Schleife machst?"
      4-5 Nested Loops 8: "Wiederhole diese Form 6 Mal. \n\nWie viel musst du jedes
        Mal drehen, wenn du eine Schleife machst? "
      4-5 Nested Loops 9: Zeichne die Zähne im Mund des Alligators!
      4-5 Nested Loops Assessment 1: "**Prüfung:** Verwende eine verschachtelte Schleife
        um das Design fertigzustellen."
      4-5 While Loops 1: Bringe mich zu dem Loch und fülle es mit zwei Schaufeln Dreck,
        indem Du den `füllen`-Baustein benutzt.
      4-5 While Loops 2: Bringe mich zu dem Erdhaufen und entferne ihn mit 5 Schaufelladungen,
        indem du den `entferne 1` Baustein verwendest.
      4-5 While Loops 3: "Benutze so wenige Blöcke wie möglich, um dieses Puzzle zu
        vervollständigen!  \n\nBewege mich zum Haufen und entferne ihn vollständig,
        dann bewege mich zu dem Loch und fülle es komplett aus."
      4-5 While Loops 4: "Wow, ich habe ein richtig tiefes Loch gefunden!\n\nIch weiß
        nicht, wie viele Schaufeln Erde ich brauche. \\\nKannst du ein Programm schreiben,
        das den Baustein `fülle 1` so lange benutzt, bis der Boden eben ist?  "
      Alien Defender: "\\*\\* Projektidee\\*\\*: Programmiere ein Verteidigungsspiel
        im Spielelabor!"
      AppLab Intro 7 - Change Screen Color: "<div style=\"float:right\">\n\t<img src=\"https://images.code.org/bf9b1fb57751fa90c9b786339914ad70-image-1508521068798.34.54
        AM.png\" style=\"height:150px\"> \n</div>\n\n**Aufgabe:** Erzeuge einen grünen
        Bildschirm. \n\n**Wie:** Ziehe einen `setProperty()` Block in den Arbeisbereich.
        Nutze im Dropdown Menü `\"hintergrundfarbe\"` um sie auf `\"grün\"` zu setzen.
        Drücke dann \"Start\".\n\n**Hängst du fest? Klicke hier:** ![expandable](https://images.code.org/3b5e70522b02867a1df1d5b5e481785e-image-1511279858395.gif)"
      AppLab Intro 7 - Change Text 2: |-
        <div style="float:right">
        <img src="https://images.code.org/39ead723fbd2b047aa2d1e401cbfec8a-image-1506545619076.34.29 PM.png" style="height:200px;">
        </div>

        **Ziel:** Vergrößere den Texte und färbe ihn blau.

        **Wie:**  Du brauchst 2 Codezeilen. Setze bei `"label1"` `"font-size"` auf `80` und `"text-color"` auf `"blue"`.

        **Klappt nicht? Klicke hier:** ![expandable](https://images.code.org/2d5d46a03082af3b01847aad6602e2ea-image-1511280140482.gif)
      AppLab Intro 7 - Full Text: "<div style=\"float:right\">\n<img src=\"https://images.code.org/1e81d5bcdd69172f4127de55d045225f-image-1507565161167.05.19
        AM.png\" style=\"height:200px\">\n</div>\n\n**Ziel:** Mache die Schaltflächen
        `\"red\"` und `\"blue\"`. Ändere dann den Text in dem großen orangen Etikett.\n\n**Wie:**
        \n\n-   Du kannst die Maus über Elemente bewegen um ihre `\"id\"` zu sehen.\n-
        \  Setze `\"background-color\"` der Schaltflächen auf `\"red\"` und `\"blue\"`.\n-
        \  Ändere die `\"text\"` Eigenschaft des Etiketts so wie du möchtest, zum
        Beispiel `\"Willkommen bei meiner App!\"`.\n\n**Klappt nicht? Klicke hier:**
        ![expandable](https://images.code.org/4bf99e7352e7c17a5bf73ced80171f6a-image-1511280628092.gif)"
      AppLab Intro 7 - onEvent intro: |-
        <img src="https://images.code.org/3d8c8487ea669563d3401c0009cd9462-image-1511281194897.gif" style="float:right;height:200px">

        **Ziel:**Der Bildschirm beginnt blau. Fügen Code hinzu, damit er grün wird, wenn Du auf die Schaltfläche "Green-ify" klickst.

        **Wie:** Fügt Code innerhalb des `onEvent()` hinzu, der die `"background-color"` des Bildschirms auf `"green"` setzt.

        **Bist du hängen geblieben? Klicke hier:** ![expandable](https://images.code.org/5ddf6b129bc04b79839b3661ccef788b-image-1511281012076.gif)
      AppLab Intro 7 - onEvent twoButtons: |-
        <img src="https://images.code.org/158c9258bfff18c2177440f201446c47-image-1507566793890.gif" style="float:right;height:200px">

        **Ziel:** Hilfe bei der Fertigstellung dieser Taschenlampen-App. Mit der Taste "On" wird der Bildschirm bereits weiß. Starte die App und probiere es aus. Schreibe dann den Code so, dass die Taste "Off" den Bildschirm wieder schwarz macht.

        **Wie:** Füge Code innerhalb des leeren `onEvent()` hinzu, der die `"background-color"` des Bildschirms auf `"black"` und `"text-color"` des Labels auf `"white"` setzt.

        **Bist du hängen geblieben? Klicke hier:** ![expandable](https://images.code.org/020b1d9b465aaf35967a528a92961c13-image-1511281772276.gif)
      AppLab Intro 7 - playSound: "<img src=\"https://images.code.org/28176329f15dea1a863564b069e72aab-image-1511282702534.44.52
        AM.png\" style=\"float:right;height:200px\">\n\n**Ziel:** Dieses Geräuschabspielgerät
        ist fast fertig! Führe es aus, um zu sehen, wie es funktioniert. Füge dann
        ein Bild, einen Text und einen Ton zur letzten Schaltfläche hinzu.\n\n**Wie:**
        \n\n-   Füge dem Programm ein `onEvent()` hinzu und setze die \"id\" auf `\"button4\"`.
        Ziehe einen `playSound()` in das `onEvent()` und wähle einen Sound aus der
        Bibliothek. \n-   Füge eine `setProperty()` (außerhalb Deines `onEvent()`)
        hinzu, um die `\"image\"` Eigenschaft der Schaltfläche zu ändern. Wähle dann
        ein Bild über die dritte Dropdown-Liste aus.\n-   Füge einen weiteren Befehl
        `setProperty()` hinzu, um den `\"Text\"` der Schaltfläche zu ändern.\n\n**Bist
        du hängen geblieben? Klicke hier:** ![expandable](https://images.code.org/a3fdcb8954c5e8d585bef64df1ec5b1a-image-1511285408512.gif)"
      AppLab Intro 7 - thisOrThatAddButton: |-
        <img src="https://images.code.org/3feb07aaf3d933b094647479673a3293-image-1508373443129.37.00 PM.png" style="float:right;height:200px">

        **Ziel:** Füge dem Bildschirm eine zweite Schaltfläche hinzu, die "right" mit einer `"id"` von `"rightButton"` sagt.

        **Wie:**  Ziehe im Designmodus eine neue Schaltfläche hinein. Positioniere und vergrößere sie. Stellen dann ihre `"id"`, `"text"`, `"background-color"`, und `"font-size"` ein.

        **Bist du hängen geblieben? Klicke hier:** ![expandable](https://images.code.org/7035ad0445984cf889b159cf5682e35a-image-1508383186447.gif)
      AppLab Intro 7 - thisOrThatAddScreen: |-
        <img src="https://images.code.org/f102a1363aa575cc530379d9a4ee378c-image-1508382068883.00.59 PM.png" style="float:right;height:200px">

        **Ziel:** Erstelle einen neuen Bildschirm namens `"rightScreen"`. Füge ein Textetikett hinzu, auf dem steht: "Du bist rechts abgebogen!".

        **Wie:** Im Designmodus ziehe ein neues Bildschirmelement hinein. Ändere seine `"id"`zu `"rightScreen"`. Ziehe dann ein Label auf den Bildschirm und ändere den Text in "Du bist rechts abgebogen!".

        **Bist du hängen geblieben? Klicke hier:** ![expandable](https://images.code.org/11cf186acb0453cf9ec46929b763f568-image-1508383646159.gif)
      AppLab Intro 7 - thisOrThatPersonalize: "<a href=\"https://studio.code.org/projects/applab/gx21oCP10-V4GlNMlSpwdQ\"
        target=\"_blank\"><img src=\"https://images.code.org/ba6c0db48cc1c3c28c135f1c2f67f361-image-1511244802597.10.18
        PM.png\" style=\"float:right;height:200px\"></a>\n<a href=\"https://studio.code.org/projects/applab/SM_edi1btguZZiQaTtUT9Q\"
        target=\"_blank\"><img src=\"https://images.code.org/284b55697d786e0cd64350d0967c5dda-image-1511244806272.11.05
        PM.png\" style=\"float:right;height:200px\"></a>\n<a href=\"https://studio.code.org/projects/applab/SMvVhgBX_GGyxg5LSEMrgg\"
        target=\"_blank\"><img src=\"https://images.code.org/445181ff8d84861919512ba9b8e09586-image-1511244809994.12.40
        PM.png\" style=\"float:right;height:200px\"></a>\n\n**Ziel:** Erstelle eine
        eigene App, indem du dieses Projekt erweiterst. Dann teile sie mit jemandem!\n\n**Wie:**
        Entscheide, welche Art von App Du erstellen möchtest. Dann erstelle diese,
        indem Du weitere Bildschirme, Schaltflächen, Text, Sound und Benutzerinteraktionen
        zu der App hinzufügst. Es gibt noch ein paar weitere Bausteine in der Toolbox,
        mit denen Du ebenfalls experimentieren kannst. Wenn Du fertig bist, klicke
        auf \"Teilen\", um sie an Dich selbst oder einen Freund zu senden! \n\n<details>\n\n<summary><b>Wähle
        Deine eigenen Abenteuerideen aus</b></summary>\n\nProbiere diese <a href=\"https://studio.code.org/projects/applab/SMvVhgBX_GGyxg5LSEMrgg\"
        target=\"_blank\">Beispiel Abenteuer App</a>, damit du sehen kannst, wie es
        funktioniert. Hier sind einige Ideen, die Dir helfen, Deine eigene Geschichte
        zu erfinden.\n\n<li>Mache ein Abenteuer über Deinen Lieblingscharakter, real
        oder fiktiv.</li>\n<li>Mache ein Abenteuer, das die Geschichte Deines Lieblingsbuchs,
        Deines Lieblingsfilms oder Deiner eigenen Kreation erzählt.</li>\n<li>Mache
        eine Abenteuer, das eine Menge unerwarteter Wendungen oder eine schwierige
        moralische Frage hat.</li>\n<br>\n</details>\n\n<details><summary><b>Grußkarten
        Ideen</b></summary>\n\nProbiere diese <a href=\"https://studio.code.org/projects/applab/SM_edi1btguZZiQaTtUT9Q\"
        target=\"_blank\">Beispiel Grußkarten App</a> aus, damit du sehen kannst,
        wie es funktioniert. Hier sind einige Ideen, die dir helfen, deine eigene
        Karte zu finden.\n\n<li>Denke an einen Geburtstag, Urlaub oder einen anderen
        besonderen Tag, der bevorsteht. Erstelle eine Karte zum Feiern!</li>\n<li>Erstelle
        eine Dankeschön-Karte für jemanden, den Du schätzt.</li>\n<li>Erstelle eine
        Einladung für eine bevorstehende Veranstaltung.</li>\n<br>\n</details>\n\n<details><summary><b>Persönlichkeitsquiz
        Ideen</b></summary>\n\nProbiere diese <a href=\"https://studio.code.org/projects/applab/gx21oCP10-V4GlNMlSpwdQ\"
        target=\"_blank\">Beispiel Persönlichkeitsquiz App</a> aus, damit Du sehen
        kannst, wie es funktioniert. Hier sind einige Ideen, die Dir helfen, Dein
        eigenes Quiz zu entwickeln.\n\n<li>Mache ein Quiz, das etwas vorschlägt, was
        eine Person mögen könnte, z.B. eine Mahlzeit, ein Team, ein Buch oder einen
        Ort.</li>\n<li>Mache ein Quiz, das anhand der Antworten \"die Zukunft voraussagt\".</li>\n<li>Mache
        ein Quiz, um den Menschen zu helfen, eine schwere Entscheidung zu treffen.</li>\n\n</details>"
      AppLab Intro 7 - thisOrThatSetScreen: |-
        <img src="https://images.code.org/acd1acf659a2504d38ff80256d8e870f-image-1508374065550.com-crop (1).gif" style="float:right;height:200px">

        **Ziel:** Der Bildschirm wechselt auf `"rightScreen"`, wenn der Benutzer auf `"rightButton"`klickt.

        **Wie:** Füge im Code-Modus Deinem Programm ein neues `onEvent()` für die "Rechts!"-Taste hinzu. Füge dann einen `setScreen()`-Block darin ein, der die Bildschirme auf `"rightScreen"` schaltet.

        **Bist du hängen geblieben? Klicke hier:** ![expandable](https://images.code.org/64dfec0d9f9c2fc237abb90ef6a72f0e-image-1508384166252.gif)
      CDU U6 Playground Sound Board: |-
        # Sound Board 2.0

        You can now play sounds, notes, and songs! With this new knowledge, you can even turn your board into a sound board.

        In the toolbox you have all of the buzzer and led-related blocks at your disposal. See what cool stuff you can come up with!

        # Do This

        -   Use all of the button related board events (up, down), to play a unique sound or song at each event.
        -   Are there any other events you could use to play even more sounds/songs?
      CDU U6 Playground Sound Board_2018: |-
        # Sound Board 2.0

        You can now play sounds, notes, and songs! With this new knowledge, you can even turn your board into a sound board.

        In the toolbox you have all of the buzzer and led-related blocks at your disposal. See what cool stuff you can come up with!

        # Do This

        -   Use all of the button related board events (up, down), to play a unique sound or song at each event.
        -   Are there any other events you could use to play even more sounds/songs?
      CDU U6 Playground Sound Board_2019: |-
        # Sound Board 2.0

        You can now play sounds, notes, and songs! With this new knowledge, you can even turn your board into a sound board.

        In the toolbox you have all of the buzzer and led-related blocks at your disposal. See what cool stuff you can come up with!

        # Do This

        -   Use all of the button related board events (up, down), to play a unique sound or song at each event.
        -   Are there any other events you could use to play even more sounds/songs?
      CSD Problem Solving Process Video: |-
        ## Zu berücksichtigende Fragen

        -   Wie hast du den Problemlösungsprozess in der letzten Lektion verfolgt?
        -   Wie kannst du diesen Prozess bei einem Problem in deinem Alltag anwenden?
      CSD U1 - PixFilter 1x1 intro: |-
        # 3 Bit Farben

        Jedes Pixel ist ein Quadrat auf einem Bildschirm, das Licht aussendet. Jedem Pixel kann eine bestimmte Anzahl von Bits zugeordnet sein, und Bits pro Pixel bestimmen die Farben, die gerendert werden können.

        In diesem Tool verwenden wir 3 Bit, um den einen großen schwarzen Pixel zu definieren. Das erste Bit beeinflusst den Rot-Ton. Das zweite Bit beeinflusst den Grünton. Das dritte Bit beeinflusst den Blauton.

        # Mache folgendes

        -   Klicke auf die Schaltfläche "Ausführen", um das Widget zu starten
        -   Klicke auf die Glühbirnen, um jede Farbe ein- oder auszuschalten und zu sehen, was mit Deinem Pixel passiert
        -   Schaue wie viele verschiedene Farben du mit nur drei Bits darstellen kannst
        -   Notiere dir die Binärdatei, die jeder Farbe zugeordnet ist, die du dir ausdenkst
      CSD U1 - PixFilter Filter Intro: |-
        # Pixel filtern

        Wenn du Instagram jemals verwendet hast, bist du wahrscheinlich auf einen Bildfilter gestoßen. Bildfilter lesen in jedem Pixel ein, verarbeiten es in irgendeiner Weise und geben das gefilterte Pixel zurück. In diesem Tool werden wir zunächst nur einen einzelnen Pixel filtern, bevor wir zu einem vollständigen Bild übergehen.

        # Mach folgendes

        -   Versuche, die Farbabweichungen im Filterbereich zu ändern
        -   Klicke auf die obere Glühlampenreihe im Abschnitt Diagramm, um zu sehen, wie der Filter den Eingang (obere Glühlampen) in den Ausgang (untere Glühlampen) umwandelt
        -   Schaue Dir an, wie die Zahlen im Binärbereich Änderungen der Farben widerspiegeln
        -   Basierend darauf, wie sich die Bits ändern, kannst du formulieren, was Ersetzen bedeutet? Sprich mit deinem Partner und schau, ob du es herausfinden kannst
        -   Füllen anschließend die Tabelle Level 2 in Ihrem Aktivitätsleitfaden aus
      CSD U1 - PixFilter Filter Revisit: |-
        # Kombinieren von Filtern

        Jetzt, da du mit der Filterung eines einzelnen Farbkanals gespielt hast, ist es an der Zeit zu sehen, was passiert, wenn wir mehr als eine Farbe filtern.

        # Mach folgendes

        -   Erstelle mithilfe der Farb-Dropdowns im Filterbereich einen Filter, der den Wert von mehr als einem Farbkanal ändert
        -   Klicke auf die obere Glühlampenreihe im Abschnitt Diagramm, um zu sehen, wie der Filter den Eingang (obere Glühlampen) in den Ausgang (untere Glühlampen) umwandelt
        -   Schau Dir an, wie die Zahlen im Binärbereich Änderungen der Farben widerspiegeln
        -   Fülle die Tabelle Level 4 in Deinem Aktivitätsleitfaden aus
      CSD U1 - PixFilter FreePlay: |-
        # Freies Spiel

        Tu, was du willst, mach etwas Fantastisches
      CSD U1 - PixFilter Mario: |-
        # Kombinieren von Filtern

        Manchmal müssen Sie mehr als ein Pixel filtern, um die gewünschte Farbänderung zu erhalten.

        # Mach folgendes

        Schau dir Mario an, er sieht ziemlich gut aus in seinem roten Hut und seinem Overall. Deine Aufgabe ist es, den Filter so aufzustellen, dass er wie Luigi aussieht, mit einem grünen Hut und Overall.

        -   Bestimme zunächst, welche Bit(s) geändert werden müssen, um die gewünschte Änderung zu erhalten.
        -   Sobald du herausgefunden hast, welches Bit geändert werden muss, stelle das Dropdown-Menü für den Filter entsprechend ein.
        -   Nachdem du den Filter eingestellt wurde, versuche, andere Filter zu finden, die _nur_ seinen Hut und seinen Overall ändern - wie viele verschiedene Kleidungsfarben kannst du dir ausdenken?

        _Wie viele Versuche hat es gedauert, bis du den richtigen Filter gefunden hast?_
      CSD U1 - PixFilter Mushroom: |-
        # Bilder filtern

        Nachdem wir nun gesehen haben, wie ein einzelnes Pixel gefiltert werden kann, um dessen Farbe zu ändern, versuchen wir nun, einen Filter auf ein gesamtes Bild anzuwenden, das aus mehreren Pixeln besteht. Der von Dir erstellte Filter wird auf jedes Pixel im Bild angewendet - und du hast immer noch die Glühbirnen zur Verfügung, um zu experimentieren, wie Dein Filter mit einzelnen Farben funktioniert.

        # Mach folgendes

        Hier ist ein Bild eines roten Pilzes - du sollst versuchen, ihn in einen gelben Pilz zu verwandeln.

        -   Bestimme zunächst, welches Bit geändert werden muss, um Rot in Gelb zu verwandeln
        -   Sobald du herausgefunden hast, welches Bit geändert werden muss, verwende die Filter-Dropdowns, um alle roten Bereiche gelb zu machen
        -   Nachdem der Filter so funktioniert, dass das Rot gelb geworden ist kannst du schauen, ob du mit ein Filtern erstellen kannst, das den Pilz in einer andere Farben erstrahlen lässt

        _Wie viele Versuche hat es gedauert, bis du den richtigen Filter gefunden hast?_
      CSD U1 - PixFilter UnFilter: |-
        # UnFiltering

        Bitfilter können auch benutzt werden um eine Filterung rückgängig zu machen. Hier ist ein Bild eines Vogels, der aus seinen Originalfarben gefiltert wurde. Kannst du es wieder normal machen?

        # Mach folgendes

        <img src="https://images.code.org/c15636bda16e8792c59ac955332e37a5-image-1471372091393.22.56.png" style="float:right; width: 200px"/>
        So sollte unser Vogel aussehen. Verwende den Filter, um ihn wieder normal zu machen.

        -   Entscheide, welche Farben (und damit welche Bits) du ändern musst. Vielleicht musst du deine Gedanken zunächst zu Papier bringen.
        -   Sobald du weißt, welche Bits geändert werden müssen, setze das Filter-Dropdown-Menü entsprechend, um Deine Antwort zu testen.
        -   Nachdem du das Bild korrigiert hast, notieren Dir sowohl Ihren Prozess als auch Deinen endgültigen Filter im Bereich Level 6 Deines Activitätsleitfadens.

        _Wie viele Versuche hat es gedauert, bis du den richtigen Filter gefunden hast?_
      CSD U2 CSS explore CSS: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        <details>

        <summary><strong>How do I switch between files?</strong></summary>

        Click the name of the file you want to look at in the menu on the left side of the screen.

        </details>
        </div>

        # Adding Style

        This Web Lab project is using a new language to add style to the page. With a partner explore both the `index.html` and `style.css` files. Be ready to discuss the following questions.

        -   What changes is this new language making to the page?
        -   How is this language different from HTML?
        -   How are the `index.html` and `style.css` files connected?
      CSD U2 CSS explore CSS_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>How do I switch between files?</strong></summary>

        Click the name of the file you want to look at in the menu on the left side of the screen.

        </details>
        </div>

        # Adding Style

        This Web Lab project is using a new language to add style to the page. With a partner explore both the `index.html` and `style.css` files. Be ready to discuss the following questions.

        -   What changes is this new language making to the page?
        -   How is this language different from HTML?
        -   How are the `index.html` and `style.css` files connected?
      CSD U2 CSS explore CSS_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>Wie kann ich zwischen den Dateien wechseln?</strong></summary>

        Klicke im Menü auf der linken Seite des Bildschirms auf den Namen der Datei, die du ansehen möchtest.

        </details>
        </div>

        # Stil hinzufügen

        Dieses Web-Lab-Projekt verwendet eine neue Sprache, um der Seite einen Stil zu verleihen. Mit einem Partner kannst du sowohl die `index.html` als auch die `style.css` Dateien erkunden. Sei bereit, die folgenden Fragen zu diskutieren.

        -   Welche Änderungen macht diese neue Sprache an der Seite?
        -   Wie unterscheidet sich diese Sprache von HTML?
        -   Wie sind die Dateien `index.html` und `style.css` miteinander verbunden?
      CSD U2 Debugging 1: |-
        # Debugging

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What is a bug?</strong>
        </summary>
        Bugs are mistakes in code which causes it not to work as planned.
        </details>
        <details>
        <summary><strong>What is debugging?</strong>
        </summary>
        Debugging is the process of finding and fixing bugs.  Debugging is a problem solving process so use your problem solving steps as you try to debug.
        </details>
        <details>
        <summary><strong>What are some examples of bugs?</strong>
        </summary>

        Bugs can be anything that causes code not to work as planned.  Some examples are misspelling, putting code in the wrong place, using the wrong tag, or forgetting to close a tag.

        </details>
        </div>

        Computer code is written by humans, and all humans make mistakes. Part of being a good computer scientist is finding your mistakes and fixing them. In computer science we call mistakes **bugs**. The process of finding and fixing those bugs is called **debugging**.  Over the next couple levels you are going to work on your debugging skills.

        # Do This

        <img src="https://images.code.org/9c4d90a5a8293c5aee56e6cb81dae689-image-1500915264278.52.56 AM.png" style="float:right;border:black solid 5px;">

        -   Look at the web page code, and discuss with your partner what is causing the following two bugs:
            -   The heading is not big enough.
            -   The second item on the list doesn't have a number.
        -   Fix all the bugs in the code so that the final result matches the image on the right.
      CSD U2 Debugging 1_2018: "# Debugging\n\n<div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n\n<details>\n<summary><strong>What is a bug?</strong></summary>\nBugs
        are mistakes in code which causes it not to work as planned.\n</details>\n\n<details>\n<summary><strong>What
        is debugging?</strong></summary>\nDebugging is the process of finding and
        fixing bugs.  Debugging is a problem solving process so use your problem solving
        steps as you try to debug. \n</details>\n\n<details>\n<summary><strong>What
        are some examples of bugs?</strong></summary>\n\nBugs can be anything that
        causes code not to work as planned.  Some examples are misspelling, putting
        code in the wrong place, using the wrong tag, or forgetting to close a tag.\n\n</details>\n</div>\n\nComputer
        code is written by humans, and all humans make mistakes. Part of being a good
        computer scientist is finding your mistakes and fixing them. In computer science
        we call mistakes **bugs**. The process of finding and fixing those bugs is
        called **debugging**.  Over the next couple levels you are going to work on
        your debugging skills.\n\n# Do This\n\n<img src=\"https://images.code.org/9c4d90a5a8293c5aee56e6cb81dae689-image-1500915264278.52.56
        AM.png\" style=\"float:right;border:black solid 5px;\">\n\n-   Look at the
        web page code, and discuss with your partner what is causing the following
        two bugs:\n    -   The heading is not big enough.\n    -   The second item
        on the list doesn't have a number.\n-   Fix all the bugs in the code so that
        the final result matches the image on the right."
      CSD U2 Debugging 1_2019: "# Debugging\n\n<div class=\"no-pullthrough\" style=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n\n::: details [**Was ist ein Bug?**]\nBugs sind Fehler im
        Code, die dazu führen, dass er nicht wie geplant funktioniert.\n:::\n\n:::
        details [**Was ist debuggen?**]\nDebuggen ist der Prozess des Findens und
        Behebens von Fehlern.  Debuggen ist ein Problemlösungsprozess, also verwenden
        Sie Ihre Problemlösungsschritte, während Sie versuchen zu debuggen. \n:::\n\n:::
        details [**Was sind einige Beispiele für Bugs?**]\n\nBugs können alles sein,
        was dazu führt, dass Code nicht wie geplant funktioniert.  Einige Beispiele
        sind Rechtschreibfehler, das Einfügen von Code an der falschen Stelle, die
        Verwendung des falschen Tags oder das Vergessen, einen Tag zu schließen.\n\n:::\n\n</div>\n\nComputercode
        wird von Menschen geschrieben, und alle Menschen machen Fehler. Man ist nur
        ein guter Informatiker, wenn man es auch schafft seine Fehler zu finden und
        sie zu beheben. In der Informatik nennen wir Fehler **Bugs**. Der Prozess,
        diese Fehler zu finden und zu beheben, wird **debuggen** genannt.  In den
        nächsten Levels werden wir an Deinen Debugging-Fähigkeiten arbeiten.\n\n#
        Mach Folgendes\n\n<img src=\"https://images.code.org/9c4d90a5a8293c5aee56e6cb81dae689-image-1500915264278.52.56
        AM.png\" style=\"float:right;border:black solid 5px;\">\n\n-   Schau Dir den
        Code der Webseite an und diskutiere mit Deinem Partner, was die folgenden
        beiden Fehler verursacht:\n    -   Die Überschrift ist nicht groß genug.\n
        \   -   Der zweite Punkt auf der Liste hat keine Nummer.\n-   Behebe alle
        Fehler im Code, so dass das Endergebnis mit dem Bild rechts übereinstimmt."
      CSD U2 Debugging 2: |-
        # Debugging

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What is a bug?</strong>

        </summary>

        Bugs are mistakes in code which causes it not to work as planned.

        </details>
        <details>
        <summary><strong>What is debugging?</strong>
        </summary>

        Debugging is the process of finding and fixing bugs.  Debugging is a problem solving process so use your problem solving steps as you try to debug.

        </details>
        <details>
        <summary><strong>What are some examples of bugs?</strong>
        </summary>

        Bugs can be anything that causes code not to work as planned.  Some examples are misspelling, putting code in the wrong place, using the wrong tag, or forgetting to close a tag.

        </details>
        </div>

        More debugging practice!  This page is a little more challenging to debug than the last one.

        # Do This

        <img src="https://images.code.org/61190513dba270c731251df168b98f80-image-1474383960371.02.38 AM.png" style="float:right;border:5px black solid;width:250px">

        -   Discuss with your partner what you think the bugs are in this page.
        -   Find and fix all the bugs so that your page matches the one on the right.
      CSD U2 Debugging 2_2018: "# Debugging\n\n<div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary><strong>What is a bug?</strong></summary>\nBugs
        are mistakes in code which causes it not to work as planned.\n</details>\n\n<details>\n<summary><strong>What
        is debugging?</strong></summary>\nDebugging is the process of finding and
        fixing bugs.  Debugging is a problem solving process so use your problem solving
        steps as you try to debug. \n</details>\n\n<details>\n<summary><strong>What
        are some examples of bugs?</strong></summary>\n\nBugs can be anything that
        causes code not to work as planned.  Some examples are misspelling, putting
        code in the wrong place, using the wrong tag, or forgetting to close a tag.\n\n</details>\n</div>\n\nMore
        debugging practice!  This page is a little more challenging to debug than
        the last one.\n\n# Do This\n\n<img src=\"https://images.code.org/61190513dba270c731251df168b98f80-image-1474383960371.02.38
        AM.png\" style=\"float:right;border:5px black solid;width:250px\">\n\n-   Discuss
        with your partner what you think the bugs are in this page.\n-   Find and
        fix all the bugs so that your page matches the one on the right."
      CSD U2 Debugging 2_2019: "# Debugging\n\n<div class=\"no-pullthrough\" style=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n\n::: details [**Was ist ein Bug?**]\nBugs sind Fehler im
        Code, die dazu führen, dass er nicht wie geplant funktioniert.\n:::\n\n:::
        details [**Was ist debuggen?**]\nDebuggen ist der Prozess des Findens und
        Behebens von Fehlern.  Debuggen ist ein Problemlösungsprozess, also verwende
        Deine Problemlösungsschritte, während du versuchst zu debuggen. \n:::\n\n:::
        Details [**Was sind einige Beispiele für Bugs?**]\n\nBugs können alles sein,
        was dazu führt, dass Code nicht wie geplant funktioniert.  Einige Beispiele
        sind Rechtschreibfehler, das Einfügen von Code an der falschen Stelle, die
        Verwendung des falschen Tags oder das Vergessen, einen Tag zu schließen.\n\n:::\n\n</div>\n\nMehr
        Übung im Debugging!  Diese Seite ist ein wenig schwieriger zu debuggen als
        die letzte.\n\n# Mache Folgendes\n\n<img src=\"https://images.code.org/61190513dba270c731251df168b98f80-image-1474383960371.02.38
        AM.png\" style=\"float:right;border:5px black solid;width:250px\">\n\n-   Diskutiere
        mit Deinem Partner, was Deiner Meinung nach die Fehler auf dieser Seite sind.\n-
        \  Finde und behebe alle Fehler, so dass Deine Seite mit derjenigen auf der
        rechten Seite übereinstimmt."
      CSD U2 Debugging 3: "# Debugging\n\n<div style=\"float: right; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>What
        is a bug?</strong>\n</summary>\n\nBugs are mistakes in code which causes it
        not to work as planned.\n\n</details>\n<details>\n<summary><strong>What is
        debugging?</strong>\n</summary>\n\nDebugging is the process of finding and
        fixing bugs.  Debugging is a problem solving process so use your problem solving
        steps as you try to debug. \n\n</details>\n<details>\n<summary><strong>What
        are some examples of bugs?</strong>\n</summary>\n\nBugs can be anything that
        causes code not to work as planned.  Some examples are misspelling, putting
        code in the wrong place, using the wrong tag, or forgetting to close a tag.\n\n</details>\n<details>\n<summary><strong>Why
        does the inspector sometimes stop working?</strong>\n</summary>\n\nSometimes
        there are so many bugs in the HTML that the inspector cannot read the code
        properly and it stops working completely, even on the parts of the code that
        are correct.  Once the bugs are corrected, the inspector will work again.\n\n</details>\n</div>\n\nThis
        page has images in it. Images make finding bugs a little more tricky. Can
        you debug this page?\n\n# Do This\n\n-   Discuss with your partner what is
        causing the bugs in this page.\n-   Fix the bugs so that your page matches
        the target page shown below.\n\n![](<https://images.code.org/4a9ac71bcf6c04775df791516562cd47-image-1508779270522.56.24
        AM.png>)"
      CSD U2 Debugging 3_2018: "# Debugging\n\n<div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary>\n<strong>What is a bug?</strong>\n</summary>\nBugs
        are mistakes in code which causes it not to work as planned.\n</details>\n<details>\n<summary>\n<strong>What
        is debugging?</strong>\n</summary>\nDebugging is the process of finding and
        fixing bugs.  Debugging is a problem solving process so use your problem solving
        steps as you try to debug. \n</details>\n<details>\n<summary>\n<strong>What
        are some examples of bugs?</strong>\n</summary>\nBugs can be anything that
        causes code not to work as planned.  Some examples are misspelling, putting
        code in the wrong place, using the wrong tag, or forgetting to close a tag.\n</details>\n<details>\n<summary>\n<strong>Why
        does the inspector sometimes stop working?</strong>\n</summary>\n\nSometimes
        there are so many bugs in the HTML that the inspector cannot read the code
        properly and it stops working completely, even on the parts of the code that
        are correct.  Once the bugs are corrected, the inspector will work again.\n\n</details>\n</div>\n\nThis
        page has images in it. Images make finding bugs a little more tricky. Can
        you debug this page?\n\n# Do This\n\n-   Discuss with your partner what is
        causing the bugs in this page.\n-   Fix the bugs so that your page matches
        the target page shown below.\n\n![](<https://images.code.org/4a9ac71bcf6c04775df791516562cd47-image-1508779270522.56.24
        AM.png>)"
      CSD U2 Debugging 3_2019: "# Debuggen\n\n<div class=\"no-pullthrough\" style=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n\n::: details [**Was ist ein Bug?**]\nBugs sind Fehler im
        Code, die dazu führen, dass er nicht wie geplant funktioniert.\n:::\n\n:::
        details [**Was ist debuggen?**]\nDebuggen ist der Prozess des Findens und
        Behebens von Fehlern.  Debuggen ist ein Problemlösungsprozess, also verwende
        Deine Problemlösungsschritte, während Du versuchst zu debuggen. \n:::\n\n:::
        details [**Was sind einige Beispiele für Bugs?**]\n\nBugs können alles sein,
        was dazu führt, dass Code nicht wie geplant funktioniert.  Einige Beispiele
        sind Rechtschreibfehler, das Einfügen von Code an der falschen Stelle, die
        Verwendung des falschen Tags oder das Vergessen, einen Tag zu schließen.\n\n:::\n\n:::
        details [**Warum hört der Inspector manchmal auf zu arbeiten?**]\n\nManchmal
        gibt es so viele Fehler im HTML-Code, dass der Inspektor den Code nicht richtig
        lesen kann und er nicht mehr vollständig funktioniert, auch nicht an den richtigen
        Stellen des Codes.  Sobald die Fehler behoben sind, funktioniert der Inspektor
        wieder.\n\n:::\n\n</div>\n\nDiese Seite enthält Bilder. Bilder machen das
        Finden von Fehlern etwas schwieriger. Kannst Du diese Seite debuggen?\n\n#
        Mache Folgendes\n\n-   Besprich mit Deinem Partner, was die Fehler auf dieser
        Seite verursacht.\n-   Behebe die Fehler, sodass Deine Seite mit der unten
        gezeigten Zielseite übereinstimmt.\n\n![](<https://images.code.org/4a9ac71bcf6c04775df791516562cd47-image-1508779270522.56.24
        AM.png>)"
      CSD U2 Debugging 4: |-
        # Formatting

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What is whitespace?</strong>
        </summary>

        Whitespace refers to any character that shows up as a blank space on the screen, such as a space, a tab, or a new line. Whitespace helps separate different parts of the document to make it easier to read.  For example, in HTML code new elements are usually put on a new line, even though it doesn't make any difference in how the page is displayed.

        </details>
        <details>
        <summary><strong>What is indentation?</strong>
        </summary>

        Indentation is the placement of text farther to the right, or left, to separate it from surrounding text.  Indentation helps to convey the program's structure.  In HTML, elements that are inside other elements are usually indented.  Here is an example:

        <pre>
           &lt;body&gt;
              &lt;p&gt;This paragraph is inside the "body" element.&lt;/p&gt;
           &lt;/body&gt;
        </pre>

        </details>
        <details>
        <summary><strong>What is formatting?</strong>
        </summary>

        Formatting is arranging text in a way that makes it easier to understand.  HTML is usually formatted using indentation.  That means that elements that are inside other elements are further to the right in code.  Here is an example:

        <pre>
           &lt;body&gt;
              &lt;p&gt;This paragraph is inside the "body" element.&lt;/p&gt;
           &lt;/body&gt;
        </pre>

        </details>
        <details>
        <summary><strong>Why does the inspector sometimes stop working?</strong>
        </summary>

        Sometimes there are so many bugs in the HTML that the inspector cannot read the code properly and it stops working completely, even on the parts of the code that are correct.  Once the bugs are corrected, the inspector will work again.

        </details>
        </div>

        The way that you write your code can make it easier or harder to find bugs.  If you use **whitespace** and **indentation**, it will make it easier to read and easier to fix.

        # Do This

        -   Look at the code with your partner and discuss how you should format the code to make it easier to read.
        -   Make the code easier to read by adding new lines and indentation.
        -   Fix all the bugs so that your page matches the target page below.

        ![](<https://images.code.org/7e194db101f71235340fc075bf09776c-image-1508777739384.46.13 AM.png>)
      CSD U2 Debugging 4_2018: |-
        # Formatting

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What is whitespace?</strong></summary>
        Whitespace refers to any character that shows up as a blank space on the screen, such as a space, a tab, or a new line. Whitespace helps separate different parts of the document to make it easier to read.  For example, in HTML code new elements are usually put on a new line, even though it doesn't make any difference in how the page is displayed.
        </details>
        <details>
        <summary><strong>What is indentation?</strong></summary>
        Indentation is the placement of text farther to the right, or left, to separate it from surrounding text.  Indentation helps to convey the program's structure.  In HTML, elements that are inside other elements are usually indented.  Here is an example:
        <pre>
           &lt;body&gt;
              &lt;p&gt;This paragraph is inside the "body" element.&lt;/p&gt;
           &lt;/body&gt;
        </pre>
        </details>
        <details>
        <summary><strong>What is formatting?</strong></summary>
        Formatting is arranging text in a way that makes it easier to understand.  HTML is usually formatted using indentation.  That means that elements that are inside other elements are further to the right in code.  Here is an example:
        <pre>
           &lt;body&gt;
              &lt;p&gt;This paragraph is inside the "body" element.&lt;/p&gt;
           &lt;/body&gt;
        </pre>
        </details>
        <details>
        <summary><strong>Why does the inspector sometimes stop working?</strong></summary>

        Sometimes there are so many bugs in the HTML that the inspector cannot read the code properly and it stops working completely, even on the parts of the code that are correct.  Once the bugs are corrected, the inspector will work again.

        </details>
        </div>

        The way that you write your code can make it easier or harder to find bugs.  If you use **whitespace** and **indentation**, it will make it easier to read and easier to fix.

        # Do This

        -   Look at the code with your partner and discuss how you should format the code to make it easier to read.
        -   Make the code easier to read by adding new lines and indentation.
        -   Fix all the bugs so that your page matches the target page below.

        ![](<https://images.code.org/7e194db101f71235340fc075bf09776c-image-1508777739384.46.13 AM.png>)
      CSD U2 Debugging 4_2019: |-
        # Formatting

        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        ::: details [**What is whitespace?**]
        Whitespace refers to any character that shows up as a blank space on the screen, such as a space, a tab, or a new line. Whitespace helps separate different parts of the document to make it easier to read.  For example, in HTML code new elements are usually put on a new line, even though it doesn't make any difference in how the page is displayed.
        :::

        ::: details [**What is indentation?**]
        Indentation is the placement of text farther to the right, or left, to separate it from surrounding text.  Indentation helps to convey the program's structure.  In HTML, elements that are inside other elements are usually indented.  Here is an example:

               <body>
                  <p>This paragraph is inside the "body" element.</p>
               </body>

        :::

        ::: details [**What is formatting?**]
        Formatting is arranging text in a way that makes it easier to understand.  HTML is usually formatted using indentation.  That means that elements that are inside other elements are further to the right in code.  Here is an example:

               <body>
                  <p>This paragraph is inside the "body" element.</p>
               </body>

        :::

        ::: details [**Why does the inspector sometimes stop working?**]

        Sometimes there are so many bugs in the HTML that the inspector cannot read the code properly and it stops working completely, even on the parts of the code that are correct.  Once the bugs are corrected, the inspector will work again.

        :::

        </div>

        The way that you write your code can make it easier or harder to find bugs.  If you use **whitespace** and **indentation**, it will make it easier to read and easier to fix.

        # Do This

        -   Look at the code with your partner and discuss how you should format the code to make it easier to read.
        -   Make the code easier to read by adding new lines and indentation.
        -   Fix all the bugs so that your page matches the target page below.

        ![](<https://images.code.org/7e194db101f71235340fc075bf09776c-image-1508777739384.46.13 AM.png>)
      CSD U2 HTML Adding Paragraphs: |-
        # Add Text to the Body

        When you start any Web Lab project, it will automatically add `<!DOCTYPE>`, `<html>`, `<head>`, and `<body>` tags to your project. When you add content to your projects, you'll need to do it between the `<body>` and `</body>` tags because it should be part of the body of your webpage.

        # Do This

        -   Write three separate sentences about any topic you like inside of the body tags of your web page.
        -   Hit "Refresh and Save" if you don't see the changes in the preview area.
        -   Compare your work with a neighbor. Make sure you're placing code in the same place.
      CSD U2 HTML Adding Paragraphs pt 2: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What is a paragraph element?</strong></summary>

        Paragraphs are marked by opening(`<p>`) and closing(`</p>`) tags. Paragraphs in HTML can be any length of text from one word to a bunch of sentences. Paragraphs group together sets of sentences and put some space between that group of text and the next group of text.

        </details>
        <details>
        <summary><strong>How do I make multiple paragraphs?</strong>
        </summary>

        Here's an example of several paragraph tags in a row. This code would be placed inside of the body of your web page.

            <p>This is a paragraph. It has two sentences.</p>
            <p>This is another paragraph.</p>

        </details>
        </div>

        # Use Paragraph Tags

        The `<p>` tag or "paragraph" tag is placed around text to indicate that it is part of a paragraph. Placing text in a paragraph tag lets the computer know that it should be displayed differently, usually just by spacing it out from other text.

        # Do This

        -   Place the text you just wrote inside at least two separate paragraphs by surrounding it with `<p>` and `</p>` tags
        -   Compare the results with a neighbor. What has changed about the way your text is displayed?
      CSD U2 HTML Adding Paragraphs pt 2_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        **What is a paragraph element?**

        </summary>

        Paragraphs are marked by opening(`<p>`) and closing(`</p>`) tags. Paragraphs in HTML can be any length of text from one word to a bunch of sentences. Paragraphs group together sets of sentences and put some space between that group of text and the next group of text.

        </details>
        <details>
        <summary>

        **How do I make multiple paragraphs?**

        </summary>

        Here's an example of several paragraph tags in a row. This code would be placed inside of the body of your web page.

            <p>This is a paragraph. It has two sentences.</p>
            <p>This is another paragraph.</p>

        </details>
        </div>

        # Use Paragraph Tags

        The `<p>` `</p>` tags or "paragraph" start and end tags are placed around text to indicate that it is part of a paragraph. Placing text between paragraph start and end tags lets the computer know that it should be displayed differently, usually just by spacing it out from other text.

        # Do This

        -   Place the text you just wrote inside at least two separate paragraphs by surrounding it with `<p>` and `</p>` tags
        -   Compare the results with a neighbor. What has changed about the way your text is displayed?
      CSD U2 HTML Adding Paragraphs pt 2_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        ::: details [**Was ist ein Absatzelement?**]

        Absätze werden durch Öffnen (`<p>`) und Schließen (`</p>`) von Tags gekennzeichnet. Absätze in HTML können eine beliebige Länge des Textes von einem Wort bis zu einer Reihe von Sätzen sein. Absätze gruppieren Sätze und setzen etwas Abstand zwischen dieser Textgruppe und der nächsten Textgruppe.

        :::

        ::: details [**Wie mache ich mehrere Absätze?**]

        Hier ist ein Beispiel für mehrere Absatz-Tags in einer Reihe. Dieser Code wird in den Body der Webseite eingefügt.

            <p>This is a paragraph. It has two sentences.</p>
            <p>This is another paragraph.</p>

        :::

        </div>

        # Absatz Tags verwenden

        Die `<p>` `</p>` Tags oder "paragraph" Start- und End-Tags werden um den Text herum platziert, um anzuzeigen, dass er Teil eines Absatzes ist. Das Platzieren von Text zwischen Absatz- und End-Tags lässt den Computer wissen, dass er anders behandelt werden sollte, oft nur mit einem Abstand zu anderen Texten.

        # Mache Folgendes

        -   Platziere den Text, den du gerade geschrieben hast, in mindestens zwei separaten Absätzen, indem du ihn mit `<p>` und `</p>` Tags umgibst.
        -   Vergleiche die Ergebnisse mit einem Nachbarn. Was hat sich an der Art und Weise, wie der Text angezeigt wird, geändert?
      CSD U2 HTML Adding Paragraphs_2018: |-
        # Add Text to the Body

        When you start any Web Lab project, it will automatically add `<!DOCTYPE>`, `<html>`, `<head>`, and `<body>` tags to your project. When you add content to your projects, you'll need to do it between the `<body>` and `</body>` tags because it should be part of the body of your webpage.

        # Do This

        -   Write three separate sentences about any topic you like inside of the body tags of your web page.
        -   Hit "Refresh and Save" if you don't see the changes in the preview area.
        -   Compare your work with a neighbor. Make sure you're placing code in the same place.
      CSD U2 HTML Adding Paragraphs_2019: |-
        # Add Text to the Body

        When you start any Web Lab project, it will automatically add `<!DOCTYPE>`, `<html>`, `<head>`, and `<body>` tags to your project. When you add content to your projects, you'll need to do it between the `<body>` and `</body>` tags because it should be part of the body of your webpage.

        # Do This

        -   Write three separate sentences about any topic you like inside of the body tags of your web page.
        -   Hit "Refresh and Save" if you don't see the changes in the preview area.
        -   Compare your work with a neighbor. Make sure you're placing code in the same place.
      CSD U2 HTML Debug Paragraphs: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What is a paragraph element?</strong>
        </summary>
        Paragraphs are marked by opening( `<p>` ) and closing( `</p>` ) tags. Paragraphs in HTML can be any length of text from one word to a bunch of sentences. Paragraphs group together sets of sentences and put some space between that group of text and the next group of text.
        </details>
        <details>
        <summary>
        <strong>Why does HTML seem to work even when it's broken?</strong>
        </summary>
        HTML is read by your web browser to generate web pages. Since people often make little mistakes when writing their web pages, browsers are programmed to make a best guess of what you intended to do. Sometimes different browsers are even programmed to make different guesses! The only way to ensure your code looks like you intend is make sure you're always using tags correctly.
        </details>
        <details>
        <summary>
        <strong>Why does the code sometimes turn pink?</strong>
        </summary>

        Web Lab is programmed to automatically detect some mistakes in HTML.  When it notices a mistake, it turns that code pink.  The mistake might be in pink, or it might be somewhere before the pink code.  You'll need to carefully debug to find your mistake.

        </details>
        </div>

        # Debug: Fix the Broken Tags

        This simple web page has some issues which are preventing the content from being displayed correctly. Identify and fix the issues. This practice is also called "debugging" your code.

        # Do This

        -   Fix the broken code so that the web page displays correctly
        -   Compare the problems you fixed with a neighbor
      CSD U2 HTML Debug Paragraphs_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        <strong>What is a paragraph element?</strong>

        </summary>

        Paragraphs are marked by opening( `<p>` ) and closing( `</p>` ) tags. Paragraphs in HTML can be any length of text from one word to a bunch of sentences. Paragraphs group together sets of sentences and put some space between that group of text and the next group of text.

        </details>
        <details>
        <summary>

        <strong>Why does HTML seem to work even when it's broken?</strong>

        </summary>

        HTML is read by your web browser to generate web pages. Since people often make little mistakes when writing their web pages, browsers are programmed to make a best guess of what you intended to do. Sometimes different browsers are even programmed to make different guesses! The only way to ensure your code looks like you intend is make sure you're always using tags correctly.

        </details>
        <details>
        <summary>

        <strong>Why does the code sometimes turn pink?</strong>

        </summary>

        Web Lab is programmed to automatically detect some mistakes in HTML.  When it notices a mistake, it turns that code pink.  The mistake might be in pink, or it might be somewhere before the pink code.  You'll need to carefully debug to find your mistake.

        </details>
        </div>

        # Debug: Fix the Broken Tags

        This simple web page has some issues which are preventing the content from being displayed correctly. Identify and fix the issues. This practice is also called "debugging" your code.

        # Do This

        -   Fix the broken code so that the web page displays correctly
        -   Compare the problems you fixed with a neighbor
      CSD U2 HTML Debug Paragraphs_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**Was ist ein Absatzelement?**]

        Absätze werden durch öffnende ( `<p>` ) und schließende ( `</p>`) Tags gekennzeichnet. Absätze in HTML können eine beliebige Länge des Textes von einem Wort bis zu einer Reihe von Sätzen sein. Absätze gruppieren Sätze und setzen etwas Abstand zwischen dieser Textgruppe und der nächsten Textgruppe.

        :::

        Details[**Warum scheint HTML zu funktionieren, auch wenn es kaputt ist?**]

        HTML wird von Ihrem Webbrowser gelesen, um Webseiten zu generieren. Da Menschen beim Schreiben ihrer Webseiten oft kleine Fehler machen, sind Browser so programmiert, dass sie genau erraten, was Sie vorhaben. Manchmal sind sogar verschiedene Browser programmiert, um unterschiedliche Vermutungen anstellen zu können! Der einzige Weg, um sicherzustellen, dass Ihr Code so aussieht, wie Sie es beabsichtigen, ist sicherzustellen, dass Sie immer die richtigen Tags verwenden.

        :::

        :::: details [**Warum wird der Code manchmal rosa?**]

        Web Lab ist so programmiert, dass es automatisch einige Fehler in HTML erkennt.  Wenn es einen Fehler bemerkt, wird dieser Code rosa.  Der Fehler kann in rosa sein, oder er kann irgendwo vor dem rosa Code liegen.  Sie müssen sorgfältig debuggen, um Ihren Fehler zu finden.

        :::

        </div>

        # Debuggen: Reparieren der beschädigten Tags

        Diese einfache Webseite hat einige Probleme, die verhindern, dass der Inhalt korrekt angezeigt wird. Identifizieren und beheben Sie die Probleme. Diese Vorgehensweise wird auch als "Debugging" Ihres Codes bezeichnet.

        # Mache Folgendes

        -   Behebe den defekten Code, damit die Webseite korrekt angezeigt wird.
        -   Vergleiche die Probleme die du behoben hast mit deinem Nachbarn
      CSD U2 Heading Demo: "# Headings\n\n<div style=\"float: right; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>What
        are headings?</strong></summary>\n\nHeadings are the different sized section
        titles throughout a web page. Headings add structure to your web page by breaking
        it up so its easier for a user to read.\n\n</details>\n<details>\n<summary><strong>How
        do I make different sized headings?</strong></summary>\n\nHeadings come in
        6 different sizes. So far you have primarily used the biggest one: \\<h1>.
        The number '1' in the HTML tag designates that this is the biggest heading.
        The smallest heading is \\<h6>. You can also try the \\<h2>, \\<h3>, \\<h4>,
        and \\<h5> tags, which get smaller as the number gets larger.\n\n</h1>\n</details>\n<details>\n<summary><strong>What
        is HTML?</strong></summary>\n\nHTML stands for Hypertext Markup Language.
        HTML is used to add structure to the content of a web page. HTML uses tags
        to specify where certain structures start and end. These tags are sets of
        characters not found in the English language so that the content and structure
        can be differentiated. \n\n</details>\n<details>\n<summary><strong>What is
        an HTML element?</strong></summary>\n\nAn HTML element is a piece of a website
        that is marked by a start tag and sometimes closed with an end tag. The element
        also includes the content inside the tags. For example: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"
        style=\"width:500px\">\n\n</details>\n<details>\n<summary><strong>What is
        an HTML tag?</strong></summary>\n\nAn HTML tag is the special set of characters
        that tells the machine where the start or end of an HTML element is and what
        type it is.\n\n</details>\n</div>\n\nSo far, you've organized your content
        into paragraphs.  Another way HTML allows you to organize your code is by
        using **headings**.  A heading is a short piece of text that goes at the top
        of a section of content, like a title.\n\nDo This:\n\n-   Find the headings
        in the web page below and use the Inspector Tool to see the code that makes
        them.\n-   Make sure you and your partner agree on what the tags do.\n-   Change
        the code so that \"Drawing\" and \"2 years\" match the headings on the rest
        of the page."
      CSD U2 Heading Demo_2018: "# Headings\n\n<div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary>\n\n**What are headings?**\n\n</summary>\nHeadings
        are the different sized section titles throughout a web page. Headings add
        structure to your web page by breaking it up so its easier for a user to read.\n</details>\n<details>\n<summary>\n\n**How
        do I make different sized headings?**\n\n</summary>\nHeadings come in 6 different
        sizes. So far you have primarily used the biggest one: &lt;h1&gt;. The number
        '1' in the HTML tag designates that this is the biggest heading. The smallest
        heading is &lt;h6&gt;. You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;,
        and &lt;h5&gt; tags, which get smaller as the number gets larger.\n</h1>\n</details>\n<details>\n<summary>\n\n**What
        is HTML?**\n\n</summary>\nHTML stands for Hypertext Markup Language. HTML
        is used to add structure to the content of a web page. HTML uses tags to specify
        where certain structures start and end. These tags are sets of characters
        not found in the English language so that the content and structure can be
        differentiated. \n</details>\n<details>\n<summary>\n\n**What is an HTML element?**\n\n</summary>\nAn
        HTML element is a piece of a website that is marked by a start tag and sometimes
        closed with an end tag. The element also includes the content inside the tags.
        For example: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"
        style=\"width:500px\">\n</details>\n<details>\n<summary>\n\n**What is an HTML
        tag?**\n\n</summary>\n\nAn HTML tag is the special set of characters that
        tells the machine where the start or end of an HTML element is and what type
        it is.\n\n</details>\n</div>\n\nSo far, you've organized your content into
        paragraphs.  Another way HTML allows you to organize your code is by using
        **headings**.  A heading is a short piece of text that goes at the top of
        a section of content, like a title.\n\nDo This:\n\n-   Find the headings in
        the web page below and use the Inspector Tool to see the code that makes them.\n-
        \  Make sure you and your partner agree on what the tags do.\n-   Change the
        code so that \"Drawing\" and \"2 years\" match the headings on the rest of
        the page."
      CSD U2 Heading Demo_2019: "# Überschriften\n\n<div class=\"no-pullthrough\"
        style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px\">\n\n::: Details [**Was sind Überschriften?**]\nÜberschriften
        sind die unterschiedlich großen Abschnittsüberschriften auf einer Webseite.
        Überschriften fügen Deiner Webseite Struktur hinzu, indem der Text aufgebrochen
        wird, so dass dieser für einen Benutzer einfacher zu lesen ist.\n:::\n\n::::
        details [**Wie mache ich unterschiedlich große Überschriften?**]\nDie Überschriften
        sind in 6 verschiedenen Größen erhältlich. Bisher hast du in erster Linie
        die Größte verwendet: `<h1>`. Die Zahl '1' im HTML-Tag gibt an, dass dies
        die größte Überschrift ist. Die kleinste Überschrift ist `<h6>`. Du kannst
        auch die Tags `<h2>`, `<h3>`, `<h4>` und `<h5>` ausprobieren, die kleiner
        werden, wenn die Zahl größer wird.\n:::\n\n:::: details [**Was ist HTML?**]\nHTML
        steht für Hypertext Markup Language. HTML wird verwendet, um den Inhalt einer
        Webseite zu strukturieren. HTML verwendet Tags, um anzugeben, wo bestimmte
        Strukturen beginnen und enden. Diese Tags sind Zeichensätze, die nicht in
        der englischen Sprache vorkommen, so dass Inhalt und Struktur unterschieden
        werden können. \n:::\n\n::: details [**Was ist ein HTML-Element?**]\nEin HTML-Element
        ist ein Teil einer Website, das durch ein Start-Tag gekennzeichnet ist und
        manchmal mit einem End-Tag geschlossen wird. Das Element beinhaltet auch den
        Inhalt innerhalb der Tags. Zum Beispiel: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"
        style=\"width:500px\">\n:::\n\n:::: details [**Was ist ein HTML-Tag?**]\n\nEin
        HTML-Tag ist der spezielle Zeichensatz, der der Maschine mitteilt, wo der
        Anfang oder das Ende eines HTML-Elements ist und welcher Typ es ist.\n\n:::\n\n</div>\n\nBisher
        hast Du Deine Inhalte in Absätze unterteilt.  Eine weitere Möglichkeit, wie
        HTML es Dir ermöglicht, den Code zu organisieren, ist die Verwendung von **Überschriften**.
        \ Eine Überschrift ist ein kurzer Text, der wie ein Titel an den Anfang eines
        Inhaltsabschnitts gestellt wird.\n\n# Mache Folgendes:\n\n-   Finde die Überschriften
        auf der Webseite unten und verwende das Inspektor-Tool, um den Code zu sehen,
        aus dem sie bestehen.\n-   Stelle sicher, dass du und Dein Partner sich darüber
        einig seid, was die Tags bewirken.\n-   Ändere den Code so, dass \"Zeichnung\"
        und \"2 Jahre\" mit den Überschriften auf der restlichen Seite übereinstimmen."
      CSD U2 Heading Sizes: "# Heading Sizes\n\n<div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary>\n<strong>What are headings?</strong>\n\n</summary>\nHeadings
        are the different sized section titles throughout a web page. Headings add
        structure to your web page by breaking it up so its easier for a user to read.\n</details>\n<details>\n<summary><strong>How
        do I make different sized headings?</strong>\n\n</summary>\nHeadings come
        in 6 different sizes.  The most common heading is &lt;h1&gt; The number 1
        in the HTML tag designates that this is the biggest heading. The smallest
        heading is &lt;h6&gt;. You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;,
        and &lt;h5&gt; tags which get smaller as the number gets larger.\n</details>\n<details>\n<summary><strong>What
        is HTML?</strong>\n\n</summary>\nHTML stands for Hypertext Markup Language.
        HTML is used to add structure to the content of a web page. HTML uses tags
        to specify where certain structures start and end. These tags are sets of
        characters not found in the English language so that the content and structure
        can be differentiated. \n</details>\n<details>\n<summary><strong>What is an
        HTML element?</strong>\n\n</summary>\nAn HTML element is a piece of a website
        that is marked by a start tag and sometimes closed with an end tag. The element
        also includes the content inside the tags. For example: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"
        style=\"width:500px\">\n</details>\n<details>\n<summary><strong>What is an
        HTML tag?</strong>\n\n</summary>\n\nAn HTML tag is the special set of characters
        that tells the machine where the start or end of an HTML element is and what
        type it is.\n\n</details>\n</div>\n\nHeadings can come in different sizes.
        \ In this page, there are six different sized headings, but they are all mixed
        up.  Can you and your partner figure out how to fix them?\n\nDo This:\n\n-
        \  Use the inspector tool to figure out what makes the headings different
        sizes\n-   Make sure you and your partner agree on what the different heading
        tags do.\n-   Change the tags so that the headings are in order from biggest
        to smallest, and the text says the correct size, as in the picture below.
        \n\n<img src=\"https://images.code.org/762022f97a355dd63dce5ecc8d0127aa-image-1493161154608.58.15
        PM.png\" style=\"width:100px; float:left\">"
      CSD U2 Heading Sizes_2018: "# Heading Sizes\n\n<div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary>\n\n**What are headings?**\n\n</summary>\nHeadings
        are the different sized section titles throughout a web page. Headings add
        structure to your web page by breaking it up so its easier for a user to read.\n</details>\n<details>\n<summary>\n\n**How
        do I make different sized headings?**\n\n</summary>\nHeadings come in 6 different
        sizes.  The most common heading is &lt;h1&gt; The number 1 in the HTML tag
        designates that this is the biggest heading. The smallest heading is &lt;h6&gt;.
        You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, and &lt;h5&gt; tags
        which get smaller as the number gets larger.\n</details>\n<details>\n<summary>\n\n**What
        is HTML?**\n\n</summary>\nHTML stands for Hypertext Markup Language. HTML
        is used to add structure to the content of a web page. HTML uses tags to specify
        where certain structures start and end. These tags are sets of characters
        not found in the English language so that the content and structure can be
        differentiated. \n</details>\n<details>\n<summary>\n\n**What is an HTML element?**\n\n</summary>\nAn
        HTML element is a piece of a website that is marked by a start tag and sometimes
        closed with an end tag. The element also includes the content inside the tags.
        For example: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"
        style=\"width:500px\">\n</details>\n<details>\n<summary>\n\n**What is an HTML
        tag?**\n\n</summary>\n\nAn HTML tag is the special set of characters that
        tells the machine where the start or end of an HTML element is and what type
        it is.\n\n</details>\n</div>\n\nHeadings can come in different sizes.  In
        this page, there are six different sized headings, but they are all mixed
        up.  Can you and your partner figure out how to fix them?\n\nDo This:\n\n-
        \  Use the inspector tool to figure out what makes the headings different
        sizes\n-   Make sure you and your partner agree on what the different heading
        tags do.\n-   Change the tags so that the headings are in order from biggest
        to smallest, and the text says the correct size, as in the picture below.
        \n\n<img src=\"https://images.code.org/762022f97a355dd63dce5ecc8d0127aa-image-1493161154608.58.15
        PM.png\" style=\"width:100px; float:left\">"
      CSD U2 Heading Sizes_2019: "# Überschriftengrößen\n\n<div class=\"no-pullthrough\"
        style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px\">\n\n::: Details [**Was sind Überschriften?**]\nÜberschriften
        sind die unterschiedlich großen Abschnittsüberschriften auf einer Webseite.
        Überschriften fügen Ihrer Webseite Struktur hinzu, indem sie den Text aufbrechen,
        so dass dieser für einen Benutzer einfacher zu lesen ist.\n:::\n\n:::: details
        [**Wie mache ich unterschiedlich große Überschriften?**]\nDie Überschriften
        sind in 6 verschiedenen Größen erhältlich.  Die häufigste Überschrift ist
        `<h1>` Die Zahl 1 im HTML-Tag bezeichnet, dass es sich um die größte Überschrift
        handelt. Die kleinste Überschrift ist `<h6>`. Du kannst auch die Tags `<h2>`,
        `<h3>`, `<h4>`, `<h4>` und `<h5>` versuchen, die mit zunehmender Anzahl kleiner
        werden.\n:::\n\n:::: details [**Was ist HTML?**]\nHTML steht für Hypertext
        Markup Language. HTML wird verwendet, um den Inhalt einer Webseite zu strukturieren.
        HTML verwendet Tags, um anzugeben, wo bestimmte Strukturen beginnen und enden.
        Diese Tags sind Zeichensätze, die nicht in der englischen Sprache vorkommen,
        so dass Inhalt und Struktur unterschieden werden können. \n:::\n\n::: details
        [**Was ist ein HTML-Element?**]\nEin HTML-Element ist ein Teil einer Website,
        das durch ein Start-Tag gekennzeichnet ist und manchmal mit einem End-Tag
        geschlossen wird. Das Element beinhaltet auch den Inhalt innerhalb der Tags.
        Zum Beispiel: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"
        style=\"width:500px\">\n:::\n\n:::: details [**Was ist ein HTML-Tag?**]\n\nEin
        HTML-Tag ist der spezielle Zeichensatz, der der Maschine mitteilt, wo der
        Anfang oder das Ende eines HTML-Elements ist und welcher Typ es ist.\n\n:::\n\n</div>\n\nÜberschriften
        können in verschiedenen Größen erhältlich sein.  Auf dieser Seite gibt es
        sechs unterschiedlich große Überschriften, die jedoch alle vertauscht sind.
        \ Kannst du und dein Partner herausfinden, wie man sie repariert?\n\nMache
        Folgendes:\n\n-   Verwende das Inspektorwerkzeug, um herauszufinden, was die
        Überschriften zu unterschiedlichen Größen macht.\n-   Stelle sicher, dass
        du und Dein Partner sich darüber einig sind, was die verschiedenen Header-Tags
        bewirken.\n-   Ändere die Tags so, dass die Überschriften in der Reihenfolge
        von groß nach klein sind, und der Text sagt die richtige Größe, wie im Bild
        unten. \n\n<img src=\"https://images.code.org/762022f97a355dd63dce5ecc8d0127aa-image-1493161154608.58.15
        PM.png\" style=\"width:100px; float:left\">"
      CSD U2 Heading Test: "# Headings and Paragraphs\n\n<div style=\"float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary><strong>What is a paragraph element?</strong>\n</summary>\n\nParagraphs
        are marked by opening(`<p>`) and closing(`</p>`) tags as well. Paragraphs
        in HTML can be any length of text from one word to a bunch of sentences. All
        of your text in your web page should be contained in an HTML element (headings
        or paragraphs). Paragraphs group together sets of sentences and put some space
        between that group of text and the next group of text.\n\n</details>\n<details>\n<summary><strong>How
        do I create multiple paragraphs?</strong>\n</summary>\n\nParagraphs are marked
        by opening(`<p>`) and closing(`</p>`) tags as well. To create more than one
        paragraph you will want multiple sets of opening and closing `<p>` tags. For
        example\n\n<pre>\n&lt;p&gt;\n  This is a paragraph.\n&lt;/p&gt;\n&lt;p&gt;\n
        \ This is another paragraph.\n&lt;/p&gt;\n</pre>\n\n</details>\n<details>\n<summary><strong>What
        are headings?</strong>\n</summary>\n\nHeadings are the different sized section
        titles throughout a web page. Headings add structure to your web page by breaking
        it up so its easier for a user to read.\n\n</details>\n<details>\n<summary><strong>How
        do I make different sized headings?</strong>\n</summary>\n\nHeadings come
        in 6 different sizes. So far you have primarily used the biggest one \\<h1>.
        The number 1 in the HTML tag designates that this is the biggest heading.
        The smallest heading is \\<h6>. You can also try the \\<h2>, \\<h3>, \\<h4>,
        and \\<h5> tags which get smaller as the number gets larger.\n\n</details>\n<details>\n<summary><strong>What
        is HTML?</strong>\n</summary>\n\nHTML stands for Hypertext Markup Language.
        HTML is used to add structure to the content of a web page. HTML uses tags
        to specify where certain structures start and end. These tags are sets of
        characters not found in the English language so that the content and structure
        can be differentiated. \n\n</details>\n<details>\n<summary><strong>What is
        an HTML element?</strong>\n</summary>\n\nAn HTML element is a piece of a website
        that is marked by a start tag and sometimes closed with an end tag. The element
        also includes the content inside the tags. For example:\n\n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"
        style=\"width:500px\">\n\n</details>\n<details>\n<summary><strong>What is
        an HTML tag?</strong>\n</summary>\n\nAn HTML tag is the special set of characters
        that tells the machine where the start or end of an HTML element is and what
        type it is.\n\n</details>\n</div>\n\nThe author of this page added in a lot
        of content, but did not think about structure.  All of the text is mashed
        together.\n\nDo This:\n\n-   Look through the content with your partner and
        decide what you think the best structure should be.\n-   Use your heading
        and paragraph tags to code the structure into the page."
      CSD U2 Heading Test_2018: "# Headings and Paragraphs\n\n<div style=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary><strong>What is a paragraph element?</strong></summary>\n\nParagraphs
        are marked by opening(`<p>`) and closing(`</p>`) tags as well. Paragraphs
        in HTML can be any length of text from one word to a bunch of sentences. All
        of your text in your web page should be contained in an HTML element (headings
        or paragraphs). Paragraphs group together sets of sentences and put some space
        between that group of text and the next group of text.\n\n</details>\n<details>\n<summary>\n<strong>How
        do I create multiple paragraphs?</strong>\n\n</summary>\n\nParagraphs are
        marked by opening (`<p>`) and closing (`</p>`) tags as well. To create more
        than one paragraph you will want multiple sets of opening and closing `<p>`
        tags. For example\n\n<pre>\n    &lt;p&gt;\n        This is a paragraph.\n
        \   &lt;/p&gt;\n    &lt;p&gt;\n        This is another paragraph.\n    &lt;/p&gt;\n</pre>\n\n</details>\n<details>\n<summary>\n<strong>What
        are headings?</strong>\n</summary>\nHeadings are the different sized section
        titles throughout a web page. Headings add structure to your web page by breaking
        it up so its easier for a user to read.\n</details>\n<details>\n<summary>\n<strong>How
        do I make different sized headings?</strong>\n</summary>\nHeadings come in
        6 different sizes. So far you have primarily used the biggest one &lt;h1&gt;.
        The number 1 in the HTML tag designates that this is the biggest heading.
        The smallest heading is &lt;h6&gt;. You can also try the &lt;h2&gt;, &lt;h3&gt;,
        &lt;h4&gt;, and &lt;h5&gt; tags which get smaller as the number gets larger.\n</details>\n<details>\n<summary>\n<strong>What
        is HTML?</strong>\n</summary>\nHTML stands for Hypertext Markup Language.
        HTML is used to add structure to the content of a web page. HTML uses tags
        to specify where certain structures start and end. These tags are sets of
        characters not found in the English language so that the content and structure
        can be differentiated. \n</details>\n<details>\n<summary>\n<strong>What is
        an HTML element?</strong>\n</summary>\nAn HTML element is a piece of a website
        that is marked by a start tag and sometimes closed with an end tag. The element
        also includes the content inside the tags. For example: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"
        style=\"width:500px\">\n</details>\n<details>\n<summary>\n<strong>What is
        an HTML tag?</strong>\n</summary>\n\nAn HTML tag is the special set of characters
        that tells the machine where the start or end of an HTML element is and what
        type it is.\n\n</details>\n</div>\n\nThe author of this page added in a lot
        of content, but did not think about structure.  All of the text is mashed
        together.\n\nDo This:\n\n-   Look through the content with your partner and
        decide what you think the best structure should be.\n-   Use your heading
        and paragraph tags to code the structure into the page."
      CSD U2 Heading Test_2019: "# Überschriften und Absätze\n\n<div class=\"no-pullthrough\"
        style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px\">\n\n::: details [**Was ist ein Absatzelement?**]\n\nAbsätze
        werden auch durch öffnende (`<p>`) und schließende (`</p>`) Tags gekennzeichnet.
        Absätze in HTML können eine beliebige Länge des Textes von einem Wort bis
        zu einer Reihe von Sätzen sein. Der gesamte Text auf einer Webseite sollte
        in einem HTML-Element (Überschriften oder Absätze) enthalten sein. Absätze
        gruppieren Sätze und setzen etwas Abstand zwischen dieser Textgruppe und der
        nächsten Textgruppe.\n\n:::\n\ndetails [**Wie erstelle ich mehrere Absätze?**]\n\nAbsätze
        werden durch Öffnen (`<p>`) und Schließen (`</p>`) von Tags gekennzeichnet.
        Um mehr als einen Absatz zu erstellen, benötigen Sie mehrere Sätze von öffnenden
        und schließenden `<p>` Tags. Zum Beispiel:\n\n        <p>\n            Dies
        ist ein Absatz.\n        </p>\n        <p>\n            Dies ist ein weiterer
        Absatz.\n        </p>\n\n:::\n\n::: Details [**Was sind Überschriften?**]\nÜberschriften
        sind die unterschiedlich großen Abschnittsüberschriften auf einer Webseite.
        Überschriften fügen Ihrer Webseite Struktur hinzu, indem sie den Text aufbrechen,
        so dass dieser für einen Benutzer einfacher zu lesen ist.\n:::\n\n:::: details
        [**Wie mache ich unterschiedlich große Überschriften?**]\nDie Überschriften
        sind in 6 verschiedenen Größen erhältlich. Bisher hast du in erster Linie
        das größte \\<h1> verwendet. Die Zahl 1 im HTML-Tag gibt an, dass dies die
        größte Überschrift ist. Die kleinste Überschrift ist \\<h6>. Du kannst auch
        die \\<h2>, \\<h3>, \\<h4>, \\<h4> und \\<h5> Tags ausprobieren, die kleiner
        werden, wenn die Zahl größer wird.\n:::\n\n:::: details [**Was ist HTML?**]\nHTML
        steht für Hypertext Markup Language. HTML wird verwendet, um den Inhalt einer
        Webseite zu strukturieren. HTML verwendet Tags, um anzugeben, wo bestimmte
        Strukturen beginnen und enden. Diese Tags sind Zeichensätze, die nicht in
        der englischen Sprache vorkommen, so dass Inhalt und Struktur unterschieden
        werden können. \n:::\n\n::: details [**Was ist ein HTML-Element?**]\nEin HTML-Element
        ist ein Teil einer Website, das durch ein Start-Tag gekennzeichnet ist und
        manchmal mit einem End-Tag geschlossen wird. Das Element beinhaltet auch den
        Inhalt innerhalb der Tags. Zum Beispiel: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"
        style=\"width:500px\">\n:::\n\n:::: details [**Was ist ein HTML-Tag?**]\n\nEin
        HTML-Tag ist der spezielle Zeichensatz, der der Maschine mitteilt, wo der
        Anfang oder das Ende eines HTML-Elements ist und welcher Typ es ist.\n\n:::\n\n</div>\n\nDer
        Autor dieser Seite hat eine Menge Inhalt hinzugefügt, aber nicht an die Struktur
        gedacht.  Der gesamte Text wird zusammengefügt.\n\nMache Folgendes:\n\n-   Schaue
        Dir den Inhalt mit Deinem Partner an und entscheide, was Deiner Meinung nach
        die beste Struktur sein sollte.\n-   Verwende Deine Überschriften- und Absatz-Tags,
        um die Struktur in die Seite zu kodieren."
      CSD U2 Image Tag 1: "<div style=\"float: right; height: 250px; width: 40%; overflow-y:
        scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>How
        do I add images?</strong></summary>\n\nThe `<img>` tag allows you to show
        images on your web page. <br><br>\n\nExample:\n\n<pre>&lt;img src=\"dog.png\"
        alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which
        file to use, extra information, called an **attribute**, is added to the \\<img>
        tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and
        tell the name of the image. Image files names include extensions which tell
        the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing
        tag** because it starts and closes in one tag. To mark this we put the `/`
        which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary><strong>Why
        does an image tag not have a closing tag?</strong></summary>\n\nAn image tag
        doesn't need a closing tag because there is no text content which must be
        wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\n\n</details>\n<details>\n<summary><strong>What is an
        attribute?</strong></summary>\n\nAttributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example \\<img> tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n</details>\n</div>\n\n# Images\n\nA Dog vs Cat web page has
        been started for you. The dog image has already been added to the below web
        page. Use an image tag to add the `cat.jpeg` image to the page below the cat
        heading."
      CSD U2 Image Tag 1_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How do I add images?</strong>
        </summary>

        The `<img>` tag allows you to show images on your web page. <br><br>

        Example:

        <pre>&lt;img src="dog.png" alt="dog jumping"/&gt;</pre><br><br>

        In order to tell the browser which file to use, extra information, called an **attribute**, is added to the \<img> tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and tell the name of the image. Image files names include extensions which tell the computer which type of image they are working with. Common extensions are .jpg, .jpeg, .png. <br><br>

        In addition to have the src attribute, image elements also have the `alt` attribute which describe the image. This is important in case the image doesn’t load or for people who have trouble with their eyesight. <br><br>

        An `<img>` tag is an example of a  **self-closing tag** because it starts and closes in one tag. To mark this we put the `/` which usually goes in the close tag at the end of the image tag.

        </details>
        <details>
        <summary>
        <strong>Why does an image tag not have a closing tag?</strong>
        </summary>
        An image tag doesn't need a closing tag because there is no text content which must be wrapped in tags. The content that shows on the screen is specified through the tags attributes.
        </details>
        <details>
        <summary>
        <strong>What is an attribute?</strong>
        </summary>

        Attributes are extra information included in a tag.  Attributes have names and values. The name tells what type of information is being provided and then the value gives the specific information for that tag.

        For example \<img> tags have two attributes, src and alt. src specifies the name of the image file and alt tells the browser in readable text what the image is.

        </details>
        </div>

        # Images

        A Dog vs Cat web page has been started for you. The dog image has already been added to the below web page. Use an image tag to add the `cat.jpeg` image to the page below the cat heading.
      CSD U2 Image Tag 1_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**How do I add images?**]

        The `<img>` tag allows you to show images on your web page. <br><br>

        Example:

            <img src="dog.png" alt="dog jumping">

        In order to tell the browser which file to use, extra information, called an **attribute**, is added to the <img> tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and tell the name of the image. Image files names include extensions which tell the computer which type of image they are working with. Common extensions are .jpg, .jpeg, .png. <br><br>

        In addition to have the src attribute, image elements also have the `alt` attribute which describe the image. This is important in case the image doesn’t load or for people who have trouble with their eyesight. <br><br>

        An `<img>` tag is an example of a  **self-closing tag** because it starts and closes in one tag.

        :::

        ::: details [**Why does an image tag not have a closing tag?**]
        An image tag doesn't need a closing tag because there is no text content which must be wrapped in tags. The content that shows on the screen is specified through the tags attributes.
        :::

        ::: details [**What is an attribute?**]

        Attributes are extra information included in a tag.  Attributes have names and values. The name tells what type of information is being provided and then the value gives the specific information for that tag.

        For example `<img>` tags have two attributes, src and alt. src specifies the name of the image file and alt tells the browser in readable text what the image is.

        :::

        </div>

        # Images

        A Dog vs Cat web page has been started for you. The dog image has already been added to the below web page. Look at the code that made the dog image appear, then use an image tag to add the `cat.jpeg` image to the page below the cat heading.

        This image was found at pixabay and was uploaded by the user "Alexas\_Fotos", who used a "free for commercial use" and "no attribution required" license.
      CSD U2 Image Tag 2: "<div style=\"float: right; height: 250px; width: 40%; overflow-y:
        scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>How
        do I add images?</strong></summary>\n\nThe `<img>` tag allows you to show
        images on your web page. <br><br>\n\nExample:\n\n<pre>&lt;img src=\"dog.png\"
        alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which
        file to use, extra information, called an **attribute**, is added to the \\<img>
        tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and
        tell the name of the image. Image files names include extensions which tell
        the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing
        tag** because it starts and closes in one tag. To mark this we put the `/`
        which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary><strong>Why
        does an image tag not have a closing tag?</strong></summary>\n\nAn image tag
        doesn't need a closing tag because there is no text content which must be
        wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\n\n</details>\n<details>\n<summary><strong>What is an
        attribute?</strong></summary>\n\nAttributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example \\<img> tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n</details>\n</div>\n\n# Uploading Images\n\nYou can upload
        images that you've found elsewhere using the **Add Image** button. Go find
        an image of a different type of pet that you like and download it to your
        computer (using right-click \"Save As\").\n\nOnce you have your images, click
        ![](<https://images.code.org/c35789d00e59b0dbe42879390dabf925-image-1493240590385.01.49
        PM.png>) and upload the image from your computer into your project, where
        you can then use it in your page.\n\n# Do This\n\n-   Upload at least one
        image into this web page\n-   Use the `<img>` tag to display the image(s)
        in your website.\n-   Make sure to add an `alt` attribute."
      CSD U2 Image Tag 2_2018: "<div style=\"float: right; height: 250px; width: 40%;
        overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>How
        do I add images?</strong>\n</summary>\n\nThe `<img>` tag allows you to show
        images on your web page. <br><br>\n\nExample:\n\n<pre>&lt;img src=\"dog.png\"
        alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which
        file to use, extra information, called an **attribute**, is added to the \\<img>
        tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and
        tell the name of the image. Image files names include extensions which tell
        the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing
        tag** because it starts and closes in one tag. To mark this we put the `/`
        which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary>\n<strong>Why
        does an image tag not have a closing tag?</strong>\n</summary>\nAn image tag
        doesn't need a closing tag because there is no text content which must be
        wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\n</details>\n<details>\n<summary>\n<strong>What is an
        attribute?</strong>\n</summary>\n\nAttributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example \\<img> tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n</details>\n</div>\n\n# Uploading Images\n\nYou can upload
        images that you've found elsewhere using the **Add Image** button. Go find
        an image of a different type of pet that you like and download it to your
        computer (using right-click \"Save As\").\n\nOnce you have your images, click
        ![](<https://images.code.org/c35789d00e59b0dbe42879390dabf925-image-1493240590385.01.49
        PM.png>) and upload the image from your computer into your project, where
        you can then use it in your page.\n\n# Do This\n\n-   Upload at least one
        image into this web page\n-   Use the `<img>` tag to display the image(s)
        in your website.\n-   Make sure to add an `alt` attribute."
      CSD U2 Image Tag 2_2019: "<div class=\"no-pullthrough\" style=\"float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n\n::: details [**How do I add images?**]\n\nThe `<img>` tag
        allows you to show images on your web page.\n\nExample:\n\n    <img src=\"dog.png\"
        alt=\"dog jumping\">\n\nIn order to tell the browser which file to use, extra
        information, called an **attribute**, is added to the <img> tag inside the
        brackets. The attribute `src` stands for **s**ou**rc**e and tell the name
        of the image. Image files names include extensions which tell the computer
        which type of image they are working with. Common extensions are .jpg, .jpeg,
        .png. <br><br>\n\nIn addition to have the src attribute, image elements also
        have the `alt` attribute which describe the image. This is important in case
        the image doesn’t load or for people who have trouble with their eyesight.
        <br><br>\n\nAn `<img>` tag is an example of a  **self-closing tag** because
        it starts and closes in one tag.\n:::\n\n::: details [**Why does an image
        tag not have a closing tag?**]\nAn image tag doesn't need a closing tag because
        there is no text content which must be wrapped in tags. The content that shows
        on the screen is specified through the tags attributes.\n:::\n\n::: details
        [**What is an attribute?**]\n\nAttributes are extra information included in
        a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example `<img>` tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n:::\n\n</div>\n\n# Uploading Images\n\nYou can upload images
        that you've found elsewhere using the **Add Image** button. Go find an image
        of a different type of pet that you like and download it to your computer
        (using right-click \"Save As\").\n\nOnce you have your images, click ![](<https://images.code.org/c35789d00e59b0dbe42879390dabf925-image-1493240590385.01.49
        PM.png>) and upload the image from your computer into your project, where
        you can then use it in your page.\n\n# Do This\n\n-   Upload at least one
        image into this web page\n-   Use the `<img>` tag to display the image(s)
        in your website.\n-   Make sure to add an `alt` attribute."
      CSD U2 Image Tag Attribution: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>How
        do I add images?</strong></summary>\n\nThe `<img>` tag allows you to show
        images on your web page. <br><br>\n\nExample:\n\n<pre>&lt;img src=\"dog.png\"
        alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which
        file to use, extra information, called an **attribute**, is added to the \\<img>
        tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and
        tell the name of the image. Image files names include extensions which tell
        the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing
        tag** because it starts and closes in one tag. To mark this we put the `/`
        which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary><strong>Why
        does an image tag not have a closing tag?</strong></summary>\n\nAn image tag
        doesn't need a closing tag because there is no text content which must be
        wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\n\n</details>\n<details>\n<summary><strong>What is an
        attribute?</strong></summary>\n\nAttributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example \\<img> tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n</details>\n</div>\n\n# Giving Credit\n\nWhen using a Creative
        Commons licensed image, you need to give credit to the original creator (this
        is also called _attribution_). There are lots of ways to provide attribution,
        but the easiest way is to add text below the image that identifies the creator
        and website it came from.\n\n# Do This\n\nIn this page we've already added
        and attributed an image of a frog. Use the Creative Commons search engine
        to find another image of an amphibian. Add your found image to this page,
        along with proper attribution, including:\n\n-   The name of the creator (if
        available)\n-   The website it was found on (e.g. commons.wikimedia.org)\n-
        \  The license it was published under (e.g. CC-BY)"
      CSD U2 Image Tag Attribution_2018: "<div style=\"float: right; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>How
        do I add images?</strong>\n</summary>\n\nThe `<img>` tag allows you to show
        images on your web page. <br><br>\n\nExample:\n\n<pre>&lt;img src=\"dog.png\"
        alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which
        file to use, extra information, called an **attribute**, is added to the \\<img>
        tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and
        tell the name of the image. Image files names include extensions which tell
        the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing
        tag** because it starts and closes in one tag. To mark this we put the `/`
        which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary>\n<strong>Why
        does an image tag not have a closing tag?</strong>\n</summary>\nAn image tag
        doesn't need a closing tag because there is no text content which must be
        wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\n</details>\n<details>\n<summary>\n<strong>What is an
        attribute?</strong>\n</summary>\n\nAttributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example \\<img> tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n</details>\n</div>\n\n# Giving Credit\n\nWhen using a Creative
        Commons licensed image, you need to give credit to the original creator (this
        is also called _attribution_). There are lots of ways to provide attribution,
        but the easiest way is to add text below the image that identifies the creator
        and website it came from.\n\n# Do This\n\nIn this page we've already added
        and attributed an image of a frog. Use the Creative Commons search engine
        to find another image of an amphibian. Add your found image to this page,
        along with proper attribution, including:\n\n-   The name of the creator (if
        available)\n-   The website it was found on (e.g. commons.wikimedia.org)\n-
        \  The license it was published under (e.g. CC-BY)"
      CSD U2 Image Tag Attribution_2019: "<div class=\"no-pullthrough\" style=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n\n::: details [**How do I add images?**]\n\nThe `<img>` tag
        allows you to show images on your web page. \n\nExample:\n\n    <img src=\"dog.png\"
        alt=\"dog jumping\">\n\nIn order to tell the browser which file to use, extra
        information, called an **attribute**, is added to the <img> tag inside the
        brackets. The attribute `src` stands for **s**ou**rc**e and tell the name
        of the image. Image files names include extensions which tell the computer
        which type of image they are working with. Common extensions are .jpg, .jpeg,
        .png. <br><br>\n\nIn addition to have the src attribute, image elements also
        have the `alt` attribute which describe the image. This is important in case
        the image doesn’t load or for people who have trouble with their eyesight.
        <br><br>\n\nAn `<img>` tag is an example of a  **self-closing tag** because
        it starts and closes in one tag.\n:::\n\n::: details [**Why does an image
        tag not have a closing tag?**]\nAn image tag doesn't need a closing tag because
        there is no text content which must be wrapped in tags. The content that shows
        on the screen is specified through the tags attributes.\n:::\n\n::: details
        [**What is an attribute?**]\n\nAttributes are extra information included in
        a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example `<img>` tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n:::\n\n</div>\n\n# Giving Credit\n\nWhen using a Creative
        Commons licensed image, you need to give credit to the original creator (this
        is also called _attribution_). There are lots of ways to provide attribution,
        but the easiest way is to add text below the image that identifies the creator
        and website it came from.\n\n# Do This\n\nIn this page we've already added
        and attributed an image of a frog. Use the Creative Commons search engine
        to find another image of an amphibian. Add your found image to this page,
        along with proper attribution, including:\n\n-   The name of the creator (if
        available)\n-   The website it was found on (e.g. commons.wikimedia.org)\n-
        \  The license it was published under (e.g. CC-BY)"
      CSD U2 Image Tag Debug: "<div style=\"float: right; height: 250px; width: 40%;
        overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>How
        do I add images?</strong>\n</summary>\n\nThe `<img>` tag allows you to show
        images on your web page. <br><br>\n\nExample:\n\n<pre>&lt;img src=\"dog.png\"
        alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which
        file to use, extra information, called an **attribute**, is added to the \\<img>
        tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and
        tell the name of the image. Image files names include extensions which tell
        the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing
        tag** because it starts and closes in one tag. To mark this we put the `/`
        which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary><strong>Why
        does an image tag not have a closing tag?</strong>\n</summary>\n\nAn image
        tag doesn't need a closing tag because there is no text content which must
        be wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\n\n</details>\n<details>\n<summary><strong>What is an
        attribute?</strong>\n</summary>\n\nAttributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example \\<img> tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n</details>\n</div>\n\n# The Details Matter\n\nThe `src` attribute
        needs to point to the _exact_ filename of the image you want to use. That
        means you need to pay attention to spelling, capitalization, and the file
        extension. Each of the three images on this page is broken because of an improper
        `src` attribute. Using the file menu for reference, fix each of the image
        tags.\n\n_Note: Even though the images are not loading properly, our website
        is still showing descriptive text of what should be there because we used
        `alt` attributes. Cool!_"
      CSD U2 Image Tag Debug_2018: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>How
        do I add images?</strong>\n</summary>\n\nThe `<img>` tag allows you to show
        images on your web page. <br><br>\n\nExample:\n\n<pre>&lt;img src=\"dog.png\"
        alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which
        file to use, extra information, called an **attribute**, is added to the \\<img>
        tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and
        tell the name of the image. Image files names include extensions which tell
        the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing
        tag** because it starts and closes in one tag. To mark this we put the `/`
        which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary>\n<strong>Why
        does an image tag not have a closing tag?</strong>\n</summary>\nAn image tag
        doesn't need a closing tag because there is no text content which must be
        wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\n</details>\n<details>\n<summary>\n<strong>What is an
        attribute?</strong>\n</summary>\n\nAttributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example \\<img> tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n</details>\n</div>\n\n# The Details Matter\n\nThe `src` attribute
        needs to point to the _exact_ filename of the image you want to use. That
        means you need to pay attention to spelling, capitalization, and the file
        extension. Each of the three images on this page is broken because of an improper
        `src` attribute. Using the file menu for reference, fix each of the image
        tags.\n\n_Note: Even though the images are not loading properly, our website
        is still showing descriptive text of what should be there because we used
        `alt` attributes. Cool!_"
      CSD U2 Image Tag Debug_2019: "<div class=\"no-pullthrough\" style=\"float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n\n::: details [**How do I add images?**]\n\nThe `<img>` tag
        allows you to show images on your web page.\n\nExample:\n\n    <img src=\"dog.png\"
        alt=\"dog jumping\">\n\nIn order to tell the browser which file to use, extra
        information, called an **attribute**, is added to the <img> tag inside the
        brackets. The attribute `src` stands for **s**ou**rc**e and tell the name
        of the image. Image files names include extensions which tell the computer
        which type of image they are working with. Common extensions are .jpg, .jpeg,
        .png. <br><br>\n\nIn addition to have the src attribute, image elements also
        have the `alt` attribute which describe the image. This is important in case
        the image doesn’t load or for people who have trouble with their eyesight.
        <br><br>\n\nAn `<img>` tag is an example of a  **self-closing tag** because
        it starts and closes in one tag.\n:::\n\n::: details [**Why does an image
        tag not have a closing tag?**]\nAn image tag doesn't need a closing tag because
        there is no text content which must be wrapped in tags. The content that shows
        on the screen is specified through the tags attributes.\n:::\n\n::: details
        [**What is an attribute?**]\n\nAttributes are extra information included in
        a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example `<img>` tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n:::\n\n</div>\n\n# The Details Matter\n\nThe `src` attribute
        needs to point to the _exact_ filename of the image you want to use. That
        means you need to pay attention to spelling, capitalization, and the file
        extension. Each of the three images on this page is broken because of an improper
        `src` attribute. Using the file menu for reference, fix each of the image
        tags.\n\n_Note: Even though the images are not loading properly, our website
        is still showing descriptive text of what should be there because we used
        `alt` attributes. Cool!_"
      CSD U2 Info Page Final Touches: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        <h2>
        Checklist
        </h2>

        <input type="checkbox" style="float: left"><span style="display: block; margin-left: 20px; margin-bottom: 10px">Ensure that your image is properly licensed</span>
        <input type="checkbox" style="float: left"><span style="display: block; margin-left: 20px; margin-bottom: 10px">Upload image into Web Lab</span>
        <input type="checkbox" style="float: left"><span style="display: block; margin-left: 20px; margin-bottom: 10px">Create an image tag with a descriptive alt attribute</span>
        <input type="checkbox" style="float: left"><span style="display: block; margin-left: 20px; margin-bottom: 10px">If the image isn't your own, add attribution underneath<br/>

        </div>

        # Adding Images to Your Site

        You've already created some pages with great content on your website, now you can add some images!

        # Do This

        Using either your own images or those found through a Commons Search, add some images to the pages you've already created. Get creative! Use the checklist to the right to keep track of the steps you need to follow when adding images.
      CSD U2 Info Page Final Touches_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        <h2>
        Checklist
        </h2>

        <input type="checkbox" style="float: left"><span style="display: block; margin-left: 20px; margin-bottom: 10px">Ensure that your image is properly licensed</span>
        <input type="checkbox" style="float: left"><span style="display: block; margin-left: 20px; margin-bottom: 10px">Upload image into Web Lab</span>
        <input type="checkbox" style="float: left"><span style="display: block; margin-left: 20px; margin-bottom: 10px">Create an image tag with a descriptive alt attribute</span>
        <input type="checkbox" style="float: left"><span style="display: block; margin-left: 20px; margin-bottom: 10px">If the image isn't your own, add attribution underneath<br/>

        </div>

        # Adding Images to Your Site

        You've already created some pages with great content on your website, now you can add some images!

        # Do This

        Using either your own images or those found through a Commons Search, add some images to the pages you've already created. Get creative! Use the checklist to the right to keep track of the steps you need to follow when adding images.
      CSD U2 Info Page Final Touches_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        <h2>
        Checkliste
        </h2>

        <input type="checkbox" style="float: left"><span style="display: block; margin-left: 20px; margin-bottom: 10px">Vergewissere Dich, dass Dein Bild richtig lizenziert ist</span>
        <input type="checkbox" style="float: left"><span style="display: block; margin-left: 20px; margin-bottom: 10px">Bild ins Web Lab hochladen</span>
        <input type="checkbox" style="float: left"><span style="display: block; margin-left: 20px; margin-bottom: 10px">Bild-Tag mit einem beschreibenden alt-Attribut erstellen</span>
        <input type="checkbox" style="float: left"><span style="display: block; margin-left: 20px; margin-bottom: 10px">Wenn das Bild nicht Dein eigenes ist, füge einen entsprechenden Urheberverweis<br/> hinzu

        </div>

        # Bilder zu Deiner Website hinzufügen

        Du hast bereits einige Seiten mit großartigem Inhalt auf Deiner Website erstellt, jetzt kannst Du einige Bilder hinzufügen!

        # Mache Folgendes

        Verwende entweder Deine eigenen Bilder oder solche, die durch eine Commons-Suche gefunden wurden, und füge einige Bilder zu den bereits erstellten Seiten hinzu. Sei kreativ! Verwende die Checkliste auf der rechten Seite, um die Schritte zu überprüfen, die Du beim Hinzufügen von Bildern befolgen solltest.
      CSD U2 Inspector Warm Up: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">
        <details>

        <summary><strong>How do I use the Inspector Tool?</strong>

        </summary>

        The Inspector Tool is a great way to learn more about unfamiliar code in Web Lab. To turn on the Inspector Tool, click <img src="https://images.code.org/188579d7c6e7645d0d2edd203a33bd63-image-1480361561351.31.56 PM.png" style="width:100px">. You will know that the Inspector Tool is on because the button will turn white and say "Inspector: On". Once you turn on the Inspector Tool, you can hover over anything in the preview area and Web Lab will highlight the code that is making that part of the page appear.

        </details>
        </div>

        # Explore HTML

        This is a web page written in HTML, the language of the web. You'll learn more about how it works, but first explore it by using the Inspector Tool.

        # Do This

        -   Click the Tip "How do I use the Inspector Tool?" on the right to learn how to use the Inspector Tool.
        -   Follow the instructions in the web page to explore the web page and discuss with a partner how it is working.
      CSD U2 Inspector Warm Up_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">
        <details>

        <summary>
        <strong><span> How do I use the Inspector Tool? </span></strong>
        </summary>

        The Inspector Tool is a great way to learn more about unfamiliar code in Web Lab. To turn on the Inspector Tool, click <img src="https://images.code.org/188579d7c6e7645d0d2edd203a33bd63-image-1480361561351.31.56 PM.png" style="width:100px">. You will know that the Inspector Tool is on because the button will turn white and say "Inspector: On". Once you turn on the Inspector Tool, you can hover over anything in the preview area and Web Lab will highlight the code that is making that part of the page appear.

        </details>
        </div>

        # Explore HTML

        This is a web page written in HTML, the language of the web. You'll learn more about how it works, but first explore it by using the Inspector Tool.

        # Do This

        -   Click the Tip "How do I use the Inspector Tool?" on the right to learn how to use the Inspector Tool.
        -   Follow the instructions in the web page to explore the web page and discuss with a partner how it is working.
      CSD U2 Inspector Warm Up_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">
        <details>

        <summary>
        <strong><span> Wie benutze ich das Inspektorwerkzeug? </span></strong>
        </summary>

        Das Inspector Tool ist eine großartige Möglichkeit, mehr über unbekannten Code in Web Lab zu erfahren. Um das Inspektorwerkzeug einzuschalten, klicke auf <img src="https://images.code.org/188579d7c6e7645d0d2edd203a33bd63-image-1480361561351.31.56 PM.png" style="width:100px">. Du wirst wissen, dass das Inspektorwerkzeug eingeschaltet ist, da die Schaltfläche weiß wird und "Inspektor" lautet: "Ein". Sobald du das Inspektor-Tool aktiviert hast, kannst du mit der Maus über alles im Vorschaubereich fahren, und Web Lab markiert den Code, der den Teil der Seite anzeigt.

        </details>
        </div>

        # Erkunden Sie HTML

        Dies ist eine Webseite, die in HTML, der Sprache des Webs, geschrieben ist. Du wirst mehr darüber erfahren, wie es funktioniert, aber zuerst erkunde die Seite mit dem Inspektor-Tool.

        # Mach Folgendes

        -   Klicken Sie auf den Tipp "Wie benutze ich das Inspektorwerkzeug?" auf der rechten Seite, um zu erfahren, wie man das Inspektorwerkzeug verwendet.
        -   Folge den Anweisungen auf der Webseite, um die Webseite zu erkunden und mit einem Partner zu besprechen, wie diese funktioniert.
      CSD U2 Pair Programming Video_2019: |-
        ## Questions to consider

        -   Warum glauben Sie, dass professionelle Programmierer die Paarprogrammierung verwenden?
        -   Was glauben Sie, wie die Paarprogrammierung Ihnen helfen wird, besser zu programmieren?
      CSD U2 Project Start: |-
        # Start Your Project

        Now that you have a plan for your personal website, you can start coding it here.  Don't worry if you can't do everything you want today.  You'll have plenty of chances to improve your work as you learn more about developing websites.

        # Do This

        -   Use HTML to create the page that you sketched out.  Make sure it includes
            -   At least **two headings of different sizes**
            -   At least **one paragraph**
        -   **Reflect** on your page by comparing to your sketch and showing it to your partner
      CSD U2 Project Start_2018: |-
        # Start Your Project

        Now that you have a plan for your personal website, you can start coding it here.  Don't worry if you can't do everything you want today.  You'll have plenty of chances to improve your work as you learn more about developing websites.

        # Do This

        -   Use HTML to create the page that you sketched out.  Make sure it includes
            -   At least **two headings of different sizes**
            -   At least **one paragraph**
        -   **Reflect** on your page by comparing to your sketch and showing it to your partner
      CSD U2 Project Start_2019: |-
        # Start Your Project

        Now that you have a plan for your personal website, you can start coding it here.  Don't worry if you can't do everything you want today.  You'll have plenty of chances to improve your work as you learn more about developing websites.

        # Do This

        -   Use HTML to create the page that you sketched out.  Make sure it includes
            -   At least **two headings of different sizes**
            -   At least **one paragraph**
        -   **Reflect** on your page by comparing to your sketch and showing it to your partner
      CSD U2 RGB intro: |-
        # RGB Colors

        All colors, whether they have names or not, can be described by the level of red, green, and blue light it takes to make them.  This is called an RGB value (short for Red-Green-Blue).  You can use the widget on your left to try out different RGB values and see what colors they make.

        -   **Click "Run" to start the widget on the left,** and use the sliders to adjust the levels of red, green, and blue light.
        -   For each of the colors below, match it to its RGB value.

        A) red: 216, green: 191, blue: 216 - rgb(216,191,216)

        B) red: 255, green: 239, blue: 213 - rgb(255,239,213)

        C) red: 250, green: 128, blue: 114 - rgb(250,128,114)

        D) red: 70, green: 130, blue: 180 - rgb(70, 130, 180)

        E) red: 107, green: 142, blue: 35 - rgb(107,142,35)

        <div style="font-size: 16px">
        <br />
        <details>

        <summary><strong>Why do red and green make yellow?</strong></summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary><strong>How many colors can I make with RGB color mixing?</strong></summary>

        <p>
        You can make over sixteen million different colors with RGB color mixing.
        </p>

        </details>
        </div>
      CSD U2 RGB intro_2018: |-
        # RGB Colors

        All colors, whether they have names or not, can be described by the level of red, green, and blue light it takes to make them.  This is called an RGB value (short for Red-Green-Blue).  You can use the widget on your left to try out different RGB values and see what colors they make.

        -   **Click "Run" to start the widget on the left,** and use the sliders to adjust the levels of red, green, and blue light.
        -   For each of the colors below, match it to its RGB value.

        A) red: 216, green: 191, blue: 216 - rgb(216,191,216)

        B) red: 255, green: 239, blue: 213 - rgb(255,239,213)

        C) red: 250, green: 128, blue: 114 - rgb(250,128,114)

        D) red: 70, green: 130, blue: 180 - rgb(70, 130, 180)

        E) red: 107, green: 142, blue: 35 - rgb(107,142,35)

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        <p>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </p> </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        <p>
        You can make over sixteen million different colors with RGB color mixing.
        </p>

        </details>
        </div>
      CSD U2 RGB intro_2019: |-
        # RGB Colors

        All colors, whether they have names or not, can be described by the level of red, green, and blue light it takes to make them.  This is called an RGB value (short for Red-Green-Blue).  You can use the widget on your left to try out different RGB values and see what colors they make.

        -   **Click "Run" to start the widget on the left,** and use the sliders to adjust the levels of red, green, and blue light.
        -   For each of the colors below, match it to its RGB value.

        A) red: 216, green: 191, blue: 216 - rgb(216,191,216)

        B) red: 255, green: 239, blue: 213 - rgb(255,239,213)

        C) red: 250, green: 128, blue: 114 - rgb(250,128,114)

        D) red: 70, green: 130, blue: 180 - rgb(70, 130, 180)

        E) red: 107, green: 142, blue: 35 - rgb(107,142,35)

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        <p>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </p> </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        <p>
        You can make over sixteen million different colors with RGB color mixing.
        </p>

        </details>
        </div>
      CSD U2 RGB others: |-
        # Spring and Autumn Colors

        Choose RGB values for spring and autumn colors.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you find a spring color you like, then write down the values on your activity guide.
        -   Do the same for an autumn color.   You will need the RGB values for the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary><strong>Where can I see the whole range of color types?</strong></summary>
        You can find many options for colors at <a href="http://www.w3schools.com/colors/colors_picker.asp">W3Schools - HTML Color Picker</a></details>
        <details>
        <summary><strong>Why do red and green make yellow?</strong></summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary><strong>How many colors can I make with RGB color mixing?</strong></summary>

        <p>You can make make over sixteen million different colors with RGB color mixing.</p>

        </details>
        </div>
      CSD U2 RGB others_2018: |-
        # Spring and Autumn Colors

        Choose RGB values for spring and autumn colors.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you find a spring color you like, then write down the values on your activity guide.
        -   Do the same for an autumn color.   You will need the RGB values for the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>Where can I see the whole range of color types?</strong>
        </summary>

        You can find many options for colors at <a href="http://www.w3schools.com/colors/colors_picker.asp" target="_new">W3Schools - HTML Color Picker</a>

        </details>
        <details>
        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        You can make make over sixteen million different colors with RGB color mixing.

        </details>
        </div>
      CSD U2 RGB others_2019: |-
        # Spring and Autumn Colors

        Choose RGB values for spring and autumn colors.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you find a spring color you like, then write down the values on your activity guide.
        -   Do the same for an autumn color.   You will need the RGB values for the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>Where can I see the whole range of color types?</strong>
        </summary>

        You can find many options for colors at <a href="http://www.w3schools.com/colors/colors_picker.asp" target="_new">W3Schools - HTML Color Picker</a>

        </details>
        <details>
        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        You can make make over sixteen million different colors with RGB color mixing.

        </details>
        </div>
      CSD U2 RGB summer: |-
        # Summer Color

        Find the RGB values for a summery yellow color.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you match the summery yellow at the bottom of the widget.
        -   Write the RGB values on your activity guide.  You will need them in the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary><strong>Why do red and green make yellow?</strong></summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary><strong>How many colors can I make with RGB color mixing?</strong></summary>

        <p>You can make make over sixteen million different colors with RGB color mixing.</p>

        </details>
        </div>
      CSD U2 RGB summer_2018: |-
        # Summer Color

        Find the RGB values for a summery yellow color.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you match the summery yellow at the bottom of the widget.
        -   Write the RGB values on your activity guide.  You will need them in the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        You can make make over sixteen million different colors with RGB color mixing.

        </details>
        </div>
      CSD U2 RGB summer_2019: |-
        # Summer Color

        Find the RGB values for a summery yellow color.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you match the summery yellow at the bottom of the widget.
        -   Write the RGB values on your activity guide.  You will need them in the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        You can make make over sixteen million different colors with RGB color mixing.

        </details>
        </div>
      CSD U2 RGB winter: |-
        # Winter Color

        In the next few levels, you'll be finding seasonal colors for a website.  Here, you'll need to find the RGB values for a wintery blue color.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you match the wintery blue color at the bottom of the widget.
        -   Write the RGB values on your activity guide.  You will need them in the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary><strong>How do I make a color lighter?</strong></summary>
        <p>To make a color lighter, you need to add more light (increase the level of the slider).  If you have already added the maximum amount of blue light, you will need to add more red and green light to make your blue lighter.</p></details>
        <details>
        <summary><strong>Why do red and green make yellow?</strong></summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary><strong>How many colors can I make with RGB color mixing?</strong></summary>

        <p>You can make make over sixteen million different colors with RGB color mixing.</p>

        </details>
        </div>
      CSD U2 RGB winter_2018: |-
        # Winter Color

        In the next few levels, you'll be finding seasonal colors for a website.  Here, you'll need to find the RGB values for a wintery blue color.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you match the wintery blue color at the bottom of the widget.
        -   Write the RGB values on your activity guide.  You will need them in the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>How do I make a color lighter?</strong>
        </summary>

        To make a color lighter, you need to add more light (increase the level of the slider).  If you have already added the maximum amount of blue light, you will need to add more red and green light to make your blue lighter.

        </details>
        <details>
        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        You can make make over sixteen million different colors with RGB color mixing.

        </details>
        </div>
      CSD U2 RGB winter_2019: |-
        # Winter Color

        In the next few levels, you'll be finding seasonal colors for a website.  Here, you'll need to find the RGB values for a wintery blue color.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you match the wintery blue color at the bottom of the widget.
        -   Write the RGB values on your activity guide.  You will need them in the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>How do I make a color lighter?</strong>
        </summary>

        To make a color lighter, you need to add more light (increase the level of the slider).  If you have already added the maximum amount of blue light, you will need to add more red and green light to make your blue lighter.

        </details>
        <details>
        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        You can make make over sixteen million different colors with RGB color mixing.

        </details>
        </div>
      CSD U2 add content: |-
        # HTML hinzufügen

        Als Nächstes solltest du den HTML-Code zu deinen Seiten hinzufügen.

        # Mache Folgendes

        -   Füge für jede der neuen Seiten, die du erstellt hast, HTML hinzu, um die Seite zu erstellen, die du in deinem Projektleitfaden skizziert hast.
        -   Du kannst auch mehr HTML zu den Seiten hinzufügen, die du bereits erstellt hast.
      CSD U2 add content_2018: |-
        # HTML hinzufügen

        Als Nächstes solltest du den HTML-Code zu deinen Seiten hinzufügen.

        # Mache Folgendes

        -   Füge für jede der neuen Seiten, die du erstellt hast, HTML hinzu, um die Seite zu erstellen, die du in deinem Projektleitfaden skizziert hast.
        -   Du kannst auch mehr HTML zu den Seiten hinzufügen, die du bereits erstellt hast.
      CSD U2 add content_2019: |-
        # HTML hinzufügen

        Als Nächstes solltest du den HTML-Code zu deinen Seiten hinzufügen.

        # Mache Folgendes

        -   Füge für jede der neuen Seiten, die du erstellt hast, HTML hinzu, um die Seite zu erstellen, die du in deinem Projektleitfaden skizziert hast.
        -   Du kannst auch mehr HTML zu den Seiten hinzufügen, die du bereits erstellt hast.
      CSD U2 add file: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What is a style sheet?</strong></summary>
        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.
        </details>
        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        <details>
        <summary><strong>How do I create a new style sheet?</strong></summary>
        To create a new style sheet, click on the "Add CSS" button above the code area.
        </details>
        <details>
        <summary><strong>What should I name my style sheet?</strong></summary>

        You can name your style sheet anything, but it's better to choose a relevant name, such as "style.css" or "aboutmestyles.css" so that it's clear what the file is.  Your file should always end in the ".css" extension.

        </details>
        <details>
        <summary><strong>How do I rename a file?</strong></summary>

        To rename a file, you can right click (or control click) on the file name and choose the "Rename" option.  This will allow you to type in a new file name.  Clicking on a file name after it is already highlighted will also allow you to rename the file.

        </details>
        <details>
        <summary><strong>How do I add a style sheet to a web page?</strong></summary>

        To add a style sheet to a web page, open up the code for the web page.  Inside the head tag, add the following code `<link rel="stylesheet" href="style.css">`.  Then change "style.css" to the name of your style sheet.

        </details>
        </div>

        # Adding a Style Sheet

        This is your project from before.  In the next level, you'll have a chance to add some different styles to it, but first, you need to add a style sheet, name it, and link it to your html page.

        1.  Create a new style sheet for your project.
        2.  Rename the style sheet file.
        3.  Add your style sheet to your HTML page.

        <img src="https://cdo-curriculum.s3.amazonaws.com/media/uploads/weblab_stylesheet.png" style=" max-width:500px">
      CSD U2 add file_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What is a style sheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        <details>
        <summary>
        <strong>How do I create a new style sheet?</strong>
        </summary>
        To create a new style sheet, click on the "Add CSS" button above the code area.
        </details>
        <details>
        <summary>
        <strong>What should I name my style sheet?</strong>
        </summary>
        You can name your style sheet anything, but it's better to choose a relevant name, such as "style.css" or "aboutmestyles.css" so that it's clear what the file is.  Your file should always end in the ".css" extension.
        </details>
        <details>
        <summary>
        <strong>How do I rename a file?</strong>
        </summary>
        To rename a file, you can right click (or control click) on the file name and choose the "Rename" option.  This will allow you to type in a new file name.  Clicking on a file name after it is already highlighted will also allow you to rename the file.
        </details>
        <details>
        <summary>
        <strong>How do I add a style sheet to a web page?</strong>
        </summary>

        To add a style sheet to a web page, open up the code for the web page.  Inside the head tag, add the following code `<link rel="stylesheet" href="style.css">`.  Then change "style.css" to the name of your style sheet.

        </details>
        </div>

        # Adding a Style Sheet

        This is your project from before.  In the next level, you'll have a chance to add some different styles to it, but first, you need to add a style sheet, name it, and link it to your html page.

        1.  Create a new style sheet for your project.
        2.  Rename the style sheet file.
        3.  Add your style sheet to your HTML page.

        <img src="https://cdo-curriculum.s3.amazonaws.com/media/uploads/weblab_stylesheet.png" style=" max-width:500px">
      CSD U2 add file_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        ::: details [**What is a style sheet?**]

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.
        :::

        ::: details [**What is CSS?**]

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

            h2 {
               color: blue;
               font-family: cursive;

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.
        :::

        ::: details [**How do I create a new style sheet?**]
        To create a new style sheet, click on the "Add CSS" button above the code area.
        :::

        ::: details [**What should I name my style sheet?**]
        You can name your style sheet anything, but it's better to choose a relevant name, such as "style.css" or "aboutmestyles.css" so that it's clear what the file is.  Your file should always end in the ".css" extension.
        :::

        ::: details [**How do I rename a file?**]
        To rename a file, you can right click (or control click) on the file name and choose the "Rename" option.  This will allow you to type in a new file name.  Clicking on a file name after it is already highlighted will also allow you to rename the file.
        :::

        ::: details [**How do I add a style sheet to a web page?**]

        To add a style sheet to a web page, open up the code for the web page.  Inside the head tag, add the following code `<link rel="stylesheet" href="style.css">`.  Then change "style.css" to the name of your style sheet.

        :::

        </div>

        # Adding a Style Sheet

        This is your project from before.  In the next level, you'll have a chance to add some different styles to it, but first, you need to add a style sheet, name it, and link it to your html page.

        1.  Create a new style sheet for your project.
        2.  Rename the style sheet file.
        3.  Add your style sheet to your HTML page.

        <img src="https://cdo-curriculum.s3.amazonaws.com/media/uploads/weblab_stylesheet.png" style=" max-width:500px">
      CSD U2 add style_2019: |-
        # Probier es aus!

        Jetzt, da du verschiedene Arten des Stylings gesehen hast, ist es an der Zeit, es selbst auszuprobieren. Hier ist eine Webseite, die du schon einmal gesehen hast, aber sie braucht etwas Stil!

        # Mach folgendes

        -   Gib der Webseite eine Hintergrundfarbe.
        -   Schaffe mehr Platz um die Bilder herum.
        -   Setze den gesamten Text in eine andere Farbe.
        -   Füge nach eigenem Ermessen andere Stile hinzu.
      CSD U2 challenge: |-
        # Challenge

        Check with your teacher before starting on this challenge.

        This page is only partially finished, and it has some bugs.  Luckily, there are comments that should help you to finish the page as the author intended.

        # Do This

        -   Look at the code and with your partner and discuss what the page should look like.
        -   Work together to finish the page, paying attention to formatting.
        -   Compare with another pair to see whether your pages are the same.
      CSD U2 challenge_2018: |-
        # Challenge

        Check with your teacher before starting on this challenge.

        This page is only partially finished, and it has some bugs.  Luckily, there are comments that should help you to finish the page as the author intended.

        # Do This

        -   Look at the code with your partner and discuss what the page should look like.
        -   Work together to finish the page, paying attention to formatting.
        -   Compare with another pair to see whether your pages are the same.
      CSD U2 challenge_2019: |-
        # Challenge

        Check with your teacher before starting on this challenge.

        This page is only partially finished, and it has some bugs.  Luckily, there are comments that should help you to finish the page as the author intended.

        # Do This

        -   Look at the code with your partner and discuss what the page should look like.
        -   Work together to finish the page, paying attention to formatting.
        -   Compare with another pair to see whether your pages are the same.
      CSD U2 classes modify: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>

        </summary>
        For the code to work, you need to both create a winter class and add elements to the class.

        The class is created in the style sheet, with the following code.

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        This code creates a class called `winter` and makes everything in the class our winter blue, which has the RGB values of (195,230,255).

        The code that adds a `h5` element to the winter class is `<h5 class="winter">`.  The `class=winter` inside the opening tag adds everything inside the tag to the class.

        </details>
        <details>
        <summary>
        <strong>What rules can be added to a class rule-set?</strong>

        </summary>

        A class rule-set can have the same rules as any other type of selector.  If a rule does not apply to the content of the class (for example, using `font-size` on an element with no text), then the computer will ignore that rule, but still use the rules that work.

        </details>
        <details>
        <summary>
        <strong>Why does the selector have a period in front of it?</strong>

        </summary>
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        </details>
        <details>
        <summary>
        <strong>Why would a web developer use classes?</strong>

        </summary>
        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.
        </details>
        <details>
        <summary>
        <strong>I got different RGB values, but mine are right, too.</strong>

        </summary>

        Because RGB creates millions of different colors, some are so similar that people have a hard time telling them apart.  That means that there are multiple RGB values that are close enough to work for our winter color.

        </details>
        </div>

        # Adding Rules

        Your winter words should all have the same color and font.

        -   Find the CSS rule-set in the style sheet that gives the winter words their style.
        -   Add a rule that changes the font of the winter words.  It can be any font, but it will need to be different from that of the other three seasons.
        -   Add any other rules you'd like for your winter words.
      CSD U2 classes modify_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>
        For the code to work, you need to both create a winter class and add elements to the class.

        The class is created in the style sheet, with the following code.

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        This code creates a class called `winter` and makes everything in the class our winter blue, which has the RGB values of (195,230,255).

        The code that adds a `h5` element to the winter class is `<h5 class="winter">`.  The `class=winter` inside the opening tag adds everything inside the tag to the class.

        </details>
        <details>

        <summary>
        <strong>What rules can be added to a class rule-set?</strong>
        </summary>

        A class rule-set can have the same rules as any other type of selector.  If a rule does not apply to the content of the class (for example, using `font-size` on an element with no text), then the computer will ignore that rule, but still use the rules that work.

        </details>
        <details>
        <summary>
        <strong>Why does the selector have a period in front of it?</strong>
        </summary>
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        </details>
        <details>
        <summary>
        <strong>Why would a web developer use classes?</strong>
        </summary>
        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.
        </details>
        <details>
        <summary>
        <strong>I got different RGB values, but mine are right, too.</strong>
        </summary>

        Because RGB creates millions of different colors, some are so similar that people have a hard time telling them apart.  That means that there are multiple RGB values that are close enough to work for our winter color.

        </details>
        </div>

        # Adding Rules

        Your winter words should all have the same color and font.

        -   Find the CSS rule-set in the style sheet that gives the winter words their style.
        -   Add a rule that changes the font of the winter words.  It can be any font, but it will need to be different from that of the other three seasons.
        -   Add any other rules you'd like for your winter words.
      CSD U2 classes modify_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        ::: details [**How does the code work?**]
        For the code to work, you need to both create a winter class and add elements to the class.

        The class is created in the style sheet, with the following code.

            .winter {
              color: rgb(195,230,255);
            }

        This code creates a class called `winter` and makes everything in the class our winter blue, which has the RGB values of (195,230,255).

        The code that adds a `h5` element to the winter class is `<h5 class="winter">`.  The `class=winter` inside the opening tag adds everything inside the tag to the class.
        :::

        ::: details [**What rules can be added to a class rule-set?**]

        A class rule-set can have the same rules as any other type of selector.  If a rule does not apply to the content of the class (for example, using `font-size` on an element with no text), then the computer will ignore that rule, but still use the rules that work.

        :::

        ::: details [**Why does the selector have a period in front of it?**]
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        :::

        ::: details [**Why would a web developer use classes?**]
        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.
        :::

        ::: details [**I got different RGB values, but mine are right, too.**]

        Because RGB creates millions of different colors, some are so similar that people have a hard time telling them apart.  That means that there are multiple RGB values that are close enough to work for our winter color.

        :::

        </div>

        # Adding Rules

        Your winter words should all have the same color and font.

        -   Find the CSS rule-set in the style sheet that gives the winter words their style.
        -   Add a rule that changes the font of the winter words.  It can be any font, but it will need to be different from that of the other three seasons.
        -   Add any other rules you'd like for your winter words.
      CSD U2 classes sample: "<div style=\"float: right; height: 250px; width: 40%;
        overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>How
        does the code work?</strong>\n</summary>\nFor the code to work, you need to
        both create a winter class and add elements to the class.\n\nThe class is
        created in the style sheet, with the following code.\n\n<pre>.winter {\n  color:
        rgb(195,230,255);\n}</pre>\n\nThis code creates a class called `winter` and
        makes everything in the class our winter blue, which has the RGB values of
        (195,230,255).\n\nThe code that adds a `h5` element to the winter class is
        `<h5 class=\"winter\">`.  The `class=winter` inside the opening tag adds everything
        inside the tag to the class.\n\n</details>\n<details>\n<summary>\n<strong>Why
        does the selector have a period in front of it?</strong>\n\n</summary>\nIn
        CSS, a period in front of a selector means that the selector is the name of
        a class.  If there is no period, it means that the selector is the name of
        an HTML tag.\n</details>\n<details>\n<summary>\n<strong>Why would a web developer
        use classes?</strong>\n\n</summary>\nA web developer uses classes when some
        elements should be styled differently than others, even if they are the same
        tag.  Classes can also be used to give elements that have different tags the
        same style.\n</details>\n<details>\n<summary>\n<strong>I got different RGB
        values, but mine are right, too.</strong>\n\n</summary>\n\nBecause RGB creates
        millions of different colors, some are so similar that people have a hard
        time telling them apart.  That means that there are multiple RGB values that
        are close enough to work for our winter color.\n\n</details>\n</div>\n\n#
        Classes\n\nIn this page, the web developer has used classes to give some of
        the words our winter color.\n\n-   Look at the HTML code for the winter words.
        \ Why is \"snowy\" the only winter word without the winter color?\n-   Add
        code to the HTML that will give \"snowy\" the same winter blue as the other
        words.\n-   Look inside the style sheet to find the rule that makes all the
        words in the winter class blue, and check whether your RGB numbers are close
        to the ones in the style sheet.  \n-   Discuss with your partner how the code
        works."
      CSD U2 classes sample_2018: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>How
        does the code work?</strong>\n</summary>\nFor the code to work, you need to
        both create a winter class and add elements to the class.\n\nThe class is
        created in the style sheet, with the following code.\n\n<pre>.winter {\n  color:
        rgb(195,230,255);\n}</pre>\n\nThis code creates a class called `winter` and
        makes everything in the class our winter blue, which has the RGB values of
        (195,230,255).\n\nThe code that adds a `h5` element to the winter class is
        `<h5 class=\"winter\">`.  The `class=winter` inside the opening tag adds everything
        inside the tag to the class.\n\n</details>\n<details>\n<summary>\n<strong>Why
        does the selector have a period in front of it?</strong>\n</summary>\nIn CSS,
        a period in front of a selector means that the selector is the name of a class.
        \ If there is no period, it means that the selector is the name of an HTML
        tag.\n</details>\n<details>\n<summary>\n<strong>Why would a web developer
        use classes?</strong>\n</summary>\nA web developer uses classes when some
        elements should be styled differently than others, even if they are the same
        tag.  Classes can also be used to give elements that have different tags the
        same style.\n</details>\n<details>\n<summary>\n<strong>I got different RGB
        values, but mine are right, too.</strong>\n</summary>\n\nBecause RGB creates
        millions of different colors, some are so similar that people have a hard
        time telling them apart.  That means that there are multiple RGB values that
        are close enough to work for our winter color.\n\n</details>\n</div>\n\n#
        Classes\n\nIn this page, the web developer has used classes to give some of
        the words our winter color.\n\n-   Look at the HTML code for the winter words.
        \ Why is \"snowy\" the only winter word without the winter color?\n-   Add
        code to the HTML that will give \"snowy\" the same winter blue as the other
        words.\n-   Look inside the style sheet to find the rule that makes all the
        words in the winter class blue, and check whether your RGB numbers are close
        to the ones in the style sheet.  \n-   Discuss with your partner how the code
        works."
      CSD U2 classes sample_2019: "<div class=\"no-pullthrough\" style=\"float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n\n::: details [**How does the code work?**]\nFor the code
        to work, you need to both create a winter class and add elements to the class.\n\nThe
        class is created in the style sheet, with the following code.\n\n    .winter
        {\n      color: rgb(195,230,255);\n    }\n\nThis code creates a class called
        `winter` and makes everything in the class our winter blue, which has the
        RGB values of (195,230,255).\n\nThe code that adds a `h5` element to the winter
        class is `<h5 class=\"winter\">`.  The `class=winter` inside the opening tag
        adds everything inside the tag to the class.\n:::\n\n::: details [**Why does
        the selector have a period in front of it?**]\nIn CSS, a period in front of
        a selector means that the selector is the name of a class.  If there is no
        period, it means that the selector is the name of an HTML tag.\n:::\n\n:::
        details [**Why would a web developer use classes?**]\nA web developer uses
        classes when some elements should be styled differently than others, even
        if they are the same tag.  Classes can also be used to give elements that
        have different tags the same style.\n:::\n\n::: details [**I got different
        RGB values, but mine are right, too.**]\n\nBecause RGB creates millions of
        different colors, some are so similar that people have a hard time telling
        them apart.  That means that there are multiple RGB values that are close
        enough to work for our winter color.\n\n:::\n\n</div>\n\n# Classes\n\nIn this
        page, the web developer has used classes to give some of the words our winter
        color.\n\n-   Look at the HTML code for the winter words.  Why is \"snowy\"
        the only winter word without the winter color?\n-   Add code to the HTML that
        will give \"snowy\" the same winter blue as the other words.\n-   Look inside
        the style sheet to find the rule that makes all the words in the winter class
        blue, and check whether your RGB numbers are close to the ones in the style
        sheet.  \n-   Discuss with your partner how the code works."
      CSD U2 classes spring: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>

        </summary>
        For the code to work, you need to both create a spring class and add elements to the class.

        The spring class is already created in the style sheet, but it doesn't have any rules.

        <pre>.spring {
          color: rgb(195,230,255);
        }</pre>

        Look at the rules in the `winter` class for clues to how to make rules for the summer class.

        You will also need to add some elements to the spring class inside your HTML file.

        The code in the HTML file that adds a `h5` element to the winter class is `<h5 class="winter">`.  Use this pattern to add elements to the spring class, too.

        </details>
        <details>
        <summary>
        <strong>What rules can be added to a class rule-set?</strong>

        </summary>

        A class rule-set can have the same rules as any other type of selector.  If a rule does not apply to the content of the class (for example, using `font-size` on an element with no text), then the computer will ignore that rule, but still use the rules that work.

        </details>
        <details>
        <summary>
        <strong>Why does the selector have a period in front of it?</strong>

        </summary>
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        </details>
        <details>
        <summary>
        <strong>Why would a web developer use classes?</strong>

        </summary>

        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.

        </details>
        </div>

        # Spring Class

        Now that your winter class is ready, you can start on the other seasons.

        -   Find the empty CSS rule-set in the style sheet that gives the spring words their style.
        -   Add two rules, one to give the text your spring color for earlier in the lesson, and another to give the text a different font, font size, or decoration.
        -   Add the spring class to the spring elements in the HTML page.
      CSD U2 classes spring_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>
        For the code to work, you need to both create a spring class and add elements to the class.

        The spring class is already created in the style sheet, but it doesn't have any rules.

        <pre>.spring {
          color: rgb(195,230,255);
        }</pre>

        Look at the rules in the `winter` class for clues to how to make rules for the summer class.

        You will also need to add some elements to the spring class inside your HTML file.

        The code in the HTML file that adds a `h5` element to the winter class is `<h5 class="winter">`.  Use this pattern to add elements to the spring class, too.

        </details>
        <details>
        <summary>
        <strong>What rules can be added to a class rule-set?</strong>
        </summary>

        A class rule-set can have the same rules as any other type of selector.  If a rule does not apply to the content of the class (for example, using `font-size` on an element with no text), then the computer will ignore that rule, but still use the rules that work.

        </details>
        <details>
        <summary>
        <strong>Why does the selector have a period in front of it?</strong>
        </summary>
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        </details>
        <details>
        <summary>
        <strong>Why would a web developer use classes?</strong>
        </summary>

        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.

        </details>
        </div>

        # Spring Class

        Now that your winter class is ready, you can start on the other seasons.

        -   Find the empty CSS rule-set in the style sheet that gives the spring words their style.
        -   Add two rules, one to give the text your spring color for earlier in the lesson, and another to give the text a different font, font size, or decoration.
        -   Add the spring class to the spring elements in the HTML page.
      CSD U2 classes spring_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        Jetzt mache ::: Details [**Wie funktioniert der Code?**]
        Damit der Code funktioniert, musst du sowohl eine Frühling-Klasse erstellen als auch Elemente zu dieser Klasse hinzufügen.

        Die Frühling-Klasse ist bereits im Stylesheet angelegt, aber sie hat keine Regeln.

            .spring {
              color: rgb(195,230,255);
            }

        Schaue Dir die Regeln in der `winter`-Klasse an, um Hinweise zu erhalten, wie man Regeln für die Sommer-Klasse erstellen kann.

        Du musst auch einige Elemente zur Frühling-Klasse in deiner HTML-Datei hinzufügen.

        Der Code in der HTML-Datei, der ein `h5` Element zur Winterklasse hinzufügt, ist `<h5 class="winter">`.  Benutze dieses Muster, um auch Elemente zur Frühlingsklasse hinzuzufügen.
        :::

        :::: Details [**Welche Regeln können einem Klassenregelsatz hinzugefügt werden?**]

        Ein Klassenregelsatz kann die gleichen Regeln haben wie jeder andere Selektortyp.  Wenn eine Regel nicht auf den Inhalt der Klasse zutrifft (z.B. die Verwendung von `font-size` bei einem Element ohne Text), dann wird der Computer diese Regel ignorieren, aber trotzdem die Regeln verwenden, die funktionieren.
        :::

        :::: Details [**Warum hat der Selektor einen Punkt vor sich?**]
        In CSS bedeutet ein Punkt vor einem Selektor, dass der Selektor der Name einer Klasse ist.  Wenn kein Punkt vorhanden ist, bedeutet es, dass der Selektor der Name eines HTML-Tags ist.
        :::

        :::: details [**Warum würde ein Webentwickler Klassen verwenden?**]

        Ein Webentwickler verwendet Klassen, wenn einige Elemente anders gestylt werden sollen als andere, auch wenn es sich um das gleiche Tag handelt.  Klassen können auch verwendet werden, um Elementen, die unterschiedliche Tags haben, den gleichen Stil zu geben.

        :::

        </div>

        # Frühling-Klasse

        Nun, da Deine Winter-Klasse fertig ist, kannst Du mit den anderen Jahreszeiten beginnen.

        -   Finde den leeren CSS-Regelsatz im Stylesheet, der den Frühlingswörtern ihren Stil verleiht.
        -   Füge zwei Regeln hinzu, eine, um dem Text deine Frühling-Farbe für früher in der Lektion zu geben, und eine andere, um dem Text eine andere Schriftart, Schriftgröße oder Dekoration zu geben.
        -   Füge die Frühling-Klasse zu den Frühling-Elementen in der HTML-Seite hinzu.
      CSD U2 classes summer: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>

        </summary>
        For the code for the winter class to work, it needs to both create a winter class and add elements to the class.

        The class is created in the style sheet, with the following code.

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        This code creates a class called `winter` and makes everything in the class our winter blue, which has the RGB values of (195,230,255).

        The code that adds a `h5` element to the winter class is `<h5 class="winter">`.  The `class=winter` inside the opening tag adds everything inside the tag to the class.

        </details>
        <details>
        <summary>
        <strong>How do I create a new rule-set?</strong>

        </summary>
        You can create a new rule-set by following the pattern that the `winter` and `spring` classes used in the style sheet.
        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        The selector name and the color values will be different, but the following pattern is always the same.

        <pre>.classname {
          property1: value1;
          property2: value2;
        }</pre>

        </details>
        <details>
        <summary>
        <strong>Why does the selector have a period in front of it?</strong>

        </summary>
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        </details>
        <details>
        <summary>
        <strong>Why would a web developer use classes?</strong>

        </summary>

        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.

        </details>
        </div>

        # Summer and Autumn Classes

        -   Inside the style sheet, create a new rule-set for a "summer" class.
        -   Add a rule to set the text in the summer class to your summer RGB color.
        -   Add the summer class to the summer elements in the HTML page.
        -   Do the same for the autumn class.
      CSD U2 classes summer_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>
        For the code for the winter class to work, it needs to both create a winter class and add elements to the class.

        The class is created in the style sheet, with the following code.

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        This code creates a class called `winter` and makes everything in the class our winter blue, which has the RGB values of (195,230,255).

        The code that adds a `h5` element to the winter class is `<h5 class="winter">`.  The `class=winter` inside the opening tag adds everything inside the tag to the class.

        </details>
        <details>
        <summary>
        <strong>How do I create a new rule-set?</strong>
        </summary>

        You can create a new rule-set by following the pattern that the `winter` and `spring` classes used in the style sheet.

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        The selector name and the color values will be different, but the following pattern is always the same.

        <pre>.classname {
          property1: value1;
          property2: value2;
        }</pre>

        </details>
        <details>
        <summary>
        <strong>Why does the selector have a period in front of it?</strong>
        </summary>
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        </details>
        <details>
        <summary>
        <strong>Why would a web developer use classes?</strong>
        </summary>

        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.

        </details>
        </div>

        # Summer and Autumn Classes

        -   Inside the style sheet, create a new rule-set for a "summer" class.
        -   Add a rule to set the text in the summer class to your summer RGB color.
        -   Add the summer class to the summer elements in the HTML page.
        -   Do the same for the autumn class.
      CSD U2 classes summer_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        ::: details [**Wie funktioniert der Code?**]
        Damit der Code für die Winterklasse funktioniert, muss sowohl eine Winterklasse anlegt als auch Elemente der Klasse hinzugefügt werden.

        Die Klasse wird im Stylesheet mit folgendem Code angelegt:

            .winter {
              color: rgb(195,230,255);
            }

        Dieser Code erzeugt eine Klasse namens `Winter` und macht alles in der Klasse zu unserem Winterblau, das die RGB-Werte von (195, 230, 255) hat.

        Der Code, der ein `h5` Element zur Winterklasse hinzufügt, ist `<h5 class="winter">`.  Der `class=winter` innerhalb des öffnenden Tags fügt alles innerhalb des Tags der Klasse hinzu.
        :::

        ::: details [**Wie erstelle ich einen neuen Regelsatz?**]

        Du kannst einen neuen Regelsatz erstellen, indem du dem Muster folgst, das die Klassen `winter` und `spring` im Style Sheet verwendet haben.

            .winter {
              color: rgb(195,230,255);
            }

        Der Name des Selektors und die Farbwerte sind unterschiedlich, aber das folgende Muster ist immer das gleiche.

            .classname {
              property1: value1;
              property2: value2;
            }

        :::

        ::: details [**Warum hat der Selektor einen Punkt davor?**]
        In CSS bedeutet ein Punkt vor einem Selektor, dass der Selektor der Name einer Klasse ist.  Wenn es keinen Punkt gibt, bedeutet dies, dass der Selektor der Name eines HTML-Tags ist.
        :::

        ::: details [**Warum sollte ein Webentwickler Klassen verwenden?**]

        Ein Webentwickler verwendet Klassen, wenn einige Elemente anders gestaltet werden sollen als andere, auch wenn sie das gleiche Tag sind.  Klassen können auch verwendet werden, um Elementen, die unterschiedliche Tags haben, den gleichen Stil zu geben.

        :::

        </div>

        # Sommer- und Herbstklassen

        -   Erstelle innerhalb des Style Sheets ein neues Regelwerk für eine "Sommer"-Klasse.
        -   Füge eine Regel hinzu, um den Text in der Sommerklasse auf deine Sommer-RGB-Farbe einzustellen.
        -   Füge die Sommerklasse zu den Sommerelementen auf der HTML-Seite hinzu.
        -   Das Gleiche gilt für die Herbstklasse.
      CSD U2 commenting: |-
        # Comments

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What is whitespace?</strong></summary>

        Whitespace refers to any character that shows up as a blank space on the screen, such as a space, a tab, or a new line. Whitespace helps separate different parts of the document to make it easier to read.  For example, in HTML code new elements are usually put on a new line, even though it doesn't make any difference in how the page is displayed.

        </details>
        <details>
        <summary>
        <strong>What is indentation?</strong>
        </summary>
        Indentation is the placement of text farther to the right, or left, to separate it from surrounding text.  Indentation helps to convey the program's structure.  In HTML, elements that are inside other elements are usually indented.  Here is an example:
        <pre>
           &lt;body&gt;
              &lt;p&gt;This paragraph is inside the "body" element.&lt;/p&gt;
           &lt;/body&gt;
        </pre>
        </details>
        <details>
        <summary>
        <strong>What is formatting?</strong>
        </summary>

        Formatting is arranging text in a way that makes it easier to understand.  HTML is usually formatted using indentation.  That means that elements that are inside other elements are further to the right in code.  Here is an example:

        <pre>
           &lt;body&gt;
              &lt;p&gt;This paragraph is inside the "body" element.&lt;/p&gt;
           &lt;/body&gt;
        </pre>

        </details>
        </div>

        You can add **comments** to your code to explain the different parts of the code and what it should create.  Comments can help you to debug, and will also help other people who are trying to understand your code.

        <pre>
        &lt;!-- this is a comment --&gt;
        </pre>

        # Do This

        -   Look at the code with your partner and find the comments.
        -   Use the comments to help you fix the bugs in the HTML.
      CSD U2 commenting_2018: |-
        # Comments

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What is whitespace?</strong></summary>
        Whitespace refers to any character that shows up as a blank space on the screen, such as a space, a tab, or a new line. Whitespace helps separate different parts of the document to make it easier to read.  For example, in HTML code new elements are usually put on a new line, even though it doesn't make any difference in how the page is displayed.
        </details>
        <details>
        <summary><strong>What is indentation?</strong></summary>
        Indentation is the placement of text farther to the right, or left, to separate it from surrounding text.  Indentation helps to convey the program's structure.  In HTML, elements that are inside other elements are usually indented.  Here is an example:
        <pre>
           &lt;body&gt;
              &lt;p&gt;This paragraph is inside the "body" element.&lt;/p&gt;
           &lt;/body&gt;
        </pre>
        </details>
        <details>
        <summary><strong>What is formatting?</strong></summary>

        Formatting is arranging text in a way that makes it easier to understand.  HTML is usually formatted using indentation.  That means that elements that are inside other elements are further to the right in code.  Here is an example:

        <pre>
           &lt;body&gt;
              &lt;p&gt;This paragraph is inside the "body" element.&lt;/p&gt;
           &lt;/body&gt;
        </pre>

        </details>
        </div>

        You can add **comments** to your code to explain the different parts of the code and what it should create.  Comments can help you to debug, and will also help other people who are trying to understand your code.

        <pre>
        &lt;!-- this is a comment --&gt;
        </pre>

        # Do This

        -   Look at the code with your partner and find the comments.
        -   Use the comments to help you fix the bugs in the HTML.
      CSD U2 commenting_2019: |-
        # Kommentare

        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        ::: details [**Was ist Leerraum?**]
        Unter Leerraum (engl. "whitespace") versteht man jedes Zeichen, das als Leerzeichen auf dem Bildschirm erscheint, wie z.B. ein Leerzeichen, ein Tabulator oder eine neue Zeile. Mit Hilfe von Leerzeichen können verschiedene Teile des Dokuments voneinander getrennt werden, um die Lesbarkeit zu verbessern.  Im HTML-Code werden z.B. neue Elemente normalerweise in einer neuen Zeile eingefügt, obwohl es keinen Unterschied in der Darstellung der Seite macht.
        :::

        ::: details [**Was ist Einrückung?**]
        Einrückung ist die Platzierung von Text weiter nach rechts oder links, um ihn vom umgebenden Text zu trennen.  Die Einrückung hilft, die Struktur des Programms zu vermitteln.  In HTML werden Elemente, die sich innerhalb anderer Elemente befinden, normalerweise eingerückt.  Hier ist ein Beispiel:

               <body>
                  <p>Dieser Absatz ist innerhalb des "body" Elements.</p>
               </body>

        :::

        ::: details [**Was ist Formatierung?**]

        Formatieren ist das Anordnen von Text in einer Weise, die das Verständnis erleichtert.  HTML wird in der Regel durch Einrückung formatiert.  Das bedeutet, dass Elemente, die sich innerhalb anderer Elemente befinden, weiter rechts im Code stehen.  Hier ist ein Beispiel:

               <body>
                  <p>Dieser Absatz ist innerhalb des "body" Elements.</p>
               </body>

        :::

        </div>

        Du kannst **Kommentare** zu Deinem Code hinzufügen, um die verschiedenen Teile des Codes zu erklären und was er erzeugen soll.  Kommentare können Dir beim Debuggen helfen. Sie helfen auch anderen Leuten, die versuchen, Deinen Code zu verstehen.

            <!-- dies ist ein Kommentar -->

        # Mache Folgendes

        -   Schaue Dir den Code mit Deinem Partner an und finde die Kommentare.
        -   Verwende die Kommentare, um die Fehler im HTML zu beheben.
      CSD U2 create page: |-
        # Create and Name Your New Page

        Before you start coding, you should make sure that you have all the pages that you need in your project.

        # Do This

        -   Create a new HTML page and rename it. (Look at <a href="/s/csd2-2017/stage/6/puzzle/8" target="_new">Lesson 6 Level 8</a> if you've forgotten how.)
        -   Repeat this process for any other pages you want to add.
      CSD U2 create page_2018: |-
        # Create and Name Your New Page

        Before you start coding, you should make sure that you have all the pages that you need in your project.

        # Do This

        -   Create a new HTML page and rename it. (Look at <a href="../../../stage/6/puzzle/8" target="_new">Lesson 6 Level 8</a> if you've forgotten how.)
        -   Repeat this process for any other pages you want to add.
      CSD U2 create page_2019: |-
        # Create and Name Your New Page

        Before you start coding, you should make sure that you have all the pages that you need in your project.

        # Do This

        -   Create a new HTML page and rename it. (Look at <a href="../../../stage/6/puzzle/8" target="_new">Lesson 6 Level 8</a> if you've forgotten how.)
        -   Repeat this process for any other pages you want to add.
      CSD U2 header footer: |-
        # Navigation Bar and Footer

        Each of your pages needs a navigation bar and a footer.

        # Do This

        -   For each page, make sure it has a navigation bar that links to other pages in your site.  For a review of the navigation bar, go to <a href="/s/csd2-2017/stage/9/puzzle/4" target="_new">Lesson 9 Level 4</a>.
        -   For each page, make sure it has a footer at the bottom that explains the copyright information for your page. (Go to <a href="https://creativecommons.org/choose/" target="_new">Creative Commons</a> for help in creating this HTML.)
      CSD U2 header footer_2018: |-
        # Navigation Bar and Footer

        Each of your pages needs a navigation bar and a footer.

        # Do This

        -   For each page, make sure it has a navigation bar that links to other pages in your site.  For a review of the navigation bar, go to <a href="4" target="_new">Lesson 9 Level 4</a>.
        -   For each page, make sure it has a footer at the bottom that explains the copyright information for your page. (Go to <a href="https://creativecommons.org/choose/" target="_new">Creative Commons</a> for help in creating this HTML.)
      CSD U2 header footer_2019: |-
        # Navigation Bar and Footer

        Each of your pages needs a navigation bar and a footer.

        # Do This

        -   For each page, make sure it has a navigation bar that links to other pages in your site.  For a review of the navigation bar, go to <a href="4" target="_new">Lesson 9 Level 4</a>.
        -   For each page, make sure it has a footer at the bottom that explains the copyright information for your page. (Go to <a href="https://creativecommons.org/choose/" target="_new">Creative Commons</a> for help in creating this HTML.)
      CSD U2 layout style bgcolor: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>How does the code work?</strong></summary>

        Here is the code that is making the background of the page blue:

        <pre>body {
          background-color: lightblue;
        }</pre>

        -   `body` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the body element is the entire page.
        -   `background-color: lightblue;` is the rule that makes the entire page light blue.
            -   `background-color` is the _property_.  It explains what the rule is about, in this case the color of the background.
            -   `lightblue` is the _value_.  It explains how the rule should be applied, in this case making the background light blue.
                </details>
                <details>
                <summary><strong>What colors can I use in CSS?</strong></summary>

        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools - CSS Legal Color Values</a>

        </details>
        <details>
        <summary><strong>What does the `background-color` property do?</strong></summary>

        The `background-color` property determines the color of the background of an element.  You can read more about the property at <a href="http://www.w3schools.com/cssref/pr_background-color.asp">W3Schools - CSS background-color Property</a>

        </details>
        <details>
        <summary><strong>What if an element inside the page has a different background color from the body?</strong></summary>

        You can see the answer to this question by adding a `background-color` rule to the `p` tag.  The paragraphs will have the background color in the rule for the `p` tag, and the rest of the page will follow the rule for the `body` tag.

        </details>
        <details>
        <summary><strong>What is a style sheet?</strong></summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Background Color

        -   Find the code in the style sheet that is making the background of the entire page light blue.
        -   Change the code to make the page a different color.
        -   Try to change the background color of just the paragraphs.
      CSD U2 layout style bgcolor_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>

        Here is the code that is making the background of the page blue:

        <pre>
        body {
          background-color: lightblue;
        }
        </pre>

        -   `body` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the body element is the entire page.
        -   `background-color: lightblue;` is the rule that makes the entire page light blue.
            -   `background-color` is the _property_.  It explains what the rule is about, in this case the color of the background.
            -   `lightblue` is the _value_.  It explains how the rule should be applied, in this case making the background light blue.

        </details>
        <details>
        <summary>
        <strong>What colors can I use in CSS?</strong>
        </summary>

        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp" target="_new">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp" target="_new">W3Schools - CSS Legal Color Values</a>

        </details>
        <details>
        <summary>
        <strong>What does the background-color property do?</strong>
        </summary>

        The `background-color` property determines the color of the background of an element.  You can read more about the property at <a href="http://www.w3schools.com/cssref/pr_background-color.asp" target="_new">W3Schools - CSS background-color Property</a>

        </details>
        <details>
        <summary>
        <strong>What if an element inside the page has a different background color from the body?</strong>
        </summary>

        You can see the answer to this question by adding a `background-color` rule to the `p` tag.  The paragraphs will have the background color in the rule for the `p` tag, and the rest of the page will follow the rule for the `body` tag.

        </details>
        <details>
        <summary>
        <strong>What is a style sheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>
        h2 {
          color: blue;
          font-family: cursive;
        }
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Background Color

        -   Find the code in the style sheet that is making the background of the entire page light blue.
        -   Change the code to make the page a different color.
        -   Try to change the background color of just the paragraphs.
      CSD U2 layout style bgcolor_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**How does the code work?**]

        Here is the code that is making the background of the page blue:

            body {
              background-color: lightblue;
            }

        -   `body` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the body element is the entire page.
        -   `background-color: lightblue;` is the rule that makes the entire page light blue.
            -   `background-color` is the _property_.  It explains what the rule is about, in this case the color of the background.
            -   `lightblue` is the _value_.  It explains how the rule should be applied, in this case making the background light blue.

        :::

        ::: details [**What colors can I use in CSS?**]

        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp" target="_new">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp" target="_new">W3Schools - CSS Legal Color Values</a>

        :::

        ::: details [**What does the background-color property do?**]

        The `background-color` property determines the color of the background of an element.  You can read more about the property at <a href="http://www.w3schools.com/cssref/pr_background-color.asp" target="_new">W3Schools - CSS background-color Property</a>

        :::

        ::: details [**What if an element inside the page has a different background color from the body?**]

        You can see the answer to this question by adding a `background-color` rule to the `p` tag.  The paragraphs will have the background color in the rule for the `p` tag, and the rest of the page will follow the rule for the `body` tag.

        :::

        ::: details [**What is a style sheet?**]

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        :::

        ::: details [**What is CSS?**]

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

            h2 {
              color: blue;
              font-family: cursive;
            }

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        :::

        </div>

        # Background Color

        -   Find the code in the style sheet that is making the background of the entire page light blue.
        -   Change the code to make the page a different color.
        -   Try to change the background color of just the paragraphs.
      CSD U2 layout style body: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">
        <details>

        <summary><strong>What does the `body` selector do?</strong></summary>

        Because the content of the web page is all inside the `body` tag, the body selector gives style rules for everything on the web page.

        </details>
        <details>
        <summary><strong>What does the `color` property do?</strong></summary>

        The `color` property specifies the color of the text.  If there’s no text, it won’t do anything. Read more at <a href="http://www.w3schools.com/cssref/pr_text_color.asp"> W3Schools - CSS color Property</a>

        </details>
        <details>
        <summary><strong>What does the `text-align` property do?</strong></summary>

        The `text-align` property aligns the text to the left, right, or center. You can read more at <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp">W3Schools - CSS text-align Property</a>

        </details>
        <details>
        <summary><strong>What does the `text-decoration` property do?</strong></summary>

        The `text-decoration` property puts a line over, under, or through a piece of text.  You can read more about the property at <a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp">W3Schools - CSS text-decoration Property</a>

        </details>
        <details>
        <summary><strong>What does the `font-family` property do?</strong></summary>

        The `font-family` property changes the font of the text.  It gives a general description of the type of font that should be used, but each browser might display the font slightly differently.  Read more at <a href="http://www.w3schools.com/cssref/pr_font_font-family.asp">W3chools - CSS font-family Property</a>

        </details>
        <details>
        <summary><strong>What does the `font-size` property do?</strong></summary>

        The `font-size` property changes the size of the text.  You can use general terms, such as `small`, `medium`, and `large`, or you can specify the exact size in pixels, such as `20px`. Read more at <a href="http://www.w3schools.com/cssref/pr_font_font-size.asp">W3Schools - CSS font-size Property</a>

        </details>
        <details>
        <summary><strong>What is a stylesheet?</strong></summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # The Body Element

        -   Find the `body` rule-set in the style sheet.
        -   Discuss with a partner what you think will happen if you add `text-align`, `color`, or other text properties to the `body` rule set.
        -   Try out some different properties to check your guesses.
      CSD U2 layout style body_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What does the body selector do?</strong>
        </summary>

        Because the content of the web page is all inside the `body` tag, the body selector gives style rules for everything on the web page.

        </details>
        <details>
        <summary>
        <strong>What does the color property do?</strong>
        </summary>

        The `color` property specifies the color of the text.  If there’s no text, it won’t do anything. Read more at <a href="http://www.w3schools.com/cssref/pr_text_color.asp" target="_new"> W3Schools - CSS color Property</a>

        </details>
        <details>
        <summary>
        <strong>What does the text-align property do?</strong>
        </summary>

        The `text-align` property aligns the text to the left, right, or center. You can read more at <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp" target="_new">W3Schools - CSS text-align Property</a>

        </details>
        <details>
        <summary>
        <strong>What does the text-decoration property do?</strong>
        </summary>

        The `text-decoration` property puts a line over, under, or through a piece of text.  You can read more about the property at <a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp" target="_new">W3Schools - CSS text-decoration Property</a>

        </details>
        <details>
        <summary>
        <strong>What does the font-family property do?</strong>
        </summary>

        The `font-family` property changes the font of the text.  It gives a general description of the type of font that should be used, but each browser might display the font slightly differently.  Read more at <a href="http://www.w3schools.com/cssref/pr_font_font-family.asp" target="_new">W3chools - CSS font-family Property</a>

        </details>
        <details>
        <summary>
        <strong>What does the font-size property do?</strong>
        </summary>

        The `font-size` property changes the size of the text.  You can use general terms, such as `small`, `medium`, and `large`, or you can specify the exact size in pixels, such as `20px`. Read more at <a href="http://www.w3schools.com/cssref/pr_font_font-size.asp" target="_new">W3Schools - CSS font-size Property</a>

        </details>
        <details>
        <summary>
        <strong>What is a stylesheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>
        h2 {
           color: blue;
           font-family: cursive;
        }
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # The Body Element

        -   Find the `body` rule-set in the style sheet.
        -   Discuss with a partner what you think will happen if you add `text-align`, `color`, or other text properties to the `body` rule set.
        -   Try out some different properties to check your guesses.
      CSD U2 layout style body_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**What does the body selector do?**]

        Because the content of the web page is all inside the `body` tag, the body selector gives style rules for everything on the web page.

        :::

        ::: details [**What does the color property do?**]

        The `color` property specifies the color of the text.  If there’s no text, it won’t do anything. Read more at <a href="http://www.w3schools.com/cssref/pr_text_color.asp" target="_new"> W3Schools - CSS color Property</a>

        :::

        ::: details [**What does the text-align property do?**]

        The `text-align` property aligns the text to the left, right, or center. You can read more at <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp" target="_new">W3Schools - CSS text-align Property</a>

        :::

        ::: details [**What does the text-decoration property do?**]

        The `text-decoration` property puts a line over, under, or through a piece of text.  You can read more about the property at <a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp" target="_new">W3Schools - CSS text-decoration Property</a>

        :::

        ::: details [**What does the font-family property do?**]

        The `font-family` property changes the font of the text.  It gives a general description of the type of font that should be used, but each browser might display the font slightly differently.  Read more at <a href="http://www.w3schools.com/cssref/pr_font_font-family.asp" target="_new">W3chools - CSS font-family Property</a>

        :::

        ::: details [**What does the font-size property do?**]

        The `font-size` property changes the size of the text.  You can use general terms, such as `small`, `medium`, and `large`, or you can specify the exact size in pixels, such as `20px`. Read more at <a href="http://www.w3schools.com/cssref/pr_font_font-size.asp" target="_new">W3Schools - CSS font-size Property</a>

        :::

        ::: details [**What is a stylesheet?**]

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        :::

        ::: details [**What is CSS?**]

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

            h2 {
               color: blue;
               font-family: cursive;
            }

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        :::

        </div>

        # The Body Element

        -   Find the `body` rule-set in the style sheet.
        -   Discuss with a partner what you think will happen if you add `text-align`, `color`, or other text properties to the `body` rule set.
        -   Try out some different properties to check your guesses.
      CSD U2 layout style border: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What colors can I use in CSS?</strong></summary>

        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools - CSS Legal Color Values</a>

        </details>
        <details>
        <summary><strong>How does the code work?</strong></summary>

        Here is the code that is making the image borders:

        <pre>img {
          border-color: saddlebrown;
          border-width: 4px;
          border-style: solid;
          border-radius: 10px;
        }</pre>

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;`, and `border-radius: 10px;` are the rules that make the border.
            </details>
            <details>
            <summary><strong>What does the <code>border-style</code> property do?</strong></summary>

        The `border-style` property determines what kind of border (solid, dotted, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp">W3Schools - CSS border-style Property</a>

        </details>
        <details>
        <summary><strong>What does the <code>border-radius</code> property do?</strong></summary>

        The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp">W3Schools - CSS3 border-radius property</a>

        </details>
        <details>
        <summary><strong>What does the <code>float</code> property do?</strong></summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Borders

        -   Find the rules in the style sheet that set image borders color and width.
        -   Change the color and width of your borders.
        -   Try out some different border styles.
            -   Choose from `dotted`, `dashed`, `solid`, and `double`
        -   Put a border on another type of page element, such as one of the headings or the paragraphs.
      CSD U2 layout style border_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What colors can I use in CSS?</strong>
        </summary>
        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp" target="_new">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp" target="_new">W3Schools - CSS Legal Color Values</a>
        </details>
        <details>
        <summary>
        <strong>How does the code work?</strong>
        </summary>
        Here is the code that is making the image borders:

        <pre>img {
          border-color: saddlebrown;
          border-width: 4px;
          border-style: solid;
          border-radius: 10px;
        }</pre>

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;`, and `border-radius: 10px;` are the rules that make the border.
            </details>
            <details>
            <summary>
            <strong>What does the <code>border-style</code> property do?</strong>
            </summary>
            The `border-style` property determines what kind of border (solid, dotted, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp" target="_new">W3Schools - CSS border-style Property</a>
            </details>
            <details>
            <summary>
            <strong>What does the <code>border-radius</code> property do?</strong>
            </summary>
            The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp" target="_new">W3Schools - CSS3 border-radius property</a>
            </details>
            <details>
            <summary>
            <strong>What does the <code>float</code> property do?</strong>
            </summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Borders

        -   Find the rules in the style sheet that set image borders color and width.
        -   Change the color and width of your borders.
        -   Try out some different border styles.
            -   Choose from `dotted`, `dashed`, `solid`, and `double`
        -   Put a border on another type of page element, such as one of the headings or the paragraphs.
      CSD U2 layout style border_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        ::: details [**What colors can I use in CSS?**]
        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp" target="_new">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp" target="_new">W3Schools - CSS Legal Color Values</a>
        :::

        ::: details [**How does the code work?**]
        Here is the code that is making the image borders:

            img {
              border-color: saddlebrown;
              border-width: 4px;
              border-style: solid;
              border-radius: 10px;
            }

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;`, and `border-radius: 10px;` are the rules that make the border.
            :::

        ::: details [**What does the <code>border-style</code> property do?**]
        The `border-style` property determines what kind of border (solid, dotted, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp" target="_new">W3Schools - CSS border-style Property</a>
        :::

        ::: details [**What does the <code>border-radius</code> property do?**]
        The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp" target="_new">W3Schools - CSS3 border-radius property</a>
        :::

        ::: details [**What does the `float` property do?**]

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        :::

        </div>

        # Borders

        -   Find the rules in the style sheet that set image borders color and width.
        -   Change the color and width of your borders.
        -   Try out some different border styles.
            -   Choose from `dotted`, `dashed`, `solid`, and `double`
        -   Put a border on another type of page element, such as one of the headings or the paragraphs.
      CSD U2 layout style borderradius: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>How does the code work?</strong></summary>

        Here is the code that is making the image borders:

        <pre>img {
          border-color: saddlebrown;
          border-width: 4px;
          border-style: solid;
          border-radius: 10px;
        }</pre>

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;`, and `border-radius: 10px;` are the rules that make the border.
            </details>
            <details>
            <summary><strong>What does the `border-style` property do?</strong>
            </summary>

        The `border-style` property determines what kind of border (solid, dotted, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp">W3Schools - CSS border-style Property</a>

        </details>
        <details>
        <summary><strong>What does the <code>border-radius</code>code> property do?</strong>

        </summary>

        The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp">W3Schools - CSS3 border-radius property</a>

        </details>
        <details>
        <summary><strong>What does the <code>float</code> property do?</strong>
        </summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Border Radius

        -   Look at the `border-radius` property inside your `img` rule-set
        -   Discuss with your partner what you think the property does.
        -   Try different values for border radius and decide which one you like the best.
      CSD U2 layout style borderradius_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>
        Here is the code that is making the image borders:

        <pre>img {
          border-color: saddlebrown;
          border-width: 4px;
          border-style: solid;
          border-radius: 10px;
        }</pre>

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;`, and `border-radius: 10px;` are the rules that make the border.
            </details>
            <details>
            <summary>
            <strong>What does the <code>border-style</code> property do?</strong>
            </summary>
            The `border-style` property determines what kind of border (solid, dotted, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp" target="_new">W3Schools - CSS border-style Property</a>
            </details>
            <details>
            <summary>
            <strong>What does the <code>border-radius</code> property do?</strong>
            </summary>
            The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp" target="_new">W3Schools - CSS3 border-radius property</a>
            </details>
            <details>
            <summary>
            <strong>What does the <code>float</code> property do?</strong>
            </summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Border Radius

        -   Look at the `border-radius` property inside your `img` rule-set
        -   Discuss with your partner what you think the property does.
        -   Try different values for border radius and decide which one you like the best.
      CSD U2 layout style borderradius_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        ::: details [**How does the code work?**]
        Here is the code that is making the image borders:

            img {
              border-color: saddlebrown;
              border-width: 4px;
              border-style: solid;
              border-radius: 10px;
            }

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;`, and `border-radius: 10px;` are the rules that make the border.
            :::

        ::: details [**What does the <code>border-style</code> property do?**]
        The `border-style` property determines what kind of border (solid, dotted, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp" target="_new">W3Schools - CSS border-style Property</a>
        :::

        ::: details [**What does the <code>border-radius</code> property do?**]
        The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp" target="_new">W3Schools - CSS3 border-radius property</a>
        :::

        ::: details [**What does the <code>float</code> property do?**]

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        :::

        </div>

        # Border Radius

        -   Look at the `border-radius` property inside your `img` rule-set
        -   Discuss with your partner what you think the property does.
        -   Try different values for border radius and decide which one you like the best.
      CSD U2 layout style float: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        <details>

        <summary><strong>How does the code work?</strong></summary>

        Here is the code that is making the image float on the left hand side of the page:

        <pre>img {
          float: left;
        }</pre>

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `float: left;` is the rule that makes the image float to the left.
            </details>
            <details>
            <summary><strong>What does the <code>float</code> property do?</strong></summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Float

        -   Look at the `float` property inside your `img` rule-set
        -   Discuss with your partner what you think the property does.
        -   Change the value from `left` to `right`.
      CSD U2 layout style float_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>
        Here is the code that is making the image float on the left hand side of the page:

        <pre>img {
          float: left;
        }</pre>

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `float: left;` is the rule that makes the image float to the left.
            </details>
            <details>
            <summary>
            <strong>
            What does the <code>float</code> property do?

        </strong>
        </summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Float

        -   Look at the `float` property inside your `img` rule-set
        -   Discuss with your partner what you think the property does.
        -   Change the value from `left` to `right`.
      CSD U2 layout style float_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**Wie funktioniert der Code?**]
        Hier ist der Code, der das Bild auf der linken Seite der Seite schweben lässt:

            img {
              float: left;
            }

        -   `img` ist der _selector_.  Er gibt an, welche Elemente den Regeln innerhalb der geschweiften Klammern folgen müssen, in diesem Fall die Bilder.
        -   `float: left;` ist die Regel, die das Bild nach links schweben läßt.
            :::

        ::: Details [**Was macht die `float` Eigenschaft?**]

        Die Eigenschaft `float` macht ein Element "schwebend", was bedeutet, dass die Elemente, die nach ihm kommen, alle um es herum fließen.  Wenn der `float`-Wert `links` ist, wird das Element nach links fliessen, und die Elemente danach werden rechts davon auftauchen.  Wenn der `float`-Wert `right` ist, wird das Element nach rechts fliessen, und die Elemente nach ihm werden links erscheinen.  Sie können mehr über diese Eigenschaft unter <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS-Eigenschaft float</a> lesen.

        :::

        </div>

        # Float

        -   Schau Dir die `float`-Eigenschaft in Deinem `img`-Regelsatz an
        -   Besprich mit Deinem Partner, was die Eigenschaft Deiner Meinung nach bewirkt.
        -   Änderne den Wert von `links` auf `rechts`.
      CSD U2 layout style freeplay: |-
        # Personal Web Site

        Try out some of these new CSS properties on your personal web site.

        -   Add styling of your choice to your web site. Be sure to use at least three new CSS properties.

        # Checklist

        -   At least three of the following CSS Properties are used:

            -   `background-color`
            -   `height`
            -   `width`
            -   `border-style`
            -   `border-radius`
            -   `border-width`
            -   `float`
            -   `margin`

        We encourage you to use more than three, though!  Explore additional CSS properties and add them to your page.
      CSD U2 layout style freeplay_2018: |-
        # Personal Web Site

        Try out some of these new CSS properties on your personal web site.

        -   Add styling of your choice to your web site. Be sure to use at least three new CSS properties.

        # Checklist

        -   At least three of the following CSS Properties are used:

            -   `background-color`
            -   `height`
            -   `width`
            -   `border-style`
            -   `border-radius`
            -   `border-width`
            -   `float`
            -   `margin`

        We encourage you to use more than three, though!  Explore additional CSS properties and add them to your page.
      CSD U2 layout style freeplay_2019: |-
        # Personal Web Site

        Try out some of these new CSS properties on your personal web site.

        -   Add styling of your choice to your web site. Be sure to use at least three new CSS properties.

        # Checklist

        -   At least three of the following CSS Properties are used:

            -   `background-color`
            -   `height`
            -   `width`
            -   `border-style`
            -   `border-radius`
            -   `border-width`
            -   `float`
            -   `margin`

        We encourage you to use more than three, though!  Explore additional CSS properties and add them to your page.
      CSD U2 layout style margin: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>How
        does the code work?</strong></summary>\n\nHere is the code that is putting
        extra space around the images:\n\n<pre>img {\n\tmargin: 10px;\n}</pre>\n\n-
        \  `img` is the _selector_.  It specifies which elements will have to follow
        the rules inside the curly braces, in this case, the images.\n-   `margin:
        10px;` is the rule that puts 10 pixels of space around the image.\n    </details>\n
        \   <details>\n    <summary><strong>What does the `margin` property do?</strong></summary>\n\nThe
        `margin` property determines how much space will be around the image.  Most
        of the time, you will define in the margin in pixels.  You can read more about
        this property at <a href=\"http://www.w3schools.com/cssref/pr_margin.asp\">W3Schools
        - CSS margin Property</a>\n\n</details>\n<details>\n<summary><strong>What
        does `px` mean / What is a pixel?</strong></summary>\n\nPixel, which is abbreviated
        `px`, is how elements are measured in CSS.  It’s the size of a single point
        of light on the screen.\n\n</details>\n</div>\n\n# Margin\n\nMargins specify
        how much space should be around an element.\n\n-   Find the `margin` property
        in the `img` rule-set.\n-   Change the margin to be larger, and discuss the
        effect with a partner.\n-   Choose another element type and give it a margin,
        too."
      CSD U2 layout style margin_2018: "<div style=\"float: right; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>How
        does the code work?</strong>\n</summary>\nHere is the code that is putting
        extra space around the images:\n\n<pre>img {\n\tmargin: 10px;\n}</pre>\n\n-
        \  `img` is the _selector_.  It specifies which elements will have to follow
        the rules inside the curly braces, in this case, the images.\n\n-   `margin:
        10px;` is the rule that puts 10 pixels of space around the image.\n    </details>\n
        \   <details>\n    <summary>\n    <strong>What does the `margin` property
        do?</strong>\n    </summary>\n\nThe `margin` property determines how much
        space will be around the image.  Most of the time, you will define in the
        margin in pixels.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_margin.asp\"
        target=\"_new\">W3Schools - CSS margin Property</a>\n\n</details>\n<details>\n<summary>\n<strong>What
        does `px` mean / What is a pixel?</strong>\n</summary>\n\nPixel, which is
        abbreviated `px`, is how elements are measured in CSS.  It’s the size of a
        single point of light on the screen.\n\n</details>\n</div>\n\n# Margin\n\nMargins
        specify how much space should be around an element.\n\n-   Find the `margin`
        property in the `img` rule-set.\n-   Change the margin to be larger, and discuss
        the effect with a partner.\n-   Choose another element type and give it a
        margin, too."
      CSD U2 layout style margin_2019: "<div class=\"no-pullthrough\" style=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary>\n<strong>Wie funktioniert der Code?</strong>\n</summary>\nHier
        ist der Code, der zusätzlichen Platz um die Bilder herum schafft:\n\n<pre>img
        {\n\tmargin: 10px;\n}</pre>\n\n-   `img` ist der _Selektor_.  Es legt fest,
        welche Elemente den Regeln innerhalb der geschweiften Klammern (in diesem
        Fall den Bildern) folgen müssen.\n\n-   `margin: 10px;` ist die Regel, die
        10 Pixel Platz um das Bild schafft.\n    </details>\n    <details>\n    <summary>\n
        \   <strong>Was bewirkt die \"Margin\"-Eigenschaft?</strong>\n    </summary>\n\nDie
        Eigenschaft `margin` bestimmt, wie viel Platz um das Bild herum sein wird.
        \ Meistens wird der Rand in Pixeln definieren. Du kannst mehr über diese Eigenschaft
        erfahren unter <a href=\"http://www.w3schools.com/cssref/pr_margin.asp\" target=\"_new\">W3Schools
        - CSS margin Property</a>.\n\n</details>\n<details>\n<summary>\n<strong>Was
        bedeutet `px` / Was ist ein Pixel?</strong>\n</summary>\n\nPixel, abgekürzt
        `px`, ist die Art und Weise, wie Elemente in CSS gemessen werden.  Es hat
        die Größe eines einzelnen Lichtpunktes auf dem Bildschirm.\n\n</details>\n</div>\n\n#
        Margin\n\nMargins geben an, wie viel Platz um ein Element herum sein soll.\n\n-
        \  Suche die Eigenschaft `margin` im Regelsatz `img`.\n-   Vergrößere 'margin'
        und besprechen die Wirkung mit einem Partner.\n-   Wählen einen anderen Elementtyp
        und gib ihm ebenfalls einen Rand."
      CSD U2 layout style sample: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What does the `body` selector do?</strong></summary>

        Because the content of the web page is all inside the `body` tag, the body selector gives style rules for everything on the web page.

        </details>
        <details>
        <summary><strong>What does the `border-style` property do?</strong></summary>

        The `border-style` property determines what kind of border (solid, dotted, dashed, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp">W3Schools - CSS border-style Property</a>

        </details>
        <details>
        <summary><strong>What does the `border-radius` property do?</strong></summary>

        The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp">W3Schools - CSS3 border-radius property</a>

        </details>
        <details>
        <summary><strong>What does the `float` property do?</strong></summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Layout and Style

        -   Look through web page below for new styles.
        -   Open the style sheet
        -   With your partner, discuss which parts of the CSS code you think are making the page appear different.
            -   What makes the entire page blue?
            -   How are the images positioned to the left of all the other elements?
            -   What made the image corners rounded?

        In the next few levels, you'll be changing and adding new styles on this page.
      CSD U2 layout style sample_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What does the body selector do?</strong>
        </summary>

        Because the content of the web page is all inside the `body` tag, the body selector gives style rules for everything on the web page.

        </details>
        <details>
        <summary>
        <strong>What does the border-style property do?</strong>
        </summary>

        The `border-style` property determines what kind of border (solid, dotted, dashed, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp" target="_new">W3Schools - CSS border-style Property</a>

        </details>
        <details>
        <summary>
        <strong>What does the border-radius property do?</strong>
        </summary>

        The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp" target="_new">W3Schools - CSS3 border-radius property</a>

        </details>
        <details>
        <summary>
        <strong>What does the float property do?</strong>
        </summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Layout and Style

        -   Look through web page below for new styles.
        -   Open the style sheet
        -   With your partner, discuss which parts of the CSS code you think are making the page appear different.
            -   What makes the entire page blue?
            -   How are the images positioned to the left of all the other elements?
            -   What made the image corners rounded?

        In the next few levels, you'll be changing and adding new styles on this page.
      CSD U2 layout style sample_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**What does the body selector do?**]

        Because the content of the web page is all inside the `body` tag, the body selector gives style rules for everything on the web page.

        :::

        ::: details [**What does the border-style property do?**]

        The `border-style` property determines what kind of border (solid, dotted, dashed, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp" target="_new">W3Schools - CSS border-style Property</a>

        :::

        ::: details [**What does the border-radius property do?**]

        The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp" target="_new">W3Schools - CSS3 border-radius property</a>

        :::

        ::: details [**What does the float property do?**]

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        :::

        </div>

        # Layout and Style

        -   Look through web page below for new styles.
        -   Open the style sheet
        -   With your partner, discuss which parts of the CSS code you think are making the page appear different.
            -   What makes the entire page blue?
            -   How are the images positioned to the left of all the other elements?
            -   What made the image corners rounded?

        In the next few levels, you'll be changing and adding new styles on this page.
      CSD U2 layout style width: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>How
        does the code work?</strong></summary>\nHere is the code that is making the
        image its current size:\n\n<pre>img {\n\twidth: 250px;\n}</pre>\n\n-   `img`
        is the _selector_.  It specifies which elements will have to follow the rules
        inside the curly braces, in this case, the images.\n-   `width: 250px` is
        the rule that makes the image 250 pixels wide.  It also changes the height
        so that the image does not stretch.\n    </details>\n    <details>\n    <summary><strong>What
        does the `width` property do?</strong></summary>\n\nThe `width` property determines
        how wide the element will be.  Most of the time, you will define in the width
        in pixels, which makes the element take up an exact amount of space on the
        screen.  Defining the width will also change the height so that the image
        does not stretch, unless you have also defined the height.  You can read more
        about this property at <a href=\"http://www.w3schools.com/cssref/pr_dim_width.asp\">W3Schools
        - CSS width Property</a>\n\n</details>\n<details>\n<summary><strong>What does
        the `height` property do?</strong></summary>\n\nThe `height` property determines
        how tall the element will be.  Most of the time, you will define in the height
        in pixels, which makes the element take up an exact amount of space on the
        screen.  Defining the height will also change the width so that the image
        does not stretch, unless you have also defined the width.  You can read more
        about this property at <a href=\"http://www.w3schools.com/cssref/pr_dim_height.asp\">W3Schools
        - CSS width Property</a>\n\n</details>\n<details>\n<summary><strong>What does
        `px` mean / What is a pixel?</strong></summary>\n\nPixel, which is abbreviated
        `px`, is how elements are measured in CSS.  It’s the size of a single point
        of light on the screen.\n\n</details>\n<details>\n<summary><strong>Why does
        using a width and height rule at the same time sometimes stretch out the image?</strong></summary>\n\nWhen
        the width of an images changes, the height must change by the same percentage,
        otherwise the image will stretch.  For example, if you double the width of
        an image, you must also double the height, or the image will be stretched
        horizonally.  When you only define the width or the height, the computer will
        automatically change the other property so that the image looks the same.\n\n</details>\n</div>\n\n#
        Width and Height\n\n-   Find the property in the style sheet that controls
        the width of the images.\n-   Change the width of the images to be larger
        or smaller.\n-   Create a new rule with a `height` property to control the
        height of the images.\n-   Use the `width` property in the `p` rule-set to
        change the width of your paragraphs."
      CSD U2 layout style width_2018: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>How
        does the code work?</strong>\n</summary>\n\nHere is the code that is making
        the image its current size:\n\n    img {\n    \twidth: 250px;\n    }\n\n-
        \  `img` is the _selector_.  It specifies which elements will have to follow
        the rules inside the curly braces, in this case, the images.\n-   `width:
        250px` is the rule that makes the image 250 pixels wide.  It also changes
        the height so that the image does not stretch.\n\n</details>\n<details>\n<summary>\n<strong>What
        does the <code>width</code> property do?</strong>\n</summary>\n\nThe `width`
        property determines how wide the element will be.  Most of the time, you will
        define the width in pixels, which makes the element take up an exact amount
        of space on the screen.  Defining the width will also change the height so
        that the image does not stretch, unless you have also defined the height.
        \ You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_dim_width.asp\"
        target=\"_new\">W3Schools - CSS width Property</a>\n\n</details>\n<details>\n<summary>\n<strong>What
        does the <code>height</code> property do?</strong>\n</summary>\n\nThe `height`
        property determines how tall the element will be.  Most of the time, you will
        define the height in pixels, which makes the element take up an exact amount
        of space on the screen.  Defining the height will also change the width so
        that the image does not stretch, unless you have also defined the width.  You
        can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_dim_height.asp\"
        target=\"_new\">W3Schools - CSS height Property</a>\n\n</details>\n<details>\n<summary>\n<strong>What
        does <code>px</code> mean / What is a pixel?</strong>\n</summary>\n\nPixel,
        which is abbreviated `px`, is how elements are measured in CSS.  It’s the
        size of a single point of light on the screen.\n\n</details>\n<details>\n<summary>\n<strong>Why
        does using a width and height rule at the same time sometimes stretch out
        the image?</strong>\n</summary>\n\nWhen the width of an images changes, the
        height must change by the same percentage, otherwise the image will stretch.
        \ For example, if you double the width of an image, you must also double the
        height, or the image will be stretched horizonally.  When you only define
        the width or the height, the computer will automatically change the other
        property so that the image looks the same.\n\n</details>\n</div>\n\n# Width
        and Height\n\n-   Find the property in the style sheet that controls the width
        of the images.\n-   Change the width of the images to be larger or smaller.\n-
        \  Create a new rule with a `height` property to control the height of the
        images.\n-   Use the `width` property in the `p` rule-set to change the width
        of your paragraphs."
      CSD U2 layout style width_2019: "<div class=\"no-pullthrough\" style=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n\n:::
        details [**How does the code work?**]\n\nHere is the code that is making the
        image its current size:\n\n    img {\n    \twidth: 250px;\n    }\n\n-   `img`
        is the _selector_.  It specifies which elements will have to follow the rules
        inside the curly braces, in this case, the images.\n-   `width: 250px` is
        the rule that makes the image 250 pixels wide.  It also changes the height
        so that the image does not stretch.\n\n:::\n\n::: details [**What does the
        `width` property do?**]\n\nThe `width` property determines how wide the element
        will be.  Most of the time, you will define the width in pixels, which makes
        the element take up an exact amount of space on the screen.  Defining the
        width will also change the height so that the image does not stretch, unless
        you have also defined the height.  You can read more about this property at
        <a href=\"http://www.w3schools.com/cssref/pr_dim_width.asp\" target=\"_new\">W3Schools
        - CSS width Property</a>\n\n:::\n\n::: details [**What does the `height` property
        do?**]\n\nThe `height` property determines how tall the element will be.  Most
        of the time, you will define the height in pixels, which makes the element
        take up an exact amount of space on the screen.  Defining the height will
        also change the width so that the image does not stretch, unless you have
        also defined the width.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_dim_height.asp\"
        target=\"_new\">W3Schools - CSS height Property</a>\n\n:::\n\n::: details
        [**What does `px` mean / What is a pixel?**]\n\nPixel, which is abbreviated
        `px`, is how elements are measured in CSS.  It’s the size of a single point
        of light on the screen.\n\n:::\n\n::: details [**Why does using a width and
        height rule at the same time sometimes stretch out the image?**]\n\nWhen the
        width of an images changes, the height must change by the same percentage,
        otherwise the image will stretch.  For example, if you double the width of
        an image, you must also double the height, or the image will be stretched
        horizonally.  When you only define the width or the height, the computer will
        automatically change the other property so that the image looks the same.\n\n:::\n\n</div>\n\n#
        Width and Height\n\n-   Find the property in the style sheet that controls
        the width of the images.\n-   Change the width of the images to be larger
        or smaller.\n-   Create a new rule with a `height` property to control the
        height of the images.\n-   Use the `width` property in the `p` rule-set to
        change the width of your paragraphs."
      CSD U2 link demo: |-
        # Making a Multi-page Site

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What are hyperlinks?</strong>
        </summary>

        Hyperlinks can connect to local web pages or external web pages. To add navigation to your website you will need to add hyperlinks which connect your individual web pages. You can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page. <br> <br>

        For example to link to the unique houses page you would add the following code inside your `<body>` element. <br><br>

        <pre>
        &lt;a href=”houses.html”&gt; Unique Houses &lt;/a&gt;
        </pre>

        </details>
        <details>
        <summary><strong>How do I add a hyperlink?</strong>
        </summary>

        You can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page. <br> <br>

        For example to link to the unique houses page you would add the following code inside your `<body>` element. <br><br>

        <pre>
        &lt;a href=”houses.html”&gt; Unique Houses &lt;/a&gt;
        </pre>

        </details>
        </div>

        A web site should include more than one web page, and they should connect to each other.   Here's an example of a project with multiple pages that are connected by hyperlinks (the blue underlined words that take you to another page when you click on them).

        # Do This

        -   Use the inspector tool to see the code that creates the hyperlinks on the top of index.html.
        -   Discuss with your partner how you think that code works.
        -   Click on recipe.html in the files list on the left hand side.  Add a hyperlink to the top of this page that will take you back to index.html.
      CSD U2 link demo_2018: |-
        # Making a Multi-page Site

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What are hyperlinks?</strong></summary>

        Hyperlinks can connect to local web pages or external web pages. To add navigation to your website you will need to add hyperlinks which connect your individual web pages. You can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page. <br> <br>

        For example to link to the unique houses page you would add the following code inside your `<body>` element. <br><br>

        <pre>
        &lt;a href="houses.html"&gt; Unique Houses &lt;/a&gt;
        </pre>

        </details>

        <details>
        <summary>
        <strong>How do I add a hyperlink?</strong>
        </summary>

        You can <strong>add hyperlinks to your web page using the `<a>` element</strong>.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page. <br> <br>

        For example to link to the unique houses page you would add the following code inside your `<body>` element. <br><br>

        <pre>
        &lt;a href="houses.html"&gt; Unique Houses &lt;/a&gt;
        </pre>

        </details>
        </div>

        A web site should include more than one web page, and they should connect to each other.   Here's an example of a project with multiple pages that are connected by hyperlinks (the blue underlined words that take you to another page when you click on them).

        # Do This

        -   Use the inspector tool to see the code that creates the hyperlinks on the top of index.html.
        -   Discuss with your partner how you think that code works.
        -   Click on recipe.html in the files list on the left hand side.  Add a hyperlink to the top of this page that will take you back to index.html.
      CSD U2 link demo_2019: |-
        # Eine mehrseitige Website erstellen

        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**Was sind Hyperlinks?**]

        Hyperlinks können auf lokale Webseiten oder externe Webseiten verweisen. Um eine Navigation auf Deine Website zu ermöglichen, musst du Hyperlinks hinzufügen, die Deine einzelnen Webseiten miteinander verbinden. Du kannst **Hyperlinks zu deiner Webseite mit dem `<a>` Element** hinzufügen.  Der Text, der als Hyperlink angezeigt werden soll, geht zwischen den öffnenden und schließenden Hyperlink-Tags. Das `<a>` Element hat ein Attribut `href`, welches der Ort ist, zu dem man verlinken soll.  Der Ort einer lokalen Seite ist nur der Dateipfad für diese Seite. <br> <br>

        Um zum Beispiel auf die Unique Houses Seite zu verlinken, würdest du den folgenden Code in dein `<body>` Element einfügen. <br>\<<br>

            <a href="houses.html"> Einzigartige Häuser </a>

        :::

        ::: details [**Wie füge ich einen Hyperlink hinzu?**]

        Du kannst <strong>Hyperlinks zu deiner Webseite mit dem `<a>` Element</strong> hinzufügen.  Der Text, den du als Hyperlink anzeigen lassen willst, geht zwischen den öffnenden und schließenden Hyperlink-Tags. Das `<a>` Element hat ein Attribut `href`, welches der Ort ist, zu dem man verlinken soll.  Der Ort einer lokalen Seite ist nur der Dateipfad für diese Seite. <br> <br>

        Um zum Beispiel auf die Unique Houses Seite zu verlinken, würdest du den folgenden Code in dein `<body>` Element einfügen. <br>\<<br>

            <a href="houses.html"> Einzigartige Häuser </a>

        :::

        </div>

        Eine Website sollte mehr als eine Webseite enthalten, und du solltest sie miteinander verbinden.   Hier ist ein Beispiel für ein Projekt mit mehreren Seiten, die durch Hyperlinks verbunden sind (die blau unterstrichenen Wörter, die du zu einer anderen Seite führen, wenn du darauf klickst).

        # Mache Folgendes

        -   Verwende das Inspektor-Tool, um den Code zu sehen, der die Hyperlinks oben in index.html erzeugt.
        -   Bespreche mit Deinem Partner, wie dieser Code Deiner Meinung nach funktioniert.
        -   Klicke auf recipe.html in der Dateiliste auf der linken Seite.  Füge oben auf dieser Seite einen Hyperlink ein, der Dich zurück zur index.html führt.
      CSD U2 lists intro: |-
        # Lists

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What are the two types of lists?</strong>
        </summary>
         There are two types of lists in HTML, ordered and unordered lists.
        </details>

        <details>
        <summary><strong>What is an unordered list?</strong>
        </summary>

        An unordered list is just a set of bulleted items.

        An unordered list element has the tag `<ul> </ul>`. This is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist. Each item in the list is marked by a list item element `<li> </li>`. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element, which means that it goes inside of its parent element, the unordered list.

        </details>

        <details>
        <summary><strong>How do I make an unordered list?</strong>
        </summary>

        Making an unordered list has two steps: making the list and adding the list items.  To make the unordered list, write the unordered list tags `<ul> </ul>`.  Next, add your list items **inside** the unordered list tags.  To make each list item, use the list item tags `<li> </li>` and write the list item inside the tags.

        It can be helpful to indent your `<li> </li>` tags so it's clear they are contained in the `<ul> </ul>` tags.

        </details>

        <details>
        <summary><strong>What is an ordered list?</strong>
        </summary>

        An ordered list is a set of bulleted items which are numbered.

        An ordered list element has the tags `<ol> </ol>`. This is an abbreviation for <strong>O</strong>rdered <strong>L</strong>ist. Each item in the list is marked by a list item element `<li> </li>`. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element, which means that it goes inside of its parent element, the ordered list.

        </details>

        <details>
        <summary><strong>How do I make an ordered list?</strong>
        </summary>

        Making an ordered list has two steps: making the list and adding the list items. To make the ordered list, write the ordered list tags `<ol> </ol>`. Next, add your list items **inside** the ordered list tags. To make each list item, use the list item tags `<li> </li>` and write the list item inside the tags.

        It can be helpful to indent your `<li> </li>` tags so it's clear they are contained in the `<ol> </ol>` tags.

        </details>
        </div>

        You can also use HTML to make different types of lists on your web page.  This recipe includes two different types of lists, one ordered (with numbers) and one unordered (with bullets).

        # Do This

        -   Use the inspector tool to see the code that is making the two different kinds of lists.
        -   Make sure you and your partner agree on what the different tags do.
        -   Fix the code so that the second item in each list displays correctly
      CSD U2 lists intro_2018: |-
        # Lists

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What are the two types of lists?</strong>
        </summary>
         There are two types of lists in HTML, ordered and unordered lists.
        </details>

        <details>
        <summary>
        <strong>What is an unordered list?</strong>
        </summary>

        An unordered list is just a set of bulleted items.

        An unordered list element has the tag `<ul> </ul>`. This is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist. Each item in the list is marked by a list item element `<li> </li>`. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element, which means that it goes inside of its parent element, the unordered list.

        </details>

        <details>
        <summary>
        <strong>How do I make an unordered list?</strong>
        </summary>

        Making an unordered list has two steps: making the list and adding the list items.  To make the unordered list, write the unordered list tags `<ul> </ul>`.  Next, add your list items **inside** the unordered list tags.  To make each list item, use the list item tags `<li> </li>` and write the list item inside the tags.
        <br /><br />
        It can be helpful to indent your `<li> </li>` tags so it's clear they are contained in the `<ul> </ul>` tags.

        </details>

        <details>
        <summary>
        <strong>What is an ordered list?</strong>
        </summary>

        An ordered list is a set of bulleted items which are numbered.

        An ordered list element has the tags `<ol> </ol>`. This is an abbreviation for <strong>O</strong>rdered <strong>L</strong>ist. Each item in the list is marked by a list item element `<li> </li>`. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element, which means that it goes inside of its parent element, the ordered list.

        </details>
        <details>
        <summary>
        <strong>How do I make an ordered list?</strong>
        </summary>

        Making an ordered list has two steps: making the list and adding the list items. To make the ordered list, write the ordered list tags `<ol> </ol>`. Next, add your list items **inside** the ordered list tags. To make each list item, use the list item tags `<li> </li>` and write the list item inside the tags.
        <br /><br/>
        It can be helpful to indent your `<li> </li>` tags so it's clear they are contained in the `<ol> </ol>` tags.

        </details>
        </div>

        You can also use HTML to make different types of lists on your web page.  This recipe includes two different types of lists, one ordered (with numbers) and one unordered (with bullets).

        # Do This

        -   Use the inspector tool to see the code that is making the two different kinds of lists.
        -   Make sure you and your partner agree on what the different tags do.
        -   Fix the code so that the second item in each list displays correctly
      CSD U2 lists intro_2019: |-
        # Lists

        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        ::: details [**What are the two types of lists?**]
         There are two types of lists in HTML, ordered and unordered lists.
        :::

        ::: details [**What is an unordered list?**]

        An unordered list is just a set of bulleted items.

        An unordered list element has the tag `<ul> </ul>`. This is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist. Each item in the list is marked by a list item element `<li> </li>`. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element, which means that it goes inside of its parent element, the unordered list.

        :::

        ::: details [**How do I make an unordered list?**]

        Making an unordered list has two steps: making the list and adding the list items.  To make the unordered list, write the unordered list tags `<ul> </ul>`.  Next, add your list items **inside** the unordered list tags.  To make each list item, use the list item tags `<li> </li>` and write the list item inside the tags.
        <br /><br />
        It can be helpful to indent your `<li> </li>` tags so it's clear they are contained in the `<ul> </ul>` tags.
        :::

        ::: details [**What is an ordered list?**]

        An ordered list is a set of bulleted items which are numbered.

        An ordered list element has the tags `<ol> </ol>`. This is an abbreviation for <strong>O</strong>rdered <strong>L</strong>ist. Each item in the list is marked by a list item element `<li> </li>`. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element, which means that it goes inside of its parent element, the ordered list.

        :::

        ::: details [**How do I make an ordered list?**]

        Making an ordered list has two steps: making the list and adding the list items. To make the ordered list, write the ordered list tags `<ol> </ol>`. Next, add your list items **inside** the ordered list tags. To make each list item, use the list item tags `<li> </li>` and write the list item inside the tags.
        <br /><br/>
        It can be helpful to indent your `<li> </li>` tags so it's clear they are contained in the `<ol> </ol>` tags.

        :::

        </div>

        You can also use HTML to make different types of lists on your web page.  This recipe includes two different types of lists, one ordered (with numbers) and one unordered (with bullets).

        # Do This

        -   Use the inspector tool to see the code that is making the two different kinds of lists.
        -   Make sure you and your partner agree on what the different tags do.
        -   Fix the code so that the second item in each list displays correctly
      CSD U2 navigation: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What are hyperlinks?</strong>
        </summary>

        Hyperlinks can connect to local web pages or external web pages. To add navigation to your website you will need to add hyperlinks which connect your individual web pages. You can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page. <br> <br>

        For example to link to the unique houses page you would add the following code inside your `<body>` element. <br><br>

        <pre>
        &lt;a href=”houses.html”&gt; Unique Houses &lt;/a&gt;
        </pre>

        </details>
        <details>
        <summary>
        <strong>How do I add a hyperlink?</strong>
        </summary>

        You can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page. <br> <br>

        For example to link to the unique houses page you would add the following code inside your `<body>` element. <br><br>

        <pre>
        &lt;a href=”houses.html”&gt; Unique Houses &lt;/a&gt;
        </pre>

        </details>
        </div>

        # Create a Navigation Bar

        Here's your project from before.  You'll be linking the two pages by creating a **navigation bar** at the top of the page.  Websites usually have the same navigation bar across all of their pages so you can get back and forth between things on the site.  You can see an example of a navigation bar on <a href="https://studio.code.org/projects/weblab/2KO4FIjN89QPeYnTG_NzLIjroaG8daOY3jRl5uHm1Co/" target="_new">this page</a>

        # Do This

        -   In your home page (index.html), add two hyperlinks at the top of the page, one to your lists page, and one to the home page.
            -   _Even though it might seem strange to link a page to itself, it's less confusing if the navigation bar is exactly the same on every page._
        -   Copy the code for the navigation bar, then add it to the top of your lists page.
        -   Test your links in the preview area by clicking on them.
      CSD U2 navigation_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What are hyperlinks?</strong>
        </summary>

        Hyperlinks can connect to local web pages or external web pages. To add navigation to your website you will need to add hyperlinks which connect your individual web pages. You can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page.
        <br/><br/>
        For example to link to the unique houses page you would add the following code inside your `<body>` element.

        <pre>
        &lt;a href="houses.html"&gt; Unique Houses &lt;/a&gt;
        </pre>

        </details>
        <details>
        <summary>
        <strong>How do I add a hyperlink?</strong>
        </summary>

        You can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page.
        <br/><br/>
        For example to link to the unique houses page you would add the following code inside your `<body>` element.

        <pre>
        &lt;a href="houses.html"&gt; Unique Houses &lt;/a&gt;
        </pre>

        </details>
        </div>

        # Create a Navigation Bar

        Here's your project from before.  You'll be linking the two pages by creating a **navigation bar** at the top of the page.  Websites usually have the same navigation bar across all of their pages so you can get back and forth between things on the site.  You can see an example of a navigation bar on <a href="https://studio.code.org/projects/weblab/2KO4FIjN89QPeYnTG_NzLIjroaG8daOY3jRl5uHm1Co/" target="_new">this page</a>

        # Do This

        -   In your home page (index.html), add two hyperlinks at the top of the page, one to your lists page, and one to the home page.
            -   _Even though it might seem strange to link a page to itself, it's less confusing if the navigation bar is exactly the same on every page._
        -   Copy the code for the navigation bar, then add it to the top of your lists page.
        -   Test your links in the preview area by clicking on them.
      CSD U2 navigation_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**What are hyperlinks?**]

        Hyperlinks can connect to local web pages or external web pages. To add navigation to your website you will need to add hyperlinks which connect your individual web pages. You can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page.
        <br/><br/>
        For example to link to the unique houses page you would add the following code inside your `<body>` element.

            <a href="houses.html"> Unique Houses </a>

        :::

        ::: details [**How do I add a hyperlink?**]

        You can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page.
        <br/><br/>
        For example to link to the unique houses page you would add the following code inside your `<body>` element.

            <a href="houses.html"> Unique Houses </a>

        :::

        </div>

        # Create a Navigation Bar

        Here's your project from before.  You'll be linking the two pages by creating a **navigation bar** at the top of the page.  Websites usually have the same navigation bar across all of their pages so you can get back and forth between things on the site.  You can see an example of a navigation bar on <a href="https://studio.code.org/projects/weblab/2KO4FIjN89QPeYnTG_NzLIjroaG8daOY3jRl5uHm1Co/" target="_new">this page</a>

        # Do This

        -   In your home page (index.html), add two hyperlinks at the top of the page, one to your lists page, and one to the home page.
            -   _Even though it might seem strange to link a page to itself, it's less confusing if the navigation bar is exactly the same on every page._
        -   Copy the code for the navigation bar, then add it to the top of your lists page.
        -   Test your links in the preview area by clicking on them.
      CSD U2 new page: |-
        # Create a New Page for Your Website.

        Here's your project from before.  You'll be adding another page.  Your new page can be a top 10 list, a recipe, or anything you like.

        # Do This

        -   Add a new HTML file by clicking  ![](<https://images.code.org/9b9f9f78962ef77664333d1b0f762ff1-image-1493252448756.19.38 PM.png>).  The new file will appear in the files list on the left side of the workspace.
        -   Rename the file, either by right clicking it and choosing "Rename", or by clicking on it when it's already highlighted.  **Make sure the name is unique, descriptive and ends in ".html"**.
        -   Use HTML to fill out your new page.  It should include:
            -   a list
            -   a heading
      CSD U2 new page_2018: |-
        # Create a New Page for Your Website.

        Here's your project from before.  You'll be adding another page.  Your new page can be a top 10 list, a recipe, or anything you like.

        # Do This

        -   Add a new HTML file by clicking  ![](<https://images.code.org/9b9f9f78962ef77664333d1b0f762ff1-image-1493252448756.19.38 PM.png>).  The new file will appear in the files list on the left side of the workspace.
        -   Rename the file, either by right clicking it and choosing "Rename", or by clicking on it when it's already highlighted.  **Make sure the name is unique, descriptive and ends in ".html"**.
        -   Use HTML to fill out your new page.  It should include:
            -   a list
            -   a heading
      CSD U2 new page_2019: |-
        # Create a New Page for Your Website.

        Here's your project from before.  You'll be adding another page.  Your new page can be a top 10 list, a recipe, or anything you like.

        # Do This

        -   Add a new HTML file by clicking  ![](<https://images.code.org/9b9f9f78962ef77664333d1b0f762ff1-image-1493252448756.19.38 PM.png>).  The new file will appear in the files list on the left side of the workspace.
        -   Rename the file, either by right clicking it and choosing "Rename", or by clicking on it when it's already highlighted.  **Make sure the name is unique, descriptive and ends in ".html"**.
        -   Use HTML to fill out your new page.  It should include:
            -   a list
            -   a heading
      CSD U2 ordered list: "# Ordered Lists\n\n<div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary><strong>What are the two types of lists?</strong>\n</summary>\n
        There are two types of lists in HTML, ordered and unordered lists.\n</details>\n<details>\n<summary><strong>What
        is an ordered list?</strong>\n</summary>\n\nAn ordered list is a set of bulleted
        items which are numbered.\n\nAn ordered list element has the tag `<ol>` .
        This is an abbreviation for <strong>O</strong>rdered <strong>L</strong>ist.
        Each item in the list is marked by a list item element `<li>`;. This is an
        abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item
        element is a child element, which means that it goes inside of its parent
        element, the ordered list (`<ol>`).\n\n</details>\n\n<details>\n<summary><strong>How
        do I make an ordered list?</strong>\n</summary>\n\nMaking an ordered list
        has two steps: making the list and adding the list items.  To make the ordered
        list, write the ordered list tags `<ol></ol>`.  Next, add your list items
        **inside** the ordered list tags.  To make each list item, use the list item
        tags `<li></li>` and write the list item inside the tags.\n\nIt can be helpful
        to indent your `<li>` tags so it's clear they are contained in the `<ol>`
        tag.\n\n</details>\n\n<details>\n<summary><strong>Show me working code.</strong>\n</summary>\n\n<table
        border=\"1\">\n<tr>\n<td>Example</td>\n<td>Result</td>\n</tr>\n<tr>\n<td><pre>
        &lt;ol&gt; <br>   &lt;li&gt;Step 1 &lt;/li&gt; <br>   &lt;li&gt;Step 2 &lt;/li&gt;
        <br>   &lt;li&gt;Step 3 &lt;/li&gt; <br> &lt;/ol&gt; </pre></td>\n<td><img
        src=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04
        PM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n</details>\n</div>\n\nThis
        page should include an ordered list, but it's missing the list tags.\n\n#
        Do This\n\n-   Use the `<ol>` and `<li>` tags to structure this content into
        an ordered list that looks like the one below.\n\n_Hint: There will be NO
        NUMBERS in your code._ \n\n![](<https://images.code.org/b3186e83c3e3bd2680a1a300e5abd126-image-1493238064706.17.03
        PM.png>)"
      CSD U2 ordered list_2018: "# Ordered Lists\n\n<div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary>\n<strong>What are the two types of
        lists?</strong>\n</summary>\n There are two types of lists in HTML, ordered
        and unordered lists.\n</details>\n<details>\n<summary>\n<strong>What is an
        ordered list?</strong>\n</summary>\n\nAn ordered list is a set of bulleted
        items which are numbered.\n<br /><br />\nAn ordered list element has the tag
        `<ol>` . This is an abbreviation for <strong>O</strong>rdered <strong>L</strong>ist.
        Each item in the list is marked by a list item element `<li>`;. This is an
        abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item
        element is a child element, which means that it goes inside of its parent
        element, the ordered list (`<ol>`).\n\n</details>\n\n<details>\n<summary>\n<strong>How
        do I make an ordered list?</strong>\n</summary>\n\nMaking an ordered list
        has two steps: making the list and adding the list items.  To make the ordered
        list, write the ordered list tags `<ol></ol>`.  Next, add your list items
        **inside** the ordered list tags.  To make each list item, use the list item
        tags `<li></li>` and write the list item inside the tags.\n<br /><br />\nIt
        can be helpful to indent your `<li>` tags so it's clear they are contained
        in the `<ol>` tag.\n\n</details>\n\n<details>\n<summary>\n<strong>Show me
        working code.</strong>\n</summary>\n\n<table border=\"1\">\n<tr>\n<td>Example</td>\n<td>Result</td>\n</tr>\n<tr>\n<td><pre>
        &lt;ol&gt; <br>   &lt;li&gt;Step 1 &lt;/li&gt; <br>   &lt;li&gt;Step 2 &lt;/li&gt;
        <br>   &lt;li&gt;Step 3 &lt;/li&gt; <br> &lt;/ol&gt; </pre></td>\n<td><img
        src=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04
        PM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n</details>\n</div>\n\nThis
        page should include an ordered list, but it's missing the list tags.\n\n#
        Do This\n\n-   Use the `<ol>` and `<li>` tags to structure this content into
        an ordered list that looks like the one below.\n\n_Hint: There will be NO
        NUMBERS in your code._ \n\n![](<https://images.code.org/b3186e83c3e3bd2680a1a300e5abd126-image-1493238064706.17.03
        PM.png>)"
      CSD U2 ordered list_2019: "# Geordnete Listen\n\n<div class=\"no-pullthrough\"
        style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px\" markdown=\"1\">\n\n::: details [**Was ist eine geordnete
        Liste?**]\n\nEine geordnete Liste ist eine Reihe von Aufzählungspunkten, die
        nummeriert sind.\n<br />\\<<br />\nEin geordnetes Listenelement hat das Tag
        `<ol>` . Dies ist eine Abkürzung für <strong>O</strong> geordnet <strong>L</strong>ist.
        Jedes Element in der Liste wird durch ein Listenelement `<li>`; markiert.
        Dies ist eine Abkürzung für <strong>L</strong>ist <strong>I</strong> Element.
        \ Das Listenelementelement ist ein Kind-Element, was bedeutet, dass es innerhalb
        seines Elternelements, der geordneten Liste (`<ol>`), liegt.\n:::\n\n::: details
        [**Wie mache ich eine geordnete Liste?**]\n\nDie Erstellung einer geordneten
        Liste besteht aus zwei Schritten: Erstellung der Liste und Hinzufügen der
        Listenelemente.  Um die geordnete Liste zu erstellen, schreibe die geordneten
        Listen-Tags `<ol></ol>`.  Als Nächstes füge Deine Listenelemente **innerhalb**
        der geordneten Listen-Tags hinzu.  Um jeden Listeneintrag zu erstellen, benutze
        die Listeneintrags-Tags `<li></li>` und schreibe den Listeneintrag innerhalb
        der Tags.\n\nEs kann hilfreich sein, Ihre `<li>` Tags einzurücken, damit es
        klar ist, dass diese im `<ol>` Tag enthalten sind.\n:::\n\n::: details [**Zeige
        mir den Arbeitscode.**]\n\n<table border=\"1\">\n<tr>\n<td>Beispiel</td>\n<td>Resultat</td>\n</tr>\n<tr>\n<td>\n\n
        \   <ol>\n      <li>Schritt 1</li>\n      <li>Schritt 2 </li>\n      <li>Schritt
        3 </li>\n    </ol>\n\n</td>\n<td><img src=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04
        PM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n:::\n\n</div>\n\nDiese
        Seite sollte eine geordnete Liste enthalten, aber es fehlen die Listen-Tags.\n\n#
        Mache Folgendes\n\n-   Benutze die `<ol>` und `<li>` Tags, um diesen Inhalt
        in eine geordnete Liste zu strukturieren, die wie die untenstehende aussieht.\n\n_Hinweis:
        Es wird KEINE NUMMER in Ihrem Code enthalten sein._ \n\n![](<https://images.code.org/b3186e83c3e3bd2680a1a300e5abd126-image-1493238064706.17.03
        PM.png>)"
      CSD U2 project review: |-
        # Review Your Project

        You're almost ready to publish your project, but you should check one more time that you have fulfilled all the requirements for this project.

        # Do This

        -   Check that you are comfortable sharing all the information that's on your site.
        -   Check that all of your images are correctly attributed, and that you have the right to put them on your site.
        -   Check that your project includes everything included in the project rubric.
        -   Use comments and whitespace to make your website readable.
        -   Ask your partner to help you find any potential problems with your site.
      CSD U2 project review_2018: |-
        # Review Your Project

        You're almost ready to publish your project, but you should check one more time that you have fulfilled all the requirements for this project.

        # Do This

        -   Check that you are comfortable sharing all the information that's on your site.
        -   Check that all of your images are correctly attributed, and that you have the right to put them on your site.
        -   Check that your project includes everything included in the project rubric.
        -   Use comments and whitespace to make your website readable.
        -   Ask your partner to help you find any potential problems with your site.
      CSD U2 project review_2019: |-
        # Review Your Project

        You're almost ready to publish your project, but you should check one more time that you have fulfilled all the requirements for this project.

        # Do This

        -   Check that you are comfortable sharing all the information that's on your site.
        -   Check that all of your images are correctly attributed, and that you have the right to put them on your site.
        -   Check that your project includes everything included in the project rubric.
        -   Use comments and whitespace to make your website readable.
        -   Ask your partner to help you find any potential problems with your site.
      CSD U2 project share: |-
        # Veröffentliche Dein Projekt

        Es ist an der Zeit, dein Projekt mit der Welt zu teilen!

        # Mache Folgendes

        -   Klicke auf die Schaltfläche ![](<https://images.code.org/26bcf1645e18ac064cf0631fb5ca023c-image-1493744000091.52.27 AM.png>) oben auf dieser Seite.
        -   Kopiere die URL, die du dort findest, und sende sie per E-Mail an die Personen, die deine Seite sehen soll.
      CSD U2 project share_2018: |-
        # Veröffentliche Dein Projekt

        Es ist an der Zeit, dein Projekt mit der Welt zu teilen!

        # Mache Folgendes

        -   Klicke auf die Schaltfläche ![](<https://images.code.org/26bcf1645e18ac064cf0631fb5ca023c-image-1493744000091.52.27 AM.png>) oben auf dieser Seite.
        -   Kopiere die URL, die du dort findest, und sende sie per E-Mail an die Personen, die deine Seite sehen soll.
      CSD U2 project share_2019: |-
        # Veröffentliche Dein Projekt

        Es ist an der Zeit, dein Projekt mit der Welt zu teilen!

        # Mache Folgendes

        -   Klicke auf die Schaltfläche ![](<https://images.code.org/26bcf1645e18ac064cf0631fb5ca023c-image-1493744000091.52.27 AM.png>) oben auf dieser Seite.
        -   Kopiere die URL, die du dort findest, und sende sie per E-Mail an die Personen, die deine Seite sehen soll.
      CSD U2 publish video: |-
        ## Zu berücksichtigende Fragen

        -   Was sind Deiner Meinung nach die Aufgaben eines Website-Publishers?
        -   Warum möchtest du den Code sehen oder die Website einer anderen Person remixen?
      CSD U2 text style decoration: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>How does the code work?</strong></summary>
        Here is the code that makes the `h1` elements underlined:

        <pre>h1 {
          text-decoration: underline;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `text-decoration: underline;` is the rule that makes the text inside the `h1` tag underlined.
            -   `text-decoration` is the _property_.  It explains what the rule is about, in this case where the line goes.
            -   `underline` is the _value_.  It explains how the rule should be applied, in this case making the test underlined.
                </details>
                <details>
                <summary><strong>What are the possible values for text decoration?</strong></summary>
                You can choose between "underline", "overline", and "line-through".  You can read more about the text-decoration property at <a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp">W3Schools - CSS text-decoration Property</a>
                </details>
                <details>
                <summary><strong>Why do I need all the punctuation?</strong></summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the stylesheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary><strong>What is a stylesheet?</strong></summary>
        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.
        </details>
        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Underlining

        -   Find the code in the style sheet that makes the h1 tag underlined.
        -   Change the text decoration and see which one you like.
            -   Choose from "underline", "overline", and "line-through"
        -   Add a text decoration rule for the paragraph or h3 tag.
      CSD U2 text style decoration_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>How does the code work?</strong></summary>
        Here is the code that makes the `h1` elements underlined:

        <pre>h1 {
          text-decoration: underline;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `text-decoration: underline;` is the rule that makes the text inside the `h1` tag underlined.
            -   `text-decoration` is the _property_.  It explains what the rule is about, in this case where the line goes.
            -   `underline` is the _value_.  It explains how the rule should be applied, in this case making the test underlined.
                </details>
                <details>
                <summary><strong>What are the possible values for text decoration?</strong></summary>
                You can choose between "underline", "overline", and "line-through".  You can read more about the text-decoration property at <a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp" target="_new">W3Schools - CSS text-decoration Property</a>
                </details>

        <details>
        <summary><strong>Why do I need all the punctuation?</strong></summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the stylesheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary><strong>What is a stylesheet?</strong></summary>
        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.
        </details>

        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }</pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Underlining

        -   Find the code in the style sheet that makes the h1 tag underlined.
        -   Change the text decoration and see which one you like.
            -   Choose from "underline", "overline", and "line-through"
        -   Add a text decoration rule for the paragraph or h3 tag.
      CSD U2 text style decoration_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**How does the code work?**]
        Here is the code that makes the `h1` elements underlined:

            h1 {
              text-decoration: underline;
            }

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `text-decoration: underline;` is the rule that makes the text inside the `h1` tag underlined.
            -   `text-decoration` is the _property_.  It explains what the rule is about, in this case where the line goes.
            -   `underline` is the _value_.  It explains how the rule should be applied, in this case making the test underlined.
                :::

        ::: details [**What are the possible values for text decoration?**]
        You can choose between "underline", "overline", and "line-through".  You can read more about the text-decoration property at <a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp" target="_new">W3Schools - CSS text-decoration Property</a>
        :::

        ::: details [**Why do I need all the punctuation?**]

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the stylesheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        :::

        ::: details [**What is a stylesheet?**]
        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.
        :::

        ::: details [**What is CSS?**]

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

            h2 {
               color: blue;
               font-family: cursive;
            }

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        :::

        </div>

        # Underlining

        -   Find the code in the style sheet that makes the h1 tag underlined.
        -   Change the text decoration and see which one you like.
            -   Choose from "underline", "overline", and "line-through"
        -   Add a text decoration rule for the paragraph or h3 tag.
      CSD U2 text style font family: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>How does the code work?</strong></summary>

        Here is the code that is controlling the paragraph font:

        <pre>p {
          font-family: cursive;
        }</pre>

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `font-family: cursive;` is the rule that makes the text inside the `p` tags a particular font.
            -   `font-family` is the _property_.  It explains what the rule is about, in this case the font.
            -   `cursive` is the _value_.  It explains how the rule should be applied, in this case making the text cursive.

        </details>
        <details>
        <summary><strong>What are the possible values for font family?</strong></summary>

        You can choose between "serif", "sans-serif", "cursive", "fantasy", and "monospace".  You can also try more specific fonts as described in <a href="http://www.w3schools.com/cssref/css_websafe_fonts.asp">W3Schools - CSS Web Safe Font Combinations</a>

        </details>
        <details>
        <summary><strong>Why do I need all the punctuation?</strong></summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the stylesheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary><strong>What is a stylesheet?</strong></summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Changing the Font

        -   Find the CSS rule-set in the style sheet that determines the style for the paragraph tag.
        -   Change the font family and choose which one you like the best.
            -   Choose from "serif", "sans-serif", "cursive", "fantasy", and "monospace"
        -   Add a font family rule for the h1 or h3 tags.
      CSD U2 text style font family_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>

        Here is the code that is controlling the paragraph font:

        <pre>p {
          font-family: cursive;
        }</pre>

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `font-family: cursive;` is the rule that makes the text inside the `p` tags a particular font.
            -   `font-family` is the _property_.  It explains what the rule is about, in this case the font.
            -   `cursive` is the _value_.  It explains how the rule should be applied, in this case making the text cursive.

        </details>
        <details>
        <summary>
        <strong>What are the possible values for font family?</strong>
        </summary>

        You can choose between "serif", "sans-serif", "cursive", "fantasy", and "monospace".  You can also try more specific fonts as described in <a href="http://www.w3schools.com/cssref/css_websafe_fonts.asp" target="_new">W3Schools - CSS Web Safe Font Combinations</a>

        </details>
        <details>
        <summary>
        <strong>Why do I need all the punctuation?</strong>
        </summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the stylesheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary>
        <strong>What is a stylesheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }</pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Changing the Font

        -   Find the CSS rule-set in the style sheet that determines the style for the paragraph tag.
        -   Change the font family and choose which one you like the best.
            -   Choose from "serif", "sans-serif", "cursive", "fantasy", and "monospace"
        -   Add a font family rule for the h1 or h3 tags.
      CSD U2 text style font family_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**How does the code work?**]

        Here is the code that is controlling the paragraph font:

            p {
              font-family: cursive;
            }

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `font-family: cursive;` is the rule that makes the text inside the `p` tags a particular font.
            -   `font-family` is the _property_.  It explains what the rule is about, in this case the font.
            -   `cursive` is the _value_.  It explains how the rule should be applied, in this case making the text cursive.

        :::

        ::: details [**What are the possible values for font family?**]

        You can choose between "serif", "sans-serif", "cursive", "fantasy", and "monospace".  You can also try more specific fonts as described in <a href="http://www.w3schools.com/cssref/css_websafe_fonts.asp" target="_new">W3Schools - CSS Web Safe Font Combinations</a>

        :::

        ::: details [**Why do I need all the punctuation?**]

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the stylesheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        :::

        ::: details [**What is a stylesheet?**]

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        :::

        ::: details [**What is CSS?**]

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

            h2 {
               color: blue;
               font-family: cursive;
            }

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        :::

        </div>

        # Changing the Font

        -   Find the CSS rule-set in the style sheet that determines the style for the paragraph tag.
        -   Change the font family and choose which one you like the best.
            -   Choose from "serif", "sans-serif", "cursive", "fantasy", and "monospace"
        -   Add a font family rule for the h1 or h3 tags.
      CSD U2 text style freeplay: |-
        # Adding Styles

        Now you can style the text on your personal web site!

        -   Open your style sheet and add styling of your choice to your project. Be sure to use at least 3 different CSS properties.

        # Checklist

        -   At least 3 of the following CSS Properties are used:
            -   `font-size`
            -   `font-family`
            -   `color`
            -   `text-decoration`
            -   `text-align`

        If you’ve used at least 3 of the properties from the checklist, you can explore some additional text properties to add to your project.
      CSD U2 text style freeplay_2018: |-
        # Adding Styles

        Now you can style the text on your personal web site!

        -   Open your style sheet and add styling of your choice to your project. Be sure to use at least 3 different CSS properties.

        # Checklist

        -   At least 3 of the following CSS Properties are used:
            -   `font-size`
            -   `font-family`
            -   `color`
            -   `text-decoration`
            -   `text-align`

        If you’ve used at least 3 of the properties from the checklist, you can explore some additional text properties to add to your project.
      CSD U2 text style freeplay_2019: |-
        # Adding Styles

        Now you can style the text on your personal web site!

        -   Open your style sheet and add styling of your choice to your project. Be sure to use at least 3 different CSS properties.

        # Checklist

        -   At least 3 of the following CSS Properties are used:
            -   `font-size`
            -   `font-family`
            -   `color`
            -   `text-decoration`
            -   `text-align`

        If you’ve used at least 3 of the properties from the checklist, you can explore some additional text properties to add to your project.
      CSD U2 text style h1: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What colors can I use in CSS?</strong></summary>
        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools - CSS Legal Color Values</a>
        </details><details>
        <summary><strong>How does the code work?</strong></summary>
        Here is the code that is making the `h1` heading red:

        <pre>h1 {
          color: red;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.
                </details>
                <details>
                <summary><strong>Why do I need all the punctuation?</strong></summary>
                The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.
                </details>
                <details>
                <summary><strong>What is a style sheet?</strong></summary>
                A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.
                </details>
                <details>
                <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # CSS and Text Color

        This HTML file uses a style sheet ("style.css") to give the page a particular style.  The style sheet contains information about what each of the HTML elements should look like.

        -   Find the code in the style sheet (click on "style.css" in the files list) that is making the h1 heading red.
        -   Change the code for the color of the h1 heading from `red` to a different color.
      CSD U2 text style h1_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What colors can I use in CSS?</strong>
        </summary>

        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp" target="_new">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp" target="_new">W3Schools - CSS Legal Color Values</a>

        </details><details>
        <summary>
        <strong>How does the code work?</strong>
        </summary>

        Here is the code that is making the `h1` heading red:

        <pre>h1 {
          color: red;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.

        </details>
        <details>
        <summary>
        <strong>Why do I need all the punctuation?</strong>
        </summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary>
        <strong>What is a style sheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }</pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # CSS and Text Color

        This HTML file uses a style sheet ("style.css") to give the page a particular style.  The style sheet contains information about what each of the HTML elements should look like.

        -   Find the code in the style sheet (click on "style.css" in the files list) that is making the h1 heading red.
        -   Change the code for the color of the h1 heading from `red` to a different color.
      CSD U2 text style h1_2019: "<div class=\"no-pullthrough\" \n style=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n\n:::
        details [**What colors can I use in CSS?**]\nCSS includes most common color
        names (red, blue, green, etc.), and many uncommon ones.  You can see a full
        list of CSS color names at [W3Schools - HTML Color Names](http://www.w3schools.com/colors/colors_names.asp).
        \ You can still use colors that are not included in the named list, but you
        will need to use their RGB values.  You can read more about using colors in
        CSS at [W3Schools - CSS Legal Color Values](http://www.w3schools.com/cssref/css_colors_legal.asp)\n:::\n\n:::
        details [**How does the code work?**]\nHere is the code that is making the
        `h1` heading red:\n\n    h1 {\n      color: red;\n    }\n\n-   `h1` is the
        _selector_.  It specifies which elements will have to follow the rules inside
        the curly braces.\n-   `color: red;` is the rule that makes the text inside
        the `h1` tags red.\n    -   `color` is the _property_.  It explains what the
        rule is about, in this case the text color.\n    -   `red` is the _value_.
        \ It explains how the rule should be applied, in this case making the text
        red.\n\n:::\n\n::: details [**Why do I need all the punctuation?**]\n\nThe
        punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon
        `;`, help the computer to understand the rules in the style sheet.  The curly
        braces hold all the rules for a particular selector.  Each rule should end
        in a semicolon, and the properties and values are always separated by a colon.\n\n:::\n\n:::
        details [**What is a style sheet?**]\n\nA style sheet is a document that controls
        how a web page will appear.  External style sheets are separate files that
        are linked to the HTML page.\n\n:::\n\n::: details [**What is CSS?**]\nCSS
        is a language that controls the way content on a web site appears.  It uses
        rule-sets to change the look of a page.  Each rule set has a selector, which
        specifies which elements on the page will be affected, and the rules, which
        explain how to display the elements.   Each rule consists of a property and
        a value for that property.\n\nHere’s an example of a rule-set that makes the
        text in an `h2` tag blue and cursive:\n\n    h2 {\n       color: blue;\n       font-family:
        cursive;\n    }\n\nIn this example, `h2` is the selector, `color` and `font-family`
        are properties, and `blue` and `cursive` are the values for those properties.\n:::\n\n</div>\n\n#
        CSS and Text Color\n\nThis HTML file uses a style sheet (\"style.css\") to
        give the page a particular style.  The style sheet contains information about
        what each of the HTML elements should look like.\n\n-   Find the code in the
        style sheet (click on \"style.css\" in the files list) that is making the
        h1 heading red.\n-   Change the code for the color of the h1 heading from
        `red` to a different color."
      CSD U2 text style h3: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What colors can I use in CSS?</strong></summary>

        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools - CSS Legal Color Values</a>

        </details>
        <details>
        <summary><strong>How does the code work?</strong></summary>
        Here is the code that is making the `h1` header red:

        <pre>h1 {
          color: red;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.
                </details>
                <details>
                <summary><strong>How do I make a new rule-set?</strong></summary>

        To make a new rule set, you'll need a selector and a list of rules.  The selector is the name of the tag you want the rules to be applied to.  The rules are a list of property and value pairs.  You'll also need to pay careful attention to the punctuation in the rule set.  Look at the code below for an example of how the code should look.  You'll need to change the specifics for your page.

        <pre>h1 {
          color: red;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.
                </details>
                <details>
                <summary><strong>Why do I need all the punctuation?</strong></summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary><strong>What is a style sheet?</strong></summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Making a new CSS rule-set

        The block of code that gives rules for a particular tag is called a _rule-set_.  You can make a new rule set by copying the pattern you see in the rule-set for the `h1` tag.

        -   Find the CSS rule-set in the style sheet that determines the styles for the h1 tag.
        -   Using the same pattern, write a new CSS rule-set that will determine the style for the h3 tag.
        -   Add code to set a different color for the h3 tags.
      CSD U2 text style h3_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What colors can I use in CSS?</strong>
        </summary>
        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools - CSS Legal Color Values</a>
        </details>
        <details>
        <summary>
        <strong>How does the code work?</strong>
        </summary>

        Here is the code that is making the `h1` header red:

        <pre>h1 {
          color: red;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.

        </details>
        <details>
        <summary>
        <strong>How do I make a new rule-set?</strong>
        </summary>

        To make a new rule set, you'll need a selector and a list of rules.  The selector is the name of the tag you want the rules to be applied to.  The rules are a list of property and value pairs.  You'll also need to pay careful attention to the punctuation in the rule set.  Look at the code below for an example of how the code should look.  You'll need to change the specifics for your page.

        <pre>h1 {
          color: red;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.

        </details>
        <details>
        <summary>
        <strong>Why do I need all the punctuation?</strong>
        </summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary>
        <strong>What is a style sheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Making a new CSS rule-set

        The block of code that gives rules for a particular tag is called a _rule-set_.  You can make a new rule set by copying the pattern you see in the rule-set for the `h1` tag.

        -   Find the CSS rule-set in the style sheet that determines the styles for the `h1` tag.
        -   Using the same pattern, write a new CSS rule-set that will determine the style for the `h3` tag.
        -   Add code to set a different color for the `h3` tags.
      CSD U2 text style h3_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**What colors can I use in CSS?**]
        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools - CSS Legal Color Values</a>
        :::

        ::: details [**How does the code work?**]

        Here is the code that is making the `h1` header red:

            h1 {
              color: red;
            }

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.

        :::

        ::: details [**How do I make a new rule-set?**]

        To make a new rule set, you'll need a selector and a list of rules.  The selector is the name of the tag you want the rules to be applied to.  The rules are a list of property and value pairs.  You'll also need to pay careful attention to the punctuation in the rule set.  Look at the code below for an example of how the code should look.  You'll need to change the specifics for your page.

            h1 {
              color: red;
            }

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.

        :::

        ::: details [**Why do I need all the punctuation?**]

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        :::

        ::: details [**What is a style sheet?**]

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        :::

        ::: details [**What is CSS?**]

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

            h2 {
               color: blue;
               font-family: cursive;

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        :::

        </div>

        # Making a new CSS rule-set

        The block of code that gives rules for a particular tag is called a _rule-set_.  You can make a new rule set by copying the pattern you see in the rule-set for the `h1` tag.

        -   Find the CSS rule-set in the style sheet that determines the styles for the `h1` tag.
        -   Using the same pattern, write a new CSS rule-set that will determine the style for the `h3` tag.
        -   Add code to set a different color for the `h3` tags.
      CSD U2 text style size: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>How does the code work?</strong></summary>
        Here is the code that is controlling the paragraph text size:

        <pre>p {
          font-size: 14px;
        }</pre>

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `font-size: 14px;` is the rule that makes the text inside the `p` tags a particular size.
            -   `font-size` is the _property_.  It explains what the rule is about, in this case the text size.
            -   `14px` is the _value_.  It explains how the rule should be applied, in this case making the text 14 pixels big.
                </details>
                <details>
                <summary><strong>What does `px` mean / What is a pixel?</strong></summary>

        Pixel, which is abbreviated `px`, is how elements are measured in CSS.  It’s the size of a single point of light on the screen.

        </details>
        <details>
        <summary><strong>Why do I need all the punctuation?</strong></summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary><strong>What is a style sheet?</strong></summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Changing text size

        You can control other things besides colors by using other properties.

        -   Find the CSS rule-set in the style sheet that determines the style for the paragraph tag.
        -   Change the text size of the paragraphs to be bigger.
        -   Add a new rule to your rule-set for your h3 tag to make the text bigger or smaller.
      CSD U2 text style size_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>

        Here is the code that is controlling the paragraph text size:

        <pre>p {
          font-size: 14px;
        }</pre>

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `font-size: 14px;` is the rule that makes the text inside the `p` tags a particular size.
            -   `font-size` is the _property_.  It explains what the rule is about, in this case the text size.
            -   `14px` is the _value_.  It explains how the rule should be applied, in this case making the text 14 pixels big.

        </details>
        <details>
        <summary>
        <strong>What does <code>px</code> mean / What is a pixel?</strong>
        </summary>

        Pixel, which is abbreviated `px`, is how elements are measured in CSS.  It’s the size of a single point of light on the screen.

        </details>
        <details>
        <summary>
        <strong>Why do I need all the punctuation?</strong>
        </summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary>
        <strong>What is a style sheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }</pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Changing text size

        You can control other things besides colors by using other properties.

        -   Find the CSS rule-set in the style sheet that determines the style for the paragraph tag.
        -   Change the text size of the paragraphs to be bigger.
        -   Add a new rule to your rule-set for your h3 tag to make the text bigger or smaller.
      CSD U2 text style size_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**How does the code work?**]

        Here is the code that is controlling the paragraph text size:

            p {
              font-size: 14px;
            }

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `font-size: 14px;` is the rule that makes the text inside the `p` tags a particular size.
            -   `font-size` is the _property_.  It explains what the rule is about, in this case the text size.
            -   `14px` is the _value_.  It explains how the rule should be applied, in this case making the text 14 pixels big.

        :::

        ::: details [**What does <code>px</code> mean / What is a pixel?**]

        Pixel, which is abbreviated `px`, is how elements are measured in CSS.  It’s the size of a single point of light on the screen.

        :::

        ::: details [**Why do I need all the punctuation?**]

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        :::

        ::: details [**What is a style sheet?**]

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        :::

        ::: details [**What is CSS?**]

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

            h2 {
               color: blue;
               font-family: cursive;
            }

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        :::

        </div>

        # Changing text size

        You can control other things besides colors by using other properties.

        -   Find the CSS rule-set in the style sheet that determines the style for the paragraph tag.
        -   Change the text size of the paragraphs to be bigger.
        -   Add a new rule to your rule-set for your h3 tag to make the text bigger or smaller.
      CSD U2 text style text align: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        **How does the code work?**

        </summary>
        Here is the code that is controlling the paragraph text alignment:

        <pre>p {
          text-align: left;
        }</pre>

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `text-align: left;` is the rule that makes the text inside the `p` tags align to the left side of the paragraph.
            -   `text-align` is the _property_.  It explains what the rule is about, in this case the text alignment.
            -   `left` is the _value_.  It explains how the rule should be applied, in this case making the text align to the left side of the paragraph.
                </details>
                <details>
                <summary>

        **Why doesn't `text-align: left;` do anything?**

        </summary>
        Most properties have default values.  The default values are the styles that an element will have automatically, before you add your style sheet.  The default value for `text-align` is `left`, so it doesn't change from how it already looked.
        </details>
        <details>
        <summary>

        **What are the possible values for text align?**

        </summary>
        You can choose between "left", "right", and "center".  You can read more about the text-align property at <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp">W3Schools - CSS text-align Property</a>
        </details>
        <details>
        <summary>

        **Why do I need all the punctuation?**

        </summary>
        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.
        </details>
        <details>
        <summary>

        **What is a style sheet?**

        </summary>
        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.
        </details>
        <details>
        <summary>

        **What is CSS?**

        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>

        </details>
        </div>

        # Text Alignment

        The `text-align` property sets the horizontal (side to side) position of the text within each line.

        -   Find the "text-align" property in the paragraph tag.
        -   Change the paragraph alignment.
            -   Choose from "left", "right", and "center"
      CSD U2 text style text align_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>

        Here is the code that is controlling the paragraph text alignment:

        <pre>p {
          text-align: left;
        }</pre>

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `text-align: left;` is the rule that makes the text inside the `p` tags align to the left side of the paragraph.
            -   `text-align` is the _property_.  It explains what the rule is about, in this case the text alignment.
            -   `left` is the _value_.  It explains how the rule should be applied, in this case making the text align to the left side of the paragraph.

        </details>
        <details>
        <summary>
        <strong>Why doesn't <code>text-align: left;</code> do anything?</strong>
        </summary>

        Most properties have default values.  The default values are the styles that an element will have automatically, before you add your style sheet.  The default value for `text-align` is `left`, so it doesn't change from how it already looked.

        </details>
        <details>
        <summary>
        <strong>What are the possible values for text align?</strong>
        </summary>

        You can choose between "left", "right", and "center".  You can read more about the text-align property at <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp" target="_new">W3Schools - CSS text-align Property</a>

        </details>
        <details>
        <summary>
        <strong>Why do I need all the punctuation?</strong>
        </summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary>
        <strong>What is a style sheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.
        <br/><br/>
        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }</pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>

        </details>
        </div>

        # Text Alignment

        The `text-align` property sets the horizontal (side to side) position of the text within each line.

        -   Find the "text-align" property in the paragraph tag.
        -   Change the paragraph alignment.
            -   Choose from "left", "right", and "center"
      CSD U2 text style text align_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**Wie funktioniert der Code?**]

        Hier ist der Code, der die Ausrichtung des Absatztextes steuert:

            p {
              text-align: left;
            }

        -   `p` ist der _Selektor_.  Er gibt an, welche Elemente den Regeln innerhalb der geschweiften Klammern folgen müssen. Das `p` steht für Absatz.
        -   `text-align: left;` ist die Regel, die den Text innerhalb der `p`-Tags auf die linke Seite des Absatzes ausrichtet.
            -   `text-align` ist die _Eigenschaft_.  Diese erklärt, worum es bei der Regel geht, in diesem Fall bei der Textausrichtung.
            -   `links` ist der _Wert_.  Dieser erklärt, wie die Regel angewendet werden sollte, wobei in diesem Fall der Text auf die linke Seite des Absatzes ausgerichtet wird.

        :::

        :::: details [**Warum macht <code>text-align: left;</code> hier nichts?**]

        Die meisten Eigenschaften haben Standardwerte.  Die Standardwerte sind die Stile, die ein Element automatisch hat, bevor du dein Style Sheet hinzufügst.  Der Standardwert für `text-align` ist `left`, so dass es hier keinen Unterschied macht.

        :::

        details [**Welche Werte sind für die Textausrichtung möglich? **]

        Du kannst zwischen "links", "rechts" und "mitte" wählen.  Mehr über die Eigenschaft text-align erfährst du unter <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp" target="_new">W3Schools - CSS text-align property</a>.

        :::

        :::: details [**Warum brauche ich alle Satzzeichen?**]

        Die Interpunktion, wie die geschweiften Klammern `{}`, der Doppelpunkt `:` und das Semikolon \`;`` helfen dem Computer, die Regeln im Style Sheet zu verstehen.  Die geschweiften Klammern enthalten alle Regeln für einen bestimmten Selektor.  Jede Regel sollte mit einem Semikolon enden, und die Eigenschaften und Werte werden immer durch einen Doppelpunkt getrennt.

        :::

        :::: details [**Was ist ein Stylesheet?**]

        Ein Stylesheet ist ein Dokument das steuert, wie eine Webseite aussehen soll.  Externe Stylesheets sind separate Dateien, die mit der HTML-Seite verknüpft sind.

        :::

        ::: Details [**Was ist CSS?**]

        CSS ist eine Sprache, die die Darstellung von Inhalten auf einer Website steuert.  Es verwendet Regelsätze, um das Aussehen einer Seite zu ändern.  Jeder Regelsatz hat einen Selektor, der angibt, welche Elemente auf der Seite betroffen sind, und die Regeln, die erklären, wie die Elemente angezeigt werden.   Jede Regel besteht aus einer Eigenschaft und einem Wert für diese Eigenschaft.
        <br/><br/>
        Hier ist ein Beispiel für einen Regelsatz, der den Text in einem `h2`-Tag blau und kursiv macht:

            h2 {
               color: blue;
               font-family: cursive;
            }

        In diesem Beispiel ist `h2` der Selektor, `color` und `font-family` sind Eigenschaften, und `blue` und `cursive` sind die Werte für diese Eigenschaften.

        :::

        </div>

        # Textausrichtung

        Die Eigenschaft `text-align` legt die horizontale (seitliche) Position des Textes innerhalb jeder Zeile fest.

        -   Suche die Eigenschaft "text-align" im Absatzschlüssel.
        -   Ändere die Absatzausrichtung.
            -   Wähle zwischen "links", "rechts" und "mitte"
      CSD U2 un_ordered lists: "# Combining Lists\n\n<div class=\"no-pullthrough\"
        style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px\" markdown=\"1\">\n\n::: details [**What are the two
        types of lists?**]\n There are two types of lists in HTML, ordered and unordered
        lists.\n:::\n\n::: details [**What is an unordered list?**]\n\nAn unordered
        list is just a set of bulleted items.\n\nAn unordered list element has the
        tag `<ul>` . This is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist.
        Each item in the list is marked by a list item element `<li>`. This is an
        abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item
        element is a child element, which means that it goes inside of its parent
        element, the unordered list (`<ul>`).\n\n:::\n\n::: details [**How do I make
        an unordered list?**]\n\nMaking an unordered list has two steps: making the
        list and adding the list items.  To make the unordered list, write the unordered
        list tags `<ul></ul>`.  Next, add your list items **inside** the unordered
        list tags.  To make each list item, use the list item tags `<li></li>` and
        write the list item inside the tags.\n\nIt can be helpful to indent your `<li>`
        tags so it's clear they are contained in the `<ul>` tag.\n\n:::\n\n::: details
        [**What is an ordered list?**]\n\nAn ordered list is a set of bulleted items
        which are numbered.\n\nAn ordered list element has the tag `<ol>`. This is
        an abbreviation for <strong>O</strong>rdered <strong>L</strong>ist. Each item
        in the list is marked by a list item element `<li>`;. This is an abbreviation
        for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is
        a child element, which means that it goes inside of its parent element, the
        ordered list (`<ol>`).\n:::\n\n::: details [**How do I make an ordered list?**]\n\nMaking
        an ordered list has two steps: making the list and adding the list items.
        \ To make the ordered list, write the ordered list tags `<ol></ol>`.  Next,
        add your list items **inside** the ordered list tags.  To make each list item,
        use the list item tags `<li></li>` and write the list item inside the tags.\n<br
        /><br />\nIt can be helpful to indent your `<li>` tags so it's clear they
        are contained in the `<ol>` tag.\n:::\n\n::: details [**Show me working code.**]\n\n<table
        border=\"1\">\n<tr>\n<td>Example</td>\n<td>Result</td>\n</tr>\n<tr>\n<td>\n\n
        \   <ul>\n     \t<li>Red </li>\n        <li>Green </li>\n        <li>Blue</li>\n
        \   </ul> \n\n</td>\n<td><img src=\"https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32
        PM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n<table border=\"1\">\n<tr>\n<td>Example</td>\n<td>Result</td>\n</tr>\n<tr>\n<td>\n\n
        \   <ol>\n     \t<li>Step 1</li>\n        <li>Step 2</li>\n        <li>Step
        3</li> \n    </ol> \n\n</td>\n<td><img src=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04
        PM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n:::\n\n</div>\n\nThis
        page should include both an unordered list and an ordered list.\n\n# Do This\n\n-
        \  Use the list tags to structure this content into two lists that look like
        the ones below.\n\n_Hint: There will be NO NUMBERS in your code._ \n\n![](https://images.code.org/c9c002b39893ab09e8bc6be4b20ad7c2-image-1553714125509.png)"
      CSD U2 unordered list: |-
        # Unordered Lists

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What are the two types of lists?</strong>
        </summary>
         There are two types of lists in HTML, ordered and unordered lists.
        </details>
        <details>
        <summary><strong>What is an unordered list?</strong>
        </summary>

        An unordered list is just a set of bulleted items.
        <br /><br />An unordered list element has the tag \<ul> . This is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist. Each item in the list is marked by a list item element \<li>. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element, which means that it goes inside of its parent element, the unordered list (\<ul>).

        </details>

        <details>
        <summary><strong>How do I make an unordered list?</strong>
        </summary>

        Making an unordered list has two steps: making the list and adding the list items.  To make the unordered list, write the unordered list tags `<ul></ul>`.  Next, add your list items **inside** the unordered list tags.  To make each list item, use the list item tags `<li></li>` and write the list item inside the tags.

        It can be helpful to indent your \<li> tags so it's clear they are contained in the \<ul> tag.

        </details>

        <details>
        <summary><strong>Show me working code.</strong>
        </summary>

        <table border="1">
        <tr>
        <td>Example</td>
        <td>Result</td>
        </tr>
        <tr>
        <td><pre> &lt;ul&gt; <br>   &lt;li&gt;Red &lt;/li&gt; <br>   &lt;li&gt;Green &lt;/li&gt; <br>   &lt;li&gt;Blue&lt;/li&gt; <br> &lt;/ul&gt; </pre></td>
        <td><img src="https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32 PM.png" style="width:200px"></td>
        </tr>
        </table>

        </details>
        </div>

        This page should have an unordered list, but it's missing the list tags.

        # Do This

        -   Use the `<ul>` and `<li>` tags to structure the content into an unordered list like the picture below.

        ![](<https://images.code.org/64581a90765cd2d53b6c5235c48f2855-image-1493238358294.25.04 PM.png>)
      CSD U2 unordered list_2018: |-
        # Unordered Lists

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What are the two types of lists?</strong>
        </summary>
        There are two types of lists in HTML, ordered and unordered lists.

        </details>
        <details>
        <summary>
        <strong>What is an unordered list?</strong>
        </summary>

        An unordered list is just a set of bulleted items.
        <br /><br />An unordered list element has the tag \<ul> . This is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist. Each item in the list is marked by a list item element \<li>. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element, which means that it goes inside of its parent element, the unordered list (\<ul>).

        </details>

        <details>
        <summary>
        <strong>How do I make an unordered list?</strong>
        </summary>

        Making an unordered list has two steps: making the list and adding the list items.  To make the unordered list, write the unordered list tags `<ul></ul>`.  Next, add your list items **inside** the unordered list tags.  To make each list item, use the list item tags `<li></li>` and write the list item inside the tags.
        <br /><br />
        It can be helpful to indent your \<li> tags so it's clear they are contained in the \<ul> tag.

        </details>

        <details>
        <summary>
        <strong>Show me working code.</strong>
        </summary>

        <table border="1">
        <tr>
        <td>Example</td>
        <td>Result</td>
        </tr>
        <tr>
        <td><pre> &lt;ul&gt; <br>   &lt;li&gt;Red &lt;/li&gt; <br>   &lt;li&gt;Green &lt;/li&gt; <br>   &lt;li&gt;Blue&lt;/li&gt; <br> &lt;/ul&gt; </pre></td>
        <td><img src="https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32 PM.png" style="width:200px"></td>
        </tr>
        </table>

        </details>
        </div>

        This page should have an unordered list, but it's missing the list tags.

        # Do This

        -   Use the `<ul>` and `<li>` tags to structure the content into an unordered list like the picture below.

        ![](<https://images.code.org/64581a90765cd2d53b6c5235c48f2855-image-1493238358294.25.04 PM.png>)
      CSD U2 unordered list_2019: "# Ungeordnete Listen\n\n<div class=\"no-pullthrough\"
        style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px\" markdown=\"1\">\n\n::: details [**Was sind die zwei
        Arten von Listen?**]\nEs gibt zwei Arten von Listen in HTML, geordnete und
        ungeordnete Listen.\n\n:::\n\n::: details [**Was ist eine ungeordnete Liste?**]\n\nEine
        ungeordnete Liste ist nur ein Satz von Aufzählungspunkten.\n<br />\\<<br />Ein
        ungeordnetes Listenelement hat das Tag `<ul>`. Dies ist eine Abkürzung für
        <strong>U</strong>geordnet <strong>L</strong>ist. Jedes Element in der Liste
        wird durch ein Listenelement `<li>` markiert. Dies ist eine Abkürzung für
        <strong>L</strong>ist <strong>I</strong>Element.  Das Listenelementelement
        ist ein Kind-Element, was bedeutet, dass es innerhalb seines Elternelements,
        der ungeordneten Liste (`<ul>`), liegt.\n\n:::\n\n::: details [**Wie mache
        ich eine ungeordnete Liste?**]\n\nDie Erstellung einer ungeordneten Liste
        besteht aus zwei Schritten: Erstellung der Liste und Hinzufügen der Listenelemente.
        \ Um die ungeordnete Liste zu erstellen, schreiben Sie die ungeordnete Liste
        mit den Tags `<ul></ul>`.  Als Nächstes füge Deine Listenelemente **innerhalb**
        der ungeordneten Listen-Tags hinzu.  Um jeden Listeneintrag zu erstellen,
        benutze die Listeneintrags-Tags `<li><</li>` und schreibe den Listeneintrag
        innerhalb der Tags.\n<br />\\<<br />\nEs kann hilfreich sein die <li>-Tags
        einzurücken, damit es klar ist, dass diese im <ul>-Tag enthalten sind.\n\n:::\n\n:::
        details [**Zeige mir echten Code.**]\n\n<table border=\"1\">\n<tr>\n<td>Beispiel</td>\n<td>Resultat</td>\n</tr>\n<tr>\n<td>\n\n
        \    <ul> <br>\n     \t<li>Rot</li>\n        <li>Gelb</li>\n        <li>Blau</li>\n
        \    </ul>\n\n</td>\n<td><img src=\"https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32
        PM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n:::\n\n</div>\n\nDiese
        Seite sollte eine ungeordnete Liste haben, aber es fehlen die Listen-Tags.\n\n#
        Mache Folgendes\n\n-   Benutze die `<ul>` und `<li>` Tags, um den Inhalt in
        eine ungeordnete Liste wie im Bild unten zu strukturieren.\n\n![](<https://images.code.org/64581a90765cd2d53b6c5235c48f2855-image-1493238358294.25.04
        PM.png>)"
      CSD U2 upload images: |-
        # Upload Images

        Next, you'll need to upload all of your images into your project.

        # Do This

        -   Download all the images you want onto your computer. Visit <a href="/s/csd2-2017/stage/7/puzzle/5" target="_new">Lesson 7 Level 5</a> for help if you need it.
            -   Make sure you have the right to use these images.
            -   Write down all of the attribution information that you need.
            -   Upload all of the images into your project.  Visit <a href="/s/csd2-2017/stage/7/puzzle/5" target="_new">Lesson 7 Level 5</a> if you've forgotten how.
      CSD U2 upload images_2018: |-
        # Upload Images

        Next, you'll need to upload all of your images into your project.

        # Do This

        -   Download all the images you want onto your computer. Visit <a href="../../../stage/7/puzzle/5" target="_new">Lesson 7 Level 5</a> for help if you need it.
            -   Make sure you have the right to use these images.
            -   Write down all of the attribution information that you need.
            -   Upload all of the images into your project.  Visit <a href="../../../stage/7/puzzle/5" target="_new">Lesson 7 Level 5</a> if you've forgotten how.
      CSD U2 upload images_2019: |-
        # Upload Images

        Next, you'll need to upload all of your images into your project.

        # Do This

        -   Download all the images you want onto your computer. Visit <a href="../../../stage/7/puzzle/5" target="_new">Lesson 7 Level 5</a> for help if you need it.
            -   Make sure you have the right to use these images.
            -   Write down all of the attribution information that you need.
            -   Upload all of the images into your project.  Visit <a href="../../../stage/7/puzzle/5" target="_new">Lesson 7 Level 5</a> if you've forgotten how.
      CSD U3 - Booleans Video: "# Boolean Expressions Video"
      CSD U3 - Booleans Video_2019: |-
        ## Zu berücksichtigende Fragen

        -   Was ist ein boolescher Ausdruck?
        -   Welcher Ausdruck wird mit `wahr` ausgewertet?
        -   Welcher Ausdruck wird mit `falsch` ausgewertet?
      CSD U3 - Conditionals Video_2019: |-
        ## Zu berücksichtigende Fragen

        -   Was ist ein Beispiel dafür, wann Sie eine "wenn/ansonsten"-Anweisung benötigen würden?
      CSD U3 - Simple Counter Predict: "# The Counter Pattern\n\nThis pattern is one
        of the most important ones in all of programming. \n\n![](<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56
        PM.png>)\n\nIt is used to increase the value of a variable by 1. You might
        call it the **counter pattern** since it can be used to make a variable that
        counts up. You'll use this pattern a lot, especially with the draw loop. Let's
        see what that looks like.\n\n# Do This\n\nThis program creates a variable
        `counter` and then uses the **counter pattern** to make it count up. When
        you run the program what do you think you'll see on the screen?\n\n-   **Read
        the program** and make a prediction of what the output will be.\n-   **Run
        the program** to check your prediction.\n-   **Discuss with a neighbor**.
        Can you explain what you observed?"
      CSD U3 - Simple Counter Predict_2018: "# The Counter Pattern\n\nThis pattern
        is one of the most important ones in all of programming. \n\n![](<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56
        PM.png>)\n\nIt is used to increase the value of a variable by 1. You might
        call it the **counter pattern** since it can be used to make a variable that
        counts up. You'll use this pattern a lot, especially with the draw loop. Let's
        see what that looks like.\n\n# Do This\n\nThis program creates a variable
        `counter` and then uses the **counter pattern** to make it count up. When
        you run the program what do you think you'll see on the screen?\n\n-   **Read
        the program** and make a prediction of what the output will be.\n-   **Run
        the program** to check your prediction.\n-   **Discuss with a neighbor**.
        Can you explain what you observed?"
      CSD U3 - Simple Counter Predict_2019: "# The Counter Pattern\n\nThis pattern
        is one of the most important ones in all of programming. \n\n![](<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56
        PM.png>)\n\nIt is used to increase the value of a variable by 1. You might
        call it the **counter pattern** since it can be used to make a variable that
        counts up. You'll use this pattern a lot, especially with the draw loop. Let's
        see what that looks like.\n\n# Do This\n\nThis program creates a variable
        `counter` and then uses the **counter pattern** to make it count up. When
        you run the program what do you think you'll see on the screen?\n\n-   **Read
        the program** and make a prediction of what the output will be.\n-   **Run
        the program** to check your prediction.\n-   **Discuss with a neighbor**.
        Can you explain what you observed?"
      CSD U3 - complex - key up and down: |-
        # Responding to a Single Click

        Earlier we learned that `keyWentDown` and `keyWentUp` can be used to respond to a keypress a single time. The blocks `mouseWentUp` and `mouseWentDown` allow you to do that for the mouse!

        # Do This

        Let's make a simple game that counts how many times you've clicked. We've already provided a variable `clicks` that you can use to track how many times the user has clicked.

        -   Add a conditional that checks if the mouse went down.
        -   Inside your conditional, add to the `clicks` variable.

        _Challenge: Can you add a sprite that responds to `mouseWentDown` as well? Add an image of your choice and increase the sprite's size each time the mouse is clicked._
      CSD U3 - complex - key up and down_2018: |-
        # Responding to a Single Click

        Earlier we learned that `keyWentDown` and `keyWentUp` can be used to respond to a keypress a single time. The blocks `mouseWentUp` and `mouseWentDown` allow you to do that for the mouse!

        # Do This

        Let's make a simple game that counts how many times you've clicked. We've already provided a variable `clicks` that you can use to track how many times the user has clicked.

        -   Add a conditional that checks if the mouse went down.
        -   Inside your conditional, add to the `clicks` variable.

        _Challenge: Can you add a sprite that responds to `mouseWentDown` as well? Add an image of your choice and increase the sprite's size each time the mouse is clicked._
      CSD U3 - complex - key up and down_2019: |-
        # Responding to a Single Click

        Earlier we learned that `keyWentDown` and `keyWentUp` can be used to respond to a keypress a single time. The blocks `mouseWentUp` and `mouseWentDown` allow you to do that for the mouse!

        # Do This

        Let's make a simple game that counts how many times you've clicked. We've already provided a variable `clicks` that you can use to track how many times the user has clicked.

        -   Add a conditional that checks if the mouse went down.
        -   Inside your conditional, add to the `clicks` variable.

        _Challenge: Can you add a sprite that responds to `mouseWentDown` as well? Add an image of your choice and increase the sprite's size each time the mouse is clicked._
      CSD U3 - complex - mouse down: "# Mouse Clicks\n\nKeypresses are great, but
        sometimes you want users to interact through mouse clicks. There's a new block
        called `mouseDown` which, similar to `keyDown`, checks whether the left or
        right mouse buttons is being pressed. If you are using a computer with a mouse
        or trackpad that has only one button, you'll want to always use `mouseDown(\"left\")`.
        \n\n# Do This\n\nHere's a program that drops a balloon down the screen - you're
        going to program the mouse button to raise the balloon back up while it's
        clicked.\n\n-   Add an if else statment that checks for `mouseDown`.\n-   Inside
        the conditional, move the balloon up one pixel if the mouse is down. Otherwise,
        move the balloon down.\n\n_Hint: You'll need to move the code that drops the
        balloon for this to work - you only want it to run if `mouseDown` is `false`_\n\n_Challenge:
        Can you make the balloon drift randomly to the left and right as it rises
        and falls?_"
      CSD U3 - complex - mouse down_2018: "# Mouse Clicks\n\nKeypresses are great,
        but sometimes you want users to interact through mouse clicks. There's a new
        block called `mouseDown` which, similar to `keyDown`, checks whether the left
        or right mouse buttons is being pressed. If you are using a computer with
        a mouse or trackpad that has only one button, you'll want to always use `mouseDown(\"left\")`.
        \n\n# Do This\n\nHere's a program that drops a balloon down the screen - you're
        going to program the mouse button to raise the balloon back up while it's
        clicked.\n\n-   Add an if else statment that checks for `mouseDown`.\n-   Inside
        the conditional, move the balloon up one pixel if the mouse is down. Otherwise,
        move the balloon down.\n\n_Hint: You'll need to move the code that drops the
        balloon for this to work - you only want it to run if `mouseDown` is `false`_\n\n_Challenge:
        Can you make the balloon drift randomly to the left and right as it rises
        and falls?_"
      CSD U3 - complex - mouse down_2019: "# Mouse Clicks\n\nKeypresses are great,
        but sometimes you want users to interact through mouse clicks. There's a new
        block called `mouseDown` which, similar to `keyDown`, checks whether the left
        or right mouse buttons is being pressed. If you are using a computer with
        a mouse or trackpad that has only one button, you'll want to always use `mouseDown(\"left\")`.
        \n\n# Do This\n\nHere's a program that drops a balloon down the screen - you're
        going to program the mouse button to raise the balloon back up while it's
        clicked.\n\n-   Add an if else statment that checks for `mouseDown`.\n-   Inside
        the conditional, move the balloon up one pixel if the mouse is down. Otherwise,
        move the balloon down.\n\n_Hint: You'll need to move the code that drops the
        balloon for this to work - you only want it to run if `mouseDown` is `false`_\n\n_Challenge:
        Can you make the balloon drift randomly to the left and right as it rises
        and falls?_"
      CSD U3 - complex - mouse move: |-
        # mouseDidMove

        We can also use Boolean expressions to check whether or not the mouse has moved. The `mouseDidMove` block will return `false` if the mouse is still, but `true` if the mouse has been moving.

        # Do This

        Right now, this program just displays a salt shaker sprite. You'll need to use `mouseDidMove` so that you can "shake" the salt by moving the mouse back and forth.

        -   Add a conditional that checks if `mouseDidMove`.
        -   If the conditional is true, rotate the salt sprite randomly to the left or right.

        _Challenge: Can you keep track of how many times the `mouseDidMove` shakes the salt, and then rotate it right side up after 100 shakes?_
      CSD U3 - complex - mouse move_2018: |-
        # mouseDidMove

        We can also use Boolean expressions to check whether or not the mouse has moved. The `mouseDidMove` block will return `false` if the mouse is still, but `true` if the mouse has been moving.

        # Do This

        Right now, this program just displays a salt shaker sprite. You'll need to use `mouseDidMove` so that you can "shake" the salt by moving the mouse back and forth.

        -   Add a conditional that checks if `mouseDidMove`.
        -   If the conditional is true, rotate the salt sprite randomly to the left or right.

        _Challenge: Can you keep track of how many times the `mouseDidMove` shakes the salt, and then rotate it right side up after 100 shakes?_
      CSD U3 - complex - mouse move_2019: |-
        # mouseDidMove

        We can also use Boolean expressions to check whether or not the mouse has moved. The `mouseDidMove` block will return `false` if the mouse is still, but `true` if the mouse has been moving.

        # Do This

        Right now, this program just displays a salt shaker sprite. You'll need to use `mouseDidMove` so that you can "shake" the salt by moving the mouse back and forth.

        -   Add a conditional that checks if `mouseDidMove`.
        -   If the conditional is true, rotate the salt sprite randomly to the left or right.

        _Challenge: Can you keep track of how many times the `mouseDidMove` shakes the salt, and then rotate it right side up after 100 shakes?_
      CSD U3 - conditionals - first conditional: "<img src=\"https://images.code.org/36c5543076622c96f7dabce8bc37f995-image-1468425774455.54.03
        PM.png\" style=\"float:right;width:100px\">\n\n# If Statement\n\nThe Boolean
        expressions you used earlier allow us to ask questions, but in order to _respond
        to those questions_, we need to use an `if` statement.\n\n`if` statements
        usually go inside your draw loop because we want to check them each time the
        loop runs. \n\n# Do This\n\nThe race car program you wrote earlier is loaded
        here for you.\n\n-   Add an `if` statement after you update the position of
        the race car.\n-   Move the Boolean expression from the console.log statement
        to the condition of the if statement.\n-   Inside the `if` statement add a
        statement to draw text on the screen to say \"Winner\"."
      CSD U3 - conditionals - first conditional 2: |-
        <img src="https://images.code.org/abd459d8d1477ac2f582417f4334cdaa-image-1466107090414.gif" style="width:200px;float:right">

        # Visible

        Now that you have conditionals and images, sometimes it's useful to hide the image for a while and then show it again. You can do this using the `visible` property. The visible property is a little different from other properties you have seen in the past: It is a Boolean value, either `true` (the sprite is visible) or `false` (the sprite is **not** visible). By default, visible is set to `true`.

        # Do This

        Make the balloon pop when it hits the edge of the game area!

        -   Add an `if` statement that checks to see if the balloon has hit the edge.
            -   Use a watcher on `balloon.scale` to help you out.
        -   Create a pop sprite which uses the "pop" visual in the animation tab.
        -   Set the pop's `visible` property to `false` to start.
        -   Inside the `if` add two statements.
            -   One that sets the `visible` property to hide the balloon sprite.
            -   One that sets the `visible` property to show the pop sprite.
      CSD U3 - conditionals - first conditional 2_2018: |-
        <img src="https://images.code.org/abd459d8d1477ac2f582417f4334cdaa-image-1466107090414.gif" style="width:200px;float:right">

        # Visible

        Sometimes it's useful to hide the image for a while and then show it again. You can do this using the `visible` property. The visible property is a little different from other properties you have seen in the past: It is a Boolean value, either `true` (the sprite is visible) or `false` (the sprite is **not** visible). By default, visible is set to `true`.

        # Do This

        Make the balloon pop when it hits the edge of the game area!

        -   Add a conditional that checks to see whether the balloon has hit the edge.
            -   Use a watcher on `balloon.scale` to help you out.
        -   Create a pop sprite which uses the "pop" visual in the animation tab.
        -   Use the `visible` property to keep the "pop" sprite hidden at the beginning.
        -   Inside the `if` add two statements.
            -   One that sets the `visible` property to hide the balloon sprite.
            -   One that sets the `visible` property to show the pop sprite.
      CSD U3 - conditionals - first conditional 2_2018_2019: |-
        <img src="https://images.code.org/abd459d8d1477ac2f582417f4334cdaa-image-1466107090414.gif" style="width:200px;float:right">

        # Visible

        Sometimes it's useful to hide the image for a while and then show it again. You can do this using the `visible` property. The visible property is a little different from other properties you have seen in the past: It is a Boolean value, either `true` (the sprite is visible) or `false` (the sprite is **not** visible). By default, visible is set to `true`.

        # Do This

        Make the balloon pop when it hits the edge of the game area!

        -   Add a conditional that checks to see whether the balloon has hit the edge.
            -   Use a watcher on `balloon.scale` to help you out.
        -   Create a pop sprite which uses the "pop" visual in the animation tab.
        -   Use the `visible` property to keep the "pop" sprite hidden at the beginning.
        -   Inside the `if` add two statements.
            -   One that sets the `visible` property to hide the balloon sprite.
            -   One that sets the `visible` property to show the pop sprite.
      CSD U3 - conditionals - first conditional_2018: "<img src=\"https://images.code.org/36c5543076622c96f7dabce8bc37f995-image-1468425774455.54.03
        PM.png\" style=\"float:right;width:100px\">\n\n# If Statement\n\nThe Boolean
        expressions you used earlier allow us to ask questions, but in order to _respond
        to those questions_, we need to use an `if` statement.\n\n`if` statements
        usually go inside your draw loop because we want to check them each time the
        loop runs. \n\n# Do This\n\nThe race car program you wrote earlier is loaded
        here for you.\n\n-   Add an `if` statement after you update the position of
        the race car.\n-   Move the Boolean expression from the console.log statement
        to the condition of the if statement.\n-   Inside the `if` statement add a
        statement to draw text on the screen to say \"Winner\"."
      CSD U3 - conditionals - first conditional_2019: "<img src=\"https://images.code.org/36c5543076622c96f7dabce8bc37f995-image-1468425774455.54.03
        PM.png\" style=\"float:right;width:100px\">\n\n# If Statement\n\nThe Boolean
        expressions you used earlier allow us to ask questions, but in order to _respond
        to those questions_, we need to use an `if` statement.\n\n`if` statements
        usually go inside your draw loop because we want to check them each time the
        loop runs. \n\n# Do This\n\nThe race car program you wrote earlier is loaded
        here for you.\n\n-   Add an `if` statement after you update the position of
        the race car.\n-   Move the Boolean expression from the console.log statement
        to the condition of the if statement.\n-   Inside the `if` statement, add
        a statement to draw text on the screen to say \"Winner\"."
      CSD U3 - conditionals - transition: |-
        # Booleans

        In the past few levels, we have been comparing values of sprites to find out whether something is true or false. Let's start putting that in the context of an animation.

        # Do This

        The program draws a race car and a finish line. We are going to figure out when the race car crosses the finish line. The sprites have all been set up for you.

        -   Add a `console.log` statement inside the draw loop. ( [Show me where](#triggercallout=callout) )
        -   Add an Boolean expression inside the `console.log` that asks "Is the x position of the race car less than the x position of the finish line?"
        -   Look at the output of the program as the car moves. When does the output change? Why?
      CSD U3 - conditionals - transition_2018: |-
        # Booleans

        In the past few levels, we have been comparing values of sprites to find out whether something is true or false. Let's start putting that in the context of an animation.

        # Do This

        The program draws a race car and a finish line. We are going to figure out when the race car crosses the finish line. The sprites have all been set up for you.

        -   Add a `console.log` statement inside the draw loop. ( [Show me where](#triggercallout=callout) )
        -   Add an Boolean expression inside the `console.log` that asks "Is the x position of the race car less than the x position of the finish line?"
        -   Look at the output of the program as the car moves. When does the output change? Why?
      CSD U3 - conditionals - transition_2019: |-
        # Booleans

        In den letzten paar Leveln haben wir die Werte von Sprites verglichen, um herauszufinden, ob etwas wahr oder falsch ist. Beginnen wir damit, das in den Kontext einer Animation zu stellen.

        # Mache Folgendes

        Das Programm zeichnet einen Rennwagen und eine Ziellinie. Wir werden herausfinden, wann der Rennwagen die Ziellinie überquert. Die Sprites sind alle für dich eingerichtet.

        -   Füge eine `console.log`-Anweisung innerhalb der Zeichenschleife hinzu. ( [Zeige mir, wo](#triggercallout=callout) )
        -   Füge einen booleschen Ausdruck in die `console.log` ein, der fragt: "Ist die x-Position des Rennwagens kleiner als die x-Position der Ziellinie"?
        -   Betrachte die Ausgabe des Programms, während sich das Fahrzeug bewegt. Wann ändert sich der Ausgang? Warum?
      CSD U3 AnimationsMulti Play Defender: |-
        # Defend Your Cake!

        This is an example of a defender game that you'll build by the end of this lesson. To defend your cake, move the alien with arrow keys to block the lady bugs and push them into the water.

        # Do This

        Turn to a classmate and make a list of the following information.

        -   How many sprites are there in this game. Which are they?
        -   What variables are needed to make this game? What do they store?
        -   If you were to split the code of this game into functions what do you think they would be? What are the major pieces of behavior you'd need to create in your code?
      CSD U3 AnimationsMulti Play Defender_2018: |-
        # Defend Your Cake!

        This is an example of a defender game that you'll build by the end of this lesson. To defend your cake, move the alien with arrow keys to block the lady bugs and push them into the water.

        # Do This

        Turn to a classmate and make a list of the following information.

        -   How many sprites are there in this game. Which are they?
        -   What variables are needed to make this game? What do they store?
        -   If you were to split the code of this game into functions what do you think they would be? What are the major pieces of behavior you'd need to create in your code?
      CSD U3 AnimationsMulti Play Defender_2019: |-
        # Defend Your Cake!

        This is an example of a defender game that you'll build by the end of this lesson. To defend your cake, move the alien with arrow keys to block the lady bugs and push them into the water.

        # Do This

        Turn to a classmate and make a list of the following information.

        -   How many sprites are there in this game. Which are they?
        -   What variables are needed to make this game? What do they store?
        -   If you were to split the code of this game into functions what do you think they would be? What are the major pieces of behavior you'd need to create in your code?
      CSD U3 AnimationsMulti defender animate cake enemies: |-
        # Getting Started: Set Animations

        You should have already reviewed the planning guide for this project. A lot of the work to turn this project guide into a working game has already been started. Based on the project guide you're going to do the rest of this work.

        # Do This

        Before we get started you'll want some better animations for each of your sprites.

        -   In the Animation Tab are animations for each of your sprites. Go look at what they are.
        -   In your code give each sprite its appropriate animation. **Use the ones provided for now** but later you'll be able to go change them.
        -   Head to [Level 4](/s/csd3-2017/stage/20/puzzle/4) if you need help remembering how to do this.
      CSD U3 AnimationsMulti defender animate cake enemies_2018: |-
        # Getting Started: Set Animations

        You should have already reviewed the planning guide for this project. A lot of the work to turn this project guide into a working game has already been started. Based on the project guide you're going to do the rest of this work.

        # Do This

        Before we get started you'll want some better animations for each of your sprites.

        -   In the Animation Tab are animations for each of your sprites. Go look at what they are.
        -   In your code give each sprite its appropriate animation. **Use the ones provided for now** but later you'll be able to go change them.
        -   Head to [Level 4](/s/csd3-2018/stage/20/puzzle/4) if you need help remembering how to do this.
      CSD U3 AnimationsMulti defender animate cake enemies_2019: |-
        # Getting Started: Set Animations

        You should have already reviewed the planning guide for this project. A lot of the work to turn this project guide into a working game has already been started. Based on the project guide you're going to do the rest of this work.

        # Do This

        Before we get started you'll want some better animations for each of your sprites.

        -   In the Animation Tab are animations for each of your sprites. Go look at what they are.
        -   In your code give each sprite its appropriate animation. **Use the ones provided for now** but later you'll be able to go change them.
        -   Head to [Level 4](../../20/puzzle/4) if you need help remembering how to do this.
      CSD U3 AnimationsMulti defender animate player: |-
        # Change Player Animations

        Right now your player is always facing the same direction. You can make things look a lot more realistic by switching between animations. Your player should switch between a left-facing and right-facing animation depending on which key was last pressed. Remember, you can quickly copy and edit animations inside the Animation Tab.

        # Do This

        -   Inside the Animation Tab copy the animation of your player sprite.
        -   Flip each frame of the new animation so that the sprite is facing in the opposite direction.
        -   Rename your new animation.
        -   Use the `setAnimation` command inside the `movePlayer` function so that the player changes the direction it is facing when the "left" and "right" arrows are pressed.
      CSD U3 AnimationsMulti defender animate player_2018: |-
        # Change Player Animations

        Right now your player is always facing the same direction. You can make things look a lot more realistic by switching between animations. Your player should switch between a left-facing and right-facing animation depending on which key was last pressed. Remember, you can quickly copy and edit animations inside the Animation Tab.

        # Do This

        -   Inside the Animation Tab copy the animation of your player sprite.
        -   Flip each frame of the new animation so that the sprite is facing in the opposite direction.
        -   Rename your new animation.
        -   Use the `setAnimation` command inside the `movePlayer` function so that the player changes the direction it is facing when the "left" and "right" arrows are pressed.
      CSD U3 AnimationsMulti defender animate player_2019: |-
        # Change Player Animations

        Right now your player is always facing the same direction. You can make things look a lot more realistic by switching between animations. Your player should switch between a left-facing and right-facing animation depending on which key was last pressed. Remember, you can quickly copy and edit animations inside the Animation Tab.

        # Do This

        -   Inside the Animation Tab copy the animation of your player sprite.
        -   Flip each frame of the new animation so that the sprite is facing in the opposite direction.
        -   Rename your new animation.
        -   Use the `setAnimation` command inside the `movePlayer` function so that the player changes the direction it is facing when the "left" and "right" arrows are pressed.
      CSD U3 AnimationsMulti defender create set enemies: |-
        # Creating Functions

        <img src="https://images.code.org/126982cbde9ae62e9a77ca1e53c92024-image-1476291567280.58.00 AM.png" style="float:right; height:90px">

        Your program now includes code in two places to set the enemies on the left side of the screen at a random y location. You can create functions to reset each of your two enemies to remove repetitions from your program. This will make your program easier to read, allow you to change it more easily, and allow you to quickly reset your sprites at other points in your program if you need to.

        # Do This

        <img src="https://images.code.org/01a2f4d9725162482fda9f74734c992c-image-1476461412974.09.52 AM.png" style="
        float:right; height:70px">

        -   At the bottom of your program create two new functions, `setEnemy1` and `setEnemy2`.
        -   Inside each of these functions place the code that sets the enemies on the left side of the screen and gives them a random y position.
        -   Wherever the code for `setEnemy1` and `setEnemy2` appears in your program replace them with a call to the functions you just created.
      CSD U3 AnimationsMulti defender create set enemies_2018: |-
        # Creating Functions

        <img src="https://images.code.org/126982cbde9ae62e9a77ca1e53c92024-image-1476291567280.58.00 AM.png" style="float:right; height:90px">

        Your program now includes code in two places to set the enemies on the left side of the screen at a random y location. You can create functions to reset each of your two enemies to remove repetitions from your program. This will make your program easier to read, allow you to change it more easily, and allow you to quickly reset your sprites at other points in your program if you need to.

        # Do This

        <img src="https://images.code.org/01a2f4d9725162482fda9f74734c992c-image-1476461412974.09.52 AM.png" style="
        float:right; height:70px">

        -   At the bottom of your program create two new functions, `setEnemy1` and `setEnemy2`.
        -   Inside each of these functions place the code that sets the enemies on the left side of the screen and gives them a random y position.
        -   Wherever the code for `setEnemy1` and `setEnemy2` appears in your program replace them with a call to the functions you just created.
      CSD U3 AnimationsMulti defender create set enemies_2019: |-
        # Creating Functions

        <img src="https://images.code.org/126982cbde9ae62e9a77ca1e53c92024-image-1476291567280.58.00 AM.png" style="float:right; height:90px">

        Your program now includes code in two places to set the enemies on the left side of the screen at a random y location. You can create functions to reset each of your two enemies to remove repetitions from your program. This will make your program easier to read, allow you to change it more easily, and allow you to quickly reset your sprites at other points in your program if you need to.

        # Do This

        <img src="https://images.code.org/01a2f4d9725162482fda9f74734c992c-image-1476461412974.09.52 AM.png" style="
        float:right; height:70px">

        -   At the bottom of your program create two new functions, `setEnemy1` and `setEnemy2`.
        -   Inside each of these functions place the code that sets the enemies on the left side of the screen and gives them a random y position.
        -   Wherever the code for `setEnemy1` and `setEnemy2` appears in your program replace them with a call to the functions you just created.
      CSD U3 AnimationsMulti defender displace enemies: |-
        # Displace Enemies

        It's time to write code for some more sprite interactions. Your player sprite should displace the enemy sprites.

        # Do This

        For this level you'll be writing code inside the `displaceEnemies` function.

        -   Write code that makes player displace both enemy sprites.
        -   Test your program to make sure your player is displacing enemies but they keep moving right after the player moves away.

        _Hint: You can use `sprite.debug` to see your sprites' colliders if you need to debug your program._
      CSD U3 AnimationsMulti defender displace enemies_2018: |-
        # Displace Enemies

        It's time to write code for some more sprite interactions. Your player sprite should displace the enemy sprites.

        # Do This

        For this level you'll be writing code inside the `displaceEnemies` function.

        -   Write code that makes player displace both enemy sprites.
        -   Test your program to make sure your player is displacing enemies but they keep moving right after the player moves away.

        _Hint: You can use `sprite.debug` to see your sprites' colliders if you need to debug your program._
      CSD U3 AnimationsMulti defender displace enemies_2019: |-
        # Displace Enemies

        It's time to write code for some more sprite interactions. Your player sprite should displace the enemy sprites.

        # Do This

        For this level you'll be writing code inside the `displaceEnemies` function.

        -   Write code that makes player displace both enemy sprites.
        -   Test your program to make sure your player is displacing enemies but they keep moving right after the player moves away.

        _Hint: You can use `sprite.debug` to see your sprites' colliders if you need to debug your program._
      CSD U3 AnimationsMulti defender enemies move: |-
        # Moving The Enemies

        It's time to start writing the code that will move your sprites. To begin you'll need to get your enemy sprites to a random position and moving across the screen.

        # Do This

        At the top of your program, after you create each enemy sprite, write code that will move it to the correct position and give it the correct velocity.

        -   Use `sprite.x` to set the x position to 0.
        -   Use `sprite.y` to set the y position should be a random number between 150 and 250.
        -   Use `sprite.velocityX` to set the x velocity to 2.

        Test your program. Your enemy sprites should now be moving across the bridge.
      CSD U3 AnimationsMulti defender enemies move_2018: |-
        # Moving The Enemies

        It's time to start writing the code that will move your sprites. To begin you'll need to get your enemy sprites to a random position and moving across the screen.

        # Do This

        At the top of your program, after you create each enemy sprite, write code that will move it to the correct position and give it the correct velocity.

        -   Use `sprite.x` to set the x position to 0.
        -   Use `sprite.y` to set the y position should be a random number between 150 and 250.
        -   Use `sprite.velocityX` to set the x velocity to 2.

        Test your program. Your enemy sprites should now be moving across the bridge.
      CSD U3 AnimationsMulti defender enemies move_2019: |-
        # Moving The Enemies

        It's time to start writing the code that will move your sprites. To begin you'll need to get your enemy sprites to a random position and moving across the screen.

        # Do This

        At the top of your program, after you create each enemy sprite, write code that will move it to the correct position and give it the correct velocity.

        -   Use `sprite.x` to set the x position to 0.
        -   Use `sprite.y` to set the y position should be a random number between 150 and 250.
        -   Use `sprite.velocityX` to set the x velocity to 2.

        Test your program. Your enemy sprites should now be moving across the bridge.
      CSD U3 AnimationsMulti defender enemies touch cake: |-
        # Touching the Cake

        If the enemies get all the way across to the cake you should place them back at the left side of the screen and decrease the score. To start you'll **write code for only one of your enemies**.

        # Do This

        Inside the `enemiesTouchCake` function you'll need to write code that checks when a ladybug is touching the cake, resets its position, and changes the score.

        -   Use an `if` and `isTouching` to detect whether enemy1 has touched the cake.
        -   Inside your `if` block place code that:
            -   sets enemy1's x position back to 0.
            -   sets enemy1's y position to a random number between 150 and 250.
            -   uses the counter pattern to decrease the score by 2.

        (_Hint: You can reuse some code you already wrote_)

        Test your code. One of your ladybugs should now reset when it gets across to the cake, and the score should go down by 2.
      CSD U3 AnimationsMulti defender enemies touch cake sprite2: |-
        # Touching the Cake: Second Ladybug

        Your first enemy sprite should now be resetting when it gets to the cake. Now you'll want the other ladybug to reset as well.

        # Do This

        Inside the `enemiesTouchCake` function you should have written code that resets `enemy1`.

        -   Copy the entire if-statement you wrote in the last level (Ctrl-C).
        -   Paste the code inside of the `enemiesTouchCake` function, just below the last one (Ctrl-V).
        -   Change the name of the sprite in that code from `enemy1` to `enemy2`.

        Test your code. Now both bugs should reset when they touch the cake.
      CSD U3 AnimationsMulti defender enemies touch cake sprite2_2018: |-
        # Touching the Cake: Second Ladybug

        Your first enemy sprite should now be resetting when it gets to the cake. Now you'll want the other ladybug to reset as well.

        # Do This

        Inside the `enemiesTouchCake` function you should have written code that resets `enemy1`.

        -   Copy the entire if-statement you wrote in the last level (Ctrl-C).
        -   Paste the code inside of the `enemiesTouchCake` function, just below the last one (Ctrl-V).
        -   Change the name of the sprite in that code from `enemy1` to `enemy2`.

        Test your code. Now both bugs should reset when they touch the cake.
      CSD U3 AnimationsMulti defender enemies touch cake sprite2_2019: |-
        # Touching the Cake: Second Ladybug

        Your first enemy sprite should now be resetting when it gets to the cake. Now you'll want the other ladybug to reset as well.

        # Do This

        Inside the `enemiesTouchCake` function you should have written code that resets `enemy1`.

        -   Copy the entire if-statement you wrote in the last level (Ctrl-C).
        -   Paste the code inside of the `enemiesTouchCake` function, just below the last one (Ctrl-V).
        -   Change the name of the sprite in that code from `enemy1` to `enemy2`.

        Test your code. Now both bugs should reset when they touch the cake.
      CSD U3 AnimationsMulti defender enemies touch cake_2018: |-
        # Touching the Cake

        If the enemies get all the way across to the cake you should place them back at the left side of the screen and decrease the score. To start you'll **write code for only one of your enemies**.

        # Do This

        Inside the `enemiesTouchCake` function you'll need to write code that checks when a ladybug is touching the cake, resets its position, and changes the score.

        -   Use an `if` and `isTouching` to detect whether enemy1 has touched the cake.
        -   Inside your `if` block place code that:
            -   sets enemy1's x position back to 0.
            -   sets enemy1's y position to a random number between 150 and 250.
            -   uses the counter pattern to decrease the score by 2.

        (_Hint: You can reuse some code you already wrote_)

        Test your code. One of your ladybugs should now reset when it gets across to the cake, and the score should go down by 2.
      CSD U3 AnimationsMulti defender enemies touch cake_2019: |-
        # Touching the Cake

        If the enemies get all the way across to the cake you should place them back at the left side of the screen and decrease the score. To start you'll **write code for only one of your enemies**.

        # Do This

        Inside the `enemiesTouchCake` function you'll need to write code that checks when a ladybug is touching the cake, resets its position, and changes the score.

        -   Use an `if` and `isTouching` to detect whether enemy1 has touched the cake.
        -   Inside your `if` block place code that:
            -   sets enemy1's x position back to 0.
            -   sets enemy1's y position to a random number between 150 and 250.
            -   uses the counter pattern to decrease the score by 2.

        (_Hint: You can reuse some code you already wrote_)

        Test your code. One of your ladybugs should now reset when it gets across to the cake, and the score should go down by 2.
      CSD U3 AnimationsMulti defender make it your own: |-
        # Make It Your Own

        You just walked through someone else's plan for creating a game, so now it's time to make it your own. What additional features or challenges do you want to create?

        # Do This

        Select one of the challenges below to add to the game or come up with a challenge of your own.

        -   Change the visuals of the game so that your player, enemies, or cake look different.
        -   End the game when the enemies get to the cake and print the score. For an extra challenge end the game only after 3 enemies get through.
        -   Randomize the speed of the enemies.
        -   Create a new background that shows up when players reach a higher score.
      CSD U3 AnimationsMulti defender make it your own_2018: |-
        # Make It Your Own

        You just walked through someone else's plan for creating a game, so now it's time to make it your own. What additional features or challenges do you want to create?

        # Do This

        Select one of the challenges below to add to the game or come up with a challenge of your own.

        -   Change the visuals of the game so that your player, enemies, or cake look different.
        -   End the game when the enemies get to the cake and print the score. For an extra challenge end the game only after 3 enemies get through.
        -   Randomize the speed of the enemies.
        -   Create a new background that shows up when players reach a higher score.
      CSD U3 AnimationsMulti defender make it your own_2019: |-
        # Make It Your Own

        You just walked through someone else's plan for creating a game, so now it's time to make it your own. What additional features or challenges do you want to create?

        # Do This

        Select one of the challenges below to add to the game or come up with a challenge of your own.

        -   Change the visuals of the game so that your player, enemies, or cake look different.
        -   End the game when the enemies get to the cake and print the score. For an extra challenge end the game only after 3 enemies get through.
        -   Randomize the speed of the enemies.
        -   Create a new background that shows up when players reach a higher score.
      CSD U3 AnimationsMulti defender move player: |-
        # Moving Left and Right

        Now that your enemy sprites are moving correctly, it's time to write the code to move your player. For now you'll just need to get your character moving left and right and changing its animations.

        # Do This

        For this level you'll be writing code inside the `movePlayer` function.

        -   Use an `if` block along with `keyDown` to detect when the "right" arrow is pressed.
        -   Use `sprite.x` and the counter pattern increase the player's x position by 3.
        -   Use another `if` block to move the player to the left when the "left" arrow is pressed. This time you'll need to decrease the player's x position.

        Test your game. Your character sprite should now move left and right when you press the left and right arrows.
      CSD U3 AnimationsMulti defender move player_2018: |-
        # Moving Left and Right

        Now that your enemy sprites are moving correctly, it's time to write the code to move your player. For now you'll just need to get your character moving left and right and changing its animations.

        # Do This

        For this level you'll be writing code inside the `movePlayer` function.

        -   Use an `if` block along with `keyDown` to detect when the "right" arrow is pressed.
        -   Use `sprite.x` and the counter pattern increase the player's x position by 3.
        -   Use another `if` block to move the player to the left when the "left" arrow is pressed. This time you'll need to decrease the player's x position.

        Test your game. Your character sprite should now move left and right when you press the left and right arrows.
      CSD U3 AnimationsMulti defender move player_2019: |-
        # Moving Left and Right

        Now that your enemy sprites are moving correctly, it's time to write the code to move your player. For now you'll just need to get your character moving left and right and changing its animations.

        # Do This

        For this level you'll be writing code inside the `movePlayer` function.

        -   Use an `if` block along with `keyDown` to detect when the "right" arrow is pressed.
        -   Use `sprite.x` and the counter pattern increase the player's x position by 3.
        -   Use another `if` block to move the player to the left when the "left" arrow is pressed. This time you'll need to decrease the player's x position.

        Test your game. Your character sprite should now move left and right when you press the left and right arrows.
      CSD U3 AnimationsMulti defender move up down: |-
        # Moving Up and Down

        You'll want your player sprite to move up and down as well.

        # Do This

        For this level you'll still be writing code inside the `movePlayer` function.

        -   Use an `if` block along with `keyDown` to detect when the "up" arrow is pressed.
        -   Use `sprite.y` to increase the player's y position by 3 using the counter pattern.
        -   Use another `if` block to move the player down when the "down" arrow is pressed.

        Test your code. Your character should now move in all 4 directions.
      CSD U3 AnimationsMulti defender move up down_2018: |-
        # Moving Up and Down

        You'll want your player sprite to move up and down as well.

        # Do This

        For this level you'll still be writing code inside the `movePlayer` function.

        -   Use an `if` block along with `keyDown` to detect when the "up" arrow is pressed.
        -   Use `sprite.y` to make the player go up by 3 using the counter pattern.
        -   Use another `if` block to move the player down when the "down" arrow is pressed.

        Test your code. Your character should now move in all 4 directions.
      CSD U3 AnimationsMulti defender move up down_2019: |-
        # Moving Up and Down

        You'll want your player sprite to move up and down as well.

        # Do This

        For this level you'll still be writing code inside the `movePlayer` function.

        -   Use an `if` block along with `keyDown` to detect when the "up" arrow is pressed.
        -   Use `sprite.y` to make the player go up by 3 using the counter pattern.
        -   Use another `if` block to move the player down when the "down" arrow is pressed.

        Test your code. Your character should now move in all 4 directions.
      CSD U3 AnimationsMulti defender touch water: |-
        # Touching the Water

        The last part of the game that you'll need to write is the code to reset the sprites when they touch the water. Luckily you should have already written functions that reset each sprite, so you'll just need a good way to know when either sprite leaves the bridge. Start by writing the code for a single enemy and then copy-paste and make small changes to create code for your second enemy.

        # Do This

        For this level you'll be writing code inside the `enemiesTouchWater` function.

        -   Use an `if` statement to check whether enemy1 is off the top of the bridge by checking whether its y value is below 140. Within your if statement:
            -   use your `setEnemy1` function to reset the sprite.
            -   add 1 to the score.
        -   Use an if statement to check whether enemy1 is off the bottom of the bridge by checking whether its y value is above 260. Within your if statement:
            -   use your `setEnemy1` function to reset the sprite.
            -   add 1 to the score.
        -   Test your program for the first enemy sprite. Make sure the sprite is resetting and the score goes up.
        -   Once it is working copy and paste the code you wrote to create the same behavior for `enemy2`. You'll need to change the name of the sprite and the name of the functions you use.
      CSD U3 AnimationsMulti defender touch water_2018: |-
        # Touching the Water

        The last part of the game that you'll need to write is the code to reset the sprites when they touch the water. Luckily you should have already written functions that reset each sprite, so you'll just need a good way to know when either sprite leaves the bridge. Start by writing the code for a single enemy and then copy-paste and make small changes to create code for your second enemy.

        # Do This

        For this level you'll be writing code inside the `enemiesTouchWater` function.

        -   Use an `if` statement to check whether enemy1 is off the top of the bridge by checking whether its y value is below 140. Within your if statement:
            -   use your `setEnemy1` function to reset the sprite.
            -   add 1 to the score.
        -   Use an if statement to check whether enemy1 is off the bottom of the bridge by checking whether its y value is above 260. Within your if statement:
            -   use your `setEnemy1` function to reset the sprite.
            -   add 1 to the score.
        -   Test your program for the first enemy sprite. Make sure the sprite is resetting and the score goes up.
        -   Once it is working copy and paste the code you wrote to create the same behavior for `enemy2`. You'll need to change the name of the sprite and the name of the functions you use.
      CSD U3 AnimationsMulti defender touch water_2019: |-
        # Touching the Water

        The last part of the game that you'll need to write is the code to reset the sprites when they touch the water. Luckily you should have already written functions that reset each sprite, so you'll just need a good way to know when either sprite leaves the bridge. Start by writing the code for a single enemy and then copy-paste and make small changes to create code for your second enemy.

        # Do This

        For this level you'll be writing code inside the `enemiesTouchWater` function.

        -   Use an `if` statement to check whether enemy1 is off the top of the bridge by checking whether its y value is below 140. Within your if statement:
            -   use your `setEnemy1` function to reset the sprite.
            -   add 1 to the score.
        -   Use an if statement to check whether enemy1 is off the bottom of the bridge by checking whether its y value is above 260. Within your if statement:
            -   use your `setEnemy1` function to reset the sprite.
            -   add 1 to the score.
        -   Test your program for the first enemy sprite. Make sure the sprite is resetting and the score goes up.
        -   Once it is working copy and paste the code you wrote to create the same behavior for `enemy2`. You'll need to change the name of the sprite and the name of the functions you use.
      CSD U3 AnimationsMulti introducing multiframe: |-
        # Using Multiframe Animations

        In the sample defender game the sprites themselves were animated. Before getting started on programming this game, take a minute to get familiar with this new way of animating sprites.

        # Do This

        This program already includes several sprites but they don't yet have any animations.

        -   Go to the Animation Tab and check out the multi-frame animations already added to your project. Choose one for each of your characters.
        -   Remember you can use `setAnimation` to give your sprites animations you've created in the Animation Tab.
      CSD U3 AnimationsMulti introducing multiframe_2018: |-
        # Using Multiframe Animations

        In the sample defender game the sprites themselves were animated. Before getting started on programming this game, take a minute to get familiar with this new way of animating sprites.

        # Do This

        This program already includes several sprites but they don't yet have any animations.

        -   Go to the Animation Tab and check out the multi-frame animations already added to your project. Choose one for each of your characters.
        -   Remember you can use `setAnimation` to give your sprites animations you've created in the Animation Tab.
      CSD U3 AnimationsMulti introducing multiframe_2019: |-
        # Using Multiframe Animations

        In the sample defender game the sprites themselves were animated. Before getting started on programming this game, take a minute to get familiar with this new way of animating sprites.

        # Do This

        This program already includes several sprites but they don't yet have any animations.

        -   Go to the Animation Tab and check out the multi-frame animations already added to your project. Choose one for each of your characters.
        -   Remember you can use `setAnimation` to give your sprites animations you've created in the Animation Tab.
      CSD U3 AnimationsMulti mirror animation: "# Editing Multiframe Animations\n\nYour
        sprites will look a lot more realistic if they turn around when they're moving.
        You can switch back and forth between multiframe animations when the user
        presses different keys.\n\n# Do This\n\nRead this code and run the program.
        Make sure you know how the sprite responds to the arrow keys.\n\n-   In the
        Animation Tab, create a copy of the alien animation by clicking the following
        button: ![](<https://images.code.org/aee81f9cd3f63bb8a9c91ac3ab250a87-image-1475699896387.38.09
        PM.png>)\n-   Use the tool to flip your animation. Make sure you flip both
        frames using this button:  ![](<https://images.code.org/3b10b4a612f9a7c640dc7bb18f4c2b91-image-1475699599617.33.03
        PM.png>) \n-   Rename your new animation.\n-   Use your new animation and
        old animation so that the alien faces the correct direction when moving. Where
        do you think you'll need to set the sprite's animation in your code?"
      CSD U3 AnimationsMulti mirror animation_2018: "# Editing Multiframe Animations\n\nYour
        sprites will look a lot more realistic if they turn around when they're moving.
        You can switch back and forth between multiframe animations when the user
        presses different keys.\n\n# Do This\n\nRead this code and run the program.
        Make sure you know how the sprite responds to the arrow keys.\n\n-   In the
        Animation Tab, create a copy of the alien animation by clicking the following
        button: ![](<https://images.code.org/aee81f9cd3f63bb8a9c91ac3ab250a87-image-1475699896387.38.09
        PM.png>)\n-   Use the tool to flip your animation. Make sure you flip both
        frames using this button:  ![](<https://images.code.org/3b10b4a612f9a7c640dc7bb18f4c2b91-image-1475699599617.33.03
        PM.png>) \n-   Rename your new animation.\n-   Use your new animation and
        old animation so that the alien faces the correct direction when moving. Where
        do you think you'll need to set the sprite's animation in your code?"
      CSD U3 AnimationsMulti mirror animation_2019: "# Editing Multiframe Animations\n\nYour
        sprites will look a lot more realistic if they turn around when they're moving.
        You can switch back and forth between multiframe animations when the user
        presses different keys.\n\n# Do This\n\nRead this code and run the program.
        Make sure you know how the sprite responds to the arrow keys.\n\n-   In the
        Animation Tab, create a copy of the alien animation by clicking the following
        button: ![](<https://images.code.org/aee81f9cd3f63bb8a9c91ac3ab250a87-image-1475699896387.38.09
        PM.png>)\n-   Use the tool to flip your animation. Make sure you flip both
        frames using this button:  ![](<https://images.code.org/3b10b4a612f9a7c640dc7bb18f4c2b91-image-1475699599617.33.03
        PM.png>) \n-   Rename your new animation.\n-   Use your new animation and
        old animation so that the alien faces the correct direction when moving. Where
        do you think you'll need to set the sprite's animation in your code?"
      CSD U3 AnimationsMulti slow down: "# Slow Down\n\nNice work! Time to start learning
        how to control these multiframe animations.\n\n# Do This\n\nYour sprites should
        be animated but they're moving really quickly. \n\n-   Head back to the Animation
        Tab. Underneath each animation you should see a slider. ![](<https://images.code.org/169e11c1f6f55b607937fe9cb7e5e390-image-1476209267457.07.26
        AM.png>)\n-   Use these sliders to slow down your animations so they look
        more realistic."
      CSD U3 AnimationsMulti slow down_2018: "# Slow Down\n\nNice work! Time to start
        learning how to control these multiframe animations.\n\n# Do This\n\nYour
        sprites should be animated but they're moving really quickly. \n\n-   Head
        back to the Animation Tab. Underneath each animation you should see a slider.
        ![](<https://images.code.org/169e11c1f6f55b607937fe9cb7e5e390-image-1476209267457.07.26
        AM.png>)\n-   Use these sliders to slow down your animations so they look
        more realistic."
      CSD U3 AnimationsMulti slow down_2019: "# Slow Down\n\nNice work! Time to start
        learning how to control these multiframe animations.\n\n# Do This\n\nYour
        sprites should be animated but they're moving really quickly. \n\n-   Head
        back to the Animation Tab. Underneath each animation you should see a slider.
        ![](<https://images.code.org/169e11c1f6f55b607937fe9cb7e5e390-image-1476209267457.07.26
        AM.png>)\n-   Use these sliders to slow down your animations so they look
        more realistic."
      CSD U3 Boolean Modify: "# Boolean Expressions\n\nThe simplest Boolean expressions
        are questions that the computer can answer with true or false. These expressions
        are made using **comparison operators**, as shown below.\n\n|                                                Comparison
        Operator                                                | Boolean Expression
        |        Meaning        |\n| :---------------------------------------------------------------------------------------------------------------:
        | :----------------: | :-------------------: |\n| <img src=\"https://images.code.org/1a0798d75d4242715e7608d825f95101-image-1447271431312.png\"
        style=\"width: 100px\"> |       `1 < 9`      |   Is 1 less than 9?   |\n|
        <img src=\"https://images.code.org/5ff460ac121f0ac51b569e96a4404c57-image-1447271431310.png\"
        style=\"width: 100px\"> |       `1 > 9`      | Is 1 greater than 9 ? |\n|
        <img src=\"https://images.code.org/a4daa9efccea2278e165592efe343c1a-image-1447271431308.png\"
        style=\"width: 100px\"> |      `1 == 9`      |    Is 1 equal to 9?   |\n\n<br>\n\n**Note:**
        If you saw the statement 3 \\< 2 in math class, you'd think something was
        terribly wrong, but this is not math class.  In computer science, the comparison
        operators **ask a question** that the computer will answer with `true` or
        `false`. So you can read 3 \\< 2 as **\"Is 3 less than 2?\"** The answer in
        this case is no, or `false`.  \n\nAnother way to say this is that the Boolean
        expression `3 < 2` **evaluates** to `false`.\n\n# Do This\n\nCan you modify
        the values of the sprite properties so that each of the Boolean expressions
        evaluates to `true`?\n\n-   Read through the entire program to see how `sprite1`
        and `sprite2` are being created and which properties are compared.\n-   For
        each of the Boolean expressions, identify the sprite properties being compared.\n-
        \  Change the code _in the first **11** lines only_ so that each of the `console.log()`
        statements print `true`."
      CSD U3 Boolean Modify_2018: |-
        # Boolean Expressions

        The simplest Boolean expressions are questions that the computer can answer with true or false. These expressions are made using **comparison operators**, as shown below.

        |                                                Comparison Operator                                                | Boolean Expression |        Meaning        |
        | :---------------------------------------------------------------------------------------------------------------: | :----------------: | :-------------------: |
        | <img src="https://images.code.org/1a0798d75d4242715e7608d825f95101-image-1447271431312.png" style="width: 100px"> |       `1 < 9`      |   Is 1 less than 9?   |
        | <img src="https://images.code.org/5ff460ac121f0ac51b569e96a4404c57-image-1447271431310.png" style="width: 100px"> |       `1 > 9`      | Is 1 greater than 9 ? |
        | <img src="https://images.code.org/a4daa9efccea2278e165592efe343c1a-image-1447271431308.png" style="width: 100px"> |      `1 == 9`      |    Is 1 equal to 9?   |

        **Note:** If you saw the statement 3 \< 2 in math class, you'd think something was terribly wrong, but this is not math class.  In computer science, the comparison operators **ask a question** that the computer will answer with `true` or `false`. So you can read 3 \< 2 as **"Is 3 less than 2?"** The answer in this case is no, or `false`.

        Another way to say this is that the Boolean expression `3 < 2` **evaluates** to `false`.

        # Do This

        Can you modify the values of the sprite properties so that each of the Boolean expressions evaluates to `true`?

        -   Read through the entire program to see how `sprite1` and `sprite2` are being created and which properties are compared.
        -   For each of the Boolean expressions, identify the sprite properties being compared.
        -   Change the code _in the first **11** lines only_ so that each of the `console.log()` statements print `true`.
      CSD U3 Boolean Modify_2019: "# Boolesche Ausdrücke\n\nDie einfachsten booleschen
        Ausdrücke sind Fragen, die der Computer mit wahr oder falsch beantworten kann.
        \nMan kann dabei auch sagen, dass es sich um boolesche Ausdrücke handelt,
        die zu \"wahr\" oder \"falsch\" ausgewertet werden.\n\n# Mache Folgendes\n\nKannst
        du die Werte der Sprite-Eigenschaften so ändern, dass jeder der booleschen
        Ausdrücke als \"wahr\" ausgewertet wird?\n\n-   Lese das gesamte Programm
        durch, um zu sehen, wie `sprite1` und `sprite2` erstellt werden und welche
        Eigenschaften verglichen werden.\n-   Identifiziere für jeden der booleschen
        Ausdrücke die zu vergleichenden Sprite-Eigenschaften.\n-   Ändere den Code
        _nur in den ersten **11** Zeilen_ so, dass jede der `console.log()` Anweisungen
        `true` ausgibt."
      CSD U3 Complex Movement counter prediction: |-
        # Velocity and the Counter Pattern

        Using the counter pattern with a sprite's x and y property makes a sprite move smoothly across the screen. In this program **the counter pattern is being used with the `sprite.velocityX` property** instead.

        # Predict

        What do you think will happen when the code is run? Why? Once you're ready you can run the code to find out.
      CSD U3 Complex Movement counter prediction_2018: |-
        # Velocity and the Counter Pattern

        Using the counter pattern with a sprite's x and y property makes a sprite move smoothly across the screen. In this program **the counter pattern is being used with the `sprite.velocityX` property** instead.

        # Predict

        What do you think will happen when the code is run? Why? Once you're ready you can run the code to find out.
      CSD U3 Complex Movement counter prediction_2019: |-
        # Velocity and the Counter Pattern

        Using the counter pattern with a sprite's x and y property makes a sprite move smoothly across the screen. In this program **the counter pattern is being used with the `sprite.velocityX` property** instead.

        # Predict

        What do you think will happen when the code is run? Why? Once you're ready you can run the code to find out.
      CSD U3 Compound Nested Challenge: |-
        # Challenge: Checking for Multiple Conditions

        _Check with your teacher before taking on this challenge._

        So far we've looked at a lot of ways to check if a single condition is true, but often a program needs to check the state of many conditions simultaneously before making a decision. For this challenge, let's assume the following scenario:

        -   The sprite should move up, down, left, and right if the corresponding arrow key is pressed.
        -   The sprite should _not_ go all the way off the screen in any direction.

        # Do This Together

        Before you tackle writing this program, you'll need to figure out how to check multiple conditions at once.

        -   **Brainstorm** with your neighbors ways you might check for more than one condition.
        -   **Share** back with the whole class so you can see other potential approaches.
        -   **Explore** the toolbox for blocks that might help (pay extra attention to the Math and Control drawers).
        -   **Program** your proposed solution.
        -   **Test** your program to make sure it's actually checking all of the conditions you intended.
      CSD U3 Compound Nested Challenge_2018: |-
        # Challenge: Checking for Multiple Conditions

        _Check with your teacher before taking on this challenge._

        So far we've looked at a lot of ways to check if a single condition is true, but often a program needs to check the state of many conditions simultaneously before making a decision. For this challenge, let's assume the following scenario:

        -   The sprite should move up, down, left, and right if the corresponding arrow key is pressed.
        -   The sprite should _not_ go all the way off the screen in any direction.

        # Do This Together

        Before you tackle writing this program, you'll need to figure out how to check multiple conditions at once.

        -   **Brainstorm** with your neighbors ways you might check for more than one condition.
        -   **Share** back with other classmates so you can see other potential approaches.
        -   **Explore** the toolbox for blocks that might help (pay extra attention to the Math and Control drawers).
        -   **Program** your proposed solution.
        -   **Test** your program to make sure it's actually checking all of the conditions you intended.
      CSD U3 Compound Nested Challenge_2019: |-
        # Challenge: Checking for Multiple Conditions

        _Check with your teacher before taking on this challenge._

        So far we've looked at a lot of ways to check if a single condition is true, but often a program needs to check the state of many conditions simultaneously before making a decision. For this challenge, let's assume the following scenario:

        -   The sprite should move up, down, left, and right if the corresponding arrow key is pressed.
        -   The sprite should _not_ go all the way off the screen in any direction.

        # Do This Together

        Before you tackle writing this program, you'll need to figure out how to check multiple conditions at once.

        -   **Brainstorm** with your neighbors ways you might check for more than one condition.
        -   **Share** back with other classmates so you can see other potential approaches.
        -   **Explore** the toolbox for blocks that might help (pay extra attention to the Math and Control drawers).
        -   **Program** your proposed solution.
        -   **Test** your program to make sure it's actually checking all of the conditions you intended.
      CSD U3 Conditionals Apple: |-
        # More Practice With Booleans

        Let's use one more Boolean expression to check the condition of a sprite.

        # Do This

        There is a growing apple sprite created for you. It starts as green and should turn red when it gets to a scale of 2. We won't worry about making it red yet, let's just use a `console.log` command to check whether it's scale is 2 yet.

        -   Add a `console.log` statement.
        -   Add a Boolean expression inside the `console.log` that checks whether the `apple.scale` is greater than 2.
      CSD U3 Conditionals Apple 2: |-
        # Turning Red

        Now that we know how to use _if_ statements, you can do more than just check if the apple has reached a scale of 2, you turn it red once it happens.

        # Do This

        Use a conditional in the draw loop to check whether `apple.scale` is greater than 2 - if it is, set the apples new animation to "apple\_red".

        _Challenge: Can you also make the apple stop growing once it turns red?_
      CSD U3 Conditionals Apple 2_2018: |-
        # Changing Fruit

        Now that we know how to use _if_ statements, you can do more than just check if the apple has reached a scale of 2. You turn it into a pear once it happens.

        # Do This

        Use a conditional in the draw loop to check whether `fruit.scale` is greater than 2.  If it is, change the fruit's animation to "pear".

        _Challenge: Can you also make the fruit stop growing once it turns into a pear?_
      CSD U3 Conditionals Apple 2_2018_2019: |-
        # Changing Fruit

        Now that we know how to use _if_ statements, you can do more than just check if the apple has reached a scale of 2. You turn it into a pear once it happens.

        # Do This

        Use a conditional in the draw loop to check whether `fruit.scale` is greater than 2.  If it is, change the fruit's animation to "pear".

        _Challenge: Can you also make the fruit stop growing once it turns into a pear?_
      CSD U3 Conditionals Apple_2018: |-
        # More Practice With Booleans

        Let's use one more Boolean expression to check the condition of a sprite.  You can use a `console.log` command to check whether its scale is 2 yet.

        # Do This

        -   Add a `console.log` statement.
        -   Add a Boolean expression inside the `console.log` that checks whether the `fruit.scale` is greater than 2.
      CSD U3 Conditionals Apple_2018_2019: |-
        # More Practice With Booleans

        Let's use one more Boolean expression to check the condition of a sprite.  You can use a `console.log` command to check whether its scale is 2 yet.

        # Do This

        -   Add a `console.log` statement.
        -   Add a Boolean expression inside the `console.log` that checks whether the `fruit.scale` is greater than 2.
      CSD U3 Counters explaining counters contained 2: "# The Counter Pattern\n\nThis
        pattern is one of the most important ones in all of programming. \n\n![](<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56
        PM.png>)\n\nIt is used to increase the value of a variable by 1. You might
        call it the **counter pattern** since it can be used to make a variable that
        counts up. You'll use this pattern a lot, especially with the draw loop. Let's
        see what that looks like.\n\n# Do This\n\nThis program creates a variable
        `counter` and then uses the **counter pattern** to make it count up. When
        you run the program what do you think you'll see on the screen?\n\n-   **Read
        the program** and make a prediction of what the output will be.\n-   **Run
        the program** to check your prediction.\n-   **Discuss with a neighbor**.
        Can you explain what you observed?"
      CSD U3 Counters explaining counters contained 2_2018: "# The Counter Pattern\n\nThis
        pattern is one of the most important ones in all of programming. \n\n![](<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56
        PM.png>)\n\nIt is used to increase the value of a variable by 1. You might
        call it the **counter pattern** since it can be used to make a variable that
        counts up. You'll use this pattern a lot, especially with the draw loop. Let's
        see what that looks like.\n\n# Do This\n\nThis program creates a variable
        `counter` and then uses the **counter pattern** to make it count up. When
        you run the program what do you think you'll see on the screen?\n\n-   **Read
        the program** and make a prediction of what the output will be.\n-   **Run
        the program** to check your prediction.\n-   **Discuss with a neighbor**.
        Can you explain what you observed?"
      CSD U3 Counters explaining counters contained 2_2019: "# The Counter Pattern\n\nThis
        pattern is one of the most important ones in all of programming. \n\n![](<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56
        PM.png>)\n\nIt is used to increase the value of a variable by 1. You might
        call it the **counter pattern** since it can be used to make a variable that
        counts up. You'll use this pattern a lot, especially with the draw loop. Let's
        see what that looks like.\n\n# Do This\n\nThis program creates a variable
        `counter` and then uses the **counter pattern** to make it count up. When
        you run the program what do you think you'll see on the screen?\n\n-   **Read
        the program** and make a prediction of what the output will be.\n-   **Run
        the program** to check your prediction.\n-   **Discuss with a neighbor**.
        Can you explain what you observed?"
      CSD U3 Diagonal Movement: |-
        <img src="https://images.code.org/f92774863b17074adc85b8f6bbd017f2-image-1492726926884.gif" style="float: right; margin-left: 20px;">

        # Diagonal Movement

        Updating only the `x` or `y` properties of a sprite can only make it move straight up and down or left and right. If you want a sprite to move on a diagonal path you'll need to update _both_ of those properties.

        This program currently makes the mouse move straight down the screen - can you update it so that it moves diagonally across the screen like the image to the right?

        _Challenge: Can you make the mouse point in the same direction as the image?_
      CSD U3 Diagonal Movement_2018: |-
        <img src="https://images.code.org/f92774863b17074adc85b8f6bbd017f2-image-1492726926884.gif" style="float: right; margin-left: 20px;">

        # Diagonal Movement

        Updating only the `x` or `y` properties of a sprite can only make it move straight up and down or left and right. If you want a sprite to move on a diagonal path you'll need to updated _both_ of those properties.

        This program currently makes the mouse move straight down the screen - can you update it so that it moves diagonally across the screen like the image to the right?

        _Challenge: Can you make the mouse point in the same direction as the image?_
      CSD U3 Diagonal Movement_2019: |-
        <img src="https://images.code.org/f92774863b17074adc85b8f6bbd017f2-image-1492726926884.gif" style="float: right; margin-left: 20px;">

        # Diagonal Movement

        Updating only the `x` or `y` properties of a sprite can only make it move straight up and down or left and right. If you want a sprite to move on a diagonal path you'll need to updated _both_ of those properties.

        This program currently makes the mouse move straight down the screen - can you update it so that it moves diagonally across the screen like the image to the right?

        _Challenge: Can you make the mouse point in the same direction as the image?_
      CSD U3 Direction Animations: |-
        # Changing Images as you Move

        Right now your conditionals only do one thing (change your sprite's x or y), but you can actually put as much code as you want inside a conditional. A common thing to do in games is to change your character's image depending on which direction they're walking.

        # Do This

        Using the provided program and images:

        -   Duplicate your chosen bug image four times.
        -   Edit each of your images to point in one of the four directions.
        -   Write code that uses `sprite.setAnimation()` to change the image on your bug sprite when different arrow keys are pressed.
      CSD U3 Direction Animations_2018: |-
        # Changing Images as you Move

        Right now your conditionals only do one thing (change your sprite's x or y), but you can actually put as much code as you want inside a conditional. A common thing to do in games is to change your character's image depending on which direction they're walking.

        # Do This

        Using the provided program and images:

        -   Duplicate your chosen bug image four times.
        -   Edit each of your images to point in one of the four directions.
        -   Write code that uses `sprite.setAnimation()` to change the image on your bug sprite when different arrow keys are pressed.
      CSD U3 Direction Animations_2018_2019: |-
        # Changing Images as you Move

        Right now your conditionals only do one thing (change your sprite's x or y), but you can actually put as much code as you want inside a conditional. A common thing to do in games is to change your character's image depending on which direction they're walking.

        # Do This

        Using the provided program and images:

        -   Duplicate your chosen bug image four times.
        -   Edit each of your images to point in one of the four directions.
        -   Write code that uses `sprite.setAnimation()` to change the image on your bug sprite when different arrow keys are pressed.
      CSD U3 Direction Arrows: |-
        # Move in All Directions

        Once you've got your sprite moving in one direction by responding to a `keyDown`, getting it to move in all four directions should be more of the same. The basic keyboard control that you're developing here will become the basis for many of the games you make down the road.

        # Do This

        The bug sprite you made that responds to the up arrow has been brought to this level. Add the interaction for the other three arrow keys!

        -   Add three if statements - one for each arrow.
        -   Each if statement should move the sprite in the direction of the arrow.

        _HINT: Make sure you consider both the axis (x or y) of movement, **and** whether you need to increase or decrease that value._
      CSD U3 Direction Arrows_2018: "# Move in All Directions\n\nOnce you've got your
        sprite moving in one direction by responding to a `keyDown`, getting it to
        move in all four directions should be more of the same. The basic keyboard
        control that you're developing here will become the basis for many of the
        games you make down the road.\n\n# Do This\n\nThe bug sprite you made that
        responds to the right arrow has been brought to this level. Add the interaction
        for the other three arrow keys!\n\n-   Add three if statements - one for each
        arrow.  \n-   Don't forget to include a comment for each if statement!\n-
        \  Each if statement should move the sprite in the direction of the arrow.\n\n_HINT:
        Make sure you consider both the axis (x or y) of movement, **and** whether
        you need to increase or decrease that value._"
      CSD U3 Direction Arrows_2018_2019: "# Move in All Directions\n\nOnce you've
        got your sprite moving in one direction by responding to a `keyDown`, getting
        it to move in all four directions should be more of the same. The basic keyboard
        control that you're developing here will become the basis for many of the
        games you make down the road.\n\n# Do This\n\nThe bug sprite you made that
        responds to the right arrow has been brought to this level. Add the interaction
        for the other three arrow keys!\n\n-   Add three if statements - one for each
        arrow.  \n-   Don't forget to include a comment for each if statement!\n-
        \  Each if statement should move the sprite in the direction of the arrow.\n\n_HINT:
        Make sure you consider both the axis (x or y) of movement, **and** whether
        you need to increase or decrease that value._"
      CSD U3 Draw Loop Plugged orange and green: |-
        <img src="https://images.code.org/2b5b2ce029e2f1d7377db7dcd7760cf0-image-1492031771047.15.45 PM.png" style="float:right;width:150px">

        # Using the Draw Loop

        Now it's your turn to do some work with the draw loop. Remember that the code inside the draw loop is run by Game Lab over and over again.

        # Do This

        -   Add code to this program so that your drawing has orange circles being drawn, too.
        -   Move on when your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged orange and green_2018: |-
        <img src="https://images.code.org/2b5b2ce029e2f1d7377db7dcd7760cf0-image-1492031771047.15.45 PM.png" style="float:right;width:150px">

        # Using the Draw Loop

        Now it's your turn to do some work with the draw loop. Remember that the code inside the draw loop is run by Game Lab over and over again.

        # Do This

        -   Add code to this program so that your drawing has orange circles being drawn, too.
        -   Move on when your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged orange and green_2019: |-
        <img src="https://images.code.org/2b5b2ce029e2f1d7377db7dcd7760cf0-image-1492031771047.15.45 PM.png" style="float:right;width:150px">

        # Using the Draw Loop

        Now it's your turn to do some work with the draw loop. Remember that the code inside the draw loop is run by Game Lab over and over again.

        # Do This

        -   Add code to this program so that your drawing has orange circles being drawn, too.
        -   Move on when your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged predict 1: |-
        # Draw Loop

        Here's an example of the draw loop at work.

        # Do this

        -   Run the code and see how it works.
        -   Discuss with your partner whether this looks like the flip book you saw in the video.  Why or why not?
      CSD U3 Draw Loop Plugged predict 1_2018: |-
        # Draw Loop

        Here's an example of the draw loop at work.

        # Do this

        -   Run the code and see how it works.
        -   Discuss with your partner whether this looks like the flip book you saw in the video.  Why or why not?
      CSD U3 Draw Loop Plugged predict 1_2019: |-
        # Draw Loop

        Here's an example of the draw loop at work.

        # Do this

        -   Run the code and see how it works.
        -   Discuss with your partner whether this looks like the flip book you saw in the video.  Why or why not?
      CSD U3 Draw Loop Plugged predict 2 embed: |-
        # Predict

        This program has one small difference that will make it run a little differently. Again though, remember:

        -   All your code outside the draw loop is run first, one time
        -   All your code inside the draw loop is run over and over forever

        What will this program do? Write your prediction below.
      CSD U3 Draw Loop Plugged predict 2 embed_2018: |-
        # Predict

        This program has one small difference that will make it run a little differently. Again though, remember:

        -   All your code outside the draw loop is run first, one time
        -   All your code inside the draw loop is run over and over forever

        What will this program do? Write your prediction below.
      CSD U3 Draw Loop Plugged predict 2 embed_2019: |-
        # Predict

        This program has one small difference that will make it run a little differently. Again though, remember:

        -   All your code outside the draw loop is run first, one time
        -   All your code inside the draw loop is run over and over forever

        What will this program do? Write your prediction below.
      CSD U3 Draw Loop Plugged update your scene: |-
        # Extend Your Scene

        This is the sprite scene you made in the last lesson. You'll now be updating it a little bit to use the draw loop and sprite properties.

        <img src="https://images.code.org/ce257c4d91da460c9c2add1733873769-image-1492209174198.32.29 PM.png" style="float:right;height:100px">

        # Do This

        -   Add a draw loop to your program (you should only have one).
        -   Use the lasso selector (click, hold and drag) to select all your code and place it inside your draw loop. Ctrl-Z will let you undo any mistakes you make.
        -   Add code to your program that updates your sprites' `sprite.x`, `sprite.y`, or `sprite.rotation` properties so that they move. You'll need to update them with `randomNumber()`.
      CSD U3 Draw Loop Plugged update your scene_2018: |-
        # Extend Your Scene

        This is the sprite scene you made in the last lesson. You'll now be updating it a little bit to use the draw loop and sprite properties.

        <img src="https://images.code.org/ce257c4d91da460c9c2add1733873769-image-1492209174198.32.29 PM.png" style="float:right;height:100px">

        # Do This

        -   Add a draw loop to your program (you should only have one).
        -   Use the lasso selector (click, hold and drag) to select all your code and place it inside your draw loop. Ctrl-Z will let you undo any mistakes you make.
        -   Add code to your program that updates your sprites' `sprite.x`, `sprite.y`, or `sprite.rotation` properties so that they move. You'll need to update them with `randomNumber()`.
      CSD U3 Draw Loop Plugged update your scene_2019: |-
        # Erweitere Deine Szene

        Das ist die Spriteszene, die du in der letzten Lektion gemacht hast. Sie werden es nun ein wenig aktualisieren, um die Eigenschaften der Zeichenschleife und des Sprites zu verwenden.

        <img src="https://images.code.org/ce257c4d91da460c9c2add1733873769-image-1492209174198.32.29 PM.png" style="float:right;height:100px">

        # Mach Folgendes

        -   Füge eine Zeichenschleife zu deinem Programm hinzu (du solltest nur eine haben).
        -   Verwende den Lasso-Selektor (klicken, halten und ziehen), um den Code auszuwählen, der jedes Mal aktualisiert wird, und platziere ihn in Deiner Zeichenschleife. Mit Strg+Z kannst du alle Fehler rückgängig machen, die du machst.
        -   Füge Code zu deinem Programm hinzu, der die Eigenschaften deiner Sprites `sprite.x`, `sprite.y` oder `sprite.rotation` so aktualisiert, dass sie sich bewegen. Du musst sie mit `randomNumber()` aktualisieren.
      CSD U3 Draw Loop Plugged wiggle sprite rotation: |-
        <img src="https://images.code.org/03f98fedbe59ceb5ef0a8530cb81c367-image-1492040405357.gif" style="float:right;height:150px">

        # Updating Properties

        This level combines some of the skills you've already seen. It's drawing ellipses in the background and also updating sprite properties. This time it's changing the sprite's `sprite.rotation` property.

        # Do This

        This animation already is updating one sprite's rotation property to make it look like it's shaking

        -   Run the program to see how it works.
        -   Add code to this program to make the other alien shake just like the first.
        -   Move on when your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged wiggle sprite rotation_2018: |-
        <img src="https://images.code.org/03f98fedbe59ceb5ef0a8530cb81c367-image-1492040405357.gif" style="float:right;height:150px">

        # Updating Properties

        This level combines some of the skills you've already seen. It's drawing ellipses in the background and also updating sprite properties. This time it's changing the sprite's `sprite.rotation` property.

        # Do This

        This animation already is updating one sprite's rotation property to make it look like it's shaking

        -   Run the program to see how it works.
        -   Add code to this program to make the other alien shake just like the first.
        -   Move on when your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged wiggle sprite rotation_2019: |-
        <img src="https://images.code.org/03f98fedbe59ceb5ef0a8530cb81c367-image-1492040405357.gif" style="float:right;height:150px">

        # Updating Properties

        This level combines some of the skills you've already seen. It's drawing ellipses in the background and also updating sprite properties. This time it's changing the sprite's `sprite.rotation` property.

        # Do This

        This animation already is updating one sprite's rotation property to make it look like it's shaking

        -   Run the program to see how it works.
        -   Add code to this program to make the other alien shake just like the first.
        -   Move on when your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged wiggle sprite x: |-
        <img src="https://images.code.org/71ae26edcc3286ff4d7697aaffecf144-image-1492036602240.gif" style="float:right;height:150px">

        # Updating Properties

        Sprites have properties that let the computer know where and how to draw them. Two common properties to use are `sprite.x` and `sprite.y` which control the location of the sprite. Assigning these properties a new value will move your sprite to a new location on the screen.

        # Do This

        This animation already is updating one sprite's x property to make it look like it's shaking

        -   Run the program to see how it works.
        -   Edit the code in this program to make the second sprite shake like the first one.
        -   Move on when your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged wiggle sprite x_2018: |-
        <img src="https://images.code.org/71ae26edcc3286ff4d7697aaffecf144-image-1492036602240.gif" style="float:right;height:150px">

        # Updating Properties

        Sprites have properties that let the computer know where and how to draw them. Two common properties to use are `sprite.x` and `sprite.y` which control the location of the sprite. Assigning these properties a new value will move your sprite to a new location on the screen.

        # Do This

        This animation already is updating one sprite's x property to make it look like it's shaking

        -   Run the program to see how it works.
        -   Edit the code in this program to make the second sprite shake like the first one.
        -   Move on when your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged wiggle sprite x_2019: |-
        <img src="https://images.code.org/71ae26edcc3286ff4d7697aaffecf144-image-1492036602240.gif" style="float:right;height:150px">

        # Updating Properties

        Sprites have properties that let the computer know where and how to draw them. Two common properties to use are `sprite.x` and `sprite.y` which control the location of the sprite. Assigning these properties a new value will move your sprite to a new location on the screen.

        # Do This

        This animation already is updating one sprite's x property to make it look like it's shaking

        -   Run the program to see how it works.
        -   Edit the code in this program to make the second sprite shake like the first one.
        -   Move on when your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged wiggle sprite y: |-
        <img src="https://images.code.org/1e22fb89bcdf99168aee6324d17137ee-image-1493138232702.gif" style="float:right;height:150px">

        # Updating Properties

        This level is very similar to the last, but this time, you'll add in the draw loop yourself.

        # Do This

        -   Add the draw loop block to the bottom of this program.
        -   Move any blocks that need to be inside the draw loop.
        -   Move on when your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged wiggle sprite y_2018: |-
        <img src="https://images.code.org/1e22fb89bcdf99168aee6324d17137ee-image-1493138232702.gif" style="float:right;height:150px">

        # Updating Properties

        This level is very similar to the last, but this time, you'll add in the draw loop yourself.

        # Do This

        -   Add the draw loop block to the bottom of this program.
        -   Move any blocks that need to be inside the draw loop.
        -   Move on when your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged wiggle sprite y_2019: |-
        <img src="https://images.code.org/1e22fb89bcdf99168aee6324d17137ee-image-1493138232702.gif" style="float:right;height:150px">

        # Updating Properties

        This level is very similar to the last, but this time, you'll add in the draw loop yourself.

        # Do This

        -   Add the draw loop block to the bottom of this program.
        -   Move any blocks that need to be inside the draw loop.
        -   Move on when your program looks like the picture to the right.
      CSD U3 Drawing Squares to Corners: |-
        <img src="https://images.code.org/9e09a96901b1e5ad9d5869b2b1fd3897-image-1498671940133.45.12 AM.png" style="float:right;width:150px">

        # Place Squares in Corners

        A big part of using Game Lab is understanding position. Remember you can always turn on the grid or hover with the mouse to help find the x and y position you want.

        # Do This

        -   Place two rectangles exactly in the corners of the screen, just like the picture.
      CSD U3 Drawing Squares to Corners_2018: |-
        <img src="https://images.code.org/716209ce879925f89bf661f337946509-image-1529019186051.32.48 PM.png" style="float:right;width:150px">

        # Place Squares in Corners

        A big part of using Game Lab is understanding position. Remember you can always turn on the grid or hover with the mouse to help find the x and y position you want.

        # Do This

        -   Place two rectangles exactly in the corners of the screen, just like the picture.
      CSD U3 Drawing Squares to Corners_2019: |-
        <img src="https://images.code.org/716209ce879925f89bf661f337946509-image-1529019186051.32.48 PM.png" style="float:right;width:150px">

        # Place Squares in Corners

        A big part of using Game Lab is understanding position. Remember you can always turn on the grid or hover with the mouse to help find the x and y position you want.

        # Do This

        -   Place two rectangles exactly in the corners of the screen, just like the picture.
      CSD U3 Else: |-
        # What If My Condition Isn't True?

        <img src="https://images.code.org/1a997d78fcd88efeb9e6dc5a02aa88e8-image-1464706463138.53.58.png" width="125px" style="float:right">

        Sometimes we want to tell our program what to do if a condition is `true`, but also what to do if it's `false`. Pressing the plus button at the bottom of your conditional block will give you another section called `else`. This `else` section is a fallback - it will get called whenever the condition in the `if` before it is `false`.

        # Do This

        The gears are back again. The last time you worked with them, you made them spin when the space bar is pressed. Instead of the gears only spinning when the space key is pressed, we want them to spin one way when the space key is pressed and spin the other way when it's not pressed.
        <img src="https://images.code.org/b074d47ca8dfa5ab3bfd08344b4f4e42-image-1464706389475.gif" style="float:right">

        -   Click the _plus_ button at the bottom of the if block to add an else.
        -   Add commands to make the gears spin opposite of the direction that they do when the space bar is pressed.
      CSD U3 Else_2018: |-
        # What If My Condition Isn't True?

        <img src="https://images.code.org/1a997d78fcd88efeb9e6dc5a02aa88e8-image-1464706463138.53.58.png" width="125px" style="float:right">

        Sometimes we want to tell our program what to do if a condition is `true`, but also what to do if it's `false`. Pressing the plus button at the bottom of your conditional block will give you another section called `else`. This `else` section will be run whenever the condition in the `if` before it is `false`.

        # Do This

        The gears are back again. The last time you worked with them, you made them spin when the space bar is pressed. Instead of the gears only spinning when the space key is pressed, we want them to spin one way when the space key is pressed and spin the other way when it's not pressed.
        <img src="https://images.code.org/b074d47ca8dfa5ab3bfd08344b4f4e42-image-1464706389475.gif" style="float:right">

        -   Click the _plus_ button at the bottom of the if block to add an else.
        -   Add commands to make the gears spin opposite of the direction that they do when the space bar is pressed.
      CSD U3 Else_2019: |-
        # Rückwärtsgang

        Die Zahnräder sind wieder da. Sie drehen in eine Richtung, wenn du die Leertaste drückst, jetzt willst du, dass sie sich in die andere Richtung drehen, wenn die Leertaste nicht gedrückt wird.

        # Mache Folgendes

        -   Lasse die Zahnräder entgegen der Richtung drehen, die sie beim Drücken der Leertaste einnehmen.
      CSD U3 Entertainment Sample 1: |-
        # Alien Jumper

        Press "Run" to play the game on the left.  You can make the alien jump with the space bar, and move it to the left and right with the arrow keys.  You score by collecting stars, and if you score high enough, the background will change.
      CSD U3 Entertainment Sample 1_2018: |-
        # Alien Jumper

        Press "Run" to play the game on the left.  You can make the alien jump with the space bar, and move it to the left and right with the arrow keys.  You score by collecting stars, and if you score high enough, the background will change.
      CSD U3 Entertainment Sample 1_2019: |-
        # Alien Jumper

        Press "Run" to play the game on the left.  You can make the alien jump with the space bar, and move it to the left and right with the arrow keys.  You score by collecting stars, and if you score high enough, the background will change.
      CSD U3 Entertainment Sample 2: |-
        # Hungry Bunny

        The bunny is hungry, and it's looking for mushrooms and carrots for dinner.

        To win, you'll need to find a dinner bowl, then collect at least ten carrots and five mushrooms.

        Make sure to avoid the bugs.  Ladybugs and snails will eat your food, and bees will sting you, making you drop everything!

        Use the space bar to jump.  You can squash ladybugs and snails by jumping on them.

        Click "Run" to start the program.
      CSD U3 Entertainment Sample 2_2018: |-
        # Hungry Bunny

        The bunny is hungry, and it's looking for mushrooms and carrots for dinner.

        To win, you'll need to find a dinner bowl, then collect at least ten carrots and five mushrooms.

        Make sure to avoid the bugs.  Ladybugs and snails will eat your food, and bees will sting you, making you drop everything!

        Use the space bar to jump.  You can squash ladybugs and snails by jumping on them.

        Click "Run" to start the program.
      CSD U3 Entertainment Sample 2_2019: |-
        # Hungry Bunny

        The bunny is hungry, and it's looking for mushrooms and carrots for dinner.

        To win, you'll need to find a dinner bowl, then collect at least ten carrots and five mushrooms.

        Make sure to avoid the bugs.  Ladybugs and snails will eat your food, and bees will sting you, making you drop everything!

        Use the space bar to jump.  You can squash ladybugs and snails by jumping on them.

        Click "Run" to start the program.
      CSD U3 Entertainment Sample 3: |-
        # Animated Comics

        Combining images, text, and some subtle animation can make for really interesting comics or graphic stories.  Click "Run" to see an example.
      CSD U3 Entertainment Sample 3_2018: |-
        # Animated Comics

        Combining images, text, and some subtle animation can make for really interesting comics or graphic stories.  Click "Run" to see an example.
      CSD U3 Entertainment Sample 3_2019: |-
        # Animated Comics

        Combining images, text, and some subtle animation can make for really interesting comics or graphic stories.  Click "Run" to see an example.
      CSD U3 Entertainment Sample 4: |-
        # Stamp Pad

        Click "Run" to start the program, then use the stamp pad to draw pictures with simple colors and animal stamps.
      CSD U3 Entertainment Sample 4_2018: |-
        # Stamp Pad

        Click "Run" to start the program, then use the stamp pad to draw pictures with simple colors and animal stamps.
      CSD U3 Entertainment Sample 4_2019: |-
        # Stamp Pad

        Click "Run" to start the program, then use the stamp pad to draw pictures with simple colors and animal stamps.
      CSD U3 Functions Add Change Background: |-
        # Change the Background with the Score

        Once you've caught 10 coins it's time to celebrate. You should change the background to be something fun.

        <img src="https://images.code.org/943c67e59502334fc65a25e690076bdb-image-1475030156530.33.54 PM.png" style="float:right; height:100px">

        # Do This

        -   Use an **if-statement** and two separate functions to draw your backgrounds.
        -   Then go write your functions outside your draw loop. You get to decide what a "simple" or "crazy" background are. Have fun with it!
      CSD U3 Functions Add Change Background_2018: |-
        # Change the Background with the Score

        Once you've caught 10 coins it's time to celebrate. You should change the background to be something fun.

        # Do This

        -   Use an **if-statement** and two separate functions to draw your backgrounds.
        -   Then go write your functions outside your draw loop. You get to decide what a "simple" or "silly" background are. Have fun with it!
      CSD U3 Functions Add Change Background_2019: |-
        # Change the Background with the Score

        Once you've caught 10 coins it's time to celebrate. You should change the background to be something fun.

        # Do This

        -   Use an **if-statement** and two separate functions to draw your backgrounds.
        -   Then go write your functions outside your draw loop. You get to decide what a "simple" or "silly" background are. Have fun with it!
      CSD U3 Functions Add IsTouching: |-
        # Catch the Coin, Increase the Score

        Let's make that score change now, too, to complete the game. You'll need to be able to tell when the bunny is touching the coin and then reset it.

        # Do This

        -   Use an **if-statement** and the **isTouching** block to increase the score when the bunny catches the coin.
        -   Make sure you're **calling your function** to reset the coin once it's been caught.
        -   Play the game and **randomize the velocity of the coin** to a range that you think is fun.
      CSD U3 Functions Add IsTouching_2018: |-
        # Catch the Coin, Increase the Score

        Let's make that score change now, too, to complete the game. You'll need to be able to tell when the bunny is touching the coin and then reset it.

        # Do This

        -   Use an **if-statement** and the **isTouching** block to increase the score when the bunny catches the coin.
        -   Make sure you're **calling your function** to reset the coin once it's been caught.
        -   Play the game and **randomize the velocity of the coin** to a range that you think is fun.
      CSD U3 Functions Add IsTouching_2019: |-
        # Catch the Coin, Increase the Score

        Let's make that score change now, too, to complete the game. You'll need to be able to tell when the bunny is touching the coin and then reset it.

        # Do This

        -   Use an **if-statement** and the **isTouching** block to increase the score when the bunny catches the coin.
        -   Make sure you're **calling your function** to reset the coin once it's been caught.
        -   Play the game and **randomize the velocity of the coin** to a range that you think is fun.
      CSD U3 Functions Call Draw Loop: |-
        # Calling Functions in the Draw Loop

        You can call a function inside the draw loop, just as you would anywhere else in your code.

        # Do This

        A function that will draw a background has been created for you. A sprite has been created to move across the background.

        -   **Call the function inside the draw loop** so that the sprite appears on top of the background.
        -   **Note:** Don't create functions inside the draw loop. Make them at the bottom of your code.
      CSD U3 Functions Call Draw Loop_2018: |-
        # Calling Functions in the Draw Loop

        You can call a function inside the draw loop, just as you would anywhere else in your code.

        # Do This

        A function that will draw a background has been created for you. A sprite has been created to move across the background.

        -   **Call the function inside the draw loop** so that the sprite appears on top of the background.
        -   **Note:** Don't create functions inside the draw loop. Make them at the bottom of your code.
      CSD U3 Functions Call Draw Loop_2019: |-
        # Calling Functions in the Draw Loop

        You can call a function inside the draw loop, just as you would anywhere else in your code.

        # Do This

        A function that will draw a background has been created for you. A sprite has been created to move across the background.

        -   **Call the function inside the draw loop** so that the sprite appears on top of the background.
        -   **Note:** Don't create functions inside the draw loop. Make them at the bottom of your code.
      CSD U3 Functions Call Function: |-
        # Calling Functions

        Functions let you build your own blocks and decide what code goes inside of them. This is the command that lets you create a new function.

        ![](<https://images.code.org/2493f74065d4e642ca51429b8832e431-image-1474913839061.17.09 PM.png>)

        You use or "call" your function like any other block by using the name you gave it.

        ![](<https://images.code.org/61a6eb716e263b580ecd63fab0de7547-image-1474913770359.16.00 PM.png>)

        The blocks to create and call functions can be found in the "Functions" tab of the palette.

        ![](<https://images.code.org/a570a05be61297ee9f0d79a02df8db6e-image-1474922721897.44.36 PM.png>)

        # Do This

        This program has already created 2 functions. Only one of them is being called.

        -   **Call the second function** to reveal the full image. Use the function that is being called as a guide.
        -   **Tip:** Just as with all other blocks, spelling and capitalization are important here.
      CSD U3 Functions Call Function_2018: |-
        # Calling Functions

        Functions let you build your own blocks and decide what code goes inside of them. This is the command that lets you create a new function.

        ![](<https://images.code.org/2493f74065d4e642ca51429b8832e431-image-1474913839061.17.09 PM.png>)

        You use or "call" your function like any other block by using the name you gave it.

        ![](<https://images.code.org/61a6eb716e263b580ecd63fab0de7547-image-1474913770359.16.00 PM.png>)

        The blocks to create and call functions can be found in the "Functions" tab of the palette.

        ![](<https://images.code.org/a570a05be61297ee9f0d79a02df8db6e-image-1474922721897.44.36 PM.png>)

        # Do This

        This program has already created 2 functions. Only one of them is being called.

        -   **Call the second function** to reveal the full image. Use the function that is being called as a guide.
        -   **Tip:** Just as with all other blocks, spelling and capitalization are important here.
      CSD U3 Functions Call Function_2019: |-
        # Aufruf von Funktionen

        Mit Funktionen kannst du eigene Blöcke erstellen und entscheiden, welcher Code in sie einfließt.  Dieses Programm hat bereits zwei Funktionen erstellt, aber nur eine davon wird aufgerufen.

        # Mache Folgendes

        -   **Rufe die zweite Funktion** auf, um das gesamte Bild anzuzeigen. Verwende die Funktion, die als Leitfaden aufgerufen wird.
        -   **Tipp:** Wie bei allen anderen Blöcken sind auch hier Rechtschreibung und Groß- und Kleinschreibung wichtig.
      CSD U3 Functions Create Function: |-
        # Creating Functions to Organize Code

        In Game Lab all the action is happening in the draw loop, but too much complex code makes it really confusing to read. To keep your draw loop easy to read, use functions for larger chunks of code. You can call them inside the draw loop and define them below. This is a really good example of using **abstraction** to think about problems at a high level and worry about details later.

        <img src="https://images.code.org/1a5beeaad6e55c5b27a43604be4f039a-image-1475199750468.42.07 PM.png" style="float:right;width:150px">

        # Do This

        This program should draw a daytime scene or a nighttime scene, depending on the location of the mouse. The draw loop describes what needs to happen but one of the functions hasn't been written yet.

        -   **Write the `drawNight` function** which has been created but is empty.
        -   Hint: Look at the picture to the right for how your night image should look. Can you use the `drawDay` function to help you at all?
      CSD U3 Functions Create Function_2018: |-
        # Creating Functions to Organize Code

        In Game Lab all the action is happening in the draw loop, but too much complex code makes it really confusing to read. To keep your draw loop easy to read, use functions for larger chunks of code. You can call them inside the draw loop and define them below. This is a really good example of using **abstraction** to think about problems at a high level and worry about details later.

        <img src="https://images.code.org/1a5beeaad6e55c5b27a43604be4f039a-image-1475199750468.42.07 PM.png" style="float:right;width:150px">

        # Do This

        This program should draw a daytime scene or a nighttime scene, depending on the location of the mouse. The draw loop describes what needs to happen but one of the functions hasn't been written yet.

        -   **Write the `drawNight` function** which has been created but is empty.
        -   Hint: Look at the picture to the right for how your night image should look. Can you use the `drawDay` function to help you at all?
      CSD U3 Functions Create Function_2019: |-
        # Creating Functions to Organize Code

        In Game Lab all the action is happening in the draw loop, but too much complex code makes it really confusing to read. To keep your draw loop easy to read, use functions for larger chunks of code. You can call them inside the draw loop and define them below. This is a really good example of using **abstraction** to think about problems at a high level and worry about details later.

        <img src="https://images.code.org/1a5beeaad6e55c5b27a43604be4f039a-image-1475199750468.42.07 PM.png" style="float:right;width:150px">

        # Do This

        This program should draw a daytime scene or a nighttime scene, depending on the location of the mouse. The draw loop describes what needs to happen but one of the functions hasn't been written yet.

        -   **Write the `drawNight` function** which has been created but is empty.
        -   Hint: Look at the picture to the right for how your night image should look. Can you use the `drawDay` function to help you at all?
      CSD U3 Functions Order Functions: |-
        # Reordering Code

        Placing code inside functions makes it easy to read and make changes to. Good names for functions indicate what your program is doing to a reader. You can call your functions in a different order to quickly make significant changes to how your program runs.

        # Do This

        This program has already created 4 functions that draw parts of a scene. Unfortunately it's not coming out right.

        -   **Read the 4 functions** to know what they do
        -   **Call the functions** in an order that draws the scene in the way that looks best to you
      CSD U3 Functions Order Functions_2018: |-
        # Reordering Code

        Placing code inside functions makes it easy to read and make changes to. Good names for functions indicate what your program is doing to a reader. You can call your functions in a different order to quickly make significant changes to how your program runs.

        # Do This

        This program has already created 4 functions that draw parts of a scene. Unfortunately it's not coming out right.

        -   **Read the 4 functions** to know what they do
        -   **Call the functions** in an order that draws the scene in the way that looks best to you
      CSD U3 Functions Order Functions_2019: |-
        # Reordering Code

        Placing code inside functions makes it easy to read and make changes to. Good names for functions indicate what your program is doing to a reader. You can call your functions in a different order to quickly make significant changes to how your program runs.

        # Do This

        This program has already created 4 functions that draw parts of a scene. Unfortunately it's not coming out right.

        -   **Read the 4 functions** to know what they do
        -   **Call the functions** in an order that draws the scene in the way that looks best to you
      CSD U3 Functions Randomize Sprite: |-
        # Making Changes to Functions

        A nice benefit of using functions to remove repeated code is that you can now easily make changes to multiple places in your code. Just change how you create the functions, and your program will now use the new code everywhere your function is called.

        # Do This

        Make changes to the `setFlyer` function so that the flyer starts at a random Y location between 0 and 400, and moves at a random velocity every time he is reset.
      CSD U3 Functions Randomize Sprite_2018: |-
        # Making Changes to Functions

        A nice benefit of using functions to remove repeated code is that you can now easily make changes to multiple places in your code. Just change how you create the functions, and your program will now use the new code everywhere your function is called.

        # Do This

        Make changes to the `setFlyer` function so that the flyer starts at a random Y location between 0 and 400, and moves at a random velocity every time he is reset.
      CSD U3 Functions Randomize Sprite_2019: |-
        # Making Changes to Functions

        A nice benefit of using functions to remove repeated code is that you can now easily make changes to multiple places in your code. Just change how you create the functions, and your program will now use the new code everywhere your function is called.

        # Do This

        Make changes to the `setFlyer` function so that the flyer starts at a random Y location between 0 and 400, and moves at a random velocity every time he is reset.
      CSD U3 Functions Reset Sprite: |-
        # Calling Functions Multiple Times

        You'll often want to use the same code at many places in your program. Once you've created a function you can call it as many times as you like.

        # Do This

        This code creates a sprite that moves across the screen once. How can you make it go back across the screen?

        -   **Note:** The function is already called once at the beginning of your program
        -   Read the condition of the **if-statement** inside the draw loop. Why do you think it's there?
        -   Use this if-statement and the function written for you to make the sprite move across the screen multiple times.
      CSD U3 Functions Reset Sprite_2018: |-
        # Calling Functions Multiple Times

        You'll often want to use the same code at many places in your program. Once you've created a function you can call it as many times as you like.

        # Do This

        This code creates a sprite that moves across the screen once. How can you make it go back across the screen?

        -   **Note:** The function is already called once at the beginning of your program
        -   Read the condition of the **if-statement** inside the draw loop. Why do you think it's there?
        -   Use this if-statement and the function written for you to make the sprite move across the screen multiple times.
      CSD U3 Functions Reset Sprite_2019: |-
        # Calling Functions Multiple Times

        You'll often want to use the same code at many places in your program. Once you've created a function you can call it as many times as you like.

        # Do This

        This code creates a sprite that moves across the screen once. How can you make it go back across the screen?

        -   **Note:** The function is already called once at the beginning of your program
        -   Read the condition of the **if-statement** inside the draw loop. Why do you think it's there?
        -   Use this if-statement and the function written for you to make the sprite move across the screen multiple times.
      CSD U3 Functions Write Reset: |-
        # Write Your Own Function

        Time to practice writing functions of your own. This is a very simple game in which coins fall from the sky and the bunny tries to catch them. All you need to do is write the function that sets up the coin.

        # Do This

        -   **Read and run the code** that already exists to make sure you know how it works.
        -   **Write the code for the `setCoin`** function to make the coin fall from the sky.
        -   You can go look at some of the previous levels if you need help.
      CSD U3 Functions Write Reset_2018: |-
        # Write Your Own Function

        Time to practice writing functions of your own. This is a very simple game in which coins fall from the sky and the bunny tries to catch them. All you need to do is write the function that sets up the coin.

        # Do This

        -   **Read and run the code** that already exists to make sure you know how it works.
        -   **Write the code for the `setCoin`** function to make the coin fall from the sky.
        -   You can go look at some of the previous levels if you need help.
      CSD U3 Functions Write Reset_2019: |-
        # Write Your Own Function

        Time to practice writing functions of your own. This is a very simple game in which coins fall from the sky and the bunny tries to catch them. All you need to do is write the function that sets up the coin.

        # Do This

        -   **Read and run the code** that already exists to make sure you know how it works.
        -   **Write the code for the `setCoin`** function to make the coin fall from the sky.
        -   You can go look at some of the previous levels if you need help.
      CSD U3 If Else: |-
        # When to Provide a Fallback

        The else clause is useful as a fallback to the main condition that you're checking - that is, if you _care_ what happens when your primary condition is `false`, you should provide an else clause to take care of it.

        <img src="https://images.code.org/730a895b50375781e72c95f5fa21d09d-image-1477681109870.gif" style="float:right;">

        # Do This

        Click "Run" to see the swarm of bees created for you and a flower on the left side of the screen. Make the swarm of bees **appear when the mouse is near the flower** (on the left side of the screen) and **disappear when the mouse is away from the flower** (on the right side of the screen). Look at the example on the right.

        -   Add an `if else` statement after you update the position of the bees.
        -   In the input of the if use a boolean to check if the x position of the mouse is on the side of the screen with the flower.
        -   Set the `visible` property of each bee inside both the if and else statements appropriately to make the bees only show near the flower.
      CSD U3 If Else predict question: |-
        # Wenn/Sonst Vorhersagen

        Lese das folgende Programm durch und achte dabei besonders auf den `wenn/ansonsten` Baustein in Zeile 10.  Nachdem du die folgenden Fragen mit Deinem Partner besprochen hast, schreiben Deine Vorhersagen auf. Dann führe den Code aus, um zu sehen, was das Programm macht.

        -   Was passiert, wenn du die Leertaste drückst?
        -   Was passiert, wenn du **nicht** die Leertaste drückst?
      CSD U3 If Else_2018: |-
        # When to Provide a Fallback

        The else clause is useful as a fallback to the main condition that you're checking - that is, if you _care_ what happens when your primary condition is `false`, you should provide an else clause to take care of it.

        <img src="https://images.code.org/730a895b50375781e72c95f5fa21d09d-image-1477681109870.gif" style="float:right;">

        # Do This

        Click "Run" to see the swarm of bees created for you and a flower on the left side of the screen. Make the swarm of bees **appear when the mouse is near the flower** (on the left side of the screen) and **disappear when the mouse is away from the flower** (on the right side of the screen). Look at the example on the right.

        -   Add an `if else` statement after you update the position of the bees.
        -   In the input of the if use a boolean to check if the x position of the mouse is on the side of the screen with the flower.
        -   Set the `visible` property of each bee inside both the if and else statements appropriately to make the bees only show near the flower.
      CSD U3 If Else_2019: |-
        # Wann soll ich ein "Else" zur Verfügung stellen?

        Die `ansonsten` Klausel ist nützlich, wenn du möchtest, dass das Programm eine Sache macht, wenn Ihre Bedingung wahr ist, und eine _andere_ Sache, wenn Ihre Bedingung falsch ist.

        <img src="https://images.code.org/730a895b50375781e72c95f5fa21d09d-image-1477681109870.gif" style="float:right;">

        # Mache folgendes

        Klicke auf "Ausführen", um den für Dich erstellten Bienenschwarm und eine Blume auf der linken Seite des Bildschirms zu sehen. Lasse den Bienenschwarm **erscheinen, wenn sich die Maus in der Nähe der Blume** befindet (auf der linken Seite des Bildschirms) und **verschwinden, wenn die Maus von der Blume** entfernt ist (auf der rechten Seite des Bildschirms). Schaue Dir das Beispiel auf der rechten Seite an.

        -   Füge eine `if else` -Anweisung hinzu, nachdem du die Position der Bienen aktualisiert hast.
        -   In der Eingabe von if verwende ein Boolean, um zu überprüfen, ob die x-Position der Maus auf der Seite des Bildschirms mit der Blume liegt.
        -   Stelle die "sichtbare" Eigenschaft jeder Biene sowohl innerhalb der if- als auch der else-Anweisung angemessen ein, damit die Bienen nur in der Nähe der Blume erscheinen.
      CSD U3 Input Fish: |-
        # Fish With Arrows

        The fish are back. Can you make the fish move left only when the left arrow key is pressed down?

        # Do This

        -   Add an if statement to check when the left arrow key is pressed down.
        -   Move the commands for moving the fish inside the if statement.
      CSD U3 Input Fish_2018: |-
        # Fish With Arrows

        The fish are back. Can you make the fish move left only when the left arrow key is pressed down?

        # Do This

        -   Add an if statement to check when the left arrow key is pressed down.
        -   Move the commands for moving the fish inside the if statement.
      CSD U3 Input Fish_2019: |-
        # Fish With Arrows

        The fish are back. Can you make the fish move left only when the left arrow key is pressed down?

        # Do This

        -   Add an if statement to check when the left arrow key is pressed down.
        -   Move the commands for moving the fish inside the if statement.
      CSD U3 Input Gears: |-
        # Gears with Conditionals

        Let's make the gears spin only when the space key is being held down.

        # Do This

        -   Add an `if` statement.
        -   Use `keyDown` as input to the if statement to check when the space key is pressed.
        -   Move the code that makes the gears rotate inside the `if`.
      CSD U3 Input Gears_2018: |-
        # Gears with Conditionals

        Let's make the gears spin only when the space key is being held down.

        # Do This

        -   Add an `if` statement.
        -   Use `keyDown` as input to the if statement to check when the space key is pressed.
        -   Move the code that makes the gears rotate inside the `if`.
      CSD U3 Input Gears_2019: |-
        # Gears with Conditionals

        Let's make the gears spin only when the space key is being held down.

        # Do This

        -   Add an `if` statement.
        -   Use `keyDown` as input to the if statement to check when the space key is pressed.
        -   Move the code that makes the gears rotate inside the `if`.
      CSD U3 Interactive Card Background: |-
        # Laying Out Your Background

        Before beginning this project, you should have already completed the Interactive Card Planning activity, and you'll want to have that paper with you as you develop your program. Preparation is one of the **most important** elements of successfully creating a program!

        # Do This

        Refer to your planning activity sheet to help you lay out the shapes that will become the background to your card.

        -   First, figure out what the lowest layer in your image is (this should use the `background()` block) and add it to the very top of the draw loop.
        -   Next, layer each additional drawing block in the order you want them to appear in the stack.
        -   Finally, add a comment to the top of this section of code to describe what it does, and if you have any particularly complicated chunks of code within (such as code to draw a tree or a house), add a descriptive comment to that as well.

        **Challenge:** Can you use variables or `randomNumber()` to add some subtle animation to your background layer?
      CSD U3 Interactive Card Background_2018: |-
        # Laying Out Your Background

        Before beginning this project, you should have already completed the Interactive Card Planning activity, and you'll want to have that paper with you as you develop your program. Preparation is one of the **most important** elements of successfully creating a program!

        # Do This

        Refer to your planning activity sheet to help you lay out the shapes that will become the background to your card.

        -   First, figure out what the lowest layer in your image is (this should use the `background()` block) and add it to the very top of the draw loop.
        -   Next, layer each additional drawing block in the order you want them to appear in the stack.
        -   Finally, add a comment to the top of this section of code to describe what it does, and if you have any particularly complicated chunks of code within (such as code to draw a tree or a house), add a descriptive comment to that as well.

        **Challenge:** Can you use variables or `randomNumber()` to add some subtle animation to your background layer?
      CSD U3 Interactive Card Background_2019: |-
        # Laying Out Your Background

        Before beginning this project, you should have already completed the Interactive Card Planning activity, and you'll want to have that paper with you as you develop your program. Preparation is one of the **most important** elements of successfully creating a program!

        # Do This

        Refer to your planning activity sheet to help you lay out the shapes that will become the background to your card.

        -   First, figure out what the lowest layer in your image is (this should use the `background()` block) and add it to the very top of the draw loop.
        -   Next, layer each additional drawing block in the order you want them to appear in the stack.
        -   Finally, add a comment to the top of this section of code to describe what it does, and if you have any particularly complicated chunks of code within (such as code to draw a tree or a house), add a descriptive comment to that as well.

        **Challenge:** Can you use variables or `randomNumber()` to add some subtle animation to your background layer?
      CSD U3 Interactive Card Exemplar: |-
        # Example Project

        Run the program a few times and answer the following questions:

        1.  Which elements appear to use drawing commands?

        2.  Which elements appear to be Sprites?

        3.  For each Sprite, which properties are being updated?

        4.  Where do you see conditionals being used?

        5.  Are there elements that you don’t understand?
      CSD U3 Interactive Card Exemplar_2018: |-
        # Example Project

        Run the program a few times and answer the following questions:

        1.  Which elements appear to use drawing commands?

        2.  Which elements appear to be Sprites?

        3.  For each Sprite, which properties are being updated?

        4.  Where do you see conditionals being used?

        5.  Are there elements that you don’t understand?
      CSD U3 Interactive Card Exemplar_2019: |-
        # Example Project

        Run the program a few times and answer the following questions:

        1.  Which elements appear to use drawing commands?

        2.  Which elements appear to be Sprites?

        3.  For each Sprite, which properties are being updated?

        4.  Where do you see conditionals being used?

        5.  Are there elements that you don’t understand?
      CSD U3 Interactive Card Final: |-
        # Finishing Touches

        Now's your chance to put some finishing touches on your card. We've included some new blocks that you haven't seen before, so take some time to look around and try out some new blocks.

        # Do This

        Consider adding any of the following to finish up your card:

        -   Text
        -   Additional images for your sprites
        -   Subtle animation in the background
        -   Sound effects  (Can you figure out now to do this?)
        -   More ways for a user to interact with your card
      CSD U3 Interactive Card Final_2018: |-
        # Finishing Touches

        Now's your chance to put some finishing touches on your card. We've included some new blocks that you haven't seen before, so take some time to look around and try out some new blocks.

        # Do This

        Consider adding any of the following to finish up your card:

        -   Text
        -   Additional images for your sprites
        -   Subtle animation in the background
        -   Sound effects  (Can you figure out how to do this?)
        -   More ways for a user to interact with your card
      CSD U3 Interactive Card Final_2019: |-
        # Finishing Touches

        Now's your chance to put some finishing touches on your card. We've included some new blocks that you haven't seen before, so take some time to look around and try out some new blocks.

        # Do This

        Consider adding any of the following to finish up your card:

        -   Text
        -   Additional images for your sprites
        -   Subtle animation in the background
        -   Sound effects  (Can you figure out how to do this?)
        -   More ways for a user to interact with your card
      CSD U3 Interactive Card Other Conditionals: |-
        # Other Conditionals

        The _surprise_ in your card comes from conditionals that don't directly respond to user input, but to some other element of your card. This could be triggered by a variable that gets updated as the user interacts with your card, or a Sprite moving into a certain part of the screen.

        # Do This

        For each of the remaining items on your interactions table:

        -   Add an `if` block (or `if-else` block if you need a fallback action) inside the draw loop.
        -   Add the appropriate Boolean comparison block to the condition (eg. `<`, `>`, or `==`).
        -   Add the necessary actions inside the `if` block.

        **Challenge:** Can you create more sophisticated conditionals by nesting them or using compound booleans?
      CSD U3 Interactive Card Other Conditionals_2018: |-
        # Other Conditionals

        The _surprise_ in your card comes from conditionals that don't directly respond to user input, but to some other element of your card. This could be triggered by a variable that gets updated as the user interacts with your card, or a Sprite moving into a certain part of the screen.

        # Do This

        For each of the remaining items on your interactions table:

        -   Add an `if` block (or `if-else` block if you need a fallback action) inside the draw loop.
        -   Add the appropriate Boolean comparison block to the condition (eg. `<`, `>`, or `==`).
        -   Add the necessary actions inside the `if` block.

        **Challenge:** Can you create more sophisticated conditionals by nesting them or using compound booleans?
      CSD U3 Interactive Card Other Conditionals_2019: |-
        # Other Conditionals

        The _surprise_ in your card comes from conditionals that don't directly respond to user input, but to some other element of your card. This could be triggered by a variable that gets updated as the user interacts with your card, or a Sprite moving into a certain part of the screen.

        # Do This

        For each of the remaining items on your interactions table:

        -   Add an `if` block (or `if-else` block if you need a fallback action) inside the draw loop.
        -   Add the appropriate Boolean comparison block to the condition (eg. `<`, `>`, or `==`).
        -   Add the necessary actions inside the `if` block.

        **Challenge:** Can you create more sophisticated conditionals by nesting them or using compound booleans?
      CSD U3 Interactive Card Sprites: |-
        # Adding Sprites

        Now that you have the more static elements of your card layed out, it's time to add the Sprites. Your Sprites should provide the primary animations and interactions for your card - so feel free to get creative here and have fun.

        # Do This

        Check out the Sprites table on the back of your planning sheet. For each Sprite in your table:

        -   Initialize the Sprite at the top of your program with `createSprite()`.
        -   Find or create the image(s) for the Sprite and set it with `setAnimation()`.
        -   Inside the `draw()` loop update any Sprite properties that we will be constantly animating (we'll deal with conditionals in a minute).
      CSD U3 Interactive Card Sprites_2018: |-
        # Adding Sprites

        Now that you have the more static elements of your card layed out, it's time to add the Sprites. Your Sprites should provide the primary animations and interactions for your card - so feel free to get creative here and have fun.

        # Do This

        Check out the Sprites table on the back of your planning sheet. For each Sprite in your table:

        -   Initialize the Sprite at the top of your program with `createSprite()`.
        -   Find or create the image(s) for the Sprite and set it with `setAnimation()`.
        -   Inside the `draw()` loop update any Sprite properties that we will be constantly animating (we'll deal with conditionals in a minute).
      CSD U3 Interactive Card Sprites_2019: |-
        # Adding Sprites

        Now that you have the more static elements of your card layed out, it's time to add the Sprites. Your Sprites should provide the primary animations and interactions for your card - so feel free to get creative here and have fun.

        # Do This

        Check out the Sprites table on the back of your planning sheet. For each Sprite in your table:

        -   Initialize the Sprite at the top of your program with `createSprite()`.
        -   Find or create the image(s) for the Sprite and set it with `setAnimation()`.
        -   Inside the `draw()` loop update any Sprite properties that we will be constantly animating (we'll deal with conditionals in a minute).
      CSD U3 Interactive Card User Input: |-
        # User Input

        You've got a background, you've got Sprites, now it's time to give your user something to do!

        # Do This

        On the interactions table from your planning sheet, find all of the interactions that rely on user input (key presses and mouse movements). For each of those interactions:

        -   Add an `if` block (or `if-else` block if you need a fallback action) inside the `draw()` loop.
        -   Add the appropriate input block for your condition (such as `keyDown()` or `mouseDown()`).
        -   Add the necessary actions inside the `if` block.

        **Challenge:** Can you create more sophisticated conditionals by nesting them or using compound booleans?
      CSD U3 Interactive Card User Input_2018: |-
        # User Input

        You've got a background, you've got Sprites, now it's time to give your user something to do!

        # Do This

        On the interactions table from your planning sheet, find all of the interactions that rely on user input (key presses and mouse movements). For each of those interactions:

        -   Add an `if` block (or `if-else` block if you need a fallback action) inside the `draw()` loop.
        -   Add the appropriate input block for your condition (such as `keyDown()` or `mouseDown()`).
        -   Add the necessary actions inside the `if` block.

        **Challenge:** Can you create more sophisticated conditionals by nesting them or using compound booleans?
      CSD U3 Interactive Card User Input_2019: |-
        # User Input

        You've got a background, you've got Sprites, now it's time to give your user something to do!

        # Do This

        On the interactions table from your planning sheet, find all of the interactions that rely on user input (key presses and mouse movements). For each of those interactions:

        -   Add an `if` block (or `if-else` block if you need a fallback action) inside the `draw()` loop.
        -   Add the appropriate input block for your condition (such as `keyDown()` or `mouseDown()`).
        -   Add the necessary actions inside the `if` block.

        **Challenge:** Can you create more sophisticated conditionals by nesting them or using compound booleans?
      CSD U3 Keyboard Input Challenge: |-
        # Challenge

        _Check with your teacher before trying this challenge._

        Here's the bug program you've been working on for the past few levels. Choose one or more of following challenges, or add new features of your own!

        -   Use the "space" key to control another property of your bug sprite, such as rotation or scale.
        -   Add some randomization to your movement.
        -   Add a second sprite and control it with a different set of keys ("w", "a", "s", and "d" are common choices).
        -   Add some shapes to your background to make the scene more interesting.
      CSD U3 Keyboard Input Challenge_2018: |-
        # Challenge

        _Check with your teacher before trying this challenge._

        Here's the bug program you've been working on for the past few levels. Choose one or more of following challenges, or add new features of your own!

        -   Use the "space" key to control another property of your bug sprite, such as rotation or scale.
        -   Add some randomization to your movement.
        -   Add a second sprite and control it with a different set of keys ("w", "a", "s", and "d" are common choices).
        -   Add some shapes to your background to make the scene more interesting.
      CSD U3 Keyboard Input Challenge_2018_2019: |-
        # Challenge

        _Check with your teacher before trying this challenge._

        Here's the bug program you've been working on for the past few levels. Choose one or more of following challenges, or add new features of your own!

        -   Use the "space" key to control another property of your bug sprite, such as rotation or scale.
        -   Add some randomization to your movement.
        -   Add a second sprite and control it with a different set of keys ("w", "a", "s", and "d" are common choices).
        -   Add some shapes to your background to make the scene more interesting.
      CSD U3 Keypress Boolean: |-
        # Prediction - keyDown()

        The `keyDown()` block is the first of a new set of blocks that will let us get input from the user. This is the first step on our road to actually making games! See if you can predict how the `keyDown()` block works. You will **not write any code**.

        # Do This

        -   Read the program carefully.
        -   **Make a prediction about how the code will run** and write it in the box below. Be specific!
        -   Run the program.
        -   While the program is running, press the up arrow on your keyboard.
        -   Were you correct? Were you surprised? Discuss with a classmate.
      CSD U3 Keypress Boolean embed: |-
        # Prediction - keyDown()

        The `keyDown()` block is the first of a new set of blocks that will let us get input from the user. This is the first step on our road to actually making games! See if you can predict how the `keyDown()` block works. You will **not write any code**.

        # Do This

        -   Read the program carefully.
        -   **Make a prediction about how the code will run** and write it in the box below. Be specific!
        -   Run the program.
        -   While the program is running, press the up arrow on your keyboard.
        -   Were you correct? Were you surprised? Discuss with a classmate.
      CSD U3 Keypress Boolean embed-2018: |-
        # Prediction - keyDown()

        The `keyDown()` block is the first of a new set of blocks that will let us get input from the user. This is the first step on our road to actually making games! See if you can predict how the `keyDown()` block works. You will **not write any code**.

        # Do This

        -   Read the program carefully.
        -   **Make a prediction about how the code will run** and write it in the box below. Be specific!
        -   Run the program.
        -   While the program is running, press the space bar on your keyboard.
        -   Were you correct? Were you surprised? Discuss with a classmate.
      CSD U3 Keypress Boolean embed-2018_2019: |-
        # Prediction - keyDown()

        The `keyDown()` block is the first of a new set of blocks that will let us get input from the user. This is the first step on our road to actually making games! See if you can predict how the `keyDown()` block works. You will **not write any code**.

        # Do This

        -   Read the program carefully.
        -   **Make a prediction about how the code will run** and write it in the box below. Be specific!
        -   Run the program.
        -   While the program is running, press the space bar on your keyboard.
        -   Were you correct? Were you surprised? Discuss with a classmate.
      CSD U3 Keypress Watchers Predict: |-
        # Make a Prediction: User Input

        So far you've used `keyDown` as a way to let users control your programs, but that's just one of many ways to take input. In fact, just one of many ways _to detect keypresses_! Depending on how you want to react to a keypress, there are a few other blocks you might want to use.

        Read the program and predict below what will happen when you press each of the up, down, left, and right arrows.

        After making your prediction, run the code and write down or share with your neighbor your observations.

        -   What seems to be the difference between `keyDown()`, `keyWentDown()`, and `keyWentUp()`?
        -   What do you think the exclamation mark (`!`) on line 10 does?
        -   How might you use the different keypress blocks in a game?
      CSD U3 Keypress Watchers Predict_2018: |-
        # Make a Prediction: User Input

        So far you've used `keyDown` as a way to let users control your programs, but that's just one of many ways to take input. In fact, just one of many ways _to detect keypresses_! Depending on how you want to react to a keypress, there are a few other blocks you might want to use.

        Read the program and predict below what will happen when you press each of the up, down, left, and right arrows.

        After making your prediction, run the code and write down or share with your neighbor your observations.

        -   What seems to be the difference between `keyDown()`, `keyWentDown()`, and `keyWentUp()`?
        -   What do you think the exclamation mark (`!`) on line 10 does?
        -   How might you use the different keypress blocks in a game?
      CSD U3 Keypress Watchers Predict_2019: |-
        # Make a Prediction: User Input

        So far you've used `keyDown` as a way to let users control your programs, but that's just one of many ways to take input. In fact, just one of many ways _to detect keypresses_! Depending on how you want to react to a keypress, there are a few other blocks you might want to use.

        Read the program and predict below what will happen when you press each of the up, down, left, and right arrows.

        After making your prediction, run the code and write down or share with your neighbor your observations.

        -   What seems to be the difference between `keyDown()`, `keyWentDown()`, and `keyWentUp()`?
        -   What do you think the exclamation mark (`!`) on line 10 does?
        -   How might you use the different keypress blocks in a game?
      CSD U3 Keypress Watchers_2018: |-
        # More Ways to Get User Input

        So far you've used `keyDown` as a way to let users control your programs, but that's just one of many ways to take input. In fact, just one of many ways _to detect keypresses_! Depending on how you want to react to a keypress, there are a few other blocks you might want to use.

        # Do This

        You will **not write any code** in this program.

        -   Read the program and see if you can guess what will happen.
        -   While the program is running, press the arrow keys and observe how the screen responds.
        -   Write down or share with your neighbor your observations.
            -   What seems to be the difference between `keyDown()`, `keyWentDown()`, and `keyWentUp()`?
            -   What do you think the exclamation mark (`!`) on line 10 does?
            -   How might you use the different keypress blocks in a game?
      CSD U3 Keypress Watchers_2019: |-
        # More Ways to Get User Input

        So far you've used `keyDown` as a way to let users control your programs, but that's just one of many ways to take input. In fact, just one of many ways _to detect keypresses_! Depending on how you want to react to a keypress, there are a few other blocks you might want to use.

        # Do This

        You will **not write any code** in this program.

        -   Read the program and see if you can guess what will happen.
        -   While the program is running, press the arrow keys and observe how the screen responds.
        -   Write down or share with your neighbor your observations.
            -   What seems to be the difference between `keyDown()`, `keyWentDown()`, and `keyWentUp()`?
            -   What do you think the exclamation mark (`!`) on line 10 does?
            -   How might you use the different keypress blocks in a game?
      CSD U3 L11 Freeplay: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L11 Freeplay_2018: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L11 Freeplay_2019: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L12 Freeplay: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L12 Freeplay_2018: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L12 Freeplay_2019: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L13 Freeplay: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L13 Freeplay_2018: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L13 Freeplay_2019: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L15 Freeplay: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L15 Freeplay_2018: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L15 Freeplay_2019: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L16 Freeplay: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L16 Freeplay_2018: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L16 Freeplay_2019: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L17 Freeplay: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L17 Freeplay_2018: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L17 Freeplay_2019: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L18 Freeplay: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L18 Freeplay_2018: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L18 Freeplay_2019: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L19 Freeplay: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L19 Freeplay_2018: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L19 Freeplay_2019: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L3 Freeplay: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L3 Freeplay_2018: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L3 Freeplay_2019: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L4 Freeplay: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L4 Freeplay_2018: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L4 Freeplay_2019: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L5 Freeplay: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L5 Freeplay_2018: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L5 Freeplay_2019: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L6 Freeplay: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L6 Freeplay_2018: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L6 Freeplay_2019: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L7 Freeplay: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L7 Freeplay_2018: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L7 Freeplay_2019: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L9 Freeplay: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L9 Freeplay_2018: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 L9 Freeplay_2019: |-
        # Freiespiel

        Setze das Gelernte ein, um das zu schaffen, was dir gefällt.  Wenn du fertig bist, kannst du auf ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>) klicken, um deine Kreation an einen Freund zu schicken, oder auf ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>), um sie an deine Projektgalerie zu schicken.
      CSD U3 Mouse Input Bee 1: |-
        <img src="https://images.code.org/d2092b4f2debc336f963d48bd6cf4973-image-1477681020928.gif" style="float:right">

        # Mouse X and Y

        One of the simplest ways to take input is to just make a sprite follow the user's mouse position. **You can get the x and y location of the mouse using `World.mouseX` and `World.mouseY`.**  This follows the pattern you learned with sprite properties. `World` is the name of the object. `mouseX` and `mouseY` are the names of the properties.

        # Do This

        You are going to make a bee sprite follow the mouse around the game area.

        -   The bee image is already loaded in the animation tab for you.
        -   Create a bee sprite that draws in the center of the window.
        -   Inside the draw loop update the position of the sprite to the position of the mouse:
            -   Set the x position of the sprite to the value of `World.mouseX`.
            -   Set the y position of the sprite to the value of `World.mouseY`.
        -   Run the program to test that it works.
      CSD U3 Mouse Input Bee 1_2018: |-
        <img src="https://images.code.org/d2092b4f2debc336f963d48bd6cf4973-image-1477681020928.gif" style="float:right">

        # Mouse X and Y

        One of the simplest ways to take input is to just make a sprite follow the user's mouse position. **You can get the x and y location of the mouse using `World.mouseX` and `World.mouseY`.**  This follows the pattern you learned with sprite properties. `World` is the name of the object. `mouseX` and `mouseY` are the names of the properties.

        # Do This

        You are going to make a bee sprite follow the mouse around the game area.

        -   The bee image is already loaded in the animation tab for you.
        -   Create a bee sprite that draws in the center of the window.
        -   Inside the draw loop update the position of the sprite to the position of the mouse:
            -   Set the x position of the sprite to the value of `World.mouseX`.
            -   Set the y position of the sprite to the value of `World.mouseY`.
        -   Run the program to test that it works.
      CSD U3 Mouse Input Bee 1_2019: |-
        <img src="https://images.code.org/d2092b4f2debc336f963d48bd6cf4973-image-1477681020928.gif" style="float:right">

        # Mouse X and Y

        One of the simplest ways to take input is to just make a sprite follow the user's mouse position. **You can get the x and y location of the mouse using `World.mouseX` and `World.mouseY`.**  This follows the pattern you learned with sprite properties. `World` is the name of the object. `mouseX` and `mouseY` are the names of the properties.

        # Do This

        You are going to make a bee sprite follow the mouse around the game area.

        -   The bee image is already loaded in the animation tab for you.
        -   Create a bee sprite that draws in the center of the window.
        -   Inside the draw loop update the position of the sprite to the position of the mouse:
            -   Set the x position of the sprite to the value of `World.mouseX`.
            -   Set the y position of the sprite to the value of `World.mouseY`.
        -   Run the program to test that it works.
      CSD U3 Mouse Input Bee 2: |-
        # Random Around Point

        <img src="https://images.code.org/d124946bb9e01a3623078c2a87beea8c-image-1477681483067.gif" style="float:right">

        Now that you can make the bee follow the mouse, lets make a bee fly around the mouse as shown in the picture on the right.  In order to do this, you will need to **add a random amount between -50 and 50 to the `mouseX` or `mouseY`.**

        # Do This

        You already have a bee sprite that follows the mouse.

        -   Update the x and y location to be randomly close to the mouse.
            -   Add a random number between -50 and 50 to the `World.mouseX` and `World.mouseY`.
        -   If necessary, use the `World.frameRate` block to slow down the animation and find the best frame rate.

        _Challenge: **Add 3 more bees** that follow the mouse in the same way to make a swarm of bees._
      CSD U3 Mouse Input Bee 2_2018: |-
        # Random Around Point

        <img src="https://images.code.org/d124946bb9e01a3623078c2a87beea8c-image-1477681483067.gif" style="float:right">

        Now that you can make the bee follow the mouse, lets make a bee fly around the mouse as shown in the picture on the right.  In order to do this, you will need to **add a random amount between -50 and 50 to the `mouseX` or `mouseY`.**

        # Do This

        You already have a bee sprite that follows the mouse.

        -   Update the x and y location to be randomly close to the mouse.
            -   Add a random number between -50 and 50 to the `World.mouseX` and `World.mouseY`.
        -   If necessary, use the `World.frameRate` block to slow down the animation and find the best frame rate.

        _Challenge: **Add 3 more bees** that follow the mouse in the same way to make a swarm of bees._
      CSD U3 Mouse Input Bee 2_2019: |-
        # Random Around Point

        <img src="https://images.code.org/d124946bb9e01a3623078c2a87beea8c-image-1477681483067.gif" style="float:right">

        Now that you can make the bee follow the mouse, lets make a bee fly around the mouse as shown in the picture on the right.  In order to do this, you will need to **add a random amount between -50 and 50 to the `mouseX` or `mouseY`.**

        # Do This

        You already have a bee sprite that follows the mouse.

        -   Update the x and y location to be randomly close to the mouse.
            -   Add a random number between -50 and 50 to the `World.mouseX` and `World.mouseY`.
        -   If necessary, use the `World.frameRate` block to slow down the animation and find the best frame rate.

        _Challenge: **Add 3 more bees** that follow the mouse in the same way to make a swarm of bees._
      CSD U3 Movement Fish: |-
        <img src="https://images.code.org/7852ab38a8222ee827edeff2767e8efd-image-1492037897236.gif" style="float: right; margin-left: 20px;">

        # Fish Animation

        Using the counter pattern, make all three of the fish move in the image to the left. The blue fish should move the fastest, followed by the orange fish, with the green fish being the slowest.
      CSD U3 Movement Fish challenge_2018: |-
        # More fish!

        This time, try updating the the rotation of each fish as it moves to make it look even more like it is swimming.  You can also try adding extra features, such as bubbles that rise up through the water.
      CSD U3 Movement Fish challenge_2019: |-
        # More fish!

        This time, try updating the the rotation of each fish as it moves to make it look even more like it is swimming.  You can also try adding extra features, such as bubbles that rise up through the water.
      CSD U3 Movement Fish_2018: |-
        <img src="https://images.code.org/7852ab38a8222ee827edeff2767e8efd-image-1492037897236.gif" style="float: right; margin-left: 20px;">

        # Fish Animation

        Using the counter pattern, make all three of the fish move as in the image to the right. The blue fish should move the fastest, and the green fish should move the slowest.
      CSD U3 Movement Fish_2019: |-
        <img src="https://images.code.org/7852ab38a8222ee827edeff2767e8efd-image-1492037897236.gif" style="float: right; margin-left: 20px;">

        # Fish Animation

        Using the counter pattern, make all three of the fish move as in the image to the right. The blue fish should move the fastest, and the green fish should move the slowest.
      CSD U3 Movement Gears: |-
        <img src="https://images.code.org/eac110e64ccad62482c82d4ef66f237b-image-1465518920408.gif" style="width:200px; float:right; margin-left: 20px;">

        # Rotation Direction

        When you use the counter pattern for the `rotation` property with addition, the object will always rotate clockwise. Sometimes however you will want your sprite to rotate the other direction. To do this you can just use subtraction!

        # Do This

        There are three gears set up for you. You need to make the gears all look like they are rotating in sync with each other.

        -   Make the gears rotate so they look like they are working as one system.
        -   **Hint: They won't all rotate the same direction**.
      CSD U3 Movement Gears_2018: |-
        <img src="https://images.code.org/eac110e64ccad62482c82d4ef66f237b-image-1465518920408.gif" style="width:200px; float:right; margin-left: 20px;">

        # Rotation Direction

        When you use the counter pattern for the `rotation` property with addition, the object will always rotate clockwise. Sometimes however you will want your sprite to rotate the other direction. To do this you can just use subtraction!

        # Do This

        There are three gears set up for you. You need to make the gears all look like they are rotating in sync with each other.

        -   Make the gears rotate so they look like they are working as one system.
        -   **Hint: They won't all rotate the same direction**.
      CSD U3 Movement Gears_2019: |-
        <img src="https://images.code.org/eac110e64ccad62482c82d4ef66f237b-image-1465518920408.gif" style="width:200px; float:right; margin-left: 20px;">

        # Rotation Direction

        When you use the counter pattern for the `rotation` property with addition, the object will always rotate clockwise. Sometimes however you will want your sprite to rotate the other direction. To do this you can just use subtraction!

        # Do This

        There are three gears set up for you. You need to make the gears all look like they are rotating in sync with each other.

        -   Make the gears rotate so they look like they are working as one system.
        -   **Hint: They won't all rotate the same direction**.
      CSD U3 Movement Your Own 1: |-
        # Make an animation of your own

        Using the counter pattern and sprite properties, make an animation all your own. You might consider building on the static images you've made in the past, or come up with a new image to create or story to tell.

        # Do This

        To start, let's just get a static scene set up.

        -   Add images in the Animation Tab.
        -   Create sprites and assign images.
        -   Set up the draw loop to draw a background and your sprites.
      CSD U3 Movement Your Own 1_2018: |-
        # Make an animation of your own

        Using the counter pattern and sprite properties, make an animation all your own. You might consider building on the static images you've made in the past, or come up with a new image to create or story to tell.

        # Do This

        To start, let's just get a static scene set up.

        -   Add images in the Animation Tab.
        -   Create sprites and assign images.
        -   Set up the draw loop to draw a background and your sprites.
      CSD U3 Movement Your Own 1_2019: |-
        # Make an animation of your own

        Using the counter pattern and sprite properties, make an animation all your own. You might consider building on the static images you've made in the past, or come up with a new image to create or story to tell.

        # Do This

        To start, let's just get a static scene set up.

        -   Add images in the Animation Tab.
        -   Create sprites and assign images.
        -   Set up the draw loop to draw a background and your sprites.
      CSD U3 Movement Your Own 2: |-
        # Add movement to your animation

        With your static scene set up, you can now add some movement. When you are satisfied with your program, click the "Submit" button to turn it in. You can always unsubmit and continue working if you want to add features.

        # Do This

        In the draw loop

        -   Identify which sprite properties to change.
        -   Update those properties using the counter pattern.

        _Tip: If your counter pattern isn't working like you expect, add watchers to help debug your program._
      CSD U3 Movement Your Own 2_2018: |-
        # Add movement to your animation

        With your static scene set up, you can now add some movement.

        # Do This

        In the draw loop

        -   Identify which sprite properties to change.
        -   Update those properties using the counter pattern.

        _Tip: If your counter pattern isn't working like you expect, add watchers to help debug your program._
      CSD U3 Movement Your Own 2_2019: |-
        # Add movement to your animation

        With your static scene set up, you can now add some movement. When you are satisfied with your program, click the "Submit" button to turn it in. You can always unsubmit and continue working if you want to add features.

        # Do This

        In the draw loop

        -   Identify which sprite properties to change.
        -   Update those properties using the counter pattern.

        _Tip: If your counter pattern isn't working like you expect, add watchers to help debug your program._
      CSD U3 Plotting Shapes Shape Lab: "# Drawing Shapes\n\nExplore using this tool
        that lets you draw different colored shapes. \n\nMake sure you hit \"Run\"
        and try out turning on the grid to help you place shapes precisely.\n\n![](<https://images.code.org/d52dbc112dcc088858c4b8f54be09aa1-image-1502914103923.07.59
        PM.png>)"
      CSD U3 Plotting Shapes Shape Lab_2018: "# Drawing Shapes\n\nExplore using this
        tool that lets you draw different colored shapes. \n\nMake sure you hit \"Run\"
        and try out turning on the grid to help you place shapes precisely.\n\n![](<https://images.code.org/d52dbc112dcc088858c4b8f54be09aa1-image-1502914103923.07.59
        PM.png>)"
      CSD U3 Plotting Shapes Shape Lab_2019: "# Drawing Shapes\n\nExplore using this
        tool that lets you draw different colored shapes. \n\nMake sure you hit \"Run\"
        and try out turning on the grid to help you place shapes precisely.\n\n![](<https://images.code.org/d52dbc112dcc088858c4b8f54be09aa1-image-1502914103923.07.59
        PM.png>)"
      CSD U3 Random Debug Cloud: |-
        <img src="https://images.code.org/529b7e5ddda4683e6a0cc5b3028e4dbf-image-1490824752133.58.50 PM.png" style="float:right;height:150px">

        # Debug - Using 4 Parameters

        Now that the grass is working, let's add a cloud to the sky. Unfortunately, it looks a little funny right now.

        # Do This

        -   Debug this program to make the cloud wider than it is tall, like in the image.
        -   Hint: You'll need to change two parameters. Which ones set your cloud's width and height?

        _Challenge: The sun is not in the exact same place as in the picture.  Can you change the sun's coordinates so that the picture matches completely?_
      CSD U3 Random Debug Cloud_2018: |-
        <img src="https://images.code.org/45d1d513f5ed63592e98ea3e4a08840c-image-1520403109680.11.28 PM.png" style="float:right;height:150px">

        # Debug - Using 4 Parameters

        Now that the grass is working, let's add a cloud to the sky. Unfortunately, it looks a little funny right now.

        # Do This

        -   Debug this program to make the cloud wider than it is tall, like in the image.
        -   Hint: You'll need to change two parameters. Which ones set your cloud's width and height?
      CSD U3 Random Debug Cloud_2018_2019: |-
        <img src="https://images.code.org/45d1d513f5ed63592e98ea3e4a08840c-image-1520403109680.11.28 PM.png" style="float:right;height:150px">

        # Debug - Using 4 Parameters

        Now that the grass is working, let's add a cloud to the sky. Unfortunately, it looks a little funny right now.

        # Do This

        -   Debug this program to make the cloud wider than it is tall, like in the image.
        -   Hint: You'll need to change two parameters. Which ones set your cloud's width and height?
      CSD U3 Random Debug Grass: |-
        <img src="https://images.code.org/83269268e1c4f8af8551253ff4573b43-image-1490825158453.03.45 PM.png" style="float:right;height:150px">

        # Debug - Using 4 Parameters

        This program uses the four parameter version of `rect()` and `ellipse()` to draw a simple scene.

        # Do This

        -   Debug this program and correct the error so that the grass extends across the entire bottom.
        -   Hint: You only have to change one number. Which parameter makes your rectangle (the grass) wider?
      CSD U3 Random Debug Grass_2018: |-
        <img src="https://images.code.org/08c7c6cd82f4d4ff57459165f29ab624-image-1520402652290.03.37 PM.png" style="float:right;height:150px">

        # Debug - Using 4 Parameters

        This program uses the four parameter version of `rect()` and `ellipse()` to draw a simple scene.

        # Do This

        -   Debug this program and correct the error so that the grass extends across the entire bottom.
        -   Hint: You only have to change one number. Which parameter makes your rectangle (the grass) wider?
      CSD U3 Random Debug Grass_2019: |-
        <img src="https://images.code.org/08c7c6cd82f4d4ff57459165f29ab624-image-1520402652290.03.37 PM.png" style="float:right;height:150px">

        # Debug - Using 4 Parameters

        This program uses the four parameter version of `rect()` and `ellipse()` to draw a simple scene.

        # Do This

        -   Debug this program and correct the error so that the grass extends across the entire bottom.
        -   Hint: You only have to change one number. Which parameter makes your rectangle (the grass) wider?
      CSD U3 Random Ellipse Behind: |-
        <img src="https://images.code.org/a8ed6092389aedceceb38a83ac59fae1-image-1490832453029.07.10 PM.png" style="float:right;height:150px">

        # Do This

        -   Write code that makes an orange ellipse behind the green one.
        -   Don't worry about the exact size as long as the green ellipse is entirely inside the orange one.
      CSD U3 Random Ellipse Behind_2018: |-
        <img src="https://images.code.org/dd73760e7129225b1e9f53a542960b9a-image-1520402430622.59.19 PM.png" style="float:right;height:150px">

        # Do This

        -   Write code that makes an orange ellipse behind the green one.
        -   Don't worry about the exact size as long as the green ellipse is entirely inside the orange one.
      CSD U3 Random Ellipse Behind_2018_2019: |-
        <img src="https://images.code.org/dd73760e7129225b1e9f53a542960b9a-image-1520402430622.59.19 PM.png" style="float:right;height:150px">

        # Do This

        -   Write code that makes an orange ellipse behind the green one.
        -   Don't worry about the exact size as long as the green ellipse is entirely inside the orange one.
      CSD U3 Random Taller Rectangle: |-
        <img src="https://images.code.org/02871e5c5d041ea1724e4a02d3697941-image-1492721665345.54.10 PM.png" style="float:right;height:150px; border: 1px solid #CCC">

        # Rectangle Size

        These `rect` blocks have two more parameters that you can use to control the size. Notice that the `noStroke()` block turns off the stroke (border) for shapes.

        # Do This

        -   Look at the code and try to figure out how the last two inputs in `rect` work.
        -   Change the numbers in the second `rect` to make red rectangle longer than the blue one.
      CSD U3 Random Taller Rectangle_2018: |-
        <img src="https://images.code.org/02871e5c5d041ea1724e4a02d3697941-image-1492721665345.54.10 PM.png" style="float:right;height:150px; border: 1px solid #CCC">

        # Rectangle Size

        These `rect` blocks have two more parameters that you can use to control the size. Notice that the `noStroke()` block turns off the stroke (border) for shapes.

        # Do This

        -   Look at the code and try to figure out how the last two inputs in `rect` work.
        -   Change the numbers in the second `rect` to make red rectangle longer than the blue one.
      CSD U3 Random Taller Rectangle_2019: |-
        <img src="https://images.code.org/02871e5c5d041ea1724e4a02d3697941-image-1492721665345.54.10 PM.png" style="float:right;height:150px; border: 1px solid #CCC">

        # Rectangle Size

        These `rect` blocks have two more parameters that you can use to control the size. Notice that the `noStroke()` block turns off the stroke (border) for shapes.

        # Do This

        -   Look at the code and try to figure out how the last two inputs in `rect` work.
        -   Change the numbers in the second `rect` to make red rectangle longer than the blue one.
      CSD U3 Random background: |-
        # Background

        Sometimes you'll want to fill the entire screen with a color.  For that, you can use `background`.  It covers everything on the screen with the color you choose.

        # Do This

        -   Run the code to see `background` work.
        -   Change the background from yellow to orange.

        _Challenge: There is a purple square that is covered up by the background.  Can you change the order of the code so you can see both the purple and blue squares?_
      CSD U3 Random background2: |-
        <img src="https://images.code.org/a68cfd23a13b6bdeef91dc9fd584f657-image-1491332601738.03.04 PM.png" style="float:right;height:150px">

        # Background

        `background()` will draw on top of everything already in your drawing, so it's important to think about the order of your code.

        # Do This

        -   Use `background()` to make a "black" background behind the green circle.
      CSD U3 Random background2_2018: |-
        <img src="https://images.code.org/a68cfd23a13b6bdeef91dc9fd584f657-image-1491332601738.03.04 PM.png" style="float:right;height:150px">

        # Background

        `background()` will draw on top of everything already in your drawing, so it's important to think about the order of your code.

        # Do This

        -   Use `background()` to make a "black" background behind the green circle.
      CSD U3 Random background2_2019: |-
        <img src="https://images.code.org/a68cfd23a13b6bdeef91dc9fd584f657-image-1491332601738.03.04 PM.png" style="float:right;height:150px">

        # Background

        `background()` will draw on top of everything already in your drawing, so it's important to think about the order of your code.

        # Do This

        -   Use `background()` to make a "black" background behind the green circle.
      CSD U3 Random background_2018: |-
        # Background

        Sometimes you'll want to fill the entire screen with a color.  For that, you can use `background`.  It covers everything on the screen with the color you choose.

        # Do This

        -   Run the code to see `background` work.
        -   Change the background from yellow to orange.

        _Challenge: There is a purple square that is covered up by the background.  Can you change the order of the code so you can see both the purple and blue squares?_
      CSD U3 Random background_2019: |-
        # Background

        Sometimes you'll want to fill the entire screen with a color.  For that, you can use `background`.  It covers everything on the screen with the color you choose.

        # Do This

        -   Run the code to see `background` work.
        -   Change the background from yellow to orange.

        _Challenge: There is a purple square that is covered up by the background.  Can you change the order of the code so you can see both the purple and blue squares?_
      CSD U3 Random rainbow snake: |-
        <img src="https://images.code.org/d1e4780e483ffa510a27e91b2b1f1963-image-1491341267537.26.14 PM.png" style="float:right;height:150px">

        # Rainbow Snake

        This program draws a very rare breed of rainbow snake. To make the snake draw differently every time you'll need to use random numbers.

        # Do This

        -   Run the program several times to see how the starter code works.
        -   Add at least three new different colored circles to your rainbow snake.
        -   Use `randomNumber()` to make the rest of the snake's body move up and down like the first three.

        _Challenge: Can you make size of some of the circles random, too?_
      CSD U3 Random rainbow snake_2018: |-
        <img src="https://images.code.org/6af643f712b042e5b076f06cc2f902e2-image-1520404404645.32.58 PM.png" style="float:right;height:150px">

        # Rainbow Snake

        This program draws a very rare breed of rainbow snake. To make the snake draw differently every time you'll need to use random numbers.

        # Do This

        -   Run the program several times to see how the starter code works.
        -   Add at least three new different colored circles to your rainbow snake.
        -   Use `randomNumber()` to make the rest of the snake's body move up and down like the first three.

        _Challenge: Can you make size of some of the circles random, too?_
      CSD U3 Random rainbow snake_2018_2019: |-
        <img src="https://images.code.org/6af643f712b042e5b076f06cc2f902e2-image-1520404404645.32.58 PM.png" style="float:right;height:150px">

        # Regenbogenschlange

        Dieses Programm zeichnet eine sehr seltene Art von Regenbogenschlangen. Um die Schlange jedes Mal anders zeichnen zu lassen, musst du Zufallszahlen verwenden.

        # Mache Folgendes

        -   Führe das Programm mehrmals aus, um zu sehen, wie der Startercode funktioniert.
        -   Füge deiner Regenbogenschlange mindestens drei neue, verschiedenfarbige Kreise hinzu.
        -   Verwende `randomNumber()`, um den Rest des Körpers der Schlange wie die ersten drei auf und ab bewegen zu lassen.

        _Herausforderung: Kannst du die Größe einiger der Kreise auch zufällig bestimmen?_
      CSD U3 Random random ellipse: |-
        # Random Numbers

        `randomNumber()` chooses a random number between a minimum and maximum value. You can use this code instead of writing in the specific number.  If you make your drawings with random numbers it will look a little bit different every time you run your program.

        # Do This

        -   Run the program several times to see how it works.
        -   Change the numbers inside `randomNumber` and run the code again a few times to see what changes.
      CSD U3 Random random ellipse2: |-
        <img src="https://images.code.org/ff3be801c7e634d49584aac103df292a-image-1491334428729.33.18 PM.png" style="float:right;height:150px">

        # Random Numbers

        Here's the same sun from last time.  Right now only the x-coordinate is random, but you can make the y-coordinate random, too.

        # Do This

        -   Use `randomNumber()` for the ellipse's Y parameter so the circle is drawn in a random Y position, too.
        -   As long as your circle is appearing at random X and Y positions, you can move on.
      CSD U3 Random random ellipse2_2018: |-
        <img src="https://images.code.org/8306a9fd01470ac8582cf4374dde7033-image-1520403513967.17.40 PM.png" style="float:right;height:150px">

        # Random Numbers

        Here's the same sun from last time.  Right now only the x-coordinate is random, but you can make the y-coordinate random, too.

        # Do This

        -   Use `randomNumber()` for the ellipse's Y parameter so the circle is drawn in a random Y position, too.
        -   As long as your circle is appearing at random X and Y positions, you can move on.
      CSD U3 Random random ellipse2_2018_2019: |-
        <img src="https://images.code.org/8306a9fd01470ac8582cf4374dde7033-image-1520403513967.17.40 PM.png" style="float:right;height:150px">

        # Random Numbers

        Here's the same sun from last time.  Right now only the x-coordinate is random, but you can make the y-coordinate random, too.

        # Do This

        -   Use `randomNumber()` for the ellipse's Y parameter so the circle is drawn in a random Y position, too.
        -   As long as your circle is appearing at random X and Y positions, you can move on.
      CSD U3 Random random ellipse_2018: |-
        # Random Numbers

        `randomNumber()` chooses a random number between a minimum and maximum value. You can use this code instead of writing in the specific number.  If you make your drawings with random numbers it will look a little bit different every time you run your program.

        # Do This

        -   Run the program several times to see how it works.
        -   Change the numbers inside `randomNumber` and run the code again a few times to see what changes.
      CSD U3 Random random ellipse_2018_2019: |-
        # Random Numbers

        `randomNumber()` chooses a random number between a minimum and maximum value. You can use this code instead of writing in the specific number.  If you make your drawings with random numbers it will look a little bit different every time you run your program.

        # Do This

        -   Run the program several times to see how it works.
        -   Change the numbers inside `randomNumber` and run the code again a few times to see what changes.
      CSD U3 Scene Example: |-
        # Sprite Scenes

        By combining shapes, sprites, and a new block called `text`, you can create simple scenes, stories, or comics. While this example is fairly simple, you can combine as many sprites and shapes as you like to create scenes as complex or detailed as you like.

        ## Sketch It Out

        Before moving on, take a second to sketch out a scene that you'd like to make at the end of this lesson. Consider the simple shapes that you've used in the past, sprites for your characters, and any text that you'd like on the screen. Once you've sketched out an idea, you'll learn about `text` and how to compose a scene.
      CSD U3 Scene Example_2018: |-
        # Sprite Scenes

        By combining shapes, sprites, and text, you can create simple scenes, stories, or comics. While this example is fairly simple, you can combine as many sprites and shapes as you like to create scenes as complex or detailed as you like.

        ## Sketch It Out

        Before moving on, take a second to sketch out a scene that you'd like to make at the end of this lesson. Consider the simple shapes that you've used in the past, sprites for your characters, and any text that you'd like on the screen. Once you've sketched out an idea, you'll learn about `text` and how to compose a scene.
      CSD U3 Scene Example_2018_2019: |-
        # Sprite Szenen

        Durch die Kombination von Formen, Sprites und Text kannst du einfache Szenen, Geschichten oder Comics erstellen. Obwohl dieses Beispiel ziemlich einfach ist, können Sie beliebig viele Sprites und Formen kombinieren, um beliebig komplexe oder detaillierte Szenen zu erstellen.

        ## Skizziere es

        Bevor du weitermachst, nimm dir eine Sekunde Zeit, um eine Szene zu entwerfen, die du am Ende dieser Lektion machen möchtest. Betrachte die einfachen Formen, die du in der Vergangenheit verwendet hast, Sprites für Ihre Figuren und jeden Text, den du auf dem Bildschirm sehen möchtest. Sobald du eine Idee entworfen hast, wirst du lernen, wie man eine Szene zusammensetzt.
      CSD U3 Sprite Movement Left: |-
        <img src="https://images.code.org/9f9162cb94a02d9b3aba9b6067d0281a-image-1491862771496.gif" style="float: right; margin-left: 20px">

        # Moving to the Left

        If adding to a sprite's x coordinate makes it move to the right, how could you make it move to the left?

        # Do This

        Make your program animate like the image to the right. Update `fly.x` inside the draw loop so that in each frame the fly is drawn a little bit further to the left.

        _Tip: You can make your sprites move faster by adding or subtracting larger numbers. The fly in our example moves about twice as fast as the plane in the last level._
      CSD U3 Sprite Movement Left_2018: |-
        <img src="https://images.code.org/9f9162cb94a02d9b3aba9b6067d0281a-image-1491862771496.gif" style="float: right; margin-left: 20px">

        # Moving to the Left

        If adding to a sprite's x coordinate makes it move to the right, how could you make it move to the left?

        # Do This

        Make your program animate like the image to the right. Update `fly.x` inside the draw loop so that in each frame the fly is drawn a little bit further to the left.

        _Tip: You can make your sprites move faster by adding or subtracting larger numbers. The fly in our example moves about twice as fast as the plane in the last level._
      CSD U3 Sprite Movement Left_2019: |-
        <img src="https://images.code.org/9f9162cb94a02d9b3aba9b6067d0281a-image-1491862771496.gif" style="float: right; margin-left: 20px">

        # Moving to the Left

        If adding to a sprite's x coordinate makes it move to the right, how could you make it move to the left?

        # Do This

        Make your program animate like the image to the right. Update `fly.x` inside the draw loop so that in each frame the fly is drawn a little bit further to the left.

        _Tip: You can make your sprites move faster by adding or subtracting larger numbers. The fly in our example moves about twice as fast as the plane in the last level._
      CSD U3 Sprite Movement Right: |-
        <img src="https://images.code.org/629bc615a879f0f3dc9f290bea2358c8-image-1491861334164.gif" style="float: right; margin-left: 20px">

        # Sprite Movement

        Using the counter pattern, you can write programs that animate sprites smoothly. Adding to or removing from a sprite's `x` or `y` property in the draw loop makes your sprite move just a bit each time it is redrawn.

        # Do This

        Make your program animate like the image to the right. We've already added a line to update `plane.x` in the draw loop, but it needs to be finished.
      CSD U3 Sprite Movement Right_2018: |-
        <img src="https://images.code.org/629bc615a879f0f3dc9f290bea2358c8-image-1491861334164.gif" style="float: right; margin-left: 20px">

        # Sprite Movement

        Using the counter pattern, you can write programs that animate sprites smoothly. Adding to or removing from a sprite's `x` or `y` property in the draw loop makes your sprite move just a bit each time it is redrawn.

        # Do This

        Make your program animate like the image to the right. We've already added a line to update `plane.x` in the draw loop, but it needs to be finished.
      CSD U3 Sprite Movement Right_2019: |-
        <img src="https://images.code.org/629bc615a879f0f3dc9f290bea2358c8-image-1491861334164.gif" style="float: right; margin-left: 20px">

        # Sprite Movement

        Using the counter pattern, you can write programs that animate sprites smoothly. Adding to or removing from a sprite's `x` or `y` property in the draw loop makes your sprite move just a bit each time it is redrawn.

        # Do This

        Make your program animate like the image to the right. We've already added a line to update `plane.x` in the draw loop, but it needs to be finished.
      CSD U3 Sprites anitab 1: |-
        # Images

        Over on the **Animations Tab**, you'll see three images that have been loaded for you. You can get to the animations tab by clicking the **Animation** button above the display area.

        <img src="https://images.code.org/f694a37bbadcf0533e7b19d8c0f5309b-image-1465580394090.35.11 PM.png" style="width:300px;float:right">

        Once you have created a sprite, you can **use the `sprite.setAnimation()` command to change the look of your sprite from a rectangle to a picture.** All the images you have loaded in the Animation Tab show up in the `sprite.setAnimation()` dropdown.  The alien is set up for you as an example.

        # Do This

        Change the sprite to your favorite image from the animations tab.

        -   A sprite that is set to an image has already been created for you.
        -   Run the code to see how it works.
        -   Change the input to the `setAnimation` command to change the look of the sprite.
        -   Try out all the different images.
      CSD U3 Sprites anitab 1_2018: |-
        # Images

        Over on the **Animations Tab**, you'll see three images that have been loaded for you. You can get to the animations tab by clicking the **Animation** button above the display area.

        <img src="https://images.code.org/f694a37bbadcf0533e7b19d8c0f5309b-image-1465580394090.35.11 PM.png" style="width:300px;float:right">

        Once you have created a sprite, you can **use the `sprite.setAnimation()` command to change the look of your sprite from a rectangle to a picture.** All the images you have loaded in the Animation Tab show up in the `sprite.setAnimation()` dropdown.  The alien is set up for you as an example.

        # Do This

        Change the sprite to your favorite image from the animations tab.

        -   A sprite that is set to an image has already been created for you.
        -   Run the code to see how it works.
        -   Change the input to the `setAnimation` command to change the look of the sprite.
        -   Try out all the different images.
      CSD U3 Sprites anitab 1_2019: |-
        # Images

        Over on the **Animations Tab**, you'll see three images that have been loaded for you. You can get to the animations tab by clicking the **Animation** button above the display area.

        <img src="https://images.code.org/f694a37bbadcf0533e7b19d8c0f5309b-image-1465580394090.35.11 PM.png" style="width:300px;float:right">

        Once you have created a sprite, you can **use the `sprite.setAnimation()` command to change the look of your sprite from a rectangle to a picture.** All the images you have loaded in the Animation Tab show up in the `sprite.setAnimation()` dropdown.  The alien is set up for you as an example.

        # Do This

        Change the sprite to your favorite image from the animations tab.

        -   A sprite that is set to an image has already been created for you.
        -   Run the code to see how it works.
        -   Change the input to the `setAnimation` command to change the look of the sprite.
        -   Try out all the different images.
      CSD U3 Sprites anitab 2: |-
        # Upload your own image

        You can also use the Animation tab to upload or draw your own image.

        # Do This

        You are going to make a flying kite. You can search the web for an image or create a new animation from scratch by drawing your own kite.

        -   Download your kite image. Images with transparent backgrounds work best.
        -   Open the animations tab.
        -   Click <img src="https://images.code.org/346f6657dba57b0c3bd5deb534f76b69-image-1466194432449.13.05 PM.png" style="width:50px"> and then <img src="https://images.code.org/60c0371b45b29f10a3c8530db9154428-image-1466194434329.13.16 PM.png" style="width:50px"> to upload an image.
        -   Select the file from your computer.
        -   Rename your image so it is easy to remember. To rename it click the text below the image.
        -   Back in code mode, use `sprite.setAnimation()` to make your `kite` sprite show your new animation.

        Don't worry if your kite image is too big! You'll learn how to fix that in the next level.
      CSD U3 Sprites anitab 2_2018: |-
        # Upload your own image

        You can also use the Animation tab to upload or draw your own image.

        # Do This

        You are going to make a flying kite. You can search the web for an image or create a new animation from scratch by drawing your own kite.

        -   Download your kite image. Images with transparent backgrounds work best.
        -   Open the animations tab.
        -   Click <img src="https://images.code.org/346f6657dba57b0c3bd5deb534f76b69-image-1466194432449.13.05 PM.png" style="width:50px"> and then <img src="https://images.code.org/60c0371b45b29f10a3c8530db9154428-image-1466194434329.13.16 PM.png" style="width:50px"> to upload an image.
        -   Select the file from your computer.
        -   Rename your image so it is easy to remember. To rename it click the text below the image.
        -   Back in code mode, use `sprite.setAnimation()` to make your `kite` sprite show your new animation.

        Don't worry if your kite image is too big! You'll learn how to fix that in the next level.
      CSD U3 Sprites anitab 2_2019: |-
        # Upload your own image

        You can also use the Animation tab to upload or draw your own image.

        # Do This

        You are going to make a flying kite. You can search the web for an image or create a new animation from scratch by drawing your own kite.

        -   Download your kite image. Images with transparent backgrounds work best.
        -   Open the animations tab.
        -   Click <img src="https://images.code.org/346f6657dba57b0c3bd5deb534f76b69-image-1466194432449.13.05 PM.png" style="width:50px"> and then <img src="https://images.code.org/60c0371b45b29f10a3c8530db9154428-image-1466194434329.13.16 PM.png" style="width:50px"> to upload an image.
        -   Select the file from your computer.
        -   Rename your image so it is easy to remember. To rename it click the text below the image.
        -   Back in code mode, use `sprite.setAnimation()` to make your `kite` sprite show your new animation.

        Don't worry if your kite image is too big! You'll learn how to fix that in the next level.
      CSD U3 Sprites anitab 3: |-
        # Resizing with Scale

        In the _Sprites_ drawer of the toolbox, you'll see a new block called `sprite.scale`. It lets you change the size of a sprite in relation to its original size. `sprite.scale = 1` is the normal size. `sprite.scale = 0.5` makes your sprite half as big, while `sprite.scale = 2` makes it twice as big.

        # Do This

        The program should already include your newly uploaded image, but it's probably not the _perfect_ size. Use `sprite.scale` to change the size of your `kite` sprite.

        _Hint: the order of your code matters! You need to add `sprite.scale` **after** you've created the sprite, but **before** you draw the sprite with `drawSprites()`. For clarity, try to keep all of your sprite code together at the top of your program._
      CSD U3 Sprites anitab 3_2018: |-
        # Resizing with Scale

        In the _Sprites_ drawer of the toolbox, you'll see a new block called `sprite.scale`. It lets you change the size of a sprite in relation to its original size. `sprite.scale = 1` is the normal size. `sprite.scale = 0.5` makes your sprite half as big, while `sprite.scale = 2` makes it twice as big.

        # Do This

        The program should already include your newly uploaded image, but it's probably not the _perfect_ size. Use `sprite.scale` to change the size of your `kite` sprite.

        _Hint: the order of your code matters! You need to add `sprite.scale` **after** you've created the sprite, but **before** you draw the sprite with `drawSprites()`. For clarity, try to keep all of your sprite code together at the top of your program._
      CSD U3 Sprites anitab 3_2019: |-
        # Resizing with Scale

        In the _Sprites_ drawer of the toolbox, you'll see a new block called `sprite.scale`. It lets you change the size of a sprite in relation to its original size. `sprite.scale = 1` is the normal size. `sprite.scale = 0.5` makes your sprite half as big, while `sprite.scale = 2` makes it twice as big.

        # Do This

        The program should already include your newly uploaded image, but it's probably not the _perfect_ size. Use `sprite.scale` to change the size of your `kite` sprite.

        _Hint: the order of your code matters! You need to add `sprite.scale` **after** you've created the sprite, but **before** you draw the sprite with `drawSprites()`. For clarity, try to keep all of your sprite code together at the top of your program._
      CSD U3 Sprites intro debug: |-
        <img src="https://images.code.org/63207a624d751aacb376db18cdf09eec-image-1491255841823.png" style="width: 150px; float: right; margin-left: 20px; border: 1px solid #f2f2f2;">

        # Debug

        This program should create two new sprites, one on the left of the screen and one on the right, but it's only drawing one. **You don't need to add any code**, just rearrange the code already present to make sure that both sprites show up like the picture on the right.
      CSD U3 Sprites intro debug_2018: |-
        <img src="https://images.code.org/63207a624d751aacb376db18cdf09eec-image-1491255841823.png" style="width: 150px; float: right; margin-left: 20px; border: 1px solid #f2f2f2;">

        # Debug

        This program should create two new sprites, one on the left of the screen and one on the right, but it's only drawing one. **You don't need to add any code**, just rearrange the code already present to make sure that both sprites show up like the picture on the right.
      CSD U3 Sprites intro debug_2019: |-
        <img src="https://images.code.org/63207a624d751aacb376db18cdf09eec-image-1491255841823.png" style="width: 150px; float: right; margin-left: 20px; border: 1px solid #f2f2f2;">

        # Debug

        This program should create two new sprites, one on the left of the screen and one on the right, but it's only drawing one. **You don't need to add any code**, just rearrange the code already present to make sure that both sprites show up like the picture on the right.
      CSD U3 Sprites intro sprites: |-
        # Sprites

        **Creating Sprites:**  <img src = "https://images.code.org/92e06cddc5355dc37aa2c6a033793dd0-image-1466027030772.43.41 PM.png" style = "height:30px">  creates a new sprite and assigns it to a variable.  The default name is `sprite`, so you'll want to change it to something more meaningful.

        **Drawing Sprites:** Sprites only appear on the screen when you draw them there. Calling ![](<https://images.code.org/82a18afda6463323529acaa3dc326d55-image-1466004008638.19.16 AM.png>) will draw all of your created sprites on the screen.

        <img src="https://images.code.org/fe5905d6b89c14dca525865f4e579104-image-1491254588895.png" style="width: 150px; float: right; border: 1px solid #f2f2f2; margin-left: 20px">

        # Do This

        This program includes comments that let you know where to place code but otherwise is blank. Your program should look like the image on the right.

        -   Add `var sprite = createSprite(200, 200)` under the comment `Creating Sprites`.
            -   You can ignore the yellow triangle warning for now.  It's just telling you that you haven't used your sprite yet.
        -   Add `drawSprites()` under the comment `Drawing`.
        -   **Run the code** to draw your first sprite on the screen.

        _Hint: Sprites are drawn from their center, which means that center of the square (not the top left corner) is at (200, 200)._
      CSD U3 Sprites intro sprites_2018: |-
        # Sprites

        **Creating Sprites:**  <img src = "https://images.code.org/92e06cddc5355dc37aa2c6a033793dd0-image-1466027030772.43.41 PM.png" style = "height:30px">  creates a new sprite and assigns it to a variable.  The default name is `sprite`, so you'll want to change it to something more meaningful.

        **Drawing Sprites:** Sprites only appear on the screen when you draw them there. Calling ![](<https://images.code.org/82a18afda6463323529acaa3dc326d55-image-1466004008638.19.16 AM.png>) will draw all of your created sprites on the screen.

        <img src="https://images.code.org/fe5905d6b89c14dca525865f4e579104-image-1491254588895.png" style="width: 150px; float: right; border: 1px solid #f2f2f2; margin-left: 20px">

        # Do This

        This program includes comments that let you know where to place code but otherwise is blank. Your program should look like the image on the right.

        -   Add `var sprite = createSprite(200, 200)` under the comment `Creating Sprites`.
            -   You can ignore the yellow triangle warning for now.  It's just telling you that you haven't used your sprite yet.
        -   Add `drawSprites()` under the comment `Drawing`.
        -   **Run the code** to draw your first sprite on the screen.

        _Hint: Sprites are drawn from their center, which means that center of the square (not the top left corner) is at (200, 200)._
      CSD U3 Sprites intro sprites_2019: |-
        # Sprites

        **Creating Sprites:**  <img src = "https://images.code.org/92e06cddc5355dc37aa2c6a033793dd0-image-1466027030772.43.41 PM.png" style = "height:30px">  creates a new sprite and assigns it to a variable.  The default name is `sprite`, so you'll want to change it to something more meaningful.

        **Drawing Sprites:** Sprites only appear on the screen when you draw them there. Calling ![](<https://images.code.org/82a18afda6463323529acaa3dc326d55-image-1466004008638.19.16 AM.png>) will draw all of your created sprites on the screen.

        <img src="https://images.code.org/fe5905d6b89c14dca525865f4e579104-image-1491254588895.png" style="width: 150px; float: right; border: 1px solid #f2f2f2; margin-left: 20px">

        # Do This

        This program includes comments that let you know where to place code but otherwise is blank. Your program should look like the image on the right.

        -   Add `var sprite = createSprite(200, 200)` under the comment `Creating Sprites`.
            -   You can ignore the yellow triangle warning for now.  It's just telling you that you haven't used your sprite yet.
        -   Add `drawSprites()` under the comment `Drawing`.
        -   **Run the code** to draw your first sprite on the screen.

        _Hint: Sprites are drawn from their center, which means that center of the square (not the top left corner) is at (200, 200)._
      CSD U3 Sprites scene challenge: |-
        # Challenge: Extend your scene

        _Check with your teacher before starting this challenge._

        Now that you've finished your scene, consider adding to it or creating another.
      CSD U3 Sprites scene challenge_2018: |-
        # Challenge: Extend your scene

        _Check with your teacher before starting this challenge._

        Now that you've finished your scene, consider adding to it or creating another.
      CSD U3 Sprites scene challenge_2019: |-
        # Challenge: Extend your scene

        _Check with your teacher before starting this challenge._

        Now that you've finished your scene, consider adding to it or creating another.
      CSD U3 Sprites scene drawing: |-
        # Create Your Scene - Drawing

        You're going to start creating a scene of your own. If you haven't already, take a minute to sketch out a picture of your scene (consider using graph paper). Once you have an idea and plan for your scene, start drawing the background.

        # Do This

        -   Use a `background()` command to fill the screen with a color.
        -   Add any necessary shape commands to draw the non-sprite elements of your scene.
      CSD U3 Sprites scene drawing_2018: |-
        # Create Your Scene - Drawing

        You're going to start creating a scene of your own. If you haven't already, take a minute to sketch out a picture of your scene (consider using graph paper). Once you have an idea and plan for your scene, start drawing the background.

        # Do This

        -   Use a `background()` command to fill the screen with a color.
        -   Add any necessary shape commands to draw the non-sprite elements of your scene.
      CSD U3 Sprites scene drawing_2019: |-
        # Create Your Scene - Drawing

        You're going to start creating a scene of your own. If you haven't already, take a minute to sketch out a picture of your scene (consider using graph paper). Once you have an idea and plan for your scene, start drawing the background.

        # Do This

        -   Use a `background()` command to fill the screen with a color.
        -   Add any necessary shape commands to draw the non-sprite elements of your scene.
      CSD U3 Sprites scene sprites: |-
        # Create Your Scene - Sprites

        With your background in place, it's time to add your sprites.

        # Do This

        -   Add or create all of your sprite images in the Animation Tab.
        -   Create a variable for each sprite at the top of your program and use `setAnimation()` to assign the images you created in the Animation Tab.
        -   Call `drawSprites()` once at the end of your program.

        _Hint: You probably want to call `drawSprites()` at the very end of your program so the sprites are on top of your background, but for some designs you may want to call `drawSprites()` earlier so that your sprites are on top of some shapes but below others._
      CSD U3 Sprites scene sprites_2018: |-
        # Create Your Scene - Sprites

        With your background in place, it's time to add your sprites.

        # Do This

        -   Add or create all of your sprite images in the Animation Tab.
        -   Create a variable for each sprite at the top of your program and use `setAnimation()` to assign the images you created in the Animation Tab.
        -   Call `drawSprites()` once at the end of your program.

        _Hint: You probably want to call `drawSprites()` at the very end of your program so the sprites are on top of your background, but for some designs you may want to call `drawSprites()` earlier so that your sprites are on top of some shapes but below others._
      CSD U3 Sprites scene sprites_2019: |-
        # Create Your Scene - Sprites

        With your background in place, it's time to add your sprites.

        # Do This

        -   Add or create all of your sprite images in the Animation Tab.
        -   Create a variable for each sprite at the top of your program and use `setAnimation()` to assign the images you created in the Animation Tab.
        -   Call `drawSprites()` once at the end of your program.

        _Hint: You probably want to call `drawSprites()` at the very end of your program so the sprites are on top of your background, but for some designs you may want to call `drawSprites()` earlier so that your sprites are on top of some shapes but below others._
      CSD U3 Sprites scene text: |-
        # Create Your Scene - Text

        The final piece of your scene is to add text.

        # Do This

        -   Add a `text()` command for each separate line of text.
        -   If necessary, use `fill()` and `textSize()` to change the appearance of your text.

        _Hint: Most scenes have the text on top of everything else, which would require your `text()` commands to be the last lines in your program. If, however, you want the text layered in with other elements, you might consider changing the order._
      CSD U3 Sprites scene text_2018: |-
        # Create Your Scene - Text

        The final piece of your scene is to add text.

        # Do This

        -   Add a `text()` command for each separate line of text.
        -   If necessary, use `fill()` and `textSize()` to change the appearance of your text.

        _Hint: Most scenes have the text on top of everything else, which would require your `text()` commands to be the last lines in your program. If, however, you want the text layered in with other elements, you might consider changing the order._
      CSD U3 Sprites scene text_2019: |-
        # Create Your Scene - Text

        The final piece of your scene is to add text.

        # Do This

        -   Add a `text()` command for each separate line of text.
        -   If necessary, use `fill()` and `textSize()` to change the appearance of your text.

        _Hint: Most scenes have the text on top of everything else, which would require your `text()` commands to be the last lines in your program. If, however, you want the text layered in with other elements, you might consider changing the order._
      CSD U3 Sprites text: |-
        # Adding Text

        You can put text anywhere you'd like on the screen using `text`. Change the displayed text in the provided code, then add a second `text` to write in a different part of the screen.

        _Tip: The default text size is pretty small, but you can use the `textSize` block to change that. You can also use `fill` to change the color of your text._
      CSD U3 Sprites text debug: |-
        <img src="https://images.code.org/a313a455ef7033e840dfb21cb15cbb30-image-1491277088617.png" style="float: right; width: 200px; margin-left: 20px;">

        # Debug

        This scene has all the right code, but it's not in the right order. The scene should look like the image to the right.  Can you reorder the blocks so that each part of the scene is drawn in the correct order?
      CSD U3 Sprites text debug_2018: |-
        <img src="https://images.code.org/a313a455ef7033e840dfb21cb15cbb30-image-1491277088617.png" style="float: right; width: 200px; margin-left: 20px;">

        # Debug

        This scene has all the right code, but it's not in the right order. The scene should look like the image to the right.  Can you reorder the blocks so that each part of the scene is drawn in the correct order?
      CSD U3 Sprites text debug_2018_2019: |-
        <img src="https://images.code.org/a313a455ef7033e840dfb21cb15cbb30-image-1491277088617.png" style="float: right; width: 200px; margin-left: 20px;">

        # Debug

        This scene has all the right code, but it's not in the right order. The scene should look like the image to the right.  Can you reorder the blocks so that each part of the scene is drawn in the correct order?
      CSD U3 Sprites text_2018: "# Adding Text\n\nYou can put text anywhere you'd
        like on the screen using `text`. \n\n# Do This\n\n-   Change the displayed
        text in the provided code.\n-   Add a second `text` to write in a different
        part of the screen.\n\n_Tip: The default text size is pretty small, but you
        can use the `textSize` block to change that. You can also use `fill` to change
        the color of your text._"
      CSD U3 Sprites text_2019: "# Adding Text\n\nYou can put text anywhere you'd
        like on the screen using `text`. \n\n# Do This\n\n-   Change the displayed
        text in the provided code.\n-   Add a second `text` to write in a different
        part of the screen.\n\n_Tip: The default text size is pretty small, but you
        can use the `textSize` block to change that. You can also use `fill` to change
        the color of your text._"
      CSD U3 UP_ARROW: |-
        # Moving Sprites

        You can change your sprite's position based on key presses in the same way you changed its animations.

        # Do This

        You have been provided with the start of a bug sprite. You need to pick the bug picture you want to use from the animation tab.

        -   Set the animation of the sprite to your favorite bug.
        -   Add an if statement inside your draw loop.
        -   Add a call to keyDown as the input to the if statement to check if the up arrow was pressed.
        -   Add code inside the conditional to move the sprite up if the up arrow is down.

        _Do you need to change sprite's x or y property to move it up?_
      CSD U3 UP_ARROW_2018: |-
        # Moving Sprites

        You can change your sprite's position based on key presses in the same way you changed its animations.

        # Do This

        -   Add an `if` statement inside your draw loop.
        -   Check whether the right arrow key has been pressed down.
        -   Add code inside the conditional to move the sprite right if the right arrow is down.

        _Do you need to change sprite's x or y property to move it right?_
      CSD U3 UP_ARROW_2018_2019: |-
        # Moving Sprites

        You can change your sprite's position based on key presses in the same way you changed its animations.

        # Do This

        -   Add an `if` statement inside your draw loop.
        -   Check whether the right arrow key has been pressed down.
        -   Add code inside the conditional to move the sprite right if the right arrow is down.

        _Do you need to change sprite's x or y property to move it right?_
      CSD U3 Variables Challenge: |-
        # Challenge: Updating Variables

        _Check with your teacher before tackling this challenge level._

        So far we've only ever assigned a value to a variable once, but did you know you can update a variable during a program?  Read through the example program we've provided, run it a few times to understand how it works, and then attempt to modify the program to draw one of the following images.

        <img src="https://images.code.org/29f4d46d5aa041fb7d27aa2e3c77652e-image-1493161823337.png" style="width:150px; border: 1px solid grey; margin:20px;">
        <img src="https://images.code.org/629819fe91016ee1b8275c81e41770b5-image-1493161823334.png" style="width:150px; border: 1px solid grey; margin:20px;">
        <img src="https://images.code.org/acf7b8223b3a87594e20348306464de7-image-1493161823305.png" style="width:150px; border: 1px solid grey; margin:20px;">
      CSD U3 Variables Challenge_2018: |-
        # Challenge: Updating Variables

        _Check with your teacher before tackling this challenge level._

        So far we've only ever assigned a value to a variable once, but did you know you can update a variable during a program?  Read through the example program we've provided, run it a few times to understand how it works, and then attempt to modify the program to draw one of the following images.

        <img src="https://images.code.org/29f4d46d5aa041fb7d27aa2e3c77652e-image-1493161823337.png" style="width:150px; border: 1px solid grey; margin:20px;">
        <img src="https://images.code.org/629819fe91016ee1b8275c81e41770b5-image-1493161823334.png" style="width:150px; border: 1px solid grey; margin:20px;">
        <img src="https://images.code.org/acf7b8223b3a87594e20348306464de7-image-1493161823305.png" style="width:150px; border: 1px solid grey; margin:20px;">
      CSD U3 Variables Challenge_2019: |-
        # Challenge: Updating Variables

        _Check with your teacher before tackling this challenge level._

        So far we've only ever assigned a value to a variable once, but did you know you can update a variable during a program?  Read through the example program we've provided, run it a few times to understand how it works, and then attempt to modify the program to draw one of the following images.

        <img src="https://images.code.org/29f4d46d5aa041fb7d27aa2e3c77652e-image-1493161823337.png" style="width:150px; border: 1px solid grey; margin:20px;">
        <img src="https://images.code.org/629819fe91016ee1b8275c81e41770b5-image-1493161823334.png" style="width:150px; border: 1px solid grey; margin:20px;">
        <img src="https://images.code.org/acf7b8223b3a87594e20348306464de7-image-1493161823305.png" style="width:150px; border: 1px solid grey; margin:20px;">
      CSD U3 Variables Draw Challenge: |-
        # Challenge: Draw an Image

        _Check with your teacher before tackling this challenge level._

        Using variables, draw an image where many of the items rely on a common variable for size or placement. For example, draw a face with variables controlling the size and/or placement of both eyes, ears, and nostrils. Once you have your drawing completed, try changing the values of your variables to make sure that the whole image changes together.
      CSD U3 Variables Draw Challenge_2018: |-
        # Challenge: Draw an Image

        _Check with your teacher before tackling this challenge level._

        Using variables, draw an image where many of the items rely on a common variable for size or placement. For example, draw a face with variables controlling the size and/or placement of both eyes, ears, and nostrils. Once you have your drawing completed, try changing the values of your variables to make sure that the whole image changes together.
      CSD U3 Variables Draw Challenge_2019: |-
        # Challenge: Draw an Image

        _Check with your teacher before tackling this challenge level._

        Using variables, draw an image where many of the items rely on a common variable for size or placement. For example, draw a face with variables controlling the size and/or placement of both eyes, ears, and nostrils. Once you have your drawing completed, try changing the values of your variables to make sure that the whole image changes together.
      CSD U3 Variables Draw Poppy: |-
        # Using a Variable Many Times

        This program has only one variable called `petalSize` but it uses it 8 different times. This makes it easy to quickly make lots of changes to how your picture is drawn.

        # Do This

        -   Change the number assigned to `petalSize` so the red petals touch one another.
        -   Try to find the size that makes the most sense. Compare your answer with someone around you.
      CSD U3 Variables Draw Poppy_2018: |-
        # Using a Variable Many Times

        This program has only one variable called `petalSize` but it uses it 8 different times. This makes it easy to quickly make lots of changes to how your picture is drawn.

        # Do This

        -   Change the number assigned to `petalSize` so the red petals touch one another.
        -   Try to find the size that makes the most sense. Compare your answer with someone around you.
      CSD U3 Variables Draw Poppy_2019: |-
        # Using a Variable Many Times

        This program has only one variable called `petalSize` but it uses it 8 different times. This makes it easy to quickly make lots of changes to how your picture is drawn.

        # Do This

        -   Change the number assigned to `petalSize` so the red petals touch one another.
        -   Try to find the size that makes the most sense. Compare your answer with someone around you.
      CSD U3 Variables Predict Where X: |-
        # Using Variables

        In this program, the variable `xPosition` is used to store the x-coordinate of the circle.

        # Do This

        -   Run the program to see how it works.
        -   Change the number that is stored into the variable ([Show me where](#triggercallout=code_triggered)) and run the code again.
      CSD U3 Variables Predict Where XY Embed: |-
        # Predict

        In which corner of the screen will the circle be drawn?

        _Hint: Click the "Show grid" box to help you find the exact coordinates on the screen._
      CSD U3 Variables Predict Where XY Embed_2018: |-
        # Predict

        In which corner of the screen will the circle be drawn?

        _Hint: Click the "Show grid" box to help you find the exact coordinates on the screen._
      CSD U3 Variables Predict Where XY Embed_2019: |-
        # Predict

        In which corner of the screen will the circle be drawn?

        _Hint: Click the "Show grid" box to help you find the exact coordinates on the screen._
      CSD U3 Variables Predict Where X_2018: |-
        # Using Variables

        In this program, the variable `xPosition` is used to store the x-coordinate of the circle.

        # Do This

        -   Run the program to see how it works.
        -   Change the number that is stored into the variable ([Show me where](#triggercallout=code_triggered)) and run the code again.
      CSD U3 Variables Predict Where X_2019: |-
        # Using Variables

        In this program, the variable `xPosition` is used to store the x-coordinate of the circle.

        # Do This

        -   Run the program to see how it works.
        -   Change the number that is stored into the variable ([Show me where](#triggercallout=code_triggered)) and run the code again.
      CSD U3 Variables change circle size: |-
        <img src="https://images.code.org/acc7f5763a9ca1c17647f7dd9711c9f5-image-1490977696189.28.01 AM.png" style="float:right; height:150px">

        # Debug: Using Variables

        This program uses the variable `circleSize` to control the width and height of a circle.  If you make the circle big enough, it will fill up the entire screen, as in the picture on the right.

        # Do This

        -   Change the value assigned to `circleSize` so that the circle takes up the entire screen.
      CSD U3 Variables change circle size_2018: |-
        <img src="https://images.code.org/acc7f5763a9ca1c17647f7dd9711c9f5-image-1490977696189.28.01 AM.png" style="float:right; height:150px">

        # Debug: Using Variables

        This program uses the variable `circleSize` to control the width and height of a circle.  If you make the circle big enough, it will fill up the entire screen, as in the picture on the right.

        # Do This

        -   Change the value assigned to `circleSize` so that the circle takes up the entire screen.
      CSD U3 Variables change circle size_2019: |-
        <img src="https://images.code.org/acc7f5763a9ca1c17647f7dd9711c9f5-image-1490977696189.28.01 AM.png" style="float:right; height:150px">

        # Debug: Using Variables

        This program uses the variable `circleSize` to control the width and height of a circle.  If you make the circle big enough, it will fill up the entire screen, as in the picture on the right.

        # Do This

        -   Change the value assigned to `circleSize` so that the circle takes up the entire screen.
      CSD U3 Variables naming rules v2: |-
        <img style="float: right" src="https://images.code.org/f4b306422763c84bb924f4f7d3a6dca6-image-1492798058864.06.38 AM.png">

        # Debug: Naming Variables

        This program has multiple errors caused by bad label names.  The errors prevent the program from being viewed in block mode, so the code is in text.

        # Do This

        -   Find the rule each variable label violates.
        -   **Correct the errors by picking new names that follow the rules you learned in the last level.**
        -   If your program works it should draw the image on the right.

        <summary><em>Hint: Click the arrow for a quick review of the rules.</em><details><ul>
        <li>Labels can't have spaces.</li>
        <li>Labels can't start with a number.</li>
        <li>Capitalization and spelling must be exactly the same.</li>
        </ul></details></summary>
      CSD U3 Variables naming rules v2_2018: |-
        <img style="float: right" src="https://images.code.org/f4b306422763c84bb924f4f7d3a6dca6-image-1492798058864.06.38 AM.png">

        # Debug: Naming Variables

        This program has multiple errors caused by bad label names.  The errors prevent the program from being viewed in block mode, so the code is in text.

        # Do This

        -   Find the rule each variable label violates.
        -   **Correct the errors by picking new names that follow the rules you learned in the last level.**
        -   If your program works it should draw the image on the right.

        <summary><em>Hint: Click the arrow for a quick review of the rules.</em><details><ul>
        <li>Labels can't have spaces.</li>
        <li>Labels can't start with a number.</li>
        <li>Capitalization and spelling must be exactly the same.</li>
        </ul></details></summary>
      CSD U3 Variables naming rules v2_2018_2019: |-
        <img style="float: right" src="https://images.code.org/f4b306422763c84bb924f4f7d3a6dca6-image-1492798058864.06.38 AM.png">

        # Debuggen: Benennen von Variablen

        Dieses Programm hat mehrere Fehler, die durch fehlerhafte Labelnamen verursacht werden.  Die Fehler verhindern, dass das Programm im Bausteinmodus angezeigt wird, so dass der Code im Text ist.

        # Mache Folgendes

        -   Versuche herauszufinden, welche Probleme mit den Variablennamen die Fehler verursachen.
        -   Behebe die Fehler, indem du neue Namen auswählst.
        -   Wenn Dein Programm funktioniert, sollte es das Bild auf der rechten Seite zeichnen.

        <summary><em>Hinweis: Klicke auf den Pfeil, um ein paar Regeln zu sehen.</em><details><ul>
        <li>Label dürfen keine Leerzeichen haben.</li>
        <li>Label können nicht mit einer Zahl beginnen. </li>
        <li>Groß- und Kleinschreibung müssen exakt gleich sein.</li>
        </ul></details></summary>
      CSD U3 Variables random with assignment: |-
        <img src="https://images.code.org/ba9592e887f52c1a538a0517560cdacf-image-1493913633878.gif" style="float:right;height:150px">

        # Debug: Variables and Random Numbers

        Variables can be assigned a random number too. This lets you save a single random value so that you can use it as many times as you want in your program.

        # Do This

        `eyeSize` is assigned a random number. Unfortunately only one of the eyes is currently using it.

        -   **Run the program** to see how it works.
        -   **Change the program** so that both eyes are always the same random size. Hint: you'll only need to make changes to one line of code.
      CSD U3 Variables random with assignment_2018: |-
        <img src="https://images.code.org/ba9592e887f52c1a538a0517560cdacf-image-1493913633878.gif" style="float:right;height:150px">

        # Debug: Variables and Random Numbers

        Variables can be assigned a random number too. This lets you save a single random value so that you can use it as many times as you want in your program.

        # Do This

        `eyeSize` is assigned a random number. Unfortunately only one of the eyes is currently using it.

        -   **Run the program** to see how it works.
        -   **Change the program** so that both eyes are always the same random size. Hint: you'll only need to make changes to one line of code.
      CSD U3 Variables random with assignment_2019: |-
        <img src="https://images.code.org/ba9592e887f52c1a538a0517560cdacf-image-1493913633878.gif" style="float:right;height:150px">

        # Debug: Variables and Random Numbers

        Variables can be assigned a random number too. This lets you save a single random value so that you can use it as many times as you want in your program.

        # Do This

        `eyeSize` is assigned a random number. Unfortunately only one of the eyes is currently using it.

        -   **Run the program** to see how it works.
        -   **Change the program** so that both eyes are always the same random size. Hint: you'll only need to make changes to one line of code.
      CSD U3 Watcher Debug: |-
        <img src="https://images.code.org/20cc981b4b4f99b2ff96415e19af7600-image-1492034149715.gif" style="float: right; margin-left: 20px;">

        # Debug: Watching the Counter Pattern

        Let's practice using watchers to debug your code. This program should move the motorcycle from the bottom left to the top right, like the image to the right. Unfortunately the motorcycle moves off screen too quickly to see what's going wrong.

        Using the provided watchers for `cycle.x` and `cycle.y`, figure out which one is moving in the wrong direction and fix the program.
      CSD U3 Watcher Debug_2018: |-
        <img src="https://images.code.org/20cc981b4b4f99b2ff96415e19af7600-image-1492034149715.gif" style="float: right; margin-left: 20px;">

        # Debug: Watching the Counter Pattern

        Let's practice using watchers to debug your code. This program should move the motorcycle from the bottom left to the top right, like the image to the right. Unfortunately the motorcycle moves off screen too quickly to see what's going wrong.

        Using the provided watchers for `cycle.x` and `cycle.y`, figure out which one is moving in the wrong direction and fix the program.
      CSD U3 Watcher Debug_2019: |-
        <img src="https://images.code.org/20cc981b4b4f99b2ff96415e19af7600-image-1492034149715.gif" style="float: right; margin-left: 20px;">

        # Debug: Watching the Counter Pattern

        Let's practice using watchers to debug your code. This program should move the motorcycle from the bottom left to the top right, like the image to the right. Unfortunately the motorcycle moves off screen too quickly to see what's going wrong.

        Using the provided watchers for `cycle.x` and `cycle.y`, figure out which one is moving in the wrong direction and fix the program.
      CSD U3 Watcher Predict response: |-
        # Watching the Counter Pattern

        Watchers are a really useful tool for debugging programs that use the counter pattern.

        -   **Read the program** and predict what the program will do.
        -   **Run the program** to check your prediction.
        -   **Look at the watchers** and explain to a neighbor what you are seeing.
      CSD U3 Watcher Predict response_2018: |-
        # Watching the Counter Pattern

        Watchers are a really useful tool for debugging programs that use the counter pattern.

        -   **Read the program** and predict what the program will do.
        -   **Run the program** to check your prediction.
        -   **Look at the watchers** and explain to a neighbor what you are seeing.
      CSD U3 Watcher Predict response_2019: |-
        # Watching the Counter Pattern

        Watchers are a really useful tool for debugging programs that use the counter pattern.

        -   **Read the program** and predict what the program will do.
        -   **Run the program** to check your prediction.
        -   **Look at the watchers** and explain to a neighbor what you are seeing.
      CSD U3 abstraction accelerateX: |-
        # Velocity and the Counter Pattern

        As you just saw, using a `sprite.velocityX` property with the counter pattern will change a sprite's velocity during the program. This makes the sprite speed up. Do a little practice using this pattern yourself.

        # Do This

        This program already makes a car move across the screen, but it's going very slowly.

        -   Use the counter pattern with the sprite's velocityX property to make the car speed up. ( [Show me where](#triggercallout=code_triggered) )
      CSD U3 abstraction accelerateX_2018: |-
        # Velocity and the Counter Pattern

        As you just saw, using a `sprite.velocityX` property with the counter pattern will change a sprite's velocity during the program. This makes the sprite speed up. Do a little practice using this pattern yourself.

        # Do This

        This program already makes a car move across the screen, but it's going very slowly.

        -   Use the counter pattern with the sprite's velocityX property to make the car speed up. ( [Show me where](#triggercallout=code_triggered) )
      CSD U3 abstraction accelerateX_2019: |-
        # Velocity and the Counter Pattern

        As you just saw, using a `sprite.velocityX` property with the counter pattern will change a sprite's velocity during the program. This makes the sprite speed up. Do a little practice using this pattern yourself.

        # Do This

        This program already makes a car move across the screen, but it's going very slowly.

        -   Use the counter pattern with the sprite's velocityX property to make the car speed up. ( [Show me where](#triggercallout=code_triggered) )
      CSD U3 abstraction accelerateY: |-
        # Falling Rock

        The rock should speed up as it falls down the screen.  Can you use the same counter pattern with `velocityY` inside the draw loop to make the rock go faster and faster as it falls?

        # Do This

        -   Use the counter pattern with the sprite's y velocity to make the rock speed up as it falls.  ( [Show me where](#triggercallout=code_triggered) )

        _Challenge: Can you make the rock spin as it falls?_
      CSD U3 abstraction accelerateY up: |-
        # Rising Bubble

        This program makes a bubble rise up the water. Can you make it get faster as it rises?

        # Do This

        -   Use the counter pattern and the sprite's y velocity to make the bubble move up more quickly.
      CSD U3 abstraction accelerateY up_2018: |-
        # Rising Bubble

        This program makes a bubble rise up the water. Can you make it get faster as it rises?

        # Do This

        -   Use the counter pattern and the sprite's y velocity to make the bubble move up more quickly.
      CSD U3 abstraction accelerateY up_2019: |-
        # Rising Bubble

        This program makes a bubble rise up the water. Can you make it get faster as it rises?

        # Do This

        -   Use the counter pattern and the sprite's y velocity to make the bubble move up more quickly.
      CSD U3 abstraction accelerateY_2018: |-
        # Falling Rock

        The rock should speed up as it falls down the screen.  Can you use the same counter pattern with `velocityY` inside the draw loop to make the rock go faster and faster as it falls?

        # Do This

        -   Use the counter pattern with the sprite's y velocity to make the rock speed up as it falls.  ( [Show me where](#triggercallout=code_triggered) )

        _Challenge: Can you make the rock spin as it falls?_
      CSD U3 abstraction accelerateY_2019: |-
        # Falling Rock

        The rock should speed up as it falls down the screen.  Can you use the same counter pattern with `velocityY` inside the draw loop to make the rock go faster and faster as it falls?

        # Do This

        -   Use the counter pattern with the sprite's y velocity to make the rock speed up as it falls.  ( [Show me where](#triggercallout=code_triggered) )

        _Challenge: Can you make the rock spin as it falls?_
      CSD U3 abstraction add coin: |-
        # Add a Coin

        In the next few levels you'll add to your program to make a simple game. In this game the player will collect points to increase the score. This is a good chance to see how different kinds of movement can affect the way a game feels, and it will also just help you practice programming skills.

        # Do This

        In this level you'll just be adding a new coin sprite to the game. You should be working at the top of your program, outside the draw loop.

        -   Use the `createSprite()` block to create a new sprite. Make sure to give it a descriptive name such as **coin**.
        -   Use the `sprite.x` and `sprite.y` properties of the sprite to give it a random X and Y position between 0 and 400.
        -   In the Animation Tab there is already a coin animation. Use the `sprite.setAnimation()` block to give your sprite this animation.

        Test your code before moving on. When you run the game, you should see a coin sprite appear somewhere randomly on the screen.
      CSD U3 abstraction add coin_2018: |-
        # Add a Coin

        In the next few levels you'll add to your program to make a simple game. In this game the player will collect points to increase the score. This is a good chance to see how different kinds of movement can affect the way a game feels, and it will also just help you practice programming skills.

        # Do This

        In this level you'll just be adding a new coin sprite to the game. You should be working at the top of your program, outside the draw loop.

        -   Use the `createSprite()` block to create a new sprite. Make sure to give it a descriptive name such as **coin**.
        -   Use the `sprite.x` and `sprite.y` properties of the sprite to give it a random X and Y position between 0 and 400.
        -   In the Animation Tab there is already a coin animation. Use the `sprite.setAnimation()` block to give your sprite this animation.

        Test your code before moving on. When you run the game, you should see a coin sprite appear somewhere randomly on the screen.
      CSD U3 abstraction add coin_2019: |-
        # Add a Coin

        In the next few levels you'll add to your program to make a simple game. In this game the player will collect points to increase the score. This is a good chance to see how different kinds of movement can affect the way a game feels, and it will also just help you practice programming skills.

        # Do This

        In this level you'll just be adding a new coin sprite to the game. You should be working at the top of your program, outside the draw loop.

        -   Use the `createSprite()` block to create a new sprite. Make sure to give it a descriptive name such as **coin**.
        -   Use the `sprite.x` and `sprite.y` properties of the sprite to give it a random X and Y position between 0 and 400.
        -   In the Animation Tab there is already a coin animation. Use the `sprite.setAnimation()` block to give your sprite this animation.

        Test your code before moving on. When you run the game, you should see a coin sprite appear somewhere randomly on the screen.
      CSD U3 abstraction decelerateX: "# Slowing Things Down\n\nNow that you've had
        some practice speeding things up, can you use the counter pattern to slow
        sprites down? \n\n# Do This\n\nThe car is going to run into the water! You'll
        need to use the counter pattern to slow it down.\n\n-   Use the `sprite.velocityX`
        block with a counter pattern to slow the car down by 0.25 as it moves across
        the screen.  \n-   Discuss with your Partner: What do you think will happen
        when the car finally stops?\n\n_Challenge: Add code that makes the car slow
        down only if his velocityX is greater than 0._"
      CSD U3 abstraction decelerateX_2018: "# Slowing Things Down\n\nNow that you've
        had some practice speeding things up, can you use the counter pattern to slow
        sprites down? \n\n# Do This\n\nThe car is going to run into the water! You'll
        need to use the counter pattern to slow it down.\n\n-   Use the `sprite.velocityX`
        block with a counter pattern to slow the car down by 0.25 as it moves across
        the screen.  \n-   Discuss with your Partner: What do you think will happen
        when the car finally stops?\n\n_Challenge: Add code that makes the car slow
        down only if its velocityX is greater than 0._"
      CSD U3 abstraction decelerateX_2019: "# Slowing Things Down\n\nNow that you've
        had some practice speeding things up, can you use the counter pattern to slow
        sprites down? \n\n# Do This\n\nThe car is going to run into the water! You'll
        need to use the counter pattern to slow it down.\n\n-   Use the `sprite.velocityX`
        block with a counter pattern to slow the car down by 0.25 as it moves across
        the screen.  \n-   Discuss with your Partner: What do you think will happen
        when the car finally stops?\n\n_Challenge: Add code that makes the car slow
        down only if its velocityX is greater than 0._"
      CSD U3 abstraction decelerateY: |-
        # Simulating Gravity

        In the last level you slowed down the car with the `sprite.velocityX` block and the counter pattern. It almost looked like the car was getting pulled to the left.

        If you use this same pattern with the `sprite.velocityY` block it will look like your sprite is always being pulled down, which is exactly what gravity does!

        # Do This

        The rock is thrown in the air but it never falls back down.

        -   Use the `sprite.velocityY` block with the counter pattern to make the rock slow down and then fall in the other direction.
        -   Experiment with different values in your counter pattern. Do you want the rock to slow down quickly or gradually? What looks most realistic to you?
        -   Discuss with your partner: Why are you setting the rock's initial velocity outside the draw loop? Why are you changing the sprite's velocity inside the draw loop?
      CSD U3 abstraction decelerateY_2018: |-
        # Simulating Gravity

        In the last level you slowed down the car with the `sprite.velocityX` block and the counter pattern. It almost looked like the car was getting pulled to the left.

        If you use this same pattern with the `sprite.velocityY` block it will look like your sprite is always being pulled down, which is exactly what gravity does!

        # Do This

        The rock is thrown in the air but it never falls back down.

        -   Use the `sprite.velocityY` block with the counter pattern to make the rock slow down and then fall in the other direction.
        -   Experiment with different values in your counter pattern. Do you want the rock to slow down quickly or gradually? What looks most realistic to you?
        -   Discuss with your partner: Why are you setting the rock's initial velocity outside the draw loop? Why are you changing the sprite's velocity inside the draw loop?
      CSD U3 abstraction decelerateY_2019: |-
        # Simulating Gravity

        In the last level you slowed down the car with the `sprite.velocityX` block and the counter pattern. It almost looked like the car was getting pulled to the left.

        If you use this same pattern with the `sprite.velocityY` block it will look like your sprite is always being pulled down, which is exactly what gravity does!

        # Do This

        The rock is thrown in the air but it never falls back down.

        -   Use the `sprite.velocityY` block with the counter pattern to make the rock slow down and then fall in the other direction.
        -   Experiment with different values in your counter pattern. Do you want the rock to slow down quickly or gradually? What looks most realistic to you?
        -   Discuss with your partner: Why are you setting the rock's initial velocity outside the draw loop? Why are you changing the sprite's velocity inside the draw loop?
      CSD U3 abstraction jump: |-
        # Jumping

        You now have all the blocks you need to make your sprite jump!

        Just as you checked whether your fish was at the left edge, you'll need to check whether the frog is on the ground.  If it is, it could either jump up or stay still, so you'll need one more `if` block to check whether the user has pressed the up arrow ( [Show me where](#triggercallout=code_triggered1) ).

        You'll also need to check whether the frog has reached its highest point, and send it back down if it has.

        # Do this

        -   Find the `if` statement that checks whether the sprite is on the ground, and look at the `if` statement inside of it that checks whether the user has pressed the "up" arrow key. ( [Show me where](#triggercallout=code_triggered1) )
            -   Use the `velocityY` block to make the frog jump up when the user presses the arrow key.
            -   Use the `velocityY` block to make the frog stop moving otherwise.
        -   Add an if statement that does the following  ( [Show me where](#triggercallout=code_triggered2) )
            -   Checks whether the frog sprite has reached its highest point.
            -   If so, use the `velocityY` block to make the sprite fall back down.
      CSD U3 abstraction jump_2018: |-
        # Jumping

        You now have all the blocks you need to make your sprite jump!  The sprite should jump up if it's on the ground and the user presses the "up" key, then should start moving back down when it reaches the top of its jump.

        # Do this

        -   Find the `if` statement that checks whether the sprite is on the ground, and look at the `if` statement inside of it that checks whether the user has pressed the "up" arrow key. ( [Show me where](#triggercallout=code_triggered1) )
            -   Make the frog jump up when the user presses the arrow key.
            -   Make the frog stop moving otherwise.
        -   Add code that does the following  ( [Show me where](#triggercallout=code_triggered2) )
            -   Checks whether the frog sprite has reached its highest point.
            -   If so, make the sprite go back down.
      CSD U3 abstraction jump_2018_2019: |-
        # Jumping

        You now have all the blocks you need to make your sprite jump!  The sprite should jump up if it's on the ground and the user presses the "up" key, then should start moving back down when it reaches the top of its jump.

        # Do this

        -   Find the `if` statement that checks whether the sprite is on the ground, and look at the `if` statement inside of it that checks whether the user has pressed the "up" arrow key. ( [Show me where](#triggercallout=code_triggered1) )
            -   Make the frog jump up when the user presses the arrow key.
            -   Make the frog stop moving otherwise.
        -   Add code that does the following  ( [Show me where](#triggercallout=code_triggered2) )
            -   Checks whether the frog sprite has reached its highest point.
            -   If so, make the sprite go back down.
      CSD U3 abstraction jumping: |-
        # Jumping

        Increasing a sprite's y velocity inside the counter pattern can simulate gravity. By adding user interactions you can make your sprite appear to jump as well. For starters you'll make a simple jump, and then make it more realistic looking in the next level.

        # Do This

        A sprite has already been created for you that falls because its y velocity is increased inside the draw loop. You'll need to make this sprite appear to jump.

        -   Inside the `if` block that checks whether the up arrow has been pressed, set the sprite's y velocity to -5. ( [Show me where](#triggercallout=callout1) )
        -   Discuss with a neighbor: Why does this code run the way it does? How would using a number besides -5 affect the way the code works? How could you jump higher or lower?
      CSD U3 abstraction jumping_2018: |-
        # Jumping

        Increasing a sprite's y velocity inside the counter pattern can simulate gravity. By adding user interactions you can make your sprite appear to jump as well. For starters you'll make a simple jump, and then make it more realistic looking in the next level.

        # Do This

        A sprite has already been created for you that falls because its y velocity is increased inside the draw loop. You'll need to make this sprite appear to jump.

        -   Inside the `if` block that checks whether the up arrow has been pressed, set the sprite's y velocity to -5. ( [Show me where](#triggercallout=callout1) )
        -   Discuss with a neighbor: Why does this code run the way it does? How would using a number besides -5 affect the way the code works? How could you jump higher or lower?
      CSD U3 abstraction jumping_2019: |-
        # Jumping

        Increasing a sprite's y velocity inside the counter pattern can simulate gravity. By adding user interactions you can make your sprite appear to jump as well. For starters you'll make a simple jump, and then make it more realistic looking in the next level.

        # Do This

        A sprite has already been created for you that falls because its y velocity is increased inside the draw loop. You'll need to make this sprite appear to jump.

        -   Inside the `if` block that checks whether the up arrow has been pressed, set the sprite's y velocity to -5. ( [Show me where](#triggercallout=callout1) )
        -   Discuss with a neighbor: Why does this code run the way it does? How would using a number besides -5 affect the way the code works? How could you jump higher or lower?
      CSD U3 abstraction left right counter: |-
        # Floating Right

        You're now using the counter pattern with the sprite's Y velocity to simulate gravity and jumping. If you use the sprite's X velocity in the counter pattern then you can make your sprite float from side to side as well.

        # Do This

        In this level you'll make your sprite start floating to the right when the right arrow is pressed.

        -   Add an `if` statement inside your draw loop below the one you created for the "up" arrow.
        -   Use the `keyDown` block to make the `if` statement respond to when the "right" arrow is pressed.
        -   Inside the `if` block use the counter pattern with the `sprite.velocityX` block to add 0.1 to the sprite's X velocity.

        Run your code to see how it works. The sprite should start floating to the right when you press the right arrow and jump when you press "up". You'll make the left arrow work in the next level.
      CSD U3 abstraction left right counter 2: |-
        # Floating Left

        In the last level you got detailed instructions on how to make your sprite start floating to the right. This time you'll need to make your sprite float to the left on your own. You should be pretty comfortable with using velocity and the counter pattern together at this point. If you're having trouble, talk to a neighbor or review some of the past levels.

        # Do This

        -   Add code to your draw loop that will make the sprite start moving to the left when the "left" arrow is down.
        -   Make sure you're using velocity and the counter pattern together.

        Once your code is working share what you wrote with a partner. Is your sprite easy to control? Does changing the amount you add or subtract in the counter patterns you wrote affect the way the game feels? What kind of game might be fun to make with a player that moves like this?
      CSD U3 abstraction left right counter 2_2018: |-
        # Floating Left

        In the last level you got detailed instructions on how to make your sprite start floating to the right. This time you'll need to make your sprite float to the left on your own. You should be pretty comfortable with using velocity and the counter pattern together at this point. If you're having trouble, talk to a neighbor or review some of the past levels.

        # Do This

        -   Add code to your draw loop that will make the sprite start moving to the left when the "left" arrow is down.
        -   Make sure you're using velocity and the counter pattern together.

        Once your code is working share what you wrote with a partner. Is your sprite easy to control? Does changing the amount you add or subtract in the counter patterns you wrote affect the way the game feels? What kind of game might be fun to make with a player that moves like this?
      CSD U3 abstraction left right counter 2_2019: |-
        # Floating Left

        In the last level you got detailed instructions on how to make your sprite start floating to the right. This time you'll need to make your sprite float to the left on your own. You should be pretty comfortable with using velocity and the counter pattern together at this point. If you're having trouble, talk to a neighbor or review some of the past levels.

        # Do This

        -   Add code to your draw loop that will make the sprite start moving to the left when the "left" arrow is down.
        -   Make sure you're using velocity and the counter pattern together.

        Once your code is working share what you wrote with a partner. Is your sprite easy to control? Does changing the amount you add or subtract in the counter patterns you wrote affect the way the game feels? What kind of game might be fun to make with a player that moves like this?
      CSD U3 abstraction left right counter_2018: |-
        # Floating Right

        You're now using the counter pattern with the sprite's Y velocity to simulate gravity and jumping. If you use the sprite's X velocity in the counter pattern then you can make your sprite float from side to side as well.

        # Do This

        In this level you'll make your sprite start floating to the right when the right arrow is pressed.

        -   Add an `if` statement inside your draw loop below the one you created for the "up" arrow.
        -   Use the `keyDown` block to make the `if` statement respond to when the "right" arrow is pressed.
        -   Inside the `if` block use the counter pattern with the `sprite.velocityX` block to add 0.1 to the sprite's X velocity.

        Run your code to see how it works. The sprite should start floating to the right when you press the right arrow and jump when you press "up". You'll make the left arrow work in the next level.
      CSD U3 abstraction left right counter_2019: |-
        # Floating Right

        You're now using the counter pattern with the sprite's Y velocity to simulate gravity and jumping. If you use the sprite's X velocity in the counter pattern then you can make your sprite float from side to side as well.

        # Do This

        In this level you'll make your sprite start floating to the right when the right arrow is pressed.

        -   Add an `if` statement inside your draw loop below the one you created for the "up" arrow.
        -   Use the `keyDown` block to make the `if` statement respond to when the "right" arrow is pressed.
        -   Inside the `if` block use the counter pattern with the `sprite.velocityX` block to add 0.1 to the sprite's X velocity.

        Run your code to see how it works. The sprite should start floating to the right when you press the right arrow and jump when you press "up". You'll make the left arrow work in the next level.
      CSD U3 abstraction looping: |-
        # Looping

        The game will be more fun if the frog can jump more than once.  You can make the mushroom "loop" by checking whether it's moved past the left edge and moving it back to the right edge when it has.

        # Do this

        -   Find the `if` statement that checks whether the mushroom has passed the left edge. ( [Show me where](#triggercallout=code_triggered1) )
        -   Use the `sprite.x` block to set the mushroom's position back to the right edge if it has.
      CSD U3 abstraction looping_2018: |-
        # Looping

        The game will be more fun if the frog can jump more than once.  You can make the mushroom "loop" by checking whether it's moved past the left edge and moving it back to the right edge when it has.

        # Do this

        -   Find the `if` statement that checks whether the mushroom has passed the left edge. ( [Show me where](#triggercallout=code_triggered1) )
        -   Use the `sprite.x` block to set the mushroom's position back to the right edge if it has.
      CSD U3 abstraction looping_2019: |-
        # Looping

        The game will be more fun if the frog can jump more than once.  You can make the mushroom "loop" by checking whether it's moved past the left edge and moving it back to the right edge when it has.

        # Do this

        -   Find the `if` statement that checks whether the mushroom has passed the left edge. ( [Show me where](#triggercallout=code_triggered1) )
        -   Use the `sprite.x` block to set the mushroom's position back to the right edge if it has.
      CSD U3 abstraction make it your own: |-
        # Make It Your Own

        You now have the basic mechanics of your game in place, so it's time to make it your own. What do you want to happen? Should the character get points every time it collects a coin? Can you add a scoreboard like you learned in the last lesson? Do you want to make another coin? What about a "bad coin" that takes away points?

        # Do This

        Make at least one improvement to the game that makes it your own. Be prepared to share your changes and improvements with your classmate.
      CSD U3 abstraction make it your own_2018: |-
        # Make It Your Own

        You now have the basic mechanics of your game in place, so it's time to make it your own. What do you want to happen? Should the character get points every time it collects a coin? Can you add a scoreboard like you learned in the last lesson? Do you want to make another coin? What about a "bad coin" that takes away points?

        # Do This

        Make at least one improvement to the game that makes it your own. Be prepared to share your changes and improvements with your classmate.
      CSD U3 abstraction make it your own_2019: |-
        # Make It Your Own

        You now have the basic mechanics of your game in place, so it's time to make it your own. What do you want to happen? Should the character get points every time it collects a coin? Can you add a scoreboard like you learned in the last lesson? Do you want to make another coin? What about a "bad coin" that takes away points?

        # Do This

        Make at least one improvement to the game that makes it your own. Be prepared to share your changes and improvements with your classmate.
      CSD U3 abstraction reset coin: |-
        # Reset Coin

        When your character touches the coin you should reset it somewhere on the screen.

        # Do This

        -   Place an `if` block inside of your draw loop.
        -   Use the `sprite.isTouching()` block as the condition to detect when the character touches the coin.
        -   Inside the `if` block write code that sets the coin's X and Y position to random numbers between 0 and 400.
            -   _Hint: You've already written this code elsewhere in your program._

        Test your code before moving on. When your player touches the coin, it should move somewhere else on the screen.
      CSD U3 abstraction reset coin_2018: |-
        # Reset Coin

        When your character touches the coin you should reset it somewhere on the screen.

        # Do This

        -   Place an `if` block inside of your draw loop.
        -   Use the `sprite.isTouching()` block as the condition to detect when the character touches the coin.
        -   Inside the `if` block write code that sets the coin's X and Y position to random numbers between 0 and 400.
            -   _Hint: You've already written this code elsewhere in your program._

        Test your code before moving on. When your player touches the coin, it should move somewhere else on the screen.
      CSD U3 abstraction reset coin_2019: |-
        # Reset Coin

        When your character touches the coin you should reset it somewhere on the screen.

        # Do This

        -   Place an `if` block inside of your draw loop.
        -   Use the `sprite.isTouching()` block as the condition to detect when the character touches the coin.
        -   Inside the `if` block write code that sets the coin's X and Y position to random numbers between 0 and 400.
            -   _Hint: You've already written this code elsewhere in your program._

        Test your code before moving on. When your player touches the coin, it should move somewhere else on the screen.
      CSD U3 abstraction rotation: |-
        # rotationSpeed

        You've already learned how to make your sprite spin by using the `rotation` block.  For example, when you wanted your sprite to rotate by two degrees each time it was drawn, you put `sprite.rotation = sprite.rotation + 2` inside the draw loop.

        Now, you can use `rotationSpeed` to make your sprites rotate by a certain amount each time they are drawn. If you want your sun to rotate by two degrees each time it's drawn, you can use `sun.rotationSpeed = 2` before the draw loop, after you create your sprite.

        # Do This

        Make the sun rotate by 3 degrees each time using the `rotationSpeed` block. ( [Show me where](#triggercallout=callout1) )
      CSD U3 abstraction rotation control: |-
        # Controlling Speed

        You used `rotatationSpeed` outside the draw loop to make your sprite rotate when your program started.  You can also use `rotationSpeed` **inside** the draw loop to change the speed of the sprite during the game.  For example, a sprite can start rotating when the user presses the space bar, and it will keep rotating until it's told to stop.

        # Do This

        -   Look at the `if` statement inside the draw loop that checks whether the space bar has been pressed. ( [Show me where](#triggercallout=code_triggered1) )
        -   Use the `rotationSpeed` block to make the color wheel start spinning when the user presses the space bar.
      CSD U3 abstraction rotation control_2018: |-
        # Controlling Speed

        You used `rotatationSpeed` outside the draw loop to make your sprite rotate when your program started.  You can also use `rotationSpeed` **inside** the draw loop to change the speed of the sprite during the game.  For example, a sprite can start rotating when the user presses the space bar, and it will keep rotating until it's told to stop.

        # Do This

        -   Look at the `if` statement inside the draw loop that checks whether the space bar has been pressed. ( [Show me where](#triggercallout=code_triggered1) )
        -   Use the `rotationSpeed` block to make the color wheel start spinning when the user presses the space bar.
      CSD U3 abstraction rotation control_2019: |-
        # Geschwindigkeit kontrollieren

        Du hast `Rotationsgeschwindigkeit` außerhalb der Zeichenschleife verwendet, um dein Sprite beim Start des Programms drehen zu lassen.  Du kannst auch `Rotationsgeschwindigkeit` **innerhalb der Schleife** verwenden, um die Geschwindigkeit des Sprites während des Spiels zu ändern.  Zum Beispiel kann sich ein Sprite drehen, wenn der Benutzer die Leertaste drückt, und es dreht sich weiter, bis ihm gesagt wird, dass es anhalten soll.

        # Mach Folgendes

        -   Schaue Dir die `if` -Anweisung innerhalb der Zeichenschleife an, die überprüft, ob die Leertaste gedrückt wurde. ( [Zeige mir, wo](#triggercallout=code_triggered1) )
        -   Verwende den Block `Rotationsgeschwindigkeit`, damit sich das Farbrad dreht, wenn der Benutzer die Leertaste drückt.
      CSD U3 abstraction rotation_2018: |-
        # rotationSpeed

        You've already learned how to make your sprite spin by using the `rotation` block.  For example, when you wanted your sprite to rotate by two degrees each time it was drawn, you put `sprite.rotation = sprite.rotation + 2` inside the draw loop.

        Now, you can use `rotationSpeed` to make your sprites rotate by a certain amount each time they are drawn. If you want your sun to rotate by two degrees each time it's drawn, you can use `sun.rotationSpeed = 2` before the draw loop, after you create your sprite.

        # Do This

        Make the sun rotate by 3 degrees each time using the `rotationSpeed` block. ( [Show me where](#triggercallout=callout1) )
      CSD U3 abstraction rotation_2019: |-
        # rotationSpeed

        You've already learned how to make your sprite spin by using the `rotation` block.  For example, when you wanted your sprite to rotate by two degrees each time it was drawn, you put `sprite.rotation = sprite.rotation + 2` inside the draw loop.

        Now, you can use `rotationSpeed` to make your sprites rotate by a certain amount each time they are drawn. If you want your sun to rotate by two degrees each time it's drawn, you can use `sun.rotationSpeed = 2` before the draw loop, after you create your sprite.

        # Do This

        Make the sun rotate by 3 degrees each time using the `rotationSpeed` block. ( [Show me where](#triggercallout=callout1) )
      CSD U3 abstraction tumbleweed: |-
        # Mushroom

        Now you just need something for your sprite to jump over.  This program already has a mushroom just past the right edge of the screen, but it needs to move toward your frog.

        # Do this

        -   Use the `velocityX` block to make the mushroom move left across the screen.

        _Hint: The mushroom should start moving at the very beginning of the game, and never change, so should it be inside or outside the draw loop?_
      CSD U3 abstraction tumbleweed_2018: |-
        # Mushroom

        Now you just need something for your sprite to jump over.  This program already has a mushroom just past the right edge of the screen, but it needs to move toward your frog.

        # Do this

        -   Use the `velocityX` block to make the mushroom move left across the screen.

        _Hint: The mushroom should start moving at the very beginning of the game, and never change, so should it be inside or outside the draw loop?_
      CSD U3 abstraction tumbleweed_2019: |-
        # Mushroom

        Now you just need something for your sprite to jump over.  This program already has a mushroom just past the right edge of the screen, but it needs to move toward your frog.

        # Do this

        -   Use the `velocityX` block to make the mushroom move left across the screen.

        _Hint: The mushroom should start moving at the very beginning of the game, and never change, so should it be inside or outside the draw loop?_
      CSD U3 abstraction velocityX: |-
        # velocityX

        One way to move sprites in Game Lab is with the counter pattern. For example `sprite1.x = sprite1.x + 1` moves a sprite by 1 pixel each frame of the draw loop. This pattern is so common that sprites have a `velocityX` property that does this for you.

        # Do This

        -   Drag a `sprite.velocityX` block directly below where your sprite is created.       ( [Show me where](#triggercallout=code_triggered) )
        -   Write the name of your sprite in the block.
        -   Assign the `velocityX` property a value of 1.
        -   Run the code. What happens?
        -   Re-run the code giving the `velocityX` property a different value. What's changing?
      CSD U3 abstraction velocityX control: |-
        # Multiple Controls

        As you saw in the last level, you can change the sprite's velocity with multiple `if` statements. In this program, the fish has three different types of movement, each of which should be controlled by its own `if` statement.

        # Do This

        -   Look at the three `if` statements inside the draw loop.

        -   Use a `sprite.velocityX` block inside each `if` statement to make the three following movements:
            -   If the user presses the right arrow key, move the fish to the right.
            -   If the fish gets to the right-hand side of the screen, move the fish to the left.
            -   If the fish gets to the left-hand side of the screen, stop the fish.
      CSD U3 abstraction velocityX control_2018: |-
        # Multiple Controls

        As you saw in the last level, you can change the sprite's velocity with multiple `if` statements. In this program, the fish has three different types of movement, each of which should be controlled by its own `if` statement.

        # Do This

        -   Look at the three `if` statements inside the draw loop.

        -   Use a `sprite.velocityX` block inside each `if` statement to make the three following movements:
            -   If the user presses the right arrow key, move the fish to the right.
            -   If the fish gets to the right-hand side of the screen, move the fish to the left.
            -   If the fish gets to the left-hand side of the screen, stop the fish.
      CSD U3 abstraction velocityX control_2019: |-
        # Multiple Controls

        As you saw in the last level, you can change the sprite's velocity with multiple `if` statements. In this program, the fish has three different types of movement, each of which should be controlled by its own `if` statement.

        # Do This

        -   Look at the three `if` statements inside the draw loop.

        -   Use a `sprite.velocityX` block inside each `if` statement to make the three following movements:
            -   If the user presses the right arrow key, move the fish to the right.
            -   If the fish gets to the right-hand side of the screen, move the fish to the left.
            -   If the fish gets to the left-hand side of the screen, stop the fish.
      CSD U3 abstraction velocityX if-statements: |-
        # Changing Velocity with Position

        One advantage to using the velocity blocks inside conditionals (`if` blocks) is that your sprite keeps moving, even after the condition stops being true.  For example, you only had to press a key once to launch your fly bot, and it kept flying forever.

        In the code below, the fish sprite moves to the left when it hits the right edge, and to the right when it hits the left edge.  The sprite keeps moving, even when it's not touching the edge anymore.

        # Do This

        -   Look at `if` statements that check the sprite's position and set its velocity.
        -   With your partner, discuss how the sprite knows which way to move when neither of the `if` statements are true (the sprite is in the middle of the screen).
      CSD U3 abstraction velocityX if-statements predict: |-
        # Changing Velocity with Position

        One advantage to using the velocity blocks inside conditionals (`if` blocks) is that your sprite keeps moving, even after the condition stops being true.  For example, you only had to press a key once to launch your fly bot, and it kept flying forever.  The code below uses if statements to make a fish sprite move in different directions.

        # Do This

        -   Look at `if` statements that check the sprite's position and set its velocity.
        -   With your partner, discuss what you think the code will do, and write your answer below.
        -   Once you have submitted your answer, run the code.
      CSD U3 abstraction velocityX if-statements predict_2018: |-
        # Changing Velocity with Position

        One advantage to using the velocity blocks inside conditionals (`if` blocks) is that your sprite keeps moving, even after the condition stops being true.  For example, you only had to press a key once to launch your fly bot, and it kept flying forever.  The code below uses if statements to make a fish sprite move in different directions.

        # Do This

        -   Look at `if` statements that check the sprite's position and set its velocity.
        -   With your partner, discuss what you think the code will do, and write your answer below.
        -   Once you have submitted your answer, run the code.
      CSD U3 abstraction velocityX if-statements predict_2019: |-
        # Changing Velocity with Position

        One advantage to using the velocity blocks inside conditionals (`if` blocks) is that your sprite keeps moving, even after the condition stops being true.  For example, you only had to press a key once to launch your fly bot, and it kept flying forever.  The code below uses if statements to make a fish sprite move in different directions.

        # Do This

        -   Look at `if` statements that check the sprite's position and set its velocity.
        -   With your partner, discuss what you think the code will do, and write your answer below.
        -   Once you have submitted your answer, run the code.
      CSD U3 abstraction velocityX if-statements_2018: |-
        # Changing Velocity with Position

        One advantage to using the velocity blocks inside conditionals (`if` blocks) is that your sprite keeps moving, even after the condition stops being true.  For example, you only had to press a key once to launch your fly bot, and it kept flying forever.

        In the code below, the fish sprite moves to the left when it hits the right edge, and to the right when it hits the left edge.  The sprite keeps moving, even when it's not touching the edge anymore.

        # Do This

        -   Look at `if` statements that check the sprite's position and set its velocity.
        -   With your partner, discuss how the sprite knows which way to move when neither of the `if` statements are true (the sprite is in the middle of the screen).
      CSD U3 abstraction velocityX if-statements_2019: |-
        # Changing Velocity with Position

        One advantage to using the velocity blocks inside conditionals (`if` blocks) is that your sprite keeps moving, even after the condition stops being true.  For example, you only had to press a key once to launch your fly bot, and it kept flying forever.

        In the code below, the fish sprite moves to the left when it hits the right edge, and to the right when it hits the left edge.  The sprite keeps moving, even when it's not touching the edge anymore.

        # Do This

        -   Look at `if` statements that check the sprite's position and set its velocity.
        -   With your partner, discuss how the sprite knows which way to move when neither of the `if` statements are true (the sprite is in the middle of the screen).
      CSD U3 abstraction velocityX_2018: |-
        # velocityX

        One way to move sprites in Game Lab is with the counter pattern. For example `sprite1.x = sprite1.x + 1` moves a sprite by 1 pixel each frame of the draw loop. This pattern is so common that sprites have a `velocityX` property that does this for you.

        # Do This

        -   Drag a `sprite.velocityX` block directly below where your sprite is created.       ( [Show me where](#triggercallout=code_triggered) )
        -   Write the name of your sprite in the block.
        -   Assign the `velocityX` property a value of 1.
        -   Run the code. What happens?
        -   Re-run the code giving the `velocityX` property a different value. What's changing?
      CSD U3 abstraction velocityX_2019: |-
        # velocityX

        One way to move sprites in Game Lab is with the counter pattern. For example `sprite1.x = sprite1.x + 1` moves a sprite by 1 pixel each frame of the draw loop. This pattern is so common that sprites have a `velocityX` property that does this for you.

        # Do This

        -   Drag a `sprite.velocityX` block directly below where your sprite is created.       ( [Show me where](#triggercallout=code_triggered) )
        -   Write the name of your sprite in the block.
        -   Assign the `velocityX` property a value of 1.
        -   Run the code. What happens?
        -   Re-run the code giving the `velocityX` property a different value. What's changing?
      CSD U3 abstraction velocityY: |-
        # Moving Down

        Here is a feather sprite that should be floating down the screen.  If `velocityX` makes a sprite move to the right, can you find the block that will make the feather move down?

        # Do This

        Find the block that will make the feather sprite go down the screen, and use it outside the draw loop.   (  [Show me where](#triggercallout=code_triggered) )
      CSD U3 abstraction velocityY control: |-
        # Controlling Speed

        Your code before the draw loop sets up the beginning of your game.  Your code inside the draw loop controls how the game will change while it's being played.  In this game, the helicopter bot starts off at the bottom of the screen, but when the space key is pressed, it flies up.

        # Do This

        -   Use an `if` statement inside the draw loop to check when the space bar is pressed.
        -   Use the `velocityY` block to make the sprite fly up when the user presses the space bar.  The sprite should keep moving up even after you let go of the space bar.
      CSD U3 abstraction velocityY control_2018: |-
        # Controlling Speed

        Your code before the draw loop sets up the beginning of your game.  Your code inside the draw loop controls how the game will change while it's being played.  In this game, the helicopter bot starts off at the bottom of the screen, but when the space key is pressed, it flies up.

        # Do This

        -   Use an `if` statement inside the draw loop to check when the space bar is pressed.
        -   Use the `velocityY` block to make the sprite fly up when the user presses the space bar.  The sprite should keep moving up even after you let go of the space bar.
      CSD U3 abstraction velocityY control_2019: |-
        # Controlling Speed

        Your code before the draw loop sets up the beginning of your game.  Your code inside the draw loop controls how the game will change while it's being played.  In this game, the helicopter bot starts off at the bottom of the screen, but when the space key is pressed, it flies up.

        # Do This

        -   Use an `if` statement inside the draw loop to check when the space bar is pressed.
        -   Use the `velocityY` block to make the sprite fly up when the user presses the space bar.  The sprite should keep moving up even after you let go of the space bar.
      CSD U3 abstraction velocityY_2018: |-
        # Moving Down

        Here is a feather sprite that should be floating down the screen.  If `velocityX` makes a sprite move to the right, can you find the block that will make the feather move down?

        # Do This

        Find the block that will make the feather sprite go down the screen, and use it outside the draw loop.   (  [Show me where](#triggercallout=code_triggered) )
      CSD U3 abstraction velocityY_2019: |-
        # Moving Down

        Here is a feather sprite that should be floating down the screen.  If `velocityX` makes a sprite move to the right, can you find the block that will make the feather move down?

        # Do This

        Find the block that will make the feather sprite go down the screen, and use it outside the draw loop.   (  [Show me where](#triggercallout=code_triggered) )
      CSD U3 challenge face: |-
        <img src="https://images.code.org/aa5aedbcfec082c2886d88b565e5fc09-image-1495732712591.png" style="float: right; max-width: 200px; border: 1px solid grey">

        # Challenge: Face

        _Check with your teacher before starting any of the challenges._

        Write a program that uses `rect`, `ellipse`, and `fill` to create the face on the right. The colors used are "lightblue", "red", and "lightgreen".
        Once you've finished, add your own personal touches to the image.
      CSD U3 challenge face_2018: |-
        <img src="https://images.code.org/aa5aedbcfec082c2886d88b565e5fc09-image-1495732712591.png" style="float: right; max-width: 200px; border: 1px solid grey">

        # Challenge: Face

        _Check with your teacher before starting any of the challenges._

        Write a program that uses `rect`, `ellipse`, and `fill` to create the face on the right. The colors used are "lightblue", "red", and "lightgreen".
        Once you've finished, add your own personal touches to the image.
      CSD U3 challenge face_2019: |-
        <img src="https://images.code.org/aa5aedbcfec082c2886d88b565e5fc09-image-1495732712591.png" style="float: right; max-width: 200px; border: 1px solid grey">

        # Challenge: Face

        _Check with your teacher before starting any of the challenges._

        Write a program that uses `rect`, `ellipse`, and `fill` to create the face on the right. The colors used are "lightblue", "red", and "lightgreen".
        Once you've finished, add your own personal touches to the image.
      CSD U3 challenge new shape: |-
        <img src="https://images.code.org/cc725698ade5282931002db3bf762cbc-image-1495733456927.png" style="float: right; max-width: 200px; border: 1px solid grey">

        # Challenge: Shape of Shapes

        _Check with your teacher before starting any of the challenges._

        Using only the `rect` and `ellipse` commands, can you draw a new shape, such as this triangle made out of circles?
      CSD U3 challenge new shape_2018: |-
        <img src="https://images.code.org/cc725698ade5282931002db3bf762cbc-image-1495733456927.png" style="float: right; max-width: 200px; border: 1px solid grey">

        # Challenge: Shape of Shapes

        _Check with your teacher before starting any of the challenges._

        Using only the `rect` and `ellipse` commands, can you draw a new shape, such as this triangle made out of circles?
      CSD U3 challenge new shape_2019: |-
        <img src="https://images.code.org/cc725698ade5282931002db3bf762cbc-image-1495733456927.png" style="float: right; max-width: 200px; border: 1px solid grey">

        # Challenge: Shape of Shapes

        _Check with your teacher before starting any of the challenges._

        Using only the `rect` and `ellipse` commands, can you draw a new shape, such as this triangle made out of circles?
      CSD U3 collisions bounciness: |-
        # Bounciness

        So far, `bounceOff` has made sprites bounce away from other objects as fast as they bounced into them.  In the real world, almost everything slows down just a little bit when it bounces off something else.  You can use the `bounciness` block to tell your sprite how much to slow down or speed up when it bounces off something else.

        # Do This

        -   Read the code below and press "Run" to see the behavior of the basketball and pool ball.
        -   Use a `bounciness` block to set the bounciness of your soccer ball.
        -   Run the code again to see how the sprites bounce off the floor.

        [//]: # "https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png"

        [//]: # "https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png"

        [//]: # "https://images.code.org/0e4e9c26bed0d31d14f6b3f8f8bb4c27-image-1475786966986.png"
      CSD U3 collisions bounciness_2018: |-
        # Bounciness

        So far, `bounceOff` has made sprites bounce away from other objects as fast as they bounced into them.  In the real world, almost everything slows down just a little bit when it bounces off something else.  You can use the `bounciness` block to tell your sprite how much to slow down or speed up when it bounces off something else.

        # Do This

        -   Read the code below and press "Run" to see the behavior of the basketball and pool ball.
        -   Use a `bounciness` block to set the bounciness of your soccer ball.
        -   Run the code again to see how the sprites bounce off the floor.

        [//]: # "https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png"

        [//]: # "https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png"

        [//]: # "https://images.code.org/0e4e9c26bed0d31d14f6b3f8f8bb4c27-image-1475786966986.png"
      CSD U3 collisions bounciness_2019: |-
        # Bounciness

        So far, `bounceOff` has made sprites bounce away from other objects as fast as they bounced into them.  In the real world, almost everything slows down just a little bit when it bounces off something else.  You can use the `bounciness` block to tell your sprite how much to slow down or speed up when it bounces off something else.

        # Do This

        -   Read the code below and press "Run" to see the behavior of the basketball and pool ball.
        -   Use a `bounciness` block to set the bounciness of your soccer ball.
        -   Run the code again to see how the sprites bounce off the floor.

        [//]: # "https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png"

        [//]: # "https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png"

        [//]: # "https://images.code.org/0e4e9c26bed0d31d14f6b3f8f8bb4c27-image-1475786966986.png"
      CSD U3 collisions build isTouching: |-
        # Balloon

        The code below uses the sprites' x and y positions to check whether they are touching.  It will change the balloon sprite's animation when the tack touches it.  Use the arrow keys to move the tack until it touches the balloon.

        # Do This

        -   You do not need to change any code on this level.
        -   Read the if statements inside the draw loop and find the different sprite properties and how they are compared.
        -   Discuss the code with your partner.  Would you want to write this code every time you checked whether sprites were touching?

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"
      CSD U3 collisions build isTouching_2018: |-
        # Balloon

        The code below uses the sprites' x and y positions to check whether they are touching.  It will change the balloon sprite's animation when the tack touches it.  Use the arrow keys to move the tack until it touches the balloon.

        # Do This

        -   You do not need to change any code on this level.
        -   Read the if statements inside the draw loop and find the different sprite properties and how they are compared.
        -   Discuss the code with your partner.  Would you want to write this code every time you checked whether sprites were touching?

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"
      CSD U3 collisions build isTouching_2019: |-
        # Balloon

        The code below uses the sprites' x and y positions to check whether they are touching.  It will change the balloon sprite's animation when the tack touches it.  Use the arrow keys to move the tack until it touches the balloon.

        # Do This

        -   You do not need to change any code on this level.
        -   Read the if statements inside the draw loop and find the different sprite properties and how they are compared.
        -   Discuss the code with your partner.  Would you want to write this code every time you checked whether sprites were touching?

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"
      CSD U3 collisions car intro: |-
        # Frog Jump

        Look at the frog jumping game to the left.   It looks like the game from the last lesson, but the frog moves the mushroom if it hits it.  What code do you think would help the computer to know whether two sprites are touching?

        [//]: # "https://images.code.org/ee9b677e93213846fe12abb3b34f563c-image-1469742494237.png"

        [//]: # "https://images.code.org/5f738da1a2b1ef8af124e4470e2babe7-image-1469742830481.png"

        [//]: # "https://images.code.org/f22e6b1a636337820e53fb37a137b3d1-image-1469742992179.png"
      CSD U3 collisions car intro_2018: |-
        # Frog Jump

        Look at the frog jumping game to the left.   It looks like the game from the last lesson, but the frog moves the mushroom if it hits it.  What code do you think would help the computer to know whether two sprites are touching?

        [//]: # "https://images.code.org/ee9b677e93213846fe12abb3b34f563c-image-1469742494237.png"

        [//]: # "https://images.code.org/5f738da1a2b1ef8af124e4470e2babe7-image-1469742830481.png"

        [//]: # "https://images.code.org/f22e6b1a636337820e53fb37a137b3d1-image-1469742992179.png"
      CSD U3 collisions car intro_2019: |-
        # Frog Jump

        Look at the frog jumping game to the left.   It looks like the game from the last lesson, but the frog moves the mushroom if it hits it.  What code do you think would help the computer to know whether two sprites are touching?

        [//]: # "https://images.code.org/ee9b677e93213846fe12abb3b34f563c-image-1469742494237.png"

        [//]: # "https://images.code.org/5f738da1a2b1ef8af124e4470e2babe7-image-1469742830481.png"

        [//]: # "https://images.code.org/f22e6b1a636337820e53fb37a137b3d1-image-1469742992179.png"
      CSD U3 collisions debug: |-
        # Debug

        Sometimes sprites will behave in ways that are unexpected. There is a special `sprite.debug` property you can use to better understand why the sprites interact the way that they do.

        # Do This

        These two coins are round, so you would expect them to bounce in a certain way. Something weird is happening though!

        -   Run the code and watch the way that the coins interact.
        -   Use the `sprite.debug` block to make debug 'true' for both the sprites and run the code again.
        -   Change the gold coin's starting x position to 51 and run the code again.
        -   Discuss with a partner: Why do you think the coins are bouncing strangely?
      CSD U3 collisions debug isTouching: |-
        # Debugging Collisions

        The balloon is popping before the tack touches it.  When sprites aren't doing what you expect, you can use the `debug` block to get more information about why the sprites are behaving that way.  Can you find out what's wrong in the code below?

        # Do This

        -   Run the code and use the arrow keys to move the tack to pop the balloon.
        -   In the code below, change `balloon.debug = false` to `balloon.debug = true`.
        -   Add a new `debug` block to the code and set the tack sprite's debug property to `true`.
        -   Run the code again, then discuss with your partner why the balloon is popping early.

        _Challenge: Can you use the animations tab to resize the balloon picture so it pops at the correct time?_

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"

        [//]: # "https://images.code.org/2892e65635d7a43d0664bb8ff58eb698-image-1471200175665.png"

        [//]: # "https://images.code.org/9ffeb3f543033353d073794071316860-image-1471200179449.png"
      CSD U3 collisions debug isTouching_2018: |-
        # Debugging Collisions

        The balloon is popping before the tack touches it.  When sprites aren't doing what you expect, you can use the `debug` block to get more information about why the sprites are behaving that way.  Can you find out what's wrong in the code below?

        # Do This

        -   Run the code and use the arrow keys to move the tack to pop the balloon.
        -   In the code below, change `balloon.debug = false` to `balloon.debug = true`.
        -   Add a new `debug` block to the code and set the tack sprite's debug property to `true`.
        -   Run the code again, then discuss with your partner why the balloon is popping early.

        _Challenge: Can you use the animations tab to resize the balloon picture so it pops at the correct time?_

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"

        [//]: # "https://images.code.org/2892e65635d7a43d0664bb8ff58eb698-image-1471200175665.png"

        [//]: # "https://images.code.org/9ffeb3f543033353d073794071316860-image-1471200179449.png"
      CSD U3 collisions debug isTouching_2019: |-
        # Debugging Collisions

        The balloon is popping before the tack touches it.  When sprites aren't doing what you expect, you can use the `debug` block to get more information about why the sprites are behaving that way.  Can you find out what's wrong in the code below?

        # Do This

        -   Run the code and use the arrow keys to move the tack to pop the balloon.
        -   In the code below, change `balloon.debug = false` to `balloon.debug = true`.
        -   Add a new `debug` block to the code and set the tack sprite's debug property to `true`.
        -   Run the code again, then discuss with your partner why the balloon is popping early.

        _Challenge: Can you use the animations tab to resize the balloon picture so it pops at the correct time?_

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"

        [//]: # "https://images.code.org/2892e65635d7a43d0664bb8ff58eb698-image-1471200175665.png"

        [//]: # "https://images.code.org/9ffeb3f543033353d073794071316860-image-1471200179449.png"
      CSD U3 collisions debug_2018: |-
        # Debug

        Sometimes sprites will behave in ways that are unexpected. There is a special `sprite.debug` property you can use to better understand why the sprites interact the way that they do.

        # Do This

        These two coins are round, so you would expect them to bounce in a certain way. Something weird is happening though!

        -   Run the code and watch the way that the coins interact.
        -   Use the `sprite.debug` block to make debug 'true' for both the sprites and run the code again.
        -   Change the gold coin's starting x position to 51 and run the code again.
        -   Discuss with a partner: Why do you think the coins are bouncing strangely?
      CSD U3 collisions debug_2019: |-
        # Debug

        Sometimes sprites will behave in ways that are unexpected. There is a special `sprite.debug` property you can use to better understand why the sprites interact the way that they do.

        # Do This

        These two coins are round, so you would expect them to bounce in a certain way. Something weird is happening though!

        -   Run the code and watch the way that the coins interact.
        -   Use the `sprite.debug` block to make debug 'true' for both the sprites and run the code again.
        -   Change the gold coin's starting x position to 51 and run the code again.
        -   Discuss with a partner: Why do you think the coins are bouncing strangely?
      CSD U3 collisions displace intro: |-
        # Displace

        The interaction you've been programming is so common that there's a block designed to do the interaction for you. `sprite.displace()` that will make one sprite push the other when they touch. The code underlying this block might look a lot like what you just wrote, but now you no longer need to worry about writing those details yourself.

        # Do This

        Someone tried to use the `sprite.displace()` block to make the **elephant push the hippo**, but there is a bug. Can you change the code so that the elephant pushes the hippo off the screen?

        -   Find the line of code where the `sprite.displace()` block is used and fix the error.
      CSD U3 collisions displace intro_2018: |-
        # Displace

        The interaction you've been programming is so common that there's a block designed to do the interaction for you. `sprite.displace()` that will make one sprite push the other when they touch. The code underlying this block might look a lot like what you just wrote, but now you no longer need to worry about writing those details yourself.

        # Do This

        Someone tried to use the `sprite.displace()` block to make the **elephant push the hippo**, but there is a bug. Can you change the code so that the elephant pushes the hippo off the screen?

        -   Find the line of code where the `sprite.displace()` block is used and fix the error.
      CSD U3 collisions displace intro_2019: |-
        # Displace

        The interaction you've been programming is so common that there's a block designed to do the interaction for you. `sprite.displace()` that will make one sprite push the other when they touch. The code underlying this block might look a lot like what you just wrote, but now you no longer need to worry about writing those details yourself.

        # Do This

        Someone tried to use the `sprite.displace()` block to make the **elephant push the hippo**, but there is a bug. Can you change the code so that the elephant pushes the hippo off the screen?

        -   Find the line of code where the `sprite.displace()` block is used and fix the error.
      CSD U3 collisions displace x: |-
        # Program a Sprite Interaction

        You should have discussed with your classmates how you could create the sprite interaction you saw in the last level. Now it's your turn to program it yourself. How can you make the giraffe move the monkey off the screen?

        # Do This

        The giraffe is already moving across the screen toward the monkey but the sprite interaction itself hasn't been programmed.

        -   Use the plan you developed with your classmates on the last level to program the sprite interaction yourself.

        [//]: # "https://images.code.org/2e6b993747a39cd5076dce219037903d-image-1470319674401.png"

        [//]: # "https://images.code.org/d44d7c1aa87ea7eeceea9e9b023408f9-image-1470319674396.png"
      CSD U3 collisions displace x_2018: |-
        # Program a Sprite Interaction

        You should have discussed with your classmates how you could create the sprite interaction you saw in the last level. Now it's your turn to program it yourself. How can you make the giraffe move the monkey off the screen?

        # Do This

        The giraffe is already moving across the screen toward the monkey but the sprite interaction itself hasn't been programmed.

        -   Use the plan you developed with your classmates on the last level to program the sprite interaction yourself.

        [//]: # "https://images.code.org/2e6b993747a39cd5076dce219037903d-image-1470319674401.png"

        [//]: # "https://images.code.org/d44d7c1aa87ea7eeceea9e9b023408f9-image-1470319674396.png"
      CSD U3 collisions displace x_2019: |-
        # Program a Sprite Interaction

        You should have discussed with your classmates how you could create the sprite interaction you saw in the last level. Now it's your turn to program it yourself. How can you make the giraffe move the monkey off the screen?

        # Do This

        The giraffe is already moving across the screen toward the monkey but the sprite interaction itself hasn't been programmed.

        -   Use the plan you developed with your classmates on the last level to program the sprite interaction yourself.

        [//]: # "https://images.code.org/2e6b993747a39cd5076dce219037903d-image-1470319674401.png"

        [//]: # "https://images.code.org/d44d7c1aa87ea7eeceea9e9b023408f9-image-1470319674396.png"
      CSD U3 collisions displace y: |-
        # Write Your Own Sprite Interaction

        In the last level you should have written code for a sprite interaction that you developed with your classmates. This time try to write the program on your own, but you can use the patterns you saw in the last level.

        # Do This

        The elephant should **push the hippo off the screen**. Notice that the elephant moves at a random Y velocity each time the program runs.

        -   Using the patterns from the last level, write code that makes the elephant push the hippo off the screen.
      CSD U3 collisions displace y_2018: |-
        # Write Your Own Sprite Interaction

        In the last level you should have written code for a sprite interaction that you developed with your classmates. This time try to write the program on your own, but you can use the patterns you saw in the last level.

        # Do This

        The elephant should **push the hippo off the screen**. Notice that the elephant moves at a random Y velocity each time the program runs.

        -   Using the patterns from the last level, write code that makes the elephant push the hippo off the screen.
      CSD U3 collisions displace y_2019: |-
        # Write Your Own Sprite Interaction

        In the last level you should have written code for a sprite interaction that you developed with your classmates. This time try to write the program on your own, but you can use the patterns you saw in the last level.

        # Do This

        The elephant should **push the hippo off the screen**. Notice that the elephant moves at a random Y velocity each time the program runs.

        -   Using the patterns from the last level, write code that makes the elephant push the hippo off the screen.
      CSD U3 collisions egg: |-
        # Applesauce

        When the apple hits the blender, the blender should turn on.

        # Do This

        Use the `isTouching` block to make the blender shake back and forth when the apple sprite touches the blender sprite.  The shaking motion is already coded using the random block, so you just have to check when the two sprites are touching.

        _Challenge: Can you make the apple disappear when it touches the blender?_

        [//]: # "https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png"

        [//]: # "https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png"

        [//]: # "https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png"

        [//]: # "https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png"

        [//]: # "https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png"

        [//]: # "https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png"
      CSD U3 collisions egg2: |-
        # Making Sounds

        You can also use code to play a blender sound.

        # Do This

        Use the `playSound` block from the "World" drawer to play the "<https://studio.code.org/docs/sounds/blender.mp3>" sound when the apple touches the blender.  You will need to paste the address of the sound into the block, so it looks like this: ![](<https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57 PM.png>)

        [//]: # "https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png"

        [//]: # "https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png"

        [//]: # "https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png"

        [//]: # "https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png"

        [//]: # "https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png"

        [//]: # "https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png"

        [//]: # "https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57 PM.png"
      CSD U3 collisions egg2_2018: |-
        # Making Sounds

        You can also use code to play a blender sound.

        # Do This

        Use the `playSound` block from the "World" drawer to play the "<https://studio.code.org/docs/sounds/blender.mp3>" sound when the apple touches the blender.  You will need to paste the address of the sound into the block, so it looks like this: ![](<https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57 PM.png>)

        [//]: # "https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png"

        [//]: # "https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png"

        [//]: # "https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png"

        [//]: # "https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png"

        [//]: # "https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png"

        [//]: # "https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png"

        [//]: # "https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57 PM.png"
      CSD U3 collisions egg2_2019: |-
        # Making Sounds

        You can also use code to play a blender sound.

        # Do This

        Use the `playSound` block from the "World" drawer to play the "<https://studio.code.org/docs/sounds/blender.mp3>" sound when the apple touches the blender.  You will need to paste the address of the sound into the block, so it looks like this: ![](<https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57 PM.png>)

        [//]: # "https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png"

        [//]: # "https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png"

        [//]: # "https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png"

        [//]: # "https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png"

        [//]: # "https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png"

        [//]: # "https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png"

        [//]: # "https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57 PM.png"
      CSD U3 collisions egg_2018: |-
        # Applesauce

        When the apple hits the blender, the blender should turn on.

        # Do This

        Use the `isTouching` block to make the blender shake back and forth when the apple sprite touches the blender sprite.  The shaking motion is already coded using the random block, so you just have to check when the two sprites are touching.

        _Challenge: Can you make the apple disappear when it touches the blender?_

        [//]: # "https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png"

        [//]: # "https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png"

        [//]: # "https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png"

        [//]: # "https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png"

        [//]: # "https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png"

        [//]: # "https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png"
      CSD U3 collisions egg_2019: |-
        # Applesauce

        When the apple hits the blender, the blender should turn on.

        # Do This

        Use the `isTouching` block to make the blender shake back and forth when the apple sprite touches the blender sprite.  The shaking motion is already coded using the random block, so you just have to check when the two sprites are touching.

        _Challenge: Can you make the apple disappear when it touches the blender?_

        [//]: # "https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png"

        [//]: # "https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png"

        [//]: # "https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png"

        [//]: # "https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png"

        [//]: # "https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png"

        [//]: # "https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png"
      CSD U3 collisions flyman add obstacles: |-
        # Flyer Game - Add Obstacle

        This is the flyer game you built in the last lesson. For the next several levels, you'll be adding an obstacle sprite to the game, using some of the sprite interactions you just learned. At the end you'll have a chance to keep adding on ideas of your own.

        <img src="https://images.code.org/47f8c130ca668080d48520ef9aced093-image-1477069764142.08.58 AM.png" style="float:right;width:200px">

        # Do This

        Add an obstacle sprite to the game. You can use whatever image you like from the animation tab but the example shown here uses a sun. Right now you just need to add the sprite to your game and give it an animation.

        -   Add a new sprite to your game called "obstacle".
        -   In the animation tab create a new animation for your obstacle. In the example a sun image was chosen.
        -   Use the `sprite.setAnimation()` block to give your sprite the image you chose.
        -   Run the code and make sure the sprite appears where you want it on the screen. You may need to set its X, Y, and scale properties to get it to look the way you want.
      CSD U3 collisions flyman add obstacles_2018: |-
        # Flyer Game - Add Obstacle

        This is the flyer game you built in the last lesson. For the next several levels, you'll be adding an obstacle sprite to the game, using some of the sprite interactions you just learned. At the end you'll have a chance to keep adding on ideas of your own.

        <img src="https://images.code.org/47f8c130ca668080d48520ef9aced093-image-1477069764142.08.58 AM.png" style="float:right;width:200px">

        # Do This

        Add an obstacle sprite to the game. You can use whatever image you like from the animation tab but the example shown here uses a sun. Right now you just need to add the sprite to your game and give it an animation.

        -   Add a new sprite to your game called "obstacle".
        -   In the animation tab create a new animation for your obstacle. In the example a sun image was chosen.
        -   Use the `sprite.setAnimation()` block to give your sprite the image you chose.
        -   Run the code and make sure the sprite appears where you want it on the screen. You may need to set its X, Y, and scale properties to get it to look the way you want.
      CSD U3 collisions flyman add obstacles_2019: |-
        # Flyer Game - Add Obstacle

        This is the flyer game you built in the last lesson. For the next several levels, you'll be adding an obstacle sprite to the game, using some of the sprite interactions you just learned. At the end you'll have a chance to keep adding on ideas of your own.

        <img src="https://images.code.org/47f8c130ca668080d48520ef9aced093-image-1477069764142.08.58 AM.png" style="float:right;width:200px">

        # Do This

        Add an obstacle sprite to the game. You can use whatever image you like from the animation tab but the example shown here uses a sun. Right now you just need to add the sprite to your game and give it an animation.

        -   Add a new sprite to your game called "obstacle".
        -   In the animation tab create a new animation for your obstacle. In the example a sun image was chosen.
        -   Use the `sprite.setAnimation()` block to give your sprite the image you chose.
        -   Run the code and make sure the sprite appears where you want it on the screen. You may need to set its X, Y, and scale properties to get it to look the way you want.
      CSD U3 collisions flyman bounceOff: |-
        # Flyer Game - Interacting with the Obstacle

        You don't want your player to be able to move through the obstacle, so you'll need to use one of the sprite interactions.

        # Do This

        -   Add code to your game that prevents your player from moving through the obstacle.
        -   If you use one of the bounce interactions, decide whether you want to reset the bounciness of your character.
        -   Discuss with a neighbor: Which sprite interaction did you decide to use? Is there more than one sprite interaction that works the way you'd expect?
      CSD U3 collisions flyman bounceOff_2018: |-
        # Flyer Game - Interacting with the Obstacle

        You don't want your player to be able to move through the obstacle, so you'll need to use one of the sprite interactions.

        # Do This

        -   Add code to your game that prevents your player from moving through the obstacle.
        -   If you use one of the bounce interactions, decide whether you want to reset the bounciness of your character.
        -   Discuss with a neighbor: Which sprite interaction did you decide to use? Is there more than one sprite interaction that works the way you'd expect?
      CSD U3 collisions flyman bounceOff_2019: |-
        # Flyer Game - Interacting with the Obstacle

        You don't want your player to be able to move through the obstacle, so you'll need to use one of the sprite interactions.

        # Do This

        -   Add code to your game that prevents your player from moving through the obstacle.
        -   If you use one of the bounce interactions, decide whether you want to reset the bounciness of your character.
        -   Discuss with a neighbor: Which sprite interaction did you decide to use? Is there more than one sprite interaction that works the way you'd expect?
      CSD U3 collisions flyman change colliders: |-
        # Flyer Game - Change Colliders

        Right now your colliders are all rectangular. Switch them over to circles to get more interesting and realistic bounces and collisions.

        # Do This

        -   Use the `sprite.setCollider()` block to change the colliders of your sprites to circles.
        -   Set your sprites' debug properties to `true` to make sure your game is working the way you want.
        -   Play your game to make sure it's working the way you want.
      CSD U3 collisions flyman change colliders_2018: |-
        # Flyer Game - Change Colliders

        Right now your colliders are all rectangular. Switch them over to circles to get more interesting and realistic bounces and collisions.

        # Do This

        -   Use the `sprite.setCollider()` block to change the colliders of your sprites to circles.
        -   Set your sprites' debug properties to `true` to make sure your game is working the way you want.
        -   Play your game to make sure it's working the way you want.
      CSD U3 collisions flyman change colliders_2019: |-
        # Flyer Game - Change Colliders

        Right now your colliders are all rectangular. Switch them over to circles to get more interesting and realistic bounces and collisions.

        # Do This

        -   Use the `sprite.setCollider()` block to change the colliders of your sprites to circles.
        -   Set your sprites' debug properties to `true` to make sure your game is working the way you want.
        -   Play your game to make sure it's working the way you want.
      CSD U3 collisions flyman displace coin: |-
        # Flyer Game - Coin Behind the Obstacle

        Right now your coin is moving to random locations. That means sometimes it even will appear behind your obstacle, so your character can't get to it. Using sprite interactions you can fix this problem.

        # Do This

        -   Add code to your game that prevents the coin from moving behind the obstacle. Don't be afraid to try out ideas just to see how they work.
        -   Discuss with a neighbor: Which sprite interaction did you decide to use? Is there more than one sprite interaction that works the way you'd expect?
      CSD U3 collisions flyman displace coin_2018: |-
        # Flyer Game - Coin Behind the Obstacle

        Right now your coin is moving to random locations. That means sometimes it even will appear behind your obstacle, so your character can't get to it. Using sprite interactions you can fix this problem.

        # Do This

        -   Add code to your game that prevents the coin from moving behind the obstacle. Don't be afraid to try out ideas just to see how they work.
        -   Discuss with a neighbor: Which sprite interaction did you decide to use? Is there more than one sprite interaction that works the way you'd expect?
      CSD U3 collisions flyman displace coin_2019: |-
        # Flyer Game - Coin Behind the Obstacle

        Right now your coin is moving to random locations. That means sometimes it even will appear behind your obstacle, so your character can't get to it. Using sprite interactions you can fix this problem.

        # Do This

        -   Add code to your game that prevents the coin from moving behind the obstacle. Don't be afraid to try out ideas just to see how they work.
        -   Discuss with a neighbor: Which sprite interaction did you decide to use? Is there more than one sprite interaction that works the way you'd expect?
      CSD U3 collisions flyman make it your own: |-
        # Flyer Game - Make It Your Own

        Time to make this game your own by using what you've learned about sprite interactions.

        # Do This

        Add at least one more aspect to your game that uses sprite interactions. There's some ideas below or you can choose to add features of your own. Make sure you're ready to share your ideas with your classmates.

        -   Create "edge" sprites to keep your character from bouncing out.
        -   Add platforms to the game for your character to navigate around.
        -   Add another obstacle to your game.
        -   Create another idea of your own.
      CSD U3 collisions flyman make it your own_2018: |-
        # Flyer Game - Make It Your Own

        Time to make this game your own by using what you've learned about sprite interactions.

        # Do This

        Add at least one more aspect to your game that uses sprite interactions. There's some ideas below or you can choose to add features of your own. Make sure you're ready to share your ideas with your classmates.

        -   Create invisible sprites at the edge of your game to keep your character from bouncing out.
        -   Add platforms to the game for your character to navigate around.
        -   Add another obstacle to your game.
        -   Create another idea of your own.
      CSD U3 collisions flyman make it your own_2019: |-
        # Flyer Game - Make It Your Own

        Time to make this game your own by using what you've learned about sprite interactions.

        # Do This

        Add at least one more aspect to your game that uses sprite interactions. There's some ideas below or you can choose to add features of your own. Make sure you're ready to share your ideas with your classmates.

        -   Create invisible sprites at the edge of your game to keep your character from bouncing out.
        -   Add platforms to the game for your character to navigate around.
        -   Add another obstacle to your game.
        -   Create another idea of your own.
      CSD U3 collisions horse: |-
        # Rainbow Horse

        When the rainbow touches the horse, it should turn into a unicorn.

        # Do This

        Use the `if`, `isTouching`, and `setAnimation` blocks to change the horse sprite's image when the rainbow touches it.  The unicorn image is already loaded in the animations tab for you.

        [//]: # "https://images.code.org/4d1d0e36e574117140ecc377d406c1de-image-1470256869920.png"

        [//]: # "https://images.code.org/b913bc2ee2231b908892472240a70105-image-1470256869922.png"

        [//]: # "https://images.code.org/558b42903bf40cc26410e651a85de922-image-1470256869923.png"

        [//]: # "https://images.code.org/1d41d2e5b3b55037911b8f73bdc2ff48-image-1470257277875.png"
      CSD U3 collisions horse_2018: |-
        # Rainbow Horse

        When the rainbow touches the horse, it should turn into a unicorn.

        # Do This

        Use the `if`, `isTouching`, and `setAnimation` blocks to change the horse sprite's image when the rainbow touches it.  The unicorn image is already loaded in the animations tab for you.

        [//]: # "https://images.code.org/4d1d0e36e574117140ecc377d406c1de-image-1470256869920.png"

        [//]: # "https://images.code.org/b913bc2ee2231b908892472240a70105-image-1470256869922.png"

        [//]: # "https://images.code.org/558b42903bf40cc26410e651a85de922-image-1470256869923.png"

        [//]: # "https://images.code.org/1d41d2e5b3b55037911b8f73bdc2ff48-image-1470257277875.png"
      CSD U3 collisions horse_2019: |-
        # Rainbow Horse

        When the rainbow touches the horse, it should turn into a unicorn.

        # Do This

        Use the `if`, `isTouching`, and `setAnimation` blocks to change the horse sprite's image when the rainbow touches it.  The unicorn image is already loaded in the animations tab for you.

        [//]: # "https://images.code.org/4d1d0e36e574117140ecc377d406c1de-image-1470256869920.png"

        [//]: # "https://images.code.org/b913bc2ee2231b908892472240a70105-image-1470256869922.png"

        [//]: # "https://images.code.org/558b42903bf40cc26410e651a85de922-image-1470256869923.png"

        [//]: # "https://images.code.org/1d41d2e5b3b55037911b8f73bdc2ff48-image-1470257277875.png"
      CSD U3 collisions isTouching intro: |-
        # isTouching()

        Writing out the math each time you want to check whether two sprites are touching can take a while, so a programmer created the `isTouching` block, which can check whether one sprite is touching another sprite (the _target_).  The computer is still doing the same math as in the previous program, but you don't have to worry about it because another programmer already did that work.

        # Do This

        Inside the draw loop, drag the `isTouching` block into the `if` block.     ( [Show me where](#triggercallout=code_triggered) )

        _Hint: Don't forget to change the "sprite" to "balloon" and the "target" to "tack"._

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"
      CSD U3 collisions isTouching intro_2018: |-
        # isTouching()

        Writing out the math each time you want to check whether two sprites are touching can take a while, so a programmer created the `isTouching` block, which can check whether one sprite is touching another sprite (the _target_).  The computer is still doing the same math as in the previous program, but you don't have to worry about it because another programmer already did that work.

        # Do This

        Inside the draw loop, drag the `isTouching` block into the `if` block.     ( [Show me where](#triggercallout=code_triggered) )

        _Hint: Don't forget to change the "sprite" to "balloon" and the "target" to "tack"._

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"
      CSD U3 collisions isTouching intro_2019: |-
        # isTouching()

        Writing out the math each time you want to check whether two sprites are touching can take a while, so a programmer created the `isTouching` block, which can check whether one sprite is touching another sprite (the _target_).  The computer is still doing the same math as in the previous program, but you don't have to worry about it because another programmer already did that work.

        # Do This

        Inside the draw loop, drag the `isTouching` block into the `if` block.     ( [Show me where](#triggercallout=code_triggered) )

        _Hint: Don't forget to change the "sprite" to "balloon" and the "target" to "tack"._

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"
      CSD U3 collisions predict set velocity code: |-
        # Sprite Interactions

        So far you've been able to create simple sprite interactions by using the `sprite.isTouching()` block. For example, you've reset a coin to a different location on the screen when a character touches it. Now it's time to start making sprites have more complex interactions.

        # Do This

        -   Run the program and observe the interaction between the two sprites.
        -   Discuss with a neighbor: Using only the commands you already know how could you create this kind of interaction? There are many ways to do it, but here are some blocks to consider:
            -   `sprite.isTouching()`
            -   `sprite.velocityX`
            -   `sprite.velocityY`
            -   `sprite.x`
            -   `sprite.y`

        Be ready to share your ideas with your classmates.
      CSD U3 collisions predict set velocity code_2018: |-
        # Sprite Interactions

        So far you've been able to create simple sprite interactions by using the `sprite.isTouching()` block. For example, you've reset a coin to a different location on the screen when a character touches it. Now it's time to start making sprites have more complex interactions.

        # Do This

        -   Run the program and observe the interaction between the two sprites.
        -   Discuss with a neighbor: Using only the commands you already know how could you create this kind of interaction? There are many ways to do it, but here are some blocks to consider:
            -   `sprite.isTouching()`
            -   `sprite.velocityX`
            -   `sprite.velocityY`
            -   `sprite.x`
            -   `sprite.y`

        Be ready to share your ideas with your classmates.
      CSD U3 collisions predict set velocity code_2019: |-
        # Sprite Interactions

        So far you've been able to create simple sprite interactions by using the `sprite.isTouching()` block. For example, you've reset a coin to a different location on the screen when a character touches it. Now it's time to start making sprites have more complex interactions.

        # Do This

        -   Run the program and observe the interaction between the two sprites.
        -   Discuss with a neighbor: Using only the commands you already know how could you create this kind of interaction? There are many ways to do it, but here are some blocks to consider:
            -   `sprite.isTouching()`
            -   `sprite.velocityX`
            -   `sprite.velocityY`
            -   `sprite.x`
            -   `sprite.y`

        Be ready to share your ideas with your classmates.
      CSD U3 collisions scoreboard: |-
        # Scoreboard

        You can also use `isTouching` to decide whether you should increase the score.  In this game, the score is stored inside the 'score' variable.  It is displayed on the screen using the `text` block.  ( [Show me where](#triggercallout=code_triggered) )

        # Do This

        -   Use the `if` and `isTouching` blocks to determine whether the bunny has caught the carrot. ( [Show me where](#triggercallout=code_triggered2) )
        -   If it has, do the following three things:
            -   Use the counter pattern on the score variable to increase the score.
            -   Reset the carrot's x position off the right-hand side of the screen.
            -   Set the carrot's y position to a random number between 10 and 390.
      CSD U3 collisions scoreboard_2018: |-
        # Scoreboard

        You can also use `isTouching` to decide whether you should increase the score.  In this game, the score is stored inside the 'score' variable.  It is displayed on the screen using the `text` block.  ( [Show me where](#triggercallout=code_triggered) )

        # Do This

        -   Use the `if` and `isTouching` blocks to determine whether the bunny has caught the carrot. ( [Show me where](#triggercallout=code_triggered2) )
        -   If it has, do the following three things:
            -   Use the counter pattern on the score variable to increase the score.
            -   Reset the carrot's x position off the right-hand side of the screen.
            -   Set the carrot's y position to a random number between 10 and 390.
      CSD U3 collisions scoreboard_2019: |-
        # Scoreboard

        You can also use `isTouching` to decide whether you should increase the score.  In this game, the score is stored inside the 'score' variable.  It is displayed on the screen using the `text` block.  ( [Show me where](#triggercallout=code_triggered) )

        # Do This

        -   Use the `if` and `isTouching` blocks to determine whether the bunny has caught the carrot. ( [Show me where](#triggercallout=code_triggered2) )
        -   If it has, do the following three things:
            -   Use the counter pattern on the score variable to increase the score.
            -   Reset the carrot's x position off the right-hand side of the screen.
            -   Set the carrot's y position to a random number between 10 and 390.
      CSD U3 collisions setCollider: |-
        # setCollider

        Sprites interact based on the size and shape of their collider, not the images that are assigned to them. You can only see the collider when debug mode is turned on.  You can change the shape of the collider using the `sprite.setCollider()` block, which lets you pick between a "rectangle" or a "circle".  By default all colliders are "rectangle".

        # Do This

        -   Find the `sprite.setCollider()` block for the gold coin, and change it from "rectangle" to "circle".
        -   Add a new `sprite.setCollider()` block for the silver coin, and choose "circle" for the shape of the collider.
        -   Run the code again to see how the sprites bounce.

        [//]: # "https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png"

        [//]: # "https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png"
      CSD U3 collisions setCollider_2018: |-
        # setCollider

        Sprites interact based on the size and shape of their collider, not the images that are assigned to them. You can only see the collider when debug mode is turned on.  You can change the shape of the collider using the `sprite.setCollider()` block, which lets you pick between a "rectangle" or a "circle".  By default all colliders are "rectangle".

        # Do This

        -   Find the `sprite.setCollider()` block for the gold coin, and change it from "rectangle" to "circle".
        -   Add a new `sprite.setCollider()` block for the silver coin, and choose "circle" for the shape of the collider.
        -   Run the code again to see how the sprites bounce.

        [//]: # "https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png"

        [//]: # "https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png"
      CSD U3 collisions setCollider_2019: |-
        # setCollider

        Sprites interact based on the size and shape of their collider, not the images that are assigned to them. You can only see the collider when debug mode is turned on.  You can change the shape of the collider using the `sprite.setCollider()` block, which lets you pick between a "rectangle" or a "circle".  By default all colliders are "rectangle".

        # Do This

        -   Find the `sprite.setCollider()` block for the gold coin, and change it from "rectangle" to "circle".
        -   Add a new `sprite.setCollider()` block for the silver coin, and choose "circle" for the shape of the collider.
        -   Run the code again to see how the sprites bounce.

        [//]: # "https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png"

        [//]: # "https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png"
      CSD U3 collisions sidescroll2: |-
        # Improve Your Game

        Now that you know how to use `isTouching` and `playSound`, you can make some fun things happen when your sprites run into each other.

        _Note: The `playSound` block now has an extra parameter called "loop" that can be set to true or false.  If this parameter is true, the sound will continue to play in a loop._

        # Do This

        -   Add at least two effects when your sprites collide.

        _Challenge: Add a scoreboard to the top of your screen._
      CSD U3 collisions sidescroll2_2018: |-
        # Improve Your Game

        Now that you know how to use `isTouching` and `playSound`, you can make some fun things happen when your sprites run into each other.

        _Note: The `playSound` block now has an extra parameter called "loop" that can be set to true or false.  If this parameter is true, the sound will continue to play in a loop._

        # Do This

        -   Add at least two effects when your sprites collide.

        _Challenge: Add a scoreboard to the top of your screen._
      CSD U3 collisions sidescroll2_2019: |-
        # Improve Your Game

        Now that you know how to use `isTouching` and `playSound`, you can make some fun things happen when your sprites run into each other.

        _Note: The `playSound` block now has an extra parameter called "loop" that can be set to true or false.  If this parameter is true, the sound will continue to play in a loop._

        # Do This

        -   Add at least two effects when your sprites collide.

        _Challenge: Add a scoreboard to the top of your screen._
      CSD U3 collisions try blocks: |-
        # More Collision Blocks

        Three new types of sprite interactions have been added to the toolbox, `sprite.collide()`, `sprite.bounce()`, and `sprite.bounceOff()`. How do you think they'll affect the sprites?

        # Do This

        -   Switch out the displace block for the `sprite.collide()`, `sprite.bounce()`, and `sprite.bounceOff()` blocks. ( [Show me where](#triggercallout=code_triggered) )
            -   _Hint: If you're having trouble doing this with blocks then switch over to text mode._
        -   Discuss with a neighbor: What is the difference between the four different sprite interactions? What do you think the purpose of each block is?

        [//]: # "https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png"

        [//]: # "https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png"
      CSD U3 collisions try blocks_2018: |-
        # More Collision Blocks

        Three new types of sprite interactions have been added to the toolbox, `sprite.collide()`, `sprite.bounce()`, and `sprite.bounceOff()`. How do you think they'll affect the sprites?

        # Do This

        -   Switch out the displace block for the `sprite.collide()`, `sprite.bounce()`, and `sprite.bounceOff()` blocks. ( [Show me where](#triggercallout=code_triggered) )
            -   _Hint: If you're having trouble doing this with blocks then switch over to text mode._
        -   Discuss with a neighbor: What is the difference between the four different sprite interactions? What do you think the purpose of each block is?

        [//]: # "https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png"

        [//]: # "https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png"
      CSD U3 collisions try blocks_2019: |-
        # More Collision Blocks

        Three new types of sprite interactions have been added to the toolbox, `sprite.collide()`, `sprite.bounce()`, and `sprite.bounceOff()`. How do you think they'll affect the sprites?

        # Do This

        -   Switch out the displace block for the `sprite.collide()`, `sprite.bounce()`, and `sprite.bounceOff()` blocks. ( [Show me where](#triggercallout=code_triggered) )
            -   _Hint: If you're having trouble doing this with blocks then switch over to text mode._
        -   Discuss with a neighbor: What is the difference between the four different sprite interactions? What do you think the purpose of each block is?

        [//]: # "https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png"

        [//]: # "https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png"
      CSD U3 collisions turtle: |-
        # Debugging Sprite Interactions

        Sprite interactions just run some code when they're called. The interactions are not "remembered" by the game. If you want one sprite to bounce or collide with another then it needs to be a part of the draw loop. If you forget then this can lead to unexpected behavior.

        # Do This

        The turtle can be moved with the arrow keys. It's not supposed to be able to walk through the tree, but something is wrong in the code. Can you find and correct the bug in the code?

        -   Run the code and try to make the turtle collide with the tree.
        -   Look through the code and discuss with your partner what the problem is.
        -   Correct the code, then run it again to make sure it works.
      CSD U3 collisions turtle_2018: |-
        # Debugging Sprite Interactions

        Sprite interactions just run some code when they're called. The interactions are not "remembered" by the game. If you want one sprite to bounce or collide with another then it needs to be a part of the draw loop. If you forget then this can lead to unexpected behavior.

        # Do This

        The turtle can be moved with the arrow keys. It's not supposed to be able to walk through the tree, but something is wrong in the code. Can you find and correct the bug in the code?

        -   Run the code and try to make the turtle collide with the tree.
        -   Look through the code and discuss with your partner what the problem is.
        -   Correct the code, then run it again to make sure it works.
      CSD U3 collisions turtle_2019: |-
        # Debugging Sprite Interactions

        Sprite interactions just run some code when they're called. The interactions are not "remembered" by the game. If you want one sprite to bounce or collide with another then it needs to be a part of the draw loop. If you forget then this can lead to unexpected behavior.

        # Do This

        The turtle can be moved with the arrow keys. It's not supposed to be able to walk through the tree, but something is wrong in the code. Can you find and correct the bug in the code?

        -   Run the code and try to make the turtle collide with the tree.
        -   Look through the code and discuss with your partner what the problem is.
        -   Correct the code, then run it again to make sure it works.
      CSD U3 collisions types: |-
        # Collision Types

        There are four types of collisions that we use in Game Lab.  These blocks will cause a certain type of interaction between the _sprite_ and its _target_.

        ## displace

        The `displace` block causes the sprite to push the target as long as they are touching each other. The sprite keeps moving normally.

        ## collide

        The `collide` block makes the sprite stop when it runs into the target.  If the target is moving, it will push the sprite with it.  The target keeps moving normally.

        ## bounce

        The `bounce` block makes the sprite and the target bounce when they touch each other.  Both the sprite and the target change how they are moving.

        ## bounceOff

        The `bounceOff` block makes the sprite bounce off the target.  The target keeps moving normally.

        # Do This

        Choose the best block to model the basketball bouncing off the floor. ( [Show me where](#triggercallout=code_triggered) )

        [//]: # "https://images.code.org/24355fc6377cfafdce3ce2b3568a33c3-image-1470343728940.png"

        [//]: # "https://images.code.org/87e4306e0371c7975b8fb2583657ee4a-image-1470343728942.png"
      CSD U3 collisions types_2018: |-
        # Collision Types

        There are four types of collisions that we use in Game Lab.  These blocks will cause a certain type of interaction between the _sprite_ and its _target_.

        ## displace

        The `displace` block causes the sprite to push the target as long as they are touching each other. The sprite keeps moving normally.

        ## collide

        The `collide` block makes the sprite stop when it runs into the target.  If the target is moving, it will push the sprite with it.  The target keeps moving normally.

        ## bounce

        The `bounce` block makes the sprite and the target bounce when they touch each other.  Both the sprite and the target change how they are moving.

        ## bounceOff

        The `bounceOff` block makes the sprite bounce off the target.  The target keeps moving normally.

        # Do This

        Choose the best block to model the basketball bouncing off the floor. ( [Show me where](#triggercallout=code_triggered) )

        [//]: # "https://images.code.org/24355fc6377cfafdce3ce2b3568a33c3-image-1470343728940.png"

        [//]: # "https://images.code.org/87e4306e0371c7975b8fb2583657ee4a-image-1470343728942.png"
      CSD U3 collisions types_2019: |-
        # Kollisionsarten

        Es gibt vier Arten von Kollisionen, die wir im Game Lab verwenden: `displace`, `collide`, `bounce` und `bounceOff`.  Diese Bausteine verursachen eine bestimmte Art von Interaktion zwischen dem _Sprite_ und seinem _Ziel_.

        # Mache folgendes

        Wählen den besten Baustein, um den Basketball vom Boden abprallen zu lassen. ( [Zeige mir, wo](#triggercallout=code_triggered) )
        \*Hinweis: Du kannst die verschiedenen Bausteine ausprobieren oder mehr darüber auf der Registerkarte "Hilfe und Tipps" lesen.
        [//]\: # (<https://images.code.org/24355fc6377cfafdce3ce2b3568a33c3-image-1470343728940.png>)

        [//]: # "https://images.code.org/87e4306e0371c7975b8fb2583657ee4a-image-1470343728942.png"
      CSD U3 dancing alien: "# Sprites in the Draw Loop\n\nBy changing sprite properties
        in the draw loop, you can animate your characters. \n\nThis animation has
        also been slowed down.  At the beginning of the program the `World.frameRate`
        block has been used to set the frame rate to 10. Usually the frame rate is
        30. Feel free to explore different frame rates.\n\n# Do This\n\n-   Run the
        code to see how it works.\n-   Discuss with your partner why some code is
        inside the draw loop and some code is outside.\n-   Try changing the frame
        rate and running the code again."
      CSD U3 dancing alien_2018: "# Sprites in the Draw Loop\n\nBy changing sprite
        properties in the draw loop, you can animate your characters. \n\nThis animation
        has also been slowed down.  At the beginning of the program the `World.frameRate`
        block has been used to set the frame rate to 10. Usually the frame rate is
        30. Feel free to explore different frame rates.\n\n# Do This\n\n-   Run the
        code to see how it works.\n-   Discuss with your partner why some code is
        inside the draw loop and some code is outside.\n-   Try changing the frame
        rate and running the code again."
      CSD U3 dancing alien_2019: "# Sprites in the Draw Loop\n\nBy changing sprite
        properties in the draw loop, you can animate your characters. \n\nThis animation
        has also been slowed down.  At the beginning of the program the `World.frameRate`
        block has been used to set the frame rate to 10. Usually the frame rate is
        30. Feel free to explore different frame rates.\n\n# Do This\n\n-   Run the
        code to see how it works.\n-   Discuss with your partner why some code is
        inside the draw loop and some code is outside.\n-   Try changing the frame
        rate and running the code again."
      CSD U3 debug: |-
        <img src="https://images.code.org/249f124a9bbd3da7d6327a7be8ab73c9-image-1493138569984.41.50 AM.png" style="float:right;width:150px;">

        # Debugging

        Often, code doesn't work the first time it runs, and programmers have to debug it.  The code below is supposed to make the picture on the right, but the programmer got confused about which order the code should be in, as well as how to put a square in the right place on the screen.

        # Do This

        -   Look at the code in the workspace.
        -   Change the code so it makes the picture on the right.
            -   (You'll need to move one line of code AND change the coordinates of the square.)
      CSD U3 debug_2018: |-
        <img src="https://images.code.org/249f124a9bbd3da7d6327a7be8ab73c9-image-1493138569984.41.50 AM.png" style="float:right;width:150px;">

        # Debugging

        Often, code doesn't work the first time it runs, and programmers have to debug it.  The code below is supposed to make the picture on the right, but the programmer got confused about which order the code should be in, as well as how to put a square in the right place on the screen.

        # Do This

        -   Look at the code in the workspace.
        -   Change the code so it makes the picture on the right.
            -   (You'll need to move one line of code AND change the coordinates of the square.)
      CSD U3 debug_2019: |-
        <img src="https://images.code.org/249f124a9bbd3da7d6327a7be8ab73c9-image-1493138569984.41.50 AM.png" style="float:right;width:150px;">

        # Debugging

        Often, code doesn't work the first time it runs, and programmers have to debug it.  The code below is supposed to make the picture on the right, but the programmer got confused about which order the code should be in, as well as how to put a square in the right place on the screen.

        # Do This

        -   Look at the code in the workspace.
        -   Change the code so it makes the picture on the right.
            -   (You'll need to move one line of code AND change the coordinates of the square.)
      CSD U3 ellipse: |-
        <img src="https://images.code.org/2ef29be10261f6a2c5df8f214d524f4d-image-1493060602794.02.44 PM.png" style="float:right;width:150px;">

        # ellipse

        Du kannst `ellipse` verwenden, um einen Kreis zu zeichnen.

        # Mache Folgendes

        -   Schau dir den Code an, aus dem die Ellipse besteht.
        -   Füge eine neue Ellipse mit einer anderen Farbe hinzu.
      CSD U3 ellipse_2018: |-
        <img src="https://images.code.org/2ef29be10261f6a2c5df8f214d524f4d-image-1493060602794.02.44 PM.png" style="float:right;width:150px;">

        # ellipse

        Du kannst `ellipse` verwenden, um einen Kreis zu zeichnen.

        # Mache Folgendes

        -   Schau dir den Code an, aus dem die Ellipse besteht.
        -   Füge eine neue Ellipse mit einer anderen Farbe hinzu.
      CSD U3 ellipse_2019: |-
        <img src="https://images.code.org/2ef29be10261f6a2c5df8f214d524f4d-image-1493060602794.02.44 PM.png" style="float:right;width:150px;">

        # ellipse

        Du kannst `ellipse` verwenden, um einen Kreis zu zeichnen.

        # Mache Folgendes

        -   Schau dir den Code an, aus dem die Ellipse besteht.
        -   Füge eine neue Ellipse mit einer anderen Farbe hinzu.
      CSD U3 fill: |-
        <img src="https://images.code.org/c91390d63e52a3349c48f7b6b0057258-image-1493060802897.05.19 PM.png" style="float:right;width:200px;">

        # fill(color)

        You can also make your rectangles different colors with `fill`. It will set the color for every shape that comes after it in the code.

        # Do This

        -   Look at the code that sets the color. ( [Show me where](#triggercallout=fill) )
        -   Change the color from blue to yellow.
        -   Add a new square by dragging a `rect` block into the code area below the fill command ( [Show me where](#triggercallout=rect_block) ).  The new square can go any location on the screen you like.
      CSD U3 fill_2018: |-
        <img src="https://images.code.org/c91390d63e52a3349c48f7b6b0057258-image-1493060802897.05.19 PM.png" style="float:right;width:200px;">

        # fill(color)

        You can also make your rectangles different colors with `fill`. It will set the color for every shape that comes after it in the code.

        # Do This

        -   Look at the code that sets the color. ( [Show me where](#triggercallout=fill) )
        -   Change the color from blue to yellow.
        -   Add a new square by dragging a `rect` block into the code area below the fill command ( [Show me where](#triggercallout=rect_block) ).  The new square can go any location on the screen you like.
      CSD U3 fill_2019: |-
        <img src="https://images.code.org/c91390d63e52a3349c48f7b6b0057258-image-1493060802897.05.19 PM.png" style="float:right;width:200px;">

        # fill(color)

        You can also make your rectangles different colors with `fill`. It will set the color for every shape that comes after it in the code.

        # Do This

        -   Look at the code that sets the color. ( [Show me where](#triggercallout=fill) )
        -   Change the color from blue to yellow.
        -   Add a new square by dragging a `rect` block into the code area below the fill command ( [Show me where](#triggercallout=rect_block) ).  The new square can go any location on the screen you like.
      CSD U3 finishing touches: |-
        # Finishing Touches

        Now that you have the basis for your game, it's time to add some finishing touches.

        To make your game even better, try making at least two improvements to it. You can use the list below to help you, or you can come up with your own improvements that you'd like to make.

        -   Find a way to keep your player from going off the edges of the screen.
        -   Add a different item for your player to collect or avoid that are worth different point values.
        -   Make a variable to keep track of how many lives your player has, and then end the game when the lives run out.
        -   Add sprites that move in the background of your game.
        -   Make another background to switch to when the score gets even higher, or when the game ends.
        -   Give your game a way to end. Possible events to end your game could be the score reaching a certain value, or the amount of lives to keep the game running runs out.
        -   If your game has platforms, try making the objects in your game interact with these platforms in some way.
      CSD U3 finishing touches_2018: |-
        # Finishing Touches

        Now that you have the basis for your game, it's time to add some finishing touches.

        To make your game even better, try making at least two improvements to it. You can use the list below to help you, or you can come up with your own improvements that you'd like to make.

        -   Find a way to keep your player from going off the edges of the screen.
        -   Add a different item for your player to collect or avoid that are worth different point values.
        -   Make a variable to keep track of how many lives your player has, and then end the game when the lives run out.
        -   Add sprites that move in the background of your game.
        -   Make another background to switch to when the score gets even higher, or when the game ends.
        -   Give your game a way to end. Possible events to end your game could be the score reaching a certain value, or the amount of lives to keep the game running runs out.
        -   If your game has platforms, try making the objects in your game interact with these platforms in some way.
      CSD U3 finishing touches_2019: |-
        # Finishing Touches

        Now that you have the basis for your game, it's time to add some finishing touches.

        To make your game even better, try making at least two improvements to it. You can use the list below to help you, or you can come up with your own improvements that you'd like to make.

        -   Find a way to keep your player from going off the edges of the screen.
        -   Add a different item for your player to collect or avoid that are worth different point values.
        -   Make a variable to keep track of how many lives your player has, and then end the game when the lives run out.
        -   Add sprites that move in the background of your game.
        -   Make another background to switch to when the score gets even higher, or when the game ends.
        -   Give your game a way to end. Possible events to end your game could be the score reaching a certain value, or the amount of lives to keep the game running runs out.
        -   If your game has platforms, try making the objects in your game interact with these platforms in some way.
      CSD U3 function video: |-
        ## Zu berücksichtigende Fragen

        -   Denke an eine Zeit, in der eine Funktion Dir geholfen hätte, ein Programm zu schreiben.
            -   Welcher Code würde in der **Definition** der Funktion verwendet werden?
            -   Wann würdest du die Funktion **aufrufen**?
            -   Wie würdest du es nennen?
      CSD U3 game animations: |-
        # Create your Animations

        Next you will create your animations in the animation tab.  Don't forget to make multiple animations if you want your sprite to change appearance according to how it's moving.
      CSD U3 game animations_2018: |-
        # Create your Animations

        Next you will create your animations in the animation tab.  Don't forget to make multiple animations if you want your sprite to change appearance according to how it's moving.
      CSD U3 game animations_2019: |-
        # Create your Animations

        Next you will create your animations in the animation tab.  Don't forget to make multiple animations if you want your sprite to change appearance according to how it's moving.
      CSD U3 game backgrounds: |-
        # Create your Backgrounds

        Next, you'll create all of the background functions that you need for your game.  Some games only have one background, and others have more than one that's chosen according to user score or another aspect of gameplay.  You'll need to create a function for each separate background in your game.  You'll write the code to choose the correct background in the next level.

        -   [Show me the block to create a new function](#triggercallout=callout1)
        -   [Show me the area in the code to put my function](#triggercallout=callout2)

        After you create your functions, test them by calling them inside the draw loop, one background per test.

        -   [Show me the block to call my function](#triggercallout=callout3)
      CSD U3 game backgrounds_2018: |-
        # Create your Backgrounds

        Next, you'll create all of the background functions that you need for your game.  Some games only have one background, and others have more than one that's chosen according to user score or another aspect of gameplay.  You'll need to create a function for each separate background in your game.  You'll write the code to choose the correct background in the next level.

        -   [Show me the block to create a new function](#triggercallout=callout1)
        -   [Show me the area in the code to put my function](#triggercallout=callout2)

        After you create your functions, test them by calling them inside the draw loop, one background per test.

        -   [Show me the block to call my function](#triggercallout=callout3)
      CSD U3 game backgrounds_2019: |-
        # Create your Backgrounds

        Next, you'll create all of the background functions that you need for your game.  Some games only have one background, and others have more than one that's chosen according to user score or another aspect of gameplay.  You'll need to create a function for each separate background in your game.  You'll write the code to choose the correct background in the next level.

        -   [Show me the block to create a new function](#triggercallout=callout1)
        -   [Show me the area in the code to put my function](#triggercallout=callout2)

        After you create your functions, test them by calling them inside the draw loop, one background per test.

        -   [Show me the block to call my function](#triggercallout=callout3)
      CSD U3 game choose background: |-
        # Choose your Backgrounds

        Now that you have the backgrounds that you need, you'll write the code to choose the correct background.  You've seen this done in [Lesson 19 Level 11](/s/csd3-2017/stage/19/puzzle/11).

        After you've written the code, test it by changing the starting value of your variables and making sure the correct background shows up.
      CSD U3 game choose background_2018: |-
        # Choose your Backgrounds

        Now that you have the backgrounds that you need, you'll write the code to choose the correct background.  You've seen this done in [Lesson 19 Level 11](../../19/puzzle/11).

        After you've written the code, test it by changing the starting value of your variables and making sure the correct background shows up.
      CSD U3 game choose background_2019: |-
        # Choose your Backgrounds

        Now that you have the backgrounds that you need, you'll write the code to choose the correct background.  You've seen this done in [Lesson 19 Level 11](../../19/puzzle/11).

        After you've written the code, test it by changing the starting value of your variables and making sure the correct background shows up.
      CSD U3 game create sprites: |-
        # Create your Sprites

        Next you will create your sprites and give them starting properties in the "Create Sprites" area of your code.  For each sprite your should:

        -   Create the sprite in the correct place on the screen
        -   Set its animation (or color and size)
        -   Set its velocity and rotation speed, if needed
        -   Set its collider and bounciness, if needed

        After you create each sprite, test it before making the next one.  If your sprite starts off screen, first place it on the screen to test it, them move it back off screen once you know that it looks right.

        If your sprites position will need to be reset later in your game, it's a good idea to make a function that sets the position of this sprite that you can use again later.
      CSD U3 game create sprites_2018: |-
        # Create your Sprites

        Next you will create your sprites and give them starting properties in the "Create Sprites" area of your code.  For each sprite your should:

        -   Create the sprite in the correct place on the screen
        -   Set its animation (or color and size)
        -   Set its velocity and rotation speed, if needed
        -   Set its collider and bounciness, if needed

        After you create each sprite, test it before making the next one.  If your sprite starts off screen, first place it on the screen to test it, them move it back off screen once you know that it looks right.

        If your sprite's position will need to be reset later in your game, it's a good idea to make a function that sets the position of this sprite that you can use again later.
      CSD U3 game create sprites_2019: |-
        # Create your Sprites

        Next you will create your sprites and give them starting properties in the "Create Sprites" area of your code.  For each sprite your should:

        -   Create the sprite in the correct place on the screen
        -   Set its animation (or color and size)
        -   Set its velocity and rotation speed, if needed
        -   Set its collider and bounciness, if needed

        After you create each sprite, test it before making the next one.  If your sprite starts off screen, first place it on the screen to test it, them move it back off screen once you know that it looks right.

        If your sprite's position will need to be reset later in your game, it's a good idea to make a function that sets the position of this sprite that you can use again later.
      CSD U3 game display boards: |-
        # Display Boards

        Now that your backgrounds are working, you can add your display boards.  Most games have a score board, but you might also want to display information about player level or lives remaining.  Look at [Lesson 16 Puzzle 9](/s/csd3-2017/stage/16/puzzle/9) for an example of how to make a scoreboard.

        For each display board:

        -   Create a function to display the information
        -   Call the function in the draw loop

        Be sure to test your boards by changing the starting value of your variables and making sure the board also changes when you run the code.
      CSD U3 game display boards_2018: |-
        # Display Boards

        Now that your backgrounds are working, you can add your display boards.  Most games have a score board, but you might also want to display information about player level or lives remaining.  Look at [Lesson 16 Puzzle 9](../../16/puzzle/9) for an example of how to make a scoreboard.

        For each display board:

        -   Create a function to display the information
        -   Call the function in the draw loop

        Be sure to test your boards by changing the starting value of your variables and making sure the board also changes when you run the code.
      CSD U3 game display boards_2019: |-
        # Display Boards

        Now that your backgrounds are working, you can add your display boards.  Most games have a score board, but you might also want to display information about player level or lives remaining.  Look at [Lesson 16 Puzzle 9](../../16/puzzle/9) for an example of how to make a scoreboard.

        For each display board:

        -   Create a function to display the information
        -   Call the function in the draw loop

        Be sure to test your boards by changing the starting value of your variables and making sure the board also changes when you run the code.
      CSD U3 game interactions: |-
        # Sprite Interactions

        The last step is to create the functions that make your sprites interact in the right ways.  You'll need a function for each type of sprite interaction. You can use the `collectItems` in [Lesson 21 Puzzle 17](/s/csd3-2017/stage/21/puzzle/17) and `displaceEnemies` in [Lesson 20 Puzzle 15](/s/csd3-2017/stage/20/puzzle/15) as examples.

        For each interaction:

        -   Create a function in the functions area of your code
        -   Call the function inside the draw loop

        After you make each function, run the code to test it before making another.
      CSD U3 game interactions_2018: |-
        # Sprite Interactions

        The last step is to create the functions that make your sprites interact in the right ways.  You'll need a function for each type of sprite interaction. You can use the `collectItems` in [Lesson 21 Puzzle 17](/s/csd3-2018/stage/21/puzzle/17) and `displaceEnemies` in [Lesson 20 Puzzle 15](/s/csd3-2018/stage/20/puzzle/15) as examples.

        For each interaction:

        -   Create a function in the functions area of your code
        -   Call the function inside the draw loop

        After you make each function, run the code to test it before making another.
      CSD U3 game interactions_2019: |-
        # Sprite Interactions

        The last step is to create the functions that make your sprites interact in the right ways.  You'll need a function for each type of sprite interaction. You can use the `collectItems` in [Lesson 21 Puzzle 17](../../21/puzzle/17) and `displaceEnemies` in [Lesson 20 Puzzle 15](../../20/puzzle/15) as examples.

        For each interaction:

        -   Create a function in the functions area of your code
        -   Call the function inside the draw loop

        After you make each function, run the code to test it before making another.
      CSD U3 game sprite movement: |-
        # Sprite Movement Functions

        Now you'll make the functions that make the sprite move in different ways as the game is played.  Some examples of functions that you've written are `loopPlatforms` in [Lesson 21 Puzzle 9](/s/csd3-2017/stage/21/puzzle/9) and `playerFall` in [Lesson 21 Puzzle 14](/s/csd3-2017/stage/21/puzzle/14).

        For each movement:

        -   Create a function that will make the sprite move in that way
        -   Call the function inside the draw loop
      CSD U3 game sprite movement_2018: |-
        # Sprite Movement Functions

        Now you'll make the functions that make the sprite move in different ways as the game is played.  Some examples of functions that you've written are `loopPlatforms` in [Lesson 21 Puzzle 9](../../../stage/21/puzzle/9) and `playerFall` in [Lesson 21 Puzzle 14](../../../stage/21/puzzle/14).

        For each movement:

        -   Create a function that will make the sprite move in that way
        -   Call the function inside the draw loop
      CSD U3 game sprite movement_2019: |-
        # Sprite Movement Functions

        Now you'll make the functions that make the sprite move in different ways as the game is played.  Some examples of functions that you've written are `loopPlatforms` in [Lesson 21 Puzzle 9](../../../stage/21/puzzle/9) and `playerFall` in [Lesson 21 Puzzle 14](../../../stage/21/puzzle/14).

        For each movement:

        -   Create a function that will make the sprite move in that way
        -   Call the function inside the draw loop
      CSD U3 game user controls: |-
        # User Controls

        Next, you'll want to make sure your user controls are working.  Create a function that makes your sprites respond to user controls as defined in your project guide.  You can use the function in in [Lesson 20 Puzzle 13](/s/csd3-2017/stage/20/puzzle/13) as an example.
      CSD U3 game user controls_2018: |-
        # User Controls

        Next, you'll want to make sure your user controls are working.  Create a function that makes your sprites respond to user controls as defined in your project guide.  You can use the function in in [Lesson 20 Puzzle 13](../../20/puzzle/13) as an example.
      CSD U3 game user controls_2019: |-
        # User Controls

        Next, you'll want to make sure your user controls are working.  Create a function that makes your sprites respond to user controls as defined in your project guide.  You can use the function in in [Lesson 20 Puzzle 13](../../20/puzzle/13) as an example.
      CSD U3 game variables: |-
        # Create your Variables

        First, you'll need to create all of your variables and put them in the variables area of your code.

        -   [Show me the block](#triggercallout=callout1)
        -   [Show me the area in the code](#triggercallout=callout2)

        Don't forget, each variable needs a label (name) and a starting value.  You can change the value of the variable later in your code.
      CSD U3 game variables_2018: |-
        # Create your Variables

        First, you'll need to create all of your variables and put them in the variables area of your code.

        -   [Show me the block](#triggercallout=callout1)
        -   [Show me the area in the code](#triggercallout=callout2)

        Don't forget, each variable needs a label (name) and a starting value.  You can change the value of the variable later in your code.
      CSD U3 game variables_2019: |-
        # Create your Variables

        First, you'll need to create all of your variables and put them in the variables area of your code.

        -   [Show me the block](#triggercallout=callout1)
        -   [Show me the area in the code](#triggercallout=callout2)

        Don't forget, each variable needs a label (name) and a starting value.  You can change the value of the variable later in your code.
      CSD U3 if else predict: Vorhersagenlevel, siehe enthaltene Level für Anweisungen.
      CSD U3 keydown conditional: |-
        # Changing Sprites

        You saw on the last level that `keyDown` returns `true` while you are holding a key down and `false` when the key is not pressed down.   The input for the `keyDown` command is the name of key you want to check in quotes. Some examples are "x", "up" and "space".

        We can use `keyDown` as an input to an `if` statement to change our animations based on key presses!

        # Do This

        -   Run the code and try pressing the up and down arrows.
        -   Look inside the `if` statement to see how the code works.
        -   Add a block inside the third `if` statement to change the animation to a different animal.

        _Hint: you can use the rabbit that's already in the Animations tab, or add a new animation._
      CSD U3 keydown conditional_2018: |-
        # Changing Sprites

        You saw on the last level that `keyDown` returns `true` while you are holding a key down and `false` when the key is not pressed down.   The input for the `keyDown` command is the name of key you want to check in quotes. Some examples are "x", "up" and "space".

        We can use `keyDown` as an input to an `if` statement to change our animations based on key presses!

        # Do This

        -   Run the code and try pressing the "p" and "h" keys.
        -   Look inside the `if` statement to see how the code works.
        -   Add a block inside the third `if` statement to change the animation to a different animal.

        _Challenge: When you use `setAnimation`, it keeps the new animation until you change it again.  Can you change the code so that the sprite will automatically go back to a giraffe when you're not holding one of the keys down?_
      CSD U3 keydown conditional_2018_2019: |-
        # Changing Sprites

        You saw on the last level that `keyDown` returns `true` while you are holding a key down and `false` when the key is not pressed down.   The input for the `keyDown` command is the name of key you want to check in quotes. Some examples are "x", "up" and "space".

        We can use `keyDown` as an input to an `if` statement to change our animations based on key presses!

        # Do This

        -   Run the code and try pressing the "p" and "h" keys.
        -   Look inside the `if` statement to see how the code works.
        -   Add a block inside the third `if` statement to change the animation to a different animal.

        _Challenge: When you use `setAnimation`, it keeps the new animation until you change it again.  Can you change the code so that the sprite will automatically go back to a giraffe when you're not holding one of the keys down?_
      CSD U3 picture: |-
        # Challenge: Draw an Image

        _Check with your teacher before starting any of the challenges._

        In the previous lesson you and your partner created several interesting images. See if you can recreate one of them using code.
      CSD U3 picture_2018: |-
        # Challenge: Draw an Image

        _Check with your teacher before starting any of the challenges._

        In the previous lesson you and your partner created several interesting images. See if you can recreate one of them using code.
      CSD U3 picture_2019: |-
        # Challenge: Draw an Image

        _Check with your teacher before starting any of the challenges._

        In the previous lesson you and your partner created several interesting images. See if you can recreate one of them using code.
      CSD U3 platform background1: |-
        # Background

        The first thing that you will create for your game is the background.   The sample game had two different backgrounds that were chosen according to the user's score.  The first background has already been created for you.  Look at the `background1` function in the code below to see how it works. ([Show me where](#triggercallout=code_triggered1))

        In order for the background function to do something, you have to call it inside the draw loop. ([Show me where](#triggercallout=code_triggered2))

        There is also an empty function named `background2`. ([Show me where](#triggercallout=code_triggered3))  You will need to fill that function with new code to make a different background, then test the code by calling the function inside the draw loop.

        # Do this

        -   Read the code for `background1`.
        -   Fill the `background2` function with new code for a second background.
        -   Test your `background2` function by calling it inside the draw loop.

        _Hint: It's much easier to copy, paste, and make small changes to your code in text mode._
      CSD U3 platform background1_2018: |-
        # Background

        The first thing that you will create for your game is the background.   The sample game had two different backgrounds that were chosen according to the user's score.  The first background has already been created for you.  Look at the `background1` function in the code below to see how it works. ([Show me where](#triggercallout=code_triggered1))

        In order for the background function to do something, you have to call it inside the draw loop. ([Show me where](#triggercallout=code_triggered2))

        There is also an empty function named `background2`. ([Show me where](#triggercallout=code_triggered3))  You will need to fill that function with new code to make a different background, then test the code by calling the function inside the draw loop.

        # Do this

        -   Read the code for `background1`.
        -   Fill the `background2` function with new code for a second background.
        -   Test your `background2` function by calling it inside the draw loop.

        _Hint: It's much easier to copy, paste, and make small changes to your code in text mode._
      CSD U3 platform background1_2019: |-
        # Background

        The first thing that you will create for your game is the background.   The sample game had two different backgrounds that were chosen according to the user's score.  The first background has already been created for you.  Look at the `background1` function in the code below to see how it works. ([Show me where](#triggercallout=code_triggered1))

        In order for the background function to do something, you have to call it inside the draw loop. ([Show me where](#triggercallout=code_triggered2))

        There is also an empty function named `background2`. ([Show me where](#triggercallout=code_triggered3))  You will need to fill that function with new code to make a different background, then test the code by calling the function inside the draw loop.

        # Do this

        -   Read the code for `background1`.
        -   Fill the `background2` function with new code for a second background.
        -   Test your `background2` function by calling it inside the draw loop.

        _Hint: It's much easier to copy, paste, and make small changes to your code in text mode._
      CSD U3 platform background2: |-
        # Choosing your Background

        Now that you have your score variable, you can use it to choose the right background for your game.  You can see an example of changing your background according to your score in [Lesson 19 Level 11](/s/csd3-2017/stage/19/puzzle/11)

        # Do This

        -   Inside the draw loop, use an `if` statement and your two background functions to draw your background according to your score level.
        -   Test your code by changing the start score to 100, then running to code to see whether the background changes.

        _Challenge: If you have a third background, you can click the plus sign at the bottom of the `if` block.  Another space will appear for your third background function, as well as a place to check the score again._
      CSD U3 platform background2_2018: |-
        # Choosing your Background

        Now that you have your score variable, you can use it to choose the right background for your game.  You can see an example of changing your background according to your score in [Lesson 19 Level 11](/s/csd3-2018/stage/19/puzzle/11)

        # Do This

        -   Inside the draw loop, use an `if` statement and your two background functions to draw your background according to your score level.
        -   Test your code by changing the start score to 100, then running to code to see whether the background changes.

        _Challenge: If you have a third background, you can click the plus sign at the bottom of the `if` block.  Another space will appear for your third background function, as well as a place to check the score again._
      CSD U3 platform background2_2019: |-
        # Die Wahl des Hintergrundes

        Jetzt, da du Deine Score-Variable hast, kannst du damit den richtigen Hintergrund für dein Spiel auswählen.  Du kannst in [Lektion 19 Level 12](../../19/puzzle/12) ein Beispiel sehen, wie du deinen Hintergrund entsprechend deiner Punktzahl ändern kannst.

        # Mache Folgendes

        -   Verwende innerhalb der Zugschleife eine `wenn`-Anweisung und Ihre beiden Hintergrundfunktionen, um Deinen Hintergrund entsprechend Deiner Punktzahl zu zeichnen.
        -   Teste Deinen Code, indem du den Startwert auf 100 änderst und dann den Code ausführst, um zu sehen, ob sich der Hintergrund ändert.

        Herausforderung: Wenn du einen dritten Hintergrund hast, kannst du auf das Pluszeichen am unteren Rand des `wenn`-Bausteins klicken.  Es erscheint ein weiteres Feld für Deine dritte Hintergrundfunktion sowie ein Platz, an dem du die Punktzahl erneut überprüfen kannst.\_
      CSD U3 platform challenge: |-
        # Improve Your Game

        Improve your game by adding in two or more of the features you saw in the last two examples.  You can use the list below to help you.

        -   Choose new animations for your player, platform, and items.
        -   Prevent your player from going off the side of the screen.
        -   Add a different type of item for the player to collect or avoid.
        -   Add a variable that keeps track of how many lives the player has, and end the game if the player runs out.
        -   Make your player's animation change direction when the player changes direction.
        -   Change the player to only jump when it is on a platform.
        -   Add another background and make it appear when the score gets even higher.
        -   Make your items interact with the platforms in some way.
      CSD U3 platform challenge_2018: |-
        # Improve Your Game

        Improve your game by adding in two or more of the features you saw in the last two examples.  You can use the list below to help you.

        -   Choose new animations for your player, platform, and items.
        -   Prevent your player from going off the side of the screen.
        -   Add a different type of item for the player to collect or avoid.
        -   Add a variable that keeps track of how many lives the player has, and end the game if the player runs out.
        -   Make your player's animation change direction when the player changes direction.
        -   Change the player to only jump when it is on a platform.
        -   Add another background and make it appear when the score gets even higher.
        -   Make your items interact with the platforms in some way.
      CSD U3 platform challenge_2019: |-
        # Improve Your Game

        Improve your game by adding in two or more of the features you saw in the last two examples.  You can use the list below to help you.

        -   Choose new animations for your player, platform, and items.
        -   Prevent your player from going off the side of the screen.
        -   Add a different type of item for the player to collect or avoid.
        -   Add a variable that keeps track of how many lives the player has, and end the game if the player runs out.
        -   Make your player's animation change direction when the player changes direction.
        -   Change the player to only jump when it is on a platform.
        -   Add another background and make it appear when the score gets even higher.
        -   Make your items interact with the platforms in some way.
      CSD U3 platform items1: |-
        # Create an Item

        <img src="https://images.code.org/2cdb64a2e23e68c8a86296240642cd13-image-1476211650103.gif" style="float:right;">

        Next, you need to add the items that fall from the top of the screen.  These move just like the platforms, but faster.  In order to make the game more interesting, the items start at a random location above the screen.  For the sample game, the item's x position is a random number between 50 and 350, and the y position is a random number between -30 and -60.

        # Do This

        -   Use the `createSprite` block to make an item sprite in the "create sprites" section of your code.
        -   Use the `randomNumber` block inside your `createSprite` block to start the item at a random x and y position.
        -   Use `setAnimation` and `velocityY` to give your sprite the correct image and make it fall from the top of the screen.
        -   Run the code to test your sprite.
      CSD U3 platform items1_2018: |-
        # Create an Item

        <img src="https://images.code.org/2cdb64a2e23e68c8a86296240642cd13-image-1476211650103.gif" style="float:right;">

        Next, you need to add the items that fall from the top of the screen.  These move just like the platforms, but faster.  In order to make the game more interesting, the items start at a random location above the screen.  For the sample game, the item's x position is a random number between 50 and 350, and the y position is a random number between -30 and -60.

        # Do This

        -   Use the `createSprite` block to make an item sprite in the "create sprites" section of your code.
        -   Use the `randomNumber` block inside your `createSprite` block to start the item at a random x and y position.
        -   Use `setAnimation` and `velocityY` to give your sprite the correct image and make it fall from the top of the screen.
        -   Run the code to test your sprite.
      CSD U3 platform items1_2019: |-
        # Create an Item

        <img src="https://images.code.org/2cdb64a2e23e68c8a86296240642cd13-image-1476211650103.gif" style="float:right;">

        Next, you need to add the items that fall from the top of the screen.  These move just like the platforms, but faster.  In order to make the game more interesting, the items start at a random location above the screen.  For the sample game, the item's x position is a random number between 50 and 350, and the y position is a random number between -30 and -60.

        # Do This

        -   Use the `createSprite` block to make an item sprite in the "create sprites" section of your code.
        -   Use the `randomNumber` block inside your `createSprite` block to start the item at a random x and y position.
        -   Use `setAnimation` and `velocityY` to give your sprite the correct image and make it fall from the top of the screen.
        -   Run the code to test your sprite.
      CSD U3 platform items2: |-
        # Loop your Item

        <img src="https://images.code.org/bf06ad06acbba65dfd48b63608a08c90-image-1476212006882.gif" style="float:right">
        Now that your item is falling, you can add code to loop it back to the top.  This is similar to what you did for the platform sprite, but the item sprite will loop back to a random x and y location when it goes to the top of the screen.

        # Do This

        -   Create a `loopItems` function that uses an `if` block to check whether the item sprite is off the bottom of the screen, then sends the item back to a random x and y position, just as it did when you first created the sprite.
        -   Call the function inside the draw loop.
        -   Run the code to test your sprite.
      CSD U3 platform items2_2018: |-
        # Loop your Item

        <img src="https://images.code.org/bf06ad06acbba65dfd48b63608a08c90-image-1476212006882.gif" style="float:right">
        Now that your item is falling, you can add code to loop it back to the top.  This is similar to what you did for the platform sprite, but the item sprite will loop back to a random x and y location when it goes to the top of the screen.

        # Do This

        -   Create a `loopItems` function that uses an `if` block to check whether the item sprite is off the bottom of the screen, then sends the item back to a random x and y position, just as it did when you first created the sprite.
        -   Call the function inside the draw loop.
        -   Run the code to test your sprite.
      CSD U3 platform items2_2019: |-
        # Loop your Item

        <img src="https://images.code.org/bf06ad06acbba65dfd48b63608a08c90-image-1476212006882.gif" style="float:right">
        Now that your item is falling, you can add code to loop it back to the top.  This is similar to what you did for the platform sprite, but the item sprite will loop back to a random x and y location when it goes to the top of the screen.

        # Do This

        -   Create a `loopItems` function that uses an `if` block to check whether the item sprite is off the bottom of the screen, then sends the item back to a random x and y position, just as it did when you first created the sprite.
        -   Call the function inside the draw loop.
        -   Run the code to test your sprite.
      CSD U3 platform items3: |-
        # Make your Second Item

        <img src="https://images.code.org/dfd53f2ea4b4380c126dde8035bcdc45-image-1476212495388.gif" style="float: right">

        Next, you'll copy and paste the code for your first item to create a second item.  Remember that this is a lot easier in **text mode**, so be sure to try it out if you haven't already.

        You'll need to copy two parts of your code: the part at the beginning where you made the item, and the part in your `loopItem` function, where you looped the item back to the top of the screen.

        # Do This

        -   Copy the code you used to create the first item sprite (`createSprite`, `setAnimation`, and `velocityY`), and paste it directly beneath the original code.
        -   Change the names of the sprite in the new lines.  For example, if you named your original sprite "star", you could name this one "star2".
        -   Inside your `loopItems` function, copy the if statement, then paste it directly underneath the original code, inside the function.
        -   Change the sprite name in the new lines of code.
        -   Run your code to test it.
      CSD U3 platform items3_2018: |-
        # Make your Second Item

        <img src="https://images.code.org/dfd53f2ea4b4380c126dde8035bcdc45-image-1476212495388.gif" style="float: right">

        Next, you'll copy and paste the code for your first item to create a second item.  Remember that this is a lot easier in **text mode**, so be sure to try it out if you haven't already.

        You'll need to copy two parts of your code: the part at the beginning where you made the item, and the part in your `loopItem` function, where you looped the item back to the top of the screen.

        # Do This

        -   Copy the code you used to create the first item sprite (`createSprite`, `setAnimation`, and `velocityY`), and paste it directly beneath the original code.
        -   Change the names of the sprite in the new lines.  For example, if you named your original sprite "star", you could name this one "star2".
        -   Inside your `loopItems` function, copy the if statement, then paste it directly underneath the original code, inside the function.
        -   Change the sprite name in the new lines of code.
        -   Run your code to test it.
      CSD U3 platform items3_2019: |-
        # Make your Second Item

        <img src="https://images.code.org/dfd53f2ea4b4380c126dde8035bcdc45-image-1476212495388.gif" style="float: right">

        Next, you'll copy and paste the code for your first item to create a second item.  Remember that this is a lot easier in **text mode**, so be sure to try it out if you haven't already.

        You'll need to copy two parts of your code: the part at the beginning where you made the item, and the part in your `loopItem` function, where you looped the item back to the top of the screen.

        # Do This

        -   Copy the code you used to create the first item sprite (`createSprite`, `setAnimation`, and `velocityY`), and paste it directly beneath the original code.
        -   Change the names of the sprite in the new lines.  For example, if you named your original sprite "star", you could name this one "star2".
        -   Inside your `loopItems` function, copy the if statement, then paste it directly underneath the original code, inside the function.
        -   Change the sprite name in the new lines of code.
        -   Run your code to test it.
      CSD U3 platform platform1: "# Create a Platform Sprite\n\n<img src=\"https://images.code.org/6e5aa80eb72809d761a695fae1b42b81-image-1476210749306.gif\"
        style=\"float: right;\"> \n\nNow that you have your background and your variables,
        it's time to create your sprites.  Usually, it will be easiest to start with
        the sprites that are part of the environment, such as your platforms.  The
        sample game had two platform sprites, but you'll make just one first, then
        test it before copying and pasting the code to make the second.\n\n# Do This\n\n-
        \  Look at your worksheet and choose a platform sprite to create.\n-   In
        the \"Create sprites\" area at the top of your code, create your new sprite
        with the `createSprite` block, giving it the correct position and label (name).
        ([Show me the block](#triggercallout=callout))\n-   Use the `setAnimation`
        and `velocityY` blocks to give your sprite the correct image and downward
        velocity.\n-   Test the sprite to make sure that it's moving in the correct
        way.  You might need to adjust its velocity.\n\n_Hint: The sprite will go
        off the screen and not come back.  You'll make it loop back around in the
        next level._"
      CSD U3 platform platform1_2018: "# Create a Platform Sprite\n\n<img src=\"https://images.code.org/6e5aa80eb72809d761a695fae1b42b81-image-1476210749306.gif\"
        style=\"float: right;\"> \n\nNow that you have your background and your variables,
        it's time to create your sprites.  Usually, it will be easiest to start with
        the sprites that are part of the environment, such as your platforms.  The
        sample game had two platform sprites, but you'll make just one first, then
        test it before copying and pasting the code to make the second.\n\n# Do This\n\n-
        \  Look at your worksheet and choose a platform sprite to create.\n-   In
        the \"Create sprites\" area at the top of your code, create your new sprite
        with the `createSprite` block, giving it the correct position and label (name).
        ([Show me the block](#triggercallout=callout))\n-   Use the `setAnimation`
        and `velocityY` blocks to give your sprite the correct image and downward
        velocity.\n-   Test the sprite to make sure that it's moving in the correct
        way.  You might need to adjust its velocity.\n\n_Hint: The sprite will go
        off the screen and not come back.  You'll make it loop back around in the
        next level._"
      CSD U3 platform platform1_2019: "# Create a Platform Sprite\n\n<img src=\"https://images.code.org/6e5aa80eb72809d761a695fae1b42b81-image-1476210749306.gif\"
        style=\"float: right;\"> \n\nNow that you have your background and your variables,
        it's time to create your sprites.  Usually, it will be easiest to start with
        the sprites that are part of the environment, such as your platforms.  The
        sample game had two platform sprites, but you'll make just one first, then
        test it before copying and pasting the code to make the second.\n\n# Do This\n\n-
        \  Look at your worksheet and choose a platform sprite to create.\n-   In
        the \"Create sprites\" area at the top of your code, create your new sprite
        with the `createSprite` block, giving it the correct position and label (name).
        ([Show me the block](#triggercallout=callout))\n-   Use the `setAnimation`
        and `velocityY` blocks to give your sprite the correct image and downward
        velocity.\n-   Test the sprite to make sure that it's moving in the correct
        way.  You might need to adjust its velocity.\n\n_Hint: The sprite will go
        off the screen and not come back.  You'll make it loop back around in the
        next level._"
      CSD U3 platform platform2: |-
        # Loop the Platform Sprite

        <img src="https://images.code.org/6bfe6dd078b2022315a7f54a38c90826-image-1476211068588.gif" style="float: right;">

        Right now, your platform sprite moves down, but it doesn't loop back up to the top of the screen. You can look at [Lesson 15 Level 13](/s/csd3-2017/stage/15/puzzle/13) to see an example of a sprite looping around a screen.

        # Do This

        -   Use the `function` block to create a `loopPlatforms` function at the bottom of your code.
        -   Use the `if` block inside the function to check whether the platform has gone off the bottom of screen and, if it has, move it back to the top of the screen.
        -   Call the function inside the draw loop, in the "update sprites" area.
        -   Run the code to test your sprite.

        _Hint: What will platform.y be when the sprite moves off the bottom of the screen?  What should platform.y be when you put it back at the top of the screen?_
      CSD U3 platform platform2_2018: |-
        # Loop the Platform Sprite

        <img src="https://images.code.org/6bfe6dd078b2022315a7f54a38c90826-image-1476211068588.gif" style="float: right;">

        Right now, your platform sprite moves down, but it doesn't loop back up to the top of the screen. You can look at [Lesson 15 Level 13](/s/csd3-2018/stage/15/puzzle/13) to see an example of a sprite looping around a screen.

        # Do This

        -   Use the `function` block to create a `loopPlatforms` function at the bottom of your code.
        -   Use the `if` block inside the function to check whether the platform has gone off the bottom of screen and, if it has, move it back to the top of the screen.
        -   Call the function inside the draw loop, in the "update sprites" area.
        -   Run the code to test your sprite.

        _Hint: What will platform.y be when the sprite moves off the bottom of the screen?  What should platform.y be when you put it back at the top of the screen?_
      CSD U3 platform platform2_2019: |-
        # Loop the Platform Sprite

        <img src="https://images.code.org/6bfe6dd078b2022315a7f54a38c90826-image-1476211068588.gif" style="float: right;">

        Right now, your platform sprite moves down, but it doesn't loop back up to the top of the screen. You can look at [Lesson 15 Level 13](../../15/puzzle/13) to see an example of a sprite looping around a screen.

        # Do This

        -   Use the `function` block to create a `loopPlatforms` function at the bottom of your code.
        -   Use the `if` block inside the function to check whether the platform has gone off the bottom of screen and, if it has, move it back to the top of the screen.
        -   Call the function inside the draw loop, in the "update sprites" area.
        -   Run the code to test your sprite.

        _Hint: What will platform.y be when the sprite moves off the bottom of the screen?  What should platform.y be when you put it back at the top of the screen?_
      CSD U3 platform platform3: |-
        # Make your Second Platform

        <img src="https://images.code.org/94abf92949a82f6ba18a8cfafb9231b1-image-1476211447371.gif" style="float:right;">

        Making a second platform will be easier than making the first, because you can copy and paste a lot of the code, then make a few small changes.  This is a lot easier in _text mode_, so be sure to try it out if you haven't already.

        You'll need to copy two parts of your code: the part at the beginning where you made the platform, and the part in your `loopPlatforms` function, where you looped the platform back to the top of the screen.

        # Do This

        -   Copy the code you used to create the first platform sprite (`createSprite`, `setAnimation`, and `velocityY`), and paste it directly beneath the original code.
        -   Change the names of the sprite in the new lines.  For example, if you named your original sprite "platform", you could name this one "platform2".
        -   Change the starting position of your new platform sprite.
        -   Inside your `loopPlatforms` function, copy the if statement, then paste it directly underneath the original code, inside the function.
        -   Change the sprite name in the new lines of code.
        -   Run your code to test it.

        _Challenge: You can make your platforms appear at random x positions when they loop back to the top of the screen._
      CSD U3 platform platform3_2018: |-
        # Make your Second Platform

        <img src="https://images.code.org/94abf92949a82f6ba18a8cfafb9231b1-image-1476211447371.gif" style="float:right;">

        Making a second platform will be easier than making the first, because you can copy and paste a lot of the code, then make a few small changes.  This is a lot easier in _text mode_, so be sure to try it out if you haven't already.

        You'll need to copy two parts of your code: the part at the beginning where you made the platform, and the part in your `loopPlatforms` function, where you looped the platform back to the top of the screen.

        # Do This

        -   Copy the code you used to create the first platform sprite (`createSprite`, `setAnimation`, and `velocityY`), and paste it directly beneath the original code.
        -   Change the names of the sprite in the new lines.  For example, if you named your original sprite "platform", you could name this one "platform2".
        -   Change the starting position of your new platform sprite.
        -   Inside your `loopPlatforms` function, copy the if statement, then paste it directly underneath the original code, inside the function.
        -   Change the sprite name in the new lines of code.
        -   Run your code to test it.

        _Challenge: You can make your platforms appear at random x positions when they loop back to the top of the screen._
      CSD U3 platform platform3_2019: |-
        # Make your Second Platform

        <img src="https://images.code.org/94abf92949a82f6ba18a8cfafb9231b1-image-1476211447371.gif" style="float:right;">

        Making a second platform will be easier than making the first, because you can copy and paste a lot of the code, then make a few small changes.  This is a lot easier in _text mode_, so be sure to try it out if you haven't already.

        You'll need to copy two parts of your code: the part at the beginning where you made the platform, and the part in your `loopPlatforms` function, where you looped the platform back to the top of the screen.

        # Do This

        -   Copy the code you used to create the first platform sprite (`createSprite`, `setAnimation`, and `velocityY`), and paste it directly beneath the original code.
        -   Change the names of the sprite in the new lines.  For example, if you named your original sprite "platform", you could name this one "platform2".
        -   Change the starting position of your new platform sprite.
        -   Inside your `loopPlatforms` function, copy the if statement, then paste it directly underneath the original code, inside the function.
        -   Change the sprite name in the new lines of code.
        -   Run your code to test it.

        _Challenge: You can make your platforms appear at random x positions when they loop back to the top of the screen._
      CSD U3 platform player1: |-
        # Create your Player

        <img src="https://images.code.org/8358b8d2eef2461e113e0b3093da7403-image-1476212944204.gif" style="float:right">

        Now you can create your player sprite.  Just like the item sprites, the player sprite will fall from the top of the screen.  Unlike the items, your player sprite will get faster as it falls, just like real falling objects.  This is what allows it to jump up, and fall back down.

        # Do This

        -   Use the `createSprite` block to make a player sprite with the label and starting position that you put on your worksheet.
        -   Use `setAnimation` to give it the correct image.
        -   Create a `playerFall` function that makes the sprite fall from the top of the screen.  The code inside the function should use `velocityY` in a counter pattern, just as when you made the falling rock in [Lesson 17 Level 4](/s/csd3-2017/stage/17/puzzle/4).
        -   Call the `playerFall` function inside the draw loop.
        -   Run the code to test your sprite.
      CSD U3 platform player1_2018: |-
        # Create your Player

        <img src="https://images.code.org/8358b8d2eef2461e113e0b3093da7403-image-1476212944204.gif" style="float:right">

        Now you can create your player sprite.  Just like the item sprites, the player sprite will fall from the top of the screen.  Unlike the items, your player sprite will get faster as it falls, just like real falling objects.  This is what allows it to jump up, and fall back down.

        # Do This

        -   Use the `createSprite` block to make a player sprite with the label and starting position that you put on your worksheet.
        -   Use `setAnimation` to give it the correct image.
        -   Create a `playerFall` function that makes the sprite fall from the top of the screen.  The code inside the function should use `velocityY` in a counter pattern, just as when you made the falling rock in [Lesson 17 Level 4](/s/csd3-2018/stage/17/puzzle/4).
        -   Call the `playerFall` function inside the draw loop.
        -   Run the code to test your sprite.
      CSD U3 platform player1_2019: |-
        # Create your Player

        <img src="https://images.code.org/8358b8d2eef2461e113e0b3093da7403-image-1476212944204.gif" style="float:right">

        Now you can create your player sprite.  Just like the item sprites, the player sprite will fall from the top of the screen.  Unlike the items, your player sprite will get faster as it falls, just like real falling objects.  This is what allows it to jump up, and fall back down.

        # Do This

        -   Use the `createSprite` block to make a player sprite with the label and starting position that you put on your worksheet.
        -   Use `setAnimation` to give it the correct image.
        -   Create a `playerFall` function that makes the sprite fall from the top of the screen.  The code inside the function should use `velocityY` in a counter pattern, just as when you made the falling rock in [Lesson 17 Level 4](../../17/puzzle/4).
        -   Call the `playerFall` function inside the draw loop.
        -   Run the code to test your sprite.
      CSD U3 platform player2: |-
        # User Controls

        Next, you should add user controls so that you can move your player around.  Your player needs to move to the left when the left arrow key is pressed, to the right when the right arrow key is pressed, and jump when the space bar is pressed.

        # Do This

        -   Create a new `controlPlayer` function in the "functions" area of your code.
        -   Inside the `controlPlayer` function, use the `if`, `keyDown`, and `sprite.x` blocks to make your player move to the left and right according to the arrow keys.  Look at <a href="/s/csd3-2017/stage/12/puzzle/7" target="_blank"> Lesson 12 Puzzle 7 </a> for examples.
        -   Inside the `controlPlayer` function, use the `if`, `keyDown`, and `velocityY` blocks to make your player jump when the up arrow is pressed.  Look at <a href="/s/csd3-2017/stage/15/puzzle/11" target="_blank"> Lesson 15 Puzzle 11 </a> for an example.
        -   Call the `controlPlayer` function inside the draw loop.
        -   Run the game and test your code.
      CSD U3 platform player2_2018: |-
        # User Controls

        Next, you should add user controls so that you can move your player around.  Your player needs to move to the left when the left arrow key is pressed, to the right when the right arrow key is pressed, and jump when the space bar is pressed.

        # Do This

        -   Create a new `controlPlayer` function in the "functions" area of your code.
        -   Inside the `controlPlayer` function, use the `if`, `keyDown`, and `sprite.x` blocks to make your player move to the left and right according to the arrow keys.  Look at <a href="/s/csd3-2018/stage/12/puzzle/7" target="_blank"> Lesson 12 Puzzle 7 </a> for examples.
        -   Inside the `controlPlayer` function, use the `if`, `keyDown`, and `velocityY` blocks to make your player jump when the up arrow is pressed.  Look at <a href="/s/csd3-2018/stage/15/puzzle/11" target="_blank"> Lesson 15 Puzzle 11 </a> for an example.
        -   Call the `controlPlayer` function inside the draw loop.
        -   Run the game and test your code.
      CSD U3 platform player2_2019: |-
        # Benutzerkontrollelemente

        Als nächstes solltest du Benutzerkontrollelemente hinzufügen, damit du Deinen Spieler bewegen kannst.  Dein Spieler muss sich nach links bewegen, wenn die linke Pfeiltaste gedrückt wird, nach rechts, wenn die rechte Pfeiltaste gedrückt wird, und springen, wenn die Leertaste gedrückt wird.

        # Mache folgendes

        -   Erstelle eine neue `controlPlayer`-Funktion im Bereich "Funktionen" Ihres Codes.
        -   Verwende innerhalb der Funktion `controlPlayer` die Bausteine `if`, `keyDown` und `sprite.x`, um Deinen Spieler gemäß den Pfeiltasten nach links und rechts bewegen zu lassen.  Sieh Dir  <a href="../../12/puzzle/7" target="_blank"> Lesson 12 Puzzle 7 </a> für Beispiele an.
        -   Verwende innerhalb der Funktion `controlPlayer` die Bausteine `if`, `keyDown` und `velocityY`, um Deinen Spieler zum Springen zu bringen, wenn der Pfeil nach oben gedrückt wird.  Sieh Dir zum Beispiel <a href="../../15/puzzle/11" target="_blank"> Lektion 15 Puzzle 11 </a> an.
        -   Rufe die Funktion "controlPlayer" innerhalb der Zeichenschleife auf.
        -   Starte das Spiel und teste Deinen Code.
      CSD U3 platform player3: |-
        # Player Interactions

        The last part of making your game is programming the player interactions with the other sprites.  First, your player needs to land on the platforms.

        # Do This

        -   Create a `playerLands` function and add it to the "functions" area of your code.
        -   Inside the function, use the `collide` block so that your player can land on both the platforms.
        -   Call the function inside the draw loop.
        -   Run the code to test your function.
      CSD U3 platform player3_2018: |-
        # Player Interactions

        The last part of making your game is programming the player interactions with the other sprites.  First, your player needs to land on the platforms.

        # Do This

        -   Create a `playerLands` function and add it to the "functions" area of your code.
        -   Inside the function, use the `collide` block so that your player can land on both the platforms.
        -   Call the function inside the draw loop.
        -   Run the code to test your function.
      CSD U3 platform player3_2019: |-
        # Player Interactions

        The last part of making your game is programming the player interactions with the other sprites.  First, your player needs to land on the platforms.

        # Do This

        -   Create a `playerLands` function and add it to the "functions" area of your code.
        -   Inside the function, use the `collide` block so that your player can land on both the platforms.
        -   Call the function inside the draw loop.
        -   Run the code to test your function.
      CSD U3 platform player4: |-
        # Collect Items

        Last, you'll want your player to collect the items falling from the top of the screen.

        # Do This

        -   Create a `collectItems` function and add it to the "functions" area of your code.
        -   Use the `if` and `isTouching` blocks to change the x and y position of the items when the player touches them.  You can look at the `loopItem` function for clues in how to reset the item position.
        -   Inside your `if` statement, add a counter pattern that will increase the score every time the player touches an item.  Look at [Lesson 16 Puzzle 9](/s/csd3-2017/stage/16/puzzle/9) for an example.
        -   Call the function inside the draw loop, in the "update sprites" area of your code.
        -   Run the code to test your function.
      CSD U3 platform player4_2018: |-
        # Collect Items

        Last, you'll want your player to collect the items falling from the top of the screen.

        # Do This

        -   Create a `collectItems` function and add it to the "functions" area of your code.
        -   Use the `if` and `isTouching` blocks to change the x and y position of the items when the player touches them.  You can look at the `loopItem` function for clues in how to reset the item position.
        -   Inside your `if` statement, add a counter pattern that will increase the score every time the player touches an item.  Look at [Lesson 16 Puzzle 9](/s/csd3-2018/stage/16/puzzle/9) for an example.
        -   Call the function inside the draw loop, in the "update sprites" area of your code.
        -   Run the code to test your function.
      CSD U3 platform player4_2019: |-
        # Collect Items

        Last, you'll want your player to collect the items falling from the top of the screen.

        # Do This

        -   Create a `collectItems` function and add it to the "functions" area of your code.
        -   Use the `if` and `isTouching` blocks to change the x and y position of the items when the player touches them.  You can look at the `loopItem` function for clues in how to reset the item position.
        -   Inside your `if` statement, add a counter pattern that will increase the score every time the player touches an item.  Look at [Lesson 16 Puzzle 9](../../16/puzzle/9) for an example.
        -   Call the function inside the draw loop, in the "update sprites" area of your code.
        -   Run the code to test your function.
      CSD U3 platform sample1: |-
        # Platform Jumper

        The game on the left is an example of a platform jumper.  Press "Run" to play it.  You can make the alien jump with the up arrow, and move it to the left and right with the arrow keys.  You score by collecting stars, and if you score high enough, the background will change.

        You already know how to use all the blocks you need to make a game just like this one, and you'll be making your own platform jumper in this lesson.
      CSD U3 platform sample1_2018: |-
        # Platform Jumper

        The game on the left is an example of a platform jumper.  Press "Run" to play it.  You can make the alien jump with the up arrow, and move it to the left and right with the arrow keys.  You score by collecting stars, and if you score high enough, the background will change.

        You already know how to use all the blocks you need to make a game just like this one, and you'll be making your own platform jumper in this lesson.
      CSD U3 platform sample1_2019: |-
        # Platform Jumper

        The game on the left is an example of a platform jumper.  Press "Run" to play it.  You can make the alien jump with the up arrow, and move it to the left and right with the arrow keys.  You score by collecting stars, and if you score high enough, the background will change.

        You already know how to use all the blocks you need to make a game just like this one, and you'll be making your own platform jumper in this lesson.
      CSD U3 platform sample2: |-
        # Plane Jumper

        Here's another example of a platform jumper, but it has a few more features.  You can use it to get ideas to improve your own game.  For example, there is a coin sprite that gives the player an extra life.

        Choose one or more of the following changes and add them to your game.

        -   Choose new animations for your player, platform, and items.
        -   Make it impossible for your player to go off the left or right of the screen.
        -   Add a different type of item for the player to collect or avoid.
        -   Add a variable that keeps track of how many lives the player has, and end the game if the player runs out.
      CSD U3 platform sample2_2018: |-
        # Plane Jumper

        Here's another example of a platform jumper, but it has a few more features.  You can use it to get ideas to improve your own game.  For example, there is a coin sprite that gives the player an extra life.

        Choose one or more of the following changes and add them to your game.

        -   Choose new animations for your player, platform, and items.
        -   Make it impossible for your player to go off the left or right of the screen.
        -   Add a different type of item for the player to collect or avoid.
        -   Add a variable that keeps track of how many lives the player has, and end the game if the player runs out.
      CSD U3 platform sample2_2019: |-
        # Plane Jumper

        Here's another example of a platform jumper, but it has a few more features.  You can use it to get ideas to improve your own game.  For example, there is a coin sprite that gives the player an extra life.

        Choose one or more of the following changes and add them to your game.

        -   Choose new animations for your player, platform, and items.
        -   Make it impossible for your player to go off the left or right of the screen.
        -   Add a different type of item for the player to collect or avoid.
        -   Add a variable that keeps track of how many lives the player has, and end the game if the player runs out.
      CSD U3 platform sample3: |-
        # Bunny Jumper

        Here's another example of a jumper.  In this one, the items get faster when they fall, and bounce off the platforms.

        Choose one or more of the following changes and add them to your game.

        -   Make your player's animation change direction when the player changes direction.
        -   Add another background and make it appear when the score gets even higher.
        -   Make your items interact with the platforms in some way.
      CSD U3 platform sample3_2018: |-
        # Bunny Jumper

        Here's another example of a jumper.  In this one, the items get faster when they fall, and bounce off the platforms.

        Choose one or more of the following changes and add them to your game.

        -   Make your player's animation change direction when the player changes direction.
        -   Add another background and make it appear when the score gets even higher.
        -   Make your items interact with the platforms in some way.
      CSD U3 platform sample3_2019: |-
        # Bunny Jumper

        Here's another example of a jumper.  In this one, the items get faster when they fall, and bounce off the platforms.

        Choose one or more of the following changes and add them to your game.

        -   Make your player's animation change direction when the player changes direction.
        -   Add another background and make it appear when the score gets even higher.
        -   Make your items interact with the platforms in some way.
      CSD U3 platform scoreboard: |-
        # Make the Scoreboard

        <img src="https://images.code.org/ea490a1915a70676fd3a783adce93cdd-image-1476142534609.png" style="float:right;">

        You'll also need a scoreboard so the player can keep track of the score.   There's already a `showScore` function written, but it only shows the text "Score" and not the actual score. ([Show me where](#triggercallout=code_triggered))  You can see an example of a working scoreboard in [Lesson 16 Level 9](/s/csd3-2017/stage/16/puzzle/9).

        # Do This

        -   Read the code in the `showScore` function.
        -   Call the function inside the draw loop, right after you draw the backgrounds.
        -   Use the `text` block to display the score at the top of the screen.
      CSD U3 platform scoreboard_2018: |-
        # Make the Scoreboard

        <img src="https://images.code.org/ea490a1915a70676fd3a783adce93cdd-image-1476142534609.png" style="float:right;">

        You'll also need a scoreboard so the player can keep track of the score.   There's already a `showScore` function written, but it only shows the text "Score" and not the actual score. ([Show me where](#triggercallout=code_triggered))  You can see an example of a working scoreboard in [Lesson 16 Level 9](../../16/puzzle/9).

        # Do This

        -   Read the code in the `showScore` function.
        -   Call the function inside the draw loop, right after you draw the backgrounds.
        -   Use the `text` block to display the score at the top of the screen.
      CSD U3 platform scoreboard_2019: |-
        # Make the Scoreboard

        <img src="https://images.code.org/ea490a1915a70676fd3a783adce93cdd-image-1476142534609.png" style="float:right;">

        You'll also need a scoreboard so the player can keep track of the score.   There's already a `showScore` function written, but it only shows the text "Score" and not the actual score. ([Show me where](#triggercallout=code_triggered))  You can see an example of a working scoreboard in [Lesson 16 Level 9](../../16/puzzle/9).

        # Do This

        -   Read the code in the `showScore` function.
        -   Call the function inside the draw loop, right after you draw the backgrounds.
        -   Use the `text` block to display the score at the top of the screen.
      CSD U3 platform variable1: |-
        # Score Variable

        Now that you've created your backgrounds, you'll need to choose when each background is drawn.  For that, you'll need a score variable to hold information about your player's score.

        You should always give your variables a starting value at the very beginning of the program.  That way, they are available for any code that comes after.

        # Do This

        -   Create a score variable at the beginning of your game program. ( [Show me the block](#triggercallout=callout) )
        -   Set the score equal to 0.
      CSD U3 platform variable1_2018: |-
        # Score Variable

        Now that you've created your backgrounds, you'll need to choose when each background is drawn.  For that, you'll need a score variable to hold information about your player's score.

        You should always give your variables a starting value at the very beginning of the program.  That way, they are available for any code that comes after.

        # Do This

        -   Create a score variable at the beginning of your game program. ( [Show me the block](#triggercallout=callout) )
        -   Set the score equal to 0.
      CSD U3 platform variable1_2019: |-
        # Score Variable

        Now that you've created your backgrounds, you'll need to choose when each background is drawn.  For that, you'll need a score variable to hold information about your player's score.

        You should always give your variables a starting value at the very beginning of the program.  That way, they are available for any code that comes after.

        # Do This

        -   Create a score variable at the beginning of your game program. ( [Show me the block](#triggercallout=callout) )
        -   Set the score equal to 0.
      CSD U3 rect: "# Explore Game Lab\n\nWelcome to Game Lab, where you can create
        interactive animations and games!   \n\nYou've already practiced the basics
        of putting shapes on a grid.  In Game Lab, you'll do the same with the display
        area on the left.\n\n# Do This\n\n-   Look at the line of code in the workspace
        below these instructions ( [Show me where](#triggercallout=block_trigger)
        ) and discuss with your partner where you think the shape will be drawn on
        the grid.\n-   Click <img src=\"https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20
        PM.png\" width=100> to run the program and see what happens. ( [Show me where](#triggercallout=run_trigger)
        )\n-   Change the numbers inside the block, then try running the program again.\n-
        \  Try to place the rectangle near the bottom right of the screen."
      CSD U3 rect_2018: "# Explore Game Lab\n\nWelcome to Game Lab, where you can
        create interactive animations and games!   \n\nYou've already practiced the
        basics of putting shapes on a grid.  In Game Lab, you'll do the same with
        the display area on the left.\n\n# Do This\n\n-   Look at the line of code
        in the workspace below these instructions ( [Show me where](#triggercallout=block_trigger)
        ) and discuss with your partner where you think the shape will be drawn on
        the grid.\n-   Click <img src=\"https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20
        PM.png\" width=100> to run the program and see what happens.\n-   Change the
        numbers inside the block, then try running the program again.\n-   Try to
        place the rectangle near the bottom right of the screen."
      CSD U3 rect_2019: "# Explore Game Lab\n\nWelcome to Game Lab, where you can
        create interactive animations and games!   \n\nYou've already practiced the
        basics of putting shapes on a grid.  In Game Lab, you'll do the same with
        the display area on the left.\n\n# Do This\n\n-   Look at the line of code
        in the workspace below these instructions ( [Show me where](#triggercallout=block_trigger)
        ) and discuss with your partner where you think the shape will be drawn on
        the grid.\n-   Click <img src=\"https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20
        PM.png\" width=100> to run the program and see what happens.\n-   Change the
        numbers inside the block, then try running the program again.\n-   Try to
        place the rectangle near the bottom right of the screen."
      CSD U3 sequence: |-
        <img src="https://images.code.org/30d68fb30db5b61187f104f46292e052-image-1493060980724.08.05 PM.png" style="float:right">

        # Order Matters

        In Game Lab, it matters what order your code is in.  New shapes are drawn on top of the ones that came before, covering up the shapes that are drawn first.  You can see the difference when you use more than one color in your code.

        # Do This

        -   Look at the code that draws the two rectangles.  The first is drawn red, and the second is drawn blue.
        -   Change the red rectangle's color to green.
        -   Change the order of the code so the green rectangle appears on top.
      CSD U3 sequence_2018: |-
        <img src="https://images.code.org/30d68fb30db5b61187f104f46292e052-image-1493060980724.08.05 PM.png" style="float:right">

        # Order Matters

        In Game Lab, it matters what order your code is in.  New shapes are drawn on top of the ones that came before, covering up the shapes that are drawn first.  You can see the difference when you use more than one color in your code.

        # Do This

        -   Look at the code that draws the two rectangles.  The first is drawn red, and the second is drawn blue.
        -   Change the red rectangle's color to green.
        -   Change the order of the code so the green rectangle appears on top.
      CSD U3 sequence_2019: |-
        <img src="https://images.code.org/30d68fb30db5b61187f104f46292e052-image-1493060980724.08.05 PM.png" style="float:right">

        # Order Matters

        In Game Lab, it matters what order your code is in.  New shapes are drawn on top of the ones that came before, covering up the shapes that are drawn first.  You can see the difference when you use more than one color in your code.

        # Do This

        -   Look at the code that draws the two rectangles.  The first is drawn red, and the second is drawn blue.
        -   Change the red rectangle's color to green.
        -   Change the order of the code so the green rectangle appears on top.
      CSD U4 - Design Mode Input Widgets: |-
        # Input Elements

        <img src="https://images.code.org/108fcc6fc89bf88edde00353afb33d75-image-1469814642375.49.23.png" style="float: right; width: 150px"/>

        Buttons are a great way to navigate around your app, and text labels are the primary way to display content in your app. When it comes to taking input from your users, sometimes you need a place for them to type or boxes to check. The **Text Input**, **Dropdown**, **Radio Button**, and **Checkbox** elements all provide ways for your users to input information to your app.

        # Do This

        Choose at least two of the input elements, and for each one:

        -   Drag it out and position it on the screen
        -   Change the id to something meaningful
        -   Read through the properties and experiment with them
        -   Add a label element next to each that describes what they do (don't forget to give it an id too!)
      CSD U4 - Design Mode Project: |-
        # Mocking Up Your App

        Using your paper prototype, create a digital version of your screen using the Design Mode elements you've learned about.

        # Do This

        -   Rename the screen to match your _namespace_.
        -   Use the built-in elements to lay out your app screen, giving each a proper ID
            -   For example, if your namespace is "home\_" you might create IDs like:
                -   `home_title`
                -   `home_login_button`
                -   `home_logo`
        -   For any components of your app that can't be recreated with the built in elements you can either:
            -   Redesign to utilize built in elements
            -   Find an image to use in place of your element
            -   Draw the element using your preferred image editor
        -   Share your design regularly with your teammates to ensure consistent style
      CSD U4 - Design Mode Project_2018: |-
        # Entwerfe Deine App

        Erstelle mit deinem Papier-Prototypen eine digitale Version deines Bildschirms mit den Elementen des Design-Modus, die du kennen gelernt hast.

        # Machen Folgendes

        -   Benenne den Bildschirm um, damit er Deinem _Namensraum_ entspricht.
        -   Benutze die eingebauten Elemente, um Deinen Anwendungsbildschirm zu gestalten, indem Du jedem eine passende ID gibst
            -   Wenn Dein Namensraum zum Beispiel `home_` ist, kannst Du IDs wie folgt erstellen:
                -   `home_title`
                -   `home_login_button`
                -   `home_logo`
        -   Für alle Komponenten Deiner App, die nicht mit den eingebauten Elementen neu erstellt werden können, kannst Du das auch nicht:
            -   Redesign, um die eingebauten Elemente zu nutzen
            -   Finde ein Bild, das Du an Stelle Deines Elements verwenden kannst
            -   Zeichne das Element mit Deinem bevorzugten Bildbearbeitungsprogramm
        -   Stelle sicher, dass Du und Deine Teamkollegen regelmäßig die Designs des jeweils anderen betrachten, um einen einheitlichen Stil zu gewährleisten
      CSD U4 - Design Mode Project_2019: |-
        # Entwerfe Deine App

        Erstelle mit deinem Papier-Prototypen eine digitale Version deines Bildschirms mit den Elementen des Design-Modus, die du kennen gelernt hast.

        # Machen Folgendes

        -   Benenne den Bildschirm um, damit er Deinem _Namensraum_ entspricht.
        -   Benutze die eingebauten Elemente, um Deinen Anwendungsbildschirm zu gestalten, indem Du jedem eine passende ID gibst
            -   Wenn Dein Namensraum zum Beispiel `home_` ist, kannst Du IDs wie folgt erstellen:
                -   `home_title`
                -   `home_login_button`
                -   `home_logo`
        -   Für alle Komponenten Deiner App, die nicht mit den eingebauten Elementen neu erstellt werden können, kannst Du das auch nicht:
            -   Redesign, um die eingebauten Elemente zu nutzen
            -   Finde ein Bild, das Du an Stelle Deines Elements verwenden kannst
            -   Zeichne das Element mit Deinem bevorzugten Bildbearbeitungsprogramm
        -   Stelle sicher, dass Du und Deine Teamkollegen regelmäßig die Designs des jeweils anderen betrachten, um einen einheitlichen Stil zu gewährleisten
      CSD U4 - Design Mode Text: "# Text hinzufügen.\n\n<img src=\"https://images.code.org/86ba633e04f90f3ca47dff3dcd064847-image-1469812708683.15.36.png\"
        style=\"float: right; width: 75px\"/>\nMit dem Label-Element kannst du jeden
        beliebigen Text zu deiner App hinzufügen, den du möchtest. Ziehe einfach einen
        Label-Block heraus und setze seine \"text\"-Eigenschaft. \n\n# Mache Folgendes\n\nVerwende
        ein Label-Element, um einen Titel für diese App zu erstellen.\n\n-   Ziehe
        ein Label heraus und platziere es oben auf dem Bildschirm\n-   Ändere die
        ID auf \"titleLabel\".\n-   Ändere den Text in \"Meine App\".\n-   Vergrößere
        die Schriftgröße\n-   Wähle eine Farbe, die Dir gefällt für den Titel"
      CSD U5 Amazon Data Video: Sieh Dir dieses Video an, um zu erfahren, wie dieses
        Problem von Amazon gelöst wird. Während du zusiehst, denke darüber nach, welche
        Daten gesammelt werden und woher sie kommen.
      CSD U5 Amazon Data Video_2018: Sieh Dir dieses Video an, um zu erfahren, wie
        dieses Problem von Amazon gelöst wird. Während du zusiehst, denke darüber
        nach, welche Daten gesammelt werden und woher sie kommen.
      CSD U5 Amazon Data Video_2019: Sieh Dir dieses Video an, um zu erfahren, wie
        dieses Problem von Amazon gelöst wird. Während du zusiehst, denke darüber
        nach, welche Daten gesammelt werden und woher sie kommen.
      CSD U5 Netflix Data Video: Sieh dir dieses Video an, um zu erfahren, wie dieses
        Problem von Netflix gelöst wird. Während du zusiehst, denke darüber nach,
        welche Daten gesammelt werden und woher sie kommen.
      CSD U5 Netflix Data Video_2018: Sieh dir dieses Video an, um zu erfahren, wie
        dieses Problem von Netflix gelöst wird. Während du zusiehst, denke darüber
        nach, welche Daten gesammelt werden und woher sie kommen.
      CSD U5 Netflix Data Video_2019: Sieh dir dieses Video an, um zu erfahren, wie
        dieses Problem von Netflix gelöst wird. Während du zusiehst, denke darüber
        nach, welche Daten gesammelt werden und woher sie kommen.
      CSD U5 Pizza: |-
        # Pizza Party

        The pizza party data has been put into an app for you, and the answers from another class have been added.  Because this is an app, we can automate the creation of the bar chart from the given data.

        # Do This

        -   Click "Run" to see the list of answers that the classes have given.
        -   Discuss with a partner what you think the chart of this data will look like.
        -   Click "Show Chart" to see for yourself.

        # Spreadsheet Version

        The pizza party data has also been put into a spreadsheet for you, if you would like to use it instead.  To use the spreadsheet, you'll need to make your own copy of it.

        -   This link will make you your own copy of the "Pizza Topping Choices" data: [Pizza Topping Choices](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/copy)
        -   You can also download a CSV version of the file [here](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/export?format=csv).
      CSD U5 Pizza 2: |-
        # Pizza Party

        When people work with data, they know to leave off answers that don't make sense, and that some answers, such as "peppers", "pepppers" and "green peppers", actually meant the same thing. Computers don't know how to do this, so we have to clean the data before the computer is able to use it.

        This version of the app has a second column for data to be cleaned.

        ## Do this

        -   Click "Run" to see the new list of answers to be cleaned.
        -   Click on each answer that needs to be cleaned and correct it so that the computer will chart it properly. (You may want to delete some answers entirely.)
        -   When you are finished, click "Show Chart" to see the new chart of cleaned answers.
      CSD U5 Pizza 2_2018: |-
        # Pizza Party

        When people work with data, they know to leave off answers that don't make sense, and that some answers, such as "peppers", "pepppers" and "green peppers", actually meant the same thing. Computers don't know how to do this, so we have to clean the data before the computer is able to use it.

        This version of the app has a second column for data to be cleaned.

        ## Do this

        -   Click "Run" to see the new list of answers to be cleaned.
        -   Click on each answer that needs to be cleaned and correct it so that the computer will chart it properly. (You may want to delete some answers entirely.)
        -   When you are finished, click "Show Chart" to see the new chart of cleaned answers.
      CSD U5 Pizza 2_2019: |-
        # Pizza Party

        When people work with data, they know to leave off answers that don't make sense, and that some answers, such as "peppers", "pepppers" and "green peppers", actually meant the same thing. Computers don't know how to do this, so we have to clean the data before the computer is able to use it.

        This version of the app has a second column for data to be cleaned.

        ## Do this

        -   Click "Run" to see the new list of answers to be cleaned.
        -   Click on each answer that needs to be cleaned and correct it so that the computer will chart it properly. (You may want to delete some answers entirely.)
        -   When you are finished, click "Show Chart" to see the new chart of cleaned answers.
      CSD U5 Pizza_2018: |-
        # Pizza Party

        The pizza party data has been put into an app for you, and the answers from another class have been added.  Because this is an app, we can automate the creation of the bar chart from the given data.

        # Do This

        -   Click "Run" to see the list of answers that the classes have given.
        -   Discuss with a partner what you think the chart of this data will look like.
        -   Click "Show Chart" to see for yourself.

        # Spreadsheet Version

        The pizza party data has also been put into a spreadsheet for you, if you would like to use it instead.  To use the spreadsheet, you'll need to make your own copy of it.

        -   This link will make you your own copy of the "Pizza Topping Choices" data: [Pizza Topping Choices](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/copy)
        -   You can also download a CSV version of the file [here](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/export?format=csv).
      CSD U5 Pizza_2019: |-
        # Pizza Party

        The pizza party data has been put into an app for you, and the answers from another class have been added.  Because this is an app, we can automate the creation of the bar chart from the given data.

        # Do This

        -   Click "Run" to see the list of answers that the classes have given.
        -   Discuss with a partner what you think the chart of this data will look like.
        -   Click "Show Chart" to see for yourself.

        # Spreadsheet Version

        The pizza party data has also been put into a spreadsheet for you, if you would like to use it instead.  To use the spreadsheet, you'll need to make your own copy of it.

        -   This link will make you your own copy of the "Pizza Topping Choices" data: [Pizza Topping Choices](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/copy)
        -   You can also download a CSV version of the file [here](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/export?format=csv).
      CSD U5 Waze Data Video: Sieh Dir dieses Video an, um zu erfahren, wie dieses
        Problem von Waze gelöst wird. Während du zusiehst, denke darüber nach, welche
        Daten gesammelt werden und woher sie kommen.
      CSD U5 Waze Data Video_2018: Sieh Dir dieses Video an, um zu erfahren, wie dieses
        Problem von Waze gelöst wird. Während du zusiehst, denke darüber nach, welche
        Daten gesammelt werden und woher sie kommen.
      CSD U5 Waze Data Video_2019: Sieh Dir dieses Video an, um zu erfahren, wie dieses
        Problem von Waze gelöst wird. Während du zusiehst, denke darüber nach, welche
        Daten gesammelt werden und woher sie kommen.
      CSD U5 binary 1: |-
        # 5-Bit Number

        When you only had four bits, the highest number that you could make was fifteen.  Now you'll have a chance to work with more bits to make higher numbers.

        In this activity, the dots are replaced with numbers, but you still add up everything that's showing to see what number the binary code stands for.  The left-most bit doesn't have a number yet, so you'll have to give it one.

        # Do This

        -   Click on the bits to turn them on and off, and see the different numbers you can make.
        -   With your partner, discuss the pattern in the numbers.  Decide what number you think should go in the left most box.
        -   Click "Edit" to change the value of the left most bit.
        -   Once you've decided on the value, try to make the following numbers: 16, 27, 31
      CSD U5 binary 1_2018: |-
        # 5-Bit Number

        When you only had four bits, the highest number that you could make was fifteen.  Now you'll have a chance to work with more bits to make higher numbers.

        In this activity, the dots are replaced with numbers, but you still add up everything that's showing to see what number the binary code stands for.  The left-most bit doesn't have a number yet, so you'll have to give it one.

        # Do This

        -   Click on the bits to turn them on and off, and see the different numbers you can make.
        -   With your partner, discuss the pattern in the numbers.  Decide what number you think should go in the left most box.
        -   Click "Edit" to change the value of the left most bit.
        -   Once you've decided on the value, try to make the following numbers: 16, 27, 31
      CSD U5 binary 1_2019: |-
        # 5-Bit Number

        When you only had four bits, the highest number that you could make was fifteen.  Now you'll have a chance to work with more bits to make higher numbers.

        In this activity, the dots are replaced with numbers, but you still add up everything that's showing to see what number the binary code stands for.  The left-most bit doesn't have a number yet, so you'll have to give it one.

        # Do This

        -   Click on the bits to turn them on and off, and see the different numbers you can make.
        -   With your partner, discuss the pattern in the numbers.  Decide what number you think should go in the left most box.
        -   Click "Edit" to change the value of the left most bit.
        -   Once you've decided on the value, try to make the following numbers: 16, 27, 31
      CSD U5 binary 2: |-
        # 6-Bit Number

        This widget helps you to calculate 6-bit binary numbers.

        # Do This

        -   With your partner, answer the following questions:
            1.  What's the biggest number you can make with this widget?
            2.  The record for most skips by a dog and person in one minute is 59.  How would you encode 59 in binary?
      CSD U5 binary 2_2018: |-
        # 6-Bit Number

        This widget helps you to calculate 6-bit binary numbers.

        # Do This

        -   With your partner, answer the following questions:
            1.  What's the biggest number you can make with this widget?
            2.  The record for most skips by a dog and person in one minute is 59.  How would you encode 59 in binary?
      CSD U5 binary 2_2019: |-
        # 6-Bit Number

        This widget helps you to calculate 6-bit binary numbers.

        # Do This

        -   With your partner, answer the following questions:
            1.  What's the biggest number you can make with this widget?
            2.  The record for most skips by a dog and person in one minute is 59.  How would you encode 59 in binary?
      CSD U5 binary 4-new: |-
        # Decoding multiple numbers

        Here's a widget that can calculate numbers of 4, 5, or 6 bits.  You can use it to find the two world records encoded in the binary string below.

        ![](<https://images.code.org/13b0d3307e688575b53e3e6bc86fb739-image-1505426509385.01.06 PM.png>)

        1.  Most number of people lifted and thrown in two minutes. (4 bits)
        2.  Most canned drinks opened by a parrot in one minute. (6 bits)

        # Do This

        -   Decode the two numbers from the binary string.
      CSD U5 binary 4-new_2018: |-
        # Decoding multiple numbers

        Here's a widget that can calculate numbers of 4, 5, or 6 bits.  You can use it to find the two world records encoded in the binary string below.

        ![](<https://images.code.org/13b0d3307e688575b53e3e6bc86fb739-image-1505426509385.01.06 PM.png>)

        1.  Most number of people lifted and thrown in two minutes. (4 bits)
        2.  Most canned drinks opened by a parrot in one minute. (6 bits)

        # Do This

        -   Decode the two numbers from the binary string.
      CSD U5 binary 4-new_2019: |-
        # Decoding multiple numbers

        Here's a widget that can calculate numbers of 4, 5, or 6 bits.  You can use it to find the two world records encoded in the binary string below.

        ![](<https://images.code.org/13b0d3307e688575b53e3e6bc86fb739-image-1505426509385.01.06 PM.png>)

        1.  Most number of people lifted and thrown in two minutes. (4 bits)
        2.  Most canned drinks opened by a parrot in one minute. (6 bits)

        # Do This

        -   Decode the two numbers from the binary string.
      CSD U5 binary 5-new: |-
        # Decoding multiple numbers

        Here's a widget that can calculate numbers up to to eight bits. You can use it to find the values of the two world records below.

        Don't forget to make sure that the "1" bit is always the right most bit.  If you have extra bits on the left side of the widget, just keep them turned off.

        ![](<https://images.code.org/e86788ff9b92a2b01b99749fa1aba8e8-image-1505426626592.01.14 PM.png>)

        1.  Longest tail on a dog (in inches) (5 bits)
        2.  Most spoons balanced on someone's face (5 bits)

        # Do This

        -   Decode the two numbers from a the binary string.
      CSD U5 binary 5-new_2018: |-
        # Decodieren mehrerer Zahlen

        Hier ist ein Widget, das Zahlen bis zu acht Bits berechnen kann. Damit kann man die Werte der beiden folgenden Weltrekorde ermitteln.

        Vergiss nicht, darauf zu achten, dass das "1"-Bit immer das richtige Bit ist.  Wenn du zusätzliche Bits auf der linken Seite des Widgets hast, lass sie einfach ausgeschaltet.

        ![](<https://images.code.org/e86788ff9b92a2b01b99749fa1aba8e8-image-1505426626592.01.14 PM.png>)

        1.  Längster Schwanz bei einem Hund (in Zoll) (5 Bit)
        2.  Die meisten Löffel wurden auf dem Gesicht von jemandem ausgewogen (5 Bits).

        # Mache Folgendes

        -   Decodiere die beiden Zahlen aus einer binären Zeichenkette.
            -   _Hinweis: Du musst die Zahlen in der Reihenfolge lesen, wobei die erste Antwort die ersten fünf Bits und die zweite Antwort die fünf Bits danach verwendet._
      CSD U5 binary 5-new_2019: |-
        # Decodieren mehrerer Zahlen

        Hier ist ein Widget, das Zahlen bis zu acht Bits berechnen kann. Damit kann man die Werte der beiden folgenden Weltrekorde ermitteln.

        Vergiss nicht, darauf zu achten, dass das "1"-Bit immer das richtige Bit ist.  Wenn du zusätzliche Bits auf der linken Seite des Widgets hast, lass sie einfach ausgeschaltet.

        ![](<https://images.code.org/e86788ff9b92a2b01b99749fa1aba8e8-image-1505426626592.01.14 PM.png>)

        1.  Längster Schwanz bei einem Hund (in Zoll) (5 Bit)
        2.  Die meisten Löffel wurden auf dem Gesicht von jemandem ausgewogen (5 Bits).

        # Mache Folgendes

        -   Decodiere die beiden Zahlen aus einer binären Zeichenkette.
            -   _Hinweis: Du musst die Zahlen in der Reihenfolge lesen, wobei die erste Antwort die ersten fünf Bits und die zweite Antwort die fünf Bits danach verwendet._
      CSD U5 binary 6-new: |-
        # Decoding multiple numbers

        Here's a new bit string.  This time, you don't know the bit length of the two numbers.  Try to decode the numbers without knowing the bit length.

        ![](<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46 PM.png>)

        1.  Largest wind chime, in feet (? bits)
        2.  Furthest arrow shot with someone's feet (in feet) (? bits)

        # Do This

        -   Try to decode the two numbers from the binary string.
        -   Discuss with your partner why you cannot know for sure whether your answer is correct.
      CSD U5 binary 6-new_2018: |-
        # Decoding multiple numbers

        Here's a new bit string.  This time, you don't know the bit length of the two numbers.  Try to decode the numbers without knowing the bit length.

        ![](<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46 PM.png>)

        1.  Largest wind chime, in feet (? bits)
        2.  Furthest arrow shot with someone's feet (in feet) (? bits)

        # Do This

        -   Try to decode the two numbers from the binary string.
        -   Discuss with your partner why you cannot know for sure whether your answer is correct.
      CSD U5 binary 6-new_2019: |-
        # Decoding multiple numbers

        Here's a new bit string.  This time, you don't know the bit length of the two numbers.  Try to decode the numbers without knowing the bit length.

        ![](<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46 PM.png>)

        1.  Largest wind chime, in feet (? bits)
        2.  Furthest arrow shot with someone's feet (in feet) (? bits)

        # Do This

        -   Try to decode the two numbers from the binary string.
        -   Discuss with your partner why you cannot know for sure whether your answer is correct.
      CSD U5 binary 7-new: |-
        # Bit Length

        If you don't know how many bits long each number is, you won't be able to decode a string of numbers.

        For example, the following binary string could be decoded many different ways.

        ![](<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46 PM.png>)

        If you split the string like this, the string reads 10, 84.

        ![](<https://images.code.org/c8586b93427166ae6ecfdb8b1ff66bdd-image-1505427228630.13.01 PM.png>) ![](<https://images.code.org/7d9814dc4bae8512dfaebbe459c29c9b-image-1505427230882.13.08 PM.png>)

        If you split it like this, the string reads 42, 20.

        ![](<https://images.code.org/2e62b4a71b98b68bdf04713c508e4cb2-image-1505427233001.13.13 PM.png>) ![](<https://images.code.org/10a316c870b575db4b30a687815bf481-image-1505427235482.13.19 PM.png>)

        To solve this problem, people agree on a fixed length for every number.  The following string uses the same two numbers, but each number takes up exactly eight bits, no matter how many bits it actually needs.

        ![](<https://images.code.org/257cb728fde57421e58ef31164be5a51-image-1505427467235.13.26 PM.png>)

        # Do This

        -   Use the binary widget to decode the string that uses eight bit numbers.
        -   Check you answer with a partner to see whether you got the same answer.
      CSD U5 binary 7-new_2018: |-
        # Bit Length

        If you don't know how many bits long each number is, you won't be able to decode a string of numbers.

        For example, the following binary string could be decoded many different ways.

        ![](<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46 PM.png>)

        If you split the string like this, the string reads 10, 84.

        ![](<https://images.code.org/c8586b93427166ae6ecfdb8b1ff66bdd-image-1505427228630.13.01 PM.png>) ![](<https://images.code.org/7d9814dc4bae8512dfaebbe459c29c9b-image-1505427230882.13.08 PM.png>)

        If you split it like this, the string reads 42, 20.

        ![](<https://images.code.org/2e62b4a71b98b68bdf04713c508e4cb2-image-1505427233001.13.13 PM.png>) ![](<https://images.code.org/10a316c870b575db4b30a687815bf481-image-1505427235482.13.19 PM.png>)

        To solve this problem, people agree on a fixed length for every number.  The following string uses the same two numbers, but each number takes up exactly eight bits, no matter how many bits it actually needs.

        ![](<https://images.code.org/257cb728fde57421e58ef31164be5a51-image-1505427467235.13.26 PM.png>)

        # Do This

        -   Use the binary widget to decode the string that uses eight bit numbers.
        -   Check you answer with a partner to see whether you got the same answer.
      CSD U5 binary 7-new_2019: |-
        # Bit Length

        If you don't know how many bits long each number is, you won't be able to decode a string of numbers.

        For example, the following binary string could be decoded many different ways.

        ![](<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46 PM.png>)

        If you split the string like this, the string reads 10, 84.

        ![](<https://images.code.org/c8586b93427166ae6ecfdb8b1ff66bdd-image-1505427228630.13.01 PM.png>) ![](<https://images.code.org/7d9814dc4bae8512dfaebbe459c29c9b-image-1505427230882.13.08 PM.png>)

        If you split it like this, the string reads 42, 20.

        ![](<https://images.code.org/2e62b4a71b98b68bdf04713c508e4cb2-image-1505427233001.13.13 PM.png>) ![](<https://images.code.org/10a316c870b575db4b30a687815bf481-image-1505427235482.13.19 PM.png>)

        To solve this problem, people agree on a fixed length for every number.  The following string uses the same two numbers, but each number takes up exactly eight bits, no matter how many bits it actually needs.

        ![](<https://images.code.org/257cb728fde57421e58ef31164be5a51-image-1505427467235.13.26 PM.png>)

        # Do This

        -   Use the binary widget to decode the string that uses eight bit numbers.
        -   Check you answer with a partner to see whether you got the same answer.
      CSD U5 binary video_2019: |-
        ## Zu berücksichtigende Fragen

        -   Warum werden alle Arten von Daten auf dem Computer als Zahlen gespeichert?
        -   Wenn alles als Zahl gespeichert ist, wie kann der Computer Deiner Meinung nach den Unterschied zwischen Zahlen, Buchstaben, Bildern und Ton erkennen?
      CSD U5 black white images pixelation: |-
        # Do This

        Complete the "X" shape by typing 0s and 1s. You can always click "Readable Format" if you want to clean up your work.
      CSD U5 black white images pixelation 2: |-
        # Do This

        Use the pixelation widget to draw a smiley face

        ![](<https://images.code.org/3e81e7e5c95a63173242552de2e9c094-image-1491425592286.52.47 PM.png>)
      CSD U5 black white images pixelation 2_2018: |-
        # Do This

        Use the pixelation widget to draw a smiley face

        ![](<https://images.code.org/3e81e7e5c95a63173242552de2e9c094-image-1491425592286.52.47 PM.png>)
      CSD U5 black white images pixelation 2_2019: |-
        # Do This

        Use the pixelation widget to draw a smiley face

        ![](<https://images.code.org/3e81e7e5c95a63173242552de2e9c094-image-1491425592286.52.47 PM.png>)
      CSD U5 black white images pixelation 3: |-
        # Do This

        The width and height sliders are set incorrectly for this image so it doesn't look like anything. Change them until you find the image.

        ![](<https://images.code.org/c2abe82051e700f22ce613e407e71536-image-1491426050751.00.17 PM.png>)
      CSD U5 black white images pixelation 3_2018: |-
        # Do This

        The width and height sliders are set incorrectly for this image so it doesn't look like anything. Change them until you find the image.

        ![](<https://images.code.org/c2abe82051e700f22ce613e407e71536-image-1491426050751.00.17 PM.png>)
      CSD U5 black white images pixelation 3_2019: |-
        # Do This

        The width and height sliders are set incorrectly for this image so it doesn't look like anything. Change them until you find the image.

        ![](<https://images.code.org/c2abe82051e700f22ce613e407e71536-image-1491426050751.00.17 PM.png>)
      CSD U5 black white images pixelation 4: |-
        # Do This

        Add eyebrows to this smiley face. Remember to use the "Readable Format" if you get stuck.

        ![](<https://images.code.org/269725fa3d9d6857912fe4a20464a830-image-1491427249017.18.37 PM.png>)
      CSD U5 black white images pixelation 4_2018: |-
        # Do This

        Add eyebrows to this smiley face. Remember to use the "Readable Format" if you get stuck.

        ![](<https://images.code.org/269725fa3d9d6857912fe4a20464a830-image-1491427249017.18.37 PM.png>)
      CSD U5 black white images pixelation 4_2019: |-
        # Do This

        Add eyebrows to this smiley face. Remember to use the "Readable Format" if you get stuck.

        ![](<https://images.code.org/269725fa3d9d6857912fe4a20464a830-image-1491427249017.18.37 PM.png>)
      CSD U5 black white images pixelation 5: |-
        # Do This

        Now it's your turn. Draw anything you want in the pixelation widget. Feel free to change the width and height of your image if you wish.
      CSD U5 black white images pixelation 5_2018: |-
        # Do This

        Now it's your turn. Draw anything you want in the pixelation widget. Feel free to change the width and height of your image if you wish.
      CSD U5 black white images pixelation 5_2019: |-
        # Do This

        Now it's your turn. Draw anything you want in the pixelation widget. Feel free to change the width and height of your image if you wish.
      CSD U5 black white images pixelation_2018: |-
        # Do This

        Complete the "X" shape by typing 0s and 1s. You can always click "Readable Format" if you want to clean up your work.
      CSD U5 black white images pixelation_2019: |-
        # Do This

        Complete the "X" shape by typing 0s and 1s. You can always click "Readable Format" if you want to clean up your work.
      CSD U6 Catch the Mouse: Embedded Prediction
      CSD U6 Catch the Mouse prediction: |-
        # Catch the Mouse

        This is a clicker game, similar to the one that you built in the last lesson.

        Look at the code with your partner and answer the following question:

        -   How many times do you need to click the mouse before the LED starts to blink?

        Write your answer in the box below, then run the code and see what happens.
      CSD U6 Catch the Mouse prediction_2018: |-
        # Catch the Mouse

        This is a clicker game, similar to the one that you built in the last lesson.

        Look at the code with your partner and answer the following question:

        -   How many times do you need to click the mouse before the LED starts to blink?

        Write your answer in the box below, then run the code and see what happens.
      CSD U6 Catch the Mouse prediction_2019: |-
        # Catch the Mouse

        This is a clicker game, similar to the one that you built in the last lesson.

        Look at the code with your partner and answer the following question:

        -   How many times do you need to click the mouse before the LED starts to blink?

        Write your answer in the box below, then run the code and see what happens.
      CSD U6 Catch the Mouse_2018: Embedded Prediction
      CSD U6 Catch the Mouse_2019: Embedded Prediction
      CSD U6 Driver pt 2: |-
        # Limiting Turn

        You might have noticed that it was really hard to steer the car unless your hands were moving slowly and carefully. This is because the number that `roll` returns can be a really big number depending on how much the accelerometer is being turned. Remember, `roll` has a range from -90 to 90.

        # Do This

        Find a way to make `roll` a smaller number while still using it to steer the car. You have all of the math operators available to you for this.

        _Challenge_: Can you keep the car from going off the side of the screen?
      CSD U6 Driver pt 2_2018: |-
        # Limiting Turn

        You might have noticed that it was really hard to steer the car unless your hands were moving slowly and carefully. This is because the number that `roll` returns can be a really big number depending on how much the accelerometer is being turned. Remember, `roll` has a range from -90 to 90.

        # Do This

        Find a way to make `roll` a smaller number while still using it to steer the car. You have all of the math operators available to you for this.

        _Challenge_: Can you keep the car from going off the side of the screen?
      CSD U6 Driver pt 2_2019: |-
        # Limiting Turn

        You might have noticed that it was really hard to steer the car unless your hands were moving slowly and carefully. This is because the number that `roll` returns can be a really big number depending on how much the accelerometer is being turned. Remember, `roll` has a range from -90 to 90.

        # Do This

        Find a way to make `roll` a smaller number while still using it to steer the car. You have all of the math operators available to you for this.

        _Challenge_: Can you keep the car from going off the side of the screen?
      CSD U6 Driver pt1: |-
        # Steering Wheel

        This game is similar to the goalie game that you just played, except a little different. Use your board as a steering wheel for the car (moving side to side). You have to get to the checkered flag at while avoiding the red flags along the way!

        # Do This

        -   Make the car move down the screen while the program runs.
        -   Give the car the ability to steer side to side.

        Think back to the programs you've made up until this point, how can you update these values?
      CSD U6 Driver pt1_2018: |-
        # Steering Wheel

        This game is similar to the goalie game that you just played, except a little different. Use your board as a steering wheel for the car (moving side to side). You have to get to the checkered flag at while avoiding the red flags along the way!

        # Do This

        -   Make the car move down the screen while the program runs.
        -   Give the car the ability to steer side to side.

        Think back to the programs you've made up until this point, how can you update these values?
      CSD U6 Driver pt1_2019: |-
        # Steering Wheel

        This game is similar to the goalie game that you just played, except a little different. Use your board as a steering wheel for the car (moving side to side). You have to get to the checkered flag at while avoiding the red flags along the way!

        # Do This

        -   Make the car move down the screen while the program runs.
        -   Give the car the ability to steer side to side.

        Think back to the programs you've made up until this point, how can you update these values?
      CSD U6 LED all: |-
        # Multi-function Light

        This app should let you choose between three types of lights: on, blink, and pulse.  It should also have a button that turns the light completely off.  Right now only the "on" button works, and the "off" button is completely missing.

        # Do This

        -   Add code to make the "blink" and "pulse" buttons work.
        -   In design mode, add a new "off" button.
        -   Add code to make the "off" button work.
      CSD U6 LED all_2018: |-
        # Multi-function Light

        This app should let you choose between three types of lights: on, blink, and pulse.  It should also have a button that turns the light completely off.  Right now only the "on" button works, and the "off" button is completely missing.

        # Do This

        -   Add code to make the "blink" and "pulse" buttons work.
        -   In design mode, add a new "off" button.
        -   Add code to make the "off" button work.
      CSD U6 LED all_2019: |-
        # Multi-function Light

        This app should let you choose between three types of lights: on, blink, and pulse.  It should also have a button that turns the light completely off.  Right now only the "on" button works, and the "off" button is completely missing.

        # Do This

        -   Add code to make the "blink" and "pulse" buttons work.
        -   In design mode, add a new "off" button.
        -   Add code to make the "off" button work.
      CSD U6 LED toggle: |-
        # Light Switch

        There are three more LED blocks that you haven't used yet. One of them can make the button work like a light switch, turning the LED on when it's off, but off when it's on.

        # Do This

        -   Try the `blink`, `toggle` and `pulse` blocks to see what they do.
        -   Use one of the blocks to make the button work like a light switch.
            -   If the LED is off, the button should turn it on.
            -   If the LED is on, the button should turn it off.
      CSD U6 LED toggle_2018: |-
        # Light Switch

        There are three more LED blocks that you haven't used yet. One of them can make the button work like a light switch, turning the LED on when it's off, but off when it's on.

        # Do This

        -   Try the `blink`, `toggle` and `pulse` blocks to see what they do.
        -   Use one of the blocks to make the button work like a light switch.
            -   If the LED is off, the button should turn it on.
            -   If the LED is on, the button should turn it off.
      CSD U6 LED toggle_2019: |-
        # Light Switch

        There are three more LED blocks that you haven't used yet. One of them can make the button work like a light switch, turning the LED on when it's off, but off when it's on.

        # Do This

        -   Try the `blink`, `toggle` and `pulse` blocks to see what they do.
        -   Use one of the blocks to make the button work like a light switch.
            -   If the LED is off, the button should turn it on.
            -   If the LED is on, the button should turn it off.
      CSD U6 LEDbutton predict embed: |-
        # Using Events

        This program uses events.  Look at the code with a partner and discuss what you think it will do.  Once you have answered the questions click "Run" to check your answer.

        -   Will the light turn on when the program is "Run"?  Why or why not?
      CSD U6 LEDbutton predict embed_2018: |-
        # Using Events

        This program uses events.  Look at the code with a partner and discuss what you think it will do.  Once you have answered the questions click "Run" to check your answer.

        -   Will the light turn on when the program is "Run"?  Why or why not?
      CSD U6 LEDbutton predict embed_2019: |-
        # Using Events

        This program uses events.  Look at the code with a partner and discuss what you think it will do.  Once you have answered the questions click "Run" to check your answer.

        -   Will the light turn on when the program is "Run"?  Why or why not?
      CSD U6 LEDs color: |-
        # Adding Some Color

        You probably noticed when you used `colorLeds[0].on()` in the last level, the LEDs turned on as white. If you don't specify a color, `on()` will turn on all three parts of the LED (red, green, and blue) to produce white. You'll see a new command in the toolbox called `colorLeds[0].color()` which lets you specify a color, either as a string like "blue" or an RGB value using color `color()` command.

        # Do This

        Use the `.color()` command to set each of the color LEDs to a different color.
      CSD U6 LEDs color_2018: |-
        # Adding Some Color

        You probably noticed when you used `colorLeds[0].on()` in the last level, the LEDs turned on as white. If you don't specify a color, `on()` will turn on all three parts of the LED (red, green, and blue) to produce white. You'll see a new command in the toolbox called `colorLeds[0].color()` which lets you specify a color, either as a string like "blue" or an RGB value using color `color()` command.

        # Do This

        Use the `.color()` command to set each of the color LEDs to a different color.
      CSD U6 LEDs color_2019: |-
        # Adding Some Color

        You probably noticed when you used `colorLeds[0].on()` in the last level, the LEDs turned on as white. If you don't specify a color, `on()` will turn on all three parts of the LED (red, green, and blue) to produce white. You'll see a new command in the toolbox called `colorLeds[0].color()` which lets you specify a color, either as a string like "blue" or an RGB value using color `color()` command.

        # Do This

        Use the `.color()` command to set each of the color LEDs to a different color.
      CSD U6 Pedometer: |-
        # Jogger

        This program should use the `shake` event, which is triggered when the board is shaken.  It should add a step to the jogger's total every time the user shakes the board.

        # Do This

        -   Change the event so it triggers every time the board is shaken.
        -   Add code inside the event so that `steps` increases every time the board is shaken.
      CSD U6 Pedometer_2018: |-
        # Jogger

        This program should use the `shake` event, which is triggered when the board is shaken.  It should add a step to the jogger's total every time the user shakes the board.

        # Do This

        -   Change the event so it triggers every time the board is shaken.
        -   Add code inside the event so that `steps` increases every time the board is shaken.
      CSD U6 Pedometer_2019: |-
        # Jogger

        This program should use the `shake` event, which is triggered when the board is shaken.  It should add a step to the jogger's total every time the user shakes the board.

        # Do This

        -   Change the event so it triggers every time the board is shaken.
        -   Add code inside the event so that `steps` increases every time the board is shaken.
      CSD U6 add LED button: |-
        # Using Events

        This program has two buttons.  The "on" button works, but the "off" button still needs to be programmed.

        # Do This

        -   Add code so that the second button turns the LED off.
      CSD U6 add LED button_2018: |-
        # Using Events

        This program has two buttons.  The "on" button works, but the "off" button still needs to be programmed.

        # Do This

        -   Add code so that the second button turns the LED off.
      CSD U6 add LED button_2019: |-
        # Using Events

        This program has two buttons.  The "on" button works, but the "off" button still needs to be programmed.

        # Do This

        -   Add code so that the second button turns the LED off.
      CSD U6 airplane predict markdown: |-
        # Accelerometer

        Look at the code below. What do you think it's going to do? Give it a guess, and run the code to find out!
      CSD U6 airplane predict markdown_2018: |-
        # Accelerometer

        Look at the code below. What do you think it's going to do? Give it a guess, and run the code to find out!
      CSD U6 airplane predict markdown_2019: |-
        # Accelerometer

        Look at the code below. What do you think it's going to do? Give it a guess, and run the code to find out!
      CSD U6 analog challenge: |-
        # Challenge

        _Check with your teacher before pursuing this challenge_

        Now that you've practiced taking input from the various analog sensors and changing their scale to meet your needs, can you come up with an interesting use for sensor data? It's easy to display the raw numbers coming out of a sensor, but far more interesting to present that data in different ways.

        Consider the following ways you might communicate sensor data:

        -   Use the board outputs
        -   Change the width, height, or position of a UI element
        -   Use conditionals to display different images based on sensor values
      CSD U6 analog challenge_2018: |-
        # Challenge

        _Check with your teacher before pursuing this challenge_

        Now that you've practiced taking input from the various analog sensors and changing their scale to meet your needs, can you come up with an interesting use for sensor data? It's easy to display the raw numbers coming out of a sensor, but far more interesting to present that data in different ways.

        Consider the following ways you might communicate sensor data:

        -   Use the board outputs
        -   Change the width, height, or position of a UI element
        -   Use conditionals to display different images based on sensor values
      CSD U6 analog challenge_2019: |-
        # Challenge

        _Check with your teacher before pursuing this challenge_

        Now that you've practiced taking input from the various analog sensors and changing their scale to meet your needs, can you come up with an interesting use for sensor data? It's easy to display the raw numbers coming out of a sensor, but far more interesting to present that data in different ways.

        Consider the following ways you might communicate sensor data:

        -   Use the board outputs
        -   Change the width, height, or position of a UI element
        -   Use conditionals to display different images based on sensor values
      CSD U6 analog change: |-
        # Change Event

        The data event is fine if you don't mind your code running constantly, but sometimes that's not the most efficient solution to your problem. The sensor "change" event only fires if the sensor value has changed since the last reading, which can make sure your program isn't running code when it's not necessary.

        # Do This

        Using the provided event handler, write a program that buzzes the buzzer and updates "temp\_value" whenever the temperature sensor reading changes. Place your thumb over the temperature sensor to get it to change and see how your program responds.
      CSD U6 analog change_2018: |-
        # Change Event

        The data event is fine if you don't mind your code running constantly, but sometimes that's not the most efficient solution to your problem. The sensor "change" event only fires if the sensor value has changed since the last reading, which can make sure your program isn't running code when it's not necessary.

        # Do This

        Using the provided event handler, write a program that buzzes the buzzer and updates "temp\_value" whenever the temperature sensor reading changes. Place your thumb over the temperature sensor to get it to change and see how your program responds.
      CSD U6 analog change_2019: |-
        # Change Event

        The data event is fine if you don't mind your code running constantly, but sometimes that's not the most efficient solution to your problem. The sensor "change" event only fires if the sensor value has changed since the last reading, which can make sure your program isn't running code when it's not necessary.

        # Do This

        Using the provided event handler, write a program that buzzes the buzzer and updates "temp\_value" whenever the temperature sensor reading changes. Place your thumb over the temperature sensor to get it to change and see how your program responds.
      CSD U6 analog data: |-
        # Data Event

        Each of these analog sensors emits a special event called "data" which occurs every time new data comes in from the sensor. Using this event, we can write programs that continually update.

        # Do This

        This is the first program you worked on in this lesson, let's see if we can make it continually update the sound reading using the "data" event.

        -   Create an event handler to respond to sound sensor's "data" event
        -   Move the existing code into your event handler
      CSD U6 analog data_2018: |-
        # Data Event

        Each of these analog sensors emits a special event called "data" which occurs every time new data comes in from the sensor. Using this event, you can rewrite the first program you worked on in this lesson so that it continually updates.

        # Do This

        -   Create an event handler to respond to sound sensor's "data" event
        -   Move the existing code into your event handler
      CSD U6 analog data_2019: |-
        # Data Event

        Each of these analog sensors emits a special event called "data" which occurs every time new data comes in from the sensor. Using this event, you can rewrite the first program you worked on in this lesson so that it continually updates.

        # Do This

        -   Create an event handler to respond to sound sensor's "data" event
        -   Move the existing code into your event handler
      CSD U6 analog light: |-
        # Light Sensor Updates

        This app is very similar to the last, but we've added a button with the ID "update\_button". Write a program that displays the current value of the light sensor every time the update button is clicked.

        # Do This

        Use an event handler to update the text of "light\_value" using the `lightSensor.value` block.
      CSD U6 analog light_2018: |-
        # Light Sensor Updates

        This app is very similar to the last, but we've added a button with the ID "update\_button". Write a program that displays the current value of the light sensor every time the update button is clicked.

        # Do This

        Use an event handler to update the text of "light\_value" using the `lightSensor.value` block.
      CSD U6 analog light_2019: |-
        # Light Sensor Updates

        This app is very similar to the last, but we've added a button with the ID "update\_button". Write a program that displays the current value of the light sensor every time the update button is clicked.

        # Do This

        Use an event handler to update the text of "light\_value" using the `lightSensor.value` block.
      CSD U6 analog rbg 1: |-
        # Displaying Sensor Readings in Color

        In the earlier prediction level you saw how the `setScale()` method can convert the full range of sensor readings (0-1023) into a range that can be used for RGB values (0-255). Let's build on that idea to make an app that can communicate the current value of all three analog sensors with a single color.

        # Do This

        To start, we just need to set the sensor scales correctly - don't worry about actually setting the color of the background yet.

        -   Using the `sensor.setScale()` block, set each of light and sound sensors to the right scale for an RGB color channel.
        -   Create a variable for each of the three colors and assign each one to the value of a different sensor.
        -   Use `console.log()` to test that your variables are in the correct range.

        _Hint: Order matters. You need to set the scale of a sensor before checking its value_

        _Hint: Remember that the temperature sensor can be read in both Celsius and Fahrenheit - either way it should already give you a value that's within the necessary range for RGB_
      CSD U6 analog rbg 1_2018: |-
        # Displaying Sensor Readings in Color

        In the earlier prediction level you saw how the `setScale()` method can convert the full range of sensor readings (0-1023) into a range that can be used for RGB values (0-255). Let's build on that idea to make an app that can communicate the current value of all three analog sensors with a single color.

        # Do This

        To start, we just need to set the sensor scales correctly - don't worry about actually setting the color of the background yet.

        -   Using the `sensor.setScale()` block, set each of light and sound sensors to the right scale for an RGB color channel.
        -   Create a variable for each of the three colors and assign each one to the value of a different sensor.
        -   Use `console.log()` to test that your variables are in the correct range.

        _Hint: Order matters. You need to set the scale of a sensor before checking its value_

        _Hint: Remember that the temperature sensor can be read in both Celsius and Fahrenheit - either way it should already give you a value that's within the necessary range for RGB_
      CSD U6 analog rbg 1_2019: |-
        # Displaying Sensor Readings in Color

        In the earlier prediction level you saw how the `setScale()` method can convert the full range of sensor readings (0-1023) into a range that can be used for RGB values (0-255). Let's build on that idea to make an app that can communicate the current value of all three analog sensors with a single color.

        # Do This

        To start, we just need to set the sensor scales correctly - don't worry about actually setting the color of the background yet.

        -   Using the `sensor.setScale()` block, set each of light and sound sensors to the right scale for an RGB color channel.
        -   Create a variable for each of the three colors and assign each one to the value of a different sensor.
        -   Use `console.log()` to test that your variables are in the correct range.

        _Hint: Order matters. You need to set the scale of a sensor before checking its value_

        _Hint: Remember that the temperature sensor can be read in both Celsius and Fahrenheit - either way it should already give you a value that's within the necessary range for RGB_
      CSD U6 analog rbg 2: |-
        # Putting Color on the Screen

        Now that your sensor data is in a scale that works for RGB, you can go about setting the screen color.

        # Do This

        -   Add a `setProperty()` block and set it to change the screen's background color.
        -   Add an `rgb()` block to the last parameter of `setProperty()`.
        -   Use the three color variables you created as inputs to the `rgb()` block.
      CSD U6 analog rbg 2_2018: |-
        # Putting Color on the Screen

        Now that your sensor data is in a scale that works for RGB, you can go about setting the screen color.

        # Do This

        -   Add a `setProperty()` block and set it to change the screen's background color.
        -   Add an `rgb()` block to the last parameter of `setProperty()`.
        -   Use the three color variables you created as inputs to the `rgb()` block.
      CSD U6 analog rbg 2_2019: |-
        # Putting Color on the Screen

        Now that your sensor data is in a scale that works for RGB, you can go about setting the screen color.

        # Do This

        -   Add a `setProperty()` block and set it to change the screen's background color.
        -   Add an `rgb()` block to the last parameter of `setProperty()`.
        -   Use the three color variables you created as inputs to the `rgb()` block.
      CSD U6 analog rgb 3: |-
        # Continuous Updates

        This sensor-to-color app isn't super useful if it only sets the color once when you start the app. You can use the sensors' "data" event to make your app continually update the background color every time the value changes.

        Move your `setProperty()` block into a an event handler for one of the sensors to make the app update continually.
      CSD U6 analog rgb 3_2018: |-
        # Continuous Updates

        This sensor-to-color app isn't super useful if it only sets the color once when you start the app. You can use the sensors' "data" event to make your app continually update the background color every time the value changes.

        Move your `setProperty()` block into a an event handler for one of the sensors to make the app update continually.
      CSD U6 analog rgb 3_2019: |-
        # Continuous Updates

        This sensor-to-color app isn't super useful if it only sets the color once when you start the app. You can use the sensors' "data" event to make your app continually update the background color every time the value changes.

        Move your `setProperty()` block into a an event handler for one of the sensors to make the app update continually.
      CSD U6 analog sound: |-
        # Reading the Sound Sensor

        The `soundSensor.value` block allows you to get the current sound sensor reading

        # Do This

        In this app we've already added a text label with the id "sound\_value". Using the `soundSensor.value` block, display the value of the sound sensor.

        _Tip: You can drag the `soundSensor.value` block directly into any other block where you could type a value instead._

        ![](https://images.code.org/3bd9ac3f869e42f48aaf190944fe1c22-image-1511293198110.png)
      CSD U6 analog sound_2018: |-
        # Reading the Sound Sensor

        The `soundSensor.value` block allows you to get the current sound sensor reading

        # Do This

        In this app we've already added a text label with the id "sound\_value". Using the `soundSensor.value` block, display the value of the sound sensor.

        _Tip: You can drag the `soundSensor.value` block directly into any other block where you could type a value instead._

        ![](https://images.code.org/3bd9ac3f869e42f48aaf190944fe1c22-image-1511293198110.png)
      CSD U6 analog sound_2019: |-
        # Reading the Sound Sensor

        The `soundSensor.value` block allows you to get the current sound sensor reading

        # Do This

        In this app we've already added a text label with the id "sound\_value". Using the `soundSensor.value` block, display the value of the sound sensor.

        _Tip: You can drag the `soundSensor.value` block directly into any other block where you could type a value instead._

        ![](https://images.code.org/3bd9ac3f869e42f48aaf190944fe1c22-image-1511293198110.png)
      CSD U6 analog temp: |-
        # Make a Thermometer App

        While the light and sound sensors have just a raw value with the `value` property, the temperature sensor is a little bit smarter. Instead of `tempSensor.value`, there are two properties `tempSensor.F` and `tempSensor.C` which convert the raw input value to either Fahrenheit or Celsius.

        # Do This

        Make a simple thermometer app that reads in values from the temperature sensor. Your app can display the temperature in either Fahrenheit or Celsius (or both!)

        -   Using Design Mode, create a button for updating and a label to display the temperature
        -   Add an event handler to respond to your update button being clicked
        -   Add code to your event handler to read the temperature sensor and display the value on screen
      CSD U6 analog temp_2018: |-
        # Make a Thermometer App

        While the light and sound sensors have just a raw value with the `value` property, the temperature sensor is a little bit smarter. Instead of `tempSensor.value`, there are two properties `tempSensor.F` and `tempSensor.C` which convert the raw input value to either Fahrenheit or Celsius.

        # Do This

        Make a simple thermometer app that reads in values from the temperature sensor. Your app can display the temperature in either Fahrenheit or Celsius (or both!)

        -   Using Design Mode, create a button for updating and a label to display the temperature
        -   Add an event handler to respond to your update button being clicked
        -   Add code to your event handler to read the temperature sensor and display the value on screen
      CSD U6 analog temp_2019: |-
        # Make a Thermometer App

        While the light and sound sensors have just a raw value with the `value` property, the temperature sensor is a little bit smarter. Instead of `tempSensor.value`, there are two properties `tempSensor.F` and `tempSensor.C` which convert the raw input value to either Fahrenheit or Celsius.

        # Do This

        Make a simple thermometer app that reads in values from the temperature sensor. Your app can display the temperature in either Fahrenheit or Celsius (or both!)

        -   Using Design Mode, create a button for updating and a label to display the temperature
        -   Add an event handler to respond to your update button being clicked
        -   Add code to your event handler to read the temperature sensor and display the value on screen
      CSD U6 analog threshold: |-
        # Change Threshold

        By default a sensor's "change" event fires every time the sensor value changes at all, even by one. The light and sound sensors are constantly fluctuating, so you probably want the "change" event to be a little less responsive. The `threshold` property allows you to set how much a sensor should change before considering it a "change" event - so setting `soundSensor.threshold = 100` would cause the sound sensor's "change" event only to trigger if its value increased or decreased by at least 100.

        # Do This

        This app changes the background color of the screen whenever the sound sensor value changes, but we want to only respond to big changes in volume (like a loud noise). Use the `soundSensor.threshold` block to fix it.

        -   Add a `soundSensor.threshold` block before the event handler
        -   Test out which how different threshold values impact the "change" event
        -   Choose a threshold value that makes the screen background change only when a loud noise is sensed.

        _Tip: Your threshold depends on how much ambient noise there is in the room, and how much it changes. A threshold that works in a quiet room may not work in a louder classroom._
      CSD U6 analog threshold_2018: |-
        # Change Threshold

        By default a sensor's "change" event fires every time the sensor value changes at all, even by one. The light and sound sensors are constantly fluctuating, so you probably want the "change" event to be a little less responsive. The `threshold` property allows you to set how much a sensor should change before considering it a "change" event - so setting `soundSensor.threshold = 100` would cause the sound sensor's "change" event only to trigger if its value increased or decreased by at least 100.

        # Do This

        This app changes the background color of the screen whenever the sound sensor value changes, but we want to only respond to big changes in volume (like a loud noise). Use the `soundSensor.threshold` block to fix it.

        -   Add a `soundSensor.threshold` block before the event handler
        -   Test out how different threshold values impact the "change" event
        -   Choose a threshold value that makes the screen background change only when a loud noise is sensed.

        _Tip: Your threshold depends on how much ambient noise there is in the room, and how much it changes. A threshold that works in a quiet room may not work in a louder classroom._
      CSD U6 analog threshold_2019: |-
        # Change Threshold

        By default a sensor's "change" event fires every time the sensor value changes at all, even by one. The light and sound sensors are constantly fluctuating, so you probably want the "change" event to be a little less responsive. The `threshold` property allows you to set how much a sensor should change before considering it a "change" event - so setting `soundSensor.threshold = 100` would cause the sound sensor's "change" event only to trigger if its value increased or decreased by at least 100.

        # Do This

        This app changes the background color of the screen whenever the sound sensor value changes, but we want to only respond to big changes in volume (like a loud noise). Use the `soundSensor.threshold` block to fix it.

        -   Add a `soundSensor.threshold` block before the event handler
        -   Test out how different threshold values impact the "change" event
        -   Choose a threshold value that makes the screen background change only when a loud noise is sensed.

        _Tip: Your threshold depends on how much ambient noise there is in the room, and how much it changes. A threshold that works in a quiet room may not work in a louder classroom._
      CSD U6 array piano: |-
        # Piano Panic

        So far you’ve just been using the elements of an array. Now, you're going to change what's inside the array.

        Our good friend the piano is back, except now it plays notes from two arrays: `notes`, which holds natural notes (C, D, E, F, G, A, B), and `sharpNotes`, which holds sharp notes (C#, D#, F#, G#, A#).

        # Do this

        The `sharpNotes` array only has one item inside of it right now.

        -   Fix the array so that the sharp keys on the piano can actually play the right note.

        _Hint: Modifying arrays is much easier in text mode.  You can always switch between block and text mode by clicking the button at the top right of your code workspace._
      CSD U6 array piano_2018: |-
        # Piano Panic

        So far you’ve just been using the elements of an array. Now, you're going to change what's inside the array.

        Our good friend the piano is back, except now it plays notes from two arrays: `notes`, which holds natural notes (C, D, E, F, G, A, B), and `sharpNotes`, which holds sharp notes (C#, D#, F#, G#, A#).

        # Do this

        The `sharpNotes` array only has one item inside of it right now.

        -   Fix the array so that the sharp keys on the piano can actually play the right note.

        _Hint: Modifying arrays is much easier in text mode.  You can always switch between block and text mode by clicking the button at the top right of your code workspace._
      CSD U6 array piano_2019: |-
        # Piano Panic

        So far you’ve just been using the elements of an array. Now, you're going to change what's inside the array.

        Our good friend the piano is back, except now it plays notes from two arrays: `notes`, which holds natural notes (C, D, E, F, G, A, B), and `sharpNotes`, which holds sharp notes (C#, D#, F#, G#, A#).

        # Do this

        The `sharpNotes` array only has one item inside of it right now.

        -   Fix the array so that the sharp keys on the piano can actually play the right note.

        _Hint: Modifying arrays is much easier in text mode.  You can always switch between block and text mode by clicking the button at the top right of your code workspace._
      CSD U6 arrays video: |-
        ## Zu berücksichtigende Fragen

        -   Wann könnte ein Array nützlicher sein als eine Variable?
        -   Warum musst du immer ein Array einer Variablen zuweisen?
        -   Wie kannst du auf die Elemente in Ihrem Array zugreifen?
      CSD U6 board getters: |-
        # Using the Circuit Playground

        You can also use getters and setters with the Circuit Playground.  For this level, you'll need to plug in your board.

        Read through the code and predict what the program will do, then hit "Run" to test your prediction.
      CSD U6 board getters_2018: |-
        # Using the Circuit Playground

        You can also use getters and setters with the Circuit Playground.  For this level, you'll need to plug in your board.

        Read through the code and predict what the program will do, then hit "Run" to test your prediction.
      CSD U6 board getters_2019: |-
        # Using the Circuit Playground

        You can also use getters and setters with the Circuit Playground.  For this level, you'll need to plug in your board.

        Read through the code and predict what the program will do, then hit "Run" to test your prediction.
      CSD U6 challenge motorcycle_2018: |-
        # Challenge

        Use this program to experiment some more with getting and setting properties. Some ideas you might try include:

        -   Use the toggle switch to change the motorcycle's movement to go up and down.
        -   Use a dropdown with color names to change the motorcycle's color
        -   Make the buzzer or LED turn on when the motorcycle reaches the top or bottom of the screen.
      CSD U6 challenge motorcycle_2019: |-
        # Challenge

        Use this program to experiment some more with getting and setting properties. Some ideas you might try include:

        -   Use the toggle switch to change the motorcycle's movement to go up and down.
        -   Use a dropdown with color names to change the motorcycle's color
        -   Make the buzzer or LED turn on when the motorcycle reaches the top or bottom of the screen.
      CSD U6 change: |-
        # Change

        In the last level, the program only got the interval value from the slider when you pressed the left button.  Sometimes, though, you'll want to change the interval of the LED as soon as the user chooses a new value.   For that, you'll need the "change" event.

        # Do This

        -   Look at the first event block in the program and find where it says "change".
        -   Inside the event block, get the interval value from the slider and use it to make the LED blink at that new rate.
        -   Run your program, moving the slider to see whether the LED speed changes automatically.
      CSD U6 change_2018: |-
        # Change

        In the last level, the program only got the interval value from the slider when you pressed the left button.  Sometimes, though, you'll want to change the interval of the LED as soon as the user chooses a new value.   For that, you'll need the "change" event.

        # Do This

        -   Look at the first event block in the program and find where it says "change".
        -   Inside the event block, get the interval value from the slider and use it to make the LED blink at that new rate.
        -   Run your program, moving the slider to see whether the LED speed changes automatically.
      CSD U6 change_2019: |-
        # Change

        In the last level, the program only got the interval value from the slider when you pressed the left button.  Sometimes, though, you'll want to change the interval of the LED as soon as the user chooses a new value.   For that, you'll need the "change" event.

        # Do This

        -   Look at the first event block in the program and find where it says "change".
        -   Inside the event block, get the interval value from the slider and use it to make the LED blink at that new rate.
        -   Run your program, moving the slider to see whether the LED speed changes automatically.
      CSD U6 circuit createButton: |-
        <div style="float: right" markdown="1">

        ![expandable](https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_alligator.png)

        </div>

        # Make Your Own Buttons

        Similar to LEDs, buttons are a really simple circuit that you can add to your board pretty easily. Like LEDs, buttons should be wired from a numbered pin to a ground pin, but unlike LEDs, a button circuit should be disconnected in the middle. When you connect the circuit, it will produce a button press event.

        # Do This

        -   Grab two wires.
        -   Connect one wire to an open numbered pin.
        -   Connect the second wire to a ground pin.
        -   Update line 2 so that it's referencing the pin you chose.
        -   Run the provided code.
        -   With the program running, touch the unconnected ends of both wires together to "press" the button.

        _Tip: A button circuit can be made with many different kinds of materials, as long as they are electrically conductive. Try making buttons with foil, silverware, or paper clips._
      CSD U6 circuit createButton_2018: |-
        <div style="float: right" markdown="1">

        ![expandable](https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_alligator.png)

        </div>

        # Make Your Own Buttons

        Similar to LEDs, buttons are a really simple circuit that you can add to your board pretty easily. Like LEDs, buttons should be wired from a numbered pin to a ground pin, but unlike LEDs, a button circuit should be disconnected in the middle. When you connect the circuit, it will produce a button press event.

        # Do This

        -   Grab two wires.
        -   Connect one wire to an open numbered pin.
        -   Connect the second wire to a ground pin.
        -   Update line 2 so that it's referencing the pin you chose.
        -   Run the provided code.
        -   With the program running, touch the unconnected ends of both wires together to "press" the button.

        _Tip: A button circuit can be made with many different kinds of materials, as long as they are electrically conductive. Try making buttons with foil, silverware, or paper clips._
      CSD U6 circuit createButton_2019: |-
        <div style="float: right" markdown="1">

        ![expandable](https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_alligator.png)

        </div>

        # Make Your Own Buttons

        Similar to LEDs, buttons are a really simple circuit that you can add to your board pretty easily. Like LEDs, buttons should be wired from a numbered pin to a ground pin, but unlike LEDs, a button circuit should be disconnected in the middle. When you connect the circuit, it will produce a button press event.

        # Do This

        -   Grab two wires.
        -   Connect one wire to an open numbered pin.
        -   Connect the second wire to a ground pin.
        -   Update line 2 so that it's referencing the pin you chose.
        -   Run the provided code.
        -   With the program running, touch the unconnected ends of both wires together to "press" the button.

        _Tip: A button circuit can be made with many different kinds of materials, as long as they are electrically conductive. Try making buttons with foil, silverware, or paper clips._
      CSD U6 circuit createLed: |-
        # Creating Board Objects

        You might have noticed that the new blocks we're using are in a different toolbox drawer. The **Circuit** drawer contains all of the board objects that are built into the Circuit Playground, but when you start wiring your own circuits the Maker Toolkit no longer knows where everything is.

        The new **Maker** drawer contains general purpose commands instead of ones that are customized for the Circuit Playground. In addition to the `pinMode()` and `digitalWrite()` commands you've seen, it includes commands to create new objects on the board that can be programmed in the same way as the blocks in the **Circuit** drawer. The `var myLed = createLed()` command, for example, creates a new LED object that behaves just like the `led` blocks you've been using.

        # Do This

        Now that you're creating new board objects that we don't have blocks for, you'll need to work in text mode. You can still drag out blocks that you're familiar with from the **Circuit** drawer, you'll just need to change the name of the object.

        -   Keep your LED wired just as it was before (connected to pin 2)
        -   Make sure you're in text mode, not block mode.
        -   Drag out an `led.blink()` block below the comment `// Blink myLed`.
        -   Replace the text `led` with `myLed`.
        -   Test your code.
      CSD U6 circuit createLed_2018: |-
        # Creating Board Objects

        You might have noticed that the new blocks we're using are in a different toolbox drawer. The **Circuit** drawer contains all of the board objects that are built into the Circuit Playground, but when you start wiring your own circuits the Maker Toolkit no longer knows where everything is.

        The new **Maker** drawer contains general purpose commands instead of ones that are customized for the Circuit Playground. In addition to the `pinMode()` and `digitalWrite()` commands you've seen, it includes commands to create new objects on the board that can be programmed in the same way as the blocks in the **Circuit** drawer. The `var myLed = createLed()` command, for example, creates a new LED object that behaves just like the `led` blocks you've been using.

        # Do This

        Now that you're creating new board objects that we don't have blocks for, you'll need to work in text mode. You can still drag out blocks that you're familiar with from the **Circuit** drawer, you'll just need to change the name of the object.

        -   Keep your LED wired just as it was before (connected to pin 2)
        -   Make sure you're in text mode, not block mode.
        -   Drag out an `led.blink()` block below the comment `// Blink myLed`.
        -   Replace the text `led` with `myLed`.
        -   Test your code.
      CSD U6 circuit createLed_2019: |-
        # Creating Board Objects

        You might have noticed that the new blocks we're using are in a different toolbox drawer. The **Circuit** drawer contains all of the board objects that are built into the Circuit Playground, but when you start wiring your own circuits the Maker Toolkit no longer knows where everything is.

        The new **Maker** drawer contains general purpose commands instead of ones that are customized for the Circuit Playground. In addition to the `pinMode()` and `digitalWrite()` commands you've seen, it includes commands to create new objects on the board that can be programmed in the same way as the blocks in the **Circuit** drawer. The `var myLed = createLed()` command, for example, creates a new LED object that behaves just like the `led` blocks you've been using.

        # Do This

        Now that you're creating new board objects that we don't have blocks for, you'll need to work in text mode. You can still drag out blocks that you're familiar with from the **Circuit** drawer, you'll just need to change the name of the object.

        -   Keep your LED wired just as it was before (connected to pin 2)
        -   Make sure you're in text mode, not block mode.
        -   Drag out an `led.blink()` block below the comment `// Blink myLed`.
        -   Replace the text `led` with `myLed`.
        -   Test your code.
      CSD U6 circuit multi led: |-
        # Wiring Multiple LEDs

        Using the `createLed()` block you can connect and control as many LEDs as your board has room for. Each LED needs to be connected to a separate numbered pin, but they can all share the same ground pin.

        # Do This

        Leave the current LED connected to pin 2, but add another one to a numbered pin of your choice. For your new LED:

        -   Add a `var myLed = createLed()` block.
        -   Replace the variable label `myLed` with a unique label.
        -   Make sure you're in text mode, not block mode.
        -   Add an `led.blink()` command.
        -   Replace the text `led` with your new LED variable.
        -   Test your code.

        _Challenge: Try adding a third LED and make all three LED blink at different intervals._
      CSD U6 circuit multi led_2018: |-
        # Wiring Multiple LEDs

        Using the `createLed()` block you can connect and control as many LEDs as your board has room for. Each LED needs to be connected to a separate numbered pin, but they can all share the same ground pin.

        # Do This

        Leave the current LED connected to pin 2, but add another one to a numbered pin of your choice. For your new LED:

        -   Add a `var myLed = createLed()` block.
        -   Replace the variable label `myLed` with a unique label.
        -   Make sure you're in text mode, not block mode.
        -   Add an `led.blink()` command.
        -   Replace the text `led` with your new LED variable.
        -   Test your code.

        _Challenge: Try adding a third LED and make all three LED blink at different intervals._
      CSD U6 circuit multi led_2019: |-
        # Wiring Multiple LEDs

        Using the `createLed()` block you can connect and control as many LEDs as your board has room for. Each LED needs to be connected to a separate numbered pin, but they can all share the same ground pin.

        # Do This

        Leave the current LED connected to pin 2, but add another one to a numbered pin of your choice. For your new LED:

        -   Add a `var myLed = createLed()` block.
        -   Replace the variable label `myLed` with a unique label.
        -   Make sure you're in text mode, not block mode.
        -   Add an `led.blink()` command.
        -   Replace the text `led` with your new LED variable.
        -   Test your code.

        _Challenge: Try adding a third LED and make all three LED blink at different intervals._
      CSD U6 circuit pinMode: |-
        # Wire a Circuit

        You can use any of the numbered pads to add additional circuits to your board. Let's use pin 2 to add another LED.

        # Do This

        -   Using a wire, connect pin 2 to the positive (+) side of an LED
        -   Using another wire, connect the negative (-) side of the LED to a ground (GND) pin (it doesn't matter which one)
        -   Run this program to test your circuit. If it worked, your LED should turn on.

        _Debugging Tip: LEDs only work if the electricity is flowing from positive to negative. If your LED doesn't light up, make sure that it's oriented the right way._
      CSD U6 circuit pinMode_2018: |-
        # Wire a Circuit

        You can use any of the numbered pads to add additional circuits to your board. Let's use pin 2 to add another LED.

        # Do This

        -   Using a wire, connect pin 2 to the positive (+) side of an LED
        -   Using another wire, connect the negative (-) side of the LED to a ground (GND) pin (it doesn't matter which one)
        -   Run this program to test your circuit. If it worked, your LED should turn on.

        _Debugging Tip: LEDs only work if the electricity is flowing from positive to negative. If your LED doesn't light up, make sure that it's oriented the right way._
      CSD U6 circuit pinMode_2019: |-
        # Wire a Circuit

        You can use any of the numbered pads to add additional circuits to your board. Let's use pin 2 to add another LED.

        # Do This

        -   Using a wire, connect pin 2 to the positive (+) side of an LED
        -   Using another wire, connect the negative (-) side of the LED to a ground (GND) pin (it doesn't matter which one)
        -   Run this program to test your circuit. If it worked, your LED should turn on.

        _Debugging Tip: LEDs only work if the electricity is flowing from positive to negative. If your LED doesn't light up, make sure that it's oriented the right way._
      CSD U6 circuit predict multi: |-
        # Make a Prediction

        All of the devices that you've used so far are actually circuits connected to numbered pins! Look for **#13** on your board to see which circuit is connected to pin 13, then read through this code and predict what will happen when the program is run.
      CSD U6 circuit predict multi_2018: |-
        # Make a Prediction

        All of the devices that you've used so far are actually circuits connected to numbered pins! Look for **#13** on your board to see which circuit is connected to pin 13, then read through this code and predict what will happen when the program is run.
      CSD U6 circuit predict multi_2019: |-
        # Make a Prediction

        All of the devices that you've used so far are actually circuits connected to numbered pins! Look for **#13** on your board to see which circuit is connected to pin 13, then read through this code and predict what will happen when the program is run.
      CSD U6 circuit smart bike blinker buttons: |-
        # Smart Bike - Blinker Controls

        With your turn signal LEDs hooked up, you just need to program some buttons to control them. You may want to place buttons elsewhere on the bike to make controlling your turn signals easier, but for now we'll just use the built in left and right buttons.

        # Do This

        -   Add event handlers to blink the left turn signal when the left button is pressed.
        -   Add event handlers to blink the right turn signal when the right button is pressed.
        -   Test your code!

        _Hint: You'll need to be in text mode to make the blinkers work, since there are no built-in blocks for the elements that you add on to the board._
      CSD U6 circuit smart bike blinker buttons_2018: |-
        # Smart Bike - Blinker Controls

        With your turn signal LEDs hooked up, you just need to program some buttons to control them. You may want to place buttons elsewhere on the bike to make controlling your turn signals easier, but for now we'll just use the built in left and right buttons.

        # Do This

        -   Add event handlers to blink the left turn signal when the left button is pressed.
        -   Add event handlers to blink the right turn signal when the right button is pressed.
        -   Test your code!

        _Hint: You'll need to be in text mode to make the blinkers work, since there are no built-in blocks for the elements that you add on to the board._
      CSD U6 circuit smart bike blinker buttons_2019: |-
        # Smart Bike - Blinker Controls

        With your turn signal LEDs hooked up, you just need to program some buttons to control them. You may want to place buttons elsewhere on the bike to make controlling your turn signals easier, but for now we'll just use the built in left and right buttons.

        # Do This

        -   Add event handlers to blink the left turn signal when the left button is pressed.
        -   Add event handlers to blink the right turn signal when the right button is pressed.
        -   Test your code!

        _Hint: You'll need to be in text mode to make the blinkers work, since there are no built-in blocks for the elements that you add on to the board._
      CSD U6 circuit smart bike blinkers: "# Smart Bike - Blinkers\n\nUsing your planning
        guide, wire up the two LEDs that will serve as the blinkers. In order to make
        sure that the blinkers can be mounted at the end of the handlebars, make sure
        you wire them so that they can stretch out in opposite directions.\n\n# Do
        This\n\nUsing alligator clips, wire, or other conductive material, connect
        two LEDs to your board, one for each turn signal blinker.\n\n-   Hook up each
        LED to a different numbered pin on the board.\n-   Use the `createLed()` block
        to create an LED object for each blinker.\n\n_Tip: Make your wiring easier
        by considering how your blinkers will be mounted when selecting a pin to use._ "
      CSD U6 circuit smart bike blinkers_2018: "# Smart Bike - Blinkers\n\nUsing your
        planning guide, wire up the two LEDs that will serve as the blinkers. In order
        to make sure that the blinkers can be mounted at the end of the handlebars,
        make sure you wire them so that they can stretch out in opposite directions.\n\n#
        Do This\n\nUsing alligator clips, wire, or other conductive material, connect
        two LEDs to your board, one for each turn signal blinker.\n\n-   Hook up each
        LED to a different numbered pin on the board.\n-   Use the `createLed()` block
        to create an LED object for each blinker.\n\n_Tip: Make your wiring easier
        by considering how your blinkers will be mounted when selecting a pin to use._ "
      CSD U6 circuit smart bike blinkers_2019: "# Smart Bike - Blinkers\n\nUsing your
        planning guide, wire up the two LEDs that will serve as the blinkers. In order
        to make sure that the blinkers can be mounted at the end of the handlebars,
        make sure you wire them so that they can stretch out in opposite directions.\n\n#
        Do This\n\nUsing alligator clips, wire, or other conductive material, connect
        two LEDs to your board, one for each turn signal blinker.\n\n-   Hook up each
        LED to a different numbered pin on the board.\n-   Use the `createLed()` block
        to create an LED object for each blinker.\n\n_Tip: Make your wiring easier
        by considering how your blinkers will be mounted when selecting a pin to use._ "
      CSD U6 circuit smart bike buzzer: |-
        # Smart Bike - Buzzer

        Now that we know how to add more buttons, you can add a button to control the smart bike's horn.

        # Do This

        Using the button that you've already wired to the board, find a good spot to place your horn button. Then:

        -   Create a button object for your horn button
        -   Add an event handler to buzz when button is pressed

        _Hint: The button object that you create won't be in the `onBoardEvent()` dropdown, so you'll need to type the name you've chosen in. Make sure not to use quotation marks!_
      CSD U6 circuit smart bike buzzer_2018: |-
        # Smart Bike - Buzzer

        Now that we know how to add more buttons, you can add a button to control the smart bike's horn.

        # Do This

        Using the button that you've already wired to the board, find a good spot to place your horn button. Then:

        -   Create a button object for your horn button
        -   Add an event handler to buzz when button is pressed

        _Hint: The button object that you create won't be in the `onBoardEvent()` dropdown, so you'll need to type the name you've chosen in. Make sure not to use quotation marks!_
      CSD U6 circuit smart bike buzzer_2019: |-
        # Smart Bike - Buzzer

        Now that we know how to add more buttons, you can add a button to control the smart bike's horn.

        # Do This

        Using the button that you've already wired to the board, find a good spot to place your horn button. Then:

        -   Create a button object for your horn button
        -   Add an event handler to buzz when button is pressed

        _Hint: The button object that you create won't be in the `onBoardEvent()` dropdown, so you'll need to type the name you've chosen in. Make sure not to use quotation marks!_
      CSD U6 circuit smart bike final: |-
        # Smart Bike - Final Touches

        At this point your smart bike should have all of its basic functionality in place. Now is your chance to add any finishing touches.

        # Do This

        You may want to divide and conquer at this point, allowing some members of your group to focus on the physical aspects of the prototype while others work on improving the code. As this is a prototype, don't worry about making everything perfect, but do try to ensure that the prototype communicates your design well enough to test and get feedback.
      CSD U6 circuit smart bike final_2018: |-
        # Smart Bike - Final Touches

        At this point your smart bike should have all of its basic functionality in place. Now is your chance to add any finishing touches.

        # Do This

        You may want to divide and conquer at this point, allowing some members of your group to focus on the physical aspects of the prototype while others work on improving the code. As this is a prototype, don't worry about making everything perfect, but do try to ensure that the prototype communicates your design well enough to test and get feedback.
      CSD U6 circuit smart bike final_2019: |-
        # Smart Bike - Final Touches

        At this point your smart bike should have all of its basic functionality in place. Now is your chance to add any finishing touches.

        # Do This

        You may want to divide and conquer at this point, allowing some members of your group to focus on the physical aspects of the prototype while others work on improving the code. As this is a prototype, don't worry about making everything perfect, but do try to ensure that the prototype communicates your design well enough to test and get feedback.
      CSD U6 circuit smart bike light: |-
        # Smart Bike - Headlight

        The last part of the smart bike plan that we need to figure out is the automatic headlight.

        # Do This

        First you'll need to decide what to use for your headlight. You could add another LED circuit, or perhaps you can find a way to mount the board that allows for using the color LEDs as a headlight. Once you've figured out the physical layout of your lights, add code to your program that turns on and off the headlight based on how light or dark it is.

        _Hint: If you're using the built-in color LEDs, you might need to protect the light sensor to make sure that it's responding to the ambient light level and not the light from the LEDs._
      CSD U6 circuit smart bike light_2018: |-
        # Smart Bike - Headlight

        The last part of the smart bike plan that we need to figure out is the automatic headlight.

        # Do This

        First you'll need to decide what to use for your headlight. You could add another LED circuit, or perhaps you can find a way to mount the board that allows for using the color LEDs as a headlight. Once you've figured out the physical layout of your lights, add code to your program that turns on and off the headlight based on how light or dark it is.

        _Hint: If you're using the built-in color LEDs, you might need to protect the light sensor to make sure that it's responding to the ambient light level and not the light from the LEDs._
      CSD U6 circuit smart bike light_2019: |-
        # Smart Bike - Headlight

        The last part of the smart bike plan that we need to figure out is the automatic headlight.

        # Do This

        First you'll need to decide what to use for your headlight. You could add another LED circuit, or perhaps you can find a way to mount the board that allows for using the color LEDs as a headlight. Once you've figured out the physical layout of your lights, add code to your program that turns on and off the headlight based on how light or dark it is.

        _Hint: If you're using the built-in color LEDs, you might need to protect the light sensor to make sure that it's responding to the ambient light level and not the light from the LEDs._
      CSD U6 colorLED on: |-
        <img src="//curriculum.code.org/images/circuitplayground/colorLedonoff.gif" style="float: right; margin: 10px;">

        # colorLeds

        The color LEDs can use the same basic commands that you used with the red LED, such as `on()` and `off()`. This program should turn on and off the bottom LEDs as shown in the picture, but only one LED is working.

        # Do This

        -   Read and run the code to see how the program turns the bottom left LED on and off.
        -   Add more code to make both bottom LEDs turn on and off.
      CSD U6 colorLED on_2018: |-
        <img src="//curriculum.code.org/images/circuitplayground/colorLedonoff.gif" style="float: right; margin: 10px;">

        # colorLeds

        The color LEDs can use the same basic commands that you used with the red LED, such as `on()` and `off()`. This program should turn on and off the bottom LEDs as shown in the picture, but only one LED is working.

        # Do This

        -   Read and run the code to see how the program turns the bottom left LED on and off.
        -   Add more code to make both bottom LEDs turn on and off.
      CSD U6 colorLED on_2019: |-
        <img src="//curriculum.code.org/images/circuitplayground/colorLedonoff.gif" style="float: right; margin: 10px;">

        # colorLeds

        The color LEDs can use the same basic commands that you used with the red LED, such as `on()` and `off()`. This program should turn on and off the bottom LEDs as shown in the picture, but only one LED is working.

        # Do This

        -   Read and run the code to see how the program turns the bottom left LED on and off.
        -   Add more code to make both bottom LEDs turn on and off.
      CSD U6 colorLeds debug: |-
        <img src="https://images.code.org/e055be621221385d3503962bee5aa616-image-1491493475417.44.28.png" style="width:250px; float:right">

        # Debug: colorLeds

        Can you debug the index values so that the rainbow shows up on the board like in the picture?
      CSD U6 colorLeds debug_2018: |-
        <img src="https://images.code.org/723f036c40ef2770426d5d437e69fcde-image-1527268321449.png" style="width:250px; float:right">

        # Debug: colorLeds

        Can you debug the index values so that the rainbow shows up on the board like in the picture?
      CSD U6 colorLeds debug_2019: |-
        <img src="https://images.code.org/723f036c40ef2770426d5d437e69fcde-image-1527268321449.png" style="width:250px; float:right">

        # Debug: colorLeds

        Can you debug the index values so that the rainbow shows up on the board like in the picture?
      CSD U6 colorLeds intensity: |-
        # Changing Brightness

        The `intensity()` command lets you set an LED's brightness (or _intensity_) from 0 - 100. This program lets you choose three levels of brightness for your rainbow lights, but the medium level doesn't work yet.

        # Do This

        -   Read the program and see how the "Bright" and "Dim" buttons work.
        -   Add code to make the "Medium" button make the rainbow a medium level of brightness (between "Bright" and "Dim"). ([Show me where](#triggercallout=code_triggered))
      CSD U6 colorLeds intensity_2018: |-
        # Changing Brightness

        The `intensity()` command lets you set an LED's brightness (or _intensity_) from 0 - 100. This program lets you choose three levels of brightness for your rainbow lights, but the medium level doesn't work yet.

        # Do This

        -   Read the program and see how the "Bright" and "Dim" buttons work.
        -   Add code to make the "Medium" button make the rainbow a medium level of brightness (between "Bright" and "Dim"). ([Show me where](#triggercallout=code_triggered))
      CSD U6 colorLeds intensity_2019: |-
        # Changing Brightness

        The `intensity()` command lets you set an LED's brightness (or _intensity_) from 0 - 100. This program lets you choose three levels of brightness for your rainbow lights, but the medium level doesn't work yet.

        # Do This

        -   Read the program and see how the "Bright" and "Dim" buttons work.
        -   Add code to make the "Medium" button make the rainbow a medium level of brightness (between "Bright" and "Dim"). ([Show me where](#triggercallout=code_triggered))
      CSD U6 colorLeds light pattern: |-
        # Light Patterns

        This app already has one light pattern program, which can be activated by clicking a button. Notice that we put this pattern into a function to make the code cleaner and clearer.

        # Do This

        Create a light pattern function of your own - maybe the colors of your favorite holiday, college, sports team, or try to create an image with the lights.

        After you've created your new function, add a button and event handler so that you can switch between the two light patterns.
      CSD U6 colorLeds light pattern_2018: |-
        # Light Patterns

        This app already has one light pattern program, which can be activated by clicking a button. Notice that we put this pattern into a function to make the code cleaner and clearer.

        # Do This

        Create a light pattern function of your own - maybe the colors of your favorite holiday, college, sports team, or try to create an image with the lights.

        After you've created your new function, add a button and event handler so that you can switch between the two light patterns.
      CSD U6 colorLeds light pattern_2019: |-
        # Light Patterns

        This app already has one light pattern program, which can be activated by clicking a button. Notice that we put this pattern into a function to make the code cleaner and clearer.

        # Do This

        Create a light pattern function of your own - maybe the colors of your favorite holiday, college, sports team, or try to create an image with the lights.

        After you've created your new function, add a button and event handler so that you can switch between the two light patterns.
      CSD U6 colorLeds predict embed: |-
        # colorLEDs

        This program uses the colorLEDs array, which lets you control the color LEDs in your Circuit Playground.

        What do you think this code will do?  Write your prediction in the box below, then run the code to see what happens.
      CSD U6 colorLeds predict embed_2018: |-
        # colorLEDs

        This program uses the colorLEDs array, which lets you control the color LEDs in your Circuit Playground.

        What do you think this code will do?  Write your prediction in the box below, then run the code to see what happens.
      CSD U6 colorLeds predict embed_2019: |-
        # colorLEDs

        This program uses the colorLEDs array, which lets you control the color LEDs in your Circuit Playground.

        What do you think this code will do?  Write your prediction in the box below, then run the code to see what happens.
      CSD U6 create LED app: |-
        # Make Your App - The Screen

        Now, you and your partner can make your own app using the LED.  Discuss with your partner what kind of app you want to make.

        # Do This

        -   Discuss with your partner what screen elements you will need in your app.  Do you want...
            -   Buttons?
            -   Images?
            -   Text?
        -   In Design Mode, add the elements, making sure you give each a meaningful ID.
      CSD U6 create LED app 2: |-
        # Make Your App - The Code

        Next, you'll need to add the code that makes your app work.

        # Do This

        -   Discuss with your partner what code you will need in your app.  Do you need...
            -   Events?
            -   Variables?
            -   Setters?
            -   Random Numbers?
        -   In Code Mode, add in the code that will make your app work.
      CSD U6 create LED app 2_2018: |-
        # Make Your App - The Code

        Next, you'll need to add the code that makes your app work.

        # Do This

        -   Discuss with your partner what code you will need in your app.  Do you need...
            -   Events?
            -   Variables?
            -   Setters?
            -   Random Numbers?
        -   In Code Mode, add in the code that will make your app work.
      CSD U6 create LED app 2_2019: |-
        # Make Your App - The Code

        Next, you'll need to add the code that makes your app work.

        # Do This

        -   Discuss with your partner what code you will need in your app.  Do you need...
            -   Events?
            -   Variables?
            -   Setters?
            -   Random Numbers?
        -   In Code Mode, add in the code that will make your app work.
      CSD U6 create LED app_2018: |-
        # Make Your App - The Screen

        Now, you and your partner can make your own app using the LED.  Discuss with your partner what kind of app you want to make.

        # Do This

        -   Discuss with your partner what screen elements you will need in your app.  Do you want...
            -   Buttons?
            -   Images?
            -   Text?
        -   In Design Mode, add the elements, making sure you give each a meaningful ID.
      CSD U6 create LED app_2019: |-
        # Make Your App - The Screen

        Now, you and your partner can make your own app using the LED.  Discuss with your partner what kind of app you want to make.

        # Do This

        -   Discuss with your partner what screen elements you will need in your app.  Do you want...
            -   Buttons?
            -   Images?
            -   Text?
        -   In Design Mode, add the elements, making sure you give each a meaningful ID.
      CSD U6 design motorcycle: |-
        # Add Your Own Elements

        Now it's time to add some elements of your own. The motorcycle should be able to move up and down right now, but how can you control its speed?

        # Do This

        -   Add a slider in design mode.
            -   Make sure you set the min and max values of the slider in design mode.
        -   Create an event that will trigger when the slider value is changed.
        -   Add code to get the slider value and store it into the `speed` variable when the event is triggered.
      CSD U6 design motorcycle_2018: |-
        # Add Your Own Elements

        Now it's time to add some elements of your own. The motorcycle should be able to move up and down right now, but how can you control its speed?

        # Do This

        -   Add a slider in design mode.
            -   Make sure you set the min and max values of the slider in design mode.
        -   Create an event that will trigger when the slider value is changed.
        -   Add code to get the slider value and store it into the `speed` variable when the event is triggered.
      CSD U6 design motorcycle_2019: |-
        # Add Your Own Elements

        Now it's time to add some elements of your own. The motorcycle should be able to move up and down right now, but how can you control its speed?

        # Do This

        -   Add a slider in design mode.
            -   Make sure you set the min and max values of the slider in design mode.
        -   Create an event that will trigger when the slider value is changed.
        -   Add code to get the slider value and store it into the `speed` variable when the event is triggered.
      CSD U6 directional LEDs roll: |-
        # Roll

        This program should display "Left" or "Right" on the screen, depending on which way the board is tilted.

        # Do this

        -   Use the "roll" property of the accelerometer to determine whether the board is tilted to the left or right.
        -   Use a conditional to change the text for the "direction" element to be either "Left" or "Right", depending on the board's orientation.
      CSD U6 directional LEDs roll_2018: |-
        # Roll

        This program should display "Left" or "Right" on the screen, depending on which way the board is tilted.

        # Do this

        -   Use the "roll" property of the accelerometer to determine whether the board is tilted to the left or right.
        -   Use a conditional to change the text for the "direction" element to be either "Left" or "Right", depending on the board's orientation.
      CSD U6 directional LEDs roll_2019: |-
        # Roll

        This program should display "Left" or "Right" on the screen, depending on which way the board is tilted.

        # Do this

        -   Use the "roll" property of the accelerometer to determine whether the board is tilted to the left or right.
        -   Use a conditional to change the text for the "direction" element to be either "Left" or "Right", depending on the board's orientation.
      CSD U6 directional leds pitch: |-
        # Pitch

        This program lights the top LEDs (0 and 9) when you tilt the board forward. If you tilt the board back, the LEDs at the bottom (4 and 5) should light.

        # Do This

        -   Use the board's pitch to make LEDs 4 and 5 light up when you tilt the board back.
        -   Run your code and test it a few times.
      CSD U6 directional leds pitch_2018: |-
        # Pitch

        This program lights the top LEDs (0 and 9) when you tilt the board forward. If you tilt the board back, the LEDs at the bottom (4 and 5) should light.

        # Do This

        -   Use the board's pitch to make LEDs 4 and 5 light up when you tilt the board back.
        -   Run your code and test it a few times.
      CSD U6 directional leds pitch_2019: |-
        # Pitch

        This program lights the top LEDs (0 and 9) when you tilt the board forward. If you tilt the board back, the LEDs at the bottom (4 and 5) should light.

        # Do This

        -   Use the board's pitch to make LEDs 4 and 5 light up when you tilt the board back.
        -   Run your code and test it a few times.
      CSD U6 emoji race demo: |-
        # Emoji Race!

        This is an example of a race game that you'll build by the end of this lesson. To play, pair up with another student. The student on the left will the click the left button on the Circuit Playground as fast as they can, while the student on the right clicks the right button. Whoever can get their emoji to the bottom of the screen first wins.

        # Do This

        Turn to a classmate and make a list of the following information.

        -   What components of the board does this program use?
        -   What events is this program responding to?
        -   What functions might you create to make this program work?
      CSD U6 emoji race demo_2018: |-
        # Emoji Race!

        This is an example of a race game that you'll build by the end of this lesson. To play, pair up with another student. The student on the left will the click the left button on the Circuit Playground as fast as they can, while the student on the right clicks the right button. Whoever can get their emoji to the bottom of the screen first wins.

        # Do This

        Turn to a classmate and make a list of the following information.

        -   What components of the board does this program use?
        -   What events is this program responding to?
        -   What functions might you create to make this program work?
      CSD U6 emoji race demo_2019: |-
        # Emoji Race!

        This is an example of a race game that you'll build by the end of this lesson. To play, pair up with another student. The student on the left will the click the left button on the Circuit Playground as fast as they can, while the student on the right clicks the right button. Whoever can get their emoji to the bottom of the screen first wins.

        # Do This

        Turn to a classmate and make a list of the following information.

        -   What components of the board does this program use?
        -   What events is this program responding to?
        -   What functions might you create to make this program work?
      CSD U6 emotion machine 1: |-
        # Changing Images

        The first thing you'll need your emotion machine to do is change to the appropriate image when a button is clicked. If you look at the starting code, you'll see that we already added `setProperty("face", "image", "icon://fa-smile-o")` to change to a smiley face when you click happy.

        # Do This

        <div markdown="1" style="float:right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/uploads/select_image.gif)

        </div>

        Create an event handler for "sad\_button" and make it change to a sad emoji. To do this you'll need to set the "image" property of the image with id "face".

        _Tip: when you click the last dropdown in the `setProperty` block click "Choose..." to go to your media library. From there you can select an icon from our icon library or upload an image of your own._
      CSD U6 emotion machine 1_2018: |-
        # Changing Images

        The first thing you'll need your emotion machine to do is change to the appropriate image when a button is clicked. If you look at the starting code, you'll see that we already added `setProperty("face", "image", "icon://fa-smile-o")` to change to a smiley face when you click happy.

        # Do This

        <div markdown="1" style="float:right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/uploads/select_image.gif)

        </div>

        Create an event handler for "sad\_button" and make it change to a sad emoji. To do this you'll need to set the "image" property of the image with id "face".

        _Tip: when you click the last dropdown in the `setProperty` block click "Choose..." to go to your media library. From there you can select an icon from our icon library or upload an image of your own._
      CSD U6 emotion machine 1_2019: |-
        # Changing Images

        The first thing you'll need your emotion machine to do is change to the appropriate image when a button is clicked. If you look at the starting code, you'll see that we already added `setProperty("face", "image", "icon://fa-smile-o")` to change to a smiley face when you click happy.

        # Do This

        <div markdown="1" style="float:right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/uploads/select_image.gif)

        </div>

        Create an event handler for "sad\_button" and make it change to a sad emoji. To do this you'll need to set the "image" property of the image with id "face".

        _Tip: when you click the last dropdown in the `setProperty` block click "Choose..." to go to your media library. From there you can select an icon from our icon library or upload an image of your own._
      CSD U6 emotion machine 2: |-
        # Changing Color

        If you look back at the example for this app, you should notice that not only do the emojis change when you click a button, but their color changes as well.

        # Do This

        In each of the event handlers, set the "icon-color" property of "face". Pick a warm color for happy and a cool color for sad.
      CSD U6 emotion machine 2_2018: |-
        # Changing Color

        If you look back at the example for this app, you should notice that not only do the emojis change when you click a button, but their color changes as well.

        # Do This

        In each of the event handlers, set the "icon-color" property of "face". Pick a warm color for happy and a cool color for sad.
      CSD U6 emotion machine 2_2019: |-
        # Changing Color

        If you look back at the example for this app, you should notice that not only do the emojis change when you click a button, but their color changes as well.

        # Do This

        In each of the event handlers, set the "icon-color" property of "face". Pick a warm color for happy and a cool color for sad.
      CSD U6 emotion machine 3: |-
        # Setting Text

        Your happy and sad buttons should be almost completely functional now. The only thing they still need to do is change the text at the bottom of the screen.

        # Do This

        Make each of the event handlers change the text of "feeling" to the appropriate emotion (either "happy" or "sad")
      CSD U6 emotion machine 3_2018: |-
        # Setting Text

        Your happy and sad buttons should be almost completely functional now. The only thing they still need to do is change the text at the bottom of the screen.

        # Do This

        Make each of the event handlers change the text of "feeling" to the appropriate emotion (either "happy" or "sad")
      CSD U6 emotion machine 3_2019: |-
        # Setting Text

        Your happy and sad buttons should be almost completely functional now. The only thing they still need to do is change the text at the bottom of the screen.

        # Do This

        Make each of the event handlers change the text of "feeling" to the appropriate emotion (either "happy" or "sad")
      CSD U6 emotion machine 4: |-
        # Add Another Emotion

        In the example app you saw earlier, you could set the emotion to happy, sad, or meh. Your app only has happy and sad, can you add a third emotion?

        # Do This

        Using all of the same techniques you used for the happy and sad buttons, create a third emotion button. You could stick with meh, or you could pick an emotion of your own.

        When you're all done, feel free to add more emotions or features before submitting your final version.
      CSD U6 emotion machine 4_2018: |-
        # Add Another Emotion

        In the example app you saw earlier, you could set the emotion to happy, sad, or meh. Your app only has happy and sad, can you add a third emotion?

        # Do This

        Using all of the same techniques you used for the happy and sad buttons, create a third emotion button. You could stick with meh, or you could pick an emotion of your own.

        When you're all done, feel free to add more emotions or features before submitting your final version.
      CSD U6 emotion machine 4_2019: |-
        # Add Another Emotion

        In the example app you saw earlier, you could set the emotion to happy, sad, or meh. Your app only has happy and sad, can you add a third emotion?

        # Do This

        Using all of the same techniques you used for the happy and sad buttons, create a third emotion button. You could stick with meh, or you could pick an emotion of your own.

        When you're all done, feel free to add more emotions or features before submitting your final version.
      CSD U6 emotion machine example: |-
        # The Emotion Machine

        Check out this Emotion Machine app that you'll be building next. Try clicking on the buttons to see how it works.

        # Do This

        Try out the app, and then with a neighbor discuss:

        -   What events handlers does this app use?
        -   Which elements are being changed with code?
        -   Which properties are being changed when you click a button?
      CSD U6 emotion machine example_2018: |-
        # The Emotion Machine

        Check out this Emotion Machine app that you'll be building next. Try clicking on the buttons to see how it works.

        # Do This

        Try out the app, and then with a neighbor discuss:

        -   What events handlers does this app use?
        -   Which elements are being changed with code?
        -   Which properties are being changed when you click a button?
      CSD U6 emotion machine example_2019: |-
        # The Emotion Machine

        Check out this Emotion Machine app that you'll be building next. Try clicking on the buttons to see how it works.

        # Do This

        Try out the app, and then with a neighbor discuss:

        -   What events handlers does this app use?
        -   Which elements are being changed with code?
        -   Which properties are being changed when you click a button?
      CSD U6 for loop button array: |-
        # Looping Over Arrays

        One of the most powerful ways to use a for loop is to loop over an array, running code on each item in the array. We can do this by using the for loop counter variable (usually `i`) as the index of your array.

        # Do This

        This program should loop over the array `buttons` and do two things to each button - change the background color to red, and change the height to 50 px.

        -   Add a second `setProperty` block inside the loop
        -   Change the target to `buttons[i]`
        -   Set the "height" property to 50

        ![expandable](https://images.code.org/df3d514bae5c23de9e0fbdf1d7798432-image-1512431649584.png)
      CSD U6 for loop button array_2018: |-
        # Looping Over Arrays

        One of the most powerful ways to use a for loop is to loop over an array, running code on each item in the array. We can do this by using the for loop counter variable (usually `i`) as the index of your array.

        # Do This

        This program should loop over the array `buttons` and do two things to each button - change the background color to red, and change the height to 50 px.

        -   Add a second `setProperty` block inside the loop
        -   Change the target to `buttons[i]`
        -   Set the "height" property to 50

        ![expandable](https://images.code.org/df3d514bae5c23de9e0fbdf1d7798432-image-1512431649584.png)
      CSD U6 for loop button array_2019: |-
        # Looping Over Arrays

        One of the most powerful ways to use a for loop is to loop over an array, running code on each item in the array. We can do this by using the for loop counter variable (usually `i`) as the index of your array.

        # Do This

        This program should loop over the array `buttons` and do two things to each button - change the background color to red, and change the height to 50 px.

        -   Add a second `setProperty` block inside the loop
        -   Change the target to `buttons[i]`
        -   Set the "height" property to 50

        ![expandable](https://images.code.org/df3d514bae5c23de9e0fbdf1d7798432-image-1512431649584.png)
      CSD U6 for loop click exit: |-
        # Knowing When to Stop

        If you clicked the button too many times in the last level, you got an error. Whenever you're writing code that repeats, you should think about when to _stop_ repeating.

        # Do This

        This program is similar to the previous one, but there is a conditional inside the event handler. You'll need to complete the conditional so that we don't try to toggle an LED that doesn't exist.

        _Would your code work without changes for a board with more or fewer LEDs? If not, could you modify it so it would?_
      CSD U6 for loop click exit_2018: |-
        # Knowing When to Stop

        If you clicked the button too many times in the last level, you got an error. Whenever you're writing code that repeats, you should think about when to _stop_ repeating.

        # Do This

        This program is similar to the previous one, but there is a conditional inside the event handler. You'll need to complete the conditional so that we don't try to toggle an LED that doesn't exist.

        _Would your code work without changes for a board with more or fewer LEDs? If not, could you modify it so it would?_
      CSD U6 for loop click exit_2019: |-
        # Knowing When to Stop

        If you clicked the button too many times in the last level, you got an error. Whenever you're writing code that repeats, you should think about when to _stop_ repeating.

        # Do This

        This program is similar to the previous one, but there is a conditional inside the event handler. You'll need to complete the conditional so that we don't try to toggle an LED that doesn't exist.

        _Would your code work without changes for a board with more or fewer LEDs? If not, could you modify it so it would?_
      CSD U6 for loop click predict question: |-
        # Make a Prediction

        Read through the code for this program and predict what will happen each time the button is clicked?
      CSD U6 for loop click predict question_2018: |-
        # Make a Prediction

        Read through the code for this program and predict what will happen each time the button is clicked?
      CSD U6 for loop click predict question_2019: |-
        # Make a Prediction

        Read through the code for this program and predict what will happen each time the button is clicked?
      CSD U6 for loop images: |-
        # Constructing a for loop from scratch

        Now that you've had some practice modifying for loops to process arrays, let's see if you can do it yourself.

        # Do This

        We've provided the design elements and an array to start with, but the rest is on you.

        -   Add an event handler to respond to the "thumbsup\_button" being clicked
        -   Place a _for loop_ inside the event handler
        -   Modify the exit condition of the _for loop_ so that it will run until it gets to the end of the array `images`
        -   Inside your _for loop_ change the current image to "icon://fa-thumbs-o-up"

        _Challenge: Can you add a second button that turns all of the images back to thumbs down?_
      CSD U6 for loop images_2018: |-
        # Constructing a for loop from scratch

        Now that you've had some practice modifying for loops to process arrays, let's see if you can do it yourself.

        # Do This

        We've provided the design elements and an array to start with, but the rest is on you.

        -   Add an event handler to respond to the "thumbsup\_button" being clicked
        -   Place a _for loop_ inside the event handler
        -   Modify the exit condition of the _for loop_ so that it will run until it gets to the end of the array `images`
        -   Inside your _for loop_ change the current image to "icon://fa-thumbs-o-up"

        _Challenge: Can you add a second button that turns all of the images back to thumbs down?_
      CSD U6 for loop images_2019: |-
        # Constructing a for loop from scratch

        Now that you've had some practice modifying for loops to process arrays, let's see if you can do it yourself.

        # Do This

        We've provided the design elements and an array to start with, but the rest is on you.

        -   Add an event handler to respond to the "thumbsup\_button" being clicked
        -   Place a _for loop_ inside the event handler
        -   Modify the exit condition of the _for loop_ so that it will run until it gets to the end of the array `images`
        -   Inside your _for loop_ change the current image to "icon://fa-thumbs-o-up"

        _Challenge: Can you add a second button that turns all of the images back to thumbs down?_
      CSD U6 for loop led bonus 1_2018: |-
        # Challenge: Add More Buttons

        Extend the program by adding more buttons that change the board to different colors.

        # Do This

        Add your new buttons in Design Mode and create event handlers to respond to your buttons and change the LED colors.
      CSD U6 for loop led bonus 2_2018: |-
        # Challenge: Color Patterns

        Extend the program by adding more buttons that create different patterns of light.

        # Do This

        Add your new buttons in Design Mode and create event handlers to respond to your buttons and change the LED colors.

        _Hint: As you design your patterns, consider whether a function with parameters could help simplify your program._
      CSD U6 for loop led bonus 3_2018: |-
        # Challenge: Music

        Use what you learned in the Making Music lesson to make the board play music when the lights change.

        # Do This

        Create some arrays of notes for different songs and add code to your event handlers to play your music.
      CSD U6 for loop led color_2019: |-
        # Füge etwas Farbe hinzu

        Jetzt, da Sie die LEDs ein- und ausschalten können, ist es an der Zeit, etwas Farbe hinzuzufügen.

        # Mach folgendes

        Füge Event-Handler für "button\_red" und "button\_green" hinzu, die alle LEDs in diese Farben umschaltet.
      CSD U6 for loop led function: |-
        # Switching Colors with a Function

        We could write a for loop for each different color that we want to set LEDs to, but that would be a lot of duplicate code that's _almost_ the same. This is the perfect place to use a _function with a parameter_! You've seen and used functions with parameters before, but now you're going to make one from scratch.

        # Do This

        Create a function called `setLedsColor` that takes a parameter `color` and uses it to change the color of all of the LEDs

        -   At the bottom of your program, drag out a function with parameter block ![expandable](https://images.code.org/bd6ec3d9a651cf760a7dc8e1949658c0-image-1512761901850.png)
        -   Change the name from `myFunction` to `setLedsColor`
        -   Change the parameter name from `n` to `color`
        -   Inside your function, add a _for loop_ that repeats until it reaches the end of `colorLeds`
        -   Inside your _for loop_, set the color of the current led to the parameter `color` (eg. `colorLeds[i].color(color)`

        We'll add event handlers that use this function in the next level, but for now you can test your function by your program and typing this into the debug console: `setLedsColor("blue")`
      CSD U6 for loop led function call: |-
        # Calling Your Function

        Now that you've created a function that can behave differently based on the parameter it is passed, we can use it in multiple different event handlers to change the lights to different colors.

        # Do This

        We'll start simple by just creating an event handler for "button\_red"

        -   Create a new event handler to respond to "button\_red"
        -   Inside your event handler, add a "call function with parameter" block
            ![expandable](https://images.code.org/ee8e026b59682066eccfc4795b5c5036-image-1512771755527.png)
        -   Change the name from `myFunction` to `setLedsColor`
        -   Change the parameter from `n` to "red" (note the quotation marks!)
        -   Test your program, the "Red" button should turn all of your LEDs red
      CSD U6 for loop led function call_2018: |-
        # Calling Your Function

        Now that you've created a function that can behave differently based on the parameter it is passed, we can use it in multiple different event handlers to change the lights to different colors.

        # Do This

        We'll start simple by just creating an event handler for "button\_red"

        -   Create a new event handler to respond to "button\_red"
        -   Inside your event handler, add a "call function with parameter" block
            ![expandable](https://images.code.org/ee8e026b59682066eccfc4795b5c5036-image-1512771755527.png)
        -   Change the name from `myFunction` to `setLedsColor`
        -   Change the parameter from `n` to "red" (note the quotation marks!)
        -   Test your program, the "Red" button should turn all of your LEDs red
      CSD U6 for loop led function finish: |-
        # Finish the App

        If your red button worked, the only thing left is to call your new function when all of the remaining buttons is pressed.

        # Do This

        For each of the remaining buttons (green, blue, and white):

        -   Create a new event handler
        -   Call your `setLedsColor` function with the appropriate color ("green", "blue", or "white")
        -   Test your program to make sure all of the buttons work

        When you've got all of your buttons working properly, click "Submit" to turn your program in.
      CSD U6 for loop led function finish_2018: |-
        # Finish the App

        If your red button worked, the only thing left is to call your new function when all of the remaining buttons is pressed.

        # Do This

        For each of the remaining buttons (green, blue, and white):

        -   Create a new event handler
        -   Call your `setLedsColor` function with the appropriate color ("green", "blue", or "white")
        -   Test your program to make sure all of the buttons work

        When you've got all of your buttons working properly, click "Submit" to turn your program in.
      CSD U6 for loop led function_2018: |-
        # Switching Colors with a Function

        We could write a for loop for each different color that we want to set LEDs to, but that would be a lot of duplicate code that's _almost_ the same. This is the perfect place to use a _function with a parameter_! You've seen and used functions with parameters before, but now you're going to make one from scratch.

        # Do This

        Create a function called `setLedsColor` that takes a parameter `color` and uses it to change the color of all of the LEDs

        -   At the bottom of your program, drag out a function with parameter block ![expandable](https://images.code.org/bd6ec3d9a651cf760a7dc8e1949658c0-image-1512761901850.png)
        -   Change the name from `myFunction` to `setLedsColor`
        -   Change the parameter name from `n` to `color`
        -   Inside your function, add a _for loop_ that repeats until it reaches the end of `colorLeds`
        -   Inside your _for loop_, set the color of the current led to the parameter `color` (eg. `colorLeds[i].color(color)`

        We'll add event handlers that use this function in the next level, but for now you can test your function by your program and typing this into the debug console: `setLedsColor("blue")`
      CSD U6 for loop led off: |-
        # Turning all the Color LEDs Off

        Now that you've got one button to turn the color LEDs on, you can make another turn them off.

        # Do This

        Add an event handler to "button\_off" with a for loop that turns each color LED off.
      CSD U6 for loop led off_2018: |-
        # Turning all the Color LEDs Off

        Now that you've got one button to turn the color LEDs on, you can make another turn them off.

        # Do This

        Add an event handler to "button\_off" with a for loop that turns each color LED off.
      CSD U6 for loop led off_2019: |-
        # Turning all the Color LEDs Off

        Now that you've got one button to turn the color LEDs on, you can make another turn them off.

        # Do This

        Add an event handler to "button\_off" with a for loop that turns each color LED off.
      CSD U6 for loop led on: |-
        # Turning all the Color LEDs On

        Now that you know how to use a _for loop_ to process all of the elements in an array, you can turn on all of the Color LEDs much more easily than before.

        # Do This

        We're going to start an app that will control all of the Color LEDs on your board. The first step is to wire up the button that turns all of the LEDs on.

        -   Add an event handler for "button\_on"
        -   Place a _for loop_ in your event handler that repeats until it reaches in the end of the array `colorLeds`
        -   Inside the for loop, call `colorLeds[i].on()` to turn on the current color LED
      CSD U6 for loop led on_2018: |-
        # Turning all the Color LEDs On

        Now that you know how to use a _for loop_ to process all of the elements in an array, you can turn on all of the Color LEDs much more easily than before.

        # Do This

        Over the next few levels, you'll create an app that will control all of the Color LEDs on your board. The first step is to wire up the button that turns all of the LEDs on.  (Don't worry about the rest of the comments in the workspace.  You'll work on those in later levels.)

        -   Add an event handler for "button\_on"
        -   Place a _for loop_ in your event handler that repeats until it reaches in the end of the array `colorLeds`
        -   Inside the for loop, call `colorLeds[i].on()` to turn on the current color LED
      CSD U6 for loop led on_2019: |-
        # Turning all the Color LEDs On

        Now that you know how to use a _for loop_ to process all of the elements in an array, you can turn on all of the Color LEDs much more easily than before.

        # Do This

        Over the next few levels, you'll create an app that will control all of the Color LEDs on your board. The first step is to wire up the button that turns all of the LEDs on.  (Don't worry about the rest of the comments in the workspace.  You'll work on those in later levels.)

        -   Add an event handler for "button\_on"
        -   Place a _for loop_ in your event handler that repeats until it reaches in the end of the array `colorLeds`
        -   Inside the for loop, call `colorLeds[i].on()` to turn on the current color LED
      CSD U6 for loop led personalize_2019: |-
        # Make it Your Own

        Denke an einen neuen Button, den du in diesem Projekt gerne hättest.  Vergiss nicht die anderen LED-Optionen wie Puls und Blinken.

        # Mach folgendes

        Füge dem Projekt eine neue Schaltfläche hinzu und programmiere diese mit einem Verhalten Deiner Wahl.
      CSD U6 for loop list.length: |-
        # Array Length

        In the last program we told the loop to run three times with the code `for (var i = 0; i < 3; i++)`. This works, but we could write smarter programs by using the length of the array to decide how many times to loop.

        # Do This

        Change the exit condition of this for loop so that it runs while `i < buttons.length`.
      CSD U6 for loop list.length_2018: |-
        # Array Length

        In the last program we told the loop to run three times with the code `for (var i = 0; i < 3; i++)`. This works, but we could write smarter programs by using the length of the array to decide how many times to loop.

        # Do This

        Change the exit condition of this for loop so that it runs while `i < buttons.length`.
      CSD U6 for loop list.length_2019: |-
        # Array Length

        In the last program we told the loop to run three times with the code `for (var i = 0; i < 3; i++)`. This works, but we could write smarter programs by using the length of the array to decide how many times to loop.

        # Do This

        Change the exit condition of this for loop so that it runs while `i < buttons.length`.
      CSD U6 frequency: |-
        # Frequency

        This buzzer controller has been expanded to control frequency as well, but the code isn't finished yet.

        # Do This

        -   Using the `duration` variable as a model, create a `frequency` variable that gets the value from the _frequency_ slider.
        -   Modify the line of code that makes the buzzer sound so that it uses the `frequency` variable rather than the default frequency of `500`.
        -   Run your code, then change the frequency and the duration to hear the difference in the buzzer.  (Don't forget to hit the button after you make a change!)
      CSD U6 frequency_2018: |-
        # Frequency

        This buzzer controller has been expanded to control frequency as well, but the code isn't finished yet.

        # Do This

        -   Using the `duration` variable as a model, create a `frequency` variable that gets the value from the _frequency_ slider.
        -   Modify the line of code that makes the buzzer sound so that it uses the `frequency` variable rather than the default frequency of `500`.
        -   Run your code, then change the frequency and the duration to hear the difference in the buzzer.  (Don't forget to hit the button after you make a change!)
      CSD U6 frequency_2019: |-
        # Frequency

        This buzzer controller has been expanded to control frequency as well, but the code isn't finished yet.

        # Do This

        -   Using the `duration` variable as a model, create a `frequency` variable that gets the value from the _frequency_ slider.
        -   Modify the line of code that makes the buzzer sound so that it uses the `frequency` variable rather than the default frequency of `500`.
        -   Run your code, then change the frequency and the duration to hear the difference in the buzzer.  (Don't forget to hit the button after you make a change!)
      CSD U6 functions paramters video_2019: |-
        ## Zu berücksichtigende Fragen

        -   Wie machen Parameter Funktionen nützlicher?
        -   Woher weißt du, wann du mehrere Funktionen zu einer einzigen kombinieren kannst?
      CSD U6 game project board events: |-
        # Board Events

        Go back to the Events section of your activity guide and find any events that respond to your board (ones that would use `onBoardEvent()`). Create event handlers for each of those now. If these events rely on functions you haven't written yet, just leave yourself a comment in the code.
      CSD U6 game project board events_2018: |-
        # Board Events

        Go back to the Events section of your activity guide and find any events that respond to your board (ones that would use `onBoardEvent()`). Create event handlers for each of those now. If these events rely on functions you haven't written yet, just leave yourself a comment in the code.
      CSD U6 game project board events_2019: |-
        # Board Events

        Go back to the Events section of your activity guide and find any events that respond to your board (ones that would use `onBoardEvent()`). Create event handlers for each of those now. If these events rely on functions you haven't written yet, just leave yourself a comment in the code.
      CSD U6 game project finish: |-
        # Finishing Touches and Testing

        At this point you should have most of your program in place. Now you need to add whatever finishing touches are needed and do a little testing. When your app is ready, have your classmates try it out. See if you can find any bugs, confusing design choices, or missing features you'd like to work on.

        Once you're all done with this version of your program, click Submit to turn it in.
      CSD U6 game project finish_2018: |-
        # Finishing Touches and Testing

        At this point you should have most of your program in place. Now you need to add whatever finishing touches are needed and do a little testing. When your app is ready, have your classmates try it out. See if you can find any bugs, confusing design choices, or missing features you'd like to work on.

        Once you're all done with this version of your program, click Submit to turn it in.
      CSD U6 game project finish_2019: |-
        # Finishing Touches and Testing

        At this point you should have most of your program in place. Now you need to add whatever finishing touches are needed and do a little testing. When your app is ready, have your classmates try it out. See if you can find any bugs, confusing design choices, or missing features you'd like to work on.

        Once you're all done with this version of your program, click Submit to turn it in.
      CSD U6 game project functions call: |-
        # Calling your Functions

        With your functions defined, you can can call them wherever you need. Go through your event handlers, or anywhere else in your program that your function should be used, and add calls to the function you created.
      CSD U6 game project functions call_2018: |-
        # Calling your Functions

        With your functions defined, you can can call them wherever you need. Go through your event handlers, or anywhere else in your program that your function should be used, and add calls to the function you created.
      CSD U6 game project functions call_2019: |-
        # Calling your Functions

        With your functions defined, you can can call them wherever you need. Go through your event handlers, or anywhere else in your program that your function should be used, and add calls to the function you created.
      CSD U6 game project functions define: "# Define Your Functions\n\nDefine all
        of your functions at the bottom of the program, under the comment `// Create
        your functions here`.\n\nRight now we're only worrying about writing the function
        _definitions_, the part which looks like:\n\n    function myFunction() {\n
        \   \t// Things my function does\n    }"
      CSD U6 game project functions define_2018: "# Define Your Functions\n\nDefine
        all of your functions at the bottom of the program, under the comment `//
        Create your functions here`.\n\nRight now we're only worrying about writing
        the function _definitions_, the part which looks like:\n\n    function myFunction()
        {\n    \t// Things my function does\n    }"
      CSD U6 game project functions define_2019: "# Define Your Functions\n\nDefine
        all of your functions at the bottom of the program, under the comment `//
        Create your functions here`.\n\nRight now we're only worrying about writing
        the function _definitions_, the part which looks like:\n\n    function myFunction()
        {\n    \t// Things my function does\n    }"
      CSD U6 game project screen links: |-
        # UI Element Events

        Now that all of your screens are designed, you can add any event handlers that will respond to _screen interaction_. These should be listed in the "Events" section of your activity guide. If you run into new events that you hadn't thought of in the planning stage, make sure you add them to your project guide.

        Don't worry about making these completely functional yet. If your events rely on board elements or your own functions, we'll take care of that in later levels.
      CSD U6 game project screen links_2018: |-
        # UI Element Events

        Now that all of your screens are designed, you can add any event handlers that will respond to _screen interaction_. These should be listed in the "Events" section of your activity guide. If you run into new events that you hadn't thought of in the planning stage, make sure you add them to your project guide.

        Don't worry about making these completely functional yet. If your events rely on board elements or your own functions, we'll take care of that in later levels.
      CSD U6 game project screen links_2019: |-
        # UI Element Events

        Now that all of your screens are designed, you can add any event handlers that will respond to _screen interaction_. These should be listed in the "Events" section of your activity guide. If you run into new events that you hadn't thought of in the planning stage, make sure you add them to your project guide.

        Don't worry about making these completely functional yet. If your events rely on board elements or your own functions, we'll take care of that in later levels.
      CSD U6 game project screens: |-
        # Create Your Screens

        The first thing you'll need to do is create all of the screens that you've sketched in your planning guide.

        # Do This

        Use Design Mode to create all of the screens that your program will need. Don't forget to **pick sensible IDs** for all of your design elements.
      CSD U6 game project screens_2018: |-
        # Create Your Screens

        The first thing you'll need to do is create all of the screens that you've sketched in your planning guide.

        # Do This

        Use Design Mode to create all of the screens that your program will need. Don't forget to **pick sensible IDs** for all of your design elements.
      CSD U6 game project screens_2019: |-
        # Create Your Screens

        The first thing you'll need to do is create all of the screens that you've sketched in your planning guide.

        # Do This

        Use Design Mode to create all of the screens that your program will need. Don't forget to **pick sensible IDs** for all of your design elements.
      CSD U6 get toggle: |-
        # change

        This program has events that detect three different changes: the toggle switch, the interval slider, and the duration slider.  Because there are so many different things that cause the LED and buzzer to reset, it uses functions to organize the code.

        # Do This

        -   Read the `updateLED` function to see what it does.
        -   Add code to `updateBuzzer` to make the buzzer only turn on when the toggle switch is open.
      CSD U6 get toggle_2018: |-
        # change

        This program has events that detect three different changes: the toggle switch, the interval slider, and the frequency slider.  Because there are so many different things that cause the LED and buzzer to reset, it uses functions to organize the code.

        # Do This

        -   Read the `updateLED` function to see what it does.
        -   Add code to `updateBuzzer` to make the buzzer only turn on when the toggle switch is open.
      CSD U6 get toggle_2019: |-
        # change

        This program has events that detect three different changes: the toggle switch, the interval slider, and the frequency slider.  Because there are so many different things that cause the LED and buzzer to reset, it uses functions to organize the code.

        # Do This

        -   Read the `updateLED` function to see what it does.
        -   Add code to `updateBuzzer` to make the buzzer only turn on when the toggle switch is open.
      CSD U6 getProperty Demo: |-
        # Updating Properties

        Here's an example of an app that uses both `getProperty` and `setProperty` to update elements on the screen. Read through the code, and then test it out by filling out the input fields and clicking "Save"

        _Note: you don't need to change any code here, but read through the provided code to see how it works._
      CSD U6 getProperty Demo_2018: |-
        # Updating Properties

        Here's an example of an app that uses both `getProperty` and `setProperty` to update elements on the screen. Read through the code, and then test it out by filling out the input fields and clicking "Save"

        _Note: you don't need to change any code here, but read through the provided code to see how it works._
      CSD U6 getProperty Demo_2019: |-
        # Updating Properties

        Here's an example of an app that uses both `getProperty` and `setProperty` to update elements on the screen. Read through the code, and then test it out by filling out the input fields and clicking "Save"

        _Note: you don't need to change any code here, but read through the provided code to see how it works._
      CSD U6 getProperty board predict: Predict Level (See contained level for markdown)
      CSD U6 getProperty board predict_2018: Predict Level (See contained level for
        markdown)
      CSD U6 getProperty board predict_2019: Predict Level (See contained level for
        markdown)
      CSD U6 getProperty buzzer: |-
        # Using the Circuit Playground

        Here's the same code you saw in the last level, but this time there's another dropdown menu to control the buzzer.  You'll have to add the code to make it work.

        # Do This

        -   Using the LED code as a model, add new code inside the buttonL event that will play a long or short buzz according to the chosen value property of the *buzzer\_input* dropdown menu.
        -   Add new code that will turn the buzzer off when the right button is pressed.
            -   (Hint: the event is already in the code.)
      CSD U6 getProperty buzzer_2018: |-
        # Using the Circuit Playground

        Here's the same code you saw in the last level, but this time there's another dropdown menu to control the buzzer.  You'll have to add the code to make it work.

        # Do This

        -   Using the LED code as a model, add new code inside the buttonL event that will play a long or short buzz according to the chosen value property of the *buzzer\_input* dropdown menu.
        -   Add new code that will turn the buzzer off when the right button is pressed.
            -   (Hint: the event is already in the code.)
      CSD U6 getProperty buzzer_2019: |-
        # Using the Circuit Playground

        Here's the same code you saw in the last level, but this time there's another dropdown menu to control the buzzer.  You'll have to add the code to make it work.

        # Do This

        -   Using the LED code as a model, add new code inside the buttonL event that will play a long or short buzz according to the chosen value property of the *buzzer\_input* dropdown menu.
        -   Add new code that will turn the buzzer off when the right button is pressed.
            -   (Hint: the event is already in the code.)
      CSD U6 getProperty dropdown: |-
        # Dropdowns

        Text Inputs are nice when you want users to be able to enter _anything_ they want, but often you want to restrict them to just a few choices. For example, if you want your user to pick a color, you probably want to make sure they can only choose colors that will actually work.

        The provided dropdown with the ID "color\_input" allows a user to choose from a handful of background colors. When the "Set Color" button is clicked, the screen will turn that color.

        # Do This

        -   Inside the event block, create a variable called `color` and assign it a value using the `getProperty` block.
            -   Hint: You'll need to use the "value" property to get the user's choice.
        -   Use the `setProperty` block to set the "background-color" property of "screen1" to your variable `color`.
            -   Hint: Make sure you type `color` without quotation marks.
        -   Test your program by picking a color and clicking "Set Color".
      CSD U6 getProperty dropdown_2018: |-
        # Dropdowns

        Text Inputs are nice when you want users to be able to enter _anything_ they want, but often you want to restrict them to just a few choices. For example, if you want your user to pick a color, you probably want to make sure they can only choose colors that will actually work.

        The provided dropdown with the ID "color\_input" allows a user to choose from a handful of background colors. When the "Set Color" button is clicked, the screen will turn that color.

        # Do This

        -   Inside the event block, create a variable called `color` and assign it a value using the `getProperty` block.
            -   Hint: You'll need to use the "value" property to get the user's choice.
        -   Use the `setProperty` block to set the "background-color" property of "screen1" to your variable `color`.
            -   Hint: Make sure you type `color` without quotation marks.
        -   Test your program by picking a color and clicking "Set Color".
      CSD U6 getProperty dropdown_2019: |-
        # Dropdowns

        Text Inputs are nice when you want users to be able to enter _anything_ they want, but often you want to restrict them to just a few choices. For example, if you want your user to pick a color, you probably want to make sure they can only choose colors that will actually work.

        The provided dropdown with the ID "color\_input" allows a user to choose from a handful of background colors. When the "Set Color" button is clicked, the screen will turn that color.

        # Do This

        -   Inside the event block, create a variable called `color` and assign it a value using the `getProperty` block.
            -   Hint: You'll need to use the "value" property to get the user's choice.
        -   Use the `setProperty` block to set the "background-color" property of "screen1" to your variable `color`.
            -   Hint: Make sure you type `color` without quotation marks.
        -   Test your program by picking a color and clicking "Set Color".
      CSD U6 getProperty input: |-
        # getProperty and Variables

        This program uses the `name` variable to display the name typed into "name\_input" when the Submit button is clicked. It should do the same for *friend\_input* and *friend\_output*, but it's missing a block.

        # Do This

        -   Read the code and comments, then run the program to see how it works. (Make sure you type in your name and your friend's name before hitting "Submit".)
        -   Use a `getProperty` block to store the text property of *friend\_input* into your the variable "friend\_name". ([Show me where.](#triggercallout=code_triggered))
      CSD U6 getProperty input_2018: |-
        # getProperty and Variables

        This program uses the `name` variable to display the name typed into "name\_input" when the Submit button is clicked. It should do the same for *friend\_input* and *friend\_output*, but it's missing a block.

        # Do This

        -   Read the code and comments, then run the program to see how it works. (Make sure you type in your name and your friend's name before hitting "Submit".)
        -   Use a `getProperty` block to store the text property of *friend\_input* into your the variable "friend\_name". ([Show me where.](#triggercallout=code_triggered))
      CSD U6 getProperty input_2019: |-
        # getProperty and Variables

        This program uses the `name` variable to display the name typed into "name\_input" when the Submit button is clicked. It should do the same for *friend\_input* and *friend\_output*, but it's missing a block.

        # Do This

        -   Read the code and comments, then run the program to see how it works. (Make sure you type in your name and your friend's name before hitting "Submit".)
        -   Use a `getProperty` block to store the text property of *friend\_input* into your the variable "friend\_name". ([Show me where.](#triggercallout=code_triggered))
      CSD U6 getters debug: |-
        # LED and Buzzer Controller

        This program operates the LED and the buzzer, but it has some problems.

        # Do This

        -   Read the program to understand how it is supposed to work.
        -   Find and correct the bugs so that the program works properly.
      CSD U6 getters debug_2018: |-
        # LED and Buzzer Controller

        This program operates the LED and the buzzer, but it has some problems.

        # Do This

        -   Read the program to understand how it is supposed to work.
        -   Find and correct the bugs so that the program works properly.
      CSD U6 getters debug_2019: |-
        # LED and Buzzer Controller

        This program operates the LED and the buzzer, but it has some problems.

        # Do This

        -   Read the program to understand how it is supposed to work.
        -   Find and correct the bugs so that the program works properly.
      CSD U6 goalie: |-
        # Updating Values with Data

        In this program the goalie is trying to block the soccer ball, but right now the ball isn't moving.

        # Do This

        -   Use the counter pattern to update the ball's `x` value so that it moves across the screen.
      CSD U6 goalie_2018: |-
        # Updating Values with Data

        In this program the goalie is trying to block the soccer ball, but right now the ball isn't moving.

        # Do This

        -   Use the counter pattern to update the ball's `x` value so that it moves across the screen.
      CSD U6 goalie_2019: |-
        # Updating Values with Data

        In this program the goalie is trying to block the soccer ball, but right now the ball isn't moving.

        # Do This

        -   Use the counter pattern to update the ball's `x` value so that it moves across the screen.
      CSD U6 hardware software video_2019: |-
        ## Zu berücksichtigende Fragen

        -   Worin besteht der Unterschied zwischen Hard- und Software?
        -   Was macht das Betriebssystem eines Computers?
      CSD U6 interval: Predict Level
      CSD U6 interval predict: |-
        # Interval

        Now we're using the slider to affect the behavior of the LED.   Just as we could change the values for the frequency and duration of the buzzer, we can change the value for the blink or pulse interval of the LED.

        # Do This

        -   Read the code and predict what the program will do, then hit "Run" to test your prediction.
      CSD U6 interval predict_2018: |-
        # Interval

        Now we're using the slider to affect the behavior of the LED.   Just as we could change the values for the frequency and duration of the buzzer, we can change the value for the blink or pulse interval of the LED.

        # Do This

        -   Read the code and predict what the program will do, then hit "Run" to test your prediction.
      CSD U6 interval predict_2019: |-
        # Interval

        Now we're using the slider to affect the behavior of the LED.   Just as we could change the values for the frequency and duration of the buzzer, we can change the value for the blink or pulse interval of the LED.

        # Do This

        -   Read the code and predict what the program will do, then hit "Run" to test your prediction.
      CSD U6 interval_2018: Predict Level
      CSD U6 interval_2019: Predict Level
      CSD U6 investigate orientation: "# Pitch and Roll\n\nThis program displays the
        board's pitch and roll, and it will also change colors depending on their
        values.  \n\n# Do This\n\nMake the program change the following colors by
        tilting the board to the correct pitch and roll.\n\n<div style=\"display:inline-block;
        background-color: skyblue; height: 30px; width:30px\">&nbsp;</div> Pitch:
        0 | Roll: -20\n\n<p/>\n\n<div style=\"display:inline-block; background-color:
        burlywood; height: 30px; width:30px\">&nbsp;</div> Pitch: 30 | Roll: 0\n\n<p/>\n\n<div
        style=\"display:inline-block; background-color: mistyrose; height: 30px; width:30px\">&nbsp;</div>
        Pitch: -15 | Roll: 10\n\n<p/>\n\n<div style=\"display:inline-block; background-color:
        yellowgreen; height: 30px; width:30px\">&nbsp;</div> Pitch: 5 | Roll: -25\n\n<p/>\n\n<div
        style=\"display:inline-block; background-color: thistle; height: 30px; width:30px\">&nbsp;</div>
        Pitch: 10 | Roll: 30\n\n<p/>\n\nWhich way should you tilt to get a positive
        pitch?\n\nWhich way should you tilt to get a negative roll?"
      CSD U6 investigate orientation_2018: "# Pitch and Roll\n\nThis program displays
        the board's pitch and roll, and it will also change colors depending on their
        values.  \n\n# Do This\n\nMake the program change the following colors by
        tilting the board to the correct pitch and roll.\n\n<div style=\"display:inline-block;
        background-color: skyblue; height: 30px; width:30px\">&nbsp;</div> Pitch:
        0 | Roll: -20\n\n<p/>\n\n<div style=\"display:inline-block; background-color:
        burlywood; height: 30px; width:30px\">&nbsp;</div> Pitch: 30 | Roll: 0\n\n<p/>\n\n<div
        style=\"display:inline-block; background-color: mistyrose; height: 30px; width:30px\">&nbsp;</div>
        Pitch: -15 | Roll: 10\n\n<p/>\n\n<div style=\"display:inline-block; background-color:
        yellowgreen; height: 30px; width:30px\">&nbsp;</div> Pitch: 5 | Roll: -25\n\n<p/>\n\n<div
        style=\"display:inline-block; background-color: thistle; height: 30px; width:30px\">&nbsp;</div>
        Pitch: 10 | Roll: 30\n\n<p/>\n\nWhich way should you tilt to get a positive
        pitch?\n\nWhich way should you tilt to get a negative roll?"
      CSD U6 investigate orientation_2019: "# Pitch and Roll\n\nThis program displays
        the board's pitch and roll, and it will also change colors depending on their
        values.  \n\n# Do This\n\nMake the program change the following colors by
        tilting the board to the correct pitch and roll.\n\n<div style=\"display:inline-block;
        background-color: skyblue; height: 30px; width:30px\">&nbsp;</div> Pitch:
        0 | Roll: -20\n\n<p/>\n\n<div style=\"display:inline-block; background-color:
        burlywood; height: 30px; width:30px\">&nbsp;</div> Pitch: 30 | Roll: 0\n\n<p/>\n\n<div
        style=\"display:inline-block; background-color: mistyrose; height: 30px; width:30px\">&nbsp;</div>
        Pitch: -15 | Roll: 10\n\n<p/>\n\n<div style=\"display:inline-block; background-color:
        yellowgreen; height: 30px; width:30px\">&nbsp;</div> Pitch: 5 | Roll: -25\n\n<p/>\n\n<div
        style=\"display:inline-block; background-color: thistle; height: 30px; width:30px\">&nbsp;</div>
        Pitch: 10 | Roll: 30\n\n<p/>\n\nWhich way should you tilt to get a positive
        pitch?\n\nWhich way should you tilt to get a negative roll?"
      CSD U6 iter create notes: |-
        # Music Player

        This program lets you play music by waving a wand over the different notes, but it's missing a function definition.

        # Do This

        -   Create a `checkNotes()` function that will call `checkNote(note)` on everything in the "notes" array.
      CSD U6 iter create notes_2018: |-
        # Music Player

        This program lets you play music by waving a wand over the different notes, but it's missing a function definition.

        # Do This

        -   Create a `checkNotes()` function that will call `checkNote(note)` on everything in the "notes" array.
      CSD U6 iter create notes_2019: |-
        # Music Player

        This program lets you play music by waving a wand over the different notes, but it's missing a function definition.

        # Do This

        -   Create a `checkNotes()` function that will call `checkNote(note)` on everything in the "notes" array.
      CSD U6 iter modify bugs: |-
        # Bug Shaker

        This program shakes bugs around when the board is shaken, but it's only working for one bug.

        # Do This

        -   Change the `moveBugs()` function so that it calls `moveBug(color)` on every bug color.
            -   (Hint: Look at the `detectHits()` function for clues how to do this.)
      CSD U6 iter modify bugs_2018: |-
        # Bug Shaker

        This program shakes bugs around when the board is shaken, but it's only working for one bug.

        # Do This

        -   Change the `moveBugs()` function so that it calls `moveBug(color)` on every bug color.
            -   (Hint: Look at the `detectHits()` function for clues how to do this.)
      CSD U6 iter modify bugs_2019: |-
        # Bug Shaker

        This program shakes bugs around when the board is shaken, but it's only working for one bug.

        # Do This

        -   Change the `moveBugs()` function so that it calls `moveBug(color)` on every bug color.
            -   (Hint: Look at the `detectHits()` function for clues how to do this.)
      CSD U6 iter predict bubbles: "![](https://images.code.org/52f474adbbc3bdd87aaae407c9ebf588-image-1515690462464.png)"
      CSD U6 iter predict bubbles contained: |-
        # Fish Bubbles

        This program uses the sound sensor in the same way as the clouds program.  How many bubbles will move when you blow on the board?
      CSD U6 iter predict bubbles contained_2018: |-
        # Fish Bubbles

        This program uses the sound sensor in the same way as the clouds program.  How many bubbles will move when you blow on the board?
      CSD U6 iter predict bubbles contained_2019: |-
        # Fish Bubbles

        This program uses the sound sensor in the same way as the clouds program.  How many bubbles will move when you blow on the board?
      CSD U6 iter predict bubbles_2018: "![](https://images.code.org/52f474adbbc3bdd87aaae407c9ebf588-image-1515690462464.png)"
      CSD U6 iter predict bubbles_2019: "![](https://images.code.org/52f474adbbc3bdd87aaae407c9ebf588-image-1515690462464.png)"
      CSD U6 light pattern challenge_2018: |-
        # Challenge: More Patterns

        Add some more patterns to your app. Find a partner and add their pattern as an option. Make sure to put each pattern into its own function.
      CSD U6 light pattern challenge_2019: |-
        # Challenge: More Patterns

        Add some more patterns to your app. Find a partner and add their pattern as an option. Make sure to put each pattern into its own function.
      CSD U6 light pattern off: |-
        # Turning It Off

        When you start this app your lights are off, but as soon as choose a pattern, there's no way to turn the lights back off!

        # Do This

        Create a function that turns all of the LEDs off, and then add a "Off" button to your app and make it turn off all of the color LEDs.
      CSD U6 light pattern off_2018: |-
        # Turning It Off

        When you start this app your lights are off, but as soon as choose a pattern, there's no way to turn the lights back off!

        # Do This

        Create a function that turns all of the LEDs off, and then add a "Off" button to your app and make it turn off all of the color LEDs.
      CSD U6 light pattern off_2019: |-
        # Ausschalten

        Wenn du diese App startest, sind die Lichter aus, aber sobald du ein Muster wählst, gibt es keine Möglichkeit, die Lichter wieder auszuschalten!

        # Mache Folgendes

        Erstelle eine Funktion, die alle LEDs ausschaltet, und füge dann eine "Off"-Schaltfläche zur App hinzu, damit diese alle farbigen LEDs ausschaltet.
      CSD U6 light show predict: |-
        # Put on a Light Show

        This app lets you put on a light show with the LED.

        Look at the code with your partner and answer the following questions:

        -   What does this line of code do: `setProperty("screen", "background-color", rgb(randomNumber(0,255), randomNumber(0,255), randomNumber(0,255)));`?

        Once you have answered the question, run the code and click the buttons to see what happens.
      CSD U6 light show predict_2018: |-
        # Put on a Light Show

        This app lets you put on a light show with the LED.

        Look at the code with your partner and answer the following questions:

        -   What does this line of code do: `setProperty("screen", "background-color", rgb(randomNumber(0,255), randomNumber(0,255), randomNumber(0,255)));`?

        Once you have answered the question, run the code and click the buttons to see what happens.
      CSD U6 light show predict_2019: |-
        # Put on a Light Show

        This app lets you put on a light show with the LED.

        Look at the code with your partner and answer the following questions:

        -   What does this line of code do: `setProperty("screen", "background-color", rgb(randomNumber(0,255), randomNumber(0,255), randomNumber(0,255)));`?

        Once you have answered the question, run the code and click the buttons to see what happens.
      CSD U6 move motorcycle: |-
        # Movement with Properties

        Earlier we used `setProperty` to change the x and y position of elements on the screen, but we could only move them to either a single specific location, or a random location. By using `getProperty` to find out an element's current position, we can use the **counter pattern** from Unit 3 to update that position.

        # Do This

        -   Read the program and discuss with your partner how the left button makes the motorcycle go up.
        -   Using the working left button as an example, program the right button to make the motorcycle go down.
      CSD U6 move motorcycle_2018: |-
        # Movement with Properties

        Earlier we used `setProperty` to change the x and y position of elements on the screen, but we could only move them to either a single specific location, or a random location. By using `getProperty` to find out an element's current position, we can use the **counter pattern** from Unit 3 to update that position.

        # Do This

        -   Read the program and discuss with your partner how the left button makes the motorcycle go up.
        -   Using the working left button as an example, program the right button to make the motorcycle go down.
      CSD U6 move motorcycle_2019: |-
        # Movement with Properties

        Earlier we used `setProperty` to change the x and y position of elements on the screen, but we could only move them to either a single specific location, or a random location. By using `getProperty` to find out an element's current position, we can use the **counter pattern** from Unit 3 to update that position.

        # Do This

        -   Read the program and discuss with your partner how the left button makes the motorcycle go up.
        -   Using the working left button as an example, program the right button to make the motorcycle go down.
      CSD U6 params create colors: |-
        # Color Picker

        In this program, pressing the buttons at the bottom of the screen changes the color of the images and the color LEDs.

        # Do This

        -   Create a function `chooseColor(color)` that changes each of the images and the color LEDs to the given color.
        -   Call your function in the event blocks so that all the buttons work.
      CSD U6 params create colors_2018: |-
        # Color Picker

        In this program, pressing the buttons at the bottom of the screen changes the color of the images and the color LEDs.

        # Do This

        -   Create a function `chooseColor(color)` that changes each of the images and the color LEDs to the given color.
        -   Call your function in the event blocks so that all the buttons work.
      CSD U6 params create colors_2019: |-
        # Color Picker

        In this program, pressing the buttons at the bottom of the screen changes the color of the images and the color LEDs.

        # Do This

        -   Create a function `chooseColor(color)` that changes each of the images and the color LEDs to the given color.
        -   Call your function in the event blocks so that all the buttons work.
      CSD U6 params modify clouds_2019: |-
        # Wolken

        Dieses Programm lässt die Wolken sich bewegen, wenn du in den Soundsensor pustest, aber es ist noch nicht fertig.

        # Mach folgendes

        -   Erstelle eine neue Funktion `moveCloud(name)`, die jede Wolke bewegt.
            -   (Hinweis: Du wirst fast den gleichen Code wie die Funktion `moveCloud0` verwenden).
        -   Rufe Deine neue Funktion `moveCloud(name)` innerhalb des Ereignisblocks einmal für jeden Wolkennamen auf.
            -   (Hinweis: Dies ist vergleichbar mit dem Aufruf der Funktion `loopCloud(name)`.)
      CSD U6 params predict contained: |-
        # Bug Crawl

        Look at the program below, paying special attention to the function `crawl(bug)`.  What happens if you press the left or right button?
      CSD U6 params predict contained_2018: |-
        # Bug Crawl

        Look at the program below, paying special attention to the function `crawl(bug)`.  What happens if you press the left or right button?
      CSD U6 params predict contained_2019: |-
        # Bug Crawl

        Look at the program below, paying special attention to the function `crawl(bug)`.  What happens if you press the left or right button?
      CSD U6 params starchaser 1: |-
        # Make your `loopStar(color)` function

        Right now only the red star works, so you'll need to change this code.

        # Do This

        -   Use the code from the `loopRedStar()` function to create a `loopStar(color)` function that will work with any star.
        -   Test your function by calling `loopStar("red")` and `loopStar("blue")` inside the `loopStars()` function.
      CSD U6 params starchaser 1_2018: |-
        # Make your `loopStar(color)` function

        Right now only the red star works, so you'll need to change this code.

        # Do This

        -   Use the code from the `loopRedStar()` function to create a `loopStar(color)` function that will work with any star.
        -   Test your function by calling `loopStar("red")` and `loopStar("blue")` inside the `loopStars()` function.
      CSD U6 params starchaser 1_2019: |-
        # Make your `loopStar(color)` function

        Right now only the red star works, so you'll need to change this code.

        # Do This

        -   Use the code from the `loopRedStar()` function to create a `loopStar(color)` function that will work with any star.
        -   Test your function by calling `loopStar("red")` and `loopStar("blue")` inside the `loopStars()` function.
      CSD U6 params starchaser 2: |-
        # Star Chaser

        Now you'll need to make all the stars loop around the screen.

        # Do This

        -   Use a `for` loop inside your `loopStars()` function to make every star in "starArray" loop around the screen.
      CSD U6 params starchaser 2_2018: |-
        # Star Chaser

        Now you'll need to make all the stars loop around the screen.

        # Do This

        -   Use a `for` loop inside your `loopStars()` function to make every star in "starArray" loop around the screen.
      CSD U6 params starchaser 2_2019: |-
        # Star Chaser

        Now you'll need to make all the stars loop around the screen.

        # Do This

        -   Use a `for` loop inside your `loopStars()` function to make every star in "starArray" loop around the screen.
      CSD U6 params starchaser 3: |-
        # Star Chaser

        All the stars loop, but you can still only catch the red star.

        # Do This

        -   Use code from the `moveRedStar()` function to make a `moveStar(color)` function that can move any star.
        -   Use code from the `checkRedStar()` function to make a `checkStar(color)` function that works for any star.
        -   Test your code by calling `checkStar("red")` and `checkStar("blue")` inside your event block.
      CSD U6 params starchaser 3_2018: |-
        # Star Chaser

        All the stars loop, but you can still only catch the red star.

        # Do This

        -   Use code from the `moveRedStar()` function to make a `moveStar(color)` function that can move any star.
        -   Use code from the `checkRedStar()` function to make a `checkStar(color)` function that works for any star.
        -   Test your code by calling `checkStar("red")` and `checkStar("blue")` inside your event block.
      CSD U6 params starchaser 3_2019: |-
        # Star Chaser

        All the stars loop, but you can still only catch the red star.

        # Do This

        -   Use code from the `moveRedStar()` function to make a `moveStar(color)` function that can move any star.
        -   Use code from the `checkRedStar()` function to make a `checkStar(color)` function that works for any star.
        -   Test your code by calling `checkStar("red")` and `checkStar("blue")` inside your event block.
      CSD U6 params starchaser 4: |-
        # Star Chaser

        Now make it work for all the stars

        # Do This

        -   Create a `checkStars()` functions that uses a `for` loop to check every star in the star array.
        -   Test your code by calling the `checkStars()` function inside the event block.
      CSD U6 params starchaser 4_2018: |-
        # Star Chaser

        Now make it work for all the stars

        # Do This

        -   Create a `checkStars()` functions that uses a `for` loop to check every star in the star array.
        -   Test your code by calling the `checkStars()` function inside the event block.
      CSD U6 params starchaser 4_2019: |-
        # Star Chaser

        Now make it work for all the stars

        # Do This

        -   Create a `checkStars()` functions that uses a `for` loop to check every star in the star array.
        -   Test your code by calling the `checkStars()` function inside the event block.
      CSD U6 params starchaser 5: |-
        # Star Chaser

        Now you can add extra stars, and your functions will work with them, too.

        # Do This

        -   In design mode, copy one of the stars, and change its name and color to "yellow".
        -   Add a new element, "yellow", to your star array.
        -   Test the game with your new star.
      CSD U6 params starchaser 5_2018: |-
        # Star Chaser

        Now you can add extra stars, and your functions will work with them, too.

        # Do This

        -   In design mode, copy one of the stars, and change its name and color to "yellow".
        -   Add a new element, "yellow", to your star array.
        -   Test the game with your new star.
      CSD U6 params starchaser 5_2019: |-
        # Star Chaser

        Now you can add extra stars, and your functions will work with them, too.

        # Do This

        -   In design mode, copy one of the stars, and change its name and color to "yellow".
        -   Add a new element, "yellow", to your star array.
        -   Test the game with your new star.
      CSD U6 params starchaser challenge 1_2018: |-
        # Star Chaser

        Now that you have a working game, you can challenge yourself with some different features.

        # Do This

        -   Start the user with 5 "lives", and take one away every time the user touches the **wrong** star.
        -   Make an end screen, and change to that screen when the user runs out of lives.
      CSD U6 params starchaser challenge 1_2019: |-
        # Star Chaser

        Now that you have a working game, you can challenge yourself with some different features.

        # Do This

        -   Start the user with 5 "lives", and take one away every time the user touches the **wrong** star.
        -   Make an end screen, and change to that screen when the user runs out of lives.
      CSD U6 params starchaser challenge 2_2018: |-
        # Star Chaser

        Nun, da du ein funktionierendes Spiel hast, kannst du dich mit einigen verschiedenen Features herausfordern.

        # Mache Folgendes

        -   Bringe den Spieler dazu, wieder in die Mitte des Bildschirms zu gehen, wenn die linke Taste gedrückt wird.
      CSD U6 params starchaser challenge 2_2019: |-
        # Star Chaser

        Nun, da du ein funktionierendes Spiel hast, kannst du dich mit einigen verschiedenen Features herausfordern.

        # Mache Folgendes

        -   Bringe den Spieler dazu, wieder in die Mitte des Bildschirms zu gehen, wenn die linke Taste gedrückt wird.
      CSD U6 params starchaser intro: |-
        # Star Chaser

        In this game, the user tries to catch the stars according to the color of the LEDs.

        # Do This

        -   Play the game, and discuss the following with a partner:
            -   What functions might this program need?
            -   What parameters should these functions have?
      CSD U6 params starchaser intro_2018: |-
        # Star Chaser

        In this game, the user tries to catch the stars according to the color of the LEDs.

        # Do This

        -   Play the game, and discuss the following with a partner:
            -   What functions might this program need?
            -   What parameters should these functions have?
      CSD U6 params starchaser intro_2019: |-
        # Star Chaser

        In this game, the user tries to catch the stars according to the color of the LEDs.

        # Do This

        -   Play the game, and discuss the following with a partner:
            -   What functions might this program need?
            -   What parameters should these functions have?
      CSD U6 predict LED button: Embedded Prediction
      CSD U6 predict LED button_2018: Embedded Prediction
      CSD U6 predict LED button_2019: Embedded Prediction
      CSD U6 random array notes: "# Random Song Generator\n\nYou're going to make
        a random song generator. When you press a button, a random note should play.
        Press it enough times, and you have yourself a beautiful arrangement of bleeps
        and bloops. \n\nYou used `randomNumber()` to select an element from an array
        in the previous lesson, so this should be familiar.\n\n# Do This\n\n-   Add
        code to randomly select a note from the `notes` array and play it.\n-   Run
        the program and press the left button to hear your buzzer sing its beautiful
        tune."
      CSD U6 random array notes_2018: "# Random Song Generator\n\nYou're going to
        make a random song generator. When you press a button, a random note should
        play. Press it enough times, and you have yourself a beautiful arrangement
        of bleeps and bloops. \n\nYou used `randomNumber()` to select an element from
        an array in the previous lesson, so this should be familiar.\n\n# Do This\n\n-
        \  Add code to randomly select a note from the `notes` array and play it.\n-
        \  Run the program and press the left button to hear your buzzer sing its
        beautiful tune."
      CSD U6 random array notes_2019: "# Random Song Generator\n\nYou're going to
        make a random song generator. When you press a button, a random note should
        play. Press it enough times, and you have yourself a beautiful arrangement
        of bleeps and bloops. \n\nYou used `randomNumber()` to select an element from
        an array in the previous lesson, so this should be familiar.\n\n# Do This\n\n-
        \  Add code to randomly select a note from the `notes` array and play it.\n-
        \  Run the program and press the left button to hear your buzzer sing its
        beautiful tune."
      CSD U6 sensor experiment embedded: |-
        # Sensor Experiment

        Run the program to the right and experiment with your board. Try interacting with your board in many different ways to figure out what each sensor might be. As you experiment with each sensor, discuss with a neighbor:

        -   What does this sensor measure?
        -   What is its maximum value?
        -   What is its minimum value?
      CSD U6 sensor experiment embedded_2018: |-
        # Sensor Experiment

        Run the program to the right and experiment with your board. Try interacting with your board in many different ways to figure out what each sensor might be. As you experiment with each sensor, discuss with a neighbor:

        -   What does this sensor measure?
        -   What is its maximum value?
        -   What is its minimum value?
      CSD U6 sensor experiment embedded_2019: |-
        # Sensor Experiment

        Run the program to the right and experiment with your board. Try interacting with your board in many different ways to figure out what each sensor might be. As you experiment with each sensor, discuss with a neighbor:

        -   What does this sensor measure?
        -   What is its maximum value?
        -   What is its minimum value?
      CSD U6 setProperty Text: |-
        # Changing the Text

        The `setProperty` block can be used to change lots of things about your design elements, including the text they contain.

        # Do This

        -   Drag out a `setProperty` block
        -   For the first parameter, select "name" (the element's id)
        -   For the second parameter, select "text" (the property you want to set)
        -   For the third parameter, write your name in quotes (the value to set)

        _Note: We've removed the Design Mode tab for now so you can practice working with `setProperty`, but it'll come back later once you're building apps of your own._
      CSD U6 setProperty Text_2018: |-
        # Changing the Text

        The `setProperty` block can be used to change lots of things about your design elements, including the text they contain.

        # Do This

        -   Drag out a `setProperty` block
        -   For the first parameter, select "name" (the element's id)
        -   For the second parameter, select "text" (the property you want to set)
        -   For the third parameter, write your name in quotes (the value to set)

        _Note: We've removed the Design Mode tab for now so you can practice working with `setProperty`, but it'll come back later once you're building apps of your own._
      CSD U6 setProperty Text_2019: |-
        # Changing the Text

        The `setProperty` block can be used to change lots of things about your design elements, including the text they contain.

        # Do This

        -   Drag out a `setProperty` block
        -   For the first parameter, select "name" (the element's id)
        -   For the second parameter, select "text" (the property you want to set)
        -   For the third parameter, write your name in quotes (the value to set)

        _Note: We've removed the Design Mode tab for now so you can practice working with `setProperty`, but it'll come back later once you're building apps of your own._
      CSD U6 setProperty hidden: |-
        # Hidden

        Design elements have a property called "hidden" that controls whether the element should show on screen or not. We are going to use this property to create an alarm app. Notice that when the program starts one button is hidden, and one is not.

        We have already set up an event handler for the "triggerAlarmButton" which will do two things when clicked:

        -   Change the "text" property of "statusLabel" to "on"
        -   Set the "hidden" property of "stopAlarmButton" to `false` (meaning it should _not_ be hidden)

        # Do This

        -   Run the program and click "Trigger Alarm" to see how it works
        -   Add code to the provided event handler that hides the "triggerAlarmButton"

        _Note: the button "stopAlarmButton" is already on the screen, but because its "hidden" property is marked true, it isn't shown when the program starts._
      CSD U6 setProperty hidden 2: |-
        # Showing/Hiding

        This alarm app isn't super useful if you can't turn the alarm off once it's been triggered. Let's fix that.

        # Do This

        Add a second `onEvent` block to watch for the "stopAlarmButton" to be clicked. Inside that block:

        -   Change the status text to "OFF"
        -   Hide the "stopAlarmButton"

        _Hint: "hidden" is a boolean property. If we used `false` to make the button show up, what should you use to make it hidden again?_
      CSD U6 setProperty hidden 2_2018: |-
        # Showing/Hiding

        This alarm app isn't super useful if you can't turn the alarm off once it's been triggered. Let's fix that.

        # Do This

        Add a second `onEvent` block to watch for the "stopAlarmButton" to be clicked. Inside that block:

        -   Change the status text to "OFF"
        -   Hide the "stopAlarmButton"

        _Hint: "hidden" is a boolean property. If we used `false` to make the button show up, what should you use to make it hidden again?_
      CSD U6 setProperty hidden 2_2019: |-
        # Zeigen/Verbergen

        Diese Alarm-App ist nicht besonders nützlich, wenn Sie den Alarm nicht ausschalten können, sobald er ausgelöst wurde. Lasst uns das in Ordnung bringen.

        # Mach folgendes

        Erstelle ein zweites Ereignis, um zu beobachten, ob der "stopAlarmButton" angeklickt werden kann. Wenn dieses Ereignis ausgelöst wird:

        -   Ändere den Statustext auf "OFF".
        -   Verberge die "stopAlarmButton".

        _Hinweis: "hidden" ist eine boolesche Eigenschaft. Wenn wir `false` benutzt haben, damit der Button erscheint, was sollten wir dann verwenden, um ihn wieder zu verstecken?_
      CSD U6 setProperty hidden_2018: |-
        # Hidden

        Design elements have a property called "hidden" that controls whether the element should show on screen or not. We are going to use this property to create an alarm app. Notice that when the program starts one button is hidden, and one is not.

        We have already set up an event handler for the "triggerAlarmButton" which will do two things when clicked:

        -   Change the "text" property of "statusLabel" to "on"
        -   Set the "hidden" property of "stopAlarmButton" to `false` (meaning it should _not_ be hidden)

        # Do This

        -   Run the program and click "Trigger Alarm" to see how it works
        -   Add code to the provided event handler that hides the "triggerAlarmButton"

        _Note: the button "stopAlarmButton" is already on the screen, but because its "hidden" property is marked true, it isn't shown when the program starts._
      CSD U6 setProperty hidden_2019: |-
        # Hidden

        Design elements have a property called "hidden" that controls whether the element should show on screen or not. We are going to use this property to create an alarm app. Notice that when the program starts one button is hidden, and one is not.

        We have already set up an event handler for the "triggerAlarmButton" which will do two things when clicked:

        -   Change the "text" property of "statusLabel" to "on"
        -   Set the "hidden" property of "stopAlarmButton" to `false` (meaning it should _not_ be hidden)

        # Do This

        -   Run the program and click "Trigger Alarm" to see how it works
        -   Add code to the provided event handler that hides the "triggerAlarmButton"

        _Note: the button "stopAlarmButton" is already on the screen, but because its "hidden" property is marked true, it isn't shown when the program starts._
      CSD U6 setProperty xy: |-
        # Changing Position

        Every design element (except for the screen) has an "x" and a "y" property that controls its position.

        # Do This

        <div markdown="1" style="float:right">

        ![expandable](https://images.code.org/3a67642609071cf6766c296b8ca5a68e-image-1526944857178.png)

        </div>

        Using the `setProperty` block, move "red\_button" so that it matches the image to the right. (Click on the image to see the full size.)

        _Note: We've removed the Design Mode tab for now so you can practice working with setProperty, but it'll come back later once you're building apps of your own._
      CSD U6 setProperty xy click: |-
        # Changing With a Click

        It's not really useful to only set a property when your program is first run. After all, you could just do all of that in Design Mode. When you use an `onEvent` block with `setProperty`, you're able to do things you couldn't do with Design Mode alone.

        # Do This

        We've provided an empty `onEvent` block that's watching the "smiley" image. Inside the `onEvent` block, use two `setProperty` blocks to move the smiley somewhere else (it doesn't really matter where for now). Test your program by running it and clicking on the smiley.
      CSD U6 setProperty xy click_2018: |-
        # Changing With a Click

        It's not really useful to only set a property when your program is first run. After all, you could just do all of that in Design Mode. When you use an `onEvent` block with `setProperty`, you're able to do things you couldn't do with Design Mode alone.

        # Do This

        We've provided an empty `onEvent` block that's watching the "smiley" image. Inside the `onEvent` block, use two `setProperty` blocks to move the smiley somewhere else (it doesn't really matter where for now). Test your program by running it and clicking on the smiley.
      CSD U6 setProperty xy click_2019: |-
        # Changing With a Click

        It's not really useful to only set a property when your program is first run. After all, you could just do all of that in Design Mode. When you use an `onEvent` block with `setProperty`, you're able to do things you couldn't do with Design Mode alone.

        # Do This

        We've provided an empty `onEvent` block that's watching the "smiley" image. Inside the `onEvent` block, use two `setProperty` blocks to move the smiley somewhere else (it doesn't really matter where for now). Test your program by running it and clicking on the smiley.
      CSD U6 setProperty xy random: |-
        <img src="https://images.code.org/67c6cc358b235e2c2ae39f3f72a3e0b1-image-1507326303839.gif" style="float:right; max-width: 150px; margin: 10px;">

        # Randomization

        Moving on the first click is fine, but this smiley would be even cooler if it moved somewhere new _every time_ we clicked. Fortunately, we can use the `randomNumber` block to do just that.

        # Do This

        Instead of setting the "x" and "y" properties to a specific number, use the `randomNumber` block to pick a new random "x" and "y" each time the smiley is clicked.

        _Tip: The App Lab screen is 320 pixels wide by 450 pixels tall. What range of random numbers will ensure that the smiley is always visible on screen?_
      CSD U6 setProperty xy random_2018: |-
        <img src="https://images.code.org/67c6cc358b235e2c2ae39f3f72a3e0b1-image-1507326303839.gif" style="float:right; max-width: 150px; margin: 10px;">

        # Randomization

        Moving on the first click is fine, but this smiley would be even cooler if it moved somewhere new _every time_ we clicked. Fortunately, we can use the `randomNumber` block to do just that.

        # Do This

        Instead of setting the "x" and "y" properties to a specific number, use the `randomNumber` block to pick a new random "x" and "y" each time the smiley is clicked.

        _Tip: The App Lab screen is 320 pixels wide by 450 pixels tall. What range of random numbers will ensure that the smiley is always visible on screen?_
      CSD U6 setProperty xy random_2019: |-
        <img src="https://images.code.org/67c6cc358b235e2c2ae39f3f72a3e0b1-image-1507326303839.gif" style="float:right; max-width: 150px; margin: 10px;">

        # Randomization

        Moving on the first click is fine, but this smiley would be even cooler if it moved somewhere new _every time_ we clicked. Fortunately, we can use the `randomNumber` block to do just that.

        # Do This

        Instead of setting the "x" and "y" properties to a specific number, use the `randomNumber` block to pick a new random "x" and "y" each time the smiley is clicked.

        _Tip: The App Lab screen is 320 pixels wide by 450 pixels tall. What range of random numbers will ensure that the smiley is always visible on screen?_
      CSD U6 setProperty xy_2018: |-
        # Changing Position

        Every design element (except for the screen) has an "x" and a "y" property that controls its position.

        # Do This

        <div markdown="1" style="float:right">

        ![expandable](https://images.code.org/3a67642609071cf6766c296b8ca5a68e-image-1526944857178.png)

        </div>

        Using the `setProperty` block, move "red\_button" so that it matches the image to the right. (Click on the image to see the full size.)

        _Note: We've removed the Design Mode tab for now so you can practice working with setProperty, but it'll come back later once you're building apps of your own._
      CSD U6 setProperty xy_2019: |-
        # Changing Position

        Every design element (except for the screen) has an "x" and a "y" property that controls its position.

        # Do This

        <div markdown="1" style="float:right">

        ![expandable](https://images.code.org/3a67642609071cf6766c296b8ca5a68e-image-1526944857178.png)

        </div>

        Using the `setProperty` block, move "red\_button" so that it matches the image to the right. (Click on the image to see the full size.)

        _Note: We've removed the Design Mode tab for now so you can practice working with setProperty, but it'll come back later once you're building apps of your own._
      CSD U6 slider intro: |-
        # Sliders

        Last time, your users were only able to choose between a short and long buzz.  To give the user control over the exact duration of the buzzer, you'll want to use a slider.

        This slider lets users choose a value between 100 and 1000 for the duration of the buzz, but there's something not quite right about how it's working.

        # Do This

        -   Look over the code and find the bug that's keeping the duration from being set correctly.
            -   (Hint: Hover over the yellow triangles for clues as to what might be wrong with the code.)
      CSD U6 slider intro_2018: |-
        # Sliders

        Last time, your users were only able to choose between a short and long buzz.  To give the user control over the exact duration of the buzzer, you'll want to use a slider.

        This slider lets users choose a value between 100 and 1000 for the duration of the buzz, but there's something not quite right about how it's working.

        # Do This

        -   Look over the code and find the bug that's keeping the duration from being set correctly.
            -   (Hint: Hover over the yellow triangles for clues as to what might be wrong with the code.)
      CSD U6 slider intro_2019: |-
        # Sliders

        Last time, your users were only able to choose between a short and long buzz.  To give the user control over the exact duration of the buzzer, you'll want to use a slider.

        This slider lets users choose a value between 100 and 1000 for the duration of the buzz, but there's something not quite right about how it's working.

        # Do This

        -   Look over the code and find the bug that's keeping the duration from being set correctly.
            -   (Hint: Hover over the yellow triangles for clues as to what might be wrong with the code.)
      CSD U6 stillness game predict code: |-
        # Change with the Accelerometer

        This program uses the change event to increase a movement meter every time the board moves. When the movement meter reaches 100, the alarm will sound.

        # Do This

        This program has two bugs that you need to fix:

        -   The movement meter is being triggered by a button press, instead of the accelerometer's `change` event.
        -   The programmer forgot how to use the counter pattern to increase the movement variable.

        Once you have found the bugs, run the program and try to pass the board to your partner without setting off the alarm.
      CSD U6 stillness game predict code_2018: |-
        # Change with the Accelerometer

        This program uses the change event to increase a movement meter every time the board moves. When the movement meter reaches 100, the alarm will sound.

        # Do This

        This program has two bugs that you need to fix:

        -   The movement meter is being triggered by a button press, instead of the accelerometer's `change` event.
        -   The programmer forgot how to use the counter pattern to increase the movement variable.

        Once you have found the bugs, run the program and try to pass the board to your partner without setting off the alarm.
      CSD U6 stillness game predict code_2019: |-
        # Change with the Accelerometer

        This program uses the change event to increase a movement meter every time the board moves. When the movement meter reaches 100, the alarm will sound.

        # Do This

        This program has two bugs that you need to fix:

        -   The movement meter is being triggered by a button press, instead of the accelerometer's `change` event.
        -   The programmer forgot how to use the counter pattern to increase the movement variable.

        Once you have found the bugs, run the program and try to pass the board to your partner without setting off the alarm.
      CSD U6 test LED: |-
        # Control the LED

        Now that you know your board is working, you can try out the different LED blocks.

        # Do This

        -   Click "Run" and discuss with your partner how the code works.
        -   Try the different LED blocks to see what they do.
            -   Hint: Don't forget to hit "Reset" and run your code again after you change it
      CSD U6 test LED_2018: |-
        # Control the LED

        Now that you know your board is working, you can try out the different LED blocks.

        # Do This

        -   Click "Run" and discuss with your partner how the code works.
        -   Try the different LED blocks to see what they do.
            -   Hint: Don't forget to hit "Reset" and run your code again after you change it
      CSD U6 test LED_2019: |-
        # Control the LED

        Now that you know your board is working, you can try out the different LED blocks.

        # Do This

        -   Click "Run" and discuss with your partner how the code works.
        -   Try the different LED blocks to see what they do.
            -   Hint: Don't forget to hit "Reset" and run your code again after you change it
      CSD U6 tugowar buzzer: "# Winning Buzzer\n\nThat last thing that that is missing
        from your project guide's description of this project is the buzzer. It should
        buzz a high tone if player 1 wins and a low tone if player 2 wins. \n\n# Do
        This\n\nSo far we've been able to just use the `player` parameter directly
        to report which player won, but that won't work for buzzing different sounds.
        Inside the conditional that checks if a player won, you'll need to add _another_
        conditional that checks which player it was. If `player == \"red\"` the buzzer
        should play a high note, otherwise (else) it should play a low note."
      CSD U6 tugowar buzzer_2018: "# Winning Buzzer\n\nThat last thing that that is
        missing from your project guide's description of this project is the buzzer.
        It should buzz a high tone if player 1 wins and a low tone if player 2 wins.
        \n\n# Do This\n\nSo far we've been able to just use the `player` parameter
        directly to report which player won, but that won't work for buzzing different
        sounds. Inside the conditional that checks if a player won, you'll need to
        add _another_ conditional that checks which player it was. If `player == \"red\"`
        the buzzer should play a high note, otherwise (else) it should play a low
        note."
      CSD U6 tugowar buzzer_2019: "# Winning Buzzer\n\nThat last thing that that is
        missing from your project guide's description of this project is the buzzer.
        It should buzz a high tone if player 1 wins and a low tone if player 2 wins.
        \n\n# Do This\n\nSo far we've been able to just use the `player` parameter
        directly to report which player won, but that won't work for buzzing different
        sounds. Inside the conditional that checks if a player won, you'll need to
        add _another_ conditional that checks which player it was. If `player == \"red\"`
        the buzzer should play a high note, otherwise (else) it should play a low
        note."
      CSD U6 tugowar conditional: |-
        # Check for a Winner

        Your game should be pretty playable by now. Two players can click their respective buttons, and their emojies will race down the screen. We still need a way for a player to win though.

        # Do This

        Using a conditional inside the `checkWin()` function, you want to check if a player has won each time they click. For now, we can just use `console.log` to report the winner.

        -   Add an if statement to the bottom of `checkWin()`
        -   For the condition of your if statement, check if `player_y` is greater than 350 (or use the bottom of screen value you decided on in the last level)
        -   In your conditional, add a `console.log` that reports which player won
        -   Test your program to make sure that it reports a winner when one of the emojis makes it to the bottom of the screen
      CSD U6 tugowar conditional_2018: |-
        # Check for a Winner

        Your game should be pretty playable by now. Two players can click their respective buttons, and their emojies will race down the screen. We still need a way for a player to win though.

        # Do This

        Using a conditional inside the `checkWin()` function, you want to check if a player has won each time they click. For now, we can just use `console.log` to report the winner.

        -   Add an if statement to the bottom of `checkWin()`
        -   For the condition of your if statement, check if `player_y` is greater than 350 (or use the bottom of screen value you decided on in the last level)
        -   In your conditional, add a `console.log` that reports which player won
        -   Test your program to make sure that it reports a winner when one of the emojis makes it to the bottom of the screen
      CSD U6 tugowar conditional_2019: |-
        # Check for a Winner

        Your game should be pretty playable by now. Two players can click their respective buttons, and their emojies will race down the screen. We still need a way for a player to win though.

        # Do This

        Using a conditional inside the `checkWin()` function, you want to check if a player has won each time they click. For now, we can just use `console.log` to report the winner.

        -   Add an if statement to the bottom of `checkWin()`
        -   For the condition of your if statement, check if `player_y` is greater than 350 (or use the bottom of screen value you decided on in the last level)
        -   In your conditional, add a `console.log` that reports which player won
        -   Test your program to make sure that it reports a winner when one of the emojis makes it to the bottom of the screen
      CSD U6 tugowar demo: |-
        # Grab that Bug!

        This is an example of a tug o' war game that could be built in this lesson. To play, pair up with another student. The student on the left will the click the left button on the Circuit Playground as fast as they can, while the student on the right clicks the right button. Whoever can get the bug over to their side first wins.
      CSD U6 tugowar demo_2018: |-
        # Grab that Bug!

        This is an example of a tug o' war game that could be built in this lesson. To play, pair up with another student. The student on the left will the click the left button on the Circuit Playground as fast as they can, while the student on the right clicks the right button. Whoever can get the bug over to their side first wins.
      CSD U6 tugowar demo_2019: |-
        # Grab that Bug!

        This is an example of a tug o' war game that could be built in this lesson. To play, pair up with another student. The student on the left will the click the left button on the Circuit Playground as fast as they can, while the student on the right clicks the right button. Whoever can get the bug over to their side first wins.
      CSD U6 tugowar design 1: |-
        # Getting Started: Screen Design

        You should have already reviewed the planning guide for this project. Some of the work to turn this project guide into a working program has already been started. Based on the project guide you're going to do the rest of this work.

        # Do This

        We've already created a "start" screen and included a title and "play" button. Using your planning guide, finish creating this screen. Specifically you'll want to:

        -   Update the title text to say "Emoji Race"
        -   Add instructions for playing using the ID "instructions"

        Feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 1.5: |-
        # Game Screen Design

        We've also added a "game" screen where the game will be played. It just needs a couple of tweaks.

        # Do This

        Switch to the "game" screen and, using your planning guide, fix this screen by changing the color of the two emoji images.

        Feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 1.5_2018: |-
        # Game Screen Design

        We've also added a "game" screen where the game will be played. It just needs a couple of tweaks.

        # Do This

        Switch to the "game" screen and, using your planning guide, fix this screen by changing the color of the two emoji images.

        Feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 1.5_2019: |-
        # Game Screen Design

        We've also added a "game" screen where the game will be played. It just needs a couple of tweaks.

        # Do This

        Switch to the "game" screen and, using your planning guide, fix this screen by changing the color of the two emoji images.

        Feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 1_2018: |-
        # Getting Started: Screen Design

        You should have already reviewed the planning guide for this project. Some of the work to turn this project guide into a working program has already been started. Based on the project guide you're going to do the rest of this work.

        # Do This

        We've already created a "start" screen and included a title and "play" button. Using your planning guide, finish creating this screen. Specifically you'll want to:

        -   Update the title text to say "Emoji Race"
        -   Add instructions for playing using the ID "instructions"

        Feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 1_2019: |-
        # Getting Started: Screen Design

        You should have already reviewed the planning guide for this project. Some of the work to turn this project guide into a working program has already been started. Based on the project guide you're going to do the rest of this work.

        # Do This

        We've already created a "start" screen and included a title and "play" button. Using your planning guide, finish creating this screen. Specifically you'll want to:

        -   Update the title text to say "Emoji Race"
        -   Add instructions for playing using the ID "instructions"

        Feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 2: |-
        # Designing the Win Screen

        The final screen in this program shows who won. It's totally blank right now.

        # Do This

        Switch to "win" and design it based on your project guide. Make sure to pay close attention to the ID of each element. Once you've added the required elements, feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 2_2018: |-
        # Designing the Win Screen

        The final screen in this program shows who won. It's totally blank right now.

        # Do This

        Switch to "win" and design it based on your project guide. Make sure to pay close attention to the ID of each element. Once you've added the required elements, feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 2_2019: |-
        # Designing the Win Screen

        The final screen in this program shows who won. It's totally blank right now.

        # Do This

        Switch to "win" and design it based on your project guide. Make sure to pay close attention to the ID of each element. Once you've added the required elements, feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar final: |-
        # Make It Your Own

        You just walked through someone else's plan for creating a program, so now it's time to make it your own. What additional features or challenges do you want to create?

        # Do This

        Select one of the challenges below to add to the game or come up with a challenge of your own.

        -   Change the look and layout of the screens
        -   Use the buzzer or the led to show when one of the buttons has been clicked
        -   Set the "icon-color" property of "winner\_image" to the winning color
        -   Make the emojis start out sad, change to meh halfway, and end up happy
        -   Use a variable and conditionals to make sure that players can only move their emojis when the "game" screen is showing
      CSD U6 tugowar final_2018: |-
        # Make It Your Own

        You just walked through someone else's plan for creating a program, so now it's time to make it your own. What additional features or challenges do you want to create?

        # Do This

        Select one of the challenges below to add to the game or come up with a challenge of your own.

        -   Change the look and layout of the screens
        -   Use the buzzer or the led to show when one of the buttons has been clicked
        -   Set the "icon-color" property of "winner\_image" to the winning color
        -   Make the emojis start out sad, change to meh halfway, and end up happy
        -   Use a variable and conditionals to make sure that players can only move their emojis when the "game" screen is showing
      CSD U6 tugowar final_2019: |-
        # Make It Your Own

        You just walked through someone else's plan for creating a program, so now it's time to make it your own. What additional features or challenges do you want to create?

        # Do This

        Select one of the challenges below to add to the game or come up with a challenge of your own.

        -   Change the look and layout of the screens
        -   Use the buzzer or the led to show when one of the buttons has been clicked
        -   Set the "icon-color" property of "winner\_image" to the winning color
        -   Make the emojis start out sad, change to meh halfway, and end up happy
        -   Use a variable and conditionals to make sure that players can only move their emojis when the "game" screen is showing
      CSD U6 tugowar setProperty: |-
        # Display the Winner

        The winning screen doesn't actually know _who_ won the game. Let's fix that now.

        # Do This

        Before each call to `setScreen`, add a `setProperty` block to change the "text" property of "winner" to display the actual winner.
      CSD U6 tugowar setProperty_2018: |-
        # Display the Winner

        The winning screen doesn't actually know _who_ won the game. Let's fix that now.

        # Do This

        Before the call to `setScreen`, add a `setProperty` block to change the "text" property of "winner" to display the actual winner.
      CSD U6 tugowar setProperty_2019: |-
        # Display the Winner

        The winning screen doesn't actually know _who_ won the game. Let's fix that now.

        # Do This

        Before the call to `setScreen`, add a `setProperty` block to change the "text" property of "winner" to display the actual winner.
      CSD U6 tugowar setScreen: |-
        # Change to the Win Screen

        Now that we have conditionals to check which player won, let's switch to the "win" screen when a player wins.

        # Do This

        Inside the conditional that you've created to check if a player has reached the bottom, add a `setScreen` block to change to the "win" screen. Make sure you test that your new code works before moving on!
      CSD U6 tugowar setScreen_2018: |-
        # Change to the Win Screen

        Now that we have conditionals to check which player won, let's switch to the "win" screen when a player wins.

        # Do This

        Inside the conditional that you've created to check if a player has reached the bottom, add a `setScreen` block to change to the "win" screen. Make sure you test that your new code works before moving on!
      CSD U6 tugowar setScreen_2019: |-
        # Change to the Win Screen

        Now that we have conditionals to check which player won, let's switch to the "win" screen when a player wins.

        # Do This

        Inside the conditional that you've created to check if a player has reached the bottom, add a `setScreen` block to change to the "win" screen. Make sure you test that your new code works before moving on!
      CSD U6 tugowar variables 1: "# The startGame() Function\n\nIf you look at the
        events we planned for in the planning guide, you may notice that two events
        do essentially the same thing. The events that respond to both the \"play\"
        and \"replay\" buttons could be written with identical code, but duplicate
        code like this is a perfect place to use a **function**.\n\n# Do This\n\nWe've
        already added blocks that call a new function named `startGame()` to the appropriate
        event handlers, and we've created an empty function for you to build out.
        \n\n-   Find the `startGame()` function definition ( [Show me where](#triggercallout=block_trigger)
        )\n-   Inside the function:\n    -   Move both of the emoji images to the
        top of the screen by setting each one's \"y\" property to 0\n    -   Change
        the screen to \"game\"\n\nOnce you've fleshed out the `startGame()` function,
        try clicking the \"play\" button to check that it's working."
      CSD U6 tugowar variables 1_2018: "# The startGame() Function\n\nIf you look
        at the events we planned for in the planning guide, you may notice that two
        events do essentially the same thing. The events that respond to both the
        \"play\" and \"replay\" buttons could be written with identical code, but
        duplicate code like this is a perfect place to use a **function**.\n\n# Do
        This\n\nWe've already added blocks that call a new function named `startGame()`
        to the appropriate event handlers, and we've created an empty function for
        you to build out. \n\n-   Find the `startGame()` function definition ( [Show
        me where](#triggercallout=block_trigger) )\n-   Inside the function:\n    -
        \  Move both of the emoji images to the top of the screen by setting each
        one's \"y\" property to 0\n    -   Change the screen to \"game\"\n\nOnce you've
        fleshed out the `startGame()` function, try clicking the \"play\" button to
        check that it's working."
      CSD U6 tugowar variables 1_2019: "# The startGame() Function\n\nIf you look
        at the events we planned for in the planning guide, you may notice that two
        events do essentially the same thing. The events that respond to both the
        \"play\" and \"replay\" buttons could be written with identical code, but
        duplicate code like this is a perfect place to use a **function**.\n\n# Do
        This\n\nWe've already added blocks that call a new function named `startGame()`
        to the appropriate event handlers, and we've created an empty function for
        you to build out. \n\n-   Find the `startGame()` function definition ( [Show
        me where](#triggercallout=block_trigger) )\n-   Inside the function:\n    -
        \  Move both of the emoji images to the top of the screen by setting each
        one's \"y\" property to 0\n    -   Change the screen to \"game\"\n\nOnce you've
        fleshed out the `startGame()` function, try clicking the \"play\" button to
        check that it's working."
      CSD U6 tugowar variables 2: |-
        # Functions with Parameters

        Most of the existing functions you use in App Lab need inputs, or **parameters**, to pass the function necessary information. For example, when changing a screen, you pass the ID of that screen as a parameter, which looks like `setScreen("win")`.

        These parameters show up as a variable that can be used inside the function, and you can create functions that use parameters too!

        # Do This

        <div markdown="1" style="float:right; margin: 20px;">

        ![expandable](https://images.code.org/2eccd9fc9f4887aefd0bfd94d7f332c8-image-1509402194012.png)

        <br/>

        Click to expand

        </div>

        Instead of a separate function to move the red and the blue players, we've created one function called `movePlayer()` that takes the ID of the player image as a parameter called `player`. Inside this function, you can use `player` any place where you need to specify the ID of the player you want to control.

        -   Find where `movePlayer()` is defined ( [Show me where](#triggercallout=block_trigger) )
        -   Inside the `movePlayer()` definition:
            -   Get the current "y" property of the player and save it to a variable called `player_y`
            -   Increase the value of `player_y` by 10
            -   Set the "y" property of player to your new value `player_y`

        Once you've added your code, test it. You should see that _both buttons_ work even though we only created one function - cool!
      CSD U6 tugowar variables 2_2018: |-
        # Functions with Parameters

        Most of the existing functions you use in App Lab need inputs, or **parameters**, to pass the function necessary information. For example, when changing a screen, you pass the ID of that screen as a parameter, which looks like `setScreen("win")`.

        These parameters show up as a variable that can be used inside the function, and you can create functions that use parameters too!

        # Do This

        <div markdown="1" style="float:right; margin: 20px;">

        ![expandable](https://images.code.org/2eccd9fc9f4887aefd0bfd94d7f332c8-image-1509402194012.png)

        <br/>

        Click to expand

        </div>

        Instead of a separate function to move the red and the blue players, we've created one function called `movePlayer()` that takes the ID of the player image as a parameter called `player`. Inside this function, you can use `player` any place where you need to specify the ID of the player you want to control.

        -   Find where `movePlayer()` is defined ( [Show me where](#triggercallout=block_trigger) )
        -   Inside the `movePlayer()` definition:
            -   Get the current "y" property of the player and save it to a variable called `player_y`
            -   Increase the value of `player_y` by 10
            -   Set the "y" property of player to your new value `player_y`

        Once you've added your code, test it. You should see that _both buttons_ work even though we only created one function - cool!
      CSD U6 tugowar variables 2_2019: |-
        # Functions with Parameters

        Most of the existing functions you use in App Lab need inputs, or **parameters**, to pass the function necessary information. For example, when changing a screen, you pass the ID of that screen as a parameter, which looks like `setScreen("win")`.

        These parameters show up as a variable that can be used inside the function, and you can create functions that use parameters too!

        # Do This

        <div markdown="1" style="float:right; margin: 20px;">

        ![expandable](https://images.code.org/2eccd9fc9f4887aefd0bfd94d7f332c8-image-1509402194012.png)

        <br/>

        Click to expand

        </div>

        Instead of a separate function to move the red and the blue players, we've created one function called `movePlayer()` that takes the ID of the player image as a parameter called `player`. Inside this function, you can use `player` any place where you need to specify the ID of the player you want to control.

        -   Find where `movePlayer()` is defined ( [Show me where](#triggercallout=block_trigger) )
        -   Inside the `movePlayer()` definition:
            -   Get the current "y" property of the player and save it to a variable called `player_y`
            -   Increase the value of `player_y` by 10
            -   Set the "y" property of player to your new value `player_y`

        Once you've added your code, test it. You should see that _both buttons_ work even though we only created one function - cool!
      CSD U6 tugowar variables 3: |-
        # The checkWin() Function

        The last function that you need to figure out is the `checkWin()` function, which after each player is moved, and is used to both check if that player has made it to the bottom of the screen and to announce the winner if necessary. For now, we're just going to find out where the player is and log it to the console.

        # Do This

        Just like the `movePlayer()` function, `checkWin()` takes a single parameter called `player`. If you call `checkWin("red")`, then the variable `player` will have the value "red".

        -   Find where the function is defined ( [Show me where](#triggercallout=block_trigger) )
        -   Create a variable called `player_y` and assign it the "y" property of the player
        -   Use either a `console.log()` command or a watcher to report the value of `player_y`
        -   Play the game with only one button, keeping an eye on the value of `player_y`
        -   Decide what value of `player_y` should be considered the bottom of the screen
      CSD U6 tugowar variables 3_2018: |-
        # The checkWin() Function

        The last function that you need to figure out is the `checkWin()` function, which after each player is moved, and is used to both check if that player has made it to the bottom of the screen and to announce the winner if necessary. For now, we're just going to find out where the player is and log it to the console.

        # Do This

        Just like the `movePlayer()` function, `checkWin()` takes a single parameter called `player`. If you call `checkWin("red")`, then the variable `player` will have the value "red".

        -   Find where the function is defined ( [Show me where](#triggercallout=block_trigger) )
        -   Create a variable called `player_y` and assign it the "y" property of the player
        -   Use either a `console.log()` command or a watcher to report the value of `player_y`
        -   Play the game with only one button, keeping an eye on the value of `player_y`
        -   Decide what value of `player_y` should be considered the bottom of the screen
      CSD U6 tugowar variables 3_2019: |-
        # The checkWin() Function

        The last function that you need to figure out is the `checkWin()` function, which after each player is moved, and is used to both check if that player has made it to the bottom of the screen and to announce the winner if necessary. For now, we're just going to find out where the player is and log it to the console.

        # Do This

        Just like the `movePlayer()` function, `checkWin()` takes a single parameter called `player`. If you call `checkWin("red")`, then the variable `player` will have the value "red".

        -   Find where the function is defined ( [Show me where](#triggercallout=block_trigger) )
        -   Create a variable called `player_y` and assign it the "y" property of the player
        -   Use either a `console.log()` command or a watcher to report the value of `player_y`
        -   Play the game with only one button, keeping an eye on the value of `player_y`
        -   Decide what value of `player_y` should be considered the bottom of the screen
      CSD What Makes a Computer a Computer Video_2019: |-
        ## Fragen, über die man nachdenken sollte

        -   Was macht ein Computer anders als Maschinen, die es zuvor bereits gab?
        -   Denke an etwas, das du am Computer machst. Welche Art von Eingabe, Ausgabe, Speicherung und Verarbeitung geschieht?
      CSD sprite movement challenge_2018: |-
        # Verbessere Deine Animation

        Mache deine Animation noch besser, indem du mehr Sprite-Eigenschaften änderst oder noch mehr Sprites hinzufügst!
      CSD sprite movement challenge_2019: |-
        # Verbessere Deine Animation

        Mache deine Animation noch besser, indem du mehr Sprite-Eigenschaften änderst oder noch mehr Sprites hinzufügst!
      CSD-Arrays: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      CSD-Arrays_2018: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      CSD-Arrays_2019: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      'CSD: Animating Sprite Movement_2019': |-
        ## Zu berücksichtigende Fragen

        -   Was ist das Zählmuster?
        -   Wie bewegt das Zählmuster Sprites über den Bildschirm?
      'CSD: Animation Tab_2019': |-
        ## Zu berücksichtigende Fragen

        -   Welche Schritte gibt es, um ein Bild zu einem Sprite hinzuzufügen?
        -   Welche verschiedenen Möglichkeiten gibt es, ein Bild zu erhalten?
      'CSD: Drawing in Game Lab 1_2019': |-
        ## Zu berücksichtigende Fragen

        -   Wo findest du weitere Informationen zur Verwendung der Bausteine / Blöcke?
        -   Was ist ein Vorteil der Verwendung des Blockmodus?
      'CSD: Drawing in Game Lab 2_2019': |-
        ## Zu berücksichtigende Fragen

        -   Worin besteht der Unterschied zwischen Strich und Füllung?
      'CSD: For Loop_2019': |-
        ## Zu berücksichtigende Fragen

        -   Wofür werden Schleifen bei der Programmierung verwendet?
        -   An welcher Stelle verwendest du Schleifen?
      'CSD: Introduction to the Draw Loop_2019': |-
        ## Zu berücksichtigende Frage

        -   Was bewirkt die Zeichenfunktion?
      'CSD: Sprite Velocity_2019': |-
        ## Zu berücksichtigende Fragen

        -   Warum solltest du anstelle des Zählermusters einen Geschwindigkeits-Baustein verwenden?
        -   Gib ein Beispiel für ein Zählermuster und wie du stattdessen einen Geschwindigkeits-Block verwenden könntest.
      'CSD: Sprites in Game Lab_2019': |-
        ## Zu berücksichtigende Fragen

        -   Was ist ein Sprite?
        -   Was sind Eigenschaften?
        -   Welches Problem lösen Sprites?
      CSDU2 - PW - Class Style Personal Site: |-
        # Free Play Styling

        Your turn to decide what you want to style! Play with the classes styling and RGB colors to improve your personal website.

        -   Make sure you have completed the checklist below.
        -   Take a screenshot of your home page and save it somewhere on your computer so you can find it later.

        ## Checklist

        -   Somewhere on your site, give text a particular color using RGB values.
        -   On your lists page, give all the list items the same background color.
        -   Use classes to style at least two other elements of your personal website
      CSDU2 - PW - Class Style Personal Site_2018: |-
        # Free Play Styling

        Your turn to decide what you want to style! Play with the classes styling and RGB colors to improve your personal website.

        -   Make sure you have completed the checklist below.
        -   Take a screenshot of your home page and save it somewhere on your computer so you can find it later.

        ## Checklist

        -   Somewhere on your site, give text a particular color using RGB values.
        -   On your lists page, give all the list items the same background color.
        -   Use classes to style at least two other elements of your personal website
      CSDU2 - PW - Class Style Personal Site_2019: |-
        # Free Play Styling

        Your turn to decide what you want to style! Play with the classes styling and RGB colors to improve your personal website.

        -   Make sure you have completed the checklist below.
        -   Take a screenshot of your home page and save it somewhere on your computer so you can find it later.

        ## Checklist

        -   Somewhere on your site, give text a particular color using RGB values.
        -   On your lists page, give all the list items the same background color.
        -   Use classes to style at least two other elements of your personal website
      CSDU2 - Type Anything: |-
        <img src="https://images.code.org/12ffe6980a25a3664eabe69be487a921-image-1485384422334.jpg" style="width:400px; float:right">

        # Welcome to Web Lab!

        The platform you are in is called Web Lab. There are three main parts of the screen in Web Lab.

        # Do This

        -   Try typing something in the workspace.
        -   Press <img src="https://images.code.org/678619085e37ea6ce904ac8abd0df2f2-image-1493226906609.14.45 AM.png" style="width:150px"> to see it in the preview area!
      CSDU2 - Type Anything_2018: |-
        <img src="https://images.code.org/12ffe6980a25a3664eabe69be487a921-image-1485384422334.jpg" style="width:400px; float:right">

        # Welcome to Web Lab!

        The platform you are in is called Web Lab. There are three main parts of the screen in Web Lab.

        # Do This

        -   Try typing something in the workspace.
        -   Press <img src="https://images.code.org/678619085e37ea6ce904ac8abd0df2f2-image-1493226906609.14.45 AM.png" style="width:150px"> to see it in the preview area!
      CSDU2 - Type Anything_2019: |-
        <img src="https://images.code.org/12ffe6980a25a3664eabe69be487a921-image-1485384422334.jpg" style="width:400px; float:right">

        # Welcome to Web Lab!

        The platform you are in is called Web Lab. There are three main parts of the screen in Web Lab.

        # Do This

        -   Try typing something in the workspace.
        -   Press <img src="https://images.code.org/678619085e37ea6ce904ac8abd0df2f2-image-1493226906609.14.45 AM.png" style="width:150px"> to see it in the preview area!
      CSDU4 - Design Mode - 15: "# Designmodus\n\nWillkommen im Designmodus in AppLab!
        So kannst du ganz einfach eine digitale Version Deiner skizzierten Wireframes
        erstellen, indem du Oberflächenelemente aus der Toolbox hinzufügst und sie
        so gestalten, wie du es wünschen!\n\n**Ziel:** Füge Deiner App im Designmodus
        einen großen roten Knopf hinzu..\n\n# Mache Folgendes:\n\n-   **Suche <img
        src=\"https://images.code.org/278f146396c80c97d0b5d73f24d48aec-image-1444335461720.png\">
        in the Design Toolbox** und ziehe eine Schaltfläche heraus und ändere dessen
        Größe. \n\n-   **Ändere den Text der Schaltfläche** auf \"Click Me\"..\n\n-
        \  **Setze die Farbe für die Schaltfläche** auf rot.\n\n<img src=\"https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif\"
        style=\"width: 500px; float: middle\">"
      CSDU4 - Design Mode - 16: |-
        # Activate Your Button

        In the last lesson you focused on laying out a page of your app in Design Mode. This is a great, quick way to get the visual side of an app figured out, but it's not very functional. If you click any of the buttons you added, nothing happens. Now you're work towards adding some basic functionality by making the buttons in your app actually _do_ something!

        **Goal:** Add code using Design Mode to make the button respond to a click.

        # Do This

        Your starter app has two elements, a _label_ with the id `titleLabel` and a _button_ with the id `changeTitleButton`. To start with, you're going to make the button log a message to the console when it's clicked.

        -   In Design Mode, **click on the provided button to edit its properties**
        -   Click on the **Events** tab
        -   Insert an `onEvent` from Design Mode by clicking **Insert and show code** under the **Events Tab**.
        -   Take a look at the block that was added to the **Code Mode** tab.
        -   Run the program, click your button and **look for the output in the _Debug Console_** below the workspace instead of the app window. We will discuss the _Debug Console_ on the next level.
      CSDU4 - Design Mode - 17: |-
        # Updating IDs and Debugging with Console Log

        Here we have a couple buttons with event handlers and `console.log` statements, but they are all switched around!

        We should have given the buttons better ID names so we could tell the difference based on the ID. **Can you update the ID names and `console.log` messages to match the correct button?**

        # Do This

        -   **Change the IDs** of the buttons in Design Mode to more descriptive names.

        -   Switch to Code Mode and notice that the **ID pulldowns have been updated to include the new IDs**. (You still need to select the correct ID from the pulldown menu.)

        -   **Update the `console.log` messages** to match the buttons.
      CSDU4 - Design Mode - 18: "# Layering and Deleting\n\n<img src=\"https://images.code.org/9e620f70869de438c4f0c66663686876-image-1444678130772.gif\"
        style=\"width: 200px; float: right\">User interface elements can overlap one
        another, so you'll want the ability to change the order or **depth** at which
        each one is rendered. \n\nIf you **scroll to the bottom of the Properties
        tab** you'll find buttons which allow you to easily **delete or change the
        depth** of an element.\n\n-   **Delete an Element** by selecting it (clicking
        on it) in the design view and then clicking **Delete** in the properties tab.\n-
        \  **Change the depth** of elements by using the double or single arrows.\n
        \   -   Click the double arrow to send all the way to front or back.\n    -
        \  Click the single arrow to move up or down one layer.\n\n# Do This:\n\nUse
        the **delete** and **depth** tools to **create the \"After\" image**\n\n<table>\n<tr>\n\t<th
        style=\"text-align:center\">Before</th>\n    <th style=\"text-align:center\">After</th>\n</tr>\n<tr>\n\t<td
        align=center><img src=\"https://images.code.org/023f749ecb58c91869a4eacab6701203-image-1444685187662.png\"
        style=\"width:200px ; border: solid 1px black\"></td>\n    <td style=\"text-align:center\"><img
        src=\"https://images.code.org/e45fc7d451c071683fd3b59466b106b0-image-1444684677212.png\"
        style=\"width:200px; border: solid 1px black\"></td>\n</tr>\n</table>"
      CSDU4 - Design Mode - 19: "# Second Screen\n\nMost apps have more than one screen
        or page that each have different contents. With Design Mode you can quickly
        add new screen to your app.\n\n# Do This\n\nYou're going to add a second screen
        to your app and add a button to that screen. Make sure you're using good IDs!\n\n-
        \  Drag out <img src=\"https://images.code.org/4337b39cfd797ed9289b70fb6cb365fb-image-1444353631083.17.39
        PM.png\" style=\"width: 50px\"> from the Design Toolbox into your app. You
        now have two screens!\n-   Using Design Mode create a button in your new screen.
        \ <img src=\"https://images.code.org/bbf464e2fc94bacba39407d6842f2336-image-1478300698068.04.35
        PM.png\" style=\"width: 150px\"> \n-   Set the IDs for your screens and buttons
        to something meaningful, for example _\"homeScreen\"_, _\"detailsScreen\"_,
        _\"homeButton\"_, and _\"detailsButton\"_\n\nYou can always use the screen
        dropdown menu at the top of the app window to switch between your screens
        <img src=\"https://images.code.org/404e0b3f520a413c8a5e62e74b70bb19-image-1478300388689.58.59
        PM.png\" style=\"width: 150px\"> "
      CSDU4 - Design Mode - 20: |-
        # Switching Screens

        You can set which screen is showing in your app with the `setScreen()` command. If you're working in blocks you can select which screen you want to switch to from a dropdown.

        ![](<https://images.code.org/615fae136488e1e6d1349e4383388e08-image-1478303858022.13.25 PM.png>)

        # Do This

        You'll use an `onEvent()` block with `setScreen()` to make the two buttons in your app switch between the two screen.

        -   Drag out two `onEvent()` blocks
        -   Set the IDs for your `onEvent()` blocks for each of your two buttons
        -   Place a `setScreen` block inside each of the `onEvent` blocks.
        -   Choose the appropriate screen from the dropdown of each `setScreen` block.
        -   Test out your app to make sure your buttons let you switch back and forth between the two screens
      CSDU4 - Design Mode - 21: "# Adding Images\n\nSometimes the functionality you
        want to represent in your prototype is too complicated to do with just the
        default buttons and fields. If you want to mock up more advanced interfaces
        (like a map), the easiest way to do it is with an image\n\n# Do This\n\n-
        \  Find and download an image of a map you like\n-   Drag an image element
        into your app ![](<https://images.code.org/cda02ffe3acc869822a551f5cdbf8606-image-1444667846363.37.14
        AM.png>)\n-   Choose your image ![](<https://images.code.org/e5b9571ae54af60a3ae597b787e741ea-image-1444667688762.34.42
        AM.png>)\n    -   **URLs** can be added directly into the \"picture\" field.
        \ \n    -   **Upload images** by clicking \"Choose\".\n    -   **Note:** You
        can always see all the files you've uploaded by clicking the gear at the top
        of the toolbox. ![](<https://images.code.org/53b405b771bc11bf5d24c84c878c80dd-image-1444668067826.35.10
        AM.png>)\n-   Make sure to give your image a good ID!"
      CSDU4 - Design Mode - 3: |-
        # How Do Events Work?

        Event-driven apps are made up of elements that can trigger events (such as buttons) and pieces of code called **event handlers**. Event handlers are commands that "watch" for certain events to occur in your program, and then run some function when an event occurs.

        When you first create an event handler from Design Mode, puts a `console.log()` block inside to help you test the event, but you can put just about any code you want inside the event hander.

        # Do This

        The toolbox has a new block called `setText` which allows you to change the text of an element on the screen. You're going to modify the button event handler so that it changes the title text when clicked.

        -   Drag out a `setText()` block to the _inside_ of the `onEvent()` callback function (where the `console.log()` block currently is)
        -   From the block's dropdown, select "titleLabel" (the id of the element you want to change)
        -   In the block's second input, replace "text" with a new title for the app
        -   Run your program and click the button to see it work
      CSDU4 - Design Mode - 4: |-
        # IDs

        Die `id` (wir schreiben typischerweise **ID**) ist ein **eindeutiger Bezeichner**, der für jedes Element in der App verwendet wird.

        Jedes Element, das in der App erscheint, muss eine **eindeutige ID** haben. Tatsächlich erhälst Du eine Warnmeldung in der Konsole, wenn Du versuchst ein Programm auszuführen, das zwei Buttons mit der gleichen ID hat.

        # Mache Folgendes

        Während jedes Element, das Du im Design-Modus herausziehst, eine Standard-ID erhält, sind diese nicht wirklich hilfreich (wie `button1` und `button2`), also solltest Du Dich daran gewöhnen, Deine eigenen IDs zu erstellen.

        -   Ändere die ID Deines "click me"-Buttons in etwas Nützliches (wie `redButton`)
        -   Ziehe eine zweite Schaltfläche heraus
        -   Mache die zweite Schaltfläche blau und gib dieser eine ID von `blueButton`
      CSDU4 - Design Mode Icons: |-
        <img src="https://images.code.org/2b405319f597910b1563ae607958171c-image-1475866226306.49.51.png" style="width: 200px; float:right">

        # Symbole

        Symbole helfen den Benutzern, die richtige Funktionalität zu finden, während sich deine App gleichzeitig noch ausgefeilter anfühlt.

        # Mache Folgendes

        Füge ein paar Symbole zu Deiner App hinzu. Für jedes Symbol:

        -   Ziehe ein Bildelement heraus
        -   Klicke neben dem Feld "Bild" auf "Auswählen...".
        -   Klicke auf den Reiter "Icons" und wähle eines aus
        -   Achte darauf, dass Dein Bild eine gute ID erhält!
      CSDU4 Connecting Screens: |-
        # Navigating

        Once you start adding multiple screens to an app, you need to make sure that users can always get where they want to go. In the next two levels you'll learn how to make sure a user can always get back to the "homepage" of your app.

        # Do This

        Here's an app with four different pages, but only the "red" screen is linked so far. In this level you'll make the other two buttons take the user to the correct screen.

        -   Add two `onEvent()` blocks, one each for the "greenButton" and "blueButton"
        -   Use the `setScreen()` block to make each button switch to the appropriate screen
        -   Test your app to make sure both buttons work. For example, when you click the green button you should go to the green screen.
      CSDU4 Connecting Screens Getting Back: |-
        # Navigating Back

        Someone using your app can now get to each of the red, green, and blue pages, but they can't get back to the homepage. You can add buttons and event handlers of your own to help them do this.

        # Do This

        Create buttons and event handlers to help a user navigate back to the "home" screen

        -   Use Design Mode to create a button inside each of the "red", "green", and "blue" screens. Make sure to give them descriptive IDs.
        -   Back in your code drag in three `onEvent()` blocks, one for each of the three buttons you made.
        -   Inside each `onEvent()` block use the `setScreen()` block that switches back to your "home" screen.
        -   Test your app. You should now be able to navigate back to the home screen from each of the other three.
      CSDU4 Crowdsource App Demo: |-
        # Crowdsourcing

        Crowdsourcing apps allow multiple users to submit content for everyone to use (the _source_ of content is the _crowd_). This app is very similar to the list app, with the main difference being that the list app assumes a single user while this app allows all users to add to the same list and "like" submissions.

        This example uses a list of crowdsourced information for simplicity, but you could display any kind of information in many different formats. A crowdsourcing app could allow users to submit locations for display on a map, images to go into a gallery, or any number of other types of information.

        # Functionality Missing from this Prototype

        -   User's can't create accounts or profiles
        -   Submitted things aren't added to the list
        -   Clicking on the "like" icons don't change their state
      CSDU4 Crowdsource App Demo_2018: |-
        # Crowdsourcing

        Crowdsourcing apps allow multiple users to submit content for everyone to use (the _source_ of content is the _crowd_). This app is very similar to the list app, with the main difference being that the list app assumes a single user while this app allows all users to add to the same list and "like" submissions.

        This example uses a list of crowdsourced information for simplicity, but you could display any kind of information in many different formats. A crowdsourcing app could allow users to submit locations for display on a map, images to go into a gallery, or any number of other types of information.

        # Functionality Missing from this Prototype

        -   User's can't create accounts or profiles
        -   Submitted things aren't added to the list
        -   Clicking on the "like" icons don't change their state
      CSDU4 Crowdsource App Demo_2019: |-
        # Crowdsourcing

        Crowdsourcing apps allow multiple users to submit content for everyone to use (the _source_ of content is the _crowd_). This app is very similar to the list app, with the main difference being that the list app assumes a single user while this app allows all users to add to the same list and "like" submissions.

        This example uses a list of crowdsourced information for simplicity, but you could display any kind of information in many different formats. A crowdsourcing app could allow users to submit locations for display on a map, images to go into a gallery, or any number of other types of information.

        # Functionality Missing from this Prototype

        -   User's can't create accounts or profiles
        -   Submitted things aren't added to the list
        -   Clicking on the "like" icons don't change their state
      CSDU4 Decision App Demo: |-
        # Decision Maker

        Similar to the quiz app, a decision tree app asks the user a series of questions. The primary difference between the two is that a decision tree doesn't check for right or wrong answers, but instead attempts to give the user a suggestion or help them make a decision based on their answers.

        This simple decision maker asks only three questions,  but more advanced ones actually take the form of a tree as seen below:

        ![](https://images.code.org/aeadfca116011949855c169905ff89a3-image-1476823699500.png)

        Depending on the user's answer to each question, they're given a different page for the next question. This allows the app to gradually narrow down the decision one question at a time. This type of app can be really useful to help users understand complex processes - for example, you might introduce a recycling program by using a decision tree app to help users figure out which bin to sort items into - first asking what material it's made out of, then whether it is clean or not, and so on.

        # Functionality Missing from this Prototype

        -   Question buttons don't direct you to different screens
        -   The final screen doesn't give you a recommended decision
      CSDU4 Decision App Demo_2018: |-
        # Decision Maker

        Similar to the quiz app, a decision tree app asks the user a series of questions. The primary difference between the two is that a decision tree doesn't check for right or wrong answers, but instead attempts to give the user a suggestion or help them make a decision based on their answers.

        This simple decision maker asks only three questions,  but more advanced ones actually take the form of a tree as seen below:

        ![](https://images.code.org/aeadfca116011949855c169905ff89a3-image-1476823699500.png)

        Depending on the user's answer to each question, they're given a different page for the next question. This allows the app to gradually narrow down the decision one question at a time. This type of app can be really useful to help users understand complex processes - for example, you might introduce a recycling program by using a decision tree app to help users figure out which bin to sort items into - first asking what material it's made out of, then whether it is clean or not, and so on.

        # Functionality Missing from this Prototype

        -   Question buttons don't direct you to different screens
        -   The final screen doesn't give you a recommended decision
      CSDU4 Decision App Demo_2019: |-
        # Decision Maker

        Similar to the quiz app, a decision tree app asks the user a series of questions. The primary difference between the two is that a decision tree doesn't check for right or wrong answers, but instead attempts to give the user a suggestion or help them make a decision based on their answers.

        This simple decision maker asks only three questions,  but more advanced ones actually take the form of a tree as seen below:

        ![](https://images.code.org/aeadfca116011949855c169905ff89a3-image-1476823699500.png)

        Depending on the user's answer to each question, they're given a different page for the next question. This allows the app to gradually narrow down the decision one question at a time. This type of app can be really useful to help users understand complex processes - for example, you might introduce a recycling program by using a decision tree app to help users figure out which bin to sort items into - first asking what material it's made out of, then whether it is clean or not, and so on.

        # Functionality Missing from this Prototype

        -   Question buttons don't direct you to different screens
        -   The final screen doesn't give you a recommended decision
      CSDU4 Design Mode Video_2019: |-
        ## Zu berücksichtigende Fragen

        -   Wo in App-Labor kannst du die Benutzeroberfläche Deiner App gestalten?
        -   Welche Arten von Elementen kannst du Deiner App hinzufügen?
      CSDU4 Functionality visible: |-
        # Kontrolle der Sichtbarkeit

        Als wir vorhin in dieser Lektion Wege zur Vereinfachung der Quiz-App vorgeschlagen haben, haben wir erwähnt, dass es möglich ist, Designelemente mit Code ein- oder auszublenden. App Lab hat zwei Funktionen, mit denen Sie die Sichtbarkeit eines Elements steuern können:

        -   `hideElement()` macht das angegebene Element unsichtbar
        -   `showElement()` macht das angegebene Element sichtbar

        # Mache Folgendes

        Die mitgelieferte App hat ein Bild und zwei Buttons.

        -   Hänge einen Event-Handler an den "Hide"-Button an, der das Bild beim Klicken ausblendet
        -   Hänge einen Event-Handler an den "Show"-Button an, der das Bild beim Anklicken anzeigt
      CSDU4 List App Demo: |-
        # List Manager

        The list manager app allows user to keep track of the state of information and can be modified to serve many different purposes, such as checking in / out loaned items, tracking personal To Dos, or keeping track of where things are in a multi-step process.

        While this example focuses on a single list, more sophisticated list apps could allow the user to create multiple lists, or even move items between lists. This app also only keeps track of the name of an item and whether or not it is "Done," but it could be extended to track and organize any amount of information about the list items.

        # Functionality Missing from this Prototype

        -   Delete buttons don't actually delete items from the list
        -   Add screen doesn't actually add an item to the list
      CSDU4 List App Demo_2018: |-
        # List Manager

        The list manager app allows user to keep track of the state of information and can be modified to serve many different purposes, such as checking in / out loaned items, tracking personal To Dos, or keeping track of where things are in a multi-step process.

        While this example focuses on a single list, more sophisticated list apps could allow the user to create multiple lists, or even move items between lists. This app also only keeps track of the name of an item and whether or not it is "Done," but it could be extended to track and organize any amount of information about the list items.

        # Functionality Missing from this Prototype

        -   Delete buttons don't actually delete items from the list
        -   Add screen doesn't actually add an item to the list
      CSDU4 List App Demo_2019: |-
        # List Manager

        The list manager app allows user to keep track of the state of information and can be modified to serve many different purposes, such as checking in / out loaned items, tracking personal To Dos, or keeping track of where things are in a multi-step process.

        While this example focuses on a single list, more sophisticated list apps could allow the user to create multiple lists, or even move items between lists. This app also only keeps track of the name of an item and whether or not it is "Done," but it could be extended to track and organize any amount of information about the list items.

        # Functionality Missing from this Prototype

        -   Delete buttons don't actually delete items from the list
        -   Add screen doesn't actually add an item to the list
      CSDU4 Project Bug Feature: |-
        # Improving and Iterating

        You've put your app in front of users, gathered feedback, and identified bugs and new features - time to do something about it.

        # Do This

        Each team member is going to implement select features and bug fixes on their own version of the team's app. Start by selecting a sticky note from the **To Do** column of your team's chart and moving it to the **Doing** column. For each sticky you tackle:

        -   Add a comment to the top of your program describing the feature or bug fix you are implementing
        -   Work on your iteration until it works. Try to stay focused on only the single feature or bug that you've selected.
        -   When done, move your sticky to the **Done** column, pick a new one, and start the process over.
      CSDU4 Project Bug Feature_2018: |-
        # Improving and Iterating

        You've put your app in front of users, gathered feedback, and identified bugs and new features - time to do something about it.

        # Do This

        Each team member is going to implement select features and bug fixes on their own version of the team's app. Start by selecting a sticky note from the **To Do** column of your team's chart and moving it to the **Doing** column. For each sticky you tackle:

        -   Add a comment to the top of your program describing the feature or bug fix you are implementing
        -   Work on your iteration until it works. Try to stay focused on only the single feature or bug that you've selected.
        -   When done, move your sticky to the **Done** column, pick a new one, and start the process over.
      CSDU4 Project Bug Feature_2019: |-
        # Improving and Iterating

        You've put your app in front of users, gathered feedback, and identified bugs and new features - time to do something about it.

        # Do This

        Each team member is going to implement select features and bug fixes on their own version of the team's app. Start by selecting a sticky note from the **To Do** column of your team's chart and moving it to the **Doing** column. For each sticky you tackle:

        -   Add a comment to the top of your program describing the feature or bug fix you are implementing
        -   Work on your iteration until it works. Try to stay focused on only the single feature or bug that you've selected.
        -   When done, move your sticky to the **Done** column, pick a new one, and start the process over.
      CSDU4 Project Events: |-
        # Linking Screens

        With all of your screens in place you can start adding events that will change the screens. When you're done with this step you'll actually have an interactive prototype!

        # Do This

        For each screen of your app:

        -   Find all of the button IDs
        -   For each button, add an event handler that watches that ID
        -   In each event handler, use `setScreen()` to move the the right screen
        -   Test it all out!

        Depending on the number of screens and buttons your app has, this can be a pretty involved process. Make sure that you test your work often, using `console.log()` blocks to debug any strange behavior with your app. When you think you've got the whole thing working, compare your app with other members of your group to see if they work the same.
      CSDU4 Project Events_2018: |-
        # Linking Screens

        With all of your screens in place you can start adding events that will change the screens. When you're done with this step you'll actually have an interactive prototype!

        # Do This

        For each screen of your app:

        -   Find all of the button IDs
        -   For each button, add an event handler that watches that ID
        -   In each event handler, use `setScreen()` to move the the right screen
        -   Test it all out!

        Depending on the number of screens and buttons your app has, this can be a pretty involved process. Make sure that you test your work often, using `console.log()` blocks to debug any strange behavior with your app. When you think you've got the whole thing working, compare your app with other members of your group to see if they work the same.
      CSDU4 Project Events_2019: |-
        # Linking Screens

        With all of your screens in place you can start adding events that will change the screens. When you're done with this step you'll actually have an interactive prototype!

        # Do This

        For each screen of your app:

        -   Find all of the button IDs
        -   For each button, add an event handler that watches that ID
        -   In each event handler, use `setScreen()` to move the the right screen
        -   Test it all out!

        Depending on the number of screens and buttons your app has, this can be a pretty involved process. Make sure that you test your work often, using `console.log()` blocks to debug any strange behavior with your app. When you think you've got the whole thing working, compare your app with other members of your group to see if they work the same.
      CSDU4 Project Import: |-
        # Back To Your App

        Now that you've had some practice with importing screens, it's time to start working on your team's app.

        # Do This

        Each member of your team is going to create their own copy of the app, with all of the team members' screens imported in. This will be your copy of the app, and the copy that you will start to add code to in the next lesson.

        -   Collect all of the sharing urls for your team's pages
            -   You can find the share url by going back to the last level of the previous lesson, or by finding the screen in your [projects directory](/projects)
        -   Import each of the screens, one at a time
            -   If you run into an ID error with one of the screens, discuss the issue with the screen's creator so it can be fixed and imported
        -   Delete the default "screen1"
        -   Set the main screen as the default

        Don't worry about adding any code at this point; we'll get to that in the next level.
      CSDU4 Project Import_2018: |-
        # Zurück zu deiner App

        Nachdem Du nun etwas Übung im Importieren von Bildschirmen hattest, ist es an der Zeit, mit der Arbeit an der App Deines Teams zu beginnen.

        # Mach Folgendes

        Jedes Mitglied Deines Teams wird seine eigene Kopie der App erstellen, in die alle Bildschirme der Teammitglieder importiert werden. Dies wird Deine Kopie der App sein, und die Kopie, zu der Du in der nächsten Lektion Code hinzufügen wirst.  ( Vergiss nicht, dass du auch deinen eigenen Bildschirm in dieses Projekt importieren musst)

        -   Sammle alle Freigabe-URLs für die Seiten Deines Teams, **einschließlich Deiner eigenen**.
            -   Jedes Teammitglied kann die Freigabe-URL für seinen eigenen Bildschirm finden, indem es zum letzten Level der vorherigen Lektion zurückkehrt oder den Bildschirm in seinem [Projektverzeichnis](/projects) findet.
        -   Importiere jeden der Bildschirme, einen nach dem anderen
            -   Wenn Du bei einem der Bildschirme einen ID-Fehler feststellen, besprich das Problem mit dem Ersteller des Bildschirms, damit es behoben und importiert werden kann.
        -   Lösche die Voreinstellung "screen1".
        -   Lege den Hauptbildschirm als Standard fest

        Mache Dir keine Sorgen über das Hinzufügen von Code an diesem Punkt; dazu kommen wir im nächsten Level.
      CSDU4 Project Import_2019: |-
        # Zurück zu deiner App

        Nachdem Du nun etwas Übung im Importieren von Bildschirmen hattest, ist es an der Zeit, mit der Arbeit an der App Deines Teams zu beginnen.

        # Mach Folgendes

        Jedes Mitglied Deines Teams wird seine eigene Kopie der App erstellen, in die alle Bildschirme der Teammitglieder importiert werden. Dies wird Deine Kopie der App sein, und die Kopie, zu der Du in der nächsten Lektion Code hinzufügen wirst.  ( Vergiss nicht, dass du auch deinen eigenen Bildschirm in dieses Projekt importieren musst)

        -   Sammle alle Freigabe-URLs für die Seiten Deines Teams, **einschließlich Deiner eigenen**.
            -   Jedes Teammitglied kann die Freigabe-URL für seinen eigenen Bildschirm finden, indem es zum letzten Level der vorherigen Lektion zurückkehrt oder den Bildschirm in seinem [Projektverzeichnis](/projects) findet.
        -   Importiere jeden der Bildschirme, einen nach dem anderen
            -   Wenn Du bei einem der Bildschirme einen ID-Fehler feststellen, besprich das Problem mit dem Ersteller des Bildschirms, damit es behoben und importiert werden kann.
        -   Lösche die Voreinstellung "screen1".
        -   Lege den Hauptbildschirm als Standard fest

        Mache Dir keine Sorgen über das Hinzufügen von Code an diesem Punkt; dazu kommen wir im nächsten Level.
      CSDU4 Quiz App Demo: |-
        # Quiz Me

        A quiz app can be used to teach, or help reinforce, information important to your chosen topic.

        At its most basic, a quiz app is composed of a screen for each question with two or more buttons for multiple choice answers. Each button links to a page that either confirms that you were correct, or gives you information about why you were were wrong.

        More advanced quiz apps could include features such as:

        -   Different types of questions (such as matching, free response, or even interactive games)
        -   Randomizing the order of questions
        -   Changing the questions based on how we'll you're doing
        -   Providing a final score
        -   Incorporating study material

        # Functionality Missing from this Prototype

        -   Questions aren't actually checked for correctness
      CSDU4 Quiz App Demo_2018: |-
        # Quiz Me

        A quiz app can be used to teach, or help reinforce, information important to your chosen topic.

        At its most basic, a quiz app is composed of a screen for each question with two or more buttons for multiple choice answers. Each button links to a page that either confirms that you were correct, or gives you information about why you were were wrong.

        More advanced quiz apps could include features such as:

        -   Different types of questions (such as matching, free response, or even interactive games)
        -   Randomizing the order of questions
        -   Changing the questions based on how we'll you're doing
        -   Providing a final score
        -   Incorporating study material

        # Functionality Missing from this Prototype

        -   Questions aren't actually checked for correctness
      CSDU4 Quiz App Demo_2019: |-
        # Quiz Me

        A quiz app can be used to teach, or help reinforce, information important to your chosen topic.

        At its most basic, a quiz app is composed of a screen for each question with two or more buttons for multiple choice answers. Each button links to a page that either confirms that you were correct, or gives you information about why you were were wrong.

        More advanced quiz apps could include features such as:

        -   Different types of questions (such as matching, free response, or even interactive games)
        -   Randomizing the order of questions
        -   Changing the questions based on how we'll you're doing
        -   Providing a final score
        -   Incorporating study material

        # Functionality Missing from this Prototype

        -   Questions aren't actually checked for correctness
      CSDU6 - LED buttonL: "# Using Board Events\n\nRight now the LED turns on when
        the left button (`buttonL`) is pressed down. It should turn off when the right
        button (buttonR) is pressed down.\n\n<div style=\"float:right;\" markdown=1>
        \n\n![expandable](https://images.code.org/402489ec13fb6c6f38910829a9633ac3-image-1510874304220.png)
        \n\n</div>\n\n# Do this\n\n-   Add another `onBoardEvent()` block to turn
        the LED off when the right button is pressed down."
      CSDU6 - LED buttonL_2018: "# Using Board Events\n\nRight now the LED turns on
        when the left button (`buttonL`) is pressed down. It should turn off when
        the right button (buttonR) is pressed down.\n\n<div style=\"float:right;\"
        markdown=1> \n\n![expandable](https://images.code.org/402489ec13fb6c6f38910829a9633ac3-image-1510874304220.png)
        \n\n</div>\n\n# Do this\n\n-   Add another `onBoardEvent()` block to turn
        the LED off when the right button is pressed down."
      CSDU6 - LED buttonL_2019: "# Using Board Events\n\nRight now the LED turns on
        when the left button (`buttonL`) is pressed down. It should turn off when
        the right button (buttonR) is pressed down.\n\n<div style=\"float:right;\"
        markdown=1> \n\n![expandable](https://images.code.org/402489ec13fb6c6f38910829a9633ac3-image-1510874304220.png)
        \n\n</div>\n\n# Do this\n\n-   Add another `onBoardEvent()` block to turn
        the LED off when the right button is pressed down."
      CSDU6 - LED toggle buttonL up: |-
        # Other Board Events with the Buttons

        Instead of using the right button, you can make the LED turn off when the left button comes back up.

        # Do this

        -   Create an 'up' event for the left button.
        -   Add code to turn the LED off when the button pops back up.
      CSDU6 - LED toggle buttonL up_2018: |-
        # Other Board Events with the Buttons

        Instead of using the right button, you can make the LED turn off when the left button comes back up.

        # Do this

        -   Create an 'up' event for the left button.
        -   Add code to turn the LED off when the button pops back up.
      CSDU6 - LED toggle buttonL up_2019: |-
        # Other Board Events with the Buttons

        Instead of using the right button, you can make the LED turn off when the left button comes back up.

        # Do this

        -   Create an 'up' event for the left button.
        -   Add code to turn the LED off when the button pops back up.
      CSDU6 - UI and Inputs - dropdown setText: |-
        # setText und getText

        Häufig wirst du den Text eines Oberflächenelements abrufen und damit den Text eines anderen Elements auf dem Bildschirm festlegen wollen. Kannst du den Text aus der Dropdown-Liste holen, wenn der Benutzer eine neue Eingabe auswählt, und damit den Text des Labels "choiceDisplay" einstellen.
      CSDU6 - UI and Inputs - get set with text input: |-
        # setText und getText

        Du hast bereits gesehen, wie man getText und setText verwendet. Kannst du dafür sorgen, dass diese App den Text erhält, den der Benutzer eingegeben hat, sobald er die Eingabetaste gedrückt hat, und ihn im Textfeld unten anzeigen?

        _Tipp: Das Ereignis "change" wird ausgelöst, wenn der Benutzer auf "enter" in einem Feld klickt. Benutze einen Event-Handler für die Texteingabe, der auf das Ereignis "change" achtet._
      CSDU6 - UI and Inputs - getNumber: |-
        # getNumber

        **Starter Code:** Dieses Programm erstellt einen einfachen Taschenrechner, aber **es stimmt etwas nicht mit ihm. Versuche 2 + 2. einzusetzen.**

        Wir können dies beheben, indem wir `getNumber()` anstelle von `getText()` verwenden. Kannst du das Programm reparieren, indem du `getText()` zu `getNumber()` änderst?
      CSDU6 - UI and Inputs - getNumber practice: |-
        # getNumber

        **Startcode:** Das Programm versucht, die Wertanzeige zu aktualisieren, wenn sich der Schiebereglerwert ändert, setzt aber immer den Wert auf 10.

        Kannst du `getNumber()` verwenden, um den Wert des Schiebereglers abzurufen und die valueDisplay bei Änderungen zu aktualisieren?
      CSDU6 - UI and Inputs - getText: |-
        # getText

        Versuche, einen Event-Handler einzurichten, der den Text aus dem Dropdown erhält, wenn ein Benutzer ein neues Element aus dem Dropdown auswählt. Du wirst den Getter `getText()` verwenden müssen. Wann immer Du einen Getter verwendest, solltest Du ihn in einer Variable speichern. Verwende `console.log()`, um sicherzustellen, dass es funktioniert.
      CSDU6 - UI and Inputs - hide show: |-
        # Verstecken und Anzeigen

        Es ist ein wenig seltsam, dass beide Knöpfe gleichzeitig auf dem Bildschirm zu sehen sind. Du brauchst den Stop-Alarmknopf nicht, bis der Alarm eingeschaltet ist. Kannst Du dafür sorgen, dass die Knöpfe nur dann angezeigt werden, wenn sie gebraucht werden?

        -   Du möchtest, dass die Alarmtaste beim Programmstart ausgeblendet wird. Dies kann man im Designmodus tun.

        Tipp: Wenn du auf den Auslösealarm-Button klickst, solltest du den Text ändern, den Auslösealarm-Button ausblenden, _und_ den Stoppalarm-Button anzeigen.
      CSDU6 - UI and Inputs - setProperty: |-
        # setProperty Hintergrundfarbe

        Ändere die Hintergrundfarbe einer Schaltfläche jedes Mal, wenn sie mit `setProperty()` angeklickt wird, auf eine neue Zufallsfarbe.
      CSDU6 - UI and Inputs - setProperty Image: "# setProperty image\n\n**Hinweis:**
        Dieses Level beginnt im Designmodus.\n\nEs ist ein Bildelement für dich eingerichtet,
        das jedoch nicht angezeigt wird, wenn du den Designmodus verlässt, da ihm
        nicht mitgeteilt wurde, welches Bild angezeigt werden soll. \n\n-   Benutze
        den Befehl `setProperty()`, um das Bild des UI Image Elements auf dem Bildschirm
        einzustellen."
      CSDU6 - UI and Inputs - setProperty first level: |-
        # setProperty

        **Starter Code:** Es gibt einen Aufruf von `setProperty()`, der die Textfarbe auf blau setzt, wenn du das Programm ausführst.

        Kannst du weitere Aufrufe zu `setProperty()` hinzufügen, die andere Dinge am Text ändern, wenn du das Programm ausführst? Probiere, mindestens 3 weitere Dinge zu ändern.
      CSDU6 - UI and Inputs - setScreen: "# setScreen\n\nBeginnen wir mit einem Setter,
        den Sie vor `setScreen()` verwendet haben. \n\n-   Sorge dafür, dass die Schaltfläche
        \"About Me\" auf der Startseite zur Seite \"About Me\" führt.\n-   Die Schaltfläche
        Zurück auf der Seite Über mich soll anschließend noch dafür sorgen, dass sie
        zur Startseite gelangen."
      CSDU6 - UI and Inputs - setText: |-
        # setText

        Wir fangen an, eine Alarm-App zu erstellen. Wir haben bereits einen Event-Handler für den "triggerAlarmButton" eingerichtet, der den "statusLabel"-Text auf ON ändert, wenn er angeklickt wird. Kannst du den Stop-Alarm-Button dazu bringen, den Text auf OFF zu ändern, wenn er angeklickt wird?
      CSDU6 - board event challenge_2018: |-
        # Challenge: Sound Board

        Check with your teacher before starting the challenge.

        Now that you know how to use board events, the buttons, switch, and the buzzer, try making a program that turns your board into a sound board when you press the buttons or flip the switch. Play around with the duration and frequencies of the sounds, and listen to how it turns out.
      CSDU6 - board event challenge_2019: |-
        # Challenge: Sound Board

        Check with your teacher before starting the challenge.

        Now that you know how to use board events, the buttons, switch, and the buzzer, try making a program that turns your board into a sound board when you press the buttons or flip the switch. Play around with the duration and frequencies of the sounds, and listen to how it turns out.
      CSDU6 - button LED prediction: See contained level for markdown
      CSDU6 - button LED prediction_2018: See contained level for markdown
      CSDU6 - button LED prediction_2019: See contained level for markdown
      CSDU6 - button_LED_prediction: |-
        # Board Events

        The `onBoardEvent()` block allows you to start taking input from your Circuit Playground. Look at the program with a partner and discuss what you think it'll do. Once you've come up with an answer, click "Run" to check your answer.

        -   What will happen when you press the left button down?
      CSDU6 - button_LED_prediction_2018: |-
        # Board Events

        The `onBoardEvent()` block allows you to start taking input from your Circuit Playground. Look at the program with a partner and discuss what you think it'll do. Once you've come up with an answer, click "Run" to check your answer.

        -   What will happen when you press the left button down?
      CSDU6 - button_LED_prediction_2019: |-
        # Board Events

        The `onBoardEvent()` block allows you to start taking input from your Circuit Playground. Look at the program with a partner and discuss what you think it'll do. Once you've come up with an answer, click "Run" to check your answer.

        -   What will happen when you press the left button down?
      CSDU6 - buzzer duration: |-
        # Buzzer Duration

        As you've noticed, `buzzer.frequency()` has two parameters: frequency and duration. Both of these take a number as input.

        -   Frequency changes how the buzzer sounds. The bigger the number you give it, the higher the buzzer's sound will be.

        -   Duration determines how long the buzzer is going to play a sound for in milliseconds.

        For right now we're going to focus on duration, the second parameter.

        # Do this

        Try out a few things with duration:

        -   Change the duration of the buzzer to something longer than 100.
        -   Try setting the duration to 0, what happens?

        Run the program multiple times to see what happens before you move on.
      CSDU6 - buzzer duration buttons: |-
        # Buzzer and the Buttons

        This program should use the buttons to play long and short buzzes.

        # Do this

        -   Change the duration parameter of `buzzer.frequency` to make the left button play a long buzz, and the right button play a short buzz.
      CSDU6 - buzzer duration buttons_2018: |-
        # Buzzer and the Buttons

        This program should use the buttons to play long and short buzzes.

        # Do this

        -   Change the duration parameter of `buzzer.frequency` to make the left button play a long buzz, and the right button play a short buzz.
      CSDU6 - buzzer duration buttons_2019: |-
        # Buzzer and the Buttons

        This program should use the buttons to play long and short buzzes.

        # Do this

        -   Change the duration parameter of `buzzer.frequency` to make the left button play a long buzz, and the right button play a short buzz.
      CSDU6 - buzzer duration_2018: |-
        # Buzzer Duration

        As you've noticed, `buzzer.frequency()` has two parameters: frequency and duration. Both of these take a number as input.

        -   Frequency changes how the buzzer sounds. The bigger the number you give it, the higher the buzzer's sound will be.

        -   Duration determines how long the buzzer is going to play a sound for in milliseconds.

        For right now we're going to focus on duration, the second parameter.

        # Do this

        Try out a few things with duration:

        -   Change the duration of the buzzer to something longer than 100.
        -   Try setting the duration to 0, what happens?

        Run the program multiple times to see what happens before you move on.
      CSDU6 - buzzer duration_2019: |-
        # Buzzer Duration

        As you've noticed, `buzzer.frequency()` has two parameters: frequency and duration. Both of these take a number as input.

        -   Frequency changes how the buzzer sounds. The bigger the number you give it, the higher the buzzer's sound will be.

        -   Duration determines how long the buzzer is going to play a sound for in milliseconds.

        For right now we're going to focus on duration, the second parameter.

        # Do this

        Try out a few things with duration:

        -   Change the duration of the buzzer to something longer than 100.
        -   Try setting the duration to 0, what happens?

        Run the program multiple times to see what happens before you move on.
      CSDU6 - buzzer intro: |-
        # Using the Buzzer

        You can use the buzzer in a lot of different ways, but right now we're just going to use the `buzzer.frequency()`.

        # Do this

        -   Pull out a `buzzer.frequency()` block from the toolbox and play around with it. You'll notice it has two parameters, what happens when you change either, or both of those?
        -   Run the program and enjoy the music of your Circuit Playground.
      CSDU6 - buzzer intro_2018: |-
        # Using the Buzzer

        You can use the buzzer in a lot of different ways, but right now we're just going to use the `buzzer.frequency()`.

        # Do this

        -   Pull out a `buzzer.frequency()` block from the toolbox and play around with it. You'll notice it has two parameters, what happens when you change either, or both of those?
        -   Run the program and enjoy the music of your Circuit Playground.
      CSDU6 - buzzer intro_2019: |-
        # Using the Buzzer

        You can use the buzzer in a lot of different ways, but right now we're just going to use the `buzzer.frequency()`.

        # Do this

        -   Pull out a `buzzer.frequency()` block from the toolbox and play around with it. You'll notice it has two parameters, what happens when you change either, or both of those?
        -   Run the program and enjoy the music of your Circuit Playground.
      CSDU6 - final project 1: |-
        # Designing the User Interface

        Before worrying about the code for your program, start by laying out the user interface. As you add elements in Design Mode, make sure to give everything a meaningful ID. Even if you don't plan on accessing an element with code, making sure that all of your IDs are descriptive will help make your program more readable and easier to program.
      CSDU6 - final project 1_2018: |-
        # Designing the User Interface

        Before worrying about the code for your program, start by laying out the user interface. As you add elements in Design Mode, make sure to give everything a meaningful ID. Even if you don't plan on accessing an element with code, making sure that all of your IDs are descriptive will help make your program more readable and easier to program.
      CSDU6 - final project 1_2019: |-
        # Designing the User Interface

        Before worrying about the code for your program, start by laying out the user interface. As you add elements in Design Mode, make sure to give everything a meaningful ID. Even if you don't plan on accessing an element with code, making sure that all of your IDs are descriptive will help make your program more readable and easier to program.
      CSDU6 - final project 2: |-
        # Wiring Up the UI

        With your user interface in place, you can now add event handlers for your interface elements. At this point you may want to just include `console.log()` commands to make sure that your events are working as expected - you can add the functional code later one.
      CSDU6 - final project 2_2018: |-
        # Wiring Up the UI

        With your user interface in place, you can now add event handlers for your interface elements. At this point you may want to just include `console.log()` commands to make sure that your events are working as expected - you can add the functional code later one.
      CSDU6 - final project 2_2019: |-
        # Wiring Up the UI

        With your user interface in place, you can now add event handlers for your interface elements. At this point you may want to just include `console.log()` commands to make sure that your events are working as expected - you can add the functional code later one.
      CSDU6 - final project 3: |-
        # Board Input Events

        Now you can add the events which will take input from the board. Again, feel free to just use `console.log()` statements at this point to ensure that your events are working.
      CSDU6 - final project 3_2018: |-
        # Board Input Events

        Now you can add the events which will take input from the board. Again, feel free to just use `console.log()` statements at this point to ensure that your events are working.
      CSDU6 - final project 3_2019: |-
        # Board Input Events

        Now you can add the events which will take input from the board. Again, feel free to just use `console.log()` statements at this point to ensure that your events are working.
      CSDU6 - final project 4: |-
        # Functions

        As you continue to work through your program, look for patterns that can be abstracted into functions. Can you find code that is repeated multiple places, or chunks of code that could be better understood of given a name? Don't forget that you can use parameters to write functions for repeated code that is _mostly_ the same, but varies a bit (such as setting color on multiple LEDs).
      CSDU6 - final project 4_2018: |-
        # Functions

        As you continue to work through your program, look for patterns that can be abstracted into functions. Can you find code that is repeated multiple places, or chunks of code that could be better understood of given a name? Don't forget that you can use parameters to write functions for repeated code that is _mostly_ the same, but varies a bit (such as setting color on multiple LEDs).
      CSDU6 - final project 4_2019: |-
        # Functions

        As you continue to work through your program, look for patterns that can be abstracted into functions. Can you find code that is repeated multiple places, or chunks of code that could be better understood of given a name? Don't forget that you can use parameters to write functions for repeated code that is _mostly_ the same, but varies a bit (such as setting color on multiple LEDs).
      CSDU6 - final project 5: |-
        # Board Output

        If you haven't already, use some of the output elements on the board to communicate useful information to the user.
      CSDU6 - final project 5_2018: |-
        # Board Output

        If you haven't already, use some of the output elements on the board to communicate useful information to the user.
      CSDU6 - final project 5_2019: |-
        # Board Output

        If you haven't already, use some of the output elements on the board to communicate useful information to the user.
      CSDU6 - final project 6: |-
        # Finishing Touches

        Add any finishing touches still needed to make your innovation awesome. If you have time, test out your innovation with some potential users to gather feedback and find opportunities for improvement. When you're totally finished, click the "Submit" button to turn it in!
      CSDU6 - final project 6_2018: |-
        # Finishing Touches

        Add any finishing touches still needed to make your innovation awesome. If you have time, test out your innovation with some potential users to gather feedback and find opportunities for improvement. When you're totally finished, click the "Submit" button to turn it in!
      CSDU6 - final project 6_2019: |-
        # Finishing Touches

        Add any finishing touches still needed to make your innovation awesome. If you have time, test out your innovation with some potential users to gather feedback and find opportunities for improvement. When you're totally finished, click the "Submit" button to turn it in!
      CSDU6 - lightswitch toggleswitch: |-
        # Using the Toggle Switch

        The toggle switch can flip in one of two positions: `open` and `close`.  This program uses it to make a light switch.  Right now it can only turn the light on.

        # Do this

        -   Create a new toggle switch event that is triggered when the switch is flipped to `close`.
        -   Add code so that when the toggle switch is flipped to `close` the light turns off.
      CSDU6 - lightswitch toggleswitch_2018: |-
        # Using the Toggle Switch

        The toggle switch can flip in one of two positions: `open` and `close`.  This program uses it to make a light switch.  Right now it can only turn the light on.

        # Do this

        -   Create a new toggle switch event that is triggered when the switch is flipped to `close`.
        -   Add code so that when the toggle switch is flipped to `close` the light turns off.
      CSDU6 - lightswitch toggleswitch_2019: |-
        # Using the Toggle Switch

        The toggle switch can flip in one of two positions: `open` and `close`.  This program uses it to make a light switch.  Right now it can only turn the light on.

        # Do this

        -   Create a new toggle switch event that is triggered when the switch is flipped to `close`.
        -   Add code so that when the toggle switch is flipped to `close` the light turns off.
      CSDU6 - sensors predict question: |-
        # Make a Prediction

        Read the code in this program and make a prediction below. What do you think this program will do when you run it? How is the user intended to interact with the board? You may need to blow onto the board to see the full range of this app.
      CSDU6 - sensors predict question_2018: |-
        # Make a Prediction

        Read the code in this program and make a prediction below. What do you think this program will do when you run it? How is the user intended to interact with the board? You may need to blow onto the board to see the full range of this app.
      CSDU6 - sensors predict question_2019: |-
        # Make a Prediction

        Read the code in this program and make a prediction below. What do you think this program will do when you run it? How is the user intended to interact with the board? You may need to blow onto the board to see the full range of this app.
      CSDU6 - toggle state LED prediction: See contained level for markdown
      CSDU6 - toggle state LED prediction_2018: See contained level for markdown
      CSDU6 - toggle state LED prediction_2019: See contained level for markdown
      CSDU6 - toggleswitch state setProp: |-
        # State and the Toggle Switch

        This program tells you whether the toggle switch is opened or closed, but it needs the `toggleSwitch.isOpen` block to work.  `toggleSwitch.isOpen` is `true` if the switch is opened and `false` if the switch is closed.

        # Do this

        -   Complete the if-statement with the `toggleSwitch.isOpen` property.
        -   Run the program and press the left button, then flip the toggle switch and press the button again.
      CSDU6 - toggleswitch state setProp_2018: |-
        # State and the Toggle Switch

        This program tells you whether the toggle switch is opened or closed, but it needs the `toggleSwitch.isOpen` block to work.  `toggleSwitch.isOpen` is `true` if the switch is opened and `false` if the switch is closed.

        # Do this

        -   Complete the if-statement with the `toggleSwitch.isOpen` property.
        -   Run the program and press the left button, then flip the toggle switch and press the button again.
      CSDU6 - toggleswitch state setProp_2019: |-
        # State and the Toggle Switch

        This program tells you whether the toggle switch is opened or closed, but it needs the `toggleSwitch.isOpen` block to work.  `toggleSwitch.isOpen` is `true` if the switch is opened and `false` if the switch is closed.

        # Do this

        -   Complete the if-statement with the `toggleSwitch.isOpen` property.
        -   Run the program and press the left button, then flip the toggle switch and press the button again.
      CSDU6 AppLab Input 1: |-
        # Input in App Lab

        _You don't need to make any changes to the code here_

        Take a minute to read through the code and run the program. Discuss with a partner:

        1.  What is the source of input?
        2.  Where and how does the program check for input?
        3.  What does the program do when it gets the right input?
        4.  What is the program doing when there is no input?
      CSDU6 AppLab Input 1_2018: |-
        # Input in App Lab

        _You don't need to make any changes to the code here_

        Take a minute to read through the code and run the program. Discuss with a partner:

        1.  What is the source of input?
        2.  Where and how does the program check for input?
        3.  What does the program do when it gets the right input?
        4.  What is the program doing when there is no input?
      CSDU6 AppLab Input 1_2019: |-
        # Input in App Lab

        _You don't need to make any changes to the code here_

        Take a minute to read through the code and run the program. Discuss with a partner:

        1.  What is the source of input?
        2.  Where and how does the program check for input?
        3.  What does the program do when it gets the right input?
        4.  What is the program doing when there is no input?
      CSDU6 Circuit Playground Test: |-
        # Test Your Board

        This level is just a quick test to make sure your board is working. To run this test, do the following:

        1.  Plug your board into your computer with a USB cable
        2.  Click "Run"
        3.  Wait a few seconds for either a Success or Error screen to pop up
        4.  If your test was successful, move on to the next level. If not, try some of the troubleshooting steps

        ## Troubleshooting

        There are a number of things that could prevent your test from passing.

        1.  Try refreshing the page and running the test again (you should refresh the page for each of the following ideas as well)
        2.  Try connecting your board to a different USB port
        3.  Try a different USB cable. Some USB cables can only be used for charging, so make sure your cable supports data transfer!
        4.  Try a different board
        5.  Go to [studio.code.org/maker/setup](/maker/setup) to run a more detailed test
      CSDU6 Circuit Playground Test_2018: |-
        # Test Your Board

        This level is just a quick test to make sure your board is working. To run this test, do the following:

        1.  Plug your board into your computer with a USB cable
        2.  Click "Run"
        3.  Wait a few seconds for either a Success or Error screen to pop up
        4.  If your test was successful, move on to the next level. If not, try some of the troubleshooting steps

        ## Troubleshooting

        There are a number of things that could prevent your test from passing.

        1.  Try refreshing the page and running the test again (you should refresh the page for each of the following ideas as well)
        2.  Try connecting your board to a different USB port
        3.  Try a different USB cable. Some USB cables can only be used for charging, so make sure your cable supports data transfer!
        4.  Try a different board
        5.  Go to [studio.code.org/maker/setup](/maker/setup) to run a more detailed test
      CSDU6 Circuit Playground Test_2019: |-
        # Test Your Board

        This level is just a quick test to make sure your board is working. To run this test, do the following:

        1.  Plug your board into your computer with a USB cable
        2.  Click "Run"
        3.  Wait a few seconds for either a Success or Error screen to pop up
        4.  If your test was successful, move on to the next level. If not, try some of the troubleshooting steps

        ## Troubleshooting

        There are a number of things that could prevent your test from passing.

        1.  Try refreshing the page and running the test again (you should refresh the page for each of the following ideas as well)
        2.  Try connecting your board to a different USB port
        3.  Try a different USB cable. Some USB cables can only be used for charging, so make sure your cable supports data transfer!
        4.  Try a different board
        5.  Go to [studio.code.org/maker/setup](/maker/setup) to run a more detailed test
      CSDU6 GameLab Input 1: |-
        # Input in Game Lab

        _You don't need to make any changes to the code here_

        Take a minute to read through the code and run the program. Discuss with a partner:

        1.  What is the source of input?
        2.  Where and how does the program check for input?
        3.  What does the program do when it gets the correct input?
        4.  What is the program doing when there is no input?
      CSDU6 GameLab Input 1_2018: |-
        # Input in Game Lab

        _You don't need to make any changes to the code here_

        Take a minute to read through the code and run the program. Discuss with a partner:

        1.  What is the source of input?
        2.  Where and how does the program check for input?
        3.  What does the program do when it gets the correct input?
        4.  What is the program doing when there is no input?
      CSDU6 GameLab Input 1_2019: |-
        # Input in Game Lab

        _You don't need to make any changes to the code here_

        Take a minute to read through the code and run the program. Discuss with a partner:

        1.  What is the source of input?
        2.  Where and how does the program check for input?
        3.  What does the program do when it gets the correct input?
        4.  What is the program doing when there is no input?
      CSDU6 array index predict contained: |-
        # Predict

        The code below will display four things on the screen.  What do you think they will be?
      CSDU6 array index predict contained_2018: |-
        # Predict

        The code below will display four things on the screen.  What do you think they will be?
      CSDU6 array index predict contained_2019: |-
        # Predict

        The code below will display four things on the screen.  What do you think they will be?
      CSDU6 array select days: |-
        # Accessing Items in an Array

        This program uses the Circuit Playground.  It creates an array of the days of the week.  When the left button is pressed, it displays the day as "Tuesday".

        # Do This

        -   Add code that will display the day as "Thursday" when the right button is pressed.
      CSDU6 array select days_2018: |-
        # Accessing Items in an Array

        This program uses the Circuit Playground.  It creates an array of the days of the week.  When the left button is pressed, it displays the day as "Tuesday".

        # Do This

        -   Add code that will display the day as "Thursday" when the right button is pressed.
      CSDU6 array select days_2019: |-
        # Accessing Items in an Array

        This program uses the Circuit Playground.  It creates an array of the days of the week.  When the left button is pressed, it displays the day as "Tuesday".

        # Do This

        -   Add code that will display the day as "Thursday" when the right button is pressed.
      CSDU6 arrays select rainbow: |-
        # Index Practice

        <img src="https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45 PM.png" style="width: 150px; float: right">

        **Starter code** has been provided that creates a list called `colors` and uses it to set the colors of the rectangles on the screen.  Unfortunately, the colors are out of order.

        # Do This

        -   Change the index numbers inside each selection block to make the rainbow appear as in the picture on the right.
      CSDU6 arrays select rainbow_2018: |-
        # Index Practice

        <img src="https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45 PM.png" style="width: 150px; float: right">

        **Starter code** has been provided that creates a list called `colors` and uses it to set the colors of the rectangles on the screen.  Unfortunately, the colors are out of order.

        # Do This

        -   Change the index numbers inside each selection block to make the rainbow appear as in the picture on the right.
      CSDU6 arrays select rainbow_2019: |-
        # Index Practice

        <img src="https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45 PM.png" style="width: 150px; float: right">

        **Starter code** has been provided that creates a list called `colors` and uses it to set the colors of the rectangles on the screen.  Unfortunately, the colors are out of order.

        # Do This

        -   Change the index numbers inside each selection block to make the rainbow appear as in the picture on the right.
      CSDU6 arrays select random: |-
        # Random Selection

        You can also select a random element in the list by using the `randomNumber` block instead of an index.  This program selects a random icon from a list and displays it on the screen when the left button is pressed.  Right now, the icons are always blue.

        # Do This

        -   Add code that will select a random color from the list and use that as the icon color.
      CSDU6 arrays select random_2018: |-
        # Random Selection

        You can also select a random element in the list by using the `randomNumber` block instead of an index.  This program selects a random icon from a list and displays it on the screen when the left button is pressed.  Right now, the icons are always blue.

        # Do This

        -   Add code that will select a random color from the list and use that as the icon color.
      CSDU6 arrays select random_2019: |-
        # Random Selection

        You can also select a random element in the list by using the `randomNumber` block instead of an index.  This program selects a random icon from a list and displays it on the screen when the left button is pressed.  Right now, the icons are always blue.

        # Do This

        -   Add code that will select a random color from the list and use that as the icon color.
      CSDU6 arrays select variable: |-
        # Using Variables

        This program is like the last one, but the icons should always match the colors (red heart, yellow star, green leaf, and blue water).  You can do this using the variable "myIndex", which will store the value of a random number so that it can be used to get the icon and the color from the same place on each list.

        # Do This

        -   Change the code so that both the icon and its color are chosen using the "myIndex" variable.
      CSDU6 arrays select variable_2018: |-
        # Using Variables

        This program is like the last one, but the icons should always match the colors (red heart, yellow star, green leaf, and blue water).  You can do this using the variable "myIndex", which will store the value of a random number so that it can be used to get the icon and the color from the same place on each list.

        # Do This

        -   Change the code so that both the icon and its color are chosen using the "myIndex" variable.
      CSDU6 arrays select variable_2019: |-
        # Using Variables

        This program is like the last one, but the icons should always match the colors (red heart, yellow star, green leaf, and blue water).  You can do this using the variable "myIndex", which will store the value of a random number so that it can be used to get the icon and the color from the same place on each list.

        # Do This

        -   Change the code so that both the icon and its color are chosen using the "myIndex" variable.
      CSDU6 buzzer 2d arrays_2018: |-
        # Challenge: 2D Arrays

        Arrays can hold all sorts of data, like numbers, strings, and even other arrays. When we put an array inside another, this becomes a 2D array. The `buzzer.playSong()` block can be used to play songs that sound more precise with 2D arrays.

        The structure that you've been using to play notes looks like this:

        `buzzer.playNotes( [array of notes to play] , tempo of the whole song);`

        The main difference with `buzzer.playSong()` is each element inside the `[array of notes to play]`, is an array with two elements: the note you want to play, and the duration of the note. Sometime you'll want a quarter note in your song, other times you'll want a full note, or maybe somewhere in between. A full song might look something like this:

        `buzzer.playSong([
          ["G3",0.25],
          ["C4",0.25],
          ["E4",0.25],
          ["G4",0.125],
          [null,0.375],
          ["E4",0.1875],
          ["G4",1]
        ], 120);`

        # Do this

        -   Use the `buzzer.playSong` block to make a different song.
        -   When you get comfortable with the structure, add more notes to the song.
      CSDU6 buzzer 2d arrays_2019: |-
        # Challenge: 2D Arrays

        Arrays can hold all sorts of data, like numbers, strings, and even other arrays. When we put an array inside another, this becomes a 2D array. The `buzzer.playSong()` block can be used to play songs that sound more precise with 2D arrays.

        The structure that you've been using to play notes looks like this:

        `buzzer.playNotes( [array of notes to play] , tempo of the whole song);`

        The main difference with `buzzer.playSong()` is each element inside the `[array of notes to play]`, is an array with two elements: the note you want to play, and the duration of the note. Sometime you'll want a quarter note in your song, other times you'll want a full note, or maybe somewhere in between. A full song might look something like this:

        `buzzer.playSong([
          ["G3",0.25],
          ["C4",0.25],
          ["E4",0.25],
          ["G4",0.125],
          [null,0.375],
          ["E4",0.1875],
          ["G4",1]
        ], 120);`

        # Do this

        -   Use the `buzzer.playSong` block to make a different song.
        -   When you get comfortable with the structure, add more notes to the song.
      CSDU6 buzzer.stop_2018: |-
        # Stopping the Music

        Sometimes you need to be able to stop the music when you want, like in the code below. Duration wasn't specified so now the note plays continuously. Luckily, the `buzzer.stop()` method is here to save your ears.

        # Do this

        -   Find a way to get the note to stop playing with `buzzer.stop()`.
        -   Celebrate your win over the endless note!
      CSDU6 buzzer.stop_2019: |-
        # Stopping the Music

        Sometimes you need to be able to stop the music when you want, like in the code below. Duration wasn't specified so now the note plays continuously. Luckily, the `buzzer.stop()` method is here to save your ears.

        # Do this

        -   Find a way to get the note to stop playing with `buzzer.stop()`.
        -   Celebrate your win over the endless note!
      CSDU6 circuit playground piano: "# Circuit Piano\n\nLook at the code below.
        You're not going to be changing it, but try to see what it does. \n\n# Do
        this\n\n-   Run the program and play with the piano on the screen."
      CSDU6 circuit playground piano_2018: "# Circuit Piano\n\nLook at the code below.
        You're not going to be changing it, but try to see what it does. \n\n# Do
        this\n\n-   Run the program and play with the piano on the screen."
      CSDU6 circuit playground piano_2019: "# Circuit Piano\n\nLook at the code below.
        You're not going to be changing it, but try to see what it does. \n\n# Do
        this\n\n-   Run the program and play with the piano on the screen."
      CSDU6 frequency creation: |-
        # Making the Buzzer Buzz

        Now that you can use the buzzer's frequency, try to make the buzzer play a high sound when the same button pops back up.

        # Do this

        -   Add another onBoardEvent block so the buzzer plays a high sound when the left button comes back **up**
      CSDU6 frequency creation_2018: |-
        # Making the Buzzer Buzz

        Now that you can use the buzzer's frequency, try to make the buzzer play a high sound when the same button pops back up.

        # Do this

        -   Add another onBoardEvent block so the buzzer plays a high sound when the left button comes back **up**
      CSDU6 frequency creation_2019: |-
        # Making the Buzzer Buzz

        Now that you can use the buzzer's frequency, try to make the buzzer play a high sound when the same button pops back up.

        # Do this

        -   Add another onBoardEvent block so the buzzer plays a high sound when the left button comes back **up**
      CSDU6 frequency modification: |-
        # Making the Buzzer Buzz

        The frequency of the buzzer determines how high or how low the buzzer will sound when it plays. The higher the number you give frequency, the higher the buzzer will sound.

        # Do this

        -   Right now the buzzer plays a high note when the left button is pressed. Make the buzzer play a low note instead.
      CSDU6 frequency modification_2018: |-
        # Making the Buzzer Buzz

        The frequency of the buzzer determines how high or how low the buzzer will sound when it plays. The higher the number you give frequency, the higher the buzzer will sound.

        # Do this

        -   Right now the buzzer plays a high note when the left button is pressed. Make the buzzer play a low note instead.
      CSDU6 frequency modification_2019: |-
        # Making the Buzzer Buzz

        The frequency of the buzzer determines how high or how low the buzzer will sound when it plays. The higher the number you give frequency, the higher the buzzer will sound.

        # Do this

        -   Right now the buzzer plays a high note when the left button is pressed. Make the buzzer play a low note instead.
      CSDU6 making new arrays: |-
        # Making New Arrays

        You know how to change arrays, now it's time for you to make your own.

        # Do this

        -   Make a new array with whatever notes you want. They can be in different octaves, arranged in a certain key, etc. Anything you want!
        -   Have the buzzer play a random note from your array when the **right** button is pressed.
      CSDU6 making new arrays_2018: |-
        # Making New Arrays

        You know how to change arrays, now it's time for you to make your own.

        # Do this

        -   Make a new array with whatever notes you want. They can be in different octaves, arranged in a certain key, etc. Anything you want!
        -   Have the buzzer play a random note from your array when the **right** button is pressed.
      CSDU6 making new arrays_2019: |-
        # Making New Arrays

        Jetzt, da Sie Arrays ändern können, ist es an der Zeit, dass Sie Ihre eigenen erstellen.

        # Mach folgendes

        -   Erstelle ein neues Array mit beliebigen Noten. Sie können in verschiedenen Oktaven, in einer bestimmten Tonart usw. angeordnet sein. Alles, was du willst!
        -   Lasse den Summer eine zufällige Note aus Ihrem Array spielen, wenn du die Taste **rechts** drückst.
      CSDU6 piano with notes: |-
        # Piano Notes

        This is the same piano that you saw at the beginning of the lesson, but there are some bugs!

        # Do this

        -   Edit the code so that all keys are using a `buzzer.note()` block to play the corresponding note.
        -   Make sure that all the values passed in to `buzzer.note()` are notes, and not frequencies.

        _Hint: Remember to put quotes around the notes! e.g `buzzer.note("A4", 100);`_
      CSDU6 piano with notes_2018: |-
        # Piano Notes

        This is the same piano that you saw at the beginning of the lesson, but there are some bugs!

        # Do this

        -   Edit the code so that all keys are using a `buzzer.note()` block to play the corresponding note.
        -   Make sure that all the values passed in to `buzzer.note()` are notes, and not frequencies.

        _Hint: Remember to put quotes around the notes! e.g `buzzer.note("A4", 100);`_
      CSDU6 piano with notes_2019: |-
        # Piano Notes

        This is the same piano that you saw at the beginning of the lesson, but there are some bugs!

        # Do this

        -   Edit the code so that all keys are using a `buzzer.note()` block to play the corresponding note.
        -   Make sure that all the values passed in to `buzzer.note()` are notes, and not frequencies.

        _Hint: Remember to put quotes around the notes! e.g `buzzer.note("A4", 100);`_
      CSDU6 play null notes: |-
        # Null Notes

        You may have noticed that if you put the same note side-by-side in the array, the buzzer just plays that note as one long sound instead of as individual notes. In music we often want a break (or _rest_) between notes. You can get your buzzer to play a rest by sending it the value `null`.

        `null` is a special value that represents emptiness in computer science. `playNotes` plays each note for the same duration, so a `null` element in the array is just telling `playNotes` to play nothing for the same duration as everything else.

        # Do this

        -   Run the code to hear what it sounds like first.
        -   Examine the array inside `buzzer.playNotes()`.
        -   Put a pause between notes that are the same and side-by-side, and any other place you deem appropriate.

        _Tip: `null` references a value, just like a variable name. Make sure you don't put it in quotation marks!_
      CSDU6 play null notes_2018: |-
        # Null Notes

        You may have noticed that if you put the same note side-by-side in the array, the buzzer just plays that note as one long sound instead of as individual notes. In music we often want a break (or _rest_) between notes. You can get your buzzer to play a rest by sending it the value `null`.

        `null` is a special value that represents emptiness in computer science. `playNotes` plays each note for the same duration, so a `null` element in the array is just telling `playNotes` to play nothing for the same duration as everything else.

        # Do this

        -   Run the code to hear what it sounds like first.
        -   Examine the array inside `buzzer.playNotes()`.
        -   Put a pause between notes that are the same and side-by-side, and any other place you deem appropriate.

        _Tip: `null` references a value, just like a variable name. Make sure you don't put it in quotation marks!_
      CSDU6 play null notes_2019: |-
        # Null Notes

        You may have noticed that if you put the same note side-by-side in the array, the buzzer just plays that note as one long sound instead of as individual notes. In music we often want a break (or _rest_) between notes. You can get your buzzer to play a rest by sending it the value `null`.

        `null` is a special value that represents emptiness in computer science. `playNotes` plays each note for the same duration, so a `null` element in the array is just telling `playNotes` to play nothing for the same duration as everything else.

        # Do this

        -   Run the code to hear what it sounds like first.
        -   Examine the array inside `buzzer.playNotes()`.
        -   Put a pause between notes that are the same and side-by-side, and any other place you deem appropriate.

        _Tip: `null` references a value, just like a variable name. Make sure you don't put it in quotation marks!_
      CSDU6 play predict code: Markdown is in contained level
      CSDU6 play predict code_2018: Markdown is in contained level
      CSDU6 play predict code_2019: Markdown is in contained level
      CSDU6 play predict markdown: |-
        # Make a Prediction

        Look at the code below. What do you think it's going to do?

        Give it a guess and run the code to find out!
      CSDU6 play predict markdown_2018: |-
        # Make a Prediction

        Look at the code below. What do you think it's going to do?

        Give it a guess and run the code to find out!
      CSDU6 play predict markdown_2019: |-
        # Make a Prediction

        Look at the code below. What do you think it's going to do?

        Give it a guess and run the code to find out!
      CSDU6 play songs: |-
        # Making Songs

        You can make and play full songs with `buzzer.playNotes()`. It takes two parameters: an array of notes to play, and a tempo at which to play the notes. In previous bubbles you created arrays of notes and played through them randomly, but `buzzer.playNotes()` plays each note consecutively instead.

        # Do this

        -   Pull out a `buzzer.playNotes` block and change the starting array inside.
        -   Make sure the new array you give it has at least two pairs of notes that are next to each other in the list (Example: `["A5", "A5", "G4", "G4"]`)

        _Hint: Don't forget that you can always switch back and forth between block and text mode._
      CSDU6 play songs_2018: |-
        # Making Songs

        You can make and play full songs with `buzzer.playNotes()`. It takes two parameters: an array of notes to play, and a tempo at which to play the notes. In previous bubbles you created arrays of notes and played through them randomly, but `buzzer.playNotes()` plays each note consecutively instead.

        # Do this

        -   Pull out a `buzzer.playNotes` block and change the starting array inside.
        -   Make sure the new array you give it has at least two pairs of notes that are next to each other in the list (Example: `["A5", "A5", "G4", "G4"]`)

        _Hint: Don't forget that you can always switch back and forth between block and text mode._
      CSDU6 play songs_2019: |-
        # Making Songs

        You can make and play full songs with `buzzer.playNotes()`. It takes two parameters: an array of notes to play, and a tempo at which to play the notes. In previous bubbles you created arrays of notes and played through them randomly, but `buzzer.playNotes()` plays each note consecutively instead.

        # Do this

        -   Pull out a `buzzer.playNotes` block and change the starting array inside.
        -   Make sure the new array you give it has at least two pairs of notes that are next to each other in the list (Example: `["A5", "A5", "G4", "G4"]`)

        _Hint: Don't forget that you can always switch back and forth between block and text mode._
      CSDU6 toggle state prediction: "# More on the Toggle Switch\n\nYou can also
        check whether the toggle switch is in the `open` or `close` position anywhere
        in your program. \n\nWhat different things does the button do when the toggle
        switch is `open` or `close`?"
      CSDU6 toggle state prediction_2018: "# More on the Toggle Switch\n\nYou can
        also check whether the toggle switch is in the `open` or `close` position
        anywhere in your program. \n\nWhat different things does the button do when
        the toggle switch is `open` or `close`?"
      CSDU6 toggle state prediction_2019: "# More on the Toggle Switch\n\nYou can
        also check whether the toggle switch is in the `open` or `close` position
        anywhere in your program. \n\nWhat different things does the button do when
        the toggle switch is `open` or `close`?"
      Course 4 Artist 1: "Hilf mir, meine Box fertig zu zeichnen.\\\n(Jede Linie ist
        200 Pixel lang) \n\n<br/><br/>"
      Course 4 Artist 10: "<img src=\"https://images.code.org/c876143212d195192013582f57c6df04-image-1445625392518.36.18.png\"
        width=\"150px;\" style=\"mix-blend-mode: multiply;\" />\n\n**Play time:**
        \ Here is the code for an interesting shape.   \n\nWhat happens when you repeat
        it multiple times, turning between each iteration?   \n\nNotice that the turns
        in this shape add up to _420 degrees_, which means that when your artist is
        done drawing, it will be facing a different direction than when you started.
        \ That new direction is exactly _60 degrees_ to the _right_ of where you began.\n\n<hr/>\n\n<h4>\n<details>\n<summary><b>Repeat
        4</b></summary>\n<br/>\n\nIf you want to come full circle in just 4 repetitions,
        you need the artist to turn a total of **360 degrees/4 = 90 degrees** each
        time.  You can do that by adding an extra `turn right by 30 degrees` block
        to the outer loop (since **60+30 = 90**.)\n\n<br/>\n<img src=\"https://images.code.org/9da67a628ed72e87520a02a0d917e2af-image-1440132370113.44.12.png\"
        width=\"500px;\" style=\"mix-blend-mode: multiply;\" />\n<br/><br/>\n</details>\n</h4>\n\n<h4>\n<details>\n<summary><b>Repeat
        6</b></summary>\n<br/>\n\nWhen you repeat the shape as-is 6 times, you get
        a total rotation of **6x60 degrees** which is a full **360 degree** cycle.\n\n<img
        src=\"https://images.code.org/b79f96b87097ce3afe8a6a5608d04e36-image-1440132287456.44.27.png\"
        \ width=\"500px;\"  style=\"mix-blend-mode: multiply;\" />\n</details>\n</h4>\n\n<h4>\n<details>\n<summary><b>Repeat
        12</b></summary>\n\n<br/>\n\nIf you want to repeat the image 12 times, you
        need the artist to turn a total of **360 degrees/12 = 30 degrees** each iteration.
        \ That means you will need to adjust the artist back a bit with `turn left
        by 30 degrees` before you repeat the shape again.\n\n<br/><br/>\n<img src=\"https://images.code.org/ad254952522674496918561096817c66-image-1440132424792.44.01.png\"
        width=\"500px;\" style=\"mix-blend-mode: multiply;\" />\n\n</details>\n</h4>\n\nNow
        it's your turn!  Can you recreate each image by repeating the starting shape?
        \ "
      Course 4 Artist 11: "<img src=\"https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png\"
        width=\"200px\"/>\n\nJetzt eine Herausforderung!  \n\nHier ist ein Design,
        das nur Bausteine verwendet, die dir bereits gezeigt wurden.  Kannst du herausfinden,
        wie du es nachbilden kannst?  Fühle dich frei, es auszuprobieren. Es wird
        nicht erwartet, dass es beim ersten Mal perfekt ist.\n\nDie wiederholte Form
        ist fast identisch mit der aus dem letzten Puzzle, außer dass die Länge der
        ersten Schleife etwas kleiner ist. "
      Course 4 Artist 12: |-
        <img src="https://images.code.org/70795d84048767ae7fb65883f476b27c-image-1440050836837.01.09.png" width="250px"/>

        Free Play Inspiration: You've now learned everything you need to know to make a pattern like this! If this picture inspires you, try to make something similar. Otherwise, create something all your own.
      Course 4 Artist 13: 'Jetzt bist du dran: Hier ist eine leere Fläche, die Du
        frei gestalten kannst!'
      Course 4 Artist 2: |-
        Kannst du eine Schleife verwenden, um das ausgegraute Quadrat zu zeichnen? \
        (Jede Seite ist 300 Pixel lang)
      Course 4 Artist 20: 'Jetzt bist du dran: Hier ist eine leere Fläche, die Du
        frei gestalten kannst!'
      Course 4 Artist 3: "Versuche herauszufinden, was passiert, wenn du diesen Code
        ausführst (oder drücke \"Ausführen\", um ihn zu testen).  \n\nWiederhole ihn
        dann so oft, bis die Zeichnung vollständig ist."
      Course 4 Artist 4: |-
        Wie viele Grad sind in einem Kreis?\
        Fülle den Wiederhole-Baustein mit dieser Zahl aus, um einen Farbkreis zu erstellen.
      Course 4 Artist 5: "Zeichne die andere Hälfte dieses Designs, sodass es symmetrisch
        ist. Die Dreiecke sind gleichseitig und 50 Pixel lang. \n\nEventuell musst
        du den Code mehrmals ausführen, um alle Bausteine zu finden, die du ergänzen
        musst."
      Course 4 Artist 6: Vervollständige den Code, um diese drei, gleichseitigen Dreiecke
        zu zeichnen.
      Course 4 Artist 7: 'Erstelle nun eine Schleife in einer weiteren Schleife um
        10 Dreiecke zu zeichnen. '
      Course 4 Artist 8: Zeichne diese Sonne, indem du diesen ganzen Code-Baustein
        mehrmals durchlaufen lässt.
      Course 4 Artist 8a: Erinnerst du dich an diese Form?  Jetzt kannst du sie bauen,
        bekommst zum Anfang jedoch keine Bausteine von uns!
      Course 4 Artist 9: 'Wiederhole dieses Design 10 Mal und stelle sicher, dass
        du Dich zwischen jeder gezeichneten Form drehst. '
      Course 4 Artist Binary 1: "Here's a function that takes a binary string of 1's
        and 0's and instructs the artist to follow them from left to right, top to
        bottom.  \n\nThe artist will fill-in the squares when it sees a 1 and ignore
        the square when it sees a 0. \n\n**Run this code to see how the artist uses
        binary to draw this pattern.**"
      Course 4 Artist Binary Free Play 2b: "<img src=\"https://images.code.org/0a30f23ff6138828d053267719d34fa8-image-1444435986654.00.22.png\"
        width=\"250px\"/>\n\n**Free-Play Inspiration:** You've now learned everything
        you need to know to make a pattern like this! \n\nIf this picture inspires
        you, try to make something similar. Otherwise, create something all your own.
        \n<br/>"
      Course 4 Artist Binary pre1: |-
        Binary is a way of representing information using only two options. In this case, <b>off</b> and <b>on</b>.
        <br/>
        Here, we're going to use the number <b>0</b> as code for "off" and the number <b>1</b> as code for "on".

        <hr/>

        We've provided you with a grid of "pixels" that you can walk through and make designs by turning on only certain squares.

        <b>Use the blocks below to have the artist draw "01010101" in binary in the first row.</b>
      Course 4 Artist For Loops 1: Verwende einen "Wiederhole"-Baustein, um dieses
        50-Pixel grosse Dreieck zu zeichnen.
      Course 4 Artist For Loops 11: "Erinnerst du dich an eine frühere Phase, in der
        wir eine Variable benutzt haben, um die Anzahl der Seiten in einer Form zu
        kontrollieren? Wir werden jetzt dasselbe mit der \"Counter\"-Variablen machen.
        \ \n\nDieses Muster beginnt mit einem Dreieck und addiert eine Seite nach
        der anderen, bis es ein Zehneck (10 Seiten) zeichnet. Jede Seite sollte 100
        Pixel lang sein. \n\nWie wirst Du die `counter`-Variable aus der `for`-Schleife
        verwenden, um diese Zeichnung neu zu erstellen?"
      Course 4 Artist For Loops 11a: |-
        Jetzt kombinieren wir alles!
        <br><br>
        Nutze dein Wissen über „Zähle mit“-Schleifen und den „Zähler“, erstelle diese Zeichnung, bei der jede Form zwei Seiten mehr als die vorherige hat.  Stelle sicher, dass jede Seite zehnmal so lang ist wie die Anzahl der Seiten im Vieleck. <br><br>
        Ein wenig Code gibt es schon als Starthilfe.
      Course 4 Artist For Loops 14: |-
        Es gibt einen hübschen Effekt, wenn du vom notwendigen Winkel ein wenig abweichst. <br><br>
        Versuche mal, einen Teil des Codes vom letzten Level zu verwenden, aber drehe um 89 Grad, um diese verdrehte Quadratspirale zu erzeugen.
      Course 4 Artist For Loops 15: "**Free Play:** Try making some drawings of your
        own using `for loops`. We've added a few useful variables for you as well."
      Course 4 Artist For Loops 2: Ich habe den Code zum Zeichnen eines Dreiecks in
        eine „Zähle mit“-Schleife eingefügt, die in 10er-Schritten von 50 bis 100
        zählt.  **Hinweis:** Überprüfe den Code noch einmal, bevor du „Ausführen“
        klickst.
      Course 4 Artist For Loops 3: Nutze das vorherige Puzzle als Vorlage, um dieses
        hier zu vervollständigen.  Das kleinste Dreieck hat eine Seitenlänge von 20
        Pixeln, das größte von 200 Pixeln und jedes Dreieck ist 20 Pixel größer als
        das vorherige.
      Course 4 Artist For Loops 4: 'Wie kannst du dein Wissen nutzen, um diese Quadrate
        zu zeichnen? Das kleinste ist 15 Pixel lang, das größte 300 Pixel, und jedes
        Quadrat ist 15 Pixel grösser als sein Vorgänger. '
      Course 4 Artist For Loops 6a: Nimm drei kleine Änderungen am Code der letzten
        Ebene vor, um das richtige Ergebnis zu erhalten!
      Course 4 Artist For Loops 8: "Eine kleine Änderung am Code des letzten Bildes
        kann dieses Bild erzeugen. Kannst du herausfinden, was geändert werden muss?<br><br>\n\nHinweis:
        Du musst etwas entfernen!  "
      Course 4 Artist For Loops Challenge: |-
        **Aufgabe:** Findest du heraus, wie man all dein neues Wissen kombiniert, um dieses Bild mit Vielecken zu erstellen? Alle Vielecken haben eine Seitenlänge von 40 Pixeln.<br><br>
        Hinweis: Wenn du eine Spirale zeichnen willst, darfst du die Vielecken nicht schliessen. Das heisst, dass jede Form eine Seite weniger als normalerweise hat.
      Course 4 Artist For Loops inspire: |-
        <br/><br/>
        <img src="https://images.code.org/9b5897e059bb29bd2faf8504659a3cfc-image-1440719685627.49.33.png" width="250px"/>\
        <br/><br/>
        **Freispiel Inspiration:** Du hast jetzt alles gelernt, was du wissen musst um ein Muster wie dieses zu erstellen! Wenn dieses Bild Dich inspiriert, versuche, etwas Ähnliches zu machen. Ansonsten kannst du auch etwas ganz Eigenes erschaffen.
      Course 4 Artist Functions Inspiration: "<img src=\"https://images.code.org/cf373e03bede480ae54aec72ce823454-image-1442951867535.54.11.png\"
        width=\"250px\"/>\n\n**Free-Play Inspiration:** You've now learned everything
        you need to know to make a pattern like this! \n\nIf this picture inspires
        you, try to make something similar. Otherwise, create something all your own. "
      Course 4 Artist Functions challenge: "<img src=\"https://images.code.org/69f1c2b415f907c86aaa6ed2534c3682-image-1442870371171.13.38.png\"
        width=\"250px\"/>\n\n**Challenge Level:** Use what you've learned in this
        stage and others to figure out how to make the drawing above.  "
      Course 4 Artist Inspire: "<img src=\"https://images.code.org/b5e28b084cb331ee030ea3853ed921bd-image-1440060815818.51.21.png\"
        width=\"250px\"/>\n**Freispiel Inspiration:** Du hast jetzt alles gelernt,
        was du wissen musst, um ein Muster wie dieses zu erstellen! Wenn dieses Bild
        dich inspiriert, versuche, etwas Ähnliches zu machen. Ansonsten kannst du
        auch etwas ganz Eigenes erschaffen. "
      Course 4 Artist Vars 1: |-
        Kannst du mir helfen, ein gleichseitiges Dreieck zu zeichnen? Es soll auf jeder Seite genau 100 Pixel lang sein.

        <br/>
      Course 4 Artist Vars 11: |-
        Hier ist etwas komplizierterer Code, der dieselben Konzepte verwendet wie das letzte Rätsel. Welchen Wert muss die „Seiten“-Variable diesmal bekommen, um die dargestellte Figur aus Quadraten zu zeichnen?

        <p style="font-size:small; padding: 15px 15px 15px 40px; background-color:#dcf3f3; border-radius:10px;">
        Nur so zum Spaß: Probiere verschiedene Zahlen aus und schau was bei dem Muster passiert.
        </p>
      Course 4 Artist Vars 12: |-
        Setzen wir die Variable "Seiten" auf 5. Je mehr Seiten wir zu diesem Algorithmus hinzufügen, desto größer wird das ganze Muster!

        Beachte, dass es eine weitere Variable namens "Länge" gibt. Wir können sie nun überall dort verwenden, wo wir einen "bewege vorwärts"-Baustein haben.

        Setze die Variable "Länge" für diese Form auf 75.
      Course 4 Artist Vars 13: "Wenn eine Form viele Seiten hat, muss jede Seite kürzer
        sein, wenn das gesamte Muster auf den Bildschirm passen soll. \n\nLasse uns
        den Algorithmus für dieses erstaunliche Muster neu erstellen, aber anstatt
        die `Länge`-Variable manuell zu setzen, verwenden wir einen Mathematikblock
        mit der `Seiten`-Variablen im Inneren, um sicherzustellen, dass jede Form
        richtig passt.  \n\nDer Umfang jedes Polygons beträgt 300 Pixel."
      Course 4 Artist Vars 14: "**Freies Spiel:** Probiere es aus! Nun ist dein Algorithmus
        in eine weitere Schleife eingebettet. Experimentiere, indem du die zwei Variablen
        auf unterschiedliche Werte einstellst, um coole Muster zu zeichnen.<br><br>Spiele
        für tolle Effekte auch an den Farben herum! Benutze zufällige Farben in Schleifen
        und schau dir an, wie sich dadurch dein Design ändert."
      Course 4 Artist Vars 2: Statt „um 150 vorwärts bewegen“ verwendet der „Bewegen“-Baustein
        jetzt eine Variable namens „Länge“. Kannst du „Länge“ auf 150 einstellen,
        um dieses neue Dreieck zu zeichnen?
      Course 4 Artist Vars 4: Nun möchte ich ein Rechteck zeichnen, das doppelt so
        lang wie breit ist. Dazu haben wir eine Variable namens „Breite“, die auf
        100 eingestellt werden muss. Kannst Du die Mathematik-Bausteine verwenden,
        um den Code zu vervollständigen?
      Course 4 Artist Vars 6: "Hier ist ein Code, der jedes reguläre Polygon zeichnen
        kann. \n\nEs gibt eine neue Variable namens \"Seiten\", die auf 4 gesetzt
        ist. \nKann man die Variable \"Seiten\" (zusammen mit dem Mathematikbaustein)
        verwenden, um die richtige Menge zu drehen, unabhängig davon, wie viele Seiten
        das Polygon hat?"
      Course 4 Artist Vars 7: |-
        Nutze das Gelernte aus dem vorherigen Puzzle, um ein Hexagon (Sechseck) zu zeichnen. Verwende die Variable `Seiten`.

        Siehst du, dass du nur einen Wert ändern musst, um ein Dreieck, ein Quadrat, ein Fünfeck oder ein Achteck zu zeichnen?
      Course 4 Artist Vars 8: 'Freies Spiel: Experimentiere mit der Anzahl an Seiten,
        die diese Form hat. Schaffst du es, den Algorithmus so anzupassen, dass die
        Größe der Form unabhängig von der Anzahl der Seiten immer dieselbe ist?'
      Course 4 Bee 1: |-
        Die Biene weiß nicht, was sich unter der Wolke verbirgt!

        Benutze den „Wenn“-Baustein, um nachzusehen und **NUR DANN** Nektar zu sammeln, wenn eine Blume unter der Wolke ist.
      Course 4 Bee 2: |-
        Verwende den `wenn/ansonsten`-Baustein, um bei jedem Objekt zu prüfen, ob es sich um eine Blume oder Honigwabe handelt.

        Wenn es eine Blume ist, sammle Nektar... ansonsten, mache Honig!
      Course 4 Bee 3: Das unbekannte Objekt ist entweder eine Blume oder eine Bienenwabe.
        Benutze den `wenn/ansonsten`-Baustein, um Nektar zu machen, **wenn** es eine
        Blüte ist, **ansonsten** mache Honig (denn dann wäre es eine Honigwabe).
      Course 4 Bee Params 1: Schreibe ein Programm, um allen Nektar zu sammeln. Benutze
        dazu die Funktion "sammle 3 Nektar". Sie dreht die Biene, bewegt sie zum Nektar,
        sammelt ihn ein und bewegt die Biene wieder zurück zum Ausgangspunkt.
      Course 4 Bee Params 2: Ändere die "sammle 3 Nektar"-Funktion, so dass sie mich
        nach rechts zu den Blumen drehen lässt statt nach links.
      Course 4 Bee Params 3: |-
        Jetzt sind auf beiden Seiten Blumen!

        Für dich stehen die Variablen „links“ und „rechts“ zur Verfügung. Die Funktion „Nimm 3 Nektar“ wurde außerdem um den Parameter „Richtung“ ergänzt.

        **Ändere die Funktion „Nimm 3 Nektar“ so, dass die Biene sich in die richtige Richtung dreht, wenn ihr die Variablen „links“ oder „rechts“ übergeben werden.**
      Course 4 Bee Params 5: Let's start from scratch - can you create a new function
        called `get 5 nectar` with a direction parameter?
      Course 4 Bee Params 6: |-
        Wäre es nicht schön, den ganzen Nektar mit nur einer Funktion zu sammeln?

        Versuche mit dem neuen Parameter „Nektarportionen“ die Menge an Nektar, die gesammelt werden soll, zu steuern. Vielleicht möchtest du der Funktion auch einen neuen Namen geben?
      Course 4 Bee Params 7: |-
        Versuche, mit Ihrer neuen Funktion all diesen Nektar zu sammeln.

        <br/>
      Course 4 Bee Params 8: |-
        **Herausforderung:** Jetzt kümmern wir uns noch um Honig.

        Ändere deine Funktion so, dass sie die Anzahl der Honig- und Nektarportionen verwendet.  Wie kannst du mit der Anzahl entscheiden, was zu tun ist?
      Course 4 EC 1a: "**Extrem-Herausforderung:** Es gibt keine Regeln oder Hinweise,
        nur die Aufgabe!"
      Course 4 EC 1b: "**Extrem-Herausforderung:** Es gibt keine Regeln oder Hinweise,
        nur die Aufgabe!"
      Course 4 EC 2a: "**Extrem-Herausforderung:** Es gibt keine Regeln oder Hinweise,
        nur die Aufgabe!"
      Course 4 EC 2b: "**Extrem-Herausforderung:** Es gibt keine Regeln oder Hinweise,
        nur die Aufgabe!"
      Course 4 EC 2c: "**Extrem-Herausforderung:** Es gibt keine Regeln oder Hinweise,
        nur die Aufgabe!"
      Course 4 Maze 4: Versuche, das Rätsel mit dem „Wiederholen“-Baustein zu lösen,
        damit du weniger Bausteine benötigst...
      Course 4 Play Lab Params 1: "Here's a function called `jump` that causes your
        main character to jump up 100 pixels. \n\nRun the program and use the jump
        function to collect all of the flags by moving the dog with the arrow keys."
      Course 4 Play Lab Params 10: |-
        We've added one last function for you.

        <hr/>

        Use an `if` statement to program your game to call the `level_up` function only when `player_score` becomes greater than a certain number.

        </h4>

        *For example: `player_score` > 6*

        <hr/>

        _Play the game, and make it to level 3 to move to the next puzzle._
      Course 4 Play Lab Params 2: "Now we've got flags that are too high for our current
        jump! Let's use both the \"up\" and \"down\" arrows so that we can have multiple
        jump heights.  \n\nWe need to add a parameter to our jump function called
        `height`.  \n\n-   The up arrow should cause the dog to jump 200 pixels \n-
        \  The down arrow should make it jump only 100 pixels. "
      Course 4 Play Lab Params 3: |-
        We have added another parameter to the jump function so that we can use it with other actors. Each actor is represented by a number, starting from one.

        Edit the `jump` function so that it uses the `actor` parameter to make the correct character jump.
      Course 4 Play Lab Params 4: "Here's a function called `patrol`. \n\nEdit `patrol`
        to move Cat up 400 pixels and then down 400 pixels."
      Course 4 Play Lab Params 5: Edit the the `patrol` function to add an `actor`
        parameter, so that we can call it for each of the actors on the screen. Remember,
        the actors correspond to numbers 1, 2, and 3.
      Course 4 Play Lab Params 6: Add another parameter called `speed` to the `patrol`
        function. Try using a `set speed` block with the new `speed` parameter to
        help Penguin get both flags before the other sprites even get one.
      Course 4 Play Lab Params 7: "Let's have some fun! Look at the code provided
        to see if you can figure out what each block does.  \n\nWhen you're done,
        use the arrow keys to control Dog and collect all of the flags.\n\n**NOTE:**
        You don't need to make any changes to the program"
      Course 4 Play Lab Params 8: Use the `when actor touches` block to send Dog back
        to the top-left ONLY if Dog touches any of the other actors.
      Course 4 Play Lab Params 9: |-
        Here's our game from an earlier stage but most of the code is hidden. We've added a new function called `score_points.`

        * * *

        #### Edit the function so that a new parameter called `points` is added to `player_score`.

        #### The variable `player_score` should increase each time Dog tags Cat with pie, and decrease each time that Cat tags Dog with a sandwich.

        * * *

        _Note: When you're done, click "Run" to play.  When Dog scores 6 points, you will move on to the next puzzle._
      Course 4 Play Lab Vars 1: Diesmal musst du keinen Code schreiben! Einfach „Ausführen“
        klicken und spielen! <br><br> In diesem Spiel bist du der Hund, der versucht,
        mehr Flaggen als die Katze zu sammeln. Benutze den Nach-unten-Pfeil, um den
        Hund zu kontrollieren. Klicke „Abschließen“, wenn du fertig gespielt hast.
      Course 4 Play Lab Vars 2: Das Rennen im letzten Puzzle war nicht sehr fair!
        Ändere die Variable `Hund_Geschwindigkeit` so, dass du mehr Fahnen sammeln
        kannst als die Katze. Der erste, der 10 Fahnen hat, gewinnt!
      Course 4 Play Lab Vars 3: Jetzt kommt ein neues Spiel! <br><br>Bei diesem Level
        musst du nichts ändern.<br><br>**Aufgabe:** Bewege dich mit den Pfeiltasten
        nach links und rechts, springe mit der Pfeiltaste nach oben. Kannst du alle
        Flaggen einsammeln?
      Course 4 Play Lab Vars 4: 'Hier wird die Variable `Höhe` verwendet, um zu steuern,
        wie hoch der Hund springen kann. Ändere die Variable `Höhe` so, dass der Hund
        hoch genug springen kann, um alle Fahnen zu erreichen. '
      Course 4 Play Lab Vars 6: |-
        Wie sollen wir in unserem Spiel Punkte erhalten?<br><br>

        1.  Erhöhe die `Punkte`-Variable jedes Mal um 1, wenn der Hund die Katze mit einem Kuchenstück trifft.<br>
        2.  Verwende "Wenn Figur 2 irgendetwas berührt", um deinen Punktestand zu aktualisieren.<br>
        3.  Erhalte einen Punktestand von 10, um das Level zu gewinnen!<br>
            **Tipp:** Drücke Pfeiltaste nach rechts, um ein Kuchenstück zu werfen.
      Course 4 Play Lab Vars 7: |-
        Gut, und jetzt sorgen wir dafür, dass das Spiel nicht zu einfach ist!<br><br>
        Jedes Mal, wenn der Hund (Figur 1) von der Katze (Figur 2) mit einem Sandwich getroffen wird, soll dir ein Punkt abgezogen werden. <br><br>
        Beginne mit 10 Punkten, damit es nicht zu schwierig wird. Das Level ist erreicht, wenn deine Punktzahl von 10 auf 0 gesunken ist.
      Course 4 Play Lab Vars 9: "Free Play time! Here are all of the variables we've
        played with so far in this stage, as well as a few more in case you want them.
        \n\nNotice that there are now so many blocks in our toolbox that they need
        to be organized!  Here, we've put each piece into an appropriate category.
        \ Take some time to explore everything that is available. When you're done
        browsing, make a game or story using repeats, variables, and events.  \n\n_Hint:
        scroll down to see all the commands in the workspace._"
      Course 4 Play Labs For Loops 1: Let's make the dog speak every number from 1
        to 100. Use a `for` loop and the counter block to speak the counter variable
        each time the loop is run.
      Course 4 Playlab For Loop Freeplay: "**Freeplay:** Use everything you've learned
        so far to make a game that includes a `for` loop!"
      Course 4 Playlab For Loops 4b: "Now, these two characters are going to race!
        \ \n\nEach of them will move `counter` steps at a time, but their counters
        will have different values because of the `for` loops.  \n\nCan you change
        the **increment** in one of the loops so that the race is a tie?"
      Course 4 Playlab For Loops 5b: Adjust the interval on these `for` loops so that
        the two characters end in the exact same place.
      Course 4 Playlab For Loops 6b: "Now we're going to use `for` loops in a whole
        different way!\n\nThis game gets hard quickly because the time between disappearances
        shrinks fast!\n\n<hr/>\n\n**Edit this `for` loop to create a game that's fun
        for you to play!**  \n\n<hr/>\n\nPress \"Run\" and click Madame Unicorn as
        many times as you can.  Can you beat our score of 24? "
      Course 4 SCF 1: "**Functions Super Challenge:** Use the suggested functions
        to draw four rows of hexagons. Notice how our even numbered rows are shifted
        to the right?"
      Course 4 SCF 1a: "**Functions Super Challenge:** Can you figure out how to collect
        all of this nectar with the fewest blocks possible?"
      Course 4 SCF 1b: "**Functions Super Challenge:** Can you figure out how to collect
        all of this honey with the fewest blocks possible?"
      Course 4 SCF 2: "**Functions Super Challenge:** Use what you learned in the
        previous level to draw an image like this.\n\n_Note: The code becomes more
        simple if you incorporate parameters._  "
      Course 4 SCF 3: "**Die Funktionen Challenge:** Verwende das, was du im vorherigen
        Level gelernt hast, um ein Bild wie dieses zu zeichnen.\n\n_Hinweis: Verwende
        Parameter, um deinen Code einfacher zu gestalten._ \n\n<br/> \n<img src=\"https://images.code.org/d3d6a51fafdcc0a09a5c6b0e0f3c2b92-image-1446239805818.08.59.png\"
        width=\"300px\"/> \n<br/>  "
      Course 4 SCFL 1: "**For-Loops Super Challenge:** Solve this puzzle with the
        fewest number of blocks possible."
      Course 4 SCFL 1a: "**For Loops Super Challenge:** Can you get Scrat to his acorn
        using as few blocks as possible?"
      Course 4 SCFL 1b: "**For Loops Super Challenge:** Can you get Scrat to his acorn
        using as few blocks as possible?"
      Course 4 SCFL 2: |-
        **For-Loops Super Challenge:** Solve this puzzle with the fewest number of blocks possible.\
        <br/>
      Course 4 SCFL 3: "**For-Schleifen Super Challenge:** Kannst Du herausfinden,
        wie Du diese Zeichnung wiederherstellen kannst? \n\n<img src=\"https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png\"
        width=\"350px\"/>"
      Course 4 SCFL 4: "**For-Loops Super Challenge:** Can you figure out how to re-create
        this drawing? \n\n<img src=\"https://images.code.org/407f502735beec686187451bdf67aada-image-1446002848700.59.34.png\"
        width=\"350px\"/>"
      Course 4 SCFL 6: "**For-Loops Super Challenge:** Can you figure out how to re-create
        this drawing with a single loop? \n\n<img src=\"https://images.code.org/b0d15d06465d645c5ca533e5da6387b3-image-1446075597132.36.04.png\"
        width=\"350px\"/>"
      Course 4 SCFL 7: "**For-Loops Super Challenge:** The artist wants to catch some
        waves! Can you figure out how to re-create this drawing? \n\n<img src=\"https://images.code.org/fba3423f2e9a405d4d3859de32cdb0f3-image-1446102880655.13.36.png\"
        width=\"350px\"/>"
      Course 4 SCV 1: |-
        <img src="https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png" width="250px"/>

        **Variables Super Challenge:** You've now learned everything you need to know to make a pattern like this! This puzzle is meant to be difficult.  Can you stick with it until you figure out the solution?
      Course 4 SCV 2: |-
        <img src="https://images.code.org/85f0b27009edd86eff78692004b9ed52-image-1444712655590.02.32.png" width="250px"/>

        **Variables Super Challenge:** You've now learned everything you need to know to make a pattern like this! This puzzle is meant to be difficult.  Can you stick with it until you figure out the solution?
      Course 4 SCV 3: |-
        **Variables Super Challenge:** You've now learned everything you need to know to solve this puzzle! This game is meant to be difficult.  Can you stick with it until you figure out the solution?

        * * *

        Now for a game of tag!  Tag Cat to get 2 points. Tag Penguin to get 3 points.  Get exactly 10 points to win!
        But be careful, when Cat and Penguin tag each other, they take points away.

        **Add the blocks necessary to make this game work the way it's been explained.**

        -   **How will you get Dog to move in all directions using the arrow keys?**
        -   **How will you add points when Dog tags Cat or Penguin?**
        -   **How will you subtract points when Cat and Penguin touch?**
      Course 4 SCV 4: "**Variables Super Challenge:** Solve this puzzle with the fewest
        number of blocks possible."
      Course 4 SCV 5: "**Variables Super Challenge:** Solve this puzzle with the fewest
        number of blocks possible."
      Course 4 SCV 6: "<img src=\"https://images.code.org/499fc71a0a06bacb68a9789ad57f8148-image-1445574373673.16.44.png\"
        width=\"250px\"/>\n\n**Variables Super Challenge:** You've now learned everything
        you need to know to make a pattern like this! This puzzle is meant to be difficult.
        \ Can you stick with it until you figure out the solution?  "
      CourseD_Dance_Party_01: |-
        _Los geht‘s mit der Tanzparty!_

        Ziehen Sie den Block "einen Neuen erstellen" in den Arbeitsbereich, und verbinden Sie ihn mit dem "Setup" -Block, um Ihren ersten Tänzer zu erstellen.

        -   _Sie können auch auf die Glühbirne links klicken, wenn Sie weitere Informationen oder zusätzliche Herausforderungen möchten._
      CourseD_Dance_Party_02: |-
        Lassen Sie den Elch tanzen!

        Ziehen Sie den Block <xml><block type="Dancelab_changeMoveLR"><title name="SPRITE">new\_dancer</title><title name="MOVE" config="MOVES.Dab, MOVES.Drop, MOVES.Floss">Floss</title><title name="DIR">-1</title></block></xml> in den Arbeitsbereich. Verbinden Sie ihn unterhalb des Blocks <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">4</title><title name="UNIT">"Takte"</title></block></xml>. Ihr Tänzer sollte nach dem vierten Takt mit einem neuen Tanzschritt beginnen.

        **Takte** sind die zeitliche Struktur von Musik. In diesem Tutorial ist ein Takt vier Schläge lang.
      CourseD_Dance_Party_03: |-
        _Jetzt grooven wir!_

        Füge einen Block <xml><block type="Dancelab_atTimestamp" block-text="after 6 measures"><title name="TIMESTAMP">6</title><title name="UNIT">"measures"</title></block></xml> zu deinem Arbeitsbereich hinzu. Lasse den Tänzer nach 6 Takten einen neuen Tanzschritt beginnen.
      CourseD_Dance_Party_04: |-
        _Dieser Tanz braucht etwas Pep!_

        Suchen Sie in Ihrer Toolbox nach einem neuen Block, der Ihrem Tänzer einen Hintergrundeffekt hinzufügt. Beobachten Sie, wie sich die Effekte passend zur Musik verändern.
      CourseD_Dance_Party_05: |-
        Verwende einen weiteren Block, um die Bewegung deines Tänzers **alle 2 Takte** ändern zu lassen!

        -   Wähle `(Nächster)`, `(Vorhergehend)`, oder `(Zufällig)` um dem Tänzer mitzuteilen eine andere Bewegung auszuführen, jedesmal wenn dein Code läuft.
      CourseD_Dance_Party_06: |-
        _Wir brauchen noch mehr Tänzer!_

        Erstelle einen Backup-Tänzer namens `backup_dancer1`, der mit der Katze tanzt.
      CourseD_Dance_Party_08: |-
        Jeder Tänzer hat eine Reihe von _Eigenschaften_, die steuern, wie er aussieht.

        Sie können es aussehen lassen, als befinde sich der Tänzer im Hintergrund, indem Sie seine _Größe_ kleiner machen. Können Sie beide Backup-Tänzer gleich groß machen?
      CourseD_Dance_Party_09: |-
        Tänzer haben eine "Farbton" -Eigenschaft, mit der man eine Farbschicht hinzufügen kann. Versuchen Sie, den Farbton eines Ihrer Tänzer zu verändern.

        -   Farbtöne mischen die gewählte Farbe mit den Farben des Tänzers.
      CourseD_Dance_Party_10: |-
        Jetzt wissen wir, wie wir die Eigenschaften eines Tänzers ändern. Mit diesem Block können wir dafür sorgen, dass immer die gleichen Eigenschaften automatisch auf die Musik reagieren:
        <xml>
        <block type="Dancelab_startMapping">

        <title name="SPRITE">right_pineapple</title>
        <title name="PROPERTY">"scale"</title>
        <title name="RANGE">"bass"</title>
        </block></xml>

        Dieses Programm verwendet den "Bass" (die tiefen Töne) der Musik, um die Höhe eines Tänzers zu kontrollieren. Können Sie die anderen Tänzer auch auf die Musik reagieren lassen?
      CourseD_Dance_Party_11: |-
        Mit dem Block <xml><block type="Dancelab_whenKey"></block></xml> können Sie Code ausführen, wenn die Pfeiltaste nach oben gedrückt wird.

        Sie können den Tanzschritt verändern, die Eigenschaften eines Tänzers verändern oder einen schnellen einmaligen Tanzschritt tun. Seien Sie kreativ und halten Sie Ausschau nach neuen Blöcken!
      CourseD_Dance_Party_11_5: |-
        Schaue dir diesen Baustein an:

        <xml>
          <block type="Dancelab_makeNewDanceSpriteGroup" block-text="Make 6 new ducks in a circle">
            <title name="N">6</title>
            <title name="COSTUME">"DUCK"</title>
            <title name="LAYOUT">"circle"</title>
          </block></xml>

        Jetzt kannst du eine ganze Reihe von Tänzern auf einmal erstellen!

        Verwende einige der "alle Enten"-Bausteine, um Code zu schreiben, der alle Enten gemeinsam tanzen lässt.
      CourseD_Dance_Party_11b: Es ist Zeit für einen Tanz-Wettbewerb! Die Katze dabt,
        wenn Sie die linke Pfeiltaste drücken. Lassen Sie den Roboter "droppen", indem
        Sie die rechte Pfeiltaste drücken.
      CourseD_Dance_Party_12: Groove los! Erstelle einen eigenen Tanz und teile ihn
        mit deinen Freunden.
      CourseE_HOC 2018 Level_1: Du benötigst für deine Reise Vorräte. Sammle ein **Boot**
        ![](https://images.code.org/0b3162de9dc0abf3e0890d315b8cc699-image-1538697977747.png)
        aus der **Truhe** ein![](https://images.code.org/e0cf43fd36a50dd16ee06595047bfd8f-image-1538697999418.png).
      CourseE_HOC 2018 Level_10: Irgendwo in diesem Ozeanmonument versteckt sich ein
        **Tintenfisch** ![](https://images.code.org/82f305ab1cb4a9ff9044991a18edb16e-image-1538947827218.png).
        Findest du ihn?
      CourseE_HOC 2018 Level_11: Baue eine Mauer aus **Prismarin** ![](https://images.code.org/d110b8d13c01756fcdbef3768b2e2859-image-1538699770898.png)
        um den schwarzen Beton. Dies aktiviert den **Aquisator** ![](https://images.code.org/7773cf30f42e6727a23c8cb364d4664b-image-1538699800030.png)
        und schließt die Herausforderung ab!
      CourseE_HOC 2018 Level_2: Boote sind viel bequemer, als im offenen Wasser zu
        schwimmen! Begib dich zum Ende des Anlegestegs, um an Bord zu gehen.
      CourseE_HOC 2018 Level_3: Schnapp dir die Ruder und fahre auf das offene Meer,
        um den **Kabeljau** zu fangen![](https://images.code.org/9b636884eefb1efe18f9f844e1e916a9-image-1538698597353.png).
      CourseE_HOC 2018 Level_4: Füttere den **dolphin** mit dem Kabeljau![](https://images.code.org/8c240fd4df4da2795ba7ca942b77a057-image-1538947890991.png).
        Verwende einen "Wiederholen"-Block, um den Ozean schneller zu überqueren.
      CourseE_HOC 2018 Level_5: Irgendwo ist eine **Nautilusmuschel** ![](https://images.code.org/2eb084fa0c718dee6ca4b6379381f735-image-1538698936660.png)
        versteckt! Erkunde das Schiffswrack, um die **Truhe** zu erreichen![](https://images.code.org/16cdd5779b38909d4bf47b29535c92b0-image-1538698950602.png).
      CourseE_HOC 2018 Level_6: Sieht kalt aus! Fange auf dem Weg zu den Unterwasserruinen
        einen **Lachs** ![](https://images.code.org/c66eadf25b3cdfe20bbfdc91e2c28c94-image-1538699000102.png).
      CourseE_HOC 2018 Level_7a: Du hast die Unterwasserruine gefunden. Suche im Sandstein
        nach eine **Truhe** ![](https://images.code.org/29a5fd76b869d755a60d39fbbb4057eb-image-1538699081910.png)
        mit **Prismarin** ![](https://images.code.org/5f5ebe5121b8f9787d7dbd38ad0a86cc-image-1538699091018.png).
      CourseE_HOC 2018 Level_8: Erst Eisberge, nun Lava? Durchquere diese Vulkaninsel,
        und finde die **Tropenfische** ![](https://images.code.org/6d3293e7709cb1a43d9f7617fd0cc2b8-image-1538699180397.png)
        im Korallenriff.
      CourseE_HOC 2018 Level_9b: Du hast das Riff erreicht. Suche jetzt nach dem **Herz
        des Meeres** ![](https://images.code.org/3035926d2a37aa695b5d47413adcffa2-image-1538699398781.png)!
        Verwende blaue und rote Korallen, um die Schatz**truhe** zu erreichen![](https://images.code.org/af697397dd70e5b6b93b00eb46c558af-image-1538699377397.png).
      Crack Random Substitution: |-
        # Breche eine zufällige Substitutions-Verschlüsselung auf!

        Diese Version des Tools bietet Dir mehr Informationen über den verschlüsselten Text und mehr Möglichkeiten, wie Du verschiedene Substitutionen ausprobieren kannst.

        ### Verschiedene Möglichkeiten, Text zu analysieren

        -   Spiele mit einigen der Sortieroptionen, die auf der Registerkarte Zufällige Verschlüsselung verfügbar sind, um verschiedene Ansichten über die Häufigkeiten der Buchstaben im Eingabetext sowie im englischen Standardtext zu erhalten.
            ![](https://images.code.org/82efbca1807206c9a07de520fdb22027-image-1443572614493.23.28.png)

        ### Unterschiedliche Möglichkeiten der Substitution

        -   Um einen Buchstaben zu ersetzen, kannst Du einen blauen Buchstaben des Alphabets direkt unter den orangefarbenen Buchstaben ziehen, den Du im ursprünglichen Chiffriertext ändern möchtest.
            ![](https://images.code.org/da9a7af7568d8c1698872ab91b4d79d7-image-1443572471212.gif)

        ### Spielen.  Immer spielen.

        -   Es gibt andere Möglichkeiten, Zeichen zu analysieren und zu ersetzen, die Du finden kannst, indem Du auf die Schaltflächen klickst und ausprobierst, was immer Du möchtest.
        -   Denke daran: Du kannst es nicht brechen :)

        Schau, wie lange Du brauchst, um die Verschlüsslung zu knacken! Ist dies eine gute Methode, um geheime Daten zu verschlüsseln?

        <img src="http://code.org/api/hour/finish_encryption.png">
      Crack a Caesar Cipher: |-
        # Knacke eine Caesar-Verschlüsslung!

        Mit diesem Tool kannst Du mit Text spielen und eine Caesar-Verschlüsselung verwenden. Du kannst damit eine Nachricht entweder verschlüsseln oder entschlüsseln.

        # Mache Folgendes

        -   Lade eine **Beispielnachricht** aus dem Dropdown-Menü der Nachricht. Dadurch wird eine Nachricht geladen, die mit einer Caesar-Verschlüsselung verschlüsselt wurde.

        ![](https://images.code.org/347139486c8c729bf3c6e72ce67da878-image-1476286380409.gif)

        -   Mit den Schaltflächen auf der Registerkarte Caesar-Ersetzung kannst Du das Alphabet vorwärts oder rückwärts verschieben, um zu versuchen, die Nachricht zu entschlüsseln.

        ![](https://images.code.org/ef9ebc16d2f1442dc46fba9bd48b5d43-image-1476285966821.gif)

        Schau, wie lange Du benötigst, um die Verschlüsselung zu knacken! Ist dies eine gute Methode, um geheime Daten zu verschlüsseln?

        <img src="http://code.org/api/hour/begin_encryption.png">
      Dance Party 1-validated: "**Mache eine Vorhersage:** Hier ist ein Fee die wir
        `Alien1` getauft haben! \n\nWas denkst du wird passieren, wenn du darauf klickst?
        \ "
      Dance Party 2: |-
        Auf Mars war der Alien auf seine Tanzfertigkeiten stolz, aber hier kann er sich nur von Seite zu Seite bewegen.

        Kannst du das Verhalten im <xml> <block type="gamelab_addBehaviorSimple" inline="true">
              <value name="SPRITE">
                <block type="sprite_variables_get">
                  <title name="VAR">alien1</title>
                </block>
              </value>
            </block></xml>-Block verändern, sodass er anfängt sich im Kreis zu drehen?
      Dance Party 2_2019: |-
        Der Außerirdische war stolz auf seine Tanzkunst auf dem Mars, aber jetzt kann er sich nur noch von einer Seite zur anderen bewegen.

        Ersetze den Baustein zum Verhalten in<xml>
        <block type="gamelab_addBehaviorSimple" block-text="the sprite begins block">
                <value name="SPRITE">
                  <block type="gamelab_allSpritesWithAnimation">
                    <title name="ANIMATION">"blue alien"</title>
                  </block>
                </value>
              </block></xml> durch einen anderen, der den Außerirdischen zum Drehen bringt!
      Dance Party 3: |-
        Erstelle eine neue Fee namens 'Alien2'.

        Lasse sie eine andere Tanzbewegung ausführen, wenn du darauf klickst.
      Dance Party 3_2019: |-
        Erstelle ein neues Sprite, das wie ein rosa Alien aussieht. <img src="https://levelbuilder-studio.code.org/media?u=https%3A%2F%2Flevelbuilder-studio.code.org%2Fapi%2Fv1%2Fanimation-library%2FecnW7rdKTB0fUrKRKrqIHbrHVvyWh5hu%2Fcategory_characters%2FalienPink.png" width="3%"></img>

        Lasse es jede beliebige Bewegung ausführen, wenn es angeklickt wird. Versuche es diesmal mit einer neuen Bewegung!
      Dance Party 4: "Erstelle jetzt eine dritte Fee namens 'Alien3'.  \n\nKannst
        du all deine Aliens so einstellen, dass sie in einer geraden Linie stehen?
        Dies ist eine Alien Tanzgemeinschaft!"
      Dance Party 4_2019: "Bildet eine außerirdische Tanzcrew! \n\n-   Erstelle ein
        drittes Sprite, das wie ein gelber Außerirdischer aussieht, und lass es eine
        Tanzbewegung beginnen, wenn es angeklickt wird.\n-   Stelle alle deine Aliens
        so ein, dass sie in einer horizontalen Linie stehen, so wie hier:\n\n![](https://images.code.org/09380fc01069e79d9d33a979379a666b-image-1555960752137.png)"
      Dance Party 5: "Wir können die verschiedensten Dinge in diesem Programm verändern,
        wenn du auf eine Fee klickst. Lass uns deren Farbe verändern! \n\n**Füge Code
        hinzu, sodass die Farbe eines jeden Aliens verändert, wenn man darauf klickt.**"
      Dance Party 5_2019: "<!-- Wir können alle möglichen Dinge in diesem Programm
        ändern, wenn du auf die Sprites klickst. Füge Code hinzu, um die Farbe jedes
        Aliens zu ändern, wenn er angeklickt wird. -->\n\nLasse uns mit einer anderen
        Veranstaltung weitermachen. \n\nErstelle ein einzelnes Tastendruckereignis
        mit <xml><block type=\"gamelab_keyPressed\" block-text=\"the keypress event
        block\"></block></xml>. \n\nFür dieses Ereignis solltest du es so gestalten,
        dass beim Drücken einer Taste jeder deiner Außerirdischen seine Farbe wechselt!
        Wähle eine beliebige Taste. Wenn du einen Touchscreen verwendest, empfehlen
        wir _up_, _down_, _left_ oder _right_."
      Dance Party 6: "Diese Aliens fangen an sich wie wild zu benehmen!  \n\nBenutze
        den <xml><block type=\"gamelab_removeAllBehaviors\" inline=\"true\">\n      <value
        name=\"SPRITE\"/>\n    </block></xml>-Block, sodass jeder Alien aufhört sich
        zu bewegen, wenn man darauf klickt."
      Dance Party 6_2019: |-
        Diese Außerirdischen werden verrückt! Beruhigen wir sie, indem wir eine Glocke läuten.

        Füge zuerst ein neues Sprite hinzu, das wie eine Glocke aussieht.

        Dann füge ein Ereignis hinzu, das jeden Außerirdischen zum Tanzen bringt, wenn die Glocke angeklickt wird, und zwar mit <xml><block type="gamelab_removeAllBehaviors" block-text="the stops everything block"><value name="SPRITE"><block type="gamelab_allSpritesWithAnimation"><title name="ANIMATION">"blue alien"</title></block></value></block></xml>!
      Dance Party 7: |-
        Und schlussendlich, füge eine neue Glockenfee namens 'myBell' hinzu.

        Wenn du darauf klickst, werden alle Aliens anfangen dieselbe Tanzbewegung auszuführen!
      Dance Party 7_2019: "Für den rosa Außerirdischen ist der Spaß ansteckend! Wer
        ihn berührt will tanzen! \n\nBenutze <xml><block type=\"gamelab_checkTouching\"
        block-text=\"the when touching event block\"><title name=\"CONDITION\">\"when\"</title><value
        name=\"SPRITE1\"><block type=\"gamelab_allSpritesWithAnimation\"><title name=\"ANIMATION\">\"blue
        alien\"</title></block></value><value name=\"SPRITE2\"><block type=\"gamelab_allSpritesWithAnimation\"><title
        name=\"ANIMATION\">\"pink alien\"</title></block></value></block></xml>, damit
        der blaue Außerirdische eine neue Tanzbewegung beginnt, wenn der rosa Außerirdische
        ihn berührt."
      Dance Party Freeplay: |-
        Erstelle jetzt deine eigene Alien-Disco! Suchst du nach Inspiration? Dann versuche diese Ideen:

        -   Stelle zwei Glockenfeen her, und lasse jede davon die Aliens eine andere Tanzbewegung ausführen
        -   Lasse die Aliens eine neue Tanzbewegung ausführen, jedes Mal wenn sie miteinander in Kontakt kommen
      Dance Party Freeplay_2019: |-
        Erstelle jetzt deine eigene Alien-Disco! Auf der Suche nach Inspiration? Probiere diese Ideen aus:

        -   Erstelle einen anderen Außerirdischen, der eine weitere Bewegung ausführt, wenn er angeklickt wird.
        -   Lasse Außerirdische mehr Tanzbewegungen machen, wenn sie sich berühren.
      Dance Party Predict: "**Mache eine Vorhersage:** Hier ist eine Fee die wir `Alien1`
        getauft haben! \n\nWas denkst du wird passieren, wenn du darauf klickst?"
      Dance Party Predict_2019: "**Mache eine Vorhersage:** Hier ist ein Sprite, das
        wie ein blauer Außerirdischer aussieht!   \n\nWas wird deiner Meinung nach
        passieren, wenn du darauf klickst?  "
      Dance_2019_01: "_Lass uns eine Tanzparty veranstalten!_\n\nZiehe den <xml><block
        type=\"Dancelab_makeAnonymousDanceSprite\" block-text=\"make a new dancer\"><title
        name=\"COSTUME\" config=\"&quot;CAT&quot;, &quot;PINEAPPLE&quot;\">\"CAT\"</title><title
        name=\"LOCATION\">{x: 200, y: 200}</title></block></xml> in den Arbeitsbereich
        und verbinde ihn innerhalb des <xml><block type=\"Dancelab_whenSetup2\" next_connection_disabled=\"true\"
        block-text=\"setup\"></block></xml> Blocks, um Deinen ersten Tänzer zu erstellen.
        \n\n-   _Du kannst auch auf die Glühbirne auf der linken Seite klicken, wenn
        Du weitere Informationen benötigst oder zusätzliche Herausforderungen hinzufügen
        möchtest._"
      Dance_2019_02: |-
        Mit dem Block <xml><block type="Dancelab_whenKey" block-text="when up pressed"></block></xml> kannst Du Code ausführen, wenn Du den Pfeil nach oben drückst. Verwende den <xml><block type="Dancelab_doMoveEachLR" block-text="do once"><title name="GROUP">"CAT"</title><title name="MOVE">MOVES.XClapSide</title><title name="DIR">-1</title></block></xml> Block, um die Tänzerin klatschen zu lassen, wenn Du den Pfeil nach oben drückst, oder probiere eine andere Bewegung aus!
        _Achte darauf, den Pfeil nach oben oder ![](<https://images.code.org/419e704e6841c0b696016bf5029b8cb9-image-1571864825506.06.45 PM.png>) zu drücken, nachdem Du die Schaltfläche Ausführen angeklickt hast!_
      Dance_2019_03: Es ist Zeit für einen Tanzwettbewerb! Programmiere jeden Tänzer
        so, dass er sich bewegt, wenn Du verschiedene Tasten drückst. Wähle für jeden
        Tänzer Deine Lieblingsbewegung aus oder stellen sie auf etwas völlig Unvorhersehbares
        "(Random)“ ein!
      Dance_2019_04: "Bringe die Tänzer dazu, sich im Takt der Musik zu bewegen! \n\nZiehe
        den<xml><block type=\"Dancelab_atTimestamp\"><title name=\"TIMESTAMP\">4</title><title
        name=\"UNIT\">\"measures\"</title></block></xml> Block auf den Arbeitsbereich.
        Verbinde ihn unter dem <xml><block type=\"Dancelab_changeMoveEachLR\"><title
        name=\"GROUP\">\"SHARK\"</title><title name=\"MOVE\">MOVES.ThisOrThat</title><title
        name=\"DIR\">-1</title></block></xml> block. DeinTänzer sollte nach dem vierten
        Takt eine neue Bewegung beginnen. \n\n**Takte** werden verwendet, um die Zeit
        in der Musik zu zählen. In diesem Tutorial besteht ein Takt aus vier Schlägen."
      Dance_2019_05: |-
        _Jetzt grooven wir!_

        Füge einen <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">6</title><title name="UNIT">"measures"</title></block></xml> Baustein zu Deinem Arbeitsbereich hinzu. Lasse den Tänzer nach 6 Takten einen neuen Tanzschritt beginnen.
      Dance_2019_06: "Verwende diesen neuen Block, um eine Gruppe kleinerer Hintergrundtänzer
        um einen Haupttänzer in der Mitte herum zu erstellen.\n  <xml><block type=\"Dancelab_makeNewDanceSpriteGroup\">\n
        \   <title name=\"N\">???</title>\n    <title name=\"COSTUME\" config=\"&quot;BEAR&quot;,
        &quot;CAT&quot;, &quot;FROG&quot;, &quot;PINEAPPLE&quot;, &quot;SHARK&quot;,
        &quot;UNICORN&quot;, &quot;SLOTH&quot;\">???</title>\n    <title name=\"LAYOUT\">\"circle\"</title>\n
        \ </block></xml> \nJetzt kannst Du mehrere Tänzer auf einmal erstellen!"
      Dance_2019_07: |-
        Jeder Tänzer hat eine Reihe von _Eigenschaften_, die steuern, wie er aussieht.

        Verwende <xml><block type="Dancelab_setPropEach" block-text="the set block"><title name="GROUP" config="sprites, &quot;BEAR&quot;, &quot;CAT&quot;, &quot;DUCK&quot;, &quot;FROG&quot;, &quot;PINEAPPLE&quot;, &quot;SHARK&quot;, &quot;UNICORN&quot;, &quot;SLOTH&quot;">???</title><title name="PROPERTY">"scale"</title><title name="VAL">???</title></block></xml> unter einem grünen Ereignisblock, um Tänzer näher oder weiter weg erscheinen zu lassen.
      Dance_2019_08: Tänzer haben eine "Farb"-Eigenschaft, mit der eine Farbschicht
        hinzufügt werden kann. Versuche, den Farbton eines Deiner Tänzer (oder einer
        ganzen Gruppe) zu ändern!
      Dance_2019_09: "Dies ist eine besondere Art von Ereignis, das immer wieder ausgelöst
        wird.\n\n <xml><block type=\"Dancelab_everySeconds\"><title name=\"N\">2</title><title
        name=\"UNIT\">\"measures\"</title></block></xml> \n\nDie anderen neuen Blöcke
        in Ihrer Toolbox ermöglichen es Dir, die Eigenschaften der Tänzer im Laufe
        der Zeit schrittweise (oder zufällig!) zu ändern. \n_Sei kreativ und habe
        Spaß dabei!_"
      Dance_2019_10: Groove los! Erstelle einen eigenen Tanz und teile ihn mit Deinen
        Freunden.
      Dance_Party_01: |-
        _Los geht‘s mit der Tanzparty!_

        Ziehe den Block "mache ein neues" in den Arbeitsbereich, und verbinde ihn mit dem "Setup" -Block, um Deinen ersten Tänzer zu erstellen.

        -   _Du  kannst auch auf die Glühbirne links klicken, wenn Du weitere Informationen oder zusätzliche Herausforderungen möchtest._
      Dance_Party_02: |-
        Lasse den Elch tanzen!

        Ziehe den Baustein <xml><block type="Dancelab_changeMoveLR"><title name="SPRITE">new&#95;dancer</title><title name="MOVE" config="MOVES.Dab, MOVES.Drop, MOVES.Floss">Floss</title><title name="DIR">-1</title></block></xml> in den Arbeitsbereich. Verbinde ihn unterhalb des Bausteins <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">4</title><title name="UNIT">"measures"</title></block></xml>. Dein Tänzer sollte nach dem vierten Takt mit einem neuen Tanzschritt beginnen.

        **Takte** sind die zeitliche Struktur von Musik. In diesem Tutorial ist ein Takt vier Schläge lang.
      Dance_Party_03: |-
        _Jetzt grooven wir!_

        Füge einen <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">6</title><title name="UNIT">"measures"</title></block></xml> Baustein zu Deinem Arbeitsbereich hinzu. Lasse den Tänzer nach 6 Takten einen neuen Tanzschritt beginnen.
      Dance_Party_04: |-
        _Dieser Tanz braucht etwas Pep!_

        Suchen in deiner Toolbox nach einem neuen Block, der DeinemTänzer einen Hintergrundeffekt hinzufügt. Beobachte, wie sich die Effekte passend zur Musik verändern.
      Dance_Party_05: |-
        Verwende einen weiteren Block, um die Bewegung deines Tänzers **alle 2 Takte** ändern zu lassen!

        -   Wähle `(Nächster)`, `(Vorhergehend)`, oder `(Zufällig)` um dem Tänzer mitzuteilen eine andere Bewegung auszuführen, jedesmal wenn dein Code läuft.
      Dance_Party_06: |-
        _Wir brauchen noch mehr Tänzer!_

        Erstelle einen Hintergrund-Tänzer namens "backup\_dancer1", der mit der Katze tanzt.
      Dance_Party_08: |-
        Jeder Tänzer hat eine Reihe von _Eigenschaften_, die steuern, wie er aussieht.

        Du kannst es aussehen lassen, als befände sich der Tänzer im Hintergrund, indem Du ihn _kleiner_ machst. Kannst Du beide Backup-Tänzer gleich groß machen?
      Dance_Party_09: |-
        Tänzer haben eine "Farbton" -Eigenschaft, mit der man eine Farbschicht hinzufügen kann. Versuche, den Farbton eines DeinerTänzer zu verändern.

        -   Farbton mischt die gewählte Farbe mit den Farben des Tänzers.
      Dance_Party_10: |-
        Jetzt wissen wir, wie wir die Eigenschaften eines Tänzers ändern. Mit diesem Block können wir dafür sorgen, dass immer die gleichen Eigenschaften automatisch auf die Musik reagieren:
        <xml>
          <block type="Dancelab_startMapping">
            <title name="SPRITE">right_unicorn</title>
            <title name="PROPERTY">"scale"</title>
            <title name="RANGE">"bass"</title>
          </block></xml>

        Dieses Programm verwendet den "Bass" (die tiefen Töne) der Musik, um die Höhe eines Tänzers zu kontrollieren. Kannst Du die anderen Tänzer auch auf die Musik reagieren lassen?
      Dance_Party_11: |-
        Mit dem <xml><block type="Dancelab_whenKey"></block></xml> Baustein kannst du Code ausführen, wenn die Pfeiltaste nach oben gedrückt wird.

        Du kannst den Tanzschritt verändern, die Eigenschaften eines Tänzers verändern oder einen schnellen einmaligen Tanzschritt tun. Sei kreativ und halte Ausschau nach neuen Blöcken!
      Dance_Party_11_5: |-
        Schau dir diesen Block an:

        <xml>
          <block type="Dancelab_makeNewDanceSpriteGroup">
            <title name="N">6</title>
            <title name="COSTUME">"DUCK"</title>
            <title name="LAYOUT">"circle"</title>
          </block></xml>

        Nun kannst du mehrere Tänzer auf einmal erstellen!

        Versuche die "Alle Enten"-Bausteine zu nutzen, um Code zu erstellen, welcher die Enten zusammen tanzen lässt.
      Dance_Party_11b: Es ist Zeit für einen Tanz-Wettbewerb! Die Katze tupft, wenn
        Du die linke Pfeiltaste drückst. Lasse den Roboter "droppen", indem Du die
        rechte Pfeiltaste drückst.
      Dance_Party_12: Groove los! Erstellen einen eigenen Tanz und teilen ihn mit
        Deinen Freunden.
      Dance_Party_extras_alternate_2019: |-
        # Hin und her!

        Manchmal möchtest du vielleicht ein Muster von Tanzbewegungen erstellen, die du wählst. Mit diesem neuen Baustein kannst du genau das tun.

        <xml><block type="Dancelab_alternateMoves"><title name="GROUP">sprites</title><title name="N">2</title><title name="MOVE1">MOVES.Roll</title><title name="MOVE2">MOVES.ClapHigh</title></block></xml>

        Die oben gewählten Züge werden sich für immer wiederholen.

        -   Erstelle eine abwechselnde Routine für die Leadtänzerin an der Front!
        -   Verwende verschiedene Zahlen, um die Geschwindigkeit zu ändern, mit der sich die Bewegungen abwechseln. Versuche `1` oder `0.5`, um schneller zu wechseln!
      Dance_Party_extras_battle: |-
        # Tanz-Crews

        Hier ist ein Tanzduell zwischen zwei Crews. Die Pfeiltasten steuern einen der Tänzer und die Tasten „w, a, s, d“ steuern den anderen. Liefere dir ein Tanzduell mit einem Freund, und versuche dann, dieses Tanzduell zu verbessern.

        -   Füge weitere Tasten zum Steuern der Tänzer hinzu
        -   Bringe die Backup-Tänzer dazu, ebenfalls zu reagieren, wenn die Tasten betätigt werden
        -   Wechsle die Tänzer nach jeweils 4 Takten durch das Festlegen ihrer Sichtbarkeit
      Dance_Party_extras_battle_2019: |-
        # Tanz-Crews

        Hier ist ein Tanzduell zwischen zwei Crews. Die Pfeiltasten steuern einen der Tänzer und die Tasten „w, a, s, d“ steuern den anderen. Liefere dir ein Tanzduell mit einem Freund, und versuche dann, dieses Tanzduell zu verbessern.

        -   Füge weitere Tasten zum Steuern der Tänzer hinzu
        -   Bringe die Backup-Tänzer dazu, ebenfalls zu reagieren, wenn die Tasten betätigt werden
        -   Wechsle die Tänzer nach jeweils 4 Takten durch das Festlegen ihrer Sichtbarkeit
      Dance_Party_extras_every_beat: |-
        # Viertelnoten

        Für die meisten unserer Tänze wurden ganze Takte verwendet, aber jeder Takt setzt sich aus 4 Viertelnoten zusammen. Für diesen Tanz werden „alle 0,25 Takte“ verwendet, um den Tänzer bei jeder Viertelnote zum Klatschen zu bringen.

        Für diesen Tanz wird auch ein _vorbehaltlicher_Block verwendet, um zu kontrollieren, wann der „alle 0,25 Takte“-Block den Tanz ändern kann. Versuche, die Zahlen in dem vorbehaltlichen Block zu ändern, um zu sehen, wie es den Tanz verändert.

        -   Experimentiere mit anderen Tondauern (wie 0,5 für eine halbe Note oder 0,125 für eine Achtelnote).
        -   Füge einige Events „nach dem Takt“ hinzu.
        -   Tausche „Takte“ und „Sekunden“ und versuche, deine Tänze auf diese Weise zeitlich abzustimmen.
      Dance_Party_extras_every_beat_2019: |-
        # Viertelnoten

        Die meisten unserer Tänze haben ganze Takte verwendet, aber jeder Takt besteht aus 4 Viertelnoten. Dieser Tanz verwendet <xml><block type="controls_if"><value name="IF0"><block type="logic_compare"><title name="OP">LT</title><value name="A"><block type="Dancelab_getTime"><title name="UNIT">"measures"</title></block></value><value name="B"><block type="math_number"><title name="NUM">5</title></block></value></block></value><statement name="DO0"></statement></block></xml>, um die Tänzerin auf jede Viertelnote klatschen zu lassen, aber nur für die ersten 4 Takte.

        Versuche, die Zahlen in den Blöcken zu ändern, um zu sehen, wie es den Tanz verändert.

        -   Experimentiere mit anderen Notenlängen (z. B. 0,5 für eine Halbe Note oder 0,125 für eine Achtelnote).
        -   Füge weitere Ereignisse hinzu.
      Dance_Party_extras_layout: |-
        # Nehmen wir die Formation ein!

        Schaue dir diesen Tanz an, der den „Layout“-Block verwendet, um die Formation der Backup-Tänzer während des Tanzes zu ändern. Probiere eine dieser Ideen aus, um ihn zu verlängern:

        -   Erstelle eine zweite Gruppe von Tänzern in einem anderen Layout
        -   Ändere das Layout, wenn eine Taste gedrückt wird
        -   Ändere eine Eigenschaft, wenn die Tänzer ihre Formation ändern
      Dance_Party_extras_layout_2019: |-
        # Let's Get in Formation!

        Schau dir diesen Tanz an, der den <xml><block type="Dancelab_layoutSprites" block-text="layout"><title name="GROUP">"MOOSE"</title><title name="FORMAT">???</title></block></xml> Baustein verwendet, um die Formation der Backup-Tänzer während des gesamten Tanzes zu ändern. Probiere eine dieser Ideen aus, um sie zu erweitern:

        -   Erstellung einer zweiten Gruppe von Tänzern in einem anderen Layout
        -   Layout ändern, wenn eine Taste gedrückt wird
        -   Ändern einer Eigenschaft, wenn die Tänzer die Formation wechseln
      Dance_Party_extras_mixed_2019: |-
        # Mehr Interaktion

        Mit diesem Tanz kannst du die Eigenschaften der Tänzer in Echtzeit steuern, während sie automatisch tanzen. Versuche, andere Eigenschaften zu ändern, wenn du die Tasten drückst. Zum Beispiel:

        -   Randomisiere den Farbton der Tänzerin, wenn du "runter" drückst.
        -   Füge eine Gruppe von Tänzern mit einem zufälligen Layout hinzu, wenn du "space" drückst.
      Dance_Party_extras_on_beat: |-
        # Bass, Mitten und Höhen

        Dieser Tanz verwendet Pegelspitzen-„Peak“-Ereignisse, um den Code auszulösen, wenn verschiedene Teile der Musik laut werden. Versuche, mit verschiedenen Liedern herumzuexperimentieren, um zu sehen, wie sie den Tanz verändern.
      Dance_Party_extras_on_beat_2019: |-
        # Bass, Mitten und Höhen

        Dieser Tanz verwendet Pegelspitzen-„Peak“-Ereignisse, um den Code auszulösen, wenn verschiedene Teile der Musik laut werden. Versuche, mit verschiedenen Liedern herumzuexperimentieren, um zu sehen, wie sie den Tanz verändern.
      Dance_Party_extras_speed: |-
        # Beschleunigen, verlangsamen

        Dieser letzte Tanz nutzt den Block „festgelegte Geschwindigkeit“, um zu kontrollieren, wie schnell sich jeder Tänzer bewegt. Versuche, an verschiedenen Stellen im Lied mit unterschiedlichen Geschwindigkeiten zu experimentieren. Zögere nicht, bei diesem Tanz herumzuexperimentieren oder kehre zu einem der bisherigen Tänze zurück, um ihn noch cooler zu machen.
      Dance_Party_extras_speed_2019: |-
        # Beschleunigen, verlangsamen

        Dieser letzte Tanz nutzt den <xml><block type="Dancelab_setDanceSpeedEach"><title name="GROUP">"SHARK"</title><title name="SPEED">2</title></block></xml> Baustein, um zu kontrollieren, wie schnell sich jeder Tänzer bewegt. Versuche, an verschiedenen Stellen im Lied mit unterschiedlichen Geschwindigkeiten zu experimentieren. Zögere nicht, bei diesem Tanz herumzuexperimentieren oder kehre zu einem der bisherigen Tänze zurück, um ihn noch cooler zu machen.
      Dance_Party_extras_visible: |-
        # Wo würden sie hingehen?

        Dieser Tanz blendet zwei verschiedene Gruppen von Tänzern ein und aus. Sieh ihn dir an und versuche dann, dein eigenes Flair hinzuzufügen.

        -   Füge eine weitere Gruppe von Tänzern hinzu
        -   Blende Tänzer mithilfe der Pfeiltasten ein- und aus
        -   Blende alle der Tänzer aus und wechsle zu einem spannenden Hintergrundeffekt
      Dance_Party_extras_visible_2019: |-
        # Wo würden sie hingehen?

        Dieser Tanz blendet zwei verschiedene Gruppen von Tänzern ein und aus. Sieh ihn dir an und versuche dann, dein eigenes Flair hinzuzufügen.

        -   Füge eine weitere Gruppe von Tänzern hinzu
        -   Blende Tänzer mithilfe der Pfeiltasten ein- und aus
        -   Blende alle der Tänzer aus und wechsle zu einem spannenden Hintergrundeffekt
      Escape Room Example: |-
        # Room Escape

        In dem heutigen Workshop wirst du daran arbeiten, eine Room-Escape-App zu entwickeln!  Dieses Level hat eine Beispiel-App, mit der du herumspielen solltest, um ein Gefühl dafür zu bekommen, was du erschaffen kannst.

        # Mache Folgendes

        -   Klicke auf "▶ AUSFÜHREN", um die App zu starten.
        -   Versuche den Schlüssel zu finden, der die Tür öffnet.
      Final Personal Website: |-
        # Persönliche Website

        Das ist es! Du hast die gesamte Einheit  über an deiner persönlichen Website gearbeitet. Gib ihr den letzten Schliff und schicke sie an deinen Lehrer! Denken daran, den Problemlösungsprozess als Leitfaden bei der Vorbereitung Deines Endprodukts zu verwenden.

        # Mache folgendes

        -   Definiere: Lesen die Rubrik, damit du weißt, was erwartet wird.
        -   Plan: Entscheide, woran du noch arbeiten musst und ordne diese Dinge in der Reihenfolge ihrer Priorität
        -   Versuche es: Implementiere Deine Verbesserungen an Deiner persönlichen Website.
        -   Reflektieren: Hole Dir Feedback von einem Klassenkameraden und entscheide, was von diesem Feedback umgesetzt werden soll.

        Vergiss nicht, einen Screenshot von deiner Homepage zu machen und ihn irgendwo auf deinem Computer zu speichern, damit du ihn später wiederfinden kannst (_Benötigst du Hilfe bei der Erstellung des Screenshots? Schau Dir diese <a href="http://www.take-a-screenshot.org/">Webseite </a> an._)
      Final Personal Website_2018: |-
        # Persönliche Website

        Das ist es! Du hast an deiner persönlichen Website für die gesamte Einheit gearbeitet. Gib ihr den letzten Schliff und zeige sie deinem Lehrer! Denke daran, den Problemlösungsprozess als Leitfaden für die Vorbereitung deines Endprodukts zu verwenden.

        # Mach Folgendes

        -   Definieren: Lies die Rubrik, damit du weißt, was erwartet wird.
        -   Planen: Entscheide, woran du noch arbeiten musst, und lege diese Dinge in die richtige Reihenfolge.
        -   Versuche es: Implementiere die Verbesserungen auf Deiner persönlichen Website.
        -   Reflektieren: Hol dir Feedback von einem Klassenkameraden und entscheide, worauf du reagieren möchtest.

        Vergiss nicht, einen Screenshot von deiner Homepage zu machen und ihn irgendwo auf deinem Computer zu speichern, damit du ihn später finden kannst (*Brauchst du Hilfe bei der Erstellung eines Screenshot? Schau dir das an <a href="http://www.take-a-screenshot.org/" target="_new">Website </a>.*)
      Final Personal Website_2019: |-
        # Persönliche Website

        Das ist es! Du hast an deiner persönlichen Website für die gesamte Einheit gearbeitet. Gib ihr den letzten Schliff und zeige sie deinem Lehrer! Denke daran, den Problemlösungsprozess als Leitfaden für die Vorbereitung deines Endprodukts zu verwenden.

        # Mach Folgendes

        -   Definieren: Lies die Rubrik, damit du weißt, was erwartet wird.
        -   Planen: Entscheide, woran du noch arbeiten musst, und lege diese Dinge in die richtige Reihenfolge.
        -   Versuche es: Implementiere die Verbesserungen auf Deiner persönlichen Website.
        -   Reflektieren: Hol dir Feedback von einem Klassenkameraden und entscheide, worauf du reagieren möchtest.

        Vergiss nicht, einen Screenshot von deiner Homepage zu machen und ihn irgendwo auf deinem Computer zu speichern, damit du ihn später finden kannst (*Brauchst du Hilfe bei der Erstellung eines Screenshot? Schau dir das an <a href="http://www.take-a-screenshot.org/" target="_new">Website </a>.*)
      Final Room Escape App: "# Du hast es geschafft!\n\nDu hast einen Escape Room
        erstellt! Jetzt ist es an der Zeit, diesen anzupassen. \n\nZiehe in Betracht:\n\n-
        \  dem Raum mehr Stil zu geben\n-   weitere Dinge hinzuzufügen, mit denen
        Benutzer im Raum interagieren kann.\n-   versuche den Geheimcode zufällig
        zu machen.\n-   füge weiterer Räume hinzu"
      Fish Tank 1-validated: "**Mach eine Prognose**: Was wird deiner Meinung nach
        passieren, wenn du diesen Code ausführst?"
      Fish Tank 2-validated: "Lass uns einen Fischtank bauen! \n\n Verändere Dusty
        (das Tumbleweed) in einen Fisch."
      Fish Tank 2-validated_2019: "Lasst uns ein Aquarium bauen!  \n\nVerwandle das
        Ambrosia-Sprite in jede Art von Fisch, indem du auf <xml><block type=\"gamelab_allSpritesWithAnimation\"
        block-text=\"the sprite picker block\"><title name=\"ANIMATION\">\"tumbleweed\"</title></block></xml>
        klickst.\n\nAchte darauf, dass du auch das Kostüm dieses Sprites in <xml><block
        type=\"gamelab_addBehaviorSimple\" block-text=\"the add behavior block\"></block></xml>
        aktualisierst."
      Fish Tank 3-validated: "Der Fisch wird schwindelig!  \n\nÄndere das Verhalten
        des Fischs, sodass dieser in einem Tank herumschwimmt."
      Fish Tank 3-validated_2019: "Dem Fisch wird schwindelig! \n\nÄndere das Verhalten
        der Fische so, dass sie nach links und rechts schwimmen."
      Fish Tank 4-validated: "Unser Fischtank benötigt etwas Wasser! \n\nBenutze <xml><block
        type=\"gamelab_setBackground\" inline=\"true\">\n    <value name=\"COLOR\">\n
        \     <block type=\"colour_picker\">\n        <title name=\"COLOUR\">#0000ff</title>\n
        \     </block>\n    </value>\n  </block></xml>, um den Hintergrund blau zu
        machen."
      Fish Tank 4-validated_2019: "Unser Aquarium braucht etwas Wasser! \n\nVerwende
        <xml><block type=\"gamelab_setBackground\" inline=\"true\" block-text=\"the
        set background color block\">\n    <value name=\"COLOR\">\n      <block type=\"colour_picker\">\n
        \       <title name=\"COLOUR\">#0000ff</title>\n      </block>\n    </value>\n
        \ </block></xml>, um den Hintergrund in einer beliebigen Farbe darzustellen.
        Wir empfehlen blau!"
      Fish Tank 5-validated: Unser Fisch ist ein wenig einsam. Füge dem Aquarium einen
        weiteren Sprite hinzu.
      Fish Tank 5-validated_2019: Der Fisch ist abenteuerlustig und will neue Kreaturen
        im Meer treffen. Füge ein weiteres Sprite in das Aquarium hinzu. Dieses Sprite
        kann jedes andere Kostüm haben, außer dem, das du für deine Fische benutzt!
      Fish Tank 6-validated: "Was möchtest du, dass der neue Freund des Fischs tut?
        \n\nFüge ein Verhalten hinzu und siehe wie sie sich amüsieren!"
      Fish Tank 6-validated_2019: |-
        Was soll der neue Freund deines Fisches tun?

        Füge ein Verhalten hinzu und beobachte die Beiden!
      Fish Tank 7-validated: "Wir haben eine Menge neuer Blöcke in die Werkzeugkiste
        gelegt. \n\nSpiel mit ihnen, um dein Aquarium außergewöhnlich zu gestalten!"
      Fish Tank 7-validated_2019: "Wir haben eine Menge neuer Blöcke in die Werkzeugkiste
        gelegt. \n\nSpiel mit ihnen, um dein Aquarium außergewöhnlich zu gestalten!"
      Fish Tank Predict: "**Mach eine Prognose**: Was wird deiner Meinung nach passieren,
        wenn du diesen Code ausführst?"
      Fish Tank Predict_2019: "**Mach eine Prognose**: Was wird deiner Meinung nach
        passieren, wenn du diesen Code ausführst?"
      Frequency Analysis: |-
        # Knacke ein zufällige Substitutions-Verschlüsselung!

        Nachrichten, die mit der **Caesar-Verschlüsselung** verschlüsselt sind, lassen sich sehr leicht knacken. Was wäre, wenn wir, anstatt das ganze Alphabet zu verschieben, jeden Buchstaben des Alphabets auf einen anderen Buchstaben des Alphabets abgebildet hätten? Dies wird als **zufällige Substitutions-Verschlüsselung** bezeichnet.

        In dieser Version des Tools wirst du mehr mit den Diagrammen interagieren, die die Häufigkeit der Buchstaben anzeigen. Indem du die Häufigkeit der Buchstaben in der verschlüsselten Eingabemeldung im Vergleich zur Häufigkeit der Buchstaben in einem typischen Stück englischer Prosa analysierst, kannst du beginnen, dich darauf zu beschränken, was einige der Buchstabenzuordnungen sein könnten. Wusstest du, dass _'E'_ der am häufigsten verwendete Buchstabe in der englischen Sprache ist? Vielleicht ist daher auch der häufigste Buchstabe in Deinem verschlüsselten Texten ein _'E'_, aber vielleicht auch nicht! Du musst ein wenig raten und prüfen, ob diese Ersetzung Sinn macht.

        # Mache folgendes

        -   Lade die **Sample message (hard)** aus dem Dropdown-Menü der Nachricht. Dadurch wird eine Nachricht geladen, die mit einer zufälligen Ersetzungschiffre verschlüsselt wurde.
            ![](https://images.code.org/04c6230c9607110126581c298bc09183-image-1443569176380.gif)

        -   Du knackst die Nachricht knacken, indem du errätst, welcher Buchstaben des Alphabets im ursprünglichen Verschlüsselungstext geändert werden soll. Du kannst dies tun, indem du die blauen Buchstaben des Alphabets direkt unter den orangefarbenen Buchstaben ziehst, den du im ursprünglichen Verschlüsselungstext ändern möchtest. Buchstaben, die mit deiner Vermutungen geändert wurden, werden im Nachrichtenfenster links nicht mehr orange hervorgehoben.
            ![](https://images.code.org/da9a7af7568d8c1698872ab91b4d79d7-image-1443572471212.gif)

        -   Spiele mit einigen der Sortieroptionen, die auf der Registerkarte "Zufällige Ersetzung von Verschlüsselungen" verfügbar sind, um verschiedene Ansichten über die Häufigkeiten der Buchstaben im Eingabetext sowie im englischen Standardtext zu erhalten.
            ![](https://images.code.org/82efbca1807206c9a07de520fdb22027-image-1443572614493.23.28.png)

        Schau, wie lange du brauchst, um die Verschlüsselung zu knacken! Ist dies eine gute Methode, um geheime Daten zu verschlüsseln?
      Function intro Ryan: "In deinem Arbeitsbereich befindet sich eine **Funktion**
        namens \"Brücke bauen\".  Sie umfasst den gesamten Code, den du zum Überqueren
        des Flusses benötigst! \\\r\n \\\r\nDocke den kleinen, grünen Block zweimal
        in deinem Arbeitsbereich an, um den Weg zu reparieren und {currentPlayerName}
        zur Redstone-Fackel [redstone_torch] zu bringen."
      Function intro Ryan_2019: "In deinem Arbeitsbereich befindet sich eine **Funktion**
        namens \"Brücke bauen\".  Sie umfasst den gesamten Code, den du zum Überqueren
        des Flusses benötigst! \\\r\n \\\r\nDocke den kleinen, grünen Block zweimal
        in deinem Arbeitsbereich an, um den Weg zu reparieren und {currentPlayerName}
        zur Redstone-Fackel [redstone_torch] zu bringen."
      Gamelab StartScreen Change State: |-
        # Zustand ändern

        Da du jetzt je nach Zustand deines Programms einen anderen Bildschirm anzeigen kannst, brauchst du eine Möglichkeit, zwischen den Zuständen zu wechseln.  Um vom "start"-Zustand in den "playing"-Zustand zu wechseln, kannst du den Benutzer die "s"-Taste drücken lassen.  Du wirst **nur** wollen, dass das Programm nach dem Tastendruck sucht, wenn das Programm im "start"-Zustand ist, also wird dein Code dafür in die "start"-Bedingung gehen.  Einen \`if'-Baustein in einen anderen zu setzen, wird **verschachtelte Bedingung** genannt.

        ## Mache Folgendes

        -   Innerhalb der `if` Anweisung, die prüft, ob der Benutzer "startet", füge eine neue `if` Anweisung ein, die prüft, ob der Benutzer die "s"-Taste gedrückt hat.  (`if (TasteDown("s")) {`)
        -   Innerhalb deiner neuen `if` Anweisung, setze den Wert deiner `gameState` Variable auf "spielen". (`gameState = "spielen";`)
        -   Teste den Code, indem Du das Spiel startest und "s" drückst.  Das Spiel sollte nach dem Drücken der Taste starten.

        Wenn das Spiel nicht auf dem Startbildschirm startet, überprüfe, dass die `gameState` Variable zu Beginn des Programms erstellt wurde und ihr Wert "starting" ist.  (`var gameState = "starting";`)
      Gamelab StartScreen Check State: |-
        # Spielstatus überprüfen

        Nun, da du deinen Spielstatus in einer Variable gespeichert hast, kannst du ihn überprüfen, um zu bestimmen, was angezeigt werden soll.  Dies sollte innerhalb der Zeichenschleife geschehen, da es etwas ist, das sich während der Ausführung des Programms ändert.  Das Programm sollte prüfen, ob das Spiel im "Spiel"-Zustand ist, und das Programm nur dann ausführen, wenn dies der Fall ist.  Um die anderen Zustände können wir uns später kümmern.

        ## Mache Folgendes

        -   Innerhalb der Zeichenschleife füge eine Bedingung (`if` Anweisung) hinzu.
        -   Für die Bedingung, überprüfe, ob `gameState == "play"`.
        -   Verschiebe den Rest des Codes aus der draw-Schleife innerhalb der `if`-Anweisung, so dass er nur läuft, wenn das Spiel "spielt".
        -   Führe das Programm aus.  Es sollte nichts passieren, weil das Spiel noch im "Start"-Zustand ist.
        -   Gehe zurück zu der Stelle, an der du den Wert deiner `gameState` Variable gesetzt hast und ändere ihn von "starting" auf "playing".
        -   Lasse das Spiel erneut laufen, und es sollte normal spielen, da es sich jetzt im "Spiel"-Zustand befindet.
        -   Ändere den Wert der Variable wieder auf "starting".

        (Es ist wichtig, Wege zu finden, um deinen Code zu überprüfen, während du arbeitest, anstatt bis zum Ende vieler komplexer Änderungen zu warten, um ihn auszuführen.  Indem du sowohl den Spiel- als auch den Startzustand überprüfst, weißt du, dass deine Bedingung richtig funktioniert und dass das Spiel spielen sollte, während es sich im "Spiel"-Zustand befindet)
      Gamelab StartScreen Check States: |-
        # Überprüfe alle Zustände

        Im Moment ist der einzige Zustand, mit dem Dein Programm umgehen kann, das "Spielen", aber Du kannst weitere Bedingungen hinzufügen, um die anderen drei Zustände zu berücksichtigen.

        ## Mache Folgendes

        -   Innerhalb der Draw-Schleife füge drei weitere `if'-Anweisungen hinzu, die auf`gameState == "starting"`,`gameState == "won"`, und`gameState == "lost"\`, jeweils prüfen.
        -   Innerhalb jeder `if` Anweisung füge Code hinzu, der Text auf den Bildschirm zeichnet, so dass du die Ergebnisse der verschiedenen Zustände sehen kannst.  Du kannst auch `drawSprites` verwenden, damit du das Hintergrundbild und die Spieler-Sprites sehen kannst, aber stelle sicher, dass du den Text über die Sprites zeichnest.
        -   Überprüfe Deinen Code, indem Du das Programm in den verschiedenen Zuständen ausführst.  (Mache Dir noch keine Gedanken darüber, sie perfekt zu machen, stelle nur sicher, dass die Bedingungen so funktionieren, wie sie sollten).

        Um den Überblick über Deinen Code zu behalten, könntest Du es nützlich finden, eine Funktion für jede der verschiedenen Textanzeigen zu erstellen und dann diese Funktionen innerhalb der Bedingungen aufzurufen.
      Gamelab StartScreen End Game: |-
        # Das Spiel beenden

        Als nächstes musst du Code hinzufügen, der den Zustand des Spiels ändert, wenn du verlierst.   Scrolle bis zum Ende des Programms, bis zur Funktion `gameStatus`.  Innerhalb der Funktion kontrolliert das Programm den Spielstand und die `lives`-Variable, um zu prüfen, ob das Spiel gewonnen oder verloren ist.  Anstatt eine Gewinn- oder Verlustmeldung anzuzeigen, solltest du den Status des Spiels auf "won" (= gewonnen) oder "lost"  (= verloren) ändern;

        ## Mache Folgendes

        -   Innerhalb der `gameStatus` Funktion ersetze den Code `text("Du hast gewonnen!", 35, 200);` mit `gameState = "won"`.
        -   Innerhalb der `gameStatus` Funktion, ersetze den Code `text("Du hast verloren!", 35, 200);` mit `gameState = "lost"`.
        -   Überprüfe deinen Code, indem du das Spiel ausführst und verlierst.
        -   Überprüfe deinen Code, indem du das Spiel startest und gewinnst.

        (Um das Spiel viel einfacher zu gewinnen, ändere die ursprüngliche Anzahl der Leben auf 1000, indem Du `var lives = 3;` durch `var lives = 1000;` ersetzst.)
      Gamelab StartScreen Hide Sprites: |-
        # Verstecke und Zeige Sprites

        Du kannst es vorziehen, dass die Plattform, die Münze und die Rock-Sprites nur während des Spiels sichtbar sind.  Du kannst die Spieleinstellung ändern, um ihre sichtbare Eigenschaft zu Beginn des Spiels auf `false` zu setzen, dann auf `true`, wenn du das Spiel startest, dann wieder `false`, wenn das Spiel gewonnen oder verloren wird.

        ## Mache Folgendes

        -   Füge nach der Erstellung Ihrer Sprite-Gruppen "Plattformen", "Gold" und "Felsen" Code hinzu, der die sichtbaren Eigenschaften dieser Sprite-Gruppen auf "falsch" setzt (z.B. "platforms.setVisibileEach(false)"; "\`")
        -   An den gleichen drei Stellen, an denen du `gameState = "spielen";` setzt, setze die sichtbaren Eigenschaften der Sprite-Gruppen auf `true`.
        -   An den gleichen Stellen, an denen du `gameState = "lost";` und `gameState = "won";` setzt, setze die sichtbaren Eigenschaften der Sprite-Gruppen auf `true`.
        -   Überprüfe Deinen Code, indem Du das Spiel ausführen und das Spiel verlieren und neu starten.
        -   Überprüfe Deinen Code, indem Du das Spiel ausführst und gewinnst und das Spiel neu startest.
      Gamelab StartScreen Intro: |-
        # Start- und Endbildschirme

        Dieses Tutorial zeigt Dir, wie du Start- und Endbildschirme im Game Lab erstellst und das Spiel vom Endbildschirm aus neu gestarten werden kann.

        Drücke "Ausführen", um das Spiel auf der linken Seite zu spielen.  Befolge zum Abspielen die Anweisungen auf dem Startbildschirm.  Wenn das Spiel beendet ist, folge den Anweisungen auf dem Endbildschirm, um das Spiel neu zu starten.

        In der nächsten Textblase siehst du den Code für das Spiel. Beginne deinen eigenen Start- und Endbildschirme hinzuzufügen.

        ## Startbildschirm

        Der Startbildschirm ist der Einführungsbildschirm, der erscheint, bevor der Benutzer mit dem Spielen des Spiels beginnt.  Dieser enthält in der Regel den Titel des Spiels und einige grundlegende Anweisungen zum Spielen.  Es kann auch den Spieleentwickler nennen.

        ## Endbildschirm

        Der Endbildschirm erscheint, nachdem der Benutzer das Spiel gewonnen oder verloren hat.  Es beinhaltet manchmal die Punktezahl, eine Highscore oder andere Informationen.  Es kann auch eine Option haben, das Spiel erneut zu spielen.
      Gamelab StartScreen Restart Game: |-
        # Das Spiel neu starten

        Zuletzt musst Du einen Code hinzufügen, der das Spiel neu startet.   Dies ist ähnlich wie beim Start des Spiels, bei dem der Benutzer die "s"-Taste drückt.  Dieses Mal musst du während der Zustände "lost" und "won" nachsehen.  Wenn der Benutzer die "r" Taste während eines dieser Zustände drückt, solltest Du das Spiel neu starten, indem Du den `gameState` auf "playing" setzt und auch die `score` und `lives` Variablen auf 0 bzw. 3 zurücksetzt.

        ## Mache Folgendes

        -   Füge innerhalb der `if (gameState == "lost") {` Anweisung eine if-Anweisung hinzu, die prüft, ob der Benutzer die "r"-Taste gedrückt hat.
        -   Innerhalb deiner neuen `if` Anweisung, setze `score` auf 0, `lives` auf 3 und `gameState` auf "playing".
        -   Füge innerhalb der `if (gameState == "won") {` Anweisung eine if-Anweisung hinzu, die prüft, ob der Benutzer die "r"-Taste gedrückt hat.
        -   Innerhalb Deiner neuen `if` Anweisung setze `score` auf 0, `lives` auf 3 und `gameState` auf "playing".
        -   Innerhalb der `gameStatus` Funktion ersetzen Sie den Code `text("You Lost!", 35, 200);` mit `gameState = "lost"`.
        -   Überprüfe Deinen Code, indem Du das Spiel ausführst und verlierst und das Spiel neu startest.
        -   Überprüfe Deinen Code, indem Du das Spiel ausführst und gewinnst und das Spiel neu startest.
      Gamelab StartScreen State: |-
        # Spielstatus Variable

        Unser Beispielspiel hatte vier verschiedene Szenarien (oder **Zustände**, engl. "states"), die wir im Auge behalten müssen, um den richtigen Bildschirm anzuzeigen: "Starten", "Spielen", "Gewonnen" und "Verloren".  Der erste Schritt beim Hinzufügen eines Start- oder Endbildschirms zum Spiel ist das Erstellen einer Variable, um alle Änderungen des Spielzustands zu verfolgen.

        ## Mache Folgendes

        -   Deklariere eine Variable namens `gameState` am Anfang des Programms.  (Ein guter Ort, dies zu tun, wäre in der Nähe der Deklaration von `score` und `lives`.
        -   Setze den Anfangswert der `gameState` Variable auf "starting".

        (Da du diese Variable noch nicht verwendest, siehst du ein Warndreieck neben der Zeile, in der sie deklariert ist.  Es hat auch keinen Einfluss darauf, wie das Programm läuft.)
      Gamelab StartScreen base code: |-
        # Spielecode

        Dies ist der Code für das Spiel ohne den Start- und Endbildschirm.  Die Funktion `gameStatus` (aufgerufen auf Zeile 43 und definiert auf Zeile 208) prüft, ob der Benutzer gewonnen oder verloren hat, fügt aber nur eine Textnachricht auf dem Bildschirm hinzu.  Das Spiel wird auch nach dem Ende des Spiels fortgesetzt.

        ## Mache Folgendes

        Lies den Code, insbesondere den Code vor der Zeichnenschleife (Zeilen 1-24), innerhalb des Zeichnenschleife (Zeilen 27-43) und innerhalb der `gameStatus` Funktion (Zeilen 209-224).  Es ist in Ordnung, wenn Du nicht alles im Spiel verstehst, aber Du solltest sehen, dass der Code vor der Schleife die Sprites aufbaut, und der Code innerhalb der Schleife das Spiel steuert.
      Geometric Sun: "**Projektidee:** Erstelle ein Muster mit geometrischen Ideen
        wie Formen. Das erfordert Beharrlichkeit und Planung!"
      Geometric Sun_2018: "**Projektidee:** Erstelle ein Muster mit geometrischen
        Ideen wie Formen. Das erfordert Beharrlichkeit und Planung!"
      HOC 2018 Level_1: Du benötigst für deine Reise Vorräte. Sammle ein **Boot**
        ![](https://images.code.org/0b3162de9dc0abf3e0890d315b8cc699-image-1538697977747.png)
        aus der **Truhe** ein![](https://images.code.org/e0cf43fd36a50dd16ee06595047bfd8f-image-1538697999418.png).
      HOC 2018 Level_10: Irgendwo in diesem Ozeanmonument versteckt sich ein **Tintenfisch**
        ![](https://images.code.org/82f305ab1cb4a9ff9044991a18edb16e-image-1538947827218.png).
        Findest du ihn?
      HOC 2018 Level_11: Baue eine Mauer aus **Prismarin** ![](https://images.code.org/d110b8d13c01756fcdbef3768b2e2859-image-1538699770898.png)
        um den schwarzen Beton. Dies aktiviert den **Aquisator** ![](https://images.code.org/7773cf30f42e6727a23c8cb364d4664b-image-1538699800030.png)
        und schließt die Herausforderung ab!
      HOC 2018 Level_12: Glückwunsch! Die offene Meereswelt erwartet dich. Baue ein
        Korallenriff! Einen Vulkan! Ein Schiffswrack! Du hast die Wahl.
      HOC 2018 Level_2: Boote sind viel bequemer, als im offenen Wasser zu schwimmen!
        Begib dich zum Ende des Anlegestegs, um an Bord zu gehen.
      HOC 2018 Level_3: Schnapp dir die Ruder und fahre auf das offene Meer, um den
        **Kabeljau** zu fangen![](https://images.code.org/9b636884eefb1efe18f9f844e1e916a9-image-1538698597353.png).
      HOC 2018 Level_4: Füttere den **dolphin** mit dem Kabeljau![](https://images.code.org/8c240fd4df4da2795ba7ca942b77a057-image-1538947890991.png).
        Verwende einen "Wiederholen"-Block, um den Ozean schneller zu überqueren.
      HOC 2018 Level_5: Irgendwo ist eine **Nautilusmuschel** ![](https://images.code.org/2eb084fa0c718dee6ca4b6379381f735-image-1538698936660.png)
        versteckt! Erkunde das Schiffswrack, um die **Truhe** zu erreichen![](https://images.code.org/16cdd5779b38909d4bf47b29535c92b0-image-1538698950602.png).
      HOC 2018 Level_6: Sieht kalt aus! Fange auf dem Weg zu den Unterwasserruinen
        einen **Lachs** ![](https://images.code.org/c66eadf25b3cdfe20bbfdc91e2c28c94-image-1538699000102.png).
      HOC 2018 Level_7a: Du hast die Unterwasserruine gefunden. Suche im Sandstein
        nach eine **Truhe** ![](https://images.code.org/29a5fd76b869d755a60d39fbbb4057eb-image-1538699081910.png)
        mit **Prismarin** ![](https://images.code.org/5f5ebe5121b8f9787d7dbd38ad0a86cc-image-1538699091018.png).
      HOC 2018 Level_8: Erst Eisberge, nun Lava? Durchquere diese Vulkaninsel, und
        finde die **Tropenfische** ![](https://images.code.org/6d3293e7709cb1a43d9f7617fd0cc2b8-image-1538699180397.png)
        im Korallenriff.
      HOC 2018 Level_9b: Du hast das Riff erreicht. Suche jetzt nach dem **Herz des
        Meeres** ![](https://images.code.org/3035926d2a37aa695b5d47413adcffa2-image-1538699398781.png)!
        Verwende blaue und rote Korallen, um die Schatz**truhe** zu erreichen![](https://images.code.org/af697397dd70e5b6b93b00eb46c558af-image-1538699377397.png).
      InspirationalArtwork: "Du hast jetzt alles gelernt, was du wissen musst, um
        ein solches Muster zu erstellen! \n\nWenn dich dieses Bild inspiriert, versuche,
        etwas Ähnliches zu schaffen. Sonst kreiere etwas ganz Eigenes."
      InspirationalArtwork_2018: "Du hast jetzt alles gelernt, was du wissen musst,
        um ein solches Muster zu erstellen! \n\nWenn dich dieses Bild inspiriert,
        versuche, etwas Ähnliches zu schaffen. Sonst kreiere etwas ganz Eigenes."
      Intro to Web Lab - Part 1_2019: |-
        ## Zu berücksichtigende Frage:

        -   Was sind die verschiedenen Teile von Web Lab und wofür werden sie verwendet?
      Intro to Web Lab - Part 2_2019: |-
        ## Zu berücksichtigende Fragen

        -   Warum sind HTML-Tags nützlich?
        -   Was bewirkt das Absatz-Tag?
      Introduction to Variables - Part 1_2019: |-
        ## Zu berücksichtigende Fragen

        -   Wozu werden Variablen verwendet?
        -   Wie erstellt man eine Variable und weist ihr einen Wert zu?
        -   Was kann in eine Variable aufnehmen?
      K-1 Bee Loops 2: Benutze eine `wiederhole`-schleife, um dich zu bewegen, und
        dann nimm den Nektar und mache Honig!
      K-1 Bee Loops 3: Verwenden Sie drei `wiederhole`-Schleifen, um den Nektar zu
        erhalten und Honig zu machen!
      K-1 Bee Loops 4: Verwende `wiederhole`-Schleifen, um den Nektar zu erhalten,
        Honig zu machen und dich zu bewegen!
      K-1 Bee Loops 5: Verwende „Wiederhole"-Schleifen, um den Nektar und den Honig
        zu sammeln.
      K-1 Bee Loops 6: Benutze eine `wiederhole`-Schleife, um den Nektar zu bekommen,
        Honig zu bekommen und dich zu bewegen!
      K-1 Maze Loops 10: Bringt mich zum Schwein!\\ Die Verwendung der `Wiederhole`-Schleife
        macht es viel einfacher.
      K-1 Maze Loops 11: |-
        Bring mich zum Schwein!\
        Mit der „Wiederholen“-Schleife geht es leichter.
      K-1 Maze Loops 12: |-
        Bring mich zum Schwein!\
        Mit der „Wiederholen“-Schleife geht es leichter.
      K-1 Maze Loops 2: Benutze die “Wiederholen"-Schleife, um mich zum Schwein zu
        bringen.
      K-1 Maze Loops 3: |-
        Bring mich zum Schwein!\
        Achte darauf `wiederhole`-Schleifen zu verwenden.
      K-1 Maze Loops 5: |-
        Bring mich zum Schwein!\
        Achte darauf `wiederhole`-Schleifen zu verwenden.
      K-1 Maze Loops 6: |-
        Bring mich zum Schwein!\
        Achte darauf `wiederhole`-Schleifen zu verwenden.
      K-1 Maze Loops 7: |-
        Bring mich zum Schwein!\
        Achte darauf `wiederhole`-Schleifen zu verwenden.
      K-1 Maze Loops 8: Benutze `Wiederhole`-Schleifen, um mich zum Schwein zu bringen.
      K-1 Maze Loops Assessment 1: |-
        Sieh dir an, was wir alles gelernt haben!\
        Benutze eine `Wiederhole` Schleife, um mich zum Schwein zu bringen!
      MC HOC 2016 SCORE LEVEL: |-
        Bei einigen Spielen kann man den Punktestand verfolgen. Spiele mit diesen Eisernen Golems Fangen und benutze den <xml>  <block type="craft_addScore">
            <title name="SCORE">1</title>
          </block></xml>-Baustein, um Dir selbst einen Punkt zu geben, wenn du diese berührtst.

        Erreiche fünf Punkte, um zu gewinnen!
      MC_HOC_2017_01_RETRY: "{currentPlayerName} ist im Haus gefangen. Der Agent steht
        jedoch zur Hilfe bereit!   \\\r\n \\\r\n   \\\r\nDocke im Arbeitsbereich einen
        \"vorwärts bewegen\"-Block unter dem \"beim Ausführen\"-Block ein, um den
        Agenten auf die Druckplatte [PressurePlate_Up] zu bringen. Wähle dann \"Ausführen\"
        aus und verwende die Pfeiltasten, um {currentPlayerName} aus dem Haus zu bewegen
        und die **Truhe** [chest] einzusammeln.  "
      MC_HOC_2017_01_RETRY_2019: "{currentPlayerName} ist im Haus gefangen. Der Agent
        steht jedoch zur Hilfe bereit!   \\\r\n \\\r\n   \\\r\nDocke im Arbeitsbereich
        einen \"vorwärts bewegen\"-Block unter dem \"beim Ausführen\"-Block ein, um
        den Agenten auf die Druckplatte [PressurePlate_Up] zu bringen. Wähle dann
        \"Ausführen\" aus und verwende die Pfeiltasten, um {currentPlayerName} aus
        dem Haus zu bewegen und die **Truhe** [chest] einzusammeln.  "
      MC_HOC_2017_02_Cole: "{currentPlayerName} geht auf Abenteuertour! Hol die **Karte**
        [map_empty] hinter der verschlossenen Tür rechts. \\\r\n \\\r\nDocke Code
        im Arbeitsbereich an, um den Agenten auf die Druckplatte zu bewegen [PressurePlate_Up],
        damit {currentPlayerName} durchkann. "
      MC_HOC_2017_02_Cole_2019: "{currentPlayerName} geht auf Abenteuertour! Hol die
        **Karte** [map_empty] hinter der verschlossenen Tür rechts. \\\r\n \\\r\nDocke
        Code im Arbeitsbereich an, um den Agenten auf die Druckplatte zu bewegen [PressurePlate_Up],
        damit {currentPlayerName} durchkann. "
      MC_HOC_2017_03_Cole: "{currentPlayerName} setzt sein Abenteuer fort und benötigt
        den **Kompass** [compass], um sich auf die Reise vorzubereiten.  \\\r\n   \\\r\nProgrammiere
        den Agenten, um das Tor zu öffnen. "
      MC_HOC_2017_03_Cole_2019: "{currentPlayerName} setzt sein Abenteuer fort und
        benötigt den **Kompass** [compass], um sich auf die Reise vorzubereiten.  \\\r\n
        \  \\\r\nProgrammiere den Agenten, um das Tor zu öffnen. "
      MC_HOC_2017_04POINT5_RYAN: "Du bist drüben! \\\r\n\\\r\nBringe {currentPlayerName}
        jetzt sicher durch das Labyrinth, um die **Axt** [diamond_axe] einzusammeln.\\\r"
      MC_HOC_2017_04POINT5_RYAN_2019: "Du bist drüben! \\\r\n\\\r\nBringe {currentPlayerName}
        jetzt sicher durch das Labyrinth, um die **Axt** [diamond_axe] einzusammeln.\\\r"
      MC_HOC_2017_04_Cole: "Der Agent kann sich über Wasser bewegen!  \\\r\n \\\r\nVerwende
        eine \"wiederholen\"-Schleife, um diese Aufgabe zu lösen und {currentPlayerName}
        den **Eimer** [bucket_empty] hinter der Tür holen zu lassen. "
      MC_HOC_2017_04_Cole_2019: "Der Agent kann sich über Wasser bewegen!  \\\r\n
        \\\r\nVerwende eine \"wiederholen\"-Schleife, um diese Aufgabe zu lösen und
        {currentPlayerName} den **Eimer** [bucket_empty] hinter der Tür holen zu lassen. "
      MC_HOC_2017_05_Cole: "Oh nein! Die Brücke ist kaputt! \\\r\n\\\r\nProgrammiere
        den Agenten mit dem \"platzieren\"-Block, um die Brücke neu zu bauen. Dann
        kann {currentPlayerName} die **Schaufel** [diamond_shovel] erreichen."
      MC_HOC_2017_05_Cole_2019: "Oh nein! Die Brücke ist kaputt! \\\r\n\\\r\nProgrammiere
        den Agenten mit dem \"platzieren\"-Block, um die Brücke neu zu bauen. Dann
        kann {currentPlayerName} die **Schaufel** [diamond_shovel] erreichen."
      MC_HOC_2017_06_Cole: "Noch ein Fluss. Aber dieser ist viel breiter! \\\r\n \\\r\nÄndere
        den Code, damit der Agent eine Brücke baut. Dann kann {currentPlayerName}
        die **Spitzhacke** [diamond_pickaxe] erreichen. "
      MC_HOC_2017_06_Cole_2019: "Noch ein Fluss. Aber dieser ist viel breiter! \\\r\n
        \\\r\nÄndere den Code, damit der Agent eine Brücke baut. Dann kann {currentPlayerName}
        die **Spitzhacke** [diamond_pickaxe] erreichen. "
      MC_HOC_2017_07_Cole: "Da ist Eis im Weg!  \\\r\n \\\r\nDie \"Weg räumen\"-Funktion
        hilft dir dabei, das Eis zu zerstören und {currentPlayerName} zur Lore [minecart_normal]
        zu bringen! "
      MC_HOC_2017_07_Cole_2019: "Da ist Eis im Weg!  \\\r\n \\\r\nDie \"Weg räumen\"-Funktion
        hilft dir dabei, das Eis zu zerstören und {currentPlayerName} zur Lore [minecart_normal]
        zu bringen! "
      MC_HOC_2017_10_RETRY: "Siehst du den Unterschied zwischen den beiden Funktionen
        im Arbeitsbereich? \\\r\n \\\r\nVerwende die Funktionen und anderen Code aus
        der Werkzeugkiste, um einen Pfad für die Lore zu räumen und dann das **Feuerzeug**
        [flint_and_steel] einzusammeln. \\\r\n "
      MC_HOC_2017_10_RETRY_2019: "Siehst du den Unterschied zwischen den beiden Funktionen
        im Arbeitsbereich? \\\r\n \\\r\nVerwende die Funktionen und anderen Code aus
        der Werkzeugkiste, um einen Pfad für die Lore zu räumen und dann das **Feuerzeug**
        [flint_and_steel] einzusammeln. \\\r\n "
      MC_HOC_2017_Ali: 'Sieh dir die Funktionen unten an. Wie kannst du diese verwenden,
        um die Ghasts zu vermeiden und {currentPlayerName} beim sicheren Erreichen
        des **Zauberbuchs** [book_enchanted] zu helfen?  '
      MC_HOC_2017_Ali_2019: 'Sieh dir die Funktionen unten an. Wie kannst du diese
        verwenden, um die Ghasts zu vermeiden und {currentPlayerName} beim sicheren
        Erreichen des **Zauberbuchs** [book_enchanted] zu helfen?  '
      MC_HOC_2017_FP20x20: "**Freies Spiel:** Jetzt bist du dran! Verwende den Code
        des Agenten, um die Welt zu erkunden."
      MC_HOC_2017_FP20x20_2019: "**Freies Spiel:** Jetzt bist du dran! Verwende den
        Code des Agenten, um die Welt zu erkunden."
      Making Music: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      Making Music_2018: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      Making Music_2019: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      NEW Course 4 Artist Functions 1: Can you draw a square that is 100 pixels in
        length, using a repeat loop?
      NEW Course 4 Artist Functions 11: "Now we want to create a new function called
        `draw a line of squares` that draws six squares all in a row.  \n\nCan you
        build this function using this `draw a square 20` function that we created
        for you?\n<br/><br/>\n\n_Note: See that we've changed the pen to be much thinner.
        Click \"edit\" on the `draw a square 20` function to see how!_"
      NEW Course 4 Artist Functions 12: Use the `draw a line of squares` function
        from the last puzzle to draw this pattern.
      NEW Course 4 Artist Functions 13: "Can you draw a star shape using the `draw
        a line of squares` function?  \n\n(Be sure to `move forward` 60 pixels before
        you turn 144 degrees!)"
      NEW Course 4 Artist Functions 14: Es ist Freispielzeit! Zeichne was immer du
        willst!
      NEW Course 4 Artist Functions 2: "Can you draw 3 squares 20 pixels apart from
        one another? \n\nEach square is 100 pixels in size."
      NEW Course 4 Artist Functions 3: "Here is a new type of Block. It is called
        a `function` block. Click \"edit\" then fill it with the code for drawing
        a square with 100 pixel sides. \n\nWhen you're done editing the function,
        click \"Close\" to go back to your program."
      NEW Course 4 Artist Functions 4: 'Benutze die Funktion `Zeichne ein Quadrat`,
        um dieses Muster zu zeichnen. '
      NEW Course 4 Artist Functions 7: "Are you getting the hang of how to use function
        blocks? Let's modify `draw a square` so that it draws squares that are 200
        pixels in size. \n\nClick on \"edit\" to enter the `draw a square` function
        editor.\n\nRemember to click on \"Close\" to get out of the function editor. "
      NEW Course 4 Artist Functions 8: We have created a new function for you called
        `draw a triangle`.  Can you edit the function definition to draw a triangle
        with 100 pixel sides?
      NEW Course 4 Artist Functions 9: Kannst du das lösen, indem du nur einen Baustein
        hinzufügst?
      NEW Course 4 Artist Params 1: Let's define this function to draw a square with
        50 pixel sides. Click "edit" to get started.
      NEW Course 4 Artist Params 10: "Create a `draw a hexagon` function block with
        a length parameter. \n\nThis hexagon has sides that are 100 pixels in length."
      NEW Course 4 Artist Params 11: "Can you figure out how to draw this shape? \n\nEdit
        the function to use the `sides` parameter."
      NEW Course 4 Artist Params 12: "Can you complete this drawing? \n\nThe sides
        of all the shapes are 100 pixels long."
      NEW Course 4 Artist Params 12a: "This image is similar to the last.  \n\nCan
        you use a `for` loop with your function to make this design?"
      NEW Course 4 Artist Params 13: "Let's edit this `draw a polygon` function. \n\nIt
        already has a `sides` parameter. Now, let's add a `length` parameter. \n\nThe
        perimeter of each shape is 200 pixels. Do you remember the equation to make
        shapes the same size when they have a different number of sides?"
      NEW Course 4 Artist Params 14: "Edit `draw a spiral edge` to use `length` and
        `sides` parameters, then recreate these shapes.\n\n-   The smallest side length
        of the square is 5 pixels.\n-   The smallest side length of the triangle is
        10 pixels.\n-   The smallest side length of the hexagon is 2 pixels.\n-   All
        increase to 100 pixels.  "
      NEW Course 4 Artist Params 15: "**Freeplay:** Here are the functions you've
        written, and some more for you to play with. Play with the pen width to see
        how different your drawings look!"
      NEW Course 4 Artist Params 2: Erstelle eine Funktion „Zeichne ein Dreieck“ mit
        einer Seitenlänge von 50 Pixeln von Grund auf.
      NEW Course 4 Artist Params 3: "Now let's use the function to draw 5 triangles
        in a row. \n\nEach triangle is 30 pixels apart."
      NEW Course 4 Artist Params 4: Do you notice anything different about these function
        blocks? Click “Run” to see what happens.
      NEW Course 4 Artist Params 5: "Replace the `???` in the `length` parameter input
        block. \n\nThe pentagon has 100 pixel sides."
      NEW Course 4 Artist Params 6: "Fill in the `length` parameter to draw these
        shapes by replacing the `???` with the right numbers.  \n\nThe square and
        triangle have 100 pixel sides.\\\nThe hexagon sides are 75 pixels long. "
      NEW Course 4 Artist Params 7: "Can you complete this drawing? \n\nThe sides
        of each triangle are 25 pixels larger than the last.\\\nThe first triangle
        has 25 pixel sides."
      NEW Course 4 Artist Params 8: "The code for this triangle function is broken.
        \n\nCan you edit the function to fix it, and then make triangles of length
        25, 50, and 75?"
      NEW Course 4 Artist Params 9: "Click \"edit\" to fill in the function definition
        of `draw a square` and add a parameter.\\\nIt should take a length parameter
        just like the triangle. \n\n**This time, draw 3 squares:** 25, 50 and 75 pixels
        in length. The lefthand corners are each 100 pixels away from the last."
      NEW Course 4 Artist Params inspire: "<img src=\"https://images.code.org/1df195df9d808f0dd539bef0f5c2958b-image-1443049871563.02.54.png\"
        width=\"250px\"/>\n\n**Free-Play Inspiration:** You've now learned everything
        you need to know to make a pattern like this! \n\nIf this picture inspires
        you, try to make something similar. Otherwise, create something all your own.\n\nNotice:
        We've used the `set alpha` block to make the \"petals\" fade toward the outside."
      NEW Course 4 Artist Vars 12: Schreibe den Algorithmus vom letzten Level noch
        mal und erstelle ein Fünfeck mit einer Seitenlänge von 150.
      NEW Course 4 Artist Vars 2: Ziehe je einen Zahlenbaustein zum Baustein `Länge
        einstellen` und zum Baustein `wiederhole ___ Male`, um diese 50-Pixel-Dreiecke
        zu zeichnen.
      NEW Course 4 Artist Vars 4: 'Probieren wir es noch einmal. Kannst du die Variable
        „Länge“ so einstellen, dass dieses coole Design aus Sechsecken entsteht? Hinweis:
        Es ist ein Vielfaches von 10.'
      NEW Course 4 Artist Vars 6: 'Zeichne dieses Muster, indem du die Längenvariable
        an die richtigen Stellen setzt und dann den richtigen Wert für die Länge eingibst.
        (Hinweis: Es ist ein Vielfaches von 10).So braucht man die Länge nur an einer
        Stelle zu setzen - und der Code verwendet den richtigen Wert an jeder Stelle!'
      NEW Course 4 Bee For Loops 10a: |-
        Bereit für eine Herausforderung?  Löse das Problem mit deinen bisherigen Kenntnissen über Schleifen. <br><br>
        Hinweis: Wahrscheinlich brauchst du mehrere Durchläufe, bis alles richtig funktioniert.
      NEW Course 4 Bee For Loops 2: |-
        Ergänze den nötigen Code, um sicherzustellen, dass die Biene den gesamten Nektar sammelt. <br><br>
        Schau, wie viel Code du für diese Aufgabe benötigst! (In der nächsten Aufgabe lernen wir eine einfachere Methode.)
      NEW Course 4 Bee For Loops 3: 'Ah, die `Zähle mit`-Schleife macht dies viel
        einfacher! Alles, was du benötigst, steht schon da. Schau dir an, wie die
        Anweisungen zusammengesetzt sind und führe das Programm aus, um zu sehen,
        wie es funktioniert. '
      NEW Course 4 Bee For Loops 4: 'Ersetze die ??? in der `Zähle mit`-Schleife mit
        der größten Menge an Nektar, den die Biene sammeln muss. '
      NEW Course 4 Bee For Loops 4 4: Jetzt müssen wir uns `Zähler`-mal vorwärtsbewegen,
        dann `Zähler`-mal Nektar sammeln. Schaffst du dieses Level mit zwei `Wiederhole`-Schleifen?
      NEW Course 4 Bee For Loops 5: Du kannst auch eine `Zähle mit`- Schleife zum
        Runterzählen verwenden. Versuche, den Nektar durch das Herunterzählen von
        5 bis 1 zu sammeln.
      NEW Course 4 Bee For Loops 6: |-
        Die letzte Zahl in deiner „Zähle mit“-Schleife ist die Schrittweite. Bei jedem Schleifendurchlauf wird der Zähler um die Schrittweite herauf- oder herabgesetzt. <br><br>
        Sammle die Blumen ein, indem du eine Schrittweite von 2 benutzt.
      NEW Course 4 Bee For Loops 7: |-
        Kombinieren wir jetzt die `Zähler`-Variable mit dem Mathe-Baustein! Wie kann man sich mit möglichst wenigen Bausteinen mithilfe der `Zähler`-Variable durch den Garten bewegen? <br><br>
        Wie kannst du 3, 6, 9, 12, 15 Portionen Nektar einsammeln? Die Lösung steckt in der `Zähler`-Variablen.<br><br>
        Hinweis: Wenn deine Schleife nach oben zählt, wird die Schrittweite bei jedem Durchlauf zu deinem `Zähler` dazugerechnet.
      NEW Course 4 Bee For Loops 8: "Du schaffst das! \n\nWie hoch sollte deine Schrittweite
        sein, um 3, 6, 9, 12, 15 Einheiten Nektar zu sammeln?"
      NEW Course 4 Play Lab Params 11: "It's free play time! Have fun with all the
        blocks in your tool box.\\\n<br/>\n\n<h5>\n<details>\n<summary><b>Need some
        ideas?</b></summary>\n\t<br>\n\t<h5>\n\t\t<ul>\n        \t<li><strong>Tag</strong>
        - Have character 2 patrol and use your arrow keys to make character 1 chase
        until they collide. </li>\n            <li><strong>Whack-a-Sprite</strong>
        - Have a character constantly pop up at a random location. Award points for
        clicking the sprite before it disappears. </li>\n            <li><strong>Best
        Guess</strong> - Make both characters disappear, change location to a random
        spot, then reappear as a random character.  Click on the first one and get
        a point...but if you click on the second one you LOSE a point! </li>\n        </ul>\n\t</h5>\n\n</details>\n</h5>"
      NetSim Standalone Automatic DNS: |-
        # Domain Name System (DNS)

        In this version of the Internet Simulator, a Domain Name System (DNS) is provided for you and knows the IP addresses of all connected computers. You can only see the hostnames of other connected computers.\
        ![](https://images.code.org/3ac2c23ed610abc7e785ec85054e89a9-image-1434746293690.PNG)

        The address of the DNS is always \<yourRouterNumber>.15. Send a message with protocol `GET [hostname]`, for example `GET Bob2`, to the DNS to get another student's address. You can keep track of the responses in the Notes section in the DNS tab.\
        ![](https://images.code.org/c81c1a6b876eb46674a7f7e5e70506ce-image-1434746797267.png)

        Your teacher will hand out more specific instructions for this activity.
      NetSim Standalone Broadcast: |-
        # Broadcast messages in the Internet Simulator

        In this version of the Internet Simulator, you can connect to up to 5 other people in a room. When you send messages in the room, everyone receives them. What are some of the challenges of this system, and how might you solve them?

        Your teacher will hand out more specific instructions for this activity.
      NetSim Standalone Classroom Routers: |-
        # Routing messages

        In this version of the Internet Simulator, everyone connects to a router and has a specific address. To send messages, you have to address your message to the specific address of the recipient, and the router will take care of delivering it to the right computer. If there are other routers created in your class, ask for the address of one of your classmates and send them a message! View the Log Router to see the path the messages have taken through the network.

        Your teacher will hand out more specific instructions for this activity.
      NetSim Standalone Freeplay: |-
        # Internet-Simulator-Freispiel

        In dieser Version des Internet-Simulators sind die meisten Optionen eingeschaltet und konfigurierbar. Nachrichten können an jeden Router innerhalb der Klasse gesendet werden, und die Nachrichten nehmen verschiedene Wege, um ihr Ziel zu erreichen.

        Dein Lehrer wird dir genauere Anweisungen für diese Aktivität geben.
      NetSim Standalone Manual DNS: |-
        # Introduction to DNS

        In this version of the simulator you can't see the other students' addresses.  Instead, one of you must act as a name service, to help share addresses with each other. From the DNS tab in the left column, one person can take over as DNS.

        Your teacher will hand out more specific instructions for this activity.
      NetSim Standalone Packets TCP: |-
        # Packets and Making a Reliable Internet

        Messages on the Internet can take many paths to get to their destination, and sometimes along the way the message gets dropped. In this version of the Internet Simulator:

        -   There is a 10% chance of a packet being dropped
        -   Multiple packets may take different paths to the destination
        -   The default max packet size is set to 6 additional characters

        Your teacher will hand out more specific instructions for this activity.
      NetSim Standalone SendAB: |-
        # Sending bits with the Internet Simulator

        You and your partner share a single wire that can only be in state A or state B. You can set the wire to either state at any time, and you can read the state of the wire at any time. Can you figure out a way to effectively communicate with just this system?

        Your teacher will hand out more specific instructions for this activity.
      NetSim Standalone Sending Numbers: "# Sending Numbers with the Internet Simulator\n\nYou
        and your partner can now reliably send messages back and forth without extra
        coordination! While you're always sending bits back and forth, you can also
        represent those bits as decimal numbers. What kinds of information can you
        represent with this system? \n\nYour teacher will hand out more specific instructions
        for this activity."
      NetSim Standalone Sending Numbers Ascii: "# Sending Text with the Internet Simulator\n\nNow
        that you've transmitted information represented as decimal numbers, you can
        map those numbers to text characters to send text-based information back and
        forth. With a text-based protocol, you can easily represent and communicate
        all kinds of information. \n\nYour teacher will hand out more specific instructions
        for this activity."
      New Minecraft Hero Project: "**Freies Spiel:** Jetzt bist du dran! Verwende
        den Code des Agenten, um die Welt zu erkunden."
      OPD-K5 CS Video: "## Getting Started: Why Computer Science (CS) Fundamentals?\n\nYou'll
        complete this free, self-paced course using the same learning platform you
        can use in your classroom with your students. \n\nLet's start by learning
        a bit about what Computer Science (CS) Fundamentals is, and how it's worked
        for teachers and students around the globe. In the next level, we'll cover
        how to interact with the CS Fundamentals learning platform, which you'll be
        using to complete this course.\n\n> ## Reflect\n>\n> What are your first impressions
        of CS Fundamentals?\n>\n> [Tweet your thoughts](https://twitter.com/teachcode)
        and be sure to tag @teachcode in your tweet so we can respond.\n>\n> <a href=\"http://ctt.ec/Bfjw3\"
        target=\"blank\">Share on Twitter >></a>\n>\n> Don't have a Twitter account?
        You can also find us on [Facebook](https://www.facebook.com/Code.org/) or
        [Instagram](https://www.instagram.com/codeorg/)."
      OPD-K5 CS Video_copy: "## Get to know CS Fundamentals\n\nLet's start by learning
        a bit about what Computer Science (CS) Fundamentals is, and how it has worked
        for teachers and students around the globe. "
      OPD-K5 Closing: |-
        > Wenn Ihnen dieser Kurs gefallen hat, melden Sie sich für einen persönlichen Workshop an.
        >
        > [Melden Sie sich jetzt an](http://code.org/professional-development-workshops), um weiterhin Informatik und ihre Didaktik zu lernen. Die kostenlosen persönlichen Workshops sind ein wertvoller Ort, um mit anderen leidenschaftlichen Pädagogen in Ihrer Nähe zusammenzuarbeiten und sich zu engagieren.
      OPD-K5 Closing_copy: |-
        > **If you enjoyed this course, sign up for an in-person workshop:**
        >
        > <a href="http://code.org/professional-development-workshops" target="blank">Sign up now</a> to continue learning computer science and its pedagogy. The free in-person workshops are a valuable place to collaborate and engage with other passionate educators in your area.
      OPD-K5 EventsVid: |-
        Sehen Sie sich dieses Video an, das "Ereignisse" definiert und zeigt, wie sie in den Informatik-Grundlagen funktionieren. Danach werden Sie einige Rätsel ausprobieren, bei denen Sie Ereignisse kodieren müssen.

        > Ein Ereignis ist eine Codezeile, die Ihren Computer anweist, auf etwas zu "hören" und dann eine Aktion durchzuführen. Zum Beispiel können Sie auf Webseiten oft ein Drop-Down-Menü anzeigen, wenn Sie mit der Maus über die Navigationsleiste fahren. Der "Maus-Rollover" ist ein "Ereignis", das eine Aktion auslöst.
      OPD-K5 FirstProgram: Sieh dir das Video unten an, das das allererste Programm
        erklärt, das junge Studenten in [Kurs A](https://studio.code.org/s/coursea-2018?section_id=2042045)
        schreiben werden. Auf der nächsten Seite kannst du ein ähnliches Programm
        selbst schreiben!
      OPD-K5 FirstProgram_copy: Watch the video below, which explains a program that
        young students will write in <a href="https://studio.code.org/s/coursea-2019"
        target="blank">Course A</a>. On the next page, you'll get to write a similar
        program of your own!
      OPD-K5 LessonPlanning: "Bis jetzt haben Sie einige unserer Unplugged-Stundenpläne
        kennengelernt. Es gibt jedoch für jede einzelne Informatik-Grundlagen-Lektion
        Unterrichtspläne - sowohl plugged als auch online. Die vollständige Liste
        der Lektionen für jeden Kurs finden Sie unten:\n<br/>\n<br/> \n[Course A lesson
        plans](https://curriculum.code.org/csf-18/coursea/)<br/> \n[Course B lesson
        plans](https://curriculum.code.org/csf-18/courseb/)<br/>\n[Course C lesson
        plans](https://curriculum.code.org/csf-18/coursec/)<br/> \n[Course D lesson
        plans](https://curriculum.code.org/csf-18/coursed/)<br/> \n[Course E lesson
        plans](https://curriculum.code.org/csf-18/coursee/)<br/> \n[Course F lesson
        plans](https://curriculum.code.org/csf-18/coursef/)<br/> \n\nVielleicht möchten
        Sie diese Lektionen jedoch anpassen oder Ihre eigenen erstellen! Das Video
        unten erklärt die Struktur der Informatik-Grundlagen-Lektionen, gibt aber
        auch Tipps, falls Sie eigene Lektionen entwickeln wollen."
      OPD-K5 Problem Solving: |-
        # Best Practices > Meta-Cognitive Problem Solving

        Explicitly teaching meta-cognitive problem solving strategies before, during and after coding is extremely important in helping students process their learning. Mega-cognitive problem solving involves thinking about your thought process itself, and reflecting on _how_ you solve problems. Watch the video below to learn about Code.org's "Puzzle Solving Recipe" that can help students have success with difficult problems:

        [This worksheet](http://code.org/curriculum/docs/k-5/PuzzleSolvingStudent.png) details the different steps of the Puzzle Solving Recipe.

        <img src="https://images.code.org/18ec61f8b911b83ca1cdea404a34c40e-image-1434399798952.png" width="650px" style="margin-right:45px; border-radius:10px;">

        > ## Reflect:
        >
        > How might you explicitly teach problem solving in your CS classroom?
        >
        > [Tweet your thoughts](https://twitter.com/teachcode) and be sure to tag @teachcode in your tweet so we can respond.
        >
        > <a href="http://ctt.ec/ic2bx" target="blank"><h4><i class="fa fa-external-link-square" ></i> Share on Twitter</h4></a>
      OPD-K5 RepeatBlock: Sehen Sie sich das folgende Video an, das die Funktionsweise
        von Schleifen erklärt und den 'Repeat'-Block in den Informatik-Grundlagen
        einführt.
      OPD-K5 RepeatBlock_copy: Sehen Sie sich das folgende Video an, das die Funktionsweise
        von Schleifen erklärt und den 'Repeat'-Block in den Informatik-Grundlagen
        einführt.
      OPD-K5 Unplugged Video: |-
        ## Looking Ahead > Getting "Unplugged"

        <img src="https://images.code.org/ae83fdee9390a1155e5173b2a06f9773-image-1434399991310.JPG" class="level-image">

        In teaching computer science, you might think it would be best to have access to top tier technology -- new computers, fast Internet, the latest apps. But at Code.org, we've found that some of the most impactful computer science lessons are actually "unplugged," or conducted with little to no technology at all. In these lessons, students learn computer concepts without a computer.

        That's why all of our CS Fundamentals courses use unplugged activities to introduce computer science concepts with physical manipulatives before students write computer programs using those concepts. An example of this would be doing a dance of repeated movements with the class to understand the concept of how loops repeat commands in a computer program. This way when the students go on to writing programs using loops, the unplugged activity has set them up with something they are already familiar with and they can relate this new concept back to that activity.

        Watch the video below to understand the benefits of using unplugged activities to teach computer science.

        **As you work your way through Stages 4-8**, you'll have a chance to review some of our unplugged activities for each of the core concepts covered in this course.
      OPD-K5 Unplugged Video_copy: "It might seem counterproductive to teach computer
        science away from the computer! However, we've found that some of the most
        impactful  lessons are actually \"unplugged,\" or conducted with little to
        no technology at all. \n\nAll of our CS Fundamentals courses use unplugged
        activities to introduce computer science concepts with physical manipulatives
        before students write computer programs using those concepts. We also use
        unplugged activities to teach important concepts that are not coding, like
        digital citizenship. Watch the video below to understand the benefits of using
        unplugged activities to teach computer science."
      OPD-K5 WhatIsCS: 'Hast du dich jemals gefragt: "Was genau ist Informatik?" Oder:
        "Warum werden manche Computerprogramme mit Worten geschrieben und manche mit
        Bildern?" Wenn ja, dann schau dir dieses Video an; es ist eine großartige
        Einführung in das Gebiet der Informatik.'
      OPD-K5 WhatIsCS_copy: |-
        <span style="font-size: 1.1em">
        Have you ever wondered what computer science is, or what kinds of different program languages there are? This video provides an introduction to the field of computer science.
        </span>
      OPD-K5 conditionals free response: |-
        # Reflect on Conditionals

        In this lesson, we explored how conditionals help programmers add logic to their code.

        Now take a moment to reflect. How would you explain the concept of conditionals to your students? What is the benefit of journaling as a teaching practice for comptuer science?
      OPD-K5 events free response: |-
        # Reflect on Events

        In this lesson, you stretched your coding muscles by using events to trigger certain actions in your program.

        Now take a moment to reflect. How would you explain the concept of events to your students? What are the steps you could take to debug a program?
      OPD-K5 for loops free response: |-
        # Reflect on For Loops

        Take a moment to reflect. How would you explain the concept of for loops to your students? What is one teaching practice that you could use to teach this concept?
      OPD-K5 functions free response: |-
        # Reflect on Functions

        In this lesson, we explored how functions can make you a faster and better programmer by allowing you to reuse segments of your code. In the next lesson, we'll look at the concept of variables.

        Now take a moment to reflect. How would you explain the concept of functions to your students? What is one teaching practice that you could use to teach this concept?
      OPD-K5 loops free response: |-
        # Reflect on Loops

        In this lesson, we explored how loops can be used to make code more efficient. In the next lesson, we'll look at how events can add interactivity into a program.

        Now take a moment to reflect. How can you connect the concept of loops to your students’ prior experience outside of the CS classroom? What are the benefits of pair programming, and how could you use the it when teaching this lesson?
      OPD-K5 projects free response: |-
        # Reflect on end-of-course projects

        Take a moment to reflect. How would you use end-of-course proejcts in your classroom? What is the benefit of having students complete a project?
      OPD-K5 sequencing free response: "# Reflect on Sequencing\n\nCongratulations!
        You just wrote some code. You are officially a programmer!\n\nDid you notice
        that the last puzzle was a little more difficult? It was a challenge puzzle.
        Challenge puzzles are meant to stretch the boundaries of what students will
        do. We make it clear that they should be attempted, but do not require that
        they be completed for students to succeed for the lesson.\n\nNow take a moment
        to reflect. How would you describe the difference between computer science
        and coding? How would you explain sequencing and algorithms to your students? "
      OPD-K5 sprite lab free response: "# Reflect on Sprite Lab\n\nTake a moment to
        reflect. How would you use Sprite Lab in your classroom? "
      OPD-K5 variables free response: |-
        # Reflect on Variables

        Take a moment to reflect. How would you explain the concept of variables to your students? What is one teaching practice that you could use to teach this concept?
      OPD-K5 whats your plan: "# What's your plan?\n\nThroughout the course, you will
        be asked to write reflections on what you have learned. Once you submit your
        response, it will save, and you can always come back to it. We will revisit
        it at the end of this online course.\n\nTake a moment now to reflect. How
        and when will you complete this online course to make ensure you get the most
        benefit from the experience? "
      OPD-K5-events-2: "Hänge den `normal mit den Flügeln schlagen`-Baustein an das
        Ereignis `beim Klicken` an und drücke dann \"Ausführen\". \n\n* * *\n\nKlicke
        oder tippe auf den Spielbereich, um Flappy zum Ziel zu bewegen."
      OPD-K5-events-3: "Das Ereignis `wenn ausführen` ermöglicht es dir, Code auszuführen,
        sobald dein Spiel startet. \n\nVersuche, einen Baustein hinzuzufügen, der
        die Geschwindigkeit des Levels bestimmt, wenn die \"Ausführen\"-Taste gedrückt
        wird. \n\n* * *\n\nSpiele das Spiel und flattere zum Ziel, um weiterzumachen."
      OPD-K5-events-4: "Jetzt haben wir den Boden hinzugefügt.\n\nFüge den Baustein
        \"Spiel beenden\" zu dem Ereignis \"beim Berühren des Bodens“ hinzu. \n\n*
        * *\n\nSpiele das Spiel und lasse den Vogel auf den Boden aufschlagen, um
        weiterzumachen."
      OPD-K5-events-5: "Flappy wird durch die Hindernisse fliegen, bist du Code schreibst,
        der ihn zum Abstürzen bringt. \nHänge einen Baustein an den „wenn ein Hindernis
        getroffen wird“-Baustein. Dein Code muss das Spiel beenden, wenn Flappy mit
        dem ersten Hindernis zusammenstößt."
      OPD-K5-events-6: "Wir haben eine Anzeigetafel hinzugefügt, auf der die Punkte
        gezählt werden, wenn Flappy an Hindernissen vorbeifliegt. \n\nFüge einen „am
        Hindernis vorbeifliegen“-Baustein hinzu und hole dir einen Punkt, indem du
        Flappy durch die ersten Rohre fliegen lässt."
      OPD-K5-forloops-2: "Schreibe den Code, um der Biene beim Sammeln des gesamten
        Nektars zu helfen. \n\nFür diese Aufgabe wirst du viele Blöcke brauchen, aber
        wir werden im nächsten Rätsel einen einfacheren Weg kennenlernen."
      OPD-K5-forloops-6: "Du kannst auch eine \"Für\"-Schleife zum Herunterzählen
        verwenden. \n\nVersuche, diesen Nektar zu sammeln, indem du um **1** von **5**
        in **1**-er-Schritten herunterzählst."
      OPD-K5-forloops-7: |-
        Die letzte Zahl in deiner "Für"-Schleife wird als die **"Steigerung"** bezeichnet. Jedes Mal, wenn die Schleife ausgeführt wird, ändert sich die Zählervariable um den Wert dieser **Steigerung**.

        Versuche, diese Blüten mit einer **Steigerung** um 2 zu sammeln.
      OPD-K5-projects-2: "Es ist toll, wie viel du schon gelernt haben! Lass uns Schritt
        für Schritt ein Spiel programmieren. \n\nWähle mit Hilfe neuer Bausteine in
        deiner Werkzeugkiste einen neuen Hintergrund aus und wähle dann eine Figur
        für dein Spiel aus."
      OPD-K5-projects-3: "Verwende Bausteine wie Ereignisse und Aktionen, damit sich
        Ihr Spieler bewegt, wenn du die Pfeiltasten drückst.  \n\nBringe den Spieler
        zu den Zielen, um dieses Rätsel zu lösen."
      OPD-K5-projects-4: "Lass uns deinem Spiel noch ein paar Figuren hinzufügen!
        \n\nVerwende den Baustein `Figur einfügen`, um weitere Figuren hinzuzufügen,
        und bewege sie dann zum Ziel, um diese Aufgabe abzuschließen."
      OPD-K5-projects-5: |-
        Viele Charaktere und die Bewegung der Schauspieler ist ein großartiger Anfang für ein Spiel, aber wir müssen mehr tun, damit es sich wie ein echtes Spiel anfühlt. Lasst uns eine Punktzahl hinzufügen!

        Verwende Ereignisblöcke wie den `Wenn der Schauspieler berührt...`, um die Punktzahl zu ändern oder das Spiel zu gewinnen. Erreiche 5 Punkte oder gewinne das Spiel, um dieses Rätsel zu lösen.
      OPD-K5-projects-6: Tolle Arbeit! Du hast alle grundlegenden Komponenten für
        ein funktionierendes Spiel. Verbringe nun Zeit damit, sicherzustellen, dass
        das Spiel so funktioniert, wie du es dir vorstellst. Wenn du fertig bist,
        klicke "Fertig"!
      OPD-K5-projects-7: Du hast es geschafft! Jetzt kannst du dein Spiel spielen
        oder es mit deinen Freunden und Klassenkameraden teilen!
      OPD-K5-spritelab-2: "Lasst uns ein Aquarium bauen!  \n\nVerwandle das Ambrosia-Sprite
        in jede Art von Fisch, indem du auf <xml><block type=\"gamelab_allSpritesWithAnimation\"
        block-text=\"the sprite picker block\"><title name=\"ANIMATION\">\"tumbleweed\"</title></block></xml>
        klickst.\n\nAchte darauf, dass du auch das Kostüm dieses Sprites in <xml><block
        type=\"gamelab_addBehaviorSimple\" block-text=\"the add behavior block\"></block></xml>
        aktualisierst."
      OPD-K5-spritelab-3: "Dem Fisch wird schwindelig! \n\nÄndere das Verhalten der
        Fische so, dass sie nach links und rechts schwimmen."
      OPD-K5-spritelab-4: "Unser Aquarium braucht etwas Wasser! \n\nVerwende <xml><block
        type=\"gamelab_setBackground\" inline=\"true\" block-text=\"the set background
        color block\">\n    <value name=\"COLOR\">\n      <block type=\"colour_picker\">\n
        \       <title name=\"COLOUR\">#0000ff</title>\n      </block>\n    </value>\n
        \ </block></xml>, um den Hintergrund in einer beliebigen Farbe darzustellen.
        Wir empfehlen blau!"
      OPD-K5-spritelab-6: Der Fisch ist abenteuerlustig und will neue Kreaturen im
        Meer treffen. Füge ein weiteres Sprite in das Aquarium hinzu. Dieses Sprite
        kann jedes andere Kostüm haben, außer dem, das du für deine Fische benutzt!
      OPD-K5-spritelab-7: |-
        Was soll der neue Freund deines Fisches tun?

        Füge ein Verhalten hinzu und beobachte die Beiden!
      OPD-K5-variables-1: |-
        Lass uns ein gleichseitiges Dreieck zeichnen.

        Es muss auf jeder Seite genau 50 Pixel lang sein.
      OPD-K5-variables-2: "Verwende nun eine weitere Schleife, um drei dieser Dreiecke
        direkt nebeneinander zu zeichnen. \n\nDu kannst den Code aus deinem letzten
        Rätsel darin verschachteln."
      OPD-K5-variables-5: "Bevor es schwierig wird, kannst du die Länge von 50 in
        eine Variable verschieben, damit wir sie bei den nächsten Rätseln verwenden
        können? \n\n![expandable](https://images.code.org/73447d004093c6be8ab01a1358155f16-image-1498068386665.gif)"
      OPD-K5-variables-6: Jetzt nutze die `length` Variable, damit der Künster vorwärts
        springt und runter `length` Pixel zwischen den Dreiecken.
      Overworld Chop Tree: Holz ist ein sehr wichtiger Rohstoff. Viele Dinge werden
        daraus hergestellt. Um einen Baum zu fällen, gehe zu seinem Stamm und benutze
        den „Zerstören“-Baustein.
      Overworld Chop Tree_2019: Holz ist ein sehr wichtiger Rohstoff. Viele Dinge
        werden daraus hergestellt. Um einen Baum zu fällen, gehe zu seinem Stamm und
        benutze den „Zerstören“-Baustein.
      Overworld House Frame Chosen: Bau den Rest deines Hauses aus jedem beliebigem
        Material, das dir gefällt. Der Befehl "Wiederholen" wird sich als nützlich
        erweisen.
      Overworld House Frame Chosen_2019: Bau den Rest deines Hauses aus jedem beliebigem
        Material, das dir gefällt. Der Befehl "Wiederholen" wird sich als nützlich
        erweisen.
      Overworld Move to Sheep: Füge einen zweiten „Vorwärts“-Befehl hinzu, um zu den
        Schafen zu gelangen.
      Overworld Move to Sheep_2019: Füge einen zweiten „Vorwärts“-Befehl hinzu, um
        zu den Schafen zu gelangen.
      Overworld Place Wall: Alle Häuser beginnen mit einer Wand. Baue den ersten Teil
        deines Hauses, indem du die „Platzieren“- und „Vorwärts“-Befehle in die Wiederholungsschleife
        platzierst.
      Overworld Place Wall_2019: Alle Häuser beginnen mit einer Wand. Baue den ersten
        Teil deines Hauses, indem du die „Platzieren“- und „Vorwärts“-Befehle in die
        Wiederholungsschleife platzierst.
      Overworld Shear Sheep: Zeit zum Schafescheren! Benutze den Befehl "scheren",
        um Wolle von beiden Schafen zu sammeln.
      Overworld Shear Sheep_2019: Zeit zum Schafescheren! Benutze den Befehl "scheren",
        um Wolle von beiden Schafen zu sammeln.
      Pixelation - Lesson 15 - Color Shades: |-
        # Farbzerlegungen: Aufgabe 2

        **Anweisungen:**
        <img src='https://images.code.org/548d1daa698a17b1005b1747f152587f-image-1439476855059.png' style="width: 150px; float:right">Wir beginnen mit der Reihe von Rottönen, die Maddie im Video kreiert hat. Experimentiere mit 6-Bit-Farben, indem du die untere Zeile des Bildes mit Farbtönen einer anderen Farbe ausfüllst. Hier ist ein Beispiel mit einigen Blautönen. Probiere deine eigene Farbe!
      Pixelation - Lesson 15 - Color Shades 4x4: "# Pixelation: Aufgabe 3\n\n<img
        src = \"https://code.org/images/cspunit1/ColorTask3.png\" style=\"float:right;
        margin:0 20px\" width=200>\n\n**Anweisungen:**\nWir beginnen Sie mit dem 4x4
        Bild, das Maddie im Video erstellt hat.\n\nDeine Aufgabe ist es, ein 4x4-Raster
        mit Farben zu füllen, indem du _12 Bit pro Pixel_ verwendest. Das Ergebnis
        sollte ungefähr so aussehen wie das rechts dargestellte Bild.  \n\nHier sind
        die Anforderungen:\n\n-   Reihe 1 - füllen Sie mit Rottönen. \n-   Reihe 2
        - Grüntöne. \n-   Reihe 3 - Blautöne. \n-   Reihe 4 - Graustufen."
      Pixelation - Lesson 15 - Complete 3-bit color: "# Farbzerlegung: Aufgabe 1\n\n**Anweisungen:**\n\n-
        \  Wir beginnen mit dem 4x2-Bild, das Maddie erstellt hat, aber wir haben
        die letzten beiden Felder weggelassen. \n-   Vervollständige das Bild, indem
        du herausfindest, welche zwei Farben fehlen und kodiere diese."
      Pixelation 4x4 Empty: Die Breite und Höhe sind nun in den Pixeldaten kodiert.
        Kannst du herausfinden, wie du die Abmessungen anpassen kannst?
      Pixelation Bee: |-
        # Beispiel für 12 Bits pro Pixel

        -   Dieses größere Bild einer Biene kodiert Farbe mit 12 Bit pro Pixel, aber das Betrachten in Hexadezimalen macht es einfacher, die Farbe jedes Pixels zu sehen.
        -   Wenn du in den Binärmodus wechselst - halten Dich fest - sind es viele Bits.
        -   Hier ist noch eine weitere spannende Sache, die du ausprobieren kannst: Schiebe die Bits pro Pixel hoch bis auf 24 Bits pro Pixel. Was passiert dann? Kannst du dieses Verhalten erklären?
      Pixelation Flappy: |-
        # Beispiel für mehr Bits pro Pixel

        Hier ist ein größeres Bild mit 9 Bit pro Pixel. Mit 9 Bit pro Pixel können 512 verschiedene Farben darstellt werden. Klicke dich durch, um das nächste Bild zu sehen, das noch ausgefeilter, aber einfacher zu verstehen ist.
      Predict Loop I: |-
        # Predict

        What will print as a result of this loop?
      Predict Loop I_2018: |-
        # Predict

        What will print as a result of this loop?
      Predict Loop I_2019: |-
        # Predict

        What will print as a result of this loop?
      Revisiting the Counter Pattern: "Today you’re going to learn how to use and
        create **functions**.\n\nCreating a function lets you make your own blocks!
        There are two parts to a function: \n\nMaking a newly named block that has
        all of the code you want to run inside of it. \n\\-xml of function definition-
        \n\nThe single green block itself that you use, or call, to run the function
        you created.\n\\-xml of function call-\n\nPrepare to get familiar with functions,
        learn how to edit them, and create your own!"
      Revisiting the Counter Pattern_2018: "Today you’re going to learn how to use
        and create **functions**.\n\nCreating a function lets you make your own blocks!
        There are two parts to a function: \n\nMaking a newly named block that has
        all of the code you want to run inside of it. \n\\-xml of function definition-
        \n\nThe single green block itself that you use, or call, to run the function
        you created.\n\\-xml of function call-\n\nPrepare to get familiar with functions,
        learn how to edit them, and create your own!"
      Revisiting the Counter Pattern_2019: "Today you’re going to learn how to use
        and create **functions**.\n\nCreating a function lets you make your own blocks!
        There are two parts to a function: \n\nMaking a newly named block that has
        all of the code you want to run inside of it. \n\\-xml of function definition-
        \n\nThe single green block itself that you use, or call, to run the function
        you created.\n\\-xml of function call-\n\nPrepare to get familiar with functions,
        learn how to edit them, and create your own!"
      Robot Doodle: "**Projektidee:** Zeichne ein Bild von etwas Vertrautem aus der
        realen Welt. Das erfordert Beharrlichkeit und Planung!"
      Robot Doodle_2018: "**Projektidee:** Zeichne ein Bild von etwas Vertrautem aus
        der realen Welt. Das erfordert Beharrlichkeit und Planung!"
      Room Escape Workshop - 1: |-
        # Räume einrichten

        <img src="https://images.code.org/9d103d74f7c2da05aeccd5fc317e6ab6-image-1490368234432.08.44 AM.png" style="width:200px; float:right">

        Um eine Escape Room zu erstellen müssen Sie den Raum zunächst einrichten, in dem der Benutzer Abenteuer erleben kann. Ein Teil der Arbeit wurde bereits für Sie erledigt.  Sie müssen nur entscheiden, wie die verschiedenen Teile des Raumes aussehen werden, indem Sie Bilder auswählen!

        # Mache folgendes

        -   Das Level beginnt im Designmodus.
        -   Füge für jedes leere Bildelement (graues Rechteck) ein entsprechendes Bild ein. Du brauchst beispielsweise ein Türbild für das Bildelement Tür mit der Bezeichnung Tür.
        -   Ein Beispiel dafür, wie der Raum aussehen könnte, findest du auf der rechten Seite.
      Room Escape Workshop - 10: |-
        # Tür öffnen

        <img src="https://images.code.org/3651f7d5306bdcfd2d9a3d9bb842626e-image-1491066778787.12.36 PM.png" style="width:200px;float:right">

        Wir kommen dem Ganzen näher! Lasst uns die Tür einrichten, um sie zum Öffnen vorzubereiten.

        # Mach folgendes

        -   Bild für den Außenbereich hinzufügen
        -   Gib ihm eine gute ID (vielleicht _außen_).
        -   Das Bild für den Außenbereich ausblenden (Es wird beim Öffnen der Tür angezeigt)
      Room Escape Workshop - 10 - 2: |-
        # Tür öffnen

        <img src="https://images.code.org/57407cb51f50e08ecddb8ce7d2d89157-image-1491065952915.58.58 PM.png" style="width:200px;float:right">

        Öffne die Tür, wenn man den Schlüssel hat!

        # Mach folgendes

        -   Füge einen `onEvent` Block hinzu, wenn auf die Tür geklickt wurde.
        -   Fügen Sie eine `if`-Anweisung innerhalb des `onEvent` Events hinzu, um zu überprüfen, ob sich die Schlüsselposition nach unten bewegt hat.
            -   Hinzufügen einer if-Anweisung
            -   In der if-Anweisung fügen Sie `==` hinzu.
            -   Auf einer Seite der `==` befindet sich die x-Position, auf die Sie den Schlüssel bewegen, wenn er angeklickt wird.
            -   Auf der anderen Seite fügen Sie den Block `getXPosition()` hinzu - Die ID dafür sollte die ID Ihres Schlüssels sein!
        -   Verwenden Sie innerhalb der `if`-Anweisung `showElement`, um das versteckte Außenbild anzuzeigen, wenn man den Schlüssel hat
      Room Escape Workshop - 3: |-
        # Den Code verstecken

        <img src="https://images.code.org/6fa80456a39d9b6417545f5f66ec83a5-image-1490368827625.png" style="width:400px;float:right">

        1.  Klicke im Designmodus auf das weiße Quadrat auf dem "CODE" steht. Ändere es, um einen Geheimcode deiner Wahl anzuzeigen.
        2.  Ziehe das Bild nach unten, um den Geheimcode abzudecken.

        ![](<>)
      Room Escape Workshop - 3-2: |-
        # Bild bewegen

        Machen Sie es nun so, dass der Benutzer den Geheimcode durch Anklicken des Bildes finden kann. Wenn sie auf das Bild klicken, sollte es sich nach oben und aus dem Weg bewegen.

        # Mach folgendes

        -   Ziehe einen `onEvent` Baustein in den Arbeitsbereich
        -   Ändere die im `onEvent` Baustein in "Bild" (das ist die ID des Bildelements)
        -   Füge innerhalb des `onEvent` Bausteins den Baustein `setPosition` mit den folgenden Eingaben hinzu
            -   ID: "Bild"
            -   Die nächsten beiden Eingaben sind x- und y-Werte - testen Sie einige Werte, um zu versuchen, das Bild wie in den Bildern rechts zu bewegen
      Room Escape Workshop - 4: "# Den Safe einrichten\n\nDu hast einen Geheimcode
        generiert und ihn so verwendet, dass Benutzer in den zweiten Raum navigieren
        können. Geben wir dem Benutzer nun die Möglichkeit den Geheimcode einzugeben
        wenn er auf den Safe klickt.\n\n# Mach folgendes\n\n-   Hinzufügen eines `onEvent`-Bausteins\n
        \   -   Wähle die ID für den Safe aus.\n-   Füge innerhalb des `onEvent` Bausteins
        einen <img src=\"https://images.code.org/c0964a8543728d018d5d9583319e22b9-image-1491060910093.34.36
        AM.png\" style=\"width:300px\"> Baustein hinzu.\n    -   Ändere auf der linken
        Seite das _x_ (den Namen der Variable) in _guess_. \n    -   Ändere auf der
        rechten Seite _\"Einen Wert eingeben\"_  (also die Benutzeraufforderung) auf
        _\"Den Code eingeben\"_"
      Room Escape Workshop - 5: |-
        # Überprüfen des Geheimcodes

        Nachdem du nun eine Vermutung des Geheimcodes vom Benutzer entgegen gennommen hast, musst du nur prüfen, ob diese korrekt ist! Wir können dies mit einer `if`-Anweisung tun. Eine if-Anweisung prüft, ob eine Bedingung true ist, in diesem Fall wird geprüft, ob die vom Benutzer eingegebene Nummer mit dem Geheimcode übereinstimmt.

        # Mach folgendes

        -   Füge innerhalb des `onEvent`-Bausteins für den Safe unterhalb des Prompt-Befehls eine <img src="https://images.code.org/5e9a434b1ad6b8f010db928b668127a5-image-1491061131564.37.01 AM.png" style="width:100px">-Anweisung hinzu.
        -   Erstelle die Bedingung, indem du den <img src="https://images.code.org/f0680979704c30975550211b03ed222e-image-1491061134985.37.08 AM.png" style="width:100px"> Baustein herausziehst, der prüft, ob zwei Dinge gleich sind
        -   Auf der einen Seite von <img src="https://images.code.org/f0680979704c30975550211b03ed222e-image-1491061134985.37.08 AM.png" style="width:100px"> setze _guess_ (der Name des Wertes, den wir zum Speichern der Benutzer guess verwendet haben)
        -   Auf der anderen Seite gibst du den Wert für deinen Geheimcode ein
      Room Escape Workshop - 7: "# Zeige das innere des Safes\n\n<img src=\"https://images.code.org/71e74305187a46d0badeb29a9a69ac56-image-1490371014841.55.37
        AM.png\" style=\"width:200px;float:right\">\n\nSobald du das Programm hast
        das den Geheimcode überprüft, willst du auch, dass sich der Safe \"öffnet\"
        und den Schlüssel innen angezeigt wird. Zuerst müssen Sie diese Elemente aber
        noch im Designmodus erstellen.\n\n# Mach folgendes\n\n-   Gehe in den Designmodus
        und fügen Sie ein graues quadratisches Bild hinzu.\n    -   Klicke und ziehe
        ein Bildelement <img src=\"https://images.code.org/8f4bc108415d83e5c528c9204502efc2-image-1491059181186.06.13
        AM.png\" style=\"width:75px\"> auf den Bildschirm.\n    -   Gib ihm eine gute
        ID (vielleicht _insideSafe_).\n    -   Finde ein graues Quadrat, das als Bild
        verwendet werden soll.\n    -   Dies dient als Innenseite des Tresors, da
        es die Vorderseite des Tresors verdeckt, wenn es gezeigt wird.\n-   Hinzufügen
        eines Schlüsselbildes\n    -   Klicke und ziehe ein Bildelement <img src=\"https://images.code.org/8f4bc108415d83e5c528c9204502efc2-image-1491059181186.06.13
        AM.png\" style=\"width:75px\"> auf den Bildschirm.\n    -   Gib ihm eine gute
        ID (vielleicht _Schlüssel_)\n    -   Finde ein Schlüsselbild zur Verwendung
        \n-   Klicke im Designmodus auf die versteckte Eigenschaft für das graue Quadrat
        und die Taste. Wenn sie ausgeblendet sind, wird es im Designmodus so aussehen
        wie unten beschrieben.\n\n<img src=\"https://images.code.org/2c2c7e9996515f2b30d416b558fd1360-image-1489605526794.17.55
        PM.png\" style=\"width:200px\">"
      Room Escape Workshop - 8: |-
        # Zeige das Innere des Safes

        Richte nun den Code so ein, dass der Schlüssel und das graue Quadrat angezeigt werden, wenn der Benutzer den richtigen Code eingibt.

        # Mach Folgendes

        -   Innerhalb der `if`-Anweisung, die du im Befehl `onEvent` für den Safe erstellt hast, füge ein:
            -   Den `showElement` Baustein um das graue Quadrat anzuzeigen
            -   Den `showElement` Baustein um den Schlüssel anzuzeigen
      Room Escape Workshop - 9-2: "# Schlüssel-Klick\n\n<img src=\"https://images.code.org/1a736d2774860bebc5072b8ae8b38f34-image-1491066638078.10.00
        PM.png\" style=\"width:170px;float:right\">\n\nSobald ein Benutzer auf den
        Schlüssel klickt, möchtest du zeigen, dass er den Schlüssel hält. Du kannst
        dies tun, indem du den Schlüssel in die untere Ecke des Raumes bewegst. \n\n#
        Mache folgendes\n\n-   Fügt einen `onEvent`-Baustein hinzu für das Ereignis
        wenn der Benutzer auf den Schlüssel klickt. \n-   Innerhalb des Blocks `onEvent`:\n
        \   -   Verwende `setPosition`, um die Taste in die untere Ecke des Bildschirms
        zu bewegen"
      Standalone_Artist_2: Zeichne diesen Diamanten, indem du Winkel von 120° und
        60°, sowie 150 Pixel lange Seiten verwendest.
      Standalone_Artist_3: Kannst du ein Hexagon (Sechseck) mit 100 Pixel Seitenlänge
        und 60°-Winkeln zeichnen?
      Standalone_Artist_4: 'Nun kannst du mit einem neuen Baustein experimentieren:
        Die Schleife. Diese wird die Befehle, die in dem Baustein der Schleife eingebettet
        sind, wiederholen. Was passiert, wenn du die Befehle in der Schleife sechsmal
        wiederholst?'
      Standalone_Artist_5: Wie oft musst du eine Schleife, die die Befehle enthält,
        um einen Diamanten zu zeichnen, wiederholen, um dann eine Blume zu zeichnen?
      Standalone_Artist_5.5: "Schau mal, wie schön wir den Blumen-Code vereinfacht
        haben, indem wir eine Schleife verwendet haben. Du kannst die ganze Folge
        12 Mal wiederholen, um die Blume zu zeichnen. \nHinweis: Du musst vor dem
        Ende der Diamantschleife noch eine 30 Grad Drehung einbauen, damit du gerade
        gezeichneten Diamanten nicht wieder übermalst."
      Standalone_Artist_6: "Wiederhole diesen Sechseck-Code 6 Mal, um die Figur zu
        zeichnen. Um wie viel Grad musst du jedes Mal drehen? \nHinweis: Teile die
        Gradzahl in einem Kreis (360°) durch die Anzahl der Wiederholungen."
      Standalone_Artist_7: "Eine Funktion ist ein weiteres Programmierwerkzeug, dass
        dir hilft nicht immer und immer wieder Code zu wiederholen. Die Funktion in
        diesem Beispiel zeichnet eine Blume. Du kannst sie also immer benutzen (man
        sagt auch aufrufen), wenn du eine Blume zeichnen möchtest, indem du die Funktion,
        die die Blume zeichnet, aufrufst. Benutze jetzt diese Funktion und den neuen
        Springen-Baustein, um drei Blumen zu zeichnen. \nHinweis: Die Blumen liegen
        jeweils 150 Pixel auseinander"
      Standalone_Artist_8: Hier ist eine Funktion, die ein Sechseck zeichnet. Führe
        den Code aus, um zu sehen, was dieser macht und experimentiere dann mit der
        Funktion, um zu sehen, was passiert. Kannst du mit ihr ein Muster von Quadraten,
        Dreiecken oder Fünfecken zeichnen?
      Standalone_Artist_9: Leg los und zeichne ein Bild deiner Wahl! Du erhältst dafür
        eine leere Funktion, mit der du machen kannst was du möchtest!
      The Accelerometer: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      The Accelerometer_2018: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      The Accelerometer_2019: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      U4 Model Design 1: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model.png)

        <br/>

        Click to expand

        </div>

        # Creating a digital prototype

        Using the prototype to the right (click the image to enlarge it) you're going to create a digital prototype of the example app "Recycling Finder". We've already added a few of the elements for you, including the title, but it doesn't look quite right yet. We'll go over each element of this as we go, but for now let's **just focus on the title**.

        <!--<img src="https://images.code.org/66633526e03550bedb8503fefdc2ece3-image-1502921575904.png" style="width: 300px; float: right; clear: both;">-->

        # Do This

        -   **Make sure you are in Design Mode,** the switch appears above your app window on the left.
        -   **Click on the title text** to view its properties.
        -   **Change the property "text"** to "Recycling Finder".
        -   **Change the "font size"** to make the title larger.
        -   **Change the "text alignment"** so the title is centered on the screen.

        _Note: Make sure you click **"Run"** before moving on to save your progress._
      U4 Model Design 1_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model.png)

        <br/>

        Click to expand

        </div>

        # Creating a digital prototype

        Using the prototype to the right (click the image to enlarge it) you're going to create a digital prototype of the example app "Recycling Finder". We've already added a few of the elements for you, including the title, but it doesn't look quite right yet. We'll go over each element of this as we go, but for now let's **just focus on the title**.

        <!--<img src="https://images.code.org/66633526e03550bedb8503fefdc2ece3-image-1502921575904.png" style="width: 300px; float: right; clear: both;">-->

        # Do This

        -   **Make sure you are in Design Mode,** the switch appears above your app window on the left.
        -   **Click on the title text** to view its properties.
        -   **Change the property "text"** to "Recycling Finder".
        -   **Change the "font size"** to make the title larger.
        -   **Change the "text alignment"** so the title is centered on the screen.

        _Note: Make sure you click **"Run"** before moving on to save your progress._
      U4 Model Design 1_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model.png)

        <br/>

        Click to expand

        </div>

        # Creating a digital prototype

        Using the prototype to the right (click the image to enlarge it) you're going to create a digital prototype of the example app "Recycling Finder". We've already added a few of the elements for you, including the title, but it doesn't look quite right yet. We'll go over each element of this as we go, but for now let's **just focus on the title**.

        <!--<img src="https://images.code.org/66633526e03550bedb8503fefdc2ece3-image-1502921575904.png" style="width: 300px; float: right; clear: both;">-->

        # Do This

        -   **Make sure you are in Design Mode,** the switch appears above your app window on the left.
        -   **Click on the title text** to view its properties.
        -   **Change the property "text"** to "Recycling Finder".
        -   **Change the "font size"** to make the title larger.
        -   **Change the "text alignment"** so the title is centered on the screen.

        _Note: Make sure you click **"Run"** before moving on to save your progress._
      U4 Model Design 2: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/c0a6e147bc1cb940893f87ffd25b5015-image-1505758331506.png)

        <br/>

        Click to expand

        </div>

        # Adding more text

        Each screen of your app is composed of multiple design _elements_. You can drag out elements from the "Design Toolbox" on the left side of the workspace. To add more blocks of text, just drag out additional "label" elements.

        # Do This

        -   **Drag out a new "label" element** and place it where the "home\_description" text should be.
        -   **Change the id** to match the prototype (home\_description)
        -   **Change the field "text"** to match the prototype.
        -   **Resize** the text area by clicking and dragging the bottom right corner.
        -   **Change any other properties** to make the text look like you want it to.
      U4 Model Design 2_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/c0a6e147bc1cb940893f87ffd25b5015-image-1505758331506.png)

        <br/>

        Click to expand

        </div>

        # Adding more text

        Each screen of your app is composed of multiple design _elements_. You can drag out elements from the "Design Toolbox" on the left side of the workspace. To add more blocks of text, just drag out additional "label" elements.

        # Do This

        -   **Drag out a new "label" element** and place it where the "home\_description" text should be.
        -   **Change the id** to match the prototype (home\_description)
        -   **Change the field "text"** to match the prototype.
        -   **Resize** the text area by clicking and dragging the bottom right corner.
        -   **Change any other properties** to make the text look like you want it to.
      U4 Model Design 2_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/c0a6e147bc1cb940893f87ffd25b5015-image-1505758331506.png)

        <br/>

        Click to expand

        </div>

        # Adding more text

        Each screen of your app is composed of multiple design _elements_. You can drag out elements from the "Design Toolbox" on the left side of the workspace. To add more blocks of text, just drag out additional "label" elements.

        # Do This

        -   **Drag out a new "label" element** and place it where the "home\_description" text should be.
        -   **Change the id** to match the prototype (home\_description)
        -   **Change the field "text"** to match the prototype.
        -   **Resize** the text area by clicking and dragging the bottom right corner.
        -   **Change any other properties** to make the text look like you want it to.
      U4 Model Design 3: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/cad5b0e54f67976fee68ecf29c2a603b-image-1505758463551.png)

        <br/>

        Click to expand

        </div>

        # Adding images

        The prototype just has a plain black square where the logo should be - let's add an image to spice it up. The "image" element allows you to either upload an image from your computer or select from a library of graphic icons.

        # Do This

        -   **Drag out a new "image" element** and place between the description and the title.
        -   **Change the id** to match the prototype.
        -   **Click the "Choose..." link** next to the "image" field.
        -   **Select the "Icons" tab** and choose an icon for your logo.
        -   **Change the color** of the icon using the "icon color" field.
      U4 Model Design 3_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/cad5b0e54f67976fee68ecf29c2a603b-image-1505758463551.png)

        <br/>

        Click to expand

        </div>

        # Adding images

        The prototype just has a plain black square where the logo should be - let's add an image to spice it up. The "image" element allows you to either upload an image from your computer or select from a library of graphic icons.

        # Do This

        -   **Drag out a new "image" element** and place between the description and the title.
        -   **Change the id** to match the prototype.
        -   **Click the "Choose..." link** next to the "image" field.
        -   **Select the "Icons" tab** and choose an icon for your logo.
        -   **Change the color** of the icon using the "icon color" field.
      U4 Model Design 3_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/cad5b0e54f67976fee68ecf29c2a603b-image-1505758463551.png)

        <br/>

        Click to expand

        </div>

        # Adding images

        The prototype just has a plain black square where the logo should be - let's add an image to spice it up. The "image" element allows you to either upload an image from your computer or select from a library of graphic icons.

        # Do This

        -   **Drag out a new "image" element** and place between the description and the title.
        -   **Change the id** to match the prototype.
        -   **Click the "Choose..." link** next to the "image" field.
        -   **Select the "Icons" tab** and choose an icon for your logo.
        -   **Change the color** of the icon using the "icon color" field.
      U4 Model Design 4: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/17b565cb2f5da12babc16fbd22685732-image-1505758655682.png)

        <br/>

        Click to expand

        </div>

        # Adding buttons

        Buttons allow your user to interact with your app. This prototype screen will need three buttons (each shaded gray on the prototype.) We've already added the Search button, so you just need to add Contact and About.

        # Do This

        -   **Drag out a new "button" element** for each of the two remaining buttons.
        -   **Change the ids** to match the prototype.
        -   **Change the text** to match the prototype.
        -   **Modify other properties** to make the screen look like you'd like.

        <img src="https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif" style="width: 500px;">
      U4 Model Design 4_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/17b565cb2f5da12babc16fbd22685732-image-1505758655682.png)

        <br/>

        Click to expand

        </div>

        # Adding buttons

        Buttons allow your user to interact with your app. This prototype screen will need three buttons (each shaded gray on the prototype.) We've already added the Search button, so you just need to add Contact and About.

        # Do This

        -   **Drag out a new "button" element** for each of the two remaining buttons.
        -   **Change the ids** to match the prototype.
        -   **Change the text** to match the prototype.
        -   **Modify other properties** to make the screen look like you'd like.

        <img src="https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif" style="width: 500px;">
      U4 Model Design 4_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/17b565cb2f5da12babc16fbd22685732-image-1505758655682.png)

        <br/>

        Click to expand

        </div>

        # Adding buttons

        Buttons allow your user to interact with your app. This prototype screen will need three buttons (each shaded gray on the prototype.) We've already added the Search button, so you just need to add Contact and About.

        # Do This

        -   **Drag out a new "button" element** for each of the two remaining buttons.
        -   **Change the ids** to match the prototype.
        -   **Change the text** to match the prototype.
        -   **Modify other properties** to make the screen look like you'd like.

        <img src="https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif" style="width: 500px;">
      U4 Model Design 5: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/d257d0b06a24195a40adc60e4c96c0e1-image-1505759167176.png)

        <br/>

        Click to expand

        </div>

        # Making a Search Box

        The search box in our prototype can be created using a "Text Input" element. This is a box that your user can type into, and later your software can read what was entered and do something with it.

        # Do This

        -   **Add a Text Input** element.
        -   **Change the id** to match the prototype.
        -   **Add a Label** with the text "Location" next to your text input.
      U4 Model Design 5_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/d257d0b06a24195a40adc60e4c96c0e1-image-1505759167176.png)

        <br/>

        Click to expand

        </div>

        # Making a Search Box

        The search box in our prototype can be created using a "Text Input" element. This is a box that your user can type into, and later your software can read what was entered and do something with it.

        # Do This

        -   **Add a Text Input** element.
        -   **Change the id** to match the prototype.
        -   **Add a Label** with the text "Location" next to your text input.
      U4 Model Design 5_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/d257d0b06a24195a40adc60e4c96c0e1-image-1505759167176.png)

        <br/>

        Click to expand

        </div>

        # Making a Search Box

        The search box in our prototype can be created using a "Text Input" element. This is a box that your user can type into, and later your software can read what was entered and do something with it.

        # Do This

        -   **Add a Text Input** element.
        -   **Change the id** to match the prototype.
        -   **Add a Label** with the text "Location" next to your text input.
      U4 Model Design 6: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/7c8f4893c0b1f4bcd2280c950e389c95-image-1505759396699.png)

        <br/>

        Click to expand

        </div>

        # Checkboxes

        The type of recyclables you're searching for can be set using "Checkbox" elements. We already added a checkbox and label for glass, so you just need to add ones for paper and plastic.

        # Do This

        -   **Add a Checkbox** for each of the options.
        -   **Change the ids** to match the prototype.
        -   **Add labels** to describe each checkbox.
      U4 Model Design 6_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/7c8f4893c0b1f4bcd2280c950e389c95-image-1505759396699.png)

        <br/>

        Click to expand

        </div>

        # Checkboxes

        The type of recyclables you're searching for can be set using "Checkbox" elements. We already added a checkbox and label for glass, so you just need to add ones for paper and plastic.

        # Do This

        -   **Add a Checkbox** for each of the options.
        -   **Change the ids** to match the prototype.
        -   **Add labels** to describe each checkbox.
      U4 Model Design 6_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/7c8f4893c0b1f4bcd2280c950e389c95-image-1505759396699.png)

        <br/>

        Click to expand

        </div>

        # Checkboxes

        The type of recyclables you're searching for can be set using "Checkbox" elements. We already added a checkbox and label for glass, so you just need to add ones for paper and plastic.

        # Do This

        -   **Add a Checkbox** for each of the options.
        -   **Change the ids** to match the prototype.
        -   **Add labels** to describe each checkbox.
      U4 Model Design 7: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model.png)

        <br/>

        Click to expand

        </div>

        # Finishing Touches

        By now you should have a fairly complete (though non-functional) digital version of the paper prototype we started with. All that's left to do is check back over your paper prototype and add any final touches you might have missed.

        # Do This

        -   **Check over the prototype** to make sure you've included everything.
        -   **Read through your IDs** and fix any that aren't descriptive.
        -   **Clean up** any rough edges by resizing or moving around elements.
      U4 Model Design 7_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model.png)

        <br/>

        Click to expand

        </div>

        # Finishing Touches

        By now you should have a fairly complete (though non-functional) digital version of the paper prototype we started with. All that's left to do is check back over your paper prototype and add any final touches you might have missed.

        # Do This

        -   **Check over the prototype** to make sure you've included everything.
        -   **Read through your IDs** and fix any that aren't descriptive.
        -   **Clean up** any rough edges by resizing or moving around elements.
      U4 Model Design 7_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model.png)

        <br/>

        Click to expand

        </div>

        # Finishing Touches

        By now you should have a fairly complete (though non-functional) digital version of the paper prototype we started with. All that's left to do is check back over your paper prototype and add any final touches you might have missed.

        # Do This

        -   **Check over the prototype** to make sure you've included everything.
        -   **Read through your IDs** and fix any that aren't descriptive.
        -   **Clean up** any rough edges by resizing or moving around elements.
      U4 Model Program 1: |-
        # Adding a New Screen

        To complete your app, you're going to need more than than just a home screen. Each card that you created in your paper prototype is represented by a "screen" in App Lab. To create more screens, just click the dropdown at the top of the app display and select "New Screen..."

        <img src="https://images.code.org/2b49c36a57fb904d4fcf219ca498647d-image-1504714832027.png" style="width: 200px">

        # Do This

        -   **Create a New Screen** and give it the ID "about".
      U4 Model Program 1.5: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model_about.png)

        <br/>

        Click to expand

        </div>

        # Design the About Screen

        To add elements to your new About screen, you'll need to first select it from the screens dropdown.

        # Do This

        -   **Complete the About screen** using the prototype to the right.
        -   **Use the screens dropdown** to switch between your Home and About screens.
      U4 Model Program 1.5_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model_about.png)

        <br/>

        Click to expand

        </div>

        # Design the About Screen

        To add elements to your new About screen, you'll need to first select it from the screens dropdown.

        # Do This

        -   **Complete the About screen** using the prototype to the right.
        -   **Use the screens dropdown** to switch between your Home and About screens.
      U4 Model Program 1.5_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model_about.png)

        <br/>

        Click to expand

        </div>

        # Design the About Screen

        To add elements to your new About screen, you'll need to first select it from the screens dropdown.

        # Do This

        -   **Complete the About screen** using the prototype to the right.
        -   **Use the screens dropdown** to switch between your Home and About screens.
      U4 Model Program 1_2018: |-
        # Hinzufügen eines neuen Bildschirms

        Um Deine App zu vervollständigen, brauchst Du mehr als nur einen Startbildschirm. Jede Karte, die du in Deinem Papier-Prototypen erstellt hast, wird im App Lab durch einen "Bildschirm" repräsentiert. Um weitere Bildschirme zu erstellen, klicke einfach auf das Dropdown-Menü oben in der App-Anzeige und wähle "Neuer Bildschirm...".

        <img src="https://images.code.org/2b49c36a57fb904d4fcf219ca498647d-image-1504714832027.png" style="width: 200px">

        # Mache Folgendes

        -   **Erstelle einen neuen Bildschirm** und gib ihm die ID "about".
      U4 Model Program 1_2019: |-
        # Hinzufügen eines neuen Bildschirms

        Um Deine App zu vervollständigen, brauchst Du mehr als nur einen Startbildschirm. Jede Karte, die du in Deinem Papier-Prototypen erstellt hast, wird im App Lab durch einen "Bildschirm" repräsentiert. Um weitere Bildschirme zu erstellen, klicke einfach auf das Dropdown-Menü oben in der App-Anzeige und wähle "Neuer Bildschirm...".

        <img src="https://images.code.org/2b49c36a57fb904d4fcf219ca498647d-image-1504714832027.png" style="width: 200px">

        # Mache Folgendes

        -   **Erstelle einen neuen Bildschirm** und gib ihm die ID "about".
      U4 Model Program 2: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/9ca7398a9b7403dc39ec6a6b2d2b8a5e-image-1477346132059.png)

        <br/>

        Click to expand

        </div>

        # Screen Import

        In addition to adding new blank screens, you can import screens from "Import Screen..." To import a screen from someone else, you'll need them to give you the sharing URL.

        **Note:** Screens you import _must not_ share any IDs with elements already in your app!

        # Do This

        Another student has created a search results screen that you can import into your app. Their app's share link is **<a href="https://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/" target="_blank">https\://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/</a>**

        -   **Select "Import Screen...** from the screens dropdown.
        -   **Copy and paste the above url** into the import screens dialog.
        -   **Select the screen** you wish to import.
        -   **Click Import** to import the screen.
        -   **Use the screens dropdown** to switch between your Home, About, and Search screens.
      U4 Model Program 2.5: |-
        # Contact Screen Import

        Yet another student created a Contact screen that you can import into your app. Their share link is **<a href ="https://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/" target="_blank">https\://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/</a>**

        # Do This

        -   **Select "Import Screen...** from the screens dropdown.
        -   **Copy and paste the above url** into the import screens dialog.
        -   **Select the screen** you wish to import.
        -   **Click Import** to import the screen.
        -   **Use the screens dropdown** to make sure your app has Home, About, Contact, and Search screens.
      U4 Model Program 2.5_2018: |-
        # Contact Screen Import

        Yet another student created a Contact screen that you can import into your app. Their share link is **<a href ="https://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/" target="_blank">https\://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/</a>**

        # Do This

        -   **Select "Import Screen...** from the screens dropdown.
        -   **Copy and paste the above url** into the import screens dialog.
        -   **Select the screen** you wish to import.
        -   **Click Import** to import the screen.
        -   **Use the screens dropdown** to make sure your app has Home, About, Contact, and Search screens.
      U4 Model Program 2.5_2019: |-
        # Contact Screen Import

        Yet another student created a Contact screen that you can import into your app. Their share link is **<a href ="https://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/" target="_blank">https\://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/</a>**

        # Do This

        -   **Select "Import Screen...** from the screens dropdown.
        -   **Copy and paste the above url** into the import screens dialog.
        -   **Select the screen** you wish to import.
        -   **Click Import** to import the screen.
        -   **Use the screens dropdown** to make sure your app has Home, About, Contact, and Search screens.
      U4 Model Program 2_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/9ca7398a9b7403dc39ec6a6b2d2b8a5e-image-1477346132059.png)

        <br/>

        Click to expand

        </div>

        # Screen Import

        In addition to adding new blank screens, you can import screens from "Import Screen..." To import a screen from someone else, you'll need them to give you the sharing URL.

        **Note:** Screens you import _must not_ share any IDs with elements already in your app!

        # Do This

        Another student has created a search results screen that you can import into your app. Their app's share link is **<a href="https://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/" target="_blank">https\://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/</a>**

        -   **Select "Import Screen...** from the screens dropdown.
        -   **Copy and paste the above url** into the import screens dialog.
        -   **Select the screen** you wish to import.
        -   **Click Import** to import the screen.
        -   **Use the screens dropdown** to switch between your Home, About, and Search screens.
      U4 Model Program 2_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/9ca7398a9b7403dc39ec6a6b2d2b8a5e-image-1477346132059.png)

        <br/>

        Click to expand

        </div>

        # Screen Import

        In addition to adding new blank screens, you can import screens from "Import Screen..." To import a screen from someone else, you'll need them to give you the sharing URL.

        **Note:** Screens you import _must not_ share any IDs with elements already in your app!

        # Do This

        Another student has created a search results screen that you can import into your app. Their app's share link is **<a href="https://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/" target="_blank">https\://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/</a>**

        -   **Select "Import Screen...** from the screens dropdown.
        -   **Copy and paste the above url** into the import screens dialog.
        -   **Select the screen** you wish to import.
        -   **Click Import** to import the screen.
        -   **Use the screens dropdown** to switch between your Home, About, and Search screens.
      U4 Model Program 3: |-
        # Button Events

        With our screens in place, it's time to start actually _programming_ the app so that it responds to button clicks. For each button on each screen, you'll want to add an `onEvent` block that watches for that button to be clicked and responds appropriately. To start off with we'll just watch the "home\_search\_btn" button and print something to the console when it's clicked

        # Do This

        You're now in Code Mode (you can use the buttons above your app to switch between Code Mode and Design Mode). This is where you can write the code that will respond to users interacting with your app.

        ![](https://images.code.org/278b27dd31b6ca014c0dd32c5f964a54-image-1505764431751.png)

        -   **Drag out an `onEvent` block** from the code toolbox.
        -   **Select "home\_search\_btn"** from the "id" dropdown.
        -   **Drag out a `console.log` block** from the variables drawer.
        -   **Run your app**.
        -   **Click the Search button** and look for messages in the console.
      U4 Model Program 3_2018: |-
        # Button Events

        Mit unseren Bildschirmen an Ort und Stelle ist es Zeit, die App tatsächlich zu _programmieren_, so dass sie auf Tastenklicks reagiert. Für jeden Button auf jedem Bildschirm solltest Du einen `onEvent` Block hinzufügen, der darauf achtet, dass der Button angeklickt wird und entsprechend reagiert. Als erstes werden wir einfach den `home_search_btn` Button beobachten und etwas auf der Konsole ausgeben, wenn er angeklickt wird

        Mache Folgendes

        Du bist jetzt im Code-Modus (du kannst mit den Buttons über deiner App zwischen Code-Modus und Design-Modus wechseln). Hier kannst du den Code schreiben, der auf die Interaktion der Benutzer mit deiner App reagiert.

        ![](https://images.code.org/278b27dd31b6ca014c0dd32c5f964a54-image-1505764431751.png)

        -   **Ziehe einen `onEvent`-Baustein** aus der Code-Toolbox heraus.
        -   **Wähle `home_search_btn`** aus der "id" Dropdown-Liste aus.
        -   **Ziehe einen \`console.log'-Baustein** aus der Variablen-Schublade heraus.
        -   **Starte Deine App**.
        -   **Klicke auf den Suchen-Button** und suche nach Meldungen in der Konsole.
      U4 Model Program 3_2019: |-
        # Button Events

        Mit unseren Bildschirmen an Ort und Stelle ist es Zeit, die App tatsächlich zu _programmieren_, so dass sie auf Tastenklicks reagiert. Für jeden Button auf jedem Bildschirm solltest Du einen `onEvent` Block hinzufügen, der darauf achtet, dass der Button angeklickt wird und entsprechend reagiert. Als erstes werden wir einfach den `home_search_btn` Button beobachten und etwas auf der Konsole ausgeben, wenn er angeklickt wird

        Mache Folgendes

        Du bist jetzt im Code-Modus (du kannst mit den Buttons über deiner App zwischen Code-Modus und Design-Modus wechseln). Hier kannst du den Code schreiben, der auf die Interaktion der Benutzer mit deiner App reagiert.

        ![](https://images.code.org/278b27dd31b6ca014c0dd32c5f964a54-image-1505764431751.png)

        -   **Ziehe einen `onEvent`-Baustein** aus der Code-Toolbox heraus.
        -   **Wähle `home_search_btn`** aus der "id" Dropdown-Liste aus.
        -   **Ziehe einen \`console.log'-Baustein** aus der Variablen-Schublade heraus.
        -   **Starte Deine App**.
        -   **Klicke auf den Suchen-Button** und suche nach Meldungen in der Konsole.
      U4 Model Program 4: |-
        # Changing Screens On Click

        The `setScreen` block will change your app to whichever screen you specify. If you place a `setScreen` block _inside_ an `onEvent` block, you can program your buttons to change to the correct screen.

        # Do This

        Using the `onEvent` block that you've created, make your program change to the "search" screen when the "home\_search\_btn" is clicked.

        -   **Drag out a `setScreen` block** an put it inside the `onEvent` block.
        -   **Select "search"** from the `setScreen` dropdown.
        -   **Run your app** and test the "home\_search\_btn" button.
      U4 Model Program 4_2018: |-
        # Wechseln der Bildschirme bei Klick

        Der `setScreen` Baustein wird Deine App auf den von Dir angegebenen Bildschirm ändern. Wenn Du einen `setScreen` Block _innerhalb_ eines `onEvent` Bausteins platzierst, kannst Du Deine Buttons so programmieren, dass sie auf den richtigen Bildschirm wechseln.

        # Mache Folgendes

        Benutze den `onEvent` Baustein, den Du erstellt hast, um Dein Programm auf den "Such"-Bildschirm zu wechseln, wenn der `home_search_btn` angeklickt wird.

        -   **Ziehe einen `setScreen`-Baustein heraus** und setze ihn in den `onEvent`-Baustein.
        -   **Wähle "Suchen"** aus dem `setScreen` Dropdown-Menü.
        -   **Starte Deine Anwendung** und teste die `home_search_btn` Schaltfläche.
      U4 Model Program 4_2019: |-
        # Wechseln der Bildschirme bei Klick

        Der `setScreen` Baustein wird Deine App auf den von Dir angegebenen Bildschirm ändern. Wenn Du einen `setScreen` Block _innerhalb_ eines `onEvent` Bausteins platzierst, kannst Du Deine Buttons so programmieren, dass sie auf den richtigen Bildschirm wechseln.

        # Mache Folgendes

        Benutze den `onEvent` Baustein, den Du erstellt hast, um Dein Programm auf den "Such"-Bildschirm zu wechseln, wenn der `home_search_btn` angeklickt wird.

        -   **Ziehe einen `setScreen`-Baustein heraus** und setze ihn in den `onEvent`-Baustein.
        -   **Wähle "Suchen"** aus dem `setScreen` Dropdown-Menü.
        -   **Starte Deine Anwendung** und teste die `home_search_btn` Schaltfläche.
      U4 Model Program 5: |-
        # Wire Up the Other Buttons

        Now that you've made one button work, just follow the same pattern for all of your others.

        # Do This

        -   **Add an `onEvent` block** for each button.
        -   **Select the button ID** from the "id" dropdown.
        -   **Add a `setScreen` block** inside each `onEvent` block.
        -   **Select the screen ID** from each `setScreen` dropdown.
        -   **Run your app** and test that all of the buttons work.
      U4 Model Program 5_2018: |-
        # Wire Up the Other Buttons

        Now that you've made one button work, just follow the same pattern for all of your others.

        # Do This

        -   **Add an `onEvent` block** for each button.
        -   **Select the button ID** from the "id" dropdown.
        -   **Add a `setScreen` block** inside each `onEvent` block.
        -   **Select the screen ID** from each `setScreen` dropdown.
        -   **Run your app** and test that all of the buttons work.
      U4 Model Program 5_2019: |-
        # Andere Schaltflächen anschließen

        Nachdem du nun eine Taste zum Funktionieren gebracht hast, folgen nun einfach dem gleichen Muster für alle anderen.

        # Mach Folgendes

        -   Erstelle für jede Schaltfläche ein Ereignis, das beim Drücken der Taste auf den entsprechenden Bildschirm verweist.
        -   Führe deine App aus und teste, ob alle Schaltflächen funktionieren.
      Underground Avoiding Lava: Lava versteckt sich unter manchen dieser Bausteine,
        die du abdecken musst, bevor du dich vorwärts bewegst. Ein „Wenn“-Befehl ist
        hier praktisch. Füge einen „Bewege vorwärts“-Befehl an der richtigen Stelle
        ein, um diese Bausteine zu meiden.
      Underground Avoiding Lava_2019: Lava versteckt sich unter manchen dieser Bausteine,
        die du abdecken musst, bevor du dich vorwärts bewegst. Ein „Wenn“-Befehl ist
        hier praktisch. Füge einen „Bewege vorwärts“-Befehl an der richtigen Stelle
        ein, um diese Bausteine zu meiden.
      Underground If Statements: Jetzt wird es schwierig. Hole dir 3 Redstones, falle
        dabei aber nicht in die Lava. Verwende ein "Wenn"-Kommando, um das Kopfsteinpflaster
        über die Lava zu legen, die du aufdeckst.
      Underground If Statements_2019: Jetzt wird es schwierig. Hole dir 3 Redstones,
        falle dabei aber nicht in die Lava. Verwende ein "Wenn"-Kommando, um das Kopfsteinpflaster
        über die Lava zu legen, die du aufdeckst.
      Using Accelerometer Events: "Today you’re going to learn how to use and create
        **functions**.\n\nCreating a function lets you make your own blocks! There
        are two parts to a function: \n\nMaking a newly named block that has all of
        the code you want to run inside of it. \n\\-xml of function definition- \n\nThe
        single green block itself that you use, or call, to run the function you created.\n\\-xml
        of function call-\n\nPrepare to get familiar with functions, learn how to
        edit them, and create your own!"
      Using Accelerometer Events_2018: "Today you’re going to learn how to use and
        create **functions**.\n\nCreating a function lets you make your own blocks!
        There are two parts to a function: \n\nMaking a newly named block that has
        all of the code you want to run inside of it. \n\\-xml of function definition-
        \n\nThe single green block itself that you use, or call, to run the function
        you created.\n\\-xml of function call-\n\nPrepare to get familiar with functions,
        learn how to edit them, and create your own!"
      Using Accelerometer Events_2019: "Today you’re going to learn how to use and
        create **functions**.\n\nCreating a function lets you make your own blocks!
        There are two parts to a function: \n\nMaking a newly named block that has
        all of the code you want to run inside of it. \n\\-xml of function definition-
        \n\nThe single green block itself that you use, or call, to run the function
        you created.\n\\-xml of function call-\n\nPrepare to get familiar with functions,
        learn how to edit them, and create your own!"
      'Video: Intro to CSS Part 2_2019': |-
        ## Zu berücksichtigende Frage

        -   Woher weiß die Webseite, welches Stylesheet sie verwenden soll?
      'Video: Intro to CSS_2019': |-
        ## Zu berücksichtigende Fragen

        -   Inwiefern unterscheidet sich der Stil einer Webseite von der Struktur?
        -   Warum möchtest du, dass die Webseite einen bestimmten Stil hat?
      Vigenere: "# Verschlüsseln und Entschlüsseln einer Nachricht mit der Vigenère-Verschlüsselung\n\nDies
        ist eine interaktive Version der Vigenère-Chiffre, die die Ver- und Entschlüsselung
        animiert, während sie stattfindet, mit einem Stück Text zum Ver- und Entschlüsseln
        und dem Schlüssel.\n\n# Mache Folgendes\n\n### Eine Nachricht verschlüsseln\n\nKlicke
        mehrmals auf \"Schritt\" und verfolge, was passiert. Achte darauf:\n\n-   Wie
        der Chiffriertext entsteht\n-   Was passiert, wenn man zum letzten Zeichen
        des Schlüssels gelangt?\n-   Nachdem du ein paar Zeichen durchgegangen bist,
        klicke auf \"Ausführen\", um den Rest zu sehen.\n-   Klicke auf Neustart und
        spiele die Animation erneut ab. Du kannst den Geschwindigkeitsregler verwenden,
        um die Animation zu beschleunigen oder zu verlangsamen.  \n\n![](https://images.code.org/06858f88ac12997bba73f4f76638a068-image-1443574425185.gif)\n\n###
        Eine Nachricht entschlüsseln\n\nVerschlüssele eine Nachricht wie oben beschrieben,
        dann:\n\n-   Markiere und kopiere den verschlüsselten Text\n-   Füge diesen
        in den Klartextbereich ein. Hinweis: Ändere den Schlüssel nicht.\n-   Ändere
        den Umschalter Verschlüsseln/Entschlüsseln auf \"Entschlüsseln\".\n-   Drücke
        \"Schritt\"  ein paar Mal und dann \"Ausführen\"\n\nDu solltest sehen, wie
        der Originaltext entsteht.\n![](https://images.code.org/dc89d6c19c17adb23b6b5ff9a62c4583-image-1443574425182.gif)\n\nWie
        schwer wäre es, eine mit dieser Verschlüsslungsmethode verschlüsselten Nachricht
        zu knacken? Macht die Länge der Passfeder einen Unterschied?"
      Virtual Pet 1: "Dies ist Geraldine, eine Giraffe und dein neues Haustier.  \n\nWas
        denkst du wird passieren, wenn du auf \"▶ Ausführen\" drückst und danach auf
        die Giraffe?"
      Virtual Pet 1 Predict: "**Mache eine Vorhersage:** Dies ist Geraldine, eine
        Giraffe und dein neues Haustier.  \n\nWas denkst du wird passieren, wenn du
        auf \"▶ Ausführen\" drückst und danach auf die Giraffe?"
      Virtual Pet 1_2019: "**Freispiel**: Uiuiui! Schau dir dieses coole Haustier
        an! \n\nWährend du den untenstehenden Code lesen, fragen dich selbst:\n\n-
        \  Wie befiehlt man dem Haustier, sich zu bewegen? \n-   Was passiert, wenn
        das Haustier den Eisbecher berührt? Was ist mit dem Pfeffer?\n-   Wie wird
        die Variable `energy` verwendet? Wie kannst du den aktuellen `energy`-Wert
        des Haustieres überprüfen?\n\nFühre den Code aus und spiele mit dem Haustier!
        Wenn du fertig bist, klicke auf **Beenden**."
      Virtual Pet 2: "Dort ist eine Schlammpfütze in der Ecke.  \n\nErstelle einen
        **Event**, sodass sich ihre Farbe in Braun verändert, wenn Geraldine die Pfütze
        berührt."
      Virtual Pet 2_2019: "Jetzt bist du an der Reihe, dein eigenes virtuelles Haustier
        zu erstellen! Beginne, indem du ihm einen Look gibst, der Dir gefällt.\n\n1.
        \ Klicke auf die Registerkarte **Kostüme** oben links auf dem Bildschirm (neben
        **Code**). \n2.  Bearbeite das Startkostüm oder füge ein neues hinzu, das
        Dir gefällt. \n3.  Ändere das Kostüm des Sprites in deinem eigenen im untenstehenden
        Code.\n4.  Klicke auf **Laufen**, um den neuen Look Ihres Haustieres zu sehen!"
      Virtual Pet 3: "Es geht ja nicht, dass hier eine dreckige Giraffe herumwandert!
        \ \n\n1.  Füge eine neue Seifenfee zum Bildschirm hinzu.\n2.  Kannst du es
        so programmieren, dass die Giraffe ihre normale Farbe zurückerhält, wenn sie
        die Seife berührt?\n\n* * *\n\nBenutze diesen Block, um die Farbe zurückzusetzen:\n<xml><block
        type=\"gamelab_removeTint\" inline=\"true\">\n      <value name=\"THIS\">\n
        \       <block type=\"sprite_variables_get\">\n          <title name=\"VAR\">mySprite</title>\n
        \       </block>\n      </value>\n    </block></xml>"
      Virtual Pet 3_2019: |-
        Erstelle Events, damit sich Dein Haustier auf Befehl bewegt!

        Beginne, indem du <xml><block type="gamelab_keyPressed" block-text="the while up key pressed event block"><title name="CONDITION">"while"</title><title name="KEY">"up"</title></block></xml> zusammen mit <xml><block type="gamelab_moveInDirection" block-text="the move in direction action block"><title name="DIRECTION">"North"</title></block></xml> verwendest, um Dein Haustier dazu zu bringen, sich nach Norden zu bewegen \*\*während der Pfeil nach oben gedrückt wird.

        Wiederhole die obigen Schritte für die anderen drei Richtungen (Süd, West, Ost) und die Pfeiltasten (unten, links, rechts)!
      Virtual Pet 4: "Wir müssen ja nicht jedes Mal warten, bis dass die Giraffe sich
        selbst wäscht.  \n\nFüge ein Verhalten an die Seife hinzu, sodass dieser bewegt
        werden kann, und schleife sie dann hinüber um die Giraffe zu waschen!"
      Virtual Pet 4_2019: "Lasst uns wanderndes Essen machen!\n\n1.  Füge **zwei\\*\\***
        Sprites zu deiner Welt hinzu. \n2.  Lasse ein Sprite so aussehen, wie es dein
        Haustier essen **möchte**, und das andere so, wie es **nicht** essen möchte.\n3.
        \ Lasse jeden Nahrungs-Sprite mit dem **wandern** Verhalten beginnen, unmittelbar
        nachdem es erscheint."
      Virtual Pet 5: "All dies Spielen verbraucht viel Energie!  \n\nFüge Aktionen
        an jeden Event hinzu, sodass die Giraffe ein bisschen kleiner wird (5 Pixel
        schrumpft), jedes Mal wenn sie mit einer Fee zusammenprallt.  "
      Virtual Pet 5_2019: |-
        Verwende <xml><block type="gamelab_checkTouching" block-text="the when touching block"></block></xml> mit <xml><block type="gamelab_jumpTo" block-text="the jump to location block"></block></xml> zum **simulierten** "Essen" in der virtuellen Welt!

        1.  Erstelle ein Ereignis, bei dem eines der Nahrungs-Sprites an einen beliebigen Ort springt, wenn Dein Haustier es berührt.
        2.  Wiederhole das oben Gesagte für das andere Nahrungsprite.
      Virtual Pet 6: "Eine ausgewogene Ernährung ist wichtig! Wir müssen die Giraffe
        füttern, damit sie wieder zu Kräften kommt.  \n\nFüge einen Apfel hinzu und
        lasse ihn die Giraffe wieder zu ihrer normalen Größe zurückbringen, wenn sich
        die beiden Sprites berühren.  "
      Virtual Pet 6_2019: "Benutze  <xml><block type=\"variables_set\" block-text=\"the
        set variable block\"><title name=\"VAR\">energy</title></block></xml> zusammen
        mit  <xml><block type=\"math_change\" block-text=\"the change variable block\"><title
        name=\"VAR\">energy</title></block></xml>, damit die Nahrungsaufnahme deines
        Tieres auch seine Energie beeinflusst! Je mehr Energie es hat, desto schneller
        bewegt es sich! \n\n1.  Stelle die Variable `energy` beim Programmstart auf
        5.\n2.  Wenn Dein Haustier Futter isst, das es **mag**, gib 1 zu `energy`.\n3.
        \ Wenn dein Haustier Nahrung isst, die es **nicht mag**, stell `energy` wieder
        auf 5 ein.\n4.  Ändere jedes Pfeiltastenereignis so, dass dein Haustier nun
        `energy`-Pixel anstelle einer bestimmten Zahl bewegt."
      Virtual Pet 7_2019: "Du kannst den `energy`-Wert deines Haustieres mit <xml><block
        type=\"gamelab_printText\" block-text=\"the print block\"></block></xml> überprüfen,
        einem neuen Baustein, der in der Kategorie `Welt` zu finden ist! \n\nErstelle
        ein Ereignis, bei dem der Wert von `energy` gedruckt wird, wenn das Haustier-Sprite
        angeklickt wird. "
      Virtual Pet 8_2019: "**Freispiel:** Dein virtuelles Haustier ist _ABSOLUT UNGLAUBLICH!_.
        \n\nWas kannst du noch tun? Probiere diese Ideen aus:\n\n-   Ändere den Hintergrund
        in eine Farbe oder ein Bild.\n-   Mehr anzeigen! Versuche *\"Yum! Energie
        erhöht!\" \\_ anzeigen zu lassen wenn das Haustier Nahrung isst, die es mag,
        oder \\_\"Yuck! Energie zurückgesetzt!\"* wenn es Nahrung isst, die es nicht
        mag.\n-   Füge ein weiteres Sprite hinzu, das auf eine andere Weise mit deinem
        Haustier interagiert. Wie wäre es mit einem **Spielzeug** Sprite?\n-   Füge
        eine weitere Variable hinzu, die dein Haustier oder die Welt beeinflussen
        kann. Was könnte `happiness` oder `age` bewirken?\n-   Experimentiere mit
        Verhaltensweisen! Versuche das **Wandern**-Verhalten zu bearbeiten um die
        Nahrungs-Sprites zu verlangsamen oder zu beschleunigen (Hinweis: Ihre \"Geschwindigkeit\"
        ist derzeit 5...)."
      Virtual Pet Freeplay: "Freispiel: was alles noch kannst du deine Giraffe tun
        lassen? \n\n-   Kannst du noch ein paar speziale Dinge für dein virtuelles
        Haustier hinzufügen?  \n-   Kannst du ihr ein paar Freunde besorgen?  "
      'Widget: Text Compression': Suche im Text nach Mustern (Worte oder Sätze die
        sich wiederholen). Trage die Muster die du findest in das Wörterbuch rechts
        ein. Wenn du einen Eintrag in das Wörterbuch machst, wird das Symbol des Eintrags
        die Muster im Text ersetzen.
      behaviors 1: |-
        Mach eine Vorhersage! Lies den Code.

        -   Das Sprite wird sich drehen.
        -   Das Sprite wird schrumpfen.
        -   Das Sprite wird sich bewegen.
        -   Das Sprite wechselt die Farbe.
      behaviors 2: |-
        Fliege die Rakete zu den Sternen!

        -   Ändere das Verhalten der Rakete so, dass sie im Anzeigebereich nach oben fliegt.
      behaviors 3: |-
        Hilf dem Rover, den Roboter zu überholen!

        -   Editiere das Verhalten des Rover-Sprites (oben), so dass es sich schneller bewegt als der Roboter.
      behaviors 3a: |-
        Der <xml><block type="sprite_parameter_get" block-text="this sprite"><title name="VAR">this sprite</title></block></xml> Baustein sollte anstelle des Bausteins `Kostüm` verwendet werden. Dadurch funktioniert es für jedes Sprite, unabhängig davon, welches Kostüm es verwendet.

        **Debug:** Lasse alle Sterne auf die gleiche Weise drehen!
      behaviors 4: Mach eine Vorhersage! Welchen Weg wird der Satellit nehmen, um
        das Sonnensystem zu erreichen?
      behaviors 5: |-
        Schreibe Dein eigenes Verhalten.

        -   Schreibe ein neues Verhalten für diesen Astronauten, um ihn zu einem der vier Schiffe im Ausstellungsbereich zu führen.
      behaviors 6: |-
        Lass den Ball rollen.

        -   Erstelle ein neues Verhalten und benutze es, um den Ball zum Rollen zu bringen. Dein Verhalten sollte zwei verschiedene Aktionen kombinieren.

        ![](<https://images.code.org/4c81af6da51ce5b8ce83e9056dbfe34c-image-1567714812224.2019-09-05 16_19_45.gif>)
      behaviors 7: |-
        Fahren Sie in den Horizont!

        -   Erstelle ein neues Verhalten und benutze es, damit das Auto nach oben fährt (Norden) und schrumpft. Wenn du es richtig machst, könnte es so aussehen, als würde es in den Horizont hinausfahren.

        ![](<https://images.code.org/e0ea2b008bf557ea81e99a27dd03ef03-image-1567713536857.2019-09-05 15_58_25.gif>)
      behaviors free play: "**Freiespiel:** Erstelle deine eigene Weltraumszene!"
      comment_intro_maze_2018: "\\_\"Ich bin verwirrt. Bitte helfe mir, sodass  ich
        mich erinnere, an wie ich dieses Rätsel lösen kann.“  \n\n* * *\n\nUm dieses
        Rätsel zu bestehen, löse das Labyrinth und benutze den neuen <xml><block type=\"comment\">\n
        \   <title name=\"TEXT\"> </title>\n  </block></xml>-Block, um schnelle Gedächtnisstützen
        für dich zu hinterlassen. Die können dir helfen dich daran zu erinnern, was
        du am Tun warst und warum!Kommentare werden nur für **dich** benutzt - sie
        haben keinen Einfluss auf den Spielbereich."
      course1_artist_loops_challenge2: Lasst uns ein Spiel spielen! Zeichne so viele
        X's wie möglich! Kannst du drei hintereinander bekommen?
      course1_artist_loops_challenge3: |-
        **Zwitscher!**

        _"Kannst du mir helfen, zwei Vogelhäuser zu bauen?"_
      course1_artist_loops_challenge4: \_"Es ist Zeit zum Würfeln! Kannst du mir helfen,
        sie zu zeichnen?"
      course1_maze_debugging_challenge1: Beseitige die Fehler in diesem Level. Entferne
        die Blöcke, welche nicht passen, und füge die fehlenden Blöcke hinzu. Bring
        den Vogel zum Schwein!
      course1_maze_debugging_challenge2: Behebe die Fehler auf dieser Ebene. Das sind
        zwar die richtigen Blöcke, aber sie befinden sich in der falschen Reihenfolge!
      course1_maze_seq_challenge2: Du kannst dich nur bis zu viermal in jede Richtung
        bewegen. Kannst du einen Weg finden, bevor dir die Bausteine ausgehen?
      course1_playlab_events_challenge1: |-
        "Wo verstecken sich meine Freunde? In diesem Spiel wird mit einem Klick auf mich meine Freundin Olive die Katze sichtbar!"\_

        Ein Klick auf Olive lässt Robin erscheinen! Kannst du Code schreiben, um auch den Rest der Charaktere anzuzeigen?

        Achten bei diesem Rätsel darauf, dass du auf Hinweise klickst! Die Hinweise helfen Dir, dieses Projekt Schritt für Schritt durchzuführen!

        ![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png>)
      course1_playlab_events_challenge2: |-
        _"Lasst uns eine Party feiern! Gib meinen Freunden etwas zu tun, indem du sie anklickst oder antippst."_

        Was werden die Tiere sagen? Was wird sonst noch passieren?

        Achte bei diesem Rätsel darauf, dass du auf Hinweise klickst! Die Hinweise werden dir lustige Dinge zum Ausprobieren geben!

        ![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png>)
      course2_artist_nestedLoops_challenge1: "Kannst du herausfinden, wie man ein
        solches Bild zeichnen kann? \n\n-   Beide Formen haben **50 Pixel lange Seiten**\n-
        \  Die _Achtecke_ werden mit **45 Grad** Drehungen gezeichnet. \n-   Die _Dreiecke_
        werden mit **120 Grad** Drehungen gezeichnet."
      course2_artist_nestedLoops_challenge2: |-
        Weißt du wie man dieses Bild erstellt?

        -   Die erste innere Schleife sollte ein Achteck erstellen
        -   Die zweite innere Schleife sollte ein Sechseck erstellen
        -   Die dritte innere Schleife sollte ein Quadrat erstellen
      course2_artist_prog_challenge1: Zeichne Räume für jedes Tier. Es gibt viele
        verschiedene Möglichkeiten, dieses Rätsel zu lösen, also viel Spaß!
      course2_artist_prog_challenge2: _Hilf mir, die gelben Linien auf dieser Straße
        zu zeichnen!_
      course2_bee_conditionals_challenge1: Sammle den ganzen Nektar oder mache den
        ganzen Honig. Du kannst nur Nektar aus Blumen sammeln und Honig aus Waben
        herstellen. Überprüfe, ob es eine Blume oder eine Wabe gibt.
      course2_bee_conditionals_challenge2: Sammele den gesamten Nektar und stelle
        den gesamten Honig her. Du kannst den gesamten Nektar in einer Blüte sammeln,
        indem du die Schleife `solange wie Nektar > 0 ist` verwendest.
      course2_collector_loops_challenge2: |-
        _"Lasst uns nach Schätzen suchen - mit Schleifen!"_

        Hilf dem Sammler, indem du diesen Code debugst. Hol dir den ganzen Schatz!
      course2_collector_prog_challenge1: Schau genau hin! Kannst du alle **10** Schätze
        einsammeln?
      course2_collector_prog_challenge2: Es gibt **20** Schätze in dieser Höhle zu
        finden. Sammle mindestens die Hälfte, um diese Herausforderung zu beenden!
      course2_harvester_loops_challenge1: Sammle den gesamten Mais ein.
      course2_harvester_loops_challenge2: Ernte den gesamten Salat. Vermeide die Bäume
        und Felder!
      course2_maze_programming_challenge1: '"Das Schwein versteckt sich! Kannst du
        mir helfen, mich zurechtzufinden?"\_'
      course2_maze_programming_challenge2: Manchmal gibt es mehr als eine Lösung für
        ein Problem. Manchmal ist es schneller, rückwärts zu gehen, als vorwärts!
      course3_artist_functions_challenge1: Sobald du eine Funktion definiert hast,
        kannst du sie immer wieder aufrufen - wann und wo immer du willst! Teste diesen
        Code, um zu sehen, wie er funktioniert, und ändere ihn dann, um dein eigenes
        tolles Design zu erstellen!
      course3_artist_functions_challenge2: "Du kannst nicht nur zu einigen voreingestellten
        Stellen springen, wie z.B. den Ecken der Leinwand, sondern auch einen `springen
        zu` Befehl verwenden, um zu absolut jeder beliebigen Stelle zu gelangen! Teste
        diesen Code, um zu sehen, wie er funktioniert, und übernimm das Programm dann
        für dich selbst! \n\n<xml>\n  <block type=\"jump_to_xy\">\n    <title name=\"XPOS\">???</title>\n
        \   <title name=\"YPOS\">???</title>\n    </block></xml>"
      course3_bee_debugging_challenge1: Beobachte, wie sich die Biene den Nektar holt.
        Kannst du die gleiche Art Muster verwenden, um der Biene bei der Herstellung
        des gesamten Honigs zu helfen?
      course3_bee_functions_challenge1: Diese Aufgabe musst du selbständig lösen.
        Das könnte schwieriger sein, als es aussieht!
      course3_bee_functions_challenge2: Für diese Herausforderung bist du auf dich
        allein gestellt!
      course3_bee_functions_challenge3: Erstelle eine neue Funktion, um den gesamten
        Nektar und Honig zu sammeln, während ein Weg vor dir liegt. Verwende sie,
        um das Rätsel abzuschließen!
      course3_bee_functions_challenge4: Wende alles an, was du gelernt hast, um dieses
        Rätsel abzuschließen!
      course3_collector_debugging_challenge2: Bist du ein Spezialist für verschachtelte
        Schleifen? Nutze das bisher Gelernte, um dir den ganzen Schatz zu holen!
      course3_farmer_condLoops_challenge1: "Die Kürbisse markieren die Stelle, an
        der du dich drehen solltest. Andernfalls fahre weiter vorwärts, aber denke
        daran, den gesamten Salat oder Mais auf dem Weg zu sammeln. \n\n**Jede versteckte
        Erntestelle hat nur einen Mais oder Salat.**"
      course3_farmer_condLoops_challenge2: |-
        _"Es ist ein vielseitiges Gemüselabyrinth!"_

        Bei den Kürbissen rechts, bei den Salatköpfen links abbiegen. Sammele alles ein, um den Level abzuschließen.
      course3_farmer_until_challenge2: Verwende Wenn/Sonst-Bausteine, um dem gewundenen
        Pfad zu folgen. Verwende an jeder Ecke den Befehl `entferne 1` in einer Schleife,
        um die Erdhaufen zu entfernen.
      course3_maze_debugging_challenge1: _"Gehe ich hier immer im Kreis?"_
      course3_maze_debugging_challenge2: _"Wenn ich mich zu oft drehe, wird mir schwindelig!
        Hilf mir, das Schwein mit nur vier Drehungen zu erreichen."_
      course3_maze_until_challenge1: Keine Hilfe, nur eine Aufgabe. Bring den Zombie
        zur Sonnenblume.
      course3_playLab_challenge1: "_Die **Eichhörnchen** sind entsetzt, dass ein **Dinosaurier**
        in die Stadt gekommen ist! Kann der tapfere **Ritter** sie alle beruhigen?_
        \n\nRegeln: \n\n1.  _Wenn du die Eichhörnchen berührst, erzielst du Punkte._\n2.
        \ _Wenn du den Dinosaurier berührst, verlierst du viele Punkte._ \n\nHier
        ist eine andere Art von Spiel, das bereits für dich begonnen wurde! Spiele
        es, um zu sehen, wie es funktioniert. \n\nEs sollte etwas passieren, wenn
        du genug oder zu wenig Punkte machst. Füge ein wenig Code zu den Funktionen
        `Spiel gewinnen` und `Spiel verlieren` hinzu, damit das Spiel so funktioniert,
        wie es sollte. Klicke auf die Hinweise, wenn du Ideen brauchst!"
      course4_artist_binary_challenge1: Du kannst jeden Binärwert (0 oder 1) nur jeweils
        einmal in diesem Rätsel verwenden. Versuche verschachtelte Schleifen zu verwenden,
        um diese Zeichnung zu vervollständigen.
      course4_artist_binary_challenge2: |-
        Auf diesem Gitter sind 256 Bits dargestellt - das bedeutet, dass es für eine kleine Änderung leicht ist, große Probleme zu verursachen. Bist du emsig genug, um dieses Logo wiederherzustellen?
        ![](https://images.code.org/74e15f513982b47762dd33ebbc21e5e9-image-1498776314610.png)
      course4_artist_concept_challenge2: Zeichne mit dem nachfolgenden Code fünf Windräder.
      course4_artist_functions_challenge2: "Du kannst nicht nur zu einigen voreingestellten
        Stellen springen, wie z.B. den Ecken der Leinwand, sondern auch einen `springen
        zu` Befehl verwenden, um zu absolut jeder beliebigen Stelle zu gelangen! Teste
        diesen Code, um zu sehen, wie er funktioniert, und übernimm das Programm dann
        für dich selbst! \n\n<xml>\n  <block type=\"jump_to_xy\">\n    <title name=\"XPOS\">???</title>\n
        \   <title name=\"YPOS\">???</title>\n    </block></xml>"
      course4_artist_fwp_challenge1: Versuche, dieses Programm auszuführen und verändere
        es, um zu sehen, was passiert. Kannst du herausfinden, wie es funktioniert?
        (Oder lösche es und ersetze es durch etwas ganz anderes)
      course4_artist_variables_challenge1: Kannst eine Variable `Länge` erstellen
        und sie bei der Erstellung dieses Musters verwenden?
      course4_bee_for_challenge1: Verwende diese Schleife, um den ganzen Nektar zu
        sammeln. Es gibt einige Aktionen, die du `"Zähler"-mal wiederholen musst`.
      course4_bee_fwp_challenge1: Verwende eine "Für-Schleife" in einer Funktion,
        um den gesamten Mais einzusammeln. Dieselbe "Für-Schleife" kann zu verschiedenen
        Maximalwerten hochzählen, indem der Parameter "Länge" verwendet wird.
      course4_bee_fwp_challenge2: |-
        Let's see if you can handle this one final test! Give it everything you've got!

        Use one `for loop` in a function to collect all of the vegetables in the row. Make the `for loop` count to different maximum values by using the `length` parameter. Make your program as short as possible by using a second `for loop` outside the function.

        Good luck!
      course4_collector_nested_loops_challenge2: |-
        _“Lass uns auf die Schatzsuche gehen - mit Schleifen!“_

        Hilf dem Sammler, mindestens zwei Stapel Schätze zu erreichen und verwende dabei nur die Blöcke in deinem Werkzeugkasten. Es ist möglich, alle 4 einzusammeln.
      course4_harvester_nested_loops_challenge1: _"Ich brauche etwas Hilfe auf dem
        Bauernhof! Hilf mir bei der Ernte von diesem Mais, indem du nur die Blöcke
        aus deiner Werkzeugkiste verwendest."_
      course4_playlab_variables_challenge1: Verwende diese Blöcke, um die Teilnehmer
        eine Klopf-Klopf-Witz teilen zu lassen. Ändere die Pointe und die Umstände,
        um deinen eigenen Witz zu erzählen!
      courseA_artist_loops10: |-
        ## Zeit um wieder an Land zu gehen. Hilf mir Steine abzulegen, so dass ich nicht ins Wasser falle!

        ![expandable](https://images.code.org/d3213d375d0271e114aa4313cdeb34be-image-1498064942606.gif)
      courseA_artist_loops10_2018: |-
        ## Zeit um wieder an Land zu gehen. Hilf mir Steine abzulegen, so dass ich nicht ins Wasser falle!

        ![expandable](https://images.code.org/d3213d375d0271e114aa4313cdeb34be-image-1498064942606.gif)
      courseA_artist_loops10_2019: |-
        ## Zeit um wieder an Land zu gehen. Hilf mir Steine abzulegen, so dass ich nicht ins Wasser falle!

        ![expandable](https://images.code.org/d3213d375d0271e114aa4313cdeb34be-image-1498064942606.gif)
      courseA_artist_loops11: |-
        ## Hilf mir Stufen zu bauen, um zu sehen, wie das Schiff davon segelt.

        ![expandable](https://images.code.org/ed19f00a2350b186fbe86ea805e17925-image-1498065450651.gif)
      courseA_artist_loops11_2018: |-
        ## Hilf mir Stufen zu bauen, um zu sehen, wie das Schiff davon segelt.

        ![expandable](https://images.code.org/ed19f00a2350b186fbe86ea805e17925-image-1498065450651.gif)
      courseA_artist_loops11_2019: |-
        ## Hilf mir Stufen zu bauen, um zu sehen, wie das Schiff davon segelt.

        ![expandable](https://images.code.org/ed19f00a2350b186fbe86ea805e17925-image-1498065450651.gif)
      courseA_artist_loops12: |-
        Der Zeichner sah etwas Lustiges in der Ferne. Zeichne, was Du denkst, was er sah!

        * * *

        ### Ideen

        ![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)
        ![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)
        ![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)
        ![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)
      courseA_artist_loops12_2018: |-
        Der Zeichner sah etwas Lustiges in der Ferne. Zeichne, was Du denkst, was er sah!

        * * *

        ### Ideen

        ![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)
        ![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)
        ![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)
        ![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)
      courseA_artist_loops12_2019: |-
        Der Zeichner sah etwas Lustiges in der Ferne. Zeichne, was Du denkst, was er sah!

        * * *

        ### Ideen

        ![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)
        ![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)
        ![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)
        ![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)
      courseA_artist_loops2: |-
        Hilf dem Künstler diese Linie 2 mal vorwärts zu zeichnen.

        ![](https://images.code.org/04501f26a36673460f5c8fe04e3e7686-image-1498002095108.gif)
      courseA_artist_loops2_2018: |-
        Hilf dem Künstler diese Linie 2 mal vorwärts zu zeichnen.

        ![](https://images.code.org/04501f26a36673460f5c8fe04e3e7686-image-1498002095108.gif)
      courseA_artist_loops2_2019: |-
        Hilf dem Künstler diese Linie 2 mal vorwärts zu zeichnen.

        ![](https://images.code.org/04501f26a36673460f5c8fe04e3e7686-image-1498002095108.gif)
      courseA_artist_loops3: |-
        Unser Künstler versucht 5 mal eine Linie zu zeichnen, aber er schafft es nicht. Kannst du helfen?

        ![expandable](https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif)
      courseA_artist_loops3_2018: |-
        Unser Künstler versucht 5 mal eine Linie zu zeichnen, aber er schafft es nicht. Kannst du helfen?

        ![expandable](https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif)
      courseA_artist_loops3_2019: |-
        Unser Künstler versucht 5 mal eine Linie zu zeichnen, aber er schafft es nicht. Kannst du helfen?

        ![expandable](https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif)
      courseA_artist_loops4: |-
        Verwende jetzt eine <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="2-6">5</title></block></xml> Schleife um die Linie 5 mal zu zeichnen!

        ![](https://images.code.org/b2bc7f52ffdac2ad0d8e7c2d798c24df-image-1501875818062.gif)
      courseA_artist_loops4_2018: |-
        Verwende jetzt eine <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="2-6">5</title></block></xml> Schleife um die Linie 5 mal zu zeichnen!

        ![](https://images.code.org/b2bc7f52ffdac2ad0d8e7c2d798c24df-image-1501875818062.gif)
      courseA_artist_loops4_2019: |-
        Verwende jetzt eine <xml><block type="controls_repeat_simplified_dropdown" block-text="repeat"><title name="TIMES" config="2-6">5</title></block></xml> Schleife um die Linie 5 mal zu zeichnen!

        ![](https://images.code.org/b2bc7f52ffdac2ad0d8e7c2d798c24df-image-1501875818062.gif)
      courseA_artist_loops5: |-
        ## Zeichne eine Linie, welche 5 Schritte lang ist. Das wird unser Horizont.

        ![expandable](https://images.code.org/dc7c4317177f2b94421c5aa589c31ac7-image-1498002771889.gif)
      courseA_artist_loops5_2018: |-
        ## Zeichne eine Linie, welche 5 Schritte lang ist. Das wird unser Horizont.

        ![expandable](https://images.code.org/dc7c4317177f2b94421c5aa589c31ac7-image-1498002771889.gif)
      courseA_artist_loops5_2019: |-
        ## Zeichne eine Linie, welche 5 Schritte lang ist. Das wird unser Horizont.

        ![expandable](https://images.code.org/dc7c4317177f2b94421c5aa589c31ac7-image-1498002771889.gif)
      courseA_artist_loops6: |-
        ## Lass uns einen schönen Hügel in den Hintergrund zeichnen.

        ![expandable](https://images.code.org/f64d93b6d9a7d9c3edfce3c227c0dd49-image-1498062074031.gif)
      courseA_artist_loops6_2018: |-
        ## Lass uns einen schönen Hügel in den Hintergrund zeichnen.

        ![expandable](https://images.code.org/f64d93b6d9a7d9c3edfce3c227c0dd49-image-1498062074031.gif)
      courseA_artist_loops6_2019: |-
        ## Lass uns einen schönen Hügel in den Hintergrund zeichnen.

        ![expandable](https://images.code.org/f64d93b6d9a7d9c3edfce3c227c0dd49-image-1498062074031.gif)
      courseA_artist_loops7: |-
        ## Benutze die <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml> Schleife um Wellen zum Wasser hinzuzufügen.

        ![expandable](https://images.code.org/01c5f6772a8b608a2fca5f6de7e25c67-image-1498062629139.gif)
      courseA_artist_loops7_2018: |-
        ## Benutze die <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml> Schleife um Wellen zum Wasser hinzuzufügen.

        ![expandable](https://images.code.org/01c5f6772a8b608a2fca5f6de7e25c67-image-1498062629139.gif)
      courseA_artist_loops7_2019: |-
        Benutze die <xml><block type="controls_repeat_simplified_dropdown" block-text="repeat"><title name="TIMES" config="3-10">???</title></block></xml>-Schleife, um dem Wasser Wellen hinzuzufügen.

        ![expandable](https://images.code.org/01c5f6772a8b608a2fca5f6de7e25c67-image-1498062629139.gif)
      courseA_artist_loops8: |-
        ## Wir brauchen eine Leiter hinauf aufs Boot.

        ![expandable](https://images.code.org/ee90228fae25ecca1fba589b721f9120-image-1498063066878.gif)
      courseA_artist_loops8_2018: |-
        ## Wir brauchen eine Leiter hinauf aufs Boot.

        ![expandable](https://images.code.org/ee90228fae25ecca1fba589b721f9120-image-1498063066878.gif)
      courseA_artist_loops8_2019: |-
        ## Wir brauchen eine Leiter hinauf aufs Boot.

        ![expandable](https://images.code.org/ee90228fae25ecca1fba589b721f9120-image-1498063066878.gif)
      courseA_artist_loops9: |-
        ## **Herausforderung:** Die Treppe zum Dock ist kaputt. Hilf mir, die Treppe zu reparieren.

        ![expandable](https://images.code.org/9d36df1afb6a738ba7bcff8734403ff3-image-1498063282074.gif)
      courseA_artist_loops9_2018: |-
        ## **Herausforderung:** Die Treppe zum Dock ist kaputt. Hilf mir, die Treppe zu reparieren.

        ![expandable](https://images.code.org/9d36df1afb6a738ba7bcff8734403ff3-image-1498063282074.gif)
      courseA_artist_loops9_2019: |-
        ## **Herausforderung:** Die Treppe zum Dock ist kaputt. Hilf mir, die Treppe zu reparieren.

        ![expandable](https://images.code.org/9d36df1afb6a738ba7bcff8734403ff3-image-1498063282074.gif)
      courseA_artist_loops_challenge1: |-
        Du kannst eine Schleife nehmen um viele Linien hintereinander zu zeichnen.

        Kannst du ein Haus zeichnen? Mach es so, wie es dir gefällt! Versuche Muster zu finden, die sich wiederholen!

        Hier sind ein paar Ideen:

        ![](https://images.code.org/6e59e881e0aa1d31186e81a203655a0b-image-1501785654664.png)
      courseA_artist_loops_challenge1_2018: |-
        Du kannst eine Schleife nehmen um viele Linien hintereinander zu zeichnen.

        Kannst du ein Haus zeichnen? Mach es so, wie es dir gefällt! Versuche Muster zu finden, die sich wiederholen!

        Hier sind ein paar Ideen:

        ![](https://images.code.org/6e59e881e0aa1d31186e81a203655a0b-image-1501785654664.png)
      courseA_artist_loops_challenge1_2019: |-
        Du kannst eine Schleife nehmen um viele Linien hintereinander zu zeichnen.

        Kannst du ein Haus zeichnen? Mach es so, wie es dir gefällt! Versuche Muster zu finden, die sich wiederholen!

        Hier sind ein paar Ideen:

        ![](https://images.code.org/6e59e881e0aa1d31186e81a203655a0b-image-1501785654664.png)
      courseA_artist_loops_challenge2a: |-
        _"Hilf mir den Zeltplatz fertigzustellen!"_

        Benutze die Blöcke im Werkzeugkasten um diese drei Zelte zu zeichnen.
      courseA_artist_loops_challenge2a_2018: |-
        _"Hilf mir den Zeltplatz fertigzustellen!"_

        Benutze die Blöcke im Werkzeugkasten um diese drei Zelte zu zeichnen.
      courseA_artist_loops_challenge2a_2019: |-
        _"Hilf mir den Zeltplatz fertigzustellen!"_

        Benutze die Blöcke im Werkzeugkasten um diese drei Zelte zu zeichnen.
      courseA_collector_loops1: |-
        **Freies Spiel:** Das ist Laurel, die Abenteurerin! Bewege sie umher und sammle so viele Schätze wie du kannst.

        Ziehe Blöcke in den Arbeitsbereich und versuche herauszufinden, wie du einen Schatz einsammeln kannst. Du brauchst mindestens einen Diamant um dieses Level zu bestehen.
      courseA_collector_loops12: |-
        _"Heureka!  Hol dir so viele Schätze wie möglich!"_\
        (Du musst nicht alle einsammeln.)
      courseA_collector_loops12_2018: |-
        _"Heureka!  Hol dir so viele Schätze wie möglich!"_\
        (Du musst nicht alle einsammeln.)
      courseA_collector_loops12_2019: |-
        _"Heureka!  Hol dir so viele Schätze wie möglich!"_\
        (Du musst nicht alle einsammeln.)
      courseA_collector_loops1_2018: |-
        **Freies Spiel:** Das ist Laurel, die Abenteurerin! Bewege sie umher und sammle so viele Schätze wie du kannst.

        Ziehe Blöcke in den Arbeitsbereich und versuche herauszufinden, wie du einen Schatz einsammeln kannst. Du brauchst mindestens einen Diamant um dieses Level zu bestehen.
      courseA_collector_loops1_2019: |-
        **Freies Spiel:** Das ist Laurel, die Abenteurerin! Bewege sie umher und sammle so viele Schätze wie du kannst.

        Ziehe Blöcke in den Arbeitsbereich und versuche herauszufinden, wie du einen Schatz einsammeln kannst. Du brauchst mindestens einen Diamant um dieses Level zu bestehen.
      courseA_collector_loops2: |-
        Sammle alle Schätze ein! Bewege Laurel zu jedem Edelstein und benutze dann diesen Block:
        <xml><block type="collector_collect"/></xml>
      courseA_collector_loops2_2018: 'Hole alle drei Haufen! Bewege Laurel auf jedes
        Stück des Schatzes und benutze dann diesen Baustein: <xml><block type="collector_collect"/></xml>'
      courseA_collector_loops2_2019: 'Sammle alle drei Schätze ein! Bewege Laurel
        zu jedem Edelstein und benutze dann diesen <xml><block type="collector_collect"
        block-text="get treasure"/></xml> Baustein. '
      courseA_collector_loops3: Wie kann Laurel alle fünf Schätze einsammeln, wenn
        sie nur einen <xml><block type="maze_moveEast"/></xml> Block benutzt?
      courseA_collector_loops3_2018: Wie kann Laurel alle fünf Schätze einsammeln,
        wenn sie nur einen <xml><block type="maze_moveEast"/></xml> Block benutzt?
      courseA_collector_loops3_2019: Wie kann Laurel alle fünf Schätze einsammeln,
        wenn sie nur einen <xml><block type="maze_moveEast" block-text="move east"/></xml>
        Block benutzt?
      courseA_collector_loops_challenge1: _"Kannst du mir helfen Fehler im Code zu
        finden? Ich weiß, welchen Weg ich gehen will, aber ich bin mir nicht sicher,
        wieviel Schritte ich machen muss."_
      courseA_collector_loops_challenge1_2018: _"Kannst du mir helfen Fehler im Code
        zu finden? Ich weiß, welchen Weg ich gehen will, aber ich bin mir nicht sicher,
        wieviel Schritte ich machen muss."_
      courseA_collector_loops_challenge1_2019: _"Kannst du mir helfen Fehler im Code
        zu finden? Ich weiß, welchen Weg ich gehen will, aber ich bin mir nicht sicher,
        wieviel Schritte ich machen muss."_
      courseA_collector_preLoops1: "Das ist Laurel, die Abenteurerin! \n\nDrücken
        Sie \"Ausführen\", um zu sehen, wie sie zum Schatz geht und ihn sich schnappt."
      courseA_collector_preLoops2: "Großartig!  Jetzt können Sie selbst Code hinzufügen!
        \ \n\nRaste den ![](https://images.code.org/563c0deb5c51d43cdfa72d62dec3419d-image-1508904559201.05.30.png)
        Baustein am unteren Rand des Programms ein und klicke auf \"Ausführen\"!"
      courseA_collector_preLoops3: Um den Schatz zu ergattern, raste zwei ![](https://images.code.org/54c206b62a02f1d7ea8f1bee52664ecb-image-1508905670742.25.37.png)
        Bausteine und einen ![](https://images.code.org/563c0deb5c51d43cdfa72d62dec3419d-image-1508904559201.05.30.png)
        Baustein an den unteren Rand des Programms ein und klicke auf "Ausführen"!
      courseA_collector_preLoops7: |-
        Sammle alle Schätze ein! Bewege Laurel zu jedem Edelstein und benutze dann diesen Block:
        <xml><block type="collector_collect"/></xml>
      courseA_harvester_loops1: Hilf der Erntearbeiterin, den gesamten Mais zu ernten!
      courseA_harvester_loops10: Hilf der Erntearbeiterin alle fünf Ähren Mais zu
        ernten!
      courseA_harvester_loops10_2019: Hilf der Erntearbeiterin alle fünf Ähren Mais
        zu ernten!
      courseA_harvester_loops11: 'Versuchs noch einmal alleine! '
      courseA_harvester_loops11_2019: 'Versuchs noch einmal alleine! '
      courseA_harvester_loops1_2019: Hilf der Erntearbeiterin, den gesamten Mais zu
        ernten!
      courseA_harvester_loops2: Die Erntearbeiterin muss den gesamten Mais ernten!
        Erkennst du ein Muster?
      courseA_harvester_loops2_2019: Die Erntearbeiterin muss den gesamten Mais ernten!
        Erkennst du ein Muster?
      courseA_harvester_loops3: Kannst du den ganzen Mais mit nur **einem** Gehe-Baustein
        pflücken?
      courseA_harvester_loops3_2019: Kannst du den ganzen Mais mit nur **einem** Gehe-Baustein
        pflücken?
      courseA_harvester_loops4: |-
        _"Ich brauche Hilfe, um zu herausfinden, was hier falsch läuft!"_

        Kannst du der Erntearbeiterin helfen, den Fehler in ihrem Code zu finden?
      courseA_harvester_loops4_2019: |-
        _"Ich brauche Hilfe, um zu herausfinden, was hier falsch läuft!"_

        Kannst du der Erntearbeiterin helfen, den Fehler in ihrem Code zu finden?
      courseA_harvester_loops5: Versuchs selbst! Kannst du auch den Mais am Ende ernten?
      courseA_harvester_loops5_2019: Versuchs selbst! Kannst du auch den Mais am Ende
        ernten?
      courseA_harvester_loops5a: Sieh dir den gesamten Mais an? Kannst du ihn ganz
        alleine ernten?
      courseA_harvester_loops5a_2019: Sieh dir den gesamten Mais an? Kannst du ihn
        ganz alleine ernten?
      courseA_harvester_loops5b: Kannst du deinen Code ändern, damit die Erntearbeiterin
        den gesamten Mais erntet?
      courseA_harvester_loops5b_2019: Kannst du deinen Code ändern, damit die Erntearbeiterin
        den gesamten Mais erntet?
      courseA_harvester_loops6: Du brauchst **einen**<xml><block type="maze_moveWest"
        block-text="move west"></block></xml> Baustein und **einen**<xml><block type="maze_moveNorth"
        block-text="move north"></block></xml> Baustein, um dieses Puzzle zu lösen!
      courseA_harvester_loops6_2019: Du brauchst **einen**<xml><block type="maze_moveWest"
        block-text="move west"></block></xml> Baustein und **einen**<xml><block type="maze_moveNorth"
        block-text="move north"></block></xml> Baustein, um dieses Puzzle zu lösen!
      courseA_harvester_loops7: 'Probier es selbst aus! '
      courseA_harvester_loops7_2019: 'Probier es selbst aus! '
      courseA_harvester_loops9: Kannst du herausfinden, wie man den _gesamten_ Mais
        erntet?
      courseA_harvester_loops9_2019: Kannst du herausfinden, wie man den _gesamten_
        Mais erntet?
      courseA_harvester_seq1: Hilf der Erntearbeiterin, den Mais zu finden!
      courseA_harvester_seq10: Die Erntearbeiterin muss den gesamten Mais ernten!
        Erkennst du ein Muster?
      courseA_harvester_seq10_2019: Die Erntearbeiterin muss den gesamten Mais ernten!
        Erkennst du ein Muster?
      courseA_harvester_seq11: Versuche es selbst! Ernte den gesamten Mais.
      courseA_harvester_seq11_2019: Versuche es selbst! Ernte den gesamten Mais.
      courseA_harvester_seq12: "_Danke, dass du mir hilfst!_ \n\nErnte den gesamten
        Mais."
      courseA_harvester_seq12_2019: "_Danke, dass du mir hilfst!_ \n\nErnte den gesamten
        Mais."
      courseA_harvester_seq13: Hilf der Erntearbeiterin den Mais zu ernten!
      courseA_harvester_seq13_2019: Hilf der Erntearbeiterin den Mais zu ernten!
      courseA_harvester_seq1_2019: Hilf der Erntearbeiterin, den Mais zu finden!
      courseA_harvester_seq2: 'Verwende <xml><block type="maze_moveWest"/></xml> **drei**
        mal, um den Mähdrescher zum Mais zu bringen! '
      courseA_harvester_seq2_2019: 'Benutze **drei** <xml><block type="maze_moveWest"
        block-text="move west"/></xml> Bausteine, um die Erntearbeiterin zum Mais
        zu bringen! '
      courseA_harvester_seq3: Verwende <xml><block type="maze_moveNorth"/></xml> **drei**
        mal, um die Erntearbeiterin zum Mais zu bringen! Vergiss nicht, den Mais am
        Ende auch zu pflücken.
      courseA_harvester_seq3_2019: Benutze **drei** <xml><block type="maze_moveNorth"
        block-text="move north"/></xml> Bausteine, um die Erntearbeiterin zum Mais
        zu bringen! Vergiss nicht, den Mais am Ende zu ernten.
      courseA_harvester_seq4: Füge _einen_ Baustein hinzu, um der Erntehelferin zu
        helfen, den Mais zu ernten.
      courseA_harvester_seq4_2019: Füge _einen_ Baustein hinzu, um der Erntehelferin
        zu helfen, den Mais zu ernten.
      courseA_harvester_seq5: Kannst du herausfinden, was mit diesem Code nicht stimmt?
        Hilf der Erntearbeiterin den Mais zu pflücken!
      courseA_harvester_seq5_2019: Kannst du herausfinden, was mit diesem Code nicht
        stimmt? Hilf der Erntearbeiterin den Mais zu pflücken!
      courseA_harvester_seq6: Versuche es selbst!
      courseA_harvester_seq6_2019: Versuche es selbst!
      courseA_harvester_seq7: Man muss sich in zwei Richtungen bewegen, um zum Mais
        zu gelangen! Hilf der Erntearbeiterin die richtige Richtung zu finden.
      courseA_harvester_seq7_2019: Man muss sich in zwei Richtungen bewegen, um zum
        Mais zu gelangen! Hilf der Erntearbeiterin die richtige Richtung zu finden.
      courseA_harvester_seq8: Jetzt muss die Erntearbeiterin zweimal Mais ernten!
      courseA_harvester_seq8_2019: Jetzt muss die Erntearbeiterin zweimal Mais ernten!
      courseA_harvester_seq9: Füge zwei Bausteine hinzu, um diese Aufgabe zu beenden!
      courseA_harvester_seq9_2019: Füge zwei Bausteine hinzu, um diese Aufgabe zu
        beenden!
      courseA_maze_ramp2_2018: Füge die beiden <xml><block type="maze_moveEast"/></xml>
        Bausteine an den <xml><block type="when_run"/></xml> Baustein an, um Deinen
        Code zu vervollständigen. Klicke dann auf "▶ Ausführen".
      courseA_maze_ramp2_2019: Füge die beiden<xml><block type="maze_moveEast" block-text="move
        east"/></xml> an den<xml><block type="when_run" block-text="when run"/></xml>
        an, um Deinen Code zu vervollständigen. Klicke dann auf "▶ Ausführen".
      courseA_maze_ramp3a_2018: Nimm einen <xml><block type="maze_moveNorth"/></xml>
        Baustein aus der Toolbox und füge ihn unten in die anderen Bausteine ein,
        um diesen Code abzuschließen. Dann klicke auf "▶ Ausführen".
      courseA_maze_ramp3a_2019: Nimm einen <xml><block type="maze_moveNorth" block-text="move
        north"/></xml> Baustein aus der Toolbox und füge ihn unten in die anderen
        Bausteine ein, um diesen Code abzuschließen. Dann klicke auf "▶ Ausführen".
      courseA_maze_ramp3b_2018: "Es gibt einen zusätzlichen Baustein am Ende dieses
        Codes!  \n\nZieh ihn zurück in den Werkzeugkasten, um diesen wegzuwerfen."
      courseA_maze_ramp3b_2019: "Es gibt einen zusätzlichen Baustein am Ende dieses
        Codes!  \n\nZieh ihn zurück in den Werkzeugkasten, um diesen wegzuwerfen."
      courseA_maze_ramp4a_2018: Kannst du herausfinden, welchen Block du am Ende der
        anderen Blöcke hinzufügen musst, um diesen Code zu vervollständigen?
      courseA_maze_ramp4a_2019: Kannst du herausfinden, welchen Block du am Ende der
        anderen Blöcke hinzufügen musst, um diesen Code zu vervollständigen?
      courseA_maze_ramp5a_2018: Probiere dies ganz alleine aus!
      courseA_maze_ramp5a_2019: Probiere dies ganz alleine aus!
      courseA_maze_seq1: _"Nimm diese Bausteine zu Hilfe und versuche, mich zum Schwein
        zu führen!"_
      courseA_maze_seq10: |-
        **Herausforderung:** Geh um das TNT herum, um den Vogel zum Schwein zu bringen!

        ![expandable](https://images.code.org/a656e421bc90e530a7e1ce636e507752-image-1497996976195.gif)
      courseA_maze_seq10_2018: "**Herausforderung:** Vermeide das TNT, um den Vogel
        zum Schwein zu bringen!"
      courseA_maze_seq10_2019: "**Herausforderung:** Vermeide das TNT, um den Vogel
        zum Schwein zu bringen!"
      courseA_maze_seq10_copy: |-
        **Herausforderung:** Geh um das TNT herum, um den Vogel zum Schwein zu bringen!

        ![expandable](https://images.code.org/a656e421bc90e530a7e1ce636e507752-image-1497996976195.gif)
      courseA_maze_seq11: |-
        Es ist zeit für eine kleinere Aufgabe! Gehe zuerst in eine Richtung und dann in eine andere, um den Vogel zum Schwein zu bringen.

        ![expandable](https://images.code.org/bb4571384fc56702704a0c9395ee3695-image-1497996380902.gif)
      courseA_maze_seq11_2018: Es ist zeit für eine kleinere Aufgabe! Gehe zuerst
        in eine Richtung und dann in eine andere, um den Vogel zum Schwein zu bringen.
      courseA_maze_seq11_2019: Es ist zeit für eine kleinere Aufgabe! Gehe zuerst
        in eine Richtung und dann in eine andere, um den Vogel zum Schwein zu bringen.
      courseA_maze_seq12: |-
        Hole dir das Schwein!

        ![expandable](https://images.code.org/c6ae5024441e2305db82d06679e5a281-image-1497997160569.gif)
      courseA_maze_seq12_2018: Hole dir das Schwein!
      courseA_maze_seq12_2019: Hole dir das Schwein!
      courseA_maze_seq13_2019: Hole dir das Schwein auf irgendeine Art und Weise!
      courseA_maze_seq1_2018: _"Nimm diese Bausteine zu Hilfe und versuche, mich zum
        Schwein zu führen!"_
      courseA_maze_seq1_2019: _"Nimm diese Bausteine zu Hilfe und versuche, mich zum
        Schwein zu führen!"_
      courseA_maze_seq2: |-
        _"Ein Fehler! Bring den Code in Ordnung um mich zum Schwein zu bringen."_

        ![expandable](https://images.code.org/4af4959874b3ca1fdd3008dc4f77add4-image-1497994904322.gif)
      courseA_maze_seq3: |-
        _"Bring den Code in Ordnung um mich zum Schwein zu bringen!"_

        ![expandable](https://images.code.org/4adca88dc6df7378846a91d0fb0e59d1-image-1497995239069.gif)
      courseA_maze_seq4: |-
        _"Irgendwas stimmt hier nicht."_

        ENTFERNE einen Block um den Vogel zum Schwein zu bringen!

        ![expandable](https://images.code.org/6af44fb0ba5ac5dd5502e2538f51fb9c-image-1497996162453.gif)
      courseA_maze_seq5: |-
        Versuche diese Aufgabe von Anfang an allein zu schaffen.

        ![expandable](https://images.code.org/e4ef591b4580db478330c298d1af756f-image-1497997080163.gif)
      courseA_maze_seq5_2018: Probiere dies hier mal aus.
      courseA_maze_seq5_2019: Probiere dies hier mal aus.
      courseA_maze_seq5_copy: |-
        Versuche diese Aufgabe von Anfang an allein zu schaffen.

        ![expandable](https://images.code.org/e4ef591b4580db478330c298d1af756f-image-1497997080163.gif)
      courseA_maze_seq5a_2018: |-
        _"Hier Schweinchen, hier!"_

        Was kannst du am Ende dieses Codes hinzufügen, um den Vogel zum Schwein zu bringen?
      courseA_maze_seq5a_2019: |-
        _"Hier Schweinchen, hier!"_

        Was kannst du am Ende dieses Codes hinzufügen, um den Vogel zum Schwein zu bringen?
      courseA_maze_seq6: |-
        Gehe zuerst in eine Richtung und dann in eine andere, um den Vogel zum Schwein zu bringen!

        ![expandable](https://images.code.org/8f71c406afa60c6898937d950c670205-image-1497996506419.gif)
      courseA_maze_seq6_2018: Gehe zuerst in eine Richtung und dann in eine andere,
        um den Vogel zum Schwein zu bringen!
      courseA_maze_seq6_2019: Gehe zuerst in eine Richtung und dann in eine andere,
        um den Vogel zum Schwein zu bringen!
      courseA_maze_seq6_copy: |-
        Gehe zuerst in eine Richtung und dann in eine andere, um den Vogel zum Schwein zu bringen!

        ![expandable](https://images.code.org/8f71c406afa60c6898937d950c670205-image-1497996506419.gif)
      courseA_maze_seq7: |-
        Finde heraus was fehlt, und füge dann Blöcke hinzu, um den Vogel zum Schwein zu bringen!

        ![expandable](https://images.code.org/35bdb628dabd4259b581286b071c02f3-image-1497996651260.gif)
      courseA_maze_seq7_copy: |-
        Finde heraus was fehlt, und füge dann Blöcke hinzu, um den Vogel zum Schwein zu bringen!

        ![expandable](https://images.code.org/35bdb628dabd4259b581286b071c02f3-image-1497996651260.gif)
      courseA_maze_seq8: |-
        Löse dieses Level und bring den Vogel zum Schwein!

        ![expandable](https://images.code.org/fb4735244f74a4e001d1fa7b5c6028f9-image-1497998330218.gif)
      courseA_maze_seq8_2018: Löse dieses Level und bring den Vogel zum Schwein!
      courseA_maze_seq8_2019: Löse dieses Level und bring den Vogel zum Schwein!
      courseA_maze_seq8_copy: |-
        Löse dieses Level und bring den Vogel zum Schwein!

        ![expandable](https://images.code.org/fb4735244f74a4e001d1fa7b5c6028f9-image-1497998330218.gif)
      courseA_maze_seq9: |-
        **Herausforderung:**Repariere dieses Level, indem Du Blöcke hinzufügst um den Vogel zum Schwein zu bewegen!

        ![expandable](https://images.code.org/3f35068dd3cf51c420a536fa078f854d-image-1497996843105.gif)
      courseA_maze_seq_challenge1: Beseitige die Fehler in diesem Level. Entferne
        die Blöcke, welche nicht passen, und füge die fehlenden Blöcke hinzu. Bring
        den Vogel zum Schwein!
      courseA_maze_seq_challenge1_2018: Beseitige die Fehler in diesem Level. Entferne
        die Blöcke, welche nicht passen, und füge die fehlenden Blöcke hinzu. Bring
        den Vogel zum Schwein!
      courseA_maze_seq_challenge1_2019: Beseitige die Fehler in diesem Level. Entferne
        die Blöcke, welche nicht passen, und füge die fehlenden Blöcke hinzu. Bring
        den Vogel zum Schwein!
      courseA_maze_seq_challenge2_2019: Folge dem Weg, der den Vogel zum Schwein bringt.
        Vermeide das TNT, sonst fliegen die Federn!
      courseA_playLab_events1_2019: Dies ist ein Play Lab Level. Bewegen Sie Baustein
        in den Arbeitsbereich und sehen Sie, was passiert!
      courseA_playLab_events2_2019: Jorge, der Hund, will "Hallo." sagen. Kannst du
        ihm helfen?
      courseA_playLab_events3: |-
        Hilf Jorge, dem Hund, sich zu bewegen indem du den <xml><block type="studio_move">
            <title name="SPRITE">1</title>
            <title name="DIR">8</title>
          </block></xml> Block mit dem <xml><block type="studio_whenArrow">
            <title name="VALUE">left</title>
          </block></xml> Ereignis-Block, der schon im Arbeitsbereich ist, verbindest.

        Bring Jorge zur Fahne um dieses Level zu beenden!
      courseA_playLab_events3_2018: |-
        Hilf Jorge, dem Hund, sich zu bewegen indem du den <xml><block type="studio_move">
            <title name="SPRITE">1</title>
            <title name="DIR">8</title>
          </block></xml> Block mit dem <xml><block type="studio_whenArrow">
            <title name="VALUE">left</title>
          </block></xml> Ereignis-Block, der schon im Arbeitsbereich ist, verbindest.

        Bring Jorge zur Fahne um dieses Level zu beenden!
      courseA_playLab_events3_2019: |-
        Helfe Jorge der Hund sich in Bewegung zu setzen, indem du den <xml><block type="studio_move" block-text="move dog west">
            <title name="SPRITE">1</title>
            <title name="DIR">8</title>
          </block></xml>-Block mit dem <xml><block type="studio_whenArrow" block-text="when left arrow">
            <title name="VALUE">left</title>
          </block></xml>-Event-Block verbindest, der sich bereits im Arbeitsraum befindet.. Benutze die Pfeiltasten, um Jorge nach der Flagge zu bewegen und die Ebene abzuschließen!
      courseA_playLab_events4: Füge jetzt mehr Blöcke hinzu, um Jorge nach rechts
        zu bewegen wenn die Pfeiltaste nach 'rechts' gedrückt wird.
      courseA_playLab_events4_2018: Füge nun einen weiteren Ereignisbaustein hinzu,
        damit sich Jorge nach rechts bewegt, wenn die rechte Pfeiltaste angeklickt
        wird.
      courseA_playLab_events4_2019: Füge nun einen weiteren Event-Block hinzu, damit
        sich Jorge nach rechts bewegt, wenn die rechte Pfeiltaste angeklickt wird.Benutze
        die Pfeiltasten, um Jorge nach der Flagge zu bewegen und die Ebene abzuschließen!
      courseA_playLab_events5: Füge Ereignisse hinzu um Jorge nach oben und unten
        zu bewegen, wenn die 'oben' und 'unten' Pfeiltasten gedrückt werden.
      courseA_playLab_events5_2018: Füge Ereignisse hinzu um Jorge nach oben und unten
        zu bewegen, wenn die 'oben' und 'unten' Pfeiltasten gedrückt werden.
      courseA_playLab_events5_2019: Füge weitere Events hinzu, um Jorge aufwärts und
        abwärts zu bewegen, wenn die `Aufwärts`- und `Abwärts`-Schalter gedrückt werden.
        Lasse Jorge die Flaggen holen, um diese Ebene abzuschließen!
      courseA_playLab_events6_2019: 'Gestalte es interessanter: Sorge dafür, dass
        der Hintergrund sich ändert und ein zufälliger Sound erklingt, wenn Jorge
        angeklickt wird. Klicke auf Jorge und teste es, wenn dein Programm fertig
        ist. '
      courseA_playLab_events7_2018: _Freispiel:_ Füge diesem Spiel alles hinzu, was
        du willst. Kannst du den Dinosaurier verschwinden lassen, wenn Jorge ihn trifft?
      courseA_playLab_events7_2019: _Freispiel:_ Füge diesem Spiel alles hinzu, was
        du willst. Kannst du den Dinosaurier verschwinden lassen, wenn Jorge ihn trifft?
      courseA_playlab_events_challenge1: |-
        Wenn du auf Olive klickst wird Robin erscheinen! Kannst du einen Code schreiben, damit auch die anderen Figuren erscheinen?

        Denk in dieser Aufgabe unbedingt daran, auf die Tipps zu klicken! Die Tipps werden dir helfen dieses Projekt Schritt-für-Schritt zu schaffen!

        ![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png>)
      courseA_playlab_events_challenge1_2018: |-
        Wenn du auf Olive klickst wird Robin erscheinen! Kannst du einen Code schreiben, damit auch die anderen Figuren erscheinen?

        Denk in dieser Aufgabe unbedingt daran, auf die Tipps zu klicken! Die Tipps werden dir helfen dieses Projekt Schritt-für-Schritt zu schaffen!

        ![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png>)
      courseA_playlab_events_challenge1_2019: |-
        Wenn du auf Olive klickst wird Robin erscheinen! Kannst du einen Code schreiben, damit auch die anderen Figuren erscheinen?

        Denk in dieser Aufgabe unbedingt daran, auf die Tipps zu klicken! Die Tipps werden dir helfen dieses Projekt Schritt-für-Schritt zu schaffen!

        ![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png>)
      courseA_playlab_events_challenge2: |-
        Gib jeder Figur etwas zu tun, wenn du auf sie klickst. Was werden die Tiere sagen? Was wird ich passieren?

        Denk in dieser Aufgabe unbedingt daran, auf die Tipps zu klicken. In den Tipps gibt es lustige Vorschläge zum Ausprobieren!

        ![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png>)
      courseA_playlab_events_challenge2_2018: |-
        Gib jeder Figur etwas zu tun, wenn du auf sie klickst. Was werden die Tiere sagen? Was wird ich passieren?

        Denk in dieser Aufgabe unbedingt daran, auf die Tipps zu klicken. In den Tipps gibt es lustige Vorschläge zum Ausprobieren!

        ![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png>)
      courseA_playlab_events_challenge2_2019: |-
        Gib jeder Figur etwas zu tun, wenn du auf sie klickst. Was werden die Tiere sagen? Was wird ich passieren?

        Denk in dieser Aufgabe unbedingt daran, auf die Tipps zu klicken. In den Tipps gibt es lustige Vorschläge zum Ausprobieren!

        ![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png>)
      courseB_Scrat_ramp1_2018: Damit Scrat an die Eichel kommt, hänge den <xml><block
        type="maze_moveEast"/></xml> Baustein an das Ende des <xml><block type="when_run"/></xml>
        Baustein ein, dann drücke "▶ Ausführen"!
      courseB_Scrat_ramp1_2019: Damit Scrat an die Eichel kommt, hänge den <xml><block
        type="maze_moveEast" block-text="move East"/></xml> Baustein an das Ende des
        <xml><block type="when_run" block-text="when run"/></xml> Baustein ein, dann
        drücke "▶ Ausführen"!
      courseB_Scrat_ramp2_2018: Füge die beiden <xml><block type="maze_moveEast"/></xml>
        Blöcke an den <xml><block type="when_run"/></xml> Block an, um deinen Code
        zu vervollständigen. Klicke dann auf "▶ Ausführen".
      courseB_Scrat_ramp2_2019: Füge die beiden <xml><block type="maze_moveEast" block-text="move
        east"/></xml> Blöcke an den <xml><block type="when_run" block-text="when run"/></xml>
        Block an, um deinen Code zu vervollständigen. Klicke dann auf "▶ Ausführen".
      courseB_Scrat_ramp3a_2018: Nimm einen <xml><block type="maze_moveNorth"/></xml>
        Baustein aus der Toolbox und füge ihn unten in die anderen Bausteine ein,
        um diesen Code abzuschließen. Dann klicke auf "▶ Ausführen".
      courseB_Scrat_ramp3a_2019: Nimm einen <xml><block type="maze_moveNorth" block-text="move
        north"/></xml> Baustein aus der Toolbox und füge ihn unten in die anderen
        Bausteine ein, um diesen Code abzuschließen. Dann klicke auf "▶ Ausführen".
      courseB_Scrat_ramp3b_2018: "Es gibt einen zusätzlichen Baustein am Ende dieses
        Codes! \n\nZieh ihn zurück in den Werkzeugkasten, um diesen wegzuwerfen."
      courseB_Scrat_ramp3b_2019: "Es gibt einen zusätzlichen Baustein am Ende dieses
        Codes! \n\nZieh ihn zurück in den Werkzeugkasten, um diesen wegzuwerfen."
      courseB_Scrat_ramp4a_2018: Kannst du herausfinden, welchen Block du am Ende
        der anderen Blöcke hinzufügen musst, um diesen Code zu vervollständigen?
      courseB_Scrat_ramp4a_2019: Kannst du herausfinden, welchen Block du am Ende
        der anderen Blöcke hinzufügen musst, um diesen Code zu vervollständigen?
      courseB_Scrat_ramp5a_2018: Probiere dies ganz alleine aus!
      courseB_Scrat_ramp5a_2019: Probiere dies ganz alleine aus!
      courseB_artist_loops10: "Verwende das, was du gelernt hast, um ein Bild von
        dem zu zeichnen, was der Künstler deiner Meinung nach gesehen hat, als er
        nach Hause kam.\n\n* * *\n\n### Ideen\n\n![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)
        \n![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)
        \n![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)
        \n![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)"
      courseB_artist_loops10_2018: "Verwende das, was du gelernt hast, um ein Bild
        von dem zu zeichnen, was der Künstler deiner Meinung nach gesehen hat, als
        er nach Hause kam.\n\n* * *\n\n### Ideen\n\n![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)
        \n![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)
        \n![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)
        \n![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)"
      courseB_artist_loops10_2019: "Verwende das, was du gelernt hast, um ein Bild
        von dem zu zeichnen, was der Künstler deiner Meinung nach gesehen hat, als
        er nach Hause kam.\n\n* * *\n\n### Ideen\n\n![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)
        \n![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)
        \n![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)
        \n![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)"
      courseB_artist_loops1_2019: Dies ist eine neue Art von Aufgabe, sie hießt "Künstler".
        Spiele in diesem Level und zeichne etwas lustiges.
      courseB_artist_loops2_2019: Der Künstler versucht **6** mal eine Linie zu ziehen,
        bekommt das aber nicht richtig hin. Kannst du ihm helfen?
      courseB_artist_loops3_2019: Helfe dem Künstler, 7 Mal eine Linie zu zeichnen,
        um eine Gartenmauer zu bauen.
      courseB_artist_loops4_2019: Jetzt müssen wir den Boden für die Pflanzung vorbereiten.
        Finde die Fehler im Code und helfe mit den Boden vorzubereiten.
      courseB_artist_loops5_2019: Jetzt muss die Leiter repariert werden! Wiederhole
        dieses Muster **5** Mal, damit der Künstler die Spitze der Sträucher erreicht.
      courseB_artist_loops6: Hinter den Sträuchern befindet sich eine wunderschöne
        Blumenranke. Kannst du die Rebe heraufklettern und herausfinden, wohin sie
        geht?
      courseB_artist_loops6_2018: Hinter den Sträuchern befindet sich eine wunderschöne
        Blumenranke. Kannst du die Rebe heraufklettern und herausfinden, wohin sie
        geht?
      courseB_artist_loops6_2019: Hinter den Sträuchern befindet sich eine wunderschöne
        Blumenranke. Kannst du die Rebe heraufklettern und herausfinden, wohin sie
        geht?
      courseB_artist_loops7: "**Aufgabe:** Es ist ein versteckter Garten! Lauf ein
        bisschen herum."
      courseB_artist_loops7_2018: "**Aufgabe:** Es ist ein versteckter Garten! Lauf
        ein bisschen herum."
      courseB_artist_loops7_2019: "**Aufgabe:** Es ist ein versteckter Garten! Lauf
        ein bisschen herum."
      courseB_artist_loops8_2019: Es ist an der Zeit, nach Hause zu gehen. Kannst
        du diese Leiter mit nur einem Block reparieren, um dem Künstler beim Herabsteigen
        zu helfen?
      courseB_artist_loops9_2019: Lass uns die Abkürzung nach Hause über den Teich
        nehmen. Kannst du dem Künstler helfen, auf den Steinen zu bleiben?
      courseB_artist_loops_challenge1: \_"Es ist Zeit zum Würfeln! Kannst du mir helfen,
        sie zu zeichnen?"
      courseB_artist_loops_challenge1_2018: \_"Es ist Zeit zum Würfeln! Kannst du
        mir helfen, sie zu zeichnen?"
      courseB_artist_loops_challenge1_2019: \_"Es ist Zeit zum Würfeln! Kannst du
        mir helfen, sie zu zeichnen?"
      courseB_artist_loops_challenge2: Zeichne so viele X, wie du kannst. Schaffst
        du es, 3 davon hintereinander zu bringen?
      courseB_artist_loops_challenge2_2018: Zeichne so viele X, wie du kannst. Schaffst
        du es, 3 davon hintereinander zu bringen?
      courseB_artist_loops_challenge2_2019: Zeichne so viele X, wie du kannst. Schaffst
        du es, 3 davon hintereinander zu bringen?
      courseB_collector_loops1: |-
        **Freies Spiel:** Das ist Laurel, die Abenteurerin! Bewege sie umher und sammle so viele Schätze wie du kannst.

        Ziehe Blöcke in den Arbeitsbereich und versuche herauszufinden, wie du einen Schatz einsammeln kannst. Du brauchst mindestens einen Diamant um dieses Level zu bestehen.
      courseB_collector_loops10_2019: Hilf Laurel, alle Schätze aus dieser Höhle zu
        holen.
      courseB_collector_loops11_2019: Heureka! Hol dir so viele Schätze wie möglich!
      courseB_collector_loops1_2018: "**Freispiel:** Bewege Laurel und hole dir so
        viele Schätze, wie du kannst. Hole mindestens einen Gegenstand ohne Fehler,
        um diesen Level zu bestehen.  \n\n* * *\n\nZiehe Bausteine in den Arbeitsbereich
        und versuche herauszufinden, wie man an Schätze kommt.  "
      courseB_collector_loops1_2019: "**Freispiel:** Bewege Laurel und hole dir so
        viele Schätze, wie du kannst. Hole mindestens einen Gegenstand ohne Fehler,
        um diesen Level zu bestehen.  \n\n* * *\n\nZiehe Bausteine in den Arbeitsbereich
        und versuche herauszufinden, wie man an Schätze kommt.  "
      courseB_collector_loops2: "Bewege Laurel zum Schatz und benutze dann den <xml><block
        type=\"collector_collect\"/></xml>-Block, um ihn aufzuheben. \n\nHole alle
        vier Stapel, um diesen Level zu schaffen."
      courseB_collector_loops2_2018: "Bewege Laurel zum Schatz und benutze dann den
        <xml><block type=\"collector_collect\"/></xml>-Block, um ihn aufzuheben. \n\nHole
        alle vier Stapel, um diesen Level zu schaffen."
      courseB_collector_loops2_2019: |-
        Bewege Laurel auf den Schatz und benutze dann den Block<xml><block type="collector_collect" block-text="get treasure"/></xml>, um ihn aufzunehmen.

        Sammle alle vier Edelsteine um dieses Level zu schaffen.
      courseB_collector_loops3: Wie kann Laurel alle fünf Schätze einsammeln, wenn
        sie nur einen <xml><block type="maze_moveEast"/></xml> Block benutzt?
      courseB_collector_loops3_2018: Wie kann Laurel alle fünf Schätze einsammeln,
        wenn sie nur einen <xml><block type="maze_moveEast"/></xml> Block benutzt?
      courseB_collector_loops3_2019: Wie kann Laurel alle fünf Schätze einsammeln,
        wenn sie nur einen <xml><block type="maze_moveEast" block-text="move east"/></xml>
        Block benutzt?
      courseB_collector_loops4_2019: Korrigiere Laurels Weg, um alle diese Schätze
        zu holen!
      courseB_collector_loops5_2019: Füge dem Code aus dem letzten Rätsel hinzu, um
        den gesamten Schatz zu holen.
      courseB_collector_loops6_2019: Entwickle den Code, um Laurel dabei zu helfen,
        den gesamten Schatz zu bekommen!
      courseB_collector_loops7_2019: Schreibe den Code, um all diese Schätze zu bekommen.
      courseB_collector_loops8_2019: "**Aufgabe:** Der Schatz geht die ganze Treppe
        hinunter! Schreibe den Code, der Laurel dabei hilft, den gesamten Schatz zu
        bekommen."
      courseB_collector_loops9_2019: _“Hilf mir dabei, den Schatz aus diesem tiefen
        Tal herauszuholen.“_
      courseB_collector_loops_challenge1_2019: Diesmal hast du eine begrenzte Anzahl
        von Blöcken. Hol dir den gesamten Schatz!
      courseB_collector_loops_challenge2a: |-
        _"Lass uns den Schatz holen!"_

        Hilf Laurel mindestens **5** Schätze einzusammeln um diese Aufgabe zu beenden.
      courseB_collector_loops_challenge2a_2018: |-
        _"Lass uns den Schatz holen!"_

        Hilf Laurel mindestens **5** Schätze einzusammeln um diese Aufgabe zu beenden.
      courseB_collector_loops_challenge2a_2019: |-
        _"Lass uns den Schatz holen!"_

        Hilf Laurel mindestens **5** Schätze einzusammeln um diese Aufgabe zu beenden.
      courseB_iceage_loops1: Hilf Scrat über das glitschige Eis, um an die Eichel
        zu gelangen!
      courseB_iceage_loops10: Hilf Scrat, den ganzen Weg zur Eichel zu schaffen!
      courseB_iceage_loops10_2019: Hilf Scrat, den ganzen Weg zur Eichel zu schaffen!
      courseB_iceage_loops11: Hilf Scrat zur Eichel zu gelangen!
      courseB_iceage_loops11_2019: Hilf Scrat zur Eichel zu gelangen!
      courseB_iceage_loops12: Gehe zur Eichel, wie du kannst!
      courseB_iceage_loops12_2019: Gehe zur Eichel, wie du kannst!
      courseB_iceage_loops1_2019: Hilf Scrat über das glitschige Eis, um an die Eichel
        zu gelangen!
      courseB_iceage_loops2: Verwende sowohl den <xml><block type="maze_moveWest"/></xml>
        als auch den <xml><block type="maze_moveSouth"/></xml>, um an die Eichel zu
        gelangen!
      courseB_iceage_loops2_2019: Verwende sowohl den <xml><block type="maze_moveWest"
        block_text="move west"/></xml> als auch den <xml><block type="maze_moveSouth"
        block_text="move south"/></xml>, um an die Eichel zu gelangen!
      courseB_iceage_loops3: Kannst du zur Eichel gelangen, mit nur einem <xml><block
        type="maze_moveWest"/></xml>-Block? Versuche eine Schleife zu benutzen!
      courseB_iceage_loops3_2019: Kannst du zur Eichel gelangen, mit nur einem <xml><block
        type="maze_moveWest" block-text="move west"/></xml>-Block? Versuche eine Schleife
        zu benutzen!
      courseB_iceage_loops4: Füge einen weiteren Block hinzu, um Scrat bis zur Eichel
        zu bekommen!
      courseB_iceage_loops4_2019: Füge einen weiteren Block hinzu, um Scrat bis zur
        Eichel zu bekommen!
      courseB_iceage_loops6: Kannst du eine Schleife hinzufügen, um an die Eichel
        zu kommen?
      courseB_iceage_loops6_2019: Kannst du eine Schleife hinzufügen, um an die Eichel
        zu kommen?
      courseB_iceage_loops7: 'Scrat möchte wirklich gern zur Eichel kommen! '
      courseB_iceage_loops7_2019: 'Scrat möchte wirklich gern zur Eichel kommen! '
      courseB_iceage_loops8: 'Kannst du diesen Code reparieren? '
      courseB_iceage_loops8_2019: 'Kannst du diesen Code reparieren? '
      courseB_iceage_loops9: Die Eichel ist so weit weg! Kannst du Schleifen benutzen,
        um Scrat zu helfen, dorthin zu gelangen?
      courseB_iceage_loops9_2019: Die Eichel ist so weit weg! Kannst du Schleifen
        benutzen, um Scrat zu helfen, dorthin zu gelangen?
      courseB_maze_seq10_2019: Behebe die Fehler, um Scrat zur Eichel zu bringen.
      courseB_maze_seq11_2019: Es ist an Dir!  Bring Scrat zur Eichel.
      courseB_maze_seq12_2019: Erreiche die Eichel nun auf irgendeine Art und Weise!
      courseB_maze_seq1_2019: "Spiele mit diesen Bausteinen, um zu sehen, wozu sie
        Scrat veranlassen! \n\nBringe Scrat zur Eichel, um das Level abzuschließen."
      courseB_maze_seq3: '"Repariere den Code, um mich zu dem Schwein zu bringen!"'
      courseB_maze_seq4_2019: Benutze **2** Bewegungsbausteine, um den Scrat zur Eichel
        zu bringen.
      courseB_maze_seq5_2019: Dieses Rätsel ist ein wenig knifflig!
      courseB_maze_seq6_2019: Bewege dich in eine Richtung, dann in eine andere, um
        Scrat zur Eichel zu bringen!
      courseB_maze_seq7_2019: Finde heraus, was fehlt und füge dann Blöcke hinzu,
        damit Scrat an die Eichel kommt!
      courseB_maze_seq8_2019: Du bist dran!  Was musst du tun, um Scrat zur Eichel
        zu bringen?
      courseB_maze_seq9: "**Aufgabe:** Gehe um den Sprengstoff herum, um den Vogel
        zum Schwein zu bringen."
      courseB_maze_seq9_2018: "**Herausforderung:** Bewege dich um das gebrochene
        Eis herum, um Scrat zur Eichel zu bringen."
      courseB_maze_seq9_2019: "**Herausforderung:** Bewege dich um das gebrochene
        Eis herum, um Scrat zur Eichel zu bringen."
      courseB_maze_seq_challenge1: Du hast nur vier von jedem Zugblock. Kannst du
        einen Weg finden, bevor dir die Blöcke ausgehen?
      courseB_maze_seq_challenge1_2018: Du hast nur vier von jedem Zugblock. Kannst
        du einen Weg finden, bevor dir die Blöcke ausgehen?
      courseB_maze_seq_challenge1_2019: Du hast nur vier von jedem Zugblock. Kannst
        du einen Weg finden, bevor dir die Blöcke ausgehen?
      courseB_maze_seq_challenge2_2019: Behebe die Fehler auf dieser Ebene. Das sind
        zwar die richtigen Blöcke, aber sie befinden sich in der falschen Reihenfolge!
      courseB_playLab_events1: Dieses Spiel heißt "Play Lab". Versuche, herauszufinden,
        was jeder Block bewirkt.
      courseB_playLab_events1_2018: Dieses Spiel heißt "Play Lab". Versuche, herauszufinden,
        was jeder Block bewirkt.
      courseB_playLab_events1_2019: Dieses Spiel heißt "Play Lab". Versuche, herauszufinden,
        was jeder Block bewirkt.
      courseB_playlab_events2_2019: Lasse Daisy den Drachen etwas sagen, wenn du auf
        "Run" klickst.
      courseB_playlab_events3: Verwende ein Ereignis, um Daisy den Drachen in eine
        zufällige ![](https://images.code.org/c365e065614fea592612264f33624c09-image-1475698889081.17.53.png)
        Stimmung zu versetzen, wenn du sie anklickst.
      courseB_playlab_events3_2018: Verwende ein Ereignis, um Daisy den Drachen in
        eine zufällige ![](https://images.code.org/c365e065614fea592612264f33624c09-image-1475698889081.17.53.png)
        Stimmung zu versetzen, wenn du sie anklickst.
      courseB_playlab_events3_2019: Verwende ein Ereignis, um Daisy den Drachen in
        eine zufällige ![](https://images.code.org/c365e065614fea592612264f33624c09-image-1475698889081.17.53.png)
        Stimmung zu versetzen, wenn du sie anklickst.
      courseB_playlab_events4: "Ritterzeit! \n\nFüge ein Ereignis hinzu, das bewirkt,
        dass sich der Ritter auf den Drachen zubewegt, wenn der linke Pfeil angeklickt
        wird."
      courseB_playlab_events4_2018: |-
        Zeit für den Ritter!  Töte den Drachen um diese Ebene abzuschließen.

        Füge einen Event hinzu, sodass der Ritter sich in Richtung des Drachen bewegt, wenn der Linkspfeil angeklickt wird.
      courseB_playlab_events4_2019: |-
        Zeit für den Ritter!  Töte den Drachen um diese Ebene abzuschließen.

        Füge einen Event hinzu, sodass der Ritter sich in Richtung des Drachen bewegt, wenn der Linkspfeil angeklickt wird.
      courseB_playlab_events5_2018: "Füge jetzt einen Event hinzu, so dass der Ritter
        vom Drachen wegläuft, wenn du den Rechtspfeil drückst.  \n\nBewege den Ritter
        nach rechts, um diese Ebene zu bestehen."
      courseB_playlab_events5_2019: "Füge jetzt einen Event hinzu, so dass der Ritter
        vom Drachen wegläuft, wenn du den Rechtspfeil drückst.  \n\nBewege den Ritter
        nach rechts, um diese Ebene zu bestehen."
      courseB_playlab_events6: "Hilf deinem Ritter dabei, alle Fahnen zu holen! \n\nDafür
        musst du Ereignisse hinzufügen, die dem Ritter helfen, sich nach oben, unten,
        links und rechts zu bewegen."
      courseB_playlab_events6_2018: "Hilf deinem Ritter dabei, alle Fahnen zu holen!
        \n\nDafür musst du Ereignisse hinzufügen, die dem Ritter helfen, sich nach
        oben, unten, links und rechts zu bewegen."
      courseB_playlab_events6_2019: "Hilf deinem Ritter dabei, alle Fahnen zu holen!
        \n\nDafür musst du Ereignisse hinzufügen, die dem Ritter helfen, sich nach
        oben, unten, links und rechts zu bewegen."
      courseB_playlab_events7: "Mach dieses Spiel lustig, indem du den Ritter verschwinden
        lässt, wenn er auf dem Weg zu den Fahnen mit dem Drachen zusammenstößt! \n\nSpiele
        ein Geräusch ab, wenn sie zusammenstoßen, um das Ereignis lebendiger zu gestalten.\n\nSuche
        alle Ziele auf und stoße dann mit dem Drachen zusammen, um diesen Level zu
        schaffen."
      courseB_playlab_events7_2018: "Mach dieses Spiel interessant, indem du mehr
        Dinge hinzufügst!\n\n1.  Stelle den Ritter so ein, dass er verschwindet, wenn
        er auf den Drachen trifft.   \n2.  Spiele ein Geräusch ab, wenn beide zusammenstoßen,
        damit es sich realer anfühlt.   \n\n* * *\n\nBesuche alle Ziele und laufe
        dann in den Drachen, um das Level zu bestehen."
      courseB_playlab_events7_2019: "Mach dieses Spiel interessant, indem du mehr
        Dinge hinzufügst!\n\n1.  Stelle den Ritter so ein, dass er verschwindet, wenn
        er auf den Drachen trifft.   \n2.  Spiele ein Geräusch ab, wenn beide zusammenstoßen,
        damit es sich realer anfühlt.   \n\n* * *\n\nBesuche alle Ziele und laufe
        dann in den Drachen, um das Level zu bestehen."
      courseB_playlab_eventsFP_2019: "**Freispiel:** Benutze deine Fantasie. Was könnte
        dieses Spiel zu noch mehr Spaß machen?"
      courseB_playlab_events_challenge1: |-
        Programmiere so, dass sich die Tiere nach unten bewegen, wenn du ▼ drückst.

        Wer wird am schnellsten rennen?
      courseB_playlab_events_challenge1_2018: |-
        Programmiere so, dass sich die Tiere nach unten bewegen, wenn du ▼ drückst.

        Wer wird am schnellsten rennen?
      courseB_playlab_events_challenge1_2019: |-
        Programmiere so, dass sich die Tiere nach unten bewegen, wenn du ▼ drückst.

        Wer wird am schnellsten rennen?
      courseB_playlab_events_challenge2: "Jetzt sollen die Tiere verschwinden, wenn
        du sie anklickst. Versuche jetzt, mit dem Hund zu spielen, dann hilf den anderen
        Tieren, bei diesem Spaß mitzumachen. Du kannst auch Geräusche hinzufügen und
        Punkte sammeln, um ein Fangen-Spiel für die Tiere erstellen! \n\n![](https://images.code.org/d48437a0b08be90110541e0ef21076e0-image-1497907722000.gif)"
      courseB_playlab_events_challenge2_2018: "Jetzt sollen die Tiere verschwinden,
        wenn du sie anklickst. Versuche jetzt, mit dem Hund zu spielen, dann hilf
        den anderen Tieren, bei diesem Spaß mitzumachen. Du kannst auch Geräusche
        hinzufügen und Punkte sammeln, um ein Fangen-Spiel für die Tiere erstellen!
        \n\n![](https://images.code.org/d48437a0b08be90110541e0ef21076e0-image-1497907722000.gif)"
      courseB_playlab_events_challenge2_2019: "Jetzt sollen die Tiere verschwinden,
        wenn du sie anklickst. Versuche jetzt, mit dem Hund zu spielen, dann hilf
        den anderen Tieren, bei diesem Spaß mitzumachen. Du kannst auch Geräusche
        hinzufügen und Punkte sammeln, um ein Fangen-Spiel für die Tiere erstellen!
        \n\n![](https://images.code.org/d48437a0b08be90110541e0ef21076e0-image-1497907722000.gif)"
      courseB_starWars_prog1: "![Rey](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\\_\"Hole
        den Schrott, BB-8!\" \\_ \n\nAchte auf Wände und Kisten. Schrott sieht so
        aus: ![picture of scrap metal](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)"
      courseB_starWars_prog10: '"Kannst du alles besorgen?"'
      courseB_starWars_prog10_2018: '"Kannst du alles besorgen?"'
      courseB_starWars_prog10_2019: '"Kannst du alles besorgen?"'
      courseB_starWars_prog11: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Mach weiter!"_'
      courseB_starWars_prog11_2018: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Mach weiter!"_'
      courseB_starWars_prog11_2019: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Mach weiter!"_'
      courseB_starWars_prog1_2018: "![Rey](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\\_\"Hole
        den Schrott, BB-8!\" \\_ \n\nAchte auf Wände und Kisten. Schrott sieht so
        aus: ![picture of scrap metal](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)"
      courseB_starWars_prog1_2019: "![Rey](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\\_\"Hole
        den Schrott, BB-8!\" \\_ \n\nAchte auf Wände und Kisten. Schrott sieht so
        aus: ![picture of scrap metal](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)"
      courseB_starWars_prog2: '"Hole das ganze Metall."'
      courseB_starWars_prog2_2018: '"Hole das ganze Metall."'
      courseB_starWars_prog2_2019: '"Hole das ganze Metall."'
      courseB_starWars_prog3: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Mach weiter, BB-8!"_'
      courseB_starWars_prog3_2018: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Mach weiter, BB-8!"_'
      courseB_starWars_prog3_2019: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Mach weiter, BB-8!"_'
      courseB_starWars_prog4: '"Hole es, BB-8!"'
      courseB_starWars_prog4_2018: '"Hole es, BB-8!"'
      courseB_starWars_prog4_2019: '"Hole es, BB-8!"'
      courseB_starWars_prog5: '"Kannst du alles besorgen?"'
      courseB_starWars_prog5_2018: '"Kannst du alles besorgen?"'
      courseB_starWars_prog5_2019: '"Kannst du alles besorgen?"'
      courseB_starWars_prog6: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Du schaffst das!"_'
      courseB_starWars_prog6_2018: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Du schaffst das!"_'
      courseB_starWars_prog6_2019: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Du schaffst das!"_'
      courseB_starWars_prog7: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Hole es!"_'
      courseB_starWars_prog7_2018: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Hole es!"_'
      courseB_starWars_prog7_2019: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Hole es!"_'
      courseB_starWars_prog8: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) \_""Weiter so, BB-8." \_

        **Aufgabe**: Sammele den ganzen Schrott ein.
      courseB_starWars_prog8_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) \_""Weiter so, BB-8." \_

        **Aufgabe**: Sammele den ganzen Schrott ein.
      courseB_starWars_prog8_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) \_""Weiter so, BB-8." \_

        **Aufgabe**: Sammele den ganzen Schrott ein.
      courseB_starWars_prog9: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Du schaffst das!"_'
      courseB_starWars_prog9_2018: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Du schaffst das!"_'
      courseB_starWars_prog9_2019: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Du schaffst das!"_'
      courseC19_playLab_EOC1: "Es ist toll, wie viel du schon gelernt haben! Lass
        uns Schritt für Schritt ein Spiel programmieren. \n\nWähle mit Hilfe neuer
        Bausteine in deiner Werkzeugkiste einen neuen Hintergrund aus und wähle dann
        eine Figur für dein Spiel aus."
      courseC19_playLab_EOC2: "Verwende Bausteine wie Ereignisse und Aktionen, damit
        sich Ihr Spieler bewegt, wenn du die Pfeiltasten drückst.  \n\nBringe den
        Spieler zu den Zielen, um dieses Rätsel zu lösen."
      courseC19_playLab_EOC3: "Lass uns deinem Spiel noch ein paar Figuren hinzufügen!
        \n\nVerwende den Baustein `Figur einfügen`, um weitere Figuren hinzuzufügen,
        und bewege sie dann zum Ziel, um diese Aufgabe abzuschließen."
      courseC19_playLab_EOC4: |-
        Viele Charaktere und die Bewegung der Schauspieler ist ein großartiger Anfang für ein Spiel, aber wir müssen mehr tun, damit es sich wie ein echtes Spiel anfühlt. Lasst uns eine Punktzahl hinzufügen!

        Verwende Ereignisblöcke wie den `Wenn der Schauspieler berührt...`, um die Punktzahl zu ändern oder das Spiel zu gewinnen. Erreiche 5 Punkte oder gewinne das Spiel, um dieses Rätsel zu lösen.
      courseC19_playLab_EOC5: Tolle Arbeit! Du hast alle grundlegenden Komponenten
        für ein funktionierendes Spiel. Verbringe nun Zeit damit, sicherzustellen,
        dass das Spiel so funktioniert, wie du es dir vorstellst. Wenn du fertig bist,
        klicke "Fertig"!
      courseC19_playLab_EOC6: Du hast es geschafft! Jetzt kannst du dein Spiel spielen
        oder es mit deinen Freunden und Klassenkameraden teilen!
      courseC_PlayLab_events6_2019: Schreibe nun ein Programm, um Waddles den Pinguin
        dazu zu bringen, sich mit den Tasten hoch / runter / links / rechts zu bewegen,
        um alle Ziele zu treffen!
      courseC_PlayLab_events7: |-
        Der Baustein `endlos wiederholen` ermöglicht es dir, Code immer und immer wieder auszuführen. Verwende diesen Baustein, um Chomp den Dino (Figur 2) endlos um 400 Pixel nach oben und unten zu bewegen.

        ![](https://images.code.org/0cbe6dd5f4e2251e3f121dbabc0cc19d-image-1523040103822.com-resize.gif)
      courseC_PlayLab_events7_2018: |-
        Der Baustein `endlos wiederholen` ermöglicht es dir, Code immer und immer wieder auszuführen. Verwende diesen Baustein, um Chomp den Dino (Figur 2) endlos um 400 Pixel nach oben und unten zu bewegen.

        ![](https://images.code.org/0cbe6dd5f4e2251e3f121dbabc0cc19d-image-1523040103822.com-resize.gif)
      courseC_PlayLab_events7_2019: |-
        Der Baustein `endlos wiederholen` ermöglicht es dir, Code immer und immer wieder auszuführen. Verwende diesen Baustein, um Chomp den Dino (Figur 2) endlos um 400 Pixel nach oben und unten zu bewegen.

        ![](https://images.code.org/0cbe6dd5f4e2251e3f121dbabc0cc19d-image-1523040103822.com-resize.gif)
      courseC_PlayLab_events8: "Kannst du Waddles (Figur 1) einen \"getroffen\"-Ton
        abspielen und ihn \"Autsch!\" sagen lassen, wenn er mit Chomp zusammenstößt?
        \n\nWenn du fertig bist, spiele das Spiel, damit das passiert.\n\n![](https://images.code.org/a634f249021651f60a1acf37bf78d07d-image-1475342557950.gif)"
      courseC_PlayLab_events8_2018: "Kannst du Waddles (Figur 1) einen \"getroffen\"-Ton
        abspielen und ihn \"Autsch!\" sagen lassen, wenn er mit Chomp zusammenstößt?
        \n\nWenn du fertig bist, spiele das Spiel, damit das passiert.\n\n![](https://images.code.org/a634f249021651f60a1acf37bf78d07d-image-1475342557950.gif)"
      courseC_PlayLab_events8_2019: "Kannst du Waddles (Figur 1) einen \"getroffen\"-Ton
        abspielen und ihn \"Autsch!\" sagen lassen, wenn er mit Chomp zusammenstößt?
        \n\nWenn du fertig bist, spiele das Spiel, damit das passiert.\n\n![](https://images.code.org/a634f249021651f60a1acf37bf78d07d-image-1475342557950.gif)"
      courseC_PlayLab_eventsA_embed_2019: Lasst uns ein Spiel spielen. Erreiche 5
        Punkte, indem du den Pinguin zum Oktopus bewegst.
      courseC_PlayLab_events_challenge1: "Verwende einen neuen Baustein, damit Waddles
        automatisch wieder an den Start geht, wenn er mit dem Dinosaurier zusammenstößt
        und wenn er einen Punkt erzielt. Dadurch wird dein Spiel spannender und macht
        mehr Spaß! \n\nSpiele das Spiel und bewege Waddles mit den Pfeilen, bis du
        genug Punkte erzielt hast. Waddles muss in die `mitte links` Position des
        Bildschirms bewegt werden, um diese Aufgabe abzuschließen."
      courseC_PlayLab_events_challenge1_2018: |-
        Benutze einen neuen Baustein, damit sich die Waddles automatisch zum Start zurückbewegen, wenn er in den Dinosaurier läuft und einen Punkt erzielt. Dies wird dein Spiel herausfordernder und unterhaltsamer machen!

        Spiele das Spiel und bewege die Waddles mit den Pfeilen, bis du 5 oder mehr Punkte bekommst. Um diese Herausforderung zu meistern, muss Waddles in die Position "Mitte links" des Bildschirms gebracht werden.
      courseC_PlayLab_events_challenge1_2019: |-
        Benutze einen neuen Baustein, damit sich die Waddles automatisch zum Start zurückbewegen, wenn er in den Dinosaurier läuft und einen Punkt erzielt. Dies wird dein Spiel herausfordernder und unterhaltsamer machen!

        Spiele das Spiel und bewege die Waddles mit den Pfeilen, bis du 5 oder mehr Punkte bekommst. Um diese Herausforderung zu meistern, muss Waddles in die Position "Mitte links" des Bildschirms gebracht werden.
      courseC_artist_loop1: "Fantastisch! \n\nLass uns das ganze etwas schöner gestalten,
        indem wir den Pinsel mit dem `Muster bestimmen` Baustein verändern, bevor
        unsere Schleife beginnt."
      courseC_artist_loop1_2018: "_\"Fantastisch!\"\"_ \n\nLasst uns etwas Stil hinzufügen,
        indem wir den Pinsel mit dem<xml><block type=\"draw_line_style_pattern\">
        <title name=\"VALUE\">DEFAULT</title></block></xml> Baustein ändern, bevor
        unsere Schleife beginnt."
      courseC_artist_loop1_2019: "_\"Fantastisch!\"\"_ \n\nLasst uns etwas Stil hinzufügen,
        indem wir den Pinsel mit dem<xml><block type=\"draw_line_style_pattern\" block-text=\"set
        pattern\"> <title name=\"VALUE\">DEFAULT</title></block></xml> Baustein ändern,
        bevor unsere Schleife beginnt."
      courseC_artist_loops1a: "**Freies Spiel:** Lass uns jetzt etwas Größeres bauen,
        Schritt-für-Schritt! Du kannst alles machen, was du willst, aber wir werden
        dir zeigen, wie du so etwas wie dies bauen kannst!\n\n![Exchange](https://images.code.org/5b67ed8d878d6c2a5009eee054427fd5-image-1496711253365.05.35.png)
        \n\nVerwende den Befehl `Auf 200 über 200 nach unten springen´/, um den Künstler
        in die Mitte des Spielbereichs zu bringen. Verwende dann den Block`einen Sticker
        zeichnen\\`/, um einen Vogel erscheinen zu lassen. \n\n-   -   -   Drücke
        \"Fertig\", wenn dir das, was du geschaffen hast, gefällt."
      courseC_artist_loops1a_2018: "**Freispiel:** Lasst uns etwas Größeres bauen,
        einen Schritt nach dem anderen!  \n\nBenutze den `springe zu 200 über 200
        runter` Baustein, um den Zeichner in die Mitte des Spielbereichs zu bringen,
        und benutze dann den Baustein `Zeichne einen Aufkleber`, um einen Vogel erscheinen
        zu lassen.  \n\n* * *\n\nDrücke \"Fertig stellen\", wenn du mit dem, was du
        gemacht hast, zufrieden bist."
      courseC_artist_loops1a_2019: |-
        **Freispiel:** Lasst uns etwas Größeres bauen, einen Schritt nach dem anderen!

        Bringe den Zeichner mit dem <xml> <block type="jump_to" block-text="jump to the middle center position"><title name="VALUE">13</title></block></xml> Baustein in die Mitte des Spielfeldes und verwenden dann den <xml><block type="sticker" block-text="draw sticker"><title name="VALUE">Beaver</title></block></xml> Baustein, um etwas erscheinen zu lassen.

        * * *

        Drücke "Fertig stellen", wenn du mit dem, was du gemacht hast, zufrieden bist.

        ![expandable](https://images.code.org/1435d3650553df44eba973572d409a50-image-1553096405891.png)
        ![expandable](https://images.code.org/6912d2144b90aa7087fe854742d1e8b9-image-1553096425394.png)
        ![expandable](https://images.code.org/8de9e1aa15fdfe30ffed763e0e1d6e04-image-1553096428531.png)
      courseC_artist_loops1b_2019: "Ändere die Richtung, in die Dein Aufkleber zeigt,
        indem du dem Code einen `Drehe`-Befehl hinzufügst. \n\n* * *\n\nDrücke \"Fertig
        stellen\", wenn du mit dem, was du gemacht hast, zufrieden bist.\n\n![expandable](https://images.code.org/30fe9d37758abd27055d9a6e5a890680-image-1553097358155.png)\n![expandable](https://images.code.org/61feed00662019b99ac774322231f084-image-1553097362176.png)\n![expandable](https://images.code.org/fd123bb703ea4c630218a12eb5994053-image-1553097354066.png)"
      courseC_artist_loops2a: Nun drehe deinen Vogel mithilfe einer Schleife 12 Mal
        in einer 30-Grad-Drehung.
      courseC_artist_loops2a_2018: Nun drehe deinen Vogel mithilfe einer Schleife
        12 Mal in einer 30-Grad-Drehung.
      courseC_artist_loops2a_2019: |-
        Verwende nun eine Schleife, um weitere Kopien Deines Aufklebers zu erstellen. Versuche, die Zahlenwerte für die Drehung zu ändern und wiederhole Bausteine, um verschiedene Muster zu erstellen.

        * * *

        Drücke "Fertig stellen", wenn du mit dem, was du gemacht hast, zufrieden bist.

        ![expandable](https://images.code.org/8b4352a1abe72419043d278752261b57-image-1553097917337.png)
        ![expandable](https://images.code.org/5211e2fe2852e25a884a790155ba47d5-image-1553097923167.png)
        ![expandable](https://images.code.org/0e3fbe8bbd20526cc735dfd26d2473ee-image-1553097925789.png)
      courseC_artist_loops3a: |-
        Das macht richtig Spaß!

        Füge jetzt einen Fledermaus-Sticker direkt nach dem Vogel hinzu, um ein Bild wie das nachfolgende zu erstellen.

        * * *

        ![expandable](https://images.code.org/3aa37f679eabc7a5a337291db614dd98-image-1496711069351.03.49.png)
      courseC_artist_loops3a_2018: |-
        Das macht richtig Spaß!

        Füge jetzt einen Fledermaus-Sticker direkt nach dem Vogel hinzu, um ein Bild wie das nachfolgende zu erstellen.

        * * *

        ![expandable](https://images.code.org/3aa37f679eabc7a5a337291db614dd98-image-1496711069351.03.49.png)
      courseC_artist_loops3a_2019: "Das macht Spaß!  \n\nFüge nun einen zweiten Aufkleber
        direkt über dem ersten hinzu, um ein Bild wie das untenstehende zu erstellen.\n\n*
        * *\n\nDrücke \"Fertig stellen\", wenn du mit dem, was du gemacht hast, zufrieden
        bist.\n\n![expandable](https://images.code.org/3aa37f679eabc7a5a337291db614dd98-image-1496711069351.03.49.png)\n![expandable](https://images.code.org/dd0e0eee69d37493c5ba584164316a9f-image-1553098351969.png)\n![expandable](https://images.code.org/880908899d8e6ceac8a8ce1bd0bf47eb-image-1553098355311.png)"
      courseC_artist_loops4a: "Füge zu deinem Code einen Block hinzu, so dass der
        Künstler zwischen dem Stempeln des Vogels und der Fledermaus um 75 Pixel nach
        vorne springt. Achte bei diesem Rätsel darauf, dass du innerhalb deiner Schleife
        `auf 200 über 200 nach unten` springst, damit du in der Mitte bleibst! \n\n*
        * *\n\n![expandable](https://images.code.org/5b67ed8d878d6c2a5009eee054427fd5-image-1496711253365.05.35.png)"
      courseC_artist_loops4a_2018: |-
        Editiere deinen Code so, dass du um 75 Pixel nach vorne springst, zwischen dem Stempeln des Vogels und des Schlägers. In diesem Rätsel stelle sicher, dass du innerhalb deiner Schleife zu 200 über 200 nach unten gesprungen bist, damit du in der Mitte bleibst!

        * * *

        ![expandable](https://images.code.org/5b67ed8d878d6c2a5009eee054427fd5-image-1496711253365.05.35.png)
      courseC_artist_loops4a_2019: |-
        Bearbeite Deinen Code so, dass du zwischen den beiden Aufklebern vorwärts springst. In diesem Puzzle stelle sicher, dass du innerhalb der Schleife an Mitte gesprungen bist, um in der Mitte zu bleiben!

        * * *

        Drücke "Fertig stellen", wenn du mit dem, was du gemacht hast, zufrieden bist.

        ![expandable](https://images.code.org/5b67ed8d878d6c2a5009eee054427fd5-image-1496711253365.05.35.png)
        ![expandable](https://images.code.org/5774170704916cfddcf2e98c2c01d718-image-1553099207939.png)
        ![expandable](https://images.code.org/9b016314df4aed5165c76282bab0cea1-image-1553099212229.png)
        ![expandable](https://images.code.org/2cf50b8e9ae75803f15908304c22a10b-image-1553099215987.png)
      courseC_artist_loops5a: |-
        Was passiert, wenn man einen oder beide Sticker durch eine andere Kreatur ersetzt?

        * * *

        ![expandable](https://images.code.org/cadb5e244db64a781bc02b55f2e7ccca-image-1496711397989.08.28.png)
      courseC_artist_loops5a_2018: |-
        Was passiert, wenn man einen oder beide Sticker durch eine andere Kreatur ersetzt?

        * * *

        ![expandable](https://images.code.org/cadb5e244db64a781bc02b55f2e7ccca-image-1496711397989.08.28.png)
      courseC_artist_loops5a_2019: |-
        Was passiert, wenn man einen oder beide Sticker durch eine andere Kreatur ersetzt?

        * * *

        ![expandable](https://images.code.org/cadb5e244db64a781bc02b55f2e7ccca-image-1496711397989.08.28.png)
      courseC_artist_loops5b: "Was passiert, wenn du dich `vorwärts` und dann um 100,
        200 oder 400 Pixel irgendwo innerhalb der Schleife \\`zurück´ bewegst? \n\n-
        \  Versuche, den `Muster bestimmen`-Block zu verwenden, bevor du deine Schleife
        beginnst, um ein Kunstwerk zu schaffen!\n\n* * *\n\n    [expandable][0]"
      courseC_artist_loops5b_2018: "Was passiert, wenn du dich `vorwärts` und dann
        um 100, 200 oder 400 Pixel irgendwo innerhalb der Schleife \\`zurück´ bewegst?
        \n\n-   Versuche, den `Muster bestimmen`-Block zu verwenden, bevor du deine
        Schleife beginnst, um ein Kunstwerk zu schaffen!\n\n* * *\n\n    [expandable][0]"
      courseC_artist_loops5b_2019: "Was passiert, wenn du dich vorwärts und rückwärts
        um 100, 200 oder 400 Pixel irgendwo innerhalb der Schleife bewegst?  \n\n-
        \  Versuche den Baustein `Setze Muster` zu verwenden bevor die Schleife beginnt,
        um ein Kunstwerk zu erstellen!\n\n* * *\n\n![expandable](https://images.code.org/d523de02389fd23db3029327c03b727d-image-1497039953252.24.18.png)\n![expandable](https://images.code.org/55285e9e5c5ae1cf1c895cc0bf92824d-image-1553100970790.png)\n![expandable](https://images.code.org/6b8e67db2a3b341bc56fa53f67c284c2-image-1553100974645.png)"
      courseC_artist_loops6a: |-
        Füge einen dritten Sticker an einer beliebiger Stelle in der Schleife hinzu, ganz wie es dir gefällt! Wie sieht das Ergebnis jetzt aus?

        -   Ändere das Muster auf deinem Pinsel für mehr Vielfalt!

        * * *

        ![expandable](https://images.code.org/b0f999ef4b9ab6bd9780e9fbac07dc8d-image-1497040845047.39.55.png)
      courseC_artist_loops6a_2018: |-
        Füge einen dritten Sticker an einer beliebiger Stelle in der Schleife hinzu, ganz wie es dir gefällt! Wie sieht das Ergebnis jetzt aus?

        -   Ändere das Muster auf deinem Pinsel für mehr Vielfalt!

        * * *

        ![expandable](https://images.code.org/b0f999ef4b9ab6bd9780e9fbac07dc8d-image-1497040845047.39.55.png)
      courseC_artist_loops6a_2019: |-
        Füge einen dritten Aufkleber an beliebiger Stelle in der Schleife hinzu! Wie sieht es jetzt aus?

        -   Ändere das Muster auf deines Pinsels für mehr Vielfalt!

        * * *

        ![expandable](https://images.code.org/edc53f27379e018e61a6ab9dcc2717ea-image-1560984648573.png)
        ![expandable](https://images.code.org/c41b00a743f245f98d2cfb66cb18e771-image-1560984690182.png)
        ![expandable](https://images.code.org/4c8910f72a7f0cd81713ded7b866a883-image-1560984706203.png)
      courseC_artist_loops7a: "Versuche, die \\`wiederholen‘-Schleife\" so zu ändern,
        dass sie eine andere Anzahl von Malen läuft. Wie weit musst du dich drehen,
        um in einem vollen Kreis zu gehen?\n\n-   Versuche, die Anzahl der Umdrehungen
        zu ändern \n    -   Probiere eine 60-Grad-Drehung mit 6 Umdrehungen aus\n
        \   -   Probiere eine 20-Grad-Drehung mit 18 Umdrehungen aus\n\n* * *\n\nDieses
        Bild zeigt einen Piraten, einen Ninja und eine Giraffe. Sie drehen sich 18
        Mal mit einer 20-Grad-Drehung. \n\n![expandable](https://images.code.org/99411638acb44e8a7ba5b9696fe11fa4-image-1496714175039.53.24.png)"
      courseC_artist_loops7a_2018: "Versuche, die \\`wiederholen‘-Schleife\" so zu
        ändern, dass sie eine andere Anzahl von Malen läuft. Wie weit musst du dich
        drehen, um in einem vollen Kreis zu gehen?\n\n-   Versuche, die Anzahl der
        Umdrehungen zu ändern \n    -   Probiere eine 60-Grad-Drehung mit 6 Umdrehungen
        aus\n    -   Probiere eine 20-Grad-Drehung mit 18 Umdrehungen aus\n\n* * *\n\nDieses
        Bild zeigt einen Piraten, einen Ninja und eine Giraffe. Sie drehen sich 18
        Mal mit einer 20-Grad-Drehung. \n\n![expandable](https://images.code.org/99411638acb44e8a7ba5b9696fe11fa4-image-1496714175039.53.24.png)"
      courseC_artist_loops7a_2019: |-
        Versuche die `wiederhole`-Schleife so zu ändern, dass sie eine andere Anzahl von Malen ausführt wird.  Wie weit muss man sich drehen, um im Kreis zu gehen?

        -   Versuche zu ändern, wie oft du dich drehst.
            -   Versuche eine 60-Grad-Drehung, 6 mal
            -   Versuche eine 20-Grad-Drehung, 18 mal.

        * * *

        Das erste Bild verwendet einen Piraten, einen Ninja und eine Giraffe. Sie wiederholen 18 mal eine 20 Grad Drehung.

        ![expandable](https://images.code.org/99411638acb44e8a7ba5b9696fe11fa4-image-1496714175039.53.24.png)
        ![expandable](https://images.code.org/9f28cb9b434b914846c3846bc6652f66-image-1560982666379.png)
        ![expandable](https://images.code.org/e9128684956504b0172708d63b65f93a-image-1560982686482.png)
        ![expandable](https://images.code.org/8e9cf52ecaf72678c65558f18f3e0d3e-image-1560982695632.png)
      courseC_artist_loops8a: "Jetzt probiere selbst etwas aus. Was passiert, wenn
        du zwei getrennte Kreise aus verschiedenen Stickern machst?\n\n* * *\n\nBrauchst
        du eine Anregung? Versuche, ein Muster wie dieses zu erstellen. \n\n![expandable](https://images.code.org/d8e0ad6294aa5e04e4aab56631a6b50b-image-1496714582863.02.14.png)"
      courseC_artist_loops8a_2018: "Jetzt probiere selbst etwas aus. Was passiert,
        wenn du zwei getrennte Kreise aus verschiedenen Stickern machst?\n\n* * *\n\nBrauchst
        du eine Anregung? Versuche, ein Muster wie dieses zu erstellen. \n\n![expandable](https://images.code.org/d8e0ad6294aa5e04e4aab56631a6b50b-image-1496714582863.02.14.png)"
      courseC_artist_loops8a_2019: "Jetzt probiere selbst etwas aus. Was passiert,
        wenn du zwei getrennte Kreise aus verschiedenen Stickern machst?\n\n* * *\n\nBrauchst
        du eine Anregung? Versuche, ein Muster wie dieses zu erstellen. \n\n![expandable](https://images.code.org/d8e0ad6294aa5e04e4aab56631a6b50b-image-1496714582863.02.14.png)"
      courseC_artist_loopsPre1a: |-
        Füge diesen Code in eine ˋwiederholenˋ-Schleife ein und wiederhole sie **6** mal.

        -   Siehst du, wir haben am Schluss des Schleifen-Codes eine 60-Grad-Drehung eingesetzt, um eine volle Drehung zu erhalten.
      courseC_artist_loopsPre1a_2018: |-
        Füge diesen Code in eine ˋwiederholenˋ-Schleife ein und wiederhole sie **6** mal.

        -   Siehst du, wir haben am Schluss des Schleifen-Codes eine 60-Grad-Drehung eingesetzt, um eine volle Drehung zu erhalten.
      courseC_artist_loopsPre1a_2019: |-
        Füge diesen Code in eine ˋwiederholenˋ-Schleife ein und wiederhole sie **6** mal.

        -   Siehst du, wir haben am Schluss des Schleifen-Codes eine 60-Grad-Drehung eingesetzt, um eine volle Drehung zu erhalten.
      courseC_artist_loopsPrePre1a: |-
        Benutze den <xml><block type="jump_to_xy" id="callMe"><title name="XPOS">200</title><title name="YPOS">200</title></block></xml> Baustein, um den Künstler in die Mitte des Spielbereichs zu bringen.\
        Zeichne dann mit dem <xml><block type="draw_move_by_constant"><title name="DIR">moveForward</title><title name="VALUE">50</title></block></xml> Baustein eine 50 Pixel lange Linie.
      courseC_artist_loopsPrePre1a_2018: |-
        ### Der Zeichner ist an der falschen Stelle!

        Benutze den Baustein <xml><block type="jump_to_xy" id="callMe"><title name="XPOS">200</title><title name="YPOS">200</title></block></xml>, um den Zeichner in die Mitte des Spielbereichs zu bringen.
        Zeichne dann eine 50 Pixel lange Linie mit dem Baustein <xml><block type="draw_move_by_constant"><title name="DIR">moveForward</title><title name="VALUE">50</title></block></xml>.
      courseC_artist_loopsPrePre1a_2019: "Der Künstler ist an der falschen Stelle!
        \ \n\nBenutzen Sie den <xml><block type=\"jump_to_xy\" id=\"callMe\" block-text=\"jump
        to 200 over 200 down\"><title name=\"XPOS\">200</title><title name=\"YPOS\">200</title></block></xml>
        Baustein, um den Künstler in die Mitte des Spielbereichs zu bringen.\nZeichne
        dann eine 50 Pixel lange Linie mit dem <xml><block type=\"draw_move_by_constant\"
        block-text=\"move forward\"><title name=\"DIR\">moveForward</title><title
        name=\"VALUE\">50</title></block></xml> Baustein."
      courseC_artist_prog1: "_“Hallo, ich bin ein Künstler. Du kannst Code schreiben,
        mit dem ich fast alles zeichnen kann.\"\"_ \n\nSpiele mit den Blöcken in der
        Werkzeugkiste, um zu sehen, was sie bewirken!"
      courseC_artist_prog1_2018: "_“Hallo, ich bin ein Künstler. Du kannst Code schreiben,
        mit dem ich fast alles zeichnen kann.\"\"_ \n\nSpiele mit den Blöcken in der
        Werkzeugkiste, um zu sehen, was sie bewirken!"
      courseC_artist_prog1_2019: "_“Hallo, ich bin ein Künstler. Du kannst Code schreiben,
        mit dem ich fast alles zeichnen kann.\"\"_ \n\nSpiele mit den Blöcken in der
        Werkzeugkiste, um zu sehen, was sie bewirken!"
      courseC_artist_prog2: |-
        _“Lass uns einen Käfig für mein Monster-Haustier bauen“_

        Ziehe Blöcke auf den Bildschirm, damit der Künstler über die grauen Linien im Bild zeichnen kann.\\

        (Jede Linie ist 100 Pixel lang)
      courseC_artist_prog2_2018: |-
        _“Lass uns einen Käfig für mein Monster-Haustier bauen“_

        Ziehe Blöcke auf den Bildschirm, damit der Künstler über die grauen Linien im Bild zeichnen kann.\\

        (Jede Linie ist 100 Pixel lang)
      courseC_artist_prog2_2019: |-
        _“Lass uns einen Käfig für mein Monster-Haustier bauen“_

        Ziehe Blöcke auf den Bildschirm, damit der Künstler über die grauen Linien im Bild zeichnen kann.\\

        (Jede Linie ist 100 Pixel lang)
      courseC_artist_prog3: |-
        _""Dieses Raumschiff braucht ein Fenster!""_

        Jede Seite des inneren Quadrats ist 100 Pixel lang und alle Winkel betragen 90 Grad.
      courseC_artist_prog3_2018: |-
        _""Dieses Raumschiff braucht ein Fenster!""_

        Jede Seite des inneren Quadrats ist 100 Pixel lang und alle Winkel betragen 90 Grad.
      courseC_artist_prog3_2019: |-
        _""Dieses Raumschiff braucht ein Fenster!""_

        Jede Seite des inneren Quadrats ist 100 Pixel lang und alle Winkel betragen 90 Grad.
      courseC_artist_prog4: "_\"\"Oh nein!  Starlas Lieblings-Alien ist gerade weggeflogen!
        Lasst uns der Raumfahrerin helfen!\"\"_ \n\nBaue Starlas Rakete fertig, damit
        sie ihr Haustier fangen kann\n(Jede Seite des Dreiecks ist 100 Pixel lang
        und hat Außenwinkel von 120 Grad)"
      courseC_artist_prog4_2018: "_\"\"Oh nein!  Starlas Lieblings-Alien ist gerade
        weggeflogen! Lasst uns der Raumfahrerin helfen!\"\"_ \n\nBaue Starlas Rakete
        fertig, damit sie ihr Haustier fangen kann\n(Jede Seite des Dreiecks ist 100
        Pixel lang und hat Außenwinkel von 120 Grad)"
      courseC_artist_prog4_2019: "_\"\"Oh nein!  Starlas Lieblings-Alien ist gerade
        weggeflogen! Lasst uns der Raumfahrerin helfen!\"\"_ \n\nBaue Starlas Rakete
        fertig, damit sie ihr Haustier fangen kann\n(Jede Seite des Dreiecks ist 100
        Pixel lang und hat Außenwinkel von 120 Grad)"
      courseC_artist_prog5: |-
        _""Vielleicht sollten wir für jedes unserer Haustiere ein Schildchen für den Fall machen, dass sie sich verlaufen!""_

        Stelle dieses Schild fertig, indem du ein Rechteck um die Außenseite zeichnest.\
        (Die langen Seiten sind jeweils 200 Pixel und die kurzen Seiten jeweils 100 Pixel lang)
      courseC_artist_prog5_2018: |-
        _""Vielleicht sollten wir für jedes unserer Haustiere ein Schildchen für den Fall machen, dass sie sich verlaufen!""_

        Stelle dieses Schild fertig, indem du ein Rechteck um die Außenseite zeichnest.\
        (Die langen Seiten sind jeweils 200 Pixel und die kurzen Seiten jeweils 100 Pixel lang)
      courseC_artist_prog5_2019: |-
        _""Vielleicht sollten wir für jedes unserer Haustiere ein Schildchen für den Fall machen, dass sie sich verlaufen!""_

        Stelle dieses Schild fertig, indem du ein Rechteck um die Außenseite zeichnest.\
        (Die langen Seiten sind jeweils 200 Pixel und die kurzen Seiten jeweils 100 Pixel lang)
      courseC_artist_prog6: |-
        _“Jetzt ein Tag für Belle!“_

        Zeichne diese Raute mit 200 Pixel langen Seiten.
      courseC_artist_prog6_2018: |-
        _"Jetzt ein Schild für Belle!"_

        Zeichne dieses Quadrat mit 200 Pixel Seiten.
      courseC_artist_prog6_2019: |-
        _"Jetzt ein Schild für Belle!"_

        Zeichne dieses Quadrat mit 200 Pixel Seiten.
      courseC_artist_prog7: "**Aufgabe:** Dieser Tag ist ganz besonderes!  \n\nWeißt
        du, wie du den Umriss zeichnen kannst?\\\n(Die lange Seite ist 150 Pixel und
        jede der kurzen Seiten ist 75 Pixel lang)"
      courseC_artist_prog7_2018: "**Aufgabe:** Dieser Tag ist ganz besonderes!  \n\nWeißt
        du, wie du den Umriss zeichnen kannst?\\\n(Die lange Seite ist 150 Pixel und
        jede der kurzen Seiten ist 75 Pixel lang)"
      courseC_artist_prog7_2019: "**Aufgabe:** Dieser Tag ist ganz besonderes!  \n\nWeißt
        du, wie du den Umriss zeichnen kannst?\\\n(Die lange Seite ist 150 Pixel und
        jede der kurzen Seiten ist 75 Pixel lang)"
      courseC_artist_prog8: |-
        Noch ein Tag.  Dies ist ein Dreieck für Pi.\
        (Jede Seite ist 150 Pixel lang)
      courseC_artist_prog8_2018: |-
        Noch ein Tag.  Dies ist ein Dreieck für Pi.\
        (Jede Seite ist 150 Pixel lang)
      courseC_artist_prog8_2019: |-
        Noch ein Tag.  Dies ist ein Dreieck für Pi.\
        (Jede Seite ist 150 Pixel lang)
      courseC_artist_prog_challenge1: Zeichne für jedes Tier einen Raum. Für diese
        Aufgabe gibt es viele Lösungen, hab Spaß dabei! Jedes Feld hat 100 Pixel lange
        Seiten.
      courseC_artist_prog_challenge1_2018: Zeichne für jedes Tier einen Raum. Für
        diese Aufgabe gibt es viele Lösungen, hab Spaß dabei! Jedes Feld hat 100 Pixel
        lange Seiten.
      courseC_artist_prog_challenge1_2019: Zeichne für jedes Tier einen Raum. Für
        diese Aufgabe gibt es viele Lösungen, hab Spaß dabei! Jedes Feld hat 100 Pixel
        lange Seiten.
      courseC_artist_prog_challenge2a: |-
        "_""Hilf mir, die gelben Linien auf dieser Straße zu malen!""_

        Die drei Liniensegmente sind 150, 100 und 200 Pixel lang!"
      courseC_artist_prog_challenge2a_2018: |-
        "_""Hilf mir, die gelben Linien auf dieser Straße zu malen!""_

        Die drei Liniensegmente sind 150, 100 und 200 Pixel lang!"
      courseC_artist_prog_challenge2a_2019: |-
        "_""Hilf mir, die gelben Linien auf dieser Straße zu malen!""_

        Die drei Liniensegmente sind 150, 100 und 200 Pixel lang!"
      courseC_collector_loops_challenge2: |-
        _„Lass uns gemeinsam auf Schatzsuche gehen!“_

        Hilf der Sammlerin dabei, mindestens **5** Schätze einzusammeln.
      courseC_collector_loops_challenge2_2018: |-
        _„Lass uns gemeinsam auf Schatzsuche gehen!“_

        Hilf der Sammlerin dabei, mindestens **5** Schätze einzusammeln.
      courseC_collector_loops_challenge2_2019: |-
        _„Lass uns gemeinsam auf Schatzsuche gehen!“_

        Hilf der Sammlerin dabei, mindestens **5** Schätze einzusammeln.
      courseC_collector_prog1: |-
        **Freies Spiel:** Das ist Laurel, die Abenteurerin! Bewege sie und sammle soviel Schätze wie möglich ein. Benutze den 'sammeln' Baustein, um die Schätze aufzuheben!

        Ziehe die Bausteine in den Arbeitsbereich und versuche herauszufinden, wie du die Schätze einsammeln kannst. Du brauchst mindestens einen Schatz, um dieses Level zu bestehen.
      courseC_collector_prog1_2018: |-
        **Freies Spiel:** Das ist Laurel, die Abenteurerin! Bewege sie und sammle soviel Schätze wie möglich ein. Benutze den 'sammeln' Baustein, um die Schätze aufzuheben!

        Ziehe die Bausteine in den Arbeitsbereich und versuche herauszufinden, wie du die Schätze einsammeln kannst. Du brauchst mindestens einen Schatz, um dieses Level zu bestehen.
      courseC_collector_prog1_2019: |-
        **Freies Spiel:** Das ist Laurel, die Abenteurerin! Bewege sie und sammle soviel Schätze wie möglich ein. Benutze den 'sammeln' Baustein, um die Schätze aufzuheben!

        Ziehe die Bausteine in den Arbeitsbereich und versuche herauszufinden, wie du die Schätze einsammeln kannst. Du brauchst mindestens einen Schatz, um dieses Level zu bestehen.
      courseC_collector_prog2: Bewege Laurel zum Schatz und verwende dann <xml><block
        type="collector_collect"/></xml>, um ihn aufzuheben.
      courseC_collector_prog2_2018: Bewege Laurel zum Schatz und verwende dann <xml><block
        type="collector_collect"/></xml>, um ihn aufzuheben.
      courseC_collector_prog2_2019: Bewegen Laurel zum Schatz und benutze dann den
        <xml><block type="collector_collect" block-text="collect"/></xml> Baustein
        um ihn aufzunehmen.
      courseC_collector_prog3: |-
        _"Die Reihenfolge ist wichtig!"_

        Die Bausteine, die du brauchst, sind schon im Arbeitsbereich, aber noch nicht miteinander verbunden.\
        Ordne diese Bausteine so an, dass der Schatz eingesammelt wird, und löse damit die Aufgabe.
      courseC_collector_prog3_2018: |-
        _"Die Reihenfolge ist wichtig!"_

        Die Bausteine, die du brauchst, sind schon im Arbeitsbereich, aber noch nicht miteinander verbunden.\
        Ordne diese Bausteine so an, dass der Schatz eingesammelt wird, und löse damit die Aufgabe.
      courseC_collector_prog3_2019: |-
        _"Die Reihenfolge ist wichtig!"_

        Die Bausteine, die du brauchst, sind schon im Arbeitsbereich, aber noch nicht miteinander verbunden.\
        Ordne diese Bausteine so an, dass der Schatz eingesammelt wird, und löse damit die Aufgabe.
      courseC_collector_prog4: |-
        _"Die Reihenfolge ist wichtig!"_

        Die Bausteine, die du brauchst, sind schon im Arbeitsbereich, aber noch nicht miteinander verbunden.

        Bringe diese Bausteine in die richtige Reihenfolge, um alle Schätze einzusammeln und die Aufgabe zu lösen.
      courseC_collector_prog4_2018: |-
        _"Die Reihenfolge ist wichtig!"_

        Die Bausteine, die du brauchst, sind schon im Arbeitsbereich, aber noch nicht miteinander verbunden.

        Bringe diese Bausteine in die richtige Reihenfolge, um alle Schätze einzusammeln und die Aufgabe zu lösen.
      courseC_collector_prog4_2019: |-
        _"Die Reihenfolge ist wichtig!"_

        Die Bausteine, die du brauchst, sind schon im Arbeitsbereich, aber noch nicht miteinander verbunden.

        Bringe diese Bausteine in die richtige Reihenfolge, um alle Schätze einzusammeln und die Aufgabe zu lösen.
      courseC_collector_prog5: |-
        _"Hilf mir, alle Schätze einzusammeln!"_

        Diese Bausteine sind in der falschen Reihenfolge angeordnet. Kannst du das in Ordnung bringen?
      courseC_collector_prog5_2018: |-
        _"Hilf mir, alle Schätze einzusammeln!"_

        Diese Bausteine sind in der falschen Reihenfolge angeordnet. Kannst du das in Ordnung bringen?
      courseC_collector_prog5_2019: |-
        _"Hilf mir, alle Schätze einzusammeln!"_

        Diese Bausteine sind in der falschen Reihenfolge angeordnet. Kannst du das in Ordnung bringen?
      courseC_collector_prog6: |-
        _"Hilf mir, alle Schätze einzusammeln!"_

        Diese Bausteine sind in der falschen Reihenfolge angeordnet. Ordne sie richtig an, um alle Schätze einzusammeln.
      courseC_collector_prog6_2018: |-
        _"Hilf mir, alle Schätze einzusammeln!"_

        Diese Bausteine sind in der falschen Reihenfolge angeordnet. Ordne sie richtig an, um alle Schätze einzusammeln.
      courseC_collector_prog6_2019: |-
        _"Hilf mir, alle Schätze einzusammeln!"_

        Diese Bausteine sind in der falschen Reihenfolge angeordnet. Ordne sie richtig an, um alle Schätze einzusammeln.
      courseC_collector_prog7: |-
        **Aufgabe:** _"Was ist hier los?"_

        Auch wenn wir alle Bausteine in die richtige Reihenfolge bringen, fehlen immer noch Schätze.\
        Verwende weitere Bausteine aus der Werkzeugkiste, um alle Schätze einzusammeln.
      courseC_collector_prog7_2018: |-
        **Aufgabe:** _"Was ist hier los?"_

        Auch wenn wir alle Bausteine in die richtige Reihenfolge bringen, fehlen immer noch Schätze.\
        Verwende weitere Bausteine aus der Werkzeugkiste, um alle Schätze einzusammeln.
      courseC_collector_prog7_2019: |-
        **Aufgabe:** _"Was ist hier los?"_

        Auch wenn wir alle Bausteine in die richtige Reihenfolge bringen, fehlen immer noch Schätze.\
        Verwende weitere Bausteine aus der Werkzeugkiste, um alle Schätze einzusammeln.
      courseC_collector_prog8: _"Weiter so! Hilf mir, alle Schätze einzusammeln."_
      courseC_collector_prog8_2018: _"Weiter so! Hilf mir, alle Schätze einzusammeln."_
      courseC_collector_prog8_2019: _"Weiter so! Hilf mir, alle Schätze einzusammeln."_
      courseC_collector_prog9: _"Lass uns alle Schätze sammeln!"_
      courseC_collector_prog9_2018: _"Lass uns alle Schätze sammeln!"_
      courseC_collector_prog9_2019: _"Lass uns alle Schätze sammeln!"_
      courseC_collector_prog_challenge2: In dieser Höhle gibt es 20 Schätze. Sammle
        mindestens **10** ein, um diese Aufgabe abzuschließen!
      courseC_collector_prog_challenge2_2018: In dieser Höhle gibt es 20 Schätze.
        Sammle mindestens **10** ein, um diese Aufgabe abzuschließen!
      courseC_collector_prog_challenge2_2019: In dieser Höhle gibt es 20 Schätze.
        Sammle mindestens **10** ein, um diese Aufgabe abzuschließen!
      courseC_data wizard: Drücke "Ausführen". Der Zauberer lässt Tiere erscheinen.
        Zähle sie. Was fällt dir auf?
      courseC_flappy_events1: "Hänge den `normal mit den Flügeln schlagen`-Baustein
        an das Ereignis `beim Klicken` an und drücke dann \"Ausführen\". \n\n* * *\n\nKlicke
        oder tippe auf den Spielbereich, um Flappy zum Ziel zu bewegen."
      courseC_flappy_events10: "Erstellen Dein eigenes Flappy-Spiel! \n\nDu kannst
        das Aussehen und die Regeln ändern... sogar die Schwerkraft! \nWenn du fertig
        bist, klicke auf \"Fertigstellen\", um es mit Freunden auf deren Handys zu
        teilen."
      courseC_flappy_events10_2018: "Erstellen Dein eigenes Flappy-Spiel! \n\nDu kannst
        das Aussehen und die Regeln ändern... sogar die Schwerkraft! \nWenn du fertig
        bist, klicke auf \"Fertigstellen\", um es mit Freunden auf deren Handys zu
        teilen."
      courseC_flappy_events10_2019: "Erstellen Dein eigenes Flappy-Spiel! \n\nDu kannst
        das Aussehen und die Regeln ändern... sogar die Schwerkraft! \nWenn du fertig
        bist, klicke auf \"Fertigstellen\", um es mit Freunden auf deren Handys zu
        teilen."
      courseC_flappy_events1_2018: "Hänge den `normal mit den Flügeln schlagen`-Baustein
        an das Ereignis `beim Klicken` an und drücke dann \"Ausführen\". \n\n* * *\n\nKlicke
        oder tippe auf den Spielbereich, um Flappy zum Ziel zu bewegen."
      courseC_flappy_events1_2019: "Hänge den `normal mit den Flügeln schlagen`-Baustein
        an das Ereignis `beim Klicken` an und drücke dann \"Ausführen\". \n\n* * *\n\nKlicke
        oder tippe auf den Spielbereich, um Flappy zum Ziel zu bewegen."
      courseC_flappy_events2: "Das Ereignis `wenn ausführen` ermöglicht es dir, Code
        auszuführen, sobald dein Spiel startet. \n\nVersuche, einen Baustein hinzuzufügen,
        der die Geschwindigkeit des Levels bestimmt, wenn die \"Ausführen\"-Taste
        gedrückt wird. \n\n* * *\n\nSpiele das Spiel und flattere zum Ziel, um weiterzumachen."
      courseC_flappy_events2_2018: "Das Ereignis `wenn ausführen` ermöglicht es dir,
        Code auszuführen, sobald dein Spiel startet. \n\nVersuche, einen Baustein
        hinzuzufügen, der die Geschwindigkeit des Levels bestimmt, wenn die \"Ausführen\"-Taste
        gedrückt wird. \n\n* * *\n\nSpiele das Spiel und flattere zum Ziel, um weiterzumachen."
      courseC_flappy_events2_2019: "Das Ereignis `wenn ausführen` ermöglicht es dir,
        Code auszuführen, sobald dein Spiel startet. \n\nVersuche, einen Baustein
        hinzuzufügen, der die Geschwindigkeit des Levels bestimmt, wenn die \"Ausführen\"-Taste
        gedrückt wird. \n\n* * *\n\nSpiele das Spiel und flattere zum Ziel, um weiterzumachen."
      courseC_flappy_events3: "Jetzt haben wir den Boden hinzugefügt.\n\nFüge den
        Baustein \"Spiel beenden\" zu dem Ereignis \"beim Berühren des Bodens“ hinzu.
        \n\n* * *\n\nSpiele das Spiel und lasse den Vogel auf den Boden aufschlagen,
        um weiterzumachen."
      courseC_flappy_events3_2018: "Jetzt haben wir den Boden hinzugefügt.\n\nFüge
        den Baustein \"Spiel beenden\" zu dem Ereignis \"beim Berühren des Bodens“
        hinzu. \n\n* * *\n\nSpiele das Spiel und lasse den Vogel auf den Boden aufschlagen,
        um weiterzumachen."
      courseC_flappy_events3_2019: "Jetzt haben wir den Boden hinzugefügt.\n\nFüge
        den Baustein \"Spiel beenden\" zu dem Ereignis \"beim Berühren des Bodens“
        hinzu. \n\n* * *\n\nSpiele das Spiel und lasse den Vogel auf den Boden aufschlagen,
        um weiterzumachen."
      courseC_flappy_events4: "Flappy wird durch die Hindernisse fliegen, bist du
        Code schreibst, der ihn zum Abstürzen bringt. \nHänge einen Baustein an den
        „wenn ein Hindernis getroffen wird“-Baustein. Dein Code muss das Spiel beenden,
        wenn Flappy mit dem ersten Hindernis zusammenstößt."
      courseC_flappy_events4_2018: "Flappy wird durch die Hindernisse fliegen, bist
        du Code schreibst, der ihn zum Abstürzen bringt. \nHänge einen Baustein an
        den „wenn ein Hindernis getroffen wird“-Baustein. Dein Code muss das Spiel
        beenden, wenn Flappy mit dem ersten Hindernis zusammenstößt."
      courseC_flappy_events4_2019: "Flappy wird durch die Hindernisse fliegen, bist
        du Code schreibst, der ihn zum Abstürzen bringt. \nHänge einen Baustein an
        den „wenn ein Hindernis getroffen wird“-Baustein. Dein Code muss das Spiel
        beenden, wenn Flappy mit dem ersten Hindernis zusammenstößt."
      courseC_flappy_events5: "Wir haben eine Anzeigetafel hinzugefügt, auf der die
        Punkte gezählt werden, wenn Flappy an Hindernissen vorbeifliegt. \n\nFüge
        einen „am Hindernis vorbeifliegen“-Baustein hinzu und hole dir einen Punkt,
        indem du Flappy durch die ersten Rohre fliegen lässt."
      courseC_flappy_events5_2018: "Wir haben eine Anzeigetafel hinzugefügt, auf der
        die Punkte gezählt werden, wenn Flappy an Hindernissen vorbeifliegt. \n\nFüge
        einen „am Hindernis vorbeifliegen“-Baustein hinzu und hole dir einen Punkt,
        indem du Flappy durch die ersten Rohre fliegen lässt."
      courseC_flappy_events5_2019: "Wir haben eine Anzeigetafel hinzugefügt, auf der
        die Punkte gezählt werden, wenn Flappy an Hindernissen vorbeifliegt. \n\nFüge
        einen „am Hindernis vorbeifliegen“-Baustein hinzu und hole dir einen Punkt,
        indem du Flappy durch die ersten Rohre fliegen lässt."
      courseC_flappy_events6: "Klicke auf den Abwärtspfeil innerhalb des Bausteins
        \"normal mit den Flügeln schlagen\", um eine andere Flügelstärke auszuwählen.
        \n\nVersuche, ob du auch dann einen Punkt machen kannst, wenn Flappy schwächer
        oder stärker mit den Flügeln schlägt, wenn du klickst."
      courseC_flappy_events6_2018: "Klicke auf den Abwärtspfeil innerhalb des Bausteins
        \"normal mit den Flügeln schlagen\", um eine andere Flügelstärke auszuwählen.
        \n\nVersuche, ob du auch dann einen Punkt machen kannst, wenn Flappy schwächer
        oder stärker mit den Flügeln schlägt, wenn du klickst."
      courseC_flappy_events6_2019: "Klicke auf den Abwärtspfeil innerhalb des Bausteins
        \"normal mit den Flügeln schlagen\", um eine andere Flügelstärke auszuwählen.
        \n\nVersuche, ob du auch dann einen Punkt machen kannst, wenn Flappy schwächer
        oder stärker mit den Flügeln schlägt, wenn du klickst."
      courseC_flappy_events7: Versuche als nächstes, die Szene zu ändern, indem du
        einen Baustein zum "wenn ausführen" Baustein hinzufügst.
      courseC_flappy_events7_2018: Versuche als nächstes, die Szene zu ändern, indem
        du einen Baustein zum "wenn ausführen" Baustein hinzufügst.
      courseC_flappy_events7_2019: Versuche als nächstes, die Szene zu ändern, indem
        du einen Baustein zum "wenn ausführen" Baustein hinzufügst.
      courseC_flappy_events8: "Du kannst den Hintergrund unter jedem Ereignis einstellen,
        nicht nur zu Beginn des Spiels. \n\nProbiere eine **zufällige** Szene einzustellen,
        wenn andere Ereignisse eintreten...zum Beispiel beim Vorbeifliegen an einem
        Hindernis."
      courseC_flappy_events8_2018: "Du kannst den Hintergrund unter jedem Ereignis
        einstellen, nicht nur zu Beginn des Spiels. \n\nProbiere eine **zufällige**
        Szene einzustellen, wenn andere Ereignisse eintreten...zum Beispiel beim Vorbeifliegen
        an einem Hindernis."
      courseC_flappy_events8_2019: "Du kannst den Hintergrund unter jedem Ereignis
        einstellen, nicht nur zu Beginn des Spiels. \n\nProbiere eine **zufällige**
        Szene einzustellen, wenn andere Ereignisse eintreten...zum Beispiel beim Vorbeifliegen
        an einem Hindernis."
      courseC_flappy_events9: Versuche, die Ereignisse zu verändern, indem das Spiel
        nicht endet, wenn Flappy mit einem Hindernis zusammenstößt, sondern der Punktestand
        auf 0 zurückgesetzt wird.
      courseC_flappy_events9_2018: Versuche, die Ereignisse zu verändern, indem das
        Spiel nicht endet, wenn Flappy mit einem Hindernis zusammenstößt, sondern
        der Punktestand auf 0 zurückgesetzt wird.
      courseC_flappy_events9_2019: Versuche, die Ereignisse zu verändern, indem das
        Spiel nicht endet, wenn Flappy mit einem Hindernis zusammenstößt, sondern
        der Punktestand auf 0 zurückgesetzt wird.
      courseC_harvester_loops1: |-
        Schleifen können verwendet werden, um mehr als nur Bewegungen zu wiederholen.

        Verwende Schleifen, um alle vier Kürbisse einzusammeln.
      courseC_harvester_loops10: Sammele den ganzen Mais und alle Kürbisse ein.
      courseC_harvester_loops10_2018: Sammele den ganzen Mais und alle Kürbisse ein.
      courseC_harvester_loops10_2019: Sammele den ganzen Mais und alle Kürbisse ein.
      courseC_harvester_loops11: Sammele den ganzen Mais und alle Kürbisse ein.
      courseC_harvester_loops11_2018: Sammele den ganzen Mais und alle Kürbisse ein.
      courseC_harvester_loops11_2019: Sammele den ganzen Mais und alle Kürbisse ein.
      courseC_harvester_loops1_2018: |-
        Schleifen können verwendet werden, um mehr als nur Bewegungen zu wiederholen.

        Verwende Schleifen, um alle vier Kürbisse einzusammeln.
      courseC_harvester_loops1_2019: |-
        Schleifen können verwendet werden, um mehr als nur Bewegungen zu wiederholen.

        Verwende Schleifen, um alle vier Kürbisse einzusammeln.
      courseC_harvester_loops2: Kannst du zwei verschiedene Schleifen kombinieren,
        um dich auf die Kürbisse zuzubewegen, und sie dann alle einsammeln?
      courseC_harvester_loops2_2018: Kannst du zwei verschiedene Schleifen kombinieren,
        um dich auf die Kürbisse zuzubewegen, und sie dann alle einsammeln?
      courseC_harvester_loops2_2019: Kannst du zwei verschiedene Schleifen kombinieren,
        um dich auf die Kürbisse zuzubewegen, und sie dann alle einsammeln?
      courseC_harvester_loops3: Sammle alle Kürbisse ein.
      courseC_harvester_loops3_2018: Sammle alle Kürbisse ein.
      courseC_harvester_loops3_2019: Sammle alle Kürbisse ein.
      courseC_harvester_loops4: |-
        Jetzt wächst hier auch Mais!

        Sammele den ganzen Mais und alle Kürbisse ein.
      courseC_harvester_loops4_2018: |-
        Jetzt wächst hier auch Mais!

        Sammele den ganzen Mais und alle Kürbisse ein.
      courseC_harvester_loops4_2019: |-
        Jetzt wächst hier auch Mais!

        Sammele den ganzen Mais und alle Kürbisse ein.
      courseC_harvester_loops5: Sammele den ganzen Mais und alle Kürbisse ein.
      courseC_harvester_loops5_2018: Sammele den ganzen Mais und alle Kürbisse ein.
      courseC_harvester_loops5_2019: Sammele den ganzen Mais und alle Kürbisse ein.
      courseC_harvester_loops6: Sammele den ganzen Mais und alle Kürbisse ein.
      courseC_harvester_loops6_2018: Sammele den ganzen Mais und alle Kürbisse ein.
      courseC_harvester_loops6_2019: Sammele den ganzen Mais und alle Kürbisse ein.
      courseC_harvester_loops7: Sammele den ganzen Mais und alle Kürbisse ein.
      courseC_harvester_loops7_2018: Sammele den ganzen Mais und alle Kürbisse ein.
      courseC_harvester_loops7_2019: Sammele den ganzen Mais und alle Kürbisse ein.
      courseC_harvester_loops8: |-
        **Aufgabe** Sammele den ganzen Mais und alle Kürbisse ein.

        Du kannst diese Aufgabe lösen, wie es dir gefällt, es ist dabei aber entweder viel Arbeit oder viel Nachdenken erforderlich!
      courseC_harvester_loops8_2018: |-
        **Aufgabe** Sammele den ganzen Mais und alle Kürbisse ein.

        Du kannst diese Aufgabe lösen, wie es dir gefällt, es ist dabei aber entweder viel Arbeit oder viel Nachdenken erforderlich!
      courseC_harvester_loops8_2019: |-
        **Aufgabe** Sammele den ganzen Mais und alle Kürbisse ein.

        Du kannst diese Aufgabe lösen, wie es dir gefällt, es ist dabei aber entweder viel Arbeit oder viel Nachdenken erforderlich!
      courseC_harvester_loops9: Sammele den ganzen Mais und alle Kürbisse ein.
      courseC_harvester_loops9_2018: Sammele den ganzen Mais und alle Kürbisse ein.
      courseC_harvester_loops9_2019: Sammele den ganzen Mais und alle Kürbisse ein.
      courseC_harvester_loops_challenge2: Ernte den gesamten Salat. Vermeide die Bäume
        und Felder!
      courseC_harvester_loops_challenge2_2018: Ernte den gesamten Salat. Vermeide
        die Bäume und Felder!
      courseC_harvester_loops_challenge2_2019: Ernte den gesamten Salat. Vermeide
        die Bäume und Felder!
      courseC_maze_debugging1: "Dieser Code ist nicht ganz richtig!  \n\nRepariere
        den Code, um Scrat zu helfen, an die Eichel zu kommen."
      courseC_maze_debugging1_2018: "Dieser Code ist nicht ganz richtig!  \n\nRepariere
        den Code, um Scrat zu helfen, an die Eichel zu kommen."
      courseC_maze_debugging1_2019: "Dieser Code ist nicht ganz richtig!  \n\nRepariere
        den Code, um Scrat zu helfen, an die Eichel zu kommen."
      courseC_maze_debugging3: "Irgendetwas stimmt da nicht ganz. \n\nEntferne Bausteine,
        um Scrat zur Eichel zu bringen!"
      courseC_maze_debugging3_2018: "Irgendetwas stimmt da nicht ganz. \n\nEntferne
        Bausteine, um Scrat zur Eichel zu bringen!"
      courseC_maze_debugging3_2019: "Irgendetwas stimmt da nicht ganz. \n\nEntferne
        Bausteine, um Scrat zur Eichel zu bringen!"
      courseC_maze_debugging_challenge2: Wenn Scrat zu oft abbiegt, könnte ihm schwindlig
        werden! Hilf ihm dabei, die Eichel mit nur vier `Abbiege`-Befehlen zu erreichen.
      courseC_maze_debugging_challenge2_2018: Wenn Scrat zu oft abbiegt, könnte ihm
        schwindlig werden! Hilf ihm dabei, die Eichel mit nur vier `Abbiege`-Befehlen
        zu erreichen.
      courseC_maze_debugging_challenge2_2019: Wenn Scrat zu oft abbiegt, könnte ihm
        schwindlig werden! Hilf ihm dabei, die Eichel mit nur vier `Abbiege`-Befehlen
        zu erreichen.
      courseC_maze_programming1: Für diese Aufgabe musst du alle Bausteine zusammensetzen,
        auf 'Ausführen' klicken und zusehen, wie der Code abläuft!
      courseC_maze_programming1_2018: Für diese Aufgabe musst du alle Bausteine zusammensetzen,
        auf 'Ausführen' klicken und zusehen, wie der Code abläuft!
      courseC_maze_programming1_2019: Für diese Aufgabe musst du alle Bausteine zusammensetzen,
        auf 'Ausführen' klicken und zusehen, wie der Code abläuft!
      courseC_maze_programming2: Ziehe einen weiteren <xml><block type="maze_moveForward"/></xml>
        Baustein aus der Werkzeugkiste, um deinen Code fertigzustellen.
      courseC_maze_programming2_2018: Ziehe einen weiteren <xml><block type="maze_moveForward"/></xml>
        Baustein aus der Werkzeugkiste, um deinen Code fertigzustellen.
      courseC_maze_programming2_2019: Ziehe einen weiteren <xml><block type="maze_moveForward"
        block-text="move forward"/></xml> Baustein aus der Werkzeugkiste, um deinen
        Code fertigzustellen.
      courseC_maze_programming3: |-
        _"Dieses Schwein ärgert mich."_

        Hier gibt es einen Baustein, der den Vogel gegen etwas krachen lässt.\
        Wirf diesen weg indem du ihn von den grauen Bausteinen löst und in den Werkzeugkasten zurückziehst.
      courseC_maze_programming3_2018: |-
        _"Dieses Schwein ärgert mich."_

        Hier gibt es einen Baustein, der den Vogel gegen etwas krachen lässt.\
        Wirf diesen weg indem du ihn von den grauen Bausteinen löst und in den Werkzeugkasten zurückziehst.
      courseC_maze_programming3_2019: |-
        _"Dieses Schwein ärgert mich."_

        Hier gibt es einen Baustein, der den Vogel gegen etwas krachen lässt.\
        Wirf diesen weg indem du ihn von den grauen Bausteinen löst und in den Werkzeugkasten zurückziehst.
      courseC_maze_programming4: "_\"Verfolge den Pfad und führe mich zum Schwein\"._
        \n\nVermeide das TNT, sonst fliegen die Federn!"
      courseC_maze_programming4_2018: "_\"Verfolge den Pfad und führe mich zum Schwein\"._
        \n\nVermeide das TNT, sonst fliegen die Federn!"
      courseC_maze_programming4_2019: "_\"Verfolge den Pfad und führe mich zum Schwein\"._
        \n\nVermeide das TNT, sonst fliegen die Federn!"
      courseC_maze_programming5: |-
        _""Folge diesem Weg, um mich zu dem Schwein zu bringen!""_

        \_ Vermeide den Sprengstoff.
      courseC_maze_programming5_2018: |-
        _""Folge diesem Weg, um mich zu dem Schwein zu bringen!""_

        \_ Vermeide den Sprengstoff.
      courseC_maze_programming5_2019: |-
        _""Folge diesem Weg, um mich zu dem Schwein zu bringen!""_

        \_ Vermeide den Sprengstoff.
      courseC_maze_programming6: |-
        _"Bleib ruhig und hilf mir, das böse Schwein zu finden. Sonst könnte ich wirklich wütend werden!"_

        Bring den Vogel zum Schwein und vermeide den Sprengstoff.
      courseC_maze_programming6_2018: |-
        _"Bleib ruhig und hilf mir, das böse Schwein zu finden. Sonst könnte ich wirklich wütend werden!"_

        Bring den Vogel zum Schwein und vermeide den Sprengstoff.
      courseC_maze_programming6_2019: |-
        _"Bleib ruhig und hilf mir, das böse Schwein zu finden. Sonst könnte ich wirklich wütend werden!"_

        Bring den Vogel zum Schwein und vermeide den Sprengstoff.
      courseC_maze_programming7: |-
        _"Jetzt werde ich wirklich böse!"_

        **Aufgabe:** In diesem Code stecken viele Fehler. Du musst einige Bausteine entfernen und andere hinzufügen.
      courseC_maze_programming7_2018: |-
        _"Jetzt werde ich wirklich böse!"_

        **Aufgabe:** In diesem Code stecken viele Fehler. Du musst einige Bausteine entfernen und andere hinzufügen.
      courseC_maze_programming7_2019: |-
        _"Jetzt werde ich wirklich böse!"_

        **Aufgabe:** In diesem Code stecken viele Fehler. Du musst einige Bausteine entfernen und andere hinzufügen.
      courseC_maze_programming8: _"Bleib ruhig und hilf mir, das böse Schwein zu finden."_
      courseC_maze_programming8_2018: _"Bleib ruhig und hilf mir, das böse Schwein
        zu finden."_
      courseC_maze_programming8_2019: _"Bleib ruhig und hilf mir, das böse Schwein
        zu finden."_
      courseC_maze_programming8_predict1: _"Bleib ruhig und hilf mir, das böse Schwein
        zu finden."_
      courseC_maze_programming8_predict1_2018: _"Bleib ruhig und hilf mir, das böse
        Schwein zu finden."_
      courseC_maze_programming8_predict1_2019: _"Bleib ruhig und hilf mir, das böse
        Schwein zu finden."_
      courseC_maze_programming9: _"Und jetzt hilf mir, mich beim Schwein anzuschleichen,
        egal auf welchem Weg!"_
      courseC_maze_programming9_2018: _"Und jetzt hilf mir, mich beim Schwein anzuschleichen,
        egal auf welchem Weg!"_
      courseC_maze_programming9_2019: _"Und jetzt hilf mir, mich beim Schwein anzuschleichen,
        egal auf welchem Weg!"_
      courseC_maze_programming_challenge1: 'Der Vogel braucht deine Hilfe! Das Schwein
        versteckt sich und das Ziel ist es, das Schwein zu finden. '
      courseC_maze_programming_challenge1_2018: 'Der Vogel braucht deine Hilfe! Das
        Schwein versteckt sich und das Ziel ist es, das Schwein zu finden. '
      courseC_maze_programming_challenge1_2019: 'Der Vogel braucht deine Hilfe! Das
        Schwein versteckt sich und das Ziel ist es, das Schwein zu finden. '
      courseC_maze_programming_challenge2: Manchmal gibt es mehr als eine Lösung für
        ein Problem. Manchmal ist es schneller, rückwärts zu gehen, als vorwärts!
      courseC_maze_programming_challenge2_2018: Manchmal gibt es mehr als eine Lösung
        für ein Problem. Manchmal ist es schneller, rückwärts zu gehen, als vorwärts!
      courseC_maze_programming_challenge2_2019: Manchmal gibt es mehr als eine Lösung
        für ein Problem. Manchmal ist es schneller, rückwärts zu gehen, als vorwärts!
      courseC_starWars_loops1: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Sammele den Schrott ein, BB-8!"_

        Nimm 5 mal den gleichen Baustein, um den Metallschrott einzusammeln. Metallschrott sieht so aus: ![](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)
      courseC_starWars_loops10: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
         _"Los, BB-8!"_

        Du machst das super! Mach weiter so!
      courseC_starWars_loops10_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
         _"Los, BB-8!"_

        Du machst das super! Mach weiter so!
      courseC_starWars_loops10_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
         _"Los, BB-8!"_

        Du machst das super! Mach weiter so!
      courseC_starWars_loops11: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Weiter so, BB-8!"_

        Du hast es fast geschafft! Suche dir dieses Mal einen Weg, der dir gefällt!
      courseC_starWars_loops11_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Weiter so, BB-8!"_

        Du hast es fast geschafft! Suche dir dieses Mal einen Weg, der dir gefällt!
      courseC_starWars_loops11_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Weiter so, BB-8!"_

        Du hast es fast geschafft! Suche dir dieses Mal einen Weg, der dir gefällt!
      courseC_starWars_loops1_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Sammele den Schrott ein, BB-8!"_

        Nimm 5 mal den gleichen Baustein, um den Metallschrott einzusammeln. Metallschrott sieht so aus: ![](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)
      courseC_starWars_loops1_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Sammele den Schrott ein, BB-8!"_

        Nimm 5 mal den gleichen Baustein, um den Metallschrott einzusammeln. Metallschrott sieht so aus: ![](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)
      courseC_starWars_loops2: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Los, BB-8!"_

        Um den ganzen Metallschrott einzusammeln, versuche eine Schleife zu erstellen, in der nur ein Baustein innerhalb eines 'wiederholen'-Bausteins verwendet wird.
      courseC_starWars_loops2_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Los, BB-8!"_

        Um den ganzen Metallschrott einzusammeln, versuche eine Schleife zu erstellen, in der nur ein Baustein innerhalb eines 'wiederholen'-Bausteins verwendet wird.
      courseC_starWars_loops2_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Los, BB-8!"_

        Um den ganzen Metallschrott einzusammeln, versuche eine Schleife zu erstellen, in der nur ein Baustein innerhalb eines 'wiederholen'-Bausteins verwendet wird.
      courseC_starWars_loops2_copy: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Los, BB-8!"_

        Um den ganzen Metallschrott einzusammeln, versuche eine Schleife zu erstellen, in der nur ein Baustein innerhalb eines 'wiederholen'-Bausteins verwendet wird.
      courseC_starWars_loops4: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Weiter so, BB-8."_

        Um in dieser Aufgabe BB-8 zum gesamten Metallschrott zu bringen und dabei so wenig Bausteine wie möglich zu verwenden, sind 'wiederholen'-Schleifen nützlich!
      courseC_starWars_loops4_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Weiter so, BB-8."_

        Um in dieser Aufgabe BB-8 zum gesamten Metallschrott zu bringen und dabei so wenig Bausteine wie möglich zu verwenden, sind 'wiederholen'-Schleifen nützlich!
      courseC_starWars_loops4_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Weiter so, BB-8."_

        Um in dieser Aufgabe BB-8 zum gesamten Metallschrott zu bringen und dabei so wenig Bausteine wie möglich zu verwenden, sind 'wiederholen'-Schleifen nützlich!
      courseC_starWars_loops4_copy: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Weiter so, BB-8."_

        Um in dieser Aufgabe BB-8 zum gesamten Metallschrott zu bringen und dabei so wenig Bausteine wie möglich zu verwenden, sind 'wiederholen'-Schleifen nützlich!
      courseC_starWars_loops5: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Los, BB-8!"_'
      courseC_starWars_loops5_2018: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Los, BB-8!"_'
      courseC_starWars_loops5_2019: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Los, BB-8!"_'
      courseC_starWars_loops5_copy: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Los, BB-8!"_'
      courseC_starWars_loops6: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Kannst du alles einsammeln?"_

        Schleifen funktionieren auch, wenn sie mehr als einem Baustein enthalten! Kannst du diese Abfolge in einer Schleife zusammenfassen?
      courseC_starWars_loops6_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Kannst du alles einsammeln?"_

        Schleifen funktionieren auch, wenn sie mehr als einem Baustein enthalten! Kannst du diese Abfolge in einer Schleife zusammenfassen?
      courseC_starWars_loops6_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Kannst du alles einsammeln?"_

        Schleifen funktionieren auch, wenn sie mehr als einem Baustein enthalten! Kannst du diese Abfolge in einer Schleife zusammenfassen?
      courseC_starWars_loops6_copy: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Kannst du alles einsammeln?"_

        Schleifen funktionieren auch, wenn sie mehr als einem Baustein enthalten! Kannst du diese Abfolge in einer Schleife zusammenfassen?
      courseC_starWars_loops7: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Du schaffst das!"_

        Schaffst du es, den gesamten Metallschrott mit nur einer Schleife einzusammeln? Versuche zuerst, alle Schritte einzeln zu programmieren und finde dann heraus, welchen Code, der sich wiederholt, du in eine Schleife einfügen kannst.
      courseC_starWars_loops7_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Du schaffst das!"_

        Schaffst du es, den gesamten Metallschrott mit nur einer Schleife einzusammeln? Versuche zuerst, alle Schritte einzeln zu programmieren und finde dann heraus, welchen Code, der sich wiederholt, du in eine Schleife einfügen kannst.
      courseC_starWars_loops7_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Du schaffst das!"_

        Schaffst du es, den gesamten Metallschrott mit nur einer Schleife einzusammeln? Versuche zuerst, alle Schritte einzeln zu programmieren und finde dann heraus, welchen Code, der sich wiederholt, du in eine Schleife einfügen kannst.
      courseC_starWars_loops7_copy: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Du schaffst das!"_

        Schaffst du es, den gesamten Metallschrott mit nur einer Schleife einzusammeln? Versuche zuerst, alle Schritte einzeln zu programmieren und finde dann heraus, welchen Code, der sich wiederholt, du in eine Schleife einfügen kannst.
      courseC_starWars_loops8: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Weiter so, BB-8."_

        **Aufgabe:** Kombiniere Ideen aus den letzten Aufgaben, um dieses Level abzuschließen.
      courseC_starWars_loops8_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Weiter so, BB-8."_

        **Aufgabe:** Kombiniere Ideen aus den letzten Aufgaben, um dieses Level abzuschließen.
      courseC_starWars_loops8_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Weiter so, BB-8."_

        **Aufgabe:** Kombiniere Ideen aus den letzten Aufgaben, um dieses Level abzuschließen.
      courseC_starWars_loops8_copy: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Weiter so, BB-8."_

        **Aufgabe:** Kombiniere Ideen aus den letzten Aufgaben, um dieses Level abzuschließen.
      courseC_starWars_loops9: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Weiter so!"_

        Verwende, was du bisher gelernt hast, um den gesamten Metallschrott einzusammeln!
      courseC_starWars_loops9_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Weiter so!"_

        Verwende, was du bisher gelernt hast, um den gesamten Metallschrott einzusammeln!
      courseC_starWars_loops9_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Weiter so!"_

        Verwende, was du bisher gelernt hast, um den gesamten Metallschrott einzusammeln!
      courseD_artist_1_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"\"Hallo, ich bin Elsa von Arendelle, helfe mir, eine Form zu zeichnen.\"\"_
        \n\nZeichne ein Sechseck mit 50 Pixel langen Seiten. \n\n* * *\n\nEin Sechseck
        zeichnest du so: \n\n-   um **50** Pixel vorwärts bewegen \n-   um **60**
        Grad nach rechts drehen \n-   insgesamt **6** Mal wiederholen"
      courseD_artist_1_2018_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"\"Hallo, ich bin Elsa von Arendelle, helfe mir, eine Form zu zeichnen.\"\"_
        \n\nZeichne ein Sechseck mit 50 Pixel langen Seiten. \n\n* * *\n\nEin Sechseck
        zeichnest du so: \n\n-   um **50** Pixel vorwärts bewegen \n-   um **60**
        Grad nach rechts drehen \n-   insgesamt **6** Mal wiederholen"
      courseD_artist_2_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        \"Gut gemacht!“\\_ \n\nNach deinem Sechseck drehe dich um **60** Grad nach
        rechts und zeichne dann eine Linie, die **150** Pixel lang ist. \n\nBeende
        dein Programm, indem du Elsa mit dem <xml><block type=\"jump_to\"><title name=\"VALUE\">middle
        center</title></block></xml> Block wieder in die Mitte des Spielfeldes bringst."
      courseD_artist_2_2018_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        \"Gut gemacht!“\\_ \n\nNach deinem Sechseck drehe dich um **60** Grad nach
        rechts und zeichne dann eine Linie, die **150** Pixel lang ist. \n\nBeende
        dein Programm, indem du Elsa mit dem <xml><block type=\"jump_to\" block-text=\"jump
        to the middle center position\"><title name=\"VALUE\">middle center</title></block></xml>
        Block wieder in die Mitte des Spielfeldes bringst."
      courseD_artist_3_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _“Lass uns eine Schneeflocke machen..”_

        Um diesen Code in eine Schneeflocke zu verwandeln, schachtele den gesamten Code in eine weitere `wiederhole`-Schleife und lasse diese insgesamt **6** Mal laufen.  Du solltest nur einen Block hinzufügen müssen.
      courseD_artist_3_2018_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _“Lass uns eine Schneeflocke machen..”_

        Um diesen Code in eine Schneeflocke zu verwandeln, schachtele den gesamten Code in eine weitere `wiederhole`-Schleife und lasse diese insgesamt **6** Mal laufen.  Du solltest nur einen Block hinzufügen müssen.
      courseD_artist_4_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Lasst uns ganz besondere Schneeflocken machen!\"_ \n\n**Inspiration:** Wo
        musst du Code hinzufügen, wenn du ein winziges Quadrat an der Spitze jeder
        langen Linie zeichnen willst? \n\n* * *\n\nDu kannst in diesem Rätsel verschiedene
        Dinge versuchen, aber hier ein Vorschlag für dich: \n\nVersuche , am Ende
        jeder Zeile ein winziges Quadrat zu erstellen \n\n-   Jede Seite sollte 15
        Pixel lang sein \n-   du solltest dich um 90 Grad drehen \n-   Wiederhole
        diese Aktionen insgesamt 4 Mal"
      courseD_artist_4_2018_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Lasst uns ganz besondere Schneeflocken machen!\"_ \n\n**Inspiration:** Wo
        musst du Code hinzufügen, wenn du ein winziges Quadrat an der Spitze jeder
        langen Linie zeichnen willst? \n\n* * *\n\nDu kannst in diesem Rätsel verschiedene
        Dinge versuchen, aber hier ein Vorschlag für dich: \n\nVersuche , am Ende
        jeder Zeile ein winziges Quadrat zu erstellen \n\n-   Jede Seite sollte 15
        Pixel lang sein \n-   du solltest dich um 90 Grad drehen \n-   Wiederhole
        diese Aktionen insgesamt 4 Mal"
      courseD_artist_5_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        \"Versuche , die Formen oder die Länge der Linien zu ändern, um deine eigene
        Variante zu erstellen!\"\\_ \n\n**Inspiration:** Du kannst deine Zeichnung
        nach Belieben ändern, aber hier ist ein Vorschlag für dich: \n\n-   Versuche
        , die unterschiedlichen Formen in der Mitte der Schneeflocke mit denen am
        Ende jeder Linie zu vertauschen!"
      courseD_artist_5_2018_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Versuche, die Formen oder die Längen der Linien zu ändern, um diese nach
        deinem Geschmack aussehen zu lassen!\"_\n\n<br/>  \n\n**Inspiration:** Du
        kannst deine Zeichnung beliebig ändern, aber hier ist eine Idee:\n\n-   Versuche,
        die Formen in der Mitte der Schneeflocke mit denen am Ende jeder Linie zu
        tauschen!"
      courseD_artist_6_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        \"Lass uns etwas Neues ausprobieren. Laufe diesmal im Zickzack.\"\\_ \n\n<br/>
        \n\n**Inspiration:** Versuche , deine 150 Pixel lange Linie in 6 kurze Linien
        mit **25** Pixel Länge umzuwandeln \n\n-   Drehe nach jeder kurzen Zeile um
        **45** Grad in abwechselnde Richtungen, um einen Zickzack-Muster zu erhalten
        \n-   Wo musst du einen neuen `Wiederholen`-Block\\` einfügen, um das zu erreichen?
        \n-   Wie oft musst du dein Muster von 2 kurzen Linien wiederholen, um insgesamt
        6 zu erhalten?"
      courseD_artist_6_2018_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        \"Lass uns etwas Neues ausprobieren. Laufe diesmal im Zickzack.\"\\_ \n\n<br/>
        \n\n**Inspiration:** Versuche , deine 150 Pixel lange Linie in 6 kurze Linien
        mit **25** Pixel Länge umzuwandeln \n\n-   Drehe nach jeder kurzen Zeile um
        **45** Grad in abwechselnde Richtungen, um einen Zickzack-Muster zu erhalten
        \n-   Wo musst du einen neuen `Wiederholen`-Block\\` einfügen, um das zu erreichen?
        \n-   Wie oft musst du dein Muster von 2 kurzen Linien wiederholen, um insgesamt
        6 zu erhalten?"
      courseD_artist_binary1: |-
        Wir haben ein Gitter aus „Pixeln“ für dich erstellt, durch das du laufen und Muster zeichnen kannst, indem du nur bestimmte Felder anschaltest.

        Verwende die nachfolgenden Bausteine, damit der Künstler in der ersten Zeile „01010101“ in binärer Schreibweise zeichnet.
      courseD_artist_binary1_2018: |-
        Wir haben ein Gitter aus „Pixeln“ für dich erstellt, durch das du laufen und Muster zeichnen kannst, indem du nur bestimmte Felder anschaltest.

        Verwende die nachfolgenden Bausteine, damit der Künstler in der ersten Zeile „01010101“ in binärer Schreibweise zeichnet.
      courseD_artist_binary1_2019: |-
        Wir haben ein Gitter aus „Pixeln“ für dich erstellt, durch das du laufen und Muster zeichnen kannst, indem du nur bestimmte Felder anschaltest.

        Verwende die nachfolgenden Bausteine, damit der Künstler in der ersten Zeile „01010101“ in binärer Schreibweise zeichnet.
      courseD_artist_binary2: "Hier ist eine Funktion, die eine binäre Zeichenfolge
        aus 1 und 0 verwendet und dem Künstler vorschreibt, sie von links nach rechts,
        von oben nach unten zu verfolgen. \n\n* * *\n\nDer Künstler füllt ein Feld
        aus, wenn er eine 1 sieht, und ignoriert ein Feld, wenn er eine 0 sieht. \n\n*
        * *\n\n**Führe diesen Code aus, um zu sehen, wie der Künstler die Binärzeichen
        verwendet, um dieses Muster zu zeichnen.**"
      courseD_artist_binary2_2018: "Hier ist eine Funktion, die eine binäre Zeichenfolge
        aus 1 und 0 verwendet und dem Künstler vorschreibt, sie von links nach rechts,
        von oben nach unten zu verfolgen. \n\n* * *\n\nDer Künstler füllt ein Feld
        aus, wenn er eine 1 sieht, und ignoriert ein Feld, wenn er eine 0 sieht. \n\n*
        * *\n\n**Führe diesen Code aus, um zu sehen, wie der Künstler die Binärzeichen
        verwendet, um dieses Muster zu zeichnen.**"
      courseD_artist_binary2_2019: "Hier ist eine Funktion, die eine binäre Zeichenfolge
        aus 1 und 0 verwendet und dem Künstler vorschreibt, sie von links nach rechts,
        von oben nach unten zu verfolgen. \n\n* * *\n\nDer Künstler füllt ein Feld
        aus, wenn er eine 1 sieht, und ignoriert ein Feld, wenn er eine 0 sieht. \n\n*
        * *\n\n**Führe diesen Code aus, um zu sehen, wie der Künstler die Binärzeichen
        verwendet, um dieses Muster zu zeichnen.**"
      courseD_artist_binary_challenge1_2018: Du kannst jeden Binärwert (0 oder 1)
        nur jeweils einmal in diesem Rätsel verwenden. Versuche verschachtelte Schleifen
        zu verwenden, um diese Zeichnung zu vervollständigen.
      courseD_artist_binary_challenge1_2019: Du kannst jeden Binärwert (0 oder 1)
        nur jeweils einmal in diesem Rätsel verwenden. Versuche verschachtelte Schleifen
        zu verwenden, um diese Zeichnung zu vervollständigen.
      courseD_artist_binary_challenge2_2018: |-
        Auf diesem Gitter sind 256 Bits dargestellt - das bedeutet, dass es für eine kleine Änderung leicht ist, große Probleme zu verursachen. Bist du emsig genug, um dieses Logo wiederherzustellen?
        ![](https://images.code.org/74e15f513982b47762dd33ebbc21e5e9-image-1498776314610.png)
      courseD_artist_binary_challenge2_2019: |-
        Auf diesem Gitter sind 256 Bits dargestellt - das bedeutet, dass es für eine kleine Änderung leicht ist, große Probleme zu verursachen. Bist du emsig genug, um dieses Logo wiederherzustellen?
        ![](https://images.code.org/74e15f513982b47762dd33ebbc21e5e9-image-1498776314610.png)
      courseD_artist_nestedLoops1a: "Wiederhole die Schleife für das Dreieck 6 Mal.
        \n\nNach jedem Dreieck muss der Künstler um 60 Grad gedreht werden, bevor
        du das nächste zeichnen kannst."
      courseD_artist_nestedLoops1a_2018: "Wiederhole die Schleife für das Dreieck
        6 Mal. \n\nNach jedem Dreieck muss der Künstler um 60 Grad gedreht werden,
        bevor du das nächste zeichnen kannst."
      courseD_artist_nestedLoops1a_2019: "Wiederhole die Schleife für das Dreieck
        6 Mal. \n\nNach jedem Dreieck muss der Künstler um 60 Grad gedreht werden,
        bevor du das nächste zeichnen kannst."
      courseD_artist_nestedLoops2: |-
        Löse diese Aufgabe diesmal mit der geringstmöglichen Anzahl von Bausteinen.

        Nach jedem Dreieck muss der Künstler um 60 Grad gedreht werden, bevor du das nächste zeichnen kannst. Siehst du, wie viel einfacher dies mit **geschachtelten Schleifen** ist?
      courseD_artist_nestedLoops2_2018: |-
        Löse diese Aufgabe diesmal mit der geringstmöglichen Anzahl von Bausteinen.

        Nach jedem Dreieck muss der Künstler um 60 Grad gedreht werden, bevor du das nächste zeichnen kannst. Siehst du, wie viel einfacher dies mit **geschachtelten Schleifen** ist?
      courseD_artist_nestedLoops2_2019: |-
        Löse diese Aufgabe diesmal mit der geringstmöglichen Anzahl von Bausteinen.

        Nach jedem Dreieck muss der Künstler um 60 Grad gedreht werden, bevor du das nächste zeichnen kannst. Siehst du, wie viel einfacher dies mit **geschachtelten Schleifen** ist?
      courseD_artist_nestedLoops4: "Großartig! Mach genau dasselbe mit diesen Kreisen.
        \n\n-   Jeder Kreis wird durch die Bewegung um 1 Pixel vor einer Drehung um
        1 Grad gezeichnet, und das 360 mal. \n-   Jeder Kreis beginnt nur 50 Pixel
        von dort entfernt, wo der letzte Kreis endete"
      courseD_artist_nestedLoops4_2018: "Großartig! Mach genau dasselbe mit diesen
        Kreisen. \n\n-   Jeder Kreis wird durch die Bewegung um 1 Pixel vor einer
        Drehung um 1 Grad gezeichnet, und das 360 mal. \n-   Jeder Kreis beginnt nur
        50 Pixel von dort entfernt, wo der letzte Kreis endete"
      courseD_artist_nestedLoops4_2019: "Großartig! Mach genau dasselbe mit diesen
        Kreisen. \n\n-   Jeder Kreis wird durch die Bewegung um 1 Pixel vor einer
        Drehung um 1 Grad gezeichnet, und das 360 mal. \n-   Jeder Kreis beginnt nur
        50 Pixel von dort entfernt, wo der letzte Kreis endete"
      courseD_artist_nestedLoops5: "Was passiert, wenn du zwischen den Kreisen noch
        eine 90 Grad Drehung einprogrammierst? \n\n(Um dieses Bild zu zeichnen, musst
        du trotzdem noch 50 Pixel zwischen den Kreisen springen)"
      courseD_artist_nestedLoops5_2018: "Was passiert, wenn du zwischen den Kreisen
        noch eine 90 Grad Drehung einprogrammierst? \n\n(Um dieses Bild zu zeichnen,
        musst du trotzdem noch 50 Pixel zwischen den Kreisen springen)"
      courseD_artist_nestedLoops5_2019: "Was passiert, wenn du zwischen den Kreisen
        noch eine 90 Grad Drehung einprogrammierst? \n\n(Um dieses Bild zu zeichnen,
        musst du trotzdem noch 50 Pixel zwischen den Kreisen springen)"
      courseD_artist_nestedLoops7: "Verwende beim Erstellen dieser Zeichnung das,
        was du gelernt hast.\n\n-   Die Seiten der Quadrate sind jeweils **100 Pixel**
        lang und die Winkel betragen **90 Grad** \n-   du benötigst eine Drehung um**60
        Grad zwischen jedem Quadrat**. Warum? Weil es 6 Quadrate gibt, und 360 Grad
        (eine volle Umdrehung) geteilt durch 6 ergibt 60 Grad. \n-   Achte darauf,
        dass du **50 Pixel springen musst, um zum nächsten Quadrat** zu gelangen"
      courseD_artist_nestedLoops7_2018: "Verwende beim Erstellen dieser Zeichnung
        das, was du gelernt hast.\n\n-   Die Seiten der Quadrate sind jeweils **100
        Pixel** lang und die Winkel betragen **90 Grad** \n-   du benötigst eine Drehung
        um**60 Grad zwischen jedem Quadrat**. Warum? Weil es 6 Quadrate gibt, und
        360 Grad (eine volle Umdrehung) geteilt durch 6 ergibt 60 Grad. \n-   Achte
        darauf, dass du **50 Pixel springen musst, um zum nächsten Quadrat** zu gelangen"
      courseD_artist_nestedLoops7_2019: "Verwende beim Erstellen dieser Zeichnung
        das, was du gelernt hast.\n\n-   Die Seiten der Quadrate sind jeweils **100
        Pixel** lang und die Winkel betragen **90 Grad** \n-   du benötigst eine Drehung
        um**60 Grad zwischen jedem Quadrat**. Warum? Weil es 6 Quadrate gibt, und
        360 Grad (eine volle Umdrehung) geteilt durch 6 ergibt 60 Grad. \n-   Achte
        darauf, dass du **50 Pixel springen musst, um zum nächsten Quadrat** zu gelangen"
      courseD_artist_nestedLoops8: |-
        Verwende das, was du in den letzten Aufgaben gelernt hast, und erstelle dieses Bild von Anfang an.

        -   Jedes Sechseck hat **50 Pixel lange Seiten** und **Drehungen um 60 Grad**
      courseD_artist_nestedLoops8_2018: |-
        Verwende das, was du in den letzten Aufgaben gelernt hast, und erstelle dieses Bild von Anfang an.

        -   Jedes Sechseck hat **50 Pixel lange Seiten** und **Drehungen um 60 Grad**
      courseD_artist_nestedLoops8_2019: |-
        Verwende das, was du in den letzten Aufgaben gelernt hast, und erstelle dieses Bild von Anfang an.

        -   Jedes Sechseck hat **50 Pixel lange Seiten** und **Drehungen um 60 Grad**
      courseD_artist_nestedLoops9: "**Aufgabe:** Weißt du, wie man ein Bild wie dieses
        zeichnet?\n\n-   Beide Formen haben **50 Pixel lange Seiten** \n-   Zwischen
        zwei Formen musst du jedes Mal um die Länge einer Seite vorwärts springen
        und dich um 45 Grad drehen."
      courseD_artist_nestedLoops9_2018: "**Aufgabe:** Weißt du, wie man ein Bild wie
        dieses zeichnet?\n\n-   Beide Formen haben **50 Pixel lange Seiten** \n-   Zwischen
        zwei Formen musst du jedes Mal um die Länge einer Seite vorwärts springen
        und dich um 45 Grad drehen."
      courseD_artist_nestedLoops9_2019: "**Aufgabe:** Weißt du, wie man ein Bild wie
        dieses zeichnet?\n\n-   Beide Formen haben **50 Pixel lange Seiten** \n-   Zwischen
        zwei Formen musst du jedes Mal um die Länge einer Seite vorwärts springen
        und dich um 45 Grad drehen."
      courseD_artist_nestedLoops9_predict1: "**Aufgabe:** Kannst du herausfinden,
        wie man ein Bild wie dieses zeichnet? \n\n-   Die Seiten beider Formen sind
        50 Pixel lang"
      courseD_artist_nestedLoops9_predict1_2018: "**Aufgabe:** Kannst du herausfinden,
        wie man ein Bild wie dieses zeichnet? \n\n-   Die Seiten beider Formen sind
        50 Pixel lang"
      courseD_artist_nestedLoops9_predict1_2019: "**Aufgabe:** Kannst du herausfinden,
        wie man ein Bild wie dieses zeichnet? \n\n-   Die Seiten beider Formen sind
        50 Pixel lang"
      courseD_artist_nestedLoopsFP: "Jetzt bist du dran. Verwende das, was du gelernt
        hast, und zeichne etwas, das dir gefällt! \n\nBrauchst du eine Idee? Versuche,
        eine von diesen Zeichnungen zu erstellen:\n\n![expandable](https://images.code.org/7ac814e356b3548f57bfab8a9eb31dff-image-1497993113904.png)\n![expandable](https://images.code.org/bd29d35c9a8abf9d27591b90b0f3ec0f-image-1497993121072.png)\n![expandable](https://images.code.org/2970f34785e51ae98be7aff6fe0827ce-image-1497993126938.png)"
      courseD_artist_nestedLoopsFP_2018: "Jetzt bist du dran. Verwende das, was du
        gelernt hast, und zeichne etwas, das dir gefällt! \n\nBrauchst du eine Idee?
        Versuche, eine von diesen Zeichnungen zu erstellen:\n\n![expandable](https://images.code.org/7ac814e356b3548f57bfab8a9eb31dff-image-1497993113904.png)\n![expandable](https://images.code.org/bd29d35c9a8abf9d27591b90b0f3ec0f-image-1497993121072.png)\n![expandable](https://images.code.org/2970f34785e51ae98be7aff6fe0827ce-image-1497993126938.png)"
      courseD_artist_nestedLoopsFP_2019: "Jetzt bist du dran. Verwende das, was du
        gelernt hast, und zeichne etwas, das dir gefällt! \n\nBrauchst du eine Idee?
        Versuche, eine von diesen Zeichnungen zu erstellen:\n\n![expandable](https://images.code.org/7ac814e356b3548f57bfab8a9eb31dff-image-1497993113904.png)\n![expandable](https://images.code.org/bd29d35c9a8abf9d27591b90b0f3ec0f-image-1497993121072.png)\n![expandable](https://images.code.org/2970f34785e51ae98be7aff6fe0827ce-image-1497993126938.png)"
      courseD_artist_nestedLoops_challenge1: "Kannst du herausfinden, wie man ein
        solches Bild zeichnen kann? \n\n-   Beide Formen haben **50 Pixel lange Seiten**\n-
        \  Die _Achtecke_ werden mit **45 Grad** Drehungen gezeichnet. \n-   Die _Dreiecke_
        werden mit **120 Grad** Drehungen gezeichnet."
      courseD_artist_nestedLoops_challenge1_2018: "Kannst du herausfinden, wie man
        ein solches Bild zeichnen kann? \n\n-   Beide Formen haben **50 Pixel lange
        Seiten**\n-   Die _Achtecke_ werden mit **45 Grad** Drehungen gezeichnet.
        \n-   Die _Dreiecke_ werden mit **120 Grad** Drehungen gezeichnet."
      courseD_artist_nestedLoops_challenge1_2019: "Kannst du herausfinden, wie man
        ein solches Bild zeichnen kann? \n\n-   Beide Formen haben **50 Pixel lange
        Seiten**\n-   Die _Achtecke_ werden mit **45 Grad** Drehungen gezeichnet.
        \n-   Die _Dreiecke_ werden mit **120 Grad** Drehungen gezeichnet."
      courseD_artist_nestedLoops_challenge2: "Dieser Code ist nicht ganz richtig!
        Kannst du ihn so korrigieren, dass die richtige Zeichnung im Arbeitsbereich
        entsteht? \n\n-   Die erste innere Schleife sollte ein Achteck zeichnen. \n-
        \  Die zweite innere Schleife sollte ein Sechseck zeichnen. \n-   Die dritte
        innere Schleife sollte ein Quadrat zeichnen."
      courseD_artist_nestedLoops_challenge2_2018: "Dieser Code ist nicht ganz richtig!
        Kannst du ihn so korrigieren, dass die richtige Zeichnung im Arbeitsbereich
        entsteht? \n\n-   Die erste innere Schleife sollte ein Achteck zeichnen. \n-
        \  Die zweite innere Schleife sollte ein Sechseck zeichnen. \n-   Die dritte
        innere Schleife sollte ein Quadrat zeichnen."
      courseD_artist_nestedLoops_challenge2_2019: "Dieser Code ist nicht ganz richtig!
        Kannst du ihn so korrigieren, dass die richtige Zeichnung im Arbeitsbereich
        entsteht? \n\n-   Die erste innere Schleife sollte ein Achteck zeichnen. \n-
        \  Die zweite innere Schleife sollte ein Sechseck zeichnen. \n-   Die dritte
        innere Schleife sollte ein Quadrat zeichnen."
      courseD_artist_project1: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Hallo, ich bin Elsa von Arendelle, hilf mir, eine Form zu zeichnen.\"_\n\nZeichne
        eine kleine Form, die **20 bis 50** Pixel breit ist. Es kann jede beliebige
        Form sein, die dir gefällt.\n\n<hr/> \n\nDu kannst versuchen, ein Polygon
        zu zeichnen, wie z.B. eines von diesen:\\\n![](https://images.code.org/14e58b3901ca7c13319cc64f18ae5d82-image-1495765942356.21.06.png)\n![](https://images.code.org/8f79d689ea4936a3725a37025f8fda40-image-1495765942357.25.49.png)
        \n![](https://images.code.org/e5d222ae7356af4811aa153640af135e-image-1495765942357.26.09.png)
        \n\noder sogar eine abstrakte Form, wie eine von diesen:\\\\ \n![](https://images.code.org/8471c095219da3044b3830bebeedefb3-image-1496436883704.32.19.png)
        \n![](https://images.code.org/2fe6ed2db5308f4b34f7632fc6b8a64d-image-1496436883705.40.32.png)
        \n![](https://images.code.org/abb0947f634bc4b712d47516587a6cb8-image-1496436883705.47.21.png)"
      courseD_artist_project1_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Hallo, ich bin Elsa von Arendelle, hilf mir, eine Form zu zeichnen.\"_\n\nZeichne
        eine kleine Form, die **20 bis 50** Pixel breit ist. Es kann jede beliebige
        Form sein, die dir gefällt.\n\n<hr/> \n\nDu kannst versuchen, ein Polygon
        zu zeichnen, wie z.B. eines von diesen:\\\n![](https://images.code.org/14e58b3901ca7c13319cc64f18ae5d82-image-1495765942356.21.06.png)\n![](https://images.code.org/8f79d689ea4936a3725a37025f8fda40-image-1495765942357.25.49.png)
        \n![](https://images.code.org/e5d222ae7356af4811aa153640af135e-image-1495765942357.26.09.png)
        \n\noder sogar eine abstrakte Form, wie eine von diesen:\\\\ \n![](https://images.code.org/8471c095219da3044b3830bebeedefb3-image-1496436883704.32.19.png)
        \n![](https://images.code.org/2fe6ed2db5308f4b34f7632fc6b8a64d-image-1496436883705.40.32.png)
        \n![](https://images.code.org/abb0947f634bc4b712d47516587a6cb8-image-1496436883705.47.21.png)"
      courseD_artist_project1_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Hallo, ich bin Elsa von Arendelle, hilf mir, eine Form zu zeichnen.\"_\n\nZeichne
        eine kleine Form, die **20 bis 50** Pixel breit ist. Es kann jede beliebige
        Form sein, die dir gefällt.\n\n<hr/> \n\nDu kannst versuchen, ein Polygon
        zu zeichnen, wie z.B. eines von diesen:\\\n![](https://images.code.org/14e58b3901ca7c13319cc64f18ae5d82-image-1495765942356.21.06.png)\n![](https://images.code.org/8f79d689ea4936a3725a37025f8fda40-image-1495765942357.25.49.png)
        \n![](https://images.code.org/e5d222ae7356af4811aa153640af135e-image-1495765942357.26.09.png)
        \n\noder sogar eine abstrakte Form, wie eine von diesen:\\\\ \n![](https://images.code.org/8471c095219da3044b3830bebeedefb3-image-1496436883704.32.19.png)
        \n![](https://images.code.org/2fe6ed2db5308f4b34f7632fc6b8a64d-image-1496436883705.40.32.png)
        \n![](https://images.code.org/abb0947f634bc4b712d47516587a6cb8-image-1496436883705.47.21.png)"
      courseD_artist_project1a: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _Lass uns etwas Neues ausprobieren. Dieses Mal laufe in einem Zickzackmuster.\"_\n\n<img
        src=\"https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png\"
        width=\"200px\" style=\"float: left; margin: 0 15px 15px 0;\" /> \nZeichne
        ein Treppenstufenmuster, das Drehungen zwischen 75 und 105 Grad verwendet,
        achte aber darauf, dass deine linken und rechten Drehungen den gleichen Winkel
        haben.\\\n(Du wirst später sehen, warum.)"
      courseD_artist_project1a_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _Lass uns etwas Neues ausprobieren. Dieses Mal laufe in einem Zickzackmuster.\"_\n\n<img
        src=\"https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png\"
        width=\"200px\" style=\"float: left; margin: 0 15px 15px 0;\" /> \nZeichne
        ein Treppenstufenmuster, das Drehungen zwischen 75 und 105 Grad verwendet,
        achte aber darauf, dass deine linken und rechten Drehungen den gleichen Winkel
        haben.\\\n(Du wirst später sehen, warum.)"
      courseD_artist_project1a_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _Lass uns etwas Neues ausprobieren. Dieses Mal laufe in einem Zickzackmuster.\"_\n\n<img
        src=\"https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png\"
        width=\"200px\" style=\"float: left; margin: 0 15px 15px 0;\" /> \nZeichne
        ein Treppenstufenmuster, das Drehungen zwischen 75 und 105 Grad verwendet,
        achte aber darauf, dass deine linken und rechten Drehungen den gleichen Winkel
        haben.\\\n(Du wirst später sehen, warum.)"
      courseD_artist_project2: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Jetzt wollen wir mehr als eine Form zeichnen.“_\n\nNimm jetzt deine Form
        und zeichne zwei oder drei hintereinander, indem du einige Pixel vorwärts
        springst. \n\n-   Wenn du um **weniger** als die Breite deiner Form vorwärts
        springst, könnten sie sich überschneiden\n\n-   Wenn du um **mehr** als die
        Breite deiner Form vorwärts springst, entsteht eine Lücke\n\n<hr/> \n\nDeine
        Reihe könnte wie hier gerade werden: \n![](https://images.code.org/cefc818d8636c7ce185738311870ff1d-image-1495820778762.39.25.png)
        \n![](https://images.code.org/80dc77914de15685dc696825dff61723-image-1495820778762.39.43.png)
        \n![](https://images.code.org/00cda078f119b1ddb0af27ae4a44b089-image-1495820778761.39.08.png)
        \n<br/> <br/> \n\nSonst könnten sich deine Formen wie eine von diesen bewegen:
        \n\n![](https://images.code.org/0c4066fe7547bc1f4495aacbeecdea6d-image-1496437220447.47.04.png)
        \n![](https://images.code.org/4069376b784c147a8d443d49e22f783f-image-1496437220446.40.15.png)
        \n![](https://images.code.org/02704ab3fb3356f76c544bb64c1a7cce-image-1496437220446.32.04.png)"
      courseD_artist_project2_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Jetzt wollen wir mehr als eine Form zeichnen.“_\n\nNimm jetzt deine Form
        und zeichne zwei oder drei hintereinander, indem du einige Pixel vorwärts
        springst. \n\n-   Wenn du um **weniger** als die Breite deiner Form vorwärts
        springst, könnten sie sich überschneiden\n\n-   Wenn du um **mehr** als die
        Breite deiner Form vorwärts springst, entsteht eine Lücke\n\n<hr/> \n\nDeine
        Reihe könnte wie hier gerade werden: \n![](https://images.code.org/cefc818d8636c7ce185738311870ff1d-image-1495820778762.39.25.png)
        \n![](https://images.code.org/80dc77914de15685dc696825dff61723-image-1495820778762.39.43.png)
        \n![](https://images.code.org/00cda078f119b1ddb0af27ae4a44b089-image-1495820778761.39.08.png)
        \n<br/> <br/> \n\nSonst könnten sich deine Formen wie eine von diesen bewegen:
        \n\n![](https://images.code.org/0c4066fe7547bc1f4495aacbeecdea6d-image-1496437220447.47.04.png)
        \n![](https://images.code.org/4069376b784c147a8d443d49e22f783f-image-1496437220446.40.15.png)
        \n![](https://images.code.org/02704ab3fb3356f76c544bb64c1a7cce-image-1496437220446.32.04.png)"
      courseD_artist_project2_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Jetzt wollen wir mehr als eine Form zeichnen.“_\n\nNimm jetzt deine Form
        und zeichne zwei oder drei hintereinander, indem du einige Pixel vorwärts
        springst. \n\n-   Wenn du um **weniger** als die Breite deiner Form vorwärts
        springst, könnten sie sich überschneiden\n\n-   Wenn du um **mehr** als die
        Breite deiner Form vorwärts springst, entsteht eine Lücke\n\n<hr/> \n\nDeine
        Reihe könnte wie hier gerade werden: \n![](https://images.code.org/cefc818d8636c7ce185738311870ff1d-image-1495820778762.39.25.png)
        \n![](https://images.code.org/80dc77914de15685dc696825dff61723-image-1495820778762.39.43.png)
        \n![](https://images.code.org/00cda078f119b1ddb0af27ae4a44b089-image-1495820778761.39.08.png)
        \n<br/> <br/> \n\nSonst könnten sich deine Formen wie eine von diesen bewegen:
        \n\n![](https://images.code.org/0c4066fe7547bc1f4495aacbeecdea6d-image-1496437220447.47.04.png)
        \n![](https://images.code.org/4069376b784c147a8d443d49e22f783f-image-1496437220446.40.15.png)
        \n![](https://images.code.org/02704ab3fb3356f76c544bb64c1a7cce-image-1496437220446.32.04.png)"
      courseD_artist_project2a: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Jetzt drehen wir uns um und gehen den Weg zurück, den wir gekommen sind.\"_\n\nDrehe
        dich um 180 Grad und zeichne genau dasselbe Treppenmuster noch einmal! - \n\nDer
        Rest dieser Phase wird einfacher, wenn du deinen gesamten Code in eine Schleife
        legst, damit Elsa zeichnen kann, sich um 180 Grad dreht, zeichnet und sich
        dann wieder um 180 Grad dreht.\n\n<hr/> Hier ein Beispiel für eine Treppe,
        die eine 76-Grad-Drehung verwendet: \n\n![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)"
      courseD_artist_project2a_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Jetzt drehen wir uns um und gehen den Weg zurück, den wir gekommen sind.\"_\n\nDrehe
        dich um 180 Grad und zeichne genau dasselbe Treppenmuster noch einmal! - \n\nDer
        Rest dieser Phase wird einfacher, wenn du deinen gesamten Code in eine Schleife
        legst, damit Elsa zeichnen kann, sich um 180 Grad dreht, zeichnet und sich
        dann wieder um 180 Grad dreht.\n\n<hr/> Hier ein Beispiel für eine Treppe,
        die eine 76-Grad-Drehung verwendet: \n\n![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)"
      courseD_artist_project2a_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Jetzt drehen wir uns um und gehen den Weg zurück, den wir gekommen sind.\"_\n\nDrehe
        dich um 180 Grad und zeichne genau dasselbe Treppenmuster noch einmal! - \n\nDer
        Rest dieser Phase wird einfacher, wenn du deinen gesamten Code in eine Schleife
        legst, damit Elsa zeichnen kann, sich um 180 Grad dreht, zeichnet und sich
        dann wieder um 180 Grad dreht.\n\n<hr/> Hier ein Beispiel für eine Treppe,
        die eine 76-Grad-Drehung verwendet: \n\n![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)"
      courseD_artist_project3: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Lass uns eine Schneeflocke daraus machen“_\n\nAls nächstes lass Elsa mit
        dem Block `Spring 200 seitlich und 200 nach unten` wieder in die Mitte springen
        und drehe sie, um die Linie der Formen immer wieder in verschiedene Richtungen
        zu ziehen. \n\nWas für erstaunliche Schneeflocken du machen kannst! \n\n*
        * *\n\nSchau sich diese Beispiele mit Polygonen an:\\\\ \n![](https://images.code.org/b32ebfb3be559bf8a6d017a854e0b97e-image-1495821528995.42.08.png)
        \n![](https://images.code.org/08d7155f6829f82d878dfa57ad5dcaf3-image-1495821528996.42.26.png)
        \n![](https://images.code.org/7d461ee9046871e6993406e558f28176-image-1495821528996.42.58.png)
        \n\nAbstrakte Formen könnten eine Schneeflocke eher wie eine von diesen aussehen
        lassen:\\\\ \n![](https://images.code.org/376d7ba20b6bb86e08b1675370e87b92-image-1496695869798.44.00.png)
        \n![](https://images.code.org/4f649cc779920632674afac5acce5c95-image-1496695869798.47.51.png)
        \n![](https://images.code.org/a68f925ffd87241ebc09183acc908b4b-image-1496695869796.31.49.png)"
      courseD_artist_project3_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Lass uns eine Schneeflocke daraus machen“_\n\nAls nächstes lass Elsa mit
        dem Block `Spring 200 seitlich und 200 nach unten` wieder in die Mitte springen
        und drehe sie, um die Linie der Formen immer wieder in verschiedene Richtungen
        zu ziehen. \n\nWas für erstaunliche Schneeflocken du machen kannst! \n\n*
        * *\n\nSchau sich diese Beispiele mit Polygonen an:\\\\ \n![](https://images.code.org/b32ebfb3be559bf8a6d017a854e0b97e-image-1495821528995.42.08.png)
        \n![](https://images.code.org/08d7155f6829f82d878dfa57ad5dcaf3-image-1495821528996.42.26.png)
        \n![](https://images.code.org/7d461ee9046871e6993406e558f28176-image-1495821528996.42.58.png)
        \n\nAbstrakte Formen könnten eine Schneeflocke eher wie eine von diesen aussehen
        lassen:\\\\ \n![](https://images.code.org/376d7ba20b6bb86e08b1675370e87b92-image-1496695869798.44.00.png)
        \n![](https://images.code.org/4f649cc779920632674afac5acce5c95-image-1496695869798.47.51.png)
        \n![](https://images.code.org/a68f925ffd87241ebc09183acc908b4b-image-1496695869796.31.49.png)"
      courseD_artist_project3_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Lass uns eine Schneeflocke daraus machen“_\n\nAls nächstes lass Elsa mit
        dem Block `Spring 200 seitlich und 200 nach unten` wieder in die Mitte springen
        und drehe sie, um die Linie der Formen immer wieder in verschiedene Richtungen
        zu ziehen. \n\nWas für erstaunliche Schneeflocken du machen kannst! \n\n*
        * *\n\nSchau sich diese Beispiele mit Polygonen an:\\\\ \n![](https://images.code.org/b32ebfb3be559bf8a6d017a854e0b97e-image-1495821528995.42.08.png)
        \n![](https://images.code.org/08d7155f6829f82d878dfa57ad5dcaf3-image-1495821528996.42.26.png)
        \n![](https://images.code.org/7d461ee9046871e6993406e558f28176-image-1495821528996.42.58.png)
        \n\nAbstrakte Formen könnten eine Schneeflocke eher wie eine von diesen aussehen
        lassen:\\\\ \n![](https://images.code.org/376d7ba20b6bb86e08b1675370e87b92-image-1496695869798.44.00.png)
        \n![](https://images.code.org/4f649cc779920632674afac5acce5c95-image-1496695869798.47.51.png)
        \n![](https://images.code.org/a68f925ffd87241ebc09183acc908b4b-image-1496695869796.31.49.png)"
      courseD_artist_project3a: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Lass uns die Formen drehen und Schneeflocken daraus machen\"._\n\nDrehe
        diese Form etwa 5 oder 6 Mal im Kreis. \n\n-   Wenn du 5 Mal wählst, probiere
        eine Drehung um 72 Grad\n-   Wenn du 6 Mal wählst, probiere eine Drehung um
        60 Grad <hr/> \n\nHier siehst du ein Beispiel dafür, wie Elsa sich 6 Mal in
        einem Muster dreht: \n\n![](https://images.code.org/b0fe02e728f80ae7a4b731f32371a37b-image-1496697582505.19.34.png)"
      courseD_artist_project3a_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Lass uns die Formen drehen und Schneeflocken daraus machen\"._\n\nDrehe
        diese Form etwa 5 oder 6 Mal im Kreis. \n\n-   Wenn du 5 Mal wählst, probiere
        eine Drehung um 72 Grad\n-   Wenn du 6 Mal wählst, probiere eine Drehung um
        60 Grad <hr/> \n\nHier siehst du ein Beispiel dafür, wie Elsa sich 6 Mal in
        einem Muster dreht: \n\n![](https://images.code.org/b0fe02e728f80ae7a4b731f32371a37b-image-1496697582505.19.34.png)"
      courseD_artist_project3a_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Lass uns die Formen drehen und Schneeflocken daraus machen\"._\n\nDrehe
        diese Form etwa 5 oder 6 Mal im Kreis. \n\n-   Wenn du 5 Mal wählst, probiere
        eine Drehung um 72 Grad\n-   Wenn du 6 Mal wählst, probiere eine Drehung um
        60 Grad <hr/> \n\nHier siehst du ein Beispiel dafür, wie Elsa sich 6 Mal in
        einem Muster dreht: \n\n![](https://images.code.org/b0fe02e728f80ae7a4b731f32371a37b-image-1496697582505.19.34.png)"
      courseD_artist_project4: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Was passiert, wenn wir Schneeflocken übereinander zeichnen?\"_ \n\nVersuche,
        zwei verschiedene Formen von Schneeflocken übereinander mit einer kleinen
        Drehung dazwischen zu schichten - mal sehen, was dabei herauskommt!"
      courseD_artist_project4_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Was passiert, wenn wir Schneeflocken übereinander zeichnen?\"_ \n\nVersuche,
        zwei verschiedene Formen von Schneeflocken übereinander mit einer kleinen
        Drehung dazwischen zu schichten - mal sehen, was dabei herauskommt!"
      courseD_artist_project4_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Was passiert, wenn wir Schneeflocken übereinander zeichnen?\"_ \n\nVersuche,
        zwei verschiedene Formen von Schneeflocken übereinander mit einer kleinen
        Drehung dazwischen zu schichten - mal sehen, was dabei herauskommt!"
      courseD_artist_project4a: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Was sollen wir jetzt tun? Lass uns unsere eigene Winterlandschaft erforschen
        und erschaffen!\"_\n\nVersuche, mit dem, was du geschaffen hast, zu spielen.
        Zeichne, was immer dir gefällt! \n\n-   Was passiert, wenn du zwei verschiedene
        Winkel in deinem Treppenstufenmuster verwendest? \n-   Was passiert, wenn
        du dein Rautenmuster länger oder kürzer machst? \n-   Wie sieht es aus, wenn
        du zwei Schneeflocken übereinander zeichnest?"
      courseD_artist_project4a_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Was sollen wir jetzt tun? Lass uns unsere eigene Winterlandschaft erforschen
        und erschaffen!\"_\n\nVersuche, mit dem, was du geschaffen hast, zu spielen.
        Zeichne, was immer dir gefällt! \n\n-   Was passiert, wenn du zwei verschiedene
        Winkel in deinem Treppenstufenmuster verwendest? \n-   Was passiert, wenn
        du dein Rautenmuster länger oder kürzer machst? \n-   Wie sieht es aus, wenn
        du zwei Schneeflocken übereinander zeichnest?"
      courseD_artist_project4a_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Was sollen wir jetzt tun? Lass uns unsere eigene Winterlandschaft erforschen
        und erschaffen!\"_\n\nVersuche, mit dem, was du geschaffen hast, zu spielen.
        Zeichne, was immer dir gefällt! \n\n-   Was passiert, wenn du zwei verschiedene
        Winkel in deinem Treppenstufenmuster verwendest? \n-   Was passiert, wenn
        du dein Rautenmuster länger oder kürzer machst? \n-   Wie sieht es aus, wenn
        du zwei Schneeflocken übereinander zeichnest?"
      courseD_artist_project5: '![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Arbeite kreativ mit Formen und Winkeln, um zu sehen, welche neuen Arten
        von Schneeflocken wir zeichnen können!"_'
      courseD_artist_project5_2018: '![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Arbeite kreativ mit Formen und Winkeln, um zu sehen, welche neuen Arten
        von Schneeflocken wir zeichnen können!"_'
      courseD_artist_project5_2019: '![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Arbeite kreativ mit Formen und Winkeln, um zu sehen, welche neuen Arten
        von Schneeflocken wir zeichnen können!"_'
      courseD_artist_ramp11: "Großartig! Lass uns jetzt mithilfe des Künstlers ein
        Quadrat zeichnen! Die Bausteine sind ein wenig anders, aber die Idee ist die
        gleiche. \n\n* * *\n\nJede Seite des Quadrats ist 200 Pixel lang und du brauchst
        eine Drehung um 90 Grad, um jeden Winkel zu zeichnen."
      courseD_artist_ramp12: "Verwende, was du gelernt hast, um dieses Dreieck innerhalb
        eines Quadrats zu zeichnen. \n\n-   -   -   -   ###### \n\nDie Seiten sind
        jeweils 200 Pixel lang. Du brauchst eine Drehung um 90 Grad, um das Quadrat
        zu zeichnen, und eine Drehung 120 Grad für das Dreieck."
      courseD_autorun_binary2_2019: "Hier ist eine Funktion, die eine binäre Zeichenfolge
        aus 1 und 0 verwendet und dem Künstler vorschreibt, sie von links nach rechts,
        von oben nach unten zu verfolgen. \n\n* * *\n\nDer Künstler füllt ein Feld
        aus, wenn er eine 1 sieht, und ignoriert ein Feld, wenn er eine 0 sieht. \n\n*
        * *\n\n**Führe diesen Code aus, um zu sehen, wie der Künstler die Binärzeichen
        verwendet, um dieses Muster zu zeichnen.**"
      courseD_bee_conditionals10: |-
        Bedingungen können nützlich sein, auch wenn man genau weiß, was sich an den einzelnen Stellen befindet!

        Sammele den gesamten Nektar und stelle den gesamten Honig her.
      courseD_bee_conditionals10_2018: |-
        Bedingungen können nützlich sein, auch wenn man genau weiß, was sich an den einzelnen Stellen befindet!

        Sammele den gesamten Nektar und stelle den gesamten Honig her.
      courseD_bee_conditionals10_2019: |-
        Bedingungen können nützlich sein, auch wenn man genau weiß, was sich an den einzelnen Stellen befindet!

        Sammele den gesamten Nektar und stelle den gesamten Honig her.
      courseD_bee_conditionals1_predict1: |-
        _"Diese Wolke versperrt mir die Sicht!"_

        Prüfe, ob sich unter der Wolke eine Blüte befindet. Wenn es dort eine Blüte gibt, sammele Nektar.
      courseD_bee_conditionals1_predict1_2018: |-
        _"Diese Wolke versperrt mir die Sicht!"_

        Prüfe, ob sich unter der Wolke eine Blüte befindet. Wenn es dort eine Blüte gibt, sammele Nektar.
      courseD_bee_conditionals1_predict1_2019: |-
        _"Diese Wolke versperrt mir die Sicht!"_

        Prüfe, ob sich unter der Wolke eine Blüte befindet. Wenn es dort eine Blüte gibt, sammele Nektar.
      courseD_bee_conditionals1_predict1_copy: |-
        _"Diese Wolke versperrt mir die Sicht!"_

        Prüfe, ob sich unter der Wolke eine Blüte befindet. Wenn es dort eine Blüte gibt, sammele Nektar.
      courseD_bee_conditionals2: |-
        Noch mehr Wolken!

        Prüfe, ob sich unter jeder Wolke, ob sich darunter eine Blüte verbirgt. Wenn es dort eine Blüte gibt, sammele Nektar. Wenn sich unter der Wolke eine Blüte befindet, muss die Biene _einmal_ Nektar holen.

        Denke daran: Nicht alle Wolken verbergen dieselben Dinge!
      courseD_bee_conditionals2_2018: |-
        Noch mehr Wolken!

        Prüfe, ob sich unter jeder Wolke, ob sich darunter eine Blüte verbirgt. Wenn es dort eine Blüte gibt, sammele Nektar. Wenn sich unter der Wolke eine Blüte befindet, muss die Biene _einmal_ Nektar holen.

        Denke daran: Nicht alle Wolken verbergen dieselben Dinge!
      courseD_bee_conditionals2_2019: |-
        Noch mehr Wolken!

        Prüfe, ob sich unter jeder Wolke, ob sich darunter eine Blüte verbirgt. Wenn es dort eine Blüte gibt, sammele Nektar. Wenn sich unter der Wolke eine Blüte befindet, muss die Biene _einmal_ Nektar holen.

        Denke daran: Nicht alle Wolken verbergen dieselben Dinge!
      courseD_bee_conditionals2_copy: |-
        Noch mehr Wolken!

        Prüfe, ob sich unter jeder Wolke, ob sich darunter eine Blüte verbirgt. Wenn es dort eine Blüte gibt, sammele Nektar. Wenn sich unter der Wolke eine Blüte befindet, muss die Biene _einmal_ Nektar holen.

        Denke daran: Nicht alle Wolken verbergen dieselben Dinge!
      courseD_bee_conditionals3: Du kannst nur Nektar von Blüten sammeln, aber du
        kannst an jeder beliebigen Stelle nachsehen, ob sich dort eine Blüte befindet.
        Wenn unter einer dieser Wolken eine Blüte ist, muss die Biene _einmal_ Nektar
        sammeln.
      courseD_bee_conditionals3_2018: Du kannst nur Nektar von Blüten sammeln, aber
        du kannst an jeder beliebigen Stelle nachsehen, ob sich dort eine Blüte befindet.
        Wenn unter einer dieser Wolken eine Blüte ist, muss die Biene _einmal_ Nektar
        sammeln.
      courseD_bee_conditionals3_2019: Du kannst nur Nektar von Blüten sammeln, aber
        du kannst an jeder beliebigen Stelle nachsehen, ob sich dort eine Blüte befindet.
        Wenn unter einer dieser Wolken eine Blüte ist, muss die Biene _einmal_ Nektar
        sammeln.
      courseD_bee_conditionals3_copy: Du kannst nur Nektar von Blüten sammeln, aber
        du kannst an jeder beliebigen Stelle nachsehen, ob sich dort eine Blüte befindet.
        Wenn unter einer dieser Wolken eine Blüte ist, muss die Biene _einmal_ Nektar
        sammeln.
      courseD_bee_conditionals4: |-
        In diesem Puzzle wissen wir, dass jede Blüte genau eine Einheit Nektar hat, aber die Blüten sind nicht gleichmäßig verteilt.

        Hol dir mit so wenigen Blöcken wie möglich den ganzen Nektar.
      courseD_bee_conditionals4_2018: |-
        In diesem Puzzle wissen wir, dass jede Blüte genau eine Einheit Nektar hat, aber die Blüten sind nicht gleichmäßig verteilt.

        Hol dir mit so wenigen Blöcken wie möglich den ganzen Nektar.
      courseD_bee_conditionals4_2019: |-
        In diesem Puzzle wissen wir, dass jede Blüte genau eine Einheit Nektar hat, aber die Blüten sind nicht gleichmäßig verteilt.

        Hol dir mit so wenigen Blöcken wie möglich den ganzen Nektar.
      courseD_bee_conditionals4_copy: |-
        In diesem Puzzle wissen wir, dass jede Blüte genau eine Einheit Nektar hat, aber die Blüten sind nicht gleichmäßig verteilt.

        Hol dir mit so wenigen Blöcken wie möglich den ganzen Nektar.
      courseD_bee_conditionals6: |-
        _"Jetzt will ich nur Honig herstellen."_

        Unter einigen dieser Wolken könnten sich Waben befinden. Überprüfe auf jeden Fall jede Wolke, ob dahinter eine Wabe versteckt ist! Wenn es eine Wabe gibt, braucht die Biene nur _einmal_ Honig herzustellen.
      courseD_bee_conditionals6_2018: |-
        _"Jetzt will ich nur Honig herstellen."_

        Unter einigen dieser Wolken könnten sich Waben befinden. Überprüfe auf jeden Fall jede Wolke, ob dahinter eine Wabe versteckt ist! Wenn es eine Wabe gibt, braucht die Biene nur _einmal_ Honig herzustellen.
      courseD_bee_conditionals6_2019: |-
        _"Jetzt will ich nur Honig herstellen."_

        Unter einigen dieser Wolken könnten sich Waben befinden. Überprüfe auf jeden Fall jede Wolke, ob dahinter eine Wabe versteckt ist! Wenn es eine Wabe gibt, braucht die Biene nur _einmal_ Honig herzustellen.
      courseD_bee_conditionals7: |-
        Manchmal bedeckt eine Wolke eine Blüte, manchmal bedeckt sie eine Wabe!

        Verwende den `wenn/sonst-Baustein`, um Nektar von Blüten zu sammeln und Honig in den Waben herzustellen. Denke daran: wenn sich dort eine Blüte befindet, muss die Biene nur *einmal- Nektar holen. Wenn es dort eine Wabe gibt, braucht die Biene nur \_einmal* Honig herzustellen.
      courseD_bee_conditionals7_2018: |-
        Manchmal bedeckt eine Wolke eine Blüte, manchmal bedeckt sie eine Wabe!

        Verwende den `wenn/sonst-Baustein`, um Nektar von Blüten zu sammeln und Honig in den Waben herzustellen. Denke daran: wenn sich dort eine Blüte befindet, muss die Biene nur *einmal- Nektar holen. Wenn es dort eine Wabe gibt, braucht die Biene nur \_einmal* Honig herzustellen.
      courseD_bee_conditionals7_2019: |-
        Manchmal bedeckt eine Wolke eine Blüte, manchmal bedeckt sie eine Wabe!

        Verwende den `wenn/sonst-Baustein`, um Nektar von Blüten zu sammeln und Honig in den Waben herzustellen. Denke daran: wenn sich dort eine Blüte befindet, muss die Biene nur *einmal- Nektar holen. Wenn es dort eine Wabe gibt, braucht die Biene nur \_einmal* Honig herzustellen.
      courseD_bee_conditionals7_predict2: |-
        Manchmal bedeckt eine Wolke eine Blüte, manchmal bedeckt sie eine Wabe!

        Verwende den `wenn/sonst-Baustein`, um Nektar von Blüten zu sammeln und Honig in den Waben herzustellen. Denke daran: es gibt immer nur _eine_ Wabe oder _eine_ Blüte hinter jeder Wolke.
      courseD_bee_conditionals7_predict2_2018: "Manchmal bedeckt eine Wolke eine Blume,
        manchmal eine Wabe! \n\nBenutze den `wenn/sonst` Block, um Nektar an Blumen
        zu sammeln und Honig an Waben zu machen. Denke daran: es gibt immer nur _eine_
        Wabe oder _eine_ Blume hinter jeder Wolke."
      courseD_bee_conditionals7_predict2_2019: "Manchmal bedeckt eine Wolke eine Blume,
        manchmal eine Wabe! \n\nBenutze den `wenn/sonst` Block, um Nektar an Blumen
        zu sammeln und Honig an Waben zu machen. Denke daran: es gibt immer nur _eine_
        Wabe oder _eine_ Blume hinter jeder Wolke."
      courseD_bee_conditionals8: "**Aufgabe:** Unter jeder dieser Wolken befindet
        sich entweder eine Blüte oder eine Wabe! \n\nSammele Nektar, wenn dort eine
        Blüte ist. \nSonst stelle Honig her (weil sich dort eine Wabe befindet)."
      courseD_bee_conditionals8_2018: "**Aufgabe:** Unter jeder dieser Wolken befindet
        sich entweder eine Blüte oder eine Wabe! \n\nSammele Nektar, wenn dort eine
        Blüte ist. \nSonst stelle Honig her (weil sich dort eine Wabe befindet)."
      courseD_bee_conditionals8_2019: "**Aufgabe:** Unter jeder dieser Wolken befindet
        sich entweder eine Blüte oder eine Wabe! \n\nSammele Nektar, wenn dort eine
        Blüte ist. \nSonst stelle Honig her (weil sich dort eine Wabe befindet)."
      courseD_bee_conditionals9: Sammele den ganzen Nektar oder stelle den ganzen
        Honig her. Du kannst nur Nektar von Blüten sammeln und Honig nur aus Waben
        herstellen. Prüfe jedes Feld, ob sich dort eine Blüte oder eine Wabe befindet.
        Hinter jeder Wolke befindet sich immer nur eine Blüte oder eine Wabe.
      courseD_bee_conditionals9_2018: Sammele den ganzen Nektar oder stelle den ganzen
        Honig her. Du kannst nur Nektar von Blüten sammeln und Honig nur aus Waben
        herstellen. Prüfe jedes Feld, ob sich dort eine Blüte oder eine Wabe befindet.
        Hinter jeder Wolke befindet sich immer nur eine Blüte oder eine Wabe.
      courseD_bee_conditionals9_2019: Sammele den ganzen Nektar oder stelle den ganzen
        Honig her. Du kannst nur Nektar von Blüten sammeln und Honig nur aus Waben
        herstellen. Prüfe jedes Feld, ob sich dort eine Blüte oder eine Wabe befindet.
        Hinter jeder Wolke befindet sich immer nur eine Blüte oder eine Wabe.
      courseD_bee_conditionals_challenge1: Sammele den ganzen Nektar und stelle den
        ganzen Honig her. Du kannst nur Nektar von Blumen sammeln und Honig aus Waben
        herstellen. Prüfe jedes Feld, ob sich dort eine Blume oder eine Wabe befindet.
      courseD_bee_conditionals_challenge1_2018: Sammele den ganzen Nektar und stelle
        den ganzen Honig her. Du kannst nur Nektar von Blumen sammeln und Honig aus
        Waben herstellen. Prüfe jedes Feld, ob sich dort eine Blume oder eine Wabe
        befindet.
      courseD_bee_conditionals_challenge1_2019: Sammele den ganzen Nektar und stelle
        den ganzen Honig her. Du kannst nur Nektar von Blumen sammeln und Honig aus
        Waben herstellen. Prüfe jedes Feld, ob sich dort eine Blume oder eine Wabe
        befindet.
      courseD_bee_conditionals_challenge2: Sammele den gesamten Nektar und stelle
        den gesamten Honig her. Du kannst den gesamten Nektar in einer Blüte sammeln,
        indem du die Schleife `solange wie Nektar > 0 ist` verwendest.
      courseD_bee_conditionals_challenge2_2018: Sammele den gesamten Nektar und stelle
        den gesamten Honig her. Du kannst den gesamten Nektar in einer Blüte sammeln,
        indem du die Schleife `solange wie Nektar > 0 ist` verwendest.
      courseD_bee_conditionals_challenge2_2019: Sammele den gesamten Nektar und stelle
        den gesamten Honig her. Du kannst den gesamten Nektar in einer Blüte sammeln,
        indem du die Schleife `solange wie Nektar > 0 ist` verwendest.
      courseD_bee_debugging_challenge1: Beobachte, wie sich Bienen den Nektar holen.
        Kannst du die gleiche Art eines Musters verwenden, um der Biene bei der Herstellung
        des gesamten Honigs zu helfen?
      courseD_bee_debugging_challenge1a: |-
        _“Summ-summ! Ich weiß, wie ich den Nektar finden kann- jetzt hilf mir dabei, Honig herzustellen!“_

        Beobachte, wie sich Biene den Nektar holt. Kannst du ein ähnliches Muster verwenden, um der Biene bei der Herstellung des gesamten Honigs zu helfen?
      courseD_bee_nestedLoops1: |-
        "_Das wird großartig!_"

        Hilf der Biene, den ganzen Nektar zu sammeln.
      courseD_bee_nestedLoops1_2018: |-
        "_Das wird großartig!_"

        Hilf der Biene, den ganzen Nektar zu sammeln.
      courseD_bee_nestedLoops1_2019: |-
        "_Das wird großartig!_"

        Hilf der Biene, den ganzen Nektar zu sammeln.
      courseD_bee_nestedLoops1a: |-
        _"Das wird großartig!"_

        Hilf der Biene, den ganzen Nektar zu sammeln.
      courseD_bee_nestedLoops1a_2018: |-
        _"Das wird großartig!"_

        Hilf der Biene, den ganzen Nektar zu sammeln.
      courseD_bee_nestedLoops1a_2019: |-
        _"Das wird großartig!"_

        Hilf der Biene, den ganzen Nektar zu sammeln.
      courseD_bee_nestedLoops2: Hilf der Biene diesmal, den gesamten Nektar mit möglichst
        wenigen Blöcken zu sammeln.
      courseD_bee_nestedLoops2_2018: Hilf der Biene diesmal, den gesamten Nektar mit
        möglichst wenigen Blöcken zu sammeln.
      courseD_bee_nestedLoops2_2019: Hilf der Biene diesmal, den gesamten Nektar mit
        möglichst wenigen Blöcken zu sammeln.
      courseD_bee_nestedLoops2_predict1: Hilf der Biene diesmal, den gesamten Nektar
        mit möglichst wenigen Blöcken zu sammeln.
      courseD_bee_nestedLoops2_predict1_2018: Hilf der Biene diesmal, den gesamten
        Nektar mit möglichst wenigen Blöcken zu sammeln.
      courseD_bee_nestedLoops2_predict1_2019: Hilf der Biene diesmal, den gesamten
        Nektar mit möglichst wenigen Blöcken zu sammeln.
      courseD_bee_nestedLoops7: "**Aufgabe:** Finde heraus, wie du den ganzen Nektar
        holen kannst, indem du nur die verfügbaren Blöcke verwendest."
      courseD_bee_nestedLoops7_2018: "**Aufgabe:** Finde heraus, wie du den ganzen
        Nektar holen kannst, indem du nur die verfügbaren Blöcke verwendest."
      courseD_bee_nestedLoops7_2019: "**Aufgabe:** Finde heraus, wie du den ganzen
        Nektar holen kannst, indem du nur die verfügbaren Blöcke verwendest."
      courseD_bee_nestedLoops8: Sammle den gesamten Nektar jeder Blüte und erzeuge
        Honig bei jeder Honigwabe. Benutze eine verschachtelte Schleife.
      courseD_bee_nestedLoops8_2018: Sammle den gesamten Nektar jeder Blüte und erzeuge
        Honig bei jeder Honigwabe. Benutze eine verschachtelte Schleife.
      courseD_bee_nestedLoops8_2019: Sammle den gesamten Nektar jeder Blüte und erzeuge
        Honig bei jeder Honigwabe. Benutze eine verschachtelte Schleife.
      courseD_bee_nestedLoops9: Mach den ganzen Honig.
      courseD_bee_nestedLoops9_2018: Mach den ganzen Honig.
      courseD_bee_nestedLoops9_2019: Mach den ganzen Honig.
      courseD_bee_nestedLoops9_predict2: Mach den ganzen Honig.
      courseD_bee_nestedLoops9_predict2_2018: Mach den ganzen Honig.
      courseD_bee_nestedLoops9_predict2_2019: Mach den ganzen Honig.
      courseD_bounce_events10s_2018: "An der Oberseite befindet sich nun ein Korb.
        \ \n\nBefestige den Baustein `Punkt` an dem Ereignis `wenn der Ball im Tor`
        und den Block `Punkt für den Gegner` an dem Ereignis `wenn der Ball die Hand
        trifft`, um ein Spiel zu machen. \n\n* * *\n\nSchaue wie viele Punkte du erreichen
        kannst, bevor dein Gegner zweimal punktet."
      courseD_bounce_events10s_2019: "An der Oberseite befindet sich nun ein Korb.
        \ \n\nBefestige den Baustein `Punkt` an dem Ereignis `wenn der Ball im Tor`
        und den Block `Punkt für den Gegner` an dem Ereignis `wenn der Ball die Hand
        trifft`, um ein Spiel zu machen. \n\n* * *\n\nSchaue wie viele Punkte du erreichen
        kannst, bevor dein Gegner zweimal punktet."
      courseD_bounce_events11s_2018: |-
        Jetzt hast du den Ball unter Kontrolle!  Bringe den Baustein "Neuen Ball werfen" an allen Stellen an, an denen das Spiel einen neuen Ball benötigt.

        * * *

        Schau wie viele Punkte du erreichen kannst, bevor dein Gegner zweimal punktet!
      courseD_bounce_events11s_2019: |-
        Jetzt hast du den Ball unter Kontrolle!  Bringe den Baustein "Neuen Ball werfen" an allen Stellen an, an denen das Spiel einen neuen Ball benötigt.

        * * *

        Schau wie viele Punkte du erreichen kannst, bevor dein Gegner zweimal punktet!
      courseD_bounce_events1s_2018: "Auf zum Reifen!     \n\nHänge einen Block an
        das Ereignis `Wenn der linke Pfeil` an und drücke auf \"Ausführen \", um den
        Spieler ins Netz zu bringen."
      courseD_bounce_events1s_2019: "Auf zum Reifen!     \n\nHänge einen Block an
        das Ereignis `Wenn der linke Pfeil` an und drücke auf \"Ausführen \", um den
        Spieler ins Netz zu bringen."
      courseD_bounce_events2s_2018: Nun hänge einen Baustein an das "when right event"
        an, so dass die Hand zu beiden Körben gelangen kann.
      courseD_bounce_events2s_2019: Nun hänge einen Baustein an das "when right event"
        an, so dass die Hand zu beiden Körben gelangen kann.
      courseD_bounce_events5s_2018: Wir werden einen Basketball schicken, der zur
        Hand hinunterfliegt.  Hänge einen Baustein ans Ereignis "When ball hits hand"
        an, um sicherzustellen, dass der Ball den Korb erreicht.
      courseD_bounce_events5s_2019: Wir werden einen Basketball schicken, der zur
        Hand hinunterfliegt.  Hänge einen Baustein ans Ereignis "When ball hits hand"
        an, um sicherzustellen, dass der Ball den Korb erreicht.
      courseD_bounce_events6s_2018: "Nun befindet sich der Korb oben.  \n\nFüge Code
        hinzu, damit der Ball springt, wenn er auf die Wand trifft um dieses Rätsel
        zu lösen."
      courseD_bounce_events6s_2019: "Nun befindet sich der Korb oben.  \n\nFüge Code
        hinzu, damit der Ball springt, wenn er auf die Wand trifft um dieses Rätsel
        zu lösen."
      courseD_bounce_events7s_2018: |-
        Bringe Soundbausteine an, um das Netz zum Rascheln zu bringen, wenn du den Korb triffst, und lass den Pfiff ertönen, wenn der Ball deine Hand verlässt.

        * * *

        Lasse den Ball so lange prallen, bis er das Ziel erreicht hat.
      courseD_bounce_events7s_2019: |-
        Bringe Soundbausteine an, um das Netz zum Rascheln zu bringen, wenn du den Korb triffst, und lass den Pfiff ertönen, wenn der Ball deine Hand verlässt.

        * * *

        Lasse den Ball so lange prallen, bis er das Ziel erreicht hat.
      courseD_collector_debugging1: |-
        _"Oh nein! Ich sehe, dass es da ein Problem gibt."_

        "Behebe den/die Fehler, um den gesamten Schatz einzusammeln.
      courseD_collector_debugging10_predict1: |-
        _"Das ist eine Schatzinsel!“_

        Hilf Laurel, den Code zu reparieren, damit sie alle Schätze einsammeln kann.
      courseD_collector_debugging1a_2018: |-
        _"Oh nein! Ich sehe, dass es da ein Problem gibt."_

        "Behebe den/die Fehler, um den gesamten Schatz einzusammeln.
      courseD_collector_debugging1a_2019: |-
        _"Oh nein! Ich sehe, dass es da ein Problem gibt."_

        "Behebe den/die Fehler, um den gesamten Schatz einzusammeln.
      courseD_collector_debugging2: |-
        _“Du schaffst das!“_

        "Behebe den/die Fehler, um den gesamten Schatz einzusammeln.
      courseD_collector_debugging2a_2018: |-
        _“Du schaffst das!“_

        "Behebe den/die Fehler, um den gesamten Schatz einzusammeln.
      courseD_collector_debugging2a_2019: |-
        _“Du schaffst das!“_

        "Behebe den/die Fehler, um den gesamten Schatz einzusammeln.
      courseD_collector_debugging3: "_\"Bleib beharrlich und du wirst es schaffen.\"_
        \n\nBehebe den/die Fehler, um den gesamten Schatz einzusammeln."
      courseD_collector_debugging3a_2018: "_\"Bleib beharrlich und du wirst es schaffen.\"_
        \n\nBehebe den/die Fehler, um den gesamten Schatz einzusammeln."
      courseD_collector_debugging3a_2019: "_\"Bleib beharrlich und du wirst es schaffen.\"_
        \n\nBehebe den/die Fehler, um den gesamten Schatz einzusammeln."
      courseD_collector_debugging4: "_\"Gib nicht auf. Du schaffst das!\"_ \n\nBehebe
        den/die Fehler, um alle Schätze einzusammeln."
      courseD_collector_debugging4a_2018: "_\"Gib nicht auf. Du schaffst das!\"_ \n\nBehebe
        den/die Fehler, um alle Schätze einzusammeln."
      courseD_collector_debugging4a_2019: "_\"Gib nicht auf. Du schaffst das!\"_ \n\nBehebe
        den/die Fehler, um alle Schätze einzusammeln."
      courseD_collector_debugging5: "_\"Ich drehe bei dieser Aufgabe durch!\"_ \n\nAlle
        Befehle, die du brauchst, sind bereits vorhanden ... nutze jetzt deine Fähigkeiten
        beim Entdecken von Fehlern, um herauszufinden, wie du diese Aufgabe lösen
        kannst."
      courseD_collector_debugging5a_2018: "_\"Ich drehe bei dieser Aufgabe durch!\"_
        \n\nAlle Befehle, die du brauchst, sind bereits vorhanden ... nutze jetzt
        deine Fähigkeiten beim Entdecken von Fehlern, um herauszufinden, wie du diese
        Aufgabe lösen kannst."
      courseD_collector_debugging5a_2019: "_\"Ich drehe bei dieser Aufgabe durch!\"_
        \n\nAlle Befehle, die du brauchst, sind bereits vorhanden ... nutze jetzt
        deine Fähigkeiten beim Entdecken von Fehlern, um herauszufinden, wie du diese
        Aufgabe lösen kannst."
      courseD_collector_debugging6: "**Aufgabe:** Alle Bausteine, die du brauchst,
        sind bereits hier...Nutze jetzt deine Fähigkeiten beim Entdecken von Fehlern,
        um sie zu beheben und den ganzen Schatz einzusammeln."
      courseD_collector_debugging6a_2018: 'Herausforderung: Verwende den Code im Arbeitsbereich,
        um mindestens **6** Schätze zu erreichen!'
      courseD_collector_debugging6a_2019: 'Herausforderung: Verwende den Code im Arbeitsbereich,
        um mindestens **6** Schätze zu erreichen!'
      courseD_collector_debugging8: |-
        _“So viele Schätze!“_

        Hilf Laurel, den Code zu reparieren, damit sie alle Schätze einsammeln kann.
      courseD_collector_debugging8a_2018: |-
        _“So viele Schätze!“_

        Hilf Laurel, den Code zu reparieren, damit sie alle Schätze einsammeln kann.
      courseD_collector_debugging8a_2019: |-
        _“So viele Schätze!“_

        Hilf Laurel, den Code zu reparieren, damit sie alle Schätze einsammeln kann.
      courseD_collector_debugging9: |-
        _"Das ist eine Schatzinsel!“_

        Hilf Laurel, den Code zu reparieren, damit sie alle Schätze einsammeln kann.
      courseD_collector_debugging9a_2018: |-
        _"Das ist eine Schatzinsel!“_

        Hilf Laurel, den Code zu reparieren, damit sie alle Schätze einsammeln kann.
      courseD_collector_debugging9a_2019: |-
        _"Das ist eine Schatzinsel!“_

        Hilf Laurel, den Code zu reparieren, damit sie alle Schätze einsammeln kann.
      courseD_collector_nested_loops_challenge2: |-
        _“Lass uns auf die Schatzsuche gehen - mit Schleifen!“_

        Hilf dem Sammler, mindestens zwei Stapel Schätze zu erreichen und verwende dabei nur die Blöcke in deinem Werkzeugkasten. Es ist möglich, alle 4 einzusammeln.
      courseD_collector_nested_loops_challenge2_2018: |-
        _“Lass uns auf die Schatzsuche gehen - mit Schleifen!“_

        Hilf dem Sammler, mindestens zwei Stapel Schätze zu erreichen und verwende dabei nur die Blöcke in deinem Werkzeugkasten. Es ist möglich, alle 4 einzusammeln.
      courseD_collector_nested_loops_challenge2_2019: |-
        _“Lass uns auf die Schatzsuche gehen - mit Schleifen!“_

        Hilf dem Sammler, mindestens zwei Stapel Schätze zu erreichen und verwende dabei nur die Blöcke in deinem Werkzeugkasten. Es ist möglich, alle 4 einzusammeln.
      courseD_collector_nested_loops_challenge2a: |-
        _“Lass uns auf die Schatzsuche gehen - mit Schleifen!“_

        Hilf Laurel, mindestens zwei Stapel Schätze zu sammeln und verwende dabei nur die Bausteine in deinem Werkzeugkasten. Es ist möglich, alle 4 einzusammeln.
      courseD_collector_ramp10: Gehe mit Laurel auf diesem Feld herum und sammele
        die Schätze ein, die du findest.
      courseD_collector_ramp8: |-
        Diese Aufgabe ist der letzten sehr ähnlich, aber jetzt hat Laurel die Abenteurerin die Hauptrolle!

        * * *

        Nimm den gleichen Weg wie vorher, aber dieses Mal benutzte eine 'wiederholen\`-Schleife, um die Schätze zu sammeln, wenn du dort ankommst.
      courseD_collector_ramp9: Jetzt gibt es noch mehr Schätze.  Kannst du Laurel
        helfen, alles einzusammeln?
      courseD_farmer_condLoops1: |-
        _“Kannst du mir heute bei der Ernte helfen?“_

        Hilf der Erntearbeiterin dabei, ihre Reihe Mais zu überwachen, um zu sehen, ob etwas geerntet werden kann. Verwende Bedingungen, um jeden Sprössling zu untersuchen. Jeder Stängel hat entweder **0 oder 1** erntereife Maiskolben.
      courseD_farmer_condLoops1_2018: |-
        _“Kannst du mir heute bei der Ernte helfen?“_

        Hilf der Erntearbeiterin dabei, ihre Reihe Mais zu überwachen, um zu sehen, ob etwas geerntet werden kann. Verwende Bedingungen, um jeden Sprössling zu untersuchen. Jeder Stängel hat entweder **0 oder 1** erntereife Maiskolben.
      courseD_farmer_condLoops1_2019: |-
        _“Kannst du mir heute bei der Ernte helfen?“_

        Hilf der Erntearbeiterin dabei, ihre Reihe Mais zu überwachen, um zu sehen, ob etwas geerntet werden kann. Verwende Bedingungen, um jeden Sprössling zu untersuchen. Jeder Stängel hat entweder **0 oder 1** erntereife Maiskolben.
      courseD_farmer_condLoops2: "_“Lass uns beide Ernten aus dieser Reihe einsammeln!“_\n\nDieser
        Garten ist ganz durcheinander, es gibt **Mais und Salat**! \n\nHilf der Erntearbeiterin,
        die erntereifen Pflanzen zu pflücken. Jede Pflanze verfügt entweder über **einen**
        Maiskolben oder **einen** Salatkopf."
      courseD_farmer_condLoops2_2018: "_“Lass uns beide Ernten aus dieser Reihe einsammeln!“_\n\nDieser
        Garten ist ganz durcheinander, es gibt **Mais und Salat**! \n\nHilf der Erntearbeiterin,
        die erntereifen Pflanzen zu pflücken. Jede Pflanze verfügt entweder über **einen**
        Maiskolben oder **einen** Salatkopf."
      courseD_farmer_condLoops2_2019: "_“Lass uns beide Ernten aus dieser Reihe einsammeln!“_\n\nDieser
        Garten ist ganz durcheinander, es gibt **Mais und Salat**! \n\nHilf der Erntearbeiterin,
        die erntereifen Pflanzen zu pflücken. Jede Pflanze verfügt entweder über **einen**
        Maiskolben oder **einen** Salatkopf."
      courseD_farmer_condLoops3: |-
        _"Mais, Salat UND Kürbisse! Hilf mir, das alles zu ernten."_

        Auf jeder Pflanze wird es entweder einen Maiskolben, einen Salatkopf oder einen Kürbis geben.
      courseD_farmer_condLoops3_2018: |-
        _"Mais, Salat UND Kürbisse! Hilf mir, das alles zu ernten."_

        Auf jeder Pflanze wird es entweder einen Maiskolben, einen Salatkopf oder einen Kürbis geben.
      courseD_farmer_condLoops3_2019: |-
        _"Mais, Salat UND Kürbisse! Hilf mir, das alles zu ernten."_

        Auf jeder Pflanze wird es entweder einen Maiskolben, einen Salatkopf oder einen Kürbis geben.
      courseD_farmer_condLoops4: "_\"Meine Güte! Jetzt wächst der Salat in Büscheln!\"_
        \n\nDie Erntearbeiterin will alles aus ihrem Salatgarten ernten. Aus jeder
        Pflanze wird nun mehr als ein Salatkopf wachsen, sodass die Erntearbeiterin
        weiter pflücken muss, während der Salat noch wächst. \n\n##### (Denk daran:
        In diesem Garten gibt es nur Salat!)"
      courseD_farmer_condLoops4_2018: "_\"Meine Güte! Jetzt wächst der Salat in Büscheln!\"_
        \n\nDie Erntearbeiterin will alles aus ihrem Salatgarten ernten. Aus jeder
        Pflanze wird nun mehr als ein Salatkopf wachsen, sodass die Erntearbeiterin
        weiter pflücken muss, während der Salat noch wächst. \n\n##### (Denk daran:
        In diesem Garten gibt es nur Salat!)"
      courseD_farmer_condLoops4_2019: "_\"Meine Güte! Jetzt wächst der Salat in Büscheln!\"_
        \n\nDie Erntearbeiterin will alles aus ihrem Salatgarten ernten. Aus jeder
        Pflanze wird nun mehr als ein Salatkopf wachsen, sodass die Erntearbeiterin
        weiter pflücken muss, während der Salat noch wächst. \n\n##### (Denk daran:
        In diesem Garten gibt es nur Salat!)"
      courseD_farmer_condLoops5: |-
        _“Was für eine großartige Ernte“_

        "Auf diesem Feld wachsen Büschel von Mais und Salatköpfen zusammen - mit einem Kürbis am Ende. Kannst du alles ernten?
      courseD_farmer_condLoops5_2018: |-
        _“Was für eine großartige Ernte“_

        "Auf diesem Feld wachsen Büschel von Mais und Salatköpfen zusammen - mit einem Kürbis am Ende. Kannst du alles ernten?
      courseD_farmer_condLoops5_2019: |-
        _“Was für eine großartige Ernte“_

        "Auf diesem Feld wachsen Büschel von Mais und Salatköpfen zusammen - mit einem Kürbis am Ende. Kannst du alles ernten?
      courseD_farmer_condLoops6: |-
        _“Lass uns den nächsten Schritt gehen!“_

        Weißt du, wie man den Kürbis erntet? Achte darauf, dass du den ganzen Mais auf dem Weg einsammelst!
      courseD_farmer_condLoops6_2018: |-
        _“Lass uns den nächsten Schritt gehen!“_

        Weißt du, wie man den Kürbis erntet? Achte darauf, dass du den ganzen Mais auf dem Weg einsammelst!
      courseD_farmer_condLoops6_2019: |-
        _“Lass uns den nächsten Schritt gehen!“_

        Weißt du, wie man den Kürbis erntet? Achte darauf, dass du den ganzen Mais auf dem Weg einsammelst!
      courseD_farmer_condLoops7: "**Aufgabe:** Sammele den gesamten Mais und Salat
        ein, dann pflücke den Kürbis."
      courseD_farmer_condLoops7_2018: "**Aufgabe:** Sammele den gesamten Mais und
        Salat ein, dann pflücke den Kürbis."
      courseD_farmer_condLoops7_2019: "**Aufgabe:** Sammele den gesamten Mais und
        Salat ein, dann pflücke den Kürbis."
      courseD_farmer_condLoops8: Sammele du den gesamten Mais und Salat ein und ernte
        dann den Kürbis.
      courseD_farmer_condLoops8_2018: Sammele du den gesamten Mais und Salat ein und
        ernte dann den Kürbis.
      courseD_farmer_condLoops8_2019: Sammele du den gesamten Mais und Salat ein und
        ernte dann den Kürbis.
      courseD_farmer_condLoops9: Sammele du den gesamten Mais und Salat ein und ernte
        dann den Kürbis.
      courseD_farmer_condLoops9_2018: Sammele du den gesamten Mais und Salat ein und
        ernte dann den Kürbis.
      courseD_farmer_condLoops9_2019: Sammele du den gesamten Mais und Salat ein und
        ernte dann den Kürbis.
      courseD_farmer_condLoops9_predict1: Sammele du den gesamten Mais und Salat ein
        und ernte dann den Kürbis.
      courseD_farmer_condLoops9_predict1_2018: Sammele du den gesamten Mais und Salat
        ein und ernte dann den Kürbis.
      courseD_farmer_condLoops9_predict1_2019: Sammele du den gesamten Mais und Salat
        ein und ernte dann den Kürbis.
      courseD_farmer_condLoops_challenge1: "Die Kürbisse markieren die Stelle, an
        der du `nach rechts` abbiegen musst. Ansonsten geh geradeaus weiter, aber
        vergiss nicht, den gesamten Salat oder Mais auf dem Weg einzusammeln. \n\n\\*\\*Jede
        versteckte Pflanze hat nur einen Maiskolben oder Salatkopf."
      courseD_farmer_condLoops_challenge1_2018: "Die Kürbisse markieren die Stelle,
        an der du `nach rechts` abbiegen musst. Ansonsten geh geradeaus weiter, aber
        vergiss nicht, den gesamten Salat oder Mais auf dem Weg einzusammeln. \n\n\\*\\*Jede
        versteckte Pflanze hat nur einen Maiskolben oder Salatkopf."
      courseD_farmer_condLoops_challenge1_2019: "Die Kürbisse markieren die Stelle,
        an der du `nach rechts` abbiegen musst. Ansonsten geh geradeaus weiter, aber
        vergiss nicht, den gesamten Salat oder Mais auf dem Weg einzusammeln. \n\n\\*\\*Jede
        versteckte Pflanze hat nur einen Maiskolben oder Salatkopf."
      courseD_farmer_condLoops_challenge2: |-
        \_"Es ist ein sehr vielseitiges Gemüselabyrinth!"

        Bei den Kürbissen rechts, bei den Salatköpfen links abbiegen. Sammele alles ein, um den Level abzuschließen.
      courseD_farmer_condLoops_challenge2_2018: |-
        \_"Es ist ein sehr vielseitiges Gemüselabyrinth!"

        Bei den Kürbissen rechts, bei den Salatköpfen links abbiegen. Sammele alles ein, um den Level abzuschließen.
      courseD_farmer_condLoops_challenge2_2019: |-
        \_"Es ist ein sehr vielseitiges Gemüselabyrinth!"

        Bei den Kürbissen rechts, bei den Salatköpfen links abbiegen. Sammele alles ein, um den Level abzuschließen.
      courseD_farmer_until_challenge2: Verwende Wenn/Sonst-Bausteine, um dem gewundenen
        Pfad zu folgen. Verwende an jeder Ecke den Befehl `entferne 1` in einer Schleife,
        um die Erdhaufen zu entfernen.
      courseD_farmer_while1: "_\"Hallo, ich bin Landwirt. Ich brauche deine Hilfe,
        um das Feld auf meinem Hof zu ebnen, damit es für das Pflanzen bereit ist!\"_
        \n\nGehe zu dem Erdhaufen und verwende den `Entfernen`-Block, um ihn wegzumachen."
      courseD_farmer_while1_2018: "_\"Hallo, ich bin Landwirt. Ich brauche deine Hilfe,
        um das Feld auf meinem Hof zu ebnen, damit es für das Pflanzen bereit ist!\"_
        \n\nGehe zu dem Erdhaufen und verwende den `Entfernen`-Block, um ihn wegzumachen."
      courseD_farmer_while1_2019: "_\"Hallo, ich bin Landwirt. Ich brauche deine Hilfe,
        um das Feld auf meinem Hof zu ebnen, damit es für das Pflanzen bereit ist!\"_
        \n\nGehe zu dem Erdhaufen und verwende den `Entfernen`-Block, um ihn wegzumachen."
      courseD_farmer_while3: |-
        _"Gehe zu dem Erdhaufen und sag mir, wie viele Schaufeln Erde du wegschaffen musst."_

        Verwende so wenige Blöcke wie möglich, um dieses Rätsel zu lösen.
      courseD_farmer_while3_2018: |-
        _"Gehe zu dem Erdhaufen und sag mir, wie viele Schaufeln Erde du wegschaffen musst."_

        Verwende so wenige Blöcke wie möglich, um dieses Rätsel zu lösen.
      courseD_farmer_while3_2019: |-
        _"Gehe zu dem Erdhaufen und sag mir, wie viele Schaufeln Erde du wegschaffen musst."_

        Verwende so wenige Blöcke wie möglich, um dieses Rätsel zu lösen.
      courseD_farmer_while4: |-
        \_ „Ich weiß nicht, wie viel Erde auf diesem Haufen ist“\_

        Hilf dem Landwirt, diesen ganzen Haufen mit einer "Während"-Schleife zu entfernen
      courseD_farmer_while4_2018: |-
        \_ „Ich weiß nicht, wie viel Erde auf diesem Haufen ist“\_

        Hilf dem Landwirt, diesen ganzen Haufen mit einer "Während"-Schleife zu entfernen
      courseD_farmer_while4_2019: |-
        \_ „Ich weiß nicht, wie viel Erde auf diesem Haufen ist“\_

        Hilf dem Landwirt, diesen ganzen Haufen mit einer "Während"-Schleife zu entfernen
      courseD_farmer_while4_predict1: |-
        \_ „Ich weiß nicht, wie viel Erde auf diesem Haufen ist“\_

        Hilf dem Landwirt, diesen ganzen Haufen mit einer "Während"-Schleife zu entfernen
      courseD_farmer_while4_predict1_2018: |-
        \_ „Ich weiß nicht, wie viel Erde auf diesem Haufen ist“\_

        Hilf dem Landwirt, diesen ganzen Haufen mit einer "Während"-Schleife zu entfernen
      courseD_farmer_while4_predict1_2019: |-
        \_ „Ich weiß nicht, wie viel Erde auf diesem Haufen ist“\_

        Hilf dem Landwirt, diesen ganzen Haufen mit einer "Während"-Schleife zu entfernen
      courseD_farmer_while6: |-
        Sieh sich all diese Löcher an! Jedes von ihnen erfordert eine andere Menge Erde.

        Du kannst die "Während"-Schleife verwenden, um sie alle leicht zu füllen!
      courseD_farmer_while6_2018: |-
        Sieh sich all diese Löcher an! Jedes von ihnen erfordert eine andere Menge Erde.

        Du kannst die "Während"-Schleife verwenden, um sie alle leicht zu füllen!
      courseD_farmer_while6_2019: |-
        Sieh sich all diese Löcher an! Jedes von ihnen erfordert eine andere Menge Erde.

        Du kannst die "Während"-Schleife verwenden, um sie alle leicht zu füllen!
      courseD_farmer_while8: "**Aufgabe:** Fülle alle diese Löcher mit so wenigen
        Blöcken wie möglich."
      courseD_farmer_while8_2018: "**Aufgabe:** Fülle alle diese Löcher mit so wenigen
        Blöcken wie möglich."
      courseD_farmer_while8_2019: "**Aufgabe:** Fülle alle diese Löcher mit so wenigen
        Blöcken wie möglich."
      courseD_farmer_while_challenge1: Fülle alle Löcher und entferne alle Erdhaufen.
      courseD_farmer_while_challenge1_2018: Fülle alle Löcher und entferne alle Erdhaufen.
      courseD_farmer_while_challenge1_2019: Fülle alle Löcher und entferne alle Erdhaufen.
      courseD_farmer_while_challenge2: Fülle alle Löcher und entferne alle Erdhaufen.
      courseD_harvester_nested_loops_challenge1: _"Ich brauche etwas Hilfe auf dem
        Bauernhof! Hilf mir bei der Ernte von diesem Mais, indem du nur die Blöcke
        aus deiner Werkzeugkiste verwendest."_
      courseD_harvester_nested_loops_challenge1_2018: _"Ich brauche etwas Hilfe auf
        dem Bauernhof! Hilf mir bei der Ernte von diesem Mais, indem du nur die Blöcke
        aus deiner Werkzeugkiste verwendest."_
      courseD_harvester_nested_loops_challenge1_2019: _"Ich brauche etwas Hilfe auf
        dem Bauernhof! Hilf mir bei der Ernte von diesem Mais, indem du nur die Blöcke
        aus deiner Werkzeugkiste verwendest."_
      courseD_iceage_loops1: Hilf Scrat über das glitschige Eis, um an die Eichel
        zu gelangen!
      courseD_iceage_loops10: Hilf Scrat, den ganzen Weg zur Eichel zu schaffen!
      courseD_iceage_loops10_2019: Hilf Scrat, den ganzen Weg zur Eichel zu schaffen!
      courseD_iceage_loops11: Hilf Scrat zur Eichel zu gelangen!
      courseD_iceage_loops11_2019: Hilf Scrat zur Eichel zu gelangen!
      courseD_iceage_loops12: Gehe zur Eichel, wie du kannst!
      courseD_iceage_loops12_2019: Gehe zur Eichel, wie du kannst!
      courseD_iceage_loops1_2019: Hilf Scrat über das glitschige Eis, um an die Eichel
        zu gelangen!
      courseD_iceage_loops2: |-
        Benutze einen <xml><block type="maze_turn">
            <title name="DIR">turnLeft</title>
          </block></xml> Baustein, um an die Eichel zu gelangen!
      courseD_iceage_loops2_2019: |-
        Benutze einen <xml><block type="maze_turn" block-text="turn left">
            <title name="DIR">turnLeft</title>
          </block></xml> Baustein, um an die Eichel zu gelangen!
      courseD_iceage_loops3: Kannst du zur Eichel gelangen, mit nur einem <xml><block
        type="maze_moveForward"/></xml>-Block? Versuche eine Schleife zu benutzen!
      courseD_iceage_loops3_2019: Kannst du zur Eichel gelangen, mit nur einem <xml><block
        type="maze_moveForward" block-text="move forward"/></xml>-Block? Versuche
        eine Schleife zu benutzen!
      courseD_iceage_loops4: Füge einen weiteren Block hinzu, um Scrat bis zur Eichel
        zu bekommen!
      courseD_iceage_loops4_2019: Füge einen weiteren Block hinzu, um Scrat bis zur
        Eichel zu bekommen!
      courseD_iceage_loops6: Kannst du eine Schleife hinzufügen, um an die Eichel
        zu kommen?
      courseD_iceage_loops6_2019: Kannst du eine Schleife hinzufügen, um an die Eichel
        zu kommen?
      courseD_iceage_loops7: 'Scrat möchte wirklich gern zur Eichel kommen! '
      courseD_iceage_loops7_2019: 'Scrat möchte wirklich gern zur Eichel kommen! '
      courseD_iceage_loops8: 'Kannst du diesen Code reparieren? '
      courseD_iceage_loops8_2019: 'Kannst du diesen Code reparieren? '
      courseD_iceage_loops9: Die Eichel ist so weit weg! Kannst du Schleifen benutzen,
        um Scrat zu helfen, dorthin zu gelangen?
      courseD_iceage_loops9_2019: Die Eichel ist so weit weg! Kannst du Schleifen
        benutzen, um Scrat zu helfen, dorthin zu gelangen?
      courseD_maze_intro4_2019: '\_"Verfolge den Weg und führe mich zum Schwein."
        \_ '
      courseD_maze_intro5a_2019: Zähle die Felder auf dem Gitter sorgfältig!
      courseD_maze_intro5c_2019: Achte auf das TNT! Hilf Red, zum Schwein zu kommen.
      courseD_maze_nestedLoops3: |-
        _"Der Zombie hat Hunger!"_

        "Bring den Zombie mit möglichst wenigen Blöcken zu der Sonnenblume.
      courseD_maze_nestedLoops3_2018: |-
        _"Der Zombie hat Hunger!"_

        "Bring den Zombie mit möglichst wenigen Blöcken zu der Sonnenblume.
      courseD_maze_nestedLoops3_2019: |-
        _"Der Zombie hat Hunger!"_

        "Bring den Zombie mit möglichst wenigen Blöcken zu der Sonnenblume.
      courseD_maze_nestedLoops4: |-
        Bring mich zu der Sonnenblume!
        (Hinweis: Du musst eine „Wiederholen“-Schleife innerhalb einer anderen benutzen, um dieses Level zu bestehen.
      courseD_maze_nestedLoops4_2018: |-
        Bring mich zu der Sonnenblume!
        (Hinweis: Du musst eine „Wiederholen“-Schleife innerhalb einer anderen benutzen, um dieses Level zu bestehen.
      courseD_maze_nestedLoops4_2019: |-
        Bring mich zu der Sonnenblume!
        (Hinweis: Du musst eine „Wiederholen“-Schleife innerhalb einer anderen benutzen, um dieses Level zu bestehen.
      courseD_maze_nestedLoops6: |-
        _"Zombie muss die Sonnenblume fressen!"_

        Bring den Zombie zur Sonnenblume und verwende nur die verfügbaren Blöcke.
      courseD_maze_nestedLoops6_2018: |-
        _"Zombie muss die Sonnenblume fressen!"_

        Bring den Zombie zur Sonnenblume und verwende nur die verfügbaren Blöcke.
      courseD_maze_nestedLoops6_2019: |-
        _"Zombie muss die Sonnenblume fressen!"_

        Bring den Zombie zur Sonnenblume und verwende nur die verfügbaren Blöcke.
      courseD_maze_ramp1: Für diese Aufgabe musst du alle Blöcke zusammensetzen, auf
        'Ausführen' klicken und zusehen, wie es läuft!
      courseD_maze_ramp1_2018: Für diese Aufgabe musst du alle Blöcke zusammensetzen,
        auf 'Ausführen' klicken und zusehen, wie es läuft!
      courseD_maze_ramp1_2019: Für diese Aufgabe musst du alle Blöcke zusammensetzen,
        auf 'Ausführen' klicken und zusehen, wie es läuft!
      courseD_maze_ramp2: Ziehe einen zusätzlichen Block `Vorwärts bewegen` aus der
        Werkzeugkiste und hänge ihn dann alle Blöcke an `wenn ausgeführt` an, um deinen
        Code abzuschließen.
      courseD_maze_ramp2_2018: Ziehe einen zusätzlichen Block `Vorwärts bewegen` aus
        der Werkzeugkiste und hänge ihn dann alle Blöcke an `wenn ausgeführt` an,
        um deinen Code abzuschließen.
      courseD_maze_ramp2_2019: Ziehe einen zusätzlichen Block `Vorwärts bewegen` aus
        der Werkzeugkiste und hänge ihn dann alle Blöcke an `wenn ausgeführt` an,
        um deinen Code abzuschließen.
      courseD_maze_ramp3: |-
        _""Dieses Schwein zerzaust mein Gefieder.“_

        Es gibt einen zusätzlichen Block, der den Vogel zum Absturz bringen wird
        Wirf ihn weg, indem du ihn von den anderen Blocks entfernst und ihn zurück in die Werkzeugkiste ziehst.
      courseD_maze_ramp3_2018: |-
        _""Dieses Schwein zerzaust mein Gefieder.“_

        Es gibt einen zusätzlichen Block, der den Vogel zum Absturz bringen wird
        Wirf ihn weg, indem du ihn von den anderen Blocks entfernst und ihn zurück in die Werkzeugkiste ziehst.
      courseD_maze_ramp3_2019: |-
        Hilf dem Vogel, zum Schwein zu kommen. Es gibt einen zusätzlichen blauen `Vorwärts bewegen` Baustein.

        Wirf den übeflüssigen Baustein weg, indem du ihn von den anderen Bausteinen entfernst und ihn zurück in den Werkzeugkasten ziehst.
      courseD_maze_ramp4: "_\"Verfolge den Pfad und führe mich zum Schwein\"._ \n\nVermeide
        das TNT, sonst fliegen die Federn!"
      courseD_maze_ramp4_2018: "_\"Verfolge den Pfad und führe mich zum Schwein\"._
        \n\nVermeide das TNT, sonst fliegen die Federn!"
      courseD_maze_ramp4_2019: '\_"Verfolge den Weg und führe mich zum Eichel." \_ '
      courseD_maze_ramp5: |-
        _""Folge diesem Weg, um mich zu dem Schwein zu bringen!""_

        \_ Vermeide den Sprengstoff.
      courseD_maze_ramp5_2018: |-
        _""Folge diesem Weg, um mich zu dem Schwein zu bringen!""_

        \_ Vermeide den Sprengstoff.
      courseD_maze_ramp5_2019: |-
        _""Folge diesem Weg, um mich zu dem Schwein zu bringen!""_

        \_ Vermeide den Sprengstoff.
      courseD_maze_ramp5a: Achte auf die Reihenfolge und schau, ob du herausfinden
        kannst, wie du zu diesem Schwein kommst!
      courseD_maze_ramp5a_2018: Achte auf die Reihenfolge und schau, ob du herausfinden
        kannst, wie du zu diesem Schwein kommst!
      courseD_maze_ramp5a_2019: Zähle die Felder auf dem Gitter sorgfältig!
      courseD_maze_ramp5b: "**Aufgabe:** Navigiere durch dieses Labyrinth, um dem
        Vogel zu helfen, das Schwein zu finden!"
      courseD_maze_ramp5b_2018: "**Aufgabe:** Navigiere durch dieses Labyrinth, um
        dem Vogel zu helfen, das Schwein zu finden!"
      courseD_maze_ramp5b_2019: "**Aufgabe:** Navigiere durch dieses Labyrinth, um
        dem Vogel zu helfen, das Schwein zu finden!"
      courseD_maze_ramp5c: Hilf dem Vogel, an das Schwein zu kommen.
      courseD_maze_ramp5c_2018: Hilf dem Vogel, an das Schwein zu kommen.
      courseD_maze_ramp5c_2019: Hilf Scrat zur Eichel zu gelangen.
      courseD_maze_ramp5d: Bring den Vogel zum Schwein.
      courseD_maze_ramp5d_2018: Bring den Vogel zum Schwein.
      courseD_maze_ramp5d_2019: Bring den Vogel zum Schwein.
      courseD_maze_ramp6: |-
        _"Bleib ruhig und hilf mir, das böse Schwein zu finden. Sonst werde ich richtig wütend!"_

        Wenn du mehrere gleiche Bausteine hintereinander hast, versuche es mit einer "wiederholen"-Schleife. Das bewirkt dasselbe mit weniger Code!
      courseD_maze_ramp7: |-
        _"Es ist Zeit, wütend zu werden! "_

        Benutze, was du gelernt hast, um den Vogel zum Schwein zu bringen!
      courseD_maze_until10: Hilf dem Zombie, zur Sonnenblume zu gelangen.
      courseD_maze_until10_2018: Hilf dem Zombie, zur Sonnenblume zu gelangen.
      courseD_maze_until10_2019: Hilf dem Zombie, zur Sonnenblume zu gelangen.
      courseD_maze_until10_predict2: Hilf dem Zombie, zur Sonnenblume zu gelangen.
      courseD_maze_until10_predict2_2018: Hilf dem Zombie, zur Sonnenblume zu gelangen.
      courseD_maze_until10_predict2_2019: Hilf dem Zombie, zur Sonnenblume zu gelangen.
      courseD_maze_until4: |-
        _"Lieber Mensch. Ich Zombie. Ich hungrig. Muss... zur Sonnenblume..."_

        Kannst du den Zombie zur Sonnenblume bringen und dabei nur die verfügbaren Blöcke verwenden?
      courseD_maze_until4_2018: |-
        _"Lieber Mensch. Ich Zombie. Ich hungrig. Muss... zur Sonnenblume..."_

        Kannst du den Zombie zur Sonnenblume bringen und dabei nur die verfügbaren Blöcke verwenden?
      courseD_maze_until4_2019: |-
        _"Lieber Mensch. Ich Zombie. Ich hungrig. Muss... zur Sonnenblume..."_

        Kannst du den Zombie zur Sonnenblume bringen und dabei nur die verfügbaren Blöcke verwenden?
      courseD_maze_until5: Verwende den "Falls"-Block, um dem Zombie bei der Entscheidung
        zu helfen, wann er abbiegen muss und bringe den Zombie dann zur Sonnenblume.
      courseD_maze_until5_2018: Verwende den "Falls"-Block, um dem Zombie bei der
        Entscheidung zu helfen, wann er abbiegen muss und bringe den Zombie dann zur
        Sonnenblume.
      courseD_maze_until5_2019: Verwende den "Falls"-Block, um dem Zombie bei der
        Entscheidung zu helfen, wann er abbiegen muss und bringe den Zombie dann zur
        Sonnenblume.
      courseD_maze_until6: Hilf dem Zombie, zur Sonnenblume zu gelangen.
      courseD_maze_until6_2018: Hilf dem Zombie, zur Sonnenblume zu gelangen.
      courseD_maze_until6_2019: Hilf dem Zombie, zur Sonnenblume zu gelangen.
      courseD_maze_until7: Hilf dem Zombie, zur Sonnenblume zu gelangen.
      courseD_maze_until7_2018: Hilf dem Zombie, zur Sonnenblume zu gelangen.
      courseD_maze_until7_2019: Hilf dem Zombie, zur Sonnenblume zu gelangen.
      courseD_maze_until8: Hilf dem Zombie, zur Sonnenblume zu gelangen.
      courseD_maze_until9: "**Aufgabe:** Gehe den Chompers aus dem Weg und hilf dem
        Zombie, zur Sonnenblume zu gelangen."
      courseD_maze_until9_2018: "**Aufgabe:** Gehe den Chompers aus dem Weg und hilf
        dem Zombie, zur Sonnenblume zu gelangen."
      courseD_maze_until9_2019: "**Aufgabe:** Gehe den Chompers aus dem Weg und hilf
        dem Zombie, zur Sonnenblume zu gelangen."
      courseD_maze_until_challenge1: Keine Hilfe, nur eine Aufgabe. Bring den Zombie
        zur Sonnenblume.
      courseD_playLab_cond1: "Damit wir unser Spiel beginnen können, muss der Pirat
        Pegleg (Figur 1) in der Lage sein, sich in alle Richtungen zu bewegen. Verbinde
        die Bausteine mit den richtigen Ereignissen, um Pegleg zu bewegen. \n\n* *
        *\n\nHilf Pegleg dabei, die Fahnen zu sammeln, um diese Aufgabe zu lösen."
      courseD_playLab_cond1_2018: "Damit wir unser Spiel beginnen können, muss der
        Pirat Pegleg (Figur 1) in der Lage sein, sich in alle Richtungen zu bewegen.
        Verbinde die Bausteine mit den richtigen Ereignissen, um Pegleg zu bewegen.
        \n\n* * *\n\nHilf Pegleg dabei, die Fahnen zu sammeln, um diese Aufgabe zu
        lösen."
      courseD_playLab_cond2: "Zeit, Punkte hinzuzufügen! \n\nBearbeite den Code so,
        dass Pegleg (Figur 1) einen Punkt macht, wenn er es zum Drachen (Figur 2)
        schafft."
      courseD_playLab_cond2_2018: "Zeit, Punkte hinzuzufügen! \n\nBearbeite den Code
        so, dass Pegleg (Figur 1) einen Punkt macht, wenn er es zum Drachen (Figur
        2) schafft."
      courseD_playLab_cond3: Verwende eine `endlos wiederholen`-Schleife, damit der
        Drache (Figur 2) jede Sekunde zwischen zufälligen Emotionen wechselt.
      courseD_playLab_cond3_2018: Verwende eine `endlos wiederholen`-Schleife, damit
        der Drache (Figur 2) jede Sekunde zwischen zufälligen Emotionen wechselt.
      courseD_playLab_cond3a: "Es ist an der Zeit, das, was wir über Bedingungen gelernt
        haben, zu nutzen, um dieses Spiel interessanter zu gestalten. \n\nFüge Code
        hinzu, damit Pegleg, wenn er den Drachen erreicht, zwei Punkte erhält, _wenn_
        der Drache fröhlich ist. Andernfalls wird seinem Punktestand nur ein Punkt
        hinzugefügt."
      courseD_playLab_cond3a_2018: "Es ist an der Zeit, das, was wir über Bedingungen
        gelernt haben, zu nutzen, um dieses Spiel interessanter zu gestalten. \n\nFüge
        Code hinzu, damit Pegleg, wenn er den Drachen erreicht, zwei Punkte erhält,
        _wenn_ der Drache fröhlich ist. Andernfalls wird seinem Punktestand nur ein
        Punkt hinzugefügt."
      courseD_playLab_cond4: "Jetzt wird es spannend! \n\nFüge ein wenig Code hinzu,
        so dass der Ninja (Figur 3) Pegleg jagt, sobald das Spiel beginnt. Beende
        das Spiel als verloren, falls der Ninja ihn erwischt."
      courseD_playLab_cond4_2018: "Jetzt wird es spannend! \n\nFüge ein wenig Code
        hinzu, so dass der Ninja (Figur 3) Pegleg jagt, sobald das Spiel beginnt.
        Beende das Spiel als verloren, falls der Ninja ihn erwischt."
      courseD_playLab_cond5: "Jetzt brauchen wir einen Weg, um zu gewinnen. \n\nFüge
        eine `endlos wiederholen`-Schleife hinzu, die kontinuierlich prüft, ob der
        Punktestand größer als 5 ist, und das Spiel dann als **Sieg** beendet, **wenn**
        dies der Fall ist."
      courseD_playLab_cond5_2018: "Jetzt brauchen wir einen Weg, um zu gewinnen. \n\nFüge
        eine `endlos wiederholen`-Schleife hinzu, die kontinuierlich prüft, ob der
        Punktestand größer als 5 ist, und das Spiel dann als **Sieg** beendet, **wenn**
        dies der Fall ist."
      courseD_playLab_cond6: "Uff, es ist schwierig, dieses Spiel zu gewinnen! \n\nLasse
        uns dieses Spiel so verändern, dass es spannender wird. Diese Aufgabe besteht
        aus zwei Teilen: \n\n* * *\n\n1.  Verlangsame den Ninja (Figur 3), bevor du
        ihn so programmierst, dass er den Piraten (Figur 1) jagt. \n2.  Verwende eine
        `endlos wiederholen`-Schleife, um zu überprüfen, ob sich der Pirat in der
        \"sicheren Zone\" unterhalb der Linie der Kraken (mehr als 225 Pixel nach
        unten) befindet. Falls ja, stelle den Ninja so ein, dass er den Piraten **flüchtet**.
        Andernfalls setze den Ninja auf **jagen** den Piraten."
      courseD_playLab_cond6_2018: "Mensch! \n\nEs ist wirklich schwer dieses Spiel
        zu gewinnen.Lass uns dieses Spiel ein bisschen anpassen, damit es mehr Spaß
        ist. Diese Herausforderung besteht aus zwei Teilen:\n\n* * *\n\n1.  Lass den
        Ninja etwas langsamer laufen (Darsteller 3), bevor du ihn auf die Jagd nach
        dem Piraten (Darsteller 1) setzt.\n\n2.  Benutze eine 'für immer wiederholen'-Schleife,
        um zu überprüfen ob der Pirat in einer \"sicheren Zone“, unterhalb der Linie
        von Tintenfischen ist (mehr als 225 Pixel nach unten). Wenn dies wahr ist,
        dann stelle den Ninja auf **flüchten** vor dem Pirat ein. Anderenfalls, stelle
        den Ninja auf **jagen** nach dem Piraten ein. "
      courseD_playLab_cond6a: "Wir wollen nicht, dass der Pirat zu lange in der \"sicheren
        Zone\" bleibt! \n\nFüge Code zu der nachfolgenden `wenn`-Bedingung hinzu,
        damit das Programm, wenn sich der Pirat (Figur 1) in der \"sicheren Zone\"
        befindet, eine Sekunde wartet und dann einen Punkt abzieht, solange er unterhalb
        der Krakenlinie bleibt."
      courseD_playLab_cond6a_2018: "Wir wollen nicht, dass der Pirat zu lange in der
        \"sicheren Zone\" bleibt! \n\nFüge Code zu der nachfolgenden `wenn`-Bedingung
        hinzu, damit das Programm, wenn sich der Pirat (Figur 1) in der \"sicheren
        Zone\" befindet, eine Sekunde wartet und dann einen Punkt abzieht, solange
        er unterhalb der Krakenlinie bleibt."
      courseD_playLab_condFP_2018: |-
        Baue jetzt dein eigenes Spiel, dass du an deine Freunde zeigen kannst!

        * * *

        Du könntest:

        -   den Pirat und den Ninja zusammenarbeiten lassen, um Punkte vom Tintenfisch zu holen;
        -   beide Tintenfische den Pirat verfolgen lassen, wodurch der Ninja doppelten Schaden erfährt wenn sie aufeinanderprallen;
        -   Figuren verschwinden lassen, wenn diese durch den Ninja berührt werden;
        -   dein eigenes Spiel erfinden!
      courseD_scrat_ramp1: Für diese Aufgabe musst du alle Blöcke zusammensetzen,
        auf 'Ausführen' klicken und zusehen, wie es läuft!
      courseD_scrat_ramp2: Ziehe einen zusätzlichen Block `Vorwärts bewegen` aus der
        Werkzeugkiste und hänge ihn dann alle Blöcke an `wenn ausgeführt` an, um deinen
        Code abzuschließen.
      courseD_scrat_ramp3: Es gibt einen zusätzlichen Block, der Scrat zum Absturz
        bringen wird. Wirf ihn weg, indem du ihn von den anderen Blöcken trennst und
        zurück in den Werkzeugkasten ziehst.
      courseD_scrat_ramp4: Vermeide das gebrochene Eis, um Scrat zu schützen!
      courseD_scrat_ramp5: Vermeide das gebrochene Eis!
      courseD_scrat_ramp6: Hilf Scrat mit einer Schleife um ihn zur Eichel zu bringen!
      courseD_scrat_ramp7: Hilf Scrat zur Eichel zu gelangen!
      courseD_scrat_ramp8: "**Aufgabe** Verwende alles, was du bisher gelernt hast,
        um Scrat zur Eichel zu bringen."
      courseE_aboutme_1: "![](https://images.code.org/93e1c04857ff781bb5c4cc76b15ed563-image-1557179820861.png)
        _\"Hallo, Welt! Mein Name ist Rikki und hier sind einige Dinge, die ich über
        mich erzählen möchte!\"_\n\n**Freispiel**: Rikki verwendet Sprite Lab, um
        ein _interaktives Poster_ über sich selbst zu erstellen, das sie im Internet
        teilen kann.  \n\nRikki hat dir die Erlaubnis gegeben, ihr Poster zu sehen.
        Du kannst sogar ihren Code bearbeiten! \n\nSpielen Sie mit Rikkis Poster und
        Code und klicken Sie dann auf **Finish**."
      courseE_aboutme_2: "![](https://images.code.org/2bae4bc7c7d59fac0cd4b1370d3c4a11-image-1557179992653.png)
        _\"Rikki hier! Ich helfe dir, ein cooles Poster zu machen. Zuerst klickst
        du auf die Registerkarte Kostüme!\"_\n\n1.  Klicke auf die Registerkarte **Kostüme**
        oben links auf Deinem Bildschirm (neben **Code**). \n2.  Bearbeite das Startkostüm
        oder füge ein neues hinzu, das Dir gefällt. \n3.  Ändere das Kostüm des Sprites
        in deinem eigenen im untenstehenden Code.\n4.  Klicke auf **Ausführen**, um
        den neuen Look Ihres Sprites zu sehen!"
      courseE_aboutme_3: "![](https://images.code.org/2bae4bc7c7d59fac0cd4b1370d3c4a11-image-1557179992653.png)
        _\"Sag etwas über dich selbst und stelle sicher, dass es sicher ist!\"_\n\nBenutze
        <xml><block type=\"gamelab_spriteClicked\" block-text=\"the when sprite clicked
        event block\"></block></xml> und <xml><block type=\"gamelab_printText\" block-text=\"the
        print text block\"></block></xml> (in der Kategorie `Welt`), um Informationen
        über dich selbst auszutauschen, wenn dein Sprite angeklickt wird! \n\n\\*\\*Stelle
        nur sicher, dass die Informationen, die du weitergibst, SICHER sind.\n\n*
        * *\n\n#### Beispiele für SICHERE- und UNSICHERE-Informationen\n\n| SICHER
        \             | UNSICHER              |\n| ------------------- | ---------------------
        |\n| first name          | full name             |\n| favorite things     |
        home address          |\n| respectful opinions | phone number or email |"
      courseE_aboutme_4: |-
        ![](https://images.code.org/2bae4bc7c7d59fac0cd4b1370d3c4a11-image-1557179992653.png) _"Füge weitere Sprites zu deinem Poster hinzu! Vergiss nicht, ihnen Kostüme zu geben!"_

        Füge **mindestens zwei** andere Sprites zu deinem Poster hinzu. Gib jedem Sprite ein einzigartiges Kostüm!
      courseE_aboutme_5: |-
        ![](https://images.code.org/0c3ec1da3493c3e10f5ec714ef1670e3-image-1557185359875.png) _"Erzähl der Welt mehr von dir selbst durch deine neuen Sprites!"_

        Lass deine anderen Sprites Informationen anzeigen, wenn sie angeklickt werden. Stelle sicher, dass alles, was du teilst, SICHER ist!
      courseE_aboutme_6: "![](https://images.code.org/4e9c4465463d0c061b2b47b23d5817ca-image-1557185863600.png)
        _\"Wow! Dein Poster ist fast so cool wie meines! Naja, beinahe. \U0001F609\"_\n\nWessen
        Welt ist das?! Sie gehört dir! \n\nAlso mach weiter! Hier sind ein paar Ideen,
        um Ihr Poster noch besser zu machen:\n\n-   Füge einen Hintergrund hinzu!
        Wähle einen Hintergrund, der zu Ihrem Poster passt.\n-   Füge Verhaltensweisen
        hinzu! Lasse jedes deiner Sprites anders reagieren, wenn es angeklickt wird.\n-
        \  Füge weitere Events hinzu! Verwende die anderen Bausteine in der Kategorie
        `Events`."
      courseE_artist_concept1: "Zeichne dieses Bild nach. \n\n-   Die Seiten der Sechsecke
        sind 50 Pixel lang\n-   Der Abstand zwischen den Sechsecken beträgt 100 Pixel
        \n-   Die Stifte der Sechsecke sind 1 Pixel, 4 Pixel und 8 Pixel breit."
      courseE_artist_concept1_2018: "Zeichne dieses Bild nach. \n\n-   Die Seiten
        der Sechsecke sind 50 Pixel lang\n-   Der Abstand zwischen den Sechsecken
        beträgt 100 Pixel \n-   Die Stifte der Sechsecke sind 1 Pixel, 4 Pixel und
        8 Pixel breit."
      courseE_artist_concept4: "Zeichne dieses Bild nach. \n\nDie Seiten der Quadrate
        sind **20 Pixel** lang und **in jeder Zeile befinden sich 15 Quadrate**."
      courseE_artist_concept4_2018: "Zeichne dieses Bild nach. \n\nDie Seiten der
        Quadrate sind **20 Pixel** lang und **in jeder Zeile befinden sich 15 Quadrate**."
      courseE_artist_concept_challenge1: "<img src=\"https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png\"
        width=\"200px\"/> \n\nHier eine herausfordernde Aufgabe für dich! \n\nHier
        ist siehst du eine Zeichnung, die nur Bausteine verwendet, die du schon gesehen
        hast. Weißt du, wie du sie nachzeichnen kannst? Versuche es einfach verschiedene
        Lösungen und überprüfe, ob sie funktionieren. Deine Zeichnung muss ja nicht
        gleich beim ersten Mal perfekt sein."
      courseE_artist_concept_challenge1_2018: "<img src=\"https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png\"
        width=\"200px\"/> \n\nHier eine herausfordernde Aufgabe für dich! \n\nHier
        ist siehst du eine Zeichnung, die nur Bausteine verwendet, die du schon gesehen
        hast. Weißt du, wie du sie nachzeichnen kannst? Versuche es einfach verschiedene
        Lösungen und überprüfe, ob sie funktionieren. Deine Zeichnung muss ja nicht
        gleich beim ersten Mal perfekt sein."
      courseE_artist_concept_challenge2: Zeichne mit dem nachfolgenden Code fünf Windräder.
      courseE_artist_concept_challenge2_2018: Zeichne mit dem nachfolgenden Code fünf
        Windräder.
      courseE_artist_functions1: |-
        _“Hallo. Ich ein Zombie-Künstler. Ich zeichne gerne!“_

        Hilf dem Zombie dabei, eine Brille mithilfe von quadratischen Feldern mit einer Seitenlänge von 100 Pixeln zu zeichnen.\\ Die Brücke zwischen den Gläsern ist 75 Pixel lang.
      courseE_artist_functions10: "Verwende diesmal Reihen von 8 Sechsecken mit 25
        Pixe langen Seiten. \n\n-   Für die Sechsecke zeichne die Seite 6 Mal und
        verwende dabei eine 60 Grad Drehung.\n-   Springe zwischen den Sechsecken
        um 25 Pixel. \n-   Um eine Raute zu zeichnen, musst du abwechselnd Drehungen
        um 60 Grad und um 120 Grad verwenden."
      courseE_artist_functions10_2018: "Verwende diesmal Reihen von 8 Sechsecken mit
        25 Pixe langen Seiten. \n\n-   Für die Sechsecke zeichne die Seite 6 Mal und
        verwende dabei eine 60 Grad Drehung.\n-   Springe zwischen den Sechsecken
        um 25 Pixel. \n-   Um eine Raute zu zeichnen, musst du abwechselnd Drehungen
        um 60 Grad und um 120 Grad verwenden."
      courseE_artist_functions10_2019: "Verwende diesmal Reihen von 8 Sechsecken mit
        25 Pixe langen Seiten. \n\n-   Für die Sechsecke zeichne die Seite 6 Mal und
        verwende dabei eine 60 Grad Drehung.\n-   Springe zwischen den Sechsecken
        um 25 Pixel. \n-   Um eine Raute zu zeichnen, musst du abwechselnd Drehungen
        um 60 Grad und um 120 Grad verwenden."
      courseE_artist_functions1_copy: |-
        _“Hallo. Ich ein Zombie-Künstler. Ich zeichne gerne!“_

        Hilf dem Zombie dabei, eine Brille mithilfe von quadratischen Feldern mit einer Seitenlänge von 100 Pixeln zu zeichnen.\\ Die Brücke zwischen den Gläsern ist 75 Pixel lang.
      courseE_artist_functions2: "Du kannst mit Funktionen neue Bausteine definieren!
        \n\nWir haben die Bausteine, die zum Zeichnen eines Quadrats benötigt werden,
        in eine Funktion mit dem Namen `ein Quadrat zeichnen` verschoben. Dieses Mal
        verwende die Funktion `ein Quadrat zeichnen`, um die Brille zu zeichnen. \n\n*
        * *\n\nDer Abstand der Quadrate beträgt 75 Pixel."
      courseE_artist_functions2_2018: Hier ist eine Funktion mit dem Namen `Zeichne
        ein Quadrat`. Benutze sie, um diese Zeichnung zu vervollständigen. \* \* \*
        Die Quadrate sind 75 Pixel voneinander entfernt.
      courseE_artist_functions2_2019: Hier ist eine Funktion mit dem Namen `Zeichne
        ein Quadrat`. Benutze sie, um diese Zeichnung zu vervollständigen. \* \* \*
        Die Quadrate sind 75 Pixel voneinander entfernt.
      courseE_artist_functions2_copy: "Du kannst mit Funktionen neue Bausteine definieren!
        \n\nWir haben die Bausteine, die zum Zeichnen eines Quadrats benötigt werden,
        in eine Funktion mit dem Namen `ein Quadrat zeichnen` verschoben. Dieses Mal
        verwende die Funktion `ein Quadrat zeichnen`, um die Brille zu zeichnen. \n\n*
        * *\n\nDer Abstand der Quadrate beträgt 75 Pixel."
      courseE_artist_functions3: |-
        Wir werden uns demnächst wieder mit Funktionen beschäftigen. Lass uns eine Pause einlegen, um diesen Stern zu zeichnen.

        Du kannst diese Zeichnung erstellen, indem du einen `wiederholen`-Baustein hinzufügst.
      courseE_artist_functions3_2018: Erstelle eine Funktion, die diesen Stern erzeugt.
        \* \* \* - Jeder Achse des Sterns ist 25 Pixel lang - Du musst dich um 45
        Grad drehen, um 8 Achsen zu erhalten - Es ist in zulässig, sich über dieselbe
        Achse vorwärts und rückwärts zu bewegen
      courseE_artist_functions3_2019: Erstelle eine Funktion, die diesen Stern erzeugt.
        \* \* \* - Jeder Achse des Sterns ist 25 Pixel lang - Du musst dich um 45
        Grad drehen, um 8 Achsen zu erhalten - Es ist in zulässig, sich über dieselbe
        Achse vorwärts und rückwärts zu bewegen
      courseE_artist_functions3_copy: |-
        Wir werden uns demnächst wieder mit Funktionen beschäftigen. Lass uns eine Pause einlegen, um diesen Stern zu zeichnen.

        Du kannst diese Zeichnung erstellen, indem du einen `wiederholen`-Baustein hinzufügst.
      courseE_artist_functions4: "Jetzt kannst du einen Stern zeichnen - versuche
        nun, vier Sterne zu zeichnen! \n\n-   Jeder Spitze des Sterns ist 25 Pixel
        lang \n-   Drehe dich zwischen den Spitzen um 45 Grad\n-   Springe zwischen
        den Sternen immer um 100 Pixel"
      courseE_artist_functions4_copy: "Jetzt kannst du einen Stern zeichnen - versuche
        nun, vier Sterne zu zeichnen! \n\n-   Jeder Spitze des Sterns ist 25 Pixel
        lang \n-   Drehe dich zwischen den Spitzen um 45 Grad\n-   Springe zwischen
        den Sternen immer um 100 Pixel"
      courseE_artist_functions5: "Wann ist es schwieriger, drei Sterne zu ziehen als
        vier? Wenn man dabei auch noch über den Mond springen muss! \n\nZeichne du
        nur diese drei Sterne, um diese Aufgabe zu lösen."
      courseE_artist_functions5_2018: Wann ist es schwieriger, drei Sterne zu ziehen
        als vier? Wenn man auch noch über den Mond springen muss! Zeichne nur diese
        drei Sterne, um dieses Rätsel zu lösen. \* \* \* - Der Sprung zwischen dem
        ersten und zweiten Stern beträgt **200** Pixel - Der Sprung zwischen dem zweiten
        und dritten Stern beträgt **100** Pixel
      courseE_artist_functions5_2019: Wann ist es schwieriger, drei Sterne zu ziehen
        als vier? Wenn man auch noch über den Mond springen muss! Zeichne nur diese
        drei Sterne, um dieses Rätsel zu lösen. \* \* \* - Der Sprung zwischen dem
        ersten und zweiten Stern beträgt **200** Pixel - Der Sprung zwischen dem zweiten
        und dritten Stern beträgt **100** Pixel
      courseE_artist_functions5_copy: "Wann ist es schwieriger, drei Sterne zu ziehen
        als vier? Wenn man dabei auch noch über den Mond springen muss! \n\nZeichne
        du nur diese drei Sterne, um diese Aufgabe zu lösen."
      courseE_artist_functions6: |-
        Du machst das sehr gut!

        Zeichne dieses Fenster, indem du erst ein Quadrat zeichnest, dann eine Drehung um 90 Grad machst , bevor du ein weiteres Fenster zeichnest, und so weiter.
      courseE_artist_functions7: "Lass uns den Code für das Fenster verwenden und
        ihn zu der Funktion `ein Fenster zeichnen` hinzufügen. Jetzt können wir die
        Funktion jederzeit aufrufen, wenn wir ein Fenster zeichnen müssen, ohne dass
        wir den Code erneut schreiben müssen.\n\n![](https://images.code.org/615a5e93abdaffeed438a976a56fc1f5-image-1497998528859.gif)
        Versuche, diese Aufgabe zu lösen, indem du die Funktion `ein Fenster zeichnen`
        erstellst und sie fünfmal aufrufen. Achte auf die Tür! \n\n-   Die oberen
        Fenster sind 50 Pixel voneinander entfernt. \n-   Die unteren Fenster befinden
        sich 100 Pixel unter der oberen Reihe."
      courseE_artist_functions7_2018: Es wäre sehr umständlich, alle diese Fenster
        einzeln zu zeichnen. Versuche, dieses Rätsel zu lösen, indem du `Ein Fenster
        zeichnen` erstellst und es fünfmal aufrufst. Achtung bei der Tür! \* \* \*
        - Jedes Fenster besteht aus vier **25** Pixel langen/breiten Quadraten. -
        Die oberen Fenster sind einen **100** Pixel-Sprung voneinander entfernt. -
        Die unteren Fenster sind einen **150** Pixel-Sprung unterhalb des oberen Satzes.
      courseE_artist_functions7_2019: Es wäre sehr umständlich, alle diese Fenster
        einzeln zu zeichnen. Versuche, dieses Rätsel zu lösen, indem du `Ein Fenster
        zeichnen` erstellst und es fünfmal aufrufst. Achtung bei der Tür! \* \* \*
        - Jedes Fenster besteht aus vier **25** Pixel langen/breiten Quadraten. -
        Die oberen Fenster sind einen **100** Pixel-Sprung voneinander entfernt. -
        Die unteren Fenster sind einen **150** Pixel-Sprung unterhalb des oberen Satzes.
      courseE_artist_functions8: "**Aufgabe:** Wusstest du, dass du Funktionen aufrufen
        kannst, die sich _in_ anderen Funktionen befinden?! \n\nErstelle du so viele
        Funktionen, wie du deiner Meinung nach für diese Zeichnung mit 50-Pixel-Quadraten
        brauchst."
      courseE_artist_functions8a_2018: _"Funktioniert ganz einfach!"_ Wir werden jetzt
        etwas Ausgefallenes bauen! Beginne mit der Erstellung einer Funktion für dieses
        Quadrat.
      courseE_artist_functions8a_2019: _"Funktioniert ganz einfach!"_ Wir werden jetzt
        etwas Ausgefallenes bauen! Beginne mit der Erstellung einer Funktion für dieses
        Quadrat.
      courseE_artist_functions8b_2018: _"Dem Zombie wird es schwindlig“_ Rufe die
        Funktion `Ein Quadrat zeichnen` aus dem Inneren Ihrer Funktion `Eine Linie
        von Quadraten zeichnen` auf, um es dir noch einfacher zu machen! \* \* Die
        Quadrate sind _50_ Pixel voneinander entfernt.
      courseE_artist_functions8b_2019: _"Dem Zombie wird es schwindlig“_ Rufe die
        Funktion `Ein Quadrat zeichnen` aus dem Inneren Ihrer Funktion `Eine Linie
        von Quadraten zeichnen` auf, um es dir noch einfacher zu machen! \* \* Die
        Quadrate sind _50_ Pixel voneinander entfernt.
      courseE_artist_functions8c_2018: Füge eine weitere Funktion hinzu, die diesen
        Stapel von versetzten Quadraten mit Hilfe der Funktion `Eine Linie von Quadraten
        zeichnen` erzeugt.
      courseE_artist_functions8c_2019: Füge eine weitere Funktion hinzu, die diesen
        Stapel von versetzten Quadraten mit Hilfe der Funktion `Eine Linie von Quadraten
        zeichnen` erzeugt.
      courseE_artist_functions9: "Erstelle dieses Bild nur mit den bereitgestellten
        Bausteinen \n\n-   Jedes Dreieck hat **50 Pixel** lange Seiten \n-   Um eine
        Raute zu zeichnen, brauchst du abwechselnd Drehungen um **60 Grad und um 120
        Grad**."
      courseE_artist_functions9_2018: "**Aufgabe:** Erstelle dieses Bild mit der begrenzten
        Zahl der zur Verfügung gestellten Blöcke. - Jedes Dreieck hat **50 Pixel**
        lange Seiten - Um eine Raute zu zeichnen, musst du dich abwechselnd um **60
        Grad und 120 Grad** drehen."
      courseE_artist_functions9_2019: "**Aufgabe:** Erstelle dieses Bild mit der begrenzten
        Zahl der zur Verfügung gestellten Blöcke. - Jedes Dreieck hat **50 Pixel**
        lange Seiten - Um eine Raute zu zeichnen, musst du dich abwechselnd um **60
        Grad und 120 Grad** drehen."
      courseE_artist_functionsProj_2018: "**Inspiration:** Verwende, das was du gelernt
        hast, wie immer du willst! Kannst du so etwas wie dieses Windrädchen erstellen?"
      courseE_artist_functionsProj_2019: "**Inspiration:** Verwende, das was du gelernt
        hast, wie immer du willst! Kannst du so etwas wie dieses Windrädchen erstellen?"
      courseE_artist_functions_challenge1: Sobald du eine Funktion definiert hast,
        kannst du sie immer wieder aufrufen - wann und wo immer du willst! Teste diesen
        Code, um zu sehen, wie er funktioniert, und ändere ihn dann, um dein eigenes
        tolles Design zu erstellen!
      courseE_artist_functions_challenge1_2018: Sobald du eine Funktion definiert
        hast, kannst du sie immer wieder aufrufen - wann und wo immer du willst! Teste
        diesen Code, um zu sehen, wie er funktioniert, und ändere ihn dann, um dein
        eigenes tolles Design zu erstellen!
      courseE_artist_functions_challenge1_2019: Sobald du eine Funktion definiert
        hast, kannst du sie immer wieder aufrufen - wann und wo immer du willst! Teste
        diesen Code, um zu sehen, wie er funktioniert, und ändere ihn dann, um dein
        eigenes tolles Design zu erstellen!
      courseE_artist_functions_challenge2: "Du kannst nicht nur zu einigen voreingestellten
        Stellen springen, wie z.B. den Ecken der Leinwand, sondern auch einen `springen
        zu` Befehl verwenden, um zu absolut jeder beliebigen Stelle zu gelangen! Teste
        diesen Code, um zu sehen, wie er funktioniert, und übernimm das Programm dann
        für dich selbst! \n\n<xml>\n  <block type=\"jump_to_xy\">\n    <title name=\"XPOS\">???</title>\n
        \   <title name=\"YPOS\">???</title>\n    </block></xml>"
      courseE_artist_functions_challenge2_2018: "Du kannst nicht nur zu einigen voreingestellten
        Stellen springen, wie z.B. den Ecken der Leinwand, sondern auch einen `springen
        zu` Befehl verwenden, um zu absolut jeder beliebigen Stelle zu gelangen! Teste
        diesen Code, um zu sehen, wie er funktioniert, und übernimm das Programm dann
        für dich selbst! \n\n<xml>\n  <block type=\"jump_to_xy\">\n    <title name=\"XPOS\">???</title>\n
        \   <title name=\"YPOS\">???</title>\n    </block></xml>"
      courseE_artist_functions_challenge2_2019: "Du kannst nicht nur zu einigen voreingestellten
        Stellen springen, wie z.B. den Ecken der Leinwand, sondern auch einen `springen
        zu` Befehl verwenden, um zu absolut jeder beliebigen Stelle zu gelangen! Teste
        diesen Code, um zu sehen, wie er funktioniert, und übernimm das Programm dann
        für dich selbst! \n\n<xml>\n  <block type=\"jump_to_xy\">\n    <title name=\"XPOS\">???</title>\n
        \   <title name=\"YPOS\">???</title>\n    </block></xml>"
      courseE_artist_functions_predict1: Hier ist ein Aufgabe, die eine Funktion verwendet,
        die wir bereits definiert haben.
      courseE_artist_functions_predict1_2018: Hier ist ein Aufgabe, die eine Funktion
        verwendet, die wir bereits definiert haben.
      courseE_artist_functions_predict1_2019: Hier ist ein Aufgabe, die eine Funktion
        verwendet, die wir bereits definiert haben.
      courseE_artist_functions_predict1_copy: Hier ist ein Aufgabe, die eine Funktion
        verwendet, die wir bereits definiert haben.
      courseE_artist_ramp8: "Großartig! Lass uns jetzt eine 'wiederholen\\`-Schleife
        mithilfe des Künstlers zeichnen! Die Bausteine für den Künstler sind ein wenig
        anders als in den anderen Aufgaben, aber die Idee ist die gleiche. \n\n* *
        *\n\n#### Jede Seite des Quadrats ist 200 Pixel lang und brauchst eine Drehung
        um 90 Grad, um alle Winkel zu zeichnen."
      courseE_artist_ramp8_2: "Großartig! Lass uns jetzt eine 'wiederholen\\`-Schleife
        mithilfe des Künstlers zeichnen! Die Bausteine für den Künstler sind ein wenig
        anders als in den anderen Aufgaben, aber die Idee ist die gleiche. \n\n* *
        *\n\n#### Jede Seite des Quadrats ist 200 Pixel lang und brauchst eine Drehung
        um 90 Grad, um alle Winkel zu zeichnen."
      courseE_artist_ramp9: |-
        Verwende, das was du gelernt hast, um dieses Dreieck zu zeichnen!

        * * *

        ###### Die Seiten sind jeweils 100 Pixel lang. Du brauchst für jede Ecke eine Drehung um 120 Grad.
      courseE_artist_ramp9_2: |-
        Verwende, das was du gelernt hast, um dieses Dreieck zu zeichnen!

        * * *

        ###### Die Seiten sind jeweils 100 Pixel lang. Du brauchst für jede Ecke eine Drehung um 120 Grad.
      courseE_bee_concept1: "_\"Unglaublich- all diese Blüten!\"_ \n\nSammele den
        gesamten Nektar von jeder Blüte."
      courseE_bee_concept1_2018: "_\"Unglaublich- all diese Blüten!\"_ \n\nSammele
        den gesamten Nektar von jeder Blüte."
      courseE_bee_concept2: "Hilf der Biene bei der Herstellung des ganzen Honigs.
        \n\nDu kannst nur bei einer Wabe Honig herstellen, aber du kannst jedes Feld
        überprüfen, ob dort eine Wabe vorhanden ist."
      courseE_bee_concept2_2018: "Hilf der Biene bei der Herstellung des ganzen Honigs.
        \n\nDu kannst nur bei einer Wabe Honig herstellen, aber du kannst jedes Feld
        überprüfen, ob dort eine Wabe vorhanden ist."
      courseE_bee_concept5: "Kannst du der Biene beim Sammeln des gesamten Nektars
        von den Blüten helfen? \n\nDu kannst nur Nektar von Blüten sammeln, aber du
        kannst jedes Feld überprüfen, ob dort eine Blüte vorhanden ist."
      courseE_bee_concept5_2018: "Kannst du der Biene beim Sammeln des gesamten Nektars
        von den Blüten helfen? \n\nDu kannst nur Nektar von Blüten sammeln, aber du
        kannst jedes Feld überprüfen, ob dort eine Blüte vorhanden ist."
      courseE_bee_functions10: "_\"Zeig mir den HONIG!\"_ \n\nLöse diese Aufgabe,
        indem du eine Funktion erstellen, bei der die Biene:\n\n-   sich in Richtung
        der Abzweigung vom Pfad dreht\n-   sich vorwärts zu bewegen \n-   den ganzen
        Honig herstellt \n-   zum Hauptpfad zurückkehrt \n-   in die ursprüngliche
        Richtung umkehrt"
      courseE_bee_functions2: |-
        Funktionen sind Code-Bausteine, die eine Aufgabe ausführen.

        Verwende die Funktion `2 Einheiten Nektar holen`, um den Nektar von jeder Blüte zu sammeln.
      courseE_bee_functions3: Funktionen sind Programm-Bausteine, die eine Aufgabe
        ausführen. Verwende die „hohle 5“- Funktion, um gleichzeitig 5 mal Nektar
        zu holen. Stelle sicher, dass eine Schleife verwendet wird, die eine optimale
        Blockzählung ermöglicht.
      courseE_bee_functions4: Die Funktion `bewegen und Nektar holen` dreht die Biene
        um, sammelt den Nektar und bringt die Biene wieder an ihren Ausgangspunkt
        zurück. Verwende die Funktion `bewegen und Nektar holen`, um den gesamten
        Nektar einzusammeln.
      courseE_bee_functions8: "**Aufgabe:** Diese Blüten können jedes Mal, wenn du
        die Aufgabe ausführst, eine andere Menge Nektar enthalten. \n\nDefiniere eine
        Funktion, die von jeder Blüte den gesamten Nektar sammelt."
      courseE_bee_functions_challenge1: Diese Aufgabe musst du selbständig lösen.
        Das könnte schwieriger sein, als es aussieht!
      courseE_farmer_functions1: |-
        _"Sind wir uns schon einmal begegnet? Ich bin die Erntearbeiterin!"_

        Hilf der Erntearbeiterin, zum Kürbis zu kommen und ihn zu pflücken.
      courseE_farmer_functions10a1_2018: "**Aufgabe:** Nutze alles, was du bisher
        gelernt hast, um dieses Rätsel mit höchstens 19 Blöcken zu lösen!"
      courseE_farmer_functions10a1_2019: "**Aufgabe:** Nutze alles, was du bisher
        gelernt hast, um dieses Rätsel mit höchstens 19 Blöcken zu lösen!"
      courseE_farmer_functions10b: Verwende deine neue Funktion zweimal, um dieses
        Rätsel zu lösen.
      courseE_farmer_functions11_predict: Finde heraus, welche Funktion verwenden
        und welche du löschen musst, dann löse diese Aufgabe!
      courseE_farmer_functions11_predict_2018: Finde heraus, welche Funktion verwenden
        und welche du löschen musst, dann löse diese Aufgabe!
      courseE_farmer_functions11_predict_2019: Finde heraus, welche Funktion verwenden
        und welche du löschen musst, dann löse diese Aufgabe!
      courseE_farmer_functions13_2018: 'Löse dieses Rätsel mit höchstens 23 Blöcken.
        \* \* \* \* ###### Aus jedem Sprössling wächst entweder _ein_ Maiskolben oder
        nichts. Um die beste Lösung zu finden, musst du die Funktionen direkt bearbeiten.'
      courseE_farmer_functions13_2019: 'Löse dieses Rätsel mit höchstens 23 Blöcken.
        \* \* \* \* ###### Aus jedem Sprössling wächst entweder _ein_ Maiskolben oder
        nichts. Um die beste Lösung zu finden, musst du die Funktionen direkt bearbeiten.'
      courseE_farmer_functions1_2018: |-
        _"Sind wir uns schon einmal begegnet? Ich bin die Erntearbeiterin!"_

        Hilf der Erntearbeiterin, zum Kürbis zu kommen und ihn zu pflücken.
      courseE_farmer_functions1_2019: |-
        _"Sind wir uns schon einmal begegnet? Ich bin die Erntearbeiterin!"_

        Hilf der Erntearbeiterin, zum Kürbis zu kommen und ihn zu pflücken.
      courseE_farmer_functions1a: "_“Oooh überall wachsen Pflanzen!“_\n\nNun hilf
        dem Erntemaschine, den gesamten Mais auf dem Weg zum Kürbis am Ende des Weges
        einzusammeln. \n\n* * *\n\n#### Hinweis: Jedes Feld auf dem Weg zum Kürbis
        enthält entweder _einen_ Maiskolben oder nichts. Du musst mit einer \"Wenn\"-Bedingung
        prüfen, ob im Feld Mais vorhanden ist, bevor du versuchst, ihn einzusammeln."
      courseE_farmer_functions1a_2018: "\"Nun helfe dem Mähdrescher, den gesamten
        Mais auf dem Weg zum Kürbis am Ende des Weges zu pflücken. \\* \\* \\* \\*
        ####### Hinweis: Jedes Quadrat auf dem Weg zum Kürbis enthält entweder **1**
        Einheit Mais oder überhaupt nichts. Benutze die mitgelieferte Funktion `Mais
        suchen`, um sicherzustellen, dass dass du alles mitnimmst."
      courseE_farmer_functions1a_2019: "\"Nun helfe dem Mähdrescher, den gesamten
        Mais auf dem Weg zum Kürbis am Ende des Weges zu pflücken. \\* \\* \\* \\*
        ####### Hinweis: Jedes Quadrat auf dem Weg zum Kürbis enthält entweder **1**
        Einheit Mais oder überhaupt nichts. Benutze die mitgelieferte Funktion `Mais
        suchen`, um sicherzustellen, dass dass du alles mitnimmst."
      courseE_farmer_functions2b: |-
        Hilf der Erntearbeiterin bei der Ernte von Mais und Kürbissen.

        * * *

        ##### Aus jedem Trieb wird entweder _ein_ Mais oder nichts wachsen.
      courseE_farmer_functions2b_2018: |-
        Verwende die Funktion, um der Erntearbeiterin bei der Ernte von Mais und Kürbissen zu helfen.

        * * *

        ##### Aus jedem Trieb wird entweder _ein_ Mais oder nichts wachsen.
      courseE_farmer_functions2b_2019: |-
        Verwende die Funktion, um der Erntearbeiterin bei der Ernte von Mais und Kürbissen zu helfen.

        * * *

        ##### Aus jedem Trieb wird entweder _ein_ Mais oder nichts wachsen.
      courseE_farmer_functions2ba: "\\_\"Bei mir funktioniert einfach alles!\"\n\n\\_
        Hast du bemerkt, dass in der letzten Aufgabe Code wiederholt wurde? Man kann
        nicht alles in eine Schleife packen, aber wir **können** Funktionen verwenden.
        \n\nFür diese Aufgabe haben wir den Code, der sich wiederholt, in eine Funktion
        mit der Bezeichnung `Mais und Kürbis` verschoben. Jetzt musst du nur noch
        den kleinen \\*\\* Baustein zum Aufrufen von Funktionen\\*\\* dort in den
        Code einfügen, wo du ihn brauchst. \n\n* * *\n\n###### Aus jedem Sprössling
        wächst entweder _ein_ Maiskolben oder nichts."
      courseE_farmer_functions2ba_2018: '_"Ich fühle mich so funktional!"_ Jetzt gibt
        es mehrere Kürbisse in jedem Patch! Schaue dir die nachstehenden Funktionsdefinitionen
        genau an, um zu verstehen, wie jede von ihnen verwendet wird. \* \* \* \*
        ###### Aus jedem Sprössling wächst entweder _ein_ Maiskolben oder nichts.'
      courseE_farmer_functions2ba_2019: '_"Ich fühle mich so funktional!"_ Jetzt gibt
        es mehrere Kürbisse in jedem Patch! Schaue dir die nachstehenden Funktionsdefinitionen
        genau an, um zu verstehen, wie jede von ihnen verwendet wird. \* \* \* \*
        ###### Aus jedem Sprössling wächst entweder _ein_ Maiskolben oder nichts.'
      courseE_farmer_functions3c: "Fülle nun die Funktion selbst aus, indem du die
        Bausteine aus dem Code ziehst und sie in die **Definition der Funktion** einfügst.
        \n\nDenk daran, die kleinen **Funktionsaufruf**-Bausteine hinzuzufügen, um
        die Funktion in deinem Programm zu verwenden, wenn du fertig bist."
      courseE_farmer_functions3c1_2018: Habe bemerkt, dass dieses letzten Rätsel eine
        Menge von Code-Wiederholungen enthielt? Wir können Platz sparen, indem wir
        diesen Code `am Weg sammeln` nennen und eine neue Funktion verwenden, um die
        anderen Funktionen aufzurufen! Verwende `am Weg sammeln`, um dieses Rätsel
        noch einmal mit weniger Blöcken zu lösen.
      courseE_farmer_functions3c1_2019: Habe bemerkt, dass dieses letzten Rätsel eine
        Menge von Code-Wiederholungen enthielt? Wir können Platz sparen, indem wir
        diesen Code `am Weg sammeln` nennen und eine neue Funktion verwenden, um die
        anderen Funktionen aufzurufen! Verwende `am Weg sammeln`, um dieses Rätsel
        noch einmal mit weniger Blöcken zu lösen.
      courseE_farmer_functions3c_2018: Toll! Teste deine Funktionen auf einem längeren
        Weg.
      courseE_farmer_functions3c_2019: Toll! Teste deine Funktionen auf einem längeren
        Weg.
      courseE_farmer_functions4b: Verwende deine neue Funktion, um dieses Rätsel zu
        lösen.
      courseE_farmer_functions5c: Deine Funktion wird hier nützlich sein.
      courseE_farmer_functions6c: "_“Lass uns jetzt alles Erntegut einsammeln!“_\n\nJetzt
        können die Sprösslinge entweder Mais **oder** Salat sein. Was musst du diesem
        Programm hinzufügen, um zu jeden Sprössling zu prüfen, bevor du ihn einsammelst?
        \n\n* * *\n\n#### Hinweis: Jeder Sprössling wird entweder zu **einem** Maiskolben
        oder **einem** Salatkopf."
      courseE_farmer_functions7a1_2018: |-
        _"Die Funktion **Salat** macht mehr mit weniger Arbeit!"_

        Erstelle eine Funktion, die der Erntearbeiterin einen quadratischen Weg entlang schickt, um einen einzelnen Salatkopf aus der Mitte jeder Reihe zu pflücken.
      courseE_farmer_functions7a1_2019: |-
        _"Die Funktion **Salat** macht mehr mit weniger Arbeit!"_

        Erstelle eine Funktion, die der Erntearbeiterin einen quadratischen Weg entlang schickt, um einen einzelnen Salatkopf aus der Mitte jeder Reihe zu pflücken.
      courseE_farmer_functions7b: |-
        _“Diese Ernte ist verwIRREnd!“_

        Hilf der Erntemaschine, ihren Weg auf diesem verwirrenden Weg und zum Kürbis zu finden, indem sie beim Mais **links** und beim Salat **rechts** abbiegt.

         _(Denk daran, auf dem Weg alles Erntegut einzusammeln!)_
      courseE_farmer_functions8a1_2018: Versuche, deine Funktion noch einmal zu schreiben.
        Ist sie noch nützlich? Wie kannst du sie verwenden, um dieses Rätsel lösen?
      courseE_farmer_functions8a1_2019: Versuche, deine Funktion noch einmal zu schreiben.
        Ist sie noch nützlich? Wie kannst du sie verwenden, um dieses Rätsel lösen?
      courseE_farmer_functions8b: |-
        **Aufgabe:** In diesem Labyrinth sind nicht alle Ecken markiert, d.h. du musst deinen Navigationscode mehr als einmal verwenden, um ans Ziel zu gelangen.

        Weißt du, was du tun musst?
      courseE_farmer_functions9a1_2018: "\\*\\*Dieses Rätsel ist IRR-sinnig. \\* Ist
        deine Funktion für dieses Rätsel noch nützlich?"
      courseE_farmer_functions9a1_2019: "\\*\\*Dieses Rätsel ist IRR-sinnig. \\* Ist
        deine Funktion für dieses Rätsel noch nützlich?"
      courseE_farmer_functions9b: Schau dir diese Aufgabe genau an. Erkennst du das
        Muster?
      courseE_farmer_ramp11a: "Oh nein! Dieser Haufen ist so groß, dass man kaum erraten
        kann, wie viel Erde sich darin befindet. \n\n* * *\n\nWir haben einen neuen
        Baustein in der Werkzeugkiste, der `solange ein Haufen vorhanden ist` heißt.
        Verwende ihn, um Erde zu entfernen, solange es hier noch etwas zu schaufeln
        gibt!"
      courseE_farmer_ramp11a_2018: "Oh nein! Dieser Haufen ist so groß, dass man kaum
        erraten kann, wie viel Erde sich darin befindet. \n\n* * *\n\nWir haben einen
        neuen Baustein in der Werkzeugkiste, der `solange ein Haufen vorhanden ist`
        heißt. Verwende ihn, um Erde zu entfernen, solange es hier noch etwas zu schaufeln
        gibt!"
      courseE_farmer_ramp11a_2019: "Oh nein! Dieser Haufen ist so groß, dass man kaum
        erraten kann, wie viel Erde sich darin befindet. \n\n* * *\n\nWir haben einen
        neuen Baustein in der Werkzeugkiste, der `solange ein Haufen vorhanden ist`
        heißt. Verwende ihn, um Erde zu entfernen, solange es hier noch etwas zu schaufeln
        gibt!"
      courseE_farmer_ramp11b: Lass es uns noch einmal versuchen, aber mit weiteren
        Haufen!
      courseE_farmer_ramp11b_2018: Lass es uns noch einmal versuchen, aber mit weiteren
        Haufen!
      courseE_farmer_ramp11b_2019: Lass es uns noch einmal versuchen, aber mit weiteren
        Haufen!
      courseE_farmer_ramp12_forswap: Pflücke den ganzen Salat.
      courseE_farmer_ramp12_forswap_2018: Ernte den ganzen Salat.
      courseE_farmer_ramp12_forswap_2019: Ernte den ganzen Salat.
      courseE_farmer_ramp12b: Jetzt muss die Erntearbeiterin den ganzen Salat ernten.  Benutze
        `solange es Salat gibt` in einer `wiederhole`-Schleife, um alles zu ernten!
      courseE_farmer_ramp12b_2018: Jetzt muss die Erntearbeiterin den ganzen Salat
        ernten.  Benutze `solange es Salat gibt` in einer `wiederhole`-Schleife, um
        alles zu ernten!
      courseE_farmer_ramp12b_2019: Jetzt muss die Erntearbeiterin den ganzen Salat
        ernten.  Benutze `solange es Salat gibt` in einer `wiederhole`-Schleife, um
        alles zu ernten!
      courseE_farmer_ramp12c: "Der Salat befindet sich jetzt nur noch am Ende des
        Weges.\\\\ \nFolge dem Weg, **bis** du einen Salatkopf erreichst, dann sammele
        ihn ein, **während** noch Salatköpfe vorhanden sind."
      courseE_farmer_ramp12c_2018: "Der Salat befindet sich jetzt nur noch am Ende
        des Weges.\\\\ \nFolge dem Weg, **bis** du einen Salatkopf erreichst, dann
        sammele ihn ein, **während** noch Salatköpfe vorhanden sind."
      courseE_farmer_ramp12c_2019: "Der Salat befindet sich jetzt nur noch am Ende
        des Weges.\\\\ \nFolge dem Weg, **bis** du einen Salatkopf erreichst, dann
        sammele ihn ein, **während** noch Salatköpfe vorhanden sind."
      courseE_farmer_ramp12d: |-
        Der Salat ist über den ganzen Garten verstreut.\
        Folge dem Weg, **bis** du einen Salatkopf erreichst, dann sammele ihn ein, **während** noch Salatköpfe vorhanden sind.
      courseE_farmer_ramp12d_2018: |-
        Der Salat ist über den ganzen Garten verstreut.\
        Folge dem Weg, **bis** du einen Salatkopf erreichst, dann sammele ihn ein, **während** noch Salatköpfe vorhanden sind.
      courseE_farmer_ramp12d_2019: |-
        Der Salat ist über den ganzen Garten verstreut.\
        Folge dem Weg, **bis** du einen Salatkopf erreichst, dann sammele ihn ein, **während** noch Salatköpfe vorhanden sind.
      courseE_farmer_ramp12e: |-
        Der Salat ist über den ganzen Garten verstreut.\
        Folge dem Weg, **bis** du einen Salatkopf erreichst, dann sammele ihn ein, **während** noch Salatköpfe vorhanden sind.
      courseE_farmer_ramp12e_2018: |-
        Der Salat ist über den ganzen Garten verstreut.\
        Folge dem Weg, **bis** du einen Salatkopf erreichst, dann sammele ihn ein, **während** noch Salatköpfe vorhanden sind.
      courseE_farmer_ramp12e_2019: |-
        Der Salat ist über den ganzen Garten verstreut.\
        Folge dem Weg, **bis** du einen Salatkopf erreichst, dann sammele ihn ein, **während** noch Salatköpfe vorhanden sind.
      courseE_farmer_ramp12f: "**Herausforderung**: der einzige Weg, um die gesamte
        Ernte einzusammeln, ist sich vorwärts bewegen, bis du den Salat erreichst.
        Dann musst du links abdrehen **falls** es einem Pfad nach links gibt. Ansonsten
        musst du rechts drehen. "
      courseE_farmer_ramp12f_2018: "**Herausforderung**: der einzige Weg, um die gesamte
        Ernte einzusammeln, ist sich vorwärts bewegen, bis du den Salat erreichst.
        Dann musst du links abdrehen **falls** es einem Pfad nach links gibt. Ansonsten
        musst du rechts drehen. "
      courseE_farmer_ramp12f_2019: "**Herausforderung**: der einzige Weg, um die gesamte
        Ernte einzusammeln, ist sich vorwärts bewegen, bis du den Salat erreichst.
        Dann musst du links abdrehen **falls** es einem Pfad nach links gibt. Ansonsten
        musst du rechts drehen. "
      courseE_farmer_ramp12g: Bewege dich vorwärts, bis du den Salat erreichst, dann
        drehe dich nach links, **wenn** es einen Weg nach links gibt. Sonst drehe
        dich nach rechts.
      courseE_farmer_ramp12g_2018: Bewege dich vorwärts, bis du den Salat erreichst,
        dann drehe dich nach links, **wenn** es einen Weg nach links gibt. Sonst drehe
        dich nach rechts.
      courseE_farmer_ramp12g_2019: Bewege dich vorwärts, bis du den Salat erreichst,
        dann drehe dich nach links, **wenn** es einen Weg nach links gibt. Sonst drehe
        dich nach rechts.
      courseE_playLab_challenge1: "_Die **Eichhörnchen** sind entsetzt, dass ein **Dinosaurier**
        in die Stadt gekommen ist! Kann der tapfere **Ritter** sie alle beruhigen?_
        \n\nRegeln: \n\n1.  _Wenn du die Eichhörnchen berührst, erzielst du Punkte._\n2.
        \ _Wenn du den Dinosaurier berührst, verlierst du viele Punkte._ \n\nHier
        ist eine andere Art von Spiel, das bereits für dich begonnen wurde! Spiele
        es, um zu sehen, wie es funktioniert. \n\nEs sollte etwas passieren, wenn
        du genug oder zu wenig Punkte machst. Füge ein wenig Code zu den Funktionen
        `Spiel gewinnen` und `Spiel verlieren` hinzu, damit das Spiel so funktioniert,
        wie es sollte. Klicke auf die Hinweise, wenn du Ideen brauchst!"
      courseE_playLab_scaffold1: "Es ist toll, wie viel du schon gelernt haben! Lass
        uns Schritt für Schritt ein Spiel programmieren. \n\nWähle mit Hilfe neuer
        Bausteine in deiner Werkzeugkiste einen neuen Hintergrund aus und wähle dann
        eine Figur für dein Spiel aus."
      courseE_playLab_scaffold2: |-
        Verwende Bausteine wie Ereignisroutinen und Aktionen, damit sich deine Hauptfigur mit den Pfeilen auf deiner Tastatur bewegt.

        Bringe die Figur zu den Zielen, um diese Aufgabe zu lösen.
      courseE_playLab_scaffold3: "Lass uns deinem Spiel noch ein paar Figuren hinzufügen!
        \n\nVerwende den Baustein `Figur einfügen`, um weitere Figuren hinzuzufügen,
        und bewege sie dann zum Ziel, um diese Aufgabe abzuschließen."
      courseE_playLab_scaffold4: "Mehrere Figuren zu haben und sie dann in Bewegung
        zu setzen ist ein großartiger Start für ein Spiel, aber wir müssen mehr tun,
        damit es wie ein richtiges Spiel ist. Lass uns noch Punkte hinzufügen! \n\nVerwende
        Ereignis-Bausteine wie `wenn die Figur berührt`, um die Punktzahl zu ändern.
        Erziele 10 Punkte, um diese Aufgabe abzuschließen."
      courseE_playLab_scaffold5: Gute Arbeit! Du haben alle grundlegenden Bestandteile
        eines Spiels, das läuft. Jetzt solltest du ein wenig daran arbeiten, dass
        das Spiel so funktioniert, wie du es dir vorstellst. Lege eine Regel fest,
        wie man dein Spiel gewinnen oder verlieren kann, und spiele dann, bis du eine
        dieser Bedingungen erfüllst.
      courseE_playLab_scaffold6: Du hast es geschafft! Jetzt kannst du dein Spiel
        spielen oder es mit deinen Freunden und Klassenkameraden teilen!
      courseF_artist_for1: |-
        **Freie Gestaltung:** Experimentiere mit der "Für"-Schleife und spiele mit der "Zähler"-Variablen.

        Ziehe ein paar Blöcke heraus und achte darauf, was passiert.
      courseF_artist_for10: "**Freies Spiel:** Versuche, die Variable `Zähler` mit
        anderen Zeichenelementen zu verwenden, um magische Bilder wie dieses zu kreieren.
        \n\n![](https://images.code.org/5a4eec10a53aa78ad6b12fb5e48680f8-image-1497991505852.png)"
      courseF_artist_for10_2018: "**Freies Spiel:** Versuche, die Variable `Zähler`
        mit anderen Zeichenelementen zu verwenden, um magische Bilder wie dieses zu
        kreieren. \n\n![](https://images.code.org/5a4eec10a53aa78ad6b12fb5e48680f8-image-1497991505852.png)"
      courseF_artist_for10_2019: "**Freies Spiel:** Versuche, die Variable `Zähler`
        mit anderen Zeichenelementen zu verwenden, um magische Bilder wie dieses zu
        kreieren. \n\n![](https://images.code.org/5a4eec10a53aa78ad6b12fb5e48680f8-image-1497991505852.png)"
      courseF_artist_for1_2018: |-
        **Freie Gestaltung:** Experimentiere mit der "Für"-Schleife und spiele mit der "Zähler"-Variablen.

        Ziehe ein paar Blöcke heraus und achte darauf, was passiert.
      courseF_artist_for1_2019: |-
        **Freie Gestaltung:** Experimentiere mit der "Für"-Schleife und spiele mit der "Zähler"-Variablen.

        Ziehe ein paar Blöcke heraus und achte darauf, was passiert.
      courseF_artist_for2: Verwende eine `Wiederholen`-Schleif" innerhalb einer "Für"-Schleife,
        um diesen Stapel von Dreiecken zu erzeugen, die von 50 Pixel bis 100 Pixel
        gehen.
      courseF_artist_for2_2018: Verwende eine `Wiederholen`-Schleif" innerhalb einer
        "Für"-Schleife, um diesen Stapel von Dreiecken zu erzeugen, die von 50 Pixel
        bis 100 Pixel gehen.
      courseF_artist_for2_2019: Verwende eine `Wiederholen`-Schleif" innerhalb einer
        "Für"-Schleife, um diesen Stapel von Dreiecken zu erzeugen, die von 50 Pixel
        bis 100 Pixel gehen.
      courseF_artist_for3: Erstelle diese Dreiecke, die von 20-Pixel-Seiten bis zu
        200-Pixel-Seiten gehen, wobei jedes Dreieck 20 Pixel größer ist als das letzte.
      courseF_artist_for3_2018: Erstelle diese Dreiecke, die von 20-Pixel-Seiten bis
        zu 200-Pixel-Seiten gehen, wobei jedes Dreieck 20 Pixel größer ist als das
        letzte.
      courseF_artist_for3_2019: Erstelle diese Dreiecke, die von 20-Pixel-Seiten bis
        zu 200-Pixel-Seiten gehen, wobei jedes Dreieck 20 Pixel größer ist als das
        letzte.
      courseF_artist_for5: 'Nur eine kleine Änderung des Codes des letzten Bildes
        kann diese Zeichnung erstellen. Kannst herausfinden, was diese Änderung ist?
        \* \* \* Hinweis: du musst etwas entfernen!'
      courseF_artist_for5_2018: 'Nur eine kleine Änderung des Codes des letzten Bildes
        kann diese Zeichnung erstellen. Kannst herausfinden, was diese Änderung ist?
        \* \* \* Hinweis: du musst etwas entfernen!'
      courseF_artist_for5_2019: 'Nur eine kleine Änderung des Codes des letzten Bildes
        kann diese Zeichnung erstellen. Kannst herausfinden, was diese Änderung ist?
        \* \* \* Hinweis: du musst etwas entfernen!'
      courseF_artist_for6: "Wenn man das Ganze etwas mehr oder weniger dreht, als
        man es normalerweise für eine Form tun würde, entsteht ein eleganter Effekt.
        \n\nErstelle deinen Code von der letzten Ebene aus noch einmal, drehe ihn
        aber um 89 Grad, um diese verdrehte quadratische Spirale zu erzeugen."
      courseF_artist_for6_2018: "Wenn man das Ganze etwas mehr oder weniger dreht,
        als man es normalerweise für eine Form tun würde, entsteht ein eleganter Effekt.
        \n\nErstelle deinen Code von der letzten Ebene aus noch einmal, drehe ihn
        aber um 89 Grad, um diese verdrehte quadratische Spirale zu erzeugen."
      courseF_artist_for6_2019: "Wenn man das Ganze etwas mehr oder weniger dreht,
        als man es normalerweise für eine Form tun würde, entsteht ein eleganter Effekt.
        \n\nErstelle deinen Code von der letzten Ebene aus noch einmal, drehe ihn
        aber um 89 Grad, um diese verdrehte quadratische Spirale zu erzeugen."
      courseF_artist_for7: Nimm drei kleine Änderungen am Code der letzten Ebene vor,
        um das richtige Ergebnis zu erhalten!
      courseF_artist_for7_2018: Nimm drei kleine Änderungen am Code der letzten Ebene
        vor, um das richtige Ergebnis zu erhalten!
      courseF_artist_for7_2019: Nimm drei kleine Änderungen am Code der letzten Ebene
        vor, um das richtige Ergebnis zu erhalten!
      courseF_artist_for9: |-
        **Anregung:** Verwende den Zähler im `Alpha-bestimmen`-Block, um so etwas wie dieses verblasste Zentrum zu erhalten.\
        (Dieses Sechseckmuster wurde mit einer 60-Grad-Drehung geschaffen.)
      courseF_artist_for9_2018: |-
        **Anregung:** Verwende den Zähler im `Alpha-bestimmen`-Block, um so etwas wie dieses verblasste Zentrum zu erhalten.\
        (Dieses Sechseckmuster wurde mit einer 60-Grad-Drehung geschaffen.)
      courseF_artist_for9_2019: |-
        **Anregung:** Verwende den Zähler im `Alpha-bestimmen`-Block, um so etwas wie dieses verblasste Zentrum zu erhalten.\
        (Dieses Sechseckmuster wurde mit einer 60-Grad-Drehung geschaffen.)
      courseF_artist_for_challenge1: |-
        Schaffst du es, diese Zeichnung nachzubilden?

         <img src="https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png" width="350px"/>
      courseF_artist_for_challenge1_2018: |-
        Schaffst du es, diese Zeichnung nachzubilden?

         <img src="https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png" width="350px"/>
      courseF_artist_for_challenge1_2019: |-
        Schaffst du es, diese Zeichnung nachzubilden?

         <img src="https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png" width="350px"/>
      courseF_artist_for_challenge2: "Schaffst du es, diese Zeichnung mit einer einzigen
        Schleife nachzubilden? \n\n<img src=\"https://images.code.org/b0d15d06465d645c5ca533e5da6387b3-image-1446075597132.36.04.png\"
        width=\"350px\"/>"
      courseF_artist_for_challenge2_2018: "Schaffst du es, diese Zeichnung mit einer
        einzigen Schleife nachzubilden? \n\n<img src=\"https://images.code.org/b0d15d06465d645c5ca533e5da6387b3-image-1446075597132.36.04.png\"
        width=\"350px\"/>"
      courseF_artist_for_challenge2_2019: "Schaffst du es, diese Zeichnung mit einer
        einzigen Schleife nachzubilden? \n\n<img src=\"https://images.code.org/b0d15d06465d645c5ca533e5da6387b3-image-1446075597132.36.04.png\"
        width=\"350px\"/>"
      courseF_artist_fwp1: Heute werden wir weiterhin den leistungsstarken Funktionseditor
        verwenden. Schau, ob du dich daran erinnerst, wie man die Funktion `Zeichnen
        eines Quadrats` bearbeitet, um Fehler zu finden.
      courseF_artist_fwp2: |-
        Editiere die Funktion, um einen Parameter `Länge` zu akzeptieren.

        Die Seiten jedes Quadrats sollen 25 Pixel größer sein als das vorherige. Das erste Quadrat hat eine Seitenlänge von 25 Pixeln.
      courseF_artist_fwp2_predict1: |-
        Editiere die Funktion, um einen Parameter `Länge` zu akzeptieren.

        Die Seiten jedes Quadrats sollen 25 Pixel größer sein als das vorherige. Das erste Quadrat hat eine Seitenlänge von 25 Pixeln. Ersetze die '???' durch die richtigen Werte, um das Bild zu zeichnen.
      courseF_artist_fwp3: "Versuche nun, die Funktion von Grund auf neu zu erstellen!\n\nErstelle
        eine Funktion mit dem Namen `Zeichne ein Quadrat` und verwende sie, um diese
        vier Kästchen zu umranden.\\\nAchte darauf, dass du einen Parameter für `Länge`
        hinzufügst! \n\n* * *\n\nVon oben rechts beginnend sind die Kästchen 50, 100,
        150 und 200 breit."
      courseF_artist_fwp4: "Gut gemacht! Bearbeite jetzt diese Funktion, um einen
        Parameter für die Anzahl der Seiten in deinem Vieleck hinzuzufügen. \n\nDie
        Seiten aller Formen sind 100 Pixel lang."
      courseF_artist_fwp5: "Verwende die Funktion aus dem letzten Rätsel, um diese
        Reihe von Formen zu zeichnen. \n\nDas Dreieck hat 21-Pixel-Seiten, und die
        Seiten in jeder folgenden Form sind 7 Pixel länger als die letzte.\\\\ \nVerwende
        den `Multiplikations`-Block, um dies alles mit nur einem Aufruf der Funktion
        zu bewirken. \n\n-   -   -   Der `Multiplikations-`Block sieht wie so aus
        <xml><block type=\"math_arithmetic\" inline=\"true\">\n                  <title
        name=\"OP\">MULTIPLY</title>\n                </block></xml>"
      courseF_artist_fwp6: "**Aufgabe:** Bearbeite die Parameter `eine Spiralkante
        zeichnen`, um die Parameter `Länge` und `Seiten` zu verwenden, und erstelle
        dann diese Formen neu.\n\n-   Das Quadrat geht von 3 Pixel auf 90 Pixel. \n-
        \  Das Sechseck geht von 3 Pixel auf 100 Pixel. \n-   Das Dreieck geht von
        3 Pixel auf 95 Pixel."
      courseF_artist_fwp7: "Programmiere die Funktion \"Spiralkante ziehen“ so, dass
        auch eine Mindestlänge für den Mittelpunkt der Spirale gefragt wird.\n\n-
        \  Die kürzeste Seite in der Mitte dieses Quadrats ist 50 Pixel lang \n-   Die
        längste Seite an der Außenseite dieser Spirale ist 200 Pixel lang"
      courseF_artist_fwp8: "Freie Gestaltung! Weißt du, wie du diese Zeichnung mit
        der Funktion, die du gerade programmiert hast, erstellen kannst?\n\n-   Die
        rote Spirale geht von 50 bis 200 Pixel \n-   Die blaue Spirale geht von 25
        bis 150 Pixel \n-   Die grüne Spirale geht von 100 bis 350 Pixel"
      courseF_artist_fwp9: "**Freie Gestaltung:** Unten findest du Funktionen, die
        du geschrieben hast, und weitere, mit den spielen kannst. Variiere die Stiftbreite,
        um zu sehen, wie unterschiedlich deine Zeichnungen aussehen können! Du findest
        Hinweise in den Vorschlägen!"
      courseF_artist_fwp_challenge1: Versuche, dieses Programm auszuführen. Verändere
        es, um zu sehen, was passiert. Kannst herausfinden, wie es funktioniert? Du
        kannst es auch löschen und durch etwas völlig anderes ersetzen.
      courseF_artist_fwp_challenge2: "Wow! Verwende das, was du im vorherigen Level
        gelernt hast, um ein Bild wie dieses zu zeichnen.\n\n_Hinweis: Verwende Parameter,
        um deinen Code einfacher zu gestalten._ \n\n<br/> \n<img src=\"https://images.code.org/d3d6a51fafdcc0a09a5c6b0e0f3c2b92-image-1446239805818.08.59.png\"
        width=\"300px\"/> \n<br/>"
      courseF_artist_variables10: "Hier ist dein Code aus dem letzten Rätsel. Versuche,
        die Variable auf andere Weise zu bearbeiten. \n\n-   Was passiert, wenn du
        mit einer `Länge` von weniger als 150 beginnst? \n-   Was passiert, wenn du
        deine Variable jedes Mal mit 1,25 multiplizierst? \n-   Was bewirkt dein Code,
        wenn du eine Drehung von 119 Grad verwendest?"
      courseF_artist_variables10_2018: "Hier ist dein Code aus dem letzten Rätsel.
        Versuche, die Variable auf andere Weise zu bearbeiten. \n\n-   Was passiert,
        wenn du mit einer `Länge` von weniger als 150 beginnst? \n-   Was passiert,
        wenn du deine Variable jedes Mal mit 1,25 multiplizierst? \n-   Was bewirkt
        dein Code, wenn du eine Drehung von 119 Grad verwendest?"
      courseF_artist_variables10_2019: "Hier ist dein Code aus dem letzten Rätsel.
        Versuche, die Variable auf andere Weise zu bearbeiten. \n\n-   Was passiert,
        wenn du mit einer `Länge` von weniger als 150 beginnst? \n-   Was passiert,
        wenn du deine Variable jedes Mal mit 1,25 multiplizierst? \n-   Was bewirkt
        dein Code, wenn du eine Drehung von 119 Grad verwendest?"
      courseF_artist_variables2: "Verwende nun eine weitere Schleife, um drei dieser
        Dreiecke direkt nebeneinander zu zeichnen. \n\nDu kannst den Code aus deinem
        letzten Rätsel darin verschachteln."
      courseF_artist_variables2_2018: "Verwende nun eine weitere Schleife, um drei
        dieser Dreiecke direkt nebeneinander zu zeichnen. \n\nDu kannst den Code aus
        deinem letzten Rätsel darin verschachteln."
      courseF_artist_variables2_2019: "Verwende nun eine weitere Schleife, um drei
        dieser Dreiecke direkt nebeneinander zu zeichnen. \n\nDu kannst den Code aus
        deinem letzten Rätsel darin verschachteln."
      courseF_artist_variables3: "Bevor es schwierig wird, kannst du die Länge von
        50 in eine Variable verschieben, damit wir sie bei den nächsten Rätseln verwenden
        können? \n\n![expandable](https://images.code.org/73447d004093c6be8ab01a1358155f16-image-1498068386665.gif)"
      courseF_artist_variables3_2018: "Bevor es schwierig wird, kannst du die Länge
        von 50 in eine Variable verschieben, damit wir sie bei den nächsten Rätseln
        verwenden können? \n\n![expandable](https://images.code.org/73447d004093c6be8ab01a1358155f16-image-1498068386665.gif)"
      courseF_artist_variables3_2019: "Bevor es schwierig wird, kannst du die Länge
        von 50 in eine Variable verschieben, damit wir sie bei den nächsten Rätseln
        verwenden können? \n\n![expandable](https://images.code.org/73447d004093c6be8ab01a1358155f16-image-1498068386665.gif)"
      courseF_artist_variables4: Jetzt nutze die `length` Variable, damit der Künster
        vorwärts springt und runter `length` Pixel zwischen den Dreiecken.
      courseF_artist_variables4_2018: Jetzt nutze die `length` Variable, damit der
        Künster vorwärts springt und runter `length` Pixel zwischen den Dreiecken.
      courseF_artist_variables4_2019: Jetzt nutze die `length` Variable, damit der
        Künster vorwärts springt und runter `length` Pixel zwischen den Dreiecken.
      courseF_artist_variables6: "**ACHTUNG!** \n\nDie Dreiecke müssen 60 Pixel breit
        sein, mit 60 Pixel-Sprüngen. \n\nBist du nicht auch froh, dass du eine Variable
        verwendest?"
      courseF_artist_variables6_2018: "**ACHTUNG!** \n\nDie Dreiecke müssen 60 Pixel
        breit sein, mit 60 Pixel-Sprüngen. \n\nBist du nicht auch froh, dass du eine
        Variable verwendest?"
      courseF_artist_variables6_2019: "**ACHTUNG!** \n\nDie Dreiecke müssen 60 Pixel
        breit sein, mit 60 Pixel-Sprüngen. \n\nBist du nicht auch froh, dass du eine
        Variable verwendest?"
      courseF_artist_variables6a: Verwende das Gelernte, um dieses Muster zu erstellen,
        bei dem die Quadrate 80-Pixel-Seiten haben und der Künstler zwischen den einzelnen
        Quadraten 80 Pixel seitwärts und abwärts springt.
      courseF_artist_variables6a_2018: Verwende das Gelernte, um dieses Muster zu
        erstellen, bei dem die Quadrate 80-Pixel-Seiten haben und der Künstler zwischen
        den einzelnen Quadraten 80 Pixel seitwärts und abwärts springt.
      courseF_artist_variables6a_2019: Verwende das Gelernte, um dieses Muster zu
        erstellen, bei dem die Quadrate 80-Pixel-Seiten haben und der Künstler zwischen
        den einzelnen Quadraten 80 Pixel seitwärts und abwärts springt.
      courseF_artist_variables7: |-
        Beginnen wir diesen Abschnitt, indem wir ein Dreieck zeichnen, dessen Seiten 150 Pixel lang sind.

        Achte darauf, dass du Variable ‚Länge‘ und eine „Wiederholen“-Schleife verwendest.
      courseF_artist_variables7_2018: |-
        Beginnen wir diesen Abschnitt, indem wir ein Dreieck zeichnen, dessen Seiten 150 Pixel lang sind.

        Achte darauf, dass du Variable ‚Länge‘ und eine „Wiederholen“-Schleife verwendest.
      courseF_artist_variables7_2019: |-
        Beginnen wir diesen Abschnitt, indem wir ein Dreieck zeichnen, dessen Seiten 150 Pixel lang sind.

        Achte darauf, dass du Variable ‚Länge‘ und eine „Wiederholen“-Schleife verwendest.
      courseF_artist_variables8: |-
        Verwende den Dreieckscode aus dem letzten Rätsel noch einmal, aber verwende diesmal den Block `Länge bestimmen als`, um die Variable `Länge` am Ende jeder Schleifenwiederholung auf `Länge`+10 zurückzusetzen.

        [blockly block]
        [0] Die Länge der ersten Seite des Dreiecks beträgt 150 Pixel.
      courseF_artist_variables8_2018: |-
        Verwende den Dreieckscode aus dem letzten Rätsel noch einmal, aber verwende diesmal den Block `Länge bestimmen als`, um die Variable `Länge` am Ende jeder Schleifenwiederholung auf `Länge`+10 zurückzusetzen.

        [blockly block]
        [0] Die Länge der ersten Seite des Dreiecks beträgt 150 Pixel.
      courseF_artist_variables8_2019: |-
        Verwende den Dreieckscode aus dem letzten Rätsel noch einmal, aber verwende diesmal den Block `Länge bestimmen als`, um die Variable `Länge` am Ende jeder Schleifenwiederholung auf `Länge`+10 zurückzusetzen.

        [blockly block]
        [0] Die Länge der ersten Seite des Dreiecks beträgt 150 Pixel.
      courseF_artist_variables9: "Zeit für ein wenig Kunst! \n\nAchte darauf, was
        passiert, wenn du den Code aus dem letzten Rätsels **30** Mal statt nur 3
        Mal wiederholst! \n\nGestalte deine Linien nach deinen Wünschen in einer beliebigen
        Farbe oder einem beliebigen Muster, um das Ganze etwas interessanter zu machen."
      courseF_artist_variables9_2018: "Zeit für ein wenig Kunst! \n\nAchte darauf,
        was passiert, wenn du den Code aus dem letzten Rätsels **30** Mal statt nur
        3 Mal wiederholst! \n\nGestalte deine Linien nach deinen Wünschen in einer
        beliebigen Farbe oder einem beliebigen Muster, um das Ganze etwas interessanter
        zu machen."
      courseF_artist_variables9_2019: "Zeit für ein wenig Kunst! \n\nAchte darauf,
        was passiert, wenn du den Code aus dem letzten Rätsels **30** Mal statt nur
        3 Mal wiederholst! \n\nGestalte deine Linien nach deinen Wünschen in einer
        beliebigen Farbe oder einem beliebigen Muster, um das Ganze etwas interessanter
        zu machen."
      courseF_artist_variablesFP: |-
        **Freie Gestaltung:** Wende an, was du gelernt hast und mach deine eigene Zeichnung.

        Wie kannst du Variablen mit Quadraten, Fünfecken oder Sechsecken verwenden?
      courseF_artist_variablesFP_2018: |-
        **Freie Gestaltung:** Wende an, was du gelernt hast und mach deine eigene Zeichnung.

        Wie kannst du Variablen mit Quadraten, Fünfecken oder Sechsecken verwenden?
      courseF_artist_variablesFP_2019: |-
        **Freie Gestaltung:** Wende an, was du gelernt hast und mach deine eigene Zeichnung.

        Wie kannst du Variablen mit Quadraten, Fünfecken oder Sechsecken verwenden?
      courseF_artist_variables_challenge1: Achtung, Aufgabe! Kannst eine Variable
        `Länge` erstellen und sie bei der Erstellung dieses Musters verwenden?
      courseF_artist_variables_challenge1_2018: Achtung, Aufgabe! Kannst eine Variable
        `Länge` erstellen und sie bei der Erstellung dieses Musters verwenden?
      courseF_artist_variables_challenge1_2019: Achtung, Aufgabe! Kannst eine Variable
        `Länge` erstellen und sie bei der Erstellung dieses Musters verwenden?
      courseF_artist_variables_challenge2: "<img src=\"https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png\"
        width=\"250px\"/> \n\nDu hast jetzt alles gelernt, was du wissen musst, um
        ein solches Muster zu erstellen! Dieses Rätsel soll schwierig sein. Kannst
        sich daran arbeiten, bis du die Lösung gefunden hast?"
      courseF_artist_variables_challenge2_2018: "<img src=\"https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png\"
        width=\"250px\"/> \n\nDu hast jetzt alles gelernt, was du wissen musst, um
        ein solches Muster zu erstellen! Dieses Rätsel soll schwierig sein. Kannst
        sich daran arbeiten, bis du die Lösung gefunden hast?"
      courseF_artist_variables_challenge2_2019: "<img src=\"https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png\"
        width=\"250px\"/> \n\nDu hast jetzt alles gelernt, was du wissen musst, um
        ein solches Muster zu erstellen! Dieses Rätsel soll schwierig sein. Kannst
        sich daran arbeiten, bis du die Lösung gefunden hast?"
      courseF_bee_conditionals10: |-
        Bedingungen können nützlich sein, auch wenn man genau weiß, was sich an den einzelnen Stellen befindet!

        Sammele den gesamten Nektar und stelle den gesamten Honig her.
      courseF_bee_conditionals1_predict1: |-
        _"Diese Wolke versperrt mir die Sicht!"_

        Prüfe, ob sich unter der Wolke eine Blüte befindet. Wenn es dort eine Blüte gibt, sammele Nektar.
      courseF_bee_conditionals2: |-
        _"Es ist zu bewölkt, um Blüten zu sehen!"_

        Prüfe, ob sich unter jeder Wolke, ob sich darunter eine Blüte verbirgt. Wenn es dort eine Blüte gibt, sammele Nektar. Wenn sich unter der Wolke eine Blüte befindet, muss die Biene **einmal** Nektar holen.

        Achte daran: Nicht alle Wolken verbergen dieselben Dinge!
      courseF_bee_conditionals3: Du kannst nur Nektar von Blüten sammeln, aber du
        kannst an jeder beliebigen Stelle nachsehen, ob sich dort eine Blüte befindet.
        Wenn unter einer dieser Wolken eine Blüte ist, muss die Biene **einmal** Nektar
        sammeln.
      courseF_bee_conditionals4: |-
        In diesem Puzzle wissen wir, dass jede Blüte genau eine Einheit Nektar hat, aber die Blüten sind nicht gleichmäßig verteilt.

        Hol dir mit so wenigen Blöcken wie möglich den ganzen Nektar.
      courseF_bee_conditionals7_predict2: |-
        Manchmal bedeckt eine Wolke eine Blüte, manchmal bedeckt sie eine Wabe!

        Verwende den `if/else-Block`, um Nektar von Blüten zu sammeln und Honig in den Waben herzustellen.
      courseF_bee_conditionals8: "**Aufgabe:** Unter jeder dieser Wolken befindet
        sich entweder eine Blüte oder eine Wabe! \n\nSammele Nektar, wenn dort eine
        Blüte ist. Sonst stelle Honig her (weil sich dort eine Wabe befindet)."
      courseF_bee_for10: |-
        **Aufgabe:** Verwende das, was du über `für`-Schleifen gelernt hast, und versuche, dieses Problem zu lösen.

        Denk daran: Es kann sein, dass du Lösungen mehrmals durchlaufen musst, bevor alle Schritte richtig sind.
      courseF_bee_for10_2018: |-
        **Aufgabe:** Verwende das, was du über `für`-Schleifen gelernt hast, und versuche, dieses Problem zu lösen.

        Denk daran: Es kann sein, dass du Lösungen mehrmals durchlaufen musst, bevor alle Schritte richtig sind.
      courseF_bee_for10_2019: |-
        **Aufgabe:** Verwende das, was du über `für`-Schleifen gelernt hast, und versuche, dieses Problem zu lösen.

        Denk daran: Es kann sein, dass du Lösungen mehrmals durchlaufen musst, bevor alle Schritte richtig sind.
      courseF_bee_for11: "Wenn deine Schleife abwärts zählt, wird die Steigerung jedes
        Mal von deiner Zählervariablen **abgezogen**. \n\nWie groß sollte dein Steigerung
        sein, um 15, dann 12, dann 9, 6, 3 Nektareinheiten zu sammeln?"
      courseF_bee_for11_2018: "Wenn deine Schleife abwärts zählt, wird die Steigerung
        jedes Mal von deiner Zählervariablen **abgezogen**. \n\nWie groß sollte dein
        Steigerung sein, um 15, dann 12, dann 9, 6, 3 Nektareinheiten zu sammeln?"
      courseF_bee_for11_2019: "Wenn deine Schleife abwärts zählt, wird die Steigerung
        jedes Mal von deiner Zählervariablen **abgezogen**. \n\nWie groß sollte dein
        Steigerung sein, um 15, dann 12, dann 9, 6, 3 Nektareinheiten zu sammeln?"
      courseF_bee_for2: "Schreibe den Code, um der Biene beim Sammeln des gesamten
        Nektars zu helfen. \n\nFür diese Aufgabe wirst du viele Blöcke brauchen, aber
        wir werden im nächsten Rätsel einen einfacheren Weg kennenlernen."
      courseF_bee_for2_2018: "Schreibe den Code, um der Biene beim Sammeln des gesamten
        Nektars zu helfen. \n\nFür diese Aufgabe wirst du viele Blöcke brauchen, aber
        wir werden im nächsten Rätsel einen einfacheren Weg kennenlernen."
      courseF_bee_for2_2019: "Schreibe den Code, um der Biene beim Sammeln des gesamten
        Nektars zu helfen. \n\nFür diese Aufgabe wirst du viele Blöcke brauchen, aber
        wir werden im nächsten Rätsel einen einfacheren Weg kennenlernen."
      courseF_bee_for6: "Du kannst auch eine \"Für\"-Schleife zum Herunterzählen verwenden.
        \n\nVersuche, diesen Nektar zu sammeln, indem du um **1** von **5** in **1**-er-Schritten
        herunterzählst."
      courseF_bee_for6_2018: "Du kannst auch eine \"Für\"-Schleife zum Herunterzählen
        verwenden. \n\nVersuche, diesen Nektar zu sammeln, indem du um **1** von **5**
        in **1**-er-Schritten herunterzählst."
      courseF_bee_for6_2019: "Du kannst auch eine \"Für\"-Schleife zum Herunterzählen
        verwenden. \n\nVersuche, diesen Nektar zu sammeln, indem du um **1** von **5**
        in **1**-er-Schritten herunterzählst."
      courseF_bee_for7: |-
        Die letzte Zahl in deiner "Für"-Schleife wird als die **"Steigerung"** bezeichnet. Jedes Mal, wenn die Schleife ausgeführt wird, ändert sich die Zählervariable um den Wert dieser **Steigerung**.

        Versuche, diese Blüten mit einer **Steigerung** um 2 zu sammeln.
      courseF_bee_for7_2018: |-
        Die letzte Zahl in deiner "Für"-Schleife wird als die **"Steigerung"** bezeichnet. Jedes Mal, wenn die Schleife ausgeführt wird, ändert sich die Zählervariable um den Wert dieser **Steigerung**.

        Versuche, diese Blüten mit einer **Steigerung** um 2 zu sammeln.
      courseF_bee_for7_2019: |-
        Die letzte Zahl in deiner "Für"-Schleife wird als die **"Steigerung"** bezeichnet. Jedes Mal, wenn die Schleife ausgeführt wird, ändert sich die Zählervariable um den Wert dieser **Steigerung**.

        Versuche, diese Blüten mit einer **Steigerung** um 2 zu sammeln.
      courseF_bee_for8: "Du schaffst das! \n\nWie hoch sollte deine **Steigerung**
        sein, um 3, 6, 9, 12, 15 Einheiten Nektar zu sammeln?"
      courseF_bee_for8_2018: "Du schaffst das! \n\nWie hoch sollte deine **Steigerung**
        sein, um 3, 6, 9, 12, 15 Einheiten Nektar zu sammeln?"
      courseF_bee_for8_2019: "Du schaffst das! \n\nWie hoch sollte deine **Steigerung**
        sein, um 3, 6, 9, 12, 15 Einheiten Nektar zu sammeln?"
      courseF_bee_for9: |-
        Lass uns jetzt die `Zähler'-Variable mit einem`Mathematik'-Block kombinieren!

        Wie kannst du die `Zähler`-Variable verwenden, um mit möglichst wenigen Blöcken durch diesen Garten zu navigieren?
      courseF_bee_for9_2018: |-
        Lass uns jetzt die `Zähler'-Variable mit einem`Mathematik'-Block kombinieren!

        Wie kannst du die `Zähler`-Variable verwenden, um mit möglichst wenigen Blöcken durch diesen Garten zu navigieren?
      courseF_bee_for9_2019: |-
        Lass uns jetzt die `Zähler'-Variable mit einem`Mathematik'-Block kombinieren!

        Wie kannst du die `Zähler`-Variable verwenden, um mit möglichst wenigen Blöcken durch diesen Garten zu navigieren?
      courseF_bee_for_challenge1: "Du kannst diese `für-Schleife` verwenden, um den
        gesamten Nektar zu sammeln. Unglaublich! \n\nEs gibt ein paar Aktionen, die
        du `wiederholen musst, um die`Zähler`zu`wiederholen\\`."
      courseF_bee_for_challenge1_2018: "Du kannst diese `für-Schleife` verwenden,
        um den gesamten Nektar zu sammeln. Unglaublich! \n\nEs gibt ein paar Aktionen,
        die du `wiederholen musst, um die`Zähler`zu`wiederholen\\`."
      courseF_bee_for_challenge1_2019: "Du kannst diese `für-Schleife` verwenden,
        um den gesamten Nektar zu sammeln. Unglaublich! \n\nEs gibt ein paar Aktionen,
        die du `wiederholen musst, um die`Zähler`zu`wiederholen\\`."
      courseF_bee_for_challenge2: Löse dieses Rätsel mit der geringstmöglichen Anzahl
        von Blöcken.
      courseF_bee_for_challenge2_2018: Löse dieses Rätsel mit der geringstmöglichen
        Anzahl von Blöcken.
      courseF_bee_for_challenge2_2019: Löse dieses Rätsel mit der geringstmöglichen
        Anzahl von Blöcken.
      courseF_bee_functions2: "Um die Sache zu erleichtern, ist es jetzt Zeit, dass
        du Funktionen kennenlernst!\n\nAb jetzt wirst du einen neuen _Funktionseditor_
        verwenden. Dieser Editor ist ein separates Fenster, das erscheint, wenn du
        eine Funktion bearbeiten willst. Du wirst nicht den gesamten Code deiner Funktion
        sehen, während du im Arbeitsbereich programmierst, aber keine Sorge... Es
        ist alles noch da! \n\n* * *\n\nLass uns mit dieser Funktion üben, wo es nur
        dann Nektar gibt, wenn die Biene bei einer Blüte ist. Um den Code in der Funktion
        zu sehen, klick auf die blaue Schaltfläche \"Edit\"!\n\nVerwende die Funktion
        `nur Nektar holen`, um den Nektar von jeder Blüte zu sammeln."
      courseF_bee_functions3: Jetzt bist du an der Reihe, eine Funktion zu erstellen,
        um etwas Honig zu holen, aber **nur** wenn es eine Wabe gibt! Klicke auf "Edit",
        um die Funktion `nur Honig herstellen` zu erstellen, und verwende sie, um
        dieses Rätsel zu lösen.
      courseF_bee_functions3a: "Jede Wolke könnte entweder eine Blüte oder eine Honigwabe
        verdecken! \n\nSchreibe eine Funktion, die Nektar holt, wenn sich die Biene
        an einer Blüte befindet, sonst holt sie Honig. Verwende deine Funktion, um
        das Rätsel zu lösen!"
      courseF_bee_functions4: |-
        Wusstest due, dass du eine Funktion _innerhalb_ einer anderen Funktion aufrufen kannst?

        Verwende deine Funktion `Nektar oder Honig überprüfen` innerhalb der neuen Funktion `Bewegen und Prüfen`, um der Biene zu helfen, sich zu drehen, sich das zu holen, was unter der Wolke ist, zurück zu gehen und sich wieder umzudrehen!
      courseF_bee_functions5a: Erstelle jetzt die Funktion `Bewegen und Prüfen`, so
        dass sie die Biene zur Wolke bringt, wann immer es einen Weg nach rechts gibt,
        und verwende sie dann, um dieses Rätsel zu lösen!
      courseF_bee_functions6: |-
        _“Dieses Feld ist der IRR-sinn“_

        Erstelle deine eigene Funktion, um der Biene durch das Labyrinth zu helfen, indem du sie bei den Blüten links und bei der Wabe rechts abbiegen lässt. Vergiss nicht, unterwegs Nektar zu sammeln und Honig herzustellen!
      courseF_bee_functions7: |-
        Baue deine Funktion aus dem letzten Rätsel wieder auf, um es durch dieses Labyrinth zu schaffen.

        Biege bei der Wabe links und bei den Blüten rechts ab.\\ **Hinweis:** Einige Abbiegungen sind nicht markiert!
      courseF_bee_functions8a: "Unter dieser Wolke könnte sich eine Blüte mit einer
        unbekannten Menge Nektar oder eine Wabe mit einer unbekannten Menge Honig
        befinden. \n\nKannst ein Programm schreiben, das beides berücksichtigen kann?"
      courseF_bee_functionsPre7: "Versuch nun, eine Funktion zur Lösung dieses Labyrinths
        zu erstellen. Was ist anders als beim letzten Mal? \n\nBiege bei der Wabe
        links und bei den Blüten rechts ab. **Anmerkung:** Einige Abbiegungen sind
        nicht markiert!"
      courseF_bee_functions_challenge1: Erstelle eine neue Funktion, um den gesamten
        Nektar und Honig zu sammeln, während ein Weg vor dir liegt. Verwende sie,
        um das Rätsel abzuschließen!
      courseF_bee_functions_challenge2: Wende alles an, was du gelernt hast, um dieses
        Rätsel abzuschließen!
      courseF_bee_fwp1: "Schau unter den Wolken nach, ob die Blüten Nektar enthalten.
        \n\nWährend dieser ganze Phase wird jede Blüte genau **eine** Einheit Nektar
        haben, und jede Wabe wird genau **eine** Einheit Honig benötigen."
      courseF_bee_fwp2: "Hier ist Code, der das letzte Rätsel löst. \\\\ \nWir ziehen
        ihn in eine Funktion und rufen dann die Funktion auf, um in dieser Zeile nach
        Nektar zu suchen.\n\n* * *\n\nDies mag jetzt wie ein seltsamer Schritt erscheinen,
        aber es wird sich bald als wirklich hilfreich erweisen!"
      courseF_bee_fwp3: "Jetzt sollten wir die Funktion auf die Probe stellen! \n\nMal
        sehen, ob die Funktion das Sammeln dieser drei Reihen Nektar erleichtert."
      courseF_bee_fwp4: |-
        _"Wie gut läuft deine Funktion?“_

        Wir müssen hier einige Anpassungen vornehmen. Klicke auf "Edit", um der Funktion einen Parameter "Länge" hinzuzufügen, damit sie auch dann noch funktioniert, wenn die Zeile eine andere Länge hat.
      courseF_bee_fwp5: |-
        _"Du machen das bisher sehr gut!"_

        Lass uns diese Funktion verwenden, um den Nektar zu sammeln.
      courseF_bee_fwp6: "Du kannst den Code kürzer und effizienter gestalten, wenn
        du Funktionen mit anderen Programmierelementen kombinierst. \n\n* * *\n\nWelche
        Blöcke kannst du mit deiner Funktion verwenden, um eine kurze und knackige
        Lösung für dieses Rätsel zu erstellen?"
      courseF_bee_fwp7: "**Aufgabe:** Etwas sieht hier ein wenig anders aus. Modifiziere
        deine Funktion so, dass sie auch Honig herstellt."
      courseF_bee_fwp_challenge1: Verwende eine "Für-Schleife" in einer Funktion,
        um den gesamten Mais einzusammeln. Dieselbe "Für-Schleife" kann zu verschiedenen
        Maximalwerten hochzählen, indem der Parameter "Länge" verwendet wird.
      courseF_bee_fwp_challenge2: "_\"Zeig uns, dass du diese eine letzte Prüfung
        schaffen kannst! Gib dabei alles!\"_\n\nVerwende eine `für-Schleife` in einer
        Funktion, um das gesamte Gemüse in der Reihe zu sammeln. Lass die `für-Schleife`
        zu verschiedenen Maximalwerten hochzählen, indem du den Parameter `Länge`
        verwendest. Verwende ein möglichst kurzes Programm, indem du eine zweite `für-Schleife`
        außerhalb der Funktion verwendest. \n\nViel Erfolg!"
      courseF_bee_variables_3_2018: _“Ein IRR-sinniger Garten!“_ "In diesem Rätsel
        muss im jedem Patch die Variable um eins kleiner sein als im vorherigen Patch.
        Subtrahiere jedes Mal durch die Schleife eins von der Variablen, wenn du die
        gleiche Funktion zur Lösung dieses Levels verwenden möchtest.
      courseF_bee_variables_3_2019: _“Ein IRR-sinniger Garten!“_ "In diesem Rätsel
        muss im jedem Patch die Variable um eins kleiner sein als im vorherigen Patch.
        Subtrahiere jedes Mal durch die Schleife eins von der Variablen, wenn du die
        gleiche Funktion zur Lösung dieses Levels verwenden möchtest.
      courseF_bee_variables_4_2018: "\"Unglaublich!\" \n\nBearbeite den Code, damit
        er für dieses Rätsel funktioniert."
      courseF_bee_variables_4_2019: |-
        "Lasst uns weitermachen!"

        Bearbeite den Code, damit er für dieses Rätsel funktioniert.
      courseF_playlab_variables1a: "Variablen können zum Speichern von Text verwendet
        werden, den du später verwenden möchtest. \n\nLass Kiki, den Fußballspieler,
        \"Tor!\" schreien, indem du diesen Text der Variablen `rufen` zuweist."
      courseF_playlab_variables2b: "Wir können Sätze interessanter machen, indem wir
        Textelemente mit Variablen mischen. \n\nFüge die Variable `Farbe` in die Mitte
        eines Satzes ein, indem du sie in den leeren Slot des \\`Join'-Blocks einfügst."
      courseF_playlab_variables3b_josh: Hilf Kiki, ein Gespräch mit Brian zu führen,
        indem du die Variable `Alter` an allen Stellen verwendest, wo das Alter `12`
        verwendet werden muss.
      courseF_playlab_variables4b: "Nun hat der Pirat Pegleg einige Fragen an Brian.
        \n\nDieser Code verwendet einen `Fragen‘-Block`, so kannst du Brian‘s Antworten
        eingeben, nachdem du auf \"Ausführen\" geklickt hast. \n\nSetze die Variablen
        an die richtigen Stellen, um diese Unterhaltung zu erstellen."
      courseF_playlab_variables5c: |-
        Lass uns den `Frage`-Block mit einer \`Wenn/Sonst´-Anweisung kombinieren, um ein bisschen Spaß zu haben!

        Der Pirat Pegleg wird dir eine Frage stellen. Zieh eine Kopie der `Antwort‘-Variablen in die Bedingung für die`Wenn'-Anweisung, um zu prüfen, ob du die richtige Farbe eingegeben haben.
      courseF_playlab_variables6c: |-
        Im weiteren Verlauf dieser Phase werden wir mehrere ‘Frage`-Blöcke und`if/else´-Anweisungen verwenden, um ein Spiel aufzubauen, das **du** kontrollierst!

        Beginne damit, die Variable "Codename" mit einem Wort zu verbinden, das du dir merken kannst. Dann verwende einen `Frage`-Block, um einen Codenamen von den Benutzern zu erhalten. Du brauchst einen `if/else`-Block, um zu sehen, ob der eingegebene Codename mit dem von dir bestimmten Codenamen übereinstimmt.
      courseF_playlab_variables7b: |-
        Zeit für dein eigenes Projekt!

        Erstelle einige Fragen und flechte die Antworten in deine ganz eigene Geschichte ein.

        Wenn du Ideen benötigst klick auf das Symbol für Hinweise.
      courseF_playlab_variables7c: |-
        Füge einen weiteren `Frage`-Block hinzu, um den Benutzer aufzufordern, eine Farbe zu erraten.
        Halt deine `Wenn/Sonst`-Anweisung so, dass dein Codename das Spiel immer gewinnt, jeder andere Codename hingegen immer verliert.
      courseF_playlab_variables8c: Verwende den `Join`-Block (in der Werkzeugkiste
        unter "Text"), um die Gewonnen/Verloren-Nachrichten persönlicher zu gestalten,
        indem du sowohl den `Codenamen` als auch die `Farbe`-Variablen in die Antworten
        einbaust.
      courseF_playlab_variables_challenge1: Verwende diese Blöcke, um die Teilnehmer
        eine Klopf-Klopf-Witz teilen zu lassen. Ändere die Pointe und die Umstände,
        um deinen eigenen Witz zu erzählen!
      courseF_playlab_variables_challenge2: "Und jetzt eine Partie Fangen! Fange die
        Katze (Teilnehmer 2), um 2 Punkte zu erhalten. Fange den Pinguin (Teilnehmer
        3), um 3 Punkte zu erhalten. Du brauchst 10 Punkte, um zu gewinnen! \n\nAber
        Vorsicht, wenn Katze und Pinguin sich gegenseitig fangen, nehmen sie dir Punkte
        weg. \n\n-   -   -   Füge die notwendigen Blöcke hinzu, damit dieses Spiel
        so funktioniert, wie es erklärt wurde. \n\n-   Wie kannst du den Hund dazu
        bringen, sich mit den Pfeiltasten in alle Richtungen zu bewegen? \n\n-   Wie
        fügst du Punkte hinzu, wenn der Hund die Katze oder den Pinguin fängt? \n\n-
        \  Wie ziehst du Punkte ab, wenn sich Katze und Pinguin berühren?"
      coursea_maze_ramp1_2018: Um den Vogel zum Schwein zu bringen, hänge den<xml><block
        type="maze_moveEast"/></xml> Baustein unten am <xml><block type="when_run"/></xml>
        Baustein ein und drücke dann auf "▶ Ausführen"!
      coursea_maze_ramp1_2019: Um den Vogel zum Schwein zu bringen, hänge den<xml><block
        type="maze_moveEast" block-text="move east"/></xml> Baustein unten am <xml><block
        type="when_run" block-text="when run"/></xml> Baustein ein und drücke dann
        auf "▶ Ausführen"!
      csd U3 conditional statements video_2019: |-
        ## Zu berücksichtigende Frage

        -   Wann möchtest du eine wenn-Anweisung verwenden?
      csd u5 recommender sample: "# Beispiel-App\n\nHier ist ein Beispiel für eine
        App, die Daten verwendet, um dem Benutzer bei der Lösung eines Problems zu
        helfen. Spiele die App mit einem Partner ein paar Mal durch, um zu sehen,
        wie sie funktioniert.\n\nBespreche die folgenden Fragen mit Deinem Partner:\n\n-
        \  Bei welcher Wahl unterstützt die App den Benutzer? \n-   Welche Daten verwendet
        sie, um diese Empfehlung abzugeben?\n-   Wie haben sich die Entwickler der
        App Deiner Meinung nach für den Algorithmus entschieden, mit dem sie die Wahl
        treffen?"
      csd u5 recommender sample_2019: "# Beispiel-App\n\nHier ist ein Beispiel für
        eine App, die Daten verwendet, um dem Benutzer bei der Lösung eines Problems
        zu helfen. Spiele die App mit einem Partner ein paar Mal durch, um zu sehen,
        wie sie funktioniert.\n\nBespreche die folgenden Fragen mit Deinem Partner:\n\n-
        \  Bei welcher Wahl unterstützt die App den Benutzer? \n-   Welche Daten verwendet
        sie, um diese Empfehlung abzugeben?\n-   Wie haben sich die Entwickler der
        App Deiner Meinung nach für den Algorithmus entschieden, mit dem sie die Wahl
        treffen?"
      frozen circle: Ein Kreis ist eine besondere Form. Kannst du herausfinden, durch
        welche Zahl du das Fragezeichen ersetzen musst, um einen Kreis zu zeichnen?
      frozen circle function: Verwende den neuen „Erzeuge einen Kreis“-Baustein, um
        10 sich überschneidende Kreise zu erstellen. Vergiss nicht zwischen den Kreisen
        nach vorn zu springen.
      frozen circle function in circle: Jetzt erstellen wir 20 überschneidende Kreise
        und drehen die einzelnen Kreise um 18 Grad.
      frozen circle function with parameter: Hier ist ein „Erzeuge einen Kreis“-Baustein,
        der Kreise verschiedener Größe zeichnen kann. Kannst du ihn benutzen, um einen
        kleinen Kreis, mit der Größe 5, und einen größeren Kreis, mit der Größe 10,
        zu erstellen?
      frozen cross: Wir brauchen hier noch einen „Wiederholen"-Baustein, um ein Plus-Zeichen
        zu zeichnen! Hast du bemerkt, dass sich Elsa vor und zurück bewegen kann?
      frozen cross rotate: Jetzt versuche, es zehn Mal zu wiederholen. Wie viel Grad
        musst du zwischen den einzelnen Linien drehen?
      frozen cross rotate dense: 'Wiederhole es 90 Mal! Wie oft geht 90 in 360? Hinweis:
        Es ist eine sehr kleine Zahl.'
      frozen diamond: Du kannst ein Parallelogramm zeichnen, indem Du um diesen Code
        einen „wiederholen“-Baustein einfügst. Es ist wie ein Rechteck, hat aber verschiedene
        große Winkel. Dieses hier hat Winkel von 60 Grad und 120 Grad, statt nur 90-Grad-Winkel.
      frozen diamond mini snowflake: Wusstest du schon, dass jede Schneeflocke eine
        andere Form hat? Nun erstellen wir eine neue Schneeflocke mit dem Wiederholen-Baustein,
        um ein Parallelogramm 4 Mal zu wiederholen und dabei jeweils 90 Grad nach
        rechts zu drehen.
      frozen diamond snowflake: Nun erstellen wir eine neue Schneeflocke mit dem Wiederholen-Baustein,
        um ein Parallelogramm 10 Mal zu wiederholen und dabei jeweils 36 Grad nach
        rechts zu drehen.
      frozen freeplay: Du bist ein richtiger Künstler geworden. Zeichne ein Winter-Wunderland.
      frozen perpendicular: Jetzt schauen wir mal, ob wir zwei Linien zeichnen können,
        die in einem 90° Winkel zueinander stehen. Du musst sowohl den „Drehen“-Baustein
        als auch den „Bewegen“-Baustein benutzen.
      frozen snowflake branch: Verwende den „Erstelle einen Schneeflockenzweig"-Baustein,
        um drei Zweige zu erstellen, die beginnen wie eine Schneeflocke auszusehen.
      frozen snowflake full: Jetzt wiederhole das 8 Mal, um eine schöne Schneeflocke
        zu machen!
      frozen snowflower: Komplizierte Schneemuster können mit sehr einfachen Formen
        erstellt werden. Kannst du ein Muster machen, das 5 Kreise der Größe 5 und
        5 Kreise der Größe 10 wiederholt?
      frozen square iterative: Es scheint, als hätten wir die Hälfte eines Quadrates
        geschafft. Lass uns 4 Linien benutzen, um ein Quadrat zu erstellen.
      frozen square loop: Hallo, ich bin Anna von Arendelle! Lass uns ein Quadrat
        mit dem „Wiederholen“-Baustein zeichnen, dadurch brauchen wir weniger Blöcke.
        Wie oft (???) muss der „Wiederholen“-Baustein die inneren Bausteine durchlaufen,
        damit ein Quadrat entsteht?
      frozen square loop 3x: Lass uns drei Quadrate erstellen und nach jedem Quadrat
        drehen. Stell sicher, dass du vor jedem neuen Quadrat um 120° drehst.
      frozen square snowflake: Kannst du eine Schneeflocke erstellen, indem du den
        „Wiederholen"-Baustein 10 mal benutzt, um ein Quadrat zu erstellen und nach
        jedem Quadrat den „Drehen"-Baustein mit 36° benutzt?
      grade2_collector_10: |-
        Du bist fast fertig!

        Sammle möglichst viele Schätze ein, um diesen Teil abzuschließen!
      grade2_collector_10_2018: |-
        Du bist fast fertig!

        Sammle möglichst viele Schätze ein, um diesen Teil abzuschließen!
      grade2_collector_10_2019: |-
        Du bist fast fertig!

        Sammle möglichst viele Schätze ein, um diesen Teil abzuschließen!
      grade2_collector_A: Hilf Laurel alle Schätze einzusammeln.
      grade2_collector_A_2018: Hilf Laurel alle Schätze einzusammeln.
      grade2_collector_A_2019: Hilf Laurel alle Schätze einzusammeln.
      grade5_artist_variables_triangles1: |-
        Lass uns ein gleichseitiges Dreieck zeichnen.

        Es muss auf jeder Seite genau 50 Pixel lang sein.
      grade5_artist_variables_triangles1_2018: |-
        Lass uns ein gleichseitiges Dreieck zeichnen.

        Es muss auf jeder Seite genau 50 Pixel lang sein.
      grade5_artist_variables_triangles1_2019: |-
        Lass uns ein gleichseitiges Dreieck zeichnen.

        Es muss auf jeder Seite genau 50 Pixel lang sein.
      grade5_pixelation: |-
        # Erstelle dein eigenes Bild in beliebiger Größe

        ![](https://images.code.org/01c15fed4f1a2c6c3af531edc35e736e-image-1439596066108.png)
        ![](https://images.code.org/24efcaa184d1fc852f37c32911b3b87c-image-1439596070178.png)
        ![](https://images.code.org/c9a5d0fd5ba445b7f6b5744e08b50e49-image-1439596071878.png)
        ![](https://images.code.org/f14e1b8dd722b0ca5bc54fa96b34f2eb-image-1439596074236.png)
        ![](https://images.code.org/fe938c0c16453b9d461b4023098079df-image-1439596075744.png)
        ![](https://images.code.org/02c88a7da51289b2f2d1f64bd8c97b28-image-1439596077514.png)
        ![](https://images.code.org/309e3157dcfd91956181007f483f8e58-image-1439596079084.png)

        **Anleitung:**

        -   Kodiere ein Bild von allem, was du magst, mit `binary`.
        -   Die binäre Sprache wird nur mit `0` und `1` dargestellt.
        -   Vielleicht möchtest du zuerst etwas auf Millimeterpapier planen und skizzieren.
        -   Stelle etwas dar, vielleicht deinen ausgeschriebenen Namen, deine Initialen, ein Symbol oder Logo irgendeiner Art.
        -   Werde kreativ! Das Bild muss kein perfektes Quadrat sein, es kann lang und dünn sein.
      iceage_click_hello: Kannst du Sid helfen, seine Freunde zu rufen, wenn du auf
        ihn klickst? Wenn du fertig bist, drücke "Ausführen", um zu spielen. Klicke
        auf Sid, um zu sehen, wie dein Code funktioniert!
      iceage_free_play: "\"Zeit für dein eigenes Spiel oder deine eigene Geschichte!
        \n\nWenn du fertig bist, klicke auf \"\"Fertigstellen\"\", damit Freunde dein
        Spiel auf ihren Handies, Tablets oder Computern ausprobieren können! \nDir
        fällt nicht ein? Klicke auf die Hinweise für Einzelheiten.\""
      iceage_hello1: Sid (Figur 1) möchte alle für ein neues Abenteuer zusammentrommeln.
        Kannst du ihm dabei helfen, "Hallo!" zu sagen, indem den `sagen`-Baustein
        herausziehst und ihn mit dem unteren Ende des `wenn ausgeführt wird`-Ereignisses
        verbindest? Vergiss nicht, "Hallo!" hineinzutippen!
      iceage_hello2: Manny (Figur 2) hat Sid (Figur 1) gefunden und will ihn zu einem
        Abenteuer einladen. Hilf ihnen, sich gegenseitig zu begrüßen, indem du den
        Baustein `Figur sagt ___` zweimal verwendest.
      iceage_move_events: Scrat sucht immer noch nach Eicheln! Hilf ihm, herumzuhüpfen,
        indem du bei jedem der Ereignisse einen Baustein `Figur 1` hinzufügst und
        indem sich bei jeder Pfeiltaste die Richtung ändert. Wenn du fertig bist,
        klicke auf "Ausführen" und versuche, alle Eicheln einzusammeln.
      iceage_move_to_actor: Diego (Figur 1) ist auf der Suche nach Manny (Figur 2).
        Kannst du den beiden helfen, zusammenzufinden? Verbinde einen Baustein mit
        dem Ereignis `wenn die Figur berührt`, um einen Ton abzuspielen, wenn sie
        sich finden.
      iceage_move_to_flag: Scrat sucht nach seiner Eichel! Kannst du ihm helfen, die
        letzten 200 Pixel zu verschieben?
      iceage_repeat: Der Baustein `endlos wiederholen` ermöglicht es dir, Code kontinuierlich
        auszuführen. Kannst du Bausteine hineinlegen, um Granny etwas Bewegung zu
        verschaffen, indem du sie wiederholt nach links und nach rechts bewegst?
      iceage_sound_and_points: Hier ist dein Code aus der letzten Aufgabe, sowie der
        Code, um Granny nach links und rechts zu bewegen. Kannst du das Programm so
        beenden, dass ihr beide **einen Ton** abspielt und **einen Punkt** macht,
        wenn Sid und Granny zusammenstoßen? Drücke auf "Ausführen", um das Spiel zu
        spielen.
      iceage_throw_hearts: Sid möchte seiner Großmutter Granny sagen, dass er sie
        lieb hat. Verwende den Befehl `Figur __ werfen`, damit Sid (Figur 1) Herzen
        zu Granny (Figur 2) werfen kann! Programmiere Grannys Stimmung als glücklich,
        wenn sie von den Herzen getroffen wird.
      iceage_warn_ice_age: Alle müssen sich schneller bewegen, denn es zieht ein Eissturm
        auf! Ändere die Szene zu einem eisigen Hintergrund und stelle Sids (Figur
        1) Geschwindigkeit auf schnell ein. Drücke "Ausführen" und bewege Sid zu Diego,
        damit er ihn warnt.
      mike3bit: "# 3-Bit-Farbe\n\n**Anweisungen**\n\n-   Wir beginnen mit dem 4x2-Bild
        das Maddie erstellt hat, aber wir haben die letzten Pixel weggelassen. \n-
        \  Beende das Bild, indem Du herausfindest, welche Farben fehlt und kodieren
        diese anschließend."
      mike3bitbird: "# 3-Bit-Farbe\n\nHier ist ein Beispiel für ein Bild, das mit
        einer 3-Bit-Farbe erstellt wurde. Versuche, es zu ändern, um zu verstehen,
        wie es funktioniert. \n\n_Wenn du das Bild zurücksetzen möchten, drücken Sie
        \"Zurücksetzen\"._"
      mike3bitfreeplay: |-
        # 3-Bit-Farbe

        Du hast eine letzte Chance um zu experimentieren und kreativ zu werden mit dem Pixelation Widget. Mache etwas Fantastisches und teile es mit deinen Klassenkameraden!

        -   _Tipp:_ Du kannst den Wert eines Pixels kopieren und einfügen, um ihn wiederholt zu verwenden.
      mike3bitmario: "# 3-Bit-Farbe\n\n**Herausforderung:\\*** \n\nEin unvorsichtiger
        Binärcodierer hat versehentlich in EINE zusätzliche 0 oder 1 irgendwo die
        Bilddaten eingegebn. Dadurch sieht Marion nun etwas komisch aus! \n\nLösche
        das zusätzliche Bit, um Mario wieder normal aussehen zu lassen!\n\n![](<https://images.code.org/8b7c17ba204a1a4d33e1bd6de7f01d76-image-1477306657312.54.57
        AM.png>)"
      ramp_artist_loops1: "Was für ein schöner Tag! \n\nHilf dem Künstler dabei, seine
        Blumen vor dem Winter abzudecken, indem du dich um 60 Pixel vorwärts bewegst."
      ramp_artist_loops1_2018: "Was für ein schöner Tag! \n\nHilf dem Künstler dabei,
        seine Blumen vor dem Winter abzudecken, indem du dich um 60 Pixel vorwärts
        bewegst."
      ramp_artist_loops1_2019: "Was für ein schöner Tag! \n\nHilf dem Künstler dabei,
        seine Blumen vor dem Winter abzudecken, indem du dich um 60 Pixel vorwärts
        bewegst."
      ramp_artist_loops2: Mach alles noch schöner, indem du diesen Schritt fünf Mal
        wiederholst und zwischen den einzelnen Bewegungen in eine zufällige Farbe
        überwechselst.
      ramp_artist_loops2_2018: Mach alles noch schöner, indem du diesen Schritt fünf
        Mal wiederholst und zwischen den einzelnen Bewegungen in eine zufällige Farbe
        überwechselst.
      ramp_artist_loops2_2019: Mach alles noch schöner, indem du diesen Schritt fünf
        Mal wiederholst und zwischen den einzelnen Bewegungen in eine zufällige Farbe
        überwechselst.
      ramp_artist_loops3: Zeichne die bunte Linie noch 5 Mal, diesmal mithilfe einer
        "Wiederholungsschleife".
      ramp_artist_loops3_2018: Zeichne die bunte Linie noch 5 Mal, diesmal mithilfe
        einer "Wiederholungsschleife".
      ramp_artist_loops3_2019: Zeichne die bunte Linie noch 5 Mal, diesmal mithilfe
        einer "Wiederholungsschleife".
      ramp_artist_loops4: Was passiert, wenn man nach allem anderen innerhalb der
        Schleife ein 72-Grad-Abbiegen einfügt?
      ramp_artist_loops4_2018: Was passiert, wenn man nach allem anderen innerhalb
        der Schleife ein 72-Grad-Abbiegen einfügt?
      ramp_artist_loops4_2019: Du kannst diesen Stern erzeugen, indem du eine Schleife
        aus einer Folge von ´bewege vorwärts´ und ´drehe rechts um 144 Grad´ Sätzen
        drehen.
      ramp_artist_loops5: "Schleifen machen das Schreiben von Code definitiv einfacher!\n\nVerwende
        Schleifen, um diese Treppe zu zeichnen. \n\n-   Jeder Treppenstufe ist 50
        Pixel lang und 50 Pixel hoch \n-   du musst dich um 90 Grad in jede Richtung
        drehen"
      ramp_artist_loops5_2018: "Schleifen machen das Schreiben von Code definitiv
        einfacher!\n\nVerwende Schleifen, um diese Treppe zu zeichnen. \n\n-   Jeder
        Treppenstufe ist 50 Pixel lang und 50 Pixel hoch \n-   du musst dich um 90
        Grad in jede Richtung drehen"
      ramp_artist_loops5_2019: "Schleifen machen das Schreiben von Code definitiv
        einfacher!\n\nVerwende Schleifen, um diese Treppe zu zeichnen. \n\n-   Jeder
        Treppenstufe ist 50 Pixel lang und 50 Pixel hoch \n-   du musst dich um 90
        Grad in jede Richtung drehen"
      ramp_artist_loops6: "Diese Treppe ist viel größer, aber du brauchst genau die
        gleiche Menge an Code wie beim letzten Rätsel! \n\nKorrigiere diese Schleife,
        um das Rätsel abzuschließen."
      ramp_artist_loops6_2018: "Diese Treppe ist viel größer, aber du brauchst genau
        die gleiche Menge an Code wie beim letzten Rätsel! \n\nKorrigiere diese Schleife,
        um das Rätsel abzuschließen."
      ramp_artist_loops6_2019: "Diese Treppe ist viel größer, aber du brauchst genau
        die gleiche Menge an Code wie beim letzten Rätsel! \n\nKorrigiere diese Schleife,
        um das Rätsel abzuschließen."
      ramp_artist_loops7: Suche nach einem Muster und verkürze diesen Code, indem
        du Schleifen verwendest!
      ramp_artist_loops7_2018: Suche nach einem Muster und verkürze diesen Code, indem
        du Schleifen verwendest!
      ramp_artist_loops7_2019: Suche nach einem Muster und verkürze diesen Code, indem
        du Schleifen verwendest!
      ramp_artist_loops8: "**Aufgabe:** Suche ein Muster und verkürze diesen Code,
        indem du Schleifen verwendest!"
      ramp_artist_loops8_2018: "**Aufgabe:** Suche ein Muster und verkürze diesen
        Code, indem du Schleifen verwendest!"
      ramp_artist_loops8_2019: "**Aufgabe:** Suche ein Muster und verkürze diesen
        Code, indem du Schleifen verwendest!"
      ramp_artist_loops9: Löse dieses Rätsel, indem du ein Quadrat zeichnest, bei
        dem die Seiten 200 Pixel lang sind.
      ramp_artist_loops9_2018: Löse dieses Rätsel, indem du ein Quadrat zeichnest,
        bei dem die Seiten 200 Pixel lang sind.
      ramp_artist_loops9_2019: Löse dieses Rätsel, indem du ein Quadrat zeichnest,
        bei dem die Seiten 200 Pixel lang sind.
      simconfig: |-
        # Modifizieren und vorhersagen

        Wähle eine der Variablen, die diese Simulation steuert um zu ändern bzw. vorherzusagen, wie sich das Ergebnis ändern wird.

        Nachdem du deine Vorhersage aufgeschrieben haben, führen Sie die Simulation 5 mal durch und notieren Sie Ihre Ergebnisse. War deine Vorhersage richtig?
      simstarter: |-
        # Datenerhebung

        Führen Sie diese Simulation 5 mal aus. Verwenden Sie jedes Mal den Leitfaden zur Erfassung von Daten zur Aufzeichnung:

        -   Wie viele Äpfel hat der Elefant gesammelt?
        -   Wie viele Äpfel hat das Nilpferd gesammelt?
        -   Wie viel Zeit hat es gedauert, bis alle Äpfel gesammelt wurden?
