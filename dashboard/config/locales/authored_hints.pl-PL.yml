---
pl-PL:
  data:
    authored_hints:
      2-3 Artist 1 new:
        2-3_Artist_1_new_a: Jeżeli użyjesz bloku "idź do przodu o 100 pikseli", narysuję
          linię automatycznie.
        2-3_Artist_1_new_b: Masz problem z zakrętem? Użyj bloku "skręć w prawo o 90
          stopni".
      2-3 Artist 11:
        2-3_Artist_11_a: 'Masz problem ze stopniami? Musisz obrócić się o 360 stopni
          w 8 krokach. Ile jest 360/8? '
      2-3 Artist 12:
        2-3_Artist_12_a: Koło ma 360 stopni, więc jeżeli w pętli artysta obróci się
          za każdym razem o 1 stopień, musi przejść przez nią 360 razy.
      2-3 Artist 2 new:
        2-3_Artist_2_new_a: Artysta chyba nie jest zwrócony we właściwym kierunku.
          Możesz sprawić, żeby obrócił się zanim narysuje linię?
      2-3 Artist 3new:
        2-3_Artist_3new_a: Ile to jest 100-70? Z opisu wynika, że taką wysokość powinien
          mieć kapelusz!
        2-3_Artist_3new_b: Artysta chyba nie jest zwrócony we właściwym kierunku.
          Możesz sprawić, żeby obrócił się zanim narysuje linię?
      2-3 Artist 4:
        2-3_Artist_4_a: Aby dokończyć dom wystarczy tylko narysować kwadrat!
      2-3 Artist 6:
        2-3_Artist_6_a: 'By zrobić te małe kąty musisz za każdym razem obrócić się
          _dalej_ niż to robiłeś z kwadratem.   '
        2-3_Artist_6_b: Skoro już patrzę w prawo, będzie łatwiej pójść najpierw do
          przodu a potem, skręcając w lewo, stworzyć trójkąt.
        2-3_Artist_6_c: Każdy bok trójkąta ma taką samą długość jak każdy bok kwadratu...
          100 pikseli!
      2-3 Artist 7:
        2-3_Artist_7_a: Najłatwiej rozwiązać tą łamigłówkę rysując pierwszy kwadrat
          tak, żeby na końcu artysta był skierowany w dół przed rozpoczęciem rysowania
          drugiego kwadratu.
      2-3 Artist 8:
        2-3_Artist_8_a: Jeśli podzielisz 200 pikseli na pół, jaką szerokość powinien
          mieć każdy kwadrat?
      2-3 Artist 9 NEW:
        2-3_Artist_9_a: Ten diament to tak na prawdę kwadrat obrócony na bok
      2-3 Artist Debugging 10:
        2-3_Artist_Debugging_10_a: Pamiętaj, że chcesz by panel sterowania był o 10
          pikseli _szerszy_...upewnij się, że **dodajesz** 10 do liczby, którą zmieniasz.
        2-3_Artist_Debugging_10_b: |-
          **Metoda prób i błędów sprawdza się tu doskonale!**

          Zmieniaj po jednej liczbie na raz.

          Jeśli się zgubisz, po prostu kliknij "Zacznij od nowa",  a kod będzie taki jak na początku.
      2-3 Artist Debugging 2:
        2-3_Artist_Debugging_2_a: 'Wskazówka: każdy wąsik ma 75 pikseli długości.'
      2-3 Artist Debugging 3:
        2-3_Artist_Debugging_3_a: Jeden ze skrętów ma o 15 stopni za mało.
        2-3_Artist_Debugging_3_b: Jeśli program działa zbyt szybko, zobacz co się
          dzieje, spowalniając go suwakiem.
      2-3 Artist Debugging 7:
        2-3_Artist_Debugging_7_a: Co się stanie, jeśli masz tryb Artysta i ruszają
          lub skaczą przez pierwszy wiersz?
      2-3 Artist Debugging 8:
        2-3_Artist_Debugging_8_a: |-
          Ile razy powtórzył się mój kształt?

          Ile razy kształt _powinien_ się powtórzyć?

          Gdzie możesz to zmienić w programie?
      2-3 Artist Debugging 9:
        2-3_Artist_Debugging_9_a: Artysta musi obrócić się jeszcze w lewo o 60 stopni
          zanim rozpocznie rysowanie!
        2-3_Artist_Debugging_9_b: Nie potrzebujesz kolejnego bloku, żeby uzyskać pełny
          obrót, po prostu dodaj 60 stopni do bloku 'obrót w lewo', który już tu jest!
      2-3 Artist Functions 1:
        2-3_Artist_Functions_1_a: Kwadraty mają boki o długości 100 pikseli, czyli
          musisz przesunąć się do przodu o 175 pikseli zanim narysujesz drugi kwadrat.
        2-3_Artist_Functions_1_b: To dobrze rysować nakładające się linie do okularów.
      2-3 Artist Functions 11:
        2-3_Artist_Functions_11_a: Trzeba będzie zmienić w funkcji nie tylko liczbę
          i długość boków, ale także kąt o jaki obraca się artysta pomiędzy bokami.
      2-3 Artist Functions 12:
        2-3_Artist_Functions_12_a: Spróbuj najpierw uruchomić program i sprawdzić,
          co trzeba dodać.
      2-3 Artist Functions 2:
        2-3_Artist_Functions_2_a: "Twój program powinien:\n\n-   uzyć funkcji, \n-
          \  przesunąć się do przodu o 100 + 75 pikseli\n-   ponownie użyć funkcji"
      2-3 Artist Functions 3:
        2-3_Artist_Functions_3_a: "**115 + 45 = 160**"
      2-3 Artist Functions 4:
        2-3_Artist_Functions_4_a: Aby stworzyć ten wzór artysta musi obrócić się o
          120 stopni pomiędzy każdym bokiem.
      2-3 Artist Loops New 11:
        2-3_Artist_Loops_New_11_a: |-
          Pamiętaj, że kod z ostatniej łamigłówki był następujący:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat">
                  <title name="TIMES">8</title>
                  <statement name="DO">
                    <block type="draw_colour" inline="true">
                      <value name="COLOUR">
                        <block type="colour_random"/>
                      </value>
                      <next>
                        <block type="draw_turn_by_constant_dropdown">
                          <title name="DIR">turnRight</title>
                          <title name="VALUE" config="45,60,90,120,180">45</title>
                          <next>
                            <block type="draw_move_by_constant">
                              <title name="DIR">moveForward</title>
                              <title name="VALUE">50</title>
                              <next>
                                <block type="draw_turn_by_constant_dropdown">
                                  <title name="DIR">turnLeft</title>
                                  <title name="VALUE" config="45,60,90,120,180">90</title>
                                  <next>
                                    <block type="draw_move_by_constant">
                                      <title name="DIR">moveForward</title>
                                      <title name="VALUE">50</title>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
          </xml>
        2-3_Artist_Loops_New_11_b: Twój następny ruch powinien zacząć się na \*\*
          koniec \*\* kodu poprzedniej pętli.
      2-3 Artist Loops New 12:
        2-3_Artist Loops_New_12_a: Przed rozpoczęciem rysunku, artysta musi skręcić
          w lewo pod kątem 60 stopni aby ustawić się na właściwej pozycji.
        2-3_Artist Loops_New_12_b: Po artysty idzie do przodu 100 pikseli, będzie
          musiał włączyć prawo 120 stopni narysować kąt ostry.
        2-3_Artist Loops_New_12_c: Artysta musi włączyć prawa tylko 60 stopni stworzyć
          rozwarty kąt.
      2-3 Artist Loops New 13:
        2-3_Artist_Loops_New_13_a: Na koniec każdego diamentu artysta jest już skierowany
          we właściwym kierunku, do rozpoczęcia kolejnego.    W związku z tym nie
          trzeba dodać dodatkowej komendy 'skręcić w lewo przez', zanim zaczniemy
          ponownie rysować.
        2-3_Artist_Loops_New_13_b: |-
          Aby narysować każdy diament, artysta musi:

          -   idź naprzód
          -   skręć w prawo o 120 stopni
          -   idź naprzód
          -   skręć w prawo o 60 stopni

          Potem zrób to wszystko jeszcze raz!
      2-3 Artist Loops New 9:
        2-3_Artist_Loops_New_9_a: Artysta musi skręcić o 45 stopni w prawo, zanim
          zacznie rysować.
        2-3_Artist_Loops_New_9_b: Ten kształt grotu jest naprawdę tylko połową kwadratu.  Jaki
          byłby kod, który rysuje połowę kwadratu?
      2-3 Artist Nested Loops 1:
        2-3_Artist_Nested_Loops_1_a: Pamiętaj, aby umieścić wszystkie szare bloki
          kodu wewnątrz swojej pętli.
      2-3 Artist Nested Loops 3:
        2-3_Artist_Nested_Loops_3_a: |-
          Potrzebujesz pomocy z obliczania kątów?\
          \*\* 360/12 = 30 \*\*
        2-3_Artist_Nested_Loops_3_b: Pamiętaj, aby umieścić wszystkie szare bloki
          kodu i twój ruch wewnątrz pętli.
      2-3 Artist Nested Loops 4:
        2-3_Artist_Nested_Loops_3_a: |-
          Potrzebujesz pomocy z obliczania kątów?\
          \*\* 360/12 = 30 \*\*
      2-3 Artist Nested Loops 5:
        2-3_Artist_Nested_Loops_5_a: "Spróbuj użyć bloku 'skok do przodu', aby przejść
          o jeden kwadrat do miejsca, w którym rozpocznie się rysowanie następnego.
          \  \n\nJeśli bok Twoich kwadratów to 20 pikseli wysokości i są one oddalone
          o 20 pikseli od siebie, to jak daleko potrzebujesz skoczyć?"
      2-3 Artist Nested Loops 7:
        2-3_Artist_Nested_Loops_7_a: "Jaki powinien być Twój ruch w każdej pętli?
          \  \n\nIle to jest 360/10?"
      2-3 Artist Nested Loops 9:
        2-3_Artist_Nested_Loops_9_a: |-
          Potrzebujesz pomocy w znalezieniu odpowiedniego kąta?

           \*\* 360 / 12 = 30 \*\*
      2-3 Bee Conditionals 14:
        2-3_Bee_Conditionals_14_a: Przez dłuższy czas zastanawiasz się jak ułożyć
          kolejne bloki? Potraktuj czerwony kwiat dokładnie tak samo, jak fioletowy!
        2-3_Bee_Conditionals_14_b: Gdyby czerwony kwiat był fioletowy, czy możesz
          sobie wyobrazić, jak używać dodatkowych powtórzeń pętli skrócenia kodu?
        2-3_Bee_Conditionals_14_c: |-
          Spróbuj rozłączyć to na dwa oddzielne kawałki:

          ![](https://images.code.org/895a52f3febff9edb83979f7861cf67a-image-1469640892331.png)

          1.  Pobierz nektar 3 razy
              -   idź do przodu 5 razy
              -   sprawdź, czy jest nektar, jeśli tak: zbierz go
              -   skręć w lewo

          2.  Wyprodukuj miód
              -   idź raz do przodu
              -   produkuj miód dwa razy
      2-3 Bee Conditionals 15:
        2-3_Bee_Conditionals_15_a: 'Pamiętaj: Fioletowe kwiaty mogą mieć nektar lub
          nie (0 lub 1) i mogą zmienić ten stan za każdym uruchomieniem programu.'
      2-3 Bee Conditionals 3:
        2-3_Bee_Conditionals_3_a: Kod będzie krótszy, jeśli użyjesz 2 pętli, za każdym
          przejściem do przodu. Innej, aby  zebrać nektar, a innej aby zrobić miód.
      2-3 Bee Conditionals 6:
        2-3_Bee_Conditionals_6_a: 'Pamiętaj: Fioletowe kwiaty mogą mieć nektar lub
          nie (0 lub 1), za każdym razem, gdy uruchamiasz program!'
      2-3 Bee Debugging 1:
        2-3_Bee_Debugging_1_a: Jeśli znalazłeś i skorygowałeś jakiś niepoprawny blok,
          czy widzisz już jakiś wzorzec, który pozwoli Ci wykonać instrukcje prościej,
          za pomocą pętli 'repeat'?
      2-3 Bee Debugging 2:
        2-3_Bee_Debugging_2_a: Jeśli znalazłeś i skorygowałeś jakiś niepoprawny blok,
          czy widzisz już jakiś wzorzec, który pozwoli Ci wykonać instrukcje prościej,
          za pomocą pętli 'repeat'?
      2-3 Bee Debugging 4:
        2-3_Bee_Debugging_4_a: Czy widzisz jakieś miejsce, gdzie pszczoła robi coś,
          co nie ma sensu? Co się stanie, gdy zmienisz ten fragment bloku?
      2-3 Bee Functions 4:
        2-3_Bee_Functions_4_a: Nie musisz używać pętli z funkcją. Spróbuj w ruchu,
          za pomocą funkcji, by przeniósł się ponownie przy użyciu funkcji.
      2-3 Bee Functions 6:
        2-3_Bee_Functions_6_a: Nie musisz używać pętli z funkcją. Spróbuj w ruchu,
          za pomocą funkcji, by przeniósł się ponownie przy użyciu funkcji.
      2-3 Bee Functions 8:
        2-3_Bee_Functions_8_a: "Jeśli zadanie wydaje Ci sie za trudne,  spróbuj budować
          funkcje po kawałku.  \n\nDodaj bloki, a następnie wypróbuj ich działanie.
          Dodaj kolejne, a następnie spróbuj ponownie.  Wkrótce osiągniesz cel! \n\n![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)"
      2-3 Bee Functions 9:
        2-3_Bee_Functions_8_a: "Jeśli łamigłówka wydaje Ci się za trudna, spróbuj
          budować funkcje po kawałku.  \n\nDodaj bloki, a następnie wypróbuj ich działanie.
          Dodaj kolejne, t wypróbuj ponownie.  Wkrótce osiągniesz cel!"
        2-3_Bee_Functions_8_b: |-
          Pamiętaj, aby budować kodu wewnątrz zielonego bloku funkcji.

          ![](https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)
      2-3 Bee Loops 2:
        2-3_Bee_Loops_2_a: Powinieneś użyć czterech bloków wewnątrz pętli.
      2-3 Bee Loops 3:
        2-3_Bee_Loops_3_a: Powinieneś mieć 6 bloków wewnątrz pętli.
      2-3 Bee Loops 3B:
        2-3_Bee_Loops_3B_a: Będziesz potrzebować dwóch różnych pętli 'repeat', jeden
          po drugim.
      2-3 Bee Loops 4:
        2-3_Bee_Loops_4_a: Powinieneś użyć 5 bloków wewnątrz pętli.
      2-3 Bee Loops 4A:
        2-3_Bee_Loops_4A_a: Najpierw powinieneś się obrócić, a nie przesunąć na kolejne
          pole.
        2-3_Bee_Loops_4A_b: Ostatnią częścią programu będzie napisanie kodu na koniec
          programu, już poza pętlą.
        2-3_Bee_Loops_4A_c: Jeśli od razu nie użyjesz pętli, spróbuj kodowania wiersz
          po wierszu, następnie zobacz co można połączyć w pętli 'repeat'.
      2-3 Bee Loops 5:
        2-3_Bee_Loops_5_a: Jeśli nie możesz dostrzec bloki, aby umieścić go wewnątrz
          'repeat', możesz zacząć kodowanie każdego ruchu i dopiero poszukać wzorców.
      2-3 Bee Loops 6:
        2-3_Bee_Loops_6_a: Jeśli nie możesz ogadnąć, co powinno być w pętli 'repeat',
          spróbuj kodować bloki jeden po drugim i zobacz, czy odkryjesz jakiś wzór.
        2-3_Bee_Loops_6_b: Powinieneś użyć 6 bloków wewnątrz pętli 'repeat', aby zakończyć.
      2-3 Bee Loops 7:
        2-3_Bee_Loops_7_a: Najpierw powinieneś się obrócić, a nie przesunąć na kolejne
          pole.
        2-3_Bee_Loops_7_b: 'Jeśli od razu widzisz pętli, spróbuj kodowania wiersz
          po wierszu, następnie zobacz czy nie znajdziesz wzorca.  '
      2-3 Maze 1:
        2-3_Maze_1_a: Aby użyć bloku 'Idź do przodu', przeciągnij go do obszaru roboczego
          i ułóż poniżej bloku 'po uruchomieniu'.
      2-3 Maze 16:
        2-3_Maze_16_a: Jeśli trudno Ci dostrzec wzorzec, spróbuj kodowania "krok po
          kroku", i dopiero wtedy zastąp elementy powtarzające się pętlą.
        2-3_Maze_16_b: Aby umieścić wiele bloków wewnątrz pętli 'powtórz', przeciągnij
          je do obszaru roboczego, a następnie połącz do bloku 'po uruchomieniu' i
          gotowe!
      2-3 Maze 6:
        2-3_Maze_6_a: Istnieją dwa sposoby, aby rozwiązać ten problem!
      2-3 Maze Loops 17:
        2-3_Maze_Loops_17_a: Jeśli trudno Ci dostrzec wzorzec, spróbuj kodowania "krok
          po kroku", i dopiero wtedy zastąp elementy powtarzające się pętlą.
        2-3_Maze_Loops_17_b: Czy początkowy kod został usunięty?  Kliknij przycisk
          'Zacznij od nowa', aby zacząć od początku!
      2-3 Maze Loops 18:
        2-3_Maze_Loops_18_a: Jeśli trudno Ci dostrzec wzorzec, spróbuj kodowania "krok
          po kroku", i dopiero wtedy zastąp elementy powtarzające się pętlą.
      2-3 Maze Loops 19:
        2-3_Maze_Loops_19_a: Jeśli utkniesz, spróbuj piać kod początkowo bez pętli
          i poszukaj wzorów.
        2-3_Maze_Loops_19_b: Umieszczenie jednej pętli 'powtórz' wewnątrz innej, może
          zmniejszyć liczbę używanych bloków.
      2-3 Maze Loops 20:
        2-3_Maze_Loops_20_a: Znajdź wzór schodków w tym labiryncie, aby dowiedzieć
          się, gdzie można użyć pętli.
      2-3 Maze Loops 21:
        2-3_Maze_Loops_21_a: Jeśli masz problem ze znalezieniem wzoru schodków, próbuj
          napisać kod linia po linii.
      4-5 Artist 1:
        4-5_Artist_1_a: "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
      4-5 Artist 11:
        4-5_Artist_11_a: W pętli upewnij się, że artysta przeskakuje do tyłu i do
          góry po każdej linii.
      4-5 Artist 3:
        4-5_Artist_3_a: "Jeśli pole kwiatowe ma wymiary 600 pikseli obwodu i dwa jego
          boki mają długość 200 pikseli, oto jak dowiedzieć się, co dodać do krótszych
          bokach: \n\n\\*\\* 600-200 - 200 = 200 \\*\\* \n\noznacza to, że oba krótsze
          boki mają 200 pikseli. \n\n\\*\\* Ile to 200 / 2? \\*\\*"
        4-5_Artist_3_b: Jeśli jeszcze trudno Ci dostrzec wzorzec, spróbuj kodowania
          "krok po kroku", i dopiero wtedy zastąp elementy powtarzające się pętlą.
      4-5 Artist 4:
        4-5_Artist_4_a: "Koło ma 360 stopni! \n\nWięc ile razy trzeba powtarzać ten
          kod (ruch o 1 stopień) aby narysować pełne koło?"
      4-5 Artist 5:
        4-5_Artist_5_a: |-
          Próby i błędy są dobrą metodą, ale możesz też rozwiązać ten problem, dzieląc kąt 90-stopniowy na trzy części.

          **90 / 3 = \_ \_ \_ \_ \_**
      4-5 Artist 7:
        4-5_Artist_7_a: 'Jaki kąt jest najmniejszy?  Pod jakim kątem stoi artysta? '
      4-5 Artist 8:
        4-5_Artist_8_a: "Dłuższe boki mają po 240 pikseli.  Oznacza to, że 2 krótsze
          boki mają razem: \n\n\\*\\* 800-240 - 240 = 320 \\*\\*\n\nIle to \\*\\*
          320/2 \\*\\*? "
        4-5_Artist_8_b: "Ten obrazek może być zrobiony na 2 metody!  \n\n-   Narysuj
          dwa prostokąty o długości **120** i wysokości **160**, z pokrywającym się
          bokiem\n\n-   Narysuj jeden prostokąt o długości **240** i wysokości **160**.
          Potem dodaj linię po środku."
      4-5 Artist 9:
        4-5_Artist_9_a: 'Jeżeli trójkąt jest równoboczny, to wszystkie boki i wszystkie
          kąty są takie same.  '
        4-5_Artist_9_b: Trzeba będzie narysować trzy trójkąty tej samej wielkości.
          Nie zapomnij, aby skoczyć na nową pozycję, po narysowaniu każdego z nich.
      4-5 Artist Assessment 1:
        4-5_Artist_Assessment_1_a: Musisz narysować tylko zewnętrzny trójkąt.
      4-5 Artist Patterns 11:
        4-5_Artist_Patterns_11_a: Jeśli okrąg ma 360 stopni i w każdej pętli następuje
          obrót o 3 stopnie, to ile razy trzeba użyć pętli narysować połowę pełnego
          okręgu?
      4-5 Artist Patterns 2:
        4-5_Artist_Patterns_2_a: Zwróć uwagę, że kwadraty mają bok o długości 20 pikseli,
          trzeba więc będzie przejść dodatkowe 20 pikseli przed rozpoczęciem rysowania
          następnej kratki.
      4-5 Artist Patterns 3:
        4-5_Artist_Patterns_3_a: Bądź ostrożny, kiedy rezygnujesz z jakiegoś bloku
          kodu, za każdym razem kiedy spróbujesz nowego z paska narzędzi.
        4-5_Artist_Patterns_3_b: Jeśli Twój kod staje się zbyt skomplikowany, można
          użyć przycisku "Zacznij od nowa"!
      4-5 Artist Patterns 5:
        4-5_Artist_Patterns_5_a: |-
          Teraz gdy artysta narysował diament, stoi w przeciwnym kierunku do miejsca, gdzie powinien zacząć następny.

          O ile stopni musi się obrócić, aby stać prosto?
      4-5 Bee Conditionals 4:
        remember_quantum: |-
          \*\* Pamiętaj: \*\*

          Ta plansza jest inna za każdym uruchomieniem.

          Będziesz potrzebował użyć bloku warunkowego ('if' lub ' if/else') do rozwiązania problemu.
      4-5 Bee Conditionals 5:
        remember_quantum: |-
          \*\* Pamiętaj: \*\*

          Ta plansza jest inna za każdym uruchomieniem.

          Będziesz potrzebował użyć bloku warunkowego ('if' lub ' if/else') do rozwiązania problemu.
      4-5 Bee Conditionals 6:
        4-5 Bee Conditionals 6_a: Można rozwiązać tę zagadkę, przy użyciu bloków już
          położonych na obszarze roboczym.  W jakiej kolejności powinny zostać wykorzystane?
        4-5 Bee Conditionals 6_b: Sprawdź, czy kwiat ma więcej nektaru niż \*\* 0
          \*\* przynajmniej \*\* 3 \*\* razy, aby rozwiązać tę zagadkę.
      4-5 Bee Debugging 1:
        4-5_Bee_Debugging_1_a: Jeśli zastanawiasz się, co nie działa, spróbuj uruchomić
          program, aby zobaczyć, gdzie jest problem.
      4-5 Bee Nested Loops Rows:
        4-5_Bee_Nested_Loops_Rows_a: Spróbuj, potraktować te puzzle jak długi prostokąt,
          gdzie pszczoła musi iść do przodu, a następnie skręcić w lewo kilka razy
          aby przejść do końca obwodu.
      4-5 Maze 10:
        4-5_Maze_10_a: "Jeśli z początku nie wiesz, jak używać pętli do rozwiązania
          zagadki, spróbuj małych kroków, a następnie szukaj wzorca. \n\nCo należy
          umieścić w pętli 'repeat', aby uzyskać krótszy kod?"
      4-5 Maze 4:
        4-5_Maze_4_a: Jeśli masz trudności z ustaleniem, gdzie umieścić pętle 'powtórz',
          spróbuj kodować po kroku i szukaj wzoru.
      4-5 Maze 5:
        4-5_Maze_5_a: Spróbuj użyć pętli'powtórz' zawsze tam, gdzie trzeba "iść do
          przodu ' więcej niż dwa kroki.
        4-5_Maze_5_b: Można użyć więcej niż jednej pętli 'powtórz' w tym labiryncie.
      4-5 Maze 6:
        4-5_Maze_6_a: |-
          Jeśli masz kłopot, wskaż sobie palcem drogę.\
          Czy jest to najkrótsza droga, którą można znaleźć?
      4-5 Maze 7:
        4-5_Maze_7_a: |-
          \*\* Chcesz otrzymać kod tak mały, jak może być? \*\*

          Szukaj powtarzających się elementów w bloków. Czy widzisz co się powtarza?\
          Zamiast powtarzać, zrób pętlę!
      4-5 Nested Loops 12:
        4-5_Nested_Loops_12_a: "\\*\\* 360 / 36 =? \\*\\*"
      4-5 Nested Loops 6:
        4-5_Nested_Loops_6_a: "Nie zapomnij skręcić na koniec wewnętrznej pętli. \n\nMożesz
          użyć 6 pętli do narysowania 6 trójkątów. \n\n\\*\\* 360 / 6 =? \\*\\*"
      4-5 Nested Loops 7:
        4-5_Nested_Loops_7_a: "Ten rysunek potrzebuje 10 pętli dając Ci ponad 360
          stopni. \n\n\\*\\* 360 / 10 =? \\*\\*"
      4-5 Nested Loops 8:
        4-5_Nested_Loops_8_a: "Musisz użyć pętli tego kształtu 6 razy aby obrócić
          się o 360 stopni. \n\n\\*\\* 360 / 6 =? \\*\\*"
      4-5 While Loops 8:
        4-5_While_Loops_8_a: Każdy element musi zawierać własną pętlę 'dopóki'.
      Course 4 Artist 11:
        Course_4_Artist_11_a: 'Połowa sześciokąta ma **długość 30** i wymaga obrotu
          w prawo o **60 stopni**.  '
        Course_4_Artist_11_b: '2/3 trójkąta ma bok o **długość 30** i wymaga obrotu
          w prawo o **120 stopni**. '
      Course 4 Artist 12:
        Course_4_Artist_12_a: 'Każdy powtarzany kształt jest kombinacją **połowy sześciokąta**,
          i **2/3 trójkąta**. '
        Course_4_Artist_12_b: 'Ten kształt jest prawie taki sam jak w poprzednim przykładzie,
          za wyjątkiem połowy sześciokąta, który jest nieco większy. '
        Course_4_Artist_12_c: |-
          1.  The first three lines are 60 pixels long and you need to turn 60 degrees.

          2.  The next two lines are 80 pixels long and you need to turn 120 degrees
        Course_4_Artist_12_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_colour" inline="true" id="draw-color">
                  <value name="COLOUR">
                    <block type="colour_picker">
                      <title name="COLOUR">#843179</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_repeat">
                      <title name="TIMES">6</title>
                      <statement name="DO">
                        <block type="controls_repeat">
                          <title name="TIMES">3</title>
                          <statement name="DO">
                            <block type="draw_move_by_constant">
                              <title name="DIR">moveForward</title>
                              <title name="VALUE">60</title>
                              <next>
                                <block type="draw_turn_by_constant">
                                  <title name="DIR">turnRight</title>
                                  <title name="VALUE">60</title>
                                </block>
                              </next>
                            </block>
                          </statement>
                          <next>
                            <block type="controls_repeat">
                              <title name="TIMES">2</title>
                              <statement name="DO">
                                <block type="draw_move_by_constant">
                                  <title name="DIR">moveForward</title>
                                  <title name="VALUE">80</title>
                                  <next>
                                    <block type="draw_turn_by_constant">
                                      <title name="DIR">turnRight</title>
                                      <title name="VALUE">120</title>
                                    </block>
                                  </next>
                                </block>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      Course 4 Artist 6:
        Course_4_Artist_6_a: To 3 trójkąty wpisane w pełne koło (360 stopni)... ile
          razy 3 mieści się w 360?
      Course 4 Artist 8a:
        Course_4_Artist_8a: "Potrzebujesz pomocy o ile należy się obrócić? \n\nTo
          3 trójkąty w pełnym obrocie o 360 stopni.\n\nIle razy 3 mieści się w 360?"
      Course 4 Artist 9:
        Course_4_Artist_9_a: "Potrzebujesz pomocy o ile należy się obrócić? \nIle
          to jest 360, podzielone przez 10?"
      Course 4 Artist Binary Free Play 2b:
        Course_4_Artist_Binary_Free_Play_2b_a: "Ten kod używa dwóch 'pętli'. \n\nJedna
          liczy od 1 do 'counter', kolejna odlicza w dół od 'counter' do 1."
        Course_4_Artist_Binary_Free_Play_2b_b: Każda 'pętla' ma trzy powtórzenia.  Pierwsza
          rysuje od lewej od góry linie, druga wykonuje zejście do środka i trzecia
          rysuje linie na samym dole pola.
        Course_4_Artist_Binary_Free_Play_2b_c: W każdym powtórzeniu potrzebujesz "licznika"
          dla jedynek oraz "podwójnego licznika" dla zer.
        Course_4_Artist_Binary_Free_Play_2b_d: |-
          **Solution:**

          <xml><block type="when_run" deletable="false" movable="false"><next><block type="controls_for_counter" inline="true"><mutation counter="counter"></mutation><value name="FROM"><block type="math_number"><title name="NUM">1</title></block></value><value name="TO"><block type="math_number"><title name="NUM">8</title></block></value><value name="BY"><block type="math_number"><title name="NUM">1</title></block></value><statement name="DO"><block type="controls_repeat_ext" inline="true"><value name="TIMES"><block type="variables_get"><title name="VAR">licznik</title></block></value><statement name="DO"><block type="procedures_callnoreturn" inline="true"><mutation name="draw"><arg name="binary"></arg></mutation><value name="ARG0"><block type="text"><title name="TEXT">1</title></block></value></block></statement><next><block type="controls_repeat_ext" inline="true"><value name="TIMES"><block type="math_arithmetic" inline="true"><title name="OP">MINUS</title><value name="A"><block type="math_number"><title name="NUM">16</title></block></value><value name="B"><block type="math_arithmetic" inline="true"><title name="OP">POMNÓŻ</title><value name="A"><block type="variables_get"><title name="VAR">licznik</title></block></value><value name="B"><block type="math_number"><title name="NUM">2</title></block></value></block></value></block></value><statement name="DO"><block type="procedures_callnoreturn" inline="true"><mutation name="draw"><arg name="binary"></arg></mutation><value name="ARG0"><block type="text"><title name="TEXT">0</title></block></value></block></statement><next><block type="controls_repeat_ext" inline="true"><value name="TIMES"><block type="variables_get"><title name="VAR">licznik</title></block></value><statement name="DO"><block type="procedures_callnoreturn" inline="true"><mutation name="draw"><arg name="binary"></arg></mutation><value name="ARG0"><block type="text"><title name="TEXT">1</title></block></value></block></statement></block></next></block></next></block></statement><next><block type="controls_for_counter" inline="true"><mutation counter="counter"></mutation><value name="FROM"><block type="math_number"><title name="NUM">8</title></block></value><value name="TO"><block type="math_number"><title name="NUM">1</title></block></value><value name="BY"><block type="math_number"><title name="NUM">1</title></block></value><statement name="DO"><block type="controls_repeat_ext" inline="true"><value name="TIMES"><block type="variables_get"><title name="VAR">licznik</title></block></value><statement name="DO"><block type="procedures_callnoreturn" inline="true"><mutation name="draw"><arg name="binary"></arg></mutation><value name="ARG0"><block type="text"><title name="TEXT">1</title></block></value></block></statement><next><block type="controls_repeat_ext" inline="true"><value name="TIMES"><block type="math_arithmetic" inline="true"><title name="OP">MINUS</title><value name="A"><block type="math_number"><title name="NUM">16</title></block></value><value name="B"><block type="math_arithmetic" inline="true"><title name="OP">POMNÓŻ</title><value name="A"><block type="variables_get"><title name="VAR">licznik</title></block></value><value name="B"><block type="math_number"><title name="NUM">2</title></block></value></block></value></block></value><statement name="DO"><block type="procedures_callnoreturn" inline="true"><mutation name="draw"><arg name="binary"></arg></mutation><value name="ARG0"><block type="text"><title name="TEXT">0</title></block></value></block></statement><next><block type="controls_repeat_ext" inline="true"><value name="TIMES"><block type="variables_get"><title name="VAR">licznik</title></block></value><statement name="DO"><block type="procedures_callnoreturn" inline="true"><mutation name="draw"><arg name="binary"></arg></mutation><value name="ARG0"><block type="text"><title name="TEXT">1</title></block></value></block></statement></block></next></block></next></block></statement></block></next></block></next></block></xml>
      Course 4 Artist For Loops 11:
        Course_4_Artist_For_Loops_11_a: "The turn angle will change with each shape!
          \ \n\nUse the math block to enter 360 divided by the number of sides the
          shape has to get the angle right. "
      Course 4 Artist For Loops 11a:
        Course_4_Artist_For_Loops_11a_a: '360 divided by the number of sides a shape
          has is the number of degrees you''ll need to turn. '
        Course_4_Artist_For_Loops_11a_b: 'Each time, you will need to move forward
          by 10 times the length of the current number of sides. '
      Course 4 Artist For Loops 3:
        Course_4_Artist_For_Loops_3_a: To have the `for` loop drive your movement,
          make sure that you're using `counter` as your distance.
      Course 4 Artist For Loops 4:
        Course_4_Artist_For_Loops_4_a: |-
          **Jaka jest najmniejsza liczba, którą będziesz potrzebował?
          Jak jest największa liczba?
          O jaką wielkość zmienia się ta liczba za każdym razem?**

          Te pytania musisz zadać aby wypełnić puste pola w pętli `for`.
      Course 4 Artist For Loops Challenge:
        Course_4_Artist_For_Loops_Challenge_a: Największy kształt ma 19 ścian. Najmniejszy
          tylko 2.
        Course_4_Artist_For_Loops_Challenge_b: Pętla `for` zwiększa się o 2 za każdym
          razem.
      Course 4 Artist For Loops inspire:
        Course_4_Artist_For_Loops_inspire_a: Założenie tego kodu jest takie samo jak
          rozwiązanie poprzedniej zagadki z puzzlami... z kilkoma zmianami.
        Course_4_Artist_For_Loops_inspire_b: Spróbuj pętli `for` która liczy od 3
          do 10 z krokiem równym 1.
        Course_4_Artist_For_Loops_inspire_c: Wewnątrz pętli `for` są dwa powtórzenia
          pętli powtarzającej się, ale drugie powtórzenie idzie w przeciwnym kierunku.
        Course_4_Artist_For_Loops_inspire_d: "**Solution:**  \n\n<xml>\n  <block type=\"when_run\"
          deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_for_counter\"
          inline=\"true\" movable=\"false\">\n      <mutation counter=\"counter\"></mutation>\n
          \       <value name=\"FROM\">\n          <block type=\"math_number\">\n
          \           <title name=\"NUM\">3</title>\n          </block>\n        </value>\n
          \       <value name=\"TO\">\n          <block type=\"math_number\">\n            <title
          name=\"NUM\">10</title>\n          </block>\n        </value>\n        <value
          name=\"BY\">\n          <block type=\"math_number\">\n            <title
          name=\"NUM\">1</title>\n          </block>\n        </value>\n        <statement
          name=\"DO\">\n          <block type=\"controls_repeat_ext\" inline=\"true\">\n
          \           <value name=\"TIMES\">\n              <block type=\"math_arithmetic\"
          inline=\"true\">\n                <title name=\"OP\">MINUS</title>\n                <value
          name=\"A\">\n                  <block type=\"variables_get\">\n                    <title
          name=\"VAR\">counter</title>\n                  </block>\n                </value>\n
          \               <value name=\"B\">\n                  <block type=\"math_number\">\n
          \                   <title name=\"NUM\">1</title>\n                  </block>\n
          \               </value>\n              </block>\n            </value>\n
          \           <statement name=\"DO\">\n              <block type=\"draw_move\"
          inline=\"true\">\n                <title name=\"DIR\">moveForward</title>\n
          \               <value name=\"VALUE\">\n                  <block type=\"math_number\">\n
          \                   <title name=\"NUM\">40</title>\n                  </block>\n
          \               </value>\n                <next>\n                  <block
          type=\"draw_turn\" inline=\"true\">\n                    <title name=\"DIR\">turnRight</title>\n
          \                   <value name=\"VALUE\">\n                      <block
          type=\"math_arithmetic\" inline=\"true\">\n                        <title
          name=\"OP\">DIVIDE</title>\n                        <value name=\"A\">\n
          \                         <block type=\"math_number\">\n                            <title
          name=\"NUM\">360</title>\n                          </block>\n                        </value>\n
          \                       <value name=\"B\">\n                          <block
          type=\"variables_get\">\n                            <title name=\"VAR\">counter</title>\n
          \                         </block>\n                        </value>\n                      </block>\n
          \                   </value>\n                  </block>\n                </next>\n
          \             </block>\n            </statement>\n            <next>\n              <block
          type=\"controls_repeat_ext\" inline=\"true\">\n                <value name=\"TIMES\">\n
          \                 <block type=\"math_arithmetic\" inline=\"true\">\n                    <title
          name=\"OP\">MINUS</title>\n                    <value name=\"A\">\n                      <block
          type=\"variables_get\">\n                        <title name=\"VAR\">counter</title>\n
          \                     </block>\n                    </value>\n                    <value
          name=\"B\">\n                      <block type=\"math_number\">\n                        <title
          name=\"NUM\">1</title>\n                      </block>\n                    </value>\n
          \                 </block>\n                </value>\n                <statement
          name=\"DO\">\n                  <block type=\"draw_move\" inline=\"true\">\n
          \                   <title name=\"DIR\">moveForward</title>\n                    <value
          name=\"VALUE\">\n                      <block type=\"math_number\">\n                        <title
          name=\"NUM\">40</title>\n                      </block>\n                    </value>\n
          \                   <next>\n                      <block type=\"draw_turn\"
          inline=\"true\">\n                        <title name=\"DIR\">turnLeft</title>\n
          \                       <value name=\"VALUE\">\n                          <block
          type=\"math_arithmetic\" inline=\"true\">\n                            <title
          name=\"OP\">DIVIDE</title>\n                            <value name=\"A\">\n
          \                             <block type=\"math_number\">\n                                <title
          name=\"NUM\">360</title>\n                              </block>\n                            </value>\n
          \                           <value name=\"B\">\n                              <block
          type=\"variables_get\">\n                                <title name=\"VAR\">counter</title>\n
          \                             </block>\n                            </value>\n
          \                         </block>\n                        </value>\n                      </block>\n
          \                   </next>\n                  </block>\n                </statement>\n
          \             </block>\n            </next>\n          </block>\n        </statement>\n
          \     </block>\n    </next>\n  </block>\n</xml>"
      Course 4 Artist Functions Inspiration:
        Course_4_Artist_Functions_Inspiration_a: Zacznij z kodem z poprzedniej zagadki
          i dodaj dodatkowe `turn right` o 3 stopnie wewnątrz powtarzającej się pętli.
        Course_4_Artist_Functions_Inspiration_b: Spróbuj obrócić o więcej niż 90 stopni
          poza `repeat loop`, ale wciąż wewnątrz pętli `for loop`.
        Course_4_Artist_Functions_Inspiration_c: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_for_counter" inline="true">
                <mutation counter="counter"></mutation>
                  <value name="FROM">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <value name="TO">
                    <block type="math_number">
                      <title name="NUM">14</title>
                    </block>
                  </value>
                  <value name="BY">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="draw_colour" inline="true" id="draw-color">
                      <value name="COLOUR">
                        <block type="colour_random"/>
                      </value>
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="variables_get">
                              <title name="VAR">counter</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="procedures_callnoreturn">
                            <mutation name="draw a square 20"></mutation>
                              <next>
                                <block type="jump_by_constant">
                                  <title name="DIR">jumpForward</title>
                                  <title name="VALUE">20</title>
                                  <next>
                                    <block type="draw_turn_by_constant">
                                      <title name="DIR">turnRight</title>
                                      <title name="VALUE">3</title>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </statement>
                          <next>
                            <block type="draw_turn_by_constant">
                              <title name="DIR">turnLeft</title>
                              <title name="VALUE">100</title>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
            </xml>
      Course 4 Artist Functions challenge:
        Course_4_Artist_Functions_challenge_a: Aby zrozumieć jak wykorzystywać funkcje,
          należy sobie uświadomić, których potrzebujemy, a których nie.
        Course_4_Artist_Functions_challenge_b: Wykorzystaj `for loop`, następnie użyj
          jej zmiennej licznika wewnątrz zagnieżdżonej pętli `repeat`.
        Course_4_Artist_Functions_challenge_c: Podczas każdej iteracji powinieneś
          narysować kwadrat a potem przejść dalej.
        Course_4_Artist_Functions_challenge_d: Musisz się obrócić o 90 stopni w lewo
          poza Twoim `repeat`, ale cały czas wewnątrz `for loop`.
      Course 4 Artist Inspire:
        Course_4_Artist_Inspire_a: After you complete one square, try jumping forward
          half of its length before turning and making another.
        Course_4_Artist_Inspire_b: Każdy kwadrat i przejście jest powtarzane czterokrotnie
          (przy wykorzystaniu skrętu w lewo) aby stworzyć jednostkę podobną do pinwheel.
        Course_4_Artist_Inspire_c: Each pinwheel is also repeated four times, with
          a right turn of **360/sides**.
        Course_4_Artist_Inspire_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_colour" inline="true" id="draw-color">
                  <value name="COLOUR">
                    <block type="colour_picker">
                      <title name="COLOUR">#843179</title>
                    </block>
                  </value>
                  <next>
                    <block type="variables_set" inline="false">
                      <title name="VAR">sides</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">4</title>
                        </block>
                      </value>
                      <next>
                        <block type="variables_set" inline="false">
                          <title name="VAR">length</title>
                          <value name="VALUE">
                            <block type="math_arithmetic" inline="true">
                              <title name="OP">DIVIDE</title>
                              <value name="A">
                                <block type="math_number">
                                  <title name="NUM">200</title>
                                </block>
                              </value>
                              <value name="B">
                                <block type="variables_get">
                                  <title name="VAR">sides</title>
                                </block>
                              </value>
                            </block>
                          </value>
                          <next>
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="variables_get">
                                  <title name="VAR">sides</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="controls_repeat_ext" inline="true">
                                  <value name="TIMES">
                                    <block type="variables_get">
                                      <title name="VAR">sides</title>
                                    </block>
                                  </value>
                                  <statement name="DO">
                                    <block type="controls_repeat_ext" inline="true">
                                      <value name="TIMES">
                                        <block type="variables_get">
                                          <title name="VAR">sides</title>
                                        </block>
                                      </value>
                                      <statement name="DO">
                                        <block type="draw_move" inline="true">
                                          <title name="DIR">moveForward</title>
                                          <value name="VALUE">
                                            <block type="variables_get">
                                              <title name="VAR">length</title>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="draw_turn" inline="true">
                                              <title name="DIR">turnRight</title>
                                              <value name="VALUE">
                                                <block type="math_arithmetic" inline="true">
                                                  <title name="OP">DIVIDE</title>
                                                  <value name="A">
                                                    <block type="math_number">
                                                      <title name="NUM">360</title>
                                                    </block>
                                                  </value>
                                                  <value name="B">
                                                    <block type="variables_get">
                                                      <title name="VAR">sides</title>
                                                    </block>
                                                  </value>
                                                </block>
                                              </value>
                                            </block>
                                          </next>
                                        </block>
                                      </statement>
                                      <next>
                                        <block type="jump" inline="true">
                                          <title name="DIR">jumpForward</title>
                                          <value name="VALUE">
                                            <block type="math_arithmetic" inline="true">
                                              <title name="OP">DIVIDE</title>
                                              <value name="A">
                                                <block type="variables_get">
                                                  <title name="VAR">length</title>
                                                </block>
                                              </value>
                                              <value name="B">
                                                <block type="math_number">
                                                  <title name="NUM">2</title>
                                                </block>
                                              </value>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="draw_turn" inline="true">
                                              <title name="DIR">turnLeft</title>
                                              <value name="VALUE">
                                                <block type="math_arithmetic" inline="true">
                                                  <title name="OP">DIVIDE</title>
                                                  <value name="A">
                                                    <block type="math_number">
                                                      <title name="NUM">360</title>
                                                    </block>
                                                  </value>
                                                  <value name="B">
                                                    <block type="variables_get">
                                                      <title name="VAR">sides</title>
                                                    </block>
                                                  </value>
                                                </block>
                                              </value>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </statement>
                                  <next>
                                    <block type="jump" inline="true">
                                      <title name="DIR">jumpForward</title>
                                      <value name="VALUE">
                                        <block type="variables_get">
                                          <title name="VAR">length</title>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn" inline="true">
                                          <title name="DIR">turnRight</title>
                                          <value name="VALUE">
                                            <block type="math_arithmetic" inline="true">
                                              <title name="OP">DIVIDE</title>
                                              <value name="A">
                                                <block type="math_number">
                                                  <title name="NUM">360</title>
                                                </block>
                                              </value>
                                              <value name="B">
                                                <block type="variables_get">
                                                  <title name="VAR">sides</title>
                                                </block>
                                              </value>
                                            </block>
                                          </value>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      Course 4 Artist Vars 13:
        Course_4_Artist_Vars_13_a: Potrzebujesz dwóch powtórzeń pętli (jedna s środku
          drugiej) obie powtarzające się `sides` razy.
        Course_4_Artist_Vars_13_b: "Wewnętrzna powtarzająca się pętla rysuje ośmiokąt
          (obracając się w lewo) \n\nNastępnie, musisz iść do przodu i obrócić się
          w prawo, tylko w zewnętrznej pętli."
        Course_4_Artist_Vars_13_c: Aby dopasować kształt do stałego rozmiaru podczas
          zmiany ilości boków, użyj bloku matematycznego aby podzielić długość w pikselach
          przez liczbę boków.
      Course 4 Artist Vars 6:
        Course_4_Artist_Vars_6_a: Aby narysować zwykły wielokąt, obróć się o **\*360/sides**
          za każdym razem.
      Course 4 Artist Vars 8:
        Course_4_Artist_Vars_8_a: Jeśli podzielisz swoją startową długość przez liczbę
          boków, długość każdego boku się skróci gdy liczba boków będzie rosnąć.
      Course 4 Bee Params 7:
        notice_pattern: 'Czy widzisz wzór zmiany liczby nektaru? '
        count_with_for: Zauważ, że ilość nektaru wzrasta wraz z krokami. Jakiego bloku
          możesz użyć aby zrobić to samo wiele razy podczas odliczania?
      Course 4 Bee Params 8:
        Course_4_Bee_Params_8_a: Za każdym razem można poprosić o ilość miodu i nektaru.
          Jeśli czegoś nie ma, liczba może wynosić 0.
      Course 4 Play Lab Params 2:
        Course_4_Play_Lab_Params_2_a: Będziesz musiał nacisnąć "edytuj" na funkcji
          skoku i zaktualizował go, aby używał parametru `height`.
      Course 4 Play Lab Vars 2:
        Course_4_Play_Lab_Vars_2_a: Upewnij się, aby ustawić wartość `prędkość_psa`
          większą od `prędkość_kota`.
      Course 4 Play Labs For Loops 2:
        Course_4_Play_Labs_For_Loops_2_a: Co byś dodał do pętli `for`, aby za każdym
          razem pominąć liczby parzyste?
      Course 4 Playlab For Loops 4b:
        Course_4_Playlab_For_Loops_4b_a: Flagi są oddalone o około 330 pikseli od
          postaci.
        Course_4_Playlab_For_Loops_4b_b: W jaki sposób można zrobić, aby każda postać
          osiągnęła 330 pikseli w takiej samej ilości kroków z innymi wartościami
          początkowymi i końcowymi?
        Course_4_Playlab_For_Loops_4b_c: Pamiętaj, że nie ma znaczenia ile postaci
          przejdzie przez flagę w ostatnim kroku, tak długo, jak każda postać będzie
          potrzebowała taką samą ilość kroków, aby tą flagę przejść.
      Course 4 Playlab For Loops 5b:
        Course_4_Playlab_For_Loops_5b_a: Postacie są około 175 pikseli od centrum.
        Course_4_Playlab_For_Loops_5b_b: Pamiętaj, że następny krok postaci będzie
          większy niż poprzednim razem, ponieważ licznik cały czas się powiększa.
      Course 4 SCF 1:
        Course_4_SCF_1_a: Każdy sześciokąt ma boki długości 40 pikseli.
        Course_4_SCF_1_b: Pomiędzy każdymi sześciokątami jest 120 pikseli odległości
          w każdym kierunku.
        Course_4_SCF_1_c: "Zanim narysujesz drugi rząd sześciokątów, musisz się obrócić
          w prawo o 60 stopni i ruszyć na przód o 40 pikseli. \n\nJak będziesz w poprawnym
          pionowym położeniu, musisz odwrócić swojego artystę i wrócić do tyłu o 320
          pikseli."
        Course_4_SCF_1_d: "Zanim narysujesz trzeci rząd sześciokątów, musisz się obrócić
          w prawo o 60 stopni i przejść 40 pikseli do przodu. \n\nJak będziesz w prawidłowej
          pozycji w pionie, musisz zawrócić artystę i wrócić 440 pikseli (120 pikseli
          dalej niż Twoja `shift down/forward` funkcja). "
        Course_4_SCF_1_e: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat_ext" inline="true">
                  <value name="TIMES">
                    <block type="math_number">
                      <title name="NUM">2</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="procedures_callnoreturn">
                    <mutation name="draw a line of hexagons"></mutation>
                      <next>
                        <block type="procedures_callnoreturn">
                        <mutation name="shift down/forward"></mutation>
                          <next>
                            <block type="procedures_callnoreturn">
                            <mutation name="draw a line of hexagons"></mutation>
                              <next>
                                <block type="procedures_callnoreturn">
                                <mutation name="shift down/backward"></mutation>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
            <block type="procedures_defnoreturn">
            <mutation></mutation>
              <title name="NAME">draw a hexagon</title>
              <statement name="STACK">
                <block type="controls_repeat_ext" inline="true">
                  <value name="TIMES">
                    <block type="math_number">
                      <title name="NUM">6</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="draw_move" inline="true">
                      <title name="DIR">moveForward</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">40</title>
                        </block>
                      </value>
                      <next>
                        <block type="draw_turn" inline="true">
                          <title name="DIR">turnRight</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">60</title>
                            </block>
                          </value>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </statement>
            </block>
            <block type="procedures_defnoreturn">
            <mutation></mutation>
              <title name="NAME">shift down/backward</title>
              <statement name="STACK">
                <block type="draw_turn" inline="true">
                  <title name="DIR">turnRight</title>
                  <value name="VALUE">
                    <block type="math_number">
                      <title name="NUM">60</title>
                    </block>
                  </value>
                  <next>
                    <block type="jump" inline="true">
                      <title name="DIR">jumpForward</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">40</title>
                        </block>
                      </value>
                      <next>
                        <block type="draw_turn" inline="true">
                          <title name="DIR">turnLeft</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">60</title>
                            </block>
                          </value>
                          <next>
                            <block type="jump" inline="true">
                              <title name="DIR">jumpBackward</title>
                              <value name="VALUE">
                                <block type="math_number">
                                  <title name="NUM">440</title>
                                </block>
                              </value>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </statement>
            </block>
            <block type="procedures_defnoreturn">
            <mutation></mutation>
              <title name="NAME">draw a line of hexagons</title>
              <statement name="STACK">
                <block type="controls_repeat_ext" inline="true">
                  <value name="TIMES">
                    <block type="math_number">
                      <title name="NUM">3</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="procedures_callnoreturn">
                    <mutation name="draw a hexagon"></mutation>
                      <next>
                        <block type="jump" inline="true">
                          <title name="DIR">jumpForward</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">120</title>
                            </block>
                          </value>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </statement>
            </block>
            <block type="procedures_defnoreturn">
            <mutation></mutation>
              <title name="NAME">shift down/forward</title>
              <statement name="STACK">
                <block type="draw_turn" inline="true">
                  <title name="DIR">turnRight</title>
                  <value name="VALUE">
                    <block type="math_number">
                      <title name="NUM">60</title>
                    </block>
                  </value>
                  <next>
                    <block type="jump" inline="true">
                      <title name="DIR">jumpForward</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">40</title>
                        </block>
                      </value>
                      <next>
                        <block type="draw_turn" inline="true">
                          <title name="DIR">turnLeft</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">60</title>
                            </block>
                          </value>
                          <next>
                            <block type="jump" inline="true">
                              <title name="DIR">jumpBackward</title>
                              <value name="VALUE">
                                <block type="math_number">
                                  <title name="NUM">320</title>
                                </block>
                              </value>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </statement>
            </block>
          </xml>
      Course 4 SCF 1a:
        Course_4_SCF_1a_a: Pamiętaj swoje funkcje z etapu 16.
        Course_4_SCF_1a_b: "Look at this path as your main route:  \n\n![](https://images.code.org/1c3feab70af706409b3a05af4dc83c2e-image-1469726967858.png)"
        Course_4_SCF_1a_c: Rozważ wykorzystanie `for loop`. Nie dla kroków, ale dla
          parametru funkcji.
        Course_4_SCF_1a_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false" uservisible="false" y="14">
              <next>
                <block type="variables_set" inline="false" uservisible="false">
                  <title name="VAR">left</title>
                  <value name="VALUE">
                    <block type="math_number" uservisible="false">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="variables_set" inline="false" uservisible="false">
                      <title name="VAR">right</title>
                      <value name="VALUE">
                        <block type="math_number" uservisible="false">
                          <title name="NUM">0</title>
                        </block>
                      </value>
                    </block>
                  </next>
                </block>
              </next>
            </block>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_for" inline="true">
                  <title name="VAR">counter</title>
                  <value name="FROM">
                    <block type="math_number">
                      <title name="NUM">3</title>
                    </block>
                  </value>
                  <value name="TO">
                    <block type="math_number">
                      <title name="NUM">21</title>
                    </block>
                  </value>
                  <value name="BY">
                    <block type="math_number">
                      <title name="NUM">3</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="maze_move">
                      <title name="DIR">moveForward</title>
                      <next>
                        <block type="maze_if">
                          <title name="DIR">isPathLeft</title>
                          <statement name="DO">
                            <block type="procedures_callnoreturn" inline="false">
                              <mutation name="get nectar">
                              <arg name="dir"></arg>
                              <arg name="counter"></arg>
                              </mutation>
                              <value name="ARG0">
                                <block type="variables_get">
                                  <title name="VAR">left</title>
                                </block>
                              </value>
                              <value name="ARG1">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                            </block>
                          </statement>
                          <next>
                            <block type="maze_turn">
                              <title name="DIR">turnRight</title>
                              <next>
                                <block type="maze_move">
                                  <title name="DIR">moveForward</title>
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnLeft</title>
                                      <next>
                                        <block type="maze_if">
                                          <title name="DIR">isPathRight</title>
                                          <statement name="DO">
                                            <block type="procedures_callnoreturn" inline="false">
                                              <mutation name="get nectar">
                                              <arg name="dir"></arg>
                                              <arg name="counter"></arg>
                                              </mutation>
                                              <value name="ARG0">
                                                <block type="variables_get">
                                                  <title name="VAR">right</title>
                                                </block>
                                              </value>
                                              <value name="ARG1">
                                                <block type="variables_get">
                                                  <title name="VAR">counter</title>
                                                </block>
                                              </value>
                                            </block>
                                          </statement>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
            <block type="procedures_defnoreturn" editable="false" usercreated="true">
              <mutation>
              <arg name="dir"></arg>
              <arg name="counter"></arg>
              </mutation>
              <title name="NAME">get nectar</title>
              <statement name="STACK">
                <block type="controls_if" inline="false">
                <mutation else="1"></mutation>
                  <value name="IF0">
                    <block type="logic_compare" inline="true" movable="false">
                      <title name="OP">EQ</title>
                      <value name="A">
                        <block type="parameters_get">
                          <title name="VAR">dir</title>
                        </block>
                      </value>
                      <value name="B">
                        <block type="variables_get">
                          <title name="VAR">left</title>
                        </block>
                      </value>
                    </block>
                  </value>
                  <statement name="DO0">
                    <block type="maze_turn">
                      <title name="DIR">turnLeft</title>
                    </block>
                  </statement>
                  <statement name="ELSE">
                    <block type="maze_turn">
                      <title name="DIR">turnRight</title>
                    </block>
                  </statement>
                  <next>
                    <block type="controls_repeat_ext" inline="true">
                      <value name="TIMES">
                        <block type="math_number">
                          <title name="NUM">3</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="maze_move">
                          <title name="DIR">moveForward</title>
                        </block>
                      </statement>
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="parameters_get">
                              <title name="VAR">counter</title>
                            </block>
                          </value>
                          <statement name="DO">
                          <block type="maze_nectar"></block>
                          </statement>
                          <next>
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="math_number">
                                  <title name="NUM">3</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="maze_move">
                                  <title name="DIR">moveBackward</title>
                                </block>
                              </statement>
                              <next>
                                <block type="controls_if" inline="false">
                                <mutation else="1"></mutation>
                                  <value name="IF0">
                                    <block type="logic_compare" inline="true" movable="false">
                                      <title name="OP">EQ</title>
                                      <value name="A">
                                        <block type="parameters_get">
                                          <title name="VAR">dir</title>
                                        </block>
                                      </value>
                                      <value name="B">
                                        <block type="variables_get">
                                          <title name="VAR">left</title>
                                        </block>
                                      </value>
                                    </block>
                                  </value>
                                  <statement name="DO0">
                                    <block type="maze_turn">
                                      <title name="DIR">turnRight</title>
                                    </block>
                                  </statement>
                                  <statement name="ELSE">
                                    <block type="maze_turn">
                                      <title name="DIR">turnLeft</title>
                                    </block>
                                  </statement>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </statement>
            </block>
          </xml>
      Course 4 SCF 1b:
        Course_4_SCF_1b_a: |-
          Zauważ, że kształt każdego z punktów miodowych jest podobny.

          Jest to dobre miejsce, na funkcję!
        Course_4_SCF_1b_b: "Look at this idea for how the bee might travel:  \n\n![](https://images.code.org/996ab4a2de6048cbb99b84c56cc4ad61-image-1469726859769.png)"
        Course_4_SCF_1b_c: Rozważ użycie `for loop` do odległości przemieszania się
          pszczoły.
        Course_4_SCF_1b_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_for" inline="true">
                  <title name="VAR">counter</title>
                  <value name="FROM">
                    <block type="math_number">
                      <title name="NUM">2</title>
                    </block>
                  </value>
                  <value name="TO">
                    <block type="math_number">
                      <title name="NUM">4</title>
                    </block>
                  </value>
                  <value name="BY">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="procedures_callnoreturn">
                    <mutation name="make honey up and over"></mutation>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnLeft</title>
                          <next>
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="maze_move">
                                  <title name="DIR">moveForward</title>
                                </block>
                              </statement>
                              <next>
                                <block type="maze_turn">
                                  <title name="DIR">turnRight</title>
                                  <next>
                                    <block type="controls_repeat_ext" inline="true">
                                      <value name="TIMES">
                                        <block type="variables_get">
                                          <title name="VAR">counter</title>
                                        </block>
                                      </value>
                                      <statement name="DO">
                                        <block type="maze_move">
                                          <title name="DIR">moveForward</title>
                                        </block>
                                      </statement>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
            <block type="procedures_defnoreturn" editable="false" usercreated="true">
            <mutation></mutation>
              <title name="NAME">make honey up and over</title>
              <statement name="STACK">
                <block type="maze_move">
                  <title name="DIR">moveForward</title>
                  <next>
                    <block type="maze_turn">
                      <title name="DIR">turnRight</title>
                      <next>
                        <block type="maze_move">
                          <title name="DIR">moveForward</title>
                          <next>
                            <block type="maze_honey">
                              <next>
                                <block type="maze_honey">
                                  <next>
                                    <block type="maze_move">
                                      <title name="DIR">moveBackward</title>
                                      <next>
                                        <block type="maze_turn">
                                          <title name="DIR">turnLeft</title>
                                          <next>
                                            <block type="maze_move">
                                              <title name="DIR">moveBackward</title>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </statement>
            </block>
          </xml>
      Course 4 SCF 2:
        Course_4_SCF_2_a: Każdy sześciokąt ma boki długości 40 pikseli.
        Course_4_SCF_2_b: There is a 136 pixel jump between each octagon in each horizontal
          line.
        Course_4_SCF_2_c: "Before you draw the second row of octagons, you need to
          turn right by 45 degrees and jump forward 96 pixels.  \n\nOnce you're in
          the correct vertical location, you have to turn your artist back again and
          jump backward 408 pixels. "
        Course_4_SCF_2_d: "Notice that because there are fewer octagons in the even
          rows, you don't have to jump back any further to get to the starting place
          for the odd rows.  \n\nThis means you can use the same function for all
          rows."
        Course_4_SCF_2_e: |-
          **Solution:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat_ext" inline="true">
                  <value name="TIMES">
                    <block type="math_number">
                      <title name="NUM">2</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="procedures_callnoreturn" inline="false">
                      <mutation name="draw octagons">
                      <arg name="numOctagons"></arg>
                      </mutation>
                      <value name="ARG0">
                        <block type="math_number">
                          <title name="NUM">2</title>
                        </block>
                      </value>
                      <next>
                        <block type="procedures_callnoreturn">
                        <mutation name="shift down"></mutation>
                          <next>
                            <block type="procedures_callnoreturn" inline="false">
                              <mutation name="draw octagons">
                              <arg name="numOctagons"></arg>
                              </mutation>
                              <value name="ARG0">
                                <block type="math_number">
                                  <title name="NUM">3</title>
                                </block>
                              </value>
                              <next>
                                <block type="procedures_callnoreturn">
                                <mutation name="shift down"></mutation>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                  <next>
                    <block type="procedures_callnoreturn" inline="false">
                      <mutation name="draw octagons">
                      <arg name="numOctagons"></arg>
                      </mutation>
                      <value name="ARG0">
                        <block type="math_number">
                          <title name="NUM">2</title>
                        </block>
                      </value>
                    </block>
                  </next>
                </block>
              </next>
            </block>
            <block type="procedures_defnoreturn" editable="false">
              <mutation>
              <arg name="numOctagons"></arg>
              </mutation>
              <title name="NAME">draw octagons</title>
              <statement name="STACK">
                <block type="controls_repeat_ext" inline="true">
                  <value name="TIMES">
                    <block type="parameters_get">
                      <title name="VAR">numOctagons</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="procedures_callnoreturn">
                    <mutation name="draw an octagon"></mutation>
                      <next>
                        <block type="jump" inline="true">
                          <title name="DIR">jumpForward</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">136</title>
                            </block>
                          </value>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </statement>
            </block>
            <block type="procedures_defnoreturn" editable="false">
            <mutation></mutation>
              <title name="NAME">draw an octagon</title>
              <statement name="STACK">
                <block type="controls_repeat_ext" inline="true">
                  <value name="TIMES">
                    <block type="math_number">
                      <title name="NUM">8</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="draw_move" inline="true">
                      <title name="DIR">moveForward</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">40</title>
                        </block>
                      </value>
                      <next>
                        <block type="draw_turn" inline="true">
                          <title name="DIR">turnRight</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">45</title>
                            </block>
                          </value>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </statement>
            </block>
            <block type="procedures_defnoreturn" editable="false">
            <mutation></mutation>
              <title name="NAME">shift down</title>
              <statement name="STACK">
                <block type="draw_turn" inline="true">
                  <title name="DIR">turnRight</title>
                  <value name="VALUE">
                    <block type="math_number">
                      <title name="NUM">45</title>
                    </block>
                  </value>
                  <next>
                    <block type="jump" inline="true">
                      <title name="DIR">jumpForward</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">96</title>
                        </block>
                      </value>
                      <next>
                        <block type="draw_turn" inline="true">
                          <title name="DIR">turnLeft</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">45</title>
                            </block>
                          </value>
                          <next>
                            <block type="jump" inline="true">
                              <title name="DIR">jumpBackward</title>
                              <value name="VALUE">
                                <block type="math_number">
                                  <title name="NUM">408</title>
                                </block>
                              </value>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </statement>
            </block>
          </xml>
      Course 4 SCF 3:
        Course_4_SCF_3_a: "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
        Course_4_SCF_3_b: 'This is a series of octagons with sides that are `counter`
          pixels long. '
        Course_4_SCF_3_c: 'Each octagon is called from inside a `for` loop that goes
          from 200 down to 2 by 2. '
        Course_4_SCF_3_d: 'Nie zapomnij obrócić się o 22.5 stopni pod koniec każdej
          iteracji. '
        Course_4_SCF_3_e: Zarówno kolor każdego ośmiokąta jak i szerokość pióra są
          sterowane przez zmienną 'licznik'.
        Course_4_SCF_3_f: |-
          **Solution:**

          <xml>
            <block type="procedures_defnoreturn" editable="false">
              <mutation>
              <arg name="length"></arg>
              </mutation>
              <title name="NAME">draw an octagon</title>
              <statement name="STACK">
                <block type="controls_repeat_ext" inline="true">
                  <value name="TIMES">
                    <block type="math_number">
                      <title name="NUM">8</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="draw_move" inline="true">
                      <title name="DIR">moveForward</title>
                      <value name="VALUE">
                        <block type="parameters_get">
                          <title name="VAR">length</title>
                        </block>
                      </value>
                      <next>
                        <block type="draw_turn" inline="true">
                          <title name="DIR">turnRight</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">45</title>
                            </block>
                          </value>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </statement>
            </block>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_for_counter" inline="true">
                <mutation counter="counter"></mutation>
                  <value name="FROM">
                    <block type="math_number">
                      <title name="NUM">200</title>
                    </block>
                  </value>
                  <value name="TO">
                    <block type="math_number">
                      <title name="NUM">2</title>
                    </block>
                  </value>
                  <value name="BY">
                    <block type="math_number">
                      <title name="NUM">2</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="draw_colour" inline="true" id="draw-color">
                      <value name="COLOUR">
                        <block type="colour_rgb" inline="false">
                          <value name="RED">
                            <block type="math_arithmetic" inline="true">
                              <title name="OP">MINUS</title>
                              <value name="A">
                                <block type="math_number">
                                  <title name="NUM">255</title>
                                </block>
                              </value>
                              <value name="B">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                            </block>
                          </value>
                          <value name="GREEN">
                            <block type="variables_get">
                              <title name="VAR">counter</title>
                            </block>
                          </value>
                          <value name="BLUE">
                            <block type="math_arithmetic" inline="true">
                              <title name="OP">MULTIPLY</title>
                              <value name="A">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <value name="B">
                                <block type="math_number">
                                  <title name="NUM">2</title>
                                </block>
                              </value>
                            </block>
                          </value>
                        </block>
                      </value>
                      <next>
                        <block type="draw_width" inline="false">
                          <value name="WIDTH">
                            <block type="math_arithmetic" inline="true">
                              <title name="OP">DIVIDE</title>
                              <value name="A">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <value name="B">
                                <block type="math_number">
                                  <title name="NUM">4</title>
                                </block>
                              </value>
                            </block>
                          </value>
                          <next>
                            <block type="procedures_callnoreturn" inline="false">
                              <mutation name="draw an octagon">
                              <arg name="length"></arg>
                              </mutation>
                              <value name="ARG0">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_turn" inline="true">
                                  <title name="DIR">turnLeft</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">22.5</title>
                                    </block>
                                  </value>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCFL 1:
        Course_4_SCFL_1_a: Spójrz na tę opcję dla ruchu:! \[] (<https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png>)
        Course_4_SCFL_1_b: 'Spróbuj użyć dwóch pętlach "dla": jednej dla wznoszenia
          się by zebrać nektar, a drugiej dla schodzenia i robienia miodu.'
        Course_4_SCFL_1_c: Zauważ, że jedna pętla "dla" potrzebuje wewnątrz wielu
          zwykłych pętli, które powtarzaj się 'licznik' razy, aby utworzyć wzór wznoszących
          się schodów. Inna pętla "dla" potrzebuje tylko jednej zwykłej pętli, aby
          zrobić 'licznik' miodu.
        Course_4_SCFL_1_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_for" inline="true">
                  <title name="VAR">counter</title>
                  <value name="FROM">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <value name="TO">
                    <block type="math_number">
                      <title name="NUM">3</title>
                    </block>
                  </value>
                  <value name="BY">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="controls_repeat_ext" inline="true">
                      <value name="TIMES">
                        <block type="variables_get">
                          <title name="VAR">counter</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="maze_moveForward"/>
                      </statement>
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="variables_get">
                              <title name="VAR">counter</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="maze_nectar"/>
                          </statement>
                          <next>
                            <block type="maze_turn">
                              <title name="DIR">turnLeft</title>
                              <next>
                                <block type="controls_repeat_ext" inline="true">
                                  <value name="TIMES">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <statement name="DO">
                                    <block type="maze_moveForward"/>
                                  </statement>
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnRight</title>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_turn">
                      <title name="DIR">turnRight</title>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                          <next>
                            <block type="controls_for" inline="true">
                              <title name="VAR">counter</title>
                              <value name="FROM">
                                <block type="math_number">
                                  <title name="NUM">2</title>
                                </block>
                              </value>
                              <value name="TO">
                                <block type="math_number">
                                  <title name="NUM">10</title>
                                </block>
                              </value>
                              <value name="BY">
                                <block type="math_number">
                                  <title name="NUM">2</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="maze_moveForward">
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnLeft</title>
                                      <next>
                                        <block type="maze_moveForward">
                                          <next>
                                            <block type="maze_turn">
                                              <title name="DIR">turnRight</title>
                                              <next>
                                                <block type="controls_repeat_ext" inline="true">
                                                  <value name="TIMES">
                                                    <block type="variables_get">
                                                      <title name="VAR">counter</title>
                                                    </block>
                                                  </value>
                                                  <statement name="DO">
                                                    <block type="maze_honey"/>
                                                  </statement>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCFL 1a:
        Course_4_SCFL_1a_a: You may have to travel farther overall to use the smallest
          number of blocks.
        Course_4_SCFL_1a_b: Spójrz na tę opcję dla ruchu:! \[] (<https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png>)
        Course_4_SCFL_1a_c: A `for loop` will help you execute the same pattern, but
          with a changing number of steps.  Notice that the number of steps needed
          decreases from 7 to 5 by 1.
        Course_4_SCFL_1a_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_for" inline="true">
                  <title name="VAR">counter</title>
                  <value name="FROM">
                    <block type="math_number">
                      <title name="NUM">7</title>
                    </block>
                  </value>
                  <value name="TO">
                    <block type="math_number">
                      <title name="NUM">5</title>
                    </block>
                  </value>
                  <value name="BY">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="controls_repeat_ext" inline="true">
                      <value name="TIMES">
                        <block type="math_number">
                          <title name="NUM">2</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="maze_moveForward"/>
                      </statement>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnLeft</title>
                          <next>
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="maze_moveForward"/>
                              </statement>
                              <next>
                                <block type="maze_turn">
                                  <title name="DIR">turnLeft</title>
                                  <next>
                                    <block type="controls_repeat_ext" inline="true">
                                      <value name="TIMES">
                                        <block type="math_number">
                                          <title name="NUM">2</title>
                                        </block>
                                      </value>
                                      <statement name="DO">
                                        <block type="maze_moveForward"/>
                                      </statement>
                                      <next>
                                        <block type="maze_turn">
                                          <title name="DIR">turnLeft</title>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCFL 1b:
        Course_4_SCFL_1b_a: Spróbuj użyć pętli "dla".
        Course_4_SCFL_1b_b: Spójrz na tę opcję dla ruchu:! \[] (<https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png>)
        Course_4_SCFL_1b_c: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_for" inline="true">
                  <title name="VAR">counter</title>
                  <value name="FROM">
                    <block type="math_number">
                      <title name="NUM">3</title>
                    </block>
                  </value>
                  <value name="TO">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <value name="BY">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="controls_repeat_ext" inline="true">
                      <value name="TIMES">
                        <block type="variables_get">
                          <title name="VAR">counter</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="maze_moveForward"/>
                      </statement>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnLeft</title>
                          <next>
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="maze_moveForward"/>
                              </statement>
                              <next>
                                <block type="maze_turn">
                                  <title name="DIR">turnRight</title>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCFL 2:
        Course_4_SCFL_2_a: Spójrz na tę opcję dla ruchu:! \[] (<https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png>)
        Course_4_SCFL_2_b: Zauważ, że istnieją trzy czynności podczas każdego kroku
          pętli `for`, która przechodzisz, aby wykonać jakąś akcję dla konkretnego
          obiektu.
        Course_4_SCFL_2_c: Podczas każdej iteracji pętli `for`, liczba każdego elementu
          odpowiada w jakiś sposób zmiennej `counter`.
        Course_4_SCFL_2_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_for" inline="true">
                  <title name="VAR">counter</title>
                  <value name="FROM">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <value name="TO">
                    <block type="math_number">
                      <title name="NUM">4</title>
                    </block>
                  </value>
                  <value name="BY">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="maze_moveForward">
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="variables_get">
                              <title name="VAR">counter</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="maze_nectar"/>
                          </statement>
                          <next>
                            <block type="maze_turn">
                              <title name="DIR">turnRight</title>
                              <next>
                                <block type="maze_moveForward">
                                  <next>
                                    <block type="maze_moveForward">
                                      <next>
                                        <block type="controls_repeat_ext" inline="true">
                                          <value name="TIMES">
                                            <block type="math_arithmetic" inline="true">
                                              <title name="OP">MULTIPLY</title>
                                              <value name="A">
                                                <block type="variables_get">
                                                  <title name="VAR">counter</title>
                                                </block>
                                              </value>
                                              <value name="B">
                                                <block type="math_number">
                                                  <title name="NUM">3</title>
                                                </block>
                                              </value>
                                            </block>
                                          </value>
                                          <statement name="DO">
                                            <block type="maze_honey"/>
                                          </statement>
                                          <next>
                                            <block type="maze_turn">
                                              <title name="DIR">turnLeft</title>
                                              <next>
                                                <block type="maze_moveForward">
                                                  <next>
                                                    <block type="maze_moveForward">
                                                      <next>
                                                        <block type="maze_turn">
                                                          <title name="DIR">turnRight</title>
                                                          <next>
                                                            <block type="controls_repeat_ext" inline="true">
                                                              <value name="TIMES">
                                                                <block type="math_arithmetic" inline="true">
                                                                  <title name="OP">POWER</title>
                                                                  <value name="A">
                                                                    <block type="math_number">
                                                                      <title name="NUM">2</title>
                                                                    </block>
                                                                  </value>
                                                                  <value name="B">
                                                                    <block type="variables_get">
                                                                      <title name="VAR">counter</title>
                                                                    </block>
                                                                  </value>
                                                                </block>
                                                              </value>
                                                              <statement name="DO">
                                                                <block type="maze_nectar"/>
                                                              </statement>
                                                            </block>
                                                          </next>
                                                        </block>
                                                      </next>
                                                    </block>
                                                  </next>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCFL 3:
        Course_4_SCFL_3_a: "`pen width` wynosi 1. Pierwszy kwadrat ma boki o szerokości
          50 pikseli, kolejny kwadrat jest o 50 pikseli szerszy od poprzedniego."
        Course_4_SCFL_3_b: The opacity on the brush is always `counter`/2.
        Course_4_SCFL_3_c: After you make each square, don't forget to jump backward,
          turn, jump again, then turn back!
        Course_4_SCFL_3_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="draw_colour" inline="true" id="draw-color">
                      <value name="COLOUR">
                        <block type="colour_picker">
                          <title name="COLOUR">#0000cd</title>
                        </block>
                      </value>
                      <next>
                        <block type="controls_for_counter" inline="true">
                        <mutation counter="counter"></mutation>
                          <value name="FROM">
                            <block type="math_number">
                              <title name="NUM">50</title>
                            </block>
                          </value>
                          <value name="TO">
                            <block type="math_number">
                              <title name="NUM">350</title>
                            </block>
                          </value>
                          <value name="BY">
                            <block type="math_number">
                              <title name="NUM">50</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="alpha" inline="true" id="alpha">
                              <value name="VALUE">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">DIVIDE</title>
                                  <value name="A">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="math_number">
                                      <title name="NUM">2</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                              <next>
                                <block type="controls_repeat_ext" inline="true">
                                  <value name="TIMES">
                                    <block type="math_number">
                                      <title name="NUM">4</title>
                                    </block>
                                  </value>
                                  <statement name="DO">
                                    <block type="draw_move" inline="true">
                                      <title name="DIR">moveForward</title>
                                      <value name="VALUE">
                                        <block type="variables_get">
                                          <title name="VAR">counter</title>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn" inline="true">
                                          <title name="DIR">turnRight</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                        </block>
                                      </next>
                                    </block>
                                  </statement>
                                  <next>
                                    <block type="jump" inline="true">
                                      <title name="DIR">jumpBackward</title>
                                      <value name="VALUE">
                                        <block type="math_number">
                                          <title name="NUM">25</title>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn" inline="true">
                                          <title name="DIR">turnRight</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="jump" inline="true">
                                              <title name="DIR">jumpBackward</title>
                                              <value name="VALUE">
                                                <block type="math_number">
                                                  <title name="NUM">25</title>
                                                </block>
                                              </value>
                                              <next>
                                                <block type="draw_turn" inline="true">
                                                  <title name="DIR">turnLeft</title>
                                                  <value name="VALUE">
                                                    <block type="math_number">
                                                      <title name="NUM">90</title>
                                                    </block>
                                                  </value>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </statement>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCFL 4:
        Course_4_SCFL_4_a: The color change happens using the `set color with red,
          green, blue` block.  Red is always the value of `counter`, green is always
          `255 - counter`, and blue remains constant at 255 exactly.
        Course_4_SCFL_4_b: Każdy kształt jest kwadratem, którego długość boków wynosi
          `counter`, zaczynając od 5 pikseli, zwiększając każdorazowo o 5 pikseli
          aż do 200 pikseli.
        Course_4_SCFL_4_c: Artysta obraca się o 15 stopni pomiędzy każdym kwadratem.
        Course_4_SCFL_4_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_for_counter" inline="true">
                    <mutation counter="counter"></mutation>
                      <value name="FROM">
                        <block type="math_number">
                          <title name="NUM">5</title>
                        </block>
                      </value>
                      <value name="TO">
                        <block type="math_number">
                          <title name="NUM">200</title>
                        </block>
                      </value>
                      <value name="BY">
                        <block type="math_number">
                          <title name="NUM">5</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="draw_colour" inline="true" id="draw-color">
                          <value name="COLOUR">
                            <block type="colour_rgb" inline="false">
                              <value name="RED">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <value name="GREEN">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">MINUS</title>
                                  <value name="A">
                                    <block type="math_number">
                                      <title name="NUM">255</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                              <value name="BLUE">
                                <block type="math_number">
                                  <title name="NUM">255</title>
                                </block>
                              </value>
                            </block>
                          </value>
                          <next>
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="math_number">
                                  <title name="NUM">4</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="draw_move" inline="true">
                                  <title name="DIR">moveForward</title>
                                  <value name="VALUE">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="draw_turn_by_constant">
                                      <title name="DIR">turnRight</title>
                                      <title name="VALUE">90</title>
                                    </block>
                                  </next>
                                </block>
                              </statement>
                              <next>
                                <block type="draw_turn" inline="true">
                                  <title name="DIR">turnLeft</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">15</title>
                                    </block>
                                  </value>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCFL 6:
        Course_4_SCFL_6_a: Zmiana koloru odbywa się poprzez użycie bloku `ustaw kolor
          z kolorem czerwonym, zielonym, niebieskim`. Czerwony ma stałą wartość 255,
          zielony jest zawsze wartością `licznik`, a niebieski to `255-licznik`.
        Course_4_SCFL_6_b: Kod jest dużo prostszy niż Ci się wydaje. Po prostu ustaw
          kolor wewnątrz `pętla_for`, rusz do przodu, później się obróć.
        Course_4_SCFL_6_c: "`pętla for` zmienia się od 5 do 250 z krokiem równym 2. "
        Course_4_SCFL_6_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_for_counter" inline="true">
                    <mutation counter="counter"></mutation>
                      <value name="FROM">
                        <block type="math_number">
                          <title name="NUM">5</title>
                        </block>
                      </value>
                      <value name="TO">
                        <block type="math_number">
                          <title name="NUM">250</title>
                        </block>
                      </value>
                      <value name="BY">
                        <block type="math_number">
                          <title name="NUM">2</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="draw_colour" inline="true" id="draw-color">
                          <value name="COLOUR">
                            <block type="colour_rgb" inline="false">
                              <value name="RED">
                                <block type="math_number">
                                  <title name="NUM">255</title>
                                </block>
                              </value>
                              <value name="GREEN">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <value name="BLUE">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">MINUS</title>
                                  <value name="A">
                                    <block type="math_number">
                                      <title name="NUM">255</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                            </block>
                          </value>
                          <next>
                            <block type="draw_move" inline="true">
                              <title name="DIR">moveForward</title>
                              <value name="VALUE">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_turn" inline="true">
                                  <title name="DIR">turnRight</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">80</title>
                                    </block>
                                  </value>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCFL 7:
        Course_4_SCFL_7_a: The color change happens using the `set color with red,
          green, blue` block.  Red is set to `counter`. Green is  `255 - counter`,
          and blue is set constant at 255.
        Course_4_SCFL_7_b: 'Rysunek jest tworzony z wykorzystaniem dwóch podobnych
          `pętli for`. Jedna iteruje od 5 do 200 z krokiem 2, kolejną od 200 do 5
          z krokiem 2. '
        Course_4_SCFL_7_c: Wewnątrz każdej `for loop` przechodzisz do przodu o 5 pikseli
          zanim obracasz się o `360 / counter`. Zanim to zrobisz, nie zapomnij ustawić
          grubości pędzla na `counter`!
        Course_4_SCFL_7_d: Będziesz musiał obrócić się o 225 stopni w lewo pomiędzy
          dwiema `for loops`.
        Course_4_SCFL_7_e: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="alpha" inline="true" id="alpha">
                  <value name="VALUE">
                    <block type="math_number_dropdown">
                      <title name="NUM" config="100,90,80,70,60,50,40,30,20,10,0">20</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_for_counter" inline="true">
                    <mutation counter="counter"></mutation>
                      <value name="FROM">
                        <block type="math_number">
                          <title name="NUM">5</title>
                        </block>
                      </value>
                      <value name="TO">
                        <block type="math_number">
                          <title name="NUM">200</title>
                        </block>
                      </value>
                      <value name="BY">
                        <block type="math_number">
                          <title name="NUM">2</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="draw_width" inline="false">
                          <value name="WIDTH">
                            <block type="variables_get">
                              <title name="VAR">counter</title>
                            </block>
                          </value>
                          <next>
                            <block type="draw_colour" inline="true" id="draw-color">
                              <value name="COLOUR">
                                <block type="colour_rgb" inline="false">
                                  <value name="RED">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <value name="GREEN">
                                    <block type="math_arithmetic" inline="true">
                                      <title name="OP">MINUS</title>
                                      <value name="A">
                                        <block type="math_number">
                                          <title name="NUM">255</title>
                                        </block>
                                      </value>
                                      <value name="B">
                                        <block type="variables_get">
                                          <title name="VAR">counter</title>
                                        </block>
                                      </value>
                                    </block>
                                  </value>
                                  <value name="BLUE">
                                    <block type="math_number">
                                      <title name="NUM">255</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                              <next>
                                <block type="draw_move" inline="true">
                                  <title name="DIR">moveForward</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">5</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="draw_turn" inline="true">
                                      <title name="DIR">turnLeft</title>
                                      <value name="VALUE">
                                        <block type="math_arithmetic" inline="true">
                                          <title name="OP">DIVIDE</title>
                                          <value name="A">
                                            <block type="math_number">
                                              <title name="NUM">360</title>
                                            </block>
                                          </value>
                                          <value name="B">
                                            <block type="variables_get">
                                              <title name="VAR">counter</title>
                                            </block>
                                          </value>
                                        </block>
                                      </value>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                      <next>
                        <block type="draw_turn" inline="true">
                          <title name="DIR">turnLeft</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">225</title>
                            </block>
                          </value>
                          <next>
                            <block type="controls_for_counter" inline="true">
                            <mutation counter="counter"></mutation>
                              <value name="FROM">
                                <block type="math_number">
                                  <title name="NUM">200</title>
                                </block>
                              </value>
                              <value name="TO">
                                <block type="math_number">
                                  <title name="NUM">5</title>
                                </block>
                              </value>
                              <value name="BY">
                                <block type="math_number">
                                  <title name="NUM">2</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="draw_width" inline="false">
                                  <value name="WIDTH">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="draw_colour" inline="true" id="draw-color">
                                      <value name="COLOUR">
                                        <block type="colour_rgb" inline="false">
                                          <value name="RED">
                                            <block type="variables_get">
                                              <title name="VAR">counter</title>
                                            </block>
                                          </value>
                                          <value name="GREEN">
                                            <block type="math_arithmetic" inline="true">
                                              <title name="OP">MINUS</title>
                                              <value name="A">
                                                <block type="math_number">
                                                  <title name="NUM">255</title>
                                                </block>
                                              </value>
                                              <value name="B">
                                                <block type="variables_get">
                                                  <title name="VAR">counter</title>
                                                </block>
                                              </value>
                                            </block>
                                          </value>
                                          <value name="BLUE">
                                            <block type="math_number">
                                              <title name="NUM">255</title>
                                            </block>
                                          </value>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_move" inline="true">
                                          <title name="DIR">moveForward</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">5</title>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="draw_turn" inline="true">
                                              <title name="DIR">turnRight</title>
                                              <value name="VALUE">
                                                <block type="math_arithmetic" inline="true">
                                                  <title name="OP">DIVIDE</title>
                                                  <value name="A">
                                                    <block type="math_number">
                                                      <title name="NUM">360</title>
                                                    </block>
                                                  </value>
                                                  <value name="B">
                                                    <block type="variables_get">
                                                      <title name="VAR">counter</title>
                                                    </block>
                                                  </value>
                                                </block>
                                              </value>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCV 1:
        Course_4_SCV_1_a: 'Zmienne są pomocne, ponieważ można do nich dodawać w każdym
          kroku pętli. '
        Course_4_SCV_1_b: Łamigłówka ma jedną pętle, która tworzy wielokąt, jedną
          pętle, która powtarza wielokąt `boki` razy, następnie jeszcze jedną pętle,
          która powtarza to wszystko po dodaniu wartości 5 do `sides`.
        Course_4_SCV_1_c: Użycie zmiennej dla `boki` oraz dla `długość` czyni kod
          czystszym, ponieważ możesz zapętlać ten sam kod wiele razy, zamiast tworzyć
          nowej kopi dla każdego zestawu liczb.
        Course_4_SCV_1_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="variables_set" inline="false">
                      <title name="VAR">length</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">500</title>
                        </block>
                      </value>
                      <next>
                        <block type="variables_set" inline="false">
                          <title name="VAR">sides</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">0</title>
                            </block>
                          </value>
                          <next>
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="math_number">
                                  <title name="NUM">2</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="draw_colour" inline="true" id="draw-color">
                                  <value name="COLOUR">
                                    <block type="colour_random"/>
                                  </value>
                                  <next>
                                    <block type="variables_set" inline="false">
                                      <title name="VAR">sides</title>
                                      <value name="VALUE">
                                        <block type="math_arithmetic" inline="true">
                                          <title name="OP">ADD</title>
                                          <value name="A">
                                            <block type="variables_get">
                                              <title name="VAR">sides</title>
                                            </block>
                                          </value>
                                          <value name="B">
                                            <block type="math_number">
                                              <title name="NUM">5</title>
                                            </block>
                                          </value>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="controls_repeat_ext" inline="true">
                                          <value name="TIMES">
                                            <block type="variables_get">
                                              <title name="VAR">sides</title>
                                            </block>
                                          </value>
                                          <statement name="DO">
                                            <block type="controls_repeat_ext" inline="true">
                                              <value name="TIMES">
                                                <block type="variables_get">
                                                  <title name="VAR">sides</title>
                                                </block>
                                              </value>
                                              <statement name="DO">
                                                <block type="draw_move" inline="true">
                                                  <title name="DIR">moveForward</title>
                                                  <value name="VALUE">
                                                    <block type="math_arithmetic" inline="true">
                                                      <title name="OP">DIVIDE</title>
                                                      <value name="A">
                                                        <block type="variables_get">
                                                          <title name="VAR">length</title>
                                                        </block>
                                                      </value>
                                                      <value name="B">
                                                        <block type="variables_get">
                                                          <title name="VAR">sides</title>
                                                        </block>
                                                      </value>
                                                    </block>
                                                  </value>
                                                  <next>
                                                    <block type="draw_turn" inline="true">
                                                      <title name="DIR">turnLeft</title>
                                                      <value name="VALUE">
                                                        <block type="math_arithmetic" inline="true">
                                                          <title name="OP">DIVIDE</title>
                                                          <value name="A">
                                                            <block type="math_number">
                                                              <title name="NUM">360</title>
                                                            </block>
                                                          </value>
                                                          <value name="B">
                                                            <block type="variables_get">
                                                              <title name="VAR">sides</title>
                                                            </block>
                                                          </value>
                                                        </block>
                                                      </value>
                                                    </block>
                                                  </next>
                                                </block>
                                              </statement>
                                              <next>
                                                <block type="draw_turn" inline="true">
                                                  <title name="DIR">turnRight</title>
                                                  <value name="VALUE">
                                                    <block type="math_arithmetic" inline="true">
                                                      <title name="OP">DIVIDE</title>
                                                      <value name="A">
                                                        <block type="math_number">
                                                          <title name="NUM">360</title>
                                                        </block>
                                                      </value>
                                                      <value name="B">
                                                        <block type="variables_get">
                                                          <title name="VAR">sides</title>
                                                        </block>
                                                      </value>
                                                    </block>
                                                  </value>
                                                </block>
                                              </next>
                                            </block>
                                          </statement>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCV 2:
        Course_4_SCV_2_a: |-
          The completed image is made up of 10 of these "flowers":\
          ![](https://images.code.org/bac2a606dfa59c00409294499540267d-image-1469641972385.png)

          ...which are made up of 10 of these decagons:\
          ![](https://images.code.org/1e15f278c9c1606f90a2490ec3a94eb4-image-1469642051512.png)
        Course_4_SCV_2_b: 'This design uses nested loops (three deep). All loops run
          `sides` times. '
        Course_4_SCV_2_c: Artysta skręca w lewo kiedy tworzy każdy dziesięciobok,
          w obu pozostałych pętlach skręca w prawo.
        Course_4_SCV_2_d: Aby zapobiec wyciągnięciu wszystkich 10 płatów "kwiatów"
          w tym samym miejscu. upewnij się, że przechodzisz dalej o `długość`/`boki`
          zanim obrócisz się o 360/`boki` stopni, w najbardziej zewnętrznej pętli.
        Course_4_SCV_2_e: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="variables_set" inline="false">
                      <title name="VAR">length</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">400</title>
                        </block>
                      </value>
                      <next>
                        <block type="variables_set" inline="false">
                          <title name="VAR">sides</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">10</title>
                            </block>
                          </value>
                          <next>
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="variables_get">
                                  <title name="VAR">sides</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="draw_colour" inline="true" id="draw-color">
                                  <value name="COLOUR">
                                    <block type="colour_picker">
                                      <title name="COLOUR">#ff0000</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="controls_repeat_ext" inline="true">
                                      <value name="TIMES">
                                        <block type="variables_get">
                                          <title name="VAR">sides</title>
                                        </block>
                                      </value>
                                      <statement name="DO">
                                        <block type="controls_repeat_ext" inline="true">
                                          <value name="TIMES">
                                            <block type="variables_get">
                                              <title name="VAR">sides</title>
                                            </block>
                                          </value>
                                          <statement name="DO">
                                            <block type="draw_move" inline="true">
                                              <title name="DIR">moveForward</title>
                                              <value name="VALUE">
                                                <block type="math_arithmetic" inline="true">
                                                  <title name="OP">DIVIDE</title>
                                                  <value name="A">
                                                    <block type="variables_get">
                                                      <title name="VAR">length</title>
                                                    </block>
                                                  </value>
                                                  <value name="B">
                                                    <block type="variables_get">
                                                      <title name="VAR">sides</title>
                                                    </block>
                                                  </value>
                                                </block>
                                              </value>
                                              <next>
                                                <block type="draw_turn" inline="true">
                                                  <title name="DIR">turnLeft</title>
                                                  <value name="VALUE">
                                                    <block type="math_arithmetic" inline="true">
                                                      <title name="OP">DIVIDE</title>
                                                      <value name="A">
                                                        <block type="math_number">
                                                          <title name="NUM">360</title>
                                                        </block>
                                                      </value>
                                                      <value name="B">
                                                        <block type="variables_get">
                                                          <title name="VAR">sides</title>
                                                        </block>
                                                      </value>
                                                    </block>
                                                  </value>
                                                </block>
                                              </next>
                                            </block>
                                          </statement>
                                          <next>
                                            <block type="draw_turn" inline="true">
                                              <title name="DIR">turnRight</title>
                                              <value name="VALUE">
                                                <block type="math_arithmetic" inline="true">
                                                  <title name="OP">DIVIDE</title>
                                                  <value name="A">
                                                    <block type="math_number">
                                                      <title name="NUM">360</title>
                                                    </block>
                                                  </value>
                                                  <value name="B">
                                                    <block type="variables_get">
                                                      <title name="VAR">sides</title>
                                                    </block>
                                                  </value>
                                                </block>
                                              </value>
                                            </block>
                                          </next>
                                        </block>
                                      </statement>
                                      <next>
                                        <block type="jump" inline="true">
                                          <title name="DIR">jumpForward</title>
                                          <value name="VALUE">
                                            <block type="math_arithmetic" inline="true">
                                              <title name="OP">DIVIDE</title>
                                              <value name="A">
                                                <block type="variables_get">
                                                  <title name="VAR">length</title>
                                                </block>
                                              </value>
                                              <value name="B">
                                                <block type="variables_get">
                                                  <title name="VAR">sides</title>
                                                </block>
                                              </value>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="draw_turn" inline="true">
                                              <title name="DIR">turnRight</title>
                                              <value name="VALUE">
                                                <block type="math_arithmetic" inline="true">
                                                  <title name="OP">DIVIDE</title>
                                                  <value name="A">
                                                    <block type="math_number">
                                                      <title name="NUM">360</title>
                                                    </block>
                                                  </value>
                                                  <value name="B">
                                                    <block type="variables_get">
                                                      <title name="VAR">sides</title>
                                                    </block>
                                                  </value>
                                                </block>
                                              </value>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCV 3:
        Course_4_SCV_3_a: 'Użyj bloku matematycznego do dodawania i odejmowania punktów
          w zmiennej `punkty` kiedy postacie się zderzają. '
        Course_4_SCV_3_b: You can change the parameter for how far you move your sprite
          each time one of the arrow keys is pressed.
        Course_4_SCV_3_c: |-
          **Solution:**

          <xml><block type="when_run"><next><block type="variables_set" inline="false"><title name="VAR">points</title><value name="VALUE"><block type="math_number"><title name="NUM">0</title></block></value></block></next></block><block type="studio_whenArrow"><title name="VALUE">up</title><next><block type="studio_moveDistanceParams" inline="true"><title name="SPRITE">0</title><title name="DIR">1</title><value name="DISTANCE"><block type="math_number"><title name="NUM">25</title></block></value></block></next></block><block type="studio_whenArrow"><title name="VALUE">down</title><next><block type="studio_moveDistanceParams" inline="true"><title name="SPRITE">0</title><title name="DIR">4</title><value name="DISTANCE"><block type="math_number"><title name="NUM">25</title></block></value></block></next></block><block type="studio_whenArrow"><title name="VALUE">left</title><next><block type="studio_moveDistanceParams" inline="true"><title name="SPRITE">0</title><title name="DIR">8</title><value name="DISTANCE"><block type="math_number"><title name="NUM">25</title></block></value></block></next></block><block type="studio_whenArrow"><title name="VALUE">right</title><next><block type="studio_moveDistanceParams" inline="true"><title name="SPRITE">0</title><title name="DIR">2</title><value name="DISTANCE"><block type="math_number"><title name="NUM">25</title></block></value></block></next></block><block type="studio_whenSpriteCollided"><title name="SPRITE1">0</title><title name="SPRITE2">1</title><next><block type="variables_set" inline="false"><title name="VAR">points</title><value name="VALUE"><block type="math_arithmetic" inline="true"><title name="OP">ADD</title><value name="A"><block type="variables_get"><title name="VAR">points</title></block></value><value name="B"><block type="math_number"><title name="NUM">2</title></block></value></block></value></block></next></block><block type="studio_whenSpriteCollided"><title name="SPRITE1">0</title><title name="SPRITE2">2</title><next><block type="variables_set" inline="false"><title name="VAR">points</title><value name="VALUE"><block type="math_arithmetic" inline="true"><title name="OP">ADD</title><value name="A"><block type="variables_get"><title name="VAR">points</title></block></value><value name="B"><block type="math_number"><title name="NUM">3</title></block></value></block></value></block></next></block>
          <block type="studio_whenSpriteCollided">
              <title name="SPRITE1">1</title>
              <title name="SPRITE2">2</title>
              <next>
                <block type="variables_set" inline="false">
                  <title name="VAR">points</title>
                  <value name="VALUE">
                    <block type="math_arithmetic" inline="true">
                      <title name="OP">MINUS</title>
                      <value name="A">
                        <block type="variables_get">
                          <title name="VAR">points</title>
                        </block>
                      </value>
                      <value name="B">
                        <block type="math_number">
                          <title name="NUM">1</title>
                        </block>
                      </value>
                    </block>
                  </value>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCV 4:
        Course_4_SCV_4_a: Pomogą Ci w tym 3 zmienne. Jedna jako ilość nektaru, jedna
          dla ilości miodu, oraz jedna dla określenia, jak daleko powinna poruszać
          się pszczoła w każdej iteracji.
        Course_4_SCV_4_b: 'Bardzo pomocne będzie użycie trzech pętli wewnątrz pętli
          głównej. Jedna dla poruszania się do przodu, jedna do zbierania ilości nektaru
          oraz jedna do robienia miodu. '
        Course_4_SCV_4_c: Spójrz na tę opcję dla ruchu:! \[] (<https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png>)
        Course_4_SCV_4_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="variables_set" inline="false">
                  <title name="VAR">honey</title>
                  <value name="VALUE">
                    <block type="math_number">
                      <title name="NUM">4</title>
                    </block>
                  </value>
                  <next>
                    <block type="variables_set" inline="false">
                      <title name="VAR">nectar</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">6</title>
                        </block>
                      </value>
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="math_number">
                              <title name="NUM">5</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">MINUS</title>
                                  <value name="A">
                                    <block type="variables_get">
                                      <title name="VAR">nectar</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="math_number">
                                      <title name="NUM">1</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="maze_moveForward"/>
                              </statement>
                              <next>
                                <block type="controls_repeat_ext" inline="true">
                                  <value name="TIMES">
                                    <block type="variables_get">
                                      <title name="VAR">nectar</title>
                                    </block>
                                  </value>
                                  <statement name="DO">
                                    <block type="maze_nectar"/>
                                  </statement>
                                  <next>
                                    <block type="maze_moveForward">
                                      <next>
                                        <block type="controls_repeat_ext" inline="true">
                                          <value name="TIMES">
                                            <block type="variables_get">
                                              <title name="VAR">honey</title>
                                            </block>
                                          </value>
                                          <statement name="DO">
                                            <block type="maze_honey"/>
                                          </statement>
                                          <next>
                                            <block type="maze_moveForward">
                                              <next>
                                                <block type="maze_turn">
                                                  <title name="DIR">turnRight</title>
                                                  <next>
                                                    <block type="variables_set" inline="false">
                                                      <title name="VAR">honey</title>
                                                      <value name="VALUE">
                                                        <block type="math_arithmetic" inline="true">
                                                          <title name="OP">ADD</title>
                                                          <value name="A">
                                                            <block type="variables_get">
                                                              <title name="VAR">honey</title>
                                                            </block>
                                                          </value>
                                                          <value name="B">
                                                            <block type="math_number">
                                                              <title name="NUM">1</title>
                                                            </block>
                                                          </value>
                                                        </block>
                                                      </value>
                                                      <next>
                                                        <block type="variables_set" inline="false">
                                                          <title name="VAR">nectar</title>
                                                          <value name="VALUE">
                                                            <block type="math_arithmetic" inline="true">
                                                              <title name="OP">MINUS</title>
                                                              <value name="A">
                                                                <block type="variables_get">
                                                                  <title name="VAR">nectar</title>
                                                                </block>
                                                              </value>
                                                              <value name="B">
                                                                <block type="math_number">
                                                                  <title name="NUM">1</title>
                                                                </block>
                                                              </value>
                                                            </block>
                                                          </value>
                                                        </block>
                                                      </next>
                                                    </block>
                                                  </next>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </statement>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCV 5:
        Course_4_SCV_5_a: |-
          Take a look at this option for movement:

          ![](https://images.code.org/7f6f09c55cf9552a91fc1d33f44a7315-image-1469641639330.png)
        Course_4_SCV_5_b: Za każdym krokiem pętli, nektar w kwiatach spada o 2, oraz
          pszczoły muszą robić o jeden więcej miód.
        Course_4_SCV_5_c: Zauważ, że na początku zewnętrznej pętli, pszczoła porusza
          się taką ilość razy ile jest nektaru w następnym kwiatku.
        Course_4_SCV_5_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="variables_set" inline="false">
                  <title name="VAR">honey</title>
                  <value name="VALUE">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="variables_set" inline="false">
                      <title name="VAR">nectar</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">5</title>
                        </block>
                      </value>
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="math_number">
                              <title name="NUM">3</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="variables_get">
                                  <title name="VAR">nectar</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="maze_move">
                                  <title name="DIR">moveForward</title>
                                </block>
                              </statement>
                              <next>
                                <block type="maze_turn">
                                  <title name="DIR">turnRight</title>
                                  <next>
                                    <block type="controls_repeat_ext" inline="true">
                                      <value name="TIMES">
                                        <block type="variables_get">
                                          <title name="VAR">nectar</title>
                                        </block>
                                      </value>
                                      <statement name="DO">
                                        <block type="maze_nectar"/>
                                      </statement>
                                      <next>
                                        <block type="maze_move">
                                          <title name="DIR">moveForward</title>
                                          <next>
                                            <block type="controls_repeat_ext" inline="true">
                                              <value name="TIMES">
                                                <block type="variables_get">
                                                  <title name="VAR">honey</title>
                                                </block>
                                              </value>
                                              <statement name="DO">
                                                <block type="maze_honey"/>
                                              </statement>
                                              <next>
                                                <block type="variables_set" inline="false">
                                                  <title name="VAR">honey</title>
                                                  <value name="VALUE">
                                                    <block type="math_arithmetic" inline="true">
                      <title name="OP">ADD</title>
                      <value name="A">
                        <block type="variables_get">
                          <title name="VAR">honey</title>
                        </block>
                      </value>
                      <value name="B">
                        <block type="math_number">
                          <title name="NUM">1</title>
                        </block>
                      </value>
                    </block>
                                                  </value>
                                                  <next>
                                                    <block type="variables_set" inline="false">
                                                      <title name="VAR">nectar</title>
                                                      <value name="VALUE">
                                                        <block type="math_arithmetic" inline="true">
                      <title name="OP">MINUS</title>
                      <value name="A">
                        <block type="variables_get">
                          <title name="VAR">nectar</title>
                        </block>
                      </value>
                      <value name="B">
                        <block type="math_number">
                          <title name="NUM">2</title>
                        </block>
                      </value>
                    </block>
                                                      </value>
                                                    </block>
                                                  </next>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </statement>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCV 6:
        Course_4_SCV_6_a: |-
          Take a look at what a single completed shape looks like

          ![](https://images.code.org/9e30d3a87186cefe730984feee195806-image-1469642178866.png)
        Course_4_SCV_6_b: 'Zyskasz korzyść z tworzenia 8 różnych zmiennych: czerwony1,
          zielony1, niebieski1, czerwony2, zielony2, niebieski2, długość oraz boki.'
        Course_4_SCV_6_c: Each of the shape's 5 sides is broken up into pieces of
          `length`/`sides` where the zig is teal (rgb = 0,175,200) and the zag is
          purple (rgb = 100, 50, 150).
        Course_4_SCV_6_d: 'To zig, turn left by `360`/`sides`.  To zag, turn right
          by `360`/`sides`. '
        Course_4_SCV_6_e: 'The rest of the program is very standard for making a full
          360 degree rotation from a shape, except that we are overlapping the shapes
          by half, so we have to turn right by `180`/`sides`, which means that we
          need twice as many of them as usual (`sides`\*`2` repetitions). '
        Course_4_SCV_6_f: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="variables_set" inline="false">
                      <title name="VAR">red1</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">0</title>
                        </block>
                      </value>
                      <next>
                        <block type="variables_set" inline="false">
                          <title name="VAR">green1</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">175</title>
                            </block>
                          </value>
                          <next>
                            <block type="variables_set" inline="false">
                              <title name="VAR">blue1</title>
                              <value name="VALUE">
                                <block type="math_number">
                                  <title name="NUM">200</title>
                                </block>
                              </value>
                              <next>
                                <block type="variables_set" inline="false">
                                  <title name="VAR">red2</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">100</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="variables_set" inline="false">
                                      <title name="VAR">green2</title>
                                      <value name="VALUE">
                                        <block type="math_number">
                                          <title name="NUM">50</title>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="variables_set" inline="false">
                                          <title name="VAR">blue2</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">150</title>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="variables_set" inline="false">
                                              <title name="VAR">length</title>
                                              <value name="VALUE">
                                                <block type="math_number">
                                                  <title name="NUM">70</title>
                                                </block>
                                              </value>
                                              <next>
                                                <block type="variables_set" inline="false">
                                                  <title name="VAR">sides</title>
                                                  <value name="VALUE">
                                                    <block type="math_number">
                                                      <title name="NUM">5</title>
                                                    </block>
                                                  </value>
                                                  <next>
                                                    <block type="controls_repeat_ext" inline="true">
                                                      <value name="TIMES">
                                                        <block type="math_arithmetic" inline="true">
                                                          <title name="OP">MULTIPLY</title>
                                                          <value name="A">
                                                            <block type="math_number">
                                                              <title name="NUM">2</title>
                                                            </block>
                                                          </value>
                                                          <value name="B">
                                                            <block type="variables_get">
                                                              <title name="VAR">sides</title>
                                                            </block>
                                                          </value>
                                                        </block>
                                                      </value>
                                                      <statement name="DO">
                                                        <block type="controls_repeat_ext" inline="true">
                                                          <value name="TIMES">
                                                            <block type="variables_get">
                                                              <title name="VAR">sides</title>
                                                            </block>
                                                          </value>
                                                          <statement name="DO">
                                                            <block type="controls_repeat_ext" inline="true">
                                                              <value name="TIMES">
                                                                <block type="variables_get">
                                                                  <title name="VAR">sides</title>
                                                                </block>
                                                              </value>
                                                              <statement name="DO">
                                                                <block type="draw_colour" inline="true" id="draw-color">
                                                                  <value name="COLOUR">
                                                                    <block type="colour_rgb" inline="false">
                                                                      <value name="RED">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">red1</title>
                                                                      </block>
                                                                      </value>
                                                                      <value name="GREEN">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">green1</title>
                                                                      </block>
                                                                      </value>
                                                                      <value name="BLUE">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">blue1</title>
                                                                      </block>
                                                                      </value>
                                                                    </block>
                                                                  </value>
                                                                  <next>
                                                                    <block type="draw_move" inline="true">
                                                                      <title name="DIR">moveForward</title>
                                                                      <value name="VALUE">
                                                                      <block type="math_arithmetic" inline="true">
                                                                      <title name="OP">DIVIDE</title>
                                                                      <value name="A">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">length</title>
                                                                      </block>
                                                                      </value>
                                                                      <value name="B">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">sides</title>
                                                                      </block>
                                                                      </value>
                                                                      </block>
                                                                      </value>
                                                                      <next>
                                                                      <block type="draw_turn" inline="true">
                                                                      <title name="DIR">turnLeft</title>
                                                                      <value name="VALUE">
                                                                      <block type="math_arithmetic" inline="true">
                                                                      <title name="OP">DIVIDE</title>
                                                                      <value name="A">
                                                                      <block type="math_number">
                                                                      <title name="NUM">360</title>
                                                                      </block>
                                                                      </value>
                                                                      <value name="B">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">sides</title>
                                                                      </block>
                                                                      </value>
                                                                      </block>
                                                                      </value>
                                                                      <next>
                                                                      <block type="draw_colour" inline="true" id="draw-color">
                                                                      <value name="COLOUR">
                                                                      <block type="colour_rgb" inline="false">
                                                                      <value name="RED">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">red2</title>
                                                                      </block>
                                                                      </value>
                                                                      <value name="GREEN">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">green2</title>
                                                                      </block>
                                                                      </value>
                                                                      <value name="BLUE">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">blue2</title>
                                                                      </block>
                                                                      </value>
                                                                      </block>
                                                                      </value>
                                                                      <next>
                                                                      <block type="draw_move" inline="true">
                                                                      <title name="DIR">moveForward</title>
                                                                      <value name="VALUE">
                                                                      <block type="math_arithmetic" inline="true">
                                                                      <title name="OP">DIVIDE</title>
                                                                      <value name="A">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">length</title>
                                                                      </block>
                                                                      </value>
                                                                      <value name="B">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">sides</title>
                                                                      </block>
                                                                      </value>
                                                                      </block>
                                                                      </value>
                                                                      <next>
                                                                      <block type="draw_turn" inline="true">
                                                                      <title name="DIR">turnRight</title>
                                                                      <value name="VALUE">
                                                                      <block type="math_arithmetic" inline="true">
                                                                      <title name="OP">DIVIDE</title>
                                                                      <value name="A">
                                                                      <block type="math_number">
                                                                      <title name="NUM">360</title>
                                                                      </block>
                                                                      </value>
                                                                      <value name="B">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">sides</title>
                                                                      </block>
                                                                      </value>
                                                                      </block>
                                                                      </value>
                                                                      </block>
                                                                      </next>
                                                                      </block>
                                                                      </next>
                                                                      </block>
                                                                      </next>
                                                                      </block>
                                                                      </next>
                                                                    </block>
                                                                  </next>
                                                                </block>
                                                              </statement>
                                                              <next>
                                                                <block type="draw_turn" inline="true">
                                                                  <title name="DIR">turnRight</title>
                                                                  <value name="VALUE">
                                                                    <block type="math_arithmetic" inline="true">
                                                                      <title name="OP">DIVIDE</title>
                                                                      <value name="A">
                                                                      <block type="math_number">
                                                                      <title name="NUM">360</title>
                                                                      </block>
                                                                      </value>
                                                                      <value name="B">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">sides</title>
                                                                      </block>
                                                                      </value>
                                                                    </block>
                                                                  </value>
                                                                </block>
                                                              </next>
                                                            </block>
                                                          </statement>
                                                          <next>
                                                            <block type="draw_turn" inline="true">
                                                              <title name="DIR">turnRight</title>
                                                              <value name="VALUE">
                                                                <block type="math_arithmetic" inline="true">
                                                                  <title name="OP">DIVIDE</title>
                                                                  <value name="A">
                                                                    <block type="math_number">
                                                                      <title name="NUM">180</title>
                                                                    </block>
                                                                  </value>
                                                                  <value name="B">
                                                                    <block type="variables_get">
                                                                      <title name="VAR">sides</title>
                                                                    </block>
                                                                  </value>
                                                                </block>
                                                              </value>
                                                            </block>
                                                          </next>
                                                        </block>
                                                      </statement>
                                                    </block>
                                                  </next>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      CourseD_Dance_Party_01:
        validation: |-
          **Jak mam przejść ten poziom?**

          -   Postaraj się, aby na ekranie pojawił się tancerz.

          _Ten poziom kończy się po 4 taktach._
        challenges: |-
          **Dodatkowe wyzwania**

          -   Wybierz inny utwór do odtwarzania.
          -   Zmień imię swojego tancerza.
      CourseD_Dance_Party_02:
        validation: |-
          **Jak mam przejść ten poziom?**

          -   Ten tancerz musi zmienić ruch na nowy po 4 taktach.

          _Ten poziom kończy się po 7 taktach._
      CourseD_Dance_Party_03:
        validation: |-
          **Jak mam przejść ten poziom?**

          -   Po 6 taktach Twój tancerz musi tańczyć inny taniec niż po 4 taktach.

          _Ten poziom kończy się po 11 taktach._
      CourseD_Dance_Party_04:
        validation: |-
          **Jak mam przejść ten poziom?**

          -   Musisz zmienić efekt tła przez siódmym taktem piosenki.

          _Ten poziom kończy się po 9 taktach._
        challenges: |-
          **Dodatkowe wyzwanie**

          Zmieniaj efekt tła w różnych momentach piosenki, łącząc nowy blok pod zdarzeniami <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">???</title><title name="UNIT">"measures"</title></block></xml>.
      CourseD_Dance_Party_06:
        validation: |-
          **Jak mam przejść ten poziom?**

          -   Musisz mieć co najmniej dwóch tancerzy.

          _Ten poziom kończy się po 5 taktach._
        challenges: |-
          **Dodatkowe wyzwanie**

          -   Dodaj trzeciego tancerza (lub tylu, ile chcesz!)
          -   Spraw, aby wszyscy tancerze w różnych momentach piosenki wykonywali różne ruchy.
      CourseD_Dance_Party_08:
        validation: |-
          **Jak mam przejść ten poziom?**

          -   Dwóch tancerzy musi mieć wielkość inną niż 100.

          _Ten poziom kończy się po 5 taktach._
        challenges: |-
          **Dodatkowe wyzwanie**

          -   Eksperymentuj, zmieniając inne właściwości (szerokość, wysokość, obrót, itp.)
      CourseD_Dance_Party_09:
        validation: |-
          **Jak mam przejść ten poziom?**

          -   Zmień odcień przynajmniej jednego tancerza.

          _Ten poziom kończy się po 7 taktach._
      CourseD_Dance_Party_10:
        validation: |-
          **Jak mam przejść ten poziom?**

          -   Należy zmienić właściwości dwóch lub więcej tancerzy.

          _Ten poziom kończy się po 7 taktach._
      CourseD_Dance_Party_11:
        validation: |-
          **Jak mam przejść ten poziom?**

          -   Wystarczy być kreatywnym!

          _Ten poziom kończy się po 7 taktach._
      CourseD_Dance_Party_11_5:
        validation: |-
          **Jak mam przejść ten poziom?**

          -   Wystarczy być kreatywnym!

          _Ten poziom kończy się po 7 taktach._
      CourseD_Dance_Party_11b:
        validation: |-
          **Jak mam przejść ten poziom?**

          -   Użyj bloku 'kiedy strzałka w lewo', aby sprawić, że Robot będzie tańczył po naciśnięciu tego klawisza.

          _Ten poziom kończy się po 7 taktach._
      CourseE_HOC 2018 Level_10:
        voyage_aquatic_10a: Widzisz **Latarnie morskie** ![](https://images.code.org/471b33234222ddffb463aeb65de6b371-image-1539183353423.net-resizeimage.png)?
          Jak wykorzystasz warunek z nimi, aby przejść przez Oceaniczny monument?
      CourseE_HOC 2018 Level_7a:
        aquatic7: Możesz użyć bloku "jeśli jest ścieżka", aby wykonać właściwy skręt.
      CourseE_HOC 2018 Level_9b:
        voyage_aquatic_9a: Cóż za przepiękna rafa koralowa! Niebieski koral jest \*\*
          właściwą drogą, i uważaj, aby czerwony koral nie był po **lewej** stronie!
      Dance_2019_01:
        validation: |-
          **Jak mam przejść ten poziom?**

          -   Postaraj się, aby na ekranie pojawił się tancerz.

          _Ten poziom kończy się po 4 taktach._
        challenges: |-
          **Opcjonalne wyzwania**

          -   Wybierz inną piosenkę do odtworzenia.
          -   Przenieś swojego tancerza w nowe miejsce.
          -   Stwórz więcej niż jednego tancerza.
      Dance_2019_02:
        validation: |-
          **Jak mam przejść ten poziom?**

          -   Tancerz musi wykonać ruch.
          -   Musisz nacisnąć klawisz strzałki.

          _Ten poziom kończy się po 4 taktach._
        challenges: |-
          **Dodatkowe wyzwanie**

          Użyj więcej niż jednego bloku <xml><block type="Dancelab_whenKey"><title name="KEY"></title></block></xml>.
      Dance_2019_03:
        validation: |-
          **Jak mam przejść ten poziom?**

          -   Obaj tancerze muszą wykonać ruch.
          -   Musisz naciskać klawisze strzałek.

          _Ten poziom kończy się po 6 taktach._
        challenges: |-
          **Dodatkowe wyzwanie**

          -   Spraw, aby tancerz reagował na naciśnięcie klawiszy strzałek w lewo i w prawo.
      Dance_2019_04:
        validation: |-
          **Jak mam przejść ten poziom?**

          -   Ten tancerz musi zmienić ruch po 4 taktach.

          _Ten poziom kończy się po 7 taktach._
      Dance_2019_05:
        validation: |-
          **Jak mam przejść ten poziom?**

          -   Po 6 taktach Twój tancerz musi tańczyć inny taniec niż po 4 taktach.

          _Ten poziom kończy się po 11 taktach._
        challenges: |-
          **Dodatkowe wyzwanie**

          -   Zmień tło zawsze wtedy, gdy tancerze zmieniają ruchy.
      Dance_2019_06:
        validation: |-
          **Jak mam przejść ten poziom?**

          -   Utwórz jednego tancerza głównego i grupę tancerzy pomocniczych w ciągu 4 pierwszych taktów piosenki.

          _Ten poziom kończy się po siedmiu taktach._
        challenges: |-
          **Dodatkowe wyzwanie**

          -   Utwórz wiele grup tancerzy pomocniczych.
      Dance_2019_07:
        validation: |-
          **Jak mam przejść ten poziom?**

          -   Zmień rozmiar co najmniej jednego tancerza.

          _Ten poziom kończy się po 6 taktach._
        challenges: |-
          **Dodatkowe wyzwanie**

          -   Eksperymentuj, zmieniając inne właściwości takie, jak szerokość lub obrót.
      Dance_2019_08:
        validation: |-
          **Jak mam przejść ten poziom?**

          -   Zmień odcień co najmniej jednego tancerza.

          _Ten poziom kończy się po 6 taktach._
        tint_hint: Czy zauważyłeś, że twoi tancerze nie zmieniają się dokładnie na
          wybrany przez Ciebie kolor? To dlatego, że **odcienie** mieszają wybrany
          kolor z kolorami tancerza.
      Dance_2019_09:
        validation: |-
          **Jak przejść ten poziom?**

          -   Wystarczy nacisnąć przycisk „Zakończ”!
        repeat_every_ideas: |-
          **Czy potrzebujesz pomysłów?**

          -   Wielokrotnie zmieniaj rozmiar tancerza, aby rósł.
          -   Wielokrotnie zmieniaj rotację tancerza, aby się obracał.

          _Można również użyć liczb ujemnych, aby uzyskać odwrotny efekt!_
        next_previous: |-
          **Dodatkowe wyzwanie**

          -   Możesz również użyć tego nowego bloku zdarzeń, aby cyklicznie przechodzić listę ruchów tanecznych, ustawiając ruch na „(Losowo)”, „(Następny)” lub „(Poprzedni)”.
              <xml><block type="Dancelab_changeMoveEachLR">
              <title name="GROUP">???</title>
              <title name="MOVE">"rand"</title>
              <title name="DIR">-1</title>
              </block></xml>
      Dance_Party_01:
        validation: |-
          **Jak mam przejść ten poziom?**

          -   Postaraj się, aby na ekranie pojawił się tancerz.

          _Ten poziom kończy się po 4 taktach._
        challenges: |-
          **Dodatkowe wyzwania**

          -   Wybierz inny utwór do odtwarzania.
          -   Zmień imię swojego tancerza.
      Dance_Party_02:
        validation: |-
          **Jak mam przejść ten poziom?**

          -   Ten tancerz musi zmienić ruch po 4 taktach.

          _Ten poziom kończy się po 7 taktach._
      Dance_Party_03:
        validation: |-
          **Jak mam przejść ten poziom?**

          -   Po 6 taktach Twój tancerz musi tańczyć inny taniec niż po 4 taktach.

          _Ten poziom kończy się po 11 taktach._
      Dance_Party_04:
        validation: |-
          **Jak mam przejść ten poziom?**

          -   Musisz zmienić efekt tła w czasie siódmego taktu piosenki.

          _Ten poziom kończy się po 9 taktach._
        challenges: |-
          **Dodatkowe wyzwanie**

          Zmieniaj efekt tła w różnych momentach piosenki, łącząc nowy blok pod zdarzeniami <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">???</title><title name="UNIT">"measures"</title></block></xml>.
      Dance_Party_05:
        validation: |-
          **Jak mam przejść ten poziom?**

          -   Twój tancerz musi wykonać cykl co najmniej 4 różnych ruchów tanecznych, zanim poziom się skończy.

          _Ten poziom kończy się po 12 taktach._
      Dance_Party_06:
        validation: |-
          **Jak mam przejść ten poziom?**

          -   Musisz mieć co najmniej dwóch tancerzy.

          _Ten poziom kończy się po 5 taktach._
        challenges: |-
          **Dodatkowe wyzwanie**

          -   Dodaj trzeciego tancerza (lub tylu, ile chcesz!)
          -   Spraw, aby wszyscy tancerze w różnych momentach piosenki wykonywali różne ruchy.
      Dance_Party_08:
        validation: |-
          **Jak mam przejść ten poziom?**

          -   Dwóch tancerzy musi mieć wielkość inną niż 100.

          _Ten poziom kończy się po 5 taktach._
        challenges: |-
          **Dodatkowe wyzwanie**

          -   Eksperymentuj, zmieniając inne właściwości (szerokość, wysokość, obrót, itp.)
      Dance_Party_09:
        validation: |-
          **Jak mam przejść ten poziom?**

          -   Zmień odcień przynajmniej jednego tancerza.

          _Ten poziom kończy się po 7 taktach._
      Dance_Party_10:
        validation: |-
          **Jak mam przejść ten poziom?**

          -   Należy zmienić właściwości dwóch lub więcej tancerzy.

          _Ten poziom kończy się po 7 taktach._
      Dance_Party_11:
        validation: |-
          **Jak mam przejść ten poziom?**

          -   Wystarczy być kreatywnym!

          _Ten poziom kończy się po 7 taktach._
      Dance_Party_11_5:
        validation: |-
          **Jak mam przejść ten poziom?**

          -   Wystarczy być kreatywnym!

          _Ten poziom kończy się po 7 taktach._
      Dance_Party_11b:
        validation: |-
          **Jak mam przejść ten poziom?**

          -   Użyj bloku 'kiedy strzałka w lewo', aby sprawić, że Robot będzie tańczył po naciśnięciu tego klawisza.

          _Ten poziom kończy się po 7 taktach._
      Dance_Party_extras_alternate_2019:
        alternate: Naprzemienny blok znajduje się w kategorii „Tancerze”.
      Function intro Ryan:
        Function_intro_Ryan_b: Jeśli wywołasz funkcję poprawnie, to jest ścieżką którą
          będziesz się przemieszczać...
        Function_intro_Ryan_a: W swoim programie możesz wywołać jedną funkcję wielokrotnie!  Spróbuj
          wywołać ją dwukrotnie, aby rozwiązać tę łamigłówkę.
      Function intro Ryan_2019:
        Function_intro_Ryan_b: Jeśli wywołasz funkcję poprawnie, to jest ścieżką którą
          będziesz się przemieszczać...
        Function_intro_Ryan_a: W swoim programie możesz wywołać jedną funkcję wielokrotnie!  Spróbuj
          wywołać ją dwukrotnie, aby rozwiązać tę łamigłówkę.
      HOC 2018 Level_10:
        voyage_aquatic_10a: Widzisz **Latarnie morskie** ![](https://images.code.org/471b33234222ddffb463aeb65de6b371-image-1539183353423.net-resizeimage.png)?
          Jak wykorzystasz warunek z nimi, aby przejść przez Oceaniczny monument?
      HOC 2018 Level_7a:
        aquatic7: Możesz użyć bloku "jeśli jest ścieżka", aby wykonać właściwy skręt.
      HOC 2018 Level_9b:
        voyage_aquatic_9a: Cóż za przepiękna rafa koralowa! Niebieski koral jest \*\*
          właściwą drogą, i uważaj, aby czerwony koral nie był po **lewej** stronie!
      MC_HOC_2017_01_RETRY:
        MC_HOC_2017_01_RETRY_a: Przeciągnij jeden blok "idź do przodu" ze skrzynki
          z narzędziami do obszaru roboczego i umieść pod blokiem "po uruchomieniu".
        MC_HOC_2017_01_RETRY_b: Nie zapomnij kliknąć na "Uruchom", aby uruchomić kod
          dla Agenta.
        MC_HOC_2017_01_RETRY_c: Po wykonaniu całego kodu przez Agenta, możesz poruszać
          się graczem przy użyciu klawiszy strzałek!
      MC_HOC_2017_01_RETRY_2019:
        MC_HOC_2017_01_RETRY_a: Przeciągnij jeden blok "idź do przodu" ze skrzynki
          z narzędziami do obszaru roboczego i umieść pod blokiem "po uruchomieniu".
        MC_HOC_2017_01_RETRY_b: Nie zapomnij kliknąć na "Uruchom", aby uruchomić kod
          dla Agenta.
        MC_HOC_2017_01_RETRY_c: Po wykonaniu całego kodu przez Agenta, możesz poruszać
          się graczem przy użyciu klawiszy strzałek!
      MC_HOC_2017_02_Cole:
        MC_HOC_2017_02_Cole_a: Przesuń Agenta o dwa pola do przodu, aby stanął na
          płycie naciskowej.  Dzięki temu przed graczem otworzą się drzwi.
        MC_HOC_2017_02_Cole_b: "Naciśnij przycisk \"Uruchom\"! \nMożesz uruchomić
          swój kod, nawet jeśli nie jest poprawny. Wykonuj i resetuj swój kod, aż
          zobaczysz, co dzieje się źle."
        MC_HOC_2017_02_Cole_c: Gdy Agent otworzy drzwi, użyj klawiszy strzałek, aby
          gracz dotarł do mapy!
        MC_HOC_2017_02_Cole_d: Upewnij się, że Agent podąża ścieżką nakreśloną na
          mapie!
      MC_HOC_2017_02_Cole_2019:
        MC_HOC_2017_02_Cole_a: Przesuń Agenta o dwa pola do przodu, aby stanął na
          płycie naciskowej.  Dzięki temu przed graczem otworzą się drzwi.
        MC_HOC_2017_02_Cole_b: "Naciśnij przycisk \"Uruchom\"! \nMożesz uruchomić
          swój kod, nawet jeśli nie jest poprawny. Wykonuj i resetuj swój kod, aż
          zobaczysz, co dzieje się źle."
        MC_HOC_2017_02_Cole_c: Gdy Agent otworzy drzwi, użyj klawiszy strzałek, aby
          gracz dotarł do mapy!
        MC_HOC_2017_02_Cole_d: Upewnij się, że Agent podąża ścieżką nakreśloną na
          mapie!
      MC_HOC_2017_03_Cole:
        MC_HOC_2017_03_Cole_a: Gdy Agent dotrze do płyty naciskowej, możesz użyć klawiszy
          strzałek, aby gracz dotarł do kompasu!
        MC_HOC_2017_03_Cole_b: Czy uważasz, że kod jest trochę za długi?  Spróbuj
          użyć pętli "powtórze", aby zobaczyć, czy da się go skrócić!
      MC_HOC_2017_03_Cole_2019:
        MC_HOC_2017_03_Cole_a: Gdy Agent dotrze do płyty naciskowej, możesz użyć klawiszy
          strzałek, aby gracz dotarł do kompasu!
        MC_HOC_2017_03_Cole_b: Czy uważasz, że kod jest trochę za długi?  Spróbuj
          użyć pętli "powtórze", aby zobaczyć, czy da się go skrócić!
      MC_HOC_2017_04POINT5_RYAN:
        MC_HOC_2017_04POINT5_RYAN_b: 'Aby Agent się obrócił, Użyj bloku "skręć w prawo",
          aby Agent się obrócił '
        MC_HOC_2017_04POINT5_RYAN_a: Wystarczy, że Agent dotrze do pierwszej płyty
          naciskowej, aby Alex lub Steve mogli dotrzeć do siekiery.
      MC_HOC_2017_04POINT5_RYAN_2019:
        MC_HOC_2017_04POINT5_RYAN_b: 'Aby Agent się obrócił, Użyj bloku "skręć w prawo",
          aby Agent się obrócił '
        MC_HOC_2017_04POINT5_RYAN_a: Wystarczy, że Agent dotrze do pierwszej płyty
          naciskowej, aby Alex lub Steve mogli dotrzeć do siekiery.
      MC_HOC_2017_04_Cole:
        MC_HOC_2017_04_Cole_a: Agent musi wykonać "idź do przodu" siedem razy.  Jak
          użyjesz pętli "powtórz", aby to zrobił?
        MC_HOC_2017_04_Cole_c: "Naciśnij przycisk \"Uruchom\"! \nMożesz uruchomić
          swój kod, nawet jeśli nie jest poprawny. Wykonuj i resetuj swój kod, aż
          zobaczysz, co dzieje się źle."
        MC_HOC_2017_04_Cole_b: Gdy Agent dotrze do płyty naciskowej, otworzy drzwi
          dla gracza.
      MC_HOC_2017_04_Cole_2019:
        MC_HOC_2017_04_Cole_a: Agent musi wykonać "idź do przodu" siedem razy.  Jak
          użyjesz pętli "powtórz", aby to zrobił?
        MC_HOC_2017_04_Cole_c: "Naciśnij przycisk \"Uruchom\"! \nMożesz uruchomić
          swój kod, nawet jeśli nie jest poprawny. Wykonuj i resetuj swój kod, aż
          zobaczysz, co dzieje się źle."
        MC_HOC_2017_04_Cole_b: Gdy Agent dotrze do płyty naciskowej, otworzy drzwi
          dla gracza.
      MC_HOC_2017_05_Cole:
        MC_HOC_2017_05_Cole_a: Czy wiesz, że w pętli możesz umieścić więcej niż jeden
          fragment kodu?  Spróbuj umieścić w pętli "powtórz" deskę oraz "idź do przodu",
          aby ukończyć tę łamigłówkę.
        MC_HOC_2017_05_Cole_b: Przeprowadź Agenta przez rzekę, budując stopniowo most.
      MC_HOC_2017_05_Cole_2019:
        MC_HOC_2017_05_Cole_a: Czy wiesz, że w pętli możesz umieścić więcej niż jeden
          fragment kodu?  Spróbuj umieścić w pętli "powtórz" deskę oraz "idź do przodu",
          aby ukończyć tę łamigłówkę.
        MC_HOC_2017_05_Cole_b: Przeprowadź Agenta przez rzekę, budując stopniowo most.
      MC_HOC_2017_06_Cole:
        MC_HOC_2017_06_Cole_a: Ile razy powtarza się ta pętla, a ile razy powinna
          się powtórzyć?
        MC_HOC_2017_06_Cole_b: 'Pomóż Agentowi zbudować most przez calutką wodę! '
      MC_HOC_2017_06_Cole_2019:
        MC_HOC_2017_06_Cole_a: Ile razy powtarza się ta pętla, a ile razy powinna
          się powtórzyć?
        MC_HOC_2017_06_Cole_b: 'Pomóż Agentowi zbudować most przez calutką wodę! '
      MC_HOC_2017_07_Cole:
        MC_HOC_2017_07_Cole_c: Wszystko, co Agent musi zrobić, to wyczyścić ścieżkę
          do Minecartu.
        MC_HOC_2017_07_Cole_a: Aby rozwiązać tę łamigłówkę, musisz zrozumieć działanie
          funkcji "clear path". Można ją wywołać wiele razy, używając zielonego bloczku
          "clear path" znajdującego się w skrzynce z narzędziami.
        MC_HOC_2017_07_Cole_b: Spróbuj użyć bloków funkcyjnych jednocześnie z innymi
          blokami, aby ułatwić sobie rozwiązanie tej łamigłówki.
      MC_HOC_2017_07_Cole_2019:
        MC_HOC_2017_07_Cole_c: Wszystko, co Agent musi zrobić, to wyczyścić ścieżkę
          do Minecartu.
        MC_HOC_2017_07_Cole_a: Aby rozwiązać tę łamigłówkę, musisz zrozumieć działanie
          funkcji "clear path". Można ją wywołać wiele razy, używając zielonego bloczku
          "clear path" znajdującego się w skrzynce z narzędziami.
        MC_HOC_2017_07_Cole_b: Spróbuj użyć bloków funkcyjnych jednocześnie z innymi
          blokami, aby ułatwić sobie rozwiązanie tej łamigłówki.
      MC_HOC_2017_10_RETRY:
        MC_HOC_2017_10_Cole_b: Nie wiesz, gdzie iść? Sprawdź, czy możesz znaleźć wykropkowaną
          linię!
        MC_HOC_2017_10_Cole_a: Użycie funkcji ułatwi rozwiązanie tej łamigłówki!
      MC_HOC_2017_10_RETRY_2019:
        MC_HOC_2017_10_Cole_b: Nie wiesz, gdzie iść? Sprawdź, czy możesz znaleźć wykropkowaną
          linię!
        MC_HOC_2017_10_Cole_a: Użycie funkcji ułatwi rozwiązanie tej łamigłówki!
      MC_HOC_2017_Ali:
        MC_HOC_2017_08_RY_a: "Naciśnij przycisk \"Uruchom\"! \nMożesz uruchomić swój
          kod, nawet jeśli nie jest poprawny. Wykonuj i resetuj swój kod, aż zobaczysz,
          co dzieje się źle."
        MC_HOC_2017_08_RY_b: Tę łamigłówkę można rozwiązać na WIELE różnych sposobów.  Wypróbuj
          kilka z nich!
        MC_HOC_2017_08_RY_c: Wykropkowana linia wskaże ci prostą ścieżkę poprzez lawę.
      MC_HOC_2017_Ali_2019:
        MC_HOC_2017_08_RY_a: "Naciśnij przycisk \"Uruchom\"! \nMożesz uruchomić swój
          kod, nawet jeśli nie jest poprawny. Wykonuj i resetuj swój kod, aż zobaczysz,
          co dzieje się źle."
        MC_HOC_2017_08_RY_b: Tę łamigłówkę można rozwiązać na WIELE różnych sposobów.  Wypróbuj
          kilka z nich!
        MC_HOC_2017_08_RY_c: Wykropkowana linia wskaże ci prostą ścieżkę poprzez lawę.
      MC_HOC_2017_FP20x20:
        MC_HOC_2017_13_Cole_a: Spróbuj tak pokierować Agentem tak, aby zbudował kilka
          dróg dla minicart, dzięki temu będziesz mógł wyruszyć w świat!
      MC_HOC_2017_FP20x20_2019:
        MC_HOC_2017_13_Cole_a: Spróbuj tak pokierować Agentem tak, aby zbudował kilka
          dróg dla minicart, dzięki temu będziesz mógł wyruszyć w świat!
      NEW Course 4 Artist Functions 13:
        NEW_Course_4_Artist_Functions_13_a: Zedytuj funkcję `draw a line of squares`
          aby nie wywoływać jej ponownie.
        NEW_Course_4_Artist_Functions_13_c: Jakiego kody byś potrzebował jeśli miałbyś
          zrobić gwiazdę używając zwykłych linii zamiast paczek?
      NEW Course 4 Artist Functions 4:
        NEW_Course_4_Artist_Functions_4_a: Będziesz musiał użyć bloku `skręć w prawo
          o 120 stopni` po każdym kwadracie.
      NEW Course 4 Artist Functions 9:
        NEW_Course_4_Artist_Functions_9_a: Spróbuj uruchomić kod zanim dodasz jakiś
          blok. Co sprawia, że rysunek wygląda na nieco inny?
        NEW_Course_4_Artist_Functions_9_b: If you can't quite put your finger on what's
          going wrong, try slowing down the artist's by moving the slider to the left.
      NEW Course 4 Artist Params 11:
        NEW_Course_4_Artist_Params_11_a: Istnieje więcej niż jedna liczba, którą należałoby
          wymienić na zmienną wewnątrz funkcji.
      NEW Course 4 Artist Params 13:
        NEW_Course_4_Artist_Params_13_a: 'You will need to divide the _perimeter_
          by the number of sides in order to keep the shapes the same size overall. '
      NEW Course 4 Artist Params 14:
        NEW_Course_4_Artist_Params_14_a: It's okay to run the program a few times
          to figure out how the function works with different parameters.
      NEW Course 4 Artist Params inspire:
        brush_width: Ustawiamy szerokość pędzla do 1, a następnie kolor na niebieski,
          zanim zrobimy cokolwiek innego.
        double_loop: Spróbuj umieścić pętlę 'dla.... ' wewnątrz pętli 'powtórz'.
        specifics: |-
          The `for loop` runs from three to seventeen for each of the six "petals" before moving on to create the next, drawing shapes with only an odd number of sides.

          The `set alpha` block uses division to fade the color as the counter gets higher.
        after: Po narysowaniu płatka, pamiętaj aby przejść do przodu o 20 pikseli,
          zanim obrócisz się o 60 stopni.
        solution: |-
          **Solution**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="draw_colour" inline="true" id="draw-color">
                      <value name="COLOUR">
                        <block type="colour_picker">
                          <title name="COLOUR">#0000cd</title>
                        </block>
                      </value>
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="math_number">
                              <title name="NUM">6</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="controls_for_counter" inline="true">
                            <mutation counter="counter"></mutation>
                              <value name="FROM">
                                <block type="math_number">
                                  <title name="NUM">3</title>
                                </block>
                              </value>
                              <value name="TO">
                                <block type="math_number">
                                  <title name="NUM">17</title>
                                </block>
                              </value>
                              <value name="BY">
                                <block type="math_number">
                                  <title name="NUM">2</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="alpha" inline="true" id="alpha">
                                  <value name="VALUE">
                                    <block type="math_arithmetic" inline="true">
                                      <title name="OP">DIVIDE</title>
                                      <value name="A">
                                        <block type="math_number">
                                          <title name="NUM">500</title>
                                        </block>
                                      </value>
                                      <value name="B">
                                        <block type="variables_get">
                                          <title name="VAR">counter</title>
                                        </block>
                                      </value>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="procedures_callnoreturn" inline="false">
                                      <mutation name="draw a polygon">
                                      <arg name="length"></arg>
                                      <arg name="sides"></arg>
                                      </mutation>
                                      <value name="ARG0">
                                        <block type="math_number">
                                          <title name="NUM">30</title>
                                        </block>
                                      </value>
                                      <value name="ARG1">
                                        <block type="variables_get">
                                          <title name="VAR">counter</title>
                                        </block>
                                      </value>
                                    </block>
                                  </next>
                                </block>
                              </statement>
                              <next>
                                <block type="draw_move" inline="true">
                                  <title name="DIR">moveForward</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">20</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="draw_turn" inline="true">
                                      <title name="DIR">turnRight</title>
                                      <value name="VALUE">
                                        <block type="math_number">
                                          <title name="NUM">60</title>
                                        </block>
                                      </value>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </statement>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
            </xml>
      NEW Course 4 Bee For Loops 10a:
        NEW_Course_4_Bee_For_Loops_10a_a: Can you find a pattern between the number
          of steps you need to take and the number of nectars to gather?
        NEW_Course_4_Bee_For_Loops_10a_b: You'll need to have 2 repeats, one will
          use a math block.
      NEW Course 4 Bee For Loops 7:
        NEW_Course_4_Bee_For_Loops_7_a: |-
          Try doing some math with the counter variable.

          What do you have to do to the counter at each flower to equal the amount of nectar you need to collect?
      NEW Course 4 Bee For Loops 8:
        NEW_Course_4_Bee_For_Loops_8_a: "Jeśli pętla jest w trakcie iteracji, za każdym
          razem do zmiennej licznika dodawany jest przyrost. \n\nCo musisz dodać do
          każdej wartości aby otrzymać kolejną wartość?"
      New Minecraft Hero Project:
        MC_HOC_2017_13_Cole_a: Try having the Agent build some bridges so that Alex
          or Steve can walk around beyond the edges of the map.
      OPD-K5-events-2:
        courseC_flappy_events1_a: "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
      OPD-K5-events-3:
        courseC_flappy_events2_a: 'Blok, który musisz dodać nazywa się `set speed`. '
        courseC_flappy_events2_b: Połącz blok `set speed` z blokiem `when run`, aby
          rozwiązać zagadkę.
      OPD-K5-events-4:
        courseC_flappy_events3_a: Jeśli coś nie działa prawidłowo, upewnij się, że
          bloki połączone są z odpowiednimi zdarzeniami w przestrzeni roboczej.
      OPD-K5-events-5:
        courseC_flappy_events4_a: Connect the `end game` block to `when hit an obstacle`
          to solve this puzzle.
      OPD-K5-events-6:
        courseC_flappy_events5_a: Musisz użyć bloku `score a point` aby przejść ten
          poziom.
      OPD-K5-forloops-1:
        courseF_bee_for1_a: Drag a purple number block into the blank space on the
          `repeat` loop to tell it how many times to repeat.
        courseF_bee_for1_b: You will need two blocks in your ‘repeat’ loop to collect
          all of the nectar.
      OPD-K5-forloops-2:
        courseF_bee_for2_a: If you’re confused, work one flower at a time, and test
          often.
        courseF_bee_for2_b: Remember to move forward between each loop, so you reach
          each flower.
      OPD-K5-forloops-5:
        courseF_bee_for4_a: Use a `for` loop that goes from 1 to 7 with an increment
          of 1 to solve this puzzle.
        courseF_bee_for4_b: Within your `for` loop, you will want to have a `move
          forward` command, and a loop to collect nectar.
        courseF_bee_for4_c: Make sure to use the `counter` variable inside your nested
          `repeat` loop to get enough nectar!
      OPD-K5-forloops-6:
        courseF_bee_for6_a: Don't forget to use a `counter` variable inside your `repeat`
          loop.
        courseF_bee_for6_b: Within your `for` loop, you will want to have a `move
          forward` command, and a loop to collect nectar.
        courseF_bee_for6_c: Your loop should count **from 5 to 1**.
      OPD-K5-forloops-7:
        courseF_bee_for7_a: Your `for` loop will need to count from 1 to 7 by 2.
        courseF_bee_for7_b: Within your `for` loop, you will want to have a `move
          forward` command, and a loop to collect nectar.
        courseF_bee_for7_c: Remember to use the `counter` variable in your `repeat`
          loop.
      OPD-K5-projects-2:
        courseE_playLab_scaffold1_a: The `set actor 1 to ??? image` block can be used
          to add an actor to the stage.
        courseE_playLab_scaffold1_b: Put the `set actor` block under `when run` to
          make your actor appear at the beginning of the program.
        courseE_playLab_scaffold1_c: Use `set ??? background` to choose a background
          for your scene.
      OPD-K5-projects-3:
        courseE_playLab_scaffold1_a: Pull on the dropdown menu of the `when ____ arrow`
          event to change the direction the block controls.
        courseE_playLab_scaffold1_b: You should have four `when arrow` event blocks,
          with a direction to move underneath each.
        courseE_playLab_scaffold1_c: When you are done, you should be able to move
          your hero with the arrow keys!
      OPD-K5-projects-5:
        courseE_playLab_scaffold4_a: Use `score point` to add a point, and `remove
          point` to subtract one.
      OPD-K5-variables-1:
        grade5_artist_variables_triangles1_a: Musisz pamiętać, że aby utworzyć wewnętrzny
          kąt o 60 stopniach w tym trójkącie artysta musi się obrócić o 120 stopni.
        grade5_artist_variables_triangles1_b: Aby skrócić swój kod użyj pętli 'powtórz'.
        grade5_artist_variables_triangles1_c: Wewnątrz pętli musisz pójść do przodu
          50 pikseli, a następnie skręcić w lewo o 120 stopni.
      OPD-K5-variables-2:
        courseF_artist_variables2_a: Remember to move forward after drawing each triangle.
        courseF_artist_variables2_b: Your new loop will contain the loop for your
          triangle, then a `move forward` command.
      OPD-K5-variables-5:
        courseF_artist_variables3_a: 'The variable `length` will be used in two places
          in your code: In the side length of your triangle, and in the amount you
          move forward between triangles.'
        courseF_artist_variables3_b: 'A number block with value 50 should only be
          in one place: after the `set length` block.'
      OPD-K5-variables-6:
        courseF_artist_variables4_a: Your code won't be much different than it was
          in the last puzzle, except that you will need to turn the artist to jump
          down, then turn him back to get ready to draw the next triangle.
        courseF_artist_variables4_c: |-
          This is the pattern your artist will be following:

          ![](https://images.code.org/41ae98c1633755cf4553f90a80e125cf-image-1500325529204.6_hint.gif)
        courseF_artist_variables4_b: |-
          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="variables_set">
                  <title name="VAR">length</title>
                  <value name="VALUE">
                    <block type="math_number">
                      <title name="NUM">50</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_repeat_ext">
                      <value name="TIMES">
                        <block type="math_number">
                          <title name="NUM">3</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="controls_repeat_ext">
                          <value name="TIMES">
                            <block type="math_number">
                              <title name="NUM">3</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="draw_move">
                              <title name="DIR">moveForward</title>
                              <value name="VALUE">
                                <block type="variables_get">
                                  <title name="VAR">length</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_turn">
                                  <title name="DIR">turnLeft</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">120</title>
                                    </block>
                                  </value>
                                </block>
                              </next>
                            </block>
                          </statement>
                          <next>
                            <block type="jump">
                              <title name="DIR">jumpForward</title>
                              <value name="VALUE">
                                <block type="variables_get">
                                  <title name="VAR">length</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_turn">
                                  <title name="DIR">turnRight</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">90</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="jump">
                                      <title name="DIR">jumpForward</title>
                                      <value name="VALUE">
                                        <block type="variables_get">
                                          <title name="VAR">length</title>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn">
                                          <title name="DIR">turnLeft</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      OPD-K5-variables-7:
        courseF_artist_variables5_a: The second half of your code should look almost
          the same as the first half, except you will be turning _left_, jumping,
          then turning _right_.
        courseF_artist_variables5_b: The first half of your code will draw three triangles,
          and the second half will draw the other three.
        courseF_artist_variables5_c: Start by duplicating the code in the first half
          of your program, then alter it to make the design shown.
        courseF_artist_variables5_d: |-
          This is the pattern your artist will follow:

          ![](https://images.code.org/e4ac66f8e9a4503e49c4fad1e4fafc1d-image-1500326800109.7_hint.gif)
      Overworld Avoid Monsters:
        mc_8_a: Do wyboru jest kilka ścieżek. Która jest najkrótsza?
        mc_8_b: Wykorzystaj pętlę `repeat` aby uprościć swój kod.
        mc_8_c: Twoim celem jest dojście do wejścia domu na samej górze ekranu.
      Overworld Avoid Monsters_2019:
        mc_8_a: Do wyboru jest kilka ścieżek. Która jest najkrótsza?
        mc_8_b: Wykorzystaj pętlę `repeat` aby uprościć swój kod.
        mc_8_c: Twoim celem jest dojście do wejścia domu na samej górze ekranu.
      Overworld Chop Tree:
        mc_2_a: Aby stanąć przed drzewem musisz podwójnie `move forward`.
        mc_2_b: Komenda `destroy block` ścina drzewo przed Tobą.
      Overworld Chop Tree_2019:
        mc_2_a: Aby stanąć przed drzewem musisz podwójnie `move forward`.
        mc_2_b: Komenda `destroy block` ścina drzewo przed Tobą.
      Overworld Chop Trees:
        mc_4_a: You can chop down trees in any order. What path takes the smallest
          number of blocks?
        mc_4_b: Komenda `destroy block` ścina drzewo przed Tobą.
      Overworld Chop Trees_2019:
        mc_4_a: You can chop down trees in any order. What path takes the smallest
          number of blocks?
        mc_4_b: Komenda `destroy block` ścina drzewo przed Tobą.
      Overworld House Frame Chosen:
        mc_6_a: Click the arrow on the `place` block to choose what you want to place.
        mc_6_b: Nie bój się popełniać błędów! Uruchom kod aby zobaczyć co się dzieje,
          nawet jeśli nie rozwiązałeś jeszcze zagadki.
        mc_6_c: Wewnątrz pętli `repeat` możesz umieścić więcej niż jeden blok.
      Overworld House Frame Chosen_2019:
        mc_6_a: Click the arrow on the `place` block to choose what you want to place.
        mc_6_b: Nie bój się popełniać błędów! Uruchom kod aby zobaczyć co się dzieje,
          nawet jeśli nie rozwiązałeś jeszcze zagadki.
        mc_6_c: Wewnątrz pętli `repeat` możesz umieścić więcej niż jeden blok.
      Overworld Move to Sheep:
        mc_1_a: The `move forward` block is at the top of the toolbox.
        mc_1_b: Make sure both `move forward` blocks are snapped to the `when run`
          block.
      Overworld Move to Sheep_2019:
        mc_1_a: The `move forward` block is at the top of the toolbox.
        mc_1_b: Make sure both `move forward` blocks are snapped to the `when run`
          block.
      Overworld Place Wall:
        mc_5_a: Na początku użyj bloku `place`, następnie `move`.
        mc_5_b: Upewnij się, że oba bloki są wewnątrz pętli `repeat` aby wywołać kod
          więcej niż raz.
        mc_5_c: Nie bój się popełniać błędów! Uruchom kod aby zobaczyć co się dzieje,
          nawet jeśli nie rozwiązałeś jeszcze zagadki.
      Overworld Place Wall_2019:
        mc_5_a: Na początku użyj bloku `place`, następnie `move`.
        mc_5_b: Upewnij się, że oba bloki są wewnątrz pętli `repeat` aby wywołać kod
          więcej niż raz.
        mc_5_c: Nie bój się popełniać błędów! Uruchom kod aby zobaczyć co się dzieje,
          nawet jeśli nie rozwiązałeś jeszcze zagadki.
      Overworld Plant Crops:
        mc_7_a: Use the `plant crop` block to plant a crop in the space where you
          are standing.
        mc_7_b: Both stripes of dark brown land by the water need to be filled with
          crops.
        mc_7_c: Wewnątrz pętli `repeat` możesz umieścić więcej niż jeden blok.
      Overworld Plant Crops_2019:
        mc_7_a: Use the `plant crop` block to plant a crop in the space where you
          are standing.
        mc_7_b: Both stripes of dark brown land by the water need to be filled with
          crops.
        mc_7_c: Wewnątrz pętli `repeat` możesz umieścić więcej niż jeden blok.
      Overworld Powered Minecart:
        mc_13_a: Use `place rail` to lay rail on the square you are standing in.
        mc_13_b: Aby skrócić swój kod użyj pętli `repeat`.
      Overworld Powered Minecart_2019:
        mc_13_a: Use `place rail` to lay rail on the square you are standing in.
        mc_13_b: Aby skrócić swój kod użyj pętli `repeat`.
      Overworld Shear Sheep:
        mc_3_a: The `shear` block gets the sheep in front of you. Are you facing the
          sheep?
        mc_3_b: Jeśli chcesz zmienić kierunek w którym stoisz, użyj bloku `turn`.
        mc_3_c: Nie bój się popełniać błędów! Uruchom kod aby zobaczyć co się dzieje,
          nawet jeśli nie rozwiązałeś jeszcze zagadki.
      Overworld Shear Sheep_2019:
        mc_3_a: The `shear` block gets the sheep in front of you. Are you facing the
          sheep?
        mc_3_b: Jeśli chcesz zmienić kierunek w którym stoisz, użyj bloku `turn`.
        mc_3_c: Nie bój się popełniać błędów! Uruchom kod aby zobaczyć co się dzieje,
          nawet jeśli nie rozwiązałeś jeszcze zagadki.
      Underground Avoiding Lava:
        mc_11_a: All of the code is in place to check for lava and deal with it. All
          you need to do is add a block to move.
        mc_11_b: Czy twoja komenda `move forward` powinna się znajdować wewnątrz instrukcji
          `if` czy po niej?
      Underground Avoiding Lava_2019:
        mc_11_a: All of the code is in place to check for lava and deal with it. All
          you need to do is add a block to move.
        mc_11_b: Czy twoja komenda `move forward` powinna się znajdować wewnątrz instrukcji
          `if` czy po niej?
      Underground If Statements:
        mc_12_a: Miejsca z czerwonymi plamkami, to miejsca gdzie znajdziesz Redstone.
        mc_12_b: Czy możesz wykorzystać pętlę `powtórz` aby skrócić swój kod?
        mc_12_c: 'Wykorzystaj instrukcję `if` aby sprawdzić przestrzeń dla lawy, następnie
          umieść kostkę brukową. '
      Underground If Statements_2019:
        mc_12_a: Miejsca z czerwonymi plamkami, to miejsca gdzie znajdziesz Redstone.
        mc_12_b: Czy możesz wykorzystać pętlę `powtórz` aby skrócić swój kod?
        mc_12_c: 'Wykorzystaj instrukcję `if` aby sprawdzić przestrzeń dla lawy, następnie
          umieść kostkę brukową. '
      Underground Iron:
        mc_10_a: The iron blocks are the speckled spaces behind the torch! How are
          you going to get over there?
        mc_10_b: Kiedy stoisz na krawędzi lawy, użyj `umieść kostkę brukową` aby stworzyć
          bezpieczną ścieżkę. Potem, będziesz mógł po tym przejść!
        mc_10_c: Nie bój się popełniać błędów! Uruchom kod aby zobaczyć co się dzieje,
          nawet jeśli nie rozwiązałeś jeszcze zagadki.
      Underground Iron_2019:
        mc_10_a: The iron blocks are the speckled spaces behind the torch! How are
          you going to get over there?
        mc_10_b: Kiedy stoisz na krawędzi lawy, użyj `umieść kostkę brukową` aby stworzyć
          bezpieczną ścieżkę. Potem, będziesz mógł po tym przejść!
        mc_10_c: Nie bój się popełniać błędów! Uruchom kod aby zobaczyć co się dzieje,
          nawet jeśli nie rozwiązałeś jeszcze zagadki.
      Underground Mining Coal:
        mc_9_a: Stoisz na właściwej drodze? `zniszcz blok`kopie blok przed Tobą.
        mc_9_b: Czarne plami w ścianie to węgiel! Aby je wykopać użyj `destroy block`.
        mc_9_c: Użyj `place torch` aby umieścić pochodnię, w miejscu w którym stoisz.
      Underground Mining Coal_2019:
        mc_9_a: Stoisz na właściwej drodze? `zniszcz blok`kopie blok przed Tobą.
        mc_9_b: Czarne plami w ścianie to węgiel! Aby je wykopać użyj `destroy block`.
        mc_9_c: Użyj `place torch` aby umieścić pochodnię, w miejscu w którym stoisz.
      behaviors 2:
        behavior hint: "Try editing the behaviors! \n\n-   Which direction does the
          rocket need to move?"
      behaviors 3:
        behavior hint: "Try editing the behaviors! \n\n-   Which value is controlling
          the speed of each sprite?"
      behaviors 3a:
        behavior hint: "Try editing the behaviors! \n\n-   Which value is controlling
          the speed of each sprite?"
      behaviors 5:
        target hint: You can pick any of the four ships. Which one does the astronaut
          want?
        behavior hint: Edit the behavior to solve this puzzle. The astronaut sprite
          needs to move in two different directions to end up going diagonally.
      behaviors 6:
        behavior hint: "Try editing the behaviors! \n\n-   Which value is controlling
          the speed of each sprite?"
      behaviors 7:
        behaviors_hint1: You can create a new behavior that uses two different actions
          or combine two existing behaviors.
        sprites_idea1: |-
          For fun, you can use a similar behavior to make a ship fly off into space or a character run to the foreground. Try changing the background and sprite costumes in your scene!

          ![](<https://images.code.org/7070e44239b53f4b33a5b4fe054bb61c-image-1567714335486.2019-09-05 16_05_19.gif>)

          ![](<https://images.code.org/278494432d56f1f5d41e345a51223695-image-1567714335485.2019-09-05 16_11_12.gif>)
      comment_intro_maze_2018:
        courseC_maze_programming4_a: Comments are also helpful when other people try
          to read your code.
        courseC_maze_programming4_b: Add a comment when you change directions- what
          would have happened if you turned the other way?
      course1_artist_loops_challenge1:
        courseA_artist_loops_challenge1_a: |-
          You can use loops like this to create the walls and the roof. Try repeating different blocks.

          ![](https://images.code.org/1581a2f599b501103064fc9864aa964d-image-1491863694560.png)

          Design your own or click the ![](https://images.code.org/53090194cea5dbf35ce9e35205156f5d-image-1491864793265.png) for some ideas!
        courseA_artist_loops_challenge1_b: "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
        courseA_artist_loops_challenge1_c: "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
        courseA_artist_loops_challenge1_d: "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
      course1_artist_loops_challenge2:
        harvey_tictactoe: Możesz użyć bloków 'Skocz', aby przenieść się w inne miejsce.
      course1_artist_loops_challenge3:
        courseA_artist_loops_challenge2_a: 'Blocks like this: <xml>  <block type="simple_move_up_left"/></xml>
          will let your artist move at a slant!'
        courseA_artist_loops_challenge2_b: Kiedy skończysz jeden dom dla ptaków, `jump`
          do następnego!
        courseA_artist_loops_challenge2_c: Będziesz potrzebował wielu bloków wewnątrz
          tej pętli dla tego wyzwania.
      course1_artist_loops_challenge4:
        courseB_artist_loops_challenge1_a: 'Blocks like this: <xml>  <block type="simple_move_up_right"/></xml>
          will let your artist move at a slant!'
        courseB_artist_loops_challenge1_b: When you finish one of the dice, `jump`
          to the next!
        courseB_artist_loops_challenge1_c: 'Będziesz musiał `move` lub `jump` dwukrotnie
          nad niektórymi liniami. '
      course1_collector_loops_challenge1:
        courseA_collector_loops_challenge1_a: Próbuj zmieniać wartości w każdej pętli,
          jeśli coś będzie szło źle.
        courseA_collector_loops_challenge1_b: Nie musisz używać pętli jeśli robisz
          coś tylko jeden raz.
        courseA_collector_loops_challenge1_c: There are 6 gems on the right side of
          the cave, but you only need to move and collect 5 times. Do you know why?
      course1_collector_loops_challenge2:
        courseA_collector_loops_challenge2_b: You only need to use one ![](<https://images.code.org/803e9ee8b5bc9311a26edf955cd3c03f-image-1491001702274.07.34
          PM.png>) block to solve this.
        courseA_collector_loops_challenge2_a: |-
          You can move back over the path a second time before moving south.

          ![](<https://images.code.org/88c28c76dbea70e20253083d22b5f5fd-image-1491001404225.01.21 PM.png>)
      course1_collector_loops_challenge3:
        courseB_collector_loops_challenge1_b: |-
          Start by looping the commands `move south` and `get treasure`.

          <xml>
            <block type="maze_moveSouth"/><next>
            <block type="collector_collect"/></next>
            </xml>
        courseB_collector_loops_challenge1_a: |-
          The north pattern is a little different than the south pattern.

          <xml>
            <block type="collector_collect"/><next>
            <block type="maze_moveNorth"/></next>next>
            </xml>
        courseB_collector_loops_challenge1_c: "Move East twice between each path.\n\n<xml>\n
          \ <block type=\"maze_moveEast\"/><next>\n  <block type=\"maze_moveEast\"/></next>next>\n
          \ </xml>\n\nYou can do this with only 14 blocks. Click for one more hint
          to see a solution. "
        courseB_collector_loops_challenge1_d: |-
          Try this!

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat_simplified">
                  <title name="TIMES">5</title>
                  <statement name="DO">
                    <block type="maze_moveSouth">
                      <next>
                        <block type="collector_collect"/>
                      </next>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_moveEast">
                      <next>
                        <block type="maze_moveEast">
                          <next>
                            <block type="controls_repeat_simplified">
                              <title name="TIMES">5</title>
                              <statement name="DO">
                                <block type="collector_collect">
                                  <next>
                                    <block type="maze_moveNorth"/>
                                  </next>
                                </block>
                              </statement>
                              <next>
                                <block type="maze_moveEast">
                                  <next>
                                    <block type="maze_moveEast">
                                      <next>
                                        <block type="controls_repeat_simplified">
                                          <title name="TIMES">5</title>
                                          <statement name="DO">
                                            <block type="maze_moveSouth">
                                              <next>
                                                <block type="collector_collect"/>
                                              </next>
                                            </block>
                                          </statement>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      course1_collector_loops_challenge4:
        courseB_collector_loops_challenge2_a: Jeśli coś pójdzie źle, nie bój się zacząć
          od nowa. Nie poddawaj się!
        courseB_collector_loops_challenge2_b: |-
          If you repeat this pattern, Laurel won't hit the wall at the bottom of the cave!

          <xml><block type="maze_moveEast">
                      <next>
                        <block type="collector_collect">
                          <next>
                            <block type="maze_moveWest">
                              <next>
                                <block type="maze_moveWest">
                                  <next>
                                    <block type="maze_moveSouth"/>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block></xml>
        courseB_collector_loops_challenge2_c: Spróbuj użyć bloku `repeat` aby zebrać
          ostateczny skarb!
        courseB_collector_loops_challenge2_d: |-
          Try this solution:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat_simplified_dropdown">
                  <title name="TIMES" config="3-10">4</title>
                  <statement name="DO">
                    <block type="maze_moveEast">
                      <next>
                        <block type="collector_collect">
                          <next>
                            <block type="maze_moveWest">
                              <next>
                                <block type="maze_moveWest">
                                  <next>
                                    <block type="maze_moveSouth"/>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                  <next>
                    <block type="controls_repeat_simplified_dropdown">
                      <title name="TIMES" config="3-10">6</title>
                      <statement name="DO">
                        <block type="collector_collect"/>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      course1_maze_debugging_challenge1:
        courseA_maze_seq_challenge1_a: Some paths will lead to TNT, if you move too
          far.
      course1_maze_debugging_challenge2:
        courseB_maze_seq_challenge2_a: Nie musisz dodawać ani usuwać bloków, aby rozwiązać
          tą zagadkę.
        courseB_maze_seq_challenge2_b: Zmień bloki i wybierz środkową ścieżkę.
      course1_maze_seq_challenge1:
        courseA_maze_seq_challenge2_a: Try counting the spaces with your finger. Remember
          not to count the space where you start!
      course1_maze_seq_challenge2:
        courseB_maze_seq_challenge1_a: Najkrótsza ścieżka może tym razem nie działać.
        courseB_maze_seq_challenge1_b: Staraj się poruszać na zachód, aby zacząć.
      course1_playlab_events_challenge1:
        courseA_playlab_events_challenge1_a: "Make Waddles the Penguin show when you
          click Robin!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title
          name=\"SPRITE\">2</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">3</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_b: "Make Boo the Ghost show when you click
          Waddles!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title
          name=\"SPRITE\">3</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">4</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_c: "Make Jayden the Fuzzy Monster show when
          you click Boo!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n
          \   <title name=\"SPRITE\">4</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">5</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_d: "Make Spiff the Robot show when you click
          the monster!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title
          name=\"SPRITE\">5</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">6</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_e: "Finally, make Wendel the Wizard show
          when you click on Spiff!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n
          \   <title name=\"SPRITE\">6</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">7</title>\n
          \     </block>\n    </next>\n  </block></xml>"
      course1_playlab_events_challenge2:
        courseA_playlab_events_challenge2_a: "You can make a bird sing.\n\n<xml> \n
          \ <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">2</title>\n
          \   <next>\n          <block type=\"studio_saySprite\">\n            <title
          name=\"SPRITE\">2</title>\n            <title name=\"TEXT\">Tweet</title>\n
          \         </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge2_b: "You can make a robot beep.\n\n<xml>\n
          \ <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">6</title>\n
          \   <next>\n      \n          <block type=\"studio_playSound\">\n            <title
          name=\"SOUND\">winpoint</title>\n          </block>\n        </next>\n  </block></xml>"
        courseA_playlab_events_challenge2_c: |-
          You can make an angry monster growl.

          <xml>  <block type="studio_whenSpriteClicked">
              <title name="SPRITE">5</title>
              <next>
                <block type="studio_setSpriteEmotion">
                  <title name="SPRITE">5</title>
                  <title name="VALUE">2</title>
                  <next>
                    <block type="studio_saySprite">
                      <title name="SPRITE">5</title>
                      <title name="TEXT">Roar!</title>
                      <next>
                        <block type="studio_setSpriteEmotion">
                          <title name="SPRITE">5</title>
                          <title name="VALUE">0</title>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block></xml>
      course2_artist_nestedLoops_challenge1:
        courseD_artist_nestedLoops_challenge1_a: Zacznij od zrobienia zagnieżdżonej
          pętli aby stworzyć cztery ośmiokąty. Obróć się o 45 stopni aby zrobić ośmiokąt.
          Skocz, później po każdym z nich obróć się o 90 stopni.
        courseD_artist_nestedLoops_challenge1_b: Dodaj kod aby narysować trójkąt wewnątrz
          zagnieżdżonej pętli. Dla trójkąta użyj 120 stopniowych obrotów.
        courseD_artist_nestedLoops_challenge1_c: |-
          Użyj zagnieżdżonej pętli:

          -   Powtórz 8 razy
          -   narysuj ośmiokąt
          -   narysuj trójkąt
          -   przejdź dalej o 50 pikseli
          -   obróć się w prawo o 90 stopni
      course2_artist_nestedLoops_challenge2:
        courseD_artist_nestedLoops_challenge2_a: To draw a regular octagon, the artist
          needs to turn 45 degrees 8 times.
        courseD_artist_nestedLoops_challenge2_b: To draw a square, the artist needs
          to turn 90 degrees 4 times.
      course2_artist_prog_challenge1:
        courseC_artist_prog_challenge1_a: 'Prostokąt ma 200 pikseli szerokości i 100
          pikseli wysokości. '
      course2_artist_prog_challenge2:
        courseC_artist_prog_challenge2_a: "Możesz wkładać komendy do bloku 'powtórz',
          by zapętlać je w kółko i w kółko. Spróbuj!\n\n<xml>\n  \n          <block
          type=\"controls_repeat\">\n            <title name=\"TIMES\">6</title>\n
          \           <statement name=\"DO\">\n              <block type=\"draw_move_by_constant_dropdown\">\n
          \               <title name=\"DIR\">moveForward</title>\n                <title
          name=\"VALUE\" config=\"25,50,100,150,200,300\">25</title>\n                <next>\n
          \                 <block type=\"jump_by_constant_dropdown\">\n                    <title
          name=\"DIR\">jumpForward</title>\n                    <title name=\"VALUE\"
          config=\"25,50,100,150,200,300\">25</title>\n                  </block>\n
          \               </next>\n              </block>\n              </statement></block></xml>"
      course2_bee_conditionals_challenge1:
        courseD_bee_conditionals_challenge1_a: |-
          Czy możesz znaleźć ścieżkę aby dotrzeć do każdego kwiatka i plastra miodu bez uderzania w żadne drzewo? Najlepszą ścieżką jest spirala.

          **Możesz to rozwiązać nawet bez skręcania w lewo.**
        courseD_bee_conditionals_challenge1_b: In this puzzle, each space could have
          a flower, a honey comb, or nothing.  That means you can repeat your `if/else`
          conditional at each square.
      course2_bee_conditionals_challenge2:
        courseD_bee_conditionals_challenge1_b: |-
          Zupełnie tak, jak w blokach 'jeśli na kwiatku', kod wewnątrz 'dopóki nektar > 0' będzie działał tylko, jeśli pszczółka jest na kwiatku. Główna różnica jest taka, że kod wewnątrz będzie się powtarzał dopóki nie będzie już żadnego nektaru. Wypróbuj ten wzór:

          <xml>  <block type="bee_whileNectarAmount">
              <title name="ARG1">nectarRemaining</title>
              <title name="OP">&gt;</title>
              <title name="ARG2">0</title>                    <statement name="DO">
                                <block type="maze_nectar"/>
                              </statement>
            </block></xml>
      course2_collector_loops_challenge2:
        courseC_maze_loops_challenge2_a: Oryginalny kod działałby świetnie - gdyby
          był tylko jeden skarb na każdym stosie!
        courseC_maze_loops_challenge2_b: Use loops so you don't run out of `collect`
          blocks!
      course2_collector_prog_challenge1:
        courseC_collector_prog_challenge1_a: Używaj komendy `collect` częściej aby
          zebrać dodatkowy skarb.
      course2_collector_prog_challenge2:
        courseC_collector_prog_challenge1_a: Używaj komendy `collect` częściej aby
          zebrać dodatkowy skarb.
      course2_harvester_loops_challenge1:
        courseC_harvester_loops_challenge1_a: Nawet nie myśl aby spróbować to zrobić
          bez użycia pętel!
        courseC_harvester_loops_challenge1_b: Możesz powtarzać `move forward` i `pick
          corn` tak wiele razy jak tylko zechcesz, następnie `turn right` w każdym
          narożniku.
        courseC_harvester_loops_challenge1_c: |-
          Najlepszy sposób na zebranie pierwszych czterech kolb kukurydzy, polega na użyciu bloku 'powtórz', wewnątrz innego bloku 'powtórz'. Możesz użyć tego wzoru też dla reszty łamigłówki!

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat">
                  <title name="TIMES">2</title>
                  <statement name="DO">
                    <block type="controls_repeat">
                      <title name="TIMES">2</title>
                      <statement name="DO">
                        <block type="maze_move">
                          <title name="DIR">moveForward</title>
                          <next>
                            <block type="harvester_corn"/>
                          </next>
                        </block>
                      </statement>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                        </block>
                      </next>
                    </block>
                  </statement>
                  </block></next></block></xml>
      course2_harvester_loops_challenge2:
        courseC_harvester_loops_challenge2_a: One way to solve this looks like a zig-zag.
          Another way looks like a spiral! There are lots of different solutions to
          a puzzle like this. Be persistent!
        courseC_harvester_loops_challenge2_b: You can repeat `move forward` and `pick
          lettuce` as many times as you need to, then turn at each corner.
        courseC_harvester_loops_challenge2_c: |-
          This zig-zag pattern can be repeated twice to finish the puzzle with just 20 blocks!

          ![](<https://images.code.org/26cfaf6fe4a275e266b51e9ef3711171-image-1493502306380.18.52 PM copy.png>)
        courseC_harvester_loops_challenge2_d: |-
          This spiral pattern can be coded with just 18 blocks!

          ![](<https://images.code.org/0bfc0a0ed6783fae908368a6e6d12c02-image-1493501358990.18.52 PM.png>)
      course2_maze_loops_challenge1:
        courseC_maze_loops_challenge1_a: Pomyśl o tej drodze, jakby była trzema różnymi
          kawałkami. Każdy ma jeden wzór, który możesz powtórzyć.
        courseC_maze_loops_challenge1_b: Pomiędzy każdym blokiem 'powtórz' będziesz
          potrzebował 'skręć w lewo' lub 'skręć w prawo', by przygotować Scrata na
          kolejny wzór.
        courseC_maze_loops_challenge1_c: |-
          Jak dojdziesz już tak daleko, potrzebujesz tylko 'skręć w lewo', potem 'idź naprzód' kilka razy. Nie poddawaj się!

          ![](<https://images.code.org/7696c5c16b8ddf1d53436cdc7fb6346d-image-1494101728016.14.34 PM.png>)
      course2_maze_programming_challenge2:
        courseC_maze_programming_challenge2_a: _Jeśli wyślesz mnie tyłem bądź bardzo
          ostrożny, bym obrócił się w dobrą stronę!_
        courseC_maze_programming_challenge2_b: Najkrótszym rozwiązaniem jest użycie
          5 bloków, ale wykorzystuje blok `repeat`!
      course3_artist_functions_challenge1:
        courseE_artist_functions_challenge1_a: Jeśli wywołasz funkcję jeszcze jeden
          raz, możesz stworzyć ten sam projekt w ostatnim rogu. Możesz też "skoczyć
          do" innych pozycji albo zmienić wszystko całkowicie w jaki tylko chcesz
          sposób!
      course3_artist_functions_challenge2:
        courseE_artist_functions_challenge1_a: |-
          <xml>
            <block type="jump_to_xy">
              <title name="XPOS">350</title>
              <title name="YPOS">200</title>
            </block>
            </xml>

          This `jump to` block lets you move the zombie artist to any pixel on the grid, whenever you want. It works by moving him a number of pixels over to the right and a number of pixels down. This is always counted from the top left corner, which it means it doesn't matter where the zombie artist is _before_ the command is run!

          ![](https://images.code.org/b90fdddc778a27e199221271ce91307a-image-1496450976440.png)
      course3_bee_debugging_challenge1:
        courseD_bee_debugging_challenge1_a: Why does the first half of this program
          work? Think about why the bee needs to move backward. How much nectar does
          the bee collect each time it moves over a flower?
        courseD_bee_debugging_challenge1_b: On the way back, have the bee follow the
          same pattern. How much honey does the bee need to make each time it moves
          over a honey comb?
        courseD_bee_debugging_challenge1_c: |-
          After the bee makes it to the bottom row, have it repeat these commands:

          -   Repeat 2 times:
              -   Move forward
              -   Make 3 honey
          -   Move backward
      course3_bee_functions_challenge1:
        courseE_bee_functions_challenge1_a: "Jeśli łamigłówka wydaje Ci się za trudna,
          spróbuj budować funkcje po kawałku.  \n\nDodaj bloki, a następnie wypróbuj
          ich działanie. Dodaj kolejne, t wypróbuj ponownie.  Wkrótce osiągniesz cel!"
        courseE_bee_functions_challenge1_b: Remember to build your code inside of
          the green function block.
      course3_bee_functions_challenge2:
        courseE_bee_functions_challenge1_a: "Jeśli łamigłówka wydaje Ci się za trudna,
          spróbuj budować funkcje po kawałku.  \n\nDodaj bloki, a następnie wypróbuj
          ich działanie. Dodaj kolejne, t wypróbuj ponownie.  Wkrótce osiągniesz cel!"
        courseE_bee_functions_challenge1_b: Remember to build your code inside of
          the green function block.
      course3_bee_functions_challenge3:
        courseF_bee_functions_challenge1_a: You can use the functions in the tool
          box to help you. You can call a function inside of another function's definition!
      course3_bee_functions_challenge4:
        courseF_bee_functions_challenge2_a: |-
          If there is a path to the right, you should do the following:

          -   Get any nectar or make any honey.
          -   Turn right towards the side path.
          -   Move to the end of the side path.
          -   Turn right.

          If you repeat the above actions twice, you will be ready to move back down the main path.

          **Only click for another hint if you want to see the full solution!**
        courseF_bee_functions_challenge2_b: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat_ext" inline="true">
                  <value name="TIMES">
                    <block type="math_number">
                      <title name="NUM">4</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="maze_untilBlocked">
                      <statement name="DO">
                        <block type="maze_move">
                          <title name="DIR">moveForward</title>
                          <next>
                            <block type="maze_if">
                              <title name="DIR">isPathRight</title>
                              <statement name="DO">
                                <block type="procedures_callnoreturn" id="function">
                                  <mutation name="move and check"/>
                                </block>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </statement>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnLeft</title>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
            <block type="procedures_defnoreturn" editable="false" usercreated="true">
              <mutation/>
              <title name="NAME">check nectar or honey</title>
              <statement name="STACK">
                <block type="bee_ifElseFlower">
                  <title name="LOC">atFlower</title>
                  <statement name="DO">
                    <block type="bee_whileNectarAmount">
                      <title name="ARG1">nectarRemaining</title>
                      <title name="OP">&gt;</title>
                      <title name="ARG2">0</title>
                      <statement name="DO">
                        <block type="maze_nectar"/>
                      </statement>
                    </block>
                  </statement>
                  <statement name="ELSE">
                    <block type="bee_whileNectarAmount">
                      <title name="ARG1">honeyAvailable</title>
                      <title name="OP">&gt;</title>
                      <title name="ARG2">0</title>
                      <statement name="DO">
                        <block type="maze_honey"/>
                      </statement>
                    </block>
                  </statement>
                </block>
              </statement>
            </block>
            <block type="procedures_defnoreturn" deletable="false" movable="false" editable="false">
              <mutation/>
              <title name="NAME">move and check</title>
              <statement name="STACK">
                <block type="controls_repeat_ext" inline="true">
                  <value name="TIMES">
                    <block type="math_number">
                      <title name="NUM">2</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="procedures_callnoreturn">
                      <mutation name="check nectar or honey"/>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                          <next>
                            <block type="maze_untilBlocked">
                              <statement name="DO">
                                <block type="maze_move">
                                  <title name="DIR">moveForward</title>
                                </block>
                              </statement>
                              <next>
                                <block type="maze_turn">
                                  <title name="DIR">turnRight</title>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </statement>
            </block>
          </xml>
      course3_collector_debugging_challenge2:
        courseD_collector_debugging_challenge2_a: "Start by focusing on collect TWO
          gems from each of the first two piles.\n\n![](<https://images.code.org/8493c16a5b913b91e28b36eb2b280b8c-image-1494775939149.25.04
          AM copy.png>)\nUse these blocks.\n\n<xml>\n<block type=\"collector_collect\"></block>\n<block
          type=\"controls_repeat\" limit=\"2\">\n    <title name=\"TIMES\">2</title>\n
          \ </block>\n<block type=\"maze_move\" x=\"175px\" y=\"17px\">\n                    <title
          name=\"DIR\">moveForward</title>\n                  </block>\n                  \n
          \n   <block type=\"controls_repeat\" limit=\"2\" x=\"175px\" y=\"56px\">\n
          \   <title name=\"TIMES\">2</title>\n  </block>\n\n\n\n</xml>"
        courseD_collector_debugging_challenge2_b: "Next, collect the remaining gems
          in this row.\n\n![](<https://images.code.org/22fff9fb20a50beaf4800aa022a5deb0-image-1494775944657.25.04
          AM.png>)\nAdd these blocks to your program.\n\n<xml><block type=\"maze_move\">\n
          \                   <title name=\"DIR\">moveBackward</title>\n                  </block>\n<block
          type=\"controls_repeat\">\n        <title name=\"TIMES\">4</title>\n        <statement
          name=\"DO\">\n          \n        </statement>\n      </block>\n</xml>"
        courseD_collector_debugging_challenge2_c: "Finally, collect the remaining
          treasure. Add these blocks to your program.\n\n<xml>\n  <block type=\"maze_turn\">\n
          \               <title name=\"DIR\">turnRight</title>\n              </block>\n
          \     <block type=\"controls_repeat\">\n        <title name=\"TIMES\">4</title>\n
          \       <statement name=\"DO\">\n          \n        </statement>\n      </block>\n</xml>"
        courseD_collector_debugging_challenge2_d: |-
          Here is the complete solution for this puzzle.

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat">
                  <title name="TIMES">4</title>
                  <statement name="DO">
                    <block type="controls_repeat">
                      <title name="TIMES">4</title>
                      <statement name="DO">
                        <block type="controls_repeat">
                          <title name="TIMES">2</title>
                          <statement name="DO">
                            <block type="maze_move">
                              <title name="DIR">moveForward</title>
                              <next>
                                <block type="controls_repeat">
                                  <title name="TIMES">2</title>
                                  <statement name="DO">
                                    <block type="collector_collect"/>
                                  </statement>
                                </block>
                              </next>
                            </block>
                          </statement>
                          <next>
                            <block type="maze_move">
                              <title name="DIR">moveBackward</title>
                            </block>
                          </next>
                        </block>
                      </statement>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
          </xml>
      course3_farmer_condLoops_challenge1:
        courseD_farmer_condLoops_challenge1_a: Przycisk `STEP` może być bardzo pomocny
          w tym wyzwaniu.
        courseD_farmer_condLoops_challenge1_b: Normally you would just `pick pumpkin`
          if you are at a pumpkin. What else do you need to do if you're at a pumpkin?
      course3_farmer_condLoops_challenge2:
        courseD_farmer_condLoops_challenge2_a: 'Ilość każdego warzywa w różnych polach
          zmienia się. Użyj do nich pętli "dopóki". '
      course3_maze_debugging_challenge1:
        courseC_maze_debugging_challenge1_a: Left or right? It's up to you!
        courseC_maze_debugging_challenge1_b: Ścieżka Scrata jest w kształcie prostokąta!
          Musi obrócić się tak samo za każdym razem!
        courseC_maze_debugging_challenge1_c: Jeśli utknąłeś, możesz zawsze zacząć
          od nowa albo usunąć cały kod i znaleźć swój własny sposób!
      course3_maze_debugging_challenge2:
        courseC_maze_debugging_challenge2_a: Jednym ze sposobów rozwiązania tego problemu
          jest dodanie więcej kroków naprzód pomiędzy skrętami.
        courseC_maze_debugging_challenge2_b: Jeśli utkniesz, zawsze możesz zacząć
          od nowa lub usunąć cały kod i znaleźć własną drogę!
        courseC_maze_debugging_challenge2_c: Są dwie ścieżki, którymi możesz podążać,
          używając tylko bloku "idź naprzód" i tylko czterech skrętów. Jeśli znajdziesz
          sposób na użycie bloku "powtórz", może ich być nawet więcej!
      course3_playLab_challenge1:
        courseE_playLab_challenge1_a: |-
          Here are some things you could do when the player wins the game:

          -   Make the dinosaur vanish.
          -   Stop the squirrels.
          -   Make the squirrels and knight happy.
          -   Set a new background.
          -   Make the knight thank the player for helping.
          -   Make all of the actors vanish and show a "You Win!" message.
        courseE_playLab_challenge1_b: |-
          Here are some things you could do when the player loses the game:

          -   Make the knight vanish.
          -   Make the squirrels sad.
          -   Make the dinosaur say something.
          -   Set a new background.
          -   Make all of the actors vanish and show a "Game Over" message.
      course4_artist_binary_challenge2:
        courseD_artist_binary_challenge2_a: |-
          The best tip I have for you is to press `⟲ Start Over` if it starts to get really messy.

          There are only few lines wrong in the original program. If one approach fails, back up and try again. There is a solution!
      course4_artist_concept_challenge2:
        courseE_artist_concept_challenge2_a: Once you define a function, you can call
          it over and over again - whenever and wherever you want!
        courseE_artist_concept_challenge2_b: |-
          You can jump to different positions on the canvas using this command:

          <xml>  <block type="jump_to">
              <title name="VALUE">???</title>
            </block></xml>
      course4_artist_functions_challenge2:
        courseE_artist_functions_challenge1_a: |-
          <xml>
            <block type="jump_to_xy">
              <title name="XPOS">350</title>
              <title name="YPOS">200</title>
            </block>
            </xml>

          This `jump to` block lets you move the zombie artist to any pixel on the grid, whenever you want. It works by moving him a number of pixels over to the right and a number of pixels down. This is always counted from the top left corner, which it means it doesn't matter where the zombie artist is _before_ the command is run!

          ![](https://images.code.org/b90fdddc778a27e199221271ce91307a-image-1496450976440.png)
      course4_artist_variables_challenge1:
        courseF_artist_variables_challenge1_a: Each vertical line has a length of
          `10`. Each horizontal line should have a length of `length`.
        courseF_artist_variables_challenge1_b: You will want to increase the value
          of `length` by 10 **twice** inside the loop.
        courseF_artist_variables_challenge1_c: To complete the pattern you will need
          to turn left twice, turn right twice, and move forward a total of four times.
        courseF_artist_variables_challenge1_d: |-
          This puzzle just uses one loop. Without any variables, a similar path might just be a zig-zag.

          ![](<https://images.code.org/664fdd219502d004fb07886f834fa3d5-image-1496868743379.51.36 PM.png>)

          If you are having trouble, start by creating this image, then try to see where you can use variables to change the length of the horizontal lines.
        courseF_artist_variables_challenge1_e: |-
          Here is the solution.

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="variables_set" inline="false">
                  <title name="VAR">length</title>
                  <value name="VALUE">
                    <block type="math_number">
                      <title name="NUM">10</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_repeat_ext" inline="true">
                      <value name="TIMES">
                        <block type="math_number">
                          <title name="NUM">18</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="draw_move" inline="true">
                          <title name="DIR">moveForward</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">10</title>
                            </block>
                          </value>
                          <next>
                            <block type="draw_turn" inline="true">
                              <title name="DIR">turnRight</title>
                              <value name="VALUE">
                                <block type="math_number">
                                  <title name="NUM">90</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_move" inline="true">
                                  <title name="DIR">moveForward</title>
                                  <value name="VALUE">
                                    <block type="variables_get">
                                      <title name="VAR">length</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="variables_set" inline="false">
                                      <title name="VAR">length</title>
                                      <value name="VALUE">
                                        <block type="math_arithmetic" inline="true">
                                          <title name="OP">ADD</title>
                                          <value name="A">
                                            <block type="variables_get">
                                              <title name="VAR">length</title>
                                            </block>
                                          </value>
                                          <value name="B">
                                            <block type="math_number">
                                              <title name="NUM">10</title>
                                            </block>
                                          </value>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn" inline="true">
                                          <title name="DIR">turnLeft</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="draw_move" inline="true">
                                              <title name="DIR">moveForward</title>
                                              <value name="VALUE">
                                                <block type="math_number">
                                                  <title name="NUM">10</title>
                                                </block>
                                              </value>
                                              <next>
                                                <block type="draw_turn" inline="true">
                                                  <title name="DIR">turnLeft</title>
                                                  <value name="VALUE">
                                                    <block type="math_number">
                                                      <title name="NUM">90</title>
                                                    </block>
                                                  </value>
                                                  <next>
                                                    <block type="draw_move" inline="true">
                                                      <title name="DIR">moveForward</title>
                                                      <value name="VALUE">
                                                        <block type="variables_get">
                                                          <title name="VAR">length</title>
                                                        </block>
                                                      </value>
                                                      <next>
                                                        <block type="variables_set" inline="false">
                                                          <title name="VAR">length</title>
                                                          <value name="VALUE">
                                                            <block type="math_arithmetic" inline="true">
                                                              <title name="OP">ADD</title>
                                                              <value name="A">
                                                                <block type="variables_get">
                                                                  <title name="VAR">length</title>
                                                                </block>
                                                              </value>
                                                              <value name="B">
                                                                <block type="math_number">
                                                                  <title name="NUM">10</title>
                                                                </block>
                                                              </value>
                                                            </block>
                                                          </value>
                                                          <next>
                                                            <block type="draw_turn" inline="true">
                                                              <title name="DIR">turnRight</title>
                                                              <value name="VALUE">
                                                                <block type="math_number">
                                                                  <title name="NUM">90</title>
                                                                </block>
                                                              </value>
                                                            </block>
                                                          </next>
                                                        </block>
                                                      </next>
                                                    </block>
                                                  </next>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      course4_bee_fwp_challenge1:
        courseF_bee_fwp_challenge1_a: |-
          The main program should look something like this:

          <xml>
          <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="procedures_callnoreturn" inline="false">
                  <mutation name="pick row">
                    <arg name="length"/>
                  </mutation>
                  <value name="ARG0">
                    <block type="math_number">
                      <title name="NUM">3</title>
                    </block>
                  </value>
                  <next>
                    <block type="maze_move">
                      <title name="DIR">moveForward</title>
                      <next>
                        <block type="maze_move">
                          <title name="DIR">moveForward</title>
                          <next>
                            <block type="procedures_callnoreturn" inline="false">
                              <mutation name="pick row">
                                <arg name="length"/>
                              </mutation>
                              <value name="ARG0">
                                <block type="math_number">
                                  <title name="NUM">5</title>
                                </block>
                              </value>
                              <next>
                                <block type="maze_move">
                                  <title name="DIR">moveForward</title>
                                  <next>
                                    <block type="maze_move">
                                      <title name="DIR">moveForward</title>
                                      <next>
                                        <block type="procedures_callnoreturn" inline="false">
                                          <mutation name="pick row">
                                            <arg name="length"/>
                                          </mutation>
                                          <value name="ARG0">
                                            <block type="math_number">
                                              <title name="NUM">6</title>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="maze_move">
                                              <title name="DIR">moveForward</title>
                                              <next>
                                                <block type="maze_move">
                                                  <title name="DIR">moveForward</title>
                                                  <next>
                                                    <block type="procedures_callnoreturn" inline="false">
                                                      <mutation name="pick row">
                                                        <arg name="length"/>
                                                      </mutation>
                                                      <value name="ARG0">
                                                        <block type="math_number">
                                                          <title name="NUM">4</title>
                                                        </block>
                                                      </value>
                                                    </block>
                                                  </next>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block></xml>
        courseF_bee_fwp_challenge1_b: |-
          Zobacz ile gotowej do żniw kukurydzy w każdym z miejsc. Czy widzisz wzór liczenia? Parametr `Length` powinien być wykorzystany do ustawienia maksymalnej wartości w `for loop`.

          Nie zapomnij aby po żniwach rolnik wrócił na główną ścieżkę!
        courseF_bee_fwp_challenge1_c: |-
          Place a `for loop` inside a function and set it to count from `1` to `length` by `1`.
          Inside this loop, you should move forward and pick all of the corn.

          <xml>
          <block type="controls_for" inline="true">
                      <title name="VAR">counter</title>
                      <value name="FROM">
                        <block type="math_number">
                          <title name="NUM">1</title>
                        </block>
                      </value>
                      <value name="TO">
                        <block type="parameters_get">
                          <title name="VAR">length</title>
                        </block>
                      </value>
                      <value name="BY">
                        <block type="math_number">
                          <title name="NUM">1</title>
                        </block>
                      </value>
                      <statement name="DO">
                      </statement>
          </block></xml>
        courseF_bee_fwp_challenge1_d: |-
          Inside the `for loop` you will want to `move forward` then `get nectar` **counter times**.
          After the `for loop` you can just `move backward` **length times**.

          You may need to read this hint several times to understand it. The part in **bold** is a hint about how to use the two `repeat` loops you will need.
        courseF_bee_fwp_challenge1_e: |-
          **Here is the solution:**

          <xml>
            <block type="procedures_defnoreturn" editable="false" usercreated="true">
              <mutation>
                <arg name="length"/>
              </mutation>
              <title name="NAME">pick row</title>
              <statement name="STACK">
                <block type="maze_turn">
                  <title name="DIR">turnLeft</title>
                  <next>
                    <block type="controls_for" inline="true">
                      <title name="VAR">counter</title>
                      <value name="FROM">
                        <block type="math_number">
                          <title name="NUM">1</title>
                        </block>
                      </value>
                      <value name="TO">
                        <block type="parameters_get">
                          <title name="VAR">length</title>
                        </block>
                      </value>
                      <value name="BY">
                        <block type="math_number">
                          <title name="NUM">1</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="maze_move">
                          <title name="DIR">moveForward</title>
                          <next>
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="harvester_corn"/>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </statement>
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="parameters_get">
                              <title name="VAR">length</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="maze_move">
                              <title name="DIR">moveBackward</title>
                            </block>
                          </statement>
                          <next>
                            <block type="maze_turn">
                              <title name="DIR">turnRight</title>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </statement>
              </block></xml>
      course4_bee_fwp_challenge2:
        courseF_bee_fwp_challenge2_a: |-
          Start by making sure you understand how this function is _supposed_ to work. As the farmer moves down each path, she will only try to collect corn. Instead, how can you make her check for each of the 3 vegetables and pick only the one she finds?

          Add conditional statements to the function to check for corn, pumpkins, and lettuce.
        courseF_bee_fwp_challenge2_b: "Are you running out of `move forward` blocks?\nTry
          using a _second_ `for loop` in your main program. \n\n**Note:** Be careful
          not to confuse `counter` with `counter2` in your code."
        courseF_bee_fwp_challenge2_c: |-
          **Here is what your function should look like:**

          <xml><block type="procedures_defnoreturn" deletable="false" movable="false" editable="false" usercreated="true">
              <mutation>
                <arg name="length"/>
              </mutation>
              <title name="NAME">pick row</title>
              <statement name="STACK">
                <block type="maze_turn">
                  <title name="DIR">turnLeft</title>
                  <next>
                    <block type="controls_for" inline="true">
                      <title name="VAR">counter</title>
                      <value name="FROM">
                        <block type="math_number">
                          <title name="NUM">1</title>
                        </block>
                      </value>
                      <value name="TO">
                        <block type="parameters_get">
                          <title name="VAR">length</title>
                        </block>
                      </value>
                      <value name="BY">
                        <block type="math_number">
                          <title name="NUM">1</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="maze_move">
                          <title name="DIR">moveForward</title>
                          <next>
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="harvester_ifHasCrop">
                                  <title name="LOC">Corn</title>
                                  <statement name="DO">
                                    <block type="harvester_corn"/>
                                  </statement>
                                  <next>
                                    <block type="harvester_ifHasCrop">
                                      <title name="LOC">Pumpkin</title>
                                      <statement name="DO">
                                        <block type="harvester_pumpkin"/>
                                      </statement>
                                      <next>
                                        <block type="harvester_ifHasCrop">
                                          <title name="LOC">Lettuce</title>
                                          <statement name="DO">
                                            <block type="harvester_lettuce"/>
                                          </statement>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </statement>
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="parameters_get">
                              <title name="VAR">length</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="maze_move">
                              <title name="DIR">moveBackward</title>
                            </block>
                          </statement>
                          <next>
                            <block type="maze_turn">
                              <title name="DIR">turnRight</title>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </statement>
            </block>
          </xml>
        courseF_bee_fwp_challenge2_d: |-
          **Here is what your main program should look like:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_for" inline="true">
                  <title name="VAR">counter2</title>
                  <value name="FROM">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <value name="TO">
                    <block type="math_number">
                      <title name="NUM">6</title>
                    </block>
                  </value>
                  <value name="BY">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="maze_move">
                      <title name="DIR">moveForward</title>
                      <next>
                        <block type="procedures_callnoreturn" inline="false">
                          <mutation name="pick row">
                            <arg name="length"/>
                          </mutation>
                          <value name="ARG0">
                            <block type="variables_get">
                              <title name="VAR">counter2</title>
                            </block>
                          </value>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
              </block></xml>
      course4_collector_nested_loops_challenge2:
        courseD_bee_nested_loops_challenge2_a: Don't forget that you can `repeat`
          a single command or a longer pattern. You can even `repeat` a `repeat` block!
        courseD_bee_nested_loops_challenge2_b: To get all 4 gems, first use a loop
          to move away from the center. Turn left or right, then use a nested loop
          to move from the first pile of treasure to the second. If you repeat the
          nested loop enough times, the collector will move around the _entire_ cave!
        courseD_bee_nested_loops_challenge2_c: The shortest program that reaches all
          the treasure uses only one `collect` block and two turns.
        courseD_bee_nested_loops_challenge2_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat_dropdown">
                  <title name="TIMES" config="3-10">3</title>
                  <statement name="DO">
                    <block type="maze_move">
                      <title name="DIR">moveForward</title>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_turn">
                      <title name="DIR">turnLeft</title>
                      <next>
                        <block type="controls_repeat_dropdown">
                          <title name="TIMES" config="3-10">3</title>
                          <statement name="DO">
                            <block type="collector_collect">
                              <next>
                                <block type="controls_repeat_dropdown">
                                  <title name="TIMES" config="3-10">3</title>
                                  <statement name="DO">
                                    <block type="maze_move">
                                      <title name="DIR">moveForward</title>
                                    </block>
                                  </statement>
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnLeft</title>
                                      <next>
                                        <block type="controls_repeat_dropdown">
                                          <title name="TIMES" config="3-10">3</title>
                                          <statement name="DO">
                                            <block type="maze_move">
                                              <title name="DIR">moveForward</title>
                                            </block>
                                          </statement>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </statement>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      course4_harvester_nested_loops_challenge1:
        courseD_harvester_nested_loops_challenge1_a: You have probably already used
          a loop to create a zig-zag pattern. If you remember that algorithm, you
          can make a few additions to it here.
      course4_playlab_variables_challenge1:
        courseF_playlab_variables_challenge1_a: |-
          Aby aktorzy mogli mówić, potrzebujesz dodatkowych bloków z zestawu komend.
          <xml><block type="studio_saySpriteParamsTime" inline="true">
          <value name="SPRITE">
          <block type="math_number">

          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TEXT">
          <block type="text">
          <title name="TEXT">Knock knock.</title>
          </block>
          </value>
          <value name="TIME">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          </block></xml>
      courseA_artist_loops2:
        courseA_artist_loops2_a: Can't figure out how to draw a line?  Start attaching
          blocks to the <xml><block type="when_run"/></xml> block to see what happens.
        courseA_artist_loops2_b: Use this block <xml><block type="simple_move_right"/></xml>
          to solve this puzzle.
      courseA_artist_loops2_2018:
        courseA_artist_loops2_a: Can't figure out how to draw a line?  Start attaching
          blocks to the <xml><block type="when_run"/></xml> block to see what happens.
        courseA_artist_loops2_b: Use this block <xml><block type="simple_move_right"/></xml>
          to solve this puzzle.
      courseA_artist_loops2_2019:
        courseA_artist_loops2_a: Can't figure out how to draw a line?  Start attaching
          blocks to the <xml><block type="when_run"/></xml> block to see what happens.
        courseA_artist_loops2_b: Use this block <xml><block type="simple_move_right"/></xml>
          to solve this puzzle.
      courseA_artist_loops3:
        courseA_artist_loops3_a: Trace slowly through the program with your finger
          to see where it goes wrong.
        courseA_artist_loops3_b: |-
          You will want to use a block like this to solve this puzzle.

          ![](<https://images.code.org/16a3ab2e639eacee18ee5405ed9966dc-image-1498670745551.24.49 AM.png>)
      courseA_artist_loops3_2018:
        courseA_artist_loops3_a: Trace slowly through the program with your finger
          to see where it goes wrong.
        courseA_artist_loops3_b: |-
          You will want to use a block like this to solve this puzzle.

          ![](<https://images.code.org/16a3ab2e639eacee18ee5405ed9966dc-image-1498670745551.24.49 AM.png>)
      courseA_artist_loops3_2019:
        courseA_artist_loops3_a: Trace slowly through the program with your finger
          to see where it goes wrong.
        courseA_artist_loops3_b: |-
          You will want to use a block like this to solve this puzzle.

          ![](<https://images.code.org/16a3ab2e639eacee18ee5405ed9966dc-image-1498670745551.24.49 AM.png>)
      courseA_artist_loops4:
        courseA_artist_loops4_a: Jeśli chcesz, aby pętla powtarzała się więcej niż
          4 razy, możesz zmienić wartość na górze bloku.
        courseA_artist_loops4_b: |-
          Since you can only use one <xml><block type="simple_move_right"/></xml>

          block, try putting it inside of the <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="2-6">5</title></block></xml> loop.
      courseA_artist_loops4_2018:
        courseA_artist_loops4_a: Jeśli chcesz, aby pętla powtarzała się więcej niż
          4 razy, możesz zmienić wartość na górze bloku.
        courseA_artist_loops4_b: |-
          Since you can only use one <xml><block type="simple_move_right"/></xml>

          block, try putting it inside of the <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="2-6">5</title></block></xml> loop.
      courseA_artist_loops4_2019:
        courseA_artist_loops4_a: Jeśli chcesz, aby pętla powtarzała się więcej niż
          4 razy, możesz zmienić wartość na górze bloku.
        courseA_artist_loops4_b: |-
          Since you can only use one <xml><block type="simple_move_right"/></xml>

          block, try putting it inside of the <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="2-6">5</title></block></xml> loop.
      courseA_artist_loops5:
        courseA_artist_loops5_a: Try using what you've learned about <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml> blocks to complete
          this puzzle!
        courseA_artist_loops5_b: Jeśli chcesz, aby pętla powtarzała się więcej niż
          4 razy, możesz zmienić wartość na górze bloku.
        courseA_artist_loops5_c: "Since you can only use one <xml><block type=\"simple_move_right\"/></xml>
          block, try putting it inside of the \n\n<xml><block type=\"controls_repeat_simplified_dropdown\"><title
          name=\"TIMES\" config=\"3-10\">???</title></block></xml>\n\nloop."
      courseA_artist_loops5_2018:
        courseA_artist_loops5_a: Try using what you've learned about <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml> blocks to complete
          this puzzle!
        courseA_artist_loops5_b: Jeśli chcesz, aby pętla powtarzała się więcej niż
          4 razy, możesz zmienić wartość na górze bloku.
        courseA_artist_loops5_c: "Since you can only use one <xml><block type=\"simple_move_right\"/></xml>
          block, try putting it inside of the \n\n<xml><block type=\"controls_repeat_simplified_dropdown\"><title
          name=\"TIMES\" config=\"3-10\">???</title></block></xml>\n\nloop."
      courseA_artist_loops5_2019:
        courseA_artist_loops5_a: Try using what you've learned about <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml> blocks to complete
          this puzzle!
        courseA_artist_loops5_b: Jeśli chcesz, aby pętla powtarzała się więcej niż
          4 razy, możesz zmienić wartość na górze bloku.
        courseA_artist_loops5_c: "Since you can only use one <xml><block type=\"simple_move_right\"/></xml>
          block, try putting it inside of the \n\n<xml><block type=\"controls_repeat_simplified_dropdown\"><title
          name=\"TIMES\" config=\"3-10\">???</title></block></xml>\n\nloop."
      courseA_artist_loops6:
        courseA_artist_loops6_a: Can't figure out how to make the hill?  Try playing
          with the blocks a bit to see what each one draws.
        courseA_artist_loops6_b: Będziesz potrzebował 2 bloków w 2 kierunkach aby
          rozwiązać tą zagadkę.
      courseA_artist_loops6_2018:
        courseA_artist_loops6_a: Can't figure out how to make the hill?  Try playing
          with the blocks a bit to see what each one draws.
        courseA_artist_loops6_b: Będziesz potrzebował 2 bloków w 2 kierunkach aby
          rozwiązać tą zagadkę.
      courseA_artist_loops6_2019:
        courseA_artist_loops6_a: Can't figure out how to make the hill?  Try playing
          with the blocks a bit to see what each one draws.
        courseA_artist_loops6_b: Będziesz potrzebował 2 bloków w 2 kierunkach aby
          rozwiązać tą zagadkę.
      courseA_artist_loops7:
        courseA_artist_loops7_a: Can't figure out where to put the loop? Try writing
          the code step-by-step and look for a pattern.
        courseA_artist_loops7_b: Napisz kod tylko dla pierwszej fali, potem to powtórz
          aby narysować pozostałe dwie.
        courseA_artist_loops7_c: Remember you can put more than one block in a <xml><block
          type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
          loop.
      courseA_artist_loops7_2018:
        courseA_artist_loops7_a: Can't figure out where to put the loop? Try writing
          the code step-by-step and look for a pattern.
        courseA_artist_loops7_b: Napisz kod tylko dla pierwszej fali, potem to powtórz
          aby narysować pozostałe dwie.
        courseA_artist_loops7_c: |-
          Remember you can put more than one block in a <xml><block type="controls_repeat_simplified_dropdown">
              <title name="TIMES" config="3-10">???</title>
            </block></xml> loop.
      courseA_artist_loops7_2019:
        courseA_artist_loops7_a: Can't figure out where to put the loop? Try writing
          the code step-by-step and look for a pattern.
        courseA_artist_loops7_b: Napisz kod tylko dla pierwszej fali, potem to powtórz
          aby narysować pozostałe dwie.
        courseA_artist_loops7_c: |-
          Remember you can put more than one block in a <xml><block type="controls_repeat_simplified_dropdown">
              <title name="TIMES" config="3-10">???</title>
            </block></xml> loop.
      courseA_artist_loops8:
        courseA_artist_loops8_a: Try running the code to see what has been written
          for you.
        courseA_artist_loops8_b: How would you loop the code that has been given to
          you?
        courseA_artist_loops8_c: |-
          What does the code do?\
          What is it supposed to do?\
          What does that tell you?
      courseA_artist_loops8_2018:
        courseA_artist_loops8_a: Try running the code to see what has been written
          for you.
        courseA_artist_loops8_b: How would you loop the code that has been given to
          you?
        courseA_artist_loops8_c: |-
          What does the code do?\
          What is it supposed to do?\
          What does that tell you?
      courseA_artist_loops8_2019:
        courseA_artist_loops8_a: Try running the code to see what has been written
          for you.
        courseA_artist_loops8_b: How would you loop the code that has been given to
          you?
        courseA_artist_loops8_c: |-
          What does the code do?\
          What is it supposed to do?\
          What does that tell you?
      courseA_artist_loops9:
        courseA_artist_loops9_a: Add another block to the code you are given to draw
          the rest of the stairs.
        courseA_artist_loops9_b: "The block you add should go inside of the \n\n<xml><block
          type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">5</title></block>\n</xml>\n\n
          loop."
        courseA_artist_loops9_c: Jeśli nie wiesz gdzie umieścić pętlę, spróbuj pisać
          swój kod krok po kroku oraz szukać wzorców.
      courseA_artist_loops9_2018:
        courseA_artist_loops9_a: Add another block to the code you are given to draw
          the rest of the stairs.
        courseA_artist_loops9_b: |-
          The block you add should go inside of the <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">5</title></block>
          </xml> loop.
        courseA_artist_loops9_c: Jeśli nie wiesz gdzie umieścić pętlę, spróbuj pisać
          swój kod krok po kroku oraz szukać wzorców.
      courseA_artist_loops9_2019:
        courseA_artist_loops9_a: Add another block to the code you are given to draw
          the rest of the stairs.
        courseA_artist_loops9_b: "The block you add should go inside of the \n\n<xml><block
          type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">5</title></block>\n</xml>\n\n
          loop."
        courseA_artist_loops9_c: Jeśli nie wiesz gdzie umieścić pętlę, spróbuj pisać
          swój kod krok po kroku oraz szukać wzorców.
      courseA_artist_loops_challenge2a:
        courseA_artist_loops_challenge2_a: Blocks like this <xml>  <block type="simple_move_up_left"/></xml>
          will let your artist move at a slant!
        courseA_artist_loops_challenge2_b: Jak skończysz jeden namiot, `jump` podwójnie
          aby przejść do następnego!
        courseA_artist_loops_challenge2_c: Wszystkie Twoje bloki muszą być wewnątrz
          pętli aby ukończyć tą zagadkę.
      courseA_artist_loops_challenge2a_2018:
        courseA_artist_loops_challenge2_a: Blocks like this <xml>  <block type="simple_move_up_left"/></xml>
          will let your artist move at a slant!
        courseA_artist_loops_challenge2_b: Jak skończysz jeden namiot, `jump` podwójnie
          aby przejść do następnego!
        courseA_artist_loops_challenge2_c: Wszystkie Twoje bloki muszą być wewnątrz
          pętli aby ukończyć tą zagadkę.
      courseA_artist_loops_challenge2a_2019:
        courseA_artist_loops_challenge2_a: Blocks like this <xml>  <block type="simple_move_up_left"/></xml>
          will let your artist move at a slant!
        courseA_artist_loops_challenge2_b: Jak skończysz jeden namiot, `jump` podwójnie
          aby przejść do następnego!
        courseA_artist_loops_challenge2_c: Wszystkie Twoje bloki muszą być wewnątrz
          pętli aby ukończyć tą zagadkę.
      courseA_collector_loops1:
        courseA_collector_loops1_a: |-
          After you have moved to a square with treasure, use this block to pick it up.

          <xml>  <block type="collector_collect"/></xml>
        courseA_collector_loops1_b: A simple solution would be to move East 2 times,
          then get the treasure.
      courseA_collector_loops1_2018:
        courseA_collector_loops1_a: |-
          After you have moved to a square with treasure, use this block to pick it up.

          <xml>  <block type="collector_collect"/></xml>
        courseA_collector_loops1_b: A simple solution would be to move East 2 times,
          then get the treasure.
      courseA_collector_loops1_2019:
        courseA_collector_loops1_a: |-
          After you have moved to a square with treasure, use this block to pick it up.

          <xml>  <block type="collector_collect"/></xml>
        courseA_collector_loops1_b: A simple solution would be to move East 2 times,
          then get the treasure.
      courseA_collector_loops2:
        courseA_collector_loops2_a: Będziesz musiał się ruszyć zanim zbierzesz jakiś
          skarb.
        courseA_collector_loops2_b: |-
          After you have moved to a square with treasure, use this block to pick it up.

          <xml>  <block type="collector_collect"/></xml>
      courseA_collector_loops2_2018:
        courseA_collector_loops2_a: Będziesz musiał się ruszyć zanim zbierzesz jakiś
          skarb.
        courseA_collector_loops2_b: |-
          After you have moved to a square with treasure, use this block to pick it up.

          <xml>  <block type="collector_collect"/></xml>
      courseA_collector_loops2_2019:
        courseA_collector_loops2_a: Będziesz musiał się ruszyć zanim zbierzesz jakiś
          skarb.
        courseA_collector_loops2_b: |-
          After you have moved to a square with treasure, use this block to pick it up.

          <xml>  <block type="collector_collect"/></xml>
      courseA_collector_loops3:
        courseA_collector_loops3_a: Try using a <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml> loop!
        courseA_collector_loops3_b: Remember, you can put more than 1 block inside
          a <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES"
          config="3-10">???</title></block></xml> loop.
      courseA_collector_loops3_2018:
        courseA_collector_loops3_a: Try using a <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml> loop!
        courseA_collector_loops3_b: Remember, you can put more than 1 block inside
          a <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES"
          config="3-10">???</title></block></xml> loop.
      courseA_collector_loops3_2019:
        courseA_collector_loops3_a: "Try using a \n\n<xml><block type=\"controls_repeat_simplified_dropdown\"><title
          name=\"TIMES\" config=\"3-10\">???</title></block></xml>\n\n loop!"
        courseA_collector_loops3_b: Remember, you can put more than 1 block inside
          a <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES"
          config="3-10">???</title></block></xml> loop.
      courseA_collector_loops4:
        courseA_collector_loops4_a: To change how far Laurel goes, change the number
          of times that the loop runs.
        courseA_collector_loops4_b: Don't forget that Laurel needs to walk down and
          collect the treasure after she finishes the <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml> loop!
      courseA_collector_loops4_2018:
        courseA_collector_loops4_a: To change how far Laurel goes, change the number
          of times that the loop runs.
        courseA_collector_loops4_b: Don't forget that Laurel needs to walk down and
          collect the treasure after she finishes the <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml> loop!
      courseA_collector_loops4_2019:
        courseA_collector_loops4_a: To change how far Laurel goes, change the number
          of times that the loop runs.
        courseA_collector_loops4_b: Don't forget that Laurel needs to walk down and
          collect the treasure after she finishes the <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml> loop!
      courseA_collector_loops5:
        courseA_collector_loops5_a: Jeśli nie możesz zgadnąć odpowiedzi od razu, spróbuj
          użyć kartki papieru aby rozwiązać jakich strzałek będziesz potrzebował i
          poszukaj wzorca.
        courseA_collector_loops5_b: Spróbuj rozdzielić problem na 2 części, poruszaj
          się bokiem i potem na dół.
        courseA_collector_loops5_c: You'll want to start with a <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml> loop that moves Laurel
          west and collects treasure.
      courseA_collector_loops5_2018:
        courseA_collector_loops5_a: Jeśli nie możesz zgadnąć odpowiedzi od razu, spróbuj
          użyć kartki papieru aby rozwiązać jakich strzałek będziesz potrzebował i
          poszukaj wzorca.
        courseA_collector_loops5_b: Spróbuj rozdzielić problem na 2 części, poruszaj
          się bokiem i potem na dół.
        courseA_collector_loops5_c: You'll want to start with a <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml> loop that moves Laurel
          west and collects treasure.
      courseA_collector_loops5_2019:
        courseA_collector_loops5_a: Jeśli nie możesz zgadnąć odpowiedzi od razu, spróbuj
          użyć kartki papieru aby rozwiązać jakich strzałek będziesz potrzebował i
          poszukaj wzorca.
        courseA_collector_loops5_b: Spróbuj rozdzielić problem na 2 części, poruszaj
          się bokiem i potem na dół.
        courseA_collector_loops5_c: You'll want to start with a <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml> loop that moves Laurel
          west and collects treasure.
      courseA_collector_loops6:
        courseA_collector_loops6_a: Nie możesz znaleźć, co jest źle? Spróbuj uruchomić
          kod kilkukrotnie, aby zobaczyć co się dzieje.
        courseA_collector_loops6_b: The shortest solution has 2 <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml> loops, one after the
          other.
      courseA_collector_loops6_2018:
        courseA_collector_loops6_a: Nie możesz znaleźć, co jest źle? Spróbuj uruchomić
          kod kilkukrotnie, aby zobaczyć co się dzieje.
        courseA_collector_loops6_b: The shortest solution has 2 <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml> loops, one after the
          other.
      courseA_collector_loops6_2019:
        courseA_collector_loops6_a: Nie możesz znaleźć, co jest źle? Spróbuj uruchomić
          kod kilkukrotnie, aby zobaczyć co się dzieje.
        courseA_collector_loops6_b: The shortest solution has 2 <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml> loops, one after the
          other.
      courseA_collector_loops7:
        courseA_collector_loops7_a: Jeśli nie wiesz co będzie dalej, uruchom kod aby
          zobaczyć gdzie Laurel skończy.
      courseA_collector_loops7_2018:
        courseA_collector_loops7_a: Jeśli nie wiesz co będzie dalej, uruchom kod aby
          zobaczyć gdzie Laurel skończy.
      courseA_collector_loops7_2019:
        courseA_collector_loops7_a: Jeśli nie wiesz co będzie dalej, uruchom kod aby
          zobaczyć gdzie Laurel skończy.
      courseA_collector_loops8:
        courseA_collector_loops8_a: If you are having trouble figuring this puzzle
          out, try writing the moves down on a piece of paper and looking for a pattern.
        courseA_collector_loops8_b: Spróbuj rozbić tą zagadkę na 3 oddzielne części,
          i napisać pętle dla każdej z nich.
        courseA_collector_loops8_c: Pamiętaj, że możesz napisać jeden fragment kodu,
          nacisnąć "Idź" aby dowiedzieć się gdzie musisz iść.
      courseA_collector_loops8_2018:
        courseA_collector_loops8_a: If you are having trouble figuring this puzzle
          out, try writing the moves down on a piece of paper and looking for a pattern.
        courseA_collector_loops8_b: Spróbuj rozbić tą zagadkę na 3 oddzielne części,
          i napisać pętle dla każdej z nich.
        courseA_collector_loops8_c: Pamiętaj, że możesz napisać jeden fragment kodu,
          nacisnąć "Idź" aby dowiedzieć się gdzie musisz iść.
      courseA_collector_loops8_2019:
        courseA_collector_loops8_a: If you are having trouble figuring this puzzle
          out, try writing the moves down on a piece of paper and looking for a pattern.
        courseA_collector_loops8_b: Spróbuj rozbić tą zagadkę na 3 oddzielne części,
          i napisać pętle dla każdej z nich.
        courseA_collector_loops8_c: Pamiętaj, że możesz napisać jeden fragment kodu,
          nacisnąć "Idź" aby dowiedzieć się gdzie musisz iść.
      courseA_collector_loops9:
        courseA_collector_loops9_a: 'If you can''t spot the best places to use loops,
          try coding it out step-by-step and look for a pattern. '
        courseA_collector_loops9_b: Try putting 2 of your <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml> loops inside of another
          loop to make your code shorter!
      courseA_collector_loops9_2018:
        courseA_collector_loops9_a: 'If you can''t spot the best places to use loops,
          try coding it out step-by-step and look for a pattern. '
        courseA_collector_loops9_b: Try putting 2 of your <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml> loops inside of another
          loop to make your code shorter!
      courseA_collector_loops9_2019:
        courseA_collector_loops9_a: 'If you can''t spot the best places to use loops,
          try coding it out step-by-step and look for a pattern. '
        courseA_collector_loops9_b: Try putting 2 of your <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml> loops inside of another
          loop to make your code shorter!
      courseA_collector_loops_challenge1:
        courseA_collector_loops_challenge1_a: Spróbuj zmienić wartości w każdej pętli,
          jeśli coś wydaje się źle.
        courseA_collector_loops_challenge1_b: Nie musisz używać pętli jeśli robisz
          coś tylko jeden raz.
        courseA_collector_loops_challenge1_c: There are 6 gems on the right side of
          the cave when you start, but you only need to get treasure 5 times moving
          South. Do you know why?
        courseA_collector_loops_challenge1_d: |-
          The starting program doesn't collect the last 2 gems. Try adding this code at the very end:

          <xml><block type="maze_moveEast">
                                  <next>
                                    <block type="collector_collect_simplified">
                                      <next>
                                        <block type="maze_moveSouth">
                                          <next>
                                            <block type="collector_collect"/>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block></xml>
      courseA_collector_loops_challenge1_2018:
        courseA_collector_loops_challenge1_a: Spróbuj zmienić wartości w każdej pętli,
          jeśli coś wydaje się źle.
        courseA_collector_loops_challenge1_b: Nie musisz używać pętli jeśli robisz
          coś tylko jeden raz.
        courseA_collector_loops_challenge1_c: There are 6 gems on the right side of
          the cave when you start, but you only need to get treasure 5 times moving
          South. Do you know why?
        courseA_collector_loops_challenge1_d: |-
          The starting program doesn't collect the last 2 gems. Try adding this code at the very end:

          <xml><block type="maze_moveEast">
                                  <next>
                                    <block type="collector_collect_simplified">
                                      <next>
                                        <block type="maze_moveSouth">
                                          <next>
                                            <block type="collector_collect"/>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block></xml>
      courseA_collector_loops_challenge1_2019:
        courseA_collector_loops_challenge1_a: Spróbuj zmienić wartości w każdej pętli,
          jeśli coś wydaje się źle.
        courseA_collector_loops_challenge1_b: Nie musisz używać pętli jeśli robisz
          coś tylko jeden raz.
        courseA_collector_loops_challenge1_c: There are 6 gems on the right side of
          the cave when you start, but you only need to get treasure 5 times moving
          South. Do you know why?
        courseA_collector_loops_challenge1_d: |-
          The starting program doesn't collect the last 2 gems. Try adding this code at the very end:

          <xml><block type="maze_moveEast">
                                  <next>
                                    <block type="collector_collect_simplified">
                                      <next>
                                        <block type="maze_moveSouth">
                                          <next>
                                            <block type="collector_collect"/>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block></xml>
      courseA_collector_loops_challenge2:
        courseA_collector_loops_challenge2_b: You only need to use 1 block to solve
          this.
        courseA_collector_loops_challenge2_a: You can move back over the path a second
          time before moving south.
      courseA_collector_loops_challenge2kp:
        courseA_collector_loops_challenge2kp_b: Try this path to get you to a solution.
        courseA_collector_loops_challenge2kp_a: Can you use loops to solve this puzzle?
      courseA_collector_loops_challenge2kp_2018:
        courseA_collector_loops_challenge2kp_b: Try this path to get you to a solution.
        courseA_collector_loops_challenge2kp_a: Can you use loops to solve this puzzle?
      courseA_collector_loops_challenge2kp_2019:
        courseA_collector_loops_challenge2kp_b: Try this path to get you to a solution.
        courseA_collector_loops_challenge2kp_a: Can you use loops to solve this puzzle?
      courseA_collector_preLoops4:
        courseA_collector_preLoops4_a: To grab the treasure, snap two ![](https://images.code.org/2df8a25d7e96207f57d1a6b504950b70-image-1508906116743.34.37.png)
          blocks and one ![](https://images.code.org/563c0deb5c51d43cdfa72d62dec3419d-image-1508904559201.05.30.png)
          block to the bottom of the program and click "Run"!
      courseA_collector_preLoops5:
        courseA_collector_preLoops5_a: You'll need to go two different directions
          to get even one gem!
      courseA_collector_preLoops6:
        courseA_collector_preLoops6_a: You will need to use two ![](https://images.code.org/563c0deb5c51d43cdfa72d62dec3419d-image-1508904559201.05.30.png)
          blocks to solve this puzzle.
      courseA_collector_preLoops7:
        courseA_collector_loops2_b: |-
          After you have moved to a square with treasure, use this block to pick it up.

          <xml>  <block type="collector_collect"/></xml>
      courseA_harvester_loops1:
        courseA_harvester_loops1_a: |-
          Once you move to some corn, use this block to pick it!

          <xml><block type="harvester_corn"/></xml>
      courseA_harvester_loops1_2019:
        courseA_harvester_loops1_a: |-
          Once you move to some corn, use this block to pick it!

          <xml><block type="harvester_corn"/></xml>
      courseA_harvester_loops2:
        courseA_harvester_loops2_a: |-
          Your code will have **four** `move west` <xml><block type="maze_moveWest"/></xml> blocks

          and **four** `pick corn` <xml><block type="harvester_corn"/></xml> blocks.
        courseA_harvester_loops2_b: 'If you''re still having trouble, try saying the
          steps out loud. '
      courseA_harvester_loops2_2019:
        courseA_harvester_loops2_a: "Twój kod będzie miał **cztery** bloki  \"przejdź
          na zachód\"\n\n<xml><block type=\"maze_moveWest\"/></xml>\n\ni **cztery**
          bloki <xml>\n`pick corn`\n  <block type=\"harvester_corn\"/>\n</xml>. "
        courseA_harvester_loops2_b: 'If you''re still having trouble, try saying the
          steps out loud. '
      courseA_harvester_loops3:
        courseA_harvester_loops3_a: |-
          Use a `repeat` block like this to help you!

          <xml><block type="controls_repeat_simplified_dropdown">
              <title name="TIMES" config="2-10">4</title>
            </block></xml>
        courseA_harvester_loops3_b: Aby powtórzyć kod, przeciągnij pętlę `repeat`,
          następnie umieść tam blok, który chcesz aby się powtarzał.
      courseA_harvester_loops3_2019:
        courseA_harvester_loops3_a: |-
          Use a `repeat` block like this to help you!

          <xml><block type="controls_repeat_simplified_dropdown">
              <title name="TIMES" config="2-10">4</title>
            </block></xml>
        courseA_harvester_loops3_b: Aby powtórzyć kod, przeciągnij pętlę `repeat`,
          następnie umieść tam blok, który chcesz aby się powtarzał.
      courseA_harvester_loops4:
        courseA_harvester_loops4_a: Don't be afraid to press `Run` to see what happens!
        courseA_harvester_loops4_b: How many pieces of corn are there? How many times
          does your code repeat?
      courseA_harvester_loops4_2019:
        courseA_harvester_loops4_a: Don't be afraid to press `Run` to see what happens!
        courseA_harvester_loops4_b: How many pieces of corn are there? How many times
          does your code repeat?
      courseA_harvester_loops5:
        courseA_harvester_loops5_a: Jeśli utkniesz, spróbuj rozwiązać zagadnę w 2
          etapach, pierwsza część przed zakrętem, druga po zakręcie.
        courseA_harvester_loops5_b: |-
          Your final code will have **one** `repeat`  <xml><block type="controls_repeat_simplified_dropdown">
              <title name="TIMES" config="2-10">6</title>
              </block></xml> loop, **one** `move South`   <xml><block type="maze_moveSouth" limit="1"/></xml> block, and **one** `move East`   <xml><block type="maze_moveEast" limit="1"/> </xml>block.
        courseA_harvester_loops5_c: Use this path to pick all the corn!
      courseA_harvester_loops5_2019:
        courseA_harvester_loops5_a: Jeśli utkniesz, spróbuj rozwiązać zagadnę w 2
          etapach, pierwsza część przed zakrętem, druga po zakręcie.
        courseA_harvester_loops5_b: |-
          Your final code will have **one** `repeat`  <xml><block type="controls_repeat_simplified_dropdown">
              <title name="TIMES" config="2-10">6</title>
              </block></xml> loop, **one** `move South`   <xml><block type="maze_moveSouth" limit="1"/></xml> block, and **one** `move East`   <xml><block type="maze_moveEast" limit="1"/> </xml>block.
        courseA_harvester_loops5_c: Use this path to pick all the corn!
      courseA_harvester_loops5a:
        courseA_harvester_loops5a_a: |-
          You will need one `repeat` <xml> <block type="controls_repeat_simplified_dropdown">
              <title name="TIMES" config="2-10">6</title>
            </block></xml> loop after another.
        courseA_harvester_loops5a_b: One loop will repeat `move South`<xml><block
          type="maze_moveSouth" limit="1"/></xml>, and the other will repeat `move
          East` <xml><block type="maze_moveEast" limit="1"/></xml>
        courseA_harvester_loops5a_c: Use this path to move one way, and then the other.
      courseA_harvester_loops5a_2019:
        courseA_harvester_loops5a_a: |-
          You will need one `repeat` <xml> <block type="controls_repeat_simplified_dropdown">
              <title name="TIMES" config="2-10">6</title>
            </block></xml> loop after another.
        courseA_harvester_loops5a_b: One loop will repeat `move South`<xml><block
          type="maze_moveSouth" limit="1"/></xml>, and the other will repeat `move
          East` <xml><block type="maze_moveEast" limit="1"/></xml>
        courseA_harvester_loops5a_c: Use this path to move one way, and then the other.
      courseA_harvester_loops5b:
        courseA_harvester_loops5b_a: Press `Run` and see what happens!
        courseA_harvester_loops5b_b: Are your loops repeating the right number of
          times?
        courseA_harvester_loops5b_c: Move one way, then the other with this path.
      courseA_harvester_loops5b_2019:
        courseA_harvester_loops5b_a: Press `Run` and see what happens!
        courseA_harvester_loops5b_b: Are your loops repeating the right number of
          times?
        courseA_harvester_loops5b_c: Move one way, then the other with this path.
      courseA_harvester_loops6:
        courseA_harvester_loops6_a: If you get stuck, try writing the steps on paper
          and looking for repeating patterns.
        courseA_harvester_loops6_b: This is the path you should take to pick all the
          corn.
      courseA_harvester_loops6_2019:
        courseA_harvester_loops6_a: If you get stuck, try writing the steps on paper
          and looking for repeating patterns.
        courseA_harvester_loops6_b: This is the path you should take to pick all the
          corn.
      courseA_harvester_loops7:
        courseA_harvester_loops7_a: |-
          You will need two `repeat` <xml><block type="controls_repeat_simplified_dropdown">
              <title name="TIMES" config="2-10">5</title>
            </block></xml>loops after each other!
        courseA_harvester_loops7_b: Use two loops to follow this path.
      courseA_harvester_loops7_2019:
        courseA_harvester_loops7_a: |-
          You will need two `repeat` <xml><block type="controls_repeat_simplified_dropdown">
              <title name="TIMES" config="2-10">5</title>
            </block></xml>loops after each other!
        courseA_harvester_loops7_b: Use two loops to follow this path.
      courseA_harvester_loops9:
        courseA_harvester_loops9_a: Break this puzzle up into three different parts.
          One part to the first corner, one part to the second corner, and one part
          to the end.
        courseA_harvester_loops9_b: Don't be afraid to run your code after every part
          to see what happens!
        courseA_harvester_loops9_c: Follow this path to pick all the corn.
      courseA_harvester_loops9_2019:
        courseA_harvester_loops9_a: Break this puzzle up into three different parts.
          One part to the first corner, one part to the second corner, and one part
          to the end.
        courseA_harvester_loops9_b: Don't be afraid to run your code after every part
          to see what happens!
        courseA_harvester_loops9_c: Follow this path to pick all the corn.
      courseA_harvester_seq1:
        courseA_harvester_seq1_a: |-
          Use this block to pick the corn when the harvester finds it!

          <xml>
            <block type="harvester_corn"/>
          </xml>
        courseA_harvester_seq1_b: |-
          The harvester will need to move East three times to get to the corn. Use this block:

          <xml>
            <block type="maze_moveEast"/>
          </xml>
      courseA_harvester_seq10:
        courseA_harvester_seq10_a: Are you stuck? Try writing down the steps on a
          piece of paper first.
        courseA_harvester_seq10_b: You need to `Move East`, then `Move North`. Do
          this two times. Don't forget to get all the corn too!
        courseA_harvester_seq10_c: Try using this path to pick all the corn.
      courseA_harvester_seq10_2019:
        courseA_harvester_seq10_a: Are you stuck? Try writing down the steps on a
          piece of paper first.
        courseA_harvester_seq10_b: You need to `Move East`, then `Move North`. Do
          this two times. Don't forget to get all the corn too!
        courseA_harvester_seq10_c: Try using this path to pick all the corn.
      courseA_harvester_seq13:
        courseA_bee_seq1_a: |-
          Use this block to pick corn once the harvester gets to it.

          <xml>
            <block type="harvester_corn"/>
          </xml>
      courseA_harvester_seq13_2019:
        courseA_bee_seq1_a: |-
          Use this block to pick corn once the harvester gets to it.

          <xml>
            <block type="harvester_corn"/>
          </xml>
      courseA_harvester_seq1_2019:
        courseA_harvester_seq1_a: |-
          Use this block to pick the corn when the harvester finds it!

          <xml>
            <block type="harvester_corn"/>
          </xml>
        courseA_harvester_seq1_b: |-
          The harvester will need to move East three times to get to the corn. Use this block:

          <xml>
            <block type="maze_moveEast"/>
          </xml>
      courseA_harvester_seq2:
        courseA_harvester_seq2_a: Don't forget to use <xml><block type="harvester_corn"/></xml>
          to pick the corn!
        courseA_harvester_seq2_b: Try writing down the steps on paper to find a solution!
      courseA_harvester_seq2_2019:
        courseA_harvester_seq2_a: Don't forget to use <xml><block type="harvester_corn"/></xml>
          to pick the corn!
        courseA_harvester_seq2_b: Try writing down the steps on paper to find a solution!
      courseA_harvester_seq3:
        courseA_harvester_seq3_a: |-
          Did you remember to use this block?

          <xml><block type="harvester_corn"/></xml>
        courseA_harvester_seq3_b: Say the steps out loud and see if it helps you figure
          out the answer.
      courseA_harvester_seq3_2019:
        courseA_harvester_seq3_a: |-
          Did you remember to use this block?

          <xml><block type="harvester_corn"/></xml>
        courseA_harvester_seq3_b: Say the steps out loud and see if it helps you figure
          out the answer.
      courseA_harvester_seq4:
        courseA_harvester_seq4_a: How many spaces are between the Harvester and the
          corn? How many blocks are already in your workspace?
        courseA_harvester_seq4_b: |-
          You will need five `Move East` blocks and one `Pick Corn` block:

          <xml><block type="harvester_corn"/></xml>
      courseA_harvester_seq4_2019:
        courseA_harvester_seq4_a: How many spaces are between the Harvester and the
          corn? How many blocks are already in your workspace?
        courseA_harvester_seq4_b: |-
          You will need five `Move East` blocks and one `Pick Corn` block:

          <xml><block type="harvester_corn"/></xml>
      courseA_harvester_seq5:
        courseA_harvester_seq5_a: Which block moves the harvester the wrong way?
        courseA_harvester_seq5_b: You need to remove one block.
        courseA_harvester_seq5_c: |-
          Throw this block in the trash!

          <xml><block type="maze_moveNorth"/></xml>
      courseA_harvester_seq5_2019:
        courseA_harvester_seq5_a: Which block moves the harvester the wrong way?
        courseA_harvester_seq5_b: You need to remove one block.
        courseA_harvester_seq5_c: |-
          Throw this block in the trash!

          <xml><block type="maze_moveNorth"/></xml>
      courseA_harvester_seq6:
        courseA_harvester_seq6_a: If you're stuck, try saying the steps out loud.
          It could help you figure out the right path.
      courseA_harvester_seq6_2019:
        courseA_harvester_seq6_a: If you're stuck, try saying the steps out loud.
          It could help you figure out the right path.
      courseA_harvester_seq7:
        courseA_harvester_seq7_a: Try solving the puzzle in 2 parts, one part before
          the corner and one part after the corner.
        courseA_harvester_seq7_b: Having trouble? This is the path the harvester should
          take.
      courseA_harvester_seq7_2019:
        courseA_harvester_seq7_a: Try solving the puzzle in 2 parts, one part before
          the corner and one part after the corner.
        courseA_harvester_seq7_b: Having trouble? This is the path the harvester should
          take.
      courseA_harvester_seq8:
        courseA_harvester_seq8_a: Your final code should have **4** movement blocks
          and **2** pick blocks.
      courseA_harvester_seq8_2019:
        courseA_harvester_seq8_a: Your final code should have **4** movement blocks
          and **2** pick blocks.
      courseA_harvester_seq9:
        courseA_harvester_seq9_a: Run the code a few times to see what happens. Where
          does the harvester stop?
        courseA_harvester_seq9_b: Don't forget to pick all the corn! You will need
          **3** pick corn blocks.
        courseA_harvester_seq9_c: You should take this path to pick all the corn.
      courseA_harvester_seq9_2019:
        courseA_harvester_seq9_a: Run the code a few times to see what happens. Where
          does the harvester stop?
        courseA_harvester_seq9_b: Don't forget to pick all the corn! You will need
          **3** pick corn blocks.
        courseA_harvester_seq9_c: You should take this path to pick all the corn.
      courseA_maze_ramp2_2018:
        '1': |-
          Your code should look like this:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveEast">
                  <next>
                    <block type="maze_moveEast">
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseA_maze_ramp2_2019:
        '1': |-
          Your code should look like this:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveEast">
                  <next>
                    <block type="maze_moveEast">
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseA_maze_ramp3a_2018:
        '1': |-
          Your code should look like this:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveEast">
                  <next>
                    <block type="maze_moveEast">
                      <next>
                        <block type="maze_moveNorth"/>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseA_maze_ramp3a_2019:
        '1': |-
          Your code should look like this:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveEast">
                  <next>
                    <block type="maze_moveEast">
                      <next>
                        <block type="maze_moveNorth"/>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseA_maze_ramp3b_2018:
        '1': |-
          Your code should look like this:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveSouth">
                  <next>
                    <block type="maze_moveWest">
                      <next>
                        <block type="maze_moveWest"/>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseA_maze_ramp3b_2019:
        '1': |-
          Your code should look like this:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveSouth">
                  <next>
                    <block type="maze_moveWest">
                      <next>
                        <block type="maze_moveWest"/>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseA_maze_ramp4a_2018:
        '1': |-
          Your code should look like this:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveEast">
                  <next>
                    <block type="maze_moveEast">
                      <next>
                        <block type="maze_moveSouth"/>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseA_maze_ramp4a_2019:
        '1': |-
          Your code should look like this:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveEast">
                  <next>
                    <block type="maze_moveEast">
                      <next>
                        <block type="maze_moveSouth"/>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseA_maze_ramp5a_2018:
        '1': |-
          Your code should look like this:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveWest">
                  <next>
                    <block type="maze_moveWest">
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseA_maze_ramp5a_2019:
        '1': |-
          Your code should look like this:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveWest">
                  <next>
                    <block type="maze_moveWest">
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseA_maze_seq1:
        courseA_maze_seq1_a: |-
          If you are having trouble getting the bird to move, make sure blocks are snapped in place under <xml>
            <block type="when_run"/>
          </xml>
        courseA_maze_seq1_b: |-
          The bird will need to move West 3 times to get to the pig. Use this block:

          <xml><block type="maze_moveWest"/></xml>
      courseA_maze_seq10:
        courseA_maze_seq10_a: If you're having trouble, try writing down the steps
          on a piece of paper first.
        courseA_maze_seq10_b: You will need to go 3 directions to solve this puzzle.
      courseA_maze_seq10_2018:
        courseA_maze_seq10_a: If you're having trouble, try writing down the steps
          on a piece of paper first.
        courseA_maze_seq10_b: You will need to go 3 different directions to solve
          this puzzle.
      courseA_maze_seq10_2019:
        courseA_maze_seq10_a: If you're having trouble, try writing down the steps
          on a piece of paper first.
        courseA_maze_seq10_b: You will need to go 3 different directions to solve
          this puzzle.
      courseA_maze_seq10_copy:
        courseA_maze_seq10_a: If you're having trouble, try writing down the steps
          on a piece of paper first.
        courseA_maze_seq10_b: You will need to go 3 directions to solve this puzzle.
      courseA_maze_seq13:
        courseA_maze_seq13_a: If the path you need is unclear, use your finger to
          trace your way from the bird to the pig.
        courseA_maze_seq13_b: Nie bój się popełniać błędów! Spróbuj dodawać bloki
          i uruchom kod, aby zobaczyć co się stanie.
        courseA_maze_seq13_c: These <xml><block type="maze_moveNorth"/></xml><xml><block
          type="maze_moveEast"/></xml> blocks will help you move closer to the pig.
      courseA_maze_seq13_2018:
        courseA_maze_seq13_a: If the path you need is unclear, use your finger to
          trace your way from the bird to the pig.
        courseA_maze_seq13_b: Nie bój się popełniać błędów! Spróbuj dodawać bloki
          i uruchom kod, aby zobaczyć co się stanie.
        courseA_maze_seq13_c: These <xml><block type="maze_moveNorth"/></xml><xml><block
          type="maze_moveEast"/></xml> blocks will help you move closer to the pig.
      courseA_maze_seq13_2019:
        courseA_maze_seq13_a: If the path you need is unclear, use your finger to
          trace your way from the bird to the pig.
        courseA_maze_seq13_b: Nie bój się popełniać błędów! Spróbuj dodawać bloki
          i uruchom kod, aby zobaczyć co się stanie.
        courseA_maze_seq13_c: |-
          Te klocki <xml><block type="maze_moveNorth"/></xml>

          <xml><block type="maze_moveEast"/></xml>

           pomogą Ci zbliżyć się do świnki.
      courseA_maze_seq1_2018:
        courseA_maze_seq1_a: |-
          If you are having trouble getting the bird to move, make sure blocks are snapped in place under <xml>
            <block type="when_run"/>
          </xml>
        courseA_maze_seq1_b: |-
          The bird will need to move West 3 times to get to the pig. Use this block:

          <xml><block type="maze_moveWest"/></xml>
      courseA_maze_seq1_2019:
        courseA_maze_seq1_a: |-
          If you are having trouble getting the bird to move, make sure blocks are snapped in place under <xml>
            <block type="when_run"/>
          </xml>
        courseA_maze_seq1_b: |-
          The bird will need to move West 3 times to get to the pig. Use this block:

          <xml><block type="maze_moveWest"/></xml>
      courseA_maze_seq2:
        courseA_maze_seq2_a: This program is missing 1 block. Can you figure out which
          one?
        courseA_maze_seq2_b: Spróbuj najpierw uruchomić kod, aby zobaczyć gdzie ptak
          skończy. Dokąd musisz stąd iść?
      courseA_maze_seq3:
        courseA_maze_seq3_a: 1 of the blocks is moving the bird in the wrong direction.
          Can you figure out which one and replace it with the correct block?
        courseA_maze_seq3_b: Próbuj wykorzystać przycisk krok, aby dowiedzieć się
          gdzie program jest zły. Czy to jest 1 krok, czy drugi?
        courseA_maze_seq3_c: This <xml><block type="maze_moveNorth"/></xml> block
          doesn't seem to be moving the bird in the right direction. Can you replace
          it with a different block?
      courseA_maze_seq4:
        courseA_maze_seq4_a: If you are having trouble, try to figure out what the
          correct path is and then remove the block that doesn't fit.
        courseA_maze_seq4_b: Spróbuj uruchomić kod w takim stanie jaki jest. Czy coś
          poszło nie tak? Który blok możesz usunąć? Jak możesz to naprawić?
      courseA_maze_seq5:
        courseA_maze_seq5_a: Try writing down the steps on paper to find a solution!
        courseA_maze_seq5_b: Będziesz potrzebował 2 bloków, wskazujących w 2 kierunkach.
      courseA_maze_seq5_2018:
        '1': Try writing down the steps on paper to find a solution!
        '2': |-
          You will need to use this block:

          <xml><block type="maze_moveSouth"/></xml>
      courseA_maze_seq5_2019:
        '1': Try writing down the steps on paper to find a solution!
        '2': |-
          You will need to use this block:

          <xml><block type="maze_moveSouth"/></xml>
      courseA_maze_seq5_copy:
        courseA_maze_seq5_a: Try writing down the steps on paper to find a solution!
        courseA_maze_seq5_b: Będziesz potrzebował 2 bloków, wskazujących w 2 kierunkach.
      courseA_maze_seq5a_2018:
        '1': Say the steps out loud and see if it helps you figure out the answer.
      courseA_maze_seq5a_2019:
        '1': Say the steps out loud and see if it helps you figure out the answer.
      courseA_maze_seq6:
        courseA_maze_seq6_a: Your final code should have 3 movement blocks.
        courseA_maze_seq6_b: Jeśli utkniesz, spróbuj rozwiązać zagadnę w 2 etapach,
          pierwsza część przed zakrętem, druga po zakręcie.
      courseA_maze_seq6_2018:
        courseA_maze_seq6_a: Your final code should have 3 movement blocks.
        courseA_maze_seq6_b: Jeśli utkniesz, spróbuj rozwiązać zagadnę w 2 etapach,
          pierwsza część przed zakrętem, druga po zakręcie.
      courseA_maze_seq6_2019:
        courseA_maze_seq6_a: Your final code should have 3 movement blocks.
        courseA_maze_seq6_b: Jeśli utkniesz, spróbuj rozwiązać zagadnę w 2 etapach,
          pierwsza część przed zakrętem, druga po zakręcie.
      courseA_maze_seq6_copy:
        courseA_maze_seq6_a: Your final code should have 3 movement blocks.
        courseA_maze_seq6_b: Jeśli utkniesz, spróbuj rozwiązać zagadnę w 2 etapach,
          pierwsza część przed zakrętem, druga po zakręcie.
      courseA_maze_seq7:
        courseA_maze_seq7_a: There is 1 block that you need to add to move the bird
          to the pig.
        courseA_maze_seq7_b: If you can't figure out what to do, try drawing the puzzle
          on paper and use your finger to figure out which way to move.
      courseA_maze_seq7_copy:
        courseA_maze_seq7_a: There is 1 block that you need to add to move the bird
          to the pig.
        courseA_maze_seq7_b: If you can't figure out what to do, try drawing the puzzle
          on paper and use your finger to figure out which way to move.
      courseA_maze_seq8:
        courseA_maze_seq8_a: If you're stuck, try drawing the image on paper to see
          how the bird should move.
      courseA_maze_seq8_2018:
        courseA_maze_seq8_a: If you're stuck, try drawing the image on paper to see
          how the bird should move.
      courseA_maze_seq8_2019:
        courseA_maze_seq8_a: If you're stuck, try drawing the image on paper to see
          how the bird should move.
      courseA_maze_seq8_copy:
        courseA_maze_seq8_a: If you're stuck, try drawing the image on paper to see
          how the bird should move.
      courseA_maze_seq9:
        courseA_maze_seq9_a: Stuck? Try tracing the bird's path with your finger.
        courseA_maze_seq9_b: Jesli nie jesteś pewien co zrobić, naciśnij "Start over"
          i uruchom kod aby zobaczyć co idzie nie tak.
        courseA_maze_seq9_c: Będziesz musiał poruszać się w 3 kierunkach aby rozwiązać
          tą łamigłówkę.
      courseA_maze_seq_challenge1:
        courseA_maze_seq_challenge1_a: There are two solutions to this puzzle.
      courseA_maze_seq_challenge1_2018:
        courseA_maze_seq_challenge1_a: There are two solutions to this puzzle.
      courseA_maze_seq_challenge1_2019:
        courseA_maze_seq_challenge1_a: There are two solutions to this puzzle.
      courseA_maze_seq_challenge2:
        courseA_maze_seq_challenge2_a: Try counting the spaces with your finger. Remember
          not to count the space where you start!
      courseA_maze_seq_challenge2_2018:
        courseA_maze_seq_challenge2_a: Try counting the spaces with your finger. Remember
          not to count the space where you start!
      courseA_maze_seq_challenge2_2019:
        courseA_maze_seq_challenge2_a: Try counting the spaces with your finger. Remember
          not to count the space where you start!
      courseA_playLab_events2:
        courseA_playLab_events2_a: Look for a block that makes the dog say something.
        courseA_playLab_events2_b: |-
          This is the code you need to complete this puzzle:

          <xml>
          <block type="when_run" movable="false" deletable="false">
          <next>
          <block type="studio_saySpriteChoices">
              <title name="SPRITE">1</title>
              <title name="VALUE">Hi there.</title>
            </block>
          </next>
          </block>
          </xml>
      courseA_playLab_events2_2018:
        courseA_playLab_events2_a: Look for a block that makes the dog say something.
        courseA_playLab_events2_b: |-
          This is the code you need to complete this puzzle:

          <xml>
          <block type="when_run" movable="false" deletable="false">
          <next>
          <block type="studio_saySpriteChoices">
              <title name="SPRITE">1</title>
              <title name="VALUE">Hi there.</title>
            </block>
          </next>
          </block>
          </xml>
      courseA_playLab_events2_2019:
        courseA_playLab_events2_a: Look for a block that makes the dog say something.
        courseA_playLab_events2_b: |-
          This is the code you need to complete this puzzle:

          <xml>
          <block type="when_run" movable="false" deletable="false">
          <next>
          <block type="studio_saySpriteChoices">
              <title name="SPRITE">1</title>
              <title name="VALUE">Hi there.</title>
            </block>
          </next>
          </block>
          </xml>
      courseA_playLab_events3:
        courseA_playLab_events3_a: |-
          Drag this block  <xml><block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">8</title>
            </block></xml> out and snap it to the bottom of <xml><block type="studio_whenArrow">
              <title name="VALUE">left</title>
            </block></xml>
        courseA_playLab_events3_b: Remember to use the left arrow key to move Jorge
          to the flag once you have written your program. When the flag turns green,
          you've finished!
      courseA_playLab_events3_2018:
        courseA_playLab_events3_a: |-
          Drag this block  <xml><block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">8</title>
            </block></xml> out and snap it to the bottom of <xml><block type="studio_whenArrow">
              <title name="VALUE">left</title>
            </block></xml>
        courseA_playLab_events3_b: Remember to use the left arrow key to move Jorge
          to the flag once you have written your program. When the flag turns green,
          you've finished!
      courseA_playLab_events3_2019:
        courseA_playLab_events3_a: |-
          Drag this block  <xml><block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">8</title>
            </block></xml> out and snap it to the bottom of <xml><block type="studio_whenArrow">
              <title name="VALUE">left</title>
            </block></xml>
        courseA_playLab_events3_b: Remember to use the left arrow key to move Jorge
          to the flag once you have written your program. When the flag turns green,
          you've finished!
      courseA_playLab_events4:
        courseA_playLab_events4_a: |-
          Here is the event block that you will need to get Jorge to move right:

          <xml><block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">2</title>
            </block></xml>
        courseA_playLab_events4_b: |-
          This is the code you will need to complete this puzzle:

          <xml><block type="studio_whenArrow">
              <title name="VALUE">right</title>
              <next>
            <block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">2</title>
            </block></next></block></xml>
      courseA_playLab_events4_2018:
        courseA_playLab_events4_a: |-
          Here is the event block that you will need to get Jorge to move right:

          <xml><block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">2</title>
            </block></xml>
        courseA_playLab_events4_b: |-
          This is the code you will need to complete this puzzle:

          <xml><block type="studio_whenArrow">
              <title name="VALUE">right</title>
              <next>
            <block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">2</title>
            </block></next></block></xml>
      courseA_playLab_events4_2019:
        courseA_playLab_events4_a: |-
          Here is the event block that you will need to get Jorge to move right:

          <xml><block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">2</title>
            </block></xml>
        courseA_playLab_events4_b: |-
          This is the code you will need to complete this puzzle:

          <xml><block type="studio_whenArrow">
              <title name="VALUE">right</title>
              <next>
            <block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">2</title>
            </block></next></block></xml>
      courseA_playLab_events5:
        courseA_playLab_events5_a: "Here are the event blocks that you will need to
          use to move Jorge up and down:\n\n<xml><block type=\"studio_whenArrow\">\n
          \   <title name=\"VALUE\">up</title>\n  </block></xml>\n\nand \n\n<xml><block
          type=\"studio_whenArrow\">\n    <title name=\"VALUE\">down</title>\n  </block></xml>"
        courseA_playLab_events5_b: |-
          Did you know that you can change the key for  the event arrow by clicking on the picture in the block and choosing a new key?

          ![](https://images.code.org/b010b6a8131689af53b33148753c15b4-image-1492639642316.gif)
      courseA_playLab_events5_2018:
        courseA_playLab_events5_a: "Here are the event blocks that you will need to
          use to move Jorge up and down:\n\n<xml><block type=\"studio_whenArrow\">\n
          \   <title name=\"VALUE\">up</title>\n  </block></xml>\n\nand \n\n<xml><block
          type=\"studio_whenArrow\">\n    <title name=\"VALUE\">down</title>\n  </block></xml>"
        courseA_playLab_events5_b: |-
          Did you know that you can change the key for  the event arrow by clicking on the picture in the block and choosing a new key?

          ![](https://images.code.org/b010b6a8131689af53b33148753c15b4-image-1492639642316.gif)
      courseA_playLab_events5_2019:
        courseA_playLab_events5_a: "Here are the event blocks that you will need to
          use to move Jorge up and down:\n\n<xml><block type=\"studio_whenArrow\">\n
          \   <title name=\"VALUE\">up</title>\n  </block></xml>\n\nand \n\n<xml><block
          type=\"studio_whenArrow\">\n    <title name=\"VALUE\">down</title>\n  </block></xml>"
        courseA_playLab_events5_b: |-
          Did you know that you can change the key for  the event arrow by clicking on the picture in the block and choosing a new key?

          ![](https://images.code.org/b010b6a8131689af53b33148753c15b4-image-1492639642316.gif)
      courseA_playLab_events6:
        courseA_playLab_events6_a: |-
          Here is the event block that you would use to have Jorge do something when clicked:

          <xml><block type="studio_whenSpriteClicked">
              <title name="SPRITE">1</title>
            </block></xml>
        courseA_playLab_events6_b: |-
          Here is the block you would use to change the background:

          <xml><block type="studio_setBackground">
              <title name="VALUE">random</title>
            </block></xml>
        courseA_playLab_events6_c: |-
          Here is the block you would use to play a random sound:

          <xml><block type="studio_playSound">
              <title name="SOUND">random</title>
            </block></xml>
      courseA_playLab_events6_2018:
        courseA_playLab_events6_a: |-
          Here is the event block that you would use to have Jorge do something when clicked:

          <xml><block type="studio_whenSpriteClicked">
              <title name="SPRITE">1</title>
            </block></xml>
        courseA_playLab_events6_b: |-
          Here is the block you would use to change the background:

          <xml><block type="studio_setBackground">
              <title name="VALUE">random</title>
            </block></xml>
        courseA_playLab_events6_c: |-
          Here is the block you would use to play a random sound:

          <xml><block type="studio_playSound">
              <title name="SOUND">random</title>
            </block></xml>
      courseA_playLab_events6_2019:
        courseA_playLab_events6_a: |-
          Here is the event block that you would use to have Jorge do something when clicked:

          <xml><block type="studio_whenSpriteClicked">
              <title name="SPRITE">1</title>
            </block></xml>
        courseA_playLab_events6_b: |-
          Here is the block you would use to change the background:

          <xml><block type="studio_setBackground">
              <title name="VALUE">random</title>
            </block></xml>
        courseA_playLab_events6_c: |-
          Here is the block you would use to play a random sound:

          <xml><block type="studio_playSound">
              <title name="SOUND">random</title>
            </block></xml>
      courseA_playLab_events7:
        courseA_playLab_events7_a: |-
          Use this block to control what happens when the actors collide.

          <xml><block type="studio_whenSpriteCollided">
              <title name="SPRITE1">1</title>
              <title name="SPRITE2">0</title>
            </block></xml>
      courseA_playLab_events7_2018:
        courseA_playLab_events7_a: |-
          Use this block to control what happens when the actors collide.

          <xml><block type="studio_whenSpriteCollided">
              <title name="SPRITE1">1</title>
              <title name="SPRITE2">0</title>
            </block></xml>
      courseA_playLab_events7_2019:
        courseA_playLab_events7_a: |-
          Use this block to control what happens when the actors collide.

          <xml><block type="studio_whenSpriteCollided">
              <title name="SPRITE1">1</title>
              <title name="SPRITE2">0</title>
            </block></xml>
      courseA_playlab_events_challenge1:
        courseA_playlab_events_challenge1_a: "Make Waddles the Penguin show when you
          click Robin!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title
          name=\"SPRITE\">2</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">3</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_b: "Make Boo the Ghost show when you click
          Waddles!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title
          name=\"SPRITE\">3</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">4</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_c: "Make Jayden the Fuzzy Monster show when
          you click Boo!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n
          \   <title name=\"SPRITE\">4</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">5</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_d: "Make Spiff the Robot show when you click
          the monster!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title
          name=\"SPRITE\">5</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">6</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_e: "Finally, make Wendel the Wizard show
          when you click Spiff!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n
          \   <title name=\"SPRITE\">6</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">7</title>\n
          \     </block>\n    </next>\n  </block></xml>"
      courseA_playlab_events_challenge1_2018:
        courseA_playlab_events_challenge1_a: "Make Waddles the Penguin show when you
          click Robin!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title
          name=\"SPRITE\">2</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">3</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_b: "Make Boo the Ghost show when you click
          Waddles!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title
          name=\"SPRITE\">3</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">4</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_c: "Make Jayden the Fuzzy Monster show when
          you click Boo!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n
          \   <title name=\"SPRITE\">4</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">5</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_d: "Make Spiff the Robot show when you click
          the monster!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title
          name=\"SPRITE\">5</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">6</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_e: "Finally, make Wendel the Wizard show
          when you click Spiff!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n
          \   <title name=\"SPRITE\">6</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">7</title>\n
          \     </block>\n    </next>\n  </block></xml>"
      courseA_playlab_events_challenge1_2019:
        courseA_playlab_events_challenge1_a: "Make Waddles the Penguin show when you
          click Robin!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title
          name=\"SPRITE\">2</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">3</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_b: "Make Boo the Ghost show when you click
          Waddles!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title
          name=\"SPRITE\">3</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">4</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_c: "Make Jayden the Fuzzy Monster show when
          you click Boo!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n
          \   <title name=\"SPRITE\">4</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">5</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_d: "Make Spiff the Robot show when you click
          the monster!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title
          name=\"SPRITE\">5</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">6</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_e: "Finally, make Wendel the Wizard show
          when you click Spiff!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n
          \   <title name=\"SPRITE\">6</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">7</title>\n
          \     </block>\n    </next>\n  </block></xml>"
      courseA_playlab_events_challenge2:
        courseA_playlab_events_challenge2_a: "You can make a bird sing.\n\n<xml> \n
          \ <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">2</title>\n
          \   <next>\n          <block type=\"studio_saySprite\">\n            <title
          name=\"SPRITE\">2</title>\n            <title name=\"TEXT\">Tweet</title>\n
          \         </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge2_b: "You can make a robot beep.\n\n<xml>\n
          \ <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">6</title>\n
          \   <next>\n      \n          <block type=\"studio_playSound\">\n            <title
          name=\"SOUND\">winpoint</title>\n          </block>\n        </next>\n  </block></xml>"
        courseA_playlab_events_challenge2_c: |-
          You can make an angry monster growl.

          <xml>  <block type="studio_whenSpriteClicked">
              <title name="SPRITE">5</title>
              <next>
                <block type="studio_setSpriteEmotion">
                  <title name="SPRITE">5</title>
                  <title name="VALUE">2</title>
                  <next>
                    <block type="studio_saySprite">
                      <title name="SPRITE">5</title>
                      <title name="TEXT">Roar!</title>
                      <next>
                        <block type="studio_setSpriteEmotion">
                          <title name="SPRITE">5</title>
                          <title name="VALUE">0</title>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block></xml>
      courseA_playlab_events_challenge2_2018:
        courseA_playlab_events_challenge2_a: "You can make a bird sing.\n\n<xml> \n
          \ <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">2</title>\n
          \   <next>\n          <block type=\"studio_saySprite\">\n            <title
          name=\"SPRITE\">2</title>\n            <title name=\"TEXT\">Tweet</title>\n
          \         </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge2_b: "You can make a robot beep.\n\n<xml>\n
          \ <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">6</title>\n
          \   <next>\n      \n          <block type=\"studio_playSound\">\n            <title
          name=\"SOUND\">winpoint</title>\n          </block>\n        </next>\n  </block></xml>"
        courseA_playlab_events_challenge2_c: |-
          You can make an angry monster growl.

          <xml>  <block type="studio_whenSpriteClicked">
              <title name="SPRITE">5</title>
              <next>
                <block type="studio_setSpriteEmotion">
                  <title name="SPRITE">5</title>
                  <title name="VALUE">2</title>
                  <next>
                    <block type="studio_saySprite">
                      <title name="SPRITE">5</title>
                      <title name="TEXT">Roar!</title>
                      <next>
                        <block type="studio_setSpriteEmotion">
                          <title name="SPRITE">5</title>
                          <title name="VALUE">0</title>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block></xml>
      courseA_playlab_events_challenge2_2019:
        courseA_playlab_events_challenge2_a: "You can make a bird sing.\n\n<xml> \n
          \ <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">2</title>\n
          \   <next>\n          <block type=\"studio_saySprite\">\n            <title
          name=\"SPRITE\">2</title>\n            <title name=\"TEXT\">Tweet</title>\n
          \         </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge2_b: "You can make a robot beep.\n\n<xml>\n
          \ <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">6</title>\n
          \   <next>\n      \n          <block type=\"studio_playSound\">\n            <title
          name=\"SOUND\">winpoint</title>\n          </block>\n        </next>\n  </block></xml>"
        courseA_playlab_events_challenge2_c: |-
          You can make an angry monster growl.

          <xml>  <block type="studio_whenSpriteClicked">
              <title name="SPRITE">5</title>
              <next>
                <block type="studio_setSpriteEmotion">
                  <title name="SPRITE">5</title>
                  <title name="VALUE">2</title>
                  <next>
                    <block type="studio_saySprite">
                      <title name="SPRITE">5</title>
                      <title name="TEXT">Roar!</title>
                      <next>
                        <block type="studio_setSpriteEmotion">
                          <title name="SPRITE">5</title>
                          <title name="VALUE">0</title>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block></xml>
      courseB_Scrat_ramp1_2018:
        '1': If Scrat isn't doing what you want, make sure both of the blocks have
          been fully clicked together, then click "Run" again.
        '2': Don't be afraid to make a mistake! Try something, and if it doesn't work,
          try something else!
      courseB_Scrat_ramp1_2019:
        '1': If Scrat isn't doing what you want, make sure both of the blocks have
          been fully clicked together, then click "Run" again.
        '2': Don't be afraid to make a mistake! Try something, and if it doesn't work,
          try something else!
      courseB_Scrat_ramp2_2018:
        '1': |-
          Your code should look like this:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveEast">
                  <next>
                    <block type="maze_moveEast">
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseB_Scrat_ramp2_2019:
        '1': |-
          Your code should look like this:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveEast">
                  <next>
                    <block type="maze_moveEast">
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseB_Scrat_ramp3a_2018:
        '1': |-
          Your code should look like this:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveEast">
                  <next>
                    <block type="maze_moveEast">
                      <next>
                        <block type="maze_moveNorth"/>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseB_Scrat_ramp3a_2019:
        '1': |-
          Your code should look like this:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveEast">
                  <next>
                    <block type="maze_moveEast">
                      <next>
                        <block type="maze_moveNorth"/>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseB_Scrat_ramp3b_2018:
        '1': |-
          Your code should look like this:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveSouth">
                  <next>
                    <block type="maze_moveEast">
                      <next>
                        <block type="maze_moveEast"/>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseB_Scrat_ramp3b_2019:
        '1': |-
          Your code should look like this:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveSouth">
                  <next>
                    <block type="maze_moveEast">
                      <next>
                        <block type="maze_moveEast"/>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseB_Scrat_ramp4a_2018:
        '1': |-
          Your code should look like this:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveEast">
                  <next>
                    <block type="maze_moveEast">
                      <next>
                        <block type="maze_moveSouth"/>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseB_Scrat_ramp4a_2019:
        '1': |-
          Your code should look like this:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveEast">
                  <next>
                    <block type="maze_moveEast">
                      <next>
                        <block type="maze_moveSouth"/>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseB_Scrat_ramp5a_2018:
        '1': |-
          Your code should look like this:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveWest">
                  <next>
                    <block type="maze_moveWest">
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseB_Scrat_ramp5a_2019:
        '1': |-
          Your code should look like this:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveWest">
                  <next>
                    <block type="maze_moveWest">
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseB_artist_loops2:
        courseB_artist_loops2_a: Jeśli chcesz, aby pętla powtarzała się więcej niż
          4 razy, możesz zmienić wartość na górze bloku.
        courseB_artist_loops2_b: Try running the code first to see where the artist
          ends up.
      courseB_artist_loops2_2018:
        courseB_artist_loops2_a: Jeśli chcesz, aby pętla powtarzała się więcej niż
          4 razy, możesz zmienić wartość na górze bloku.
        courseB_artist_loops2_b: Try running the code first to see where the artist
          ends up.
      courseB_artist_loops2_2019:
        courseB_artist_loops2_a: Jeśli chcesz, aby pętla powtarzała się więcej niż
          4 razy, możesz zmienić wartość na górze bloku.
        courseB_artist_loops2_b: Try running the code first to see where the artist
          ends up.
      courseB_artist_loops3:
        courseB_artist_loops3_a: Remember to use a `repeat` loop for better code!
        courseB_artist_loops3_b: Artysta będzie chciał przenieść się na południe aby
          rysować linię.
      courseB_artist_loops3_2018:
        courseB_artist_loops3_a: |-
          Remember to use a `repeat` <xml><block type="controls_repeat_simplified">
              <title name="TIMES">???</title>
            </block></xml> loop for better code!
        courseB_artist_loops3_b: Artysta będzie chciał przenieść się na południe aby
          rysować linię.
      courseB_artist_loops3_2019:
        courseB_artist_loops3_a: |-
          Remember to use a `repeat` <xml><block type="controls_repeat_simplified">
              <title name="TIMES">???</title>
            </block></xml> loop for better code!
        courseB_artist_loops3_b: Artysta będzie chciał przenieść się na południe aby
          rysować linię.
      courseB_artist_loops4:
        courseB_artist_loops4_a: The jump block lets you move forward without drawing
          a line.
        courseB_artist_loops4_b: You will need to add a block inside of the repeat
          loop to solve this puzzle.
        courseB_artist_loops4_c: Nie zapomnij zmienić ilości powtórzeń pętli.
      courseB_artist_loops4_2018:
        courseB_artist_loops4_a: The jump block lets you move forward without drawing
          a line.
        courseB_artist_loops4_b: You will need to add a block inside of the repeat
          loop to solve this puzzle.
        courseB_artist_loops4_c: Nie zapomnij zmienić ilości powtórzeń pętli.
      courseB_artist_loops4_2019:
        courseB_artist_loops4_a: The jump block lets you move forward without drawing
          a line.
        courseB_artist_loops4_b: You will need to add a block inside of the repeat
          loop to solve this puzzle.
        courseB_artist_loops4_c: Nie zapomnij zmienić ilości powtórzeń pętli.
      courseB_artist_loops5:
        courseB_artist_loops5_a: Drag out a `repeat` loop, then put the other blocks
          inside of it. How many times do you need to repeat?
      courseB_artist_loops5_2018:
        courseB_artist_loops5_a: |-
          Drag out a `repeat` <xml><block type="controls_repeat_simplified">
              <title name="TIMES">???</title>
            </block></xml> loop, then put the other blocks inside of it. How many times do you need to repeat?
      courseB_artist_loops5_2019:
        courseB_artist_loops5_a: |-
          Drag out a `repeat` <xml><block type="controls_repeat_simplified">
              <title name="TIMES">???</title>
            </block></xml> loop, then put the other blocks inside of it. How many times do you need to repeat?
      courseB_artist_loops6:
        courseB_artist_loops6_b: Try writing the moves down on a piece of paper and
          look for a pattern.
      courseB_artist_loops6_2018:
        courseB_artist_loops6_b: Try writing the moves down on a piece of paper and
          look for a pattern.
      courseB_artist_loops6_2019:
        courseB_artist_loops6_b: Try writing the moves down on a piece of paper and
          look for a pattern.
      courseB_artist_loops7:
        courseB_artist_loops7_a: This challenge uses **4** loops, one right after
          another!
        courseB_artist_loops7_b: |-
          Notice that every loop makes a stair pattern that goes a different direction.

          ![](https://images.code.org/7d08d5514766c5c15074e90731991505-image-1466705649513.gif)
        courseB_artist_loops7_c: |-
          The loops should do this:

          -   Loop 1
              -   Right
              -   Down

          -   Loop 2
              -   Right
              -   Up

          -   Loop 3
              -   Left
              -   Up

          -   Loop 4
              -   Left
              -   Down
      courseB_artist_loops7_2018:
        courseB_artist_loops7_a: This challenge uses **4** loops, one right after
          another!
        courseB_artist_loops7_b: |-
          Notice that every loop makes a stair pattern that goes a different direction.

          ![](https://images.code.org/7d08d5514766c5c15074e90731991505-image-1466705649513.gif)
        courseB_artist_loops7_c: |-
          The loops should do this:

          -   Loop 1
              -   Right
              -   Down

          -   Loop 2
              -   Right
              -   Up

          -   Loop 3
              -   Left
              -   Up

          -   Loop 4
              -   Left
              -   Down
      courseB_artist_loops7_2019:
        courseB_artist_loops7_a: This challenge uses **4** loops, one right after
          another!
        courseB_artist_loops7_b: |-
          Notice that every loop makes a stair pattern that goes a different direction.

          ![](https://images.code.org/7d08d5514766c5c15074e90731991505-image-1466705649513.gif)
        courseB_artist_loops7_c: |-
          The loops should do this:

          -   Loop 1
              -   Right
              -   Down

          -   Loop 2
              -   Right
              -   Up

          -   Loop 3
              -   Left
              -   Up

          -   Loop 4
              -   Left
              -   Down
      courseB_artist_loops8:
        courseB_artist_loops8_a: How many times should you repeat the pattern to make
          the ladder?
        courseB_artist_loops8_b: Try running the code you're given to see what it
          does.
      courseB_artist_loops8_2018:
        courseB_artist_loops8_a: How many times should you repeat the pattern to make
          the ladder?
        courseB_artist_loops8_b: Try running the code you're given to see what it
          does.
      courseB_artist_loops8_2019:
        courseB_artist_loops8_a: How many times should you repeat the pattern to make
          the ladder?
        courseB_artist_loops8_b: Try running the code you're given to see what it
          does.
      courseB_artist_loops9:
        courseB_artist_loops9_a: Pamiętaj, że blok skoku możę być wykorzystany aby
          poruszać się bez rysowania linii.
        courseB_artist_loops9_b: Będziesz musiał użyć bloku W, aby rozwiązać tą zagadkę.
        courseB_artist_loops9_c: Can't figure out where to put the loop? Try writing
          the code step-by-step and look for a pattern.
      courseB_artist_loops9_2018:
        courseB_artist_loops9_a: Pamiętaj, że blok skoku możę być wykorzystany aby
          poruszać się bez rysowania linii.
        courseB_artist_loops9_b: Będziesz musiał użyć bloku W, aby rozwiązać tą zagadkę.
        courseB_artist_loops9_c: Can't figure out where to put the loop? Try writing
          the code step-by-step and look for a pattern.
      courseB_artist_loops9_2019:
        courseB_artist_loops9_a: Pamiętaj, że blok skoku możę być wykorzystany aby
          poruszać się bez rysowania linii.
        courseB_artist_loops9_b: Będziesz musiał użyć bloku W, aby rozwiązać tą zagadkę.
        courseB_artist_loops9_c: Can't figure out where to put the loop? Try writing
          the code step-by-step and look for a pattern.
      courseB_artist_loops_challenge1:
        courseB_artist_loops_challenge1_a: 'Blocks like this: <xml>  <block type="simple_move_up_right"/></xml>
          will let your artist move at a slant!'
        courseB_artist_loops_challenge1_b: When you finish one of the dice, `jump`
          to the next!
        courseB_artist_loops_challenge1_c: 'Będziesz musiał `move` lub `jump` dwukrotnie
          nad niektórymi liniami. '
      courseB_artist_loops_challenge1_2018:
        courseB_artist_loops_challenge1_a: 'Blocks like this: <xml>  <block type="simple_move_up_right"/></xml>
          will let your artist move at a slant!'
        courseB_artist_loops_challenge1_b: When you finish one of the dice, `jump`
          to the next!
        courseB_artist_loops_challenge1_c: 'Będziesz musiał `move` lub `jump` dwukrotnie
          nad niektórymi liniami. '
      courseB_artist_loops_challenge1_2019:
        courseB_artist_loops_challenge1_a: 'Blocks like this: <xml>  <block type="simple_move_up_right"/></xml>
          will let your artist move at a slant!'
        courseB_artist_loops_challenge1_b: When you finish one of the dice, `jump`
          to the next!
        courseB_artist_loops_challenge1_c: 'Będziesz musiał `move` lub `jump` dwukrotnie
          nad niektórymi liniami. '
      courseB_artist_loops_challenge2:
        courseB_artist_loops_challenge2_a: Kod aby narysować X jest już Ci dany. Wszystko
          co musisz zrobić, to powtórzyć X i skoczyć do następnego miejsca.
        courseB_artist_loops_challenge2_b: Możesz użyć bloków 'Skocz' aby przenieść
          się w inne miejsce.
      courseB_artist_loops_challenge2_2018:
        courseB_artist_loops_challenge2_a: Kod aby narysować X jest już Ci dany. Wszystko
          co musisz zrobić, to powtórzyć X i skoczyć do następnego miejsca.
        courseB_artist_loops_challenge2_b: Możesz użyć bloków 'Skocz' aby przenieść
          się w inne miejsce.
      courseB_artist_loops_challenge2_2019:
        courseB_artist_loops_challenge2_a: Kod aby narysować X jest już Ci dany. Wszystko
          co musisz zrobić, to powtórzyć X i skoczyć do następnego miejsca.
        courseB_artist_loops_challenge2_b: Możesz użyć bloków 'Skocz' aby przenieść
          się w inne miejsce.
      courseB_collector_loops1:
        courseB_collector_loops1_a: The <xml><block type="collector_collect_simplified"/></xml>
          block can be used to pick up treasure when you are standing on top of it.
      courseB_collector_loops10:
        courseB_collector_loops10_a: If you can't figure out where to put the `repeat`
          loops, write out the code step-by-step and look for a pattern.
        courseB_collector_loops10_b: Spróbuj zapisać ruchy na kartce papieru i znaleźć
          wzór.
      courseB_collector_loops10_2018:
        courseB_collector_loops10_a: If you can't figure out where to put the `repeat`
          loops, write out the code step-by-step and look for a pattern.
        courseB_collector_loops10_b: Spróbuj zapisać ruchy na kartce papieru i znaleźć
          wzór.
      courseB_collector_loops10_2019:
        courseB_collector_loops10_a: If you can't figure out where to put the `repeat`
          loops, write out the code step-by-step and look for a pattern.
        courseB_collector_loops10_b: Spróbuj zapisać ruchy na kartce papieru i znaleźć
          wzór.
      courseB_collector_loops1_2018:
        courseB_collector_loops1_a: The <xml><block type="collector_collect_simplified"/></xml>
          block can be used to pick up treasure when you are standing on top of it.
      courseB_collector_loops1_2019:
        courseB_collector_loops1_a: The <xml><block type="collector_collect_simplified"/></xml>
          block can be used to pick up treasure when you are standing on top of it.
      courseB_collector_loops2:
        courseB_collector_loops2_a: Będziesz musiał się ruszyć zanim zbierzesz jakiś
          skarb.
        courseB_collector_loops2_b: When you have reached a spot with treasure, use
          the <xml><block type="collector_collect"/></xml> block to pick it up.
      courseB_collector_loops2_2018:
        courseB_collector_loops2_a: Będziesz musiał się ruszyć zanim zbierzesz jakiś
          skarb.
        courseB_collector_loops2_b: When you have reached a spot with treasure, use
          the <xml><block type="collector_collect"/></xml> block to pick it up.
      courseB_collector_loops2_2019:
        courseB_collector_loops2_a: Będziesz musiał się ruszyć zanim zbierzesz jakiś
          skarb.
        courseB_collector_loops2_b: When you have reached a spot with treasure, use
          the <xml><block type="collector_collect"/></xml> block to pick it up.
      courseB_collector_loops3:
        courseB_collector_prog3_a: Try using a <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">5</title></block></xml> block to collect your
          treasure.
        courseB_collector_prog3_b: Pamiętaj, że możesz umieścić więcej niż jeden blok
          wewnątrz powtarzającej się pętli.
      courseB_collector_loops3_2018:
        courseB_collector_prog3_a: Try using a <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">5</title></block></xml> block to collect your
          treasure.
        courseB_collector_prog3_b: Pamiętaj, że możesz umieścić więcej niż jeden blok
          wewnątrz powtarzającej się pętli.
      courseB_collector_loops3_2019:
        courseB_collector_prog3_a: Try using a <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">5</title></block></xml> block to collect your
          treasure.
        courseB_collector_prog3_b: Pamiętaj, że możesz umieścić więcej niż jeden blok
          wewnątrz powtarzającej się pętli.
      courseB_collector_loops4:
        courseB_collector_loops4_a: Try using the step button to figure out where
          things go wrong.
        courseB_collector_loops4_b: To change how far Laurel goes, change the number
          of times that the loop runs.
        courseB_collector_loops4_c: Laurel musi iść na dół i zebrać skarb po zakończeniu
          pętli `repeat`!
      courseB_collector_loops4_2018:
        courseB_collector_loops4_a: Try using the step button to figure out where
          things go wrong.
        courseB_collector_loops4_b: To change how far Laurel goes, change the number
          of times that the loop runs.
        courseB_collector_loops4_c: Laurel musi iść na dół i zebrać skarb po zakończeniu
          pętli `repeat`!
      courseB_collector_loops4_2019:
        courseB_collector_loops4_a: Try using the step button to figure out where
          things go wrong.
        courseB_collector_loops4_b: To change how far Laurel goes, change the number
          of times that the loop runs.
        courseB_collector_loops4_c: Laurel musi iść na dół i zebrać skarb po zakończeniu
          pętli `repeat`!
      courseB_collector_loops5:
        courseB_collector_loops5_a: Use more than one loop to get the job done.
        courseB_collector_loops5_b: Spróbuj uruchomić kod kilka razy, aby zobaczyć,
          co się dzieje.
      courseB_collector_loops5_2018:
        courseB_collector_loops5_a: Use more than one loop to get the job done.
        courseB_collector_loops5_b: Spróbuj uruchomić kod kilka razy, aby zobaczyć,
          co się dzieje.
      courseB_collector_loops5_2019:
        courseB_collector_loops5_a: Use more than one loop to get the job done.
        courseB_collector_loops5_b: Spróbuj uruchomić kod kilka razy, aby zobaczyć,
          co się dzieje.
      courseB_collector_loops6:
        courseB_collector_loops6_a: Can't figure out where things start going wrong?
          Use the "Step" button to run through your program one block at a time.
        courseB_collector_loops6_b: Możesz zmienić ilość powtarzania się pętli poprzez
          kliknięcie w "3" i wybranie innej wartości.
        courseB_collector_loops6_c: You will want to use 3 `repeat` loops to solve
          this puzzle.
        courseB_collector_loops6_d: Jeśli nie wiesz co zrobić, rozbij tą zagadkę na
          3 części.
      courseB_collector_loops6_2018:
        courseB_collector_loops6_a: Can't figure out where things start going wrong?
          Use the "Step" button to run through your program one block at a time.
        courseB_collector_loops6_b: Możesz zmienić ilość powtarzania się pętli poprzez
          kliknięcie w "3" i wybranie innej wartości.
        courseB_collector_loops6_c: |-
          You will want to use 3 `repeat` <xml><block type="controls_repeat_simplified">
              <title name="TIMES">???</title>
            </block></xml> loops to solve this puzzle.
        courseB_collector_loops6_d: Jeśli nie wiesz co zrobić, rozbij tą zagadkę na
          3 części.
      courseB_collector_loops6_2019:
        courseB_collector_loops6_a: Can't figure out where things start going wrong?
          Use the "Step" button to run through your program one block at a time.
        courseB_collector_loops6_b: Możesz zmienić ilość powtarzania się pętli poprzez
          kliknięcie w "3" i wybranie innej wartości.
        courseB_collector_loops6_c: |-
          You will want to use 3 `repeat` <xml><block type="controls_repeat_simplified">
              <title name="TIMES">???</title>
            </block></xml> loops to solve this puzzle.
        courseB_collector_loops6_d: Jeśli nie wiesz co zrobić, rozbij tą zagadkę na
          3 części.
      courseB_collector_loops7:
        courseB_collector_loops7_a: If you are having a hard time with the puzzle,
          try drawing it on paper to help you figure it out.
        courseB_collector_loops7_b: You will need 3 repeat loops to solve this puzzle,
          and don't forget the extra treasure at the end!
      courseB_collector_loops7_2018:
        courseB_collector_loops7_a: If you are having a hard time with the puzzle,
          try drawing it on paper to help you figure it out.
        courseB_collector_loops7_b: You will need 3 repeat loops to solve this puzzle,
          and don't forget the extra treasure at the end!
      courseB_collector_loops7_2019:
        courseB_collector_loops7_a: If you are having a hard time with the puzzle,
          try drawing it on paper to help you figure it out.
        courseB_collector_loops7_b: You will need 3 repeat loops to solve this puzzle,
          and don't forget the extra treasure at the end!
      courseB_collector_loops8:
        courseB_collector_loops8_challenge_a: If you can't figure out where to put
          the repeat loops, write out the code step-by-step and look for a pattern.
      courseB_collector_loops8_2018:
        courseB_collector_loops8_challenge_a: If you can't figure out where to put
          the repeat loops, write out the code step-by-step and look for a pattern.
      courseB_collector_loops8_2019:
        courseB_collector_loops8_challenge_a: If you can't figure out where to put
          the repeat loops, write out the code step-by-step and look for a pattern.
      courseB_collector_loops9:
        courseB_collector_loops9_a: Does this seem too hard?  Break it up into 3 little
          problems to make it feel easier.
        courseB_collector_loops9_b: You will need 3 repeat loops, one after the other,
          for this solution.
      courseB_collector_loops9_2018:
        courseB_collector_loops9_a: Does this seem too hard?  Break it up into 3 little
          problems to make it feel easier.
        courseB_collector_loops9_b: You will need 3 repeat loops, one after the other,
          for this solution.
      courseB_collector_loops9_2019:
        courseB_collector_loops9_a: Does this seem too hard?  Break it up into 3 little
          problems to make it feel easier.
        courseB_collector_loops9_b: You will need 3 repeat loops, one after the other,
          for this solution.
      courseB_collector_loops_challenge1:
        courseB_collector_loops_challenge1_b: |-
          Start by looping the following commands:

          <xml>
            <block type="maze_moveSouth">
              <next>
              <block type="collector_collect"></block>
              </next>
              </block>
          </xml>
        courseB_collector_loops_challenge1_c: "Move East twice between each path.\n\n<xml>\n
          \ <block type=\"maze_moveEast\"><next>\n  <block type=\"maze_moveEast\"></block></next></block>\n
          \ </xml>\n\nYou can do this with only 14 blocks. Click for one more hint
          to see a solution. "
        courseB_collector_loops_challenge1_d: |-
          Try this!

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat_simplified">
                  <title name="TIMES">5</title>
                  <statement name="DO">
                    <block type="maze_moveSouth">
                      <next>
                        <block type="collector_collect"/>
                      </next>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_moveEast">
                      <next>
                        <block type="maze_moveEast">
                          <next>
                            <block type="controls_repeat_simplified">
                              <title name="TIMES">5</title>
                              <statement name="DO">
                                <block type="collector_collect">
                                  <next>
                                    <block type="maze_moveNorth"/>
                                  </next>
                                </block>
                              </statement>
                              <next>
                                <block type="maze_moveEast">
                                  <next>
                                    <block type="maze_moveEast">
                                      <next>
                                        <block type="controls_repeat_simplified">
                                          <title name="TIMES">5</title>
                                          <statement name="DO">
                                            <block type="maze_moveSouth">
                                              <next>
                                                <block type="collector_collect"/>
                                              </next>
                                            </block>
                                          </statement>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseB_collector_loops_challenge1_2018:
        courseB_collector_loops_challenge1_b: |-
          Start by looping the following commands:

          <xml>
            <block type="maze_moveSouth">
              <next>
              <block type="collector_collect"></block>
              </next>
              </block>
          </xml>
        courseB_collector_loops_challenge1_c: "Move East twice between each path.\n\n<xml>\n
          \ <block type=\"maze_moveEast\"><next>\n  <block type=\"maze_moveEast\"></block></next></block>\n
          \ </xml>\n\nYou can do this with only 14 blocks. Click for one more hint
          to see a solution. "
        courseB_collector_loops_challenge1_d: |-
          Try this!

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat_simplified">
                  <title name="TIMES">5</title>
                  <statement name="DO">
                    <block type="maze_moveSouth">
                      <next>
                        <block type="collector_collect"/>
                      </next>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_moveEast">
                      <next>
                        <block type="maze_moveEast">
                          <next>
                            <block type="controls_repeat_simplified">
                              <title name="TIMES">5</title>
                              <statement name="DO">
                                <block type="collector_collect">
                                  <next>
                                    <block type="maze_moveNorth"/>
                                  </next>
                                </block>
                              </statement>
                              <next>
                                <block type="maze_moveEast">
                                  <next>
                                    <block type="maze_moveEast">
                                      <next>
                                        <block type="controls_repeat_simplified">
                                          <title name="TIMES">5</title>
                                          <statement name="DO">
                                            <block type="maze_moveSouth">
                                              <next>
                                                <block type="collector_collect"/>
                                              </next>
                                            </block>
                                          </statement>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseB_collector_loops_challenge1_2019:
        courseB_collector_loops_challenge1_b: |-
          Start by looping the following commands:

          <xml>
            <block type="maze_moveSouth">
              <next>
              <block type="collector_collect"></block>
              </next>
              </block>
          </xml>
        courseB_collector_loops_challenge1_c: "Move East twice between each path.\n\n<xml>\n
          \ <block type=\"maze_moveEast\"><next>\n  <block type=\"maze_moveEast\"></block></next></block>\n
          \ </xml>\n\nYou can do this with only 14 blocks. Click for one more hint
          to see a solution. "
        courseB_collector_loops_challenge1_d: |-
          Try this!

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat_simplified">
                  <title name="TIMES">5</title>
                  <statement name="DO">
                    <block type="maze_moveSouth">
                      <next>
                        <block type="collector_collect"/>
                      </next>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_moveEast">
                      <next>
                        <block type="maze_moveEast">
                          <next>
                            <block type="controls_repeat_simplified">
                              <title name="TIMES">5</title>
                              <statement name="DO">
                                <block type="collector_collect">
                                  <next>
                                    <block type="maze_moveNorth"/>
                                  </next>
                                </block>
                              </statement>
                              <next>
                                <block type="maze_moveEast">
                                  <next>
                                    <block type="maze_moveEast">
                                      <next>
                                        <block type="controls_repeat_simplified">
                                          <title name="TIMES">5</title>
                                          <statement name="DO">
                                            <block type="maze_moveSouth">
                                              <next>
                                                <block type="collector_collect"/>
                                              </next>
                                            </block>
                                          </statement>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseB_collector_loops_challenge2:
        courseB_collector_loops_challenge2_a: Jeśli coś pójdzie źle, nie bój się zacząć
          od nowa. Nie poddawaj się!
        courseB_collector_loops_challenge2_b: |-
          If you repeat this pattern, Laurel won't hit the wall at the bottom of the cave!

          <xml><block type="maze_moveEast">
                      <next>
                        <block type="collector_collect">
                          <next>
                            <block type="maze_moveWest">
                              <next>
                                <block type="maze_moveWest">
                                  <next>
                                    <block type="maze_moveSouth"/>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block></xml>
        courseB_collector_loops_challenge2_c: Spróbuj użyć bloku `repeat` aby zebrać
          ostateczny skarb!
        courseB_collector_loops_challenge2_d: |-
          Try this solution:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat_simplified_dropdown">
                  <title name="TIMES" config="3-10">4</title>
                  <statement name="DO">
                    <block type="maze_moveEast">
                      <next>
                        <block type="collector_collect">
                          <next>
                            <block type="maze_moveWest">
                              <next>
                                <block type="maze_moveWest">
                                  <next>
                                    <block type="maze_moveSouth"/>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                  <next>
                    <block type="controls_repeat_simplified_dropdown">
                      <title name="TIMES" config="3-10">6</title>
                      <statement name="DO">
                        <block type="collector_collect"/>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseB_collector_loops_challenge2a:
        courseB_collector_loops_challenge2a_a: Jeśli coś idzie źle, spróbuj to debugować.
          Nie poddawaj się!
        courseB_collector_loops_challenge2a_b: Spójrz na te opcje, aby wydostać się
          z labiryntu. Czy zauważasz jakiś wzór, który możesz powtórzyć?
        courseB_collector_loops_challenge2a_c: Aby zebrać cały skarb, musisz albo
          dodać dwa bloki <xml> <block type="collector_collect"/></xml> w swojej pętli,
          albo umieścić blok wewnątrz własnego bloku „powtarzaj".
      courseB_collector_loops_challenge2a_2018:
        courseB_collector_loops_challenge2a_a: Jeśli coś idzie źle, spróbuj to debugować.
          Nie poddawaj się!
        courseB_collector_loops_challenge2a_b: Spójrz na te opcje, aby wydostać się
          z labiryntu. Czy zauważasz jakiś wzór, który możesz powtórzyć?
        courseB_collector_loops_challenge2a_c: Aby zebrać cały skarb, musisz albo
          dodać dwa bloki <xml> <block type="collector_collect"/></xml> w swojej pętli,
          albo umieścić blok wewnątrz własnego bloku „powtarzaj".
      courseB_collector_loops_challenge2a_2019:
        courseB_collector_loops_challenge2a_a: Jeśli coś idzie źle, spróbuj to debugować.
          Nie poddawaj się!
        courseB_collector_loops_challenge2a_b: Spójrz na te opcje, aby wydostać się
          z labiryntu. Czy zauważasz jakiś wzór, który możesz powtórzyć?
        courseB_collector_loops_challenge2a_c: Aby zebrać cały skarb, musisz albo
          dodać dwa bloki <xml> <block type="collector_collect"/></xml> w swojej pętli,
          albo umieścić blok wewnątrz własnego bloku „powtarzaj".
      courseB_iceage_loops1:
        courseB_iceage_loops1_a: Watch out for broken ice! Scrat will fall right through!
        courseB_iceage_loops1_b: |-
          You will have to use this block:

          <xml><block type="maze_moveEast"/></xml>
      courseB_iceage_loops10:
        courseB_iceage_loops10_a: Watch out for broken ice! Scrat will fall into the
          water!
        courseB_iceage_loops10_b: Try saying the steps out loud or writing them down
          on a piece of paper. Do you see any patterns?
        courseB_iceage_loops10_c: This is a long puzzle! Follow this path.
      courseB_iceage_loops10_2019:
        courseB_iceage_loops10_a: Watch out for broken ice! Scrat will fall into the
          water!
        courseB_iceage_loops10_b: Try saying the steps out loud or writing them down
          on a piece of paper. Do you see any patterns?
        courseB_iceage_loops10_c: This is a long puzzle! Follow this path.
      courseB_iceage_loops1_2019:
        courseB_iceage_loops1_a: Watch out for broken ice! Scrat will fall right through!
        courseB_iceage_loops1_b: |-
          You will have to use this block:

          <xml><block type="maze_moveEast"/></xml>
      courseB_iceage_loops2:
        courseB_iceage_loops2_a: Break this puzzle into two pieces, one before the
          corner, and one after the corner.
        courseB_iceage_loops2_b: If you get stuck, try saying the steps out loud.
        courseB_iceage_loops2_c: Follow this path to get Scrat to the acorn.
      courseB_iceage_loops2_2019:
        courseB_iceage_loops2_a: Break this puzzle into two pieces, one before the
          corner, and one after the corner.
        courseB_iceage_loops2_b: If you get stuck, try saying the steps out loud.
        courseB_iceage_loops2_c: Follow this path to get Scrat to the acorn.
      courseB_iceage_loops3:
        courseB_iceage_loops3_a: |-
          Use this new block! <xml><block type="controls_repeat_simplified_dropdown">
              <title name="TIMES" config="3-10">5</title>
              </block></xml>
        courseB_iceage_loops3_b: Aby powtórzyć kod, przeciągnij pętlę `repeat`, następnie
          umieść tam blok, który chcesz aby się powtarzał.
      courseB_iceage_loops3_2019:
        courseB_iceage_loops3_a: |-
          Use this new block!
           <xml><block type="controls_repeat_simplified_dropdown">
              <title name="TIMES" config="3-10">5</title>
              </block></xml>
        courseB_iceage_loops3_b: Aby powtórzyć kod, przeciągnij pętlę `repeat`, następnie
          umieść tam blok, który chcesz aby się powtarzał.
      courseB_iceage_loops4:
        courseB_iceage_loops4_a: Try writing down the steps Scrat would take to get
          to the acorn. Do you see a pattern?
        courseB_iceage_loops4_b: Don't be afraid to run your code and see what happens!
        courseB_iceage_loops4_c: This is the path Scrat should take.
      courseB_iceage_loops4_2019:
        courseB_iceage_loops4_a: Try writing down the steps Scrat would take to get
          to the acorn. Do you see a pattern?
        courseB_iceage_loops4_b: Don't be afraid to run your code and see what happens!
        courseB_iceage_loops4_c: This is the path Scrat should take.
      courseB_iceage_loops6:
        courseB_iceage_loops6_a: Your final code will have **three** movement blocks.
        courseB_iceage_loops6_b: You only need to add **one** more loop!
        courseB_iceage_loops6_c: Your final path should look like this.
      courseB_iceage_loops6_2019:
        courseB_iceage_loops6_a: Your final code will have **three** movement blocks.
        courseB_iceage_loops6_b: You only need to add **one** more loop!
        courseB_iceage_loops6_c: Your final path should look like this.
      courseB_iceage_loops7:
        courseB_iceage_loops7_a: If you get stuck, try writing steps down on a piece
          of paper. Do you see a pattern?
        courseB_iceage_loops7_b: This is the path Scrat should take to get to the
          acorn.
      courseB_iceage_loops7_2019:
        courseB_iceage_loops7_a: If you get stuck, try writing steps down on a piece
          of paper. Do you see a pattern?
        courseB_iceage_loops7_b: This is the path Scrat should take to get to the
          acorn.
      courseB_iceage_loops8:
        courseB_iceage_loops8_a: Are the movement blocks right? What else can you
          change?
        courseB_iceage_loops8_b: The first loop should repeat **3** times, the second
          should repeat **5** times, the third loop should repeat **4** times, and
          the last loop should repeat **4** times.
        courseB_iceage_loops8_c: Use loops to help Scrat follow this path.
      courseB_iceage_loops8_2019:
        courseB_iceage_loops8_a: Are the movement blocks right? What else can you
          change?
        courseB_iceage_loops8_b: The first loop should repeat **3** times, the second
          should repeat **5** times, the third loop should repeat **4** times, and
          the last loop should repeat **4** times.
        courseB_iceage_loops8_c: Use loops to help Scrat follow this path.
      courseB_iceage_loops9:
        courseB_iceage_loops9_a: Having trouble? Try breaking this puzzle into smaller
          pieces. Don't be afraid to run your puzzle as you code!
        courseB_iceage_loops9_b: Your final code should have **4** loops.
        courseB_iceage_loops9_c: Scrat should follow this path to get the acorn.
      courseB_iceage_loops9_2019:
        courseB_iceage_loops9_a: Having trouble? Try breaking this puzzle into smaller
          pieces. Don't be afraid to run your puzzle as you code!
        courseB_iceage_loops9_b: Your final code should have **4** loops.
        courseB_iceage_loops9_c: Scrat should follow this path to get the acorn.
      courseB_maze_seq1:
        courseB_maze_seq1_a: Connect blocks to the <xml><block type="when_run"/></xml>
          block to make the bird move!
        courseB_maze_seq1_b: Drag three of these <xml><block type="maze_moveSouth"/></xml>
          arrows out and connect them to the <xml><block type="when_run"/></xml> block
          to get your bird to the pig.
      courseB_maze_seq10:
        courseB_maze_seq10_a: Try writing down the steps on a piece of paper first.
        courseB_maze_seq10_b: Aby dosięgnąć świnki, będziesz musiał poruszać się w
          2 różnych kierunkach.
      courseB_maze_seq11:
        courseB_maze_seq11_a: Try writing down the steps on a piece of paper first.
        courseB_maze_seq11_b: 'Rozwiąż tą zagadkę w dwóch etapach: pierwszy przed
          zakrętem, drugi po zakręcie.'
      courseB_maze_seq1_2018:
        courseB_maze_seq1_a: Connect blocks to the <xml><block type="when_run"/></xml>
          block to make Scrat move!
        courseB_maze_seq1_b: Drag three of these <xml><block type="maze_moveSouth"/></xml>
          arrows out and connect them to the <xml><block type="when_run"/></xml> block
          to get Scrat to the acorn.
      courseB_maze_seq1_2019:
        courseB_maze_seq1_a: Connect blocks to the <xml><block type="when_run"/></xml>
          block to make Scrat move!
        courseB_maze_seq1_b: Drag three of these <xml><block type="maze_moveSouth"/></xml>
          arrows out and connect them to the <xml><block type="when_run"/></xml> block
          to get Scrat to the acorn.
      courseB_maze_seq2:
        courseB_maze_seq2_a: This program is missing one block. Can you figure out
          which one?
        courseB_maze_seq2_b: Try running the code you are given to see what the bird
          needs to do next.
      courseB_maze_seq3:
        courseB_maze_seq3_a: One of the blocks is moving the bird in the wrong direction.
          Can you figure out which one and replace it with the correct block?
        courseB_maze_seq3_b: Try using the step button to find where the program goes
          wrong. Is it the first step? The second?
        courseB_maze_seq3_c: The <xml><block type="maze_moveWest"/></xml> block doesn't
          seem to be moving the bird in the right direction.
      courseB_maze_seq4:
        courseB_maze_seq4_a: Try adding one instruction at a time until you get to
          the pig.
        courseB_maze_seq4_b: You will want to use the <xml><block type="maze_moveEast"/></xml>
          block to solve this puzzle.
      courseB_maze_seq4_2018:
        courseB_maze_seq4_a: Try adding one instruction at a time until you get to
          the acorn.
        courseB_maze_seq4_b: You will want to use the <xml><block type="maze_moveEast"/></xml>
          block to solve this puzzle.
      courseB_maze_seq4_2019:
        courseB_maze_seq4_a: Try adding one instruction at a time until you get to
          the acorn.
        courseB_maze_seq4_b: You will want to use the <xml><block type="maze_moveEast"/></xml>
          block to solve this puzzle.
      courseB_maze_seq5:
        courseB_maze_seq5_a: Jeśli gdzieś utkniesz, spróbuj narysować ścieżkę na papierze.
        courseB_maze_seq5_b: There are 2 ways to solve this puzzle!
        courseB_maze_seq5_c: Nie jesteś pewny, jak dostać się do świnki? Spróbuj tej
          ścieżki.
      courseB_maze_seq5_2018:
        courseB_maze_seq5_a: Jeśli gdzieś utkniesz, spróbuj narysować ścieżkę na papierze.
        courseB_maze_seq5_b: There are 2 ways to solve this puzzle!
        courseB_maze_seq5_c: Nie jesteś pewny, jak dostać się do świnki? Spróbuj tej
          ścieżki.
      courseB_maze_seq5_2019:
        courseB_maze_seq5_a: Jeśli gdzieś utkniesz, spróbuj narysować ścieżkę na papierze.
        courseB_maze_seq5_b: There are 2 ways to solve this puzzle!
        courseB_maze_seq5_c: Nie jesteś pewny, jak dostać się do świnki? Spróbuj tej
          ścieżki.
      courseB_maze_seq6:
        courseB_maze_seq6_a: Your final code should have three movement blocks.
        courseB_maze_seq6_b: If you get stuck, try solving the puzzle in two parts,
          one sideways and one up-and-down.
        courseB_maze_seq5_c: There are two ways to solve this puzzle.
        courseB_maze_seq5_d: Not sure how to get to the pig? Try this path!
      courseB_maze_seq6_2018:
        courseB_maze_seq6_a: Your final code should have three movement blocks.
        courseB_maze_seq6_b: If you get stuck, try solving the puzzle in two parts,
          one sideways and one up-and-down.
        courseB_maze_seq5_c: There are two ways to solve this puzzle.
        courseB_maze_seq5_d: Not sure how to get to the acorn? Try this path!
      courseB_maze_seq6_2019:
        courseB_maze_seq6_a: Your final code should have three movement blocks.
        courseB_maze_seq6_b: If you get stuck, try solving the puzzle in two parts,
          one sideways and one up-and-down.
        courseB_maze_seq5_c: There are two ways to solve this puzzle.
        courseB_maze_seq5_d: Not sure how to get to the acorn? Try this path!
      courseB_maze_seq7:
        courseB_maze_seq7_a: Add 1 block to move the bird to the pig.
        courseB_maze_seq7_b: Try running the code that's given to you and see where
          you end up.
        courseB_maze_seq7_c: Can't get to the pig?  Try this path!
      courseB_maze_seq7_2018:
        courseB_maze_seq7_a: Add 1 block to move Scrat to the acorn.
        courseB_maze_seq7_b: Try running the code that's given to you and see where
          you end up.
        courseB_maze_seq7_c: Can't get to the acorn?  Try this path!
      courseB_maze_seq7_2019:
        courseB_maze_seq7_a: Add 1 block to move Scrat to the acorn.
        courseB_maze_seq7_b: Try running the code that's given to you and see where
          you end up.
        courseB_maze_seq7_c: Can't get to the acorn?  Try this path!
      courseB_maze_seq8:
        courseB_maze_seq8_a: Try adding one block at a time until you solve the puzzle.
        courseB_maze_seq8_b: Istnieją dwa sposoby, aby rozwiązać ten problem!
        courseB_maze_seq8_c: Nie wiesz, w którą stronę iść? Wypróbuj tę ścieżkę!
      courseB_maze_seq8_2018:
        courseB_maze_seq8_a: Try adding one block at a time until you solve the puzzle.
        courseB_maze_seq8_b: Istnieją dwa sposoby, aby rozwiązać ten problem!
        courseB_maze_seq8_c: Nie wiesz, w którą stronę iść? Wypróbuj tę ścieżkę!
      courseB_maze_seq8_2019:
        courseB_maze_seq8_a: Try adding one block at a time until you solve the puzzle.
        courseB_maze_seq8_b: Istnieją dwa sposoby, aby rozwiązać ten problem!
        courseB_maze_seq8_c: Nie wiesz, w którą stronę iść? Wypróbuj tę ścieżkę!
      courseB_maze_seq9:
        courseB_maze_seq9_a: Try writing down all of the steps on a piece of paper
          first.
        courseB_maze_seq9_b: Build your program a block at a time and test as you
          build.
        courseB_maze_seq9_c: There are two ways to solve this puzzle.
        courseB_maze_seq9_d: Stuck?  Try this path!
      courseB_maze_seq9_2018:
        courseB_maze_seq9_a: Try writing down all of the steps on a piece of paper
          first.
        courseB_maze_seq9_b: Build your program a block at a time and test as you
          build.
        courseB_maze_seq9_c: There are two ways to solve this puzzle.
        courseB_maze_seq9_d: Stuck?  Try this path!
      courseB_maze_seq9_2019:
        courseB_maze_seq9_a: Try writing down all of the steps on a piece of paper
          first.
        courseB_maze_seq9_b: Build your program a block at a time and test as you
          build.
        courseB_maze_seq9_c: There are two ways to solve this puzzle.
        courseB_maze_seq9_d: Stuck?  Try this path!
      courseB_maze_seq_challenge1:
        courseB_maze_seq_challenge1_a: Najkrótsza ścieżka może tym razem nie działać.
        courseB_maze_seq_challenge1_b: Try using the <xml><block type="maze_moveWest"/></xml>
          block to start.
      courseB_maze_seq_challenge1_2018:
        courseB_maze_seq_challenge1_a: Najkrótsza ścieżka może tym razem nie działać.
        courseB_maze_seq_challenge1_b: Try using the <xml><block type="maze_moveWest"/></xml>
          block to start.
      courseB_maze_seq_challenge1_2019:
        courseB_maze_seq_challenge1_a: Najkrótsza ścieżka może tym razem nie działać.
        courseB_maze_seq_challenge1_b: Try using the <xml><block type="maze_moveWest"/></xml>
          block to start.
      courseB_maze_seq_challenge2:
        courseB_maze_seq_challenge2_a: Nie musisz dodawać ani usuwać bloków, aby rozwiązać
          tą zagadkę.
        courseB_maze_seq_challenge2_b: Rearrange the blocks and take the staircase
          pattern path.
      courseB_maze_seq_challenge2_2018:
        courseB_maze_seq_challenge2_a: Nie musisz dodawać ani usuwać bloków, aby rozwiązać
          tą zagadkę.
        courseB_maze_seq_challenge2_b: Rearrange the blocks and take the staircase
          pattern path.
      courseB_maze_seq_challenge2_2019:
        courseB_maze_seq_challenge2_a: Nie musisz dodawać ani usuwać bloków, aby rozwiązać
          tą zagadkę.
        courseB_maze_seq_challenge2_b: Rearrange the blocks and take the staircase
          pattern path.
      courseB_playlab_events2:
        courseB_playlab_events2_a: |-
          This is the block to have Daisy say something:

          <xml>
            <block type="studio_saySpriteChoices">
              <title name="SPRITE">0</title>
              <title name="VALUE">Hi there.</title>
            </block>
            </xml>
      courseB_playlab_events2_2018:
        courseB_playlab_events2_a: |-
          This is the block to have Daisy say something:

          <xml>
            <block type="studio_saySpriteChoices">
              <title name="SPRITE">0</title>
              <title name="VALUE">Hi there.</title>
            </block>
            </xml>
      courseB_playlab_events2_2019:
        courseB_playlab_events2_a: |-
          This is the block to have Daisy say something:

          <xml>
            <block type="studio_saySpriteChoices">
              <title name="SPRITE">0</title>
              <title name="VALUE">Hi there.</title>
            </block>
            </xml>
      courseB_playlab_events3:
        courseB_playlab_events3_a: |-
          This is the block you should use to add the event:

          <xml>
          <block type="studio_whenSpriteClicked">
              <title name="SPRITE">0</title>
            </block>
            </xml>
        courseB_playlab_events3_b: |-
          This is the block you need to switch Daisy's mood:

          <xml>
          <block type="studio_setSpriteEmotion">
              <title name="SPRITE">0</title>
              <title name="VALUE">random</title>
            </block>
            </xml>
      courseB_playlab_events3_2018:
        courseB_playlab_events3_a: |-
          This is the block you should use to add the event:

          <xml>
          <block type="studio_whenSpriteClicked">
              <title name="SPRITE">0</title>
            </block>
            </xml>
        courseB_playlab_events3_b: |-
          This is the block you need to switch Daisy's mood:

          <xml>
          <block type="studio_setSpriteEmotion">
              <title name="SPRITE">0</title>
              <title name="VALUE">random</title>
            </block>
            </xml>
      courseB_playlab_events3_2019:
        courseB_playlab_events3_a: |-
          This is the block you should use to add the event:

          <xml>
          <block type="studio_whenSpriteClicked">
              <title name="SPRITE">0</title>
            </block>
            </xml>
        courseB_playlab_events3_b: |-
          This is the block you need to switch Daisy's mood:

          <xml>
          <block type="studio_setSpriteEmotion">
              <title name="SPRITE">0</title>
              <title name="VALUE">random</title>
            </block>
            </xml>
      courseB_playlab_events4:
        courseB_playlab_events4_a: |-
          This is the event that controls the left arrow:

          <xml>
            <block type="studio_whenArrow">
              <title name="VALUE">left</title>
            </block>
            </xml>
        courseB_playlab_events4_b: |-
          This is the block that makes the knight move left.

          <xml>
          <block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">8</title>
            </block>
            </xml>
      courseB_playlab_events4_2018:
        courseB_playlab_events4_a: |-
          This is the event that controls the left arrow:

          <xml>
            <block type="studio_whenArrow">
              <title name="VALUE">left</title>
            </block>
            </xml>
        courseB_playlab_events4_b: |-
          This is the block that makes the knight move left.

          <xml>
          <block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">8</title>
            </block>
            </xml>
      courseB_playlab_events4_2019:
        courseB_playlab_events4_a: |-
          This is the event that controls the left arrow:

          <xml>
            <block type="studio_whenArrow">
              <title name="VALUE">left</title>
            </block>
            </xml>
        courseB_playlab_events4_b: |-
          This is the block that makes the knight move left.

          <xml>
          <block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">8</title>
            </block>
            </xml>
      courseB_playlab_events5:
        courseB_playlab_events5_a: "This is the event block that controls the right
          arrow: \n\n<xml>\n  <block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">right</title>\n
          \ </block>\n  </xml>"
        courseB_playlab_events5_b: "This is the block that makes the knight run away.
          \n\n<xml>\n<block type=\"studio_move\">\n    <title name=\"SPRITE\">1</title>\n
          \   <title name=\"DIR\">2</title>\n  </block>\n</xml>"
      courseB_playlab_events5_2018:
        courseB_playlab_events5_a: "This is the event block that controls the right
          arrow: \n\n<xml>\n  <block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">right</title>\n
          \ </block>\n  </xml>"
        courseB_playlab_events5_b: "This is the block that makes the knight run away.
          \n\n<xml>\n<block type=\"studio_move\">\n    <title name=\"SPRITE\">1</title>\n
          \   <title name=\"DIR\">2</title>\n  </block>\n</xml>"
      courseB_playlab_events5_2019:
        courseB_playlab_events5_a: "This is the event block that controls the right
          arrow: \n\n<xml>\n  <block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">right</title>\n
          \ </block>\n  </xml>"
        courseB_playlab_events5_b: "This is the block that makes the knight run away.
          \n\n<xml>\n<block type=\"studio_move\">\n    <title name=\"SPRITE\">1</title>\n
          \   <title name=\"DIR\">2</title>\n  </block>\n</xml>"
      courseB_playlab_events6:
        courseB_playlab_events6_a: |-
          You will need these event blocks:

          <xml>
            <block type="studio_whenArrow" id="callMe">
              <title name="VALUE">up</title>
            </block>
            <block type="studio_whenArrow" id="callMe">
              <title name="VALUE">down</title>
            </block>
            </xml>
        courseB_playlab_events6_b: |-
          Use the drop down arrows on the green `when ___ arrow pressed` event blocks to choose different directions.

          ![](https://images.code.org/b4c76f19fc2d2694c1f731e5f6e786b8-image-1501003990996.gif)
        courseB_playlab_events6_c: Get to all of the flags to pass!
      courseB_playlab_events6_2018:
        courseB_playlab_events6_a: |-
          You will need these event blocks:

          <xml>
            <block type="studio_whenArrow" id="callMe">
              <title name="VALUE">up</title>
            </block>
            <block type="studio_whenArrow" id="callMe">
              <title name="VALUE">down</title>
            </block>
            </xml>
        courseB_playlab_events6_b: |-
          Use the drop down arrows on the green `when ___ arrow pressed` event blocks to choose different directions.

          ![](https://images.code.org/b4c76f19fc2d2694c1f731e5f6e786b8-image-1501003990996.gif)
        courseB_playlab_events6_c: Get to all of the flags to pass!
      courseB_playlab_events6_2019:
        courseB_playlab_events6_a: |-
          You will need these event blocks:

          <xml>
            <block type="studio_whenArrow" id="callMe">
              <title name="VALUE">up</title>
            </block>
            <block type="studio_whenArrow" id="callMe">
              <title name="VALUE">down</title>
            </block>
            </xml>
        courseB_playlab_events6_b: |-
          Use the drop down arrows on the green `when ___ arrow pressed` event blocks to choose different directions.

          ![](https://images.code.org/b4c76f19fc2d2694c1f731e5f6e786b8-image-1501003990996.gif)
        courseB_playlab_events6_c: Get to all of the flags to pass!
      courseB_playlab_events7:
        courseB_playlab_events7_a: |-
          This is the event block that you will need:

          <xml>
          <block type="studio_whenSpriteCollided">
              <title name="SPRITE1">0</title>
              <title name="SPRITE2">1</title>
            </block>
          </xml>
        courseB_playlab_events7_b: |-
          This is the block you need to play a sound.

          <xml>
          <block type="studio_playSound">
              <title name="SOUND">slap</title>
            </block>
          </xml>
        courseB_playlab_events7_c: |-
          This is the block you need to make the knight vanish:

          <xml>
          <block type="studio_vanish">
              <title name="SPRITE">1</title>
            </block>
          </xml>
      courseB_playlab_events7_2018:
        courseB_playlab_events7_a: |-
          This is the event block that you will need:

          <xml>
          <block type="studio_whenSpriteCollided">
              <title name="SPRITE1">0</title>
              <title name="SPRITE2">1</title>
            </block>
          </xml>
        courseB_playlab_events7_b: |-
          This is the block you need to play a sound.

          <xml>
          <block type="studio_playSound">
              <title name="SOUND">slap</title>
            </block>
          </xml>
        courseB_playlab_events7_c: |-
          This is the block you need to make the knight vanish:

          <xml>
          <block type="studio_vanish">
              <title name="SPRITE">1</title>
            </block>
          </xml>
      courseB_playlab_events7_2019:
        courseB_playlab_events7_a: |-
          This is the event block that you will need:

          <xml>
          <block type="studio_whenSpriteCollided">
              <title name="SPRITE1">0</title>
              <title name="SPRITE2">1</title>
            </block>
          </xml>
        courseB_playlab_events7_b: |-
          This is the block you need to play a sound.

          <xml>
          <block type="studio_playSound">
              <title name="SOUND">slap</title>
            </block>
          </xml>
        courseB_playlab_events7_c: |-
          This is the block you need to make the knight vanish:

          <xml>
          <block type="studio_vanish">
              <title name="SPRITE">1</title>
            </block>
          </xml>
      courseB_playlab_events_challenge1:
        courseB_playlab_events_challenge1_a: "Make the other animals move down when
          you press `▼`. \n\n<xml>\n  <block type=\"studio_whenArrow\" movable=\"false\">\n
          \   <title name=\"VALUE\">down</title>\n  </block>\n</xml>"
        courseB_playlab_events_challenge1_b: |-
          Change the speed of the animals by using this block:

          <xml>
            <block type="studio_setSpriteSpeed">
              <title name="SPRITE">0</title>
              <title name="VALUE">Studio.SpriteSpeed.NORMAL</title>
            </block></xml>
        courseB_playlab_events_challenge1_c: |-
          What will the everyone say when the race is over? Make them talk with this event:

          <xml>
            <block type="studio_whenSpriteClicked">
              <title name="SPRITE">2</title>
              <next>
                <block type="studio_saySpriteChoices">
                  <title name="SPRITE">2</title>
                  <title name="VALUE">Woo hoo!</title>
                </block>
              </next>
            </block>
          </xml>
      courseB_playlab_events_challenge1_2018:
        courseB_playlab_events_challenge1_a: "Make the other animals move down when
          you press `▼`. \n\n<xml>\n  <block type=\"studio_whenArrow\" movable=\"false\">\n
          \   <title name=\"VALUE\">down</title>\n  </block>\n</xml>"
        courseB_playlab_events_challenge1_b: |-
          Change the speed of the animals by using this block:

          <xml>
            <block type="studio_setSpriteSpeed">
              <title name="SPRITE">0</title>
              <title name="VALUE">Studio.SpriteSpeed.NORMAL</title>
            </block></xml>
        courseB_playlab_events_challenge1_c: |-
          What will the everyone say when the race is over? Make them talk with this event:

          <xml>
            <block type="studio_whenSpriteClicked">
              <title name="SPRITE">2</title>
              <next>
                <block type="studio_saySpriteChoices">
                  <title name="SPRITE">2</title>
                  <title name="VALUE">Woo hoo!</title>
                </block>
              </next>
            </block>
          </xml>
      courseB_playlab_events_challenge1_2019:
        courseB_playlab_events_challenge1_a: "Make the other animals move down when
          you press `▼`. \n\n<xml>\n  <block type=\"studio_whenArrow\" movable=\"false\">\n
          \   <title name=\"VALUE\">down</title>\n  </block>\n</xml>"
        courseB_playlab_events_challenge1_b: |-
          Change the speed of the animals by using this block:

          <xml>
            <block type="studio_setSpriteSpeed">
              <title name="SPRITE">0</title>
              <title name="VALUE">Studio.SpriteSpeed.NORMAL</title>
            </block></xml>
        courseB_playlab_events_challenge1_c: |-
          What will the everyone say when the race is over? Make them talk with this event:

          <xml>
            <block type="studio_whenSpriteClicked">
              <title name="SPRITE">2</title>
              <next>
                <block type="studio_saySpriteChoices">
                  <title name="SPRITE">2</title>
                  <title name="VALUE">Woo hoo!</title>
                </block>
              </next>
            </block>
          </xml>
      courseB_playlab_events_challenge2:
        courseB_playlab_events_challenge2_a: Each animal in the game should disappear
          when clicked. It should also come back after a second or two!
        courseB_playlab_events_challenge2_b: |-
          Use other event blocks to make the other animals disappear!

          <xml>
            <block type="studio_whenSpriteClicked">
              <title name="SPRITE">1</title>
            </block>
            </xml>
        courseB_playlab_events_challenge2_c: |-
          Use extra commands to play sounds or score points when you click the animals!

          <xml>
            <block type="studio_playSound">
              <title name="SOUND">slap</title>
            </block>
            <block type="studio_changeScore"/></xml>
        courseB_playlab_events_challenge2_d: |-
          Mix it up!

          Make some animals give more points than others.
          Use different sounds.
          Change the animals' moods!
      courseB_playlab_events_challenge2_2018:
        courseB_playlab_events_challenge2_a: Each animal in the game should disappear
          when clicked. It should also come back after a second or two!
        courseB_playlab_events_challenge2_b: |-
          Use other event blocks to make the other animals disappear!

          <xml>
            <block type="studio_whenSpriteClicked">
              <title name="SPRITE">1</title>
            </block>
            </xml>
        courseB_playlab_events_challenge2_c: |-
          Use extra commands to play sounds or score points when you click the animals!

          <xml>
            <block type="studio_playSound">
              <title name="SOUND">slap</title>
            </block>
            <block type="studio_changeScore"/></xml>
        courseB_playlab_events_challenge2_d: |-
          Mix it up!

          Make some animals give more points than others.
          Use different sounds.
          Change the animals' moods!
      courseB_playlab_events_challenge2_2019:
        courseB_playlab_events_challenge2_a: Each animal in the game should disappear
          when clicked. It should also come back after a second or two!
        courseB_playlab_events_challenge2_b: |-
          Use other event blocks to make the other animals disappear!

          <xml>
            <block type="studio_whenSpriteClicked">
              <title name="SPRITE">1</title>
            </block>
            </xml>
        courseB_playlab_events_challenge2_c: |-
          Use extra commands to play sounds or score points when you click the animals!

          <xml>
            <block type="studio_playSound">
              <title name="SOUND">slap</title>
            </block>
            <block type="studio_changeScore"/></xml>
        courseB_playlab_events_challenge2_d: |-
          Mix it up!

          Make some animals give more points than others.
          Use different sounds.
          Change the animals' moods!
      courseB_starWars_prog1:
        courseB_starWars_prog1_a: Try adding blocks one at a time, then click "Run"
          to see what happens.
        courseB_starWars_prog1_b: |-
          You will want to move East to solve this puzzle. How far do you need to move?

          <xml><block type="studio_moveEast"/></xml>
      courseB_starWars_prog1_2018:
        courseB_starWars_prog1_a: Try adding blocks one at a time, then click "Run"
          to see what happens.
        courseB_starWars_prog1_b: |-
          You will want to move East to solve this puzzle. How far do you need to move?

          <xml><block type="studio_moveEast"/></xml>
      courseB_starWars_prog1_2019:
        courseB_starWars_prog1_a: Try adding blocks one at a time, then click "Run"
          to see what happens.
        courseB_starWars_prog1_b: |-
          You will want to move East to solve this puzzle. How far do you need to move?

          <xml><block type="studio_moveEast"/></xml>
      courseB_starWars_prog2:
        courseB_starWars_prog2_a: Split this problem into two parts. Get one one pile
          of scrap metal, then figure out how to get to the other one.
      courseB_starWars_prog2_2018:
        courseB_starWars_prog2_a: Split this problem into two parts. Get one pile
          of scrap metal, then figure out how to get to the other one.
      courseB_starWars_prog2_2019:
        courseB_starWars_prog2_a: Split this problem into two parts. Get one one pile
          of scrap metal, then figure out how to get to the other one.
      courseB_starWars_prog3:
        courseB_starWars_prog3_a: You will need to move 3 ways to solve this puzzle.
        courseB_starWars_prog3_b: Build one piece of code at a time. Run it to figure
          out where to go from there.
      courseB_starWars_prog3_2018:
        courseB_starWars_prog3_a: You will need to move 3 ways to solve this puzzle.
        courseB_starWars_prog3_b: Build one piece of code at a time. Run it to figure
          out where to go from there.
      courseB_starWars_prog3_2019:
        courseB_starWars_prog3_a: You will need to move 3 ways to solve this puzzle.
        courseB_starWars_prog3_b: Build one piece of code at a time. Run it to figure
          out where to go from there.
      courseB_starWars_prog4:
        courseB_starWars_prog4_a: Build one piece of code at a time. Run it to figure
          out where to go from there.
        courseB_starWars_prog4_b: |-
          Try using the `repeat` block for shorter code.

          <xml>  <block type="controls_repeat_simplified">
              <title name="TIMES">3</title>
            </block>
          </xml>
      courseB_starWars_prog4_2018:
        courseB_starWars_prog4_a: Build one piece of code at a time. Run it to figure
          out where to go from there.
        courseB_starWars_prog4_b: |-
          Try using the `repeat` block for shorter code.

          <xml>  <block type="controls_repeat_simplified">
              <title name="TIMES">3</title>
            </block>
          </xml>
      courseB_starWars_prog4_2019:
        courseB_starWars_prog4_a: Build one piece of code at a time. Run it to figure
          out where to go from there.
        courseB_starWars_prog4_b: |-
          Try using the `repeat` block for shorter code.

          <xml>  <block type="controls_repeat_simplified">
              <title name="TIMES">3</title>
            </block>
          </xml>
      courseB_starWars_prog5:
        courseB_starWars_prog5_a: Doesn't this pattern look a little like the last
          puzzle?
        courseB_starWars_prog5_b: BB-8 will grab the scrap metal as he rolls over
          it.
        courseB_starWars_prog5_c: Śledź ten wzór swoim palcem. Licz kawałki metalu
          jak się poruszasz.
        courseB_starWars_prog5_da: |-
          Look what happens if you use the same solution as the stair-step puzzle:

          ![](https://images.code.org/866b4121069423bf03d92dcb8f2276af-image-1503709785988.09.24.png)
      courseB_starWars_prog5_2018:
        courseB_starWars_prog5_a: Doesn't this pattern look a little like the last
          puzzle?
        courseB_starWars_prog5_b: BB-8 will grab the scrap metal as he rolls over
          it.
        courseB_starWars_prog5_c: Śledź ten wzór swoim palcem. Licz kawałki metalu
          jak się poruszasz.
        courseB_starWars_prog5_da: |-
          Look what happens if you use the same solution as the stair-step puzzle:

          ![](https://images.code.org/866b4121069423bf03d92dcb8f2276af-image-1503709785988.09.24.png)
      courseB_starWars_prog5_2019:
        courseB_starWars_prog5_a: Doesn't this pattern look a little like the last
          puzzle?
        courseB_starWars_prog5_b: BB-8 will grab the scrap metal as he rolls over
          it.
        courseB_starWars_prog5_c: Śledź ten wzór swoim palcem. Licz kawałki metalu
          jak się poruszasz.
        courseB_starWars_prog5_da: |-
          Look what happens if you use the same solution as the stair-step puzzle:

          ![](https://images.code.org/866b4121069423bf03d92dcb8f2276af-image-1503709785988.09.24.png)
      courseB_starWars_prog6:
        courseB_starWars_prog6_a: This pattern is just a stair step with two moves
          per direction!
        courseB_starWars_prog6_b: |-
          Try using the `repeat` block for shorter code.

          <xml>  <block type="controls_repeat_simplified">
              <title name="TIMES">3</title>
            </block>
          </xml>
      courseB_starWars_prog6_2018:
        courseB_starWars_prog6_a: This pattern is just a stair step with two moves
          per direction!
        courseB_starWars_prog6_b: |-
          Try using the `repeat` block for shorter code.

          <xml>  <block type="controls_repeat_simplified">
              <title name="TIMES">3</title>
            </block>
          </xml>
      courseB_starWars_prog6_2019:
        courseB_starWars_prog6_a: This pattern is just a stair step with two moves
          per direction!
        courseB_starWars_prog6_b: |-
          Try using the `repeat` block for shorter code.

          <xml>  <block type="controls_repeat_simplified">
              <title name="TIMES">3</title>
            </block>
          </xml>
      courseB_starWars_prog7:
        courseB_starWars_prog7_a: Doesn't this pattern look a little like the last
          puzzle?
        courseB_starWars_prog7_b: BB-8 will grab the scrap metal as he rolls over
          it.
        courseB_starWars_prog7_c: Try drawing the large stair step pattern over this
          puzzle. Does it cover all of the scrap metal?
      courseB_starWars_prog7_2018:
        courseB_starWars_prog7_a: Doesn't this pattern look a little like the last
          puzzle?
        courseB_starWars_prog7_b: BB-8 will grab the scrap metal as he rolls over
          it.
        courseB_starWars_prog7_c: Try drawing the large stair step pattern over this
          puzzle. Does it cover all of the scrap metal?
      courseB_starWars_prog7_2019:
        courseB_starWars_prog7_a: Doesn't this pattern look a little like the last
          puzzle?
        courseB_starWars_prog7_b: BB-8 will grab the scrap metal as he rolls over
          it.
        courseB_starWars_prog7_c: Try drawing the large stair step pattern over this
          puzzle. Does it cover all of the scrap metal?
      courseB_starWars_prog8:
        courseB_starWars_prog8_a: It is okay to go back over a set of spaces where
          you have already traveled.
        courseB_starWars_prog8_b: |-
          Try using the `repeat` block to see what happens to the code that you put inside.

          <xml>
            <block type="controls_repeat_simplified">
              <title name="TIMES">3</title>
            </block>
          </xml>
      courseB_starWars_prog8_2018:
        courseB_starWars_prog8_a: It is okay to go back over a set of spaces where
          you have already traveled.
        courseB_starWars_prog8_b: |-
          Try using the `repeat` block to see what happens to the code that you put inside.

          <xml>
            <block type="controls_repeat_simplified">
              <title name="TIMES">3</title>
            </block>
          </xml>
      courseB_starWars_prog8_2019:
        courseB_starWars_prog8_a: It is okay to go back over a set of spaces where
          you have already traveled.
        courseB_starWars_prog8_b: |-
          Try using the `repeat` block to see what happens to the code that you put inside.

          <xml>
            <block type="controls_repeat_simplified">
              <title name="TIMES">3</title>
            </block>
          </xml>
      courseB_starWars_prog9:
        courseB_starWars_prog9_a: Nie bój się popełniać błędów! Uruchom kod aby zobaczyć
          co się dzieje, nawet jeśli nie rozwiązałeś jeszcze zagadki.
        courseB_starWars_prog9_b: Jest wiele sposobów na rozwiązanie tej zagadki.
        courseB_starWars_prog9_c: Could a `repeat` loop help out here?
      courseB_starWars_prog9_2018:
        courseB_starWars_prog9_a: Nie bój się popełniać błędów! Uruchom kod aby zobaczyć
          co się dzieje, nawet jeśli nie rozwiązałeś jeszcze zagadki.
        courseB_starWars_prog9_b: Jest wiele sposobów na rozwiązanie tej zagadki.
        courseB_starWars_prog9_c: |-
          Could a `repeat` <xml><block type="controls_repeat_simplified">
              <title name="TIMES">3</title>
            </block></xml>loop help out here?
      courseB_starWars_prog9_2019:
        courseB_starWars_prog9_a: Nie bój się popełniać błędów! Uruchom kod aby zobaczyć
          co się dzieje, nawet jeśli nie rozwiązałeś jeszcze zagadki.
        courseB_starWars_prog9_b: Jest wiele sposobów na rozwiązanie tej zagadki.
        courseB_starWars_prog9_c: |-
          Could a `repeat` <xml><block type="controls_repeat_simplified">
              <title name="TIMES">3</title>
            </block></xml>loop help out here?
      courseC19_playLab_EOC1:
        courseE_playLab_scaffold1_a: The `set actor 1 to ??? image` block can be used
          to add an actor to the stage.
        courseE_playLab_scaffold1_b: Put the `set actor` block under `when run` to
          make your actor appear at the beginning of the program.
        courseE_playLab_scaffold1_c: Use `set ??? background` to choose a background
          for your scene.
      courseC19_playLab_EOC2:
        courseE_playLab_scaffold1_a: Pull on the dropdown menu of the `when ____ arrow`
          event to change the direction the block controls.
        courseE_playLab_scaffold1_b: You should have four `when arrow` event blocks,
          with a direction to move underneath each.
        courseE_playLab_scaffold1_c: When you are done, you should be able to move
          your hero with the arrow keys!
      courseC19_playLab_EOC4:
        courseE_playLab_scaffold4_a: Use `score point` to add a point, and `remove
          point` to subtract one.
      courseC_PlayLab_events1:
        courseC_PlayLab_events1_a: |-
          Attach this block to the `when run` block:

          <xml>
            <block type="studio_saySpriteChoices">
              <title name="SPRITE">0</title>
              <title name="VALUE">Hi there.</title>
            </block>
          </xml>
      courseC_PlayLab_events1_2018:
        courseC_PlayLab_events1_a: |-
          Attach this block to the `when run` block:

          <xml>
            <block type="studio_saySpriteChoices">
              <title name="SPRITE">0</title>
              <title name="VALUE">Hi there.</title>
            </block>
          </xml>
      courseC_PlayLab_events1_2019:
        courseC_PlayLab_events1_a: |-
          Attach this block to the `when run` block:

          <xml>
            <block type="studio_saySpriteChoices">
              <title name="SPRITE">0</title>
              <title name="VALUE">Hi there.</title>
            </block>
          </xml>
      courseC_PlayLab_events2:
        courseC_PlayLab_events2_a: |-
          Attach two of these blocks to the `when run` block:

          <xml>
            <block type="studio_saySpriteChoices">
              <title name="SPRITE">0</title>
              <title name="VALUE">Hi there.</title>
            </block>
          </xml>
        courseC_PlayLab_events2_b: Use the dropdown menu on the second `actor __ say`
          block to change which actor speaks.
      courseC_PlayLab_events2_2018:
        courseC_PlayLab_events2_a: |-
          Attach two of these blocks to the `when run` block:

          <xml>
            <block type="studio_saySpriteChoices">
              <title name="SPRITE">0</title>
              <title name="VALUE">Hi there.</title>
            </block>
          </xml>
        courseC_PlayLab_events2_b: Use the dropdown menu on the second `actor __ say`
          block to change which actor speaks.
      courseC_PlayLab_events2_2019:
        courseC_PlayLab_events2_a: |-
          Attach two of these blocks to the `when run` block:

          <xml>
            <block type="studio_saySpriteChoices">
              <title name="SPRITE">0</title>
              <title name="VALUE">Hi there.</title>
            </block>
          </xml>
        courseC_PlayLab_events2_b: Use the dropdown menu on the second `actor __ say`
          block to change which actor speaks.
      courseC_PlayLab_events3:
        courseC_PlayLab_events3_a: You only need to move Jorge to the right by about
          25 pixels to solve this puzzle.
        courseC_PlayLab_events3_b: Is there a block in the toolbox that looks like
          it would move an actor?
        courseC_PlayLab_events3_c: |-
          Attach this block to the `when run` block:

          <xml>
          <block type="studio_moveDistance">
              <title name="SPRITE">0</title>
              <title name="DIR">2</title>
              <title name="DISTANCE">25</title>
            </block>
          </xml>
      courseC_PlayLab_events3_2018:
        courseC_PlayLab_events3_a: You only need to move Jorge to the right by about
          25 pixels to solve this puzzle.
        courseC_PlayLab_events3_b: Is there a block in the toolbox that looks like
          it would move an actor?
        courseC_PlayLab_events3_c: |-
          Attach this block to the `when run` block:

          <xml>
          <block type="studio_moveDistance">
              <title name="SPRITE">0</title>
              <title name="DIR">2</title>
              <title name="DISTANCE">25</title>
            </block>
          </xml>
      courseC_PlayLab_events3_2019:
        courseC_PlayLab_events3_a: You only need to move Jorge to the right by about
          25 pixels to solve this puzzle.
        courseC_PlayLab_events3_b: Is there a block in the toolbox that looks like
          it would move an actor?
        courseC_PlayLab_events3_c: |-
          Attach this block to the `when run` block:

          <xml>
          <block type="studio_moveDistance">
              <title name="SPRITE">0</title>
              <title name="DIR">2</title>
              <title name="DISTANCE">25</title>
            </block>
          </xml>
      courseC_PlayLab_events4:
        courseC_PlayLab_events4_b: When the "Run" button is clicked, Jorge needs to
          move right **100** pixels to reach Olive the Cat.
        courseC_PlayLab_events4_a: You will need to attach an `actor __ say` block
          to the `when actor touches` event to solve this puzzle.
      courseC_PlayLab_events4_2018:
        courseC_PlayLab_events4_b: When the "Run" button is clicked, Jorge needs to
          move right **100** pixels to reach Olive the Cat.
        courseC_PlayLab_events4_a: You will need to attach an `actor __ say` block
          to the `when actor touches` event to solve this puzzle.
      courseC_PlayLab_events4_2019:
        courseC_PlayLab_events4_b: When the "Run" button is clicked, Jorge needs to
          move right **100** pixels to reach Olive the Cat.
        courseC_PlayLab_events4_a: You will need to attach an `actor __ say` block
          to the `when actor touches` event to solve this puzzle.
      courseC_PlayLab_events5:
        courseC_PlayLab_events5_a: You will need to click the dropdown menu in the
          `actor say` block to find the text "What's new?"
        courseC_PlayLab_events5_b: Click on Octavia when you run your program to check
          that it works!
      courseC_PlayLab_events5_2018:
        courseC_PlayLab_events5_a: You will need to click the dropdown menu in the
          `actor say` block to find the text "What's new?"
        courseC_PlayLab_events5_b: Click on Octavia when you run your program to check
          that it works!
      courseC_PlayLab_events5_2019:
        courseC_PlayLab_events5_a: You will need to click the dropdown menu in the
          `actor say` block to find the text "What's new?"
        courseC_PlayLab_events5_b: Click on Octavia when you run your program to check
          that it works!
      courseC_PlayLab_events6:
        courseC_PlayLab_events6_a: Każdy zielony blok `when arrow` powinien mieć jedną
          akcję poniżej.
        courseC_PlayLab_events6_b: Use the drop down menu on the `move actor 1` block
          to change which direction Waddles moves.
        courseC_PlayLab_events6_c: Kiedy skończysz, powinieneś być w stanie poruszać
          się Waddles dookoła używając strzałek na klawiaturze!
      courseC_PlayLab_events6_2018:
        courseC_PlayLab_events6_a: Każdy zielony blok `when arrow` powinien mieć jedną
          akcję poniżej.
        courseC_PlayLab_events6_b: Use the drop down menu on the `move actor 1` block
          to change which direction Waddles moves.
        courseC_PlayLab_events6_c: Kiedy skończysz, powinieneś być w stanie poruszać
          się Waddles dookoła używając strzałek na klawiaturze!
      courseC_PlayLab_events6_2019:
        courseC_PlayLab_events6_a: Każdy zielony blok `when arrow` powinien mieć jedną
          akcję poniżej.
        courseC_PlayLab_events6_b: Use the drop down menu on the `move actor 1` block
          to change which direction Waddles moves.
        courseC_PlayLab_events6_c: Kiedy skończysz, powinieneś być w stanie poruszać
          się Waddles dookoła używając strzałek na klawiaturze!
      courseC_PlayLab_events7:
        courseC_PlayLab_events7_a: 'Use both the `move actor 2 up 400 pixels` block
          and the `move actor 2 down 400 pixels` block inside the `repeat forever`
          loop to solve this puzzle. '
        courseC_PlayLab_events7_b: Pętla `repeat forever` nie musi być połączona z
          żadnym innym blokiem zdarzeń; będzie działać samodzielnie.
      courseC_PlayLab_events7_2018:
        courseC_PlayLab_events7_a: 'Use both the `move actor 2 up 400 pixels` block
          and the `move actor 2 down 400 pixels` block inside the `repeat forever`
          loop to solve this puzzle. '
        courseC_PlayLab_events7_b: Pętla `repeat forever` nie musi być połączona z
          żadnym innym blokiem zdarzeń; będzie działać samodzielnie.
      courseC_PlayLab_events7_2019:
        courseC_PlayLab_events7_a: 'Use both the `move actor 2 up 400 pixels` block
          and the `move actor 2 down 400 pixels` block inside the `repeat forever`
          loop to solve this puzzle. '
        courseC_PlayLab_events7_b: Pętla `repeat forever` nie musi być połączona z
          żadnym innym blokiem zdarzeń; będzie działać samodzielnie.
      courseC_PlayLab_events8:
        courseC_PlayLab_events8_a: You will need to connect blocks to the `when actor
          touches` block to make this happen correctly.
        courseC_PlayLab_events8_b: The `actor say` and `play sound` blocks in the
          toolbox should help you out!
      courseC_PlayLab_events8_2018:
        courseC_PlayLab_events8_a: You will need to connect blocks to the `when actor
          touches` block to make this happen correctly.
        courseC_PlayLab_events8_b: The `actor say` and `play sound` blocks in the
          toolbox should help you out!
      courseC_PlayLab_events8_2019:
        courseC_PlayLab_events8_a: You will need to connect blocks to the `when actor
          touches` block to make this happen correctly.
        courseC_PlayLab_events8_b: The `actor say` and `play sound` blocks in the
          toolbox should help you out!
      courseC_PlayLab_events9:
        courseC_PlayLab_events9_a: The `score point` block will help you to solve
          this puzzle.
        courseC_PlayLab_events9_b: Make sure that your new `when actor touches` block
          says actor **1** and actor **3**.
        courseC_PlayLab_events9_c: Możesz mieć więcej niż jedno zdarzenie `when actor
          touches` w swojej przestrzeni roboczej w tym samym czasie, więc nie musisz
          usuwać tego pierwszego!
      courseC_PlayLab_events9_2018:
        courseC_PlayLab_events9_a: The `score point` block will help you to solve
          this puzzle.
        courseC_PlayLab_events9_b: Make sure that your new `when actor touches` block
          says actor **1** and actor **3**.
        courseC_PlayLab_events9_c: Możesz mieć więcej niż jedno zdarzenie `when actor
          touches` w swojej przestrzeni roboczej w tym samym czasie, więc nie musisz
          usuwać tego pierwszego!
      courseC_PlayLab_events9_2019:
        courseC_PlayLab_events9_a: The `score point` block will help you to solve
          this puzzle.
        courseC_PlayLab_events9_b: Make sure that your new `when actor touches` block
          says actor **1** and actor **3**.
        courseC_PlayLab_events9_c: Możesz mieć więcej niż jedno zdarzenie `when actor
          touches` w swojej przestrzeni roboczej w tym samym czasie, więc nie musisz
          usuwać tego pierwszego!
      courseC_PlayLab_eventsA:
        courseC_PlayLab_eventsA_a: Use the `set background` block and the `set actor
          to a ____ speed` block to solve this puzzle.
        courseC_PlayLab_eventsA_b: You will need to specifically drag a `when run`
          event block into the workspace to solve this puzzle.
      courseC_PlayLab_eventsA_2018:
        courseC_PlayLab_eventsA_a: Use the `set background` block and the `set actor
          to a ____ speed` block to solve this puzzle.
        courseC_PlayLab_eventsA_b: You will need to specifically drag a `when run`
          event block into the workspace to solve this puzzle.
      courseC_PlayLab_eventsA_2019:
        courseC_PlayLab_eventsA_a: Use the `set background` block and the `set actor
          to a ____ speed` block to solve this puzzle.
        courseC_PlayLab_eventsA_b: You will need to specifically drag a `when run`
          event block into the workspace to solve this puzzle.
      courseC_PlayLab_eventsA_embed_2019:
        courseC_PlayLab_eventsA_a: Use the arrow keys to move the penguin. You do
          not need to write any code to finish this level.
      courseC_PlayLab_eventsFP:
        idea1: |-
          _Need an idea?_

          **Who's there?** Make characters appear with random images, so no one knows who's showing up next.

          ![](https://images.code.org/a56e03479801995d93ad5a4e4384a79e-image-1475340154498.gif)
        idea2: |-
          _Need an idea?_

          **Going on an Adventure** - Change the background, then have the characters talk about where they are now.

          ![](https://images.code.org/010c4d919f841d6049caf9211ab65ccc-image-1475340583052.gif)
        idea3: |-
          _Need an idea?_

          **Pinball** - Make one character move using the arrow keys (use `when up arrow`, `when down arrow` blocks), then play random sounds when it collides with other characters on the screen.
      courseC_PlayLab_eventsFP_2018:
        idea1: |-
          _Need an idea?_

          **Who's there?** Make characters appear with random images, so no one knows who's showing up next.

          ![](https://images.code.org/a56e03479801995d93ad5a4e4384a79e-image-1475340154498.gif)
        idea2: |-
          _Need an idea?_

          **Going on an Adventure** - Change the background, then have the characters talk about where they are now.

          ![](https://images.code.org/010c4d919f841d6049caf9211ab65ccc-image-1475340583052.gif)
        idea3: |-
          _Need an idea?_

          **Pinball** - Make one character move using the arrow keys (use `when up arrow`, `when down arrow` blocks), then play random sounds when it collides with other characters on the screen.
      courseC_PlayLab_eventsFP_2019:
        idea1: |-
          _Need an idea?_

          **Who's there?** Make characters appear with random images, so no one knows who's showing up next.

          <img src= "https://images.code.org/dbd6ece9d0fb213039ea5dccb91fc425-image-1563577859889.gif" style="width: 200px">
        idea2: |-
          _Need an idea?_

          **Going on an Adventure** - Change the background, then have the characters talk about where they are now.

          <img src= "https://images.code.org/a7f740d73074deb128cdc2826abda9e6-image-1563576781779.gif" style="width: 200px">
        idea3: |-
          _Need an idea?_

          **Pinball** - Make one character move using the arrow keys (use `when up arrow`, `when down arrow` blocks), then play random sounds when it collides with other characters on the screen.
      courseC_PlayLab_events_challenge1:
        courseC_PlayLab_events_challenge_a: |-
          You can use this block to move actors to different places on the game space.

          <xml> <block type="studio_setSpritePosition">
              <title name="SPRITE">0</title>
              <title name="VALUE">12</title>
            </block></xml>
        courseC_PlayLab_events_challenge_b: Try using `set actor 1 to the middle left
          position` when it touches either of the other actors. This will reset the
          game so the player can keep trying!
        courseC_PlayLab_events_challenge_c: |-
          You might also want to try changing the speed of the different actors to make the game easier or more challenging!

          <xml>  <block type="studio_setSpriteSpeed">
              <title name="SPRITE">0</title>
              <title name="VALUE">Studio.SpriteSpeed.FAST</title>
            </block></xml>
      courseC_PlayLab_events_challenge1_2018:
        courseC_PlayLab_events_challenge_a: |-
          You can use this block to move actors to different places on the game space.

          <xml> <block type="studio_setSpritePosition">
              <title name="SPRITE">0</title>
              <title name="VALUE">12</title>
            </block></xml>
        courseC_PlayLab_events_challenge_b: Try using `set actor 1 to the middle left
          position` when it touches either of the other actors. This will reset the
          game so the player can keep trying!
        courseC_PlayLab_events_challenge_c: |-
          You might also want to try changing the speed of the different actors to make the game easier or more challenging!

          <xml>  <block type="studio_setSpriteSpeed">
              <title name="SPRITE">0</title>
              <title name="VALUE">Studio.SpriteSpeed.FAST</title>
            </block></xml>
      courseC_PlayLab_events_challenge1_2019:
        courseC_PlayLab_events_challenge_a: |-
          You can use this block to move actors to different places on the game space.

          <xml> <block type="studio_setSpritePosition">
              <title name="SPRITE">0</title>
              <title name="VALUE">12</title>
            </block></xml>
        courseC_PlayLab_events_challenge_b: Try using `set actor 1 to the middle left
          position` when it touches either of the other actors. This will reset the
          game so the player can keep trying!
        courseC_PlayLab_events_challenge_c: |-
          You might also want to try changing the speed of the different actors to make the game easier or more challenging!

          <xml>  <block type="studio_setSpriteSpeed">
              <title name="SPRITE">0</title>
              <title name="VALUE">Studio.SpriteSpeed.FAST</title>
            </block></xml>
      courseC_artist_loop1:
        courseC_artist_loop1_a: Nie musisz nic w tej pętli zmieniać, wystarczy, że
          umieścisz nad nią jeden blok.
        courseC_artist_loop1_b: |-
          This is the block you will need to set a pattern:

          <xml>
          <block type="draw_line_style_pattern">
              <title name="VALUE">DEFAULT</title>
            </block>
          </xml>

          Choose any pattern you like!
      courseC_artist_loop1_2018:
        courseC_artist_loop1_a: Nie musisz nic w tej pętli zmieniać, wystarczy, że
          umieścisz nad nią jeden blok.
        courseC_artist_loop1_b: |-
          This is the block you will need to set a pattern:

          <xml>
          <block type="draw_line_style_pattern">
              <title name="VALUE">DEFAULT</title>
            </block>
          </xml>

          Choose any pattern you like!
      courseC_artist_loop1_2019:
        courseC_artist_loop1_a: Nie musisz nic w tej pętli zmieniać, wystarczy, że
          umieścisz nad nią jeden blok.
        courseC_artist_loop1_b: |-
          This is the block you will need to set a pattern:

          <xml>
          <block type="draw_line_style_pattern">
              <title name="VALUE">DEFAULT</title>
            </block>
          </xml>

          Choose any pattern you like!
      courseC_artist_loops1a:
        courseC_artist_loops1a_a: |-
          This is the first block you will need:

          <xml>
          <block type="jump_to_xy">
              <title name="XPOS">200</title>
              <title name="YPOS">200</title>
            </block>
          </xml>
        courseC_artist_loops1a_b: |-
          Use this block to draw the sticker!

          <xml>
          <block type="sticker">
              <title name="VALUE">Bird</title>
            </block>
          </xml>
      courseC_artist_loops1a_2018:
        courseC_artist_loops1a_a: |-
          This is the first block you will need:

          <xml>
          <block type="jump_to_xy">
              <title name="XPOS">200</title>
              <title name="YPOS">200</title>
            </block>
          </xml>
        courseC_artist_loops1a_b: |-
          Use this block to draw the sticker!

          <xml>
          <block type="sticker">
              <title name="VALUE">Bird</title>
            </block>
          </xml>
      courseC_artist_loops1a_2019:
        courseC_artist_loops1a_a: |-
          This is the first block you will need:

          <xml>
            <block type="jump_to">
              <title name="VALUE">13</title>
            </block>
          </xml>
        courseC_artist_loops1a_b: |-
          Use this block to draw the sticker!

          <xml>
          <block type="sticker">
              <title name="VALUE">Bird</title>
            </block>
          </xml>
      courseC_artist_loops1b_2019:
        courseC_artist_loops1b_a: |-
          This is the first block you will need:

          <xml>
            <block type="draw_turn_by_constant_dropdown">
              <title name="DIR">???</title>
              <title name="VALUE" config="45,60,90,120,180">???</title>
            </block>
          </xml>

          You can choose either left or right and any number of degrees.
      courseC_artist_loops2a:
        courseC_artist_loops2a_a: Inside your loop, you will want to jump to 200 over
          200 down, then draw the bird sticker, then turn 30 degrees.
        courseC_artist_loops2a_b: Naciśnij na numer na górze pętli `repeat` aby zmienić
          ilość jej powtórzeń.
      courseC_artist_loops2a_2018:
        courseC_artist_loops2a_a: Inside your loop, you will want to jump to 200 over
          200 down, then draw the bird sticker, then turn 30 degrees.
        courseC_artist_loops2a_b: Naciśnij na numer na górze pętli `repeat` aby zmienić
          ilość jej powtórzeń.
      courseC_artist_loops2a_2019:
        courseC_artist_loops2a_a: Inside your loop, you will want to jump to the middle,
          then turn, then draw a sticker.
        courseC_artist_loops2a_b: Naciśnij na numer na górze pętli `repeat` aby zmienić
          ilość jej powtórzeń.
      courseC_artist_loops3a:
        courseC_artist_loops3a_a: You will want to add just one block inside of your
          loop, after the bird sticker.
        courseC_artist_loops3a_b: Use the drop down menu on the `draw sticker` block
          to find the bat sticker.
      courseC_artist_loops3a_2018:
        courseC_artist_loops3a_a: You will want to add just one block inside of your
          loop, after the bird sticker.
        courseC_artist_loops3a_b: Use the drop down menu on the `draw sticker` block
          to find the bat sticker.
      courseC_artist_loops3a_2019:
        courseC_artist_loops3a_a: You will want to add just one block inside of your
          loop, after the first sticker.
        courseC_artist_loops3a_b: |-
          Your program should look like this!

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat">
                  <title name="TIMES">???</title>
                  <statement name="DO">
                    <block type="jump_to">
                      <title name="VALUE">13</title>
                      <next>
                        <block type="draw_turn_by_constant_dropdown">
                          <title name="DIR">???</title>
                          <title name="VALUE" config="1,2,5,10,12,20,30,45,60,90,120,180">???</title>
                          <next>
                            <block type="sticker">
                              <title name="VALUE">Cat</title>
                              <next>
                                <block type="sticker">
                                  <title name="VALUE">Dog</title>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
          </xml>

          You can use any stickers you like!
      courseC_artist_loops4a:
        courseC_artist_loops4a_a: |-
          Use this block to jump forward:

          <xml>
          <block type="jump_by_constant">
              <title name="DIR">jumpForward</title>
              <title name="VALUE">100</title>
            </block>
          </xml>

          Don't forget to change how far!
      courseC_artist_loops4a_2018:
        courseC_artist_loops4a_a: |-
          Use this block to jump forward:

          <xml>
          <block type="jump_by_constant">
              <title name="DIR">jumpForward</title>
              <title name="VALUE">100</title>
            </block>
          </xml>

          Don't forget to change how far!
      courseC_artist_loops4a_2019:
        courseC_artist_loops4a_a: |-
          Use this block to jump forward:

          <xml>
          <block type="jump_by_constant">
              <title name="DIR">jumpForward</title>
              <title name="VALUE">???</title>
            </block>
          </xml>

          Don't forget to change how far!
        courseC_artist_loops4a_b: |-
          Your program should look like this!

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat">
                  <title name="TIMES">???</title>
                  <statement name="DO">
                    <block type="jump_to">
                      <title name="VALUE">13</title>
                      <next>
                        <block type="draw_turn_by_constant_dropdown">
                          <title name="DIR">???</title>
                          <title name="VALUE" config="1,2,5,10,12,20,30,45,60,90,120,180">???</title>
                          <next>
                            <block type="sticker">
                              <title name="VALUE">Cat</title>
                              <next>
                                <block type="jump_by_constant">
                                  <title name="DIR">jumpForward</title>
                                  <title name="VALUE">???</title>
                                  <next>
                                    <block type="sticker">
                                      <title name="VALUE">Dog</title>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
          </xml>
      courseC_artist_loops5a:
        courseC_artist_loops5a_a: Use the drop down menus on the `draw sticker` blocks
          to change their images.
      courseC_artist_loops5a_2018:
        courseC_artist_loops5a_a: Use the drop down menus on the `draw sticker` blocks
          to change their images.
      courseC_artist_loops5a_2019:
        courseC_artist_loops5a_a: Use the drop down menus on the `draw sticker` blocks
          to change their images.
      courseC_artist_loops5b:
        courseC_artist_loops5b_a: |-
          Use this block to set the pattern of your lines:

          <xml>
          <block type="draw_line_style_pattern">
              <title name="VALUE">DEFAULT</title>
            </block>
          </xml>
        courseC_artist_loops5b_b: Aby zrobić wzór podobny do powyższego, musisz poruszać
          się do przodu i do tyłu o taką samą odległość.
      courseC_artist_loops5b_2018:
        courseC_artist_loops5b_a: |-
          Use this block to set the pattern of your lines:

          <xml>
          <block type="draw_line_style_pattern">
              <title name="VALUE">DEFAULT</title>
            </block>
          </xml>
        courseC_artist_loops5b_b: Aby zrobić wzór podobny do powyższego, musisz poruszać
          się do przodu i do tyłu o taką samą odległość.
      courseC_artist_loops5b_2019:
        courseC_artist_loops5b_a: |-
          Use this block to set the pattern of your lines:

          <xml>
          <block type="draw_line_style_pattern">
              <title name="VALUE">DEFAULT</title>
            </block>
          </xml>
        courseC_artist_loops5b_b: Aby zrobić wzór podobny do powyższego, musisz poruszać
          się do przodu i do tyłu o taką samą odległość.
        courseC_artist_loops5b_c: |-
          Your program should look like this!

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_line_style_pattern">
                  <title name="VALUE">rainbowLine</title>
                  <next>
                    <block type="controls_repeat">
                      <title name="TIMES">4</title>
                      <statement name="DO">
                        <block type="jump_to">
                          <title name="VALUE">13</title>
                          <next>
                            <block type="draw_move_by_constant">
                              <title name="DIR">moveForward</title>
                              <title name="VALUE">???</title>
                              <next>
                                <block type="draw_move_by_constant">
                                  <title name="DIR">moveBackward</title>
                                  <title name="VALUE">???</title>
                                  <next>
                                    <block type="draw_turn_by_constant_dropdown">
                                      <title name="DIR">???</title>
                                      <title name="VALUE" config="1,2,5,10,12,20,30,45,60,90,120,180">???</title>
                                      <next>
                                        <block type="sticker">
                                          <title name="VALUE">Cat</title>
                                          <next>
                                            <block type="jump_by_constant">
                                              <title name="DIR">jumpForward</title>
                                              <title name="VALUE">???</title>
                                              <next>
                                                <block type="sticker">
                                                  <title name="VALUE">Dog</title>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseC_artist_loops6a:
        courseC_artist_loops6a_a: To make a design like the one above, jump forward
          less than 75 pixels between each sticker.
      courseC_artist_loops6a_2018:
        courseC_artist_loops6a_a: To make a design like the one above, jump forward
          less than 75 pixels between each sticker.
      courseC_artist_loops6a_2019:
        courseC_artist_loops6a_a: To make a design like the one above, jump forward
          less than 75 pixels between each sticker.
      courseC_artist_loops7a:
        courseC_artist_loops7a_a: |-
          A circle has 360 degrees. Multiply the degrees in your turn times the number of times you repeat. Does it equal 360?
          Check the suggested rotations to see that this works!
      courseC_artist_loops7a_2018:
        courseC_artist_loops7a_a: |-
          A circle has 360 degrees. Multiply the degrees in your turn times the number of times you repeat. Does it equal 360?
          Check the suggested rotations to see that this works!
      courseC_artist_loops7a_2019:
        courseC_artist_loops7a_a: |-
          A circle has 360 degrees. Multiply the degrees in your turn times the number of times you repeat. Does it equal 360?
          Check the suggested rotations to see that this works!
      courseC_artist_loopsPre1a:
        courseC_artist_loopsPre1a_a: Pamiętaj o umieszczeniu wewnątrz pętli bloku
          `turn`.
        courseC_artist_loopsPre1a_b: 'Your `repeat` loop should have 3 blocks inside
          of it: `jump to 200 over 200 down`, `move forward by 50 pixels`, and `turn
          right by 60 degrees`.'
      courseC_artist_loopsPre1a_2018:
        courseC_artist_loopsPre1a_a: Pamiętaj o umieszczeniu wewnątrz pętli bloku
          `turn`.
        courseC_artist_loopsPre1a_b: 'Your `repeat` loop should have 3 blocks inside
          of it: `jump to 200 over 200 down`, `move forward by 50 pixels`, and `turn
          right by 60 degrees`.'
      courseC_artist_loopsPre1a_2019:
        courseC_artist_loopsPre1a_a: Pamiętaj o umieszczeniu wewnątrz pętli bloku
          `turn`.
        courseC_artist_loopsPre1a_b: 'Your `repeat` loop should have 3 blocks inside
          of it: `jump to 200 over 200 down`, `move forward by 50 pixels`, and `turn
          right by 60 degrees`.'
      courseC_artist_loopsPrePre1a:
        courseC_artist_loopsPrePre1a_a: |-
          The first block you will need is:

          ![](<https://images.code.org/60e3354a2e7dd37b64833eac1e8694be-image-1499710228373.08.14 AM.png>)
        courseC_artist_loopsPrePre1a_b: |-
          To move forward 50 pixels, use this block:

          ![](<https://images.code.org/411fca4606a09641e6eedf5069ac4efa-image-1499710237929.08.27 AM.png>)
      courseC_artist_loopsPrePre1a_2018:
        courseC_artist_loopsPrePre1a_a: |-
          The first block you will need is:

          <xml>  <block type="jump_to_xy" id="callMe">
              <title name="XPOS">200</title>
              <title name="YPOS">200</title>
            </block></xml>
        courseC_artist_loopsPrePre1a_b: |-
          To move forward 50 pixels, use this block:

          <xml><block type="draw_move_by_constant">
              <title name="DIR">moveForward</title>
              <title name="VALUE">50</title>
            </block></xml>
      courseC_artist_loopsPrePre1a_2019:
        courseC_artist_loopsPrePre1a_a: |-
          The first block you will need is:

          <xml>  <block type="jump_to_xy" id="callMe">
              <title name="XPOS">200</title>
              <title name="YPOS">200</title>
            </block></xml>
        courseC_artist_loopsPrePre1a_b: |-
          To move forward 50 pixels, use this block:

          <xml><block type="draw_move_by_constant">
              <title name="DIR">moveForward</title>
              <title name="VALUE">50</title>
            </block></xml>
      courseC_artist_prog2:
        courseC_artist_prog2_a: Jeżeli użyjesz bloku "idź do przodu o 100 pikseli",
          narysuję linię automatycznie.
        courseC_artist_prog2_b: Masz problem z zakrętem? Użyj bloku "skręć w prawo
          o 90 stopni".
      courseC_artist_prog2_2018:
        courseC_artist_prog2_a: Jeżeli użyjesz bloku "idź do przodu o 100 pikseli",
          narysuję linię automatycznie.
        courseC_artist_prog2_b: Masz problem z zakrętem? Użyj bloku "skręć w prawo
          o 90 stopni".
      courseC_artist_prog2_2019:
        courseC_artist_prog2_a: Jeżeli użyjesz bloku "idź do przodu o 100 pikseli",
          narysuję linię automatycznie.
        courseC_artist_prog2_b: Masz problem z zakrętem? Użyj bloku "skręć w prawo
          o 90 stopni".
      courseC_artist_prog3:
        courseC_artist_prog3_a: |-
          To create this window, just draw a square with 100 pixel sides.

          -   move forward
          -   turn
          -   move forward
          -   turn
          -   move forward
          -   turn
          -   move forward
        courseC_artist_prog3_b: Want to make shorter code? Try using a loop in this
          puzzle.
      courseC_artist_prog3_2018:
        courseC_artist_prog3_a: |-
          To create this window, just draw a square with 100 pixel sides.

          -   move forward
          -   turn
          -   move forward
          -   turn
          -   move forward
          -   turn
          -   move forward
        courseC_artist_prog3_b: Want to make shorter code? Try using a loop in this
          puzzle.
      courseC_artist_prog3_2019:
        courseC_artist_prog3_a: |-
          To create this window, just draw a square with 100 pixel sides.

          -   move forward
          -   turn
          -   move forward
          -   turn
          -   move forward
          -   turn
          -   move forward
        courseC_artist_prog3_b: Want to make shorter code? Try using a loop in this
          puzzle.
      courseC_artist_prog4:
        courseC_artist_prog4_a: To finish the rocket, just draw the triangle on top!
        courseC_artist_prog4_b: You can use the drop down menu on the `turn` blocks
          to see which angle you need!
        courseC_artist_prog4_c: |-
          To draw a triangle, you will want to:

          -   move forward
          -   turn left 120 degrees
          -   move forward
          -   turn left 120 degrees
          -   move forward
      courseC_artist_prog4_2018:
        courseC_artist_prog4_a: To finish the rocket, just draw the triangle on top!
        courseC_artist_prog4_b: You can use the drop down menu on the `turn` blocks
          to see which angle you need!
        courseC_artist_prog4_c: |-
          To draw a triangle, you will want to:

          -   move forward
          -   turn left 120 degrees
          -   move forward
          -   turn left 120 degrees
          -   move forward
      courseC_artist_prog4_2019:
        courseC_artist_prog4_a: To finish the rocket, just draw the triangle on top!
        courseC_artist_prog4_b: You can use the drop down menu on the `turn` blocks
          to see which angle you need!
        courseC_artist_prog4_c: |-
          To draw a triangle, you will want to:

          -   move forward
          -   turn left 120 degrees
          -   move forward
          -   turn left 120 degrees
          -   move forward
      courseC_artist_prog5:
        courseC_artist_prog5_a: Slow the slider down all the way until you can run
          your code line-by-line to see where things go wrong.
        courseC_artist_prog5_b: Don't be afraid to make a mistake! Try adding blocks
          and running the code to see what will happen, even if you don't think you've
          solved the puzzle yet.
        courseC_artist_prog5_c: You can use the drop down menu on the `turn` blocks
          to see which angle you need!
        courseC_artist_prog5_d: Each turn should be 90 degrees to the right.
      courseC_artist_prog5_2018:
        courseC_artist_prog5_a: Slow the slider down all the way until you can run
          your code line-by-line to see where things go wrong.
        courseC_artist_prog5_b: Don't be afraid to make a mistake! Try adding blocks
          and running the code to see what will happen, even if you don't think you've
          solved the puzzle yet.
        courseC_artist_prog5_c: You can use the drop down menus in the blocks to change
          what they do!
        courseC_artist_prog5_d: Each turn should be 90 degrees to the right.
      courseC_artist_prog5_2019:
        courseC_artist_prog5_a: Slow the slider down all the way until you can run
          your code line-by-line to see where things go wrong.
        courseC_artist_prog5_b: Don't be afraid to make a mistake! Try adding blocks
          and running the code to see what will happen, even if you don't think you've
          solved the puzzle yet.
        courseC_artist_prog5_c: You can use the drop down menus in the blocks to change
          what they do!
        courseC_artist_prog5_d: Each turn should be 90 degrees to the right.
      courseC_artist_prog6:
        courseC_artist_prog6_a: The artist is already facing the correct way to draw
          his first line.
        courseC_artist_prog6_b: This diamond is really just a square that's standing
          on its corner.
        courseC_artist_prog6_c: Since this diamond is also a square, be sure to turn
          90 degrees at the corners.
      courseC_artist_prog6_2018:
        courseC_artist_prog6_a: The artist is already facing the correct way to draw
          his first line.
        courseC_artist_prog6_b: This diamond is really just a square that's standing
          on its corner.
        courseC_artist_prog6_c: Since this diamond is also a square, be sure to turn
          90 degrees at the corners.
      courseC_artist_prog6_2019:
        courseC_artist_prog6_a: The artist is already facing the correct way to draw
          his first line.
        courseC_artist_prog6_b: This diamond is really just a square that's standing
          on its corner.
        courseC_artist_prog6_c: Since this diamond is also a square, be sure to turn
          90 degrees at the corners.
      courseC_artist_prog7:
        courseC_artist_prog7_a: Every angle is either 45 or 90 degrees.
        courseC_artist_prog7_b: |-
          Does it work at the first step?\
          How about the second?\
          Where does it go wrong?
        courseC_artist_prog7_c: You can use the dropdown menu on the turn blocks to
          see which angle you need!
        courseC_artist_prog7_d: |-
          You will want to:

          -   move forward
          -   turn right 45 degrees
          -   move forward
          -   turn right 90 degrees
          -   move forward
          -   turn right 45 degrees

          Repeat this pattern 2 times!
        courseC_artist_prog7_e: Don't be afraid to make a mistake! Try adding blocks
          and running the code to see what will happen, even if you don't think you've
          solved the puzzle yet.
      courseC_artist_prog7_2018:
        courseC_artist_prog7_a: Every angle is either 45 or 90 degrees.
        courseC_artist_prog7_b: |-
          Does it work at the first step?\
          How about the second?\
          Where does it go wrong?
        courseC_artist_prog7_c: You can use the dropdown menu on the turn blocks to
          see which angle you need!
        courseC_artist_prog7_d: |-
          You will want to:

          -   move forward
          -   turn right 45 degrees
          -   move forward
          -   turn right 90 degrees
          -   move forward
          -   turn right 45 degrees

          Repeat this pattern 2 times!
        courseC_artist_prog7_e: Don't be afraid to make a mistake! Try adding blocks
          and running the code to see what will happen, even if you don't think you've
          solved the puzzle yet.
      courseC_artist_prog7_2019:
        courseC_artist_prog7_a: Every angle is either 45 or 90 degrees.
        courseC_artist_prog7_b: |-
          Does it work at the first step?\
          How about the second?\
          Where does it go wrong?
        courseC_artist_prog7_c: You can use the dropdown menu on the turn blocks to
          see which angle you need!
        courseC_artist_prog7_d: |-
          You will want to:

          -   move forward
          -   turn right 45 degrees
          -   move forward
          -   turn right 90 degrees
          -   move forward
          -   turn right 45 degrees

          Repeat this pattern 2 times!
        courseC_artist_prog7_e: Don't be afraid to make a mistake! Try adding blocks
          and running the code to see what will happen, even if you don't think you've
          solved the puzzle yet.
      courseC_artist_prog_challenge1:
        courseC_artist_prog_challenge1_a: You can draw this as a rectangle with a
          line in the middle or two different squares!
      courseC_artist_prog_challenge1_2018:
        courseC_artist_prog_challenge1_a: You can draw this as a rectangle with a
          line in the middle or two different squares!
      courseC_artist_prog_challenge1_2019:
        courseC_artist_prog_challenge1_a: You can draw this as a rectangle with a
          line in the middle or two different squares!
      courseC_artist_prog_challenge2a:
        courseC_artist_prog_challenge2_a: Po narysowaniu pierwszej linii, obróć się
          w lewo zanim narysujesz drugą linię.
        courseC_artist_prog_challenge2_b: Po narysowaniu drugiej linii, obróć się
          w prawo zanim narysujesz 3 linię.
      courseC_artist_prog_challenge2a_2018:
        courseC_artist_prog_challenge2_a: Po narysowaniu pierwszej linii, obróć się
          w lewo zanim narysujesz drugą linię.
        courseC_artist_prog_challenge2_b: Po narysowaniu drugiej linii, obróć się
          w prawo zanim narysujesz 3 linię.
      courseC_artist_prog_challenge2a_2019:
        courseC_artist_prog_challenge2_a: Po narysowaniu pierwszej linii, obróć się
          w lewo zanim narysujesz drugą linię.
        courseC_artist_prog_challenge2_b: Po narysowaniu drugiej linii, obróć się
          w prawo zanim narysujesz 3 linię.
      courseC_collector_loops_challenge2:
        courseC_maze_loops_challenge2_b: Use loops so you don't run out of `collect`
          blocks!
      courseC_collector_loops_challenge2_2018:
        courseC_maze_loops_challenge2_b: Use loops so you don't run out of `collect`
          blocks!
      courseC_collector_loops_challenge2_2019:
        courseC_maze_loops_challenge2_b: Use loops so you don't run out of `collect`
          blocks!
      courseC_collector_prog1:
        courseC_collector_prog1_a: Kiedy stoisz w pewnej odległości od skarbu, użyj
          bloku <xml><block type="collector_collect"/></xml> aby go podnieść.
        courseC_collector_prog1_b: The most simple solution would be to move forward
          once, then collect treasure.
      courseC_collector_prog1_2018:
        courseC_collector_prog1_a: Kiedy stoisz w pewnej odległości od skarbu, użyj
          bloku <xml><block type="collector_collect"/></xml> aby go podnieść.
        courseC_collector_prog1_b: The most simple solution would be to move forward
          once, then collect treasure.
      courseC_collector_prog1_2019:
        courseC_collector_prog1_a: Kiedy stoisz w pewnej odległości od skarbu, użyj
          bloku <xml><block type="collector_collect"/></xml> aby go podnieść.
        courseC_collector_prog1_b: The most simple solution would be to move forward
          once, then collect treasure.
      courseC_collector_prog2:
        courseC_collector_prog2_a: You can use four <xml><block type="maze_move"><title
          name="DIR">moveForward</title></block></xml> blocks or use the <xml><block
          type="controls_repeat_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
          block to make your program shorter.
        courseC_collector_prog2_b: Don't be afraid to make a mistake! Try adding blocks
          and running the code to see what will happen, even if you don't think you've
          solved the puzzle yet.
      courseC_collector_prog2_2018:
        courseC_collector_prog2_a: You can use four <xml><block type="maze_move"><title
          name="DIR">moveForward</title></block></xml> blocks or use the <xml><block
          type="controls_repeat_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
          block to make your program shorter.
        courseC_collector_prog2_b: Don't be afraid to make a mistake! Try adding blocks
          and running the code to see what will happen, even if you don't think you've
          solved the puzzle yet.
      courseC_collector_prog2_2019:
        courseC_collector_prog2_a: You can use four <xml><block type="maze_move"><title
          name="DIR">moveForward</title></block></xml> blocks or use the <xml><block
          type="controls_repeat_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
          block to make your program shorter.
        courseC_collector_prog2_b: Don't be afraid to make a mistake! Try adding blocks
          and running the code to see what will happen, even if you don't think you've
          solved the puzzle yet.
      courseC_collector_prog3:
        courseC_collector_prog3_a: The program will only run the blocks that are connected
          to the <xml><block type="when_run"/></xml> block.
        courseC_collector_prog3_b: Try using the "Step" button to run your code one
          line at a time.  Do you see where the code goes wrong?
        courseC_collector_prog3_c: Jeśli masz problemy z rozszyfrowaniem tej łamigłówki,
          spróbuj zapisać ruchy na kartce papieru.
      courseC_collector_prog3_2018:
        courseC_collector_prog3_a: The program will only run the blocks that are connected
          to the <xml><block type="when_run"/></xml> block.
        courseC_collector_prog3_b: Try using the "Step" button to run your code one
          line at a time.  Do you see where the code goes wrong?
        courseC_collector_prog3_c: Jeśli masz problemy z rozszyfrowaniem tej łamigłówki,
          spróbuj zapisać ruchy na kartce papieru.
      courseC_collector_prog3_2019:
        courseC_collector_prog3_a: The program will only run the blocks that are connected
          to the <xml><block type="when_run"/></xml> block.
        courseC_collector_prog3_b: Try using the "Step" button to run your code one
          line at a time.  Do you see where the code goes wrong?
        courseC_collector_prog3_c: Jeśli masz problemy z rozszyfrowaniem tej łamigłówki,
          spróbuj zapisać ruchy na kartce papieru.
      courseC_collector_prog4:
        courseC_collector_prog4_a: If you get stuck, try writing out the steps on
          a piece of paper.
        courseC_collector_prog4_b: Don't be afraid to make a mistake! Try adding blocks
          and running the code to see what will happen, even if you don't think you've
          solved the puzzle yet.
        courseC_collector_prog4_c: Try this option for a path.
      courseC_collector_prog4_2018:
        courseC_collector_prog4_a: If you get stuck, try writing out the steps on
          a piece of paper.
        courseC_collector_prog4_b: Don't be afraid to make a mistake! Try adding blocks
          and running the code to see what will happen, even if you don't think you've
          solved the puzzle yet.
        courseC_collector_prog4_c: Try this option for a path.
      courseC_collector_prog4_2019:
        courseC_collector_prog4_a: If you get stuck, try writing out the steps on
          a piece of paper.
        courseC_collector_prog4_b: Don't be afraid to make a mistake! Try adding blocks
          and running the code to see what will happen, even if you don't think you've
          solved the puzzle yet.
        courseC_collector_prog4_c: Try this option for a path.
      courseC_collector_prog5:
        courseC_collector_prog5_a: "\"Does it work at the first step?\nDoes it work
          at the second step? \nWhere do things go wrong?\""
        courseC_collector_prog5_b: If you fixed one bug and the program still doesn't
          work, use the steps above to find more bugs.
        courseC_collector_prog5_c: If you get stuck, try writing out the steps on
          a piece of paper.
        courseC_collector_prog5_d: Follow the path to collect the treasure.
      courseC_collector_prog5_2018:
        courseC_collector_prog5_a: "\"Does it work at the first step?\nDoes it work
          at the second step? \nWhere do things go wrong?\""
        courseC_collector_prog5_b: If you fixed one bug and the program still doesn't
          work, use the steps above to find more bugs.
        courseC_collector_prog5_c: If you get stuck, try writing out the steps on
          a piece of paper.
        courseC_collector_prog5_d: Follow the path to collect the treasure.
      courseC_collector_prog5_2019:
        courseC_collector_prog5_a: "\"Does it work at the first step?\nDoes it work
          at the second step? \nWhere do things go wrong?\""
        courseC_collector_prog5_b: If you fixed one bug and the program still doesn't
          work, use the steps above to find more bugs.
        courseC_collector_prog5_c: If you get stuck, try writing out the steps on
          a piece of paper.
        courseC_collector_prog5_d: Follow the path to collect the treasure.
      courseC_collector_prog6:
        courseC_collector_prog6_a: "Can you figure out what is going wrong?  \n\nTry
          using the \"Step\" button to find errors by running your code line by line."
        courseC_collector_prog6_b: Stuck?  Try this path to collect the treasure.
      courseC_collector_prog6_2018:
        courseC_collector_prog6_a: "Can you figure out what is going wrong?  \n\nTry
          using the \"Step\" button to find errors by running your code line by line."
        courseC_collector_prog6_b: Stuck?  Try this path to collect the treasure.
      courseC_collector_prog6_2019:
        courseC_collector_prog6_a: "Can you figure out what is going wrong?  \n\nTry
          using the \"Step\" button to find errors by running your code line by line."
        courseC_collector_prog6_b: Stuck?  Try this path to collect the treasure.
      courseC_collector_prog7:
        courseC_collector_prog7_a: 'There is already a lot of great code in the workspace.  You
          don''t need to delete any of it to solve this puzzle.  '
        courseC_collector_prog7_b: Don't see the block you need to get the adventurer
          moving in the right direction?  Pull one from the toolbox.
        courseC_collector_prog7_c: Having trouble seeing a route to collect all of
          the treasure?  Try this path!
      courseC_collector_prog7_2018:
        courseC_collector_prog7_a: 'There is already a lot of great code in the workspace.  You
          don''t need to delete any of it to solve this puzzle.  '
        courseC_collector_prog7_b: Don't see the block you need to get the adventurer
          moving in the right direction?  Pull one from the toolbox.
        courseC_collector_prog7_c: Having trouble seeing a route to collect all of
          the treasure?  Try this path!
      courseC_collector_prog7_2019:
        courseC_collector_prog7_a: 'There is already a lot of great code in the workspace.  You
          don''t need to delete any of it to solve this puzzle.  '
        courseC_collector_prog7_b: Don't see the block you need to get the adventurer
          moving in the right direction?  Pull one from the toolbox.
        courseC_collector_prog7_c: Having trouble seeing a route to collect all of
          the treasure?  Try this path!
      courseC_collector_prog_challenge1:
        courseC_collector_prog_challenge1_a: Używaj komendy `collect` częściej aby
          zebrać dodatkowy skarb.
      courseC_collector_prog_challenge1_2018:
        courseC_collector_prog_challenge1_a: Używaj komendy `collect` częściej aby
          zebrać dodatkowy skarb.
      courseC_collector_prog_challenge1_2019:
        courseC_collector_prog_challenge1_a: Używaj komendy `collect` częściej aby
          zebrać dodatkowy skarb.
      courseC_collector_prog_challenge2:
        courseC_collector_prog_challenge1_a: You can use more than one `collect` block
          at each space.
        courseC_collector_prog_challenge1_b: Zgubiłeś się? Spróbuj tej ścieżki aby
          rozwiązać zagadkę!
      courseC_collector_prog_challenge2_2018:
        courseC_collector_prog_challenge1_a: You can use more than one `collect` block
          at each space.
        courseC_collector_prog_challenge1_b: Zgubiłeś się? Spróbuj tej ścieżki aby
          rozwiązać zagadkę!
      courseC_collector_prog_challenge2_2019:
        courseC_collector_prog_challenge1_a: You can use more than one `collect` block
          at each space.
        courseC_collector_prog_challenge1_b: Zgubiłeś się? Spróbuj tej ścieżki aby
          rozwiązać zagadkę!
      courseC_flappy_events1:
        courseC_flappy_events1_a: "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
      courseC_flappy_events1_2018:
        courseC_flappy_events1_a: "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
      courseC_flappy_events1_2019:
        courseC_flappy_events1_a: "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
      courseC_flappy_events2:
        courseC_flappy_events2_a: 'Blok, który musisz dodać nazywa się `set speed`. '
        courseC_flappy_events2_b: Połącz blok `set speed` z blokiem `when run`, aby
          rozwiązać zagadkę.
      courseC_flappy_events2_2018:
        courseC_flappy_events2_a: 'Blok, który musisz dodać nazywa się `set speed`. '
        courseC_flappy_events2_b: Połącz blok `set speed` z blokiem `when run`, aby
          rozwiązać zagadkę.
      courseC_flappy_events2_2019:
        courseC_flappy_events2_a: 'Blok, który musisz dodać nazywa się `set speed`. '
        courseC_flappy_events2_b: Połącz blok `set speed` z blokiem `when run`, aby
          rozwiązać zagadkę.
      courseC_flappy_events3:
        courseC_flappy_events3_a: Jeśli coś nie działa prawidłowo, upewnij się, że
          bloki połączone są z odpowiednimi zdarzeniami w przestrzeni roboczej.
      courseC_flappy_events3_2018:
        courseC_flappy_events3_a: Jeśli coś nie działa prawidłowo, upewnij się, że
          bloki połączone są z odpowiednimi zdarzeniami w przestrzeni roboczej.
      courseC_flappy_events3_2019:
        courseC_flappy_events3_a: Jeśli coś nie działa prawidłowo, upewnij się, że
          bloki połączone są z odpowiednimi zdarzeniami w przestrzeni roboczej.
      courseC_flappy_events4:
        courseC_flappy_events4_a: Connect the `end game` block to `when hit an obstacle`
          to solve this puzzle.
      courseC_flappy_events4_2018:
        courseC_flappy_events4_a: Connect the `end game` block to `when hit an obstacle`
          to solve this puzzle.
      courseC_flappy_events4_2019:
        courseC_flappy_events4_a: Connect the `end game` block to `when hit an obstacle`
          to solve this puzzle.
      courseC_flappy_events5:
        courseC_flappy_events5_a: Musisz użyć bloku `score a point` aby przejść ten
          poziom.
      courseC_flappy_events5_2018:
        courseC_flappy_events5_a: Musisz użyć bloku `score a point` aby przejść ten
          poziom.
      courseC_flappy_events5_2019:
        courseC_flappy_events5_a: Musisz użyć bloku `score a point` aby przejść ten
          poziom.
      courseC_flappy_events6:
        courseC_flappy_events6_a: Try connecting the `flap a ____ amount` block to
          the `when click` event.
      courseC_flappy_events6_2018:
        courseC_flappy_events6_a: Try connecting the `flap a ____ amount` block to
          the `when click` event.
      courseC_flappy_events6_2019:
        courseC_flappy_events6_a: Try connecting the `flap a ____ amount` block to
          the `when click` event.
      courseC_flappy_events7:
        courseC_flappy_events7_a: 'Możesz zmienić tło używając bloku `set scene`. '
      courseC_flappy_events7_2018:
        courseC_flappy_events7_a: 'Możesz zmienić tło używając bloku `set scene`. '
      courseC_flappy_events7_2019:
        courseC_flappy_events7_a: 'Możesz zmienić tło używając bloku `set scene`. '
      courseC_flappy_events8:
        courseC_flappy_events8_a: Try connecting a second `set scene` block under
          the `when pass obstacle` event to pass this level.
      courseC_flappy_events8_2018:
        courseC_flappy_events8_a: Try connecting a second `set scene` block under
          the `when pass obstacle` event to pass this level.
      courseC_flappy_events8_2019:
        courseC_flappy_events8_a: Try connecting a second `set scene` block under
          the `when pass obstacle` event to pass this level.
      courseC_flappy_events9:
        courseC_flappy_events9_a: Connect the `set score 0` block to the `when hit
          an obstacle` event to pass this level.
      courseC_flappy_events9_2018:
        courseC_flappy_events9_a: Connect the `set score 0` block to the `when hit
          an obstacle` event to pass this level.
      courseC_flappy_events9_2019:
        courseC_flappy_events9_a: Connect the `set score 0` block to the `when hit
          an obstacle` event to pass this level.
      courseC_harvester_loops1:
        courseC_harvester_loops1_a: Once you have moved to a pumpkin, use <xml><block
          type="harvester_pumpkin"/></xml> to collect it.
        courseC_harvester_loops1_b: You can use a loop with the <xml><block type="harvester_pumpkin"/></xml>
          block to pick more than one pumpkin from a square.
      courseC_harvester_loops1_2018:
        courseC_harvester_loops1_a: Once you have moved to a pumpkin, use <xml><block
          type="harvester_pumpkin"/></xml> to collect it.
        courseC_harvester_loops1_b: You can use a loop with the <xml><block type="harvester_pumpkin"/></xml>
          block to pick more than one pumpkin from a square.
      courseC_harvester_loops1_2019:
        courseC_harvester_loops1_a: Once you have moved to a pumpkin, use <xml><block
          type="harvester_pumpkin"/></xml> to collect it.
        courseC_harvester_loops1_b: You can use a loop with the <xml><block type="harvester_pumpkin"/></xml>
          block to pick more than one pumpkin from a square.
      courseC_harvester_loops2:
        courseC_harvester_loops2_a: If you get stuck, try writing the steps on paper
          and looking for repeating patterns.
        courseC_harvester_loops2_b: You will need one `repeat` loop after another.
        courseC_harvester_loops2_c: Jedna pętla będzie powtarzać komendę `move forward`,
          a inna `pick pumpkin`.
      courseC_harvester_loops2_2018:
        courseC_harvester_loops2_a: If you get stuck, try writing the steps on paper
          and looking for repeating patterns.
        courseC_harvester_loops2_b: You will need one `repeat` loop after another.
        courseC_harvester_loops2_c: Jedna pętla będzie powtarzać komendę `move forward`,
          a inna `pick pumpkin`.
      courseC_harvester_loops2_2019:
        courseC_harvester_loops2_a: If you get stuck, try writing the steps on paper
          and looking for repeating patterns.
        courseC_harvester_loops2_b: You will need one `repeat` loop after another.
        courseC_harvester_loops2_c: Jedna pętla będzie powtarzać komendę `move forward`,
          a inna `pick pumpkin`.
      courseC_harvester_loops3:
        courseC_harvester_loops3_a: Don't be afraid to make a mistake! Try adding
          blocks and running the code to see what will happen, even if you haven't
          solved the puzzle yet.
        courseC_harvester_loops3_b: For the first pumpkins, you can use code very
          similar to the last puzzle. Which way do you need to turn afterwards?
        courseC_harvester_loops3_c: Jeśli chcesz uprościć swój kod, możesz umieścić
          jedną pętlę w drugiej! Nazywa się to **nested loop**.
      courseC_harvester_loops3_2018:
        courseC_harvester_loops3_a: Don't be afraid to make a mistake! Try adding
          blocks and running the code to see what will happen, even if you haven't
          solved the puzzle yet.
        courseC_harvester_loops3_b: For the first pumpkins, you can use code very
          similar to the last puzzle. Which way do you need to turn afterwards?
        courseC_harvester_loops3_c: Jeśli chcesz uprościć swój kod, możesz umieścić
          jedną pętlę w drugiej! Nazywa się to **nested loop**.
      courseC_harvester_loops3_2019:
        courseC_harvester_loops3_a: Don't be afraid to make a mistake! Try adding
          blocks and running the code to see what will happen, even if you haven't
          solved the puzzle yet.
        courseC_harvester_loops3_b: For the first pumpkins, you can use code very
          similar to the last puzzle. Which way do you need to turn afterwards?
        courseC_harvester_loops3_c: Jeśli chcesz uprościć swój kod, możesz umieścić
          jedną pętlę w drugiej! Nazywa się to **nested loop**.
      courseC_harvester_loops4:
        courseC_harvester_loops4_a: Użyj nowego bloku `pick corn` aby nazbierać kukurydzy.
        courseC_harvester_loops4_b: Możesz użyć kilku pętli powtarzających się w swoim
          kodzie, kilka do zbierania kukurydzy a inne do zbierania dyni.
        courseC_harvester_loops4_c: Jeśli chcesz uprościć swój kod, możesz umieścić
          jedną pętlę w drugiej! Nazywa się to **nested loop**.
      courseC_harvester_loops4_2018:
        courseC_harvester_loops4_a: Użyj nowego bloku `pick corn` aby nazbierać kukurydzy.
        courseC_harvester_loops4_b: Możesz użyć kilku pętli powtarzających się w swoim
          kodzie, kilka do zbierania kukurydzy a inne do zbierania dyni.
        courseC_harvester_loops4_c: Jeśli chcesz uprościć swój kod, możesz umieścić
          jedną pętlę w drugiej! Nazywa się to **nested loop**.
      courseC_harvester_loops4_2019:
        courseC_harvester_loops4_a: Użyj nowego bloku `pick corn` aby nazbierać kukurydzy.
        courseC_harvester_loops4_b: Możesz użyć kilku pętli powtarzających się w swoim
          kodzie, kilka do zbierania kukurydzy a inne do zbierania dyni.
        courseC_harvester_loops4_c: Jeśli chcesz uprościć swój kod, możesz umieścić
          jedną pętlę w drugiej! Nazywa się to **nested loop**.
      courseC_harvester_loops5:
        courseC_harvester_loops5_a: If you get stuck, try drawing the entire program
          and then looking for repeating patterns.
        courseC_harvester_loops5_b: Does this stair step look familiar from other
          puzzles? The movements should be similar, just remember to collect crops
          along the way.
      courseC_harvester_loops5_2018:
        courseC_harvester_loops5_a: If you get stuck, try drawing the entire program
          and then looking for repeating patterns.
        courseC_harvester_loops5_b: Does this stair step look familiar from other
          puzzles? The movements should be similar, just remember to collect crops
          along the way.
      courseC_harvester_loops5_2019:
        courseC_harvester_loops5_a: If you get stuck, try drawing the entire program
          and then looking for repeating patterns.
        courseC_harvester_loops5_b: Does this stair step look familiar from other
          puzzles? The movements should be similar, just remember to collect crops
          along the way.
      courseC_harvester_loops6:
        courseC_harvester_loops6_a: Remember you can put multiple blocks in one repeat
          loop.
        courseC_harvester_loops6_b: Don’t forget to turn at the end of the row of
          corn.
      courseC_harvester_loops6_2018:
        courseC_harvester_loops6_a: Remember you can put multiple blocks in one repeat
          loop.
        courseC_harvester_loops6_b: Don’t forget to turn at the end of the row of
          corn.
      courseC_harvester_loops6_2019:
        courseC_harvester_loops6_a: Remember you can put multiple blocks in one repeat
          loop.
        courseC_harvester_loops6_b: Don’t forget to turn at the end of the row of
          corn.
      courseC_harvester_loops7:
        courseC_harvester_loops7_a: You can solve this puzzle two ways, either get
          the corn or the pumpkins first.
        courseC_harvester_loops7_b: You will need multiple `repeat` loops to solve
          this puzzle.
      courseC_harvester_loops7_2018:
        courseC_harvester_loops7_a: You can solve this puzzle two ways, either get
          the corn or the pumpkins first.
        courseC_harvester_loops7_b: You will need multiple `repeat` loops to solve
          this puzzle.
      courseC_harvester_loops7_2019:
        courseC_harvester_loops7_a: You can solve this puzzle two ways, either get
          the corn or the pumpkins first.
        courseC_harvester_loops7_b: You will need multiple `repeat` loops to solve
          this puzzle.
      courseC_harvester_loops8:
        courseC_harvester_loops8_a: Czy ten stopień nie wygląda znajomo z poprzedniej
          zagadki? Ruchy powinny być podobne, pamiętaj tylko, aby zbierać plony po
          drodze.
        courseC_harvester_loops8_b: If you want to simplify your code more, you can
          actually put one `repeat` loop inside of another! This is called a **nested
          loop**.
      courseC_harvester_loops8_2018:
        courseC_harvester_loops8_a: Czy ten stopień nie wygląda znajomo z poprzedniej
          zagadki? Ruchy powinny być podobne, pamiętaj tylko, aby zbierać plony po
          drodze.
        courseC_harvester_loops8_b: If you want to simplify your code more, you can
          actually put one `repeat` loop inside of another! This is called a **nested
          loop**.
      courseC_harvester_loops8_2019:
        courseC_harvester_loops8_a: Czy ten stopień nie wygląda znajomo z poprzedniej
          zagadki? Ruchy powinny być podobne, pamiętaj tylko, aby zbierać plony po
          drodze.
        courseC_harvester_loops8_b: If you want to simplify your code more, you can
          actually put one `repeat` loop inside of another! This is called a **nested
          loop**.
      courseC_harvester_loops_challenge1a:
        courseC_harvester_loops_challenge1_a: To jest zbyt trudne bez pętel!
        courseC_harvester_loops_challenge1_b: You can repeat `move forward` and `pick
          corn` as many times as you need, then `turn right` at each corner.
        courseC_harvester_loops_challenge1_c: |-
          The best way to collect the corn in the middle uses a `repeat` block inside of another `repeat` block.

          <xml><block type="controls_repeat">
                  <title name="TIMES">2</title>
                  <statement name="DO">
                    <block type="controls_repeat">
                      <title name="TIMES">4</title>
                      <statement name="DO">
                        <block type="maze_move">
                          <title name="DIR">moveForward</title>
                          <next>
                            <block type="harvester_corn"/>
                          </next>
                        </block>
                      </statement>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                        </block>
                      </next>
                    </block>
                  </statement>
                  </block></xml>
      courseC_harvester_loops_challenge1a_2018:
        courseC_harvester_loops_challenge1_a: To jest zbyt trudne bez pętel!
        courseC_harvester_loops_challenge1_b: You can repeat `move forward` and `pick
          corn` as many times as you need, then `turn right` at each corner.
        courseC_harvester_loops_challenge1_c: |-
          After picking corn the first two times, you can use a nested loop to pick the next eight pieces.

          <xml><block type="controls_repeat">
                  <title name="TIMES">2</title>
                  <statement name="DO">
                    <block type="controls_repeat">
                      <title name="TIMES">4</title>
                      <statement name="DO">
                        <block type="maze_move">
                          <title name="DIR">moveForward</title>
                          <next>
                            <block type="harvester_corn"/>
                          </next>
                        </block>
                      </statement>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                        </block>
                      </next>
                    </block>
                  </statement>
                  </block></xml>
      courseC_harvester_loops_challenge1a_2019:
        courseC_harvester_loops_challenge1_a: To jest zbyt trudne bez pętel!
        courseC_harvester_loops_challenge1_b: You can repeat `move forward` and `pick
          corn` as many times as you need, then `turn right` at each corner.
        courseC_harvester_loops_challenge1_c: |-
          The best way to collect the corn in the middle uses a `repeat` block inside of another `repeat` block.

          <xml><block type="controls_repeat">
                  <title name="TIMES">2</title>
                  <statement name="DO">
                    <block type="controls_repeat">
                      <title name="TIMES">4</title>
                      <statement name="DO">
                        <block type="maze_move">
                          <title name="DIR">moveForward</title>
                          <next>
                            <block type="harvester_corn"/>
                          </next>
                        </block>
                      </statement>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                        </block>
                      </next>
                    </block>
                  </statement>
                  </block></xml>
      courseC_harvester_loops_challenge2:
        courseC_harvester_loops_challenge2_a: One way to solve this looks like a zig-zag.
          Another way looks like a spiral! There are lots of different solutions to
          a puzzle like this. Be persistent!
        courseC_harvester_loops_challenge2_b: You can repeat `move forward` and `pick
          lettuce` as many times as you need to, then turn at each corner.
        courseC_harvester_loops_challenge2_c: |-
          This zig-zag pattern can be repeated twice to finish the puzzle with just 20 blocks!

          ![](<https://images.code.org/26cfaf6fe4a275e266b51e9ef3711171-image-1493502306380.18.52 PM copy.png>)
        courseC_harvester_loops_challenge2_d: |-
          This spiral pattern can be coded with just 18 blocks!

          ![](<https://images.code.org/0bfc0a0ed6783fae908368a6e6d12c02-image-1493501358990.18.52 PM.png>)
      courseC_harvester_loops_challenge2_2018:
        courseC_harvester_loops_challenge2_a: One way to solve this looks like a zig-zag.
          Another way looks like a spiral! There are lots of different solutions to
          a puzzle like this. Be persistent!
        courseC_harvester_loops_challenge2_b: You can repeat `move forward` and `pick
          lettuce` as many times as you need to, then turn at each corner.
        courseC_harvester_loops_challenge2_c: |-
          This zig-zag pattern can be repeated twice to finish the puzzle with just 20 blocks!

          ![](<https://images.code.org/26cfaf6fe4a275e266b51e9ef3711171-image-1493502306380.18.52 PM copy.png>)
        courseC_harvester_loops_challenge2_d: |-
          This spiral pattern can be coded with just 18 blocks!

          ![](<https://images.code.org/0bfc0a0ed6783fae908368a6e6d12c02-image-1493501358990.18.52 PM.png>)
      courseC_harvester_loops_challenge2_2019:
        courseC_harvester_loops_challenge2_a: One way to solve this looks like a zig-zag.
          Another way looks like a spiral! There are lots of different solutions to
          a puzzle like this. Be persistent!
        courseC_harvester_loops_challenge2_b: You can repeat `move forward` and `pick
          lettuce` as many times as you need to, then turn at each corner.
        courseC_harvester_loops_challenge2_c: |-
          This zig-zag pattern can be repeated twice to finish the puzzle with just 20 blocks!

          ![](<https://images.code.org/26cfaf6fe4a275e266b51e9ef3711171-image-1493502306380.18.52 PM copy.png>)
        courseC_harvester_loops_challenge2_d: |-
          This spiral pattern can be coded with just 18 blocks!

          ![](<https://images.code.org/0bfc0a0ed6783fae908368a6e6d12c02-image-1493501358990.18.52 PM.png>)
      courseC_maze_debugging1:
        courseC_maze_debugging1_a: |-
          -   Does everything work after the first step?
          -   Does it still work after the second?
          -   Where does it go wrong?
        courseC_maze_debugging1_b: Jest jeden blok, który musisz dodać aby skończyć
          tą zagadkę.
      courseC_maze_debugging1_2018:
        courseC_maze_debugging1_a: |-
          -   Does everything work after the first step?
          -   Does it still work after the second?
          -   Where does it go wrong?
        courseC_maze_debugging1_b: Jest jeden blok, który musisz dodać aby skończyć
          tą zagadkę.
      courseC_maze_debugging1_2019:
        courseC_maze_debugging1_a: |-
          -   Does everything work after the first step?
          -   Does it still work after the second?
          -   Where does it go wrong?
        courseC_maze_debugging1_b: Jest jeden blok, który musisz dodać aby skończyć
          tą zagadkę.
      courseC_maze_debugging2:
        courseC_maze_debugging2_a: There is a lot of valuable code in the workspace.  Don't
          just delete it all and start over!
        courseC_maze_debugging2_b: |-
          -   Does everything work after the first step?
          -   Does it still work after the second?
          -   Where does it go wrong?
        courseC_maze_debugging2_c: Nie możesz znaleźć, co jest źle? Spróbuj uruchomić
          kod kilkukrotnie, aby zobaczyć co się dzieje.
      courseC_maze_debugging2_2018:
        courseC_maze_debugging2_a: There is a lot of valuable code in the workspace.  Don't
          just delete it all and start over!
        courseC_maze_debugging2_b: |-
          -   Does everything work after the first step?
          -   Does it still work after the second?
          -   Where does it go wrong?
        courseC_maze_debugging2_c: Nie możesz znaleźć, co jest źle? Spróbuj uruchomić
          kod kilkukrotnie, aby zobaczyć co się dzieje.
      courseC_maze_debugging2_2019:
        courseC_maze_debugging2_a: There is a lot of valuable code in the workspace.  Don't
          just delete it all and start over!
        courseC_maze_debugging2_b: |-
          -   Does everything work after the first step?
          -   Does it still work after the second?
          -   Where does it go wrong?
        courseC_maze_debugging2_c: Nie możesz znaleźć, co jest źle? Spróbuj uruchomić
          kod kilkukrotnie, aby zobaczyć co się dzieje.
      courseC_maze_debugging3:
        courseC_maze_debugging3_a: |-
          To delete a block from the middle of your code, drag all of the blocks to another part of the workspace.

          Drag the block you want to delete back to the toolbox.

          Finally, put your other blocks back where they belong.

          ![](https://images.code.org/bbafa5a100505b2b99a3f43ad3195471-image-1479933232821.gif)
        courseC_maze_debugging3_b: Nie możesz znaleźć, co jest źle? Spróbuj uruchomić
          kod kilkukrotnie, aby zobaczyć co się dzieje.
      courseC_maze_debugging3_2018:
        courseC_maze_debugging3_a: |-
          To delete a block from the middle of your code, drag all of the blocks to another part of the workspace.

          Drag the block you want to delete back to the toolbox.

          Finally, put your other blocks back where they belong.

          ![](https://images.code.org/bbafa5a100505b2b99a3f43ad3195471-image-1479933232821.gif)
        courseC_maze_debugging3_b: Nie możesz znaleźć, co jest źle? Spróbuj uruchomić
          kod kilkukrotnie, aby zobaczyć co się dzieje.
      courseC_maze_debugging3_2019:
        courseC_maze_debugging3_a: |-
          To delete a block from the middle of your code, drag all of the blocks to another part of the workspace.

          Drag the block you want to delete back to the toolbox.

          Finally, put your other blocks back where they belong.

          ![](https://images.code.org/bbafa5a100505b2b99a3f43ad3195471-image-1479933232821.gif)
        courseC_maze_debugging3_b: Nie możesz znaleźć, co jest źle? Spróbuj uruchomić
          kod kilkukrotnie, aby zobaczyć co się dzieje.
      courseC_maze_debugging4:
        courseC_maze_debugging4_a: Use the "Step" button to run through the instructions
          one at a time.  Does that help you find the line where things go wrong?
        courseC_maze_debugging4_b: One of the turns is making Scrat go in the wrong
          direction. Can you figure out which one?
      courseC_maze_debugging4_2018:
        courseC_maze_debugging4_a: Use the "Step" button to run through the instructions
          one at a time.  Does that help you find the line where things go wrong?
        courseC_maze_debugging4_b: One of the turns is making Scrat go in the wrong
          direction. Can you figure out which one?
      courseC_maze_debugging4_2019:
        courseC_maze_debugging4_a: Use the "Step" button to run through the instructions
          one at a time.  Does that help you find the line where things go wrong?
        courseC_maze_debugging4_b: One of the turns is making Scrat go in the wrong
          direction. Can you figure out which one?
      courseC_maze_debugging5:
        courseC_maze_debugging5_a: "There are lots of helpful blocks in the workspace
          already.  Don't delete them all! \n\nUse the \"Step\" button to go through
          and figure out where the code goes wrong."
        courseC_maze_debugging5_b: Try saying what Scrat should do out loud.  Is it
          the same as the code in the workspace?  What goes wrong?
      courseC_maze_debugging5_2018:
        courseC_maze_debugging5_a: "There are lots of helpful blocks in the workspace
          already.  Don't delete them all! \n\nUse the \"Step\" button to go through
          and figure out where the code goes wrong."
        courseC_maze_debugging5_c: You can change the direction of the turn block
          by clicking on the dropdown.
        courseC_maze_debugging5_b: Try saying what Scrat should do out loud.  Is it
          the same as the code in the workspace?  What goes wrong?
      courseC_maze_debugging5_2019:
        courseC_maze_debugging5_a: "There are lots of helpful blocks in the workspace
          already.  Don't delete them all! \n\nUse the \"Step\" button to go through
          and figure out where the code goes wrong."
        courseC_maze_debugging5_c: You can change the direction of the turn block
          by clicking on the dropdown.
        courseC_maze_debugging5_b: Try saying what Scrat should do out loud.  Is it
          the same as the code in the workspace?  What goes wrong?
      courseC_maze_debugging6:
        courseC_maze_debugging6_a: |-
          -   What is Scrat supposed to do?
          -   What does Scrat do?
          -   What does that tell you?
        courseC_maze_debugging6_b: |-
          Once you've found and fixed the first bug, go through the debugging process again to find the second one.

          Repeat the process until the program works!
      courseC_maze_debugging6_2018:
        courseC_maze_debugging6_a: |-
          -   What is Scrat supposed to do?
          -   What does Scrat do?
          -   What does that tell you?
        courseC_maze_debugging6_b: |-
          Once you've found and fixed the first bug, go through the debugging process again to find the second one.

          Repeat the process until the program works!
      courseC_maze_debugging6_2019:
        courseC_maze_debugging6_a: |-
          -   What is Scrat supposed to do?
          -   What does Scrat do?
          -   What does that tell you?
        courseC_maze_debugging6_b: |-
          Once you've found and fixed the first bug, go through the debugging process again to find the second one.

          Repeat the process until the program works!
      courseC_maze_debugging7:
        courseC_maze_debugging7_a: |-
          -   Does everything work at the first step?
          -   How about the second step?
          -   Where does it go wrong?
        courseC_maze_debugging7_b: Don't forget to use the "Step" button to run the
          program line by line!
        courseC_maze_debugging7_c: |-
          After you find and fix the first bug, make sure to use the debugging process again to find the next one.

          Repeat the debugging process until the program works!
      courseC_maze_debugging7_2018:
        courseC_maze_debugging7_a: |-
          -   Does everything work at the first step?
          -   How about the second step?
          -   Where does it go wrong?
        courseC_maze_debugging7_b: Don't forget to use the "Step" button to run the
          program line by line!
        courseC_maze_debugging7_c: |-
          After you find and fix the first bug, make sure to use the debugging process again to find the next one.

          Repeat the debugging process until the program works!
      courseC_maze_debugging7_2019:
        courseC_maze_debugging7_a: |-
          -   Does everything work at the first step?
          -   How about the second step?
          -   Where does it go wrong?
        courseC_maze_debugging7_b: Don't forget to use the "Step" button to run the
          program line by line!
        courseC_maze_debugging7_c: |-
          After you find and fix the first bug, make sure to use the debugging process again to find the next one.

          Repeat the debugging process until the program works!
      courseC_maze_debugging_challenge1:
        courseC_maze_debugging_challenge1_a: Left or right? It's up to you!
        courseC_maze_debugging_challenge1_b: Scrat's path is the shape of a rectangle!
          He needs to turn the same way each time.
        courseC_maze_debugging_challenge1_c: If you are getting stuck, you can always
          start over and find a new way!
      courseC_maze_debugging_challenge1_2018:
        courseC_maze_debugging_challenge1_a: Left or right? It's up to you!
        courseC_maze_debugging_challenge1_b: Scrat's path is the shape of a rectangle!
          He needs to turn the same way each time.
        courseC_maze_debugging_challenge1_c: If you are getting stuck, you can always
          start over and find a new way!
      courseC_maze_debugging_challenge1_2019:
        courseC_maze_debugging_challenge1_a: Left or right? It's up to you!
        courseC_maze_debugging_challenge1_b: Scrat's path is the shape of a rectangle!
          He needs to turn the same way each time.
        courseC_maze_debugging_challenge1_c: If you are getting stuck, you can always
          start over and find a new way!
      courseC_maze_debugging_challenge2:
        courseC_maze_debugging_challenge2_b: If you are getting stuck, try debugging
          the code.  Where does it go wrong?
        courseC_maze_debugging_challenge2_c: |-
          There are two different paths you can follow by just moving forward and turning four times. If you find one way to use a loop, there may be even more!

          ![](<https://images.code.org/8a4665671cda35fea1f629a5bcc39e26-image-1493502743154.48.05 PM.png>)
      courseC_maze_debugging_challenge2_2018:
        courseC_maze_debugging_challenge2_b: If you are getting stuck, try debugging
          the code.  Where does it go wrong?
        courseC_maze_debugging_challenge2_c: |-
          There are two different paths you can follow by just moving forward and turning four times. If you find one way to use a loop, there may be even more!

          ![](<https://images.code.org/8a4665671cda35fea1f629a5bcc39e26-image-1493502743154.48.05 PM.png>)
      courseC_maze_debugging_challenge2_2019:
        courseC_maze_debugging_challenge2_b: If you are getting stuck, try debugging
          the code.  Where does it go wrong?
        courseC_maze_debugging_challenge2_c: |-
          There are two different paths you can follow by just moving forward and turning four times. If you find one way to use a loop, there may be even more!

          ![](<https://images.code.org/8a4665671cda35fea1f629a5bcc39e26-image-1493502743154.48.05 PM.png>)
      courseC_maze_loops_challenge1a:
        courseC_maze_loops_challenge1_a: Think about this path as being two different
          pieces. Each one has a pattern you can repeat.
        courseC_maze_loops_challenge1_b: Can you remember how to use loops to repeat
          a staircase pattern?
      courseC_maze_loops_challenge1a_2018:
        courseC_maze_loops_challenge1_a: Think about this path as being two different
          pieces. Each one has a pattern you can repeat.
        courseC_maze_loops_challenge1_b: Can you remember how to use loops to repeat
          a staircase pattern?
      courseC_maze_loops_challenge1a_2019:
        courseC_maze_loops_challenge1_a: Think about this path as being two different
          pieces. Each one has a pattern you can repeat.
        courseC_maze_loops_challenge1_b: Can you remember how to use loops to repeat
          a staircase pattern?
      courseC_maze_programming1:
        courseC_maze_programming1_0: Upewnij się, że wszystkie bloki zostały połączone
          ze sobą, a następnie ponownie kliknij Uruchom.
      courseC_maze_programming1_2018:
        courseC_maze_programming1_0: Upewnij się, że wszystkie bloki zostały połączone
          ze sobą, a następnie ponownie kliknij Uruchom.
      courseC_maze_programming1_2019:
        courseC_maze_programming1_0: Upewnij się, że wszystkie bloki zostały połączone
          ze sobą, a następnie ponownie kliknij Uruchom.
      courseC_maze_programming2:
        courseC_maze_programming2_a: Aby użyć bloku <xml><block type="maze_moveForward"/></xml>,
          przeciągnij go z przybornika i przyciągnij do bloku <xml><block type="when_run"/></xml>.
        courseC_maze_programming2_b: Upewnij się, że wszystkie bloki zostały połączone
          ze sobą, a następnie ponownie kliknij Uruchom.
      courseC_maze_programming2_2018:
        courseC_maze_programming2_a: Aby użyć bloku <xml><block type="maze_moveForward"/></xml>,
          przeciągnij go z przybornika i przyciągnij do bloku <xml><block type="when_run"/></xml>.
        courseC_maze_programming2_b: Upewnij się, że wszystkie bloki zostały połączone
          ze sobą, a następnie ponownie kliknij Uruchom.
      courseC_maze_programming2_2019:
        courseC_maze_programming2_a: Aby użyć bloku <xml><block type="maze_moveForward"/></xml>,
          przeciągnij go z przybornika i przyciągnij do bloku <xml><block type="when_run"/></xml>.
        courseC_maze_programming2_b: Upewnij się, że wszystkie bloki zostały połączone
          ze sobą, a następnie ponownie kliknij Uruchom.
      courseC_maze_programming3:
        courseC_maze_programming3_a: Spróbuj najpierw uruchomić program, aby sprawdzić
          gdzie źle działa.
        courseC_maze_programming3_b: |-
          ![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)

          Aby usunąć blok ze środka kodu, przeciągnij wszystkie bloki do innej części obszaru roboczego.

          Przeciągnij blok, który chcesz usunąć, z powrotem do przybornika.

          Na koniec, przeciągnij pozostałe bloki tam, gdzie powinny być.
      courseC_maze_programming3_2018:
        courseC_maze_programming3_a: Spróbuj najpierw uruchomić program, aby sprawdzić
          gdzie źle działa.
        courseC_maze_programming3_b: |-
          ![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)

          Aby usunąć blok ze środka kodu, przeciągnij wszystkie bloki do innej części obszaru roboczego.

          Przeciągnij blok, który chcesz usunąć, z powrotem do przybornika.

          Na koniec, przeciągnij pozostałe bloki tam, gdzie powinny być.
      courseC_maze_programming3_2019:
        courseC_maze_programming3_a: Spróbuj najpierw uruchomić program, aby sprawdzić
          gdzie źle działa.
        courseC_maze_programming3_b: |-
          ![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)

          Aby usunąć blok ze środka kodu, przeciągnij wszystkie bloki do innej części obszaru roboczego.

          Przeciągnij blok, który chcesz usunąć, z powrotem do przybornika.

          Na koniec, przeciągnij pozostałe bloki tam, gdzie powinny być.
      courseC_maze_programming4:
        courseC_maze_programming4_a: Pamiętaj, że kiedy skręcasz, obracasz się z punktu
          widzenia ptaka. Jeśli skręcisz w prawo, to ptak skieruje się do dołu.
        courseC_maze_programming4_b: |-
          Aby podążać ścieżką:

          -   idź do przodu
          -   skręć w jedną stronę
          -   idź do przodu
          -   skręć do tyłu w drugą stronę
          -   idź do przodu
      courseC_maze_programming4_2018:
        courseC_maze_programming4_a: Pamiętaj, że kiedy skręcasz, obracasz się z punktu
          widzenia ptaka. Jeśli skręcisz w prawo, to ptak skieruje się do dołu.
        courseC_maze_programming4_b: |-
          Aby podążać ścieżką:

          -   idź do przodu
          -   skręć w jedną stronę
          -   idź do przodu
          -   skręć do tyłu w drugą stronę
          -   idź do przodu
      courseC_maze_programming4_2019:
        courseC_maze_programming4_a: Pamiętaj, że kiedy skręcasz, obracasz się z punktu
          widzenia ptaka. Jeśli skręcisz w prawo, to ptak skieruje się do dołu.
        courseC_maze_programming4_b: |-
          Aby podążać ścieżką:

          -   idź do przodu
          -   skręć w jedną stronę
          -   idź do przodu
          -   skręć do tyłu w drugą stronę
          -   idź do przodu
      courseC_maze_programming5:
        courseC_maze_programming5_a: Try using the "Step" button to run your code
          line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: Ptak potrzebuje wykonać jeden skręt, aby ukończyć
          tę łamigłówkę. Czy potrafisz wymyślić, w którą stronę?
        courseC_maze_programming5_c: Rozwiązanie będzie miało dwa bloki „idź do przodu”,
          skręt, dwa kolejne bloki „idź do przodu”.
      courseC_maze_programming5_2018:
        courseC_maze_programming5_a: Try using the "Step" button to run your code
          line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: Ptak potrzebuje wykonać jeden skręt, aby ukończyć
          tę łamigłówkę. Czy potrafisz wymyślić, w którą stronę?
        courseC_maze_programming5_c: Rozwiązanie będzie miało dwa bloki „idź do przodu”,
          skręt, dwa kolejne bloki „idź do przodu”.
      courseC_maze_programming5_2019:
        courseC_maze_programming5_a: Try using the "Step" button to run your code
          line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: Ptak potrzebuje wykonać jeden skręt, aby ukończyć
          tę łamigłówkę. Czy potrafisz wymyślić, w którą stronę?
        courseC_maze_programming5_c: Rozwiązanie będzie miało dwa bloki „idź do przodu”,
          skręt, dwa kolejne bloki „idź do przodu”.
      courseC_maze_programming6:
        courseC_maze_programming6_a: Istnieją dwa sposoby, aby rozwiązać ten problem!
        courseC_maze_programming6_b: Podążaj za palcem od ptaka do świnki, jakie podjąłeś
          kroki?
        courseC_maze_programming6_c: Pamiętaj, że musisz najpierw skręcić, ponieważ
          ptak stoi na przeciwko ściany.
        courseC_maze_programming6_d: Czujesz, że utknąłeś? Spójrz na tę ścieżkę!
      courseC_maze_programming6_2018:
        courseC_maze_programming6_a: Istnieją dwa sposoby, aby rozwiązać ten problem!
        courseC_maze_programming6_b: Podążaj za palcem od ptaka do świnki, jakie podjąłeś
          kroki?
        courseC_maze_programming6_c: Pamiętaj, że musisz najpierw skręcić, ponieważ
          ptak stoi na przeciwko ściany.
        courseC_maze_programming6_d: Czujesz, że utknąłeś? Spójrz na tę ścieżkę!
      courseC_maze_programming6_2019:
        courseC_maze_programming6_a: Istnieją dwa sposoby, aby rozwiązać ten problem!
        courseC_maze_programming6_b: Podążaj za palcem od ptaka do świnki, jakie podjąłeś
          kroki?
        courseC_maze_programming6_c: Pamiętaj, że musisz najpierw skręcić, ponieważ
          ptak stoi na przeciwko ściany.
        courseC_maze_programming6_d: Czujesz, że utknąłeś? Spójrz na tę ścieżkę!
      courseC_maze_programming7:
        courseC_maze_programming7_a: Nie zapomnij użyć przycisku „Krok”, aby przechodzić
          między blokami i szukać błędów.
        courseC_maze_programming7_b: Jeśli masz problemy z rozszyfrowaniem tej łamigłówki,
          spróbuj zapisać ruchy na kartce papieru.
      courseC_maze_programming7_2018:
        courseC_maze_programming7_a: Nie zapomnij użyć przycisku „Krok”, aby przechodzić
          między blokami i szukać błędów.
        courseC_maze_programming7_b: Jeśli masz problemy z rozszyfrowaniem tej łamigłówki,
          spróbuj zapisać ruchy na kartce papieru.
      courseC_maze_programming7_2019:
        courseC_maze_programming7_a: Nie zapomnij użyć przycisku „Krok”, aby przechodzić
          między blokami i szukać błędów.
        courseC_maze_programming7_b: Jeśli masz problemy z rozszyfrowaniem tej łamigłówki,
          spróbuj zapisać ruchy na kartce papieru.
      courseC_maze_programming8:
        courseC_maze_programming8_a: Pamiętaj, że możesz użyć przycisku „Krok”, aby
          przejrzeć kod wiersz po wierszu, jeśli utkniesz.
        courseC_maze_programming8_b: Don't be afraid to make a mistake! Try adding
          blocks and running the code to see what will happen, even if you don't think
          you've solved the puzzle yet.
      courseC_maze_programming8_2018:
        courseC_maze_programming8_a: Pamiętaj, że możesz użyć przycisku „Krok”, aby
          przejrzeć kod wiersz po wierszu, jeśli utkniesz.
        courseC_maze_programming8_b: Don't be afraid to make a mistake! Try adding
          blocks and running the code to see what will happen, even if you don't think
          you've solved the puzzle yet.
      courseC_maze_programming8_2019:
        courseC_maze_programming8_a: Pamiętaj, że możesz użyć przycisku „Krok”, aby
          przejrzeć kod wiersz po wierszu, jeśli utkniesz.
        courseC_maze_programming8_b: Don't be afraid to make a mistake! Try adding
          blocks and running the code to see what will happen, even if you don't think
          you've solved the puzzle yet.
      courseC_maze_programming_challenge1:
        courseC_maze_programming_challenge1_a: There are many ways to get to the pig.
          Use your finger to find a path and then program it!
      courseC_maze_programming_challenge1_2018:
        courseC_maze_programming_challenge1_a: There are many ways to get to the pig.
          Use your finger to find a path and then program it!
      courseC_maze_programming_challenge1_2019:
        courseC_maze_programming_challenge1_a: There are many ways to get to the pig.
          Use your finger to find a path and then program it!
      courseC_maze_programming_challenge2:
        courseC_maze_programming_challenge2_a: _"If you send me backwards, be extra
          careful that I turn the correct way!"_
        courseC_maze_programming_challenge2_b: |-
          Najkrótsze rozwiązanie wykorzystuje tylko 5 bloków, ale używa tego bloku:
          <xml><block type="controls_repeat_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
      courseC_maze_programming_challenge2_2018:
        courseC_maze_programming_challenge2_a: _"If you send me backwards, be extra
          careful that I turn the correct way!"_
        courseC_maze_programming_challenge2_b: |-
          Najkrótsze rozwiązanie wykorzystuje tylko 5 bloków, ale używa tego bloku:
          <xml><block type="controls_repeat_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
      courseC_maze_programming_challenge2_2019:
        courseC_maze_programming_challenge2_a: _"If you send me backwards, be extra
          careful that I turn the correct way!"_
        courseC_maze_programming_challenge2_b: |-
          Najkrótsze rozwiązanie wykorzystuje tylko 5 bloków, ale używa tego bloku:
          <xml><block type="controls_repeat_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
      courseC_starWars_loops1:
        courseC_starWars_loops1_a: When BB-8 rolls over scrap metal he picks it up
          automatically.
        courseC_starWars_loops1_b: Nie bój się popełniać błędów! Uruchom kod aby zobaczyć
          co się dzieje, nawet jeśli nie rozwiązałeś jeszcze zagadki.
        courseC_starWars_loops1_c: You will want to `move forward` five times to solve
          this puzzle.
      courseC_starWars_loops10:
        courseC_starWars_loops10_a: Doesn't this pattern look like a giant set of
          stair steps? See if you can use what you learned from previous puzzles to
          get all of the turns.
        courseC_starWars_loops10_b: |-
          If you want to use less code, you can put one `repeat` loop inside of another!\
          This is called a **nested loop**.
        courseC_starWars_loops10_c: Nie bój się popełniać błędów! Uruchom kod aby
          zobaczyć co się dzieje, nawet jeśli nie rozwiązałeś jeszcze zagadki.
      courseC_starWars_loops10_2018:
        courseC_starWars_loops10_a: Doesn't this pattern look like a giant set of
          stair steps? See if you can use what you learned from previous puzzles to
          get all of the turns.
        courseC_starWars_loops10_b: |-
          If you want to use less code, you can put one `repeat` loop inside of another!\
          This is called a **nested loop**.
        courseC_starWars_loops10_c: Nie bój się popełniać błędów! Uruchom kod aby
          zobaczyć co się dzieje, nawet jeśli nie rozwiązałeś jeszcze zagadki.
      courseC_starWars_loops10_2019:
        courseC_starWars_loops10_a: Doesn't this pattern look like a giant set of
          stair steps? See if you can use what you learned from previous puzzles to
          get all of the turns.
        courseC_starWars_loops10_b: |-
          If you want to use less code, you can put one `repeat` loop inside of another!\
          This is called a **nested loop**.
        courseC_starWars_loops10_c: Nie bój się popełniać błędów! Uruchom kod aby
          zobaczyć co się dzieje, nawet jeśli nie rozwiązałeś jeszcze zagadki.
      courseC_starWars_loops1_2018:
        courseC_starWars_loops1_a: When BB-8 rolls over scrap metal he picks it up
          automatically.
        courseC_starWars_loops1_b: Nie bój się popełniać błędów! Uruchom kod aby zobaczyć
          co się dzieje, nawet jeśli nie rozwiązałeś jeszcze zagadki.
        courseC_starWars_loops1_c: You will want to `move forward` five times to solve
          this puzzle.
      courseC_starWars_loops1_2019:
        courseC_starWars_loops1_a: When BB-8 rolls over scrap metal he picks it up
          automatically.
        courseC_starWars_loops1_b: Nie bój się popełniać błędów! Uruchom kod aby zobaczyć
          co się dzieje, nawet jeśli nie rozwiązałeś jeszcze zagadki.
        courseC_starWars_loops1_c: You will want to `move forward` five times to solve
          this puzzle.
      courseC_starWars_loops2:
        courseC_starWars_loops2_a: Aby powtórzyć kod, przeciągnij pętlę `repeat`,
          następnie umieść tam blok, który chcesz aby się powtarzał.
      courseC_starWars_loops2_2018:
        courseC_starWars_loops2_a: Aby powtórzyć kod, przeciągnij pętlę `repeat`,
          następnie umieść tam blok, który chcesz aby się powtarzał.
      courseC_starWars_loops2_2019:
        courseC_starWars_loops2_a: Aby powtórzyć kod, przeciągnij pętlę `repeat`,
          następnie umieść tam blok, który chcesz aby się powtarzał.
      courseC_starWars_loops2_copy:
        courseC_starWars_loops2_a: Aby powtórzyć kod, przeciągnij pętlę `repeat`,
          następnie umieść tam blok, który chcesz aby się powtarzał.
      courseC_starWars_loops4:
        courseC_starWars_loops4_c: Clicking on the small arrow next to "left" on the
          turn block will let you change it to  "right".
        courseC_starWars_loops4_a: Use two `repeat` blocks.
        courseC_starWars_loops4_b: 'Każda pętla `repeat` ma tylko jedną komendę w
          środku: `move forward`.'
      courseC_starWars_loops4_2018:
        courseC_starWars_loops4_c: Clicking on the small arrow next to "left" on the
          turn block will let you change it to  "right".
        courseC_starWars_loops4_a: Use two `repeat` blocks.
        courseC_starWars_loops4_b: 'Każda pętla `repeat` ma tylko jedną komendę w
          środku: `move forward`.'
      courseC_starWars_loops4_2019:
        courseC_starWars_loops4_c: Clicking on the small arrow next to "left" on the
          turn block will let you change it to  "right".
        courseC_starWars_loops4_a: Use two `repeat` blocks.
        courseC_starWars_loops4_b: 'Każda pętla `repeat` ma tylko jedną komendę w
          środku: `move forward`.'
      courseC_starWars_loops4_copy:
        courseC_starWars_loops4_c: Clicking on the small arrow next to "left" on the
          turn block will let you change it to  "right".
        courseC_starWars_loops4_a: Use two `repeat` blocks.
        courseC_starWars_loops4_b: 'Każda pętla `repeat` ma tylko jedną komendę w
          środku: `move forward`.'
      courseC_starWars_loops5:
        courseC_starWars_loops5_b: Aby iść na dół, musisz się obrócić i dalej isś
          prosto.
        courseC_starWars_loops5_a: The best solution uses a turn, then a single `move
          forward`, another turn, then a loop.
      courseC_starWars_loops5_2018:
        courseC_starWars_loops5_a: The best solution uses a single `move forward`,
          then a turn, then a loop.
      courseC_starWars_loops5_2019:
        courseC_starWars_loops5_a: The best solution uses a single `move forward`,
          then a turn, then a loop.
      courseC_starWars_loops5_copy:
        courseC_starWars_loops5_b: Aby iść na dół, musisz się obrócić i dalej isś
          prosto.
        courseC_starWars_loops5_a: The best solution uses a turn, then a single `move
          forward`, another turn, then a loop.
      courseC_starWars_loops6:
        courseC_starWars_loops6_a: Try writing all of the moves down on a piece of
          paper and looking for a pattern.
        courseC_starWars_loops6_b: |-
          If you want to use less code, you can put one `repeat` loop inside of another!\
          This is called a **nested loop**.
      courseC_starWars_loops6_2018:
        courseC_starWars_loops6_a: Try writing all of the moves down on a piece of
          paper and looking for a pattern.
        courseC_starWars_loops6_b: |-
          If you want to use less code, you can put one `repeat` loop inside of another!\
          This is called a **nested loop**.
      courseC_starWars_loops6_2019:
        courseC_starWars_loops6_a: Try writing all of the moves down on a piece of
          paper and looking for a pattern.
        courseC_starWars_loops6_b: |-
          If you want to use less code, you can put one `repeat` loop inside of another!\
          This is called a **nested loop**.
      courseC_starWars_loops6_copy:
        courseC_starWars_loops6_a: Try writing all of the moves down on a piece of
          paper and looking for a pattern.
        courseC_starWars_loops6_b: |-
          If you want to use less code, you can put one `repeat` loop inside of another!\
          This is called a **nested loop**.
      courseC_starWars_loops7:
        courseC_starWars_loops7_a: This pattern looks harder than it is! Start with
          a simple stair step. Does that cover all of the scrap metal?
        courseC_starWars_loops7_b: Jeśli masz problem z tą zagadką, spróbuj zapisać
          wszystkie ruchy na kartce papieru i poszukać wzorca.
        courseC_starWars_loops7_c: Nie bój się popełniać błędów! Uruchom kod aby zobaczyć
          co się dzieje, nawet jeśli nie rozwiązałeś jeszcze zagadki.
      courseC_starWars_loops7_2018:
        courseC_starWars_loops7_a: This pattern looks harder than it is! Start with
          a simple stair step. Does that cover all of the scrap metal?
        courseC_starWars_loops7_b: Jeśli masz problem z tą zagadką, spróbuj zapisać
          wszystkie ruchy na kartce papieru i poszukać wzorca.
        courseC_starWars_loops7_c: Nie bój się popełniać błędów! Uruchom kod aby zobaczyć
          co się dzieje, nawet jeśli nie rozwiązałeś jeszcze zagadki.
      courseC_starWars_loops7_2019:
        courseC_starWars_loops7_a: This pattern looks harder than it is! Start with
          a simple stair step. Does that cover all of the scrap metal?
        courseC_starWars_loops7_b: Jeśli masz problem z tą zagadką, spróbuj zapisać
          wszystkie ruchy na kartce papieru i poszukać wzorca.
        courseC_starWars_loops7_c: Nie bój się popełniać błędów! Uruchom kod aby zobaczyć
          co się dzieje, nawet jeśli nie rozwiązałeś jeszcze zagadki.
      courseC_starWars_loops7_copy:
        courseC_starWars_loops7_a: This pattern looks harder than it is! Start with
          a simple stair step. Does that cover all of the scrap metal?
        courseC_starWars_loops7_b: Jeśli masz problem z tą zagadką, spróbuj zapisać
          wszystkie ruchy na kartce papieru i poszukać wzorca.
        courseC_starWars_loops7_c: Nie bój się popełniać błędów! Uruchom kod aby zobaczyć
          co się dzieje, nawet jeśli nie rozwiązałeś jeszcze zagadki.
      courseC_starWars_loops8:
        course_starWars_loops8_a: Try thinking about this problem in small parts.
          Take your time. You don't need to solve it on the first try!
        course_starWars_loops8_b: Think of the first half of this problem as a stair
          step problem. How did you solve that before?
        course_starWars_loops8_c: |-
          Take a look at this path.

          ![](https://images.code.org/7d696dd3b1e6984a1d6041f366d5c96b-image-1510198804955.37.04.png)
      courseC_starWars_loops8_2018:
        course_starWars_loops8_a: Try thinking about this problem in small parts.
          Take your time. You don't need to solve it on the first try!
        course_starWars_loops8_b: Think of the first half of this problem as a stair
          step problem. How did you solve that before?
        course_starWars_loops8_c: |-
          Take a look at this path.

          ![](https://images.code.org/7d696dd3b1e6984a1d6041f366d5c96b-image-1510198804955.37.04.png)
      courseC_starWars_loops8_2019:
        course_starWars_loops8_a: Try thinking about this problem in small parts.
          Take your time. You don't need to solve it on the first try!
        course_starWars_loops8_b: Think of the first half of this problem as a stair
          step problem. How did you solve that before?
        course_starWars_loops8_c: |-
          Take a look at this path.

          ![](https://images.code.org/7d696dd3b1e6984a1d6041f366d5c96b-image-1510198804955.37.04.png)
      courseC_starWars_loops8_copy:
        course_starWars_loops8_a: Try thinking about this problem in small parts.
          Take your time. You don't need to solve it on the first try!
        course_starWars_loops8_b: Think of the first half of this problem as a stair
          step problem. How did you solve that before?
        course_starWars_loops8_c: |-
          Take a look at this path.

          ![](https://images.code.org/7d696dd3b1e6984a1d6041f366d5c96b-image-1510198804955.37.04.png)
      courseC_starWars_loops9:
        course_starWars_loops9_b: You can put more than one block inside a `repeat`
          loop.
        course_starWars_loops9_c: |-
          You do not need to turn left to solve this puzzle. All of your turns can be to the right.

          ![](https://images.code.org/3dd00d424aa4112934053548b48bbb69-image-1510198997590.40.57.png)
      courseC_starWars_loops9_2018:
        course_starWars_loops9_b: You can put more than one block inside a `repeat`
          loop.
        course_starWars_loops9_c: |-
          You do not need to turn left to solve this puzzle. All of your turns can be to the right.

          ![](https://images.code.org/3dd00d424aa4112934053548b48bbb69-image-1510198997590.40.57.png)
      courseC_starWars_loops9_2019:
        course_starWars_loops9_b: You can put more than one block inside a `repeat`
          loop.
        course_starWars_loops9_c: |-
          You do not need to turn left to solve this puzzle. All of your turns can be to the right.

          ![](https://images.code.org/3dd00d424aa4112934053548b48bbb69-image-1510198997590.40.57.png)
      courseD_artist_1_2018:
        courseD_artist_project1_a: Use the drop down menu on the `turn` blocks to
          choose the angle you need!
        courseD_artist_project1_b: Remember that `move forward` draws a line, while
          `jump forward` does not.
      courseD_artist_1_2018_2019:
        courseD_artist_project1_a: Use the drop down menu on the `turn` blocks to
          choose the angle you need!
        courseD_artist_project1_b: Remember that `move forward` draws a line, while
          `jump forward` does not.
      courseD_artist_2_2018:
        courseD_artist_project1_b: Remember that `move` draws a line, while `jump`
          does not.
        courseD_artist_project1_a: Use the drop down menu on the `turn` blocks to
          choose the angle you need!
      courseD_artist_2_2018_2019:
        courseD_artist_project1_b: Remember that `move` draws a line, while `jump`
          does not.
        courseD_artist_project1_a: Use the drop down menu on the `turn` blocks to
          choose the angle you need!
      courseD_artist_5_2018:
        '1': If you are switching your shapes, don't forget that you will need to
          switch their angles, too!
      courseD_artist_5_2018_2019:
        '1': If you are switching your shapes, don't forget that you will need to
          switch their angles, too!
      courseD_artist_binary1:
        courseD_artist_binary1_a: Replace the "???" in the text block with the binary
          image you want, in zeroes and ones.
        courseD_artist_binary1_b: Artysta narysuje białą spację dla każdej 1 i czarną
          spację dla każdego 0.
        courseD_artist_binary1_c: |-
          This is how you can input your binary code:

          ![](https://images.code.org/ec0f974e32c4323fc61cb49b48b8f1c0-image-1500334311345.2_hint.gif)
      courseD_artist_binary1_2018:
        courseD_artist_binary1_a: Replace the "???" in the text block with the binary
          image you want, in zeroes and ones.
        courseD_artist_binary1_b: Artysta narysuje białą spację dla każdej 1 i czarną
          spację dla każdego 0.
        courseD_artist_binary1_c: |-
          This is how you can input your binary code:

          ![](https://images.code.org/ec0f974e32c4323fc61cb49b48b8f1c0-image-1500334311345.2_hint.gif)
      courseD_artist_binary1_2019:
        courseD_artist_binary1_a: Replace the "???" in the text block with the binary
          image you want, in zeroes and ones.
        courseD_artist_binary1_b: Artysta narysuje białą spację dla każdej 1 i czarną
          spację dla każdego 0.
        courseD_artist_binary1_c: |-
          This is how you can input your binary code:

          ![](https://images.code.org/ec0f974e32c4323fc61cb49b48b8f1c0-image-1500334311345.2_hint.gif)
      courseD_artist_binary2:
        courseD_artist_binary2_a: Just click `Run` to see this program in action!
      courseD_artist_binary2_2018:
        courseD_artist_binary2_a: Just click `Run` to see this program in action!
      courseD_artist_binary2_2019:
        courseD_artist_binary2_a: Just click `Run` to see this program in action!
      courseD_artist_binary3:
        courseD_artist_binary3_a: Jeden z czterech binarnych wzorów w przyborniku
          rozwiąże tą zagadkę!
        courseD_artist_binary3_b: Don't be afraid to make a mistake! Try writing binary
          and running the code to see what will happen, even if you haven't solved
          the puzzle yet.
      courseD_artist_binary3_2018:
        courseD_artist_binary3_a: Jeden z czterech binarnych wzorów w przyborniku
          rozwiąże tą zagadkę!
        courseD_artist_binary3_b: Don't be afraid to make a mistake! Try writing binary
          and running the code to see what will happen, even if you haven't solved
          the puzzle yet.
      courseD_artist_binary3_2019:
        courseD_artist_binary3_a: Jeden z czterech binarnych wzorów w przyborniku
          rozwiąże tą zagadkę!
        courseD_artist_binary3_b: Don't be afraid to make a mistake! Try writing binary
          and running the code to see what will happen, even if you haven't solved
          the puzzle yet.
      courseD_artist_binary4:
        courseD_artist_binary4_a: Look at the first three squares on the top row.
          Could you repeat these three to get the whole pattern?
        courseD_artist_binary4_b: Don't be afraid to make a mistake! Try writing binary
          and running the code to see what will happen, even if you don't think you've
          solved the puzzle yet.
      courseD_artist_binary4_2018:
        courseD_artist_binary4_a: Look at the first three squares on the top row.
          Could you repeat these three to get the whole pattern?
        courseD_artist_binary4_b: Don't be afraid to make a mistake! Try writing binary
          and running the code to see what will happen, even if you don't think you've
          solved the puzzle yet.
      courseD_artist_binary4_2019:
        courseD_artist_binary4_a: Look at the first three squares on the top row.
          Could you repeat these three to get the whole pattern?
        courseD_artist_binary4_b: Don't be afraid to make a mistake! Try writing binary
          and running the code to see what will happen, even if you don't think you've
          solved the puzzle yet.
      courseD_artist_binary5:
        courseD_artist_binary5_a: Try running the code first to see what you have
          to work with.
        courseD_artist_binary5_b: You only need to switch two rows to make a smile.
        courseD_artist_binary5_c: If you are having trouble figuring this puzzle out,
          try writing the binary lines down on a piece of paper and looking for a
          pattern.
      courseD_artist_binary5_2018:
        courseD_artist_binary5_a: Try running the code first to see what you have
          to work with.
        courseD_artist_binary5_b: You only need to switch two rows to make a smile.
        courseD_artist_binary5_c: If you are having trouble figuring this puzzle out,
          try writing the binary lines down on a piece of paper and looking for a
          pattern.
      courseD_artist_binary5_2019:
        courseD_artist_binary5_a: Try running the code first to see what you have
          to work with.
        courseD_artist_binary5_b: You only need to switch two rows to make a smile.
        courseD_artist_binary5_c: If you are having trouble figuring this puzzle out,
          try writing the binary lines down on a piece of paper and looking for a
          pattern.
      courseD_artist_binary6:
        courseD_artist_binary6_a: Start at the top left. How far do you have to read
          before the pattern starts to repeat?
        courseD_artist_binary6_b: You can build your binary string a bit at a time,
          and keep testing!
      courseD_artist_binary6_2018:
        courseD_artist_binary6_a: Start at the top left. How far do you have to read
          before the pattern starts to repeat?
        courseD_artist_binary6_b: You can build your binary string a bit at a time,
          and keep testing!
      courseD_artist_binary6_2019:
        courseD_artist_binary6_a: Start at the top left. How far do you have to read
          before the pattern starts to repeat?
        courseD_artist_binary6_b: You can build your binary string a bit at a time,
          and keep testing!
      courseD_artist_binary7:
        courseD_artist_binary7_a: Start at the top left. How far do you have to read
          before the pattern starts to repeat?
        courseD_artist_binary7_b: Don't be afraid to make a mistake! Try writing binary
          and running the code to see what will happen, even if you don't think you've
          solved the puzzle yet.
      courseD_artist_binary7_2018:
        courseD_artist_binary7_a: Start at the top left. How far do you have to read
          before the pattern starts to repeat?
        courseD_artist_binary7_b: Don't be afraid to make a mistake! Try writing binary
          and running the code to see what will happen, even if you don't think you've
          solved the puzzle yet.
      courseD_artist_binary7_2019:
        courseD_artist_binary7_a: Start at the top left. How far do you have to read
          before the pattern starts to repeat?
        courseD_artist_binary7_b: Don't be afraid to make a mistake! Try writing binary
          and running the code to see what will happen, even if you don't think you've
          solved the puzzle yet.
      courseD_artist_binary8:
        courseD_artist_binary8_a: The spiral can be confusing sometimes. Isolate each
          horizontal line in your mind as you create this design.
        courseD_artist_binary8_b: Try running the code first to see what you have
          to work with.
        courseD_artist_binary8_c: Don't be afraid to make a mistake! Try writing binary
          and running the code to see what will happen, even if you haven't solved
          the puzzle yet.
      courseD_artist_binary8_2018:
        courseD_artist_binary8_a: The spiral can be confusing sometimes. Isolate each
          horizontal line in your mind as you create this design.
        courseD_artist_binary8_b: Try running the code first to see what you have
          to work with.
        courseD_artist_binary8_c: Don't be afraid to make a mistake! Try writing binary
          and running the code to see what will happen, even if you haven't solved
          the puzzle yet.
      courseD_artist_binary8_2019:
        courseD_artist_binary8_a: The spiral can be confusing sometimes. Isolate each
          horizontal line in your mind as you create this design.
        courseD_artist_binary8_b: Try running the code first to see what you have
          to work with.
        courseD_artist_binary8_c: Don't be afraid to make a mistake! Try writing binary
          and running the code to see what will happen, even if you haven't solved
          the puzzle yet.
      courseD_artist_binary_challenge2_2018:
        courseD_artist_binary_challenge2_a: There are only few lines wrong in the
          original program.
      courseD_artist_binary_challenge2_2019:
        courseD_artist_binary_challenge2_a: There are only few lines wrong in the
          original program.
      courseD_artist_nestedLoops1:
        courseD_artist_nestedLoops1_a: The easiest way to draw this is to move forward
          and use right turns.
        courseD_artist_nestedLoops1_b: You can draw this triangle with a `repeat`
          loop with two blocks inside. Which blocks do you need?
        courseD_artist_nestedLoops1_c: Try writing the steps on paper and looking
          for patterns that can be simplified with loops.
      courseD_artist_nestedLoops1_2018:
        courseD_artist_nestedLoops1_a: The easiest way to draw this is to move forward
          and use right turns.
        courseD_artist_nestedLoops1_b: You can draw this triangle with a `repeat`
          loop with two blocks inside. Which blocks do you need?
        courseD_artist_nestedLoops1_c: Try writing the steps on paper and looking
          for patterns that can be simplified with loops.
      courseD_artist_nestedLoops1_2019:
        courseD_artist_nestedLoops1_a: The easiest way to draw this is to move forward
          and use right turns.
        courseD_artist_nestedLoops1_b: You can draw this triangle with a `repeat`
          loop with two blocks inside. Which blocks do you need?
        courseD_artist_nestedLoops1_c: Try writing the steps on paper and looking
          for patterns that can be simplified with loops.
      courseD_artist_nestedLoops1a:
        courseD_artist_nestedLoops1a_a: |-
          You will need to draw a total of 6 triangles. After finishing each triangle, rotate 60 degrees and move to start the next triangle.

          ![](https://images.code.org/ad6c6d98298df9f4e3cea5bbe5ec776e-image-1497476332024.2_solution2.gif)
        courseD_artist_nestedLoops1a_b: If you create your triangle with a loop, the
          artist should be facing the same way as they started. This will make the
          60 degree turns a lot easier.
        courseD_artist_nestedLoops1a_c: If you want colors, use the `set color` block
          in your code. You don't have to match the colors in the template image.
      courseD_artist_nestedLoops1a_2018:
        courseD_artist_nestedLoops1a_a: |-
          You will need to draw a total of 6 triangles (tip: use your code from the last puzzle to get started). After finishing each triangle, rotate 60 degrees and move to start the next triangle.

          ![](https://images.code.org/ad6c6d98298df9f4e3cea5bbe5ec776e-image-1497476332024.2_solution2.gif)
        courseD_artist_nestedLoops1a_b: If you create your triangle with a loop, the
          artist should be facing the same way as they started. This will make the
          60 degree turns a lot easier.
        courseD_artist_nestedLoops1a_c: If you want colors, use the `set color` block
          in your code. You don't have to match the colors in the template image.
      courseD_artist_nestedLoops1a_2019:
        courseD_artist_nestedLoops1a_a: |-
          You will need to draw a total of 6 triangles. After finishing each triangle, rotate 60 degrees and move to start the next triangle.

          ![](https://images.code.org/ad6c6d98298df9f4e3cea5bbe5ec776e-image-1497476332024.2_solution2.gif)
        courseD_artist_nestedLoops1a_b: If you create your triangle with a loop, the
          artist should be facing the same way as they started. This will make the
          60 degree turns a lot easier.
        courseD_artist_nestedLoops1a_c: If you want colors, use the `set color` block
          in your code. You don't have to match the colors in the template image.
      courseD_artist_nestedLoops2:
        courseD_artist_nestedLoops2_a: Nest your loops by surrounding your triangle
          code with another `repeat` loop.
        courseD_artist_nestedLoops2_b: Remember to put the `turn` block inside of
          the loop so that the artist turns after each triangle.
      courseD_artist_nestedLoops2_2018:
        courseD_artist_nestedLoops2_a: Nest your loops by surrounding your triangle
          code with another `repeat` loop.
        courseD_artist_nestedLoops2_b: Remember to put the `turn` block inside of
          the loop so that the artist turns after each triangle.
      courseD_artist_nestedLoops2_2019:
        courseD_artist_nestedLoops2_a: Nest your loops by surrounding your triangle
          code with another `repeat` loop.
        courseD_artist_nestedLoops2_b: Remember to put the `turn` block inside of
          the loop so that the artist turns after each triangle.
      courseD_artist_nestedLoops3:
        courseD_artist_nestedLoops3_a: "Spróbuj użyć bloku 'skok do przodu', aby przejść
          o jeden kwadrat do miejsca, w którym rozpocznie się rysowanie następnego.
          \  \n\nJeśli bok Twoich kwadratów to 20 pikseli wysokości i są one oddalone
          o 20 pikseli od siebie, to jak daleko potrzebujesz skoczyć?"
        courseD_artist_nestedLoops3_b: 'Don''t forget to use a nested loop to solve
          this puzzle quickly. '
        courseD_artist_nestedLoops3_c: 'Start by using a `repeat` loop to make one
          square.  Next, repeat that square 8 times, jumping 40 pixels in between. '
      courseD_artist_nestedLoops3_2018:
        courseD_artist_nestedLoops3_a: "Spróbuj użyć bloku 'skok do przodu', aby przejść
          o jeden kwadrat do miejsca, w którym rozpocznie się rysowanie następnego.
          \  \n\nJeśli bok Twoich kwadratów to 20 pikseli wysokości i są one oddalone
          o 20 pikseli od siebie, to jak daleko potrzebujesz skoczyć?"
        courseD_artist_nestedLoops3_b: 'Don''t forget to use a nested loop to solve
          this puzzle quickly. '
        courseD_artist_nestedLoops3_c: 'Start by using a `repeat` loop to make one
          square.  Next, repeat that square 8 times, jumping 40 pixels in between. '
      courseD_artist_nestedLoops3_2019:
        courseD_artist_nestedLoops3_a: "Spróbuj użyć bloku 'skok do przodu', aby przejść
          o jeden kwadrat do miejsca, w którym rozpocznie się rysowanie następnego.
          \  \n\nJeśli bok Twoich kwadratów to 20 pikseli wysokości i są one oddalone
          o 20 pikseli od siebie, to jak daleko potrzebujesz skoczyć?"
        courseD_artist_nestedLoops3_b: 'Don''t forget to use a nested loop to solve
          this puzzle quickly. '
        courseD_artist_nestedLoops3_c: 'Start by using a `repeat` loop to make one
          square.  Next, repeat that square 8 times, jumping 40 pixels in between. '
      courseD_artist_nestedLoops4:
        courseD_artist_nestedLoops4_d: To solve this correctly, you'll need to move
          **before** you turn, or else your circles will be off by the tiniest little
          amount!
        courseD_artist_nestedLoops4_a: |-
          To make a circle:

          -   Repeat 360 times
              -   Move forward 1 pixel
              -   Turn left 1 degree
        courseD_artist_nestedLoops4_b: Don't forget to jump forward by 50 pixels between
          circles.
        courseD_artist_nestedLoops4_c: Use a nested loop to draw your circles 4 times.
      courseD_artist_nestedLoops4_2018:
        courseD_artist_nestedLoops4_d: To solve this correctly, you'll need to move
          **before** you turn, or else your circles will be off by the tiniest little
          amount!
        courseD_artist_nestedLoops4_a: |-
          To make a circle:

          -   Repeat 360 times
              -   Move forward 1 pixel
              -   Turn left 1 degree
        courseD_artist_nestedLoops4_b: Don't forget to jump forward by 50 pixels between
          circles.
        courseD_artist_nestedLoops4_c: Use a nested loop to draw your circles 4 times.
      courseD_artist_nestedLoops4_2019:
        courseD_artist_nestedLoops4_d: To solve this correctly, you'll need to move
          **before** you turn, or else your circles will be off by the tiniest little
          amount!
        courseD_artist_nestedLoops4_a: |-
          To make a circle:

          -   Repeat 360 times
              -   Move forward 1 pixel
              -   Turn left 1 degree
        courseD_artist_nestedLoops4_b: Don't forget to jump forward by 50 pixels between
          circles.
        courseD_artist_nestedLoops4_c: Use a nested loop to draw your circles 4 times.
      courseD_artist_nestedLoops5:
        courseD_artist_nestedLoops5_a: |-
          To do this easily:

          -   repeat 4 times
              -   make a circle
              -   jump forward 50 pixels
              -   turn right 90 degrees
        courseD_artist_nestedLoops5_b: To make a circle you'll need to set a repeat
          loop to repeat 360 times. Inside the loop, move forward 1 pixel and turn
          by 1 degree.
      courseD_artist_nestedLoops5_2018:
        courseD_artist_nestedLoops5_a: |-
          To do this easily:

          -   repeat 4 times
              -   make a circle
              -   jump forward 50 pixels
              -   turn right 90 degrees
        courseD_artist_nestedLoops5_b: To make a circle you'll need to set a repeat
          loop to repeat 360 times. Inside the loop, move forward 1 pixel and turn
          by 1 degree.
      courseD_artist_nestedLoops5_2019:
        courseD_artist_nestedLoops5_a: |-
          To do this easily:

          -   repeat 4 times
              -   make a circle
              -   jump forward 50 pixels
              -   turn right 90 degrees
        courseD_artist_nestedLoops5_b: To make a circle you'll need to set a repeat
          loop to repeat 360 times. Inside the loop, move forward 1 pixel and turn
          by 1 degree.
      courseD_artist_nestedLoops7:
        courseD_artist_nestedLoops7_a: You'll need to use nested loops here. First,
          use a loop to draw a square. What will the outer loop do if the inner loop
          draws a square?
        courseD_artist_nestedLoops7_b: |-
          Use a nested loop, where the inner loop is the code for a square.

          -   repeat 6 times
              -   make square
              -   jump forward by **50 pixels**
              -   turn **60 degrees**
      courseD_artist_nestedLoops7_2018:
        courseD_artist_nestedLoops7_a: You'll need to use nested loops here. First,
          use a loop to draw a square. What will the outer loop do if the inner loop
          draws a square?
        courseD_artist_nestedLoops7_b: |-
          Use a nested loop, where the inner loop is the code for a square.

          -   repeat 6 times
              -   make square
              -   jump forward by **50 pixels**
              -   turn **60 degrees**
      courseD_artist_nestedLoops7_2019:
        courseD_artist_nestedLoops7_a: You'll need to use nested loops here. First,
          use a loop to draw a square. What will the outer loop do if the inner loop
          draws a square?
        courseD_artist_nestedLoops7_b: |-
          Use a nested loop, where the inner loop is the code for a square.

          -   repeat 6 times
              -   make square
              -   jump forward by **50 pixels**
              -   turn **60 degrees**
      courseD_artist_nestedLoops8:
        courseD_artist_nestedLoops8_a: To have 8 hexagons in your drawing, you'll
          need to turn **45 degrees** between each of them. Why? Because 360 degrees
          (a full turn around) divided by 8 (the number of hexagons) is 45 degrees.
        courseD_artist_nestedLoops8_b: If you're stuck, start by looking at the last
          puzzle, then change the things that are different.
        courseD_artist_nestedLoops8_c: |-
          Use a nested loop:

          -   Repeat 8 times
              -   draw a hexagon
              -   jump forward 50 pixels
              -   turn right 45 degrees
      courseD_artist_nestedLoops8_2018:
        courseD_artist_nestedLoops8_a: To have 8 hexagons in your drawing, you'll
          need to turn **45 degrees** between each of them. Why? Because 360 degrees
          (a full turn around) divided by 8 (the number of hexagons) is 45 degrees.
        courseD_artist_nestedLoops8_b: If you're stuck, start by looking at the last
          puzzle, then change the things that are different.
        courseD_artist_nestedLoops8_c: |-
          Use a nested loop:

          -   Repeat 8 times
              -   draw a hexagon
              -   jump forward 50 pixels
              -   turn right 45 degrees
      courseD_artist_nestedLoops8_2019:
        courseD_artist_nestedLoops8_a: To have 8 hexagons in your drawing, you'll
          need to turn **45 degrees** between each of them. Why? Because 360 degrees
          (a full turn around) divided by 8 (the number of hexagons) is 45 degrees.
        courseD_artist_nestedLoops8_b: If you're stuck, start by looking at the last
          puzzle, then change the things that are different.
        courseD_artist_nestedLoops8_c: |-
          Use a nested loop:

          -   Repeat 8 times
              -   draw a hexagon
              -   jump forward 50 pixels
              -   turn right 45 degrees
      courseD_artist_nestedLoops9:
        courseD_artist_nestedLoops9_a: Start by using a nested loop like you had before,
          but this time, make it with squares.
        courseD_artist_nestedLoops9_b: Add a second set of nested loops to the end
          of the first set, but this time use triangles.
        courseD_artist_nestedLoops9_c: |-
          Use two nested loops:

          -   Repeat 8 times
              -   draw a square
              -   jump forward 50 pixels
              -   turn right by 45 degrees
          -   Repeat 8 times
              -   draw a triangle
              -   jump forward 50 pixels
              -   turn right by 45 degrees
      courseD_artist_nestedLoops9_2018:
        courseD_artist_nestedLoops9_a: Start by using a nested loop like you had before,
          but this time, make it with squares.
        courseD_artist_nestedLoops9_b: Add a second set of nested loops to the end
          of the first set, but this time use triangles.
        courseD_artist_nestedLoops9_c: |-
          Use two nested loops:

          -   Repeat 8 times
              -   draw a square
              -   jump forward 50 pixels
              -   turn right by 45 degrees
          -   Repeat 8 times
              -   draw a triangle
              -   jump forward 50 pixels
              -   turn right by 45 degrees
      courseD_artist_nestedLoops9_2019:
        courseD_artist_nestedLoops9_a: Start by using a nested loop like you had before,
          but this time, make it with squares.
        courseD_artist_nestedLoops9_b: Add a second set of nested loops to the end
          of the first set, but this time use triangles.
        courseD_artist_nestedLoops9_c: |-
          Use two nested loops:

          -   Repeat 8 times
              -   draw a square
              -   jump forward 50 pixels
              -   turn right by 45 degrees
          -   Repeat 8 times
              -   draw a triangle
              -   jump forward 50 pixels
              -   turn right by 45 degrees
      courseD_artist_nestedLoopsFP:
        courseD_artist_nestedLoopsFP_a: |-
          <img src="https://images.code.org/9257cbf61f238f5a749a949059731934-image-1478732674615.02.25.png" width="200px"/>

          This image was made using a single nested loop that repeats a hexagon (with 50px sides) 15 times using a 48 degree turn.
        courseD_artist_nestedLoopsFP_b: |-
          <img src="https://images.code.org/31a85d4e5be5209240195d34b17a177b-image-1478732674613.32.53.png" width="200px"/>

          This image was made using similar code to other levels you've done before, but with circles (repeat 360 times: move forward 1, turn 1 degree).
        courseD_artist_nestedLoopsFP_c: |-
          <img src="https://images.code.org/f654f1512860c6c8cf6795c961a8959c-image-1478732674616.02.58.png" width="200px"/>

          This image was made using a single nested loop that repeats a pentagon (with 50px sides) 15 times using a 48 degree turn.
      courseD_artist_nestedLoopsFP_2018:
        courseD_artist_nestedLoopsFP_a: |-
          <img src="https://images.code.org/9257cbf61f238f5a749a949059731934-image-1478732674615.02.25.png" width="200px"/>

          This image was made using a single nested loop that repeats a hexagon (with 50px sides) 15 times using a 48 degree turn.
        courseD_artist_nestedLoopsFP_b: |-
          <img src="https://images.code.org/31a85d4e5be5209240195d34b17a177b-image-1478732674613.32.53.png" width="200px"/>

          This image was made using similar code to other levels you've done before, but with circles (repeat 360 times: move forward 1, turn 1 degree).
        courseD_artist_nestedLoopsFP_c: |-
          <img src="https://images.code.org/f654f1512860c6c8cf6795c961a8959c-image-1478732674616.02.58.png" width="200px"/>

          This image was made using a single nested loop that repeats a pentagon (with 50px sides) 15 times using a 48 degree turn.
      courseD_artist_nestedLoopsFP_2019:
        courseD_artist_nestedLoopsFP_a: |-
          <img src="https://images.code.org/9257cbf61f238f5a749a949059731934-image-1478732674615.02.25.png" width="200px"/>

          This image was made using a single nested loop that repeats a hexagon (with 50px sides) 15 times using a 48 degree turn.
        courseD_artist_nestedLoopsFP_b: |-
          <img src="https://images.code.org/31a85d4e5be5209240195d34b17a177b-image-1478732674613.32.53.png" width="200px"/>

          This image was made using similar code to other levels you've done before, but with circles (repeat 360 times: move forward 1, turn 1 degree).
        courseD_artist_nestedLoopsFP_c: |-
          <img src="https://images.code.org/f654f1512860c6c8cf6795c961a8959c-image-1478732674616.02.58.png" width="200px"/>

          This image was made using a single nested loop that repeats a pentagon (with 50px sides) 15 times using a 48 degree turn.
      courseD_artist_nestedLoops_challenge1:
        courseD_artist_nestedLoops_challenge1_a: Start by changing the color to blue,
          then create an octagon with 50 pixel sides and 45 degree left turns.
        courseD_artist_nestedLoops_challenge1_b: Add the code to change the color
          to green, and make a triangle with 50 pixel sides and 120 degree left turns.
        courseD_artist_nestedLoops_challenge1_c: After you've drawn both shapes, you
          will need to jump forward by 50 pixels before you turn right by 90 degrees.
        courseD_artist_nestedLoops_challenge1_d: Put all of your code inside of a
          `repeat 4 times` loop to finish it off.
      courseD_artist_nestedLoops_challenge1_2018:
        courseD_artist_nestedLoops_challenge1_a: Start by changing the color to blue,
          then create an octagon with 50 pixel sides and 45 degree left turns.
        courseD_artist_nestedLoops_challenge1_b: Add the code to change the color
          to green, and make a triangle with 50 pixel sides and 120 degree left turns.
        courseD_artist_nestedLoops_challenge1_c: After you've drawn both shapes, you
          will need to jump forward by 50 pixels before you turn right by 90 degrees.
        courseD_artist_nestedLoops_challenge1_d: Put all of your code inside of a
          `repeat 4 times` loop to finish it off.
      courseD_artist_nestedLoops_challenge1_2019:
        courseD_artist_nestedLoops_challenge1_a: Start by changing the color to blue,
          then create an octagon with 50 pixel sides and 45 degree left turns.
        courseD_artist_nestedLoops_challenge1_b: Add the code to change the color
          to green, and make a triangle with 50 pixel sides and 120 degree left turns.
        courseD_artist_nestedLoops_challenge1_c: After you've drawn both shapes, you
          will need to jump forward by 50 pixels before you turn right by 90 degrees.
        courseD_artist_nestedLoops_challenge1_d: Put all of your code inside of a
          `repeat 4 times` loop to finish it off.
      courseD_artist_nestedLoops_challenge2:
        courseD_artist_nestedLoops_challenge2_a: To draw a regular octagon, the artist
          needs to turn 45 degrees 8 times.
        courseD_artist_nestedLoops_challenge2_b: To draw a square, the artist needs
          to turn 90 degrees 4 times.
      courseD_artist_nestedLoops_challenge2_2018:
        courseD_artist_nestedLoops_challenge2_a: To draw a regular octagon, the artist
          needs to turn 45 degrees 8 times.
        courseD_artist_nestedLoops_challenge2_b: To draw a square, the artist needs
          to turn 90 degrees 4 times.
      courseD_artist_nestedLoops_challenge2_2019:
        courseD_artist_nestedLoops_challenge2_a: To draw a regular octagon, the artist
          needs to turn 45 degrees 8 times.
        courseD_artist_nestedLoops_challenge2_b: To draw a square, the artist needs
          to turn 90 degrees 4 times.
      courseD_artist_project1:
        courseD_artist_project1_a: Use the drop down menu on the `turn` blocks to
          choose the angle you need!
        courseD_artist_project1_b: Remember that `move forward` draws a line, while
          `jump forward` does not.
      courseD_artist_project1_2018:
        courseD_artist_project1_a: Use the drop down menu on the `turn` blocks to
          choose the angle you need!
        courseD_artist_project1_b: Remember that `move forward` draws a line, while
          `jump forward` does not.
      courseD_artist_project1_2019:
        courseD_artist_project1_a: Use the drop down menu on the `turn` blocks to
          choose the angle you need!
        courseD_artist_project1_b: Remember that `move forward` draws a line, while
          `jump forward` does not.
      courseD_artist_project1a:
        courseD_artist_project1a_a: |-
          This stair step uses a 76 degree turn and repeats 4 times.

          <img src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png" width="200px" />
        courseD_artist_project1a_b: These patterns are a lot like the stair steps
          from other puzzles, but using a different angle.
      courseD_artist_project1a_2018:
        courseD_artist_project1a_a: |-
          This stair step uses a 76 degree turn and repeats 4 times.

          <img src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png" width="200px" />
        courseD_artist_project1a_b: These patterns are a lot like the stair steps
          from other puzzles, but using a different angle.
      courseD_artist_project1a_2019:
        courseD_artist_project1a_a: |-
          This stair step uses a 76 degree turn and repeats 4 times.

          <img src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png" width="200px" />
        courseD_artist_project1a_b: These patterns are a lot like the stair steps
          from other puzzles, but using a different angle.
      courseD_artist_project2:
        courseD_artist_project2_a: Remember that `move forward` draws a line, while
          `jump forward` does not.
        courseD_artist_project2_b: After you draw and move the first time, you can
          repeat the code by adding a loop around the outside.
      courseD_artist_project2_2018:
        courseD_artist_project2_a: Remember that `move forward` draws a line, while
          `jump forward` does not.
        courseD_artist_project2_b: After you draw and move the first time, you can
          repeat the code by adding a loop around the outside.
      courseD_artist_project2_2019:
        courseD_artist_project2_a: Remember that `move forward` draws a line, while
          `jump forward` does not.
        courseD_artist_project2_b: After you draw and move the first time, you can
          repeat the code by adding a loop around the outside.
      courseD_artist_project2a:
        courseD_artist_project2a_a: |-
          This drawing was made by nesting a loop of 4 stairs and a `turn right 180 degrees` block inside of a `repeat 2 times` block.

          <img src="https://images.code.org/bb24f9acee8afed2e119c1e920cb43f6-image-1495834479042.16.27.png" width="200px" />
      courseD_artist_project2a_2018:
        courseD_artist_project2a_a: |-
          This drawing was made by nesting a loop of 4 stairs and a `turn right 180 degrees` block inside of a `repeat 2 times` block.

          <img src="https://images.code.org/bb24f9acee8afed2e119c1e920cb43f6-image-1495834479042.16.27.png" width="200px" />
      courseD_artist_project2a_2019:
        courseD_artist_project2a_a: |-
          This drawing was made by nesting a loop of 4 stairs and a `turn right 180 degrees` block inside of a `repeat 2 times` block.

          <img src="https://images.code.org/bb24f9acee8afed2e119c1e920cb43f6-image-1495834479042.16.27.png" width="200px" />
      courseD_artist_project3:
        courseD_artist_project3_a: Use the drop down menu on the `turn` blocks to
          choose the angle you need!
        courseD_artist_project3_b: "Try nested loops!\n\nUse the code that you created
          to draw a line of shapes and nest it inside of another loop.  At the bottom,
          before the outside loop ends, add a block that will turn Elsa around.  \n\n-
          \  Try 72 degrees if you are repeating the outer loop 5 times\n-   Try 60
          degrees if you are repeating the outer loop 6 times"
      courseD_artist_project3_2018:
        courseD_artist_project3_a: Use the drop down menu on the `turn` blocks to
          choose the angle you need!
        courseD_artist_project3_b: "Try nested loops!\n\nUse the code that you created
          to draw a line of shapes and nest it inside of another loop.  At the bottom,
          before the outside loop ends, add a block that will turn Elsa around.  \n\n-
          \  Try 72 degrees if you are repeating the outer loop 5 times\n-   Try 60
          degrees if you are repeating the outer loop 6 times"
      courseD_artist_project3_2019:
        courseD_artist_project3_a: Use the drop down menu on the `turn` blocks to
          choose the angle you need!
        courseD_artist_project3_b: "Try nested loops!\n\nUse the code that you created
          to draw a line of shapes and nest it inside of another loop.  At the bottom,
          before the outside loop ends, add a block that will turn Elsa around.  \n\n-
          \  Try 72 degrees if you are repeating the outer loop 5 times\n-   Try 60
          degrees if you are repeating the outer loop 6 times"
      courseD_artist_project3a:
        courseD_artist_project3a_a: You can choose different amounts to rotate your
          shape! What about 18 times with a 20 degree turn in between?
      courseD_artist_project3a_2018:
        courseD_artist_project3a_a: You can choose different amounts to rotate your
          shape! What about 18 times with a 20 degree turn in between?
      courseD_artist_project3a_2019:
        courseD_artist_project3a_a: You can choose different amounts to rotate your
          shape! What about 18 times with a 20 degree turn in between?
      courseD_artist_project4:
        courseD_artist_project4_a: |-
          Here is the pentagon snowflake with a turn of 36 degrees before a triangle snowflake:

          <img src="https://images.code.org/2ba023db9404f948fab655bfa7923160-image-1495822526223.14.13.png" width="200px" />

          Here's a set of hexagons with squares:

          <img src="https://images.code.org/4d77462f3d07df6f1f5f2dc25e5d2b70-image-1495822526224.15.08.png" width="200px" />
        courseD_artist_project4_b: To try this, draw your first snowflake, turn, then
          draw a second snowflake.
      courseD_artist_project4_2018:
        courseD_artist_project4_a: |-
          Here is the pentagon snowflake with a turn of 36 degrees before a triangle snowflake:

          <img src="https://images.code.org/2ba023db9404f948fab655bfa7923160-image-1495822526223.14.13.png" width="200px" />

          Here's a set of hexagons with squares:

          <img src="https://images.code.org/4d77462f3d07df6f1f5f2dc25e5d2b70-image-1495822526224.15.08.png" width="200px" />
        courseD_artist_project4_b: To try this, draw your first snowflake, turn, then
          draw a second snowflake.
      courseD_artist_project4_2019:
        courseD_artist_project4_a: |-
          Here is the pentagon snowflake with a turn of 36 degrees before a triangle snowflake:

          <img src="https://images.code.org/2ba023db9404f948fab655bfa7923160-image-1495822526223.14.13.png" width="200px" />

          Here's a set of hexagons with squares:

          <img src="https://images.code.org/4d77462f3d07df6f1f5f2dc25e5d2b70-image-1495822526224.15.08.png" width="200px" />
        courseD_artist_project4_b: To try this, draw your first snowflake, turn, then
          draw a second snowflake.
      courseD_artist_project4a:
        courseD_artist_project4a_a: |-
          Here are two different lengths of snowflake, drawn one after another (with a 30 degree turn in between.)

          <img src="https://images.code.org/45dedb51d89d3e5d0a88fe65ecbd7d7b-image-1495833855890.22.39.png" width="200px" />
      courseD_artist_project4a_2018:
        courseD_artist_project4a_a: |-
          Here are two different lengths of snowflake, drawn one after another (with a 30 degree turn in between.)

          <img src="https://images.code.org/45dedb51d89d3e5d0a88fe65ecbd7d7b-image-1495833855890.22.39.png" width="200px" />
      courseD_artist_project4a_2019:
        courseD_artist_project4a_a: |-
          Here are two different lengths of snowflake, drawn one after another (with a 30 degree turn in between.)

          <img src="https://images.code.org/45dedb51d89d3e5d0a88fe65ecbd7d7b-image-1495833855890.22.39.png" width="200px" />
      courseD_artist_project5:
        courseD_artist_project4_a: |-
          Lines of 2 hexagons and 4 triangles:

          <img src="https://images.code.org/37ca9779bafd2ccc5cc801f82358008e-image-1495823683964.34.09.png" width="200px" />
      courseD_artist_project5_2018:
        courseD_artist_project4_a: |-
          Lines of 2 hexagons and 4 triangles:

          <img src="https://images.code.org/37ca9779bafd2ccc5cc801f82358008e-image-1495823683964.34.09.png" width="200px" />
      courseD_artist_project5_2019:
        courseD_artist_project4_a: |-
          Lines of 2 hexagons and 4 triangles:

          <img src="https://images.code.org/37ca9779bafd2ccc5cc801f82358008e-image-1495823683964.34.09.png" width="200px" />
      courseD_artist_ramp11:
        courseD_artist_ramp11a: To draw a side, use the `move forward by 100 pixels`
          block, and change the 100 to a 200.
        courseD_artist_ramp11b: |-
          To draw 4 sides, put a `move forward by 200 pixels` block inside of a repeat loop and make sure the loop is set to draw 4 times.

          Don't forget to turn afterward!
        courseD_artist_ramp11_c: Pamiętaj o umieszczeniu bloku `turn` wewnątrz twojej
          pętli!
      courseD_artist_ramp12:
        courseD_artist_ramp12_a: Możesz najpierw narysować kwadrat, a potem trójkąt,
          albo odwrotnie!
        courseD_artist_ramp12_b: Spróbuj podzielić problem na 2 części wykorzystując
          2 pętle.
        courseD_artist_ramp12_c: You can use the drop down menu on the `turn` blocks
          to see which angle you need!
      courseD_autorun_binary2_2019:
        courseD_artist_binary2_a: Just click `Run` to see this program in action!
      courseD_autorun_binary3_2019:
        courseD_artist_binary3_a: Jeden z czterech binarnych wzorów w przyborniku
          rozwiąże tą zagadkę!
        courseD_artist_binary3_b: Don't be afraid to make a mistake! Try writing binary
          and running the code to see what will happen, even if you haven't solved
          the puzzle yet.
      courseD_autorun_binary4_2019:
        courseD_artist_binary4_a: Look at the first three squares on the top row.
          Could you repeat these three to get the whole pattern?
        courseD_artist_binary4_b: Don't be afraid to make a mistake! Try writing binary
          and running the code to see what will happen, even if you don't think you've
          solved the puzzle yet.
      courseD_autorun_binary5_2019:
        courseD_artist_binary5_a: Try running the code first to see what you have
          to work with.
        courseD_artist_binary5_b: You only need to switch two rows to make a smile.
        courseD_artist_binary5_c: If you are having trouble figuring this puzzle out,
          try writing the binary lines down on a piece of paper and looking for a
          pattern.
      courseD_autorun_binary6_2019:
        courseD_artist_binary6_a: Start at the top left. How far do you have to read
          before the pattern starts to repeat?
        courseD_artist_binary6_b: You can build your binary string a bit at a time,
          and keep testing!
      courseD_autorun_binary7_2019:
        courseD_artist_binary7_a: Start at the top left. How far do you have to read
          before the pattern starts to repeat?
        courseD_artist_binary7_b: Don't be afraid to make a mistake! Try writing binary
          and running the code to see what will happen, even if you don't think you've
          solved the puzzle yet.
      courseD_autorun_binary8_2019:
        courseD_artist_binary8_a: The spiral can be confusing sometimes. Isolate each
          horizontal line in your mind as you create this design.
        courseD_artist_binary8_b: Try running the code first to see what you have
          to work with.
        courseD_artist_binary8_c: Don't be afraid to make a mistake! Try writing binary
          and running the code to see what will happen, even if you haven't solved
          the puzzle yet.
      courseD_bee_conditionals1_predict1:
        courseD_bee_conditionals1_a: You will need to use an `if` block to check to
          see if there is a flower beneath the cloud before you try to get nectar.
      courseD_bee_conditionals1_predict1_2018:
        courseD_bee_conditionals1_a: You will need to use an `if` block to check to
          see if there is a flower beneath the cloud before you try to get nectar.
      courseD_bee_conditionals1_predict1_2019:
        courseD_bee_conditionals1_a: You will need to use an `if` block to check to
          see if there is a flower beneath the cloud before you try to get nectar.
      courseD_bee_conditionals1_predict1_copy:
        courseD_bee_conditionals1_a: You will need to use an `if` block to check to
          see if there is a flower beneath the cloud before you try to get nectar.
      courseD_bee_conditionals2:
        courseD_bee_conditionals2_hintVid1: Potrzebujesz pomocy, aby zacząć? Obejrzyj
          film!
        courseD_bee_conditionals2_a: Sometimes a flower will be there, sometimes it
          won't.  If you want your code to run in both cases, make sure to use an
          `if` statement.
        courseD_bee_conditionals2_b: Możesz wykorzystać pętlę `repeat` albo `while
          path ahead`, aby przejść przez ten labirynt.
        courseD_bee_conditionals2_c: You don't have to check for honeycombs, there
          will only be flowers or blank spaces under the clouds.
        courseD_bee_conditionals2_hintVid2: Obejrzyj ten film, aby otrzymać pomoc
          w rozwiązaniu tej zagadki.
      courseD_bee_conditionals2_2018:
        courseD_bee_conditionals2_hintVid1: Potrzebujesz pomocy, aby zacząć? Obejrzyj
          film!
        courseD_bee_conditionals2_a: Sometimes a flower will be there, sometimes it
          won't.  If you want your code to run in both cases, make sure to use an
          `if` statement.
        courseD_bee_conditionals2_b: Możesz wykorzystać pętlę `repeat` albo `while
          path ahead`, aby przejść przez ten labirynt.
        courseD_bee_conditionals2_c: You don't have to check for honeycombs, there
          will only be flowers or blank spaces under the clouds.
        courseD_bee_conditionals2_hintVid2: Obejrzyj ten film, aby otrzymać pomoc
          w rozwiązaniu tej zagadki.
      courseD_bee_conditionals2_2019:
        courseD_bee_conditionals2_a: Sometimes a flower will be there, sometimes it
          won't.  If you want your code to run in both cases, make sure to use an
          `if` statement.
        courseD_bee_conditionals2_c: You don't have to check for honeycombs, there
          will only be flowers or blank spaces under the clouds.
      courseD_bee_conditionals2_copy:
        courseD_bee_conditionals2_hintVid1: Potrzebujesz pomocy, aby zacząć? Obejrzyj
          film!
        courseD_bee_conditionals2_a: Sometimes a flower will be there, sometimes it
          won't.  If you want your code to run in both cases, make sure to use an
          `if` statement.
        courseD_bee_conditionals2_b: Możesz wykorzystać pętlę `repeat` albo `while
          path ahead`, aby przejść przez ten labirynt.
        courseD_bee_conditionals2_c: You don't have to check for honeycombs, there
          will only be flowers or blank spaces under the clouds.
        courseD_bee_conditionals2_hintVid2: Obejrzyj ten film, aby otrzymać pomoc
          w rozwiązaniu tej zagadki.
      courseD_bee_conditionals3:
        courseD_bee_conditionals3_hintVid1: Potrzebujesz pomocy, aby zacząć? Obejrzyj
          film!
        courseD_bee_conditionals3_a: Be sure to use an `if` statement to check each
          space to see if it has either a flower or nothing.
        courseD_bee_conditionals3_b: You can use a `repeat` loop or a `while` loop
          to keep the bee moving forward. Use whichever one you like!
        courseD_bee_conditionals3_c: Don't be afraid to make a mistake! Try adding
          blocks and running the code to see what will happen, even if you haven't
          solved the puzzle yet.
        courseD_bee_conditionals3_hintVid2: Obejrzyj ten film, aby otrzymać pomoc
          w rozwiązaniu tej zagadki.
      courseD_bee_conditionals3_2018:
        courseD_bee_conditionals3_hintVid1: Potrzebujesz pomocy, aby zacząć? Obejrzyj
          film!
        courseD_bee_conditionals3_a: Be sure to use an `if` statement to check each
          space to see if it has either a flower or nothing.
        courseD_bee_conditionals3_b: You can use a `repeat` loop or a `while` loop
          to keep the bee moving forward. Use whichever one you like!
        courseD_bee_conditionals3_c: Don't be afraid to make a mistake! Try adding
          blocks and running the code to see what will happen, even if you haven't
          solved the puzzle yet.
        courseD_bee_conditionals3_hintVid2: Obejrzyj ten film, aby otrzymać pomoc
          w rozwiązaniu tej zagadki.
      courseD_bee_conditionals3_2019:
        courseD_bee_conditionals3_a: Be sure to use an `if` statement to check each
          space to see if it has either a flower or nothing.
        courseD_bee_conditionals3_c: Don't be afraid to make a mistake! Try adding
          blocks and running the code to see what will happen, even if you haven't
          solved the puzzle yet.
      courseD_bee_conditionals3_copy:
        courseD_bee_conditionals3_hintVid1: Potrzebujesz pomocy, aby zacząć? Obejrzyj
          film!
        courseD_bee_conditionals3_a: Be sure to use an `if` statement to check each
          space to see if it has either a flower or nothing.
        courseD_bee_conditionals3_b: You can use a `repeat` loop or a `while` loop
          to keep the bee moving forward. Use whichever one you like!
        courseD_bee_conditionals3_c: Don't be afraid to make a mistake! Try adding
          blocks and running the code to see what will happen, even if you haven't
          solved the puzzle yet.
        courseD_bee_conditionals3_hintVid2: Obejrzyj ten film, aby otrzymać pomoc
          w rozwiązaniu tej zagadki.
      courseD_bee_conditionals4:
        courseD_bee_conditionals4_hintVid1: Potrzebujesz pomocy, aby zacząć? Obejrzyj
          film!
        courseD_bee_conditionals4_a: You can still treat every space as if there is
          a cloud over it, even though you can see the whole path.
        courseD_bee_conditionals4_b: 'Use an `if` statement inside your loop to check
          each space for nectar. '
        courseD_bee_conditionals4_c: Using <xml><block type="maze_untilBlocked"/></xml>
          block, you should move forward and check for a flower. If there is a flower,
          what should the bee do?
        courseD_bee_conditionals4_hintVid2: Obejrzyj ten film, aby otrzymać pomoc
          w rozwiązaniu tej zagadki.
      courseD_bee_conditionals4_2018:
        courseD_bee_conditionals4_hintVid1: Potrzebujesz pomocy, aby zacząć? Obejrzyj
          film!
        courseD_bee_conditionals4_a: You can still treat every space as if there is
          a cloud over it, even though you can see the whole path.
        courseD_bee_conditionals4_b: 'Use an `if` statement inside your loop to check
          each space for nectar. '
        courseD_bee_conditionals4_c: Using <xml><block type="maze_untilBlocked"/></xml>
          block, you should move forward and check for a flower. If there is a flower,
          what should the bee do?
        courseD_bee_conditionals4_hintVid2: Obejrzyj ten film, aby otrzymać pomoc
          w rozwiązaniu tej zagadki.
      courseD_bee_conditionals4_2019:
        courseD_bee_conditionals4_a: You can still treat every space as if there is
          a cloud over it, even though you can see the whole path.
        courseD_bee_conditionals4_b: 'Use an `if` statement inside your loop to check
          each space for nectar. '
      courseD_bee_conditionals4_copy:
        courseD_bee_conditionals4_hintVid1: Potrzebujesz pomocy, aby zacząć? Obejrzyj
          film!
        courseD_bee_conditionals4_a: You can still treat every space as if there is
          a cloud over it, even though you can see the whole path.
        courseD_bee_conditionals4_b: 'Use an `if` statement inside your loop to check
          each space for nectar. '
        courseD_bee_conditionals4_c: Using <xml><block type="maze_untilBlocked"/></xml>
          block, you should move forward and check for a flower. If there is a flower,
          what should the bee do?
        courseD_bee_conditionals4_hintVid2: Obejrzyj ten film, aby otrzymać pomoc
          w rozwiązaniu tej zagadki.
      courseD_bee_conditionals5:
        courseD_bee_conditionals5_hintVid1: Potrzebujesz pomocy, aby zacząć? Obejrzyj
          film!
        courseD_bee_conditionals5_a: Think of every side of the rectangular path as
          a path by itself. Set up a nested loop with a `repeat` block on the outside
          and a `while there is a path ahead` loop on the inside. How many paths does
          the bee need to buzz down if the bee needs to buzz down every side with
          a flower?
        courseD_bee_conditionals5_c: There are 3 sides of the rectangle with flowers,
          so the code needs to `repeat 3 times`. In every repeat, the bee will need
          to continue along the path, `while there is a path ahead`. To continue down
          the path, the bee will need to `move forward`. While on the path, the bee
          needs to check for a flower. `if there is a flower`, the bee should `get
          nectar`.
        courseD_bee_conditionals5_b: Inside the `while there is a path ahead` block
          you will need to move forward and check for a flower. How do you check if
          there is a flower? What do you do if there is a flower?
        courseD_bee_conditionals5_hintVid2: Obejrzyj ten film, aby otrzymać pomoc
          w rozwiązaniu tej zagadki.
      courseD_bee_conditionals5_2018:
        courseD_bee_conditionals5_hintVid1: Potrzebujesz pomocy, aby zacząć? Obejrzyj
          film!
        courseD_bee_conditionals5_a: Think of every side of the rectangular path as
          a path by itself. Set up a nested loop with a `repeat` block on the outside
          and a `while path ahead` loop on the inside. How many paths does the bee
          need to buzz down if the bee needs to buzz down every side with a flower?
        courseD_bee_conditionals5_c: There are 3 sides of the rectangle with flowers,
          so the code needs to `repeat 3 times`. In every repeat, the bee will need
          to continue along the path, `while path ahead`. To continue down the path,
          the bee will need to `move forward`. While on the path, the bee needs to
          check for a flower. `if there is a flower`, the bee should `get nectar`.
        courseD_bee_conditionals5_b: Inside the `while path ahead` block you will
          need to move forward and check for a flower. How do you check if there is
          a flower? What do you do if there is a flower?
        courseD_bee_conditionals5_hintVid2: Obejrzyj ten film, aby otrzymać pomoc
          w rozwiązaniu tej zagadki.
      courseD_bee_conditionals5_2019:
        courseD_bee_conditionals5_a: If you use an `if at flower` block, you can solve
          this using a nested loop. Write a program for the left and bottom paths,
          then repeat everything twice!
        courseD_bee_conditionals5_c: To continue down the path, the bee will need
          to `move forward`. As it moves, the bee needs to check for a flower. `if
          there is a flower`, the bee should `get nectar`.
      courseD_bee_conditionals5_copy:
        courseD_bee_conditionals5_hintVid1: Potrzebujesz pomocy, aby zacząć? Obejrzyj
          film!
        courseD_bee_conditionals5_a: Think of every side of the rectangular path as
          a path by itself. Set up a nested loop with a `repeat` block on the outside
          and a `while there is a path ahead` loop on the inside. How many paths does
          the bee need to buzz down if the bee needs to buzz down every side with
          a flower?
        courseD_bee_conditionals5_c: There are 3 sides of the rectangle with flowers,
          so the code needs to `repeat 3 times`. In every repeat, the bee will need
          to continue along the path, `while there is a path ahead`. To continue down
          the path, the bee will need to `move forward`. While on the path, the bee
          needs to check for a flower. `if there is a flower`, the bee should `get
          nectar`.
        courseD_bee_conditionals5_b: Inside the `while there is a path ahead` block
          you will need to move forward and check for a flower. How do you check if
          there is a flower? What do you do if there is a flower?
        courseD_bee_conditionals5_hintVid2: Obejrzyj ten film, aby otrzymać pomoc
          w rozwiązaniu tej zagadki.
      courseD_bee_conditionals6:
        courseD_bee_conditionals6_hintVid1: Potrzebujesz pomocy, aby zacząć? Obejrzyj
          film!
        courseD_bee_conditionals6_a: Make sure to use an `if` statement to check for
          honeycomb beneath each cloud.
        courseD_bee_conditionals6_b: In this case, you do not need to check for flowers
          under the clouds.
        courseD_bee_conditionals6_c: Czy jest pętla, której możesz użyć, aby uprościć
          twój kod?
        courseD_bee_conditionals6_hintVid2: Obejrzyj ten film, aby otrzymać pomoc
          w rozwiązaniu tej zagadki.
      courseD_bee_conditionals6_2018:
        courseD_bee_conditionals6_hintVid1: Potrzebujesz pomocy, aby zacząć? Obejrzyj
          film!
        courseD_bee_conditionals6_a: Make sure to use an `if` statement to check for
          honeycomb beneath each cloud.
        courseD_bee_conditionals6_b: In this case, you do not need to check for flowers
          under the clouds.
        courseD_bee_conditionals6_c: Czy jest pętla, której możesz użyć, aby uprościć
          twój kod?
        courseD_bee_conditionals6_hintVid2: Obejrzyj ten film, aby otrzymać pomoc
          w rozwiązaniu tej zagadki.
      courseD_bee_conditionals6_2019:
        courseD_bee_conditionals6_a: Make sure to use an `if` statement to check for
          honeycomb beneath each cloud.
        courseD_bee_conditionals6_b: In this case, you do not need to check for flowers
          under the clouds.
        courseD_bee_conditionals6_c: Czy jest pętla, której możesz użyć, aby uprościć
          twój kod?
      courseD_bee_conditionals7:
        courseD_bee_conditionals7_hintVid1: Potrzebujesz pomocy, aby zacząć? Obejrzyj
          film!
        courseD_bee_conditionals7_a: "**Remember:** This puzzle changes each time
          it's run.  \n\nYou'll want to use a conditional block (`if/else`) to solve
          the challenge."
        courseD_bee_conditionals7_b: If there is not a flower under the cloud, there
          must be a honeycomb, so you don't need to think about the case of an empty
          space.
        courseD_bee_conditionals7_hintVid2: Obejrzyj ten film, aby otrzymać pomoc
          w rozwiązaniu tej zagadki.
      courseD_bee_conditionals7_2018:
        courseD_bee_conditionals7_hintVid1: Potrzebujesz pomocy, aby zacząć? Obejrzyj
          film!
        courseD_bee_conditionals7_a: "**Remember:** This puzzle changes each time
          it's run.  \n\nYou'll want to use a conditional block (`if/else`) to solve
          the challenge."
        courseD_bee_conditionals7_b: If there is not a flower under the cloud, there
          must be a honeycomb, so you don't need to think about the case of an empty
          space.
        courseD_bee_conditionals7_hintVid2: Obejrzyj ten film, aby otrzymać pomoc
          w rozwiązaniu tej zagadki.
      courseD_bee_conditionals7_2019:
        courseD_bee_conditionals7_a: "**Remember:** This puzzle changes each time
          it's run.  \n\nYou'll want to use a conditional block (`if/else`) to solve
          the challenge."
        courseD_bee_conditionals7_b: If there is not a flower under the cloud, there
          must be a honeycomb, so you don't need to think about the case of an empty
          space.
      courseD_bee_conditionals7_predict2:
        courseD_bee_conditionals7_a: "**Remember:** This puzzle changes each time
          it's run.  \n\nYou'll want to use a conditional block (`if/else`) to solve
          the challenge."
      courseD_bee_conditionals7_predict2_2018:
        courseD_bee_conditionals7_a: "**Remember:** This puzzle changes each time
          it's run.  \n\nYou'll want to use a conditional block (`if/else`) to solve
          the challenge."
      courseD_bee_conditionals7_predict2_2019:
        courseD_bee_conditionals7_a: "**Remember:** This puzzle changes each time
          it's run.  \n\nYou'll want to use a conditional block (`if/else`) to solve
          the challenge."
      courseD_bee_conditionals8:
        courseD_bee_conditionals8_hintVid1: Potrzebujesz pomocy, aby zacząć? Obejrzyj
          film!
        courseD_bee_conditionals8_a: |-
          \*\* Pamiętaj: \*\*

          Ta plansza jest inna za każdym uruchomieniem.

          Będziesz potrzebował użyć bloku warunkowego ('if' lub ' if/else') do rozwiązania problemu.
        courseD_bee_conditionals8_b: |-
          This puzzle is tricky, because you can't check blank squares, nectar, _and_ honey with just one single conditional.

          Only check for nectar and honey at the end of your path.
        courseD_bee_conditionals8_c: How can you make sure to travel to the end every
          path, no matter how long the path is?
        courseD_bee_conditionals8_d: |-
          Even though there is a cloud right in front of you, you don't have to visit it first. Try starting with the cloud in the bottom right of the square.

          ![](https://images.code.org/166e71553edf23bf13ecd290a8e7e721-image-1501013509361.09.09.png)
        courseD_bee_conditionals8_hintVid2: Obejrzyj ten film, aby otrzymać pomoc
          w rozwiązaniu tej zagadki.
      courseD_bee_conditionals8_2018:
        courseD_bee_conditionals8_hintVid1: Potrzebujesz pomocy, aby zacząć? Obejrzyj
          film!
        courseD_bee_conditionals8_a: |-
          \*\* Pamiętaj: \*\*

          Ta plansza jest inna za każdym uruchomieniem.

          Będziesz potrzebował użyć bloku warunkowego ('if' lub ' if/else') do rozwiązania problemu.
        courseD_bee_conditionals8_b: |-
          This puzzle is tricky, because you can't check blank squares, nectar, _and_ honey with just one single conditional.

          Only check for nectar and honey at the end of your path.
        courseD_bee_conditionals8_c: How can you make sure to travel to the end every
          path, no matter how long the path is?
        courseD_bee_conditionals8_d: |-
          Even though there is a cloud right in front of you, you don't have to visit it first. Try starting with the cloud in the bottom right of the square.

          ![](https://images.code.org/166e71553edf23bf13ecd290a8e7e721-image-1501013509361.09.09.png)
        courseD_bee_conditionals8_hintVid2: Obejrzyj ten film, aby otrzymać pomoc
          w rozwiązaniu tej zagadki.
      courseD_bee_conditionals8_2019:
        courseD_bee_conditionals8_a: |-
          \*\* Pamiętaj: \*\*

          Ta plansza jest inna za każdym uruchomieniem.

          Będziesz potrzebował użyć bloku warunkowego ('if' lub ' if/else') do rozwiązania problemu.
        courseD_bee_conditionals8_b: |-
          This puzzle is tricky, because you can't check blank squares, nectar, _and_ honey with just one single conditional.

          Only check for nectar and honey at the end of your path.
      courseD_bee_conditionals_challenge1:
        courseD_bee_conditionals_challenge1_a: Can you find a path that reaches every
          flower and honeycomb without hitting any trees? The best path is a spiral.
        courseD_bee_conditionals_challenge1_b: In this puzzle, each space could have
          a flower, a honey comb, or nothing.  That means you can repeat your `if/else`
          conditional at each square.
      courseD_bee_conditionals_challenge1_2018:
        courseD_bee_conditionals_challenge1_a: Can you find a path that reaches every
          flower and honeycomb without hitting any trees? The best path is a spiral.
        courseD_bee_conditionals_challenge1_b: In this puzzle, each space could have
          a flower, a honey comb, or nothing.  That means you can repeat your `if/else`
          conditional at each square.
      courseD_bee_conditionals_challenge1_2019:
        courseD_bee_conditionals_challenge1_a: Can you find a path that reaches every
          flower and honeycomb without hitting any trees? The best path is a spiral.
        courseD_bee_conditionals_challenge1_b: In this puzzle, each space could have
          a flower, a honey comb, or nothing.  That means you can repeat your `if/else`
          conditional at each square.
      courseD_bee_conditionals_challenge2:
        courseD_bee_conditionals_challenge1_b: |-
          Just like the `if at flower` blocks, the code inside a `while nectar > 0` will only run if the bee is at a flower. The difference is that the code inside will run over and over until there is no nectar left.  Try this pattern:

          <xml>  <block type="bee_whileNectarAmount">
              <title name="ARG1">nectarRemaining</title>
              <title name="OP">&gt;</title>
              <title name="ARG2">0</title>                    <statement name="DO">
                                <block type="maze_nectar"/>
                              </statement>
            </block></xml>
      courseD_bee_conditionals_challenge2_2018:
        courseD_bee_conditionals_challenge1_b: |-
          Just like the `if at flower` blocks, the code inside a `while nectar > 0` will only run if the bee is at a flower. The difference is that the code inside will run over and over until there is no nectar left.  Try this pattern:

          <xml>  <block type="bee_whileNectarAmount">
              <title name="ARG1">nectarRemaining</title>
              <title name="OP">&gt;</title>
              <title name="ARG2">0</title>                    <statement name="DO">
                                <block type="maze_nectar"/>
                              </statement>
            </block></xml>
      courseD_bee_conditionals_challenge2_2019:
        courseD_bee_conditionals_challenge1_b: |-
          Just like the `if at flower` blocks, the code inside a `while nectar > 0` will only run if the bee is at a flower. The difference is that the code inside will run over and over until there is no nectar left.  Try this pattern:

          <xml>  <block type="bee_whileNectarAmount">
              <title name="ARG1">nectarRemaining</title>
              <title name="OP">&gt;</title>
              <title name="ARG2">0</title>                    <statement name="DO">
                                <block type="maze_nectar"/>
                              </statement>
            </block></xml>
      courseD_bee_debugging_challenge1:
        courseD_bee_debugging_challenge1_a: Why does the first half of this program
          work? Think about why the bee needs to move backward. How much nectar does
          the bee collect each time it moves over a flower?
        courseD_bee_debugging_challenge1_b: On the way back, have the bee follow the
          same pattern. How much honey does the bee need to make each time it moves
          over a honey comb?
        courseD_bee_debugging_challenge1_c: |-
          After the bee makes it to the bottom row, have it repeat these commands:

          -   Repeat 2 times:
              -   Move forward
              -   Make 3 honey
          -   Move backward
      courseD_bee_debugging_challenge1a:
        courseD_bee_debugging_challenge1_a: Why does the first half of this program
          work? Think about why the bee needs to move backward. How much nectar does
          the bee collect each time it moves over a flower?
        courseD_bee_debugging_challenge1_b: To solve this puzzle, have the bee follow
          the same pattern to make honey that it does when collecting nectar.
        courseD_bee_debugging_challenge1_c: |-
          After the bee makes it to the bottom row, have it repeat these commands:

          <xml><block type="controls_repeat">
                              <title name="TIMES">2</title>
                              <statement name="DO">
                                <block type="maze_move">
                                  <title name="DIR">moveForward</title>
                                  <next>
                                    <block type="maze_honey"/>
                                  </next>
                                </block>
                              </statement>
                              <next>
                                <block type="maze_move">
                                  <title name="DIR">moveBackward</title>
                                </block>
                              </next>
                            </block></xml>
      courseD_bee_nestedLoops1:
        courseD_bee_nestedLoops1_a: Not working?  Try using the "Step" button to see
          what happens line by line.
        courseD_bee_nestedLoops1_b: Try writing code for one side of the square first.
          Can you loop this to get all of the nectar?
        courseD_bee_nestedLoops1_c: Remember to use the `get nectar` block once you
          are on a square with a flower.
      courseD_bee_nestedLoops1_2018:
        courseD_bee_nestedLoops1_a: Not working?  Try using the "Step" button to see
          what happens line by line.
        courseD_bee_nestedLoops1_b: Try writing code for one side of the square first.
          Can you loop this to get all of the nectar?
        courseD_bee_nestedLoops1_c: Remember to use the `get nectar` block once you
          are on a square with a flower.
      courseD_bee_nestedLoops1_2019:
        courseD_bee_nestedLoops1_a: Not working?  Try using the "Step" button to see
          what happens line by line.
        courseD_bee_nestedLoops1_b: Try writing code for one side of the square first.
          Can you loop this to get all of the nectar?
        courseD_bee_nestedLoops1_c: Remember to use the `get nectar` block once you
          are on a square with a flower.
      courseD_bee_nestedLoops1a:
        courseD_bee_nestedLoops1_a: Not working?  Try using the "Step" button to see
          what happens line by line.
        courseD_bee_nestedLoops1_c: Remember to use the `get nectar` block once you
          are on a square with a flower.
      courseD_bee_nestedLoops1a_2018:
        courseD_bee_nestedLoops1_a: Not working?  Try using the "Step" button to see
          what happens line by line.
        courseD_bee_nestedLoops1_c: Remember to use the `get nectar` block once you
          are on a square with a flower.
      courseD_bee_nestedLoops1a_2019:
        courseD_bee_nestedLoops1_a: Not working?  Try using the "Step" button to see
          what happens line by line.
        courseD_bee_nestedLoops1_c: Remember to use the `get nectar` block once you
          are on a square with a flower.
      courseD_bee_nestedLoops2:
        courseD_bee_nestedLoops2_a: To solve this puzzle, you will need to nest one
          `repeat` loop inside of another.
        courseD_bee_nestedLoops2_b: Can't figure out where to put the loops? Try writing
          the code on paper step-by-step and look for a pattern.
        courseD_bee_nestedLoops2_c: Remember you can put more than one block inside
          of a loop.
      courseD_bee_nestedLoops2_2018:
        courseD_bee_nestedLoops2_a: To solve this puzzle, you will need to nest one
          `repeat` loop inside of another.
        courseD_bee_nestedLoops2_b: Can't figure out where to put the loops? Try writing
          the code on paper step-by-step and look for a pattern.
        courseD_bee_nestedLoops2_c: Remember you can put more than one block inside
          of a loop.
      courseD_bee_nestedLoops2_2019:
        courseD_bee_nestedLoops2_a: To solve this puzzle, you will need to nest one
          `repeat` loop inside of another.
        courseD_bee_nestedLoops2_b: Can't figure out where to put the loops? Try writing
          the code on paper step-by-step and look for a pattern.
        courseD_bee_nestedLoops2_c: Remember you can put more than one block inside
          of a loop.
      courseD_bee_nestedLoops7:
        courseD_bee_nestedLoops7_a: You will need to repeat `get nectar` inside of
          another `repeat` that also has the `move forward` block inside of it.
        courseD_bee_nestedLoops7_b: You will need to use all three of the available
          `repeat` blocks to solve this puzzle.
        courseD_bee_nestedLoops7_c: |-
          Nest your blocks three deep, like this:

          -   repeat 4
              -   repeat 3
                  -   repeat 12
                      -   get nectar
                  -   move forward
              -   turn right
      courseD_bee_nestedLoops7_2018:
        courseD_bee_nestedLoops7_a: You will need to repeat `get nectar` inside of
          another `repeat` that also has the `move forward` block inside of it.
        courseD_bee_nestedLoops7_b: You will need to use all three of the available
          `repeat` blocks to solve this puzzle.
        courseD_bee_nestedLoops7_c: |-
          Nest your blocks three deep, like this:

          -   repeat 4
              -   repeat 3
                  -   repeat 12
                      -   get nectar
                  -   move forward
              -   turn right
      courseD_bee_nestedLoops7_2019:
        courseD_bee_nestedLoops7_a: You will need to repeat `get nectar` inside of
          another `repeat` that also has the `move forward` block inside of it.
        courseD_bee_nestedLoops7_b: You will need to use all three of the available
          `repeat` blocks to solve this puzzle.
        courseD_bee_nestedLoops7_c: |-
          Nest your blocks three deep, like this:

          -   repeat 4
              -   repeat 3
                  -   repeat 12
                      -   get nectar
                  -   move forward
              -   turn right
      courseD_bounce_events10s_2018:
        courseD_bounce_events10s_a: |-
          You should have both of these events in your code:

          <xml><block type="bounce_whenBallInGoal" deletable="false"><next><block type="bounce_playSound"><title name="SOUND">swish</title><next><block type="bounce_incrementPlayerScore"></block></next></block></next></block><block type="bounce_whenBallMissesPaddle" deletable="false"><next><block type="bounce_playSound"><title name="SOUND">whistle</title><next><block type="bounce_incrementOpponentScore"></block></next></block></next></block></xml>
      courseD_bounce_events10s_2019:
        courseD_bounce_events10s_a: |-
          You should have both of these events in your code:

          <xml><block type="bounce_whenBallInGoal" deletable="false"><next><block type="bounce_playSound"><title name="SOUND">swish</title><next><block type="bounce_incrementPlayerScore"></block></next></block></next></block><block type="bounce_whenBallMissesPaddle" deletable="false"><next><block type="bounce_playSound"><title name="SOUND">whistle</title><next><block type="bounce_incrementOpponentScore"></block></next></block></next></block></xml>
      courseD_bounce_events11s_2018:
        courseD_bounce_events11s_a: You will need to throw a ball when the game starts,
          when you hit the basket, and when the hand misses the ball.
      courseD_bounce_events11s_2019:
        courseD_bounce_events11s_a: You will need to throw a ball when the game starts,
          when you hit the basket, and when the hand misses the ball.
      courseD_bounce_events12s_2018:
        courseD_bounce_events12s_a: You can speed up the basketball or the hand by
          attaching those blocks to the `when run` event.
        courseD_bounce_events12s_b: Try making each shot worth 2 points and changing
          the team logo to the one from your home town!
      courseD_bounce_events12s_2019:
        courseD_bounce_events12s_a: You can speed up the basketball or the hand by
          attaching those blocks to the `when run` event.
        courseD_bounce_events12s_b: Try making each shot worth 2 points and changing
          the team logo to the one from your home town!
      courseD_bounce_events1s_2018:
        courseD_bounce_events1s_a: |-
          You need to add the `move left` block to the `when left arrow` event to make this game work:

           <xml> <block type="bounce_whenLeft" deletable="false" x="20" y="20">
              <next>
                <block type="bounce_moveLeft"/>
              </next>
            </block>

             </xml>
        courseD_bounce_events1s_b: Don't forget to press "Run" and get the hand to
          the basket in order to solve this puzzle.
      courseD_bounce_events1s_2019:
        courseD_bounce_events1s_a: |-
          You need to add the `move left` block to the `when left arrow` event to make this game work:

           <xml> <block type="bounce_whenLeft" deletable="false" x="20" y="20">
              <next>
                <block type="bounce_moveLeft"/>
              </next>
            </block>

             </xml>
        courseD_bounce_events1s_b: Don't forget to press "Run" and get the hand to
          the basket in order to solve this puzzle.
      courseD_bounce_events2s_2018:
        courseD_bounce_events2s_a: |-
          You will need to have two sets of `move` events coded for this to work:

          <xml>
            <block type="bounce_whenLeft" deletable="false" x="20" y="20">
              <next>
                <block type="bounce_moveLeft"/>
              </next>
            </block>
            <block type="bounce_whenRight" deletable="false" x="180" y="20">
              <next>
                <block type="bounce_moveRight"/>
              </next>
            </block>
          </xml>
      courseD_bounce_events2s_2019:
        courseD_bounce_events2s_a: |-
          You will need to have two sets of `move` events coded for this to work:

          <xml>
            <block type="bounce_whenLeft" deletable="false" x="20" y="20">
              <next>
                <block type="bounce_moveLeft"/>
              </next>
            </block>
            <block type="bounce_whenRight" deletable="false" x="180" y="20">
              <next>
                <block type="bounce_moveRight"/>
              </next>
            </block>
          </xml>
      courseD_bounce_events5s_2018:
        courseD_bounce_events5s_a: You do not need to move the hand to solve this
          puzzle.
        courseD_bounce_events5s_b: |-
          Make sure you have added this code to your workspace:

          <xml>  <block type="bounce_whenPaddleCollided" deletable="false"> <next> <block type="bounce_bounceBall"/></next></block></xml>
      courseD_bounce_events5s_2019:
        courseD_bounce_events5s_a: You do not need to move the hand to solve this
          puzzle.
        courseD_bounce_events5s_b: |-
          Make sure you have added this code to your workspace:

          <xml>  <block type="bounce_whenPaddleCollided" deletable="false"> <next> <block type="bounce_bounceBall"/></next></block></xml>
      courseD_bounce_events6s_2018:
        courseD_bounce_events6s_a: |-
          Do you have an event that looks like this?

          <xml><block type="bounce_whenWallCollided" deletable="false"><next><block type="bounce_bounceBall"></block></next></block></block></xml>
        courseD_bounce_events6s_b: If you've written the code correctly, you don't
          have to move the hand to win.
      courseD_bounce_events6s_2019:
        courseD_bounce_events6s_a: |-
          Do you have an event that looks like this?

          <xml><block type="bounce_whenWallCollided" deletable="false"><next><block type="bounce_bounceBall"></block></next></block></block></xml>
        courseD_bounce_events6s_b: If you've written the code correctly, you don't
          have to move the hand to win.
      courseD_bounce_events7s_2018:
        courseD_bounce_events7s_a: You can add sounds in more places if you feel like
          it!
      courseD_bounce_events7s_2019:
        courseD_bounce_events7s_a: You can add sounds in more places if you feel like
          it!
      courseD_collector_debugging1:
        courseD_collector_debugging1_a: |-
          Use the "Step" button to see if everything is right at the first step.

          How about the second?

          Where does it go wrong?
        courseD_collector_debugging1_b: Do you see any patterns that could be made
          more simple using a `repeat` loop?
        courseD_collector_debugging1_c: Remember to use the `collect` block to pick
          up treasure once you have moved to it.
      courseD_collector_debugging10_predict1:
        courseD_collector_debugging9_a: There are several ways to solve this problem...but
          they all involve turns!
        courseD_collector_debugging9_b: Figure out how you would solve the puzzle,
          then move step-by-step to try to make the code match what is in your head.
      courseD_collector_debugging1a_2018:
        courseD_collector_debugging1_a: |-
          Use the "Step" button to see if everything is right at the first step.

          How about the second?

          Where does it go wrong?
        courseD_collector_debugging1_c: Remember to use the `collect` block to pick
          up treasure once you have moved to it.
      courseD_collector_debugging1a_2019:
        courseD_collector_debugging1_a: |-
          Use the "Step" button to see if everything is right at the first step.

          How about the second?

          Where does it go wrong?
        courseD_collector_debugging1_c: Remember to use the `collect` block to pick
          up treasure once you have moved to it.
      courseD_collector_debugging2:
        courseD_collector_debugging2_a: |-
          Use the "Step" button to see if everything is right at the first step.

          How about the second?

          Where does it go wrong?
        courseD_collector_debugging2_b: Do you see any patterns that could be made
          more simple using a `repeat` loop?
        courseD_collector_debugging2_c: Try collecting treasure for one side of this
          pattern. Can you repeat this to collect treasure on the other two sides?
      courseD_collector_debugging2a_2018:
        courseD_collector_debugging2a_a: |-
          Use the "Step" button to see if everything is right at the first step.

          How about the second?

          Where does it go wrong?
        courseD_collector_debugging2a_c: |-
          What happens?

          What is supposed to happen?

          What does that tell you?
      courseD_collector_debugging2a_2019:
        courseD_collector_debugging2a_a: |-
          Use the "Step" button to see if everything is right at the first step.

          How about the second?

          Where does it go wrong?
        courseD_collector_debugging2a_c: |-
          What happens?

          What is supposed to happen?

          What does that tell you?
      courseD_collector_debugging3:
        courseD_collector_debugging3_a: Is there any place where Laurel does something
          that doesn't make sense? What happens when you change those blocks?
        courseD_collector_debugging3_b: Try simplifying the code using nested loops.
      courseD_collector_debugging3a_2018:
        courseD_collector_debugging3_a: Is there any place where Laurel does something
          that doesn't make sense? What happens when you change those blocks?
      courseD_collector_debugging3a_2019:
        courseD_collector_debugging3_a: Is there any place where Laurel does something
          that doesn't make sense? What happens when you change those blocks?
      courseD_collector_debugging4:
        courseD_collector_debugging4_a: "Try using the debugging process a couple
          of times in a row. \n\nWhat causes the first problem?\n\nOnce that problem
          is fixed, what goes wrong?"
        courseD_collector_debugging4_b: "If you're having a hard time figuring out
          how to make the stair step pattern, try tracing it with your finger and
          saying the commands out loud. \n\nDon't forget to point out the direction
          of the turns!"
        courseD_collector_debugging4_c: This loop is only missing one block. Can you
          figure out which one?
      courseD_collector_debugging4a_2018:
        courseD_collector_debugging4_a: "Try using the debugging process a couple
          of times in a row. \n\nWhat causes the first problem?\n\nOnce that problem
          is fixed, what goes wrong?"
        courseD_collector_debugging4_b: "If you're having a hard time figuring out
          how to make the stair step pattern, try tracing it with your finger and
          saying the commands out loud. \n\nDon't forget to point out the direction
          of the turns!"
      courseD_collector_debugging4a_2019:
        courseD_collector_debugging4_a: "Try using the debugging process a couple
          of times in a row. \n\nWhat causes the first problem?\n\nOnce that problem
          is fixed, what goes wrong?"
        courseD_collector_debugging4_b: "If you're having a hard time figuring out
          how to make the stair step pattern, try tracing it with your finger and
          saying the commands out loud. \n\nDon't forget to point out the direction
          of the turns!"
      courseD_collector_debugging5:
        courseD_collector_debugging5_a: |-
          Start by looking at just the first loop.

          What does it do?

          What is it supposed to do?

          What does that tell you?
        courseD_collector_debugging5_b: Once you have the first loop the way you want
          it, what is left over in your code?
      courseD_collector_debugging5a_2018:
        courseD_collector_debugging5a_a: |-
          What does it do?

          What is it supposed to do?

          What does that tell you?
        courseD_collector_debugging5a_b: Once you have the first line of treasure
          collected, what is left over in your code?
      courseD_collector_debugging5a_2019:
        courseD_collector_debugging5a_a: |-
          What does it do?

          What is it supposed to do?

          What does that tell you?
        courseD_collector_debugging5a_b: Once you have the first line of treasure
          collected, what is left over in your code?
      courseD_collector_debugging6:
        courseD_collector_debugging6_a: |-
          Try running through the code using the "Step" button.  Is everything good at the first step?

          How about the second?

          Where do things go wrong?
        courseD_collector_debugging6_b: It looks like all of the right steps are here,
          you just need more of them.  How can you repeat the `collect` action multiple
          times?
      courseD_collector_debugging6a_2018:
        courseD_collector_debugging6_a: |-
          Try running through the code using the "Step" button.  Is everything good at the first step?

          How about the second?

          Where do things go wrong?
        courseD_collector_debugging6_b: It looks like all of the blocks you need are
          in the workspace. Try clicking "start over" if things get too confusing.
      courseD_collector_debugging6a_2019:
        courseD_collector_debugging6_a: |-
          Try running through the code using the "Step" button.  Is everything good at the first step?

          How about the second?

          Where do things go wrong?
        courseD_collector_debugging6_b: It looks like all of the blocks you need are
          in the workspace. Try clicking "start over" if things get too confusing.
      courseD_collector_debugging8:
        courseD_collector_debugging8_a: Do you see a pattern that you can simplify
          with a loop?
        courseD_collector_debugging8_b: Try using a nested loop to make this code
          shorter.
      courseD_collector_debugging9:
        courseD_collector_debugging9_a: There are several ways to solve this problem...but
          they all involve turns!
        courseD_collector_debugging9_b: Figure out how you would solve the puzzle,
          then move step-by-step to try to make the code match what is in your head.
      courseD_collector_debugging_challenge2:
        courseD_collector_debugging_challenge2_a: "Start by collecting just **two**
          gems from each of the first **two** piles.\n\n![](<https://images.code.org/8493c16a5b913b91e28b36eb2b280b8c-image-1494775939149.25.04
          AM copy.png>)\nUse these blocks.\n\n<xml>\n<block type=\"collector_collect\"></block>\n<block
          type=\"controls_repeat\" limit=\"2\">\n    <title name=\"TIMES\">2</title>\n
          \ </block>\n<block type=\"maze_move\" x=\"175px\" y=\"17px\">\n                    <title
          name=\"DIR\">moveForward</title>\n                  </block>\n                  \n
          \n   <block type=\"controls_repeat\" limit=\"2\" x=\"175px\" y=\"56px\">\n
          \   <title name=\"TIMES\">2</title>\n  </block>\n\n\n\n</xml>"
        courseD_collector_debugging_challenge2_b: "Next, collect the remaining gems
          in this row.\n\n![](<https://images.code.org/22fff9fb20a50beaf4800aa022a5deb0-image-1494775944657.25.04
          AM.png>)\nAdd these blocks to your program.\n\n<xml><block type=\"maze_move\">\n
          \                   <title name=\"DIR\">moveBackward</title>\n                  </block>\n<block
          type=\"controls_repeat\">\n        <title name=\"TIMES\">4</title>\n        <statement
          name=\"DO\">\n          \n        </statement>\n      </block>\n</xml>"
        courseD_collector_debugging_challenge2_c: "Finally, collect the remaining
          treasure. Add these blocks to your program.\n\n<xml>\n  <block type=\"maze_turn\">\n
          \               <title name=\"DIR\">turnRight</title>\n              </block>\n
          \     <block type=\"controls_repeat\">\n        <title name=\"TIMES\">4</title>\n
          \       <statement name=\"DO\">\n          \n        </statement>\n      </block>\n</xml>"
        courseD_collector_debugging_challenge2_d: |-
          Here is the complete solution for this puzzle.

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat">
                  <title name="TIMES">4</title>
                  <statement name="DO">
                    <block type="controls_repeat">
                      <title name="TIMES">4</title>
                      <statement name="DO">
                        <block type="controls_repeat">
                          <title name="TIMES">2</title>
                          <statement name="DO">
                            <block type="maze_move">
                              <title name="DIR">moveForward</title>
                              <next>
                                <block type="controls_repeat">
                                  <title name="TIMES">2</title>
                                  <statement name="DO">
                                    <block type="collector_collect"/>
                                  </statement>
                                </block>
                              </next>
                            </block>
                          </statement>
                          <next>
                            <block type="maze_move">
                              <title name="DIR">moveBackward</title>
                            </block>
                          </next>
                        </block>
                      </statement>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
          </xml>
      courseD_collector_nested_loops_challenge2:
        courseD_bee_nested_loops_challenge2_a: Don't forget that you can `repeat`
          a single command or a longer pattern. You can even `repeat` a `repeat` block!
        courseD_bee_nested_loops_challenge2_b: To get all 4 gems, first use a loop
          to move away from the center. Turn left or right, then use a nested loop
          to move from the first pile of treasure to the second. If you repeat the
          nested loop enough times, the collector will move around the _entire_ cave!
        courseD_bee_nested_loops_challenge2_c: The shortest program that reaches all
          the treasure uses only one `collect` block and two turns.
        courseD_bee_nested_loops_challenge2_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat_dropdown">
                  <title name="TIMES" config="3-10">3</title>
                  <statement name="DO">
                    <block type="maze_move">
                      <title name="DIR">moveForward</title>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_turn">
                      <title name="DIR">turnLeft</title>
                      <next>
                        <block type="controls_repeat_dropdown">
                          <title name="TIMES" config="3-10">3</title>
                          <statement name="DO">
                            <block type="collector_collect">
                              <next>
                                <block type="controls_repeat_dropdown">
                                  <title name="TIMES" config="3-10">3</title>
                                  <statement name="DO">
                                    <block type="maze_move">
                                      <title name="DIR">moveForward</title>
                                    </block>
                                  </statement>
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnLeft</title>
                                      <next>
                                        <block type="controls_repeat_dropdown">
                                          <title name="TIMES" config="3-10">3</title>
                                          <statement name="DO">
                                            <block type="maze_move">
                                              <title name="DIR">moveForward</title>
                                            </block>
                                          </statement>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </statement>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseD_collector_nested_loops_challenge2_2018:
        courseD_bee_nested_loops_challenge2_a: Don't forget that you can `repeat`
          a single command or a longer pattern. You can even `repeat` a `repeat` block!
        courseD_bee_nested_loops_challenge2_b: To get all 4 gems, first use a loop
          to move away from the center. Turn left or right, then use a nested loop
          to move from the first pile of treasure to the second. If you repeat the
          nested loop enough times, the collector will move around the _entire_ cave!
        courseD_bee_nested_loops_challenge2_c: The shortest program that reaches all
          the treasure uses only one `collect` block and two turns.
        courseD_bee_nested_loops_challenge2_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat_dropdown">
                  <title name="TIMES" config="3-10">3</title>
                  <statement name="DO">
                    <block type="maze_move">
                      <title name="DIR">moveForward</title>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_turn">
                      <title name="DIR">turnLeft</title>
                      <next>
                        <block type="controls_repeat_dropdown">
                          <title name="TIMES" config="3-10">3</title>
                          <statement name="DO">
                            <block type="collector_collect">
                              <next>
                                <block type="controls_repeat_dropdown">
                                  <title name="TIMES" config="3-10">3</title>
                                  <statement name="DO">
                                    <block type="maze_move">
                                      <title name="DIR">moveForward</title>
                                    </block>
                                  </statement>
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnLeft</title>
                                      <next>
                                        <block type="controls_repeat_dropdown">
                                          <title name="TIMES" config="3-10">3</title>
                                          <statement name="DO">
                                            <block type="maze_move">
                                              <title name="DIR">moveForward</title>
                                            </block>
                                          </statement>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </statement>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseD_collector_nested_loops_challenge2_2019:
        courseD_bee_nested_loops_challenge2_a: Don't forget that you can `repeat`
          a single command or a longer pattern. You can even `repeat` a `repeat` block!
        courseD_bee_nested_loops_challenge2_b: To get all 4 gems, first use a loop
          to move away from the center. Turn left or right, then use a nested loop
          to move from the first pile of treasure to the second. If you repeat the
          nested loop enough times, the collector will move around the _entire_ cave!
        courseD_bee_nested_loops_challenge2_c: The shortest program that reaches all
          the treasure uses only one `collect` block and two turns.
        courseD_bee_nested_loops_challenge2_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat_dropdown">
                  <title name="TIMES" config="3-10">3</title>
                  <statement name="DO">
                    <block type="maze_move">
                      <title name="DIR">moveForward</title>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_turn">
                      <title name="DIR">turnLeft</title>
                      <next>
                        <block type="controls_repeat_dropdown">
                          <title name="TIMES" config="3-10">3</title>
                          <statement name="DO">
                            <block type="collector_collect">
                              <next>
                                <block type="controls_repeat_dropdown">
                                  <title name="TIMES" config="3-10">3</title>
                                  <statement name="DO">
                                    <block type="maze_move">
                                      <title name="DIR">moveForward</title>
                                    </block>
                                  </statement>
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnLeft</title>
                                      <next>
                                        <block type="controls_repeat_dropdown">
                                          <title name="TIMES" config="3-10">3</title>
                                          <statement name="DO">
                                            <block type="maze_move">
                                              <title name="DIR">moveForward</title>
                                            </block>
                                          </statement>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </statement>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseD_collector_nested_loops_challenge2a:
        courseD_collector_nested_loops_challenge2a_a: Don't forget that you can `repeat`
          a single command or a longer pattern. You can even `repeat` a `repeat` block!
        courseD_collector_nested_loops_challenge2a_b: Can you figure out how to get
          all four gems without using any more blocks than it takes to get two?
      courseD_collector_ramp10:
        courseD_artist_ramp10_a: |-
          Instead of using four `move forward` blocks for each side, try putting one `move forward` block inside of a `repeat` loop, like this:

          <xml><block type="controls_repeat">
                                                      <title name="TIMES">4</title>
                                                      <statement name="DO">
                                                        <block type="maze_moveForward"/>
                                                      </statement>
                                                    </block></xml>
        courseD_artist_ramp10_b: Don't forget to collect one piece of treasure, then
          turn to start on a new side of the square!
        courseD_artist_ramp10_c: If you want to simplify your code, you can put one
          loop inside of another! This is called a **nested loop**.
      courseD_collector_ramp8:
        courseD_collector_ramp8_a: When you get to a square with treasure, use `collect`
          to pick it up. For this puzzle, you'll need to collect treasure more than
          once!
        courseD_collector_ramp8_b: If you want to simplify your code more, you can
          actually put one `repeat` loop inside of another! This is called a **nested
          loop**.
      courseD_collector_ramp9:
        courseD_collector_ramp9_a: Start by moving Laurel to the first treasure, then
          collecting it. Can you repeat this sequence to get the second pile?
        courseD_collector_ramp9_b: If you want to simplify your code, you can put
          one repeat loop inside of another! This is called a **nested loop**.
      courseD_farmer_condLoops1:
        courseD_farmer_condLoops1_a: You will need to look for corn 5 times, using
          a repeat loop.
        courseD_farmer_condLoops1_b: Make sure to use an `if at corn` block or you
          might try to pick something that's not there!
      courseD_farmer_condLoops1_2018:
        courseD_farmer_condLoops1_a: You will need to look for corn 5 times, using
          a repeat loop.
        courseD_farmer_condLoops1_b: Make sure to use an `if at corn` block or you
          might try to pick something that's not there!
      courseD_farmer_condLoops1_2019:
        courseD_farmer_condLoops1_a: You will need to look for corn 5 times, using
          a repeat loop.
        courseD_farmer_condLoops1_b: Make sure to use an `if at corn` block or you
          might try to pick something that's not there!
      courseD_farmer_condLoops2:
        courseD_farmer_condLoops2_a: 'The best way to do this is to nest `if` statements
          by placing one inside of the other.  '
        courseD_farmer_condLoops2_b: For this puzzle, you should have one `if/else`
          statement and one plain `if` statement.
        courseD_farmer_condLoops2_c: |-
          Your `if` statement could look a lot like this:

          -   if at corn
              -   pick corn
          -   else
              -   if at lettuce
                  -   pick lettuce

          If there is nothing there, you won't pick anything!
      courseD_farmer_condLoops2_2018:
        courseD_farmer_condLoops2_a: 'The best way to do this is to nest `if` statements
          by placing one inside of the other.  '
        courseD_farmer_condLoops2_b: For this puzzle, you should have one `if/else`
          statement and one plain `if` statement.
        courseD_farmer_condLoops2_c: |-
          Your `if` statement could look a lot like this:

          -   if at corn
              -   pick corn
          -   else
              -   if at lettuce
                  -   pick lettuce

          If there is nothing there, you won't pick anything!
      courseD_farmer_condLoops2_2019:
        courseD_farmer_condLoops2_a: 'The best way to do this is to nest `if` statements
          by placing one inside of the other.  '
        courseD_farmer_condLoops2_b: For this puzzle, you should have one `if/else`
          statement and one plain `if` statement.
        courseD_farmer_condLoops2_c: |-
          Your `if` statement could look a lot like this:

          -   if at corn
              -   pick corn
          -   else
              -   if at lettuce
                  -   pick lettuce

          If there is nothing there, you won't pick anything!
      courseD_farmer_condLoops3:
        courseD_farmer_condLoops3_a: |-
          To get all of the items, try nesting `if` statements three deep.

          This means you should put one `if` statement inside of another, then put a third `if` statement inside the second one.
        courseD_farmer_condLoops3_b: For this puzzle, you should have two `if/else`
          statements and one plain `if` statement.
      courseD_farmer_condLoops3_2018:
        courseD_farmer_condLoops3_a: |-
          To get all of the items, try nesting `if` statements three deep.

          This means you should put one `if` statement inside of another, then put a third `if` statement inside the second one.
        courseD_farmer_condLoops3_b: For this puzzle, you should have two `if/else`
          statements and one plain `if` statement.
      courseD_farmer_condLoops3_2019:
        courseD_farmer_condLoops3_a: |-
          To get all of the items, try nesting `if` statements three deep.

          This means you should put one `if` statement inside of another, then put a third `if` statement inside the second one.
        courseD_farmer_condLoops3_b: For this puzzle, you should have two `if/else`
          statements and one plain `if` statement.
      courseD_farmer_condLoops4:
        grade3_RunningFarm_4courseD_farmer_condLoops4: |-
          No one knows how many heads of lettuce will grow from each sprout.

          Use a `while there is lettuce` loop to keep picking until each piece has been gathered.
        grade3_RunningFarm_4courseD_farmer_condLoops4_b: The `while` loop will handle
          empty spaces as well! Since there is no lettuce, it will not pick any and
          let the code move on.
        grade3_RunningFarm_4courseD_farmer_condLoops4_c: You can use either a `while
          path ahead` loop or a `repeat` loop to go through all of the crops.
      courseD_farmer_condLoops4_2018:
        grade3_RunningFarm_4courseD_farmer_condLoops4: |-
          No one knows how many heads of lettuce will grow from each sprout.

          Use a `while there is lettuce` loop to keep picking until each piece has been gathered.
        grade3_RunningFarm_4courseD_farmer_condLoops4_b: The `while` loop will handle
          empty spaces as well! Since there is no lettuce, it will not pick any and
          let the code move on.
        grade3_RunningFarm_4courseD_farmer_condLoops4_c: You can use either a `while
          path ahead` loop or a `repeat` loop to go through all of the crops.
      courseD_farmer_condLoops4_2019:
        grade3_RunningFarm_4courseD_farmer_condLoops4: |-
          No one knows how many heads of lettuce will grow from each sprout.

          Use a `while there is lettuce` loop to keep picking until each piece has been gathered.
        grade3_RunningFarm_4courseD_farmer_condLoops4_b: The `while` loop will handle
          empty spaces as well! Since there is no lettuce, it will not pick any and
          let the code move on.
        grade3_RunningFarm_4courseD_farmer_condLoops4_c: You can use either a `while
          path ahead` loop or a `repeat` loop to go through all of the crops.
      courseD_farmer_condLoops5:
        courseD_farmer_condLoops5_a: 'There is a new loop: `repeat until at pumpkin`.
          Can you see how to use it in this puzzle?'
        courseD_farmer_condLoops5_b: There could be more than one corn or lettuce
          plant in each spot. Use a `while` loop to gather all of them!
      courseD_farmer_condLoops5_2018:
        courseD_farmer_condLoops5_a: 'There is a new loop: `repeat until at pumpkin`.
          Can you see how to use it in this puzzle?'
        courseD_farmer_condLoops5_b: There could be more than one corn or lettuce
          plant in each spot. Use a `while` loop to gather all of them!
      courseD_farmer_condLoops5_2019:
        courseD_farmer_condLoops5_a: 'There is a new loop: `repeat until there are
          pumpkins`. Can you see how to use it in this puzzle?'
        courseD_farmer_condLoops5_b: There could be more than one corn or lettuce
          plant in each spot. Use a `while` loop to gather all of them!
      courseD_farmer_condLoops6:
        courseD_farmer_condLoops6_a: Use a `while there is corn` loop to make sure
          you get all of the corn along the way. This block won't do anything if there's
          no corn to pick.
        courseD_farmer_condLoops6_b: Make sure to check `if` there's a path ahead
          before you take your next step!
      courseD_farmer_condLoops6_2018:
        courseD_farmer_condLoops6_a: Use a `while path ahead` loop or `if path ahead
          / else` block to move the farmer down each piece of the spiral.
        courseD_farmer_condLoops6_b: You only need to check for corn during most of
          the harvest.  Just pick one pumpkin at the very end of your program.
      courseD_farmer_condLoops6_2019:
        courseD_farmer_condLoops6_a: Use a `while path ahead` loop or a `if path ahead
          / else` block to move the farmer down each piece of the spiral.
        courseD_farmer_condLoops6_b: You only need to check for corn during most of
          the harvest.  Just pick one pumpkin at the very end of your program.
      courseD_farmer_condLoops7:
        courseD_farmer_condLoops7_a: |-
          Notice that the easiest path to get to all of the crops is still a spiral.

          ![](https://images.code.org/ba8b8c624f21ade9ac823b045085c435-image-1479364378437.png)
        courseD_farmer_condLoops7_b: Try using `when path ahead` to keep the harvester
          moving the right number of steps.
      courseD_farmer_condLoops7_2018:
        courseD_farmer_condLoops7_a: |-
          Notice that the easiest path to get to all of the crops is still a spiral.

          ![](https://images.code.org/ba8b8c624f21ade9ac823b045085c435-image-1479364378437.png)
        courseD_farmer_condLoops7_b: Try using `when path ahead` to keep the harvester
          moving the right number of steps.
      courseD_farmer_condLoops7_2019:
        courseD_farmer_condLoops7_a: |-
          Notice that the easiest path to get to all of the crops is still a spiral.

          ![](https://images.code.org/ba8b8c624f21ade9ac823b045085c435-image-1479364378437.png)
        courseD_farmer_condLoops7_b: Try using `while path ahead` to keep the harvester
          moving the right number of steps.
      courseD_farmer_condLoops_challenge1:
        courseD_farmer_condLoops_challenge1_a: The "Step" button could be very helpful
          in this challenge.
        courseD_farmer_condLoops_challenge1_b: Normally you would just `pick pumpkin`
          if you are at a pumpkin. What else do you need to do if you're at a pumpkin?
      courseD_farmer_condLoops_challenge1_2018:
        courseD_farmer_condLoops_challenge1_a: The "Step" button could be very helpful
          in this challenge.
        courseD_farmer_condLoops_challenge1_b: Normally you would just `pick pumpkin`
          if you are at a pumpkin. What else do you need to do if you're at a pumpkin?
      courseD_farmer_condLoops_challenge1_2019:
        courseD_farmer_condLoops_challenge1_a: The "Step" button could be very helpful
          in this challenge.
        courseD_farmer_condLoops_challenge1_b: Normally you would just `pick pumpkin`
          if you are at a pumpkin. What else do you need to do if you're at a pumpkin?
      courseD_farmer_condLoops_challenge2:
        courseD_farmer_condLoops_challenge2_a: The amount of each vegetable in each
          space can change. A `while` loop can help!
      courseD_farmer_condLoops_challenge2_2018:
        courseD_farmer_condLoops_challenge2_a: The amount of each vegetable in each
          space can change. A `while` loop can help!
      courseD_farmer_condLoops_challenge2_2019:
        courseD_farmer_condLoops_challenge2_a: The amount of each vegetable in each
          space can change. A `while` loop can help!
      courseD_farmer_while1:
        courseD_farmer_while1_a: You will need to move forward four times to get to
          the pile. Can you use a `repeat` loop for this?
        courseD_farmer_while1_b: Use the `remove 1` block when you are standing on
          the pile of dirt to remove it.
      courseD_farmer_while1_2018:
        courseD_farmer_while1_a: You will need to move forward four times to get to
          the pile. Can you use a `repeat` loop for this?
        courseD_farmer_while1_b: Use the `remove 1` block when you are standing on
          the pile of dirt to remove it.
      courseD_farmer_while1_2019:
        courseD_farmer_while1_a: You will need to move forward four times to get to
          the pile. Can you use a `repeat` loop for this?
        courseD_farmer_while1_b: Use the `remove 1` block when you are standing on
          the pile of dirt to remove it.
      courseD_farmer_while2:
        courseD_farmer_while2_a: You will only need to move once to get to the hole.
        courseD_farmer_while2_b: You will need the `fill 1` block six times. Can you
          use a loop to make this simpler?
      courseD_farmer_while2_2018:
        courseD_farmer_while2_a: You will only need to move once to get to the hole.
        courseD_farmer_while2_b: You will need the `fill 1` block six times. Can you
          use a loop to make this simpler?
      courseD_farmer_while2_2019:
        courseD_farmer_while2_a: You will only need to move once to get to the hole.
        courseD_farmer_while2_b: You will need the `fill 1` block six times. Can you
          use a loop to make this simpler?
      courseD_farmer_while3:
        courseD_farmer_while3_a: A loop can help you simplify your code here.
        courseD_farmer_while3_b: You shouldn't need any `turn` blocks to get to the
          pile.
      courseD_farmer_while3_2018:
        courseD_farmer_while3_a: A loop can help you simplify your code here.
        courseD_farmer_while3_b: You shouldn't need any `turn` blocks to get to the
          pile.
      courseD_farmer_while3_2019:
        courseD_farmer_while3_a: A loop can help you simplify your code here.
        courseD_farmer_while3_b: You shouldn't need any `turn` blocks to get to the
          pile.
      courseD_farmer_while4:
        courseD_farmer_conditionals4_a: Instead of using a `repeat` loop, use a `while`
          loop to keep digging until the pile is gone.
        courseD_farmer_conditionals4_b: This looks very similar to an earlier puzzle,
          the only difference is which loop you need.
      courseD_farmer_while4_2018:
        courseD_farmer_conditionals4_a: Instead of using a `repeat` loop, use a `while`
          loop to keep digging until the pile is gone.
        courseD_farmer_conditionals4_b: This looks very similar to an earlier puzzle,
          the only difference is which loop you need.
      courseD_farmer_while4_2019:
        courseD_farmer_conditionals4_a: Instead of using a `repeat` loop, use a `while`
          loop to keep digging until the pile is gone.
        courseD_farmer_conditionals4_b: This looks very similar to an earlier puzzle,
          the only difference is which loop you need.
      courseD_farmer_while5:
        courseD_farmer_conditionals5a_a: Try nesting a `while` loop inside of a `repeat`
          loop.
        courseD_farmer_conditionals5a_b: The farmer needs to move forward a total
          of five times to get to the end of the row. What else does the farmer need
          to do?
        courseD_farmer_conditionals5a_c: Move forward 5 times. Each time you move
          forward, remove the pile of dirt by using the `while there is a pile` block.
      courseD_farmer_while5_2018:
        courseD_farmer_conditionals5a_a: Try nesting a `while` loop inside of a `repeat`
          loop.
        courseD_farmer_conditionals5a_b: The farmer needs to move forward a total
          of five times to get to the end of the row. What else does the farmer need
          to do?
        courseD_farmer_conditionals5a_c: Move forward 5 times. Each time you move
          forward, remove the pile of dirt by using the `while there is a pile` block.
      courseD_farmer_while5_2019:
        courseD_farmer_conditionals5a_a: Try nesting a `while` loop inside of a `repeat`
          loop.
        courseD_farmer_conditionals5a_b: The farmer needs to move forward a total
          of five times to get to the end of the row. What else does the farmer need
          to do?
        courseD_farmer_conditionals5a_c: Move forward 5 times. Each time you move
          forward, remove the pile of dirt by using the `while there is a pile` block.
      courseD_farmer_while6:
        courseD_farmer_conditionals6_a: Make sure you're using the `while` loop to
          figure out how many times to fill each hole.
        courseD_farmer_conditionals6_b: Notice that the farmer needs to move forward
          and down several times in a stair-step pattern.
        courseD_farmer_conditionals6_c: |-
          The stair step pattern uses the following blocks

          -   move forward
          -   fill hole
          -   turn right
          -   move forward
          -   fill hole
          -   turn left

          How many times do you need to use this stair step pattern?

          Make sure you are using the `while there is a hole` to fill the hole.
      courseD_farmer_while6_2018:
        courseD_farmer_conditionals6_a: Make sure you're using the `while` loop to
          figure out how many times to fill each hole.
        courseD_farmer_conditionals6_b: Notice that the farmer needs to move forward
          and down several times in a stair-step pattern.
        courseD_farmer_conditionals6_c: |-
          The stair step pattern uses the following blocks

          -   move forward
          -   fill hole
          -   turn right
          -   move forward
          -   fill hole
          -   turn left

          How many times do you need to use this stair step pattern?

          Make sure you are using the `while there is a hole` to fill the hole.
      courseD_farmer_while6_2019:
        courseD_farmer_conditionals6_a: Make sure you're using the `while` loop to
          figure out how many times to fill each hole.
        courseD_farmer_conditionals6_b: Notice that the farmer needs to move forward
          and down several times in a stair-step pattern.
        courseD_farmer_conditionals6_c: |-
          The stair step pattern uses the following blocks

          -   move forward
          -   fill hole
          -   turn right
          -   move forward
          -   fill hole
          -   turn left

          How many times do you need to use this stair step pattern?

          Make sure you are using the `while there is a hole` to fill the hole.
      courseD_farmer_while7:
        courseD_farmer_conditionals8_a: The `while path ahead` block lets you keep
          going, even if you don't know how many squares are in a path.
        courseD_farmer_conditionals8_b: Putting a `while path ahead` loop inside of
          a repeat loop can help you in this puzzle.
        courseD_farmer_conditionals8_c: What do you need to do at the end of each
          path?
      courseD_farmer_while7_2018:
        courseD_farmer_conditionals8_a: The `while path ahead` block lets you keep
          going, even if you don't know how many squares are in a path.
        courseD_farmer_conditionals8_b: Putting a `while path ahead` loop inside of
          a repeat loop can help you in this puzzle.
        courseD_farmer_conditionals8_c: What do you need to do at the end of each
          path?
      courseD_farmer_while7_2019:
        courseD_farmer_conditionals8_a: The `while path ahead` block lets you keep
          going, even if you don't know how many squares are in a path.
        courseD_farmer_conditionals8_b: Putting a `while path ahead` loop inside of
          a repeat loop can help you in this puzzle.
        courseD_farmer_conditionals8_c: What do you need to do at the end of each
          path?
      courseD_farmer_while8:
        courseD_farmer_conditionals8_a: You are going to need to use more than one
          `while` loop.
        courseD_farmer_conditionals8_b: Every hole is at the end of a path, so use
          `while path ahead` before using `while there is a hole`.
        courseD_farmer_conditionals8_c: Notice that you need to repeat the `while
          path ahead`, `while there is a hole` code six times.
      courseD_farmer_while8_2018:
        courseD_farmer_conditionals8_a: You are going to need to use more than one
          `while` loop.
        courseD_farmer_conditionals8_b: Every hole is at the end of a path, so use
          `while path ahead` before using `while there is a hole`.
        courseD_farmer_conditionals8_c: Notice that you need to repeat the `while
          path ahead`, `while there is a hole` code six times.
      courseD_farmer_while8_2019:
        courseD_farmer_conditionals8_a: You are going to need to use more than one
          `while` loop.
        courseD_farmer_conditionals8_b: Every hole is at the end of a path, so use
          `while path ahead` before using `while there is a hole`.
        courseD_farmer_conditionals8_c: Notice that you need to repeat the `while
          path ahead`, `while there is a hole` code six times.
      courseD_farmer_while_challenge1:
        courseD_farmer_while_challenge1_a: Each hole or pile is located one space
          **backward** from the end of the path.
        courseD_farmer_while_challenge1_b: If you use a `while` loop, you can tell
          the farmer to remove a pile or fill a hole, even if one isn't there. That
          means you can program her to remove any dirt or fill any hole, no matter
          where she is.
        courseD_farmer_conditionals8_c: It is possible to solve this without using
          any `repeat` loops. To do this, you will need to use four `while` loops.
      courseD_farmer_while_challenge1_2018:
        courseD_farmer_while_challenge1_a: Each hole or pile is located one space
          **backward** from the end of the path.
        courseD_farmer_while_challenge1_b: If you use a `while` loop, you can tell
          the farmer to remove a pile or fill a hole, even if one isn't there. That
          means you can program her to remove any dirt or fill any hole, no matter
          where she is.
        courseD_farmer_conditionals8_c: It is possible to solve this without using
          any `repeat` loops. To do this, you will need to use four `while` loops.
      courseD_farmer_while_challenge1_2019:
        courseD_farmer_while_challenge1_a: Each hole or pile is located one space
          **backward** from the end of the path.
        courseD_farmer_while_challenge1_b: If you use a `while` loop, you can tell
          the farmer to remove a pile or fill a hole, even if one isn't there. That
          means you can program her to remove any dirt or fill any hole, no matter
          where she is.
        courseD_farmer_conditionals8_c: It is possible to solve this without using
          any `repeat` loops. To do this, you will need to use four `while` loops.
      courseD_farmer_while_challenge2:
        courseD_farmer_while_challenge1_a: Each hole or pile is located one space
          **backward** from the end of the path.
        courseD_farmer_while_challenge1_b: If you use a `while` loop, you can tell
          the farmer to remove a pile or fill a hole, even if one isn't there. That
          means you can program her to remove any dirt and fill any hole, while standing
          in the same place.
        courseD_farmer_conditionals8_c: It is possible to solve this without using
          any `repeat` loops. To do this, you will need to use four `while` loops.
      courseD_harvester_nested_loops_challenge1:
        courseD_harvester_nested_loops_challenge1_a: 'Try following this path to reach
          all of the corn! '
        courseD_harvester_nested_loops_challenge1_b: To collect more than one piece
          of corn, you need to use `pick corn` more than one time.
        courseD_harvester_nested_loops_challenge1_c: You will need to put a small
          loop inside of your main loop to solve this puzzle!
      courseD_harvester_nested_loops_challenge1_2018:
        courseD_harvester_nested_loops_challenge1_a: 'Try following this path to reach
          all of the corn! '
        courseD_harvester_nested_loops_challenge1_b: To collect more than one piece
          of corn, you need to use `pick corn` more than one time.
        courseD_harvester_nested_loops_challenge1_c: You will need to put a small
          loop inside of your main loop to solve this puzzle!
      courseD_harvester_nested_loops_challenge1_2019:
        courseD_harvester_nested_loops_challenge1_a: 'Try following this path to reach
          all of the corn! '
        courseD_harvester_nested_loops_challenge1_b: To collect more than one piece
          of corn, you need to use `pick corn` more than one time.
        courseD_harvester_nested_loops_challenge1_c: You will need to put a small
          loop inside of your main loop to solve this puzzle!
      courseD_iceage_loops1:
        courseD_iceage_loops1_a: Watch out for broken ice! Scrat will fall right through!
        courseD_iceage_loops1_b: |-
          You will have to use this block:

          <xml><block type="maze_moveForward"/></xml>
      courseD_iceage_loops10:
        courseB_iceage_loops10_a: Watch out for broken ice! Scrat will fall into the
          water!
        courseB_iceage_loops10_b: Try saying the steps out loud or writing them down
          on a piece of paper. Do you see any patterns?
        courseB_iceage_loops10_c: This is a long puzzle! Follow this path.
      courseD_iceage_loops10_2019:
        courseB_iceage_loops10_a: Watch out for broken ice! Scrat will fall into the
          water!
        courseB_iceage_loops10_b: Try saying the steps out loud or writing them down
          on a piece of paper. Do you see any patterns?
        courseB_iceage_loops10_c: This is a long puzzle! Follow this path.
      courseD_iceage_loops1_2019:
        courseD_iceage_loops1_a: Watch out for broken ice! Scrat will fall right through!
        courseD_iceage_loops1_b: |-
          You will have to use this block:

          <xml><block type="maze_moveForward"/></xml>
      courseD_iceage_loops2:
        courseD_iceage_loops2_a: Break this puzzle into two pieces, one before the
          corner, and one after the corner.
        courseD_iceage_loops2_b: If you get stuck, try saying the steps out loud.
        courseD_iceage_loops2_c: Follow this path to get Scrat to the acorn.
      courseD_iceage_loops2_2019:
        courseD_iceage_loops2_a: Break this puzzle into two pieces, one before the
          corner, and one after the corner.
        courseD_iceage_loops2_b: If you get stuck, try saying the steps out loud.
        courseD_iceage_loops2_c: Follow this path to get Scrat to the acorn.
      courseD_iceage_loops3:
        courseB_iceage_loops3_a: |-
          Use this new block! <xml><block type="controls_repeat_dropdown">
              <title name="TIMES" config="2-10">5</title>
            </block></xml>
        courseB_iceage_loops3_b: To repeat code, drag out a `repeat` loop, then put
          the block you want repeated inside.
      courseD_iceage_loops3_2019:
        courseB_iceage_loops3_a: |-
          Use this new block!

           <xml><block type="controls_repeat_dropdown">
              <title name="TIMES" config="2-10">5</title>
            </block></xml>
        courseB_iceage_loops3_b: To repeat code, drag out a `repeat` loop, then put
          the block you want repeated inside.
      courseD_iceage_loops4:
        courseD_iceage_loops4_a: Don't be afraid to run your code and see what happens!
        courseD_iceage_loops4_b: Try writing down the steps Scrat would take to get
          to the acorn.  Do you see a pattern?
        courseD_iceage_loops4_c: This is the path Scrat should take.
      courseD_iceage_loops4_2019:
        courseD_iceage_loops4_a: Don't be afraid to run your code and see what happens!
        courseD_iceage_loops4_b: Try writing down the steps Scrat would take to get
          to the acorn.  Do you see a pattern?
        courseD_iceage_loops4_c: This is the path Scrat should take.
      courseD_iceage_loops6:
        courseD_iceage_loops6_a: Your final code will have **three** `move forward`
          blocks.
        courseD_iceage_loops6_b: You only need to add **one** more loop!
        courseD_iceage_loops6_c: Your final path should look like this.
      courseD_iceage_loops6_2019:
        courseD_iceage_loops6_a: Your final code will have **three** `move forward`
          blocks.
        courseD_iceage_loops6_b: You only need to add **one** more loop!
        courseD_iceage_loops6_c: Your final path should look like this.
      courseD_iceage_loops7:
        courseB_iceage_loops7_a: If you get stuck, try writing steps down on a piece
          of paper. Do you see a pattern?
        courseB_iceage_loops7_b: This is the path Scrat should take to get to the
          acorn.
      courseD_iceage_loops7_2019:
        courseB_iceage_loops7_a: If you get stuck, try writing steps down on a piece
          of paper. Do you see a pattern?
        courseB_iceage_loops7_b: This is the path Scrat should take to get to the
          acorn.
      courseD_iceage_loops8:
        courseD_iceage_loops8_a: Are the `turn` blocks right? What else can you change?
        courseD_iceage_loops8_b: The first loop should repeat **3** times, the second
          should repeat **5** times, the third loop should repeat **4** times, and
          the last loop should repeat **4** times.
        courseD_iceage_loops8_c: Use loops to help Scrat follow this path.
      courseD_iceage_loops8_2019:
        courseD_iceage_loops8_a: Are the `turn` blocks right? What else can you change?
        courseD_iceage_loops8_b: The first loop should repeat **3** times, the second
          should repeat **5** times, the third loop should repeat **4** times, and
          the last loop should repeat **4** times.
        courseD_iceage_loops8_c: Use loops to help Scrat follow this path.
      courseD_iceage_loops9:
        courseD_iceage_loops9_a: Having trouble? Try breaking this puzzle into smaller
          pieces. Don't be afraid to run your puzzle as you code!
        courseD_iceage_loops9_b: Your final code should have **4** loops.
        courseD_iceage_loops9_c: Scrat should follow this path to get the acorn.
      courseD_iceage_loops9_2019:
        courseD_iceage_loops9_a: Having trouble? Try breaking this puzzle into smaller
          pieces. Don't be afraid to run your puzzle as you code!
        courseD_iceage_loops9_b: Your final code should have **4** loops.
        courseD_iceage_loops9_c: Scrat should follow this path to get the acorn.
      courseD_maze_intro4_2019:
        courseC_maze_programming4_a: You can turn right or left from Red's point of
          view. If you are facing right, turning right will make you point downwards.
        courseC_maze_programming4_b: To follow the path, move forward and turn one
          way, then move again and turn the opposite way. Move forward one more time
          to reach the acorn.
      courseD_maze_intro5a_2019:
        courseC_maze_programming5_a: Try using the "Step" button to run your code
          line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: Remember that turns are from Red's perspective.
        courseC_maze_programming5_c: Don't be afraid to make a mistake! Try adding
          blocks and running the code to see what will happen, even if you don't think
          you've solved the puzzle yet.
      courseD_maze_nestedLoops3:
        courseD_maze_nestedLoops3_a: To solve this puzzle, you will need to "nest"
          one `repeat` loop inside of another `repeat` loop.
        courseD_maze_nestedLoops3_b: Can't figure out where to put the loops? Try
          writing the code step-by-step and look for a pattern.
        courseD_maze_nestedLoops3_c: Try writing code for one straight piece of path
          and a turn. Can you repeat this to get to the sunflower?
      courseD_maze_nestedLoops3_2018:
        courseD_maze_nestedLoops3_a: To solve this puzzle, you will need to "nest"
          one `repeat` loop inside of another `repeat` loop.
        courseD_maze_nestedLoops3_b: Can't figure out where to put the loops? Try
          writing the code step-by-step and look for a pattern.
        courseD_maze_nestedLoops3_c: Try writing code for one straight piece of path
          and a turn. Can you repeat this to get to the sunflower?
      courseD_maze_nestedLoops3_2019:
        courseD_maze_nestedLoops3_a: To solve this puzzle, you will need to "nest"
          one `repeat` loop inside of another `repeat` loop.
        courseD_maze_nestedLoops3_b: Can't figure out where to put the loops? Try
          writing the code step-by-step and look for a pattern.
        courseD_maze_nestedLoops3_c: Try writing code for one straight piece of path
          and a turn. Can you repeat this to get to the sunflower?
      courseD_maze_nestedLoops4:
        courseD_maze_nestedLoops4_a: |-
          Try using this path through the maze.

          ![](https://images.code.org/565dbbcaf5862da0f60e54195820e814-image-1505961491245.36.09.png)
        courseD_maze_nestedLoops4_b: If the loop pattern is hard to see, try coding
          it all out first and see what code repeats over and over before you put
          the loops in.
        courseD_maze_nestedLoops4_c: Try using one `repeat` loop inside of another
          to cut down on the amount of code you need.
      courseD_maze_nestedLoops4_2018:
        courseD_maze_nestedLoops4_a: |-
          Try using this path through the maze.

          ![](https://images.code.org/565dbbcaf5862da0f60e54195820e814-image-1505961491245.36.09.png)
        courseD_maze_nestedLoops4_b: If the loop pattern is hard to see, try coding
          it all out first and see what code repeats over and over before you put
          the loops in.
        courseD_maze_nestedLoops4_c: Try using one `repeat` loop inside of another
          to cut down on the amount of code you need.
      courseD_maze_nestedLoops4_2019:
        courseD_maze_nestedLoops4_a: |-
          Try using this path through the maze.

          ![](https://images.code.org/565dbbcaf5862da0f60e54195820e814-image-1505961491245.36.09.png)
        courseD_maze_nestedLoops4_b: If the loop pattern is hard to see, try coding
          it all out first and see what code repeats over and over before you put
          the loops in.
        courseD_maze_nestedLoops4_c: Try using one `repeat` loop inside of another
          to cut down on the amount of code you need.
      courseD_maze_nestedLoops5:
        courseD_maze_nestedLoops5_a: Look for a stair-step pattern in this maze to
          find where a nested loop can be used.
        courseD_maze_nestedLoops5_b: Can't figure out where to put the loops? Try
          writing the code step-by-step and look for a pattern.
      courseD_maze_nestedLoops5_2018:
        courseD_maze_nestedLoops5_a: Look for a stair-step pattern in this maze to
          find where a nested loop can be used.
        courseD_maze_nestedLoops5_b: Can't figure out where to put the loops? Try
          writing the code step-by-step and look for a pattern.
      courseD_maze_nestedLoops5_2019:
        courseD_maze_nestedLoops5_a: Look for a stair-step pattern in this maze to
          find where a nested loop can be used.
        courseD_maze_nestedLoops5_b: Can't figure out where to put the loops? Try
          writing the code step-by-step and look for a pattern.
      courseD_maze_nestedLoops6:
        courseD_maze_nestedLoops6_a: If you are stuck, try writing out the code out
          on paper without loops first and look for patterns.
        courseD_maze_nestedLoops6_b: Nesting `repeat` loops can help decrease the
          number of blocks used.
        courseD_maze_nestedLoops6_c: It will take two sets of nested `repeat` loops
          to solve this puzzle.
      courseD_maze_nestedLoops6_2018:
        courseD_maze_nestedLoops6_a: If you are stuck, try writing out the code out
          on paper without loops first and look for patterns.
        courseD_maze_nestedLoops6_b: Nesting `repeat` loops can help decrease the
          number of blocks used.
        courseD_maze_nestedLoops6_c: It will take two sets of nested `repeat` loops
          to solve this puzzle.
      courseD_maze_nestedLoops6_2019:
        courseD_maze_nestedLoops6_a: If you are stuck, try writing out the code out
          on paper without loops first and look for patterns.
        courseD_maze_nestedLoops6_b: Nesting `repeat` loops can help decrease the
          number of blocks used.
        courseD_maze_nestedLoops6_c: It will take two sets of nested `repeat` loops
          to solve this puzzle.
      courseD_maze_ramp1:
        courseC_maze_programming1_a: Jeśli ten ptak nie dociera do świnki upewnij
          się, że wszystkie te trzy bloki zostały w ściśle połączone, a następnie
          ponownie kliknij „Uruchom”.
        courseC_maze_programming1_b: Don't be afraid to make a mistake! Try adding
          blocks and running the code to see what will happen, even if you don't think
          you've solved the puzzle yet.
      courseD_maze_ramp1_2018:
        courseC_maze_programming1_a: Jeśli ten ptak nie dociera do świnki upewnij
          się, że wszystkie te trzy bloki zostały w ściśle połączone, a następnie
          ponownie kliknij „Uruchom”.
        courseC_maze_programming1_b: Don't be afraid to make a mistake! Try adding
          blocks and running the code to see what will happen, even if you don't think
          you've solved the puzzle yet.
      courseD_maze_ramp1_2019:
        courseC_maze_programming1_a: Jeśli ten ptak nie dociera do świnki upewnij
          się, że wszystkie te trzy bloki zostały w ściśle połączone, a następnie
          ponownie kliknij „Uruchom”.
        courseC_maze_programming1_b: Don't be afraid to make a mistake! Try adding
          blocks and running the code to see what will happen, even if you don't think
          you've solved the puzzle yet.
      courseD_maze_ramp2:
        courseC_maze_programming2_a: To use a `move forward` block, drag it from the
          toolbox out into the workspace and connect it to the `when run` block.
        courseC_maze_programming2_b: Upewnij się, że wszystkie 3 bloki są ściśle połączone
          razem i podłączone do bloku "po uruchomieniu".
      courseD_maze_ramp2_2018:
        courseC_maze_programming2_a: To use a `move forward` block, drag it from the
          toolbox out into the workspace and connect it to the `when run` block.
        courseC_maze_programming2_b: Upewnij się, że wszystkie 3 bloki są ściśle połączone
          razem i podłączone do bloku "po uruchomieniu".
      courseD_maze_ramp2_2019:
        courseC_maze_programming2_a: To use a `move forward` block, drag it from the
          toolbox out into the workspace and connect it to the `when run` block.
        courseC_maze_programming2_b: Upewnij się, że wszystkie 3 bloki są ściśle połączone
          razem i podłączone do bloku "po uruchomieniu".
      courseD_maze_ramp3:
        courseC_maze_programming3_a: "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\nTo
          delete a block from the middle of your code, drag all of the blocks underneath
          it away to the right and let them sit in the workspace for a while.  \n\nClick
          on the block you want to delete, and drag it back to the toolbox.\n\nFinally,
          put your other blocks back in place where they belong."
      courseD_maze_ramp3_2018:
        courseC_maze_programming3_a: "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\nTo
          delete a block from the middle of your code, drag all of the blocks underneath
          it away to the right and let them sit in the workspace for a while.  \n\nClick
          on the block you want to delete, and drag it back to the toolbox.\n\nFinally,
          put your other blocks back in place where they belong."
      courseD_maze_ramp3_2019:
        courseC_maze_programming3_a: "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\nTo
          delete a block from the middle of your code, drag all of the blocks underneath
          it away to the right and let them sit in the workspace for a while.  \n\nClick
          on the block you want to delete, and drag it back to the toolbox.\n\nFinally,
          put your other blocks back in place where they belong."
      courseD_maze_ramp4:
        courseC_maze_programming4_a: Możesz skręcić w prawo lub w lewo z punktu widzenia
          ptaka. Jeśli patrzysz w prawo, to obrót w prawo spowoduje skierowanie się
          w dół.
        courseC_maze_programming4_b: Aby podążać ścieżką, przejdź do przodu i skręć
          się w jedną stronę, a następnie ponownie idź do przodu i skręć w drugą stronę.
          Idź jeszcze raz do przodu, aby dotrzeć do świnki.
      courseD_maze_ramp4_2018:
        courseC_maze_programming4_a: Możesz skręcić w prawo lub w lewo z punktu widzenia
          ptaka. Jeśli patrzysz w prawo, to obrót w prawo spowoduje skierowanie się
          w dół.
        courseC_maze_programming4_b: Aby podążać ścieżką, przejdź do przodu i skręć
          się w jedną stronę, a następnie ponownie idź do przodu i skręć w drugą stronę.
          Idź jeszcze raz do przodu, aby dotrzeć do świnki.
      courseD_maze_ramp4_2019:
        courseC_maze_programming4_a: You can turn right or left from Scrat's point
          of view. If you are facing right, turning right will make you point downwards.
        courseC_maze_programming4_b: To follow the path, move forward and turn one
          way, then move again and turn the opposite way. Move forward one more time
          to reach the acorn.
      courseD_maze_ramp5:
        courseC_maze_programming5_a: Try using the "Step" button to run your code
          line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: Pamiętaj, że skręty są z perspektywy ptaka.
        courseC_maze_programming5_c: Don't be afraid to make a mistake! Try adding
          blocks and running the code to see what will happen, even if you don't think
          you've solved the puzzle yet.
      courseD_maze_ramp5_2018:
        courseC_maze_programming5_a: Try using the "Step" button to run your code
          line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: Pamiętaj, że skręty są z perspektywy ptaka.
        courseC_maze_programming5_c: Don't be afraid to make a mistake! Try adding
          blocks and running the code to see what will happen, even if you don't think
          you've solved the puzzle yet.
      courseD_maze_ramp5_2019:
        courseC_maze_programming5_a: Try using the "Step" button to run your code
          line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: Pamiętaj, że skręty są z perspektywy ptaka.
        courseC_maze_programming5_c: Don't be afraid to make a mistake! Try adding
          blocks and running the code to see what will happen, even if you don't think
          you've solved the puzzle yet.
      courseD_maze_ramp5a:
        courseC_maze_programming5_a: Try using the "Step" button to run your code
          line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: Pamiętaj, że skręty są z perspektywy ptaka.
        courseC_maze_programming5_c: Don't be afraid to make a mistake! Try adding
          blocks and running the code to see what will happen, even if you don't think
          you've solved the puzzle yet.
      courseD_maze_ramp5a_2018:
        courseC_maze_programming5_a: Try using the "Step" button to run your code
          line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: Pamiętaj, że skręty są z perspektywy ptaka.
        courseC_maze_programming5_c: Don't be afraid to make a mistake! Try adding
          blocks and running the code to see what will happen, even if you don't think
          you've solved the puzzle yet.
      courseD_maze_ramp5a_2019:
        courseC_maze_programming5_a: Try using the "Step" button to run your code
          line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: Remember that turns are from Scrat's perspective.
        courseC_maze_programming5_c: Don't be afraid to make a mistake! Try adding
          blocks and running the code to see what will happen, even if you don't think
          you've solved the puzzle yet.
      courseD_maze_ramp5b:
        courseC_maze_programming5_a: Try using the "Step" button to run your code
          line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: Pamiętaj, że skręty są z perspektywy ptaka.
        courseC_maze_programming5_c: Don't be afraid to make a mistake! Try adding
          blocks and running the code to see what will happen, even if you don't think
          you've solved the puzzle yet.
      courseD_maze_ramp5b_2018:
        courseC_maze_programming5_a: Try using the "Step" button to run your code
          line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: Pamiętaj, że skręty są z perspektywy ptaka.
        courseC_maze_programming5_c: Don't be afraid to make a mistake! Try adding
          blocks and running the code to see what will happen, even if you don't think
          you've solved the puzzle yet.
      courseD_maze_ramp5b_2019:
        courseC_maze_programming5_a: Try using the "Step" button to run your code
          line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: Pamiętaj, że skręty są z perspektywy ptaka.
        courseC_maze_programming5_c: Don't be afraid to make a mistake! Try adding
          blocks and running the code to see what will happen, even if you don't think
          you've solved the puzzle yet.
      courseD_maze_ramp6:
        courseC_maze_programming6_a: Istnieją dwa sposoby, aby rozwiązać ten problem!
        courseC_maze_programming6_b: The bird starts facing a wall, so remember to
          turn before you move.
        courseC_maze_programming6_c: Remember you can write one piece of the code
          at a time, then run it to figure out where you need to go from there.
      courseD_maze_ramp7:
        courseD_maze_ramp7_b: Nie zapomnij użyć przycisku „Krok”, aby przechodzić
          między blokami i szukać błędów.
        courseD_maze_ramp7_a: Use repeat blocks to run either a single block or a
          chunk of code over and over.
        courseD_maze_ramp7_c: If you want to simplify your code, you can put one repeat
          loop inside of another! This is called a **nested loop**.
      courseD_maze_until1:
        courseD_maze_until1_a: Are there any sequences you can loop to make your code
          shorter?
        courseD_maze_until1_b: Try using a nested loop to solve this puzzle.
      courseD_maze_until1_2018:
        courseD_maze_until1_a: Are there any sequences you can loop to make your code
          shorter?
        courseD_maze_until1_b: Try using a nested loop to solve this puzzle.
      courseD_maze_until1_2019:
        courseD_maze_until1_a: Are there any sequences you can loop to make your code
          shorter?
        courseD_maze_until1_b: Try using a nested loop to solve this puzzle.
      courseD_maze_until3:
        courseD_maze_until3_a: |-
          -   What does your code do?
          -   What is it supposed to do?
          -   What does that tell you?
        courseD_maze_until3_b: If you are getting stuck, try writing out the steps
          on a piece of paper and looking for places where they repeat.
        courseD_maze_until3_c: Is there a stair step pattern you can follow for this
          puzzle?
        courseD_maze_until3_d: Don't forget to use the `repeat until` block to make
          your code shorter.
      courseD_maze_until3_2018:
        courseD_maze_until3_a: |-
          -   What does your code do?
          -   What is it supposed to do?
          -   What does that tell you?
        courseD_maze_until3_b: If you are getting stuck, try writing out the steps
          on a piece of paper and looking for places where they repeat.
        courseD_maze_until3_c: Is there a stair step pattern you can follow for this
          puzzle?
        courseD_maze_until3_d: Don't forget to use the `repeat until` block to make
          your code shorter.
      courseD_maze_until3_2019:
        courseD_maze_until3_a: |-
          -   What does your code do?
          -   What is it supposed to do?
          -   What does that tell you?
        courseD_maze_until3_b: If you are getting stuck, try writing out the steps
          on a piece of paper and looking for places where they repeat.
        courseD_maze_until3_c: Is there a stair step pattern you can follow for this
          puzzle?
        courseD_maze_until3_d: Don't forget to use the `repeat until` block to make
          your code shorter.
      courseD_maze_until4:
        courseD_maze_until4_a: |-
          Use the "Step" button to go through your code line by line.

          -   Does everything work at the first step?
          -   Does everything work at the second step?
          -   Where does it go wrong?
        courseD_maze_until4_b: Is there a stair step pattern you can follow for this
          puzzle?
        courseD_maze_until4_c: Don't forget to use the `repeat until` block to make
          your code shorter.
      courseD_maze_until4_2018:
        courseD_maze_until4_a: |-
          Use the "Step" button to go through your code line by line.

          -   Does everything work at the first step?
          -   Does everything work at the second step?
          -   Where does it go wrong?
        courseD_maze_until4_b: Is there a stair step pattern you can follow for this
          puzzle?
        courseD_maze_until4_c: Don't forget to use the `repeat until` block to make
          your code shorter.
      courseD_maze_until4_2019:
        courseD_maze_until4_a: |-
          Use the "Step" button to go through your code line by line.

          -   Does everything work at the first step?
          -   Does everything work at the second step?
          -   Where does it go wrong?
        courseD_maze_until4_b: Is there a stair step pattern you can follow for this
          puzzle?
        courseD_maze_until4_c: Don't forget to use the `repeat until` block to make
          your code shorter.
      courseD_maze_until5:
        courseD_maze_until5_a: Don't forget to use `if path to the left` to keep the
          zombie checking for a place to turn.
        courseD_maze_until5_b: To use only one `move forward`, put it inside the `repeat
          until sunflower` block.
        courseD_maze_until5_c: After each step, the zombie should check whether there
          is a path to the left. What should he do if he finds one?
      courseD_maze_until5_2018:
        courseD_maze_until5_b: To use only one `move forward`, put it inside the `repeat
          until sunflower` block.
      courseD_maze_until5_2019:
        courseD_maze_until5_b: To use only one `move forward`, put it inside the `repeat
          until sunflower` block.
      courseD_maze_until6:
        courseD_maze_until6_a: This time, try the `if path to the right` to keep the
          zombie on track.
        courseD_maze_until6_b: To use only one `move forward`, put it inside the `repeat
          until sunflower` block.
        courseD_maze_until6_c: Although there are more turns here than the last puzzle,
          your code can be almost identical because of the `repeat until` block!
      courseD_maze_until6_2018:
        courseD_maze_until6_b: To use only one `move forward`, put it inside the `repeat
          until sunflower` block.
      courseD_maze_until6_2019:
        courseD_maze_until6_b: To use only one `move forward`, put it inside the `repeat
          until sunflower` block.
      courseD_maze_until7:
        courseD_maze_until7_a: You don't need your code to be any longer than last
          time, just because the maze is!
        courseD_maze_until7_b: Although there are more turns here than the last puzzle,
          your code can be almost identical because of the `repeat until` block!
        courseD_maze_until7_c: Remember to check for paths to the left, because turning
          right will take you down the wrong path!
      courseD_maze_until7_2018:
        courseD_maze_until7_a: You don't need your code to be any longer than last
          time, just because the maze is!
        courseD_maze_until7_b: Although there are more turns here than the last puzzle,
          your code can be almost identical because of the `repeat until` block!
      courseD_maze_until7_2019:
        courseD_maze_until7_a: You don't need your code to be any longer than last
          time, just because the maze is!
        courseD_maze_until7_b: Although there are more turns here than the last puzzle,
          your code can be almost identical because of the `repeat until` block!
      courseD_maze_until8:
        courseD_maze_until8_a: Make sure you're using an `if/else` block to keep the
          zombie headed the right direction.
        courseD_maze_until8_b: 'With your `if/else` block: if there is a path ahead,
          what should you do?'
        courseD_maze_until8_c: 'With your `if/else` block: if there is not a path
          ahead, which way should you turn?'
      courseD_maze_until9:
        courseD_maze_until8_a: Using `if path ahead` will keep you going forward whenever
          possible, helping you miss the paths with chompers.
        courseD_maze_until8_b: Which direction should you turn if there is no path
          forward?
        courseD_maze_until8_c: Remember to use the `repeat until` block to get you
          to the sunflower!
      courseD_maze_until9_2018:
        courseD_maze_until8_c: Remember to use the `repeat until` block to get you
          to the sunflower!
      courseD_maze_until9_2019:
        courseD_maze_until8_c: Remember to use the `repeat until` block to get you
          to the sunflower!
      courseD_playLab_cond1:
        courseD_playLab_cond1_a: To solve this challenge, attach the `move actor 1
          up` block to the `when up arrow` event, then do the same for every other
          direction.
        courseD_playLab_cond1_b: Use the drop down menus on the `when arrow` and `move
          actor` blocks to change which direction they go.
        courseD_playLab_cond1_c: Remember to move Pegleg to both of the flags once
          you click "Run"!
      courseD_playLab_cond1_2018:
        courseD_playLab_cond1_a: To solve this challenge, attach the `move actor 1
          up` block to the `when up arrow` event, then do the same for every other
          direction.
        courseD_playLab_cond1_b: Use the drop down menus on the `when arrow` and `move
          actor` blocks to change which direction they go.
        courseD_playLab_cond1_c: Remember to move Pegleg to both of the flags once
          you click "Run"!
      courseD_playLab_cond2:
        courseD_playLab_cond2_a: To succeed with this puzzle, use the `score point`
          block beneath the `when actor 1 touches actor 2` event.
      courseD_playLab_cond2_2018:
        courseD_playLab_cond2_a: To succeed with this puzzle, use the `score point`
          block beneath the `when actor 1 touches actor 2` event.
      courseD_playLab_cond3:
        courseD_playLab_cond3_a: You will need to add two blocks to your `repeat forever`
          loop.  One will choose a random emotion for the dragon (actor 2) and the
          other will wait 1 second before going through the loop again.
      courseD_playLab_cond3_2018:
        courseD_playLab_cond3_a: You will need to add two blocks to your `repeat forever`
          loop.  One will choose a random emotion for the dragon (actor 2) and the
          other will wait 1 second before going through the loop again.
      courseD_playLab_cond3a:
        courseD_playLab_cond3_c: "-   `If` the dragon is happy \n    -   `score point`\n
          \   -   `score point`  \n\n-   `Else` `score point`"
      courseD_playLab_cond3a_2018:
        courseD_playLab_cond3_c: "-   `If` the dragon is happy \n    -   `score point`\n
          \   -   `score point`  \n\n-   `Else` `score point`"
      courseD_playLab_cond4:
        courseD_playLab_cond4_a: You will want to use the `when run` event to get
          the ninja to chase the pirate.
        courseD_playLab_cond4_b: There is a special block called `set every masked
          ninja to chase actor` that will keep the ninja hot on the pirate's trail!
        courseD_playLab_cond4_c: Put the `end game as a loss` block underneath the
          `when actor 1 touches actor 3` event.
      courseD_playLab_cond4_2018:
        courseD_playLab_cond4_a: You will want to use the `when run` event to get
          the ninja to chase the pirate.
        courseD_playLab_cond4_b: There is a special block called `set every masked
          ninja to chase actor` that will keep the ninja hot on the pirate's trail!
        courseD_playLab_cond4_c: Put the `end game as a loss` block underneath the
          `when actor 1 touches actor 3` event.
      courseD_playLab_cond5:
        courseD_playLab_cond5_a: Use an `if` statement that compares whether `score`
          is `>` 5 to solve this challenge.
        courseD_playLab_cond5_b: You can have more than one `repeat forever` loop
          in the workspace.
      courseD_playLab_cond5_2018:
        courseD_playLab_cond5_a: Use an `if` statement that compares whether `score`
          is `>` 5 to solve this challenge.
        courseD_playLab_cond5_b: You can have more than one `repeat forever` loop
          in the workspace.
      courseD_playLab_cond6:
        courseD_playLab_cond6_a: Add the `set masked ninja speed` block to the beginning
          of the program to help slow the ninja down.
        courseD_playLab_cond6_b: You will need to use an `if actor 1 y position >
          255` block inside of a `repeat forever` block to always check if the pirate
          is below the octopuses.
      courseD_playLab_cond6_2018:
        courseD_playLab_cond6_a: Add the `set masked ninja speed` block to the beginning
          of the program to help slow the ninja down.
        courseD_playLab_cond6_b: You will need to use an `if actor 1 y position >
          255` block inside of a `repeat forever` block to always check if the pirate
          is below the octopuses.
      courseD_playLab_cond6a:
        courseD_playLab_cond6_c: Add a `wait 1 second` block to the top of the `repeat
          forever` loop that checks the pirate position (but not inside the `if` statement)
          to keep points from being removed too quickly.
      courseD_playLab_cond6a_2018:
        courseD_playLab_cond6_c: Add a `wait 1 second` block to the top of the `repeat
          forever` loop that checks the pirate position (but not inside the `if` statement)
          to keep points from being removed too quickly.
      courseD_scrat_ramp1:
        courseC_maze_programming1_a: If Scrat isn't getting to the acorn, make sure
          all three of the blocks have been fully snapped together, then click "Run"
          again.
        courseC_maze_programming1_b: Don't be afraid to make a mistake! Try adding
          blocks and running the code to see what will happen, even if you don't think
          you've solved the puzzle yet.
      courseD_scrat_ramp2:
        courseC_maze_programming2_a: To use a `move forward` block, drag it from the
          toolbox out into the workspace and connect it to the `when run` block.
        courseC_maze_programming2_b: Make sure all three `move forward` blocks are
          attached to the `when run` block.
      courseD_scrat_ramp3:
        courseC_maze_programming3_a: "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\nTo
          delete a block from the middle of your code, drag all of the blocks underneath
          it away to the right and let them sit in the workspace for a while.  \n\nClick
          on the block you want to delete, and drag it back to the toolbox.\n\nFinally,
          put your other blocks back in place where they belong."
        courseC_maze_programming3_b: Remember that turns to the right and left are
          from Scrat's perspective.
      courseD_scrat_ramp4:
        courseC_maze_programming4_a: You can turn right or left from Scrat's point
          of view. If you are facing right, turning right will make you point downwards.
        courseC_maze_programming4_b: To follow the path, move forward and turn one
          way, then move again and turn the opposite way. Move forward one more time
          to reach the acorn.
        courseC_maze_programming4_c: Don't be afraid to make a mistake! Try adding
          blocks and running the code to see what will happen, even if you don't think
          you've solved the puzzle yet.
      courseD_scrat_ramp5:
        courseC_maze_programming5_a: Try using the "Step" button to run your code
          line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: How far do you need to move to get to the corner?
        courseC_maze_programming5_c: You will need to turn left at the corner to get
          to the acorn.
      courseD_scrat_ramp6:
        courseC_maze_programming6a_a: Use a `repeat` loop to get Scrat moving!
      courseD_scrat_ramp7:
        courseD_scrat_programming6_a: Istnieją dwa sposoby, aby rozwiązać ten problem!
        courseD_scrat_programming6_b: Remember to turn first before moving, since
          Scrat is facing the wrong direction.
        courseD_scrat_programming6_c: Don't be afraid to make a mistake! Try adding
          blocks and running the code to see what will happen, even if you don't think
          you've solved the puzzle yet.
      courseD_scrat_ramp8:
        courseD_maze_ramp7_b: Nie zapomnij użyć przycisku „Krok”, aby przechodzić
          między blokami i szukać błędów.
        courseD_maze_ramp7_a: Use repeat blocks to run either a single block or a
          chunk of code over and over.
        courseD_maze_ramp7_c: Don't be afraid to make a mistake! Try adding blocks
          and running the code to see what will happen, even if you don't think you've
          solved the puzzle yet.
      courseE_artist_concept1:
        courseE_artist_concept1_a: The hexagons have 50 pixel sides and 60 degree
          turns to the right.
        courseE_artist_concept1_b: Try using a function here so you don't have to
          write the code for a hexagon over and over again.
        courseE_artist_concept1_c: Use the `set width` block before each function
          call to change the pen width.
      courseE_artist_concept1_2018:
        courseE_artist_concept1_a: The hexagons have 50 pixel sides and 60 degree
          turns to the right.
        courseE_artist_concept1_b: Try using a function here so you don't have to
          write the code for a hexagon over and over again.
        courseE_artist_concept1_c: Use the `set width` block before each function
          call to change the pen width.
      courseE_artist_concept4:
        courseE_artist_concept4_a: There are several ways to solve this puzzle. Can
          you make a plan?
        courseE_artist_concept4_b: Try creating one square. Then make a line of squares.  What
          comes next?
        courseE_artist_concept4_c: After drawing a line of squares, you can either
          turn around and draw another line of squares going left, or you can jump
          back to the left side of the figure to draw another line of squares going
          right. Which do you prefer?
      courseE_artist_concept4_2018:
        courseE_artist_concept4_a: There are several ways to solve this puzzle. Can
          you make a plan?
        courseE_artist_concept4_b: Try creating one square. Then make a line of squares.  What
          comes next?
        courseE_artist_concept4_c: After drawing a line of squares, you can either
          turn around and draw another line of squares going left, or you can jump
          back to the left side of the figure to draw another line of squares going
          right. Which do you prefer?
      courseE_artist_concept_challenge1:
        courseE_artist_concept_challenge1_a: 'Połowa sześciokąta ma **długość 30**
          i wymaga obrotu w prawo o **60 stopni**.  '
        courseE_artist_concept_challenge1_b: '2/3 trójkąta ma bok o **długość 30**
          i wymaga obrotu w prawo o **120 stopni**. '
        courseE_artist_concept_challenge1_c: |-
          This is the design you want to repeat to make the full shape:

          ![](<https://images.code.org/d6b2afd39119da33d085dcce6077ada8-image-1501705780826.28.43 PM.png>)
      courseE_artist_concept_challenge1_2018:
        courseE_artist_concept_challenge1_a: 'Połowa sześciokąta ma **długość 30**
          i wymaga obrotu w prawo o **60 stopni**.  '
        courseE_artist_concept_challenge1_b: '2/3 trójkąta ma bok o **długość 30**
          i wymaga obrotu w prawo o **120 stopni**. '
        courseE_artist_concept_challenge1_c: |-
          This is the design you want to repeat to make the full shape:

          ![](<https://images.code.org/d6b2afd39119da33d085dcce6077ada8-image-1501705780826.28.43 PM.png>)
      courseE_artist_concept_challenge2:
        courseE_artist_concept_challenge2_a: Once you define a function, you can call
          it over and over again - whenever and wherever you want!
        courseE_artist_concept_challenge2_b: |-
          You can jump to different positions on the canvas using this command:

          <xml>  <block type="jump_to">
              <title name="VALUE">???</title>
            </block></xml>
      courseE_artist_concept_challenge2_2018:
        courseE_artist_concept_challenge2_a: Once you define a function, you can call
          it over and over again - whenever and wherever you want!
        courseE_artist_concept_challenge2_b: |-
          You can jump to different positions on the canvas using this command:

          <xml>  <block type="jump_to">
              <title name="VALUE">???</title>
            </block></xml>
      courseE_artist_functions1:
        courseE_artist_functions1_a: Kwadraty mają boki o długości 100 pikseli, czyli
          musisz przesunąć się do przodu o 175 pikseli zanim narysujesz drugi kwadrat.
        courseE_artist_functions1_b: To dobrze rysować nakładające się linie do okularów.
        courseE_artist_functions1_c: For shorter code, try using a `repeat` loop to
          draw the square frames of the glasses.
      courseE_artist_functions10:
        courseD_artist_functions10_b: This drawing is a lot like the last one, but
          the `draw line` function is now drawing a different shape.
        courseD_artist_functions10_a: To avoid using multiple `move forward` blocks,
          create a `draw hexagon` function and call that multiple times.
        courseD_artist_functions10_c: |-
          Do you see where this drawing could use a function called `line of hexagons`?

          ![](https://images.code.org/904e0f38232fd9c15a3d2d172e7dde0b-image-1493140714580.gif)
      courseE_artist_functions10_2018:
        courseD_artist_functions10_b: This drawing is a lot like the last one, but
          the `draw line` function is now drawing a different shape.
        courseD_artist_functions10_a: To avoid using multiple `move forward` blocks,
          create a `draw hexagon` function and call that multiple times.
        courseD_artist_functions10_c: |-
          Do you see where this drawing could use a function called `line of hexagons`?

          ![](https://images.code.org/904e0f38232fd9c15a3d2d172e7dde0b-image-1493140714580.gif)
      courseE_artist_functions10_2019:
        courseD_artist_functions10_b: This drawing is a lot like the last one, but
          the `draw line` function is now drawing a different shape.
        courseD_artist_functions10_a: To avoid using multiple `move forward` blocks,
          create a `draw hexagon` function and call that multiple times.
        courseD_artist_functions10_c: |-
          Do you see where this drawing could use a function called `line of hexagons`?

          ![](https://images.code.org/904e0f38232fd9c15a3d2d172e7dde0b-image-1493140714580.gif)
      courseE_artist_functions1_copy:
        courseE_artist_functions1_a: Kwadraty mają boki o długości 100 pikseli, czyli
          musisz przesunąć się do przodu o 175 pikseli zanim narysujesz drugi kwadrat.
        courseE_artist_functions1_b: To dobrze rysować nakładające się linie do okularów.
        courseE_artist_functions1_c: For shorter code, try using a `repeat` loop to
          draw the square frames of the glasses.
      courseE_artist_functions2:
        courseD_artist_functions2_b: The function you write should not contain your
          whole program, just the part that draws a square with 100 pixel sides.
        courseD_artist_functions2_c: |-
          Use the green `draw a square` block to "call" your function under the `when run` block. Otherwise, the code in your function will not run.

          <xml><block type="procedures_callnoreturn" limit="2"><mutation name="draw a square"/></block></xml>
        courseD_artist_functions2_a: "Twój program powinien:\n\n-   uzyć funkcji,
          \n-   przesunąć się do przodu o 100 + 75 pikseli\n-   ponownie użyć funkcji"
      courseE_artist_functions2_2018:
        courseD_artist_functions2_b: The function should not contain your whole program,
          just the part that draws a square with 100 pixel sides.
        courseD_artist_functions2_c: |-
          Make sure that you use the green `draw a square` block to "call" your function. Otherwise, the code in your function will not run.

          <xml><block type="procedures_callnoreturn" limit="2"><mutation name="draw a square"/></block></xml>
        courseD_artist_functions2_a: "Twój program powinien:\n\n-   uzyć funkcji,
          \n-   przesunąć się do przodu o 100 + 75 pikseli\n-   ponownie użyć funkcji"
      courseE_artist_functions2_2019:
        courseD_artist_functions2_b: The function should not contain your whole program,
          just the part that draws a square with 100 pixel sides.
        courseD_artist_functions2_c: |-
          Make sure that you use the green `draw a square` block to "call" your function. Otherwise, the code in your function will not run.

          <xml><block type="procedures_callnoreturn" limit="2"><mutation name="draw a square"/></block></xml>
        courseD_artist_functions2_a: "Twój program powinien:\n\n-   uzyć funkcji,
          \n-   przesunąć się do przodu o 100 + 75 pikseli\n-   ponownie użyć funkcji"
      courseE_artist_functions2_copy:
        courseD_artist_functions2_b: The function you write should not contain your
          whole program, just the part that draws a square with 100 pixel sides.
        courseD_artist_functions2_c: |-
          Use the green `draw a square` block to "call" your function under the `when run` block. Otherwise, the code in your function will not run.

          <xml><block type="procedures_callnoreturn" limit="2"><mutation name="draw a square"/></block></xml>
        courseD_artist_functions2_a: "Twój program powinien:\n\n-   uzyć funkcji,
          \n-   przesunąć się do przodu o 100 + 75 pikseli\n-   ponownie użyć funkcji"
      courseE_artist_functions3:
        courseD_artist_functions3_a: |-
          To solve this puzzle, you just need to add a  loop that repeats the starter code 8 times.

          If you can't remember what the starter code was, click "start over" in the upper right corner of the workspace.
        courseD_artist_functions3_b: Your loop should have all 3 starter code blocks
          inside of it.
      courseE_artist_functions3_copy:
        courseD_artist_functions3_a: |-
          To solve this puzzle, you just need to add a  loop that repeats the starter code 8 times.

          If you can't remember what the starter code was, click "start over" in the upper right corner of the workspace.
        courseD_artist_functions3_b: Your loop should have all 3 starter code blocks
          inside of it.
      courseE_artist_functions4:
        courseD_artist_functions4_a: Try using a function!
        courseD_artist_functions4_b: Drag the `draw a star` function block out of
          the toolbox to begin building your function. It should have the same code
          as the previous puzzle, since you are drawing the same star pattern.
        courseD_artist_functions4_c: Use the green `draw a star` block to call this
          function in your main program. Don't forget to jump forward between each
          star!
      courseE_artist_functions4_copy:
        courseD_artist_functions4_a: Try using a function!
        courseD_artist_functions4_b: Drag the `draw a star` function block out of
          the toolbox to begin building your function. It should have the same code
          as the previous puzzle, since you are drawing the same star pattern.
        courseD_artist_functions4_c: Use the green `draw a star` block to call this
          function in your main program. Don't forget to jump forward between each
          star!
      courseE_artist_functions5:
        courseD_artist_functions5_a: Don't give up!  Remember what you have been learning.
        courseD_artist_functions5_b: Functions make it easy to call saved code at
          any time, not just from inside a loop!
        courseD_artist_functions5_c: Start by dragging the code for a star shape into
          the `draw a star` function, then use this function to draw the three stars!
      courseE_artist_functions5_2018:
        courseD_artist_functions5_a: Don't give up!  Remember what you have been learning.
        courseD_artist_functions5_b: Functions make it easy to call saved code at
          any time, not just from inside a loop!
        courseD_artist_functions5_c: Start by creating your `draw a star` function,
          then use this function to draw the three stars!
      courseE_artist_functions5_2019:
        courseD_artist_functions5_a: Don't give up!  Remember what you have been learning.
        courseD_artist_functions5_b: Functions make it easy to call saved code at
          any time, not just from inside a loop!
        courseD_artist_functions5_c: Start by creating your `draw a star` function,
          then use this function to draw the three stars!
      courseE_artist_functions5_copy:
        courseD_artist_functions5_a: Don't give up!  Remember what you have been learning.
        courseD_artist_functions5_b: Functions make it easy to call saved code at
          any time, not just from inside a loop!
        courseD_artist_functions5_c: Start by dragging the code for a star shape into
          the `draw a star` function, then use this function to draw the three stars!
      courseE_artist_functions6:
        grade4_artist_functions_windows0_a: Focus only on making one window for now.  We'll
          create a function in the next puzzle.
        grade4_artist_functions_windows0_b: Try using nested loops. The inner loop
          will make the square and the outer loop will rotate the square four times.
        grade4_artist_functions_windows0_c: Don't be afraid to make a mistake! Try
          adding blocks and running the code to see what will happen, even if you
          haven't solved the puzzle yet.
      courseE_artist_functions7:
        courseD_artist_functions7_a: Try creating your function first then add windows
          one at a time.
        courseD_artist_functions7_b: You shouldn't need to add any extra repeat loops.  Just
          jump the artist 100 pixels between each top window, then down 150 pixels
          to get to the bottom windows.
      courseE_artist_functions7_2018:
        courseD_artist_functions7_a: Try creating your function first then add windows
          one at a time.
        courseD_artist_functions7_b: To get from the top windows to the bottom windows,
          simply turn the artist right, jump 150 pixels, then turn the artist right
          again!  Now the artist will be facing the correct direction to finish the
          rest of the house!
      courseE_artist_functions7_2019:
        courseD_artist_functions7_a: Try creating your function first then add windows
          one at a time.
        courseD_artist_functions7_b: To get from the top windows to the bottom windows,
          simply turn the artist right, jump 150 pixels, then turn the artist right
          again!  Now the artist will be facing the correct direction to finish the
          rest of the house!
      courseE_artist_functions8:
        courseD_artist_functions8_f: You only need one `move forward` block, but you
          will need quite a few `jump forward` and/or `jump backward` blocks!
        courseD_artist_functions8_a: |-
          Start by making a function for a square, then try making a function for a line of squares.

          How would you use the `draw a line of squares` function to make this image?
        courseD_artist_functions8_d: |-
          To make a line of squares,

          -   repeat 3 times
              -   draw a square with a side length of **50 pixels**
              -   jump forward **100 pixels**
        courseD_artist_functions8_b: |-
          Think of each row in this picture as a line of 3 squares. How many lines of squares are there and where do you start drawing each of them?

          ![](<https://images.code.org/22a6f5cc5551371057244eee01955f8e-image-1493135135468.4.10 Hint Drawing.png>)
        courseD_artist_functions8_c: At the end of each line of squares, the artist
          will need to jump down and backward before he draws the next line of squares.
        courseD_artist_functions8_g: "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
      courseE_artist_functions8_2018:
        courseD_artist_functions8_f: You only need one `move forward` block, but you
          will need quite a few `jump forward` and/or `jump backward` blocks!
        courseD_artist_functions8_a: |-
          Start by making a function for a square, then try making a function for a line of squares.

          How would you use the `draw a line of squares` function to make this image?
        courseD_artist_functions8_d: |-
          To make a line of squares,

          -   repeat 3 times
              -   draw a square with a side length of **50 pixels**
              -   jump forward **100 pixels**
        courseD_artist_functions8_b: |-
          Think of each row in this picture as a line of 3 squares. How many lines of squares are there and where do you start drawing each of them?

          ![](<https://images.code.org/22a6f5cc5551371057244eee01955f8e-image-1493135135468.4.10 Hint Drawing.png>)
        courseD_artist_functions8_c: At the end of each set of staggered squares,
          the artist will need to jump down and backward before he draws the next
          set of staggered squares.
        courseD_artist_functions8_g: "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
      courseE_artist_functions8_2019:
        courseD_artist_functions8_f: You only need one `move forward` block, but you
          will need quite a few `jump forward` and/or `jump backward` blocks!
        courseD_artist_functions8_a: |-
          Start by making a function for a square, then try making a function for a line of squares.

          How would you use the `draw a line of squares` function to make this image?
        courseD_artist_functions8_d: |-
          To make a line of squares,

          -   repeat 3 times
              -   draw a square with a side length of **50 pixels**
              -   jump forward **100 pixels**
        courseD_artist_functions8_b: |-
          Think of each row in this picture as a line of 3 squares. How many lines of squares are there and where do you start drawing each of them?

          ![](<https://images.code.org/22a6f5cc5551371057244eee01955f8e-image-1493135135468.4.10 Hint Drawing.png>)
        courseD_artist_functions8_c: At the end of each set of staggered squares,
          the artist will need to jump down and backward before he draws the next
          set of staggered squares.
        courseD_artist_functions8_g: "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
      courseE_artist_functions8b_2018:
        courseD_artist_functions8_f: You only need one `move forward` block if you're
          doing this correctly!
        courseD_artist_functions8_a: Start by making a function for a square, then
          try making a function for a line of squares.
        courseD_artist_functions8_d: |-
          To make a line of squares,

          -   repeat 3 times
              -   draw a square
              -   jump forward **100 pixels**
      courseE_artist_functions8b_2019:
        courseD_artist_functions8_f: You only need one `move forward` block if you're
          doing this correctly!
        courseD_artist_functions8_a: Start by making a function for a square, then
          try making a function for a line of squares.
        courseD_artist_functions8_d: |-
          To make a line of squares,

          -   repeat 3 times
              -   draw a square
              -   jump forward **100 pixels**
      courseE_artist_functions8c_2018:
        courseD_artist_functions8_f: This is easier than it looks!  You shouldn't
          need any `move` or `jump` blocks here!
        courseD_artist_functions8_a: The second line of squares is just a 180 degree
          turn different than the first!
        courseD_artist_functions8_c: At the end of each line of squares, the artist
          only needs to turn 180 degrees before drawing the next line of squares.  Put
          the whole thing in a repeat loop to set you up for the next exercise!
      courseE_artist_functions8c_2019:
        courseD_artist_functions8_f: This is easier than it looks!  You shouldn't
          need any `move` or `jump` blocks here!
        courseD_artist_functions8_a: The second line of squares is just a 180 degree
          turn different than the first!
        courseD_artist_functions8_c: At the end of each line of squares, the artist
          only needs to turn 180 degrees before drawing the next line of squares.  Put
          the whole thing in a repeat loop to set you up for the next exercise!
      courseE_artist_functions9:
        courseD_artist_functions9_e: |-
          Can you spot all four places that the `line of triangles` can be used in this drawing?

          ![](https://images.code.org/130e1040ecca7186dea87f42666f5620-image-1493140373966.gif)
        courseD_artist_functions9_a: |-
          This puzzle can be broken into three parts:

          -   make the `draw a triangle` function
          -   make the `draw a line of triangles` function
          -   use your `draw a line of triangles` function four times to complete the drawing
        courseD_artist_functions9_b: This drawing is made by drawing a line of triangles
          4 times and turning either 60 or 120 degrees before you draw the next triangle
          line.
        courseD_artist_functions9_c: |-
          To draw a line of triangles:

          -   repeat 4 times
              -   draw a triangle
              -   jump forward 50 pixels
        courseD_artist_functions9_d: |-
          To draw the diamond:

          -   repeat 2 times
              -   draw a line of triangles
              -   turn 60 degrees
              -   draw a line of triangles
              -   turn 120 degrees
      courseE_artist_functions9_2018:
        courseD_artist_functions9_e: |-
          Can you spot all four places that the `line of triangles` can be used in this drawing?

          ![](https://images.code.org/130e1040ecca7186dea87f42666f5620-image-1493140373966.gif)
        courseD_artist_functions9_a: |-
          This puzzle can be broken into three parts:

          -   make the `draw a triangle` function
          -   make the `draw a line of triangles` function
          -   use your `draw a line of triangles` function four times to complete the drawing
        courseD_artist_functions9_b: This drawing is made by drawing a line of triangles
          4 times and turning either 60 or 120 degrees before you draw the next triangle
          line.
        courseD_artist_functions9_c: |-
          To draw a line of triangles:

          -   repeat 4 times
              -   draw a triangle
              -   jump forward 50 pixels
        courseD_artist_functions9_d: |-
          To draw the diamond:

          -   repeat 2 times
              -   draw a line of triangles
              -   turn 60 degrees
              -   draw a line of triangles
              -   turn 120 degrees
      courseE_artist_functions9_2019:
        courseD_artist_functions9_e: |-
          Can you spot all four places that the `line of triangles` can be used in this drawing?

          ![](https://images.code.org/130e1040ecca7186dea87f42666f5620-image-1493140373966.gif)
        courseD_artist_functions9_a: |-
          This puzzle can be broken into three parts:

          -   make the `draw a triangle` function
          -   make the `draw a line of triangles` function
          -   use your `draw a line of triangles` function four times to complete the drawing
        courseD_artist_functions9_b: This drawing is made by drawing a line of triangles
          4 times and turning either 60 or 120 degrees before you draw the next triangle
          line.
        courseD_artist_functions9_c: |-
          To draw a line of triangles:

          -   repeat 4 times
              -   draw a triangle
              -   jump forward 50 pixels
        courseD_artist_functions9_d: |-
          To draw the diamond:

          -   repeat 2 times
              -   draw a line of triangles
              -   turn 60 degrees
              -   draw a line of triangles
              -   turn 120 degrees
      courseE_artist_functions_challenge1:
        courseE_artist_functions_challenge1_a: If you call the function one more time,
          you can create the same design in the final corner.
        courseE_artist_functions_challenge1_b: You can also `jump to` other positions
          or change the whole design however you want!
      courseE_artist_functions_challenge1_2018:
        courseE_artist_functions_challenge1_a: If you call the function one more time,
          you can create the same design in the final corner.
        courseE_artist_functions_challenge1_b: You can also `jump to` other positions
          or change the whole design however you want!
      courseE_artist_functions_challenge1_2019:
        courseE_artist_functions_challenge1_a: If you call the function one more time,
          you can create the same design in the final corner.
        courseE_artist_functions_challenge1_b: You can also `jump to` other positions
          or change the whole design however you want!
      courseE_artist_functions_challenge2:
        courseE_artist_functions_challenge1_a: |-
          <xml>
            <block type="jump_to_xy">
              <title name="XPOS">350</title>
              <title name="YPOS">200</title>
            </block>
            </xml>

          This `jump to` block lets you move the zombie artist to any pixel on the grid, whenever you want. It works by moving him a number of pixels over to the right and a number of pixels down. This is always counted from the top left corner, which it means it doesn't matter where the zombie artist is _before_ the command is run!

          ![](https://images.code.org/b90fdddc778a27e199221271ce91307a-image-1496450976440.png)
      courseE_artist_functions_challenge2_2018:
        courseE_artist_functions_challenge1_a: |-
          <xml>
            <block type="jump_to_xy">
              <title name="XPOS">350</title>
              <title name="YPOS">200</title>
            </block>
            </xml>

          This `jump to` block lets you move the zombie artist to any pixel on the grid, whenever you want. It works by moving him a number of pixels over to the right and a number of pixels down. This is always counted from the top left corner, which it means it doesn't matter where the zombie artist is _before_ the command is run!

          ![](https://images.code.org/b90fdddc778a27e199221271ce91307a-image-1496450976440.png)
      courseE_artist_functions_challenge2_2019:
        courseE_artist_functions_challenge1_a: |-
          <xml>
            <block type="jump_to_xy">
              <title name="XPOS">350</title>
              <title name="YPOS">200</title>
            </block>
            </xml>

          This `jump to` block lets you move the zombie artist to any pixel on the grid, whenever you want. It works by moving him a number of pixels over to the right and a number of pixels down. This is always counted from the top left corner, which it means it doesn't matter where the zombie artist is _before_ the command is run!

          ![](https://images.code.org/b90fdddc778a27e199221271ce91307a-image-1496450976440.png)
      courseE_artist_ramp8:
        courseE_artist_ramp8_a: To draw a side, use the `move forward by 100 pixels`
          block, and change the 100 to a 200.
        courseE_artist_ramp8_b: |-
          To draw 4 sides, put the `move forward by 100 pixels` block inside of a repeat loop and make sure the loop is set to draw 4 times.

          Don't forget to turn afterward!
        courseE_artist_ramp8_c: 'Your loop should have two blocks inside of it: `move
          forward` and `turn right by 90 degrees`.'
      courseE_artist_ramp8_2:
        courseE_artist_ramp8_a: To draw a side, use the `move forward by 100 pixels`
          block, and change the 100 to a 200.
        courseE_artist_ramp8_b: |-
          To draw 4 sides, put the `move forward by 100 pixels` block inside of a repeat loop and make sure the loop is set to draw 4 times.

          Don't forget to turn afterward!
        courseE_artist_ramp8_c: 'Your loop should have two blocks inside of it: `move
          forward` and `turn right by 90 degrees`.'
      courseE_artist_ramp9:
        courseD_artist_ramp12_a: How is this similar to a square?  How is it different?
        courseD_artist_ramp12_b: You can use the drop down menu on the `turn` blocks
          to see which angle you need!
        courseD_artist_ramp12_c: To draw each side, you will need to move forward
          100 pixels, then turn right 120 degrees. How many sides do you need?
      courseE_artist_ramp9_2:
        courseD_artist_ramp12_a: How is this similar to a square?  How is it different?
        courseD_artist_ramp12_b: You can use the drop down menu on the `turn` blocks
          to see which angle you need!
        courseD_artist_ramp12_c: To draw each side, you will need to move forward
          100 pixels, then turn right 120 degrees. How many sides do you need?
      courseE_bee_concept1:
        courseE_bee_concept1_b: Are there any patterns that _repeat_ here?
        courseE_bee_concept1_a: If you don't understand how to use nested loops here,
          try writing out the instructions step by step on a piece of paper.  Circle
          the patterns that you see.
      courseE_bee_concept1_2018:
        courseE_bee_concept1_b: Are there any patterns that _repeat_ here?
        courseE_bee_concept1_a: If you don't understand how to use nested loops here,
          try writing out the instructions step by step on a piece of paper.  Circle
          the patterns that you see.
      courseE_bee_concept2:
        courseE_bee_concept2_a: Would a `while` loop help here?
        courseE_bee_concept2_d: You can even check empty spaces to see if honey is
          > 0.
        courseE_bee_concept2_b: You can use `while` loops to move to the end of each
          path, and to collect all of the honey from each space.
        courseE_bee_concept2_c: Which way should the bee turn after each path?
      courseE_bee_concept2_2018:
        courseE_bee_concept2_a: Would a `while` loop help here?
        courseE_bee_concept2_d: 'With this `while` loop you  can check empty spaces
          to see if the amount of honey is > 0. This does the same as the `while there
          is honey` loop. '
        courseE_bee_concept2_b: You can use `while` loops to move to the end of each
          path, and to collect all of the honey from each space.
        courseE_bee_concept2_c: Which way should the bee turn after each path?
      courseE_bee_concept3:
        courseE_bee_concept3a_a: Try using nested `repeat` loops to solve this puzzle.
        courseE_bee_concept3a_b: If you can't figure out where to put the loops, try
          writing your code step-by-step and looking for patterns.
        courseE_bee_concept3a_c: There are three groups of flowers, so your outer
          `repeat` loop should repeat three times.
      courseE_bee_concept3_2018:
        courseE_bee_concept3a_a: Try using nested `repeat` or `while` loops to solve
          this puzzle.
        courseE_bee_concept3a_b: If you can't figure out where to put the loops, try
          writing your code step-by-step and looking for patterns.
      courseE_bee_concept4:
        courseE_bee_concept4_a: An `if/else` statement could really help you out here.
        courseE_bee_concept4_b: The stair step pattern can help you get through all
          of the flowers and honeycombs.
        courseE_bee_concept4_c: If you are at a flower, how many times do you have
          to get nectar? Is this the same number for all flowers?
      courseE_bee_concept4_2018:
        courseE_bee_concept4_a: An `if/else` statement could really help you out here.
        courseE_bee_concept4_b: The stair step pattern can help you get through all
          of the flowers and honeycombs.
        courseE_bee_concept4_c: If you are at a flower, how many times do you have
          to get nectar? Is this the same number for all flowers?
      courseE_bee_concept5:
        courseE_bee_concept5_a: The flowers follow a rectangular path.  You can trace
          that rectangle using `while path ahead` even with a different number of
          squares per side.
        courseE_bee_concept5_c: |-
          Here's a picture of a rectangular path the bee could take.

          ![](https://images.code.org/39554a528b5ed168737e846c161f00ee-image-1510202150660.33.23.png)
        courseE_bee_concept5_b: You can check every square for a flower using the
          `if` block, even if you already know there's not one there.
      courseE_bee_concept5_2018:
        courseE_bee_concept5_a: The flowers follow a rectangular path.  You can trace
          that rectangle using `while path ahead` even with a different number of
          squares per side.
        courseE_bee_concept5_c: |-
          Here's a picture of a rectangular path the bee could take.

          ![](https://images.code.org/39554a528b5ed168737e846c161f00ee-image-1510202150660.33.23.png)
        courseE_bee_concept5_b: You can check every square for a flower using the
          `if` block, even if you already know there's not one there.
      courseE_bee_functions1:
        courseE_bee_functions1_a: Remember that left and right turns are from the
          point of view of the bee.
        courseE_bee_functions1_b: Use a `repeat` loop when collecting nectar to make
          your code shorter.
        courseE_bee_functions1_c: Remember that left and right turns are from the
          perspective of the bee.
      courseE_bee_functions10:
        courseE_bee_functions10_a: You will need a `while` loop to collect all of
          the honey, since it varies between honeycombs.
        courseE_bee_functions10_b: Include the turns and movement in your function,
          so you can call it when the bee is on the main path.
        courseE_bee_functions10_c: Remember to call your function in the main program!
      courseE_bee_functions2:
        courseE_bee_functions2_a: The function has been written for you, but you will
          need to call it at each flower.
        courseE_bee_functions2_b: This <xml><block type="procedures_callnoreturn"><mutation
          name="get 2 nectar"/></block></xml> block calls the function given to you.
        courseE_bee_functions2_c: You will want to move forward and get 2 nectar twice
          to solve this puzzle.
      courseE_bee_functions3:
        courseE_bee_functions3_a: 'Your function for this puzzle only needs to collect
          nectar, it shouldn''t have any `move forward` or `turn` blocks in it. '
        courseE_bee_functions3_b: Call your `get 5` function under the `when run`
          block.
        courseE_bee_functions3_c: Your main program will control all of the movement,
          the function is just for what happens when the bee reaches a flower.
        courseE_bee_functions3_d: Try using this path through.
      courseE_bee_functions4:
        courseE_bee_functions4_a: Your function will already travel down the side
          paths and return the bee back to the main road.  You don't need to add that
          part to your program.
        courseE_bee_functions4_b: Use the green `move and get nectar` block to call
          this function.
        courseE_bee_functions4_c: You don't need to change the function, just use
          it in your program.
      courseE_bee_functions5:
        courseE_bee_functions5_a: Edit the function so that it solves the puzzle without
          having to change the main program.
        courseE_bee_functions5_c: The `move forward` block can be changed into a `move
          backward` block. Use this instead of turning all the way around at the end
          of the paths!
        courseE_bee_functions5_b: "Your function should make the bee: \n\n-   turn\n-
          \  move forward\n-   collect all of the nectar\n-   move backward\n-   turn
          back to the direction that the bee started from"
      courseE_bee_functions6:
        courseE_bee_functions6_a: "Jeśli zadanie wydaje Ci sie za trudne,  spróbuj
          budować funkcje po kawałku.  \n\nDodaj bloki, a następnie wypróbuj ich działanie.
          Dodaj kolejne, a następnie spróbuj ponownie.  Wkrótce osiągniesz cel! \n\n![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)"
        courseE_bee_functions6_b: It might help in this case to move inside of the
          function, but not all of your `move` blocks need to be there.
      courseE_bee_functions7:
        courseE_bee_functions7_a: "Jeśli łamigłówka wydaje Ci się za trudna, spróbuj
          budować funkcje po kawałku.  \n\nDodaj bloki, a następnie wypróbuj ich działanie.
          Dodaj kolejne, t wypróbuj ponownie.  Wkrótce osiągniesz cel!"
        courseE_bee_functions7_b: |-
          Pamiętaj, aby budować kodu wewnątrz zielonego bloku funkcji.

          ![](https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)
        courseE_bee_functions7_c: This function should turn the bee to head him down
          the path, collect the nectar, make the honey, then turn the bee around and
          bring him back.
      courseE_bee_functions8:
        courseE_bee_functions8_a: Your function will only need to collect nectar.
          Try using a while loop instead of a repeat loop.
        courseE_bee_functions8_b: Use `while nectar > 0` to make sure you get all
          of the nectar.
        courseE_bee_functions8_c: Your main program will need a stair step movement
          pattern. Remember, the main program is the code under the `when run` block.
      courseE_bee_functions9:
        courseE_bee_functions9_a: You can use the exact same function for this puzzle
          as you did in the last puzzle.  All you need to do is create a function
          that collects all of the nectar when you get to each flower.
        courseE_bee_functions9_b: Even though you know how much nectar some of the
          flowers have, a `while` loop can make one function work for all of them.
      courseE_bee_functions_challenge1:
        courseE_bee_functions_challenge1_a: "Jeśli łamigłówka wydaje Ci się za trudna,
          spróbuj budować funkcje po kawałku.  \n\nDodaj bloki, a następnie wypróbuj
          ich działanie. Dodaj kolejne, t wypróbuj ponownie.  Wkrótce osiągniesz cel!"
        courseE_bee_functions_challenge1_b: Remember to build your code inside of
          the green function block.
      courseE_bee_functions_challenge2:
        courseE_bee_functions_challenge1_a: "Jeśli łamigłówka wydaje Ci się za trudna,
          spróbuj budować funkcje po kawałku.  \n\nDodaj bloki, a następnie wypróbuj
          ich działanie. Dodaj kolejne, t wypróbuj ponownie.  Wkrótce osiągniesz cel!"
        courseE_bee_functions_challenge1_b: Remember to build your code inside of
          the green function block.
      courseE_farmer_concept1:
        courseE_farmer_concept1_a: A `while there is a hole` block will help you fill
          any hole until it's flat.
        courseE_farmer_concept1_b: You can use a stair step pattern to get to the
          holes.
      courseE_farmer_concept1_2018:
        courseE_farmer_concept1_a: A `while there is a hole` block will help you fill
          any hole until it's flat.
        courseE_farmer_concept1_b: You can use a stair step pattern to get to the
          holes.
      courseE_farmer_concept2:
        courseE_farmer_concept2_a: The paths are all the same length, but they are
          a different number of squares apart.  A loop isn't ideal here. Try a function.
        courseE_farmer_concept2_b: A function which turns, goes down the path, gathers
          pumpkins, and returns to the main horizontal path could be helpful here.
        courseE_farmer_concept2_c: Your main program can call this function with the
          green `do something` block.
      courseE_farmer_concept2_2018:
        courseE_farmer_concept2_a: The paths are all the same length, but they are
          a different number of squares apart.  A loop isn't ideal here. Try a function.
        courseE_farmer_concept2_b: A function which turns, goes down the path, gathers
          pumpkins, and returns to the main horizontal path could be helpful here.
        courseE_farmer_concept2_c: Your main program can call this function with the
          green `do something` block.
      courseE_farmer_concept3:
        grade3_robotFarmer_ConditionalsIntro_8_a: The `while path ahead` block lets
          you keep going, even if you don't know how many squares are in a path.
        grade3_robotFarmer_ConditionalsIntro_8_b: What should you do once you've reached
          the end of a path?
        grade3_robotFarmer_ConditionalsIntro_8_c: Use a `repeat` loop to run your
          code multiple times for each straight path.
      courseE_farmer_concept3_2018:
        grade3_robotFarmer_ConditionalsIntro_8_a: The `while path ahead` block lets
          you keep going, even if you don't know how many squares are in a path.
        grade3_robotFarmer_ConditionalsIntro_8_b: What should you do once you've reached
          the end of a path?
        grade3_robotFarmer_ConditionalsIntro_8_c: Use a `repeat` loop to run your
          code multiple times for each straight path.
      courseE_farmer_functions1:
        courseE_farmer_functions1_a: The toolbox is organized a little differently
          this time! Click on the different categories to see which blocks you have.
        courseE_farmer_functions1_b: You only need to pick one pumpkin, but could
          you use a loop to get to it?
      courseE_farmer_functions10b:
        courseE_farmer_functions10b_a: You will have to re-create your function first.
        courseE_farmer_functions10b_b: Which way do you need to turn after the first
          pumpkin?
        courseE_farmer_functions10b_c: Look back at the last puzzle if you need help
          making the function.
      courseE_farmer_functions1_2018:
        courseE_farmer_functions1_a: The toolbox is organized a little differently
          this time! Click on the different categories to see which blocks you have.
        courseE_farmer_functions1_b: You only need to pick one pumpkin, but could
          you use a loop to get to it?
      courseE_farmer_functions1_2019:
        courseE_farmer_functions1_a: The toolbox is organized a little differently
          this time! Click on the different categories to see which blocks you have.
        courseE_farmer_functions1_b: You only need to pick one pumpkin, but could
          you use a loop to get to it?
      courseE_farmer_functions1a:
        courseE_farmer_functions1a_a: Think through the `if/else` statements step
          by step. What should you do if you are standing at a corn plant?
        courseE_farmer_functions1a_b: Use a `repeat until` block to get to the pumpkin!
      courseE_farmer_functions1a_2018:
        courseE_farmer_functions1a_a: Make sure you read through the function definition.
          Can you tell what it does?
        courseE_farmer_functions1a_b: Use a `repeat until` block to get to the pumpkin!
      courseE_farmer_functions1a_2019:
        courseE_farmer_functions1a_a: Make sure you read through the function definition.
          Can you tell what it does?
        courseE_farmer_functions1a_b: Use a `repeat until` block to get to the pumpkin!
      courseE_farmer_functions2b:
        courseE_farmer_functions2b_a: You can use a `repeat until pumpkin` to get
          to the ends of the two paths.
        courseE_farmer_functions2b_b: There is no corn on the connecting path, so
          you can just move along it and turn.
        courseE_farmer_functions2b_c: You will need two separate `repeat until` blocks
          to get all of the crops.
      courseE_farmer_functions2b_2018:
        courseE_farmer_functions2b_a: You can `repeat until pumpkin` to get to the
          ends of the two paths.
        courseE_farmer_functions2b_b: There is no corn on the connecting path, so
          you can just move along it and turn.
        courseE_farmer_functions2b_c: You will need two separate `repeat until` blocks
          to get all of the crops.
      courseE_farmer_functions2b_2019:
        courseE_farmer_functions2b_a: You can `repeat until pumpkin` to get to the
          ends of the two paths.
        courseE_farmer_functions2b_b: There is no corn on the connecting path, so
          you can just move along it and turn.
        courseE_farmer_functions2b_c: You will need two separate `repeat until` blocks
          to get all of the crops.
      courseE_farmer_functions2ba:
        courseE_farmer_functions2ba_a: Use the green `corn and pumpkin` block to call
          this function.
        courseE_farmer_functions2ba_b: Drag all of the blocks in the workspace together
          under `when run` to see how this function works.
      courseE_farmer_functions2ba_2018:
        courseE_farmer_functions2ba_a: Use the green `get all pumpkins` block to make
          sure you get all of the pumpkins!
      courseE_farmer_functions2ba_2019:
        courseE_farmer_functions2ba_a: Use the green `get all pumpkins` block to make
          sure you get all of the pumpkins!
      courseE_farmer_functions3c:
        courseE_farmer_functions3c_a: What sequence is repeated often in this program?
          Can you drag these blocks into the function?
        courseE_farmer_functions3c_b: Don't forget to call your function in the main
          program wherever you removed blocks.
      courseE_farmer_functions3c1_2018:
        coursee_farmer_functions3c1_2018_a: You'll need to use the `pick along path`
          function three times to solve this puzzle.
        coursee_farmer_functions3c1_2018_b: What code do you need to add to get around
          the corners?
      courseE_farmer_functions3c1_2019:
        coursee_farmer_functions3c1_2018_a: You'll need to use the `pick along path`
          function three times to solve this puzzle.
        coursee_farmer_functions3c1_2018_b: What code do you need to add to get around
          the corners?
      courseE_farmer_functions4b:
        courseE_farmer_functions4b_a: Don't be afraid to make a mistake! Try adding
          blocks and running the code to see what will happen, even if you haven't
          solved the puzzle yet.
        courseE_farmer_functions4b_b: Remember to turn after each path.
        courseE_farmer_functions4b_c: The green `corn and pumpkin` blocks are in the
          Functions tab of the toolbox.
      courseE_farmer_functions5c:
        courseE_farmer_functions5c_a: Are there any other patterns you can loop in
          this puzzle?
        courseE_farmer_functions5c_b: Don't be afraid to make a mistake! Try adding
          blocks and running the code to see what will happen, even if you haven't
          solved the puzzle yet.
      courseE_farmer_functions6c:
        courseE_farmer_functions6c_a: Edit your function to check for the lettuce
          as well.
        courseE_farmer_functions6c_b: Would an `if/else` block help to check if there
          is lettuce in a space?
        courseE_farmer_functions6c_c: Don't forget to keep checking for corn!
      courseE_farmer_functions7a1_2018:
        courseE_farmer_functions7a1_2018_a: Create your function under the `functions`
          section in the toolbox.
        courseE_farmer_functions7a1_2018_b: Don't forget to use your function when
          you're done making it!
      courseE_farmer_functions7a1_2019:
        courseE_farmer_functions7a1_2018_a: Create your function under the `functions`
          section in the toolbox.
        courseE_farmer_functions7a1_2018_b: Don't forget to use your function when
          you're done making it!
      courseE_farmer_functions7b:
        courseE_farmer_functions7b_a: You don't need a function here, but you can
          make one if it is helpful to you!
        courseE_farmer_functions7b_b: Use an `if/else` statement to check for crops,
          then turn based on which crop you find.
        courseE_farmer_functions7b_c: A `repeat until pumpkin` loop can help you get
          all the way through the maze.
      courseE_farmer_functions8a1_2018:
        courseE_farmer_functions8a1_2018a: Start this puzzle off by coding the same
          function you made in the last puzzle.
        courseE_farmer_functions8a1_2018b: After the function runs the first time,
          you'll need to make one extra turn before you can run it again.
      courseE_farmer_functions8a1_2019:
        courseE_farmer_functions8a1_2018a: Start this puzzle off by coding the same
          function you made in the last puzzle.
        courseE_farmer_functions8a1_2018b: After the function runs the first time,
          you'll need to make one extra turn before you can run it again.
      courseE_farmer_functions8b:
        courseE_farmer_functions8b_a: Try running the code given to see what it does.
          What do you need after this?
        courseE_farmer_functions8b_b: Drag all of the starter blocks into a function
          so that you can use them more than once.
        courseE_farmer_functions8b_c: How many times do you need to call the function?
      courseE_farmer_functions9a1_2018:
        courseE_farmer_functions9a1_2018a: You'll use the same function that you made
          in the last couple of puzzles.
        courseE_farmer_functions9a1_2018b: Use the same steps from the previous puzzle
          to solve the first half of this puzzle.
        courseE_farmer_functions9a1_2018c: You'll need to `turn` a few times and `move
          forward` to get to the last crop of lettuce before you can call your function
          again.
      courseE_farmer_functions9a1_2019:
        courseE_farmer_functions9a1_2018a: You'll use the same function that you made
          in the last couple of puzzles.
        courseE_farmer_functions9a1_2018b: Use the same steps from the previous puzzle
          to solve the first half of this puzzle.
        courseE_farmer_functions9a1_2018c: You'll need to `turn` a few times and `move
          forward` to get to the last crop of lettuce before you can call your function
          again.
      courseE_farmer_functions9b:
        courseE_farmer_functions9b_a: Can you use nested `if` and `if/else` statements
          to move along the path?
        courseE_farmer_functions9b_b: Use `repeat until pumpkin` to move through all
          of the paths.
        courseE_farmer_functions9b_c: You will want to move through the paths as if
          they are squares getting larger after each loop.
      courseE_farmer_ramp11a:
        courseE_farmer_ramp12_a: 'Instead of using a `repeat` loop to tell the farmer
          how many times to shovel dirt, now you can use a `while there is a pile`
          block.  '
        courseE_farmer_ramp12_b: You only need to move forward once to get to the
          dirt.
      courseE_farmer_ramp11a_2018:
        courseE_farmer_ramp12_a: 'Instead of using a `repeat` loop to tell the farmer
          how many times to shovel dirt, now you can use a `while there is a pile`
          block.  '
        courseE_farmer_ramp12_b: You only need to move forward once to get to the
          dirt.
      courseE_farmer_ramp11a_2019:
        courseE_farmer_ramp12_a: 'Instead of using a `repeat` loop to tell the farmer
          how many times to shovel dirt, now you can use a `while there is a pile`
          block.  '
        courseE_farmer_ramp12_b: You only need to move forward once to get to the
          dirt.
      courseE_farmer_ramp11b:
        courseE_farmer_ramp11b_a: You can nest your `while` loop inside of a `repeat`
          loop to make your code shorter.
      courseE_farmer_ramp11b_2018:
        courseE_farmer_ramp11b_a: You can nest your `while` loop inside of a `repeat`
          loop to make your code shorter.
      courseE_farmer_ramp11b_2019:
        courseE_farmer_ramp11b_a: You can nest your `while` loop inside of a `repeat`
          loop to make your code shorter.
      courseE_farmer_ramp12_forswap:
        courseE_farmer_ramp12_b: You will still need to use a `repeat` loop on the
          outside of it all to tell the farmer how many times to walk forward and
          get lettuce.
      courseE_farmer_ramp12_forswap_2018:
        courseE_farmer_ramp12_b: You will still need to use a `repeat` loop on the
          outside of it all to tell the farmer how many times to walk forward and
          get lettuce.
      courseE_farmer_ramp12_forswap_2019:
        courseE_farmer_ramp12_b: You will still need to use a `repeat` loop on the
          outside of it all to tell the farmer how many times to walk forward and
          get lettuce.
      courseE_farmer_ramp12c:
        courseE_farmer_ramp12b_b: You will still need to use an `until` loop first,
          then use a `while` loop once you get to the lettuce.
      courseE_farmer_ramp12c_2018:
        courseE_farmer_ramp12b_b: You will still need to use an `until` loop first,
          then use a `while` loop once you get to the lettuce.
      courseE_farmer_ramp12c_2019:
        courseE_farmer_ramp12b_b: You will still need to use an `until` loop first,
          then use a `while` loop once you get to the lettuce.
      courseE_farmer_ramp12d:
        courseE_farmer_ramp12d_b: You will still need to put your `until` and `while`
          loops inside of a `repeat` loop to solve this puzzle!
      courseE_farmer_ramp12d_2018:
        courseE_farmer_ramp12d_b: You will still need to put your `until` and `while`
          loops inside of a `repeat` loop to solve this puzzle!
      courseE_farmer_ramp12d_2019:
        courseE_farmer_ramp12d_b: You will still need to put your `until` and `while`
          loops inside of a `repeat` loop to solve this puzzle!
      courseE_farmer_ramp12e:
        courseE_farmer_ramp12e_b: The solution to this puzzle will look a lot like
          the solution to the last puzzle, but turning in the other direction.
      courseE_farmer_ramp12e_2018:
        courseE_farmer_ramp12e_b: The solution to this puzzle will look a lot like
          the solution to the last puzzle, but turning in the other direction.
      courseE_farmer_ramp12e_2019:
        courseE_farmer_ramp12e_b: The solution to this puzzle will look a lot like
          the solution to the last puzzle, but turning in the other direction.
      courseE_farmer_ramp12f:
        courseE_farmer_ramp12f_b: Use an `if/else` block to help the farmer decide
          if she needs to turn right or left.
      courseE_farmer_ramp12f_2018:
        courseE_farmer_ramp12f_b: Use an `if/else` block to help the farmer decide
          if she needs to turn right or left.
      courseE_farmer_ramp12f_2019:
        courseE_farmer_ramp12f_b: Use an `if/else` block to help the farmer decide
          if she needs to turn right or left.
      courseE_farmer_ramp12g:
        courseE_farmer_ramp12G_b: Use an `if/else` block to help the farmer decide
          if she needs to turn right or left.
      courseE_farmer_ramp12g_2018:
        courseE_farmer_ramp12G_b: Use an `if/else` block to help the farmer decide
          if she needs to turn right or left.
      courseE_farmer_ramp12g_2019:
        courseE_farmer_ramp12G_b: Use an `if/else` block to help the farmer decide
          if she needs to turn right or left.
      courseE_playLab_challenge1:
        courseE_playLab_challenge1_a: |-
          Here are some things you could do when the player wins the game:

          -   Make the dinosaur vanish.
          -   Stop the squirrels.
          -   Make the squirrels and knight happy.
          -   Set a new background.
          -   Make the knight thank the player for helping.
          -   Make all of the actors vanish and show a "You Win!" message.
        courseE_playLab_challenge1_b: |-
          Here are some things you could do when the player loses the game:

          -   Make the knight vanish.
          -   Make the squirrels sad.
          -   Make the dinosaur say something.
          -   Set a new background.
          -   Make all of the actors vanish and show a "Game Over" message.
      courseE_playLab_scaffold1:
        courseE_playLab_scaffold1_a: The `set actor 1 to ??? image` block can be used
          to add an actor to the stage.
        courseE_playLab_scaffold1_b: Put the `set actor` block under `when run` to
          make your actor appear at the beginning of the program.
        courseE_playLab_scaffold1_c: Use `set ??? background` to choose a background
          for your scene.
      courseE_playLab_scaffold2:
        courseE_playLab_scaffold1_a: Pull on the dropdown menu of the `when ____ arrow`
          event to change the direction the block controls.
        courseE_playLab_scaffold1_b: You should have four `when arrow` event blocks,
          with a direction to move underneath each.
        courseE_playLab_scaffold1_c: When you are done, you should be able to move
          your hero with the arrow keys!
      courseE_playLab_scaffold4:
        courseE_playLab_scaffold4_a: Use `score point` to add a point, and `remove
          point` to subtract one.
      courseE_playLab_scaffold5:
        courseE_playLab_scaffold5_a: To finish this level, you need to win or lose.
          Use a `end game as win` or `end game as loss` block to finish.
      courseF_artist_for1:
        courseF_artist_for1_a: |-
          Can you draw something like this:

          ![](https://images.code.org/80ae9ab3e449db1ed4e13c86239f7617-image-1475906794954.06.12.png)
      courseF_artist_for10:
        courseF_artist_for10_a: The image in the drawing was made using a counter
          for the `set alpha` and `counter` / 10 as a brush size.
        courseF_artist_for10_b: The image in the drawing uses a turn of 61 degrees.
        courseF_artist_for10_c: |-
          Want to know how the sample image was done?

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_colour" inline="true" id="draw-color">
                  <value name="COLOUR">
                    <block type="colour_picker">
                      <title name="COLOUR">#ff0000</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_for_counter" inline="true">
                    <mutation counter="counter"></mutation>
                      <value name="FROM">
                        <block type="math_number">
                          <title name="NUM">15</title>
                        </block>
                      </value>
                      <value name="TO">
                        <block type="math_number">
                          <title name="NUM">175</title>
                        </block>
                      </value>
                      <value name="BY">
                        <block type="math_number">
                          <title name="NUM">2</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="draw_width" inline="false">
                          <value name="WIDTH">
                            <block type="math_arithmetic" inline="true">
                              <title name="OP">DIVIDE</title>
                              <value name="A">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <value name="B">
                                <block type="math_number">
                                  <title name="NUM">10</title>
                                </block>
                              </value>
                            </block>
                          </value>
                          <next>
                            <block type="alpha" inline="true" id="alpha">
                              <value name="VALUE">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_move" inline="true">
                                  <title name="DIR">moveForward</title>
                                  <value name="VALUE">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="draw_turn" inline="true">
                                      <title name="DIR">turnRight</title>
                                      <value name="VALUE">
                                        <block type="math_number">
                                          <title name="NUM">61</title>
                                        </block>
                                      </value>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_artist_for10_2018:
        courseF_artist_for10_a: The image in the drawing was made using a counter
          for the `set alpha` and `counter` / 10 as a brush size.
        courseF_artist_for10_b: The image in the drawing uses a turn of 61 degrees.
        courseF_artist_for10_c: |-
          Want to know how the sample image was done?

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_colour" inline="true" id="draw-color">
                  <value name="COLOUR">
                    <block type="colour_picker">
                      <title name="COLOUR">#ff0000</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_for_counter" inline="true">
                    <mutation counter="counter"></mutation>
                      <value name="FROM">
                        <block type="math_number">
                          <title name="NUM">15</title>
                        </block>
                      </value>
                      <value name="TO">
                        <block type="math_number">
                          <title name="NUM">175</title>
                        </block>
                      </value>
                      <value name="BY">
                        <block type="math_number">
                          <title name="NUM">2</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="draw_width" inline="false">
                          <value name="WIDTH">
                            <block type="math_arithmetic" inline="true">
                              <title name="OP">DIVIDE</title>
                              <value name="A">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <value name="B">
                                <block type="math_number">
                                  <title name="NUM">10</title>
                                </block>
                              </value>
                            </block>
                          </value>
                          <next>
                            <block type="alpha" inline="true" id="alpha">
                              <value name="VALUE">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_move" inline="true">
                                  <title name="DIR">moveForward</title>
                                  <value name="VALUE">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="draw_turn" inline="true">
                                      <title name="DIR">turnRight</title>
                                      <value name="VALUE">
                                        <block type="math_number">
                                          <title name="NUM">61</title>
                                        </block>
                                      </value>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_artist_for10_2019:
        courseF_artist_for10_a: The image in the drawing was made using a counter
          for the `set alpha` and `counter` / 10 as a brush size.
        courseF_artist_for10_b: The image in the drawing uses a turn of 61 degrees.
        courseF_artist_for10_c: |-
          Want to know how the sample image was done?

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_colour" inline="true" id="draw-color">
                  <value name="COLOUR">
                    <block type="colour_picker">
                      <title name="COLOUR">#ff0000</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_for_counter" inline="true">
                    <mutation counter="counter"></mutation>
                      <value name="FROM">
                        <block type="math_number">
                          <title name="NUM">15</title>
                        </block>
                      </value>
                      <value name="TO">
                        <block type="math_number">
                          <title name="NUM">175</title>
                        </block>
                      </value>
                      <value name="BY">
                        <block type="math_number">
                          <title name="NUM">2</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="draw_width" inline="false">
                          <value name="WIDTH">
                            <block type="math_arithmetic" inline="true">
                              <title name="OP">DIVIDE</title>
                              <value name="A">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <value name="B">
                                <block type="math_number">
                                  <title name="NUM">10</title>
                                </block>
                              </value>
                            </block>
                          </value>
                          <next>
                            <block type="alpha" inline="true" id="alpha">
                              <value name="VALUE">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_move" inline="true">
                                  <title name="DIR">moveForward</title>
                                  <value name="VALUE">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="draw_turn" inline="true">
                                      <title name="DIR">turnRight</title>
                                      <value name="VALUE">
                                        <block type="math_number">
                                          <title name="NUM">61</title>
                                        </block>
                                      </value>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_artist_for1_2018:
        courseF_artist_for1_a: |-
          Can you draw something like this:

          ![](https://images.code.org/efee6df2a8840c89fa535bef72e9e45f-image-1530131926453.png)
      courseF_artist_for1_2019:
        courseF_artist_for1_a: |-
          Can you draw something like this:

          ![](https://images.code.org/efee6df2a8840c89fa535bef72e9e45f-image-1530131926453.png)
      courseF_artist_for2:
        courseF_artist_for2_a: |-
          Use `counter` for the length of your triangles inside your `repeat` loop.

          <xml><block type="draw_move" inline="true">
                <title name="DIR">moveForward</title>
                <value name="VALUE">
                  <block type="variables_get">
                    <title name="VAR">counter</title>
                  </block>
                </value>
              </block>
              </xml>
        courseF_artist_for2_b: Remember to count by 10 within your for loop.
        courseF_artist_for2_c: |-
          This is the pattern that the Artist will follow:

          ![](<https://images.code.org/a2569b7732cf02a12263607c9e355d19-image-1503676269436.3_hint 2.gif>)
      courseF_artist_for2_2018:
        courseF_artist_for2_a: |-
          Use `counter` for the length of your triangles inside your `repeat` loop.

          <xml><block type="draw_move" inline="true">
                <title name="DIR">moveForward</title>
                <value name="VALUE">
                  <block type="variables_get">
                    <title name="VAR">counter</title>
                  </block>
                </value>
              </block>
              </xml>
        courseF_artist_for2_b: Remember to count by 10 within your for loop.
        courseF_artist_for2_c: |-
          This is the pattern that the Artist will follow:

          ![](<https://images.code.org/a2569b7732cf02a12263607c9e355d19-image-1503676269436.3_hint 2.gif>)
      courseF_artist_for2_2019:
        courseF_artist_for2_a: |-
          Use `counter` for the length of your triangles inside your `repeat` loop.

          <xml><block type="draw_move" inline="true">
                <title name="DIR">moveForward</title>
                <value name="VALUE">
                  <block type="variables_get">
                    <title name="VAR">counter</title>
                  </block>
                </value>
              </block>
              </xml>
        courseF_artist_for2_b: Remember to count by 10 within your for loop.
        courseF_artist_for2_c: |-
          This is the pattern that the Artist will follow:

          ![](<https://images.code.org/a2569b7732cf02a12263607c9e355d19-image-1503676269436.3_hint 2.gif>)
      courseF_artist_for3:
        courseF_artist_for3_a: |-
          To have the `for` loop drive your movement, make sure that you're using `counter` as your distance in the `move forward` block.

          <xml>
          <block type="draw_move" inline="true">
                <title name="DIR">moveForward</title>
                <value name="VALUE">
                  <block type="variables_get">
                    <title name="VAR">counter</title>
                  </block>
                </value>
              </block>
          </xml>
        courseF_artist_for3_b: Don't be afraid to make a mistake! Try adding blocks
          and running the code to see what will happen, even if you haven't solved
          the puzzle yet.
      courseF_artist_for3_2018:
        courseF_artist_for3_a: |-
          To have the `for` loop drive your movement, make sure that you're using `counter` as your distance in the `move forward` block.

          <xml>
          <block type="draw_move" inline="true">
                <title name="DIR">moveForward</title>
                <value name="VALUE">
                  <block type="variables_get">
                    <title name="VAR">counter</title>
                  </block>
                </value>
              </block>
          </xml>
        courseF_artist_for3_b: Don't be afraid to make a mistake! Try adding blocks
          and running the code to see what will happen, even if you haven't solved
          the puzzle yet.
      courseF_artist_for3_2019:
        courseF_artist_for3_a: |-
          To have the `for` loop drive your movement, make sure that you're using `counter` as your distance in the `move forward` block.

          <xml>
          <block type="draw_move" inline="true">
                <title name="DIR">moveForward</title>
                <value name="VALUE">
                  <block type="variables_get">
                    <title name="VAR">counter</title>
                  </block>
                </value>
              </block>
          </xml>
        courseF_artist_for3_b: Don't be afraid to make a mistake! Try adding blocks
          and running the code to see what will happen, even if you haven't solved
          the puzzle yet.
      courseF_artist_for4:
        courseF_artist_for4_a: |-
          **Jaka jest najmniejsza liczba, którą będziesz potrzebował?
          Jak jest największa liczba?
          O jaką wielkość zmienia się ta liczba za każdym razem?**

          Te pytania musisz zadać aby wypełnić puste pola w pętli `for`.
        courseF_artist_for4_b: Your code will be very similar to what you wrote in
          the last puzzle, but remember to draw a square this time!
        courseF_artist_for4_c: Don't be afraid to make a mistake! Try adding blocks
          and running the code to see what will happen, even if you haven't solved
          the puzzle yet.
      courseF_artist_for4_2018:
        courseF_artist_for4_a: |-
          **Jaka jest najmniejsza liczba, którą będziesz potrzebował?
          Jak jest największa liczba?
          O jaką wielkość zmienia się ta liczba za każdym razem?**

          Te pytania musisz zadać aby wypełnić puste pola w pętli `for`.
        courseF_artist_for4_b: Your code will be very similar to what you wrote in
          the last puzzle, but remember to draw a square this time!
        courseF_artist_for4_c: Don't be afraid to make a mistake! Try adding blocks
          and running the code to see what will happen, even if you haven't solved
          the puzzle yet.
      courseF_artist_for4_2019:
        courseF_artist_for4_a: |-
          **Jaka jest najmniejsza liczba, którą będziesz potrzebował?
          Jak jest największa liczba?
          O jaką wielkość zmienia się ta liczba za każdym razem?**

          Te pytania musisz zadać aby wypełnić puste pola w pętli `for`.
        courseF_artist_for4_b: Your code will be very similar to what you wrote in
          the last puzzle, but remember to draw a square this time!
        courseF_artist_for4_c: Don't be afraid to make a mistake! Try adding blocks
          and running the code to see what will happen, even if you haven't solved
          the puzzle yet.
      courseF_artist_for5:
        courseF_artist_for5_a: You don't need the `repeat` loop inside when making
          this spiral!
        courseF_artist_for5_b: Your `for` loop, move, and turn blocks can stay exactly
          the same.
      courseF_artist_for5_2018:
        courseF_artist_for5_a: You don't need the `repeat` loop inside when making
          this spiral!
        courseF_artist_for5_b: Your `for` loop, move, and turn blocks can stay exactly
          the same.
      courseF_artist_for5_2019:
        courseF_artist_for5_a: You don't need the `repeat` loop inside when making
          this spiral!
        courseF_artist_for5_b: Your `for` loop, move, and turn blocks can stay exactly
          the same.
      courseF_artist_for6:
        courseF_artist_for6_a: Your `for` loop will count from 15 to 300 by 15.
        courseF_artist_for6_b: Put a `move forward` and a `turn` block within this
          `for` loop.
        courseF_artist_for6_c: All you have to change is the number of degrees in
          the `turn` block.
      courseF_artist_for6_2018:
        courseF_artist_for6_a: Your `for` loop will count from 15 to 300 by 15.
        courseF_artist_for6_b: Put a `move forward` and a `turn` block within this
          `for` loop.
        courseF_artist_for6_c: All you have to change is the number of degrees in
          the `turn` block.
      courseF_artist_for6_2019:
        courseF_artist_for6_a: Your `for` loop will count from 15 to 300 by 15.
        courseF_artist_for6_b: Put a `move forward` and a `turn` block within this
          `for` loop.
        courseF_artist_for6_c: All you have to change is the number of degrees in
          the `turn` block.
      courseF_artist_for7:
        courseF_artist_for7_a: The pen is thinner in this puzzle. You will need to
          set it to `1` before you start.
        courseF_artist_for7_b: Notice that this spiral turns right instead of left!
        courseF_artist_for7_c: The `for` loop in this puzzle goes from 15 to 300 by
          2.
        courseF_artist_for7_d: This image is made by turning just 89 degrees.
      courseF_artist_for7_2018:
        courseF_artist_for7_a: The pen is thinner in this puzzle. You will need to
          set it to `1` before you start.
        courseF_artist_for7_b: Notice that this spiral turns right instead of left!
        courseF_artist_for7_c: The `for` loop in this puzzle goes from 15 to 300 by
          2.
        courseF_artist_for7_d: This image is made by turning just 89 degrees.
      courseF_artist_for7_2019:
        courseF_artist_for7_a: The pen is thinner in this puzzle. You will need to
          set it to `1` before you start.
        courseF_artist_for7_b: Notice that this spiral turns right instead of left!
        courseF_artist_for7_c: The `for` loop in this puzzle goes from 15 to 300 by
          2.
        courseF_artist_for7_d: This image is made by turning just 89 degrees.
      courseF_artist_for8:
        courseF_artist_for8_a: Keep everything else the same in your code, only the
          turn angle needs to change.
        courseF_artist_for8_b: If you want, you can choose a different color for your
          spiral!
      courseF_artist_for8_2018:
        courseF_artist_for8_a: Keep everything else the same in your code, only the
          turn angle needs to change.
        courseF_artist_for8_b: If you want, you can choose a different color for your
          spiral!
      courseF_artist_for8_2019:
        courseF_artist_for8_a: Keep everything else the same in your code, only the
          turn angle needs to change.
        courseF_artist_for8_b: If you want, you can choose a different color for your
          spiral!
      courseF_artist_for9:
        courseF_artist_for9_a: If you put the `set alpha` block inside of your `for`
          loop, and use the `counter` variable to change it, you can create a design
          like this.
        courseF_artist_for9_b: The `set alpha` block changes the opacity of a color.
          The smaller the value, the more transparent the color is.
      courseF_artist_for9_2018:
        courseF_artist_for9_a: If you put the `set alpha` block inside of your `for`
          loop, and use the `counter` variable to change it, you can create a design
          like this.
        courseF_artist_for9_b: The `set alpha` block changes the opacity of a color.
          The smaller the value, the more transparent the color is.
      courseF_artist_for9_2019:
        courseF_artist_for9_a: If you put the `set alpha` block inside of your `for`
          loop, and use the `counter` variable to change it, you can create a design
          like this.
        courseF_artist_for9_b: The `set alpha` block changes the opacity of a color.
          The smaller the value, the more transparent the color is.
      courseF_artist_for_challenge1:
        courseF_artist_for_challenge1_a: "`pen width` wynosi 1. Pierwszy kwadrat ma
          boki o szerokości 50 pikseli, kolejny kwadrat jest o 50 pikseli szerszy
          od poprzedniego."
        courseF_artist_for_challenge1_b: The opacity on the brush is always `counter`/2.
        courseF_artist_for_challenge1_c: After you make each square, don't forget
          to jump backward, turn, jump again, then turn back!
        courseF_artist_for_challenge1_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="draw_colour" inline="true" id="draw-color">
                      <value name="COLOUR">
                        <block type="colour_picker">
                          <title name="COLOUR">#0000cd</title>
                        </block>
                      </value>
                      <next>
                        <block type="controls_for_counter" inline="true">
                        <mutation counter="counter"></mutation>
                          <value name="FROM">
                            <block type="math_number">
                              <title name="NUM">50</title>
                            </block>
                          </value>
                          <value name="TO">
                            <block type="math_number">
                              <title name="NUM">350</title>
                            </block>
                          </value>
                          <value name="BY">
                            <block type="math_number">
                              <title name="NUM">50</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="alpha" inline="true" id="alpha">
                              <value name="VALUE">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">DIVIDE</title>
                                  <value name="A">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="math_number">
                                      <title name="NUM">2</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                              <next>
                                <block type="controls_repeat_ext" inline="true">
                                  <value name="TIMES">
                                    <block type="math_number">
                                      <title name="NUM">4</title>
                                    </block>
                                  </value>
                                  <statement name="DO">
                                    <block type="draw_move" inline="true">
                                      <title name="DIR">moveForward</title>
                                      <value name="VALUE">
                                        <block type="variables_get">
                                          <title name="VAR">counter</title>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn" inline="true">
                                          <title name="DIR">turnRight</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                        </block>
                                      </next>
                                    </block>
                                  </statement>
                                  <next>
                                    <block type="jump" inline="true">
                                      <title name="DIR">jumpBackward</title>
                                      <value name="VALUE">
                                        <block type="math_number">
                                          <title name="NUM">25</title>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn" inline="true">
                                          <title name="DIR">turnRight</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="jump" inline="true">
                                              <title name="DIR">jumpBackward</title>
                                              <value name="VALUE">
                                                <block type="math_number">
                                                  <title name="NUM">25</title>
                                                </block>
                                              </value>
                                              <next>
                                                <block type="draw_turn" inline="true">
                                                  <title name="DIR">turnLeft</title>
                                                  <value name="VALUE">
                                                    <block type="math_number">
                                                      <title name="NUM">90</title>
                                                    </block>
                                                  </value>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </statement>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_artist_for_challenge1_2018:
        courseF_artist_for_challenge1_a: "`pen width` wynosi 1. Pierwszy kwadrat ma
          boki o szerokości 50 pikseli, kolejny kwadrat jest o 50 pikseli szerszy
          od poprzedniego."
        courseF_artist_for_challenge1_b: The opacity on the brush is always `counter`/2.
        courseF_artist_for_challenge1_c: After you make each square, don't forget
          to jump backward, turn, jump again, then turn back!
        courseF_artist_for_challenge1_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="draw_colour" inline="true" id="draw-color">
                      <value name="COLOUR">
                        <block type="colour_picker">
                          <title name="COLOUR">#0000cd</title>
                        </block>
                      </value>
                      <next>
                        <block type="controls_for_counter" inline="true">
                        <mutation counter="counter"></mutation>
                          <value name="FROM">
                            <block type="math_number">
                              <title name="NUM">50</title>
                            </block>
                          </value>
                          <value name="TO">
                            <block type="math_number">
                              <title name="NUM">350</title>
                            </block>
                          </value>
                          <value name="BY">
                            <block type="math_number">
                              <title name="NUM">50</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="alpha" inline="true" id="alpha">
                              <value name="VALUE">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">DIVIDE</title>
                                  <value name="A">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="math_number">
                                      <title name="NUM">2</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                              <next>
                                <block type="controls_repeat_ext" inline="true">
                                  <value name="TIMES">
                                    <block type="math_number">
                                      <title name="NUM">4</title>
                                    </block>
                                  </value>
                                  <statement name="DO">
                                    <block type="draw_move" inline="true">
                                      <title name="DIR">moveForward</title>
                                      <value name="VALUE">
                                        <block type="variables_get">
                                          <title name="VAR">counter</title>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn" inline="true">
                                          <title name="DIR">turnRight</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                        </block>
                                      </next>
                                    </block>
                                  </statement>
                                  <next>
                                    <block type="jump" inline="true">
                                      <title name="DIR">jumpBackward</title>
                                      <value name="VALUE">
                                        <block type="math_number">
                                          <title name="NUM">25</title>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn" inline="true">
                                          <title name="DIR">turnRight</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="jump" inline="true">
                                              <title name="DIR">jumpBackward</title>
                                              <value name="VALUE">
                                                <block type="math_number">
                                                  <title name="NUM">25</title>
                                                </block>
                                              </value>
                                              <next>
                                                <block type="draw_turn" inline="true">
                                                  <title name="DIR">turnLeft</title>
                                                  <value name="VALUE">
                                                    <block type="math_number">
                                                      <title name="NUM">90</title>
                                                    </block>
                                                  </value>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </statement>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_artist_for_challenge1_2019:
        courseF_artist_for_challenge1_a: "`pen width` wynosi 1. Pierwszy kwadrat ma
          boki o szerokości 50 pikseli, kolejny kwadrat jest o 50 pikseli szerszy
          od poprzedniego."
        courseF_artist_for_challenge1_b: The opacity on the brush is always `counter`/2.
        courseF_artist_for_challenge1_c: After you make each square, don't forget
          to jump backward, turn, jump again, then turn back!
        courseF_artist_for_challenge1_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="draw_colour" inline="true" id="draw-color">
                      <value name="COLOUR">
                        <block type="colour_picker">
                          <title name="COLOUR">#0000cd</title>
                        </block>
                      </value>
                      <next>
                        <block type="controls_for_counter" inline="true">
                        <mutation counter="counter"></mutation>
                          <value name="FROM">
                            <block type="math_number">
                              <title name="NUM">50</title>
                            </block>
                          </value>
                          <value name="TO">
                            <block type="math_number">
                              <title name="NUM">350</title>
                            </block>
                          </value>
                          <value name="BY">
                            <block type="math_number">
                              <title name="NUM">50</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="alpha" inline="true" id="alpha">
                              <value name="VALUE">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">DIVIDE</title>
                                  <value name="A">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="math_number">
                                      <title name="NUM">2</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                              <next>
                                <block type="controls_repeat_ext" inline="true">
                                  <value name="TIMES">
                                    <block type="math_number">
                                      <title name="NUM">4</title>
                                    </block>
                                  </value>
                                  <statement name="DO">
                                    <block type="draw_move" inline="true">
                                      <title name="DIR">moveForward</title>
                                      <value name="VALUE">
                                        <block type="variables_get">
                                          <title name="VAR">counter</title>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn" inline="true">
                                          <title name="DIR">turnRight</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                        </block>
                                      </next>
                                    </block>
                                  </statement>
                                  <next>
                                    <block type="jump" inline="true">
                                      <title name="DIR">jumpBackward</title>
                                      <value name="VALUE">
                                        <block type="math_number">
                                          <title name="NUM">25</title>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn" inline="true">
                                          <title name="DIR">turnRight</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="jump" inline="true">
                                              <title name="DIR">jumpBackward</title>
                                              <value name="VALUE">
                                                <block type="math_number">
                                                  <title name="NUM">25</title>
                                                </block>
                                              </value>
                                              <next>
                                                <block type="draw_turn" inline="true">
                                                  <title name="DIR">turnLeft</title>
                                                  <value name="VALUE">
                                                    <block type="math_number">
                                                      <title name="NUM">90</title>
                                                    </block>
                                                  </value>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </statement>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_artist_for_challenge2:
        courseF_artist_for_challenge2_c: "`pętla for` zmienia się od 5 do 250 z krokiem
          równym 2. "
        courseF_artist_for_challenge2_a: Zmiana koloru odbywa się poprzez użycie bloku
          `ustaw kolor z kolorem czerwonym, zielonym, niebieskim`. Czerwony ma stałą
          wartość 255, zielony jest zawsze wartością `licznik`, a niebieski to `255-licznik`.
        courseF_artist_for_challenge2_b: The code for this is simpler than you might
          think.  Just set the color inside the for loop, move forward, then turn.
        courseF_artist_for_challenge2_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_for_counter" inline="true">
                    <mutation counter="counter"></mutation>
                      <value name="FROM">
                        <block type="math_number">
                          <title name="NUM">5</title>
                        </block>
                      </value>
                      <value name="TO">
                        <block type="math_number">
                          <title name="NUM">250</title>
                        </block>
                      </value>
                      <value name="BY">
                        <block type="math_number">
                          <title name="NUM">2</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="draw_colour" inline="true" id="draw-color">
                          <value name="COLOUR">
                            <block type="colour_rgb" inline="false">
                              <value name="RED">
                                <block type="math_number">
                                  <title name="NUM">255</title>
                                </block>
                              </value>
                              <value name="GREEN">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <value name="BLUE">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">MINUS</title>
                                  <value name="A">
                                    <block type="math_number">
                                      <title name="NUM">255</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                            </block>
                          </value>
                          <next>
                            <block type="draw_move" inline="true">
                              <title name="DIR">moveForward</title>
                              <value name="VALUE">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_turn" inline="true">
                                  <title name="DIR">turnRight</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">80</title>
                                    </block>
                                  </value>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>

          ![](<https://images.code.org/4ce89e8d907f670408c3705f040e8677-image-1497728974326.49.09 PM.png>)
      courseF_artist_for_challenge2_2018:
        courseF_artist_for_challenge2_c: "`pętla for` zmienia się od 5 do 250 z krokiem
          równym 2. "
        courseF_artist_for_challenge2_a: Zmiana koloru odbywa się poprzez użycie bloku
          `ustaw kolor z kolorem czerwonym, zielonym, niebieskim`. Czerwony ma stałą
          wartość 255, zielony jest zawsze wartością `licznik`, a niebieski to `255-licznik`.
        courseF_artist_for_challenge2_b: The code for this is simpler than you might
          think.  Just set the color inside the for loop, move forward, then turn.
        courseF_artist_for_challenge2_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_for_counter" inline="true">
                    <mutation counter="counter"></mutation>
                      <value name="FROM">
                        <block type="math_number">
                          <title name="NUM">5</title>
                        </block>
                      </value>
                      <value name="TO">
                        <block type="math_number">
                          <title name="NUM">250</title>
                        </block>
                      </value>
                      <value name="BY">
                        <block type="math_number">
                          <title name="NUM">2</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="draw_colour" inline="true" id="draw-color">
                          <value name="COLOUR">
                            <block type="colour_rgb" inline="false">
                              <value name="RED">
                                <block type="math_number">
                                  <title name="NUM">255</title>
                                </block>
                              </value>
                              <value name="GREEN">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <value name="BLUE">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">MINUS</title>
                                  <value name="A">
                                    <block type="math_number">
                                      <title name="NUM">255</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                            </block>
                          </value>
                          <next>
                            <block type="draw_move" inline="true">
                              <title name="DIR">moveForward</title>
                              <value name="VALUE">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_turn" inline="true">
                                  <title name="DIR">turnRight</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">80</title>
                                    </block>
                                  </value>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_artist_for_challenge2_2019:
        courseF_artist_for_challenge2_c: "`pętla for` zmienia się od 5 do 250 z krokiem
          równym 2. "
        courseF_artist_for_challenge2_a: Zmiana koloru odbywa się poprzez użycie bloku
          `ustaw kolor z kolorem czerwonym, zielonym, niebieskim`. Czerwony ma stałą
          wartość 255, zielony jest zawsze wartością `licznik`, a niebieski to `255-licznik`.
        courseF_artist_for_challenge2_b: The code for this is simpler than you might
          think.  Just set the color inside the for loop, move forward, then turn.
        courseF_artist_for_challenge2_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_for_counter" inline="true">
                    <mutation counter="counter"></mutation>
                      <value name="FROM">
                        <block type="math_number">
                          <title name="NUM">5</title>
                        </block>
                      </value>
                      <value name="TO">
                        <block type="math_number">
                          <title name="NUM">250</title>
                        </block>
                      </value>
                      <value name="BY">
                        <block type="math_number">
                          <title name="NUM">2</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="draw_colour" inline="true" id="draw-color">
                          <value name="COLOUR">
                            <block type="colour_rgb" inline="false">
                              <value name="RED">
                                <block type="math_number">
                                  <title name="NUM">255</title>
                                </block>
                              </value>
                              <value name="GREEN">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <value name="BLUE">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">MINUS</title>
                                  <value name="A">
                                    <block type="math_number">
                                      <title name="NUM">255</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                            </block>
                          </value>
                          <next>
                            <block type="draw_move" inline="true">
                              <title name="DIR">moveForward</title>
                              <value name="VALUE">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_turn" inline="true">
                                  <title name="DIR">turnRight</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">80</title>
                                    </block>
                                  </value>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>

          ![](<https://images.code.org/4ce89e8d907f670408c3705f040e8677-image-1497728974326.49.09 PM.png>)
      courseF_artist_fwp1:
        courseF_artist_fwp1_c: Put all of the code for drawing a square inside the
          function editor.
        courseF_artist_fwp1_a: Remember, you need to turn 90 degrees to draw a square.
        courseF_artist_fwp1_b: You only need to repeat as many times as the number
          of sides in a square.
      courseF_artist_fwp2:
        courseF_artist_fwp2_a: You need to click the "edit" button to get into the
          function.  Once you're there, add a parameter called `length` and use it
          inside your `move forward` block!
        courseF_artist_fwp2_b: When calling your function, use a `for loop` for the
          best possible code!
      courseF_artist_fwp3:
        courseF_artist_fwp3_a: This gets easier if you put it all in a `for` loop.
        courseF_artist_fwp3_b: |-
          Be sure to turn 90 degrees between each square!

          ![](https://images.code.org/97bd8eded03c5aa39740876c8e9f7ff8-image-1469224745277.gif)
      courseF_artist_fwp4:
        courseF_artist_fwp4_b: Remember to **add** a parameter.  Don't remove the
          one that is already there!
        courseF_artist_fwp4_c: You will need to call your function three times to
          draw the shapes.
      courseF_artist_fwp5:
        courseF_artist_fwp5_d: A `for` loop would really help you out here!
        courseF_artist_fwp5_c: You will need to edit the function a little bit, since
          your previous function turned the artist to the right after each side, and
          this image needs a turn to the left.
        courseF_artist_fwp5_a: The length of sides for each shape is 7 times the number
          of sides it has.
        courseF_artist_fwp5_b: Don't forget to jump 100 pixels between shapes.
      courseF_artist_fwp6:
        courseF_artist_fwp6_a: It's okay to run the program a few times to figure
          out how the function works with different parameters.
        courseF_artist_fwp6_b: You don't need to add any `move` or `turn` blocks to
          finish this code.
      courseF_artist_fwp7:
        courseF_artist_fwp7_a: Feeling lost after trying a couple of ideas? Try clicking
          the "Start over" button in the upper right-hand corner.
        courseF_artist_fwp7_b: Your new `min` variable should go in the first slot
          in your `for` loop, inside the function.
      courseF_artist_fwp8:
        courseF_artist_fwp8_a: If your function is correct, you shouldn't need to
          change it for this puzzle.
        courseF_artist_fwp8_b: The only thing you should need to do between function
          calls is change the color of the line.
      courseF_artist_fwp9:
        courseF_artist_fwp9_a: |-
          Try one of these drawings.
          ![](<https://images.code.org/eae6d52956c2bc06b90db3693037df36-image-1493739069435.9.13 hints.png>)
      courseF_artist_fwp_challenge1:
        courseF_artist_fwp_challenge1_b: This is a series of polygons with sides that
          are counter pixels long.
        courseF_artist_fwp_challenge1_c: Each polygon is called from inside a for
          loop that goes from 3 down to 6 by an increment of 1. What shapes is it
          making?
      courseF_artist_fwp_challenge2:
        courseF_artist_fwp_challenge1_a: "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
        courseF_artist_fwp_challenge1_b: 'This is a series of octagons with sides
          that are `counter` pixels long. '
        courseF_artist_fwp_challenge1_c: 'Each octagon is called from inside a `for`
          loop that goes from 200 down to 2 by 2. '
        courseF_artist_fwp_challenge1_d: 'Nie zapomnij obrócić się o 22.5 stopni pod
          koniec każdej iteracji. '
        courseF_artist_fwp_challenge1_e: Zarówno kolor każdego ośmiokąta jak i szerokość
          pióra są sterowane przez zmienną 'licznik'.
        courseF_artist_fwp_challenge1_f: |-
          **Solution:**

          ![Solution Blocks](https://images.code.org/a82cfea836b95ce6625b08afcc3b7b37-image-1469727289590.png)
      courseF_artist_variables10:
        courseF_artist_variables10_a: Have fun with this level! See what little changes
          can do to your code.
        courseF_artist_variables10_b: You can try multiple things, and run your code
          multiple times.
      courseF_artist_variables10_2018:
        courseF_artist_variables10_a: Have fun with this level! See what little changes
          can do to your code.
        courseF_artist_variables10_b: You can try multiple things, and run your code
          multiple times.
      courseF_artist_variables10_2019:
        courseF_artist_variables10_a: Have fun with this level! See what little changes
          can do to your code.
        courseF_artist_variables10_b: You can try multiple things, and run your code
          multiple times.
      courseF_artist_variables2:
        courseF_artist_variables2_a: Remember to move forward after drawing each triangle.
        courseF_artist_variables2_b: Your new loop will contain the loop for your
          triangle, then a `move forward` command.
      courseF_artist_variables2_2018:
        courseF_artist_variables2_a: Remember to move forward after drawing each triangle.
        courseF_artist_variables2_b: Your new loop will contain the loop for your
          triangle, then a `move forward` command.
      courseF_artist_variables2_2019:
        courseF_artist_variables2_a: Remember to move forward after drawing each triangle.
        courseF_artist_variables2_b: Your new loop will contain the loop for your
          triangle, then a `move forward` command.
      courseF_artist_variables3:
        courseF_artist_variables3_a: 'The variable `length` will be used in two places
          in your code: In the side length of your triangle, and in the amount you
          move forward between triangles.'
        courseF_artist_variables3_b: 'A number block with value 50 should only be
          in one place: after the `set variable length` block.'
      courseF_artist_variables3_2018:
        courseF_artist_variables3_a: 'The variable `length` will be used in two places
          in your code: In the side length of your triangle, and in the amount you
          move forward between triangles.'
        courseF_artist_variables3_b: 'A number block with value 50 should only be
          in one place: after the `set length` block.'
      courseF_artist_variables3_2019:
        courseF_artist_variables3_a: 'The variable `length` will be used in two places
          in your code: In the side length of your triangle, and in the amount you
          move forward between triangles.'
        courseF_artist_variables3_b: 'A number block with value 50 should only be
          in one place: after the `set length` block.'
      courseF_artist_variables4:
        courseF_artist_variables4_a: Your code won't be much different than it was
          in the last puzzle, except that you will need to turn the artist to jump
          down, then turn him back to get ready to jump forward again.
        courseF_artist_variables4_c: |-
          This is the pattern your artist will be following:

          ![](https://images.code.org/41ae98c1633755cf4553f90a80e125cf-image-1500325529204.6_hint.gif)
        courseF_artist_variables4_b: "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
      courseF_artist_variables4_2018:
        courseF_artist_variables4_a: Get him ready to draw the next triangle.
        courseF_artist_variables4_c: |-
          This is the pattern your artist will be following:

          ![](https://images.code.org/41ae98c1633755cf4553f90a80e125cf-image-1500325529204.6_hint.gif)
        courseF_artist_variables4_b: |-
          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="variables_set">
                  <title name="VAR">length</title>
                  <value name="VALUE">
                    <block type="math_number">
                      <title name="NUM">50</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_repeat_ext">
                      <value name="TIMES">
                        <block type="math_number">
                          <title name="NUM">3</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="controls_repeat_ext">
                          <value name="TIMES">
                            <block type="math_number">
                              <title name="NUM">3</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="draw_move">
                              <title name="DIR">moveForward</title>
                              <value name="VALUE">
                                <block type="variables_get">
                                  <title name="VAR">length</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_turn">
                                  <title name="DIR">turnLeft</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">120</title>
                                    </block>
                                  </value>
                                </block>
                              </next>
                            </block>
                          </statement>
                          <next>
                            <block type="jump">
                              <title name="DIR">jumpForward</title>
                              <value name="VALUE">
                                <block type="variables_get">
                                  <title name="VAR">length</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_turn">
                                  <title name="DIR">turnRight</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">90</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="jump">
                                      <title name="DIR">jumpForward</title>
                                      <value name="VALUE">
                                        <block type="variables_get">
                                          <title name="VAR">length</title>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn">
                                          <title name="DIR">turnLeft</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_artist_variables4_2019:
        courseF_artist_variables4_a: Your code won't be much different than it was
          in the last puzzle, except that you will need to turn the artist to jump
          down, then turn him back to get ready to draw the next triangle.
        courseF_artist_variables4_c: |-
          This is the pattern your artist will be following:

          ![](https://images.code.org/41ae98c1633755cf4553f90a80e125cf-image-1500325529204.6_hint.gif)
        courseF_artist_variables4_b: |-
          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="variables_set">
                  <title name="VAR">length</title>
                  <value name="VALUE">
                    <block type="math_number">
                      <title name="NUM">50</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_repeat_ext">
                      <value name="TIMES">
                        <block type="math_number">
                          <title name="NUM">3</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="controls_repeat_ext">
                          <value name="TIMES">
                            <block type="math_number">
                              <title name="NUM">3</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="draw_move">
                              <title name="DIR">moveForward</title>
                              <value name="VALUE">
                                <block type="variables_get">
                                  <title name="VAR">length</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_turn">
                                  <title name="DIR">turnLeft</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">120</title>
                                    </block>
                                  </value>
                                </block>
                              </next>
                            </block>
                          </statement>
                          <next>
                            <block type="jump">
                              <title name="DIR">jumpForward</title>
                              <value name="VALUE">
                                <block type="variables_get">
                                  <title name="VAR">length</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_turn">
                                  <title name="DIR">turnRight</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">90</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="jump">
                                      <title name="DIR">jumpForward</title>
                                      <value name="VALUE">
                                        <block type="variables_get">
                                          <title name="VAR">length</title>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn">
                                          <title name="DIR">turnLeft</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_artist_variables5:
        courseF_artist_variables5_a: The second half of your code should look almost
          the same as the first half, except you will be turning _left_, jumping,
          then turning _right_.
        courseF_artist_variables5_b: The first half of your code will draw three triangles,
          and the second half will draw the other three.
        courseF_artist_variables5_c: Start by duplicating the code in the first half
          of your program, then alter it to make the design shown.
        courseF_artist_variables5_d: |-
          This is the pattern your artist will follow:

          ![](https://images.code.org/e4ac66f8e9a4503e49c4fad1e4fafc1d-image-1500326800109.7_hint.gif)
      courseF_artist_variables5_2018:
        courseF_artist_variables5_a: The second half of your code should look almost
          the same as the first half, except you will be turning _left_, jumping,
          then turning _right_.
        courseF_artist_variables5_b: The first half of your code will draw three triangles,
          and the second half will draw the other three.
        courseF_artist_variables5_c: Start by duplicating the code in the first half
          of your program, then alter it to make the design shown.
        courseF_artist_variables5_d: |-
          This is the pattern your artist will follow:

          ![](https://images.code.org/e4ac66f8e9a4503e49c4fad1e4fafc1d-image-1500326800109.7_hint.gif)
      courseF_artist_variables5_2019:
        courseF_artist_variables5_a: The second half of your code should look almost
          the same as the first half, except you will be turning _left_, jumping,
          then turning _right_.
        courseF_artist_variables5_b: The first half of your code will draw three triangles,
          and the second half will draw the other three.
        courseF_artist_variables5_c: Start by duplicating the code in the first half
          of your program, then alter it to make the design shown.
        courseF_artist_variables5_d: |-
          This is the pattern your artist will follow:

          ![](https://images.code.org/e4ac66f8e9a4503e49c4fad1e4fafc1d-image-1500326800109.7_hint.gif)
      courseF_artist_variables6:
        courseF_artist_variables6_a: Thanks to variables, you only need to change
          one number at the top to make this work.
        courseF_artist_variables6_b: You will need to edit the number block with value
          50, but nothing else in the code needs to be altered.
      courseF_artist_variables6_2018:
        courseF_artist_variables6_a: Thanks to variables, you only need to change
          one number at the top to make this work.
        courseF_artist_variables6_b: You will need to edit the number block with value
          50, but nothing else in the code needs to be altered.
      courseF_artist_variables6_2019:
        courseF_artist_variables6_a: Thanks to variables, you only need to change
          one number at the top to make this work.
        courseF_artist_variables6_b: You will need to edit the number block with value
          50, but nothing else in the code needs to be altered.
      courseF_artist_variables6a:
        courseF_artist_variables6a_a: Remember to use the variable `length` instead
          of an actual number to solve this puzzle.
        courseF_artist_variables6a_b: This code will be very similar to your triangle
          code, just with a different shape!
        courseF_artist_variables6a_c: Write the code for one square first, then add
          the code to move between squares. Finally, add a loop around everything!
        courseF_artist_variables6a_d: |-
          This is the pattern you'll follow!

          ![](https://images.code.org/7fd21023b1498742d1a83ad4132d276e-image-1500328404912.9_hint.gif)
      courseF_artist_variables6a_2018:
        courseF_artist_variables6a_a: Remember to use the variable `length` instead
          of an actual number to solve this puzzle.
        courseF_artist_variables6a_b: This code will be very similar to your triangle
          code, just with a different shape!
        courseF_artist_variables6a_c: Write the code for one square first, then add
          the code to move between squares. Finally, add a loop around everything!
        courseF_artist_variables6a_d: |-
          This is the pattern you'll follow!

          ![](https://images.code.org/7fd21023b1498742d1a83ad4132d276e-image-1500328404912.9_hint.gif)
      courseF_artist_variables6a_2019:
        courseF_artist_variables6a_a: Remember to use the variable `length` instead
          of an actual number to solve this puzzle.
        courseF_artist_variables6a_b: This code will be very similar to your triangle
          code, just with a different shape!
        courseF_artist_variables6a_c: Write the code for one square first, then add
          the code to move between squares. Finally, add a loop around everything!
        courseF_artist_variables6a_d: |-
          This is the pattern you'll follow!

          ![](https://images.code.org/7fd21023b1498742d1a83ad4132d276e-image-1500328404912.9_hint.gif)
      courseF_artist_variables7:
        courseF_artist_variables7_a: Start your code by using the `set length` block.
          Set the length variable to 150.
        courseF_artist_variables7_b: You can use a `repeat` loop to make your code
          for the triangle simpler.
        courseF_artist_variables7_c: You will want to turn left 120 degrees to make
          the corners of the triangle.
      courseF_artist_variables7_2018:
        courseF_artist_variables7_a: Start your code by using the `set length` block.
          Set the length variable to 150.
        courseF_artist_variables7_b: You can use a `repeat` loop to make your code
          for the triangle simpler.
        courseF_artist_variables7_c: You will want to turn left 120 degrees to make
          the corners of the triangle.
      courseF_artist_variables7_2019:
        courseF_artist_variables7_a: Start your code by using the `set length` block.
          Set the length variable to 150.
        courseF_artist_variables7_b: You can use a `repeat` loop to make your code
          for the triangle simpler.
        courseF_artist_variables7_c: You will want to turn left 120 degrees to make
          the corners of the triangle.
      courseF_artist_variables8:
        courseF_artist_variables8_b: Remember to start your code for the triangle
          with the `set length` block, and start it at 150 pixels.
        courseF_artist_variables8_c: Make sure to use the `repeat` loop to draw your
          triangle.
        courseF_artist_variables8_a: "Try putting the set of \n\n<xml>\n<block type=\"variables_set\"
          inline=\"false\">\n                        <title name=\"VAR\">length</title>\n
          \                       <value name=\"VALUE\">\n                          <block
          type=\"math_arithmetic\" inline=\"true\">\n                            <title
          name=\"OP\">ADD</title>\n                            <value name=\"A\">\n
          \                             <block type=\"variables_get\">\n                                <title
          name=\"VAR\">length</title>\n                              </block>\n                            </value>\n
          \                           <value name=\"B\">\n                              <block
          type=\"math_number\">\n                                <title name=\"NUM\">10</title>\n
          \                             </block>\n                            </value>\n
          \                         </block>\n                        </value>\n                      </block>\n</xml>\n\nblocks
          inside your loop at the end."
      courseF_artist_variables8_2018:
        courseF_artist_variables8_b: Remember to start your code for the triangle
          with the `set length` block, and start it at 150 pixels.
        courseF_artist_variables8_c: Make sure to use the `repeat` loop to draw your
          triangle.
        courseF_artist_variables8_a: "Try putting the set of \n\n<xml>\n<block type=\"variables_set\"
          inline=\"false\">\n                        <title name=\"VAR\">length</title>\n
          \                       <value name=\"VALUE\">\n                          <block
          type=\"math_arithmetic\" inline=\"true\">\n                            <title
          name=\"OP\">ADD</title>\n                            <value name=\"A\">\n
          \                             <block type=\"variables_get\">\n                                <title
          name=\"VAR\">length</title>\n                              </block>\n                            </value>\n
          \                           <value name=\"B\">\n                              <block
          type=\"math_number\">\n                                <title name=\"NUM\">10</title>\n
          \                             </block>\n                            </value>\n
          \                         </block>\n                        </value>\n                      </block>\n</xml>\n\nblocks
          inside your loop at the end."
      courseF_artist_variables8_2019:
        courseF_artist_variables8_b: Remember to start your code for the triangle
          with the `set length` block, and start it at 150 pixels.
        courseF_artist_variables8_c: Make sure to use the `repeat` loop to draw your
          triangle.
        courseF_artist_variables8_a: "Try putting the set of \n\n<xml>\n<block type=\"variables_set\"
          inline=\"false\">\n                        <title name=\"VAR\">length</title>\n
          \                       <value name=\"VALUE\">\n                          <block
          type=\"math_arithmetic\" inline=\"true\">\n                            <title
          name=\"OP\">ADD</title>\n                            <value name=\"A\">\n
          \                             <block type=\"variables_get\">\n                                <title
          name=\"VAR\">length</title>\n                              </block>\n                            </value>\n
          \                           <value name=\"B\">\n                              <block
          type=\"math_number\">\n                                <title name=\"NUM\">10</title>\n
          \                             </block>\n                            </value>\n
          \                         </block>\n                        </value>\n                      </block>\n</xml>\n\nblocks
          inside your loop at the end."
      courseF_artist_variables9:
        courseF_artist_variables9_a: For this puzzle, all you need to do is change
          how many times the loop repeats.
        courseF_artist_variables9_b: Make sure the blocks that increment `length`
          are within your loop so the lines keep getting longer.
      courseF_artist_variables9_2018:
        courseF_artist_variables9_a: For this puzzle, all you need to do is change
          how many times the loop repeats.
        courseF_artist_variables9_b: Make sure the blocks that increment `length`
          are within your loop so the lines keep getting longer.
      courseF_artist_variables9_2019:
        courseF_artist_variables9_a: For this puzzle, all you need to do is change
          how many times the loop repeats.
        courseF_artist_variables9_b: Make sure the blocks that increment `length`
          are within your loop so the lines keep getting longer.
      courseF_artist_variablesFP:
        courseF_artist_variablesFP_a: |-
          Try one of these three drawings.
          ![](<https://images.code.org/f0bac32182162bd26a8031f5aa4364ef-image-1493738360437.3.15 hints.png>)
      courseF_artist_variablesFP_2018:
        courseF_artist_variablesFP_a: |-
          Try one of these three drawings.
          ![](<https://images.code.org/f0bac32182162bd26a8031f5aa4364ef-image-1493738360437.3.15 hints.png>)
      courseF_artist_variablesFP_2019:
        courseF_artist_variablesFP_a: |-
          Try one of these three drawings.
          ![](<https://images.code.org/f0bac32182162bd26a8031f5aa4364ef-image-1493738360437.3.15 hints.png>)
      courseF_artist_variables_challenge1:
        courseF_artist_variables_challenge1_a: Each vertical line has a length of
          `10`. Each horizontal line should have a length of `length`.
        courseF_artist_variables_challenge1_b: You will want to increase the value
          of `length` by 10 **twice** inside the loop.
        courseF_artist_variables_challenge1_c: To complete the pattern you will need
          to turn left twice, turn right twice, and move forward a total of four times.
        courseF_artist_variables_challenge1_d: |-
          This puzzle just uses one loop. Without any variables, a similar path might just be a zig-zag.

          ![](<https://images.code.org/664fdd219502d004fb07886f834fa3d5-image-1496868743379.51.36 PM.png>)

          If you are having trouble, start by creating this image, then try to see where you can use variables to change the length of the horizontal lines.
        courseF_artist_variables_challenge1_e: |-
          Here is the solution.

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="variables_set" inline="false">
                  <title name="VAR">length</title>
                  <value name="VALUE">
                    <block type="math_number">
                      <title name="NUM">10</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_repeat_ext" inline="true">
                      <value name="TIMES">
                        <block type="math_number">
                          <title name="NUM">18</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="draw_move" inline="true">
                          <title name="DIR">moveForward</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">10</title>
                            </block>
                          </value>
                          <next>
                            <block type="draw_turn" inline="true">
                              <title name="DIR">turnRight</title>
                              <value name="VALUE">
                                <block type="math_number">
                                  <title name="NUM">90</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_move" inline="true">
                                  <title name="DIR">moveForward</title>
                                  <value name="VALUE">
                                    <block type="variables_get">
                                      <title name="VAR">length</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="variables_set" inline="false">
                                      <title name="VAR">length</title>
                                      <value name="VALUE">
                                        <block type="math_arithmetic" inline="true">
                                          <title name="OP">ADD</title>
                                          <value name="A">
                                            <block type="variables_get">
                                              <title name="VAR">length</title>
                                            </block>
                                          </value>
                                          <value name="B">
                                            <block type="math_number">
                                              <title name="NUM">10</title>
                                            </block>
                                          </value>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn" inline="true">
                                          <title name="DIR">turnLeft</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="draw_move" inline="true">
                                              <title name="DIR">moveForward</title>
                                              <value name="VALUE">
                                                <block type="math_number">
                                                  <title name="NUM">10</title>
                                                </block>
                                              </value>
                                              <next>
                                                <block type="draw_turn" inline="true">
                                                  <title name="DIR">turnLeft</title>
                                                  <value name="VALUE">
                                                    <block type="math_number">
                                                      <title name="NUM">90</title>
                                                    </block>
                                                  </value>
                                                  <next>
                                                    <block type="draw_move" inline="true">
                                                      <title name="DIR">moveForward</title>
                                                      <value name="VALUE">
                                                        <block type="variables_get">
                                                          <title name="VAR">length</title>
                                                        </block>
                                                      </value>
                                                      <next>
                                                        <block type="variables_set" inline="false">
                                                          <title name="VAR">length</title>
                                                          <value name="VALUE">
                                                            <block type="math_arithmetic" inline="true">
                                                              <title name="OP">ADD</title>
                                                              <value name="A">
                                                                <block type="variables_get">
                                                                  <title name="VAR">length</title>
                                                                </block>
                                                              </value>
                                                              <value name="B">
                                                                <block type="math_number">
                                                                  <title name="NUM">10</title>
                                                                </block>
                                                              </value>
                                                            </block>
                                                          </value>
                                                          <next>
                                                            <block type="draw_turn" inline="true">
                                                              <title name="DIR">turnRight</title>
                                                              <value name="VALUE">
                                                                <block type="math_number">
                                                                  <title name="NUM">90</title>
                                                                </block>
                                                              </value>
                                                            </block>
                                                          </next>
                                                        </block>
                                                      </next>
                                                    </block>
                                                  </next>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_artist_variables_challenge1_2018:
        courseF_artist_variables_challenge1_a: Each vertical line has a length of
          `10`. Each horizontal line should have a length of `length`.
        courseF_artist_variables_challenge1_b: You will want to increase the value
          of `length` by 10 **twice** inside the loop.
        courseF_artist_variables_challenge1_c: To complete the pattern you will need
          to turn left twice, turn right twice, and move forward a total of four times.
        courseF_artist_variables_challenge1_d: |-
          This puzzle just uses one loop. Without any variables, a similar path might just be a zig-zag.

          ![](<https://images.code.org/664fdd219502d004fb07886f834fa3d5-image-1496868743379.51.36 PM.png>)

          If you are having trouble, start by creating this image, then try to see where you can use variables to change the length of the horizontal lines.
        courseF_artist_variables_challenge1_e: |-
          Here is the solution.

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="variables_set" inline="false">
                  <title name="VAR">length</title>
                  <value name="VALUE">
                    <block type="math_number">
                      <title name="NUM">10</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_repeat_ext" inline="true">
                      <value name="TIMES">
                        <block type="math_number">
                          <title name="NUM">18</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="draw_move" inline="true">
                          <title name="DIR">moveForward</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">10</title>
                            </block>
                          </value>
                          <next>
                            <block type="draw_turn" inline="true">
                              <title name="DIR">turnRight</title>
                              <value name="VALUE">
                                <block type="math_number">
                                  <title name="NUM">90</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_move" inline="true">
                                  <title name="DIR">moveForward</title>
                                  <value name="VALUE">
                                    <block type="variables_get">
                                      <title name="VAR">length</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="variables_set" inline="false">
                                      <title name="VAR">length</title>
                                      <value name="VALUE">
                                        <block type="math_arithmetic" inline="true">
                                          <title name="OP">ADD</title>
                                          <value name="A">
                                            <block type="variables_get">
                                              <title name="VAR">length</title>
                                            </block>
                                          </value>
                                          <value name="B">
                                            <block type="math_number">
                                              <title name="NUM">10</title>
                                            </block>
                                          </value>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn" inline="true">
                                          <title name="DIR">turnLeft</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="draw_move" inline="true">
                                              <title name="DIR">moveForward</title>
                                              <value name="VALUE">
                                                <block type="math_number">
                                                  <title name="NUM">10</title>
                                                </block>
                                              </value>
                                              <next>
                                                <block type="draw_turn" inline="true">
                                                  <title name="DIR">turnLeft</title>
                                                  <value name="VALUE">
                                                    <block type="math_number">
                                                      <title name="NUM">90</title>
                                                    </block>
                                                  </value>
                                                  <next>
                                                    <block type="draw_move" inline="true">
                                                      <title name="DIR">moveForward</title>
                                                      <value name="VALUE">
                                                        <block type="variables_get">
                                                          <title name="VAR">length</title>
                                                        </block>
                                                      </value>
                                                      <next>
                                                        <block type="variables_set" inline="false">
                                                          <title name="VAR">length</title>
                                                          <value name="VALUE">
                                                            <block type="math_arithmetic" inline="true">
                                                              <title name="OP">ADD</title>
                                                              <value name="A">
                                                                <block type="variables_get">
                                                                  <title name="VAR">length</title>
                                                                </block>
                                                              </value>
                                                              <value name="B">
                                                                <block type="math_number">
                                                                  <title name="NUM">10</title>
                                                                </block>
                                                              </value>
                                                            </block>
                                                          </value>
                                                          <next>
                                                            <block type="draw_turn" inline="true">
                                                              <title name="DIR">turnRight</title>
                                                              <value name="VALUE">
                                                                <block type="math_number">
                                                                  <title name="NUM">90</title>
                                                                </block>
                                                              </value>
                                                            </block>
                                                          </next>
                                                        </block>
                                                      </next>
                                                    </block>
                                                  </next>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_artist_variables_challenge1_2019:
        courseF_artist_variables_challenge1_a: Each vertical line has a length of
          `10`. Each horizontal line should have a length of `length`.
        courseF_artist_variables_challenge1_b: You will want to increase the value
          of `length` by 10 **twice** inside the loop.
        courseF_artist_variables_challenge1_c: To complete the pattern you will need
          to turn left twice, turn right twice, and move forward a total of four times.
        courseF_artist_variables_challenge1_d: |-
          This puzzle just uses one loop. Without any variables, a similar path might just be a zig-zag.

          ![](<https://images.code.org/664fdd219502d004fb07886f834fa3d5-image-1496868743379.51.36 PM.png>)

          If you are having trouble, start by creating this image, then try to see where you can use variables to change the length of the horizontal lines.
        courseF_artist_variables_challenge1_e: |-
          Here is the solution.

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="variables_set" inline="false">
                  <title name="VAR">length</title>
                  <value name="VALUE">
                    <block type="math_number">
                      <title name="NUM">10</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_repeat_ext" inline="true">
                      <value name="TIMES">
                        <block type="math_number">
                          <title name="NUM">18</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="draw_move" inline="true">
                          <title name="DIR">moveForward</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">10</title>
                            </block>
                          </value>
                          <next>
                            <block type="draw_turn" inline="true">
                              <title name="DIR">turnRight</title>
                              <value name="VALUE">
                                <block type="math_number">
                                  <title name="NUM">90</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_move" inline="true">
                                  <title name="DIR">moveForward</title>
                                  <value name="VALUE">
                                    <block type="variables_get">
                                      <title name="VAR">length</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="variables_set" inline="false">
                                      <title name="VAR">length</title>
                                      <value name="VALUE">
                                        <block type="math_arithmetic" inline="true">
                                          <title name="OP">ADD</title>
                                          <value name="A">
                                            <block type="variables_get">
                                              <title name="VAR">length</title>
                                            </block>
                                          </value>
                                          <value name="B">
                                            <block type="math_number">
                                              <title name="NUM">10</title>
                                            </block>
                                          </value>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn" inline="true">
                                          <title name="DIR">turnLeft</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="draw_move" inline="true">
                                              <title name="DIR">moveForward</title>
                                              <value name="VALUE">
                                                <block type="math_number">
                                                  <title name="NUM">10</title>
                                                </block>
                                              </value>
                                              <next>
                                                <block type="draw_turn" inline="true">
                                                  <title name="DIR">turnLeft</title>
                                                  <value name="VALUE">
                                                    <block type="math_number">
                                                      <title name="NUM">90</title>
                                                    </block>
                                                  </value>
                                                  <next>
                                                    <block type="draw_move" inline="true">
                                                      <title name="DIR">moveForward</title>
                                                      <value name="VALUE">
                                                        <block type="variables_get">
                                                          <title name="VAR">length</title>
                                                        </block>
                                                      </value>
                                                      <next>
                                                        <block type="variables_set" inline="false">
                                                          <title name="VAR">length</title>
                                                          <value name="VALUE">
                                                            <block type="math_arithmetic" inline="true">
                                                              <title name="OP">ADD</title>
                                                              <value name="A">
                                                                <block type="variables_get">
                                                                  <title name="VAR">length</title>
                                                                </block>
                                                              </value>
                                                              <value name="B">
                                                                <block type="math_number">
                                                                  <title name="NUM">10</title>
                                                                </block>
                                                              </value>
                                                            </block>
                                                          </value>
                                                          <next>
                                                            <block type="draw_turn" inline="true">
                                                              <title name="DIR">turnRight</title>
                                                              <value name="VALUE">
                                                                <block type="math_number">
                                                                  <title name="NUM">90</title>
                                                                </block>
                                                              </value>
                                                            </block>
                                                          </next>
                                                        </block>
                                                      </next>
                                                    </block>
                                                  </next>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_artist_variables_challenge2:
        courseF_artist_variables_challenge2_a: 'Zmienne są pomocne, ponieważ można
          do nich dodawać w każdym kroku pętli. '
        courseF_artist_variables_challenge2_c: Użycie zmiennej dla `boki` oraz dla
          `długość` czyni kod czystszym, ponieważ możesz zapętlać ten sam kod wiele
          razy, zamiast tworzyć nowej kopi dla każdego zestawu liczb.
        courseF_artist_variables_challenge2_d: |-
          **Solution:**

          ![Solution](https://images.code.org/311b4a946cb8f3b4144b5075be6460a3-image-1469641878222.png)
      courseF_artist_variables_challenge2_2018:
        courseF_artist_variables_challenge2_a: 'Zmienne są pomocne, ponieważ można
          do nich dodawać w każdym kroku pętli. '
        courseF_artist_variables_challenge2_c: Użycie zmiennej dla `boki` oraz dla
          `długość` czyni kod czystszym, ponieważ możesz zapętlać ten sam kod wiele
          razy, zamiast tworzyć nowej kopi dla każdego zestawu liczb.
        courseF_artist_variables_challenge2_d: |-
          **Solution:**

          ![Solution](https://images.code.org/311b4a946cb8f3b4144b5075be6460a3-image-1469641878222.png)
      courseF_artist_variables_challenge2_2019:
        courseF_artist_variables_challenge2_a: 'Zmienne są pomocne, ponieważ można
          do nich dodawać w każdym kroku pętli. '
        courseF_artist_variables_challenge2_c: Użycie zmiennej dla `boki` oraz dla
          `długość` czyni kod czystszym, ponieważ możesz zapętlać ten sam kod wiele
          razy, zamiast tworzyć nowej kopi dla każdego zestawu liczb.
        courseF_artist_variables_challenge2_d: |-
          **Solution:**

          ![Solution](https://images.code.org/1236e605d55d8cc9beafbca5425c8f75-image-1543523947735.png)
      courseF_bee_conditionals10:
        courseF_bee_conditionals10_a: Imagine there is a cloud in every spot. Does
          this help simplify your code?
        courseF_bee_conditionals10_b: Use an `if/else` block to check every space
          for nectar or honey.
        courseF_bee_conditionals10_c: Could a `while` loop help get to the end of
          this path?
      courseF_bee_conditionals2:
        courseF_bee_conditionals2_a: Sometimes a flower will be there, sometimes it
          won't.  If you want your code to run in both cases, make sure to use an
          `if` statement.
        courseF_bee_conditionals2_b: Try writing the sequence to get you to all of
          the spaces, then add the `if` statement.
      courseF_bee_conditionals3:
        courseF_bee_conditionals3_a: Be sure to use an `if` statement to check each
          space to see if it has either a flower or nothing.
        courseF_bee_conditionals3_b: Przydatna będzie pętla `repeat`, więc musisz
          użyć tylko jednego bloku `if`.
        courseF_bee_conditionals3_c: Try writing code to check the first cloud. Can
          you loop this to check all of them?
      courseF_bee_conditionals4:
        courseD_bee_conditionals4_a: You can still treat every space as if there is
          a cloud over it, even though you can see the whole path.
        courseF_bee_conditionals4_b: 'Use an `if` statement inside your loop to check
          each space for nectar. '
        courseF_bee_conditionals4_c: Using the block `while there is a path ahead`,
          you should `move forward` and check for a flower. `if there is a flower`
          what should the bee do?
      courseF_bee_conditionals5:
        courseF_bee_conditionals5_a: Think of every side of the rectangular path as
          a path by itself. Set up a nested loop with a `repeat` block on the outside
          and a `while there is a path ahead` on the inside. How many paths does the
          bee need to buzz down if the bee needs to buzz every side with a flower?
        courseF_bee_conditionals5_b: Wewnątrz bloku `while there is a path ahead`,
          będziesz musiał iść do przodu i sprawdzić czy jest tam kwiat. Jak sprawdzisz,
          czy jest tam kwiat? Co zrobisz jak kwiat tam będzie?
        courseF_bee_conditionals5_c: 'There are 3 sides of the rectangle with flowers,
          so the code needs to `repeat 3 times`. In every repeat, the bee will need
          to continue along the path, `while there is a path ahead`. '
        courseF_bee_conditionals5_d: To continue down the path, the bee will need
          to `move forward`. While on the path, the bee needs to check for a flower.
          What should the bee do if there is a flower?
      courseF_bee_conditionals8:
        courseF_bee_conditionals8_a: |-
          \*\* Pamiętaj: \*\*

          Ta plansza jest inna za każdym uruchomieniem.

          Będziesz potrzebował użyć bloku warunkowego ('if' lub ' if/else') do rozwiązania problemu.
        courseF_bee_conditionals8_b: |-
          This puzzle is tricky, because you can't check blank squares, nectar, _and_ honey with just one single conditional.

          Only check for nectar and honey at the end of your path.
        courseF_bee_conditionals8_c: Co się stanie jak użyjesz bloku `while path ahead`
          i weźmiesz pierwszy kwiat jako ostatni?
      courseF_bee_for1:
        courseF_bee_for1_a: Drag a purple number block into the blank space on the
          `repeat` loop to tell it how many times to repeat.
        courseF_bee_for1_b: You will need two blocks in your ‘repeat’ loop to collect
          all of the nectar.
      courseF_bee_for10:
        courseF_bee_for10_a: Can you find a pattern between the number of steps you
          need to take and the number of nectars to gather?
        courseF_bee_for10_b: The first set of flowers has a total of **14 flowers**.
          To get to this first set, the bee must buzz down **7 squares** (or 14 squares
          divided by 2.) How many flowers are in the next set and how many squares
          will be the bee have to travel to get there?
        courseF_bee_for10_c: |-
          W zagadce pierwszy zestaw ma **14** kwiatów, drugi zestaw ma **10** kwiatów, trzeci zestaw ma **6** kwiatów a czwarty zestaw ma **2** kwiaty.

          Zauważ, że na obrazku jest **7** czerwonych kwadratów, **5** pomarańczowych kwadratów, **3** zielone kwadraty i **1** niebieski blok.

          ![](<https://images.code.org/602ce14659299af6a59a79ebd0bdb9d4-image-1493221855089.6.11 Hint Drawing.png>)

          Jak te liczby są ze sobą powiązane?
        courseF_bee_for10_d: You'll need to have 2 repeats, one will use a math block.
      courseF_bee_for10_2018:
        courseF_bee_for10_a: Can you find a pattern between the number of steps you
          need to take and the number of nectars to gather?
        courseF_bee_for10_b: The first set of flowers has a total of **14 flowers**.
          To get to this first set, the bee must buzz down **7 squares** (or 14 squares
          divided by 2.) How many flowers are in the next set and how many squares
          will be the bee have to travel to get there?
        courseF_bee_for10_c: |-
          W zagadce pierwszy zestaw ma **14** kwiatów, drugi zestaw ma **10** kwiatów, trzeci zestaw ma **6** kwiatów a czwarty zestaw ma **2** kwiaty.

          Zauważ, że na obrazku jest **7** czerwonych kwadratów, **5** pomarańczowych kwadratów, **3** zielone kwadraty i **1** niebieski blok.

          ![](<https://images.code.org/602ce14659299af6a59a79ebd0bdb9d4-image-1493221855089.6.11 Hint Drawing.png>)

          Jak te liczby są ze sobą powiązane?
        courseF_bee_for10_d: You'll need to have 2 repeats, one will use a math block.
      courseF_bee_for10_2019:
        courseF_bee_for10_a: Can you find a pattern between the number of steps you
          need to take and the number of nectars to gather?
        courseF_bee_for10_b: The first set of flowers has a total of **14 flowers**.
          To get to this first set, the bee must buzz down **7 squares** (or 14 squares
          divided by 2.) How many flowers are in the next set and how many squares
          will be the bee have to travel to get there?
        courseF_bee_for10_c: |-
          W zagadce pierwszy zestaw ma **14** kwiatów, drugi zestaw ma **10** kwiatów, trzeci zestaw ma **6** kwiatów a czwarty zestaw ma **2** kwiaty.

          Zauważ, że na obrazku jest **7** czerwonych kwadratów, **5** pomarańczowych kwadratów, **3** zielone kwadraty i **1** niebieski blok.

          ![](<https://images.code.org/602ce14659299af6a59a79ebd0bdb9d4-image-1493221855089.6.11 Hint Drawing.png>)

          Jak te liczby są ze sobą powiązane?
        courseF_bee_for10_d: You'll need to have 2 repeats, one will use a math block.
      courseF_bee_for11:
        courseF_bee_for11_a: |-
          How much less is 12 than 15?\
          How much less is 9 than 12?

          Do you see a pattern?
      courseF_bee_for11_2018:
        courseF_bee_for11_a: |-
          How much less is 12 than 15?\
          How much less is 9 than 12?

          Do you see a pattern?
      courseF_bee_for11_2019:
        courseF_bee_for11_a: |-
          How much less is 12 than 15?\
          How much less is 9 than 12?

          Do you see a pattern?
      courseF_bee_for1_2018:
        courseF_bee_for1_a: Drag a purple number block into the blank space on the
          `repeat` loop to tell it how many times to repeat.
        courseF_bee_for1_b: You will need two blocks in your ‘repeat’ loop to collect
          all of the nectar.
      courseF_bee_for1_2019:
        courseF_bee_for1_a: Drag a purple number block into the blank space on the
          `repeat` loop to tell it how many times to repeat.
        courseF_bee_for1_b: You will need two blocks in your ‘repeat’ loop to collect
          all of the nectar.
      courseF_bee_for2:
        courseF_bee_for2_a: If you’re confused, work one flower at a time, and test
          often.
        courseF_bee_for2_b: Remember to move forward between each loop, so you reach
          each flower.
      courseF_bee_for2_2018:
        courseF_bee_for2_a: If you’re confused, work one flower at a time, and test
          often.
        courseF_bee_for2_b: Remember to move forward between each loop, so you reach
          each flower.
      courseF_bee_for2_2019:
        courseF_bee_for2_a: If you’re confused, work one flower at a time, and test
          often.
        courseF_bee_for2_b: Remember to move forward between each loop, so you reach
          each flower.
      courseF_bee_for4:
        courseF_bee_for4_a: Use a `for` loop that goes from 1 to 7 with an increment
          of 1 to solve this puzzle.
        courseF_bee_for4_b: Within your `for` loop, you will want to have a `move
          forward` command, and a loop to collect nectar.
        courseF_bee_for4_c: Make sure to use the `counter` variable inside your nested
          `repeat` loop to get enough nectar!
      courseF_bee_for4_2018:
        courseF_bee_for4_a: Use a `for` loop that goes from 1 to 7 with an increment
          of 1 to solve this puzzle.
        courseF_bee_for4_b: Within your `for` loop, you will want to have a `move
          forward` command, and a loop to collect nectar.
        courseF_bee_for4_c: Make sure to use the `counter` variable inside your nested
          `repeat` loop to get enough nectar!
      courseF_bee_for4_2019:
        courseF_bee_for4_a: Use a `for` loop that goes from 1 to 7 with an increment
          of 1 to solve this puzzle.
        courseF_bee_for4_b: Within your `for` loop, you will want to have a `move
          forward` command, and a loop to collect nectar.
        courseF_bee_for4_c: Make sure to use the `counter` variable inside your nested
          `repeat` loop to get enough nectar!
      courseF_bee_for5:
        courseF_bee_for5_a: This time, your `move forward` block and your `get nectar`
          block will need to be in separate `repeat` loops, both inside the same `for`
          loop.
        courseF_bee_for5_b: Use the `counter` variable in each loop so the bee moves
          different distances between each flower.
        courseF_bee_for5_c: Don't be afraid to make a mistake! Try adding blocks and
          running the code to see what will happen, even if you haven't solved the
          puzzle yet.
      courseF_bee_for5_2018:
        courseF_bee_for5_a: This time, your `move forward` block and your `get nectar`
          block will need to be in separate `repeat` loops, both inside the same `for`
          loop.
        courseF_bee_for5_b: Use the `counter` variable in each loop so the bee moves
          different distances between each flower.
        courseF_bee_for5_c: Don't be afraid to make a mistake! Try adding blocks and
          running the code to see what will happen, even if you haven't solved the
          puzzle yet.
      courseF_bee_for5_2019:
        courseF_bee_for5_a: This time, your `move forward` block and your `get nectar`
          block will need to be in separate `repeat` loops, both inside the same `for`
          loop.
        courseF_bee_for5_b: Use the `counter` variable in each loop so the bee moves
          different distances between each flower.
        courseF_bee_for5_c: Don't be afraid to make a mistake! Try adding blocks and
          running the code to see what will happen, even if you haven't solved the
          puzzle yet.
      courseF_bee_for6:
        courseF_bee_for6_a: Don't forget to use a `counter` variable inside your `repeat`
          loop.
        courseF_bee_for6_b: Within your `for` loop, you will want to have a `move
          forward` command, and a loop to collect nectar.
        courseF_bee_for6_c: Your loop should count **from 5 to 1**.
      courseF_bee_for6_2018:
        courseF_bee_for6_a: Don't forget to use a `counter` variable inside your `repeat`
          loop.
        courseF_bee_for6_b: Within your `for` loop, you will want to have a `move
          forward` command, and a loop to collect nectar.
        courseF_bee_for6_c: Your loop should count **from 5 to 1**.
      courseF_bee_for6_2019:
        courseF_bee_for6_a: Don't forget to use a `counter` variable inside your `repeat`
          loop.
        courseF_bee_for6_b: Within your `for` loop, you will want to have a `move
          forward` command, and a loop to collect nectar.
        courseF_bee_for6_c: Your loop should count **from 5 to 1**.
      courseF_bee_for7:
        courseF_bee_for7_a: Your `for` loop will need to count from 1 to 7 by 2.
        courseF_bee_for7_b: Within your `for` loop, you will want to have a `move
          forward` command, and a loop to collect nectar.
        courseF_bee_for7_c: Remember to use the `counter` variable in your `repeat`
          loop.
      courseF_bee_for7_2018:
        courseF_bee_for7_a: Your `for` loop will need to count from 1 to 7 by 2.
        courseF_bee_for7_b: Within your `for` loop, you will want to have a `move
          forward` command, and a loop to collect nectar.
        courseF_bee_for7_c: Remember to use the `counter` variable in your `repeat`
          loop.
      courseF_bee_for7_2019:
        courseF_bee_for7_a: Your `for` loop will need to count from 1 to 7 by 2.
        courseF_bee_for7_b: Within your `for` loop, you will want to have a `move
          forward` command, and a loop to collect nectar.
        courseF_bee_for7_c: Remember to use the `counter` variable in your `repeat`
          loop.
      courseF_bee_for8:
        courseF_bee_for8_a: "If your loop is counting up, the increment is added to
          your counter variable each time through. \n\nWhat do you need to add to
          each number to get the next amount of nectar?"
        courseF_bee_for8_b: In this puzzle, you will need to move in a stair step
          pattern to get to the flowers.
        courseF_bee_for8_c: Your loop will count _from 3 to 15_ with some increment.
          What is it?
      courseF_bee_for8_2018:
        courseF_bee_for8_a: "If your loop is counting up, the increment is added to
          your counter variable each time through. \n\nWhat do you need to add to
          each number to get the next amount of nectar?"
        courseF_bee_for8_b: In this puzzle, you will need to move in a stair step
          pattern to get to the flowers.
        courseF_bee_for8_c: Your loop will count _from 3 to 15_ with some increment.
          What is it?
      courseF_bee_for8_2019:
        courseF_bee_for8_a: "If your loop is counting up, the increment is added to
          your counter variable each time through. \n\nWhat do you need to add to
          each number to get the next amount of nectar?"
        courseF_bee_for8_b: In this puzzle, you will need to move in a stair step
          pattern to get to the flowers.
        courseF_bee_for8_c: Your loop will count _from 3 to 15_ with some increment.
          What is it?
      courseF_bee_for9:
        courseF_bee_for9_a: |-
          Try doing some math with the counter variable.

          What do you have to do to the counter at each flower to equal the amount of nectar you need to collect?
        courseF_bee_for9_c: It looks like you will need to turn the bee at the beginning
          of each loop iteration if you want to solve the puzzle.
        courseF_bee_for9_b: "**Remember:** If your loop is counting up, the increment
          is added to your `counter` variable each time through."
      courseF_bee_for9_2018:
        courseF_bee_for9_a: |-
          Try doing some math with the counter variable.

          What do you have to do to the counter at each flower to equal the amount of nectar you need to collect?
        courseF_bee_for9_c: It looks like you will need to turn the bee at the beginning
          of each loop iteration if you want to solve the puzzle.
        courseF_bee_for9_b: "**Remember:** If your loop is counting up, the increment
          is added to your `counter` variable each time through."
      courseF_bee_for9_2019:
        courseF_bee_for9_a: |-
          Try doing some math with the counter variable.

          What do you have to do to the counter at each flower to equal the amount of nectar you need to collect?
        courseF_bee_for9_c: It looks like you will need to turn the bee at the beginning
          of each loop iteration if you want to solve the puzzle.
        courseF_bee_for9_b: "**Remember:** If your loop is counting up, the increment
          is added to your `counter` variable each time through."
      courseF_bee_for_challenge2:
        courseF_bee_for_challenge2_a: Spójrz na tę opcję dla ruchu:! \[] (<https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png>)
        courseF_bee_for_challenge2_b: 'Spróbuj użyć dwóch pętlach "dla": jednej dla
          wznoszenia się by zebrać nektar, a drugiej dla schodzenia i robienia miodu.'
        courseF_bee_for_challenge2_c: Zauważ, że jedna pętla "dla" potrzebuje wewnątrz
          wielu zwykłych pętli, które powtarzaj się 'licznik' razy, aby utworzyć wzór
          wznoszących się schodów. Inna pętla "dla" potrzebuje tylko jednej zwykłej
          pętli, aby zrobić 'licznik' miodu.
        courseF_bee_for_challenge2_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_for" inline="true">
                  <title name="VAR">counter</title>
                  <value name="FROM">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <value name="TO">
                    <block type="math_number">
                      <title name="NUM">3</title>
                    </block>
                  </value>
                  <value name="BY">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="controls_repeat_ext" inline="true">
                      <value name="TIMES">
                        <block type="variables_get">
                          <title name="VAR">counter</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="maze_moveForward"/>
                      </statement>
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="variables_get">
                              <title name="VAR">counter</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="maze_nectar"/>
                          </statement>
                          <next>
                            <block type="maze_turn">
                              <title name="DIR">turnLeft</title>
                              <next>
                                <block type="controls_repeat_ext" inline="true">
                                  <value name="TIMES">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <statement name="DO">
                                    <block type="maze_moveForward"/>
                                  </statement>
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnRight</title>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_turn">
                      <title name="DIR">turnRight</title>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                          <next>
                            <block type="controls_for" inline="true">
                              <title name="VAR">counter</title>
                              <value name="FROM">
                                <block type="math_number">
                                  <title name="NUM">2</title>
                                </block>
                              </value>
                              <value name="TO">
                                <block type="math_number">
                                  <title name="NUM">10</title>
                                </block>
                              </value>
                              <value name="BY">
                                <block type="math_number">
                                  <title name="NUM">2</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="maze_moveForward">
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnLeft</title>
                                      <next>
                                        <block type="maze_moveForward">
                                          <next>
                                            <block type="maze_turn">
                                              <title name="DIR">turnRight</title>
                                              <next>
                                                <block type="controls_repeat_ext" inline="true">
                                                  <value name="TIMES">
                                                    <block type="variables_get">
                                                      <title name="VAR">counter</title>
                                                    </block>
                                                  </value>
                                                  <statement name="DO">
                                                    <block type="maze_honey"/>
                                                  </statement>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_bee_for_challenge2_2018:
        courseF_bee_for_challenge2_a: Spójrz na tę opcję dla ruchu:! \[] (<https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png>)
        courseF_bee_for_challenge2_b: 'Spróbuj użyć dwóch pętlach "dla": jednej dla
          wznoszenia się by zebrać nektar, a drugiej dla schodzenia i robienia miodu.'
        courseF_bee_for_challenge2_c: Zauważ, że jedna pętla "dla" potrzebuje wewnątrz
          wielu zwykłych pętli, które powtarzaj się 'licznik' razy, aby utworzyć wzór
          wznoszących się schodów. Inna pętla "dla" potrzebuje tylko jednej zwykłej
          pętli, aby zrobić 'licznik' miodu.
        courseF_bee_for_challenge2_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_for" inline="true">
                  <title name="VAR">counter</title>
                  <value name="FROM">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <value name="TO">
                    <block type="math_number">
                      <title name="NUM">3</title>
                    </block>
                  </value>
                  <value name="BY">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="controls_repeat_ext" inline="true">
                      <value name="TIMES">
                        <block type="variables_get">
                          <title name="VAR">counter</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="maze_moveForward"/>
                      </statement>
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="variables_get">
                              <title name="VAR">counter</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="maze_nectar"/>
                          </statement>
                          <next>
                            <block type="maze_turn">
                              <title name="DIR">turnLeft</title>
                              <next>
                                <block type="controls_repeat_ext" inline="true">
                                  <value name="TIMES">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <statement name="DO">
                                    <block type="maze_moveForward"/>
                                  </statement>
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnRight</title>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_turn">
                      <title name="DIR">turnRight</title>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                          <next>
                            <block type="controls_for" inline="true">
                              <title name="VAR">counter</title>
                              <value name="FROM">
                                <block type="math_number">
                                  <title name="NUM">2</title>
                                </block>
                              </value>
                              <value name="TO">
                                <block type="math_number">
                                  <title name="NUM">10</title>
                                </block>
                              </value>
                              <value name="BY">
                                <block type="math_number">
                                  <title name="NUM">2</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="maze_moveForward">
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnLeft</title>
                                      <next>
                                        <block type="maze_moveForward">
                                          <next>
                                            <block type="maze_turn">
                                              <title name="DIR">turnRight</title>
                                              <next>
                                                <block type="controls_repeat_ext" inline="true">
                                                  <value name="TIMES">
                                                    <block type="variables_get">
                                                      <title name="VAR">counter</title>
                                                    </block>
                                                  </value>
                                                  <statement name="DO">
                                                    <block type="maze_honey"/>
                                                  </statement>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_bee_for_challenge2_2019:
        courseF_bee_for_challenge2_a: Spójrz na tę opcję dla ruchu:! \[] (<https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png>)
        courseF_bee_for_challenge2_b: 'Spróbuj użyć dwóch pętlach "dla": jednej dla
          wznoszenia się by zebrać nektar, a drugiej dla schodzenia i robienia miodu.'
        courseF_bee_for_challenge2_c: Zauważ, że jedna pętla "dla" potrzebuje wewnątrz
          wielu zwykłych pętli, które powtarzaj się 'licznik' razy, aby utworzyć wzór
          wznoszących się schodów. Inna pętla "dla" potrzebuje tylko jednej zwykłej
          pętli, aby zrobić 'licznik' miodu.
        courseF_bee_for_challenge2_d: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_for" inline="true">
                  <title name="VAR">counter</title>
                  <value name="FROM">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <value name="TO">
                    <block type="math_number">
                      <title name="NUM">3</title>
                    </block>
                  </value>
                  <value name="BY">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="controls_repeat_ext" inline="true">
                      <value name="TIMES">
                        <block type="variables_get">
                          <title name="VAR">counter</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="maze_moveForward"/>
                      </statement>
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="variables_get">
                              <title name="VAR">counter</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="maze_nectar"/>
                          </statement>
                          <next>
                            <block type="maze_turn">
                              <title name="DIR">turnLeft</title>
                              <next>
                                <block type="controls_repeat_ext" inline="true">
                                  <value name="TIMES">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <statement name="DO">
                                    <block type="maze_moveForward"/>
                                  </statement>
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnRight</title>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_turn">
                      <title name="DIR">turnRight</title>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                          <next>
                            <block type="controls_for" inline="true">
                              <title name="VAR">counter</title>
                              <value name="FROM">
                                <block type="math_number">
                                  <title name="NUM">2</title>
                                </block>
                              </value>
                              <value name="TO">
                                <block type="math_number">
                                  <title name="NUM">10</title>
                                </block>
                              </value>
                              <value name="BY">
                                <block type="math_number">
                                  <title name="NUM">2</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="maze_moveForward">
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnLeft</title>
                                      <next>
                                        <block type="maze_moveForward">
                                          <next>
                                            <block type="maze_turn">
                                              <title name="DIR">turnRight</title>
                                              <next>
                                                <block type="controls_repeat_ext" inline="true">
                                                  <value name="TIMES">
                                                    <block type="variables_get">
                                                      <title name="VAR">counter</title>
                                                    </block>
                                                  </value>
                                                  <statement name="DO">
                                                    <block type="maze_honey"/>
                                                  </statement>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_bee_functions2:
        courseF_bee_functions2_a: The function has been written for you, but you will
          need to call it at each flower.
        courseF_bee_functions2_b: Click on the blue edit button on the `get only nectar`
          function to see what it does.
      courseF_bee_functions3:
        courseF_bee_functions3_a: 'Your function for this puzzle only needs to make
          honey, it shouldn''t have any `move forward` or `turn` blocks in it. '
        courseF_bee_functions3_b: Remember that your function should only get honey
          _if_ there is a honeycomb.
        courseF_bee_functions3_c: Use the green `only make honey` block to call your
          function.
        courseF_bee_functions3_d: Check out this path.
      courseF_bee_functions3a:
        courseF_bee_functions3a_a: 'Your function for this puzzle only needs to get
          nectar or make honey, it shouldn''t have any `move forward` or `turn` blocks
          in it. '
        courseF_bee_functions3a_b: Use a stairstep pattern to check the first four
          clouds.
      courseF_bee_functions4:
        courseF_bee_functions4_a: Your function should travel down the side paths
          and return the bee back to the main road.  You don't need to add that part
          to your main program.
        courseF_bee_functions4_b: Try building the program and using the function
          blocks as you expect the function to behave, then create the function.
      courseF_bee_functions5a:
        courseF_bee_functions5a_a: "Your function should check if there's a path to
          the right, and if there is, travel down the side paths and return the bee
          back to the main road.  \n\nYou don't need to add that part to your main
          program."
        courseF_bee_functions5a_b: Use a `while` loop to travel down all of the main
          paths, since they are different lengths.
        courseF_bee_functions5a_c: Within your `while` loop, make sure to move forward,
          then use your function to check for a path.
      courseF_bee_functions6:
        courseF_bee_functions6_a: "Jeśli zadanie wydaje Ci sie za trudne,  spróbuj
          budować funkcje po kawałku.  \n\nDodaj bloki, a następnie wypróbuj ich działanie.
          Dodaj kolejne, a następnie spróbuj ponownie.  Wkrótce osiągniesz cel! \n\n![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)"
        courseF_bee_functions6_b: Your function should check if there is a flower
          or honeycomb, get nectar or make honey, then turn.
        courseF_bee_functions6_c: Since you are turning within your function, you
          only need one `while` loop to get you through this maze.
      courseF_bee_functions7:
        courseF_bee_functions7_a: You can look back at the last puzzle to see your
          function.
        courseF_bee_functions7_b: Try drawing a path through this maze with your finger.
          Where will the bee have to make a decision?
      courseF_bee_functions8a:
        courseF_bee_functions8a_a: "Jeśli łamigłówka wydaje Ci się za trudna, spróbuj
          budować funkcje po kawałku.  \n\nDodaj bloki, a następnie wypróbuj ich działanie.
          Dodaj kolejne, t wypróbuj ponownie.  Wkrótce osiągniesz cel!"
        courseF_bee_functions8a_b: Remember to build code inside of the function editor.
      courseF_bee_functionsPre7:
        courseF_bee_functions7_a: "Jeśli łamigłówka wydaje Ci się za trudna, spróbuj
          budować funkcje po kawałku.  \n\nDodaj bloki, a następnie wypróbuj ich działanie.
          Dodaj kolejne, t wypróbuj ponownie.  Wkrótce osiągniesz cel!"
        courseF_bee_functions7_b: |-
          Remember to build code inside of the green function block.

          <xml>
            <block type="procedures_defnoreturn" editable="false">
              <mutation/>
              <title name="NAME">get nectar make honey</title>
              <statement name="STACK">
              </statement>
            </block>
          </xml>
        courseF_bee_functions7_c: Which way should you turn if there is a honeycomb?
          What about a flower? What if there is nothing?
      courseF_bee_functions_challenge1:
        courseF_bee_functions_challenge1_a: You can use the functions in the tool
          box to help you. You can call a function inside of another function's definition!
      courseF_bee_functions_challenge2:
        courseF_bee_functions_challenge2_a: |-
          If there is a path to the right, you should do the following:

          -   Get any nectar or make any honey.
          -   Turn right towards the side path.
          -   Move to the end of the side path.
          -   Turn right.

          If you repeat the above actions twice, you will be ready to move back down the main path.

          **Only click for another hint if you want to see the full solution!**
        courseF_bee_functions_challenge2_b: |-
          **Solution:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat_ext" inline="true">
                  <value name="TIMES">
                    <block type="math_number">
                      <title name="NUM">4</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="maze_untilBlocked">
                      <statement name="DO">
                        <block type="maze_move">
                          <title name="DIR">moveForward</title>
                          <next>
                            <block type="maze_if">
                              <title name="DIR">isPathRight</title>
                              <statement name="DO">
                                <block type="procedures_callnoreturn" id="function">
                                <mutation name="move and check"></mutation>
                                </block>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </statement>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnLeft</title>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
            <block type="procedures_defnoreturn" editable="false">
            <mutation></mutation>
              <title name="NAME">move and check</title>
              <statement name="STACK">
                <block type="controls_repeat_ext" inline="true">
                  <value name="TIMES">
                    <block type="math_number">
                      <title name="NUM">2</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="procedures_callnoreturn">
                    <mutation name="check nectar or honey"></mutation>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                          <next>
                            <block type="maze_untilBlocked">
                              <statement name="DO">
                                <block type="maze_move">
                                  <title name="DIR">moveForward</title>
                                </block>
                              </statement>
                              <next>
                                <block type="maze_turn">
                                  <title name="DIR">turnRight</title>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </statement>
            </block>
            <block type="procedures_defnoreturn" editable="false" usercreated="true">
            <mutation></mutation>
              <title name="NAME">check nectar or honey</title>
              <statement name="STACK">
                <block type="bee_whileNectarAmount">
                  <title name="ARG1">nectarRemaining</title>
                  <title name="OP">&gt;</title>
                  <title name="ARG2">0</title>
                  <statement name="DO">
                    <block type="maze_nectar"/>
                  </statement>
                  <next>
                    <block type="bee_whileNectarAmount">
                      <title name="ARG1">honeyAvailable</title>
                      <title name="OP">&gt;</title>
                      <title name="ARG2">0</title>
                      <statement name="DO">
                        <block type="maze_honey"/>
                      </statement>
                    </block>
                  </next>
                </block>
              </statement>
            </block>
          </xml>
      courseF_bee_fwp1:
        courseF_bee_fwp1_a: Use `if` statements to make sure you're only getting nectar
          from a flower.
        courseF_bee_fwp1_b: Continue along the path using a `repeat` block. Make sure
          you are using a `move forward` block and checking if there is a flower using
          a `if` statement.
      courseF_bee_fwp2:
        courseF_bee_fwp2_a: "To turn this into a function, simply drag the code into
          the existing function block.  \n\n![](https://images.code.org/4d918c677ecb9f1618c1556566805b32-image-1477621874625.gif)"
        courseF_bee_fwp2_b: Don't forget to connect the `rowOfNectar` block to `when
          run` to call the function that you just built.
      courseF_bee_fwp3:
        courseF_bee_fwp3_a: Your function will run no matter which direction you're
          facing.
        courseF_bee_fwp3_b: There are 3 rows of nectar, what kind of turns and movements
          do you need to make between each row?
        courseF_bee_fwp3_c: To solve this puzzle, you'll need to call your function
          3 times. In between each call, you need to `turn right`, `move forward`
          2 times, then `turn right` again. OR, you need to `turn left`, `move forward`
          2 times, then `turn left` again.
      courseF_bee_fwp4:
        courseF_bee_fwp4_a: You will need to add a parameter and use the resulting
          variable in your loop.
        courseF_bee_fwp4_b: The parameter you create for your function will be used
          to in the repeat loop to determine how many times the bee will move forward
          and check for nectar.
      courseF_bee_fwp5:
        courseF_bee_fwp5_a: Count the number of spaces you need to check in each stretch
          and use those numbers as your parameters to the function call.
        courseF_bee_fwp5_a_b: Remember to turn between each function call.
      courseF_bee_fwp6:
        courseF_bee_fwp6_a: Which block automatically increments a variable that you
          could use as a parameter?
        courseF_bee_fwp6_b: Try using a `for` loop to solve this puzzle.
      courseF_bee_fwp7:
        courseF_bee_fwp7_a: You don't need a second parameter for this function, only
          a second `if` statement.
        courseF_bee_fwp7_b: Dodaj instrukcję "jeśli" do swojej funkcji, aby pszczoła
          sprawdzała zarówno plastry, jak i kwiaty.
      courseF_bee_fwp8:
        courseF_bee_fwp8_a: Jak pętla "dla" mogłaby pomóc w tej łamigłówce?
        courseF_bee_fwp8_b: Since the spiral gets smaller as you go in, your `for`
          loop should count down.
      courseF_bee_fwp_challenge1:
        courseF_bee_fwp_challenge1_a: |-
          The main program should look something like this:

          <xml>
          <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="procedures_callnoreturn" inline="false">
                  <mutation name="pick row">
                    <arg name="length"/>
                  </mutation>
                  <value name="ARG0">
                    <block type="math_number">
                      <title name="NUM">3</title>
                    </block>
                  </value>
                  <next>
                    <block type="maze_move">
                      <title name="DIR">moveForward</title>
                      <next>
                        <block type="maze_move">
                          <title name="DIR">moveForward</title>
                          <next>
                            <block type="procedures_callnoreturn" inline="false">
                              <mutation name="pick row">
                                <arg name="length"/>
                              </mutation>
                              <value name="ARG0">
                                <block type="math_number">
                                  <title name="NUM">5</title>
                                </block>
                              </value>
                              <next>
                                <block type="maze_move">
                                  <title name="DIR">moveForward</title>
                                  <next>
                                    <block type="maze_move">
                                      <title name="DIR">moveForward</title>
                                      <next>
                                        <block type="procedures_callnoreturn" inline="false">
                                          <mutation name="pick row">
                                            <arg name="length"/>
                                          </mutation>
                                          <value name="ARG0">
                                            <block type="math_number">
                                              <title name="NUM">6</title>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="maze_move">
                                              <title name="DIR">moveForward</title>
                                              <next>
                                                <block type="maze_move">
                                                  <title name="DIR">moveForward</title>
                                                  <next>
                                                    <block type="procedures_callnoreturn" inline="false">
                                                      <mutation name="pick row">
                                                        <arg name="length"/>
                                                      </mutation>
                                                      <value name="ARG0">
                                                        <block type="math_number">
                                                          <title name="NUM">4</title>
                                                        </block>
                                                      </value>
                                                    </block>
                                                  </next>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block></xml>
        courseF_bee_fwp_challenge1_b: 'Look at how much corn is available to harvest
          in each space. Do you see the counter pattern? '
        courseF_bee_fwp_challenge1_b1: |-
          Parametr "długość" powinien być wykorzystany do ustawienia maksymalnej wartości w pętli "dla".

          Nie zapomnij aby po zbiorach wrócić farmerem na główną ścieżkę!
        courseF_bee_fwp_challenge1_c: |-
          Place a `for loop` inside a function and set it to count from `1` to `length` by `1`.
          Inside this loop, you should move forward and pick all of the corn.

          <xml>
          <block type="controls_for" inline="true">
                      <title name="VAR">counter</title>
                      <value name="FROM">
                        <block type="math_number">
                          <title name="NUM">1</title>
                        </block>
                      </value>
                      <value name="TO">
                        <block type="parameters_get">
                          <title name="VAR">length</title>
                        </block>
                      </value>
                      <value name="BY">
                        <block type="math_number">
                          <title name="NUM">1</title>
                        </block>
                      </value>
                      <statement name="DO">
                      </statement>
          </block></xml>
        courseF_bee_fwp_challenge1_d: Inside the `for loop` you will want to `move
          forward` then `pick corn` **counter times**.
        courseF_bee_fwp_challenge1_d2: After the `for loop` you can just `move backward`
          **length times**.
        courseF_bee_fwp_challenge1_e: |-
          **Here is the solution:**

          <xml>
            <block type="procedures_defnoreturn" editable="false" usercreated="true">
              <mutation>
                <arg name="length"/>
              </mutation>
              <title name="NAME">pick row</title>
              <statement name="STACK">
                <block type="maze_turn">
                  <title name="DIR">turnLeft</title>
                  <next>
                    <block type="controls_for" inline="true">
                      <title name="VAR">counter</title>
                      <value name="FROM">
                        <block type="math_number">
                          <title name="NUM">1</title>
                        </block>
                      </value>
                      <value name="TO">
                        <block type="parameters_get">
                          <title name="VAR">length</title>
                        </block>
                      </value>
                      <value name="BY">
                        <block type="math_number">
                          <title name="NUM">1</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="maze_move">
                          <title name="DIR">moveForward</title>
                          <next>
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="harvester_corn"/>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </statement>
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="parameters_get">
                              <title name="VAR">length</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="maze_move">
                              <title name="DIR">moveBackward</title>
                            </block>
                          </statement>
                          <next>
                            <block type="maze_turn">
                              <title name="DIR">turnRight</title>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </statement>
              </block></xml>
      courseF_bee_fwp_challenge2:
        courseF_bee_fwp_challenge2_a: |-
          Start by making sure you understand how this function is _supposed_ to work. As the farmer moves down each path, she will only try to collect corn. Instead, how can you make her check for each of the 3 vegetables and pick only the one she finds?

          Add conditional statements to the function to check for corn, pumpkins, and lettuce.
        courseF_bee_fwp_challenge2_b: |-
          Are you running out of `move forward` blocks?
          Try using a _second_ `for loop` in your main program.
        courseF_bee_fwp_challenge2_c: |-
          **Here is what your function should look like:**

          <xml><block type="procedures_defnoreturn" deletable="false" movable="false" editable="false" usercreated="true">
              <mutation>
                <arg name="length"/>
              </mutation>
              <title name="NAME">pick row</title>
              <statement name="STACK">
                <block type="maze_turn">
                  <title name="DIR">turnLeft</title>
                  <next>
                    <block type="controls_for" inline="true">
                      <title name="VAR">counter</title>
                      <value name="FROM">
                        <block type="math_number">
                          <title name="NUM">1</title>
                        </block>
                      </value>
                      <value name="TO">
                        <block type="parameters_get">
                          <title name="VAR">length</title>
                        </block>
                      </value>
                      <value name="BY">
                        <block type="math_number">
                          <title name="NUM">1</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="maze_move">
                          <title name="DIR">moveForward</title>
                          <next>
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="harvester_ifHasCrop">
                                  <title name="LOC">Corn</title>
                                  <statement name="DO">
                                    <block type="harvester_corn"/>
                                  </statement>
                                  <next>
                                    <block type="harvester_ifHasCrop">
                                      <title name="LOC">Pumpkin</title>
                                      <statement name="DO">
                                        <block type="harvester_pumpkin"/>
                                      </statement>
                                      <next>
                                        <block type="harvester_ifHasCrop">
                                          <title name="LOC">Lettuce</title>
                                          <statement name="DO">
                                            <block type="harvester_lettuce"/>
                                          </statement>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </statement>
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="parameters_get">
                              <title name="VAR">length</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="maze_move">
                              <title name="DIR">moveBackward</title>
                            </block>
                          </statement>
                          <next>
                            <block type="maze_turn">
                              <title name="DIR">turnRight</title>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </statement>
            </block>
          </xml>
        courseF_bee_fwp_challenge2_d: |-
          **Here is what your main program should look like:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_for" inline="true">
                  <title name="VAR">counter2</title>
                  <value name="FROM">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <value name="TO">
                    <block type="math_number">
                      <title name="NUM">6</title>
                    </block>
                  </value>
                  <value name="BY">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="maze_move">
                      <title name="DIR">moveForward</title>
                      <next>
                        <block type="procedures_callnoreturn" inline="false">
                          <mutation name="pick row">
                            <arg name="length"/>
                          </mutation>
                          <value name="ARG0">
                            <block type="variables_get">
                              <title name="VAR">counter2</title>
                            </block>
                          </value>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
              </block></xml>
      courseF_bee_variables_3_2018:
        courseF_beevariables_3a: |-
          To subtract one from the variable, you can use this code in your program:
          <xml><block type="variables_set" inline="false">
                              <title name="VAR">gather</title>
                              <value name="VALUE">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">MINUS</title>
                                  <value name="A">
                                    <block type="variables_get">
                                      <title name="VAR">gather</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="math_number">
                                      <title name="NUM">1</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                            </block></xml>
      courseF_bee_variables_3_2019:
        courseF_bee_variables_3_2019_1: |-
          To subtract one from the variable, you can use this code in your program:
          <xml><block type="variables_set" inline="false">
                              <title name="VAR">gather</title>
                              <value name="VALUE">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">MINUS</title>
                                  <value name="A">
                                    <block type="variables_get">
                                      <title name="VAR">gather</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="math_number">
                                      <title name="NUM">1</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                            </block></xml>
      courseF_bee_variables_4_2019:
        courseF_bee_variables_4_2019_1: Instead of subtracting 1 from `gather`, add
          1 each time instead. What should value should the variable have at first?
      courseF_playlab_variables1a:
        courseF_playlab_variables1a_a: You will want to replace the words “What should
          I shout?” in the green block with “Goal!”
      courseF_playlab_variables2b:
        courseF_playlab_variables2b_a: Jak myślisz, co powie Kiki, kiedy naciśniesz
          `Run`?
      courseF_playlab_variables3b_josh:
        courseF_playlab_variables3b_a: 'There are two blocks with empty spaces: an
          `actor say` block, and a `join` block. Add the variable blocks there!'
      courseF_playlab_variables4b:
        courseF_playlab_variables4b_a: You don’t need any more blocks from the toolbox
          here.
        courseF_playlab_variables4b_b: Put the two `age` variables and one `name`
          variable where they make the most sense in the conversation.
      courseF_playlab_variables5c:
        courseF_playlab_variables5c_a: Find an `answer` variable block in the toolbox,
          under “Variables”.
        courseF_playlab_variables5c_b: Przetestuj swój kod! Spróbuj wpisać "czerwony",
          oraz inne kolory, aby zobaczyć co się stanie.
      courseF_playlab_variables6c:
        courseF_playlab_variables6c_a: Under the “Input” section, use the `ask` block
          to get input from users.
      courseF_playlab_variables7b:
        courseF_playlab_variables7b_a: Have a cat and a dog talk about their favorite
          foods. Use the ask block to find out the favorite food, then display the
          text to the screen!
        courseF_playlab_variables7b_b: Have your favorite character ask if you want
          to hear a joke. If the answer is yes, display a joke to the screen.
      courseF_playlab_variables7c:
        courseF_playlab_variables7c_a: Put the new `ask` block before your `if/else`
          statement so you can use it there in other stages.
      courseF_playlab_variables8c:
        courseF_playlab_variables8c_a: The `join` block goes into an `actor say` block,
          and lets you use your variables in larger sentences.
      courseF_playlab_variables_challenge1:
        courseF_playlab_variables_challenge1_a: |-
          Aby aktorzy mogli mówić, potrzebujesz dodatkowych bloków z zestawu komend.
          <xml><block type="studio_saySpriteParamsTime" inline="true">
          <value name="SPRITE">
          <block type="math_number">

          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TEXT">
          <block type="text">
          <title name="TEXT">Knock knock.</title>
          </block>
          </value>
          <value name="TIME">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          </block></xml>
      courseF_playlab_variables_challenge2:
        courseF_playlab_variables_challenge2_a: Add and subtract points to the `score`
          variable when sprites collide.
        courseF_playlab_variables_challenge2_b: You can change how far you move your
          sprite each time one of the arrow keys is pressed.
        courseF_playlab_variables_challenge2_c: |-
          **Rozwiązanie:**
          <xml>
          <block type="studio_whenArrow">

          <title name="VALUE">up</title>
          <next>
          <block type="studio_moveDistanceParams" inline="true">
          <title name="SPRITE">0</title>
          <title name="DIR">1</title>
          <value name="DISTANCE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenArrow">
          <title name="VALUE">down</title>
          <next>
          <block type="studio_moveDistanceParams" inline="true">
          <title name="SPRITE">0</title>
          <title name="DIR">4</title>
          <value name="DISTANCE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenArrow">
          <title name="VALUE">left</title>
          <next>
          <block type="studio_moveDistanceParams" inline="true">
          <title name="SPRITE">0</title>
          <title name="DIR">8</title>
          <value name="DISTANCE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenArrow">
          <title name="VALUE">right</title>
          <next>
          <block type="studio_moveDistanceParams" inline="true">
          <title name="SPRITE">0</title>
          <title name="DIR">2</title>
          <value name="DISTANCE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">0</title>
          <title name="SPRITE2">1</title>
          <next>
          <block type="studio_setScore" inline="false">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="studio_getScore"/>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">0</title>
          <title name="SPRITE2">2</title>
          <next>
          <block type="studio_setScore" inline="false">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="studio_getScore"/>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">1</title>
          <title name="SPRITE2">2</title>
          <next>
          <block type="studio_setScore" inline="false">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="studio_getScore"/>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </xml>
      coursea_maze_ramp1_2018:
        courseC_maze_programming1_a: If the bird isn't getting to the pig, make sure
          both of the blocks have been fully clicked together, then click "Run" again.
        courseC_maze_programming1_b: Don't be afraid to make a mistake! Try something,
          and if it doesn't work, try something else!
      coursea_maze_ramp1_2019:
        courseC_maze_programming1_a: If the bird isn't getting to the pig, make sure
          both of the blocks have been fully clicked together, then click "Run" again.
        courseC_maze_programming1_b: Don't be afraid to make a mistake! Try something,
          and if it doesn't work, try something else!
      grade5_artist_variables_triangles1:
        grade5_artist_variables_triangles1_a: Musisz pamiętać, że aby utworzyć wewnętrzny
          kąt o 60 stopniach w tym trójkącie artysta musi się obrócić o 120 stopni.
        grade5_artist_variables_triangles1_b: Aby skrócić swój kod użyj pętli 'powtórz'.
        grade5_artist_variables_triangles1_c: Wewnątrz pętli musisz pójść do przodu
          50 pikseli, a następnie skręcić w lewo o 120 stopni.
      grade5_artist_variables_triangles1_2018:
        grade5_artist_variables_triangles1_a: Musisz pamiętać, że aby utworzyć wewnętrzny
          kąt o 60 stopniach w tym trójkącie artysta musi się obrócić o 120 stopni.
        grade5_artist_variables_triangles1_b: Aby skrócić swój kod użyj pętli 'powtórz'.
        grade5_artist_variables_triangles1_c: Wewnątrz pętli musisz pójść do przodu
          50 pikseli, a następnie skręcić w lewo o 120 stopni.
      grade5_artist_variables_triangles1_2019:
        grade5_artist_variables_triangles1_a: Musisz pamiętać, że aby utworzyć wewnętrzny
          kąt o 60 stopniach w tym trójkącie artysta musi się obrócić o 120 stopni.
        grade5_artist_variables_triangles1_b: Aby skrócić swój kod użyj pętli 'powtórz'.
        grade5_artist_variables_triangles1_c: Wewnątrz pętli musisz pójść do przodu
          50 pikseli, a następnie skręcić w lewo o 120 stopni.
      iceage_click_hello:
        iceage_click_hello_a: Add one or more `actor 1 say` blocks to the `when clicked`
          event to complete this puzzle.
      iceage_free_play:
        iceage_free_play_a: 'Can you make Sid and Manny have an Ice Crystal fight?  '
        iceage_free_play_b: Make Granny chase Diego.  End the game as a win if she
          catches him.
        iceage_free_play_c: Can you have Sid throw snowflakes at Diego and have Diego
          get bigger each time one hits?  End the game as a win if Diego gets hit
          5 times.
      iceage_hello1:
        iceage_hello1_a: Aby rozwiązać to zadanie musisz dodać tylko jeden blok. Przeciągnij
          blok 'postać mówi' do obszaru roboczego i połącz go z blokiem 'po uruchomieniu',
          który już się tam znajduje. Następnie wpisz "Cześć!" w dołączonym bloku.
      iceage_hello2:
        iceage_hello2_a: 'To solve this puzzle, you will need to have Sid say something
          using the `actor 1 say` block.  You will also need to have Manny say something
          with the `actor 2 say` block. '
      iceage_move_events:
        iceage_move_events_a: 'Each of the `when ___ arrow` events will need to have
          a different `move actor 1` command connected to it to solve this puzzle. '
      iceage_move_to_actor:
        iceage_move_to_actor_a: For this puzzle, you can either move Diego down by
          200 pixels, or move Manny up by 200 pixels.
        iceage_move_to_actor_b: Connect the `play ___ sound` block to the `when actor
          1 touches actor 2` event to finish this challenge.
      iceage_move_to_flag:
        iceage_hello3_a: Use the `move actor 1 right by 200 pixels` block to solve
          this puzzle.
      iceage_repeat:
        iceage_repeat_a: Use both the `move actor 1 left` and `move actor 1 right`
          blocks to solve this puzzle.
      iceage_sound_and_points:
        iceage_sound_and_points_a: You will need to add two blocks beneath the `when
          actor 1 touches actor 2` event.
        iceage_sound_and_points_b: You will need both the `score a point` block and
          the 'play \_\_\_\_ sound\` block to pass this level.
      iceage_throw_hearts:
        iceage_throw_hearts_a: When do you want to throw hearts at granny?  When an
          arrow is pressed? When you click on Sid?  When you click on Granny?  The
          choice is yours!
        iceage_throw_hearts_b: To get granny to be happy when she receives a heart,
          you will need to connect the `set actor 2 mood to happy` block beneath the
          `when actor 2 touches projectile` event.
      iceage_warn_ice_age:
        iceage_warn_ice_age_a: 'You should only have to add two blocks to get this
          puzzle where it needs to be. '
        iceage_warn_ice_age_b: Add both new blocks beneath the `when run` event to
          have them happen immediately after the program starts.
