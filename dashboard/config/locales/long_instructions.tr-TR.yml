---
tr-TR:
  data:
    long_instructions:
      2-3 Artist 1 new: Merhaba, ben bir sanatçıyım. Bana neredeyse her şeyi çizdirebilecek
        kodlar yazabilirsin. Birkaç blok kullanarak resimdeki gri çizgilerin üstünü
        çizmemi sağla.(Her çizgi 100 piksel uzunluğunda)
      2-3 Artist 11: Her bir kenarı 100 piksel olan bir sekizgen çizerek dur levhasını
        oluştur
      2-3 Artist 12: "Gözü tamamlamak için daire çiz. \n\\\r \n\\\r\nSanatçı her döngüde
        1 derece dönüyorsa, daire çizmek için kodu kaç defa tekrarlamam gerekiyor? "
      2-3 Artist 2 new: Bu evin bir duvarı yarım. Her kenar 100 ancak yarım duvar
        sadece 50. Duvarı tamamla.
      2-3 Artist 3.4: |-
        Zıpla bloğu sanatçıyı çizim yapmadan ilerletir.
        Hem zıpla hem de çiz bloğunu kullanarak çizgileri birleştirin. Her çizgi 50 piksel uzunluğunda.
      2-3 Artist 3new: Kırmızı şapka 100 piksel uzunluğundadır. 70 piksel daha kısa
        olan siyah bir şapka çizerek tamamla. (Siyah şapkanın genişliği 50 pikseldir)
      2-3 Artist 4: Kedi için bu evi tamamlamama yardım et.
      2-3 Artist 6: "Bu evin bir çatıya ihtiyacı var! Üçgeni çizin.  \\\r \\\r İpucu:
        tüm üç kenarı aynı uzunlukta. \\\r \\\r  <img src=\"https://images.code.org/8b10073fd1a7fe53b4da33ec2229894b-image-1468018903891.gif\"
        width=\"300\"/>"
      2-3 Artist 7: "Okulun son kalan pencerelerini çizerek sınıfın dışarıyı görmesini
        sağlayın.\nHer bir kare pencerenin kenarı 25 pikseldir. "
      2-3 Artist 8: "Time to build a barn!\n\nMake the rooms for each animal by splitting
        the barn into 2 equal-sized squares. \n\nHint: The rectangle is 200 pixels
        wide and 100 pixels tall.\n\nThere are many different ways to solve this puzzle."
      2-3 Artist 9 NEW: Uçurtmayı bitirin.
      2-3 Artist Assessment 1: "**Değerlendirme:** 25 piksel genişliğinde ve 25 piksel
        uzunluğunda olan son dişi çizin."
      2-3 Artist Debugging 1: "This hat should only be 50 pixels wide. \nCan you fix
        it?\n\n<br/>"
      2-3 Artist Debugging 10: "The direction pad on my game controller is too narrow.
        \n\nCan you make it wider by 10 pixels?\n\nTry running the code first to see
        what's wrong."
      2-3 Artist Debugging 11: |-
        My snowflake is falling apart!

        Can you figure out what's going wrong?
      2-3 Artist Debugging 2: "Kedinin bıyıkları için bu kod yanlış.\n\\\r\n\\\r\nHer
        biri eşit uzunlukta kedi bıyıkları çizmek için bu kodu düzelt. "
      2-3 Artist Debugging 3: "My boat has a hole! \n\nWhat do you need to fix to
        make the ends meet?"
      2-3 Artist Debugging 5: "The code that we have for the leg and foot is wrong.
        \n\nCan you fix it?"
      2-3 Artist Debugging 6: |-
        Looks like I'm sitting on a chair that’s missing a leg!

        Edit the code to draw the last leg.
      2-3 Artist Debugging 7: |-
        Looks like the C in code is drawn backwards!

        Can you make it look like a C again?
      2-3 Artist Debugging 8: "Öğretmenim başladığım işi bitirmem gerektiğini söylüyor!
        \\\r\n\\\r \nRüzgar gülümü bitirmeme yardım et. Nerenin hatalı olduğunu görebiliyor
        musun?"
      2-3 Artist Debugging 9: "Birşey kapalı!\\\r\n\\\r\nBu kök için bu kod yanlış.
        Sanatçının kökü doğru şekilde çizmesi için ne yapmalı?"
      2-3 Artist Debugging Assessment 1: "**Assessment:** \nWhy does this square end
        up being 75 pixels too small on each side?  \n\nWhere does the code go wrong?"
      2-3 Artist Free Play: Serbest çizim! İstediğiniz herhangi bir şey çizin.
      2-3 Artist Functions 1: "\"Me zombie artist. Me love drawing!\" \n\nHelp the
        zombie draw square glasses.  \n\nThe bridge between the glasses is 25 pixels
        shorter than the width of the squares, which is 100 pixels."
      2-3 Artist Functions 10: "**Serbest zaman:** Burada iki fonksiyon var, biri
        büyük ve diğeri küçük çark çizmek için.\\\r\n\\\r Bunları kullanarak bir makinenin
        içini çiz!"
      2-3 Artist Functions 11: "\"Kare çiz\" fonksiyonunu \"Altıgen çiz\" olarak yeniden
        adlandırdık, fakat kareler çizmeye devam ediyor! \"Altıgen çiz\" fonksiyonunu
        50 piksel kenarlı altıgen çizmek için düzenleyebilir misin?\\\r\n\\\r \nResmi
        yeni fonksiyonu kullanarak çiz!"
      2-3 Artist Functions 11.5: "İşte bir \"altıgen çiz\" fonksiyonu daha. \\\r\n\\\r\nAna
        programı 6 kere döngüleyip her döngüde 60 derece dönersen ne olur?"
      2-3 Artist Functions 12: "Fonksiyonlar karmaşık şeyleri birçok kez çizmek için
        mükemmeldir. \\\r\n\\\r\n\"Çiçek çiz\" fonksiyonunu kullanarak saksının geri
        kalanını doldurabilir misin?\\\r\n\\\r (İpucu: Tüm bitkiler birbirinden 100
        piksel uzaktadır)  "
      2-3 Artist Functions 2: "Fonksiyonlar yeni bloklar tanımlamanı sağlar! \\\r\n\\\r\nKare
        çizmek için gerekli blokları \"Kare çiz\" fonksiyonuna taşıdık. \"Kare çiz\"
        fonksiyonunu kullanarak gözlükleri çizebilir misin? \\\r\n\\\r\nKareler birbirlerinden
        75 piksel uzaklıktadır."
      2-3 Artist Functions 3: "Fonksiyonu 115 piksel kenar uzunluğunda\nbir kare çizmek
        için düzenle ve daha büyük bir gözlük çiz.\\\r\n\\\r Kareler bu sefer birbirlerine
        45 piksel uzaklıktadır. "
      2-3 Artist Functions 4: Bu 3 kareyi çizmek için "tekrarla" bloğunu kullan.
      2-3 Artist Functions 9: "**Serbest Oyun:** İşte bir kartanesi fonksiyonu. Bir
        kış\nsahnesi oluşturmak için onunla denemeler yap. \\\r\n\\\r\nBu bir serbest
        oyun bölümü, yani çözmen gereken bir bilmece yok. İyi eğlenceler!"
      2-3 Artist Loops New 1: |-
        Let's draw this robot's head! Can you make a square with sides that are 100 pixels?

        <br/>
      2-3 Artist Loops New 10: Hadi, şimdi birkaç V'yi onları bir döngüde çizerek
        birbirine bağlayalım.
      2-3 Artist Loops New 11: "Güzel bir şey yapmanın zamanı geldi!\n\\\r\n\\\r\nSon
        bulmacada yaptığınız kodu tekrar yapın, fakat bu kez döngü içinde en sona
        sola 30 derece dönüş ekleyin. Şimdi 8 yerine 24 kez tekrarlatın."
      2-3 Artist Loops New 12: Kenarları 100 piksel olan bir elmas çizin.
      2-3 Artist Loops New 13: "Bir adet baklava şekli çizmek için (gri olan) kodu
        biz size verdik.  \\\r\n\\\r\nGri kodu döngüleyerek çok eğlenceli bir desen
        oluşturabilirsiniz!"
      2-3 Artist Loops New 14: Baklava şekli için gereken kodla oyna ve başka ne gibi
        desenler çıkıyor bir bak. Mesela kaç derece döneceğini ve kaç kere döngü yapacağını
        değiştirmeyi dene.
      2-3 Artist Loops New 15: |-
        Now, draw anything you like!
        <br/><br/>
      2-3 Artist Loops New 2: |-
        Biraz önce çözdüğün bulmacanın bir benzeri, fakat bu sefer sadece bir tane 'ileriye taşı' ve 'dön' bloğu kullanabilirsin.
        'Tekrarla' bloğunu kullanarak bulmacayı çözebilir misin?
      2-3 Artist Loops New 9: Oku tamamlamak için iki kenarı da 50 piksel olan basit
        bir V çiz.
      2-3 Artist Nested Loops 1: |-
        You've used loops to draw shapes before, but now we're going to put loops inside of other loops!

        Put a `repeat` block around this whole stack of code to draw the pattern.

        <br/>
      2-3 Artist Nested Loops 10: 'Kodu 12 kez döngüleyerek motifi tamamlayın. '
      2-3 Artist Nested Loops 11: Örneği tamamlamak için bu kodu 4 kez tekrarlayın,her
        daireden sonra 90 derece döndürün.
      2-3 Artist Nested Loops 12: 'Bukleleri tamamlamak için bu kodu 12 kez döngüle. '
      2-3 Artist Nested Loops 2: 'Şimdi, üçgeni 6 kez döngüle. Her üçgenden sonra,
        yeni bir tane çizmeden önce 60 derece dönmen gerek. '
      2-3 Artist Nested Loops 3: "Bu motifi çizmek için üçgeni 12 kez döngülemen gerekecek.
        \\\r\n\\\r\nHer şekilden sonra kaç derece döneceğini anlamak için bir çemberin
        içindeki derecelerin sayısını (360), çizdiğin şekillerin sayısına (12) böl."
      2-3 Artist Nested Loops 4: |-
        Loop this diamond 12 times to draw a flower!

        Note: We'll use the same angle to loop 12 diamonds as we did for 12 triangles.\
        How much do you need to turn after each shape?
      2-3 Artist Nested Loops 5: "Bu binan pencerelerini içiçe döngü kullanarak doldur.
        \\\r\n\\\r\nPencereler 20 piksel uzunluğunda ve birbirlerine 20 piksel uzaklıktalar. "
      2-3 Artist Nested Loops 6: "Bu dinazorun kuyruğu boyunca 8 boynuzu var. \\\r\nHer
        boynuz 30 piksel uzunluğunda. Üçgenleri 8 kez döngüle ve her seferinde ileri
        atlamayı unutma!"
      2-3 Artist Nested Loops 7: "Güneş çizmek için üçgeni 10 kez döngüle. \\\r\n\\\r\nHer
        üçgenden sonra hareket edip dönmen gerekecek. \\\r\n\\\r\nNe kadar dönmen
        gerektiğini bir çemberdeki derecelerin sayısını şekli oluşturmak için gereken
        üçgen sayısına bölerek bulabilirsin."
      2-3 Artist Nested Loops 8: 'Şimdi, resmimize biraz da çimen ekleyelim. Her tutam
        çimen birbirinden 50 piksel uzaklıktadır. '
      2-3 Artist Nested Loops 9: "We'll finish this picture by adding our flower.
        \n\nLoop the diamond 12 times to draw the flower."
      2-3 Artist Nested Loops Free Play: Serbest oyun, içiçe döngülerle havalı bir
        şeyler çiz.
      2-3 Bee Conditionals 11: "I wonder what's out there!\n\nHelp me fly around the
        yard and collect nectar only from the flowers that have some. "
      2-3 Bee Conditionals 13: "Buralarda ne çok şey oluyor!\\\r\n\\\r\nÖğrendiklerinizi
        kullanarak tüm nektarı toplayın ve bal yapın."
      2-3 Bee Conditionals 14: "Haydi öğrendiklerimizi bir araya getirelim!\\\r\n\\\r\nÖğrendiklerini
        kullanarak en az blokla sadece nektar olan çiçeklerden nektar topla. Sonunda
        bal yapmayı da unutma."
      2-3 Bee Conditionals 15: "Bu merdiven basamağı deseni tanıdık gelmiş olmalı.\\\r\n\\\r\nEn
        az sayıda blokla sadece nektar olan çiçeklerden nektar toplayabilir misiniz?"
      2-3 Bee Conditionals 2: "Merhaba! Ben aç bir arıyım. \\\r\nBana en az sayıda
        blokla çiçeklerden nektar toplamak için yardım et."
      2-3 Bee Conditionals 3: "Tüm şu nektara bak!\\\r\n\\\r\nEn az sayıda blokla
        çiçekteki tüm nektarı toplayıp bal yapmama yardım et.  "
      2-3 Bee Conditionals 5: "Bu sihirli mor çiçekler değişiyor! \\\r \\\r Bulmacayı
        her çalıştırdığında mor çiçeklerde 1 veya 0 nektar olabilir.. Ama kodu çalıştırmadan
        bilemezsin! \\\r \\\r Eğer nektar yoksa nektar toplamamalısın. \\\r\n 'Eğer'
        bloğu kullanarak nektar miktarının 1 e eşit olup olmadığını gör."
      2-3 Bee Conditionals Assessment 1: "**Değerlendirme:** Tüm nektarları topla.
        \ \\\r\nNektarı olmayan mor çiçeklerden nektar toplamamaya dikkat et."
      2-3 Bee Debugging 1: Bu bloklar gerçekten beni dinlemiyor. Bütün nektarları
        toplamak için hata(ları) düzelt.
      2-3 Bee Debugging 10: "Bu bloklar gerçekten beni dinlemiyor.\\\r\n Tüm nektarları
        toplamak ve balları yapmak için hata(lar)'ı düzelt."
      2-3 Bee Debugging 2: "Buradaki hatayı bulabilir misin? \\\r\nTüm nektarları
        toplamak ve balları yapmak için hata(lar)'ı düzelt."
      2-3 Bee Debugging 3: |-
        Ooh, this one stings!

        Fix the error(s) to collect all of the nectar.
      2-3 Bee Debugging 5: "That flower looks tasty! \n\nFix the error(s) to collect
        all of the nectar.\\\nYou can now use both run and step."
      2-3 Bee Debugging 6: |-
        What a sweet challenge!

        Fix the error(s) to collect all of the nectar.
      2-3 Bee Debugging 9: "Burada \"sabırlı\" olmalısın!\\\r\n\\\r\nTüm nektarları
        toplamak ve balları yapmak için bu programdaki bazı şeyleri düzeltmen gerekiyor."
      2-3 Bee Debugging Assessment 1: "\\*\\* Değerlendirme: \\*\\* Şimdi bildiklerini
        gösterme zamanı! \\\r \\\r Tüm nektarı toplamak ve tüm balları yapmak için
        hataları düzelt."
      2-3 Bee Functions 1: "Fonksiyonlar, bir görevi gerçekleştiren kod bloklarıdır.
        \ \\\r\n\\\r\n'2 nektar al' fonksiyonunu kullanarak tüm çiçeklerden nektarları
        topla."
      2-3 Bee Functions 10: "Bulmacayı her çalıştırdığında mor çiçeklerdeki nektar
        sayıları 1 ya da 0 nektar olarak değişmektedir.  \\\r\n\\\r\nSadece nektar
        bulunan mor çiçeklerden nektar toplayan bir fonksiyon oluştur."
      2-3 Bee Functions 2: "Fonksiyonlar, bir görevi gerçekleştiren kod bloklarıdır.\\\r\n\\\r\nBir
        seferde 5 nektar almak için ''5 al' fonksiyonunu kullan."
      2-3 Bee Functions 4: "''taşı ve nektarı al'' arıyı döndürür ve nektarı toplar,
        sonra arıyı başladığı noktaya döndürür. \\\r\n\\\r\nTüm nektarları toplamak
        için fonksiyonu kullan."
      2-3 Bee Functions Assessment 1: "**Değerlendirme:** Her bir çiçekten bal toplamak
        için verilen fonksiyonu kullanın."
      2-3 Bee Functions Assessment 2: "\\*\\* Değerlendirme: \\*\\* ilerleyen ve 3
        bal toplayan sonra da başladığı yere dönen bir fonksiyon yaz."
      2-3 Bee Loops 1: "Bu çiçekler iştah açıcı! \\\r\n\\\r\nEn az blokla her çiçekten
        nektar toplayın."
      2-3 Bee Loops 13: "\\*\\* Değerlendirme: \\*\\* mümkün olan en az sayıda blok
        kullanarak nektarı topla."
      2-3 Bee Loops 3A: Tüm nektarları toplamak için bir döngü kullanabilir misin?
      2-3 Bee Loops 3B: Şimdi tüm nektarları toplamak ve balları yapmak için 'Tekrarla'
        bloğunu kullan.
      2-3 Bee Loops 4: "Çalışkan bir arı! \\\r \\\r \nArının en az sayıda blok ile
        tüm nektarı toplamasını ve bal yapmasını sağlayın."
      2-3 Bee Loops 4A: "Bu bulmacada kaç kere döngü kullanabilirsin? \\\r\n\\\r\nDöngüler
        senin sağ kolun! Bu bulmacayı en az blokla bitirmek için birkaç tane döngü
        kullan."
      2-3 Bee Loops 5: "Bu yolun şekli diğerlerinden farklıdır. \\\r \\\r Mümkün olduğunca
        az blok kullanarak tüm nektarı topla?"
      2-3 Bee Loops 7: Ne kadar harikulade bir çiçek tarlası! Arının her bir çiçeğe
        gitmesini sağla. 7 bloktan daha az blokla gidebilir mi?
      2-3 Bee Loops 8: "Bu mor çiçekler her bulmacayı yeniden başlattığınızda farklı
        nektarlara sahip. \\\r\n\\\r\n Tüm nektarları toplamak için 'nektar süresince'
        (while nectar) döngüsünü kullan. \\\r\n\\\r\nBu döngü'' nektar>0'' şartını
        sağladığı sürece çalışacak."
      2-3 Bee Loops Assessment 1: "**Değerlendirme:** - Bir 'süresince' döngüsü kullanarak
        bu çiçekteki tüm nektarları toplayın."
      2-3 Maze 1: 'Yaramaz domuzu yakalamak için bana yardım edebilir misin? Birkaç
        ''ilerle'' bloğunu ''çalıştığı zaman'' bloğunun altına sıralayın ve ''çalıştır''
        a basın. '
      2-3 Maze 12: "Aniden, büyülü bir blok göründü!  'Tekrarla' bloğu ile içindeki
        kodu tekrar tekrar çalıştırabilirsiniz. \\\r\n \\\r 'Tekrarla' bloğu içine
        sadece bir 'İlerle' bloğu koyarak domuza ulaşabilir misin?"
      2-3 Maze 13: Domuza ulaştır. Sadece bir adet 'İlerle' bloğu kullanabilirsin
      2-3 Maze 15: Domuza ulaşmak için daha az blok kullanarak iki döngü kullanın.
      2-3 Maze Loops 18: "Beni en az blokla ayçiçeğine götür! \\\r\n\\\r\nGerekli
        olan kodu azaltmak için bir tekrar döngüsü içine bir tane daha yerleştir."
      2-3 Maze Loops 19: " Haydi bunu bir başka seviyeye taşıyalım! \\\r\nEn az blokla
        beni ayçiçeğine götürmek için döngüleri kullan."
      2-3 Maze Loops Assessment 1: "**Değerlendirme:** Beni ayçiçeğine sadece 5 blok
        kullanarak götür! "
      4-5 Artist 1: 'Kutumu çizmemi tamamlamak için yardım et.(Her doğru parçası 300
        piksel uzunluğundadır) '
      4-5 Artist 11: "Complete the green lines.  \n\nThe lines are 300 pixels long
        and 15 pixels apart."
      4-5 Artist 2: Kareyi tamamlamak için döngü kullanabilir misiniz?
      4-5 Artist 3: Bu dikdörtgen çiçekliğin çevresi 600 birim.  Uzun kenar 200 birim.
        En az komutla bu dikdörtgeni çizin.
      4-5 Artist 3.5: "Bu kodu çalıştırsan ne olacağını dene (\"Çalıştır\" düğmesi
        ile deneyebilirsin). \\\r\n\\\r\nSonra bu kodu çizimi tamamlamak için gerektiği
        kadar tekrarla!"
      4-5 Artist 4: "Bir çemberde kaç derece vardır? \\\r\n\\\r\nBlokları tekrarlayarak
        bir renk çemberi oluşturun."
      4-5 Artist 5: Zombinin çizimi tamamlaması için önceden hazırlanmış döngüde "???"
        yerine ne kullanabiliriz?
      4-5 Artist 6: Eşkenar üçgenin açıları 60, 60, 60 derecedir. Her kenarı 200 pikseldir.
        Çizimi tamamlayın.
      4-5 Artist 7: Bu dik üçgenin açıları, 30, 60 ve 90 derecedir. Eğimli tarafının(hipotenüsün)
        uzunluğu 200 piksel yüksekliğindedir. Çizimi tamamlayın.
      4-5 Artist 8: "The halfway line on a soccer field is _perpendicular_ to the
        sidelines.\\\nThis rectangle has a perimeter of 800 pixels total, and it is
        240 pixels long. How tall is it?   \n\nDraw the bounds and the halfway line."
      4-5 Artist 9: Tasarımın simetrik olması için diğer yarsını çizin. Üçgenler eşkenar
        ve kenar uzunlukları 50 piksel uzunluğunda.
      4-5 Artist Assessment 1: "**Değerlendirme:**Döngü kullanarak bir eşkenar üçgen
        çizin. Her kenarı 300 piksel olsun."
      4-5 Artist Free Draw 1: Serbest çizim! Hayal gücünüzü kullanarak çizin.
      4-5 Artist Patterns 1: |-
        Draw this square using a loop.

        Each side is 20 pixels long.
      4-5 Artist Patterns 10: "Bu kod altıgenin iki satırını çizer - bütün bir balpeteği
        çizmek için tüm kodu 4 kere döndür. \\\r\n\\\r\nSanatçının ekranın dışına
        çıkmasına engel olmak için en dıştaki döngüde 120 piksel geri atlamalı."
      4-5 Artist Patterns 11: Yarım daire çizmek için bu döngüyü kaç kez tekrarlaman
        lazım?
      4-5 Artist Patterns 12: "Bu döngüyü kopyalayıp sağa dön yerine sola dön seçerseniz
        ne olur?\\\r\n\\\r Bu dalgayı çizmek için işlemleri tekrarlayabilir misiniz?"
      4-5 Artist Patterns 13: "Şimdi fotoğraf çerçevesini tamamlamak için bütün kodu
        dört kere döndür. Köşelere dikkat et - sadece 90 derece dönmek yetmez!\\\r
        \\\r\nEğer 60 kere 3 derece dönüş yarım daire yapıyorsa, hangi kod blokları
        köşeler için gereken çeyrek daireyi yapar?"
      4-5 Artist Patterns 2: Eğer kare döngünüzü bir başka döngünün içerisine yerleştirirseniz,
        biz buna iç içe döngü diyoruz. 15 karenin yan yana hizalandığından emin olmak
        için dış döngüye ne eklemen gerekir?
      4-5 Artist Patterns 3: Şimdi bir düzey daha derin gidelim! Biz bütün bu kod
        bloğunu bir döngü içine koyun fakat artist tekrar başa dönsün. Hangi kod bloklarını
        en dıştaki döngü sonunda yerleştirmeliyim?
      4-5 Artist Patterns 4: Bu elmasın 50 piksel kenarları ve 120 ve 60 derece açıları
        vardır. Döngü kullanarak çiziniz.
      4-5 Artist Patterns 5: "Döngü ile 6 baklava şekli çizin. \\\r\n \\\r \nBaklava
        şekli kodunu değiştirerek 3 kere tekrarlayacağımıza 2 defa tekrarladık. Sizce
        neden?"
      4-5 Artist Patterns 6: Bu elması tam çizmek için kaç kere tekrar etmen gerekiyor?
      4-5 Artist Patterns 7: Şimdi bir önceki bulmacayı değiştirerek bu karmaşık deseni
        oluşturalım. Elmasların nasıl kesiştiğine dikkat edelim. "geriye atla" bloğunu
        100 yerine 50 piksel yap. Şimdi artist ikinci ileri atla bloğunda ne kadar
        ilerlemeli?
      4-5 Artist Patterns 8: Bu altıgeni 40 piksellik kenarlar ile 60 derecelik dönüşler
        kullanarak çizebilir misin.
      4-5 Artist Patterns 9: "Şimdi kodu 3 kez tekrarla ve bütün satırı çiz.\\\r\n\\\r\nHer
        bir altıgen en sol noktadan en sağ noktaya 80 piksel genişliğindedir."
      4-5 Artist Patterns 9.5: Şimdi döngü kullanarak iki altıgen çizelim. İkinci
        satırın sağa doğru kayık olduğuna dikkat et.
      4-5 Artist Patterns Free Play: Eğlence zamanı - kendi kendine desen yapmayı
        dene!
      4-5 Bee Conditionals 1: "This cloud is blocking my view! \n\nCheck to see if
        there's a flower under the cloud, and only get nectar if there's a flower.\\\nBe
        careful, it can change!"
      4-5 Bee Conditionals 2: "More clouds! \n\nCheck underneath every cloud to see
        if it is hiding a flower before you get nectar.  \n\nRemember: Not all clouds
        hide the same thing!"
      4-5 Bee Conditionals 4: "Sometimes this cloud covers a flower, and sometimes
        it covers a honeycomb! \n\nUse the `if/else` block to collect nectar only
        if it is a flower.\\\nElse, make honey (because it is a honeycomb)."
      4-5 Bee Conditionals 5: Bulutların altında çiçek yada petek olabilir. Eğer/değilse
        bloğu kullan. Eğer çiçek ise polen topla değilse bal yap (çünkü çiçek değilse
        petektir).
      4-5 Bee Conditionals 6: "Bu çiçekte ne kadar nektar var emin değilim ama 1,
        2 veya 3 nektar olduğunu biliyorum. \\\r \\\r koşullu blok ('eğer' ve/veya
        ' Eğer/değilse') kullanarak olduğu kadar nektar al. \\\r \\\r, Nektar miktarı
        bulmacayı her çalıştırdığınızda değiştirebilir!"
      4-5 Bee Conditionals 7: Mor çiçeklerde, 2, 3 veya 1 nektar olabilir. "mor çiçeği
        kontrol et" fonksiyonunu kullanarak nektarları toparla.
      4-5 Bee Conditionals 8: "'çiçeğe bak bal yap' için fonksiyonu yaz. \\\r\n\\\r\nYazdığın
        fonksiyon, mor çiçeğin 1,2 veya 3 nektara sahip olup olmadığını kontrol etmeli
        ve bütün nektarları toplamalı.\\\r\nSonra, ilerle ve bal yap."
      4-5 Bee Conditionals Assessment 1: "**Değerlendirme:** Bu bulut ya bir nektarı
        olan bir çiçek ya da bir bala ihtiyacı olan bir bal peteği saklıyor..  \\\r\n\\\r\n`nektar
        al veya bal yap` fonksiyonunu tamamla, sonra nektar ya da bal toplamak için
        bu fonksiyonu kullan.. \\\r"
      4-5 Bee Debugging 1: "Bu bloklar kafamı karıştırıyor.  \\\r\n\\\r\nDüzeltmeme
        yardımcı olabilir misin?"
      4-5 Bee Debugging 6: "Mor çiçekteki nektarı miktarı bulmaca her çalıştırıldığında
        değişir. \\\r \\\r Tüm çiçeklerden tüm nektarı almak için blokları düzelt."
      4-5 Bee Debugging Assessment 1: 'Değerlendirme: Kodu Düzelt.'
      4-5 Bee Nested Loops 2: 'Her çiçekteki bütün nektarı topla. İç içe döngü kullan. '
      4-5 Bee Nested Loops 4: 'Tüm çiçeklerdeki nektarları topla ve peteklere bal
        yap. İç içe döngü kullan. '
      4-5 Bee Nested Loops Assessment 1: Değerlendirme - Döngü kullanarak tüm nektarı
        topla ve tüm balları yap.
      4-5 Maze 7: Değerli kişi. Ben zombi. Ay... çiçeğine... ulaşmalıyım. Bulmacayı
        11 bloktan daha az blokla tamamlayabilir misin?
      4-5 Maze 9: Kadar tekrarla bloğu ile döngü oluştur.
      4-5 Maze Assessment 1: "\\*\\* Değerlendirme: \\*\\* mümkün olduğunca az blokları
        kullanarak ayçiçeği al."
      4-5 Maze Conditionals 1: Zombi ayçiçeğine ulaşana kadar tekrarla bloğunu kullan.
      4-5 Maze Conditionals 10: Daha karmaşık bir labirenti sadece 3 blok ekleyerek
        çözmeme yardımcı olur musun? Eğer doğru yaptıysan, bu kıvrımlı yolda uzunluğu
        ne olursa olsun yürüyebilirim!
      4-5 Maze Conditionals 2: Zombi ayçiçeğine ulaşana kadar tekrarla bloğunu kullan.
      4-5 Maze Conditionals 3: 'Use the `if` block to help me decide when to turn. '
      4-5 Maze Conditionals 4: Tamam, bu sadece son bulmaca gibi ama "Eğer" bloğu
        ile "Tekrarla" bloğunu nasıl birlikte kullandığını hatırlaman gerekiyor.
      4-5 Maze Conditionals 5: "\"Me want sunflower!\"  \n\nUse an `if` statement
        to get the zombie to the sunflower with the fewest number of blocks."
      4-5 Maze Conditionals 6: Ayçiçeğini istiyorum! Sadece bir "Eğer" bloğu kullanarak,
        en az sayıda blok ile oraya ulaşmamı sağla.
      4-5 Maze Conditionals 7: Bu bulmaca çözümü çok farklı değil, Zombilerden lerden
        uzak dur!
      4-5 Maze Conditionals 8: "' eğer/değilse' bloğu bir koşulu denetler ve bir işi
        yada ötekini yapar. \\\r \\\r bu yeni bloğu bana ayçiçeği almak için kullanın."
      4-5 Maze Conditionals 9: "Pratik için bir bulmaca daha if/else' bloklu! \\\r
        \\\r parmak ile üzerinden geçerek  ilk denemede çözebilecekmisin."
      4-5 Maze Conditionals Assessment 1: 'Değerlendirme: Kadar tekrarla ve Eğer/değilse
        bloklarını kullanarak beni ayçiçeğine ulaştır.'
      4-5 Nested Loops 1: 'Bu üçgenleri çizmek için kodu tamamlayın. İlki sizin için
        yapıldı. İpucu: 3 üçgeni toplam 360 derece dönerek yapılır.'
      4-5 Nested Loops 11: İç içe döngü kullanarak 10 kareyi tamamlayın. Her bir kare
        30 pikseldir.
      4-5 Nested Loops 12: İç içe döngü kullanarak 36 tane üçgen çizebilir misin?
      4-5 Nested Loops 2: 'Bu döngüyü başka bir döngü içine koyarak 10 üçgen çizin.
        Buna iç içe döngü denir.  '
      4-5 Nested Loops 3: Verilen kodu başka bir döngü içine koyarak bir güneş oluştur.
        Bu güzel şekli oluşturmak için, her dönüşten önce üçgenin kenar uzunluğu kadar
        ileri atlamalısın.
      4-5 Nested Loops 5: Bir yel değirmeni oluşturmak için verilen kodu döngü içinde
        kullan.
      4-5 Nested Loops 6: Üçgen kodunu döngüde kullanarak altıgen çizebilir misin?
      4-5 Nested Loops 7: "Loop this design 10 times. \n\nHow much do you have to
        turn each time you loop?"
      4-5 Nested Loops 8: "Loop this shape 6 times. \n\nHow much do you have to turn
        each time you loop? "
      4-5 Nested Loops 9: Timsahın ağzına dişleri çiz!
      4-5 Nested Loops Assessment 1: 'Değerlendirme: Tasarımı tamamlamak için iç içe
        döngüler kullan.'
      4-5 While Loops 1: Beni deliğe götür ve "doldur" bloğunu kullanarak, deliği
        iki kürek dolusu toprak ile doldur.
      4-5 While Loops 2: Beni toprak yığınına ulaştır ve "kaldır" bloğu ile 5 kürek
        toprak at.
      4-5 While Loops 3: "Bu bulmacayı tamamlamak için mümkün olduğunca az blok kullanın!
        \ \\\r \\\r beni yığına götür, toprağı al ve çukura götür ve çukuru doldur."
      4-5 While Loops 4: "Wow, look at that! \n\nI don't know how many shovelfuls
        of dirt this hole needs.\\\nCan you write a program that keeps using the `fill`
        block until the ground is even?  "
      Alien Defender: "\\*\\* Proje Fikri \\*\\*: Play Lab'da bir savunma oyunu yap!"
      AppLab Intro 7 - Change Screen Color: "<div style=\"float:right\">\r\n\\t<img\nsrc=\"https://images.code.org/bf9b1fb57751fa90c9b786339914ad70-image-1508521068798.34.54\nAM.png\"
        style=\"height:150px\"> \r\n</div>\r\n\r\n**Hedef:** Ekranı yeşil yapın.\r\n\r\n**Nasıl:**
        Bir `setProperty()` bloğunda sürükleyin. Ekranın `\"background-color\"` ını
        `\"green\"` e ayarlamak\niçin açılır listeleri kullanın. Ardından \"Çalıştır\"
        ı tıklayın.\r\n\r\n**Takıldınız mı? Buraya tıklayınız:** ![expandable](https://images.code.org/3b5e70522b02867a1df1d5b5e481785e-image-1511279858395.gif)"
      AppLab Intro 7 - Change Text 2: "<div style=\"float:right\">\r\n<img\nsrc=\"https://images.code.org/39ead723fbd2b047aa2d1e401cbfec8a-image-1506545619076.34.29\nPM.png\"
        style=\"height:200px;\">\r\n</div>\r\n\r\n**Hedef:** Metni daha büyük ve mavi
        yapın.\r\n\r\n**Nasıl:** İki satırlık bir koda ihtiyacınız olacak. `\"label1\"`
        e `\"font-size\"` a `80` ve `\"text-color\"` a `\"blue\"` verin.\r\n\r\n**Takıldınız
        mı? Buraya tıklayınız:** ![expandable](https://images.code.org/2d5d46a03082af3b01847aad6602e2ea-image-1511280140482.gif)"
      AppLab Intro 7 - Full Text: "<div style=\"float:right\">\r\n<img\nsrc=\"https://images.code.org/1e81d5bcdd69172f4127de55d045225f-image-1507565161167.05.19\nAM.png\"
        style=\"height:200px\">\r\n</div>\r\n\r\n**Hedef:** Butonları\n`\"kırmızı\"`
        ve `\"mavi\"` yapın. Sonra büyük turuncu etiketteki yazıyı değiştirin. \r\n\r\n**Nasıl:**\n\r\n*
        Öğelerin `\"kimliklerini\"` görmek için üzerlerinde gezinebileceğinizi unutmayın
        .\r\n* Butonların \n`\"arka plan rengini\"` `\"kırmızı\"` ve `\"mavi\"` olarak
        ayarlayın .\r\n*\nEtiketin `\"yazı\"` özelliğini istediğiniz gibi ayarlayın,
        örneğin `\"Uygulamama \nHoş Geldiniz!\"` .\r\n\r\n**Takıldınız mı? Buraya
        tıklayın:**![expandable]\n(https://images.code.org/4bf99e7352e7c17a5bf73ced80171f6a-image-1511280628092.gif)"
      AppLab Intro 7 - onEvent intro: "<img src=\"https://images.code.org/3d8c8487ea669563d3401c0009cd9462-image-1511281194897.gif\"\nstyle=\"float:right;height:200px\">\\\r\n\\\r\n**Hedef:**\nEkran
        mavi renkle başlayacak. \"Green-ify\" butonuna tıkladığınızda yeşil renkte
        olacak şekilde kod ekleyin.\\\r\n\\\r\n**Nasıl:**\nEkranın `\"background-color\"`
        'ını `\"green\"` 'e olarak ayarlayan `onEvent()` 'e kod ekleyin.\\\r\n\\\r\n**Takıldınız
        mı? Buraya tıklayınız:** ![expandable](https://images.code.org/5ddf6b129bc04b79839b3661ccef788b-image-1511281012076.gif)"
      AppLab Intro 7 - onEvent twoButtons: "<img src=\"https://images.code.org/158c9258bfff18c2177440f201446c47-image-1507566793890.gif\"\nstyle=\"float:right;height:200px\">\\\r\n\\\r\n**Hedef:**
        Bu el feneri uygulamasını bitirmeye yardım edin. \n\"On\" butonu zaten ekranı
        beyaza çevirir. Uygulamayı çalıştırın ve deneyin. \nDaha sonra \"Close\" butonu
        ekranı tekrar siyah yapan kodu yazın.\\\r\n\\\r\n**Nasıl:**\nEkranın `\"background-color\"`
        'ını `\"black\"` ve `\"text-color\"` ını `\"white\"` olarak \nayarlayan boş
        `onEvent()` içine kod ekleyin.\\\r\n\\\r\n**Takıldınız mı? Buraya tıklayınız:**
        ![expandable](https://images.code.org/020b1d9b465aaf35967a528a92961c13-image-1511281772276.gif)"
      AppLab Intro 7 - playSound: "<img src=\"https://images.code.org/28176329f15dea1a863564b069e72aab-image-1511282702534.44.52\nAM.png\"
        style=\"float:right;height:200px\">\\\r\n\\\r\n**Hedef:** Bu ses kartı neredeyse
        bitti! \nNasıl çalıştığını görmek için çalıştırın. Ardından, son butona resim,
        metin ve ses ekleyin.\\\r\n\\\r\n**Nasıl:**\\\r\n\\*`\"button4\"` 'ün \"id\"
        'sini ayarlayın ve programa bir `onEvent()` ekleyin. `onEvent()` 'in \niçine
        bir `playSound()` sürükleyin ve kütüphaneden bir ses seçin.\\\r\n\\*Butonun
        `\"image\"` özelliğini değiştirmek için bir `setProperty()` (`onEvent()` 'nizin
        dışında) ekleyin. \nÜçüncü açılır menüyü kullanarak bir resim seçin.\\\r\n\\*Butonun
        `\"text\"` 'ini değiştirmek için bir tane daha`setProperty()` ekleyin.\\\r\n\\\r\n**Takıldınız
        mı? Buraya tıklayınız:** ![expandable](https://images.code.org/a3fdcb8954c5e8d585bef64df1ec5b1a-image-1511285408512.gif)"
      AppLab Intro 7 - thisOrThatAddButton: "<img src=\"https://images.code.org/3feb07aaf3d933b094647479673a3293-image-1508373443129.37.00\nPM.png\"
        style=\"float:right;height:200px\">\\\r\n\\\r\n**Hedef:** `\"rightButton\"`'un
        bir `\"id\"` 'si ile ekranda\n\"Doğru!\" yazan ikinci bir buton ekleyin.\\\r\n\\\r\n**Nasıl:**\nTasarım
        modunda yeni bir buton sürükleyin. Konumlandırın ve yeniden boyutlandırın.
        \nSonra `\"id\"`, `\"text\"`, `\"background color\"` ve `\"font size\"` 'ı
        ayarlayın.\\\r\n\\\r\n**Takıldınız mı? Buraya tıklayınız:** ![expandable](https://images.code.org/7035ad0445984cf889b159cf5682e35a-image-1508383186447.gif)"
      AppLab Intro 7 - thisOrThatAddScreen: "<img src=\"https://images.code.org/f102a1363aa575cc530379d9a4ee378c-image-1508382068883.00.59\nPM.png\"
        style=\"float:right;height:200px\">\\\r\n\\\r\n**Hedef:** `\"rightScreen\"`
        olarak çağrılan yeni bir ekran yaratın. \"You went right!\" diyecek bir metin
        etiketi ekleyin.\\\r\n\\\r\n**Nasıl:**\nTasarım modunda yeni bir ekran elementi
        sürükleyin. `\"id\"` 'sini `\"rightScreen\"` olarak değiştirin. \nDaha sonra
        ekranda bir etiket sürükleyin ve metni \"You went right!\" olarak değiştirin.
        \\\r\n\\\r\n**Takıldınız mı? Buraya tıklayınız:** ![expandable](https://images.code.org/11cf186acb0453cf9ec46929b763f568-image-1508383646159.gif)"
      AppLab Intro 7 - thisOrThatPersonalize: "<a href=\"https://studio.code.org/projects/applab/gx21oCP10-V4GlNMlSpwdQ\"\ntarget=\"_blank\"><img
        src=\"https://images.code.org/ba6c0db48cc1c3c28c135f1c2f67f361-image-1511244802597.10.18\nPM.png\"
        style=\"float:right;height:200px\"></a>\\\r\n<a href=\"https://studio.code.org/projects/applab/SM_edi1btguZZiQaTtUT9Q\"\ntarget=\"_blank\"><img
        src=\"https://images.code.org/284b55697d786e0cd64350d0967c5dda-image-1511244806272.11.05\nPM.png\"
        style=\"float:right;height:200px\"></a>\\\r\n<a href=\"https://studio.code.org/projects/applab/SMvVhgBX_GGyxg5LSEMrgg\"\ntarget=\"_blank\"><img
        src=\"https://images.code.org/445181ff8d84861919512ba9b8e09586-image-1511244809994.12.40\nPM.png\"
        style=\"float:right;height:200px\"></a>\\\r\n\\\r\n**Hedef:** Bu projeyi genişleterek
        kendi uygulamanızı oluşturun. Sonrasında biriyle \"Paylaşın\"!\\\r\n\\\r\n**Nasıl:**\nOluşturmak
        istediğiniz ilginç bir türün ne olduğuna karar verin. Sonrasında, uygulamanıza
        \ndaha fazla ekran, buton, metin, ses ve kullanıcı etkileşimi ekleyerek bunu
        oluşturun. \nAraç kutusunda, deneyimleyebileceğiniz bir kaç blok daha var.
        İşiniz bittiğinde kendinize veya bir arkadaşınıza göndermek için \"Paylaş\"
        ı tıklayın!\n\\\r\n\\\r\n\n<details><summary><b>Kendi Macera Fikrinizi Seçin</b></summary>\r\n\r\nNasıl
        çalıştığını görebilmek için bu <a href=\"https://studio.code.org/projects/applab/SMvVhgBX_GGyxg5LSEMrgg\"\ntarget=\"_blank\">Örnek
        Kendi Macere Seçimi Uygulaması</a>'i deneyin. İşte size kendi öykünüzü bulmanıza
        yardımcı olacak bazı fikirler.\r\n\r\n<li>En sevdiğiniz karakterinizle \nilgili
        gerçek ya da kurgusal bir macera yapın.</li>\r\n<li>En sevdiğiniz kitap, film
        ya da \nkendi yaratılış hikayenizi anlatan bir macera yapın.</li>\r\n<li>Bir
        sürü beklenmedik sapma veya zor \nbir ahlaki tercih olan bir macera yapın.</li>\r\n<br>\r\n</details>\r\n\r\n<details><summary><b>Tebrik
        Kartı Fikirleri</b></summary>\r\n\r\nNasıl çalıştığını görebilmek için bu
        <a href=\"https://studio.code.org/projects/applab/SM_edi1btguZZiQaTtUT9Q\"\ntarget=\"_blank\">Örnek
        Tebrik Kartı Uygulaması</a>'i deneyin. İşte size kendi kartınızı bulmanıza
        yardımcı olacak bazı fikirler.\r\n\r\n<li>Doğum günü, tatil veya yaklaşan
        diğer \nözel günleri düşünün. Kutlamak için bir kart yapın!</li>\r\n<li>Sevdiğiniz
        biri için teşekkür kartı oluşturun.</li>\r\n<li>Yaklaşan bir etkinlik için
        davetiye oluşturun.</li>\r\n<br>\r\n</details>\r\n\r\n<details><summary><b>Örnek
        Kişilik Teseti</b></summary>\r\n\r\nNasıl çalıştığını görebilmek için bu <a
        href=\"https://studio.code.org/projects/applab/gx21oCP10-V4GlNMlSpwdQ\"\ntarget=\"_blank\">Örnek
        Kişilik Teseti Uygulaması</a>'i deneyin. İşte size kendi kartınızı bulmanıza
        yardımcı olacak bazı fikirler.\r\n\r\n<li>Bir kişinin sevebileceği, örneğin
        bir yemek, bir takım, \nbir kitap veya bir yer gibi bir testte bulunun.</li>\r\n<li>Yanıtlarını
        temel alarak \"geleceği öngören\" bir test yapın.</li>\r\n<li>İnsanlara sert
        bir karar vermeleri için bir test yapın.</li>\r\n\r\n</details>"
      AppLab Intro 7 - thisOrThatSetScreen: "<img src=\"https://images.code.org/acd1acf659a2504d38ff80256d8e870f-image-1508374065550.com-crop\n(1).gif\"
        style=\"float:right;height:200px\">\\\r\n\\\r\n**Hedef:** Kullanıcı `\"rightButton\"`
        'a tıkladığında\nekran `\"rightScreen\"` 'e değiştirir.\\\r\n\\\r\n**Nasıl:**\nTasarım
        modunda \"Doğru!\" butonu için programınıza yeni bir `onEvent()` ekleyin.\nİçine,
        Ekranları `\"rightScreen\"` 'e değiştiren bir `setScreen ()` bloğu ekleyin.\\\r\n\\\r\n**Takıldınız
        mı? Buraya tıklayınız:** ![expandable](https://images.code.org/64dfec0d9f9c2fc237abb90ef6a72f0e-image-1508384166252.gif)"
      CDU U6 Playground Sound Board: "# Ses Kartı 2.0\\\r\n\n\\\r\nArtık sesleri,
        notaları ve şarkıları çalabilirsiniz! Bu yeni bilgiyle, kartlarınızı bir ses
        kartı haline getirebilirsiniz.\\\r\n\\\r\nAlet kutusundaki tüm zil ve yönlendirilmiş
        ilgili blokları elinizin altındadır. Hangi güzel şeyleri bulabileceğinizi
        görün!\\\r\n\\\r\n\n# Bunu Yapın\\\r\n\n\\\r\n\\*Her bir etkinlikte benzersiz
        bir ses veya şarkı çalmak için buton ile ilgili tüm etkinlikleri kullanın
        (yukarı, aşağı).\\\r\n\\*Daha fazla ses / şarkı çalmak için kullanabileceğiniz
        başka etkinlikler var mı?"
      CDU U6 Playground Sound Board_2018: "# Ses Kartı 2.0\\\r\n\n\\\r\nArtık sesleri,
        notaları ve şarkıları çalabilirsiniz! Bu yeni bilgiyle, kartlarınızı bir ses
        kartı haline getirebilirsiniz.\\\r\n\\\r\nAlet kutusundaki tüm zil ve yönlendirilmiş
        ilgili blokları elinizin altındadır. Hangi güzel şeyleri bulabileceğinizi
        görün!\\\r\n\\\r\n\n# Bunu Yapın\\\r\n\n\\\r\n\\*Her bir etkinlikte benzersiz
        bir ses veya şarkı çalmak için buton ile ilgili tüm etkinlikleri kullanın
        (yukarı, aşağı).\\\r\n\\*Daha fazla ses / şarkı çalmak için kullanabileceğiniz
        başka etkinlikler var mı?"
      CDU U6 Playground Sound Board_2019: "# Ses Kartı 2.0\\\r\n\n\\\r\nArtık sesleri,
        notaları ve şarkıları çalabilirsiniz! Bu yeni bilgiyle, kartlarınızı bir ses
        kartı haline getirebilirsiniz.\\\r\n\\\r\nAlet kutusundaki tüm zil ve yönlendirilmiş
        ilgili blokları elinizin altındadır. Hangi güzel şeyleri bulabileceğinizi
        görün!\\\r\n\\\r\n\n# Bunu Yapın\\\r\n\n\\\r\n\\*Her bir etkinlikte benzersiz
        bir ses veya şarkı çalmak için buton ile ilgili tüm etkinlikleri kullanın
        (yukarı, aşağı).\\\r\n\\*Daha fazla ses / şarkı çalmak için kullanabileceğiniz
        başka etkinlikler var mı?"
      CSD Problem Solving Process Video: |-
        ## Dikkate alınması gereken sorular

        -   Son derste problem çözme sürecini nasıl takip ettiniz?
        -   Bu problemi günlük hayatınızda nasıl kullanabilirsiniz?
      CSD U1 - PixFilter 1x1 intro: |-
        # 3 Bit Colors

        Each pixel is a square on a screen that emits light. Each pixel can have a certain number of bits assigned to it, and bits per pixel determine the colors that can be rendered.

        In this tool we're using 3 bits to define the one large black pixel. The first bit affects the red tint. The second bit affects the green tint. The third bit affects the blue tint.

        # Do This

        -   Click the "Run" button to start the widget
        -   Click on the light bulbs to turn on or off each color and see what happens to your pixel
        -   See how many different colors you can create with just three bits
        -   Write down the binary associated with each color you come up with
      CSD U1 - PixFilter Filter Intro: |-
        # Filtering Pixels

        If you've ever used Instagram you've probably encountered an image filter. Image filters read in each pixel, process it in some way, and the return the filtered pixel. In this tool we're going to start by filtering just a single pixel before moving on to a full image.

        # Do This

        -   Try changing the color drop downs in the Filter section
        -   Click on the top row of lightbulbs in the Diagram section to see how the filter will convert the input (top bulbs) to the output (bottom bulbs)
        -   Look at how the numbers in the Binary section reflect changes to the colors
        -   Based on how the bits change, can you formulate what replace is doing? Talk to your partner and see if you can figure it out.
        -   Complete the Level 2 table in your Activity Guide
      CSD U1 - PixFilter Filter Revisit: |-
        # Combining Filters

        Now that you've played with filtering a single color channel, it's time to see what happens if we filter more than one color.

        # Do This

        -   Using the color dropdowns in the filter section, build a filter that changes the value of more than one color channel
        -   Click on the top row of lightbulbs in the Diagram section to see how the filter will convert the input (top bulbs) to the output (bottom bulbs)
        -   Look at how the numbers in the Binary section reflect changes to the colors
        -   Complete the Level 4 table in your Activity Guide
      CSD U1 - PixFilter FreePlay: |-
        # Free Play

        Do as you will, make something awesome
      CSD U1 - PixFilter Mario: |-
        # Combining Filters

        Sometimes you'll need to filter more than one pixel to get the color change that you want.

        # Do This

        Check out Mario, he's lookin' pretty good in his red hat and overalls. Your job it to set up the filter so he looks like Luigi, with a green hat and overalls.

        -   First, determine which bit(s) needs to change in order to the change you want
        -   Once you've figured out which bit needs changing, set the filter dropdown appropriately
        -   After you've got the filter working so that, try to come up with other filters that change _only_ his hat and overalls - how many different clothing colors can you come up with?

        _How many tries did it take you to find the right filter?_
      CSD U1 - PixFilter Mushroom: |-
        # Filtering Images

        Now that we've seen how a single pixel can be filtered to change its color, let's try applying a filter to an image made of multiple pixels. The filter you create will be applied to each pixel in the image - and you still have the light bulbs available to experiment with how your filter will work with individual colors.

        # Do This

        Here's a picture of a red mushroom - you're going to try and turn it into a yellow mushroom.

        -   First, determine which bit needs to change in order to turn red into yellow
        -   Once you've figured out which bit needs changing, use the filter dropdowns to make all of the red areas turn yellow
        -   After you've got the filter working so that the red has turned yellow, see if you can come up with filters that turn the mushroom other colors

        _How many tries did it take you to find the right filter?_
      CSD U1 - PixFilter UnFilter: |-
        # UnFiltering

        Bit filters can be used to _undo_ filtering as well. Here's an image of a bird that's been filtered from it's original colors. Can you get it back to normal?

        # Do This

        <img src="https://images.code.org/c15636bda16e8792c59ac955332e37a5-image-1471372091393.22.56.png" style="float:right; width: 200px"/>
        Here's what our bird should look like. Use the filter to get him back to normal.

        -   Decide which colors (and so which bits) you need to change. You might need to write your thoughts with pencil and paper.
        -   Once you know which bits need changing, set the filter dropdown appropriately to test your answer
        -   After you've fixed the image, write down both your process and your final filter in the Level 6 section of your Activity Guide

        _How many tries did it take you to find the right filter?_
      CSD U2 CSS explore CSS: "<div style=\"float: right; height:\n250px; width: 40%;
        overflow-y: scroll; margin-left: 20px; font-size:14px\"markdown=\"1\"> \r
        <details>\r\n<summary>** Dosyalar arasında nasıl geçiş yapabilirim? **</summary>
        \r\n Ekran sol tarafındaki menüde bakmak istediğiniz dosyanın adını tıklayın.
        \r \n</details>\r\n</div>\r\n\r\n# Stil Ekleme\r\n\r\n Bu Web laboratuvar
        projesi, sayfasına stil eklemek için yeni bir dil kullanıyor. Eşinizle birlikte
        'index.html' ve 'style.css' dosyalarını keşfedin. Aşağıdaki soruları görüşmek
        üzere hazır olun.\r\n\r\n* Bu yeni dil sayfa yaparken neleri değiştirdi? \r
        \n* Bu dilin HTML'den farkı ne? \r \n* 'index.html' ve 'style.css' dosyaları
        birbirine nasıl bağlı?"
      CSD U2 CSS explore CSS_2018: "<div style=\"float: right; height:\n250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"markdown=\"1\">
        \r <details>\r\n<summary>** Dosyalar arasında nasıl geçiş yapabilirim? **</summary>
        \r\n Ekran sol tarafındaki menüde bakmak istediğiniz dosyanın adını tıklayın.
        \r \n</details>\r\n</div>\r\n\r\n# Stil Ekleme\r\n\r\n Bu Web laboratuvar
        projesi, sayfasına stil eklemek için yeni bir dil kullanıyor. Eşinizle birlikte
        'index.html' ve 'style.css' dosyalarını keşfedin. Aşağıdaki soruları görüşmek
        üzere hazır olun.\r\n\r\n* Bu yeni dil sayfa yaparken neleri değiştirdi? \r
        \n* Bu dilin HTML'den farkı ne? \r \n* 'index.html' ve 'style.css' dosyaları
        birbirine nasıl bağlı?"
      CSD U2 CSS explore CSS_2019: "<div style=\"float: right; height:\n250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"markdown=\"1\">
        \r <details>\r\n<summary>** Dosyalar arasında nasıl geçiş yapabilirim? **</summary>
        \r\n Ekran sol tarafındaki menüde bakmak istediğiniz dosyanın adını tıklayın.
        \r \n</details>\r\n</div>\r\n\r\n# Stil Ekleme\r\n\r\n Bu Web laboratuvar
        projesi, sayfasına stil eklemek için yeni bir dil kullanıyor. Eşinizle birlikte
        'index.html' ve 'style.css' dosyalarını keşfedin. Aşağıdaki soruları görüşmek
        üzere hazır olun.\r\n\r\n* Bu yeni dil sayfa yaparken neleri değiştirdi? \r
        \n* Bu dilin HTML'den farkı ne? \r \n* 'index.html' ve 'style.css' dosyaları
        birbirine nasıl bağlı?"
      CSD U2 Debugging 1: "# Debugging\\\r <div style=\"float: right; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">
        \\\r <details>\\\r <summary>\\*\\* Hata (bug) nedir? **</summary> \\\r Hatalar
        yazılan kodun planlandığı gibi çalışmamasıdır. \\\r</details> \\\r <details>\\\r
        <summary>** Hata ayıklama (debugging) nedir? **</summary> \\\r Hata ayıklama,
        bulma ve düzeltme işlemidir. Hata ayıklama bir problem çözme işlemidir, bu
        nedenle hata ayıklamaya çalışırken problem çözme yöntemini kullanın. \\\r</details>
        \\\r <details>\\\r <summary>** Kod hatalarının bazı örnekleri nelerdir? \\*\\*</summary>
        \\\r Hatalar(bugs) kodun planlandığı gibi çalışmasına engel olan her şey olabilir.
        \ Bazı örnekler, kodu yanlış yere koymak, imla hatası, yanlış yazım, yanlış
        etiket veya parantez kullanmayı unutmak gibi. \\\r kapatmak unutmak yanlış
        yazım</details> \\\r</div> \\\r \\\r Bilgisayar kodu insanlar tarafından yazılmıştır
        ve bütün insanlar hata yapar. İyi bir bilgisayar bilimcisi olmanın bir parçası
        hatalarını bulma ve bunları düzeltmektir. Bilgisayar Biliminde yaptığımız
        yanlışlara \\*\\* hata(bug) \\*\\*, ve bu hataları belirleyip düzeltme işlemine
        \\*\\* hata ayıklama(debugging) \\*\\* denir.  Sonraki iki bölümde, hata ayıklama
        (debugging) becerileri üzerinde çalışacaksınız. \\\r \\\r # Bunu yap\\\r \\\r
        \ <img src=\"https://images.code.org/ed7cb1f2e093b9c36b82bfbf9bbcd76b-image-1474383288840.54.26
        AM.png\" style=\"float:right;border:black solid 5px;width:200px\"> \\\r \\\r
        \\* Web sayfasının koduna bak ve iki hataya sebep olan nedeni arkadaşınızla
        beraber bulun: \\\r \\\\t\\* başlık yeterince büyük değil. \\\r \\\\t\\* Listedeki
        ikinci öğede bir numara yok. \\\r\\* Böylece sonuç sağdaki resimle aynı olana
        kadar bütün hataları (bugs) ayıklayın."
      CSD U2 Debugging 1_2018: "# Debugging\\\r <div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\"> \\\r <details>\\\r <summary>\\*\\* Hata (bug) nedir? **</summary>
        \\\r Hatalar yazılan kodun planlandığı gibi çalışmamasıdır. \\\r</details>
        \\\r <details>\\\r <summary>** Hata ayıklama (debugging) nedir? **</summary>
        \\\r Hata ayıklama, bulma ve düzeltme işlemidir. Hata ayıklama bir problem
        çözme işlemidir, bu nedenle hata ayıklamaya çalışırken problem çözme yöntemini
        kullanın. \\\r</details> \\\r <details>\\\r <summary>** Kod hatalarının bazı
        örnekleri nelerdir? \\*\\*</summary> \\\r Hatalar(bugs) kodun planlandığı
        gibi çalışmasına engel olan her şey olabilir.  Bazı örnekler, kodu yanlış
        yere koymak, imla hatası, yanlış yazım, yanlış etiket veya parantez kullanmayı
        unutmak gibi. \\\r kapatmak unutmak yanlış yazım</details> \\\r</div> \\\r
        \\\r Bilgisayar kodu insanlar tarafından yazılmıştır ve bütün insanlar hata
        yapar. İyi bir bilgisayar bilimcisi olmanın bir parçası hatalarını bulma ve
        bunları düzeltmektir. Bilgisayar Biliminde yaptığımız yanlışlara \\*\\* hata(bug)
        \\*\\*, ve bu hataları belirleyip düzeltme işlemine \\*\\* hata ayıklama(debugging)
        \\*\\* denir.  Sonraki iki bölümde, hata ayıklama (debugging) becerileri üzerinde
        çalışacaksınız. \\\r \\\r # Bunu yap\\\r \\\r  <img src=\"https://images.code.org/ed7cb1f2e093b9c36b82bfbf9bbcd76b-image-1474383288840.54.26
        AM.png\" style=\"float:right;border:black solid 5px;width:200px\"> \\\r \\\r
        \\* Web sayfasının koduna bak ve iki hataya sebep olan nedeni arkadaşınızla
        beraber bulun: \\\r \\\\t\\* başlık yeterince büyük değil. \\\r \\\\t\\* Listedeki
        ikinci öğede bir numara yok. \\\r\\* Böylece sonuç sağdaki resimle aynı olana
        kadar bütün hataları (bugs) ayıklayın."
      CSD U2 Debugging 1_2019: "# Debugging\\\r <div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\"> \\\r <details>\\\r <summary>\\*\\* Hata (bug) nedir? **</summary>
        \\\r Hatalar yazılan kodun planlandığı gibi çalışmamasıdır. \\\r</details>
        \\\r <details>\\\r <summary>** Hata ayıklama (debugging) nedir? **</summary>
        \\\r Hata ayıklama, bulma ve düzeltme işlemidir. Hata ayıklama bir problem
        çözme işlemidir, bu nedenle hata ayıklamaya çalışırken problem çözme yöntemini
        kullanın. \\\r</details> \\\r <details>\\\r <summary>** Kod hatalarının bazı
        örnekleri nelerdir? \\*\\*</summary> \\\r Hatalar(bugs) kodun planlandığı
        gibi çalışmasına engel olan her şey olabilir.  Bazı örnekler, kodu yanlış
        yere koymak, imla hatası, yanlış yazım, yanlış etiket veya parantez kullanmayı
        unutmak gibi. \\\r kapatmak unutmak yanlış yazım</details> \\\r</div> \\\r
        \\\r Bilgisayar kodu insanlar tarafından yazılmıştır ve bütün insanlar hata
        yapar. İyi bir bilgisayar bilimcisi olmanın bir parçası hatalarını bulma ve
        bunları düzeltmektir. Bilgisayar Biliminde yaptığımız yanlışlara \\*\\* hata(bug)
        \\*\\*, ve bu hataları belirleyip düzeltme işlemine \\*\\* hata ayıklama(debugging)
        \\*\\* denir.  Sonraki iki bölümde, hata ayıklama (debugging) becerileri üzerinde
        çalışacaksınız. \\\r \\\r # Bunu yap\\\r \\\r  <img src=\"https://images.code.org/ed7cb1f2e093b9c36b82bfbf9bbcd76b-image-1474383288840.54.26
        AM.png\" style=\"float:right;border:black solid 5px;width:200px\"> \\\r \\\r
        \\* Web sayfasının koduna bak ve iki hataya sebep olan nedeni arkadaşınızla
        beraber bulun: \\\r \\\\t\\* başlık yeterince büyük değil. \\\r \\\\t\\* Listedeki
        ikinci öğede bir numara yok. \\\r\\* Böylece sonuç sağdaki resimle aynı olana
        kadar bütün hataları (bugs) ayıklayın."
      CSD U2 Debugging 2: "# Debugging\\\r \\\r \\<div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left:  <summary>\\*\\* Hata
        ayıklama (debugging) nedir? **</summary> \\\r Hata ayıklama, bulma ve düzeltme
        işlemidir. Hata ayıklama bir problem çözme işlemidir, bu nedenle hata ayıklamaya
        çalışırken problem çözme yöntemini kullanın. \\\r</details> \\\r <details>\\\r
        <summary>** Kod hatalarının bazı örnekleri nelerdir? \\*\\*</summary> \\\r
        Hatalar(bugs) kodun planlandığı gibi çalışmasına engel olan her şey olabilir.
        \ Bazı örnekler, kodu yanlış yere koymak, imla hatası, yanlış yazım, yanlış
        etiket veya parantez kullanmayı unutmak gibi. \\\r </details> \\\r</div> \\\r\n\n
        \\\r \nDaha fazla hata ayıklama(debugging) çalışması! Bu sayfadaki hataları
        ayıklamak bir öncekinden biraz daha zor.\n \\\r \\\r # Bunu yap\\\r \\\r  20px;
        font-size:14px\" markdown=\"1\"> \\\r <details>\\\r <img src=\"https://images.code.org/61190513dba270c731251df168b98f80-image-1474383960371.02.38
        AM.png\" style=\"float:right;border:5px black solid;width:250px\"> \\\r \\\r
        \\* Bu sayfadaki hatalar (bugs) nelerdir arkadaşınızla konuşun. \\\r \n\n-
        \  Böylece sonuç sağdaki resimle aynı olana kadar bütün hataları (bugs) ayıklayın."
      CSD U2 Debugging 2_2018: "# Debugging\\\r \\\r \\<div style=\"float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left:  <summary>\\*\\*
        Hata ayıklama (debugging) nedir? **</summary> \\\r Hata ayıklama, bulma ve
        düzeltme işlemidir. Hata ayıklama bir problem çözme işlemidir, bu nedenle
        hata ayıklamaya çalışırken problem çözme yöntemini kullanın. \\\r</details>
        \\\r <details>\\\r <summary>** Kod hatalarının bazı örnekleri nelerdir? \\*\\*</summary>
        \\\r Hatalar(bugs) kodun planlandığı gibi çalışmasına engel olan her şey olabilir.
        \ Bazı örnekler, kodu yanlış yere koymak, imla hatası, yanlış yazım, yanlış
        etiket veya parantez kullanmayı unutmak gibi. \\\r </details> \\\r</div> \\\r\n\n
        \\\r \nDaha fazla hata ayıklama(debugging) çalışması! Bu sayfadaki hataları
        ayıklamak bir öncekinden biraz daha zor.\n \\\r \\\r # Bunu yap\\\r \\\r  20px;
        font-size:14px\" markdown=\"1\"> \\\r <details>\\\r <img src=\"https://images.code.org/61190513dba270c731251df168b98f80-image-1474383960371.02.38
        AM.png\" style=\"float:right;border:5px black solid;width:250px\"> \\\r \\\r
        \\* Bu sayfadaki hatalar (bugs) nelerdir arkadaşınızla konuşun. \\\r \n\n-
        \  Böylece sonuç sağdaki resimle aynı olana kadar bütün hataları (bugs) ayıklayın."
      CSD U2 Debugging 2_2019: "# Debugging\\\r \\\r \\<div style=\"float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left:  <summary>\\*\\*
        Hata ayıklama (debugging) nedir? **</summary> \\\r Hata ayıklama, bulma ve
        düzeltme işlemidir. Hata ayıklama bir problem çözme işlemidir, bu nedenle
        hata ayıklamaya çalışırken problem çözme yöntemini kullanın. \\\r</details>
        \\\r <details>\\\r <summary>** Kod hatalarının bazı örnekleri nelerdir? \\*\\*</summary>
        \\\r Hatalar(bugs) kodun planlandığı gibi çalışmasına engel olan her şey olabilir.
        \ Bazı örnekler, kodu yanlış yere koymak, imla hatası, yanlış yazım, yanlış
        etiket veya parantez kullanmayı unutmak gibi. \\\r </details> \\\r</div> \\\r\n\n
        \\\r \nDaha fazla hata ayıklama(debugging) çalışması! Bu sayfadaki hataları
        ayıklamak bir öncekinden biraz daha zor.\n \\\r \\\r # Bunu yap\\\r \\\r  20px;
        font-size:14px\" markdown=\"1\"> \\\r <details>\\\r <img src=\"https://images.code.org/61190513dba270c731251df168b98f80-image-1474383960371.02.38
        AM.png\" style=\"float:right;border:5px black solid;width:250px\"> \\\r \\\r
        \\* Bu sayfadaki hatalar (bugs) nelerdir arkadaşınızla konuşun. \\\r \n\n-
        \  Böylece sonuç sağdaki resimle aynı olana kadar bütün hataları (bugs) ayıklayın."
      CSD U2 Debugging 3: "# Debugging\\\r \\\r <div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\"> \\\r <details>\\\r <summary>\\*\\* Hata nedir? **</summary>
        \\\r Hatalar kodun planlandığı gibi çalışmasına engel olan yanlışlardır.  \\\r</details>
        \\\r <details>\\\r <summary>** Hata ayıklama nedir? **</summary> \\\r Hata
        ayıklama hataları belirleme ve onarma sürecidir.  Bu yüzden problem çözme
        adımlarını kullan. \\\r</details> \\\r <details>\\\r <summary>** Bazı hata
        örnekleri nelerdir? \\*\\*</summary> \\\r Hatalar kodun planlandığı gibi çalışmamasına
        sebep olan her şey olabilir. Yazım hatası, kodu yanlış yere koyma, yanlış
        parantez kullanma ya da parantezi kapatmayı unutmak bazı hata örnekleridir.
        \\\r </details> \\\r</div> \\\r \\\r Bu sayfa görüntüler içerir. Görüntüler
        hataların bulunmasını biraz daha zorlaştırır. \\\r \\\r # Bunu yap \\\r \\\r
        Bu sayfadaki hatalara nelerin sebep olduğunu arkadaşınla tartış. <img src=\"https://images.code.org/61190513dba270c731251df168b98f80-image-1474383960371.02.38
        Am.png\" style=\"float:right;border:5px black solid;width:250px\"> \\\r \\\r
        \\* tartışmak, ortağınızla hatalardır Bu sayfa. \\\r Sence \\* bulup Böylece
        sağdakini sayfanızla eşleşen tüm hataları giderin."
      CSD U2 Debugging 3_2018: "# Debugging\\\r \\\r <div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\"> \\\r <details>\\\r <summary>\\*\\* Hata nedir? **</summary>
        \\\r Hatalar kodun planlandığı gibi çalışmasına engel olan yanlışlardır.  \\\r</details>
        \\\r <details>\\\r <summary>** Hata ayıklama nedir? **</summary> \\\r Hata
        ayıklama hataları belirleme ve onarma sürecidir.  Bu yüzden problem çözme
        adımlarını kullan. \\\r</details> \\\r <details>\\\r <summary>** Bazı hata
        örnekleri nelerdir? \\*\\*</summary> \\\r Hatalar kodun planlandığı gibi çalışmamasına
        sebep olan her şey olabilir. Yazım hatası, kodu yanlış yere koyma, yanlış
        parantez kullanma ya da parantezi kapatmayı unutmak bazı hata örnekleridir.
        \\\r </details> \\\r</div> \\\r \\\r Bu sayfa görüntüler içerir. Görüntüler
        hataların bulunmasını biraz daha zorlaştırır. \\\r \\\r # Bunu yap \\\r \\\r
        Bu sayfadaki hatalara nelerin sebep olduğunu arkadaşınla tartış. <img src=\"https://images.code.org/61190513dba270c731251df168b98f80-image-1474383960371.02.38
        Am.png\" style=\"float:right;border:5px black solid;width:250px\"> \\\r \\\r
        \\* tartışmak, ortağınızla hatalardır Bu sayfa. \\\r Sence \\* bulup Böylece
        sağdakini sayfanızla eşleşen tüm hataları giderin."
      CSD U2 Debugging 3_2019: "# Debugging\\\r \\\r <div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\"> \\\r <details>\\\r <summary>\\*\\* Hata nedir? **</summary>
        \\\r Hatalar kodun planlandığı gibi çalışmasına engel olan yanlışlardır.  \\\r</details>
        \\\r <details>\\\r <summary>** Hata ayıklama nedir? **</summary> \\\r Hata
        ayıklama hataları belirleme ve onarma sürecidir.  Bu yüzden problem çözme
        adımlarını kullan. \\\r</details> \\\r <details>\\\r <summary>** Bazı hata
        örnekleri nelerdir? \\*\\*</summary> \\\r Hatalar kodun planlandığı gibi çalışmamasına
        sebep olan her şey olabilir. Yazım hatası, kodu yanlış yere koyma, yanlış
        parantez kullanma ya da parantezi kapatmayı unutmak bazı hata örnekleridir.
        \\\r </details> \\\r</div> \\\r \\\r Bu sayfa görüntüler içerir. Görüntüler
        hataların bulunmasını biraz daha zorlaştırır. \\\r \\\r # Bunu yap \\\r \\\r
        Bu sayfadaki hatalara nelerin sebep olduğunu arkadaşınla tartış. <img src=\"https://images.code.org/61190513dba270c731251df168b98f80-image-1474383960371.02.38
        Am.png\" style=\"float:right;border:5px black solid;width:250px\"> \\\r \\\r
        \\* tartışmak, ortağınızla hatalardır Bu sayfa. \\\r Sence \\* bulup Böylece
        sağdakini sayfanızla eşleşen tüm hataları giderin."
      CSD U2 Debugging 4: "# Formatting\\\r\n\n<div style=\"float:\n right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\"> \r \n<details>\r\n <summary>** Beyaz Alan nedir? **</summary>
        \r\nBeyaz alan, ekrandaki boşluk, sekme veya yeni bir satır gibi herhangi
        bir karakteri ifade eder. Beyaz alan belgenin farklı bölümlere ayrılmasına
        yardımcı olarak daha kolay okunmasını sağlar. Örneğin, HTML kodunda yeni öğeler
        genellikle yeni bir satırda konur; buna rağmen sayfanın  görünümünü değiştirmez.\n
        \r</details> \r\n<details>\r \n<summary>** Girinti nedir? **</summary> \r
        \nGirinti, metni etrafını çevreleyen metinden ayırmak için sağdan veya soldan
        bırakılan boşluktur. Girinti programın yapısını oluşturmaya yardımcı olur.
        \ HTML'de, diğer ögelerin içindeki ögeler genellikle girintilenir.  İşte bir
        örnek:\r \n<pre>\r \n &lt; body &gt; \r \n    &lt; p &gt; Bu paragraf \"body\"
        ögesinin içindedir. &lt; /p&gt;\r\n   &lt; / body&gt; \r\n</pre>\r\n\r\n</details>
        \r \n<details>\r\n<summary>** Biçimlendirme nedir? **</summary> \r \nBiçimlendirme,
        metnin daha anlaşılır olacak şekilde düzenlenmesidir.  HTML genellikle girintiler
        kullanılarak biçimlendirilir.  Diğer öğelerin içindeki öğelerin kodu iyice
        sağa girintili yazılır.  İşte bir örnek: \r \n<pre>\r\n &lt; body &gt; \r\n
        \    &lt; p &gt; Bu paragraf \"body\" ögesinin içindedir.&lt;/p&gt;\r \n &lt;
        / body &gt; \r\n</pre> \r\n</details> \r\n</div> \r \n\r \nKodunuzu nasıl
        yazdığınız, hata bulmayı kolay ya da zor yapar.  Eğer siz ** beyaz alan**
        ve ** girintileri ** kullanırsanız, bu kodun daha kolay okunmasını ve düzeltilmesini
        sağlar.\r\n\r\n# Bunu Yap\r\n\r\n* Arkadaşınız ile birlikte koda bakın ve
        okunurluluğunu \nkolaylaştırmak için kodu nasıl biçimlendirmeniz gerektiğini
        tartışın.\r \n* Kodu daha okunur yapmak için yeni çizgi ve girinti ekleyin.\r
        \n* Tüm hataları düzeltin, böylece sayfanız <a href=\"https://codeprojects.org/kh6WWXr6rbDWuSBzsug7CRIZ2eo-EwPgV4D0M6pvhF8/\"
        target=\"_blank\"> Hedef Sayfa</a> ile eşleşsin"
      CSD U2 Debugging 4_2018: "# Formatting\\\r\n\n<div style=\"float:\n right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\"> \r \n<details>\r\n <summary>** Beyaz Alan nedir? **</summary>
        \r\nBeyaz alan, ekrandaki boşluk, sekme veya yeni bir satır gibi herhangi
        bir karakteri ifade eder. Beyaz alan belgenin farklı bölümlere ayrılmasına
        yardımcı olarak daha kolay okunmasını sağlar. Örneğin, HTML kodunda yeni öğeler
        genellikle yeni bir satırda konur; buna rağmen sayfanın  görünümünü değiştirmez.\n
        \r</details> \r\n<details>\r \n<summary>** Girinti nedir? **</summary> \r
        \nGirinti, metni etrafını çevreleyen metinden ayırmak için sağdan veya soldan
        bırakılan boşluktur. Girinti programın yapısını oluşturmaya yardımcı olur.
        \ HTML'de, diğer ögelerin içindeki ögeler genellikle girintilenir.  İşte bir
        örnek:\r \n<pre>\r \n &lt; body &gt; \r \n    &lt; p &gt; Bu paragraf \"body\"
        ögesinin içindedir. &lt; /p&gt;\r\n   &lt; / body&gt; \r\n</pre>\r\n\r\n</details>
        \r \n<details>\r\n<summary>** Biçimlendirme nedir? **</summary> \r \nBiçimlendirme,
        metnin daha anlaşılır olacak şekilde düzenlenmesidir.  HTML genellikle girintiler
        kullanılarak biçimlendirilir.  Diğer öğelerin içindeki öğelerin kodu iyice
        sağa girintili yazılır.  İşte bir örnek: \r \n<pre>\r\n &lt; body &gt; \r\n
        \    &lt; p &gt; Bu paragraf \"body\" ögesinin içindedir.&lt;/p&gt;\r \n &lt;
        / body &gt; \r\n</pre> \r\n</details> \r\n</div> \r \n\r \nKodunuzu nasıl
        yazdığınız, hata bulmayı kolay ya da zor yapar.  Eğer siz ** beyaz alan**
        ve ** girintileri ** kullanırsanız, bu kodun daha kolay okunmasını ve düzeltilmesini
        sağlar.\r\n\r\n# Bunu Yap\r\n\r\n* Arkadaşınız ile birlikte koda bakın ve
        okunurluluğunu \nkolaylaştırmak için kodu nasıl biçimlendirmeniz gerektiğini
        tartışın.\r \n* Kodu daha okunur yapmak için yeni çizgi ve girinti ekleyin.\r
        \n* Tüm hataları düzeltin, böylece sayfanız <a href=\"https://codeprojects.org/kh6WWXr6rbDWuSBzsug7CRIZ2eo-EwPgV4D0M6pvhF8/\"
        target=\"_blank\"> Hedef Sayfa</a> ile eşleşsin"
      CSD U2 Debugging 4_2019: "# Formatting\\\r\n\n<div style=\"float:\n right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\"> \r \n<details>\r\n <summary>** Beyaz Alan nedir? **</summary>
        \r\nBeyaz alan, ekrandaki boşluk, sekme veya yeni bir satır gibi herhangi
        bir karakteri ifade eder. Beyaz alan belgenin farklı bölümlere ayrılmasına
        yardımcı olarak daha kolay okunmasını sağlar. Örneğin, HTML kodunda yeni öğeler
        genellikle yeni bir satırda konur; buna rağmen sayfanın  görünümünü değiştirmez.\n
        \r</details> \r\n<details>\r \n<summary>** Girinti nedir? **</summary> \r
        \nGirinti, metni etrafını çevreleyen metinden ayırmak için sağdan veya soldan
        bırakılan boşluktur. Girinti programın yapısını oluşturmaya yardımcı olur.
        \ HTML'de, diğer ögelerin içindeki ögeler genellikle girintilenir.  İşte bir
        örnek:\r \n<pre>\r \n &lt; body &gt; \r \n    &lt; p &gt; Bu paragraf \"body\"
        ögesinin içindedir. &lt; /p&gt;\r\n   &lt; / body&gt; \r\n</pre>\r\n\r\n</details>
        \r \n<details>\r\n<summary>** Biçimlendirme nedir? **</summary> \r \nBiçimlendirme,
        metnin daha anlaşılır olacak şekilde düzenlenmesidir.  HTML genellikle girintiler
        kullanılarak biçimlendirilir.  Diğer öğelerin içindeki öğelerin kodu iyice
        sağa girintili yazılır.  İşte bir örnek: \r \n<pre>\r\n &lt; body &gt; \r\n
        \    &lt; p &gt; Bu paragraf \"body\" ögesinin içindedir.&lt;/p&gt;\r \n &lt;
        / body &gt; \r\n</pre> \r\n</details> \r\n</div> \r \n\r \nKodunuzu nasıl
        yazdığınız, hata bulmayı kolay ya da zor yapar.  Eğer siz ** beyaz alan**
        ve ** girintileri ** kullanırsanız, bu kodun daha kolay okunmasını ve düzeltilmesini
        sağlar.\r\n\r\n# Bunu Yap\r\n\r\n* Arkadaşınız ile birlikte koda bakın ve
        okunurluluğunu \nkolaylaştırmak için kodu nasıl biçimlendirmeniz gerektiğini
        tartışın.\r \n* Kodu daha okunur yapmak için yeni çizgi ve girinti ekleyin.\r
        \n* Tüm hataları düzeltin, böylece sayfanız <a href=\"https://codeprojects.org/kh6WWXr6rbDWuSBzsug7CRIZ2eo-EwPgV4D0M6pvhF8/\"
        target=\"_blank\"> Hedef Sayfa</a> ile eşleşsin"
      CSD U2 HTML Adding Paragraphs: "# \"Body\" Bölümüne Metin Ekleme\\\r\n\n\\\r
        \nBir web laboratuvarı projesine başladığınızda, otomatik olarak\n '\\<!DOCTYPE>',
        '<html>', '<head>' ve '<body>' etiketleri eklenecektir. Projelerinize içerik
        eklerken ' <body>' ve '</body>' etiketlerinin arasında yapmak gereklidir çünkü
        içerik, web sayfanızın \"body\" bölümünün bir parçası olmalıdır.\\\r\n\\\r
        \n\n# Bunu Yap\\\r\n\n\\\r\n\n-   İstediğiniz herhangi bir konu hakkında üç
        ayrı cümleyi web sayfasının \"body\" etiketlerinin arasına yazın \\\r \n-
        \  Ön izleme alanında değişiklikleri görmüyorsanız \"Yenile ve Kaydet\" düğmesine
        tıklayın. \\\r \n-   İşinizi yanınızdaki ile karşılaştırın. Kodu aynı yere
        yerleştirdiğinizden emin olun. \\\r"
      CSD U2 HTML Adding Paragraphs pt 2: "<div style=\"float:\nright; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">
        \r\n<details>\r\n<summary>** Paragraf ögesi nedir? **</summary>\r\nParagraflar
        ('<p>') etiketi ile açılarak ve ('</p>') etiketi ile kapatılarak belirttiler.
        HTML'deki paragraflar bir kelimeden bir grup cümleye kadar herhangi bir uzunluktaki
        bir metin olabilir. Paragraflar cümleler kümesinden ve aralarında boşluk bulunan
        metin kümelerinden oluşur.\r\n</details>\r \n<details>\r \n<summary>** <span>\nBirden
        fazla paragrafı nasıl yaparım?</span> **</summary> \r\nBu bir satırda birkaç
        paragraf etiketinin bir örneğidir. Bu kod, web sayfanızın \"body\" bölümünün
        içerisinde yer almalıdır. \r\n\r\n<pre>\r\n' <p> Bu bir paragraftır. İki cümlesi
        vardır.</p> ' \r\n' <p>Bu başka bir paragraftır.</p> '\r\n</pre> \r\n\r\n</details>
        \r\n\r\n</div>\r\n\r\n# Paragraf Etiketlerinin Kullanımı\r\n\r Paragrafın
        bir parçası olduğunu göstermek için metnin etrafına '<p>' etiketi veya \"paragraf\"
        etiketi yerleştirilir. Paragraf etiketinin içine metin yerleştirmek, bilgisayarın
        genellikle sadece diğer metinlerden ayırmak için bu metni farklı gösterileceğini
        bilmesini sağlar. \r \n\r\n# Bunu Yap\r \n\r \n* Yazdığınız metni ' <p>' ve
        '</p>' etiketleri arasında en az iki ayrı paragraf olarak yerleştirin. \r\n*
        Sonuçları yanınızdaki ile karşılaştırın. Metnin görüntülenme şekli ile ilgili
        neler değişti?"
      CSD U2 HTML Adding Paragraphs pt 2_2018: "<div style=\"float:\nright; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">
        \r\n<details>\r\n<summary>** Paragraf ögesi nedir? **</summary>\r\nParagraflar
        ('<p>') etiketi ile açılarak ve ('</p>') etiketi ile kapatılarak belirttiler.
        HTML'deki paragraflar bir kelimeden bir grup cümleye kadar herhangi bir uzunluktaki
        bir metin olabilir. Paragraflar cümleler kümesinden ve aralarında boşluk bulunan
        metin kümelerinden oluşur.\r\n</details>\r \n<details>\r \n<summary>** <span>\nBirden
        fazla paragrafı nasıl yaparım?</span> **</summary> \r\nBu bir satırda birkaç
        paragraf etiketinin bir örneğidir. Bu kod, web sayfanızın \"body\" bölümünün
        içerisinde yer almalıdır. \r\n\r\n<pre>\r\n' <p> Bu bir paragraftır. İki cümlesi
        vardır.</p> ' \r\n' <p>Bu başka bir paragraftır.</p> '\r\n</pre> \r\n\r\n</details>
        \r\n\r\n</div>\r\n\r\n# Paragraf Etiketlerinin Kullanımı\r\n\r Paragrafın
        bir parçası olduğunu göstermek için metnin etrafına '<p>' etiketi veya \"paragraf\"
        etiketi yerleştirilir. Paragraf etiketinin içine metin yerleştirmek, bilgisayarın
        genellikle sadece diğer metinlerden ayırmak için bu metni farklı gösterileceğini
        bilmesini sağlar. \r \n\r\n# Bunu Yap\r \n\r \n* Yazdığınız metni ' <p>' ve
        '</p>' etiketleri arasında en az iki ayrı paragraf olarak yerleştirin. \r\n*
        Sonuçları yanınızdaki ile karşılaştırın. Metnin görüntülenme şekli ile ilgili
        neler değişti?"
      CSD U2 HTML Adding Paragraphs pt 2_2019: "<div style=\"float:\nright; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">
        \r\n<details>\r\n<summary>** Paragraf ögesi nedir? **</summary>\r\nParagraflar
        ('<p>') etiketi ile açılarak ve ('</p>') etiketi ile kapatılarak belirttiler.
        HTML'deki paragraflar bir kelimeden bir grup cümleye kadar herhangi bir uzunluktaki
        bir metin olabilir. Paragraflar cümleler kümesinden ve aralarında boşluk bulunan
        metin kümelerinden oluşur.\r\n</details>\r \n<details>\r \n<summary>** <span>\nBirden
        fazla paragrafı nasıl yaparım?</span> **</summary> \r\nBu bir satırda birkaç
        paragraf etiketinin bir örneğidir. Bu kod, web sayfanızın \"body\" bölümünün
        içerisinde yer almalıdır. \r\n\r\n<pre>\r\n' <p> Bu bir paragraftır. İki cümlesi
        vardır.</p> ' \r\n' <p>Bu başka bir paragraftır.</p> '\r\n</pre> \r\n\r\n</details>
        \r\n\r\n</div>\r\n\r\n# Paragraf Etiketlerinin Kullanımı\r\n\r Paragrafın
        bir parçası olduğunu göstermek için metnin etrafına '<p>' etiketi veya \"paragraf\"
        etiketi yerleştirilir. Paragraf etiketinin içine metin yerleştirmek, bilgisayarın
        genellikle sadece diğer metinlerden ayırmak için bu metni farklı gösterileceğini
        bilmesini sağlar. \r \n\r\n# Bunu Yap\r \n\r \n* Yazdığınız metni ' <p>' ve
        '</p>' etiketleri arasında en az iki ayrı paragraf olarak yerleştirin. \r\n*
        Sonuçları yanınızdaki ile karşılaştırın. Metnin görüntülenme şekli ile ilgili
        neler değişti?"
      CSD U2 HTML Adding Paragraphs_2018: "# \"Body\" Bölümüne Metin Ekleme\\\r\n\n\\\r
        \nBir web laboratuvarı projesine başladığınızda, otomatik olarak\n '\\<!DOCTYPE>',
        '<html>', '<head>' ve '<body>' etiketleri eklenecektir. Projelerinize içerik
        eklerken ' <body>' ve '</body>' etiketlerinin arasında yapmak gereklidir çünkü
        içerik, web sayfanızın \"body\" bölümünün bir parçası olmalıdır.\\\r\n\\\r
        \n\n# Bunu Yap\\\r\n\n\\\r\n\n-   İstediğiniz herhangi bir konu hakkında üç
        ayrı cümleyi web sayfasının \"body\" etiketlerinin arasına yazın \\\r \n-
        \  Ön izleme alanında değişiklikleri görmüyorsanız \"Yenile ve Kaydet\" düğmesine
        tıklayın. \\\r \n-   İşinizi yanınızdaki ile karşılaştırın. Kodu aynı yere
        yerleştirdiğinizden emin olun. \\\r"
      CSD U2 HTML Adding Paragraphs_2019: "# \"Body\" Bölümüne Metin Ekleme\\\r\n\n\\\r
        \nBir web laboratuvarı projesine başladığınızda, otomatik olarak\n '\\<!DOCTYPE>',
        '<html>', '<head>' ve '<body>' etiketleri eklenecektir. Projelerinize içerik
        eklerken ' <body>' ve '</body>' etiketlerinin arasında yapmak gereklidir çünkü
        içerik, web sayfanızın \"body\" bölümünün bir parçası olmalıdır.\\\r\n\\\r
        \n\n# Bunu Yap\\\r\n\n\\\r\n\n-   İstediğiniz herhangi bir konu hakkında üç
        ayrı cümleyi web sayfasının \"body\" etiketlerinin arasına yazın \\\r \n-
        \  Ön izleme alanında değişiklikleri görmüyorsanız \"Yenile ve Kaydet\" düğmesine
        tıklayın. \\\r \n-   İşinizi yanınızdaki ile karşılaştırın. Kodu aynı yere
        yerleştirdiğinizden emin olun. \\\r"
      CSD U2 HTML Debug Paragraphs: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">
        \r\n<details>\r\n <summary><strong>Paragraf ögesi nedir?</strong></summary>
        \r\nParagraflar ('<p>') etiketi ile açılarak ve ('</p>') etiketi ile kapatılarak
        belirtilir. HTML'deki paragraflar bir kelimeden bir grup cümleye kadar herhangi
        bir uzunluktaki bir metin olabilir. Paragraflar cümleler kümelerini gruplar
        ve bir sonraki metin grubuyla arasına boşluk koyar.\r\n</details> \r\n<details>\r\n<summary><strong>Neden
        kod hatalı olmasına rağmen HTML çalışıyor gibi görünüyor?</strong></summary>
        \r\nHTML, web tarayıcınız tarafından web sayfaları oluşturmak için okunur.
        İnsanlar genellikle web sayfalarını yazarken küçük hatalar yaparlar, tarayıcılar
        sıklıkla sizin istediklerinize en yakın tahmini yaparlar. Bazen farklı tarayıcılar
        farklı tahminler bile yapabilir! Kodunuzun istediğinizi yapmasını sağlamanın
        tek yolu her zaman etiketleri doğru kullanmanız gibi görünüyor. \r\n</details>\r\n</div>\r\n\r\n#
        Hata Ayıkla(Debug): Bozuk Etiketleri Düzelt\r\n\r\nBu basit web sayfasında
        içeriğin doğru şekilde görüntülenmesini engelleyen hatalar vardır. Bu hataları
        tanımlayıp giderin. Bu uygulama \"hata ayıklama\" olarak da adlandırılır.
        \r \n\r \n# Bunu Yap\r\n\r \n* Web sayfasının doğru görüntülenmesi için bozulmuş
        kodu düzeltin\r\n* Yanınızdaki arkadaşınız ile düzeltilen sorunları karşılaştırın"
      CSD U2 HTML Debug Paragraphs_2018: "<div style=\"float: right; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">
        \r\n<details>\r\n <summary><strong>Paragraf ögesi nedir?</strong></summary>
        \r\nParagraflar ('<p>') etiketi ile açılarak ve ('</p>') etiketi ile kapatılarak
        belirtilir. HTML'deki paragraflar bir kelimeden bir grup cümleye kadar herhangi
        bir uzunluktaki bir metin olabilir. Paragraflar cümleler kümelerini gruplar
        ve bir sonraki metin grubuyla arasına boşluk koyar.\r\n</details> \r\n<details>\r\n<summary><strong>Neden
        kod hatalı olmasına rağmen HTML çalışıyor gibi görünüyor?</strong></summary>
        \r\nHTML, web tarayıcınız tarafından web sayfaları oluşturmak için okunur.
        İnsanlar genellikle web sayfalarını yazarken küçük hatalar yaparlar, tarayıcılar
        sıklıkla sizin istediklerinize en yakın tahmini yaparlar. Bazen farklı tarayıcılar
        farklı tahminler bile yapabilir! Kodunuzun istediğinizi yapmasını sağlamanın
        tek yolu her zaman etiketleri doğru kullanmanız gibi görünüyor. \r\n</details>\r\n</div>\r\n\r\n#
        Hata Ayıkla(Debug): Bozuk Etiketleri Düzelt\r\n\r\nBu basit web sayfasında
        içeriğin doğru şekilde görüntülenmesini engelleyen hatalar vardır. Bu hataları
        tanımlayıp giderin. Bu uygulama \"hata ayıklama\" olarak da adlandırılır.
        \r \n\r \n# Bunu Yap\r\n\r \n* Web sayfasının doğru görüntülenmesi için bozulmuş
        kodu düzeltin\r\n* Yanınızdaki arkadaşınız ile düzeltilen sorunları karşılaştırın"
      CSD U2 HTML Debug Paragraphs_2019: "<div style=\"float: right; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">
        \r\n<details>\r\n <summary><strong>Paragraf ögesi nedir?</strong></summary>
        \r\nParagraflar ('<p>') etiketi ile açılarak ve ('</p>') etiketi ile kapatılarak
        belirtilir. HTML'deki paragraflar bir kelimeden bir grup cümleye kadar herhangi
        bir uzunluktaki bir metin olabilir. Paragraflar cümleler kümelerini gruplar
        ve bir sonraki metin grubuyla arasına boşluk koyar.\r\n</details> \r\n<details>\r\n<summary><strong>Neden
        kod hatalı olmasına rağmen HTML çalışıyor gibi görünüyor?</strong></summary>
        \r\nHTML, web tarayıcınız tarafından web sayfaları oluşturmak için okunur.
        İnsanlar genellikle web sayfalarını yazarken küçük hatalar yaparlar, tarayıcılar
        sıklıkla sizin istediklerinize en yakın tahmini yaparlar. Bazen farklı tarayıcılar
        farklı tahminler bile yapabilir! Kodunuzun istediğinizi yapmasını sağlamanın
        tek yolu her zaman etiketleri doğru kullanmanız gibi görünüyor. \r\n</details>\r\n</div>\r\n\r\n#
        Hata Ayıkla(Debug): Bozuk Etiketleri Düzelt\r\n\r\nBu basit web sayfasında
        içeriğin doğru şekilde görüntülenmesini engelleyen hatalar vardır. Bu hataları
        tanımlayıp giderin. Bu uygulama \"hata ayıklama\" olarak da adlandırılır.
        \r \n\r \n# Bunu Yap\r\n\r \n* Web sayfasının doğru görüntülenmesi için bozulmuş
        kodu düzeltin\r\n* Yanınızdaki arkadaşınız ile düzeltilen sorunları karşılaştırın"
      CSD U2 Heading Demo: |-
        # Başlıklar

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>Başlıklar nedir?</strong></summary>

        Başlıklar bir genel ağ sayfasında farklı büyüklüklerde olabilen metinlerdir.Başlıklar sitenizi kullanıcıların daha rahat okuyabilmesi için parçalara ayırır.

        </details>
        <details>
        <summary><strong>Nasıl farklı büyüklükte başlıklar yapılabilir?</strong></summary>

        Başlıklar 6 farklı boyuta sahiptir.En büyüğünü zaten kullanmıştınız.En büyük başlık etiketi <h1>'dir. <h1> etiketindeki bir sayısı başlığın büyüklüğünü belirler,yani en büyük başlık <h1>'dir.En küçük başlık ise <h6>'dır.
        Ayrıca <h2>,<h3>,<h4> ve <h5> etiketlerini de deneyebilirsiniz.

        </h1>
        </details>
        <details>
        <summary><strong>HTML nedir?</strong></summary>

        HTML,Hiper Metin İşaret Dili anlamına gelir.HTML bir web sayfasının belkemiğini oluşturur.HTML belirli elementlerin nerede bitip başladığını belirlemek için etiketler kullanır.

        </details>
        <details>

        <summary><strong>HTML elementi nedir?</strong></summary>
        HTML elementi web sayfanızın bir parçasıdır ve bir açılış etiketiyle başlayıp kapanış etiketiyle kapatılır.HTML Elementi ayrıca açılış ve kapanış etiketleri arasında içeriğede sahiptir.
        Örnek:
        <img src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png" style="width:500px">
        </details>
        <details>
        <summary><strong>HTML etiketi nedir?</strong></summary>
        HTML etiketi makineye bir HTML elementinin nerede başlayıp nerede biteceğini ve elementin ne çeşit bir element olduğunu söyleyen özel karakterlerdir.

        </details>
        </div>

        Şimdiye kadar içeriklerinizi sadece paragraflara dökmeye öğrendiniz ancak HTML sizin başlıklar kullanarak kodlarınızı yönetmenizi de sağlar.Başlıklar belli içeriklerin yada sayfaların bir kısmına özel şekilde yazılmış metinlerdir.

        Şunları Yap:

        \-Aşağıdaki kodlardan başlıkları bularak onları incele.
        \-Partnerinle etiketlerin ne işe yaradığını anladığınıza emin olun.
        \-"Drawing" ve "2 years" yazan elementleri tüm sayfayla uyum içinde olması için değiştirip başlık yapın.
      CSD U2 Heading Demo_2018: "# Başlıklar\\\r\n\n\\\r\n\n<div style=\"float:\nright;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\r\n<details>\r\n<summary>**Başlıklar
        nedir?**</summary>\r\nBaşlıklar bir web sayfası boyunca farklı boyutlardaki
        bölüm başlıklarıdır. Başlıklar, web sitenize, kullanıcıların daha kolay okumasını
        sağlayan bölünmüş yapılar ekler.\r\n</details>\r\n<details>\r\n<summary>**Başlıkları
        farklı şekilde nasıl boyutlandırabilirim?**</summary>\r\nBaşlıklar 6 farklı
        boyutla gelir. Şimdiye kadar basitçe en büyüğünü kullandın: &lt;h1&gt;. HTML'
        deki '1' numaralı etiket en büyük başlığı düzenler. En küçük başlık &lt;h6&gt;
        dır. Aynı zamanda &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;,\nve &lt;h5&gt; etiketlerini
        deneyebilirsin, ki sayı arttıkça boyut küçülür.\r\n</h1>\r\n</details>\r\n<details>\r\n<summary>**HTML
        nedir?**</summary>\r\nHTML, Standart Metin İşaretleme Dili(Hypertext Markup
        Language) anlamına gelir. HTML bir web sayfasının içeriğine yapı eklemek için
        kullanıır. HTML, belirli yapıların nerede başlayıp nerede biteceğini belirtmek
        için etiketler kullanır.Bu etiketler İngilizce dilinde bulunmayan karakter
        setleridir böylece içerik ve yapı ayırt edilebilir. \r\n</details>\r\n<details>\r\n<summary>**HTML
        öğesi nedir?**</summary>\r\nBir HTML öğesi, bir başlangıç etiketi bazen de
        bir bitiş etiketi ile işaretlenen bir web sitesinin bir parçasıdır. Öğe aynı
        zamanda etiketlerin içinde içerik de bulundurabilir. Örnek: \r\n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"\nstyle=\"width:500px\">\r\n</details>\r\n<details>\r\n<summary>**Bir
        HTML etiketi nedir?**</summary>\r\nBir HTML etiketi,  HTML öğesinin nerede
        başlayıp nerede bittiğini ve türünü makineye söyleyen özel bir karakter setidir.\r\n</details>\r\n</div>\r\n\r\nŞimdiye
        kadar paragraflar ile içeriğinizi düzenlediniz.  HTML, başka bir yolla,  **başlıklar**
        kullanarak kodunuzu düzenlemenize izin verir.  Bir başlık içerik bölümünün
        üst kısmında yer alan kısa bir yazı parçasıdır.\r\n\r\nBunları Yapın:\r\n*
        Aşağıdaki web sayfasındaki başlıkları bulun ve bunları yapan kodu görmek için
        denetleyici aracını kullanın.\r\n* Ortağınız ve siz etiketlerin ne yaptığı
        konusunda anlaştığınızdan emin olur.\r\n* Kodu değiştirin böylece  sayfanın
        geri kalanındaki başlıkları \"Çizim\" ve \"2 yıl\" ile eşleştirin."
      CSD U2 Heading Demo_2019: "# Başlıklar\\\r\n\n\\\r\n\n<div style=\"float:\nright;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\r\n<details>\r\n<summary>**Başlıklar
        nedir?**</summary>\r\nBaşlıklar bir web sayfası boyunca farklı boyutlardaki
        bölüm başlıklarıdır. Başlıklar, web sitenize, kullanıcıların daha kolay okumasını
        sağlayan bölünmüş yapılar ekler.\r\n</details>\r\n<details>\r\n<summary>**Başlıkları
        farklı şekilde nasıl boyutlandırabilirim?**</summary>\r\nBaşlıklar 6 farklı
        boyutla gelir. Şimdiye kadar basitçe en büyüğünü kullandın: &lt;h1&gt;. HTML'
        deki '1' numaralı etiket en büyük başlığı düzenler. En küçük başlık &lt;h6&gt;
        dır. Aynı zamanda &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;,\nve &lt;h5&gt; etiketlerini
        deneyebilirsin, ki sayı arttıkça boyut küçülür.\r\n</h1>\r\n</details>\r\n<details>\r\n<summary>**HTML
        nedir?**</summary>\r\nHTML, Standart Metin İşaretleme Dili(Hypertext Markup
        Language) anlamına gelir. HTML bir web sayfasının içeriğine yapı eklemek için
        kullanıır. HTML, belirli yapıların nerede başlayıp nerede biteceğini belirtmek
        için etiketler kullanır.Bu etiketler İngilizce dilinde bulunmayan karakter
        setleridir böylece içerik ve yapı ayırt edilebilir. \r\n</details>\r\n<details>\r\n<summary>**HTML
        öğesi nedir?**</summary>\r\nBir HTML öğesi, bir başlangıç etiketi bazen de
        bir bitiş etiketi ile işaretlenen bir web sitesinin bir parçasıdır. Öğe aynı
        zamanda etiketlerin içinde içerik de bulundurabilir. Örnek: \r\n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"\nstyle=\"width:500px\">\r\n</details>\r\n<details>\r\n<summary>**Bir
        HTML etiketi nedir?**</summary>\r\nBir HTML etiketi,  HTML öğesinin nerede
        başlayıp nerede bittiğini ve türünü makineye söyleyen özel bir karakter setidir.\r\n</details>\r\n</div>\r\n\r\nŞimdiye
        kadar paragraflar ile içeriğinizi düzenlediniz.  HTML, başka bir yolla,  **başlıklar**
        kullanarak kodunuzu düzenlemenize izin verir.  Bir başlık içerik bölümünün
        üst kısmında yer alan kısa bir yazı parçasıdır.\r\n\r\nBunları Yapın:\r\n*
        Aşağıdaki web sayfasındaki başlıkları bulun ve bunları yapan kodu görmek için
        denetleyici aracını kullanın.\r\n* Ortağınız ve siz etiketlerin ne yaptığı
        konusunda anlaştığınızdan emin olur.\r\n* Kodu değiştirin böylece  sayfanın
        geri kalanındaki başlıkları \"Çizim\" ve \"2 yıl\" ile eşleştirin."
      CSD U2 Heading Sizes: "# Başlık Boyutları\\\r\n\n\\\r\n\n<div style=\"float:\nright;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\r\n<details>\r\n<summary>**Başlıklar
        nedir?**</summary>\r\nBaşlıklar bir web sayfası boyunca farklı boyutlardaki
        bölüm başlıklarıdır. Başlıklar, web sitenize, kullanıcıların daha kolay okumasını
        sağlayan bölünmüş yapılar ekler.\r\n</details>\r\n<details>\r\n<summary>**Başlıkları
        farklı şekilde nasıl boyutlandırabilirim?**</summary>\r\nBaşlıklar 6 farklı
        boyutla gelir. Şimdiye kadar basitçe en büyüğünü kullandın: &lt;h1&gt;. HTML'
        deki '1' numaralı etiket en büyük başlığı düzenler. En küçük başlık &lt;h6&gt;
        dır. Aynı zamanda &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;,\nve &lt;h5&gt; etiketlerini
        deneyebilirsin, ki sayı arttıkça boyut küçülür.\r\n</details>\r\n<details>\r\n<summary>**HTML
        nedir?**</summary>\r\nHTML, Standart Metin İşaretleme Dili(Hypertext Markup
        Language) anlamına gelir. HTML bir web sayfasının içeriğine yapı eklemek için
        kullanıır. HTML, belirli yapıların nerede başlayıp nerede biteceğini belirtmek
        için etiketler kullanır.Bu etiketler İngilizce dilinde bulunmayan karakter
        setleridir böylece içerik ve yapı ayırt edilebilir. \r\n</details>\r\n<details>\r\n<summary>**HTML
        öğesi nedir?**</summary>\r\nBir HTML öğesi, bir başlangıç etiketi bazen de
        bir bitiş etiketi ile işaretlenen bir web sitesinin bir parçasıdır. Öğe aynı
        zamanda etiketlerin içinde içerik de bulundurabilir. Örnek:  \r\n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"\nstyle=\"width:500px\">\r\n</details>\r\n<details>\r\n<summary>**Bir
        HTML etiketi nedir?**</summary>\r\nBir HTML etiketi,  HTML öğesinin nerede
        başlayıp nerede bittiğini ve türünü makineye söyleyen özel bir karakter setidir.\r\n</details>\r\n\r\n</div>\r\n\r\nBaşlıklar
        farklı boyutlarla gelir.  Bu sayfada, altı farklı boyutta başlıklar var, fakat
        onlar karmakarışık.  Sen ve ortağın onları nasıl güzeltebileceğinizi çözebilir
        misiniz?\r\n\r\n\r\n\r\nBunları Yapın:\r\n* Başlıkları boyutunu farklı yapan
        şeyi anlamak için denetleyici aracını kullanın \r\n* Farklı başlık etiketlerinin
        ne yaptığı konusunda siz ve eşinizin aynı fikirde olduğundan emin olun.\r\n*
        Etiketleri değiştirin böylece başlıklar en büyükten en küçüğe doğru sıralanır
        ve yazı aşağıdaki resimde olduğu gibi doğru boyutu belirtir.\n\r\n\r\n<img
        src=\"https://images.code.org/762022f97a355dd63dce5ecc8d0127aa-image-1493161154608.58.15\nPM.png\"
        style=\"width:100px\" style=\"float:left\">\r"
      CSD U2 Heading Sizes_2018: "# Başlık Boyutları\\\r\n\n\\\r\n\n<div style=\"float:\nright;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\r\n<details>\r\n<summary>**Başlıklar
        nedir?**</summary>\r\nBaşlıklar bir web sayfası boyunca farklı boyutlardaki
        bölüm başlıklarıdır. Başlıklar, web sitenize, kullanıcıların daha kolay okumasını
        sağlayan bölünmüş yapılar ekler.\r\n</details>\r\n<details>\r\n<summary>**Başlıkları
        farklı şekilde nasıl boyutlandırabilirim?**</summary>\r\nBaşlıklar 6 farklı
        boyutla gelir. Şimdiye kadar basitçe en büyüğünü kullandın: &lt;h1&gt;. HTML'
        deki '1' numaralı etiket en büyük başlığı düzenler. En küçük başlık &lt;h6&gt;
        dır. Aynı zamanda &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;,\nve &lt;h5&gt; etiketlerini
        deneyebilirsin, ki sayı arttıkça boyut küçülür.\r\n</details>\r\n<details>\r\n<summary>**HTML
        nedir?**</summary>\r\nHTML, Standart Metin İşaretleme Dili(Hypertext Markup
        Language) anlamına gelir. HTML bir web sayfasının içeriğine yapı eklemek için
        kullanıır. HTML, belirli yapıların nerede başlayıp nerede biteceğini belirtmek
        için etiketler kullanır.Bu etiketler İngilizce dilinde bulunmayan karakter
        setleridir böylece içerik ve yapı ayırt edilebilir. \r\n</details>\r\n<details>\r\n<summary>**HTML
        öğesi nedir?**</summary>\r\nBir HTML öğesi, bir başlangıç etiketi bazen de
        bir bitiş etiketi ile işaretlenen bir web sitesinin bir parçasıdır. Öğe aynı
        zamanda etiketlerin içinde içerik de bulundurabilir. Örnek:  \r\n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"\nstyle=\"width:500px\">\r\n</details>\r\n<details>\r\n<summary>**Bir
        HTML etiketi nedir?**</summary>\r\nBir HTML etiketi,  HTML öğesinin nerede
        başlayıp nerede bittiğini ve türünü makineye söyleyen özel bir karakter setidir.\r\n</details>\r\n\r\n</div>\r\n\r\nBaşlıklar
        farklı boyutlarla gelir.  Bu sayfada, altı farklı boyutta başlıklar var, fakat
        onlar karmakarışık.  Sen ve ortağın onları nasıl güzeltebileceğinizi çözebilir
        misiniz?\r\n\r\n\r\n\r\nBunları Yapın:\r\n* Başlıkları boyutunu farklı yapan
        şeyi anlamak için denetleyici aracını kullanın \r\n* Farklı başlık etiketlerinin
        ne yaptığı konusunda siz ve eşinizin aynı fikirde olduğundan emin olun.\r\n*
        Etiketleri değiştirin böylece başlıklar en büyükten en küçüğe doğru sıralanır
        ve yazı aşağıdaki resimde olduğu gibi doğru boyutu belirtir.\n\r\n\r\n<img
        src=\"https://images.code.org/762022f97a355dd63dce5ecc8d0127aa-image-1493161154608.58.15\nPM.png\"
        style=\"width:100px\" style=\"float:left\">\r"
      CSD U2 Heading Sizes_2019: "# Başlık Boyutları\\\r\n\n\\\r\n\n<div style=\"float:\nright;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\r\n<details>\r\n<summary>**Başlıklar
        nedir?**</summary>\r\nBaşlıklar bir web sayfası boyunca farklı boyutlardaki
        bölüm başlıklarıdır. Başlıklar, web sitenize, kullanıcıların daha kolay okumasını
        sağlayan bölünmüş yapılar ekler.\r\n</details>\r\n<details>\r\n<summary>**Başlıkları
        farklı şekilde nasıl boyutlandırabilirim?**</summary>\r\nBaşlıklar 6 farklı
        boyutla gelir. Şimdiye kadar basitçe en büyüğünü kullandın: &lt;h1&gt;. HTML'
        deki '1' numaralı etiket en büyük başlığı düzenler. En küçük başlık &lt;h6&gt;
        dır. Aynı zamanda &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;,\nve &lt;h5&gt; etiketlerini
        deneyebilirsin, ki sayı arttıkça boyut küçülür.\r\n</details>\r\n<details>\r\n<summary>**HTML
        nedir?**</summary>\r\nHTML, Standart Metin İşaretleme Dili(Hypertext Markup
        Language) anlamına gelir. HTML bir web sayfasının içeriğine yapı eklemek için
        kullanıır. HTML, belirli yapıların nerede başlayıp nerede biteceğini belirtmek
        için etiketler kullanır.Bu etiketler İngilizce dilinde bulunmayan karakter
        setleridir böylece içerik ve yapı ayırt edilebilir. \r\n</details>\r\n<details>\r\n<summary>**HTML
        öğesi nedir?**</summary>\r\nBir HTML öğesi, bir başlangıç etiketi bazen de
        bir bitiş etiketi ile işaretlenen bir web sitesinin bir parçasıdır. Öğe aynı
        zamanda etiketlerin içinde içerik de bulundurabilir. Örnek:  \r\n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"\nstyle=\"width:500px\">\r\n</details>\r\n<details>\r\n<summary>**Bir
        HTML etiketi nedir?**</summary>\r\nBir HTML etiketi,  HTML öğesinin nerede
        başlayıp nerede bittiğini ve türünü makineye söyleyen özel bir karakter setidir.\r\n</details>\r\n\r\n</div>\r\n\r\nBaşlıklar
        farklı boyutlarla gelir.  Bu sayfada, altı farklı boyutta başlıklar var, fakat
        onlar karmakarışık.  Sen ve ortağın onları nasıl güzeltebileceğinizi çözebilir
        misiniz?\r\n\r\n\r\n\r\nBunları Yapın:\r\n* Başlıkları boyutunu farklı yapan
        şeyi anlamak için denetleyici aracını kullanın \r\n* Farklı başlık etiketlerinin
        ne yaptığı konusunda siz ve eşinizin aynı fikirde olduğundan emin olun.\r\n*
        Etiketleri değiştirin böylece başlıklar en büyükten en küçüğe doğru sıralanır
        ve yazı aşağıdaki resimde olduğu gibi doğru boyutu belirtir.\n\r\n\r\n<img
        src=\"https://images.code.org/762022f97a355dd63dce5ecc8d0127aa-image-1493161154608.58.15\nPM.png\"
        style=\"width:100px\" style=\"float:left\">\r"
      CSD U2 Heading Test: |-
        # Başlıklar ve Paragraflar

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>Paragraf ögesi nedir?</strong>
        </summary>

        Paragraflar, etiketleri açarak(`<p>`) ve ayrıca kapatarak(`</p>`) işaretlenir. HTML'deki paragraflar, bir kelimeden bir grup cümleye kadar herhangi uzunlukta bir metin olabilir. Web sayfanızdaki metninizin tamamı bir HTML ögesinde (başlıklar veya paragraflar)  bulunmalıdır. Paragraflar, bir grup cümleyi birleştirir ve bu metin grubu ile bir sonraki metin grubu arasına biraz boşluk bırakır.

        </details>
        <details>
        <summary><strong>Birden çok paragrafı nasıl oluştururum?</strong>
        </summary>

        Paragraflar, etiketleri(`<p>`) açarak ve ayrıca (`</p>`) kapatarak işaretlenir. Birden fazla paragraf oluşturmak için birden fazla açma ve kapama `<p>` etiket seti isteyeceksiniz. Örneğin;

        <pre>
        &lt;p&gt;
          Bu bir paragraf.
        &lt;/p&gt;
        &lt;p&gt;
          Bu başka bir paragraf.
        &lt;/p&gt;
        </pre>

        </details>
        <details>
        <summary><strong>Başlıklar nelerdir?</strong>
        </summary>

        Başlıklar, bir web sayfası boyunca farklı boyutlarda bölüm başlıklarıdır. Başlıklar, web sayfanıza ayırarak yapı ekleyerek kullanıcının okumasını kolaylaştırır.

        </details>
        <details>
        <summary><strong>Farklı boyutlu başlıkları nasıl oluşturabilirim?</strong>
        </summary>

        Başlıklar 6 farklı boyutta gelir. Şimdiye kadar, öncelikle en büyük olanı \<h1> kullandınız. HTML etiketindeki 1 sayısı bunun en büyük başlık olduğunu gösterir. En küçük başlık \<h6>.  Sayı büyüdükçe küçülen \<h2>, \<h3>, \<h4> ve \<h5> etiketlerini de deneyebilirsiniz.

        </details>
        <details>
        <summary><strong>HTLM nedir?</strong>
        </summary>

        HTML, Hiper Metin İşaretleme Dili anlamına gelir. HTML bir web sayfasının içeriğine yapı eklemek için kullanılır. HTML, belirli yapıların nerede başlayıp nerede biteceğini belirtmek için etiketleri kullanır. Bu etiketler, içerik ve yapının ayırt edilebilmesi için İngilizce dilinde kullanılmayan bir grup karakterdir.

        </details>
        <details>
        <summary><strong>HTML ögesi nedir?</strong>
        </summary>

        Bir HTML ögesi bir başlangıç etiketiyle işaretlenen ve bazen bir bitiş etiketiyle kapatılan, bir web sitesinin parçasıdır. Öge ayrıca etiketlerin içindeki içeriği de içerir. Örneğin;

        <img src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png" style="width:500px">

        </details>
        <details>
        <summary><strong>HTML etiketi nedir?</strong>
        </summary>

        HTML etiketi, makineye bir HTML ögesinin başlangıç veya bitişinin nerede ve ne tür olduğunu söyleyen özel karakter kümesidir.

        </details>
        </div>
      CSD U2 Heading Test_2018: "# Başlıklar ve Paragraflar\\\r\n\n\\\r\n\n<div\nstyle=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left:\n20px;
        font-size:14px\" markdown=\"1\">\r\n<details>\r\n<summary>**Bir paragraf öğesi
        nedir?**</summary>\r\nParagraflar da açılış(`<p>`) ve kapanış(`</p>`) etiketleri
        ile işaretlenirler. HTML' deki paragraflar bir kelimeden bir cümle demetine
        kadar herhangi bir uzunluktaki yazılar olabilir. Web sayfanızdaki bütün yazılar
        bir HTML öğesinde bulunmalıdır  (başlıklar veya paragraflar). Paragraflar
        cümle kümelerini birlikte guruplar ve bir grup metin ile sonraki metin grubu
        arasında biraz boşluk bırakır.\r\n</details>\r\n<details>\r\n<summary>**Nasıl
        çoklu paragraf oluşturabilirim?**</summary>\r\nParagraflar da açılış(`<p>`)
        ve kapanış(`</p>`) etiketleriyle işaretlenirler. Birden fazla paragraf oluşturmak
        için çoklu açılış ve kapanış etiket kümeleri isteyeceksiniz. Örnek\r\n<pre>\r\n\\t&lt;p&gt;\r\n
        \   \\tBu bir paragraftır.\r\n    &lt;/p&gt;\r\n\\t&lt;p&gt;\r\n    \\tBu
        başka bir paragraftır.\r\n    &lt;/p&gt;\r\n</pre>\r\n</details>\r\n<details>\r\n<summary>**Başlıklar
        nedir?**</summary>\r\nBaşlıklar bir web sayfası boyunca farklı boyutlardaki
        bölüm başlıklarıdır. Başlıklar, web sitenize, kullanıcıların daha kolay okumasını
        sağlayan bölünmüş yapılar ekler.\r\n</details>\r\n<details>\r\n<summary>**Başlıklara
        nasıl farklı boyut verebilirim?**</summary>\r\nBaşlıklar 6 farklı boyutla
        gelir. Şimdiye kadar basitçe en büyüğünü kullandın: &lt;h1&gt;. HTML' deki
        '1' numaralı etiket en büyük başlığı düzenler. En küçük başlık &lt;h6&gt;
        dır. Aynı zamanda &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, ve &lt;h5&gt; etiketlerini
        deneyebilirsin, ki sayı arttıkça boyut küçülür.\r\n</h1>\r\n</details>\r\n<details>\r\n<summary>**HTML
        nedir?**</summary>\r\nHTML, Standart Metin İşaretleme Dili(Hypertext Markup
        Language) anlamına gelir. HTML bir web sayfasının içeriğine yapı eklemek için
        kullanıır. HTML, belirli yapıların nerede başlayıp nerede biteceğini belirtmek
        için etiketler kullanır. Bu etiketler İngilizce dilinde bulunmayan karakter
        setleridir böylece içerik ve yapı ayırt edilebilir. \r\n</details>\r\n<details>\r\n<summary>**HTML
        öğesi nedir?**</summary>\r\nBir HTML öğesi, bir başlangıç etiketi bazen de
        bir bitiş etiketi ile işaretlenen bir web sitesinin bir parçasıdır. Öğe aynı
        zamanda etiketlerin içinde içerik de bulundurabilir. Örnek:  \r\n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"\nstyle=\"width:500px\">\r\n</details>\r\n<details>\r\n<summary>**Bir
        HTML etiketi nedir?**</summary>\r\nBir HTML etiketi,  HTML öğesinin nerede
        başlayıp nerede bittiğini ve türünü makineye söyleyen özel bir karakter setidir.\r\n</details>\r\n\r\n</div>\r\n\r\nBu
        sayfanın yazarı bir çok içerik ekledi, fakat yapıyı düşünmedi.  Bütün metin
        karmakarışık bir halde.\r\n\r\nBunları Yapın:\r\n* Ortağınızla içeriği gözden
        geçirin ve en iyi yapının nasıl olması gerektiğine karar verin.\r\n* Sayfada
        yapıyı kodlamak için başlık ve paragraf etiketleri kullanın.\r"
      CSD U2 Heading Test_2019: "# Başlıklar ve Paragraflar\\\r\n\n\\\r\n\n<div\nstyle=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left:\n20px;
        font-size:14px\" markdown=\"1\">\r\n<details>\r\n<summary>**Bir paragraf öğesi
        nedir?**</summary>\r\nParagraflar da açılış(`<p>`) ve kapanış(`</p>`) etiketleri
        ile işaretlenirler. HTML' deki paragraflar bir kelimeden bir cümle demetine
        kadar herhangi bir uzunluktaki yazılar olabilir. Web sayfanızdaki bütün yazılar
        bir HTML öğesinde bulunmalıdır  (başlıklar veya paragraflar). Paragraflar
        cümle kümelerini birlikte guruplar ve bir grup metin ile sonraki metin grubu
        arasında biraz boşluk bırakır.\r\n</details>\r\n<details>\r\n<summary>**Nasıl
        çoklu paragraf oluşturabilirim?**</summary>\r\nParagraflar da açılış(`<p>`)
        ve kapanış(`</p>`) etiketleriyle işaretlenirler. Birden fazla paragraf oluşturmak
        için çoklu açılış ve kapanış etiket kümeleri isteyeceksiniz. Örnek\r\n<pre>\r\n\\t&lt;p&gt;\r\n
        \   \\tBu bir paragraftır.\r\n    &lt;/p&gt;\r\n\\t&lt;p&gt;\r\n    \\tBu
        başka bir paragraftır.\r\n    &lt;/p&gt;\r\n</pre>\r\n</details>\r\n<details>\r\n<summary>**Başlıklar
        nedir?**</summary>\r\nBaşlıklar bir web sayfası boyunca farklı boyutlardaki
        bölüm başlıklarıdır. Başlıklar, web sitenize, kullanıcıların daha kolay okumasını
        sağlayan bölünmüş yapılar ekler.\r\n</details>\r\n<details>\r\n<summary>**Başlıklara
        nasıl farklı boyut verebilirim?**</summary>\r\nBaşlıklar 6 farklı boyutla
        gelir. Şimdiye kadar basitçe en büyüğünü kullandın: &lt;h1&gt;. HTML' deki
        '1' numaralı etiket en büyük başlığı düzenler. En küçük başlık &lt;h6&gt;
        dır. Aynı zamanda &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, ve &lt;h5&gt; etiketlerini
        deneyebilirsin, ki sayı arttıkça boyut küçülür.\r\n</h1>\r\n</details>\r\n<details>\r\n<summary>**HTML
        nedir?**</summary>\r\nHTML, Standart Metin İşaretleme Dili(Hypertext Markup
        Language) anlamına gelir. HTML bir web sayfasının içeriğine yapı eklemek için
        kullanıır. HTML, belirli yapıların nerede başlayıp nerede biteceğini belirtmek
        için etiketler kullanır. Bu etiketler İngilizce dilinde bulunmayan karakter
        setleridir böylece içerik ve yapı ayırt edilebilir. \r\n</details>\r\n<details>\r\n<summary>**HTML
        öğesi nedir?**</summary>\r\nBir HTML öğesi, bir başlangıç etiketi bazen de
        bir bitiş etiketi ile işaretlenen bir web sitesinin bir parçasıdır. Öğe aynı
        zamanda etiketlerin içinde içerik de bulundurabilir. Örnek:  \r\n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"\nstyle=\"width:500px\">\r\n</details>\r\n<details>\r\n<summary>**Bir
        HTML etiketi nedir?**</summary>\r\nBir HTML etiketi,  HTML öğesinin nerede
        başlayıp nerede bittiğini ve türünü makineye söyleyen özel bir karakter setidir.\r\n</details>\r\n\r\n</div>\r\n\r\nBu
        sayfanın yazarı bir çok içerik ekledi, fakat yapıyı düşünmedi.  Bütün metin
        karmakarışık bir halde.\r\n\r\nBunları Yapın:\r\n* Ortağınızla içeriği gözden
        geçirin ve en iyi yapının nasıl olması gerektiğine karar verin.\r\n* Sayfada
        yapıyı kodlamak için başlık ve paragraf etiketleri kullanın.\r"
      CSD U2 Image Tag 1: "<div style=\"float: right; height: 250px; width: 40%; overflow-y:
        scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>How
        do I add images?</strong></summary>\n\nThe `<img>` tag allows you to show
        images on your web page. <br><br>\n\nExample:\n\n<pre>&lt;img src=\"dog.png\"
        alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which
        file to use, extra information, called an **attribute**, is added to the \\<img>
        tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and
        tell the name of the image. Image files names include extensions which tell
        the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing
        tag** because it starts and closes in one tag. To mark this we put the `/`
        which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary><strong>Why
        does an image tag not have a closing tag?</strong></summary>\n\nAn image tag
        doesn't need a closing tag because there is no text content which must be
        wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\n\n</details>\n<details>\n<summary><strong>What is an
        attribute?</strong></summary>\n\nAttributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example \\<img> tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n</details>\n</div>\n\n# Images\n\nA Dog vs Cat web page has
        been started for you. The dog image has already been added to the below web
        page. Use an image tag to add the `cat.jpeg` image to the page below the cat
        heading."
      CSD U2 Image Tag 1_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How do I add images?</strong>
        </summary>

        The `<img>` tag allows you to show images on your web page. <br><br>

        Example:

        <pre>&lt;img src="dog.png" alt="dog jumping"/&gt;</pre><br><br>

        In order to tell the browser which file to use, extra information, called an **attribute**, is added to the \<img> tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and tell the name of the image. Image files names include extensions which tell the computer which type of image they are working with. Common extensions are .jpg, .jpeg, .png. <br><br>

        In addition to have the src attribute, image elements also have the `alt` attribute which describe the image. This is important in case the image doesn’t load or for people who have trouble with their eyesight. <br><br>

        An `<img>` tag is an example of a  **self-closing tag** because it starts and closes in one tag. To mark this we put the `/` which usually goes in the close tag at the end of the image tag.

        </details>
        <details>
        <summary>
        <strong>Why does an image tag not have a closing tag?</strong>
        </summary>
        An image tag doesn't need a closing tag because there is no text content which must be wrapped in tags. The content that shows on the screen is specified through the tags attributes.
        </details>
        <details>
        <summary>
        <strong>What is an attribute?</strong>
        </summary>

        Attributes are extra information included in a tag.  Attributes have names and values. The name tells what type of information is being provided and then the value gives the specific information for that tag.

        For example \<img> tags have two attributes, src and alt. src specifies the name of the image file and alt tells the browser in readable text what the image is.

        </details>
        </div>

        # Images

        A Dog vs Cat web page has been started for you. The dog image has already been added to the below web page. Use an image tag to add the `cat.jpeg` image to the page below the cat heading.
      CSD U2 Image Tag 1_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**How do I add images?**]

        The `<img>` tag allows you to show images on your web page. <br><br>

        Example:

            <img src="dog.png" alt="dog jumping">

        In order to tell the browser which file to use, extra information, called an **attribute**, is added to the <img> tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and tell the name of the image. Image files names include extensions which tell the computer which type of image they are working with. Common extensions are .jpg, .jpeg, .png. <br><br>

        In addition to have the src attribute, image elements also have the `alt` attribute which describe the image. This is important in case the image doesn’t load or for people who have trouble with their eyesight. <br><br>

        An `<img>` tag is an example of a  **self-closing tag** because it starts and closes in one tag.

        :::

        ::: details [**Why does an image tag not have a closing tag?**]
        An image tag doesn't need a closing tag because there is no text content which must be wrapped in tags. The content that shows on the screen is specified through the tags attributes.
        :::

        ::: details [**What is an attribute?**]

        Attributes are extra information included in a tag.  Attributes have names and values. The name tells what type of information is being provided and then the value gives the specific information for that tag.

        For example `<img>` tags have two attributes, src and alt. src specifies the name of the image file and alt tells the browser in readable text what the image is.

        :::

        </div>

        # Images

        A Dog vs Cat web page has been started for you. The dog image has already been added to the below web page. Look at the code that made the dog image appear, then use an image tag to add the `cat.jpeg` image to the page below the cat heading.

        This image was found at pixabay and was uploaded by the user "Alexas\_Fotos", who used a "free for commercial use" and "no attribution required" license.
      CSD U2 Image Tag 2: "<div style=\"float: right; height: 250px; width: 40%; overflow-y:
        scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>How
        do I add images?</strong></summary>\n\nThe `<img>` tag allows you to show
        images on your web page. <br><br>\n\nExample:\n\n<pre>&lt;img src=\"dog.png\"
        alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which
        file to use, extra information, called an **attribute**, is added to the \\<img>
        tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and
        tell the name of the image. Image files names include extensions which tell
        the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing
        tag** because it starts and closes in one tag. To mark this we put the `/`
        which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary><strong>Why
        does an image tag not have a closing tag?</strong></summary>\n\nAn image tag
        doesn't need a closing tag because there is no text content which must be
        wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\n\n</details>\n<details>\n<summary><strong>What is an
        attribute?</strong></summary>\n\nAttributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example \\<img> tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n</details>\n</div>\n\n# Uploading Images\n\nYou can upload
        images that you've found elsewhere using the **Add Image** button. Go find
        an image of a different type of pet that you like and download it to your
        computer (using right-click \"Save As\").\n\nOnce you have your images, click
        ![](<https://images.code.org/c35789d00e59b0dbe42879390dabf925-image-1493240590385.01.49
        PM.png>) and upload the image from your computer into your project, where
        you can then use it in your page.\n\n# Do This\n\n-   Upload at least one
        image into this web page\n-   Use the `<img>` tag to display the image(s)
        in your website.\n-   Make sure to add an `alt` attribute."
      CSD U2 Image Tag 2_2018: "<div style=\"float: right; height: 250px; width: 40%;
        overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>How
        do I add images?</strong>\n</summary>\n\nThe `<img>` tag allows you to show
        images on your web page. <br><br>\n\nExample:\n\n<pre>&lt;img src=\"dog.png\"
        alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which
        file to use, extra information, called an **attribute**, is added to the \\<img>
        tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and
        tell the name of the image. Image files names include extensions which tell
        the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing
        tag** because it starts and closes in one tag. To mark this we put the `/`
        which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary>\n<strong>Why
        does an image tag not have a closing tag?</strong>\n</summary>\nAn image tag
        doesn't need a closing tag because there is no text content which must be
        wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\n</details>\n<details>\n<summary>\n<strong>What is an
        attribute?</strong>\n</summary>\n\nAttributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example \\<img> tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n</details>\n</div>\n\n# Uploading Images\n\nYou can upload
        images that you've found elsewhere using the **Add Image** button. Go find
        an image of a different type of pet that you like and download it to your
        computer (using right-click \"Save As\").\n\nOnce you have your images, click
        ![](<https://images.code.org/c35789d00e59b0dbe42879390dabf925-image-1493240590385.01.49
        PM.png>) and upload the image from your computer into your project, where
        you can then use it in your page.\n\n# Do This\n\n-   Upload at least one
        image into this web page\n-   Use the `<img>` tag to display the image(s)
        in your website.\n-   Make sure to add an `alt` attribute."
      CSD U2 Image Tag 2_2019: "<div class=\"no-pullthrough\" style=\"float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n\n::: details [**How do I add images?**]\n\nThe `<img>` tag
        allows you to show images on your web page.\n\nExample:\n\n    <img src=\"dog.png\"
        alt=\"dog jumping\">\n\nIn order to tell the browser which file to use, extra
        information, called an **attribute**, is added to the <img> tag inside the
        brackets. The attribute `src` stands for **s**ou**rc**e and tell the name
        of the image. Image files names include extensions which tell the computer
        which type of image they are working with. Common extensions are .jpg, .jpeg,
        .png. <br><br>\n\nIn addition to have the src attribute, image elements also
        have the `alt` attribute which describe the image. This is important in case
        the image doesn’t load or for people who have trouble with their eyesight.
        <br><br>\n\nAn `<img>` tag is an example of a  **self-closing tag** because
        it starts and closes in one tag.\n:::\n\n::: details [**Why does an image
        tag not have a closing tag?**]\nAn image tag doesn't need a closing tag because
        there is no text content which must be wrapped in tags. The content that shows
        on the screen is specified through the tags attributes.\n:::\n\n::: details
        [**What is an attribute?**]\n\nAttributes are extra information included in
        a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example `<img>` tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n:::\n\n</div>\n\n# Uploading Images\n\nYou can upload images
        that you've found elsewhere using the **Add Image** button. Go find an image
        of a different type of pet that you like and download it to your computer
        (using right-click \"Save As\").\n\nOnce you have your images, click ![](<https://images.code.org/c35789d00e59b0dbe42879390dabf925-image-1493240590385.01.49
        PM.png>) and upload the image from your computer into your project, where
        you can then use it in your page.\n\n# Do This\n\n-   Upload at least one
        image into this web page\n-   Use the `<img>` tag to display the image(s)
        in your website.\n-   Make sure to add an `alt` attribute."
      CSD U2 Image Tag Attribution: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>How
        do I add images?</strong></summary>\n\nThe `<img>` tag allows you to show
        images on your web page. <br><br>\n\nExample:\n\n<pre>&lt;img src=\"dog.png\"
        alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which
        file to use, extra information, called an **attribute**, is added to the \\<img>
        tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and
        tell the name of the image. Image files names include extensions which tell
        the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing
        tag** because it starts and closes in one tag. To mark this we put the `/`
        which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary><strong>Why
        does an image tag not have a closing tag?</strong></summary>\n\nAn image tag
        doesn't need a closing tag because there is no text content which must be
        wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\n\n</details>\n<details>\n<summary><strong>What is an
        attribute?</strong></summary>\n\nAttributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example \\<img> tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n</details>\n</div>\n\n# Giving Credit\n\nWhen using a Creative
        Commons licensed image, you need to give credit to the original creator (this
        is also called _attribution_). There are lots of ways to provide attribution,
        but the easiest way is to add text below the image that identifies the creator
        and website it came from.\n\n# Do This\n\nIn this page we've already added
        and attributed an image of a frog. Use the Creative Commons search engine
        to find another image of an amphibian. Add your found image to this page,
        along with proper attribution, including:\n\n-   The name of the creator (if
        available)\n-   The website it was found on (e.g. commons.wikimedia.org)\n-
        \  The license it was published under (e.g. CC-BY)"
      CSD U2 Image Tag Attribution_2018: "<div style=\"float: right; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>How
        do I add images?</strong>\n</summary>\n\nThe `<img>` tag allows you to show
        images on your web page. <br><br>\n\nExample:\n\n<pre>&lt;img src=\"dog.png\"
        alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which
        file to use, extra information, called an **attribute**, is added to the \\<img>
        tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and
        tell the name of the image. Image files names include extensions which tell
        the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing
        tag** because it starts and closes in one tag. To mark this we put the `/`
        which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary>\n<strong>Why
        does an image tag not have a closing tag?</strong>\n</summary>\nAn image tag
        doesn't need a closing tag because there is no text content which must be
        wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\n</details>\n<details>\n<summary>\n<strong>What is an
        attribute?</strong>\n</summary>\n\nAttributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example \\<img> tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n</details>\n</div>\n\n# Giving Credit\n\nWhen using a Creative
        Commons licensed image, you need to give credit to the original creator (this
        is also called _attribution_). There are lots of ways to provide attribution,
        but the easiest way is to add text below the image that identifies the creator
        and website it came from.\n\n# Do This\n\nIn this page we've already added
        and attributed an image of a frog. Use the Creative Commons search engine
        to find another image of an amphibian. Add your found image to this page,
        along with proper attribution, including:\n\n-   The name of the creator (if
        available)\n-   The website it was found on (e.g. commons.wikimedia.org)\n-
        \  The license it was published under (e.g. CC-BY)"
      CSD U2 Image Tag Attribution_2019: "<div class=\"no-pullthrough\" style=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n\n::: details [**How do I add images?**]\n\nThe `<img>` tag
        allows you to show images on your web page. \n\nExample:\n\n    <img src=\"dog.png\"
        alt=\"dog jumping\">\n\nIn order to tell the browser which file to use, extra
        information, called an **attribute**, is added to the <img> tag inside the
        brackets. The attribute `src` stands for **s**ou**rc**e and tell the name
        of the image. Image files names include extensions which tell the computer
        which type of image they are working with. Common extensions are .jpg, .jpeg,
        .png. <br><br>\n\nIn addition to have the src attribute, image elements also
        have the `alt` attribute which describe the image. This is important in case
        the image doesn’t load or for people who have trouble with their eyesight.
        <br><br>\n\nAn `<img>` tag is an example of a  **self-closing tag** because
        it starts and closes in one tag.\n:::\n\n::: details [**Why does an image
        tag not have a closing tag?**]\nAn image tag doesn't need a closing tag because
        there is no text content which must be wrapped in tags. The content that shows
        on the screen is specified through the tags attributes.\n:::\n\n::: details
        [**What is an attribute?**]\n\nAttributes are extra information included in
        a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example `<img>` tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n:::\n\n</div>\n\n# Giving Credit\n\nWhen using a Creative
        Commons licensed image, you need to give credit to the original creator (this
        is also called _attribution_). There are lots of ways to provide attribution,
        but the easiest way is to add text below the image that identifies the creator
        and website it came from.\n\n# Do This\n\nIn this page we've already added
        and attributed an image of a frog. Use the Creative Commons search engine
        to find another image of an amphibian. Add your found image to this page,
        along with proper attribution, including:\n\n-   The name of the creator (if
        available)\n-   The website it was found on (e.g. commons.wikimedia.org)\n-
        \  The license it was published under (e.g. CC-BY)"
      CSD U2 Image Tag Debug: "<div style=\"float: right; height: 250px; width: 40%;
        overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>How
        do I add images?</strong>\n</summary>\n\nThe `<img>` tag allows you to show
        images on your web page. <br><br>\n\nExample:\n\n<pre>&lt;img src=\"dog.png\"
        alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which
        file to use, extra information, called an **attribute**, is added to the \\<img>
        tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and
        tell the name of the image. Image files names include extensions which tell
        the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing
        tag** because it starts and closes in one tag. To mark this we put the `/`
        which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary><strong>Why
        does an image tag not have a closing tag?</strong>\n</summary>\n\nAn image
        tag doesn't need a closing tag because there is no text content which must
        be wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\n\n</details>\n<details>\n<summary><strong>What is an
        attribute?</strong>\n</summary>\n\nAttributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example \\<img> tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n</details>\n</div>\n\n# The Details Matter\n\nThe `src` attribute
        needs to point to the _exact_ filename of the image you want to use. That
        means you need to pay attention to spelling, capitalization, and the file
        extension. Each of the three images on this page is broken because of an improper
        `src` attribute. Using the file menu for reference, fix each of the image
        tags.\n\n_Note: Even though the images are not loading properly, our website
        is still showing descriptive text of what should be there because we used
        `alt` attributes. Cool!_"
      CSD U2 Image Tag Debug_2018: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>How
        do I add images?</strong>\n</summary>\n\nThe `<img>` tag allows you to show
        images on your web page. <br><br>\n\nExample:\n\n<pre>&lt;img src=\"dog.png\"
        alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which
        file to use, extra information, called an **attribute**, is added to the \\<img>
        tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and
        tell the name of the image. Image files names include extensions which tell
        the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing
        tag** because it starts and closes in one tag. To mark this we put the `/`
        which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary>\n<strong>Why
        does an image tag not have a closing tag?</strong>\n</summary>\nAn image tag
        doesn't need a closing tag because there is no text content which must be
        wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\n</details>\n<details>\n<summary>\n<strong>What is an
        attribute?</strong>\n</summary>\n\nAttributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example \\<img> tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n</details>\n</div>\n\n# The Details Matter\n\nThe `src` attribute
        needs to point to the _exact_ filename of the image you want to use. That
        means you need to pay attention to spelling, capitalization, and the file
        extension. Each of the three images on this page is broken because of an improper
        `src` attribute. Using the file menu for reference, fix each of the image
        tags.\n\n_Note: Even though the images are not loading properly, our website
        is still showing descriptive text of what should be there because we used
        `alt` attributes. Cool!_"
      CSD U2 Image Tag Debug_2019: "<div class=\"no-pullthrough\" style=\"float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n\n::: details [**How do I add images?**]\n\nThe `<img>` tag
        allows you to show images on your web page.\n\nExample:\n\n    <img src=\"dog.png\"
        alt=\"dog jumping\">\n\nIn order to tell the browser which file to use, extra
        information, called an **attribute**, is added to the <img> tag inside the
        brackets. The attribute `src` stands for **s**ou**rc**e and tell the name
        of the image. Image files names include extensions which tell the computer
        which type of image they are working with. Common extensions are .jpg, .jpeg,
        .png. <br><br>\n\nIn addition to have the src attribute, image elements also
        have the `alt` attribute which describe the image. This is important in case
        the image doesn’t load or for people who have trouble with their eyesight.
        <br><br>\n\nAn `<img>` tag is an example of a  **self-closing tag** because
        it starts and closes in one tag.\n:::\n\n::: details [**Why does an image
        tag not have a closing tag?**]\nAn image tag doesn't need a closing tag because
        there is no text content which must be wrapped in tags. The content that shows
        on the screen is specified through the tags attributes.\n:::\n\n::: details
        [**What is an attribute?**]\n\nAttributes are extra information included in
        a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example `<img>` tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n:::\n\n</div>\n\n# The Details Matter\n\nThe `src` attribute
        needs to point to the _exact_ filename of the image you want to use. That
        means you need to pay attention to spelling, capitalization, and the file
        extension. Each of the three images on this page is broken because of an improper
        `src` attribute. Using the file menu for reference, fix each of the image
        tags.\n\n_Note: Even though the images are not loading properly, our website
        is still showing descriptive text of what should be there because we used
        `alt` attributes. Cool!_"
      CSD U2 Info Page Final Touches: "<div style=\"float: right;\nheight: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\r\n\r\n<h2>\r\nKontrol
        listesi\r\n</h2>\r\n\r\n<input\ntype=\"checkbox\" style=\"float: left\"><span
        style=\"display: block; margin-left:\n20px; margin-bottom: 10px\">Resmin lisanslı
        olduğundan emin olun</span>\r\n<input\ntype=\"checkbox\" style=\"float: left\"><span
        style=\"display: block; margin-left:\n20px; margin-bottom: 10px\">Resmini
        Web Lab'a yükle</span>\r\n<input type=\"checkbox\"\nstyle=\"float: left\"><span
        style=\"display: block; margin-left: 20px; margin-bottom:\n10px\">Altına açıklayıcı
        özellikte bir resim etiketi oluşturun. </span>\r\n<input\ntype=\"checkbox\"
        style=\"float: left\"><span style=\"display: block; margin-left:\n20px; margin-bottom:
        10px\">Eğer resim kendinize ait değilse, altına özelliğini ekleyin<br/>\r\n\r\n</div>\r\n\r\n\r\n#
        Sitenize resimlerinizi ekleme\r\n\r\nŞimdiye kadar web sayfanıza harika içerikli
        sayfalar eklediniz, artık resimler de ekleyebilirsiniz!\n\r\n\r\n# Bunu yapın\r\n\r\nKendi
        resimlerinizi veya internet aramalarında bulduğunuz resimlerinizi oluşturduğunuz
        sayfalara ekleyin. Yaratıcı olun! Resimleri eklerken sağda bulunan kontrol
        listesini kullanarak, izlemeniz gereken adımları takip edebilirsiniz.\r"
      CSD U2 Info Page Final Touches_2018: "<div style=\"float: right;\nheight: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\r\n\r\n<h2>\r\nKontrol
        listesi\r\n</h2>\r\n\r\n<input\ntype=\"checkbox\" style=\"float: left\"><span
        style=\"display: block; margin-left:\n20px; margin-bottom: 10px\">Resmin lisanslı
        olduğundan emin olun</span>\r\n<input\ntype=\"checkbox\" style=\"float: left\"><span
        style=\"display: block; margin-left:\n20px; margin-bottom: 10px\">Resmini
        Web Lab'a yükle</span>\r\n<input type=\"checkbox\"\nstyle=\"float: left\"><span
        style=\"display: block; margin-left: 20px; margin-bottom:\n10px\">Altına açıklayıcı
        özellikte bir resim etiketi oluşturun. </span>\r\n<input\ntype=\"checkbox\"
        style=\"float: left\"><span style=\"display: block; margin-left:\n20px; margin-bottom:
        10px\">Eğer resim kendinize ait değilse, altına özelliğini ekleyin<br/>\r\n\r\n</div>\r\n\r\n\r\n#
        Sitenize resimlerinizi ekleme\r\n\r\nŞimdiye kadar web sayfanıza harika içerikli
        sayfalar eklediniz, artık resimler de ekleyebilirsiniz!\n\r\n\r\n# Bunu yapın\r\n\r\nKendi
        resimlerinizi veya internet aramalarında bulduğunuz resimlerinizi oluşturduğunuz
        sayfalara ekleyin. Yaratıcı olun! Resimleri eklerken sağda bulunan kontrol
        listesini kullanarak, izlemeniz gereken adımları takip edebilirsiniz.\r"
      CSD U2 Info Page Final Touches_2019: "<div style=\"float: right;\nheight: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\r\n\r\n<h2>\r\nKontrol
        listesi\r\n</h2>\r\n\r\n<input\ntype=\"checkbox\" style=\"float: left\"><span
        style=\"display: block; margin-left:\n20px; margin-bottom: 10px\">Resmin lisanslı
        olduğundan emin olun</span>\r\n<input\ntype=\"checkbox\" style=\"float: left\"><span
        style=\"display: block; margin-left:\n20px; margin-bottom: 10px\">Resmini
        Web Lab'a yükle</span>\r\n<input type=\"checkbox\"\nstyle=\"float: left\"><span
        style=\"display: block; margin-left: 20px; margin-bottom:\n10px\">Altına açıklayıcı
        özellikte bir resim etiketi oluşturun. </span>\r\n<input\ntype=\"checkbox\"
        style=\"float: left\"><span style=\"display: block; margin-left:\n20px; margin-bottom:
        10px\">Eğer resim kendinize ait değilse, altına özelliğini ekleyin<br/>\r\n\r\n</div>\r\n\r\n\r\n#
        Sitenize resimlerinizi ekleme\r\n\r\nŞimdiye kadar web sayfanıza harika içerikli
        sayfalar eklediniz, artık resimler de ekleyebilirsiniz!\n\r\n\r\n# Bunu yapın\r\n\r\nKendi
        resimlerinizi veya internet aramalarında bulduğunuz resimlerinizi oluşturduğunuz
        sayfalara ekleyin. Yaratıcı olun! Resimleri eklerken sağda bulunan kontrol
        listesini kullanarak, izlemeniz gereken adımları takip edebilirsiniz.\r"
      CSD U2 Inspector Warm Up: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\r\n<details>\r\n<summary>**
        <span>Denetleyici aracını nasıl kullanırım?</span> **</summary>\r\nDenetleyici
        aracı Web Lab.'daki bilinmedik kodlar hakkında daha fazla bilgi edinmek için
        harika bir yoldur. Denetleyici aracı açmak için <img src=\"https://images.code.org/188579d7c6e7645d0d2edd203a33bd63-image-1480361561351.31.56\nPM.png\"
        style=\"width:100px\">. Düğmenin beyaza dönmesinden ve üzerinde 'On' yazmasından
        denetleyici aracının açık olduğunu anlayabilirsiniz. Denetleyici aracı etkinleştirildikten
        sonra önizleme alanında bir şey üzerine gelebililirsiniz ve Web Lab sayfanın
        görünen kısmının kodunu vurgulayacaktır.\r\n</details>\r\n\r\n</div>\r\n\r\n#
        HTML'i Keşfet\r\n\r\nBu web dili HTML ile yazılmış bir web sayfasıdır. Nasıl
        işlediği hakkında daha çok şey öğreneceksiniz, ama ilk önce denetleyici aracını
        kullanarak keşfedin.\r\n\r\n# Bunu Yap\r\n\r\n* Denetleyici aracını kullanmayı
        öğrenmek için sağdaki \"Denetleyici aracını nasıl kullanırım?\" ipucuna tıkla.\r\n*
        Web sayfası keşfetmek ve ortağınız ile nasıl işlediğini tartışmak için web
        sayfasındaki yönergeleri izle."
      CSD U2 Inspector Warm Up_2018: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\r\n<details>\r\n<summary>**
        <span>Denetleyici aracını nasıl kullanırım?</span> **</summary>\r\nDenetleyici
        aracı Web Lab.'daki bilinmedik kodlar hakkında daha fazla bilgi edinmek için
        harika bir yoldur. Denetleyici aracı açmak için <img src=\"https://images.code.org/188579d7c6e7645d0d2edd203a33bd63-image-1480361561351.31.56\nPM.png\"
        style=\"width:100px\">. Düğmenin beyaza dönmesinden ve üzerinde 'On' yazmasından
        denetleyici aracının açık olduğunu anlayabilirsiniz. Denetleyici aracı etkinleştirildikten
        sonra önizleme alanında bir şey üzerine gelebililirsiniz ve Web Lab sayfanın
        görünen kısmının kodunu vurgulayacaktır.\r\n</details>\r\n\r\n</div>\r\n\r\n#
        HTML'i Keşfet\r\n\r\nBu web dili HTML ile yazılmış bir web sayfasıdır. Nasıl
        işlediği hakkında daha çok şey öğreneceksiniz, ama ilk önce denetleyici aracını
        kullanarak keşfedin.\r\n\r\n# Bunu Yap\r\n\r\n* Denetleyici aracını kullanmayı
        öğrenmek için sağdaki \"Denetleyici aracını nasıl kullanırım?\" ipucuna tıkla.\r\n*
        Web sayfası keşfetmek ve ortağınız ile nasıl işlediğini tartışmak için web
        sayfasındaki yönergeleri izle."
      CSD U2 Inspector Warm Up_2019: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\r\n<details>\r\n<summary>**
        <span>Denetleyici aracını nasıl kullanırım?</span> **</summary>\r\nDenetleyici
        aracı Web Lab.'daki bilinmedik kodlar hakkında daha fazla bilgi edinmek için
        harika bir yoldur. Denetleyici aracı açmak için <img src=\"https://images.code.org/188579d7c6e7645d0d2edd203a33bd63-image-1480361561351.31.56\nPM.png\"
        style=\"width:100px\">. Düğmenin beyaza dönmesinden ve üzerinde 'On' yazmasından
        denetleyici aracının açık olduğunu anlayabilirsiniz. Denetleyici aracı etkinleştirildikten
        sonra önizleme alanında bir şey üzerine gelebililirsiniz ve Web Lab sayfanın
        görünen kısmının kodunu vurgulayacaktır.\r\n</details>\r\n\r\n</div>\r\n\r\n#
        HTML'i Keşfet\r\n\r\nBu web dili HTML ile yazılmış bir web sayfasıdır. Nasıl
        işlediği hakkında daha çok şey öğreneceksiniz, ama ilk önce denetleyici aracını
        kullanarak keşfedin.\r\n\r\n# Bunu Yap\r\n\r\n* Denetleyici aracını kullanmayı
        öğrenmek için sağdaki \"Denetleyici aracını nasıl kullanırım?\" ipucuna tıkla.\r\n*
        Web sayfası keşfetmek ve ortağınız ile nasıl işlediğini tartışmak için web
        sayfasındaki yönergeleri izle."
      CSD U2 Pair Programming Video_2019: |-
        ## Questions to consider

        -   Why do you think professional programmers use pair programming?
        -   How do you think pair programming will help you to program better?
      CSD U2 Project Start: "# Projene Başla\\\r\n\n\\\r\nŞimdi kişisel siten için
        bir planın var, buradan kodlamaya başlayabilirsin. Bugün istediğin her şeyi
        yapamayacaksan merak etme.  Websitesi geliştirme hakkında daha fazla bilgi
        edindikçe çalışmanı geliştirmek için çok şansın olacak.\\\r\n\\\r\n\n# Bunu
        Yap\\\r\n\n-   Taslağını yaptığın sayfayı oluşturmak için HTML kullan.  Aşağıdakileri
        içerdiğinden emin ol\\\r\n-   En az \\*\\*  farklı boyutlarda iki üst başlık\\*\\*
        \\\r\n-   En az \\*\\* bir paragraf \\*\\* \\\r\n-   Taslakla sayfanı karşılaştırarak
        ve ortağına göstererek sayfanıza**Yansıtın**"
      CSD U2 Project Start_2018: "# Projene Başla\\\r\n\n\\\r\nŞimdi kişisel siten
        için bir planın var, buradan kodlamaya başlayabilirsin. Bugün istediğin her
        şeyi yapamayacaksan merak etme.  Websitesi geliştirme hakkında daha fazla
        bilgi edindikçe çalışmanı geliştirmek için çok şansın olacak.\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n-   Taslağını yaptığın sayfayı oluşturmak için HTML kullan.
        \ Aşağıdakileri içerdiğinden emin ol\\\r\n-   En az \\*\\*  farklı boyutlarda
        iki üst başlık\\*\\* \\\r\n-   En az \\*\\* bir paragraf \\*\\* \\\r\n-   Taslakla
        sayfanı karşılaştırarak ve ortağına göstererek sayfanıza**Yansıtın**"
      CSD U2 Project Start_2019: "# Projene Başla\\\r\n\n\\\r\nŞimdi kişisel siten
        için bir planın var, buradan kodlamaya başlayabilirsin. Bugün istediğin her
        şeyi yapamayacaksan merak etme.  Websitesi geliştirme hakkında daha fazla
        bilgi edindikçe çalışmanı geliştirmek için çok şansın olacak.\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n-   Taslağını yaptığın sayfayı oluşturmak için HTML kullan.
        \ Aşağıdakileri içerdiğinden emin ol\\\r\n-   En az \\*\\*  farklı boyutlarda
        iki üst başlık\\*\\* \\\r\n-   En az \\*\\* bir paragraf \\*\\* \\\r\n-   Taslakla
        sayfanı karşılaştırarak ve ortağına göstererek sayfanıza**Yansıtın**"
      CSD U2 RGB intro: |-
        # RGB Colors

        All colors, whether they have names or not, can be described by the level of red, green, and blue light it takes to make them.  This is called an RGB value (short for Red-Green-Blue).  You can use the widget on your left to try out different RGB values and see what colors they make.

        -   **Click "Run" to start the widget on the left,** and use the sliders to adjust the levels of red, green, and blue light.
        -   For each of the colors below, match it to its RGB value.

        A) red: 216, green: 191, blue: 216 - rgb(216,191,216)

        B) red: 255, green: 239, blue: 213 - rgb(255,239,213)

        C) red: 250, green: 128, blue: 114 - rgb(250,128,114)

        D) red: 70, green: 130, blue: 180 - rgb(70, 130, 180)

        E) red: 107, green: 142, blue: 35 - rgb(107,142,35)

        <div style="font-size: 16px">
        <br />
        <details>

        <summary><strong>Why do red and green make yellow?</strong></summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary><strong>How many colors can I make with RGB color mixing?</strong></summary>

        <p>
        You can make over sixteen million different colors with RGB color mixing.
        </p>

        </details>
        </div>
      CSD U2 RGB intro_2018: |-
        # RGB Colors

        All colors, whether they have names or not, can be described by the level of red, green, and blue light it takes to make them.  This is called an RGB value (short for Red-Green-Blue).  You can use the widget on your left to try out different RGB values and see what colors they make.

        -   **Click "Run" to start the widget on the left,** and use the sliders to adjust the levels of red, green, and blue light.
        -   For each of the colors below, match it to its RGB value.

        A) red: 216, green: 191, blue: 216 - rgb(216,191,216)

        B) red: 255, green: 239, blue: 213 - rgb(255,239,213)

        C) red: 250, green: 128, blue: 114 - rgb(250,128,114)

        D) red: 70, green: 130, blue: 180 - rgb(70, 130, 180)

        E) red: 107, green: 142, blue: 35 - rgb(107,142,35)

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        <p>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </p> </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        <p>
        You can make over sixteen million different colors with RGB color mixing.
        </p>

        </details>
        </div>
      CSD U2 RGB intro_2019: |-
        # RGB Colors

        All colors, whether they have names or not, can be described by the level of red, green, and blue light it takes to make them.  This is called an RGB value (short for Red-Green-Blue).  You can use the widget on your left to try out different RGB values and see what colors they make.

        -   **Click "Run" to start the widget on the left,** and use the sliders to adjust the levels of red, green, and blue light.
        -   For each of the colors below, match it to its RGB value.

        A) red: 216, green: 191, blue: 216 - rgb(216,191,216)

        B) red: 255, green: 239, blue: 213 - rgb(255,239,213)

        C) red: 250, green: 128, blue: 114 - rgb(250,128,114)

        D) red: 70, green: 130, blue: 180 - rgb(70, 130, 180)

        E) red: 107, green: 142, blue: 35 - rgb(107,142,35)

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        <p>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </p> </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        <p>
        You can make over sixteen million different colors with RGB color mixing.
        </p>

        </details>
        </div>
      CSD U2 RGB others: |-
        # Spring and Autumn Colors

        Choose RGB values for spring and autumn colors.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you find a spring color you like, then write down the values on your activity guide.
        -   Do the same for an autumn color.   You will need the RGB values for the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary><strong>Where can I see the whole range of color types?</strong></summary>
        You can find many options for colors at <a href="http://www.w3schools.com/colors/colors_picker.asp">W3Schools - HTML Color Picker</a></details>
        <details>
        <summary><strong>Why do red and green make yellow?</strong></summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary><strong>How many colors can I make with RGB color mixing?</strong></summary>

        <p>You can make make over sixteen million different colors with RGB color mixing.</p>

        </details>
        </div>
      CSD U2 RGB others_2018: |-
        # Spring and Autumn Colors

        Choose RGB values for spring and autumn colors.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you find a spring color you like, then write down the values on your activity guide.
        -   Do the same for an autumn color.   You will need the RGB values for the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>Where can I see the whole range of color types?</strong>
        </summary>

        You can find many options for colors at <a href="http://www.w3schools.com/colors/colors_picker.asp" target="_new">W3Schools - HTML Color Picker</a>

        </details>
        <details>
        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        You can make make over sixteen million different colors with RGB color mixing.

        </details>
        </div>
      CSD U2 RGB others_2019: |-
        # Spring and Autumn Colors

        Choose RGB values for spring and autumn colors.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you find a spring color you like, then write down the values on your activity guide.
        -   Do the same for an autumn color.   You will need the RGB values for the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>Where can I see the whole range of color types?</strong>
        </summary>

        You can find many options for colors at <a href="http://www.w3schools.com/colors/colors_picker.asp" target="_new">W3Schools - HTML Color Picker</a>

        </details>
        <details>
        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        You can make make over sixteen million different colors with RGB color mixing.

        </details>
        </div>
      CSD U2 RGB summer: |-
        # Summer Color

        Find the RGB values for a summery yellow color.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you match the summery yellow at the bottom of the widget.
        -   Write the RGB values on your activity guide.  You will need them in the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary><strong>Why do red and green make yellow?</strong></summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary><strong>How many colors can I make with RGB color mixing?</strong></summary>

        <p>You can make make over sixteen million different colors with RGB color mixing.</p>

        </details>
        </div>
      CSD U2 RGB summer_2018: |-
        # Summer Color

        Find the RGB values for a summery yellow color.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you match the summery yellow at the bottom of the widget.
        -   Write the RGB values on your activity guide.  You will need them in the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        You can make make over sixteen million different colors with RGB color mixing.

        </details>
        </div>
      CSD U2 RGB summer_2019: |-
        # Summer Color

        Find the RGB values for a summery yellow color.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you match the summery yellow at the bottom of the widget.
        -   Write the RGB values on your activity guide.  You will need them in the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        You can make make over sixteen million different colors with RGB color mixing.

        </details>
        </div>
      CSD U2 RGB winter: |-
        # Winter Color

        In the next few levels, you'll be finding seasonal colors for a website.  Here, you'll need to find the RGB values for a wintery blue color.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you match the wintery blue color at the bottom of the widget.
        -   Write the RGB values on your activity guide.  You will need them in the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary><strong>How do I make a color lighter?</strong></summary>
        <p>To make a color lighter, you need to add more light (increase the level of the slider).  If you have already added the maximum amount of blue light, you will need to add more red and green light to make your blue lighter.</p></details>
        <details>
        <summary><strong>Why do red and green make yellow?</strong></summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary><strong>How many colors can I make with RGB color mixing?</strong></summary>

        <p>You can make make over sixteen million different colors with RGB color mixing.</p>

        </details>
        </div>
      CSD U2 RGB winter_2018: |-
        # Winter Color

        In the next few levels, you'll be finding seasonal colors for a website.  Here, you'll need to find the RGB values for a wintery blue color.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you match the wintery blue color at the bottom of the widget.
        -   Write the RGB values on your activity guide.  You will need them in the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>How do I make a color lighter?</strong>
        </summary>

        To make a color lighter, you need to add more light (increase the level of the slider).  If you have already added the maximum amount of blue light, you will need to add more red and green light to make your blue lighter.

        </details>
        <details>
        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        You can make make over sixteen million different colors with RGB color mixing.

        </details>
        </div>
      CSD U2 RGB winter_2019: |-
        # Winter Color

        In the next few levels, you'll be finding seasonal colors for a website.  Here, you'll need to find the RGB values for a wintery blue color.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you match the wintery blue color at the bottom of the widget.
        -   Write the RGB values on your activity guide.  You will need them in the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>How do I make a color lighter?</strong>
        </summary>

        To make a color lighter, you need to add more light (increase the level of the slider).  If you have already added the maximum amount of blue light, you will need to add more red and green light to make your blue lighter.

        </details>
        <details>
        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        You can make make over sixteen million different colors with RGB color mixing.

        </details>
        </div>
      CSD U2 add content: "# HTML Ekle\\\r\n\n\\\r\nSonra, sayfalarına HTML eklemelisin.\\\r\n\\\r
        \n\n# Bunu Yap\\\r\n\n-   Proje kılavuzunda oluşturduğun taslak sayfaları
        yapmak için oluşturduğun her yeni sayfaya HTML ekle.\\\r\n-   Daha fazla HTML'i
        daha önce oluşturduğunuz sayfalara ekleyebilirsiniz. \\\r"
      CSD U2 add content_2018: "# HTML Ekle\\\r\n\n\\\r\nSonra, sayfalarına HTML eklemelisin.\\\r\n\\\r
        \n\n# Bunu Yap\\\r\n\n-   Proje kılavuzunda oluşturduğun taslak sayfaları
        yapmak için oluşturduğun her yeni sayfaya HTML ekle.\\\r\n-   Daha fazla HTML'i
        daha önce oluşturduğunuz sayfalara ekleyebilirsiniz. \\\r"
      CSD U2 add content_2019: "# HTML Ekle\\\r\n\n\\\r\nSonra, sayfalarına HTML eklemelisin.\\\r\n\\\r
        \n\n# Bunu Yap\\\r\n\n-   Proje kılavuzunda oluşturduğun taslak sayfaları
        yapmak için oluşturduğun her yeni sayfaya HTML ekle.\\\r\n-   Daha fazla HTML'i
        daha önce oluşturduğunuz sayfalara ekleyebilirsiniz. \\\r"
      CSD U2 add file: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What is a style sheet?</strong></summary>
        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.
        </details>
        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        <details>
        <summary><strong>How do I create a new style sheet?</strong></summary>
        To create a new style sheet, click on the "Add CSS" button above the code area.
        </details>
        <details>
        <summary><strong>What should I name my style sheet?</strong></summary>

        You can name your style sheet anything, but it's better to choose a relevant name, such as "style.css" or "aboutmestyles.css" so that it's clear what the file is.  Your file should always end in the ".css" extension.

        </details>
        <details>
        <summary><strong>How do I rename a file?</strong></summary>

        To rename a file, you can right click (or control click) on the file name and choose the "Rename" option.  This will allow you to type in a new file name.  Clicking on a file name after it is already highlighted will also allow you to rename the file.

        </details>
        <details>
        <summary><strong>How do I add a style sheet to a web page?</strong></summary>

        To add a style sheet to a web page, open up the code for the web page.  Inside the head tag, add the following code `<link rel="stylesheet" href="style.css">`.  Then change "style.css" to the name of your style sheet.

        </details>
        </div>

        # Adding a Style Sheet

        This is your project from before.  In the next level, you'll have a chance to add some different styles to it, but first, you need to add a style sheet, name it, and link it to your html page.

        1.  Create a new style sheet for your project.
        2.  Rename the style sheet file.
        3.  Add your style sheet to your HTML page.

        <img src="https://cdo-curriculum.s3.amazonaws.com/media/uploads/weblab_stylesheet.png" style=" max-width:500px">
      CSD U2 add file_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What is a style sheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        <details>
        <summary>
        <strong>How do I create a new style sheet?</strong>
        </summary>
        To create a new style sheet, click on the "Add CSS" button above the code area.
        </details>
        <details>
        <summary>
        <strong>What should I name my style sheet?</strong>
        </summary>
        You can name your style sheet anything, but it's better to choose a relevant name, such as "style.css" or "aboutmestyles.css" so that it's clear what the file is.  Your file should always end in the ".css" extension.
        </details>
        <details>
        <summary>
        <strong>How do I rename a file?</strong>
        </summary>
        To rename a file, you can right click (or control click) on the file name and choose the "Rename" option.  This will allow you to type in a new file name.  Clicking on a file name after it is already highlighted will also allow you to rename the file.
        </details>
        <details>
        <summary>
        <strong>How do I add a style sheet to a web page?</strong>
        </summary>

        To add a style sheet to a web page, open up the code for the web page.  Inside the head tag, add the following code `<link rel="stylesheet" href="style.css">`.  Then change "style.css" to the name of your style sheet.

        </details>
        </div>

        # Adding a Style Sheet

        This is your project from before.  In the next level, you'll have a chance to add some different styles to it, but first, you need to add a style sheet, name it, and link it to your html page.

        1.  Create a new style sheet for your project.
        2.  Rename the style sheet file.
        3.  Add your style sheet to your HTML page.

        <img src="https://cdo-curriculum.s3.amazonaws.com/media/uploads/weblab_stylesheet.png" style=" max-width:500px">
      CSD U2 add file_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        ::: details [**What is a style sheet?**]

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.
        :::

        ::: details [**What is CSS?**]

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

            h2 {
               color: blue;
               font-family: cursive;

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.
        :::

        ::: details [**How do I create a new style sheet?**]
        To create a new style sheet, click on the "Add CSS" button above the code area.
        :::

        ::: details [**What should I name my style sheet?**]
        You can name your style sheet anything, but it's better to choose a relevant name, such as "style.css" or "aboutmestyles.css" so that it's clear what the file is.  Your file should always end in the ".css" extension.
        :::

        ::: details [**How do I rename a file?**]
        To rename a file, you can right click (or control click) on the file name and choose the "Rename" option.  This will allow you to type in a new file name.  Clicking on a file name after it is already highlighted will also allow you to rename the file.
        :::

        ::: details [**How do I add a style sheet to a web page?**]

        To add a style sheet to a web page, open up the code for the web page.  Inside the head tag, add the following code `<link rel="stylesheet" href="style.css">`.  Then change "style.css" to the name of your style sheet.

        :::

        </div>

        # Adding a Style Sheet

        This is your project from before.  In the next level, you'll have a chance to add some different styles to it, but first, you need to add a style sheet, name it, and link it to your html page.

        1.  Create a new style sheet for your project.
        2.  Rename the style sheet file.
        3.  Add your style sheet to your HTML page.

        <img src="https://cdo-curriculum.s3.amazonaws.com/media/uploads/weblab_stylesheet.png" style=" max-width:500px">
      CSD U2 add style_2019: |-
        # Try it out!

        Now that you've seen some different ways to style, it's time to try it out yourself.  Here's a web page you've seen before, but it needs some style!

        # Do This

        -   Give the webpage a background color.
        -   Put more space around the images.
        -   Make all of the text a different color.
        -   Add any other styles you want.
      CSD U2 challenge: "# Zorlu Görev\\\r\n\n\\\r\nBu zorlu göreve başlamadan önce
        öğretmenin ile birlikte kontrol et.\\\r\n\\\r\nBu sayfa yalnızca kısmen bitmiş
        ve bazı hatalar var.  Neyse ki, yazarın amaçladığı gibi bitirmene yardımcı
        olacak yorumlar var. \\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\n\n-   Koda bak
        ve ortağın ile birlikte sayfanın nasıl görünmesi gerektiğini tartış. \\\r\n-
        \  Sayfayı bitirmek için ortağın ile birlikte çalış, biçimlendirmeye dikkat
        edin. \\\r\n-   Başka bir çift ile sayfalarınızı aynı olup olmadığını öğrenmek
        için karşılaştırın. \\\r\n    \\\r"
      CSD U2 challenge_2018: "# Zorlu Görev\\\r\n\n\\\r\nBu zorlu göreve başlamadan
        önce öğretmenin ile birlikte kontrol et.\\\r\n\\\r\nBu sayfa yalnızca kısmen
        bitmiş ve bazı hatalar var.  Neyse ki, yazarın amaçladığı gibi bitirmene yardımcı
        olacak yorumlar var. \\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\n\n-   Koda bak
        ve ortağın ile birlikte sayfanın nasıl görünmesi gerektiğini tartış. \\\r\n-
        \  Sayfayı bitirmek için ortağın ile birlikte çalış, biçimlendirmeye dikkat
        edin. \\\r\n-   Başka bir çift ile sayfalarınızı aynı olup olmadığını öğrenmek
        için karşılaştırın. \\\r\n    \\\r"
      CSD U2 challenge_2019: "# Zorlu Görev\\\r\n\n\\\r\nBu zorlu göreve başlamadan
        önce öğretmenin ile birlikte kontrol et.\\\r\n\\\r\nBu sayfa yalnızca kısmen
        bitmiş ve bazı hatalar var.  Neyse ki, yazarın amaçladığı gibi bitirmene yardımcı
        olacak yorumlar var. \\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\n\n-   Koda bak
        ve ortağın ile birlikte sayfanın nasıl görünmesi gerektiğini tartış. \\\r\n-
        \  Sayfayı bitirmek için ortağın ile birlikte çalış, biçimlendirmeye dikkat
        edin. \\\r\n-   Başka bir çift ile sayfalarınızı aynı olup olmadığını öğrenmek
        için karşılaştırın. \\\r\n    \\\r"
      CSD U2 classes modify: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>

        </summary>
        For the code to work, you need to both create a winter class and add elements to the class.

        The class is created in the style sheet, with the following code.

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        This code creates a class called `winter` and makes everything in the class our winter blue, which has the RGB values of (195,230,255).

        The code that adds a `h5` element to the winter class is `<h5 class="winter">`.  The `class=winter` inside the opening tag adds everything inside the tag to the class.

        </details>
        <details>
        <summary>
        <strong>What rules can be added to a class rule-set?</strong>

        </summary>

        A class rule-set can have the same rules as any other type of selector.  If a rule does not apply to the content of the class (for example, using `font-size` on an element with no text), then the computer will ignore that rule, but still use the rules that work.

        </details>
        <details>
        <summary>
        <strong>Why does the selector have a period in front of it?</strong>

        </summary>
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        </details>
        <details>
        <summary>
        <strong>Why would a web developer use classes?</strong>

        </summary>
        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.
        </details>
        <details>
        <summary>
        <strong>I got different RGB values, but mine are right, too.</strong>

        </summary>

        Because RGB creates millions of different colors, some are so similar that people have a hard time telling them apart.  That means that there are multiple RGB values that are close enough to work for our winter color.

        </details>
        </div>

        # Adding Rules

        Your winter words should all have the same color and font.

        -   Find the CSS rule-set in the style sheet that gives the winter words their style.
        -   Add a rule that changes the font of the winter words.  It can be any font, but it will need to be different from that of the other three seasons.
        -   Add any other rules you'd like for your winter words.
      CSD U2 classes modify_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>
        For the code to work, you need to both create a winter class and add elements to the class.

        The class is created in the style sheet, with the following code.

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        This code creates a class called `winter` and makes everything in the class our winter blue, which has the RGB values of (195,230,255).

        The code that adds a `h5` element to the winter class is `<h5 class="winter">`.  The `class=winter` inside the opening tag adds everything inside the tag to the class.

        </details>
        <details>

        <summary>
        <strong>What rules can be added to a class rule-set?</strong>
        </summary>

        A class rule-set can have the same rules as any other type of selector.  If a rule does not apply to the content of the class (for example, using `font-size` on an element with no text), then the computer will ignore that rule, but still use the rules that work.

        </details>
        <details>
        <summary>
        <strong>Why does the selector have a period in front of it?</strong>
        </summary>
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        </details>
        <details>
        <summary>
        <strong>Why would a web developer use classes?</strong>
        </summary>
        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.
        </details>
        <details>
        <summary>
        <strong>I got different RGB values, but mine are right, too.</strong>
        </summary>

        Because RGB creates millions of different colors, some are so similar that people have a hard time telling them apart.  That means that there are multiple RGB values that are close enough to work for our winter color.

        </details>
        </div>

        # Adding Rules

        Your winter words should all have the same color and font.

        -   Find the CSS rule-set in the style sheet that gives the winter words their style.
        -   Add a rule that changes the font of the winter words.  It can be any font, but it will need to be different from that of the other three seasons.
        -   Add any other rules you'd like for your winter words.
      CSD U2 classes modify_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        ::: details [**How does the code work?**]
        For the code to work, you need to both create a winter class and add elements to the class.

        The class is created in the style sheet, with the following code.

            .winter {
              color: rgb(195,230,255);
            }

        This code creates a class called `winter` and makes everything in the class our winter blue, which has the RGB values of (195,230,255).

        The code that adds a `h5` element to the winter class is `<h5 class="winter">`.  The `class=winter` inside the opening tag adds everything inside the tag to the class.
        :::

        ::: details [**What rules can be added to a class rule-set?**]

        A class rule-set can have the same rules as any other type of selector.  If a rule does not apply to the content of the class (for example, using `font-size` on an element with no text), then the computer will ignore that rule, but still use the rules that work.

        :::

        ::: details [**Why does the selector have a period in front of it?**]
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        :::

        ::: details [**Why would a web developer use classes?**]
        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.
        :::

        ::: details [**I got different RGB values, but mine are right, too.**]

        Because RGB creates millions of different colors, some are so similar that people have a hard time telling them apart.  That means that there are multiple RGB values that are close enough to work for our winter color.

        :::

        </div>

        # Adding Rules

        Your winter words should all have the same color and font.

        -   Find the CSS rule-set in the style sheet that gives the winter words their style.
        -   Add a rule that changes the font of the winter words.  It can be any font, but it will need to be different from that of the other three seasons.
        -   Add any other rules you'd like for your winter words.
      CSD U2 classes sample: "<div style=\"float: right; height: 250px; width: 40%;
        overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>How
        does the code work?</strong>\n</summary>\nFor the code to work, you need to
        both create a winter class and add elements to the class.\n\nThe class is
        created in the style sheet, with the following code.\n\n<pre>.winter {\n  color:
        rgb(195,230,255);\n}</pre>\n\nThis code creates a class called `winter` and
        makes everything in the class our winter blue, which has the RGB values of
        (195,230,255).\n\nThe code that adds a `h5` element to the winter class is
        `<h5 class=\"winter\">`.  The `class=winter` inside the opening tag adds everything
        inside the tag to the class.\n\n</details>\n<details>\n<summary>\n<strong>Why
        does the selector have a period in front of it?</strong>\n\n</summary>\nIn
        CSS, a period in front of a selector means that the selector is the name of
        a class.  If there is no period, it means that the selector is the name of
        an HTML tag.\n</details>\n<details>\n<summary>\n<strong>Why would a web developer
        use classes?</strong>\n\n</summary>\nA web developer uses classes when some
        elements should be styled differently than others, even if they are the same
        tag.  Classes can also be used to give elements that have different tags the
        same style.\n</details>\n<details>\n<summary>\n<strong>I got different RGB
        values, but mine are right, too.</strong>\n\n</summary>\n\nBecause RGB creates
        millions of different colors, some are so similar that people have a hard
        time telling them apart.  That means that there are multiple RGB values that
        are close enough to work for our winter color.\n\n</details>\n</div>\n\n#
        Classes\n\nIn this page, the web developer has used classes to give some of
        the words our winter color.\n\n-   Look at the HTML code for the winter words.
        \ Why is \"snowy\" the only winter word without the winter color?\n-   Add
        code to the HTML that will give \"snowy\" the same winter blue as the other
        words.\n-   Look inside the style sheet to find the rule that makes all the
        words in the winter class blue, and check whether your RGB numbers are close
        to the ones in the style sheet.  \n-   Discuss with your partner how the code
        works."
      CSD U2 classes sample_2018: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>How
        does the code work?</strong>\n</summary>\nFor the code to work, you need to
        both create a winter class and add elements to the class.\n\nThe class is
        created in the style sheet, with the following code.\n\n<pre>.winter {\n  color:
        rgb(195,230,255);\n}</pre>\n\nThis code creates a class called `winter` and
        makes everything in the class our winter blue, which has the RGB values of
        (195,230,255).\n\nThe code that adds a `h5` element to the winter class is
        `<h5 class=\"winter\">`.  The `class=winter` inside the opening tag adds everything
        inside the tag to the class.\n\n</details>\n<details>\n<summary>\n<strong>Why
        does the selector have a period in front of it?</strong>\n</summary>\nIn CSS,
        a period in front of a selector means that the selector is the name of a class.
        \ If there is no period, it means that the selector is the name of an HTML
        tag.\n</details>\n<details>\n<summary>\n<strong>Why would a web developer
        use classes?</strong>\n</summary>\nA web developer uses classes when some
        elements should be styled differently than others, even if they are the same
        tag.  Classes can also be used to give elements that have different tags the
        same style.\n</details>\n<details>\n<summary>\n<strong>I got different RGB
        values, but mine are right, too.</strong>\n</summary>\n\nBecause RGB creates
        millions of different colors, some are so similar that people have a hard
        time telling them apart.  That means that there are multiple RGB values that
        are close enough to work for our winter color.\n\n</details>\n</div>\n\n#
        Classes\n\nIn this page, the web developer has used classes to give some of
        the words our winter color.\n\n-   Look at the HTML code for the winter words.
        \ Why is \"snowy\" the only winter word without the winter color?\n-   Add
        code to the HTML that will give \"snowy\" the same winter blue as the other
        words.\n-   Look inside the style sheet to find the rule that makes all the
        words in the winter class blue, and check whether your RGB numbers are close
        to the ones in the style sheet.  \n-   Discuss with your partner how the code
        works."
      CSD U2 classes sample_2019: "<div class=\"no-pullthrough\" style=\"float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n\n::: details [**How does the code work?**]\nFor the code
        to work, you need to both create a winter class and add elements to the class.\n\nThe
        class is created in the style sheet, with the following code.\n\n    .winter
        {\n      color: rgb(195,230,255);\n    }\n\nThis code creates a class called
        `winter` and makes everything in the class our winter blue, which has the
        RGB values of (195,230,255).\n\nThe code that adds a `h5` element to the winter
        class is `<h5 class=\"winter\">`.  The `class=winter` inside the opening tag
        adds everything inside the tag to the class.\n:::\n\n::: details [**Why does
        the selector have a period in front of it?**]\nIn CSS, a period in front of
        a selector means that the selector is the name of a class.  If there is no
        period, it means that the selector is the name of an HTML tag.\n:::\n\n:::
        details [**Why would a web developer use classes?**]\nA web developer uses
        classes when some elements should be styled differently than others, even
        if they are the same tag.  Classes can also be used to give elements that
        have different tags the same style.\n:::\n\n::: details [**I got different
        RGB values, but mine are right, too.**]\n\nBecause RGB creates millions of
        different colors, some are so similar that people have a hard time telling
        them apart.  That means that there are multiple RGB values that are close
        enough to work for our winter color.\n\n:::\n\n</div>\n\n# Classes\n\nIn this
        page, the web developer has used classes to give some of the words our winter
        color.\n\n-   Look at the HTML code for the winter words.  Why is \"snowy\"
        the only winter word without the winter color?\n-   Add code to the HTML that
        will give \"snowy\" the same winter blue as the other words.\n-   Look inside
        the style sheet to find the rule that makes all the words in the winter class
        blue, and check whether your RGB numbers are close to the ones in the style
        sheet.  \n-   Discuss with your partner how the code works."
      CSD U2 classes spring: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>

        </summary>
        For the code to work, you need to both create a spring class and add elements to the class.

        The spring class is already created in the style sheet, but it doesn't have any rules.

        <pre>.spring {
          color: rgb(195,230,255);
        }</pre>

        Look at the rules in the `winter` class for clues to how to make rules for the summer class.

        You will also need to add some elements to the spring class inside your HTML file.

        The code in the HTML file that adds a `h5` element to the winter class is `<h5 class="winter">`.  Use this pattern to add elements to the spring class, too.

        </details>
        <details>
        <summary>
        <strong>What rules can be added to a class rule-set?</strong>

        </summary>

        A class rule-set can have the same rules as any other type of selector.  If a rule does not apply to the content of the class (for example, using `font-size` on an element with no text), then the computer will ignore that rule, but still use the rules that work.

        </details>
        <details>
        <summary>
        <strong>Why does the selector have a period in front of it?</strong>

        </summary>
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        </details>
        <details>
        <summary>
        <strong>Why would a web developer use classes?</strong>

        </summary>

        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.

        </details>
        </div>

        # Spring Class

        Now that your winter class is ready, you can start on the other seasons.

        -   Find the empty CSS rule-set in the style sheet that gives the spring words their style.
        -   Add two rules, one to give the text your spring color for earlier in the lesson, and another to give the text a different font, font size, or decoration.
        -   Add the spring class to the spring elements in the HTML page.
      CSD U2 classes spring_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>
        For the code to work, you need to both create a spring class and add elements to the class.

        The spring class is already created in the style sheet, but it doesn't have any rules.

        <pre>.spring {
          color: rgb(195,230,255);
        }</pre>

        Look at the rules in the `winter` class for clues to how to make rules for the summer class.

        You will also need to add some elements to the spring class inside your HTML file.

        The code in the HTML file that adds a `h5` element to the winter class is `<h5 class="winter">`.  Use this pattern to add elements to the spring class, too.

        </details>
        <details>
        <summary>
        <strong>What rules can be added to a class rule-set?</strong>
        </summary>

        A class rule-set can have the same rules as any other type of selector.  If a rule does not apply to the content of the class (for example, using `font-size` on an element with no text), then the computer will ignore that rule, but still use the rules that work.

        </details>
        <details>
        <summary>
        <strong>Why does the selector have a period in front of it?</strong>
        </summary>
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        </details>
        <details>
        <summary>
        <strong>Why would a web developer use classes?</strong>
        </summary>

        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.

        </details>
        </div>

        # Spring Class

        Now that your winter class is ready, you can start on the other seasons.

        -   Find the empty CSS rule-set in the style sheet that gives the spring words their style.
        -   Add two rules, one to give the text your spring color for earlier in the lesson, and another to give the text a different font, font size, or decoration.
        -   Add the spring class to the spring elements in the HTML page.
      CSD U2 classes spring_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        ::: details [**How does the code work?**]
        For the code to work, you need to both create a spring class and add elements to the class.

        The spring class is already created in the style sheet, but it doesn't have any rules.

            .spring {
              color: rgb(195,230,255);
            }

        Look at the rules in the `winter` class for clues to how to make rules for the summer class.

        You will also need to add some elements to the spring class inside your HTML file.

        The code in the HTML file that adds a `h5` element to the winter class is `<h5 class="winter">`.  Use this pattern to add elements to the spring class, too.
        :::

        ::: details [**What rules can be added to a class rule-set?**]

        A class rule-set can have the same rules as any other type of selector.  If a rule does not apply to the content of the class (for example, using `font-size` on an element with no text), then the computer will ignore that rule, but still use the rules that work.
        :::

        ::: details [**Why does the selector have a period in front of it?**]
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        :::

        ::: details [**Why would a web developer use classes?**]

        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.

        :::

        </div>

        # Spring Class

        Now that your winter class is ready, you can start on the other seasons.

        -   Find the empty CSS rule-set in the style sheet that gives the spring words their style.
        -   Add two rules, one to give the text your spring color for earlier in the lesson, and another to give the text a different font, font size, or decoration.
        -   Add the spring class to the spring elements in the HTML page.
      CSD U2 classes summer: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>

        </summary>
        For the code for the winter class to work, it needs to both create a winter class and add elements to the class.

        The class is created in the style sheet, with the following code.

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        This code creates a class called `winter` and makes everything in the class our winter blue, which has the RGB values of (195,230,255).

        The code that adds a `h5` element to the winter class is `<h5 class="winter">`.  The `class=winter` inside the opening tag adds everything inside the tag to the class.

        </details>
        <details>
        <summary>
        <strong>How do I create a new rule-set?</strong>

        </summary>
        You can create a new rule-set by following the pattern that the `winter` and `spring` classes used in the style sheet.
        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        The selector name and the color values will be different, but the following pattern is always the same.

        <pre>.classname {
          property1: value1;
          property2: value2;
        }</pre>

        </details>
        <details>
        <summary>
        <strong>Why does the selector have a period in front of it?</strong>

        </summary>
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        </details>
        <details>
        <summary>
        <strong>Why would a web developer use classes?</strong>

        </summary>

        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.

        </details>
        </div>

        # Summer and Autumn Classes

        -   Inside the style sheet, create a new rule-set for a "summer" class.
        -   Add a rule to set the text in the summer class to your summer RGB color.
        -   Add the summer class to the summer elements in the HTML page.
        -   Do the same for the autumn class.
      CSD U2 classes summer_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>
        For the code for the winter class to work, it needs to both create a winter class and add elements to the class.

        The class is created in the style sheet, with the following code.

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        This code creates a class called `winter` and makes everything in the class our winter blue, which has the RGB values of (195,230,255).

        The code that adds a `h5` element to the winter class is `<h5 class="winter">`.  The `class=winter` inside the opening tag adds everything inside the tag to the class.

        </details>
        <details>
        <summary>
        <strong>How do I create a new rule-set?</strong>
        </summary>

        You can create a new rule-set by following the pattern that the `winter` and `spring` classes used in the style sheet.

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        The selector name and the color values will be different, but the following pattern is always the same.

        <pre>.classname {
          property1: value1;
          property2: value2;
        }</pre>

        </details>
        <details>
        <summary>
        <strong>Why does the selector have a period in front of it?</strong>
        </summary>
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        </details>
        <details>
        <summary>
        <strong>Why would a web developer use classes?</strong>
        </summary>

        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.

        </details>
        </div>

        # Summer and Autumn Classes

        -   Inside the style sheet, create a new rule-set for a "summer" class.
        -   Add a rule to set the text in the summer class to your summer RGB color.
        -   Add the summer class to the summer elements in the HTML page.
        -   Do the same for the autumn class.
      CSD U2 classes summer_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        ::: details [**How does the code work?**]
        For the code for the winter class to work, it needs to both create a winter class and add elements to the class.

        The class is created in the style sheet, with the following code.

            .winter {
              color: rgb(195,230,255);
            }

        This code creates a class called `winter` and makes everything in the class our winter blue, which has the RGB values of (195,230,255).

        The code that adds a `h5` element to the winter class is `<h5 class="winter">`.  The `class=winter` inside the opening tag adds everything inside the tag to the class.
        :::

        ::: details [**How do I create a new rule-set?**]

        You can create a new rule-set by following the pattern that the `winter` and `spring` classes used in the style sheet.

            .winter {
              color: rgb(195,230,255);
            }

        The selector name and the color values will be different, but the following pattern is always the same.

            .classname {
              property1: value1;
              property2: value2;
            }

        :::

        ::: details [**Why does the selector have a period in front of it?**]
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        :::

        ::: details [**Why would a web developer use classes?**]

        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.

        :::

        </div>

        # Summer and Autumn Classes

        -   Inside the style sheet, create a new rule-set for a "summer" class.
        -   Add a rule to set the text in the summer class to your summer RGB color.
        -   Add the summer class to the summer elements in the HTML page.
        -   Do the same for the autumn class.
      CSD U2 commenting: "# Yorumlar\\\r\n\n<div style=\"float: right; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">
        \r\n<details>\r\n<summary>**Beyaz Alan nedir?**</summary>\r\nBeyaz alan, ekrandaki
        boşluk, sekme veya yeni bir satır gibiherhangi bir karakteri ifade eder. Beyaz
        alan belgenin farklı bölümlere ayrılmasına yardımcı olarak daha kolay okunmasını
        sağlar. Örneğin, HTML kodunda yeni öğeler genellikle yeni bir satırda konur;
        buna rağmen sayfanın  görünümünü değiştirmez.\r\n</details> \r\n<details>\r\n<summary>**
        Girinti nedir? **</summary> \r \nGirinti, metni etrafını çevreleyen metinden
        ayırmak sağdan veya soldan bırakılan boşluktur. Girinti programın yapısını
        oluşturmaya yardımcı olur.  HTML'de, diğer ögelerin içindeki ögeler genellikle
        girintilenir.  İşte bir örnek:\r \n<pre>\r \n &lt; body &gt; \r \n    &lt;
        p &gt; Bu paragraf \"body\" ögesinin içindedir. &lt; /p&gt;\r\n   &lt; / body&gt;
        \r\n</pre>\r\n\r\n</details>\r\n<details>\r\n<summary>** Biçimlendirme nedir?
        **</summary> \r \nBiçimlendirme, metnin daha anlaşılır olacak şekilde düzenlenmesidir.
        \ HTML genellikle girintiler kullanılarak biçimlendirilir.  Bunun anlamı,
        ögelerin İçindeki diğer ögeler sağa ötelenerek kodun için de yer alır.  İşte
        bir örnek: \r \n<pre>\r\n &lt; body &gt; \r\n     &lt; p &gt; Bu paragraf
        \"body\" ögesinin içindedir.&lt;/p&gt;\r \n &lt; / body &gt; \r\n</pre>\r\n</details>\r\n</div>\r\n\r\nKodun
        farklı bölümlerini ve ne oluşturduğunu açıklamak için kodunuza **yorumlar**
        ekleyebilirsiniz.   Yorumlar size hata ayıklamak için yardımcı olabilir ve
        kodu anlamaya çalışan diğer kişilere de yardımcı olacaktır. \r\n\r \n<pre>\r\n&lt;!--\nBu
        bir yorum --&gt;\r\n</pre>\r\n\r # Bunu yap\r\n\r\n*Ortağınızla birlikte koda
        bakın ve yorumları bulun. \r\n* HTML içindeki hataları düzeltmeye yardımcı
        olması için yorumları kullanın."
      CSD U2 commenting_2018: "# Yorumlar\\\r\n\n<div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\"> \r\n<details>\r\n<summary>**Beyaz Alan nedir?**</summary>\r\nBeyaz
        alan, ekrandaki boşluk, sekme veya yeni bir satır gibiherhangi bir karakteri
        ifade eder. Beyaz alan belgenin farklı bölümlere ayrılmasına yardımcı olarak
        daha kolay okunmasını sağlar. Örneğin, HTML kodunda yeni öğeler genellikle
        yeni bir satırda konur; buna rağmen sayfanın  görünümünü değiştirmez.\r\n</details>
        \r\n<details>\r\n<summary>** Girinti nedir? **</summary> \r \nGirinti, metni
        etrafını çevreleyen metinden ayırmak sağdan veya soldan bırakılan boşluktur.
        Girinti programın yapısını oluşturmaya yardımcı olur.  HTML'de, diğer ögelerin
        içindeki ögeler genellikle girintilenir.  İşte bir örnek:\r \n<pre>\r \n &lt;
        body &gt; \r \n    &lt; p &gt; Bu paragraf \"body\" ögesinin içindedir. &lt;
        /p&gt;\r\n   &lt; / body&gt; \r\n</pre>\r\n\r\n</details>\r\n<details>\r\n<summary>**
        Biçimlendirme nedir? **</summary> \r \nBiçimlendirme, metnin daha anlaşılır
        olacak şekilde düzenlenmesidir.  HTML genellikle girintiler kullanılarak biçimlendirilir.
        \ Bunun anlamı, ögelerin İçindeki diğer ögeler sağa ötelenerek kodun için
        de yer alır.  İşte bir örnek: \r \n<pre>\r\n &lt; body &gt; \r\n     &lt;
        p &gt; Bu paragraf \"body\" ögesinin içindedir.&lt;/p&gt;\r \n &lt; / body
        &gt; \r\n</pre>\r\n</details>\r\n</div>\r\n\r\nKodun farklı bölümlerini ve
        ne oluşturduğunu açıklamak için kodunuza **yorumlar** ekleyebilirsiniz.   Yorumlar
        size hata ayıklamak için yardımcı olabilir ve kodu anlamaya çalışan diğer
        kişilere de yardımcı olacaktır. \r\n\r \n<pre>\r\n&lt;!--\nBu bir yorum --&gt;\r\n</pre>\r\n\r
        # Bunu yap\r\n\r\n*Ortağınızla birlikte koda bakın ve yorumları bulun. \r\n*
        HTML içindeki hataları düzeltmeye yardımcı olması için yorumları kullanın."
      CSD U2 commenting_2019: "# Yorumlar\\\r\n\n<div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\"> \r\n<details>\r\n<summary>**Beyaz Alan nedir?**</summary>\r\nBeyaz
        alan, ekrandaki boşluk, sekme veya yeni bir satır gibiherhangi bir karakteri
        ifade eder. Beyaz alan belgenin farklı bölümlere ayrılmasına yardımcı olarak
        daha kolay okunmasını sağlar. Örneğin, HTML kodunda yeni öğeler genellikle
        yeni bir satırda konur; buna rağmen sayfanın  görünümünü değiştirmez.\r\n</details>
        \r\n<details>\r\n<summary>** Girinti nedir? **</summary> \r \nGirinti, metni
        etrafını çevreleyen metinden ayırmak sağdan veya soldan bırakılan boşluktur.
        Girinti programın yapısını oluşturmaya yardımcı olur.  HTML'de, diğer ögelerin
        içindeki ögeler genellikle girintilenir.  İşte bir örnek:\r \n<pre>\r \n &lt;
        body &gt; \r \n    &lt; p &gt; Bu paragraf \"body\" ögesinin içindedir. &lt;
        /p&gt;\r\n   &lt; / body&gt; \r\n</pre>\r\n\r\n</details>\r\n<details>\r\n<summary>**
        Biçimlendirme nedir? **</summary> \r \nBiçimlendirme, metnin daha anlaşılır
        olacak şekilde düzenlenmesidir.  HTML genellikle girintiler kullanılarak biçimlendirilir.
        \ Bunun anlamı, ögelerin İçindeki diğer ögeler sağa ötelenerek kodun için
        de yer alır.  İşte bir örnek: \r \n<pre>\r\n &lt; body &gt; \r\n     &lt;
        p &gt; Bu paragraf \"body\" ögesinin içindedir.&lt;/p&gt;\r \n &lt; / body
        &gt; \r\n</pre>\r\n</details>\r\n</div>\r\n\r\nKodun farklı bölümlerini ve
        ne oluşturduğunu açıklamak için kodunuza **yorumlar** ekleyebilirsiniz.   Yorumlar
        size hata ayıklamak için yardımcı olabilir ve kodu anlamaya çalışan diğer
        kişilere de yardımcı olacaktır. \r\n\r \n<pre>\r\n&lt;!--\nBu bir yorum --&gt;\r\n</pre>\r\n\r
        # Bunu yap\r\n\r\n*Ortağınızla birlikte koda bakın ve yorumları bulun. \r\n*
        HTML içindeki hataları düzeltmeye yardımcı olması için yorumları kullanın."
      CSD U2 create page: "# Yen Bir Sayfa Oluştur ve Adlandır\\\r\n\n\\\r\nKodlamaya
        başlamadan önce, proje içinde ihtiyacın olan tüm sayfaların olduğundan emin
        olmalısın.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n-   Yeni bir HTML sayfası oluştur
        ve yeniden adlandır. (Nasıl olduğunu unuttuysan [Ders 6 Bulmaca 8](/s/csd2/stage/6/puzzle/8)
        bak.)\\\r \n-   Eklemek istediğiniz herhangi bir sayfa için bu işlemi yineleyin\\\r\n
        \   \\\r"
      CSD U2 create page_2018: "# Yen Bir Sayfa Oluştur ve Adlandır\\\r\n\n\\\r\nKodlamaya
        başlamadan önce, proje içinde ihtiyacın olan tüm sayfaların olduğundan emin
        olmalısın.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n-   Yeni bir HTML sayfası oluştur
        ve yeniden adlandır. (Nasıl olduğunu unuttuysan [Ders 6 Bulmaca 8](/s/csd2/stage/6/puzzle/8)
        bak.)\\\r \n-   Eklemek istediğiniz herhangi bir sayfa için bu işlemi yineleyin\\\r\n
        \   \\\r"
      CSD U2 create page_2019: "# Yen Bir Sayfa Oluştur ve Adlandır\\\r\n\n\\\r\nKodlamaya
        başlamadan önce, proje içinde ihtiyacın olan tüm sayfaların olduğundan emin
        olmalısın.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n-   Yeni bir HTML sayfası oluştur
        ve yeniden adlandır. (Nasıl olduğunu unuttuysan [Ders 6 Bulmaca 8](/s/csd2/stage/6/puzzle/8)
        bak.)\\\r \n-   Eklemek istediğiniz herhangi bir sayfa için bu işlemi yineleyin\\\r\n
        \   \\\r"
      CSD U2 header footer: "# Üst başlıklar ve alt bilgi\\\r\n\n\\\r\nHer sayfan
        için bir başlık ve alt bilgi gereklidir.\\\r\n\\\r\n\n# Bunu yap\\\r\n\n-
        \  Her sayfa için, sayfanızın adını içeren bir üst başlık ve diğer sayfalara
        erişimi sağlayan bir navigasyon barının olduğundan emin olun.  Üst başlığı
        tekrar incelemek için, [Ders 9 Kademe 3](/s/csd2/aşama/9/bulmaca/3).\\\r\n-
        \  Her sayfa için, sayfanızın telif hakkını açıklayan bir alt bilgi olduğuna
        emin olun..\\\r\n    \\\r"
      CSD U2 header footer_2018: "# Üst başlıklar ve alt bilgi\\\r\n\n\\\r\nHer sayfan
        için bir başlık ve alt bilgi gereklidir.\\\r\n\\\r\n\n# Bunu yap\\\r\n\n-
        \  Her sayfa için, sayfanızın adını içeren bir üst başlık ve diğer sayfalara
        erişimi sağlayan bir navigasyon barının olduğundan emin olun.  Üst başlığı
        tekrar incelemek için, [Ders 9 Kademe 3](/s/csd2/aşama/9/bulmaca/3).\\\r\n-
        \  Her sayfa için, sayfanızın telif hakkını açıklayan bir alt bilgi olduğuna
        emin olun..\\\r\n    \\\r"
      CSD U2 header footer_2019: "# Üst başlıklar ve alt bilgi\\\r\n\n\\\r\nHer sayfan
        için bir başlık ve alt bilgi gereklidir.\\\r\n\\\r\n\n# Bunu yap\\\r\n\n-
        \  Her sayfa için, sayfanızın adını içeren bir üst başlık ve diğer sayfalara
        erişimi sağlayan bir navigasyon barının olduğundan emin olun.  Üst başlığı
        tekrar incelemek için, [Ders 9 Kademe 3](/s/csd2/aşama/9/bulmaca/3).\\\r\n-
        \  Her sayfa için, sayfanızın telif hakkını açıklayan bir alt bilgi olduğuna
        emin olun..\\\r\n    \\\r"
      CSD U2 layout style bgcolor: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>How does the code work?</strong></summary>

        Here is the code that is making the background of the page blue:

        <pre>body {
          background-color: lightblue;
        }</pre>

        -   `body` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the body element is the entire page.
        -   `background-color: lightblue;` is the rule that makes the entire page light blue.
            -   `background-color` is the _property_.  It explains what the rule is about, in this case the color of the background.
            -   `lightblue` is the _value_.  It explains how the rule should be applied, in this case making the background light blue.
                </details>
                <details>
                <summary><strong>What colors can I use in CSS?</strong></summary>

        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools - CSS Legal Color Values</a>

        </details>
        <details>
        <summary><strong>What does the `background-color` property do?</strong></summary>

        The `background-color` property determines the color of the background of an element.  You can read more about the property at <a href="http://www.w3schools.com/cssref/pr_background-color.asp">W3Schools - CSS background-color Property</a>

        </details>
        <details>
        <summary><strong>What if an element inside the page has a different background color from the body?</strong></summary>

        You can see the answer to this question by adding a `background-color` rule to the `p` tag.  The paragraphs will have the background color in the rule for the `p` tag, and the rest of the page will follow the rule for the `body` tag.

        </details>
        <details>
        <summary><strong>What is a style sheet?</strong></summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Background Color

        -   Find the code in the style sheet that is making the background of the entire page light blue.
        -   Change the code to make the page a different color.
        -   Try to change the background color of just the paragraphs.
      CSD U2 layout style bgcolor_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>

        Here is the code that is making the background of the page blue:

        <pre>
        body {
          background-color: lightblue;
        }
        </pre>

        -   `body` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the body element is the entire page.
        -   `background-color: lightblue;` is the rule that makes the entire page light blue.
            -   `background-color` is the _property_.  It explains what the rule is about, in this case the color of the background.
            -   `lightblue` is the _value_.  It explains how the rule should be applied, in this case making the background light blue.

        </details>
        <details>
        <summary>
        <strong>What colors can I use in CSS?</strong>
        </summary>

        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp" target="_new">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp" target="_new">W3Schools - CSS Legal Color Values</a>

        </details>
        <details>
        <summary>
        <strong>What does the background-color property do?</strong>
        </summary>

        The `background-color` property determines the color of the background of an element.  You can read more about the property at <a href="http://www.w3schools.com/cssref/pr_background-color.asp" target="_new">W3Schools - CSS background-color Property</a>

        </details>
        <details>
        <summary>
        <strong>What if an element inside the page has a different background color from the body?</strong>
        </summary>

        You can see the answer to this question by adding a `background-color` rule to the `p` tag.  The paragraphs will have the background color in the rule for the `p` tag, and the rest of the page will follow the rule for the `body` tag.

        </details>
        <details>
        <summary>
        <strong>What is a style sheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>
        h2 {
          color: blue;
          font-family: cursive;
        }
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Background Color

        -   Find the code in the style sheet that is making the background of the entire page light blue.
        -   Change the code to make the page a different color.
        -   Try to change the background color of just the paragraphs.
      CSD U2 layout style bgcolor_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**How does the code work?**]

        Here is the code that is making the background of the page blue:

            body {
              background-color: lightblue;
            }

        -   `body` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the body element is the entire page.
        -   `background-color: lightblue;` is the rule that makes the entire page light blue.
            -   `background-color` is the _property_.  It explains what the rule is about, in this case the color of the background.
            -   `lightblue` is the _value_.  It explains how the rule should be applied, in this case making the background light blue.

        :::

        ::: details [**What colors can I use in CSS?**]

        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp" target="_new">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp" target="_new">W3Schools - CSS Legal Color Values</a>

        :::

        ::: details [**What does the background-color property do?**]

        The `background-color` property determines the color of the background of an element.  You can read more about the property at <a href="http://www.w3schools.com/cssref/pr_background-color.asp" target="_new">W3Schools - CSS background-color Property</a>

        :::

        ::: details [**What if an element inside the page has a different background color from the body?**]

        You can see the answer to this question by adding a `background-color` rule to the `p` tag.  The paragraphs will have the background color in the rule for the `p` tag, and the rest of the page will follow the rule for the `body` tag.

        :::

        ::: details [**What is a style sheet?**]

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        :::

        ::: details [**What is CSS?**]

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

            h2 {
              color: blue;
              font-family: cursive;
            }

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        :::

        </div>

        # Background Color

        -   Find the code in the style sheet that is making the background of the entire page light blue.
        -   Change the code to make the page a different color.
        -   Try to change the background color of just the paragraphs.
      CSD U2 layout style body: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">
        <details>

        <summary><strong>What does the `body` selector do?</strong></summary>

        Because the content of the web page is all inside the `body` tag, the body selector gives style rules for everything on the web page.

        </details>
        <details>
        <summary><strong>What does the `color` property do?</strong></summary>

        The `color` property specifies the color of the text.  If there’s no text, it won’t do anything. Read more at <a href="http://www.w3schools.com/cssref/pr_text_color.asp"> W3Schools - CSS color Property</a>

        </details>
        <details>
        <summary><strong>What does the `text-align` property do?</strong></summary>

        The `text-align` property aligns the text to the left, right, or center. You can read more at <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp">W3Schools - CSS text-align Property</a>

        </details>
        <details>
        <summary><strong>What does the `text-decoration` property do?</strong></summary>

        The `text-decoration` property puts a line over, under, or through a piece of text.  You can read more about the property at <a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp">W3Schools - CSS text-decoration Property</a>

        </details>
        <details>
        <summary><strong>What does the `font-family` property do?</strong></summary>

        The `font-family` property changes the font of the text.  It gives a general description of the type of font that should be used, but each browser might display the font slightly differently.  Read more at <a href="http://www.w3schools.com/cssref/pr_font_font-family.asp">W3chools - CSS font-family Property</a>

        </details>
        <details>
        <summary><strong>What does the `font-size` property do?</strong></summary>

        The `font-size` property changes the size of the text.  You can use general terms, such as `small`, `medium`, and `large`, or you can specify the exact size in pixels, such as `20px`. Read more at <a href="http://www.w3schools.com/cssref/pr_font_font-size.asp">W3Schools - CSS font-size Property</a>

        </details>
        <details>
        <summary><strong>What is a stylesheet?</strong></summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # The Body Element

        -   Find the `body` rule-set in the style sheet.
        -   Discuss with a partner what you think will happen if you add `text-align`, `color`, or other text properties to the `body` rule set.
        -   Try out some different properties to check your guesses.
      CSD U2 layout style body_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What does the body selector do?</strong>
        </summary>

        Because the content of the web page is all inside the `body` tag, the body selector gives style rules for everything on the web page.

        </details>
        <details>
        <summary>
        <strong>What does the color property do?</strong>
        </summary>

        The `color` property specifies the color of the text.  If there’s no text, it won’t do anything. Read more at <a href="http://www.w3schools.com/cssref/pr_text_color.asp" target="_new"> W3Schools - CSS color Property</a>

        </details>
        <details>
        <summary>
        <strong>What does the text-align property do?</strong>
        </summary>

        The `text-align` property aligns the text to the left, right, or center. You can read more at <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp" target="_new">W3Schools - CSS text-align Property</a>

        </details>
        <details>
        <summary>
        <strong>What does the text-decoration property do?</strong>
        </summary>

        The `text-decoration` property puts a line over, under, or through a piece of text.  You can read more about the property at <a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp" target="_new">W3Schools - CSS text-decoration Property</a>

        </details>
        <details>
        <summary>
        <strong>What does the font-family property do?</strong>
        </summary>

        The `font-family` property changes the font of the text.  It gives a general description of the type of font that should be used, but each browser might display the font slightly differently.  Read more at <a href="http://www.w3schools.com/cssref/pr_font_font-family.asp" target="_new">W3chools - CSS font-family Property</a>

        </details>
        <details>
        <summary>
        <strong>What does the font-size property do?</strong>
        </summary>

        The `font-size` property changes the size of the text.  You can use general terms, such as `small`, `medium`, and `large`, or you can specify the exact size in pixels, such as `20px`. Read more at <a href="http://www.w3schools.com/cssref/pr_font_font-size.asp" target="_new">W3Schools - CSS font-size Property</a>

        </details>
        <details>
        <summary>
        <strong>What is a stylesheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>
        h2 {
           color: blue;
           font-family: cursive;
        }
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # The Body Element

        -   Find the `body` rule-set in the style sheet.
        -   Discuss with a partner what you think will happen if you add `text-align`, `color`, or other text properties to the `body` rule set.
        -   Try out some different properties to check your guesses.
      CSD U2 layout style body_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**What does the body selector do?**]

        Because the content of the web page is all inside the `body` tag, the body selector gives style rules for everything on the web page.

        :::

        ::: details [**What does the color property do?**]

        The `color` property specifies the color of the text.  If there’s no text, it won’t do anything. Read more at <a href="http://www.w3schools.com/cssref/pr_text_color.asp" target="_new"> W3Schools - CSS color Property</a>

        :::

        ::: details [**What does the text-align property do?**]

        The `text-align` property aligns the text to the left, right, or center. You can read more at <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp" target="_new">W3Schools - CSS text-align Property</a>

        :::

        ::: details [**What does the text-decoration property do?**]

        The `text-decoration` property puts a line over, under, or through a piece of text.  You can read more about the property at <a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp" target="_new">W3Schools - CSS text-decoration Property</a>

        :::

        ::: details [**What does the font-family property do?**]

        The `font-family` property changes the font of the text.  It gives a general description of the type of font that should be used, but each browser might display the font slightly differently.  Read more at <a href="http://www.w3schools.com/cssref/pr_font_font-family.asp" target="_new">W3chools - CSS font-family Property</a>

        :::

        ::: details [**What does the font-size property do?**]

        The `font-size` property changes the size of the text.  You can use general terms, such as `small`, `medium`, and `large`, or you can specify the exact size in pixels, such as `20px`. Read more at <a href="http://www.w3schools.com/cssref/pr_font_font-size.asp" target="_new">W3Schools - CSS font-size Property</a>

        :::

        ::: details [**What is a stylesheet?**]

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        :::

        ::: details [**What is CSS?**]

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

            h2 {
               color: blue;
               font-family: cursive;
            }

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        :::

        </div>

        # The Body Element

        -   Find the `body` rule-set in the style sheet.
        -   Discuss with a partner what you think will happen if you add `text-align`, `color`, or other text properties to the `body` rule set.
        -   Try out some different properties to check your guesses.
      CSD U2 layout style border: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What colors can I use in CSS?</strong></summary>

        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools - CSS Legal Color Values</a>

        </details>
        <details>
        <summary><strong>How does the code work?</strong></summary>

        Here is the code that is making the image borders:

        <pre>img {
          border-color: saddlebrown;
          border-width: 4px;
          border-style: solid;
          border-radius: 10px;
        }</pre>

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;`, and `border-radius: 10px;` are the rules that make the border.
            </details>
            <details>
            <summary><strong>What does the <code>border-style</code> property do?</strong></summary>

        The `border-style` property determines what kind of border (solid, dotted, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp">W3Schools - CSS border-style Property</a>

        </details>
        <details>
        <summary><strong>What does the <code>border-radius</code> property do?</strong></summary>

        The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp">W3Schools - CSS3 border-radius property</a>

        </details>
        <details>
        <summary><strong>What does the <code>float</code> property do?</strong></summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Borders

        -   Find the rules in the style sheet that set image borders color and width.
        -   Change the color and width of your borders.
        -   Try out some different border styles.
            -   Choose from `dotted`, `dashed`, `solid`, and `double`
        -   Put a border on another type of page element, such as one of the headings or the paragraphs.
      CSD U2 layout style border_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What colors can I use in CSS?</strong>
        </summary>
        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp" target="_new">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp" target="_new">W3Schools - CSS Legal Color Values</a>
        </details>
        <details>
        <summary>
        <strong>How does the code work?</strong>
        </summary>
        Here is the code that is making the image borders:

        <pre>img {
          border-color: saddlebrown;
          border-width: 4px;
          border-style: solid;
          border-radius: 10px;
        }</pre>

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;`, and `border-radius: 10px;` are the rules that make the border.
            </details>
            <details>
            <summary>
            <strong>What does the <code>border-style</code> property do?</strong>
            </summary>
            The `border-style` property determines what kind of border (solid, dotted, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp" target="_new">W3Schools - CSS border-style Property</a>
            </details>
            <details>
            <summary>
            <strong>What does the <code>border-radius</code> property do?</strong>
            </summary>
            The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp" target="_new">W3Schools - CSS3 border-radius property</a>
            </details>
            <details>
            <summary>
            <strong>What does the <code>float</code> property do?</strong>
            </summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Borders

        -   Find the rules in the style sheet that set image borders color and width.
        -   Change the color and width of your borders.
        -   Try out some different border styles.
            -   Choose from `dotted`, `dashed`, `solid`, and `double`
        -   Put a border on another type of page element, such as one of the headings or the paragraphs.
      CSD U2 layout style border_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        ::: details [**What colors can I use in CSS?**]
        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp" target="_new">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp" target="_new">W3Schools - CSS Legal Color Values</a>
        :::

        ::: details [**How does the code work?**]
        Here is the code that is making the image borders:

            img {
              border-color: saddlebrown;
              border-width: 4px;
              border-style: solid;
              border-radius: 10px;
            }

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;`, and `border-radius: 10px;` are the rules that make the border.
            :::

        ::: details [**What does the <code>border-style</code> property do?**]
        The `border-style` property determines what kind of border (solid, dotted, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp" target="_new">W3Schools - CSS border-style Property</a>
        :::

        ::: details [**What does the <code>border-radius</code> property do?**]
        The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp" target="_new">W3Schools - CSS3 border-radius property</a>
        :::

        ::: details [**What does the `float` property do?**]

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        :::

        </div>

        # Borders

        -   Find the rules in the style sheet that set image borders color and width.
        -   Change the color and width of your borders.
        -   Try out some different border styles.
            -   Choose from `dotted`, `dashed`, `solid`, and `double`
        -   Put a border on another type of page element, such as one of the headings or the paragraphs.
      CSD U2 layout style borderradius: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>How does the code work?</strong></summary>

        Here is the code that is making the image borders:

        <pre>img {
          border-color: saddlebrown;
          border-width: 4px;
          border-style: solid;
          border-radius: 10px;
        }</pre>

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;`, and `border-radius: 10px;` are the rules that make the border.
            </details>
            <details>
            <summary><strong>What does the `border-style` property do?</strong>
            </summary>

        The `border-style` property determines what kind of border (solid, dotted, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp">W3Schools - CSS border-style Property</a>

        </details>
        <details>
        <summary><strong>What does the <code>border-radius</code>code> property do?</strong>

        </summary>

        The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp">W3Schools - CSS3 border-radius property</a>

        </details>
        <details>
        <summary><strong>What does the <code>float</code> property do?</strong>
        </summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Border Radius

        -   Look at the `border-radius` property inside your `img` rule-set
        -   Discuss with your partner what you think the property does.
        -   Try different values for border radius and decide which one you like the best.
      CSD U2 layout style borderradius_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>
        Here is the code that is making the image borders:

        <pre>img {
          border-color: saddlebrown;
          border-width: 4px;
          border-style: solid;
          border-radius: 10px;
        }</pre>

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;`, and `border-radius: 10px;` are the rules that make the border.
            </details>
            <details>
            <summary>
            <strong>What does the <code>border-style</code> property do?</strong>
            </summary>
            The `border-style` property determines what kind of border (solid, dotted, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp" target="_new">W3Schools - CSS border-style Property</a>
            </details>
            <details>
            <summary>
            <strong>What does the <code>border-radius</code> property do?</strong>
            </summary>
            The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp" target="_new">W3Schools - CSS3 border-radius property</a>
            </details>
            <details>
            <summary>
            <strong>What does the <code>float</code> property do?</strong>
            </summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Border Radius

        -   Look at the `border-radius` property inside your `img` rule-set
        -   Discuss with your partner what you think the property does.
        -   Try different values for border radius and decide which one you like the best.
      CSD U2 layout style borderradius_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        ::: details [**How does the code work?**]
        Here is the code that is making the image borders:

            img {
              border-color: saddlebrown;
              border-width: 4px;
              border-style: solid;
              border-radius: 10px;
            }

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;`, and `border-radius: 10px;` are the rules that make the border.
            :::

        ::: details [**What does the <code>border-style</code> property do?**]
        The `border-style` property determines what kind of border (solid, dotted, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp" target="_new">W3Schools - CSS border-style Property</a>
        :::

        ::: details [**What does the <code>border-radius</code> property do?**]
        The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp" target="_new">W3Schools - CSS3 border-radius property</a>
        :::

        ::: details [**What does the <code>float</code> property do?**]

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        :::

        </div>

        # Border Radius

        -   Look at the `border-radius` property inside your `img` rule-set
        -   Discuss with your partner what you think the property does.
        -   Try different values for border radius and decide which one you like the best.
      CSD U2 layout style float: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        <details>

        <summary><strong>How does the code work?</strong></summary>

        Here is the code that is making the image float on the left hand side of the page:

        <pre>img {
          float: left;
        }</pre>

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `float: left;` is the rule that makes the image float to the left.
            </details>
            <details>
            <summary><strong>What does the <code>float</code> property do?</strong></summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Float

        -   Look at the `float` property inside your `img` rule-set
        -   Discuss with your partner what you think the property does.
        -   Change the value from `left` to `right`.
      CSD U2 layout style float_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>
        Here is the code that is making the image float on the left hand side of the page:

        <pre>img {
          float: left;
        }</pre>

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `float: left;` is the rule that makes the image float to the left.
            </details>
            <details>
            <summary>
            <strong>
            What does the <code>float</code> property do?

        </strong>
        </summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Float

        -   Look at the `float` property inside your `img` rule-set
        -   Discuss with your partner what you think the property does.
        -   Change the value from `left` to `right`.
      CSD U2 layout style float_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**How does the code work?**]
        Here is the code that is making the image float on the left hand side of the page:

            img {
              float: left;
            }

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `float: left;` is the rule that makes the image float to the left.
            :::

        ::: details [**What does the `float` property do?**]

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        :::

        </div>

        # Float

        -   Look at the `float` property inside your `img` rule-set
        -   Discuss with your partner what you think the property does.
        -   Change the value from `left` to `right`.
      CSD U2 layout style freeplay: |-
        # Personal Web Site

        Try out some of these new CSS properties on your personal web site.

        -   Add styling of your choice to your web site. Be sure to use at least three new CSS properties.

        # Checklist

        -   At least three of the following CSS Properties are used:

            -   `background-color`
            -   `height`
            -   `width`
            -   `border-style`
            -   `border-radius`
            -   `border-width`
            -   `float`
            -   `margin`

        We encourage you to use more than three, though!  Explore additional CSS properties and add them to your page.
      CSD U2 layout style freeplay_2018: |-
        # Personal Web Site

        Try out some of these new CSS properties on your personal web site.

        -   Add styling of your choice to your web site. Be sure to use at least three new CSS properties.

        # Checklist

        -   At least three of the following CSS Properties are used:

            -   `background-color`
            -   `height`
            -   `width`
            -   `border-style`
            -   `border-radius`
            -   `border-width`
            -   `float`
            -   `margin`

        We encourage you to use more than three, though!  Explore additional CSS properties and add them to your page.
      CSD U2 layout style freeplay_2019: |-
        # Personal Web Site

        Try out some of these new CSS properties on your personal web site.

        -   Add styling of your choice to your web site. Be sure to use at least three new CSS properties.

        # Checklist

        -   At least three of the following CSS Properties are used:

            -   `background-color`
            -   `height`
            -   `width`
            -   `border-style`
            -   `border-radius`
            -   `border-width`
            -   `float`
            -   `margin`

        We encourage you to use more than three, though!  Explore additional CSS properties and add them to your page.
      CSD U2 layout style margin: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>How
        does the code work?</strong></summary>\n\nHere is the code that is putting
        extra space around the images:\n\n<pre>img {\n\tmargin: 10px;\n}</pre>\n\n-
        \  `img` is the _selector_.  It specifies which elements will have to follow
        the rules inside the curly braces, in this case, the images.\n-   `margin:
        10px;` is the rule that puts 10 pixels of space around the image.\n    </details>\n
        \   <details>\n    <summary><strong>What does the `margin` property do?</strong></summary>\n\nThe
        `margin` property determines how much space will be around the image.  Most
        of the time, you will define in the margin in pixels.  You can read more about
        this property at <a href=\"http://www.w3schools.com/cssref/pr_margin.asp\">W3Schools
        - CSS margin Property</a>\n\n</details>\n<details>\n<summary><strong>What
        does `px` mean / What is a pixel?</strong></summary>\n\nPixel, which is abbreviated
        `px`, is how elements are measured in CSS.  It’s the size of a single point
        of light on the screen.\n\n</details>\n</div>\n\n# Margin\n\nMargins specify
        how much space should be around an element.\n\n-   Find the `margin` property
        in the `img` rule-set.\n-   Change the margin to be larger, and discuss the
        effect with a partner.\n-   Choose another element type and give it a margin,
        too."
      CSD U2 layout style margin_2018: "<div style=\"float: right; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>How
        does the code work?</strong>\n</summary>\nHere is the code that is putting
        extra space around the images:\n\n<pre>img {\n\tmargin: 10px;\n}</pre>\n\n-
        \  `img` is the _selector_.  It specifies which elements will have to follow
        the rules inside the curly braces, in this case, the images.\n\n-   `margin:
        10px;` is the rule that puts 10 pixels of space around the image.\n    </details>\n
        \   <details>\n    <summary>\n    <strong>What does the `margin` property
        do?</strong>\n    </summary>\n\nThe `margin` property determines how much
        space will be around the image.  Most of the time, you will define in the
        margin in pixels.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_margin.asp\"
        target=\"_new\">W3Schools - CSS margin Property</a>\n\n</details>\n<details>\n<summary>\n<strong>What
        does `px` mean / What is a pixel?</strong>\n</summary>\n\nPixel, which is
        abbreviated `px`, is how elements are measured in CSS.  It’s the size of a
        single point of light on the screen.\n\n</details>\n</div>\n\n# Margin\n\nMargins
        specify how much space should be around an element.\n\n-   Find the `margin`
        property in the `img` rule-set.\n-   Change the margin to be larger, and discuss
        the effect with a partner.\n-   Choose another element type and give it a
        margin, too."
      CSD U2 layout style margin_2019: "<div class=\"no-pullthrough\" style=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n\n::: details [**How does the code work?**]\nHere is the
        code that is putting extra space around the images:\n\n    img {\n    \tmargin:
        10px;\n    }\n\n-   `img` is the _selector_.  It specifies which elements
        will have to follow the rules inside the curly braces, in this case, the images.\n\n-
        \  `margin: 10px;` is the rule that puts 10 pixels of space around the image.\n
        \   :::\n\n::: details [**What does the `margin` property do?**]\n\nThe `margin`
        property determines how much space will be around the image.  Most of the
        time, you will define in the margin in pixels.  You can read more about this
        property at <a href=\"http://www.w3schools.com/cssref/pr_margin.asp\" target=\"_new\">W3Schools
        - CSS margin Property</a>\n:::\n\n::: details [**What does `px` mean / What
        is a pixel?**]\n\nPixel, which is abbreviated `px`, is how elements are measured
        in CSS.  It’s the size of a single point of light on the screen.\n\n:::\n\n</div>\n\n#
        Margin\n\nMargins specify how much space should be around an element.\n\n-
        \  Find the `margin` property in the `img` rule-set.\n-   Change the margin
        to be larger, and discuss the effect with a partner.\n-   Choose another element
        type and give it a margin, too."
      CSD U2 layout style sample: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What does the `body` selector do?</strong></summary>

        Because the content of the web page is all inside the `body` tag, the body selector gives style rules for everything on the web page.

        </details>
        <details>
        <summary><strong>What does the `border-style` property do?</strong></summary>

        The `border-style` property determines what kind of border (solid, dotted, dashed, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp">W3Schools - CSS border-style Property</a>

        </details>
        <details>
        <summary><strong>What does the `border-radius` property do?</strong></summary>

        The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp">W3Schools - CSS3 border-radius property</a>

        </details>
        <details>
        <summary><strong>What does the `float` property do?</strong></summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Layout and Style

        -   Look through web page below for new styles.
        -   Open the style sheet
        -   With your partner, discuss which parts of the CSS code you think are making the page appear different.
            -   What makes the entire page blue?
            -   How are the images positioned to the left of all the other elements?
            -   What made the image corners rounded?

        In the next few levels, you'll be changing and adding new styles on this page.
      CSD U2 layout style sample_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What does the body selector do?</strong>
        </summary>

        Because the content of the web page is all inside the `body` tag, the body selector gives style rules for everything on the web page.

        </details>
        <details>
        <summary>
        <strong>What does the border-style property do?</strong>
        </summary>

        The `border-style` property determines what kind of border (solid, dotted, dashed, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp" target="_new">W3Schools - CSS border-style Property</a>

        </details>
        <details>
        <summary>
        <strong>What does the border-radius property do?</strong>
        </summary>

        The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp" target="_new">W3Schools - CSS3 border-radius property</a>

        </details>
        <details>
        <summary>
        <strong>What does the float property do?</strong>
        </summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Layout and Style

        -   Look through web page below for new styles.
        -   Open the style sheet
        -   With your partner, discuss which parts of the CSS code you think are making the page appear different.
            -   What makes the entire page blue?
            -   How are the images positioned to the left of all the other elements?
            -   What made the image corners rounded?

        In the next few levels, you'll be changing and adding new styles on this page.
      CSD U2 layout style sample_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**What does the body selector do?**]

        Because the content of the web page is all inside the `body` tag, the body selector gives style rules for everything on the web page.

        :::

        ::: details [**What does the border-style property do?**]

        The `border-style` property determines what kind of border (solid, dotted, dashed, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp" target="_new">W3Schools - CSS border-style Property</a>

        :::

        ::: details [**What does the border-radius property do?**]

        The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp" target="_new">W3Schools - CSS3 border-radius property</a>

        :::

        ::: details [**What does the float property do?**]

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        :::

        </div>

        # Layout and Style

        -   Look through web page below for new styles.
        -   Open the style sheet
        -   With your partner, discuss which parts of the CSS code you think are making the page appear different.
            -   What makes the entire page blue?
            -   How are the images positioned to the left of all the other elements?
            -   What made the image corners rounded?

        In the next few levels, you'll be changing and adding new styles on this page.
      CSD U2 layout style width: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>How
        does the code work?</strong></summary>\nHere is the code that is making the
        image its current size:\n\n<pre>img {\n\twidth: 250px;\n}</pre>\n\n-   `img`
        is the _selector_.  It specifies which elements will have to follow the rules
        inside the curly braces, in this case, the images.\n-   `width: 250px` is
        the rule that makes the image 250 pixels wide.  It also changes the height
        so that the image does not stretch.\n    </details>\n    <details>\n    <summary><strong>What
        does the `width` property do?</strong></summary>\n\nThe `width` property determines
        how wide the element will be.  Most of the time, you will define in the width
        in pixels, which makes the element take up an exact amount of space on the
        screen.  Defining the width will also change the height so that the image
        does not stretch, unless you have also defined the height.  You can read more
        about this property at <a href=\"http://www.w3schools.com/cssref/pr_dim_width.asp\">W3Schools
        - CSS width Property</a>\n\n</details>\n<details>\n<summary><strong>What does
        the `height` property do?</strong></summary>\n\nThe `height` property determines
        how tall the element will be.  Most of the time, you will define in the height
        in pixels, which makes the element take up an exact amount of space on the
        screen.  Defining the height will also change the width so that the image
        does not stretch, unless you have also defined the width.  You can read more
        about this property at <a href=\"http://www.w3schools.com/cssref/pr_dim_height.asp\">W3Schools
        - CSS width Property</a>\n\n</details>\n<details>\n<summary><strong>What does
        `px` mean / What is a pixel?</strong></summary>\n\nPixel, which is abbreviated
        `px`, is how elements are measured in CSS.  It’s the size of a single point
        of light on the screen.\n\n</details>\n<details>\n<summary><strong>Why does
        using a width and height rule at the same time sometimes stretch out the image?</strong></summary>\n\nWhen
        the width of an images changes, the height must change by the same percentage,
        otherwise the image will stretch.  For example, if you double the width of
        an image, you must also double the height, or the image will be stretched
        horizonally.  When you only define the width or the height, the computer will
        automatically change the other property so that the image looks the same.\n\n</details>\n</div>\n\n#
        Width and Height\n\n-   Find the property in the style sheet that controls
        the width of the images.\n-   Change the width of the images to be larger
        or smaller.\n-   Create a new rule with a `height` property to control the
        height of the images.\n-   Use the `width` property in the `p` rule-set to
        change the width of your paragraphs."
      CSD U2 layout style width_2018: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>How
        does the code work?</strong>\n</summary>\n\nHere is the code that is making
        the image its current size:\n\n    img {\n    \twidth: 250px;\n    }\n\n-
        \  `img` is the _selector_.  It specifies which elements will have to follow
        the rules inside the curly braces, in this case, the images.\n-   `width:
        250px` is the rule that makes the image 250 pixels wide.  It also changes
        the height so that the image does not stretch.\n\n</details>\n<details>\n<summary>\n<strong>What
        does the <code>width</code> property do?</strong>\n</summary>\n\nThe `width`
        property determines how wide the element will be.  Most of the time, you will
        define the width in pixels, which makes the element take up an exact amount
        of space on the screen.  Defining the width will also change the height so
        that the image does not stretch, unless you have also defined the height.
        \ You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_dim_width.asp\"
        target=\"_new\">W3Schools - CSS width Property</a>\n\n</details>\n<details>\n<summary>\n<strong>What
        does the <code>height</code> property do?</strong>\n</summary>\n\nThe `height`
        property determines how tall the element will be.  Most of the time, you will
        define the height in pixels, which makes the element take up an exact amount
        of space on the screen.  Defining the height will also change the width so
        that the image does not stretch, unless you have also defined the width.  You
        can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_dim_height.asp\"
        target=\"_new\">W3Schools - CSS height Property</a>\n\n</details>\n<details>\n<summary>\n<strong>What
        does <code>px</code> mean / What is a pixel?</strong>\n</summary>\n\nPixel,
        which is abbreviated `px`, is how elements are measured in CSS.  It’s the
        size of a single point of light on the screen.\n\n</details>\n<details>\n<summary>\n<strong>Why
        does using a width and height rule at the same time sometimes stretch out
        the image?</strong>\n</summary>\n\nWhen the width of an images changes, the
        height must change by the same percentage, otherwise the image will stretch.
        \ For example, if you double the width of an image, you must also double the
        height, or the image will be stretched horizonally.  When you only define
        the width or the height, the computer will automatically change the other
        property so that the image looks the same.\n\n</details>\n</div>\n\n# Width
        and Height\n\n-   Find the property in the style sheet that controls the width
        of the images.\n-   Change the width of the images to be larger or smaller.\n-
        \  Create a new rule with a `height` property to control the height of the
        images.\n-   Use the `width` property in the `p` rule-set to change the width
        of your paragraphs."
      CSD U2 layout style width_2019: "<div class=\"no-pullthrough\" style=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n\n:::
        details [**How does the code work?**]\n\nHere is the code that is making the
        image its current size:\n\n    img {\n    \twidth: 250px;\n    }\n\n-   `img`
        is the _selector_.  It specifies which elements will have to follow the rules
        inside the curly braces, in this case, the images.\n-   `width: 250px` is
        the rule that makes the image 250 pixels wide.  It also changes the height
        so that the image does not stretch.\n\n:::\n\n::: details [**What does the
        `width` property do?**]\n\nThe `width` property determines how wide the element
        will be.  Most of the time, you will define the width in pixels, which makes
        the element take up an exact amount of space on the screen.  Defining the
        width will also change the height so that the image does not stretch, unless
        you have also defined the height.  You can read more about this property at
        <a href=\"http://www.w3schools.com/cssref/pr_dim_width.asp\" target=\"_new\">W3Schools
        - CSS width Property</a>\n\n:::\n\n::: details [**What does the `height` property
        do?**]\n\nThe `height` property determines how tall the element will be.  Most
        of the time, you will define the height in pixels, which makes the element
        take up an exact amount of space on the screen.  Defining the height will
        also change the width so that the image does not stretch, unless you have
        also defined the width.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_dim_height.asp\"
        target=\"_new\">W3Schools - CSS height Property</a>\n\n:::\n\n::: details
        [**What does `px` mean / What is a pixel?**]\n\nPixel, which is abbreviated
        `px`, is how elements are measured in CSS.  It’s the size of a single point
        of light on the screen.\n\n:::\n\n::: details [**Why does using a width and
        height rule at the same time sometimes stretch out the image?**]\n\nWhen the
        width of an images changes, the height must change by the same percentage,
        otherwise the image will stretch.  For example, if you double the width of
        an image, you must also double the height, or the image will be stretched
        horizonally.  When you only define the width or the height, the computer will
        automatically change the other property so that the image looks the same.\n\n:::\n\n</div>\n\n#
        Width and Height\n\n-   Find the property in the style sheet that controls
        the width of the images.\n-   Change the width of the images to be larger
        or smaller.\n-   Create a new rule with a `height` property to control the
        height of the images.\n-   Use the `width` property in the `p` rule-set to
        change the width of your paragraphs."
      CSD U2 link demo: "# Çok Sayfalı Site Yapma\\\r\n\n\\\r\n\n<div\nstyle=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left:\n20px;
        font-size:14px\" markdown=\"1\">\r\n<details>\r\n<summary>**Bağlantı nedir?**</summary>\r\nBağlantılar
        yerel web sayfaları ya da dış web sayfalarını bağlayabilirler. Web sitenize
        gezinti eklemek için bireysel web sayfalarınızı bağlayan, bağlantılar eklemeniz
        gerekir. **Bağlantıları '<a>' ögesini kullanarak web sayfanıza ekleyebilirsiniz**.
        \ Bağlantı olarak görüntülemek istediğiniz metin, açılış ve kapanış bağlantı
        etiketleri arasında yer almalıdır. '<a>' ögesinin konuma bağlayan 'href' özelliği
        bulunur.  Bu sayfa için, yerel sayfanın konumu sadece dosya yoludur.<br><br>\r\n\r\nÖrneğin
        benzersiz evler sayfasına bağlantı vermek için '<body>' ögesi içinde aşağıdaki
        kodu ekleyebilirsiniz. <br><br>\r\n\r\n<pre>\r\n&lt;a href=”houses.html”&gt;
        Benzersiz Evler &lt;/a&gt;\r\n</pre>\r\n\r\n</details>\r\n<details>\r\n<summary>**Bağlantı
        nasıl eklenir?**</summary>\r\n**Bağlantıları '<a>' ögesini kullanarak web
        sayfanıza ekleyebilirsiniz**.  Bağlantı olarak görüntülemek istediğiniz metin,
        açılış ve kapanış bağlantı etiketleri arasında yer almalıdır. '<a>' ögesinin
        konuma bağlayan 'href' özelliği bulunur. Bu sayfa için, yerel sayfanın konumu
        sadece dosya yoludur.<br><br>\r\n\r\nÖrneğin benzersiz evler sayfasına bağlantı
        vermek için '<body>' ögesi içinde aşağıdaki kodu ekleyebilirsiniz. <br><br>\r\n\r\n<pre>\r\n&lt;a
        href=”houses.html”&gt; Benzersiz Evler &lt;/a&gt;\r\n</pre>\r\n\r\n</details>\r\n</div>\r\n\r\nBir
        web sitesi birden çok web sayfası içermelidir ve bu sayfalar birbirine bağlı
        olmalıdır.Burada birbirine bağlantılar ile  bağlı birden fazla sayfa içeren
        bir proje örneği var (mavi altı çizili sözcükler üzerilerine tıkladığınızda
        başka bir sayfaya götürür).\r\n\r\n# Bunu Yap\r\n* index.html sayfasının üst
        kısmında bağlantıları oluşturan kodu görmek için denetleyici aracını kullanın.\r\n*
        Ortağınızla bu kodun nasıl çalıştığını tartışın.\r\n* Sol tarafta dosyalar
        listesinde recipe.html dosyasına tıklayın.  Bu sayfanın başına, sizi index.html
        dosyasına geri götürecek bir bağlantı ekleyin."
      CSD U2 link demo_2018: "# Çok Sayfalı Site Yapma\\\r\n\n\\\r\n\n<div\nstyle=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left:\n20px;
        font-size:14px\" markdown=\"1\">\r\n<details>\r\n<summary>**Bağlantı nedir?**</summary>\r\nBağlantılar
        yerel web sayfaları ya da dış web sayfalarını bağlayabilirler. Web sitenize
        gezinti eklemek için bireysel web sayfalarınızı bağlayan, bağlantılar eklemeniz
        gerekir. **Bağlantıları '<a>' ögesini kullanarak web sayfanıza ekleyebilirsiniz**.
        \ Bağlantı olarak görüntülemek istediğiniz metin, açılış ve kapanış bağlantı
        etiketleri arasında yer almalıdır. '<a>' ögesinin konuma bağlayan 'href' özelliği
        bulunur.  Bu sayfa için, yerel sayfanın konumu sadece dosya yoludur.<br><br>\r\n\r\nÖrneğin
        benzersiz evler sayfasına bağlantı vermek için '<body>' ögesi içinde aşağıdaki
        kodu ekleyebilirsiniz. <br><br>\r\n\r\n<pre>\r\n&lt;a href=”houses.html”&gt;
        Benzersiz Evler &lt;/a&gt;\r\n</pre>\r\n\r\n</details>\r\n<details>\r\n<summary>**Bağlantı
        nasıl eklenir?**</summary>\r\n**Bağlantıları '<a>' ögesini kullanarak web
        sayfanıza ekleyebilirsiniz**.  Bağlantı olarak görüntülemek istediğiniz metin,
        açılış ve kapanış bağlantı etiketleri arasında yer almalıdır. '<a>' ögesinin
        konuma bağlayan 'href' özelliği bulunur. Bu sayfa için, yerel sayfanın konumu
        sadece dosya yoludur.<br><br>\r\n\r\nÖrneğin benzersiz evler sayfasına bağlantı
        vermek için '<body>' ögesi içinde aşağıdaki kodu ekleyebilirsiniz. <br><br>\r\n\r\n<pre>\r\n&lt;a
        href=”houses.html”&gt; Benzersiz Evler &lt;/a&gt;\r\n</pre>\r\n\r\n</details>\r\n</div>\r\n\r\nBir
        web sitesi birden çok web sayfası içermelidir ve bu sayfalar birbirine bağlı
        olmalıdır.Burada birbirine bağlantılar ile  bağlı birden fazla sayfa içeren
        bir proje örneği var (mavi altı çizili sözcükler üzerilerine tıkladığınızda
        başka bir sayfaya götürür).\r\n\r\n# Bunu Yap\r\n* index.html sayfasının üst
        kısmında bağlantıları oluşturan kodu görmek için denetleyici aracını kullanın.\r\n*
        Ortağınızla bu kodun nasıl çalıştığını tartışın.\r\n* Sol tarafta dosyalar
        listesinde recipe.html dosyasına tıklayın.  Bu sayfanın başına, sizi index.html
        dosyasına geri götürecek bir bağlantı ekleyin."
      CSD U2 link demo_2019: "# Çok Sayfalı Site Yapma\\\r\n\n\\\r\n\n<div\nstyle=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left:\n20px;
        font-size:14px\" markdown=\"1\">\r\n<details>\r\n<summary>**Bağlantı nedir?**</summary>\r\nBağlantılar
        yerel web sayfaları ya da dış web sayfalarını bağlayabilirler. Web sitenize
        gezinti eklemek için bireysel web sayfalarınızı bağlayan, bağlantılar eklemeniz
        gerekir. **Bağlantıları '<a>' ögesini kullanarak web sayfanıza ekleyebilirsiniz**.
        \ Bağlantı olarak görüntülemek istediğiniz metin, açılış ve kapanış bağlantı
        etiketleri arasında yer almalıdır. '<a>' ögesinin konuma bağlayan 'href' özelliği
        bulunur.  Bu sayfa için, yerel sayfanın konumu sadece dosya yoludur.<br><br>\r\n\r\nÖrneğin
        benzersiz evler sayfasına bağlantı vermek için '<body>' ögesi içinde aşağıdaki
        kodu ekleyebilirsiniz. <br><br>\r\n\r\n<pre>\r\n&lt;a href=”houses.html”&gt;
        Benzersiz Evler &lt;/a&gt;\r\n</pre>\r\n\r\n</details>\r\n<details>\r\n<summary>**Bağlantı
        nasıl eklenir?**</summary>\r\n**Bağlantıları '<a>' ögesini kullanarak web
        sayfanıza ekleyebilirsiniz**.  Bağlantı olarak görüntülemek istediğiniz metin,
        açılış ve kapanış bağlantı etiketleri arasında yer almalıdır. '<a>' ögesinin
        konuma bağlayan 'href' özelliği bulunur. Bu sayfa için, yerel sayfanın konumu
        sadece dosya yoludur.<br><br>\r\n\r\nÖrneğin benzersiz evler sayfasına bağlantı
        vermek için '<body>' ögesi içinde aşağıdaki kodu ekleyebilirsiniz. <br><br>\r\n\r\n<pre>\r\n&lt;a
        href=”houses.html”&gt; Benzersiz Evler &lt;/a&gt;\r\n</pre>\r\n\r\n</details>\r\n</div>\r\n\r\nBir
        web sitesi birden çok web sayfası içermelidir ve bu sayfalar birbirine bağlı
        olmalıdır.Burada birbirine bağlantılar ile  bağlı birden fazla sayfa içeren
        bir proje örneği var (mavi altı çizili sözcükler üzerilerine tıkladığınızda
        başka bir sayfaya götürür).\r\n\r\n# Bunu Yap\r\n* index.html sayfasının üst
        kısmında bağlantıları oluşturan kodu görmek için denetleyici aracını kullanın.\r\n*
        Ortağınızla bu kodun nasıl çalıştığını tartışın.\r\n* Sol tarafta dosyalar
        listesinde recipe.html dosyasına tıklayın.  Bu sayfanın başına, sizi index.html
        dosyasına geri götürecek bir bağlantı ekleyin."
      CSD U2 lists intro: "# Listeler\\\r\n\n<div style=\"float: right;\nheight: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\r\n<details>\r\n<summary>**İki
        liste türü nelerdir?**</summary>\r\nSıralı ve sırasız listeler olmak üzere
        HTML'de iki tür liste vardır.\r\n</details>\r\n<details>\r\n<summary>**Sırasız
        liste nedir?**</summary>\r\nSırasız listeler sadece bir dizi madde işaretli
        ögelerden oluşur. \r\n<br /><br />\r\nBir sırasız liste öğesi &lt;ul&gt; etiketi
        ile gösterilir. Bu <strong>U</strong> nordered <strong>L</strong>IST (Sırasız
        Liste) kısaltmasıdır. Listedeki her öğe bir liste öğesi &lt;li&gt; tarafından
        işaretlenir. Bu  <strong>L</strong>ist <strong>I</strong>tem (liste ögesi)
        anlamındadır.  Liste ögesi bir alt öğedir, yan üst ögesi olan sırasız listenin
        içinde bulunur (&lt;ul&gt;).\r\n</details>\r\n<details>\r\n<summary>**Sırasız
        listeyi nasıl oluşturabilirim?**</summary>\r\nSırasız bir liste yapmanın iki
        adımı vardır: liste yapmak ve liste ögelerini eklemek.  Sırasız liste yapmak
        için, sırasız liste etiketlerini '&lt;ul&gt;&lt;/ul&gt;' yazın.  Sonra, liste
        ögelerinizi sırasız liste etiketleri **içine** ekleyin.  Her liste ögesinin
        yapmak için, liste ögesi etiketlerini '/li &gt; &lt; li &gt;&lt;' kullanın
        ve liste ögelerini etiketlerin içine yazın.\r\n<br /><br />\r\n&lt; li &gt;
        etiketlerini girintilemek yararlı olabilir böylece içinde bulunduğu &lt;ul&gt;
        etiketi içinde açıkça  görünür.\r\n</details>\r\n<details>\r\n<summary>**Sıralı
        liste nedir?**</summary>\r\nSıralı liste, bir dizi numaralandırılmış madde
        işaretli ögesi bulunan listedir. \r \n<br /><br />\r\nBir sıralı liste ögesi
        &lt;ol&gt; etiketi ile gösterilir. Bu <strong>O</strong> rdered <strong>L</strong>IST
        (Sıralı Liste) kısaltmasıdır. Listedeki her öğe bir liste öğesi &lt;li&gt;
        tarafından işaretlenir. Bu  <strong>L</strong>ist <strong>I</strong>tem (liste
        ögesi) anlamındadır.  Liste ögesi bir alt öğedir, yan üst ögesi olan sıralı
        listenin içinde bulunur (&lt;ol&gt;). \r\n</details>\r\n\r\n<details>\r\n<summary>**Sıralı
        listeyi nasıl oluşturabilirim? **</summary>\r\nSıralı bir liste yapmanın iki
        adımı vardır: liste yapmak ve liste ögelerini eklemek.  Sıralı liste yapmak
        için, sıralı liste etiketlerini '&lt;ol&gt;&lt;/ol&gt;' yazın.  Sonra, liste
        ögelerini sıralı liste etiketleri **içine** ekleyin.  Her liste ögesinin yapmak
        için, liste ögesi etiketlerini '/li &gt; &lt; li &gt;&lt;' kullanın ve liste
        ögelerini etiketlerin içine yazın.\r\n<br\n/><br />\r\n&lt; li &gt; etiketlerini
        girintilemek yararlı olabilir böylece içinde bulunduğu &lt;ol&gt; etiketi
        içinde açıkça  görünür.\r\n\r\n</details>\r\n</div>\r\n\r\nAyrıca HTML kullanarak
        web sayfanızda farklı tipte listeler yapabilirsiniz.  Bu çözüm sıralı(numaralı)
        ve sırasız(madde işaretli) olmak üzere iki tür liste içerir.\r\n\r \n# Bunu
        Yap\r\n\r\n*  İki farklı tür liste meydana getiren kodlarını görmek için denetleyici
        aracını kullan.\r\n* Sen ve ortağın farklı etiketlerin ne yaptığı üzerinde
        aynı fikirde olduğunuzdan emin olun\r\n* Kodu düzeltin böylece ikinci liste
        ögeleri doğru şekilde görünsün. \r"
      CSD U2 lists intro_2018: "# Listeler\\\r\n\n<div style=\"float: right;\nheight:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\r\n<details>\r\n<summary>**İki
        liste türü nelerdir?**</summary>\r\nSıralı ve sırasız listeler olmak üzere
        HTML'de iki tür liste vardır.\r\n</details>\r\n<details>\r\n<summary>**Sırasız
        liste nedir?**</summary>\r\nSırasız listeler sadece bir dizi madde işaretli
        ögelerden oluşur. \r\n<br /><br />\r\nBir sırasız liste öğesi &lt;ul&gt; etiketi
        ile gösterilir. Bu <strong>U</strong> nordered <strong>L</strong>IST (Sırasız
        Liste) kısaltmasıdır. Listedeki her öğe bir liste öğesi &lt;li&gt; tarafından
        işaretlenir. Bu  <strong>L</strong>ist <strong>I</strong>tem (liste ögesi)
        anlamındadır.  Liste ögesi bir alt öğedir, yan üst ögesi olan sırasız listenin
        içinde bulunur (&lt;ul&gt;).\r\n</details>\r\n<details>\r\n<summary>**Sırasız
        listeyi nasıl oluşturabilirim?**</summary>\r\nSırasız bir liste yapmanın iki
        adımı vardır: liste yapmak ve liste ögelerini eklemek.  Sırasız liste yapmak
        için, sırasız liste etiketlerini '&lt;ul&gt;&lt;/ul&gt;' yazın.  Sonra, liste
        ögelerinizi sırasız liste etiketleri **içine** ekleyin.  Her liste ögesinin
        yapmak için, liste ögesi etiketlerini '/li &gt; &lt; li &gt;&lt;' kullanın
        ve liste ögelerini etiketlerin içine yazın.\r\n<br /><br />\r\n&lt; li &gt;
        etiketlerini girintilemek yararlı olabilir böylece içinde bulunduğu &lt;ul&gt;
        etiketi içinde açıkça  görünür.\r\n</details>\r\n<details>\r\n<summary>**Sıralı
        liste nedir?**</summary>\r\nSıralı liste, bir dizi numaralandırılmış madde
        işaretli ögesi bulunan listedir. \r \n<br /><br />\r\nBir sıralı liste ögesi
        &lt;ol&gt; etiketi ile gösterilir. Bu <strong>O</strong> rdered <strong>L</strong>IST
        (Sıralı Liste) kısaltmasıdır. Listedeki her öğe bir liste öğesi &lt;li&gt;
        tarafından işaretlenir. Bu  <strong>L</strong>ist <strong>I</strong>tem (liste
        ögesi) anlamındadır.  Liste ögesi bir alt öğedir, yan üst ögesi olan sıralı
        listenin içinde bulunur (&lt;ol&gt;). \r\n</details>\r\n\r\n<details>\r\n<summary>**Sıralı
        listeyi nasıl oluşturabilirim? **</summary>\r\nSıralı bir liste yapmanın iki
        adımı vardır: liste yapmak ve liste ögelerini eklemek.  Sıralı liste yapmak
        için, sıralı liste etiketlerini '&lt;ol&gt;&lt;/ol&gt;' yazın.  Sonra, liste
        ögelerini sıralı liste etiketleri **içine** ekleyin.  Her liste ögesinin yapmak
        için, liste ögesi etiketlerini '/li &gt; &lt; li &gt;&lt;' kullanın ve liste
        ögelerini etiketlerin içine yazın.\r\n<br\n/><br />\r\n&lt; li &gt; etiketlerini
        girintilemek yararlı olabilir böylece içinde bulunduğu &lt;ol&gt; etiketi
        içinde açıkça  görünür.\r\n\r\n</details>\r\n</div>\r\n\r\nAyrıca HTML kullanarak
        web sayfanızda farklı tipte listeler yapabilirsiniz.  Bu çözüm sıralı(numaralı)
        ve sırasız(madde işaretli) olmak üzere iki tür liste içerir.\r\n\r \n# Bunu
        Yap\r\n\r\n*  İki farklı tür liste meydana getiren kodlarını görmek için denetleyici
        aracını kullan.\r\n* Sen ve ortağın farklı etiketlerin ne yaptığı üzerinde
        aynı fikirde olduğunuzdan emin olun\r\n* Kodu düzeltin böylece ikinci liste
        ögeleri doğru şekilde görünsün. \r"
      CSD U2 lists intro_2019: "# Listeler\\\r\n\n<div style=\"float: right;\nheight:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\r\n<details>\r\n<summary>**İki
        liste türü nelerdir?**</summary>\r\nSıralı ve sırasız listeler olmak üzere
        HTML'de iki tür liste vardır.\r\n</details>\r\n<details>\r\n<summary>**Sırasız
        liste nedir?**</summary>\r\nSırasız listeler sadece bir dizi madde işaretli
        ögelerden oluşur. \r\n<br /><br />\r\nBir sırasız liste öğesi &lt;ul&gt; etiketi
        ile gösterilir. Bu <strong>U</strong> nordered <strong>L</strong>IST (Sırasız
        Liste) kısaltmasıdır. Listedeki her öğe bir liste öğesi &lt;li&gt; tarafından
        işaretlenir. Bu  <strong>L</strong>ist <strong>I</strong>tem (liste ögesi)
        anlamındadır.  Liste ögesi bir alt öğedir, yan üst ögesi olan sırasız listenin
        içinde bulunur (&lt;ul&gt;).\r\n</details>\r\n<details>\r\n<summary>**Sırasız
        listeyi nasıl oluşturabilirim?**</summary>\r\nSırasız bir liste yapmanın iki
        adımı vardır: liste yapmak ve liste ögelerini eklemek.  Sırasız liste yapmak
        için, sırasız liste etiketlerini '&lt;ul&gt;&lt;/ul&gt;' yazın.  Sonra, liste
        ögelerinizi sırasız liste etiketleri **içine** ekleyin.  Her liste ögesinin
        yapmak için, liste ögesi etiketlerini '/li &gt; &lt; li &gt;&lt;' kullanın
        ve liste ögelerini etiketlerin içine yazın.\r\n<br /><br />\r\n&lt; li &gt;
        etiketlerini girintilemek yararlı olabilir böylece içinde bulunduğu &lt;ul&gt;
        etiketi içinde açıkça  görünür.\r\n</details>\r\n<details>\r\n<summary>**Sıralı
        liste nedir?**</summary>\r\nSıralı liste, bir dizi numaralandırılmış madde
        işaretli ögesi bulunan listedir. \r \n<br /><br />\r\nBir sıralı liste ögesi
        &lt;ol&gt; etiketi ile gösterilir. Bu <strong>O</strong> rdered <strong>L</strong>IST
        (Sıralı Liste) kısaltmasıdır. Listedeki her öğe bir liste öğesi &lt;li&gt;
        tarafından işaretlenir. Bu  <strong>L</strong>ist <strong>I</strong>tem (liste
        ögesi) anlamındadır.  Liste ögesi bir alt öğedir, yan üst ögesi olan sıralı
        listenin içinde bulunur (&lt;ol&gt;). \r\n</details>\r\n\r\n<details>\r\n<summary>**Sıralı
        listeyi nasıl oluşturabilirim? **</summary>\r\nSıralı bir liste yapmanın iki
        adımı vardır: liste yapmak ve liste ögelerini eklemek.  Sıralı liste yapmak
        için, sıralı liste etiketlerini '&lt;ol&gt;&lt;/ol&gt;' yazın.  Sonra, liste
        ögelerini sıralı liste etiketleri **içine** ekleyin.  Her liste ögesinin yapmak
        için, liste ögesi etiketlerini '/li &gt; &lt; li &gt;&lt;' kullanın ve liste
        ögelerini etiketlerin içine yazın.\r\n<br\n/><br />\r\n&lt; li &gt; etiketlerini
        girintilemek yararlı olabilir böylece içinde bulunduğu &lt;ol&gt; etiketi
        içinde açıkça  görünür.\r\n\r\n</details>\r\n</div>\r\n\r\nAyrıca HTML kullanarak
        web sayfanızda farklı tipte listeler yapabilirsiniz.  Bu çözüm sıralı(numaralı)
        ve sırasız(madde işaretli) olmak üzere iki tür liste içerir.\r\n\r \n# Bunu
        Yap\r\n\r\n*  İki farklı tür liste meydana getiren kodlarını görmek için denetleyici
        aracını kullan.\r\n* Sen ve ortağın farklı etiketlerin ne yaptığı üzerinde
        aynı fikirde olduğunuzdan emin olun\r\n* Kodu düzeltin böylece ikinci liste
        ögeleri doğru şekilde görünsün. \r"
      CSD U2 navigation: "# Gezinme çubuğu oluşturma\\\r\n\n\\\r\nİşte önceki projen.
        \ Sayfanın üst kısmında bir gezinme çubuğu oluşturarak iki sayfayı birbirine
        bağlarsınız. websiteleri genellikle bütün sayfaları boyunca aynı gezinme çubuğunu
        kullanırlar böylece sitede geri ve ileri gidebilirsiniz.  Bu sayfada bir gezinme
        çubuğu örneği görebilirsin.(<https://studio.code.org/projects/weblab/2KO4FIjN89QPeYnTG_NzLIjroaG8daOY3jRl5uHm1Co/>).\\\r\n\\\r\n\n#
        \n\nBunu Yap\\\r\n\n-   Anasayfanda (index.html), sayfanın üstüne iki tane
        köprü ekle, biri liste sayfana, diğeri anasayfana giden.\\\r\n-   -   sayfanın
        kendisine link oluşturmak garip gözükse bile, eğer gezinme çubuğu her sayfada
        tam olarak aynı ise, daha az karışıktır. \\*\\\r\n-   Gezinme çubuğu için
        kodu kopyala, sonra liste sayfanın başına ekle.\\\r\n-   Öngörünüm alanında
        linklerine tıklayarak onları test et.\\\r\n    \\\r"
      CSD U2 navigation_2018: "# Gezinme çubuğu oluşturma\\\r\n\n\\\r\nİşte önceki
        projen.  Sayfanın üst kısmında bir gezinme çubuğu oluşturarak iki sayfayı
        birbirine bağlarsınız. websiteleri genellikle bütün sayfaları boyunca aynı
        gezinme çubuğunu kullanırlar böylece sitede geri ve ileri gidebilirsiniz.
        \ Bu sayfada bir gezinme çubuğu örneği görebilirsin.(<https://studio.code.org/projects/weblab/2KO4FIjN89QPeYnTG_NzLIjroaG8daOY3jRl5uHm1Co/>).\\\r\n\\\r\n\n#
        \n\nBunu Yap\\\r\n\n-   Anasayfanda (index.html), sayfanın üstüne iki tane
        köprü ekle, biri liste sayfana, diğeri anasayfana giden.\\\r\n-   -   sayfanın
        kendisine link oluşturmak garip gözükse bile, eğer gezinme çubuğu her sayfada
        tam olarak aynı ise, daha az karışıktır. \\*\\\r\n-   Gezinme çubuğu için
        kodu kopyala, sonra liste sayfanın başına ekle.\\\r\n-   Öngörünüm alanında
        linklerine tıklayarak onları test et.\\\r\n    \\\r"
      CSD U2 navigation_2019: "# Gezinme çubuğu oluşturma\\\r\n\n\\\r\nİşte önceki
        projen.  Sayfanın üst kısmında bir gezinme çubuğu oluşturarak iki sayfayı
        birbirine bağlarsınız. websiteleri genellikle bütün sayfaları boyunca aynı
        gezinme çubuğunu kullanırlar böylece sitede geri ve ileri gidebilirsiniz.
        \ Bu sayfada bir gezinme çubuğu örneği görebilirsin.(<https://studio.code.org/projects/weblab/2KO4FIjN89QPeYnTG_NzLIjroaG8daOY3jRl5uHm1Co/>).\\\r\n\\\r\n\n#
        \n\nBunu Yap\\\r\n\n-   Anasayfanda (index.html), sayfanın üstüne iki tane
        köprü ekle, biri liste sayfana, diğeri anasayfana giden.\\\r\n-   -   sayfanın
        kendisine link oluşturmak garip gözükse bile, eğer gezinme çubuğu her sayfada
        tam olarak aynı ise, daha az karışıktır. \\*\\\r\n-   Gezinme çubuğu için
        kodu kopyala, sonra liste sayfanın başına ekle.\\\r\n-   Öngörünüm alanında
        linklerine tıklayarak onları test et.\\\r\n    \\\r"
      CSD U2 new page: "# Web siteniz için yeni bir sayfa oluşturun.\\\r\n\n\\\r\nİşte
        önceki projen.  Yeni bir sayfa daha ekliyor olacaksın. Yeni sayfan listenin
        en iyi 10'u, yemek tarifi veya hoşlandığın herhangi bir şey olabilir.\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n\\*\nBağlantıya tıklayarak yeni bir HTML dosya ekle \n![](<https://images.code.org/9b9f9f78962ef77664333d1b0f762ff1-image-1493252448756.19.38\nPM.png>).
        Yeni sayfa çalışma alanının solunda dosyaların listesinin içinde gözükecek.
        .\\\r\n\n-   Dosyayı yeniden adlandır, sağ tıklayarak ve Yeniden Adlandır'
        ı seçerek veya seçili iken üzerine tıklayarak.   **İsmin diğerlerinden farklı
        olduğundan, tanımlayıcı ve dosya uzantısının \".html\" ile bittiğinden emin
        ol**.\\\r\n-   Yeni sayfanı doldurmak için HTML kullan. \n    Sayfa aşağıdakileri
        içermeli:\\\r\n-   bir liste\\\r\n-   bir üst başlık\\\r"
      CSD U2 new page_2018: "# Web siteniz için yeni bir sayfa oluşturun.\\\r\n\n\\\r\nİşte
        önceki projen.  Yeni bir sayfa daha ekliyor olacaksın. Yeni sayfan listenin
        en iyi 10'u, yemek tarifi veya hoşlandığın herhangi bir şey olabilir.\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n\\*\nBağlantıya tıklayarak yeni bir HTML dosya ekle \n![](<https://images.code.org/9b9f9f78962ef77664333d1b0f762ff1-image-1493252448756.19.38\nPM.png>).
        Yeni sayfa çalışma alanının solunda dosyaların listesinin içinde gözükecek.
        .\\\r\n\n-   Dosyayı yeniden adlandır, sağ tıklayarak ve Yeniden Adlandır'
        ı seçerek veya seçili iken üzerine tıklayarak.   **İsmin diğerlerinden farklı
        olduğundan, tanımlayıcı ve dosya uzantısının \".html\" ile bittiğinden emin
        ol**.\\\r\n-   Yeni sayfanı doldurmak için HTML kullan. \n    Sayfa aşağıdakileri
        içermeli:\\\r\n-   bir liste\\\r\n-   bir üst başlık\\\r"
      CSD U2 new page_2019: "# Web siteniz için yeni bir sayfa oluşturun.\\\r\n\n\\\r\nİşte
        önceki projen.  Yeni bir sayfa daha ekliyor olacaksın. Yeni sayfan listenin
        en iyi 10'u, yemek tarifi veya hoşlandığın herhangi bir şey olabilir.\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n\\*\nBağlantıya tıklayarak yeni bir HTML dosya ekle \n![](<https://images.code.org/9b9f9f78962ef77664333d1b0f762ff1-image-1493252448756.19.38\nPM.png>).
        Yeni sayfa çalışma alanının solunda dosyaların listesinin içinde gözükecek.
        .\\\r\n\n-   Dosyayı yeniden adlandır, sağ tıklayarak ve Yeniden Adlandır'
        ı seçerek veya seçili iken üzerine tıklayarak.   **İsmin diğerlerinden farklı
        olduğundan, tanımlayıcı ve dosya uzantısının \".html\" ile bittiğinden emin
        ol**.\\\r\n-   Yeni sayfanı doldurmak için HTML kullan. \n    Sayfa aşağıdakileri
        içermeli:\\\r\n-   bir liste\\\r\n-   bir üst başlık\\\r"
      CSD U2 ordered list: "# Sıralı Listeler\\\r\n\n<div style=\"float:\nright; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\r\n<details>\r\n<summary>**İki
        liste türü nelerdir?**</summary>\r\n\nSıralı ve sırasız listeler olmak üzere
        HTML'de iki tür liste vardır.\\\r\n\n</details>\r\n<details>\r\n<summary>**Sıralı
        liste nedir?**</summary>\r\nSıralı liste, bir dizi numaralandırılmış madde
        işaretli ögesi bulunan listedir. \r \n<br /><br />\r\nBir sıralı liste ögesi
        '<ol>'; etiketi ile gösterilir. Bu <strong>O</strong> rdered <strong>L</strong>IST
        (Sıralı Liste) kısaltmasıdır. Listedeki her öge bir liste ögesi '<li>'; tarafından
        işaretlenir. Bu <strong>L</strong>ist <strong>I</strong>tem (liste ögesi)
        anlamındadır. Liste ögesi bir alt ögedir, yani üst ögesi olan sıralı listenin
        içinde bulunur ('<ol>').\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>**Sıralı
        listeyi nasıl oluşturabilirim? **</summary>\r\nSıralı bir liste yapmanın iki
        adımı vardır: liste yapmak ve liste ögelerini eklemek. Sıralı liste yapmak
        için, sıralı liste etiketlerini '<ol></ol>' yazın. Sonra, liste ögelerini
        sıralı liste etiketleri **içine** ekleyin. Her liste ögesini yapmak için,
        liste ögesi etiketlerini '<li></li>' kullanın ve liste ögelerini etiketlerin
        içine yazın.\r\n<br/><br />\r\n'<li>' etiketlerini girintilemek yararlı olabilir
        böylece içinde bulunduğu '<ol>' etiketi içinde açıkça görünür.\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>**Bana
        çalışan kod göster.**</summary> \r\n<table border=\"1\"> \r\n<tr>\r\n<td>örnek</td>\r\n<td>sonuç</td>\r\n</tr>\r\n<tr>\r\n<td><pre>\n&lt;ol&gt;
        <br> &lt;li&gt;Adım1 &lt;/li&gt; <br> &lt;li&gt;Adım 2 &lt;/li&gt;\n<br> &lt;li&gt;Adım
        3 &lt;/li&gt; <br> &lt;/ol&gt; </pre></td>\r\n<td><img\nsrc=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04\nPM.png\"
        style=\"width:200px\"></td>\r\n</tr>\r\n</table>\r\n\r\n</details>\r\n</div>\r\n\r\nBu
        sayfa bir sıralı liste içermelidir, ancak liste etiketleri eksik. \r\n\r\n#
        Bunu Yap\r\n\r\n* Bu içeriğin aşağıdaki örnekteki gibi bir sıralı yapısı olması
        için '<ol>' ve '<li>' etiketlerini kullanın.\r\n\r \n* İpucu: Yazdığın kodda
        hiç sayı bulunmayacak.*\r\n\r\n![](https://images.code.org/b3186e83c3e3bd2680a1a300e5abd126-image-1493238064706.17.03\nPM.png)"
      CSD U2 ordered list_2018: "# Sıralı Listeler\\\r\n\n<div style=\"float:\nright;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\r\n<details>\r\n<summary>**İki
        liste türü nelerdir?**</summary>\r\n\nSıralı ve sırasız listeler olmak üzere
        HTML'de iki tür liste vardır.\\\r\n\n</details>\r\n<details>\r\n<summary>**Sıralı
        liste nedir?**</summary>\r\nSıralı liste, bir dizi numaralandırılmış madde
        işaretli ögesi bulunan listedir. \r \n<br /><br />\r\nBir sıralı liste ögesi
        '<ol>'; etiketi ile gösterilir. Bu <strong>O</strong> rdered <strong>L</strong>IST
        (Sıralı Liste) kısaltmasıdır. Listedeki her öge bir liste ögesi '<li>'; tarafından
        işaretlenir. Bu <strong>L</strong>ist <strong>I</strong>tem (liste ögesi)
        anlamındadır. Liste ögesi bir alt ögedir, yani üst ögesi olan sıralı listenin
        içinde bulunur ('<ol>').\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>**Sıralı
        listeyi nasıl oluşturabilirim? **</summary>\r\nSıralı bir liste yapmanın iki
        adımı vardır: liste yapmak ve liste ögelerini eklemek. Sıralı liste yapmak
        için, sıralı liste etiketlerini '<ol></ol>' yazın. Sonra, liste ögelerini
        sıralı liste etiketleri **içine** ekleyin. Her liste ögesini yapmak için,
        liste ögesi etiketlerini '<li></li>' kullanın ve liste ögelerini etiketlerin
        içine yazın.\r\n<br/><br />\r\n'<li>' etiketlerini girintilemek yararlı olabilir
        böylece içinde bulunduğu '<ol>' etiketi içinde açıkça görünür.\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>**Bana
        çalışan kod göster.**</summary> \r\n<table border=\"1\"> \r\n<tr>\r\n<td>örnek</td>\r\n<td>sonuç</td>\r\n</tr>\r\n<tr>\r\n<td><pre>\n&lt;ol&gt;
        <br> &lt;li&gt;Adım1 &lt;/li&gt; <br> &lt;li&gt;Adım 2 &lt;/li&gt;\n<br> &lt;li&gt;Adım
        3 &lt;/li&gt; <br> &lt;/ol&gt; </pre></td>\r\n<td><img\nsrc=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04\nPM.png\"
        style=\"width:200px\"></td>\r\n</tr>\r\n</table>\r\n\r\n</details>\r\n</div>\r\n\r\nBu
        sayfa bir sıralı liste içermelidir, ancak liste etiketleri eksik. \r\n\r\n#
        Bunu Yap\r\n\r\n* Bu içeriğin aşağıdaki örnekteki gibi bir sıralı yapısı olması
        için '<ol>' ve '<li>' etiketlerini kullanın.\r\n\r \n* İpucu: Yazdığın kodda
        hiç sayı bulunmayacak.*\r\n\r\n![](https://images.code.org/b3186e83c3e3bd2680a1a300e5abd126-image-1493238064706.17.03\nPM.png)"
      CSD U2 ordered list_2019: "# Sıralı Listeler\\\r\n\n<div style=\"float:\nright;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\r\n<details>\r\n<summary>**İki
        liste türü nelerdir?**</summary>\r\n\nSıralı ve sırasız listeler olmak üzere
        HTML'de iki tür liste vardır.\\\r\n\n</details>\r\n<details>\r\n<summary>**Sıralı
        liste nedir?**</summary>\r\nSıralı liste, bir dizi numaralandırılmış madde
        işaretli ögesi bulunan listedir. \r \n<br /><br />\r\nBir sıralı liste ögesi
        '<ol>'; etiketi ile gösterilir. Bu <strong>O</strong> rdered <strong>L</strong>IST
        (Sıralı Liste) kısaltmasıdır. Listedeki her öge bir liste ögesi '<li>'; tarafından
        işaretlenir. Bu <strong>L</strong>ist <strong>I</strong>tem (liste ögesi)
        anlamındadır. Liste ögesi bir alt ögedir, yani üst ögesi olan sıralı listenin
        içinde bulunur ('<ol>').\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>**Sıralı
        listeyi nasıl oluşturabilirim? **</summary>\r\nSıralı bir liste yapmanın iki
        adımı vardır: liste yapmak ve liste ögelerini eklemek. Sıralı liste yapmak
        için, sıralı liste etiketlerini '<ol></ol>' yazın. Sonra, liste ögelerini
        sıralı liste etiketleri **içine** ekleyin. Her liste ögesini yapmak için,
        liste ögesi etiketlerini '<li></li>' kullanın ve liste ögelerini etiketlerin
        içine yazın.\r\n<br/><br />\r\n'<li>' etiketlerini girintilemek yararlı olabilir
        böylece içinde bulunduğu '<ol>' etiketi içinde açıkça görünür.\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>**Bana
        çalışan kod göster.**</summary> \r\n<table border=\"1\"> \r\n<tr>\r\n<td>örnek</td>\r\n<td>sonuç</td>\r\n</tr>\r\n<tr>\r\n<td><pre>\n&lt;ol&gt;
        <br> &lt;li&gt;Adım1 &lt;/li&gt; <br> &lt;li&gt;Adım 2 &lt;/li&gt;\n<br> &lt;li&gt;Adım
        3 &lt;/li&gt; <br> &lt;/ol&gt; </pre></td>\r\n<td><img\nsrc=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04\nPM.png\"
        style=\"width:200px\"></td>\r\n</tr>\r\n</table>\r\n\r\n</details>\r\n</div>\r\n\r\nBu
        sayfa bir sıralı liste içermelidir, ancak liste etiketleri eksik. \r\n\r\n#
        Bunu Yap\r\n\r\n* Bu içeriğin aşağıdaki örnekteki gibi bir sıralı yapısı olması
        için '<ol>' ve '<li>' etiketlerini kullanın.\r\n\r \n* İpucu: Yazdığın kodda
        hiç sayı bulunmayacak.*\r\n\r\n![](https://images.code.org/b3186e83c3e3bd2680a1a300e5abd126-image-1493238064706.17.03\nPM.png)"
      CSD U2 project review: "# Projenizi Gözden Geçirin\\\r\n\n\\\r\nProjeniz neredeyse
        yayınlamaya hazır, fakat büyün gereklilikleri yerine getirip getirmediğinizi
        bir kez daha kontrol etmelisiniz.\\\r\n\\\r\n\n# Bunları Yapın\\\r\n\n-   Sitenizdeki
        büyün bilgileri paylaşma konusunda rahat olup olmadığını kontrol edin.\\\r\n-
        \  Bütün resimlerin doğru şekilde bağlandığını ve resimleri sitenize koyma
        hakkınızın olup olmadığını kontrol edin.\\\r\n-   Proje rubriğindeki her şeyi
        projenize dahil edip etmediğinizi kontrol edin.\\\r\n-   Websitenizi okunabilir
        yapmak için yorumları ve beyaz alanları kullanın.\\\r\n-   Ortağınızdan, site
        ile ilgili olası problemleri bulmanızda size yardımcı olmasını isteyin.\\\r"
      CSD U2 project review_2018: "# Projenizi Gözden Geçirin\\\r\n\n\\\r\nProjeniz
        neredeyse yayınlamaya hazır, fakat büyün gereklilikleri yerine getirip getirmediğinizi
        bir kez daha kontrol etmelisiniz.\\\r\n\\\r\n\n# Bunları Yapın\\\r\n\n-   Sitenizdeki
        büyün bilgileri paylaşma konusunda rahat olup olmadığını kontrol edin.\\\r\n-
        \  Bütün resimlerin doğru şekilde bağlandığını ve resimleri sitenize koyma
        hakkınızın olup olmadığını kontrol edin.\\\r\n-   Proje rubriğindeki her şeyi
        projenize dahil edip etmediğinizi kontrol edin.\\\r\n-   Websitenizi okunabilir
        yapmak için yorumları ve beyaz alanları kullanın.\\\r\n-   Ortağınızdan, site
        ile ilgili olası problemleri bulmanızda size yardımcı olmasını isteyin.\\\r"
      CSD U2 project review_2019: "# Projenizi Gözden Geçirin\\\r\n\n\\\r\nProjeniz
        neredeyse yayınlamaya hazır, fakat büyün gereklilikleri yerine getirip getirmediğinizi
        bir kez daha kontrol etmelisiniz.\\\r\n\\\r\n\n# Bunları Yapın\\\r\n\n-   Sitenizdeki
        büyün bilgileri paylaşma konusunda rahat olup olmadığını kontrol edin.\\\r\n-
        \  Bütün resimlerin doğru şekilde bağlandığını ve resimleri sitenize koyma
        hakkınızın olup olmadığını kontrol edin.\\\r\n-   Proje rubriğindeki her şeyi
        projenize dahil edip etmediğinizi kontrol edin.\\\r\n-   Websitenizi okunabilir
        yapmak için yorumları ve beyaz alanları kullanın.\\\r\n-   Ortağınızdan, site
        ile ilgili olası problemleri bulmanızda size yardımcı olmasını isteyin.\\\r"
      CSD U2 project share: "# Projeni Paylaş\\\r\n\n\\\r\nProjenizi dünya ile paylaşmanın
        zamanı!\\\r\n\\\r\n\n# Bunu Yapın\\\r\n\n-   Sayfanın üstündeki\n    ![](<https://images.code.org/26bcf1645e18ac064cf0631fb5ca023c-image-1493744000091.52.27\n
        \   AM.png>) butonuna tıklayın.\\\r\n-   Üretilen URL' yi kopyalayın, sayfanızı
        görmesini istediğiniz kişilere bağlantıyı e-posta olarak gönderin. .\\\r\n
        \   \\\r"
      CSD U2 project share_2018: "# Projeni Paylaş\\\r\n\n\\\r\nProjenizi dünya ile
        paylaşmanın zamanı!\\\r\n\\\r\n\n# Bunu Yapın\\\r\n\n-   Sayfanın üstündeki\n
        \   ![](<https://images.code.org/26bcf1645e18ac064cf0631fb5ca023c-image-1493744000091.52.27\n
        \   AM.png>) butonuna tıklayın.\\\r\n-   Üretilen URL' yi kopyalayın, sayfanızı
        görmesini istediğiniz kişilere bağlantıyı e-posta olarak gönderin. .\\\r\n
        \   \\\r"
      CSD U2 project share_2019: "# Projeni Paylaş\\\r\n\n\\\r\nProjenizi dünya ile
        paylaşmanın zamanı!\\\r\n\\\r\n\n# Bunu Yapın\\\r\n\n-   Sayfanın üstündeki\n
        \   ![](<https://images.code.org/26bcf1645e18ac064cf0631fb5ca023c-image-1493744000091.52.27\n
        \   AM.png>) butonuna tıklayın.\\\r\n-   Üretilen URL' yi kopyalayın, sayfanızı
        görmesini istediğiniz kişilere bağlantıyı e-posta olarak gönderin. .\\\r\n
        \   \\\r"
      CSD U2 publish video: |-
        ## Questions to Consider

        -   What do you think your responsibilities are as a website publisher?
        -   Why might you want to see the code or remix someone else's site?
      CSD U2 text style decoration: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>How does the code work?</strong></summary>
        Here is the code that makes the `h1` elements underlined:

        <pre>h1 {
          text-decoration: underline;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `text-decoration: underline;` is the rule that makes the text inside the `h1` tag underlined.
            -   `text-decoration` is the _property_.  It explains what the rule is about, in this case where the line goes.
            -   `underline` is the _value_.  It explains how the rule should be applied, in this case making the test underlined.
                </details>
                <details>
                <summary><strong>What are the possible values for text decoration?</strong></summary>
                You can choose between "underline", "overline", and "line-through".  You can read more about the text-decoration property at <a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp">W3Schools - CSS text-decoration Property</a>
                </details>
                <details>
                <summary><strong>Why do I need all the punctuation?</strong></summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the stylesheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary><strong>What is a stylesheet?</strong></summary>
        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.
        </details>
        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Underlining

        -   Find the code in the style sheet that makes the h1 tag underlined.
        -   Change the text decoration and see which one you like.
            -   Choose from "underline", "overline", and "line-through"
        -   Add a text decoration rule for the paragraph or h3 tag.
      CSD U2 text style decoration_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>How does the code work?</strong></summary>
        Here is the code that makes the `h1` elements underlined:

        <pre>h1 {
          text-decoration: underline;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `text-decoration: underline;` is the rule that makes the text inside the `h1` tag underlined.
            -   `text-decoration` is the _property_.  It explains what the rule is about, in this case where the line goes.
            -   `underline` is the _value_.  It explains how the rule should be applied, in this case making the test underlined.
                </details>
                <details>
                <summary><strong>What are the possible values for text decoration?</strong></summary>
                You can choose between "underline", "overline", and "line-through".  You can read more about the text-decoration property at <a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp" target="_new">W3Schools - CSS text-decoration Property</a>
                </details>

        <details>
        <summary><strong>Why do I need all the punctuation?</strong></summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the stylesheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary><strong>What is a stylesheet?</strong></summary>
        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.
        </details>

        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }</pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Underlining

        -   Find the code in the style sheet that makes the h1 tag underlined.
        -   Change the text decoration and see which one you like.
            -   Choose from "underline", "overline", and "line-through"
        -   Add a text decoration rule for the paragraph or h3 tag.
      CSD U2 text style decoration_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**How does the code work?**]
        Here is the code that makes the `h1` elements underlined:

            h1 {
              text-decoration: underline;
            }

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `text-decoration: underline;` is the rule that makes the text inside the `h1` tag underlined.
            -   `text-decoration` is the _property_.  It explains what the rule is about, in this case where the line goes.
            -   `underline` is the _value_.  It explains how the rule should be applied, in this case making the test underlined.
                :::

        ::: details [**What are the possible values for text decoration?**]
        You can choose between "underline", "overline", and "line-through".  You can read more about the text-decoration property at <a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp" target="_new">W3Schools - CSS text-decoration Property</a>
        :::

        ::: details [**Why do I need all the punctuation?**]

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the stylesheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        :::

        ::: details [**What is a stylesheet?**]
        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.
        :::

        ::: details [**What is CSS?**]

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

            h2 {
               color: blue;
               font-family: cursive;
            }

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        :::

        </div>

        # Underlining

        -   Find the code in the style sheet that makes the h1 tag underlined.
        -   Change the text decoration and see which one you like.
            -   Choose from "underline", "overline", and "line-through"
        -   Add a text decoration rule for the paragraph or h3 tag.
      CSD U2 text style font family: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>How does the code work?</strong></summary>

        Here is the code that is controlling the paragraph font:

        <pre>p {
          font-family: cursive;
        }</pre>

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `font-family: cursive;` is the rule that makes the text inside the `p` tags a particular font.
            -   `font-family` is the _property_.  It explains what the rule is about, in this case the font.
            -   `cursive` is the _value_.  It explains how the rule should be applied, in this case making the text cursive.

        </details>
        <details>
        <summary><strong>What are the possible values for font family?</strong></summary>

        You can choose between "serif", "sans-serif", "cursive", "fantasy", and "monospace".  You can also try more specific fonts as described in <a href="http://www.w3schools.com/cssref/css_websafe_fonts.asp">W3Schools - CSS Web Safe Font Combinations</a>

        </details>
        <details>
        <summary><strong>Why do I need all the punctuation?</strong></summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the stylesheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary><strong>What is a stylesheet?</strong></summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Changing the Font

        -   Find the CSS rule-set in the style sheet that determines the style for the paragraph tag.
        -   Change the font family and choose which one you like the best.
            -   Choose from "serif", "sans-serif", "cursive", "fantasy", and "monospace"
        -   Add a font family rule for the h1 or h3 tags.
      CSD U2 text style font family_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>

        Here is the code that is controlling the paragraph font:

        <pre>p {
          font-family: cursive;
        }</pre>

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `font-family: cursive;` is the rule that makes the text inside the `p` tags a particular font.
            -   `font-family` is the _property_.  It explains what the rule is about, in this case the font.
            -   `cursive` is the _value_.  It explains how the rule should be applied, in this case making the text cursive.

        </details>
        <details>
        <summary>
        <strong>What are the possible values for font family?</strong>
        </summary>

        You can choose between "serif", "sans-serif", "cursive", "fantasy", and "monospace".  You can also try more specific fonts as described in <a href="http://www.w3schools.com/cssref/css_websafe_fonts.asp" target="_new">W3Schools - CSS Web Safe Font Combinations</a>

        </details>
        <details>
        <summary>
        <strong>Why do I need all the punctuation?</strong>
        </summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the stylesheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary>
        <strong>What is a stylesheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }</pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Changing the Font

        -   Find the CSS rule-set in the style sheet that determines the style for the paragraph tag.
        -   Change the font family and choose which one you like the best.
            -   Choose from "serif", "sans-serif", "cursive", "fantasy", and "monospace"
        -   Add a font family rule for the h1 or h3 tags.
      CSD U2 text style font family_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**How does the code work?**]

        Here is the code that is controlling the paragraph font:

            p {
              font-family: cursive;
            }

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `font-family: cursive;` is the rule that makes the text inside the `p` tags a particular font.
            -   `font-family` is the _property_.  It explains what the rule is about, in this case the font.
            -   `cursive` is the _value_.  It explains how the rule should be applied, in this case making the text cursive.

        :::

        ::: details [**What are the possible values for font family?**]

        You can choose between "serif", "sans-serif", "cursive", "fantasy", and "monospace".  You can also try more specific fonts as described in <a href="http://www.w3schools.com/cssref/css_websafe_fonts.asp" target="_new">W3Schools - CSS Web Safe Font Combinations</a>

        :::

        ::: details [**Why do I need all the punctuation?**]

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the stylesheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        :::

        ::: details [**What is a stylesheet?**]

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        :::

        ::: details [**What is CSS?**]

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

            h2 {
               color: blue;
               font-family: cursive;
            }

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        :::

        </div>

        # Changing the Font

        -   Find the CSS rule-set in the style sheet that determines the style for the paragraph tag.
        -   Change the font family and choose which one you like the best.
            -   Choose from "serif", "sans-serif", "cursive", "fantasy", and "monospace"
        -   Add a font family rule for the h1 or h3 tags.
      CSD U2 text style freeplay: |-
        # Adding Styles

        Now you can style the text on your personal web site!

        -   Open your style sheet and add styling of your choice to your project. Be sure to use at least 3 different CSS properties.

        # Checklist

        -   At least 3 of the following CSS Properties are used:
            -   `font-size`
            -   `font-family`
            -   `color`
            -   `text-decoration`
            -   `text-align`

        If you’ve used at least 3 of the properties from the checklist, you can explore some additional text properties to add to your project.
      CSD U2 text style freeplay_2018: |-
        # Adding Styles

        Now you can style the text on your personal web site!

        -   Open your style sheet and add styling of your choice to your project. Be sure to use at least 3 different CSS properties.

        # Checklist

        -   At least 3 of the following CSS Properties are used:
            -   `font-size`
            -   `font-family`
            -   `color`
            -   `text-decoration`
            -   `text-align`

        If you’ve used at least 3 of the properties from the checklist, you can explore some additional text properties to add to your project.
      CSD U2 text style freeplay_2019: |-
        # Adding Styles

        Now you can style the text on your personal web site!

        -   Open your style sheet and add styling of your choice to your project. Be sure to use at least 3 different CSS properties.

        # Checklist

        -   At least 3 of the following CSS Properties are used:
            -   `font-size`
            -   `font-family`
            -   `color`
            -   `text-decoration`
            -   `text-align`

        If you’ve used at least 3 of the properties from the checklist, you can explore some additional text properties to add to your project.
      CSD U2 text style h1: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What colors can I use in CSS?</strong></summary>
        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools - CSS Legal Color Values</a>
        </details><details>
        <summary><strong>How does the code work?</strong></summary>
        Here is the code that is making the `h1` heading red:

        <pre>h1 {
          color: red;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.
                </details>
                <details>
                <summary><strong>Why do I need all the punctuation?</strong></summary>
                The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.
                </details>
                <details>
                <summary><strong>What is a style sheet?</strong></summary>
                A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.
                </details>
                <details>
                <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # CSS and Text Color

        This HTML file uses a style sheet ("style.css") to give the page a particular style.  The style sheet contains information about what each of the HTML elements should look like.

        -   Find the code in the style sheet (click on "style.css" in the files list) that is making the h1 heading red.
        -   Change the code for the color of the h1 heading from `red` to a different color.
      CSD U2 text style h1_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What colors can I use in CSS?</strong>
        </summary>

        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp" target="_new">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp" target="_new">W3Schools - CSS Legal Color Values</a>

        </details><details>
        <summary>
        <strong>How does the code work?</strong>
        </summary>

        Here is the code that is making the `h1` heading red:

        <pre>h1 {
          color: red;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.

        </details>
        <details>
        <summary>
        <strong>Why do I need all the punctuation?</strong>
        </summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary>
        <strong>What is a style sheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }</pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # CSS and Text Color

        This HTML file uses a style sheet ("style.css") to give the page a particular style.  The style sheet contains information about what each of the HTML elements should look like.

        -   Find the code in the style sheet (click on "style.css" in the files list) that is making the h1 heading red.
        -   Change the code for the color of the h1 heading from `red` to a different color.
      CSD U2 text style h1_2019: "<div class=\"no-pullthrough\" \n style=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n\n:::
        details [**What colors can I use in CSS?**]\nCSS includes most common color
        names (red, blue, green, etc.), and many uncommon ones.  You can see a full
        list of CSS color names at [W3Schools - HTML Color Names](http://www.w3schools.com/colors/colors_names.asp).
        \ You can still use colors that are not included in the named list, but you
        will need to use their RGB values.  You can read more about using colors in
        CSS at [W3Schools - CSS Legal Color Values](http://www.w3schools.com/cssref/css_colors_legal.asp)\n:::\n\n:::
        details [**How does the code work?**]\nHere is the code that is making the
        `h1` heading red:\n\n    h1 {\n      color: red;\n    }\n\n-   `h1` is the
        _selector_.  It specifies which elements will have to follow the rules inside
        the curly braces.\n-   `color: red;` is the rule that makes the text inside
        the `h1` tags red.\n    -   `color` is the _property_.  It explains what the
        rule is about, in this case the text color.\n    -   `red` is the _value_.
        \ It explains how the rule should be applied, in this case making the text
        red.\n\n:::\n\n::: details [**Why do I need all the punctuation?**]\n\nThe
        punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon
        `;`, help the computer to understand the rules in the style sheet.  The curly
        braces hold all the rules for a particular selector.  Each rule should end
        in a semicolon, and the properties and values are always separated by a colon.\n\n:::\n\n:::
        details [**What is a style sheet?**]\n\nA style sheet is a document that controls
        how a web page will appear.  External style sheets are separate files that
        are linked to the HTML page.\n\n:::\n\n::: details [**What is CSS?**]\nCSS
        is a language that controls the way content on a web site appears.  It uses
        rule-sets to change the look of a page.  Each rule set has a selector, which
        specifies which elements on the page will be affected, and the rules, which
        explain how to display the elements.   Each rule consists of a property and
        a value for that property.\n\nHere’s an example of a rule-set that makes the
        text in an `h2` tag blue and cursive:\n\n    h2 {\n       color: blue;\n       font-family:
        cursive;\n    }\n\nIn this example, `h2` is the selector, `color` and `font-family`
        are properties, and `blue` and `cursive` are the values for those properties.\n:::\n\n</div>\n\n#
        CSS and Text Color\n\nThis HTML file uses a style sheet (\"style.css\") to
        give the page a particular style.  The style sheet contains information about
        what each of the HTML elements should look like.\n\n-   Find the code in the
        style sheet (click on \"style.css\" in the files list) that is making the
        h1 heading red.\n-   Change the code for the color of the h1 heading from
        `red` to a different color."
      CSD U2 text style h3: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What colors can I use in CSS?</strong></summary>

        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools - CSS Legal Color Values</a>

        </details>
        <details>
        <summary><strong>How does the code work?</strong></summary>
        Here is the code that is making the `h1` header red:

        <pre>h1 {
          color: red;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.
                </details>
                <details>
                <summary><strong>How do I make a new rule-set?</strong></summary>

        To make a new rule set, you'll need a selector and a list of rules.  The selector is the name of the tag you want the rules to be applied to.  The rules are a list of property and value pairs.  You'll also need to pay careful attention to the punctuation in the rule set.  Look at the code below for an example of how the code should look.  You'll need to change the specifics for your page.

        <pre>h1 {
          color: red;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.
                </details>
                <details>
                <summary><strong>Why do I need all the punctuation?</strong></summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary><strong>What is a style sheet?</strong></summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Making a new CSS rule-set

        The block of code that gives rules for a particular tag is called a _rule-set_.  You can make a new rule set by copying the pattern you see in the rule-set for the `h1` tag.

        -   Find the CSS rule-set in the style sheet that determines the styles for the h1 tag.
        -   Using the same pattern, write a new CSS rule-set that will determine the style for the h3 tag.
        -   Add code to set a different color for the h3 tags.
      CSD U2 text style h3_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What colors can I use in CSS?</strong>
        </summary>
        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools - CSS Legal Color Values</a>
        </details>
        <details>
        <summary>
        <strong>How does the code work?</strong>
        </summary>

        Here is the code that is making the `h1` header red:

        <pre>h1 {
          color: red;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.

        </details>
        <details>
        <summary>
        <strong>How do I make a new rule-set?</strong>
        </summary>

        To make a new rule set, you'll need a selector and a list of rules.  The selector is the name of the tag you want the rules to be applied to.  The rules are a list of property and value pairs.  You'll also need to pay careful attention to the punctuation in the rule set.  Look at the code below for an example of how the code should look.  You'll need to change the specifics for your page.

        <pre>h1 {
          color: red;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.

        </details>
        <details>
        <summary>
        <strong>Why do I need all the punctuation?</strong>
        </summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary>
        <strong>What is a style sheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Making a new CSS rule-set

        The block of code that gives rules for a particular tag is called a _rule-set_.  You can make a new rule set by copying the pattern you see in the rule-set for the `h1` tag.

        -   Find the CSS rule-set in the style sheet that determines the styles for the `h1` tag.
        -   Using the same pattern, write a new CSS rule-set that will determine the style for the `h3` tag.
        -   Add code to set a different color for the `h3` tags.
      CSD U2 text style h3_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**What colors can I use in CSS?**]
        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools - CSS Legal Color Values</a>
        :::

        ::: details [**How does the code work?**]

        Here is the code that is making the `h1` header red:

            h1 {
              color: red;
            }

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.

        :::

        ::: details [**How do I make a new rule-set?**]

        To make a new rule set, you'll need a selector and a list of rules.  The selector is the name of the tag you want the rules to be applied to.  The rules are a list of property and value pairs.  You'll also need to pay careful attention to the punctuation in the rule set.  Look at the code below for an example of how the code should look.  You'll need to change the specifics for your page.

            h1 {
              color: red;
            }

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.

        :::

        ::: details [**Why do I need all the punctuation?**]

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        :::

        ::: details [**What is a style sheet?**]

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        :::

        ::: details [**What is CSS?**]

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

            h2 {
               color: blue;
               font-family: cursive;

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        :::

        </div>

        # Making a new CSS rule-set

        The block of code that gives rules for a particular tag is called a _rule-set_.  You can make a new rule set by copying the pattern you see in the rule-set for the `h1` tag.

        -   Find the CSS rule-set in the style sheet that determines the styles for the `h1` tag.
        -   Using the same pattern, write a new CSS rule-set that will determine the style for the `h3` tag.
        -   Add code to set a different color for the `h3` tags.
      CSD U2 text style size: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>How does the code work?</strong></summary>
        Here is the code that is controlling the paragraph text size:

        <pre>p {
          font-size: 14px;
        }</pre>

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `font-size: 14px;` is the rule that makes the text inside the `p` tags a particular size.
            -   `font-size` is the _property_.  It explains what the rule is about, in this case the text size.
            -   `14px` is the _value_.  It explains how the rule should be applied, in this case making the text 14 pixels big.
                </details>
                <details>
                <summary><strong>What does `px` mean / What is a pixel?</strong></summary>

        Pixel, which is abbreviated `px`, is how elements are measured in CSS.  It’s the size of a single point of light on the screen.

        </details>
        <details>
        <summary><strong>Why do I need all the punctuation?</strong></summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary><strong>What is a style sheet?</strong></summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Changing text size

        You can control other things besides colors by using other properties.

        -   Find the CSS rule-set in the style sheet that determines the style for the paragraph tag.
        -   Change the text size of the paragraphs to be bigger.
        -   Add a new rule to your rule-set for your h3 tag to make the text bigger or smaller.
      CSD U2 text style size_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>

        Here is the code that is controlling the paragraph text size:

        <pre>p {
          font-size: 14px;
        }</pre>

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `font-size: 14px;` is the rule that makes the text inside the `p` tags a particular size.
            -   `font-size` is the _property_.  It explains what the rule is about, in this case the text size.
            -   `14px` is the _value_.  It explains how the rule should be applied, in this case making the text 14 pixels big.

        </details>
        <details>
        <summary>
        <strong>What does <code>px</code> mean / What is a pixel?</strong>
        </summary>

        Pixel, which is abbreviated `px`, is how elements are measured in CSS.  It’s the size of a single point of light on the screen.

        </details>
        <details>
        <summary>
        <strong>Why do I need all the punctuation?</strong>
        </summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary>
        <strong>What is a style sheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }</pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Changing text size

        You can control other things besides colors by using other properties.

        -   Find the CSS rule-set in the style sheet that determines the style for the paragraph tag.
        -   Change the text size of the paragraphs to be bigger.
        -   Add a new rule to your rule-set for your h3 tag to make the text bigger or smaller.
      CSD U2 text style size_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**How does the code work?**]

        Here is the code that is controlling the paragraph text size:

            p {
              font-size: 14px;
            }

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `font-size: 14px;` is the rule that makes the text inside the `p` tags a particular size.
            -   `font-size` is the _property_.  It explains what the rule is about, in this case the text size.
            -   `14px` is the _value_.  It explains how the rule should be applied, in this case making the text 14 pixels big.

        :::

        ::: details [**What does <code>px</code> mean / What is a pixel?**]

        Pixel, which is abbreviated `px`, is how elements are measured in CSS.  It’s the size of a single point of light on the screen.

        :::

        ::: details [**Why do I need all the punctuation?**]

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        :::

        ::: details [**What is a style sheet?**]

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        :::

        ::: details [**What is CSS?**]

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

            h2 {
               color: blue;
               font-family: cursive;
            }

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        :::

        </div>

        # Changing text size

        You can control other things besides colors by using other properties.

        -   Find the CSS rule-set in the style sheet that determines the style for the paragraph tag.
        -   Change the text size of the paragraphs to be bigger.
        -   Add a new rule to your rule-set for your h3 tag to make the text bigger or smaller.
      CSD U2 text style text align: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        **How does the code work?**

        </summary>
        Here is the code that is controlling the paragraph text alignment:

        <pre>p {
          text-align: left;
        }</pre>

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `text-align: left;` is the rule that makes the text inside the `p` tags align to the left side of the paragraph.
            -   `text-align` is the _property_.  It explains what the rule is about, in this case the text alignment.
            -   `left` is the _value_.  It explains how the rule should be applied, in this case making the text align to the left side of the paragraph.
                </details>
                <details>
                <summary>

        **Why doesn't `text-align: left;` do anything?**

        </summary>
        Most properties have default values.  The default values are the styles that an element will have automatically, before you add your style sheet.  The default value for `text-align` is `left`, so it doesn't change from how it already looked.
        </details>
        <details>
        <summary>

        **What are the possible values for text align?**

        </summary>
        You can choose between "left", "right", and "center".  You can read more about the text-align property at <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp">W3Schools - CSS text-align Property</a>
        </details>
        <details>
        <summary>

        **Why do I need all the punctuation?**

        </summary>
        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.
        </details>
        <details>
        <summary>

        **What is a style sheet?**

        </summary>
        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.
        </details>
        <details>
        <summary>

        **What is CSS?**

        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>

        </details>
        </div>

        # Text Alignment

        The `text-align` property sets the horizontal (side to side) position of the text within each line.

        -   Find the "text-align" property in the paragraph tag.
        -   Change the paragraph alignment.
            -   Choose from "left", "right", and "center"
      CSD U2 text style text align_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>

        Here is the code that is controlling the paragraph text alignment:

        <pre>p {
          text-align: left;
        }</pre>

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `text-align: left;` is the rule that makes the text inside the `p` tags align to the left side of the paragraph.
            -   `text-align` is the _property_.  It explains what the rule is about, in this case the text alignment.
            -   `left` is the _value_.  It explains how the rule should be applied, in this case making the text align to the left side of the paragraph.

        </details>
        <details>
        <summary>
        <strong>Why doesn't <code>text-align: left;</code> do anything?</strong>
        </summary>

        Most properties have default values.  The default values are the styles that an element will have automatically, before you add your style sheet.  The default value for `text-align` is `left`, so it doesn't change from how it already looked.

        </details>
        <details>
        <summary>
        <strong>What are the possible values for text align?</strong>
        </summary>

        You can choose between "left", "right", and "center".  You can read more about the text-align property at <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp" target="_new">W3Schools - CSS text-align Property</a>

        </details>
        <details>
        <summary>
        <strong>Why do I need all the punctuation?</strong>
        </summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary>
        <strong>What is a style sheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.
        <br/><br/>
        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }</pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>

        </details>
        </div>

        # Text Alignment

        The `text-align` property sets the horizontal (side to side) position of the text within each line.

        -   Find the "text-align" property in the paragraph tag.
        -   Change the paragraph alignment.
            -   Choose from "left", "right", and "center"
      CSD U2 text style text align_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**How does the code work?**]

        Here is the code that is controlling the paragraph text alignment:

            p {
              text-align: left;
            }

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `text-align: left;` is the rule that makes the text inside the `p` tags align to the left side of the paragraph.
            -   `text-align` is the _property_.  It explains what the rule is about, in this case the text alignment.
            -   `left` is the _value_.  It explains how the rule should be applied, in this case making the text align to the left side of the paragraph.

        :::

        ::: details [**Why doesn't <code>text-align: left;</code> do anything?**]

        Most properties have default values.  The default values are the styles that an element will have automatically, before you add your style sheet.  The default value for `text-align` is `left`, so it doesn't change from how it already looked.

        :::

        ::: details [**What are the possible values for text align?**]

        You can choose between "left", "right", and "center".  You can read more about the text-align property at <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp" target="_new">W3Schools - CSS text-align Property</a>

        :::

        ::: details [**Why do I need all the punctuation?**]

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        :::

        ::: details [**What is a style sheet?**]

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        :::

        ::: details [**What is CSS?**]

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.
        <br/><br/>
        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

            h2 {
               color: blue;
               font-family: cursive;
            }

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        :::

        </div>

        # Text Alignment

        The `text-align` property sets the horizontal (side to side) position of the text within each line.

        -   Find the "text-align" property in the paragraph tag.
        -   Change the paragraph alignment.
            -   Choose from "left", "right", and "center"
      CSD U2 un_ordered lists: "# Combining Lists\n\n<div class=\"no-pullthrough\"
        style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px\" markdown=\"1\">\n\n::: details [**What are the two
        types of lists?**]\n There are two types of lists in HTML, ordered and unordered
        lists.\n:::\n\n::: details [**What is an unordered list?**]\n\nAn unordered
        list is just a set of bulleted items.\n\nAn unordered list element has the
        tag `<ul>` . This is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist.
        Each item in the list is marked by a list item element `<li>`. This is an
        abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item
        element is a child element, which means that it goes inside of its parent
        element, the unordered list (`<ul>`).\n\n:::\n\n::: details [**How do I make
        an unordered list?**]\n\nMaking an unordered list has two steps: making the
        list and adding the list items.  To make the unordered list, write the unordered
        list tags `<ul></ul>`.  Next, add your list items **inside** the unordered
        list tags.  To make each list item, use the list item tags `<li></li>` and
        write the list item inside the tags.\n\nIt can be helpful to indent your `<li>`
        tags so it's clear they are contained in the `<ul>` tag.\n\n:::\n\n::: details
        [**What is an ordered list?**]\n\nAn ordered list is a set of bulleted items
        which are numbered.\n\nAn ordered list element has the tag `<ol>`. This is
        an abbreviation for <strong>O</strong>rdered <strong>L</strong>ist. Each item
        in the list is marked by a list item element `<li>`;. This is an abbreviation
        for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is
        a child element, which means that it goes inside of its parent element, the
        ordered list (`<ol>`).\n:::\n\n::: details [**How do I make an ordered list?**]\n\nMaking
        an ordered list has two steps: making the list and adding the list items.
        \ To make the ordered list, write the ordered list tags `<ol></ol>`.  Next,
        add your list items **inside** the ordered list tags.  To make each list item,
        use the list item tags `<li></li>` and write the list item inside the tags.\n<br
        /><br />\nIt can be helpful to indent your `<li>` tags so it's clear they
        are contained in the `<ol>` tag.\n:::\n\n::: details [**Show me working code.**]\n\n<table
        border=\"1\">\n<tr>\n<td>Example</td>\n<td>Result</td>\n</tr>\n<tr>\n<td>\n\n
        \   <ul>\n     \t<li>Red </li>\n        <li>Green </li>\n        <li>Blue</li>\n
        \   </ul> \n\n</td>\n<td><img src=\"https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32
        PM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n<table border=\"1\">\n<tr>\n<td>Example</td>\n<td>Result</td>\n</tr>\n<tr>\n<td>\n\n
        \   <ol>\n     \t<li>Step 1</li>\n        <li>Step 2</li>\n        <li>Step
        3</li> \n    </ol> \n\n</td>\n<td><img src=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04
        PM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n:::\n\n</div>\n\nThis
        page should include both an unordered list and an ordered list.\n\n# Do This\n\n-
        \  Use the list tags to structure this content into two lists that look like
        the ones below.\n\n_Hint: There will be NO NUMBERS in your code._ \n\n![](https://images.code.org/c9c002b39893ab09e8bc6be4b20ad7c2-image-1553714125509.png)"
      CSD U2 unordered list: |-
        # Sıralı Listeler

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>İki tür liste nedir?</strong>
        </summary>
         HTLM'de sıralı ve sırasız olmak üzere iki tür liste vardır.
        </details>
        <details>
        <summary><strong>What is an unordered list?</strong>
        </summary>

        An unordered list is just a set of bulleted items.
        <br /><br />An unordered list element has the tag \<ul> . This is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist. Each item in the list is marked by a list item element \<li>. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element, which means that it goes inside of its parent element, the unordered list (\<ul>).

        </details>

        <details>
        <summary><strong>How do I make an unordered list?</strong>
        </summary>

        Making an unordered list has two steps: making the list and adding the list items.  To make the unordered list, write the unordered list tags `<ul></ul>`.  Next, add your list items **inside** the unordered list tags.  To make each list item, use the list item tags `<li></li>` and write the list item inside the tags.

        It can be helpful to indent your \<li> tags so it's clear they are contained in the \<ul> tag.

        </details>

        <details>
        <summary><strong>Show me working code.</strong>
        </summary>

        <table border="1">
        <tr>
        <td>Example</td>
        <td>Result</td>
        </tr>
        <tr>
        <td><pre> &lt;ul&gt; <br>   &lt;li&gt;Red &lt;/li&gt; <br>   &lt;li&gt;Green &lt;/li&gt; <br>   &lt;li&gt;Blue&lt;/li&gt; <br> &lt;/ul&gt; </pre></td>
        <td><img src="https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32 PM.png" style="width:200px"></td>
        </tr>
        </table>

        </details>
        </div>

        This page should have an unordered list, but it's missing the list tags.

        # Do This

        -   Use the `<ul>` and `<li>` tags to structure the content into an unordered list like the picture below.

        ![](<https://images.code.org/64581a90765cd2d53b6c5235c48f2855-image-1493238358294.25.04 PM.png>)
      CSD U2 unordered list_2018: |-
        # Unordered Lists

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What are the two types of lists?</strong>
        </summary>
        There are two types of lists in HTML, ordered and unordered lists.

        </details>
        <details>
        <summary>
        <strong>What is an unordered list?</strong>
        </summary>

        An unordered list is just a set of bulleted items.
        <br /><br />An unordered list element has the tag \<ul> . This is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist. Each item in the list is marked by a list item element \<li>. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element, which means that it goes inside of its parent element, the unordered list (\<ul>).

        </details>

        <details>
        <summary>
        <strong>How do I make an unordered list?</strong>
        </summary>

        Making an unordered list has two steps: making the list and adding the list items.  To make the unordered list, write the unordered list tags `<ul></ul>`.  Next, add your list items **inside** the unordered list tags.  To make each list item, use the list item tags `<li></li>` and write the list item inside the tags.
        <br /><br />
        It can be helpful to indent your \<li> tags so it's clear they are contained in the \<ul> tag.

        </details>

        <details>
        <summary>
        <strong>Show me working code.</strong>
        </summary>

        <table border="1">
        <tr>
        <td>Example</td>
        <td>Result</td>
        </tr>
        <tr>
        <td><pre> &lt;ul&gt; <br>   &lt;li&gt;Red &lt;/li&gt; <br>   &lt;li&gt;Green &lt;/li&gt; <br>   &lt;li&gt;Blue&lt;/li&gt; <br> &lt;/ul&gt; </pre></td>
        <td><img src="https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32 PM.png" style="width:200px"></td>
        </tr>
        </table>

        </details>
        </div>

        This page should have an unordered list, but it's missing the list tags.

        # Do This

        -   Use the `<ul>` and `<li>` tags to structure the content into an unordered list like the picture below.

        ![](<https://images.code.org/64581a90765cd2d53b6c5235c48f2855-image-1493238358294.25.04 PM.png>)
      CSD U2 unordered list_2019: "# Unordered Lists\n\n<div class=\"no-pullthrough\"
        style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px\" markdown=\"1\">\n\n::: details [**What are the two
        types of lists?**]\nThere are two types of lists in HTML, ordered and unordered
        lists.\n\n:::\n\n::: details [**What is an unordered list?**]\n\nAn unordered
        list is just a set of bulleted items.\n<br /><br />An unordered list element
        has the tag `<ul>`. This is an abbreviation for <strong>U</strong>nordered
        <strong>L</strong>ist. Each item in the list is marked by a list item element
        `<li>`. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.
        \ The list item element is a child element, which means that it goes inside
        of its parent element, the unordered list (`<ul>`).\n\n:::\n\n::: details
        [**How do I make an unordered list?**]\n\nMaking an unordered list has two
        steps: making the list and adding the list items.  To make the unordered list,
        write the unordered list tags `<ul></ul>`.  Next, add your list items **inside**
        the unordered list tags.  To make each list item, use the list item tags `<li></li>`
        and write the list item inside the tags.\n<br /><br />\nIt can be helpful
        to indent your <li> tags so it's clear they are contained in the <ul> tag.\n\n:::\n\n:::
        details [**Show me working code.**]\n\n<table border=\"1\">\n<tr>\n<td>Example</td>\n<td>Result</td>\n</tr>\n<tr>\n<td>\n\n
        \    <ul> <br>\n     \t<li>Red </li>\n        <li>Green </li>\n        <li>Blue</li>\n
        \    </ul>\n\n</td>\n<td><img src=\"https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32
        PM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n:::\n\n</div>\n\nThis
        page should have an unordered list, but it's missing the list tags.\n\n# Do
        This\n\n-   Use the `<ul>` and `<li>` tags to structure the content into an
        unordered list like the picture below.\n\n![](<https://images.code.org/64581a90765cd2d53b6c5235c48f2855-image-1493238358294.25.04
        PM.png>)"
      CSD U2 upload images: "# Resimleri Yükle\\\r\n\n\\\r\nSonra, tüm resimleri projenize
        yüklemeniz gerekecek.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\*\nTüm resimleri bilgisayarına
        indir. Yardıma ihtiyacın varsa [Lesson 8 Level\n5](/s/csd2/stage/8/puzzle/5)
        ziyaret et.\\\r\n\n-   Resimlerin kullanım hakkına sahip olduğundan emin ol.\\\r\n-
        \  İhtiyaç duyduğun kaynak bilgilerin tamamını yaz.\\\r\n-   Tüm resimleri
        projene yükle.  Nasıl olduğunu unuttuysan \n    [Lesson 8 Level 6](/s/csd2/stage/8/puzzle/6)
        ziyaret et.\\\r\n    \\\r"
      CSD U2 upload images_2018: "# Resimleri Yükle\\\r\n\n\\\r\nSonra, tüm resimleri
        projenize yüklemeniz gerekecek.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\*\nTüm resimleri
        bilgisayarına indir. Yardıma ihtiyacın varsa [Lesson 8 Level\n5](/s/csd2/stage/8/puzzle/5)
        ziyaret et.\\\r\n\n-   Resimlerin kullanım hakkına sahip olduğundan emin ol.\\\r\n-
        \  İhtiyaç duyduğun kaynak bilgilerin tamamını yaz.\\\r\n-   Tüm resimleri
        projene yükle.  Nasıl olduğunu unuttuysan \n    [Lesson 8 Level 6](/s/csd2/stage/8/puzzle/6)
        ziyaret et.\\\r\n    \\\r"
      CSD U2 upload images_2019: "# Resimleri Yükle\\\r\n\n\\\r\nSonra, tüm resimleri
        projenize yüklemeniz gerekecek.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\*\nTüm resimleri
        bilgisayarına indir. Yardıma ihtiyacın varsa [Lesson 8 Level\n5](/s/csd2/stage/8/puzzle/5)
        ziyaret et.\\\r\n\n-   Resimlerin kullanım hakkına sahip olduğundan emin ol.\\\r\n-
        \  İhtiyaç duyduğun kaynak bilgilerin tamamını yaz.\\\r\n-   Tüm resimleri
        projene yükle.  Nasıl olduğunu unuttuysan \n    [Lesson 8 Level 6](/s/csd2/stage/8/puzzle/6)
        ziyaret et.\\\r\n    \\\r"
      CSD U3 - Booleans Video: "# Boolean Expressions Video"
      CSD U3 - Booleans Video_2019: |-
        ## Questions to Consider

        -   What is a Boolean expression?
        -   What’s an expression that would evaluate to true?
        -   What’s an expression that would evaluate to false?
      CSD U3 - Conditionals Video_2019: |-
        ## Questions to Consider

        -   What’s an example of when you would need an “if/else” statement?
      CSD U3 - Simple Counter Predict: "# The Counter Pattern\n\nThis pattern is one
        of the most important ones in all of programming. \n\n![](<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56
        PM.png>)\n\nIt is used to increase the value of a variable by 1. You might
        call it the **counter pattern** since it can be used to make a variable that
        counts up. You'll use this pattern a lot, especially with the draw loop. Let's
        see what that looks like.\n\n# Do This\n\nThis program creates a variable
        `counter` and then uses the **counter pattern** to make it count up. When
        you run the program what do you think you'll see on the screen?\n\n-   **Read
        the program** and make a prediction of what the output will be.\n-   **Run
        the program** to check your prediction.\n-   **Discuss with a neighbor**.
        Can you explain what you observed?"
      CSD U3 - Simple Counter Predict_2018: "# The Counter Pattern\n\nThis pattern
        is one of the most important ones in all of programming. \n\n![](<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56
        PM.png>)\n\nIt is used to increase the value of a variable by 1. You might
        call it the **counter pattern** since it can be used to make a variable that
        counts up. You'll use this pattern a lot, especially with the draw loop. Let's
        see what that looks like.\n\n# Do This\n\nThis program creates a variable
        `counter` and then uses the **counter pattern** to make it count up. When
        you run the program what do you think you'll see on the screen?\n\n-   **Read
        the program** and make a prediction of what the output will be.\n-   **Run
        the program** to check your prediction.\n-   **Discuss with a neighbor**.
        Can you explain what you observed?"
      CSD U3 - Simple Counter Predict_2019: "# The Counter Pattern\n\nThis pattern
        is one of the most important ones in all of programming. \n\n![](<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56
        PM.png>)\n\nIt is used to increase the value of a variable by 1. You might
        call it the **counter pattern** since it can be used to make a variable that
        counts up. You'll use this pattern a lot, especially with the draw loop. Let's
        see what that looks like.\n\n# Do This\n\nThis program creates a variable
        `counter` and then uses the **counter pattern** to make it count up. When
        you run the program what do you think you'll see on the screen?\n\n-   **Read
        the program** and make a prediction of what the output will be.\n-   **Run
        the program** to check your prediction.\n-   **Discuss with a neighbor**.
        Can you explain what you observed?"
      CSD U3 - complex - key up and down: |-
        # Responding to a Single Click

        Earlier we learned that `keyWentDown` and `keyWentUp` can be used to respond to a keypress a single time. The blocks `mouseWentUp` and `mouseWentDown` allow you to do that for the mouse!

        # Do This

        Let's make a simple game that counts how many times you've clicked. We've already provided a variable `clicks` that you can use to track how many times the user has clicked.

        -   Add a conditional that checks if the mouse went down.
        -   Inside your conditional, add to the `clicks` variable.

        _Challenge: Can you add a sprite that responds to `mouseWentDown` as well? Add an image of your choice and increase the sprite's size each time the mouse is clicked._
      CSD U3 - complex - key up and down_2018: |-
        # Responding to a Single Click

        Earlier we learned that `keyWentDown` and `keyWentUp` can be used to respond to a keypress a single time. The blocks `mouseWentUp` and `mouseWentDown` allow you to do that for the mouse!

        # Do This

        Let's make a simple game that counts how many times you've clicked. We've already provided a variable `clicks` that you can use to track how many times the user has clicked.

        -   Add a conditional that checks if the mouse went down.
        -   Inside your conditional, add to the `clicks` variable.

        _Challenge: Can you add a sprite that responds to `mouseWentDown` as well? Add an image of your choice and increase the sprite's size each time the mouse is clicked._
      CSD U3 - complex - key up and down_2019: |-
        # Responding to a Single Click

        Earlier we learned that `keyWentDown` and `keyWentUp` can be used to respond to a keypress a single time. The blocks `mouseWentUp` and `mouseWentDown` allow you to do that for the mouse!

        # Do This

        Let's make a simple game that counts how many times you've clicked. We've already provided a variable `clicks` that you can use to track how many times the user has clicked.

        -   Add a conditional that checks if the mouse went down.
        -   Inside your conditional, add to the `clicks` variable.

        _Challenge: Can you add a sprite that responds to `mouseWentDown` as well? Add an image of your choice and increase the sprite's size each time the mouse is clicked._
      CSD U3 - complex - mouse down: "# Mouse Clicks\n\nKeypresses are great, but
        sometimes you want users to interact through mouse clicks. There's a new block
        called `mouseDown` which, similar to `keyDown`, checks whether the left or
        right mouse buttons is being pressed. If you are using a computer with a mouse
        or trackpad that has only one button, you'll want to always use `mouseDown(\"left\")`.
        \n\n# Do This\n\nHere's a program that drops a balloon down the screen - you're
        going to program the mouse button to raise the balloon back up while it's
        clicked.\n\n-   Add an if else statment that checks for `mouseDown`.\n-   Inside
        the conditional, move the balloon up one pixel if the mouse is down. Otherwise,
        move the balloon down.\n\n_Hint: You'll need to move the code that drops the
        balloon for this to work - you only want it to run if `mouseDown` is `false`_\n\n_Challenge:
        Can you make the balloon drift randomly to the left and right as it rises
        and falls?_"
      CSD U3 - complex - mouse down_2018: "# Mouse Clicks\n\nKeypresses are great,
        but sometimes you want users to interact through mouse clicks. There's a new
        block called `mouseDown` which, similar to `keyDown`, checks whether the left
        or right mouse buttons is being pressed. If you are using a computer with
        a mouse or trackpad that has only one button, you'll want to always use `mouseDown(\"left\")`.
        \n\n# Do This\n\nHere's a program that drops a balloon down the screen - you're
        going to program the mouse button to raise the balloon back up while it's
        clicked.\n\n-   Add an if else statment that checks for `mouseDown`.\n-   Inside
        the conditional, move the balloon up one pixel if the mouse is down. Otherwise,
        move the balloon down.\n\n_Hint: You'll need to move the code that drops the
        balloon for this to work - you only want it to run if `mouseDown` is `false`_\n\n_Challenge:
        Can you make the balloon drift randomly to the left and right as it rises
        and falls?_"
      CSD U3 - complex - mouse down_2019: "# Mouse Clicks\n\nKeypresses are great,
        but sometimes you want users to interact through mouse clicks. There's a new
        block called `mouseDown` which, similar to `keyDown`, checks whether the left
        or right mouse buttons is being pressed. If you are using a computer with
        a mouse or trackpad that has only one button, you'll want to always use `mouseDown(\"left\")`.
        \n\n# Do This\n\nHere's a program that drops a balloon down the screen - you're
        going to program the mouse button to raise the balloon back up while it's
        clicked.\n\n-   Add an if else statment that checks for `mouseDown`.\n-   Inside
        the conditional, move the balloon up one pixel if the mouse is down. Otherwise,
        move the balloon down.\n\n_Hint: You'll need to move the code that drops the
        balloon for this to work - you only want it to run if `mouseDown` is `false`_\n\n_Challenge:
        Can you make the balloon drift randomly to the left and right as it rises
        and falls?_"
      CSD U3 - complex - mouse move: |-
        # mouseDidMove

        We can also use Boolean expressions to check whether or not the mouse has moved. The `mouseDidMove` block will return `false` if the mouse is still, but `true` if the mouse has been moving.

        # Do This

        Right now, this program just displays a salt shaker sprite. You'll need to use `mouseDidMove` so that you can "shake" the salt by moving the mouse back and forth.

        -   Add a conditional that checks if `mouseDidMove`.
        -   If the conditional is true, rotate the salt sprite randomly to the left or right.

        _Challenge: Can you keep track of how many times the `mouseDidMove` shakes the salt, and then rotate it right side up after 100 shakes?_
      CSD U3 - complex - mouse move_2018: |-
        # mouseDidMove

        We can also use Boolean expressions to check whether or not the mouse has moved. The `mouseDidMove` block will return `false` if the mouse is still, but `true` if the mouse has been moving.

        # Do This

        Right now, this program just displays a salt shaker sprite. You'll need to use `mouseDidMove` so that you can "shake" the salt by moving the mouse back and forth.

        -   Add a conditional that checks if `mouseDidMove`.
        -   If the conditional is true, rotate the salt sprite randomly to the left or right.

        _Challenge: Can you keep track of how many times the `mouseDidMove` shakes the salt, and then rotate it right side up after 100 shakes?_
      CSD U3 - complex - mouse move_2019: |-
        # mouseDidMove

        We can also use Boolean expressions to check whether or not the mouse has moved. The `mouseDidMove` block will return `false` if the mouse is still, but `true` if the mouse has been moving.

        # Do This

        Right now, this program just displays a salt shaker sprite. You'll need to use `mouseDidMove` so that you can "shake" the salt by moving the mouse back and forth.

        -   Add a conditional that checks if `mouseDidMove`.
        -   If the conditional is true, rotate the salt sprite randomly to the left or right.

        _Challenge: Can you keep track of how many times the `mouseDidMove` shakes the salt, and then rotate it right side up after 100 shakes?_
      CSD U3 - conditionals - first conditional: "<img src=\"https://images.code.org/36c5543076622c96f7dabce8bc37f995-image-1468425774455.54.03
        PM.png\" style=\"float:right;width:100px\">\n\n# If Statement\n\nThe Boolean
        expressions you used earlier allow us to ask questions, but in order to _respond
        to those questions_, we need to use an `if` statement.\n\n`if` statements
        usually go inside your draw loop because we want to check them each time the
        loop runs. \n\n# Do This\n\nThe race car program you wrote earlier is loaded
        here for you.\n\n-   Add an `if` statement after you update the position of
        the race car.\n-   Move the Boolean expression from the console.log statement
        to the condition of the if statement.\n-   Inside the `if` statement add a
        statement to draw text on the screen to say \"Winner\"."
      CSD U3 - conditionals - first conditional 2: |-
        <img src="https://images.code.org/abd459d8d1477ac2f582417f4334cdaa-image-1466107090414.gif" style="width:200px;float:right">

        # Visible

        Now that you have conditionals and images, sometimes it's useful to hide the image for a while and then show it again. You can do this using the `visible` property. The visible property is a little different from other properties you have seen in the past: It is a Boolean value, either `true` (the sprite is visible) or `false` (the sprite is **not** visible). By default, visible is set to `true`.

        # Do This

        Make the balloon pop when it hits the edge of the game area!

        -   Add an `if` statement that checks to see if the balloon has hit the edge.
            -   Use a watcher on `balloon.scale` to help you out.
        -   Create a pop sprite which uses the "pop" visual in the animation tab.
        -   Set the pop's `visible` property to `false` to start.
        -   Inside the `if` add two statements.
            -   One that sets the `visible` property to hide the balloon sprite.
            -   One that sets the `visible` property to show the pop sprite.
      CSD U3 - conditionals - first conditional 2_2018: |-
        <img src="https://images.code.org/abd459d8d1477ac2f582417f4334cdaa-image-1466107090414.gif" style="width:200px;float:right">

        # Visible

        Sometimes it's useful to hide the image for a while and then show it again. You can do this using the `visible` property. The visible property is a little different from other properties you have seen in the past: It is a Boolean value, either `true` (the sprite is visible) or `false` (the sprite is **not** visible). By default, visible is set to `true`.

        # Do This

        Make the balloon pop when it hits the edge of the game area!

        -   Add a conditional that checks to see whether the balloon has hit the edge.
            -   Use a watcher on `balloon.scale` to help you out.
        -   Create a pop sprite which uses the "pop" visual in the animation tab.
        -   Use the `visible` property to keep the "pop" sprite hidden at the beginning.
        -   Inside the `if` add two statements.
            -   One that sets the `visible` property to hide the balloon sprite.
            -   One that sets the `visible` property to show the pop sprite.
      CSD U3 - conditionals - first conditional 2_2018_2019: |-
        <img src="https://images.code.org/abd459d8d1477ac2f582417f4334cdaa-image-1466107090414.gif" style="width:200px;float:right">

        # Visible

        Sometimes it's useful to hide the image for a while and then show it again. You can do this using the `visible` property. The visible property is a little different from other properties you have seen in the past: It is a Boolean value, either `true` (the sprite is visible) or `false` (the sprite is **not** visible). By default, visible is set to `true`.

        # Do This

        Make the balloon pop when it hits the edge of the game area!

        -   Add a conditional that checks to see whether the balloon has hit the edge.
            -   Use a watcher on `balloon.scale` to help you out.
        -   Create a pop sprite which uses the "pop" visual in the animation tab.
        -   Use the `visible` property to keep the "pop" sprite hidden at the beginning.
        -   Inside the `if` add two statements.
            -   One that sets the `visible` property to hide the balloon sprite.
            -   One that sets the `visible` property to show the pop sprite.
      CSD U3 - conditionals - first conditional_2018: "<img src=\"https://images.code.org/36c5543076622c96f7dabce8bc37f995-image-1468425774455.54.03
        PM.png\" style=\"float:right;width:100px\">\n\n# If Statement\n\nThe Boolean
        expressions you used earlier allow us to ask questions, but in order to _respond
        to those questions_, we need to use an `if` statement.\n\n`if` statements
        usually go inside your draw loop because we want to check them each time the
        loop runs. \n\n# Do This\n\nThe race car program you wrote earlier is loaded
        here for you.\n\n-   Add an `if` statement after you update the position of
        the race car.\n-   Move the Boolean expression from the console.log statement
        to the condition of the if statement.\n-   Inside the `if` statement add a
        statement to draw text on the screen to say \"Winner\"."
      CSD U3 - conditionals - first conditional_2019: "<img src=\"https://images.code.org/36c5543076622c96f7dabce8bc37f995-image-1468425774455.54.03
        PM.png\" style=\"float:right;width:100px\">\n\n# If Statement\n\nThe Boolean
        expressions you used earlier allow us to ask questions, but in order to _respond
        to those questions_, we need to use an `if` statement.\n\n`if` statements
        usually go inside your draw loop because we want to check them each time the
        loop runs. \n\n# Do This\n\nThe race car program you wrote earlier is loaded
        here for you.\n\n-   Add an `if` statement after you update the position of
        the race car.\n-   Move the Boolean expression from the console.log statement
        to the condition of the if statement.\n-   Inside the `if` statement, add
        a statement to draw text on the screen to say \"Winner\"."
      CSD U3 - conditionals - transition: |-
        # Booleans

        In the past few levels, we have been comparing values of sprites to find out whether something is true or false. Let's start putting that in the context of an animation.

        # Do This

        The program draws a race car and a finish line. We are going to figure out when the race car crosses the finish line. The sprites have all been set up for you.

        -   Add a `console.log` statement inside the draw loop. ( [Show me where](#triggercallout=callout) )
        -   Add an Boolean expression inside the `console.log` that asks "Is the x position of the race car less than the x position of the finish line?"
        -   Look at the output of the program as the car moves. When does the output change? Why?
      CSD U3 - conditionals - transition_2018: |-
        # Booleans

        In the past few levels, we have been comparing values of sprites to find out whether something is true or false. Let's start putting that in the context of an animation.

        # Do This

        The program draws a race car and a finish line. We are going to figure out when the race car crosses the finish line. The sprites have all been set up for you.

        -   Add a `console.log` statement inside the draw loop. ( [Show me where](#triggercallout=callout) )
        -   Add an Boolean expression inside the `console.log` that asks "Is the x position of the race car less than the x position of the finish line?"
        -   Look at the output of the program as the car moves. When does the output change? Why?
      CSD U3 - conditionals - transition_2019: |-
        # Booleans

        In the past few levels, we have been comparing values of sprites to find out whether something is true or false. Let's start putting that in the context of an animation.

        # Do This

        The program draws a race car and a finish line. We are going to figure out when the race car crosses the finish line. The sprites have all been set up for you.

        -   Add a `console.log` statement inside the draw loop. ( [Show me where](#triggercallout=callout) )
        -   Add a Boolean expression inside the `console.log` that asks "Is the x position of the race car less than the x position of the finish line?"
        -   Look at the output of the program as the car moves. When does the output change? Why?
      CSD U3 AnimationsMulti Play Defender: |-
        # Defend Your Cake!

        This is an example of a defender game that you'll build by the end of this lesson. To defend your cake, move the alien with arrow keys to block the lady bugs and push them into the water.

        # Do This

        Turn to a classmate and make a list of the following information.

        -   How many sprites are there in this game. Which are they?
        -   What variables are needed to make this game? What do they store?
        -   If you were to split the code of this game into functions what do you think they would be? What are the major pieces of behavior you'd need to create in your code?
      CSD U3 AnimationsMulti Play Defender_2018: |-
        # Defend Your Cake!

        This is an example of a defender game that you'll build by the end of this lesson. To defend your cake, move the alien with arrow keys to block the lady bugs and push them into the water.

        # Do This

        Turn to a classmate and make a list of the following information.

        -   How many sprites are there in this game. Which are they?
        -   What variables are needed to make this game? What do they store?
        -   If you were to split the code of this game into functions what do you think they would be? What are the major pieces of behavior you'd need to create in your code?
      CSD U3 AnimationsMulti Play Defender_2019: |-
        # Defend Your Cake!

        This is an example of a defender game that you'll build by the end of this lesson. To defend your cake, move the alien with arrow keys to block the lady bugs and push them into the water.

        # Do This

        Turn to a classmate and make a list of the following information.

        -   How many sprites are there in this game. Which are they?
        -   What variables are needed to make this game? What do they store?
        -   If you were to split the code of this game into functions what do you think they would be? What are the major pieces of behavior you'd need to create in your code?
      CSD U3 AnimationsMulti defender animate cake enemies: |-
        # Getting Started: Set Animations

        You should have already reviewed the planning guide for this project. A lot of the work to turn this project guide into a working game has already been started. Based on the project guide you're going to do the rest of this work.

        # Do This

        Before we get started you'll want some better animations for each of your sprites.

        -   In the Animation Tab are animations for each of your sprites. Go look at what they are.
        -   In your code give each sprite its appropriate animation. **Use the ones provided for now** but later you'll be able to go change them.
        -   Head to [Level 4](/s/csd3-2017/stage/20/puzzle/4) if you need help remembering how to do this.
      CSD U3 AnimationsMulti defender animate cake enemies_2018: |-
        # Getting Started: Set Animations

        You should have already reviewed the planning guide for this project. A lot of the work to turn this project guide into a working game has already been started. Based on the project guide you're going to do the rest of this work.

        # Do This

        Before we get started you'll want some better animations for each of your sprites.

        -   In the Animation Tab are animations for each of your sprites. Go look at what they are.
        -   In your code give each sprite its appropriate animation. **Use the ones provided for now** but later you'll be able to go change them.
        -   Head to [Level 4](/s/csd3-2018/stage/20/puzzle/4) if you need help remembering how to do this.
      CSD U3 AnimationsMulti defender animate cake enemies_2019: |-
        # Getting Started: Set Animations

        You should have already reviewed the planning guide for this project. A lot of the work to turn this project guide into a working game has already been started. Based on the project guide you're going to do the rest of this work.

        # Do This

        Before we get started you'll want some better animations for each of your sprites.

        -   In the Animation Tab are animations for each of your sprites. Go look at what they are.
        -   In your code give each sprite its appropriate animation. **Use the ones provided for now** but later you'll be able to go change them.
        -   Head to [Level 4](../../20/puzzle/4) if you need help remembering how to do this.
      CSD U3 AnimationsMulti defender animate player: |-
        # Change Player Animations

        Right now your player is always facing the same direction. You can make things look a lot more realistic by switching between animations. Your player should switch between a left-facing and right-facing animation depending on which key was last pressed. Remember, you can quickly copy and edit animations inside the Animation Tab.

        # Do This

        -   Inside the Animation Tab copy the animation of your player sprite.
        -   Flip each frame of the new animation so that the sprite is facing in the opposite direction.
        -   Rename your new animation.
        -   Use the `setAnimation` command inside the `movePlayer` function so that the player changes the direction it is facing when the "left" and "right" arrows are pressed.
      CSD U3 AnimationsMulti defender animate player_2018: |-
        # Change Player Animations

        Right now your player is always facing the same direction. You can make things look a lot more realistic by switching between animations. Your player should switch between a left-facing and right-facing animation depending on which key was last pressed. Remember, you can quickly copy and edit animations inside the Animation Tab.

        # Do This

        -   Inside the Animation Tab copy the animation of your player sprite.
        -   Flip each frame of the new animation so that the sprite is facing in the opposite direction.
        -   Rename your new animation.
        -   Use the `setAnimation` command inside the `movePlayer` function so that the player changes the direction it is facing when the "left" and "right" arrows are pressed.
      CSD U3 AnimationsMulti defender animate player_2019: |-
        # Change Player Animations

        Right now your player is always facing the same direction. You can make things look a lot more realistic by switching between animations. Your player should switch between a left-facing and right-facing animation depending on which key was last pressed. Remember, you can quickly copy and edit animations inside the Animation Tab.

        # Do This

        -   Inside the Animation Tab copy the animation of your player sprite.
        -   Flip each frame of the new animation so that the sprite is facing in the opposite direction.
        -   Rename your new animation.
        -   Use the `setAnimation` command inside the `movePlayer` function so that the player changes the direction it is facing when the "left" and "right" arrows are pressed.
      CSD U3 AnimationsMulti defender create set enemies: |-
        # Creating Functions

        <img src="https://images.code.org/126982cbde9ae62e9a77ca1e53c92024-image-1476291567280.58.00 AM.png" style="float:right; height:90px">

        Your program now includes code in two places to set the enemies on the left side of the screen at a random y location. You can create functions to reset each of your two enemies to remove repetitions from your program. This will make your program easier to read, allow you to change it more easily, and allow you to quickly reset your sprites at other points in your program if you need to.

        # Do This

        <img src="https://images.code.org/01a2f4d9725162482fda9f74734c992c-image-1476461412974.09.52 AM.png" style="
        float:right; height:70px">

        -   At the bottom of your program create two new functions, `setEnemy1` and `setEnemy2`.
        -   Inside each of these functions place the code that sets the enemies on the left side of the screen and gives them a random y position.
        -   Wherever the code for `setEnemy1` and `setEnemy2` appears in your program replace them with a call to the functions you just created.
      CSD U3 AnimationsMulti defender create set enemies_2018: |-
        # Creating Functions

        <img src="https://images.code.org/126982cbde9ae62e9a77ca1e53c92024-image-1476291567280.58.00 AM.png" style="float:right; height:90px">

        Your program now includes code in two places to set the enemies on the left side of the screen at a random y location. You can create functions to reset each of your two enemies to remove repetitions from your program. This will make your program easier to read, allow you to change it more easily, and allow you to quickly reset your sprites at other points in your program if you need to.

        # Do This

        <img src="https://images.code.org/01a2f4d9725162482fda9f74734c992c-image-1476461412974.09.52 AM.png" style="
        float:right; height:70px">

        -   At the bottom of your program create two new functions, `setEnemy1` and `setEnemy2`.
        -   Inside each of these functions place the code that sets the enemies on the left side of the screen and gives them a random y position.
        -   Wherever the code for `setEnemy1` and `setEnemy2` appears in your program replace them with a call to the functions you just created.
      CSD U3 AnimationsMulti defender create set enemies_2019: |-
        # Creating Functions

        <img src="https://images.code.org/126982cbde9ae62e9a77ca1e53c92024-image-1476291567280.58.00 AM.png" style="float:right; height:90px">

        Your program now includes code in two places to set the enemies on the left side of the screen at a random y location. You can create functions to reset each of your two enemies to remove repetitions from your program. This will make your program easier to read, allow you to change it more easily, and allow you to quickly reset your sprites at other points in your program if you need to.

        # Do This

        <img src="https://images.code.org/01a2f4d9725162482fda9f74734c992c-image-1476461412974.09.52 AM.png" style="
        float:right; height:70px">

        -   At the bottom of your program create two new functions, `setEnemy1` and `setEnemy2`.
        -   Inside each of these functions place the code that sets the enemies on the left side of the screen and gives them a random y position.
        -   Wherever the code for `setEnemy1` and `setEnemy2` appears in your program replace them with a call to the functions you just created.
      CSD U3 AnimationsMulti defender displace enemies: |-
        # Displace Enemies

        It's time to write code for some more sprite interactions. Your player sprite should displace the enemy sprites.

        # Do This

        For this level you'll be writing code inside the `displaceEnemies` function.

        -   Write code that makes player displace both enemy sprites.
        -   Test your program to make sure your player is displacing enemies but they keep moving right after the player moves away.

        _Hint: You can use `sprite.debug` to see your sprites' colliders if you need to debug your program._
      CSD U3 AnimationsMulti defender displace enemies_2018: |-
        # Displace Enemies

        It's time to write code for some more sprite interactions. Your player sprite should displace the enemy sprites.

        # Do This

        For this level you'll be writing code inside the `displaceEnemies` function.

        -   Write code that makes player displace both enemy sprites.
        -   Test your program to make sure your player is displacing enemies but they keep moving right after the player moves away.

        _Hint: You can use `sprite.debug` to see your sprites' colliders if you need to debug your program._
      CSD U3 AnimationsMulti defender displace enemies_2019: |-
        # Displace Enemies

        It's time to write code for some more sprite interactions. Your player sprite should displace the enemy sprites.

        # Do This

        For this level you'll be writing code inside the `displaceEnemies` function.

        -   Write code that makes player displace both enemy sprites.
        -   Test your program to make sure your player is displacing enemies but they keep moving right after the player moves away.

        _Hint: You can use `sprite.debug` to see your sprites' colliders if you need to debug your program._
      CSD U3 AnimationsMulti defender enemies move: |-
        # Moving The Enemies

        It's time to start writing the code that will move your sprites. To begin you'll need to get your enemy sprites to a random position and moving across the screen.

        # Do This

        At the top of your program, after you create each enemy sprite, write code that will move it to the correct position and give it the correct velocity.

        -   Use `sprite.x` to set the x position to 0.
        -   Use `sprite.y` to set the y position should be a random number between 150 and 250.
        -   Use `sprite.velocityX` to set the x velocity to 2.

        Test your program. Your enemy sprites should now be moving across the bridge.
      CSD U3 AnimationsMulti defender enemies move_2018: |-
        # Moving The Enemies

        It's time to start writing the code that will move your sprites. To begin you'll need to get your enemy sprites to a random position and moving across the screen.

        # Do This

        At the top of your program, after you create each enemy sprite, write code that will move it to the correct position and give it the correct velocity.

        -   Use `sprite.x` to set the x position to 0.
        -   Use `sprite.y` to set the y position should be a random number between 150 and 250.
        -   Use `sprite.velocityX` to set the x velocity to 2.

        Test your program. Your enemy sprites should now be moving across the bridge.
      CSD U3 AnimationsMulti defender enemies move_2019: |-
        # Moving The Enemies

        It's time to start writing the code that will move your sprites. To begin you'll need to get your enemy sprites to a random position and moving across the screen.

        # Do This

        At the top of your program, after you create each enemy sprite, write code that will move it to the correct position and give it the correct velocity.

        -   Use `sprite.x` to set the x position to 0.
        -   Use `sprite.y` to set the y position should be a random number between 150 and 250.
        -   Use `sprite.velocityX` to set the x velocity to 2.

        Test your program. Your enemy sprites should now be moving across the bridge.
      CSD U3 AnimationsMulti defender enemies touch cake: |-
        # Touching the Cake

        If the enemies get all the way across to the cake you should place them back at the left side of the screen and decrease the score. To start you'll **write code for only one of your enemies**.

        # Do This

        Inside the `enemiesTouchCake` function you'll need to write code that checks when a ladybug is touching the cake, resets its position, and changes the score.

        -   Use an `if` and `isTouching` to detect whether enemy1 has touched the cake.
        -   Inside your `if` block place code that:
            -   sets enemy1's x position back to 0.
            -   sets enemy1's y position to a random number between 150 and 250.
            -   uses the counter pattern to decrease the score by 2.

        (_Hint: You can reuse some code you already wrote_)

        Test your code. One of your ladybugs should now reset when it gets across to the cake, and the score should go down by 2.
      CSD U3 AnimationsMulti defender enemies touch cake sprite2: |-
        # Touching the Cake: Second Ladybug

        Your first enemy sprite should now be resetting when it gets to the cake. Now you'll want the other ladybug to reset as well.

        # Do This

        Inside the `enemiesTouchCake` function you should have written code that resets `enemy1`.

        -   Copy the entire if-statement you wrote in the last level (Ctrl-C).
        -   Paste the code inside of the `enemiesTouchCake` function, just below the last one (Ctrl-V).
        -   Change the name of the sprite in that code from `enemy1` to `enemy2`.

        Test your code. Now both bugs should reset when they touch the cake.
      CSD U3 AnimationsMulti defender enemies touch cake sprite2_2018: |-
        # Touching the Cake: Second Ladybug

        Your first enemy sprite should now be resetting when it gets to the cake. Now you'll want the other ladybug to reset as well.

        # Do This

        Inside the `enemiesTouchCake` function you should have written code that resets `enemy1`.

        -   Copy the entire if-statement you wrote in the last level (Ctrl-C).
        -   Paste the code inside of the `enemiesTouchCake` function, just below the last one (Ctrl-V).
        -   Change the name of the sprite in that code from `enemy1` to `enemy2`.

        Test your code. Now both bugs should reset when they touch the cake.
      CSD U3 AnimationsMulti defender enemies touch cake sprite2_2019: |-
        # Touching the Cake: Second Ladybug

        Your first enemy sprite should now be resetting when it gets to the cake. Now you'll want the other ladybug to reset as well.

        # Do This

        Inside the `enemiesTouchCake` function you should have written code that resets `enemy1`.

        -   Copy the entire if-statement you wrote in the last level (Ctrl-C).
        -   Paste the code inside of the `enemiesTouchCake` function, just below the last one (Ctrl-V).
        -   Change the name of the sprite in that code from `enemy1` to `enemy2`.

        Test your code. Now both bugs should reset when they touch the cake.
      CSD U3 AnimationsMulti defender enemies touch cake_2018: |-
        # Touching the Cake

        If the enemies get all the way across to the cake you should place them back at the left side of the screen and decrease the score. To start you'll **write code for only one of your enemies**.

        # Do This

        Inside the `enemiesTouchCake` function you'll need to write code that checks when a ladybug is touching the cake, resets its position, and changes the score.

        -   Use an `if` and `isTouching` to detect whether enemy1 has touched the cake.
        -   Inside your `if` block place code that:
            -   sets enemy1's x position back to 0.
            -   sets enemy1's y position to a random number between 150 and 250.
            -   uses the counter pattern to decrease the score by 2.

        (_Hint: You can reuse some code you already wrote_)

        Test your code. One of your ladybugs should now reset when it gets across to the cake, and the score should go down by 2.
      CSD U3 AnimationsMulti defender enemies touch cake_2019: |-
        # Touching the Cake

        If the enemies get all the way across to the cake you should place them back at the left side of the screen and decrease the score. To start you'll **write code for only one of your enemies**.

        # Do This

        Inside the `enemiesTouchCake` function you'll need to write code that checks when a ladybug is touching the cake, resets its position, and changes the score.

        -   Use an `if` and `isTouching` to detect whether enemy1 has touched the cake.
        -   Inside your `if` block place code that:
            -   sets enemy1's x position back to 0.
            -   sets enemy1's y position to a random number between 150 and 250.
            -   uses the counter pattern to decrease the score by 2.

        (_Hint: You can reuse some code you already wrote_)

        Test your code. One of your ladybugs should now reset when it gets across to the cake, and the score should go down by 2.
      CSD U3 AnimationsMulti defender make it your own: |-
        # Make It Your Own

        You just walked through someone else's plan for creating a game, so now it's time to make it your own. What additional features or challenges do you want to create?

        # Do This

        Select one of the challenges below to add to the game or come up with a challenge of your own.

        -   Change the visuals of the game so that your player, enemies, or cake look different.
        -   End the game when the enemies get to the cake and print the score. For an extra challenge end the game only after 3 enemies get through.
        -   Randomize the speed of the enemies.
        -   Create a new background that shows up when players reach a higher score.
      CSD U3 AnimationsMulti defender make it your own_2018: |-
        # Make It Your Own

        You just walked through someone else's plan for creating a game, so now it's time to make it your own. What additional features or challenges do you want to create?

        # Do This

        Select one of the challenges below to add to the game or come up with a challenge of your own.

        -   Change the visuals of the game so that your player, enemies, or cake look different.
        -   End the game when the enemies get to the cake and print the score. For an extra challenge end the game only after 3 enemies get through.
        -   Randomize the speed of the enemies.
        -   Create a new background that shows up when players reach a higher score.
      CSD U3 AnimationsMulti defender make it your own_2019: |-
        # Make It Your Own

        You just walked through someone else's plan for creating a game, so now it's time to make it your own. What additional features or challenges do you want to create?

        # Do This

        Select one of the challenges below to add to the game or come up with a challenge of your own.

        -   Change the visuals of the game so that your player, enemies, or cake look different.
        -   End the game when the enemies get to the cake and print the score. For an extra challenge end the game only after 3 enemies get through.
        -   Randomize the speed of the enemies.
        -   Create a new background that shows up when players reach a higher score.
      CSD U3 AnimationsMulti defender move player: |-
        # Moving Left and Right

        Now that your enemy sprites are moving correctly, it's time to write the code to move your player. For now you'll just need to get your character moving left and right and changing its animations.

        # Do This

        For this level you'll be writing code inside the `movePlayer` function.

        -   Use an `if` block along with `keyDown` to detect when the "right" arrow is pressed.
        -   Use `sprite.x` and the counter pattern increase the player's x position by 3.
        -   Use another `if` block to move the player to the left when the "left" arrow is pressed. This time you'll need to decrease the player's x position.

        Test your game. Your character sprite should now move left and right when you press the left and right arrows.
      CSD U3 AnimationsMulti defender move player_2018: |-
        # Moving Left and Right

        Now that your enemy sprites are moving correctly, it's time to write the code to move your player. For now you'll just need to get your character moving left and right and changing its animations.

        # Do This

        For this level you'll be writing code inside the `movePlayer` function.

        -   Use an `if` block along with `keyDown` to detect when the "right" arrow is pressed.
        -   Use `sprite.x` and the counter pattern increase the player's x position by 3.
        -   Use another `if` block to move the player to the left when the "left" arrow is pressed. This time you'll need to decrease the player's x position.

        Test your game. Your character sprite should now move left and right when you press the left and right arrows.
      CSD U3 AnimationsMulti defender move player_2019: |-
        # Moving Left and Right

        Now that your enemy sprites are moving correctly, it's time to write the code to move your player. For now you'll just need to get your character moving left and right and changing its animations.

        # Do This

        For this level you'll be writing code inside the `movePlayer` function.

        -   Use an `if` block along with `keyDown` to detect when the "right" arrow is pressed.
        -   Use `sprite.x` and the counter pattern increase the player's x position by 3.
        -   Use another `if` block to move the player to the left when the "left" arrow is pressed. This time you'll need to decrease the player's x position.

        Test your game. Your character sprite should now move left and right when you press the left and right arrows.
      CSD U3 AnimationsMulti defender move up down: |-
        # Moving Up and Down

        You'll want your player sprite to move up and down as well.

        # Do This

        For this level you'll still be writing code inside the `movePlayer` function.

        -   Use an `if` block along with `keyDown` to detect when the "up" arrow is pressed.
        -   Use `sprite.y` to increase the player's y position by 3 using the counter pattern.
        -   Use another `if` block to move the player down when the "down" arrow is pressed.

        Test your code. Your character should now move in all 4 directions.
      CSD U3 AnimationsMulti defender move up down_2018: |-
        # Moving Up and Down

        You'll want your player sprite to move up and down as well.

        # Do This

        For this level you'll still be writing code inside the `movePlayer` function.

        -   Use an `if` block along with `keyDown` to detect when the "up" arrow is pressed.
        -   Use `sprite.y` to make the player go up by 3 using the counter pattern.
        -   Use another `if` block to move the player down when the "down" arrow is pressed.

        Test your code. Your character should now move in all 4 directions.
      CSD U3 AnimationsMulti defender move up down_2019: |-
        # Moving Up and Down

        You'll want your player sprite to move up and down as well.

        # Do This

        For this level you'll still be writing code inside the `movePlayer` function.

        -   Use an `if` block along with `keyDown` to detect when the "up" arrow is pressed.
        -   Use `sprite.y` to make the player go up by 3 using the counter pattern.
        -   Use another `if` block to move the player down when the "down" arrow is pressed.

        Test your code. Your character should now move in all 4 directions.
      CSD U3 AnimationsMulti defender touch water: |-
        # Touching the Water

        The last part of the game that you'll need to write is the code to reset the sprites when they touch the water. Luckily you should have already written functions that reset each sprite, so you'll just need a good way to know when either sprite leaves the bridge. Start by writing the code for a single enemy and then copy-paste and make small changes to create code for your second enemy.

        # Do This

        For this level you'll be writing code inside the `enemiesTouchWater` function.

        -   Use an `if` statement to check whether enemy1 is off the top of the bridge by checking whether its y value is below 140. Within your if statement:
            -   use your `setEnemy1` function to reset the sprite.
            -   add 1 to the score.
        -   Use an if statement to check whether enemy1 is off the bottom of the bridge by checking whether its y value is above 260. Within your if statement:
            -   use your `setEnemy1` function to reset the sprite.
            -   add 1 to the score.
        -   Test your program for the first enemy sprite. Make sure the sprite is resetting and the score goes up.
        -   Once it is working copy and paste the code you wrote to create the same behavior for `enemy2`. You'll need to change the name of the sprite and the name of the functions you use.
      CSD U3 AnimationsMulti defender touch water_2018: |-
        # Touching the Water

        The last part of the game that you'll need to write is the code to reset the sprites when they touch the water. Luckily you should have already written functions that reset each sprite, so you'll just need a good way to know when either sprite leaves the bridge. Start by writing the code for a single enemy and then copy-paste and make small changes to create code for your second enemy.

        # Do This

        For this level you'll be writing code inside the `enemiesTouchWater` function.

        -   Use an `if` statement to check whether enemy1 is off the top of the bridge by checking whether its y value is below 140. Within your if statement:
            -   use your `setEnemy1` function to reset the sprite.
            -   add 1 to the score.
        -   Use an if statement to check whether enemy1 is off the bottom of the bridge by checking whether its y value is above 260. Within your if statement:
            -   use your `setEnemy1` function to reset the sprite.
            -   add 1 to the score.
        -   Test your program for the first enemy sprite. Make sure the sprite is resetting and the score goes up.
        -   Once it is working copy and paste the code you wrote to create the same behavior for `enemy2`. You'll need to change the name of the sprite and the name of the functions you use.
      CSD U3 AnimationsMulti defender touch water_2019: |-
        # Touching the Water

        The last part of the game that you'll need to write is the code to reset the sprites when they touch the water. Luckily you should have already written functions that reset each sprite, so you'll just need a good way to know when either sprite leaves the bridge. Start by writing the code for a single enemy and then copy-paste and make small changes to create code for your second enemy.

        # Do This

        For this level you'll be writing code inside the `enemiesTouchWater` function.

        -   Use an `if` statement to check whether enemy1 is off the top of the bridge by checking whether its y value is below 140. Within your if statement:
            -   use your `setEnemy1` function to reset the sprite.
            -   add 1 to the score.
        -   Use an if statement to check whether enemy1 is off the bottom of the bridge by checking whether its y value is above 260. Within your if statement:
            -   use your `setEnemy1` function to reset the sprite.
            -   add 1 to the score.
        -   Test your program for the first enemy sprite. Make sure the sprite is resetting and the score goes up.
        -   Once it is working copy and paste the code you wrote to create the same behavior for `enemy2`. You'll need to change the name of the sprite and the name of the functions you use.
      CSD U3 AnimationsMulti introducing multiframe: |-
        # Using Multiframe Animations

        In the sample defender game the sprites themselves were animated. Before getting started on programming this game, take a minute to get familiar with this new way of animating sprites.

        # Do This

        This program already includes several sprites but they don't yet have any animations.

        -   Go to the Animation Tab and check out the multi-frame animations already added to your project. Choose one for each of your characters.
        -   Remember you can use `setAnimation` to give your sprites animations you've created in the Animation Tab.
      CSD U3 AnimationsMulti introducing multiframe_2018: |-
        # Using Multiframe Animations

        In the sample defender game the sprites themselves were animated. Before getting started on programming this game, take a minute to get familiar with this new way of animating sprites.

        # Do This

        This program already includes several sprites but they don't yet have any animations.

        -   Go to the Animation Tab and check out the multi-frame animations already added to your project. Choose one for each of your characters.
        -   Remember you can use `setAnimation` to give your sprites animations you've created in the Animation Tab.
      CSD U3 AnimationsMulti introducing multiframe_2019: |-
        # Using Multiframe Animations

        In the sample defender game the sprites themselves were animated. Before getting started on programming this game, take a minute to get familiar with this new way of animating sprites.

        # Do This

        This program already includes several sprites but they don't yet have any animations.

        -   Go to the Animation Tab and check out the multi-frame animations already added to your project. Choose one for each of your characters.
        -   Remember you can use `setAnimation` to give your sprites animations you've created in the Animation Tab.
      CSD U3 AnimationsMulti mirror animation: "# Editing Multiframe Animations\n\nYour
        sprites will look a lot more realistic if they turn around when they're moving.
        You can switch back and forth between multiframe animations when the user
        presses different keys.\n\n# Do This\n\nRead this code and run the program.
        Make sure you know how the sprite responds to the arrow keys.\n\n-   In the
        Animation Tab, create a copy of the alien animation by clicking the following
        button: ![](<https://images.code.org/aee81f9cd3f63bb8a9c91ac3ab250a87-image-1475699896387.38.09
        PM.png>)\n-   Use the tool to flip your animation. Make sure you flip both
        frames using this button:  ![](<https://images.code.org/3b10b4a612f9a7c640dc7bb18f4c2b91-image-1475699599617.33.03
        PM.png>) \n-   Rename your new animation.\n-   Use your new animation and
        old animation so that the alien faces the correct direction when moving. Where
        do you think you'll need to set the sprite's animation in your code?"
      CSD U3 AnimationsMulti mirror animation_2018: "# Editing Multiframe Animations\n\nYour
        sprites will look a lot more realistic if they turn around when they're moving.
        You can switch back and forth between multiframe animations when the user
        presses different keys.\n\n# Do This\n\nRead this code and run the program.
        Make sure you know how the sprite responds to the arrow keys.\n\n-   In the
        Animation Tab, create a copy of the alien animation by clicking the following
        button: ![](<https://images.code.org/aee81f9cd3f63bb8a9c91ac3ab250a87-image-1475699896387.38.09
        PM.png>)\n-   Use the tool to flip your animation. Make sure you flip both
        frames using this button:  ![](<https://images.code.org/3b10b4a612f9a7c640dc7bb18f4c2b91-image-1475699599617.33.03
        PM.png>) \n-   Rename your new animation.\n-   Use your new animation and
        old animation so that the alien faces the correct direction when moving. Where
        do you think you'll need to set the sprite's animation in your code?"
      CSD U3 AnimationsMulti mirror animation_2019: "# Editing Multiframe Animations\n\nYour
        sprites will look a lot more realistic if they turn around when they're moving.
        You can switch back and forth between multiframe animations when the user
        presses different keys.\n\n# Do This\n\nRead this code and run the program.
        Make sure you know how the sprite responds to the arrow keys.\n\n-   In the
        Animation Tab, create a copy of the alien animation by clicking the following
        button: ![](<https://images.code.org/aee81f9cd3f63bb8a9c91ac3ab250a87-image-1475699896387.38.09
        PM.png>)\n-   Use the tool to flip your animation. Make sure you flip both
        frames using this button:  ![](<https://images.code.org/3b10b4a612f9a7c640dc7bb18f4c2b91-image-1475699599617.33.03
        PM.png>) \n-   Rename your new animation.\n-   Use your new animation and
        old animation so that the alien faces the correct direction when moving. Where
        do you think you'll need to set the sprite's animation in your code?"
      CSD U3 AnimationsMulti slow down: "# Slow Down\n\nNice work! Time to start learning
        how to control these multiframe animations.\n\n# Do This\n\nYour sprites should
        be animated but they're moving really quickly. \n\n-   Head back to the Animation
        Tab. Underneath each animation you should see a slider. ![](<https://images.code.org/169e11c1f6f55b607937fe9cb7e5e390-image-1476209267457.07.26
        AM.png>)\n-   Use these sliders to slow down your animations so they look
        more realistic."
      CSD U3 AnimationsMulti slow down_2018: "# Slow Down\n\nNice work! Time to start
        learning how to control these multiframe animations.\n\n# Do This\n\nYour
        sprites should be animated but they're moving really quickly. \n\n-   Head
        back to the Animation Tab. Underneath each animation you should see a slider.
        ![](<https://images.code.org/169e11c1f6f55b607937fe9cb7e5e390-image-1476209267457.07.26
        AM.png>)\n-   Use these sliders to slow down your animations so they look
        more realistic."
      CSD U3 AnimationsMulti slow down_2019: "# Slow Down\n\nNice work! Time to start
        learning how to control these multiframe animations.\n\n# Do This\n\nYour
        sprites should be animated but they're moving really quickly. \n\n-   Head
        back to the Animation Tab. Underneath each animation you should see a slider.
        ![](<https://images.code.org/169e11c1f6f55b607937fe9cb7e5e390-image-1476209267457.07.26
        AM.png>)\n-   Use these sliders to slow down your animations so they look
        more realistic."
      CSD U3 Boolean Modify: "# Boolean Expressions\n\nThe simplest Boolean expressions
        are questions that the computer can answer with true or false. These expressions
        are made using **comparison operators**, as shown below.\n\n|                                                Comparison
        Operator                                                | Boolean Expression
        |        Meaning        |\n| :---------------------------------------------------------------------------------------------------------------:
        | :----------------: | :-------------------: |\n| <img src=\"https://images.code.org/1a0798d75d4242715e7608d825f95101-image-1447271431312.png\"
        style=\"width: 100px\"> |       `1 < 9`      |   Is 1 less than 9?   |\n|
        <img src=\"https://images.code.org/5ff460ac121f0ac51b569e96a4404c57-image-1447271431310.png\"
        style=\"width: 100px\"> |       `1 > 9`      | Is 1 greater than 9 ? |\n|
        <img src=\"https://images.code.org/a4daa9efccea2278e165592efe343c1a-image-1447271431308.png\"
        style=\"width: 100px\"> |      `1 == 9`      |    Is 1 equal to 9?   |\n\n<br>\n\n**Note:**
        If you saw the statement 3 \\< 2 in math class, you'd think something was
        terribly wrong, but this is not math class.  In computer science, the comparison
        operators **ask a question** that the computer will answer with `true` or
        `false`. So you can read 3 \\< 2 as **\"Is 3 less than 2?\"** The answer in
        this case is no, or `false`.  \n\nAnother way to say this is that the Boolean
        expression `3 < 2` **evaluates** to `false`.\n\n# Do This\n\nCan you modify
        the values of the sprite properties so that each of the Boolean expressions
        evaluates to `true`?\n\n-   Read through the entire program to see how `sprite1`
        and `sprite2` are being created and which properties are compared.\n-   For
        each of the Boolean expressions, identify the sprite properties being compared.\n-
        \  Change the code _in the first **11** lines only_ so that each of the `console.log()`
        statements print `true`."
      CSD U3 Boolean Modify_2018: |-
        # Boolean Expressions

        The simplest Boolean expressions are questions that the computer can answer with true or false. These expressions are made using **comparison operators**, as shown below.

        |                                                Comparison Operator                                                | Boolean Expression |        Meaning        |
        | :---------------------------------------------------------------------------------------------------------------: | :----------------: | :-------------------: |
        | <img src="https://images.code.org/1a0798d75d4242715e7608d825f95101-image-1447271431312.png" style="width: 100px"> |       `1 < 9`      |   Is 1 less than 9?   |
        | <img src="https://images.code.org/5ff460ac121f0ac51b569e96a4404c57-image-1447271431310.png" style="width: 100px"> |       `1 > 9`      | Is 1 greater than 9 ? |
        | <img src="https://images.code.org/a4daa9efccea2278e165592efe343c1a-image-1447271431308.png" style="width: 100px"> |      `1 == 9`      |    Is 1 equal to 9?   |

        **Note:** If you saw the statement 3 \< 2 in math class, you'd think something was terribly wrong, but this is not math class.  In computer science, the comparison operators **ask a question** that the computer will answer with `true` or `false`. So you can read 3 \< 2 as **"Is 3 less than 2?"** The answer in this case is no, or `false`.

        Another way to say this is that the Boolean expression `3 < 2` **evaluates** to `false`.

        # Do This

        Can you modify the values of the sprite properties so that each of the Boolean expressions evaluates to `true`?

        -   Read through the entire program to see how `sprite1` and `sprite2` are being created and which properties are compared.
        -   For each of the Boolean expressions, identify the sprite properties being compared.
        -   Change the code _in the first **11** lines only_ so that each of the `console.log()` statements print `true`.
      CSD U3 Boolean Modify_2019: "# Boolean Expressions\n\nThe simplest Boolean expressions
        are questions that the computer can answer with true or false. \nAnother way
        to say this is that Boolean expressions **evaluate** to `true` or `false`.\n\n#
        Do This\n\nCan you modify the values of the sprite properties so that each
        of the Boolean expressions evaluates to `true`?\n\n-   Read through the entire
        program to see how `sprite1` and `sprite2` are being created and which properties
        are compared.\n-   For each of the Boolean expressions, identify the sprite
        properties being compared.\n-   Change the code _in the first **11** lines
        only_ so that each of the `console.log()` statements print `true`."
      CSD U3 Complex Movement counter prediction: |-
        # Velocity and the Counter Pattern

        Using the counter pattern with a sprite's x and y property makes a sprite move smoothly across the screen. In this program **the counter pattern is being used with the `sprite.velocityX` property** instead.

        # Predict

        What do you think will happen when the code is run? Why? Once you're ready you can run the code to find out.
      CSD U3 Complex Movement counter prediction_2018: |-
        # Velocity and the Counter Pattern

        Using the counter pattern with a sprite's x and y property makes a sprite move smoothly across the screen. In this program **the counter pattern is being used with the `sprite.velocityX` property** instead.

        # Predict

        What do you think will happen when the code is run? Why? Once you're ready you can run the code to find out.
      CSD U3 Complex Movement counter prediction_2019: |-
        # Velocity and the Counter Pattern

        Using the counter pattern with a sprite's x and y property makes a sprite move smoothly across the screen. In this program **the counter pattern is being used with the `sprite.velocityX` property** instead.

        # Predict

        What do you think will happen when the code is run? Why? Once you're ready you can run the code to find out.
      CSD U3 Compound Nested Challenge: |-
        # Challenge: Checking for Multiple Conditions

        _Check with your teacher before taking on this challenge._

        So far we've looked at a lot of ways to check if a single condition is true, but often a program needs to check the state of many conditions simultaneously before making a decision. For this challenge, let's assume the following scenario:

        -   The sprite should move up, down, left, and right if the corresponding arrow key is pressed.
        -   The sprite should _not_ go all the way off the screen in any direction.

        # Do This Together

        Before you tackle writing this program, you'll need to figure out how to check multiple conditions at once.

        -   **Brainstorm** with your neighbors ways you might check for more than one condition.
        -   **Share** back with the whole class so you can see other potential approaches.
        -   **Explore** the toolbox for blocks that might help (pay extra attention to the Math and Control drawers).
        -   **Program** your proposed solution.
        -   **Test** your program to make sure it's actually checking all of the conditions you intended.
      CSD U3 Compound Nested Challenge_2018: |-
        # Challenge: Checking for Multiple Conditions

        _Check with your teacher before taking on this challenge._

        So far we've looked at a lot of ways to check if a single condition is true, but often a program needs to check the state of many conditions simultaneously before making a decision. For this challenge, let's assume the following scenario:

        -   The sprite should move up, down, left, and right if the corresponding arrow key is pressed.
        -   The sprite should _not_ go all the way off the screen in any direction.

        # Do This Together

        Before you tackle writing this program, you'll need to figure out how to check multiple conditions at once.

        -   **Brainstorm** with your neighbors ways you might check for more than one condition.
        -   **Share** back with other classmates so you can see other potential approaches.
        -   **Explore** the toolbox for blocks that might help (pay extra attention to the Math and Control drawers).
        -   **Program** your proposed solution.
        -   **Test** your program to make sure it's actually checking all of the conditions you intended.
      CSD U3 Compound Nested Challenge_2019: |-
        # Challenge: Checking for Multiple Conditions

        _Check with your teacher before taking on this challenge._

        So far we've looked at a lot of ways to check if a single condition is true, but often a program needs to check the state of many conditions simultaneously before making a decision. For this challenge, let's assume the following scenario:

        -   The sprite should move up, down, left, and right if the corresponding arrow key is pressed.
        -   The sprite should _not_ go all the way off the screen in any direction.

        # Do This Together

        Before you tackle writing this program, you'll need to figure out how to check multiple conditions at once.

        -   **Brainstorm** with your neighbors ways you might check for more than one condition.
        -   **Share** back with other classmates so you can see other potential approaches.
        -   **Explore** the toolbox for blocks that might help (pay extra attention to the Math and Control drawers).
        -   **Program** your proposed solution.
        -   **Test** your program to make sure it's actually checking all of the conditions you intended.
      CSD U3 Conditionals Apple: "Mantıksal ifadeler ile pratik yapalım\\\r \\\r,
        Perinin durumunu kontrol etmek için bir mantıksal ifade daha kullanalım. \\\r
        \\\r # \\\r büyüyen bir elma perisi var. Bu yeşil olarak başlar, ölçek 2 ye
        geldiğinde \\* bir 'console.log' ifadesi ekle Ekle \\* 'console.log' içine
        bir mantıksal ifade ekle bu 'apple.scale' 2'den büyük olup olmadığını denetle."
      CSD U3 Conditionals Apple 2: |-
        # Turning Red

        Now that we know how to use _if_ statements, you can do more than just check if the apple has reached a scale of 2, you turn it red once it happens.

        # Do This

        Use a conditional in the draw loop to check whether `apple.scale` is greater than 2 - if it is, set the apples new animation to "apple\_red".

        _Challenge: Can you also make the apple stop growing once it turns red?_
      CSD U3 Conditionals Apple 2_2018: |-
        # Changing Fruit

        Now that we know how to use _if_ statements, you can do more than just check if the apple has reached a scale of 2. You turn it into a pear once it happens.

        # Do This

        Use a conditional in the draw loop to check whether `fruit.scale` is greater than 2.  If it is, change the fruit's animation to "pear".

        _Challenge: Can you also make the fruit stop growing once it turns into a pear?_
      CSD U3 Conditionals Apple 2_2018_2019: |-
        # Changing Fruit

        Now that we know how to use _if_ statements, you can do more than just check if the apple has reached a scale of 2. You turn it into a pear once it happens.

        # Do This

        Use a conditional in the draw loop to check whether `fruit.scale` is greater than 2.  If it is, change the fruit's animation to "pear".

        _Challenge: Can you also make the fruit stop growing once it turns into a pear?_
      CSD U3 Conditionals Apple_2018: |-
        # More Practice With Booleans

        Let's use one more Boolean expression to check the condition of a sprite.  You can use a `console.log` command to check whether its scale is 2 yet.

        # Do This

        -   Add a `console.log` statement.
        -   Add a Boolean expression inside the `console.log` that checks whether the `fruit.scale` is greater than 2.
      CSD U3 Conditionals Apple_2018_2019: |-
        # More Practice With Booleans

        Let's use one more Boolean expression to check the condition of a sprite.  You can use a `console.log` command to check whether its scale is 2 yet.

        # Do This

        -   Add a `console.log` statement.
        -   Add a Boolean expression inside the `console.log` that checks whether the `fruit.scale` is greater than 2.
      CSD U3 Counters explaining counters contained 2: "# The Counter Pattern\n\nThis
        pattern is one of the most important ones in all of programming. \n\n![](<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56
        PM.png>)\n\nIt is used to increase the value of a variable by 1. You might
        call it the **counter pattern** since it can be used to make a variable that
        counts up. You'll use this pattern a lot, especially with the draw loop. Let's
        see what that looks like.\n\n# Do This\n\nThis program creates a variable
        `counter` and then uses the **counter pattern** to make it count up. When
        you run the program what do you think you'll see on the screen?\n\n-   **Read
        the program** and make a prediction of what the output will be.\n-   **Run
        the program** to check your prediction.\n-   **Discuss with a neighbor**.
        Can you explain what you observed?"
      CSD U3 Counters explaining counters contained 2_2018: "# The Counter Pattern\n\nThis
        pattern is one of the most important ones in all of programming. \n\n![](<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56
        PM.png>)\n\nIt is used to increase the value of a variable by 1. You might
        call it the **counter pattern** since it can be used to make a variable that
        counts up. You'll use this pattern a lot, especially with the draw loop. Let's
        see what that looks like.\n\n# Do This\n\nThis program creates a variable
        `counter` and then uses the **counter pattern** to make it count up. When
        you run the program what do you think you'll see on the screen?\n\n-   **Read
        the program** and make a prediction of what the output will be.\n-   **Run
        the program** to check your prediction.\n-   **Discuss with a neighbor**.
        Can you explain what you observed?"
      CSD U3 Counters explaining counters contained 2_2019: "# The Counter Pattern\n\nThis
        pattern is one of the most important ones in all of programming. \n\n![](<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56
        PM.png>)\n\nIt is used to increase the value of a variable by 1. You might
        call it the **counter pattern** since it can be used to make a variable that
        counts up. You'll use this pattern a lot, especially with the draw loop. Let's
        see what that looks like.\n\n# Do This\n\nThis program creates a variable
        `counter` and then uses the **counter pattern** to make it count up. When
        you run the program what do you think you'll see on the screen?\n\n-   **Read
        the program** and make a prediction of what the output will be.\n-   **Run
        the program** to check your prediction.\n-   **Discuss with a neighbor**.
        Can you explain what you observed?"
      CSD U3 Diagonal Movement: "<img src=\"https://images.code.org/f92774863b17074adc85b8f6bbd017f2-image-1492726926884.gif\"\nstyle=\"float:
        right; margin-left: 20px;\">\\\r\n\\\r\n\n# Çapraz Hareket\\\r\n\n\\\r\nHareketli
        nesnenin sadece 'x' veya 'y' değerlerini değiştirerek onları sadece düz yukarı
        ve aşağı ya da sola ve sağa hareket ettirebilirsiniz. Eğer çapraz hareket
        ettirmek istiyorsanız _iki_ özelliğin de değerini değiştirmelisiniz.\\\r\n\\\r\nBu
        program şimdilik fare imlecini düz aşağıya hareket ettirir - sağdaki resimdeki
        gibi ekran boyunca çapraz hareket etmesi için güncelleyebilir misiniz?\\\r\n\\\r\n_Büyük
        Zorluk:\nFare imlecini resimdeki gibi aynı yönde yapabilir misin?_"
      CSD U3 Diagonal Movement_2018: "<img src=\"https://images.code.org/f92774863b17074adc85b8f6bbd017f2-image-1492726926884.gif\"\nstyle=\"float:
        right; margin-left: 20px;\">\\\r\n\\\r\n\n# Çapraz Hareket\\\r\n\n\\\r\nHareketli
        nesnenin sadece 'x' veya 'y' değerlerini değiştirerek onları sadece düz yukarı
        ve aşağı ya da sola ve sağa hareket ettirebilirsiniz. Eğer çapraz hareket
        ettirmek istiyorsanız _iki_ özelliğin de değerini değiştirmelisiniz.\\\r\n\\\r\nBu
        program şimdilik fare imlecini düz aşağıya hareket ettirir - sağdaki resimdeki
        gibi ekran boyunca çapraz hareket etmesi için güncelleyebilir misiniz?\\\r\n\\\r\n_Büyük
        Zorluk:\nFare imlecini resimdeki gibi aynı yönde yapabilir misin?_"
      CSD U3 Diagonal Movement_2019: "<img src=\"https://images.code.org/f92774863b17074adc85b8f6bbd017f2-image-1492726926884.gif\"\nstyle=\"float:
        right; margin-left: 20px;\">\\\r\n\\\r\n\n# Çapraz Hareket\\\r\n\n\\\r\nHareketli
        nesnenin sadece 'x' veya 'y' değerlerini değiştirerek onları sadece düz yukarı
        ve aşağı ya da sola ve sağa hareket ettirebilirsiniz. Eğer çapraz hareket
        ettirmek istiyorsanız _iki_ özelliğin de değerini değiştirmelisiniz.\\\r\n\\\r\nBu
        program şimdilik fare imlecini düz aşağıya hareket ettirir - sağdaki resimdeki
        gibi ekran boyunca çapraz hareket etmesi için güncelleyebilir misiniz?\\\r\n\\\r\n_Büyük
        Zorluk:\nFare imlecini resimdeki gibi aynı yönde yapabilir misin?_"
      CSD U3 Direction Animations: |-
        # Changing Images as you Move

        Right now your conditionals only do one thing (change your sprite's x or y), but you can actually put as much code as you want inside a conditional. A common thing to do in games is to change your character's image depending on which direction they're walking.

        # Do This

        Using the provided program and images:

        -   Duplicate your chosen bug image four times.
        -   Edit each of your images to point in one of the four directions.
        -   Write code that uses `sprite.setAnimation()` to change the image on your bug sprite when different arrow keys are pressed.
      CSD U3 Direction Animations_2018: |-
        # Changing Images as you Move

        Right now your conditionals only do one thing (change your sprite's x or y), but you can actually put as much code as you want inside a conditional. A common thing to do in games is to change your character's image depending on which direction they're walking.

        # Do This

        Using the provided program and images:

        -   Duplicate your chosen bug image four times.
        -   Edit each of your images to point in one of the four directions.
        -   Write code that uses `sprite.setAnimation()` to change the image on your bug sprite when different arrow keys are pressed.
      CSD U3 Direction Animations_2018_2019: |-
        # Changing Images as you Move

        Right now your conditionals only do one thing (change your sprite's x or y), but you can actually put as much code as you want inside a conditional. A common thing to do in games is to change your character's image depending on which direction they're walking.

        # Do This

        Using the provided program and images:

        -   Duplicate your chosen bug image four times.
        -   Edit each of your images to point in one of the four directions.
        -   Write code that uses `sprite.setAnimation()` to change the image on your bug sprite when different arrow keys are pressed.
      CSD U3 Direction Arrows: |-
        # Move in All Directions

        Once you've got your sprite moving in one direction by responding to a `keyDown`, getting it to move in all four directions should be more of the same. The basic keyboard control that you're developing here will become the basis for many of the games you make down the road.

        # Do This

        The bug sprite you made that responds to the up arrow has been brought to this level. Add the interaction for the other three arrow keys!

        -   Add three if statements - one for each arrow.
        -   Each if statement should move the sprite in the direction of the arrow.

        _HINT: Make sure you consider both the axis (x or y) of movement, **and** whether you need to increase or decrease that value._
      CSD U3 Direction Arrows_2018: "# Move in All Directions\n\nOnce you've got your
        sprite moving in one direction by responding to a `keyDown`, getting it to
        move in all four directions should be more of the same. The basic keyboard
        control that you're developing here will become the basis for many of the
        games you make down the road.\n\n# Do This\n\nThe bug sprite you made that
        responds to the right arrow has been brought to this level. Add the interaction
        for the other three arrow keys!\n\n-   Add three if statements - one for each
        arrow.  \n-   Don't forget to include a comment for each if statement!\n-
        \  Each if statement should move the sprite in the direction of the arrow.\n\n_HINT:
        Make sure you consider both the axis (x or y) of movement, **and** whether
        you need to increase or decrease that value._"
      CSD U3 Direction Arrows_2018_2019: "# Move in All Directions\n\nOnce you've
        got your sprite moving in one direction by responding to a `keyDown`, getting
        it to move in all four directions should be more of the same. The basic keyboard
        control that you're developing here will become the basis for many of the
        games you make down the road.\n\n# Do This\n\nThe bug sprite you made that
        responds to the right arrow has been brought to this level. Add the interaction
        for the other three arrow keys!\n\n-   Add three if statements - one for each
        arrow.  \n-   Don't forget to include a comment for each if statement!\n-
        \  Each if statement should move the sprite in the direction of the arrow.\n\n_HINT:
        Make sure you consider both the axis (x or y) of movement, **and** whether
        you need to increase or decrease that value._"
      CSD U3 Draw Loop Plugged orange and green: "<img src=\"https://images.code.org/2b5b2ce029e2f1d7377db7dcd7760cf0-image-1492031771047.15.45\nPM.png\"
        style=\"float:right;width:150px\">\\\r\n\\\r\n\n# Çizme Döngüsünü Kullanma\\\r\n\n\\\r\nŞimdi
        çizme döngüsüyle bir kaç iş yapma sırası sende. Game Lab tarafından tekrar
        tekrar çalıştırılan çizme döngüsünün içindeki kodları hatırla.\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n\\\r\n\\*\nÇiziminin turuncu çemberleri de olması için kodları
        programa ekle.\\\r\n\n-   Programın sağdaki resme benzediğinde devam et."
      CSD U3 Draw Loop Plugged orange and green_2018: "<img src=\"https://images.code.org/2b5b2ce029e2f1d7377db7dcd7760cf0-image-1492031771047.15.45\nPM.png\"
        style=\"float:right;width:150px\">\\\r\n\\\r\n\n# Çizme Döngüsünü Kullanma\\\r\n\n\\\r\nŞimdi
        çizme döngüsüyle bir kaç iş yapma sırası sende. Game Lab tarafından tekrar
        tekrar çalıştırılan çizme döngüsünün içindeki kodları hatırla.\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n\\\r\n\\*\nÇiziminin turuncu çemberleri de olması için kodları
        programa ekle.\\\r\n\n-   Programın sağdaki resme benzediğinde devam et."
      CSD U3 Draw Loop Plugged orange and green_2019: "<img src=\"https://images.code.org/2b5b2ce029e2f1d7377db7dcd7760cf0-image-1492031771047.15.45\nPM.png\"
        style=\"float:right;width:150px\">\\\r\n\\\r\n\n# Çizme Döngüsünü Kullanma\\\r\n\n\\\r\nŞimdi
        çizme döngüsüyle bir kaç iş yapma sırası sende. Game Lab tarafından tekrar
        tekrar çalıştırılan çizme döngüsünün içindeki kodları hatırla.\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n\\\r\n\\*\nÇiziminin turuncu çemberleri de olması için kodları
        programa ekle.\\\r\n\n-   Programın sağdaki resme benzediğinde devam et."
      CSD U3 Draw Loop Plugged predict 1: "# Çizme Döngüsü\\\r\n\n\\\r\nBurada çalışmada
        çizme döngüsü örneği var.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n-   Kodu çalıştır
        ve nasıl işlediğini gör.\\\r\n-   Ortağın ile videoda gördüğün çevirmeli deftere
        benzeyip benzemediğini tartış. Niçin ve ya niçin değil?"
      CSD U3 Draw Loop Plugged predict 1_2018: "# Çizme Döngüsü\\\r\n\n\\\r\nBurada
        çalışmada çizme döngüsü örneği var.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n-   Kodu
        çalıştır ve nasıl işlediğini gör.\\\r\n-   Ortağın ile videoda gördüğün çevirmeli
        deftere benzeyip benzemediğini tartış. Niçin ve ya niçin değil?"
      CSD U3 Draw Loop Plugged predict 1_2019: "# Çizme Döngüsü\\\r\n\n\\\r\nBurada
        çalışmada çizme döngüsü örneği var.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n-   Kodu
        çalıştır ve nasıl işlediğini gör.\\\r\n-   Ortağın ile videoda gördüğün çevirmeli
        deftere benzeyip benzemediğini tartış. Niçin ve ya niçin değil?"
      CSD U3 Draw Loop Plugged predict 2 embed: "# Tahmin Et\\\r\n\n\\\r\nBu program
        onu farklı bir şekilde çalıştıracak küçük bir farka sahip. \nYine zorlu, hatırla:\\\r\n\\\r\n\\*\nİlk
        olarak çizme döngüsü dışındaki tüm kodlarınız bir defa çalıştırılır\\\r\n\n-
        \  Çizme döngüsü dışındaki tüm kodlarınız sonsuza kadar tekrar tekrar çalıştırılır\\\r\n
        \   \\\r\n    Bu program ne yapar? Tahminini aşağıya yaz."
      CSD U3 Draw Loop Plugged predict 2 embed_2018: "# Tahmin Et\\\r\n\n\\\r\nBu
        program onu farklı bir şekilde çalıştıracak küçük bir farka sahip. \nYine
        zorlu, hatırla:\\\r\n\\\r\n\\*\nİlk olarak çizme döngüsü dışındaki tüm kodlarınız
        bir defa çalıştırılır\\\r\n\n-   Çizme döngüsü dışındaki tüm kodlarınız sonsuza
        kadar tekrar tekrar çalıştırılır\\\r\n    \\\r\n    Bu program ne yapar? Tahminini
        aşağıya yaz."
      CSD U3 Draw Loop Plugged predict 2 embed_2019: "# Tahmin Et\\\r\n\n\\\r\nBu
        program onu farklı bir şekilde çalıştıracak küçük bir farka sahip. \nYine
        zorlu, hatırla:\\\r\n\\\r\n\\*\nİlk olarak çizme döngüsü dışındaki tüm kodlarınız
        bir defa çalıştırılır\\\r\n\n-   Çizme döngüsü dışındaki tüm kodlarınız sonsuza
        kadar tekrar tekrar çalıştırılır\\\r\n    \\\r\n    Bu program ne yapar? Tahminini
        aşağıya yaz."
      CSD U3 Draw Loop Plugged update your scene: "# Sahneni Genişlet\\\r\n\n\\\r\nBu
        son derste yaptığınız hareketli nesne sahnesi. Şimdi çizme döngüsünü ve hareketli
        nesne özelliklerini kullanarak küçük bir değişiklik yapıyorsun.\\\r\n\\\r\n<img\nsrc=\"https://images.code.org/ce257c4d91da460c9c2add1733873769-image-1492209174198.32.29\nPM.png\"
        style=\"float:right;height:100px\">\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\n\n-
        \  Programımıza bir çizme döngüsü ekleyin(Sadece bir taneye sahipsiniz). \\\r\n-
        \  Kodun tamamını seçip çizme oluşturduğunuz döngünün içine koymak için serbest
        işaretleyici kullanın (tıkla, basılı tut ve sürükle). Ctrl-Z herhangi bir
        hata yaptığınızda geri almanızı sağlar.\\\r\n-   Hareketli nesnenizin 'sprite.x',
        'sprite.y' ya da 'sprite.rotation' özelliklerine kod ekleyin, böylece hareket
        eder. Bunun için 'randomNumber()' (rastgele sayı üret) işlevini kullanın.\\\r\n
        \   \\\r"
      CSD U3 Draw Loop Plugged update your scene_2018: "# Sahneni Genişlet\\\r\n\n\\\r\nBu
        son derste yaptığınız hareketli nesne sahnesi. Şimdi çizme döngüsünü ve hareketli
        nesne özelliklerini kullanarak küçük bir değişiklik yapıyorsun.\\\r\n\\\r\n<img\nsrc=\"https://images.code.org/ce257c4d91da460c9c2add1733873769-image-1492209174198.32.29\nPM.png\"
        style=\"float:right;height:100px\">\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\n\n-
        \  Programımıza bir çizme döngüsü ekleyin(Sadece bir taneye sahipsiniz). \\\r\n-
        \  Kodun tamamını seçip çizme oluşturduğunuz döngünün içine koymak için serbest
        işaretleyici kullanın (tıkla, basılı tut ve sürükle). Ctrl-Z herhangi bir
        hata yaptığınızda geri almanızı sağlar.\\\r\n-   Hareketli nesnenizin 'sprite.x',
        'sprite.y' ya da 'sprite.rotation' özelliklerine kod ekleyin, böylece hareket
        eder. Bunun için 'randomNumber()' (rastgele sayı üret) işlevini kullanın.\\\r\n
        \   \\\r"
      CSD U3 Draw Loop Plugged update your scene_2019: "# Sahneni Genişlet\\\r\n\n\\\r\nBu
        son derste yaptığınız hareketli nesne sahnesi. Şimdi çizme döngüsünü ve hareketli
        nesne özelliklerini kullanarak küçük bir değişiklik yapıyorsun.\\\r\n\\\r\n<img\nsrc=\"https://images.code.org/ce257c4d91da460c9c2add1733873769-image-1492209174198.32.29\nPM.png\"
        style=\"float:right;height:100px\">\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\n\n-
        \  Programımıza bir çizme döngüsü ekleyin(Sadece bir taneye sahipsiniz). \\\r\n-
        \  Kodun tamamını seçip çizme oluşturduğunuz döngünün içine koymak için serbest
        işaretleyici kullanın (tıkla, basılı tut ve sürükle). Ctrl-Z herhangi bir
        hata yaptığınızda geri almanızı sağlar.\\\r\n-   Hareketli nesnenizin 'sprite.x',
        'sprite.y' ya da 'sprite.rotation' özelliklerine kod ekleyin, böylece hareket
        eder. Bunun için 'randomNumber()' (rastgele sayı üret) işlevini kullanın.\\\r\n
        \   \\\r"
      CSD U3 Draw Loop Plugged wiggle sprite rotation: "\\<img\nsrc=\"<https://images.code.org/03f98fedbe59ceb5ef0a8530cb81c367-image-1492040405357.gif\">,\nstyle=\"float:right;height:150px\">\\\r\n\n#
        Özellikleri Güncelleme\\\r\n\n\\\r\nBu bölüm daha önce edindiğiniz bazı becerileri
        bir araya getirir. Arka plana elipsler çizer ve hareketli nesne özelliklerini
        günceller. Bu kez hareketli nesnenin 'sprite.rotation' özelliğini değiştirir.\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n\\\r\nBu animasyon zaten bir hareketli nesnenin titriyor gibi
        görünmesi için dönüş özelliğini güncelliyor.\\\r\n\\\r\n\n-   Nasıl çalıştığını
        görmek için programı çalıştırın.\\\r\n-   Diğer uzaylıların ilki gibi titremesi
        için bu programa kod ekleyin.\\\r\n-   Programınız sağdaki resme benzediğinde
        devam edin."
      CSD U3 Draw Loop Plugged wiggle sprite rotation_2018: "\\<img\nsrc=\"<https://images.code.org/03f98fedbe59ceb5ef0a8530cb81c367-image-1492040405357.gif\">,\nstyle=\"float:right;height:150px\">\\\r\n\n#
        Özellikleri Güncelleme\\\r\n\n\\\r\nBu bölüm daha önce edindiğiniz bazı becerileri
        bir araya getirir. Arka plana elipsler çizer ve hareketli nesne özelliklerini
        günceller. Bu kez hareketli nesnenin 'sprite.rotation' özelliğini değiştirir.\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n\\\r\nBu animasyon zaten bir hareketli nesnenin titriyor gibi
        görünmesi için dönüş özelliğini güncelliyor.\\\r\n\\\r\n\n-   Nasıl çalıştığını
        görmek için programı çalıştırın.\\\r\n-   Diğer uzaylıların ilki gibi titremesi
        için bu programa kod ekleyin.\\\r\n-   Programınız sağdaki resme benzediğinde
        devam edin."
      CSD U3 Draw Loop Plugged wiggle sprite rotation_2019: "\\<img\nsrc=\"<https://images.code.org/03f98fedbe59ceb5ef0a8530cb81c367-image-1492040405357.gif\">,\nstyle=\"float:right;height:150px\">\\\r\n\n#
        Özellikleri Güncelleme\\\r\n\n\\\r\nBu bölüm daha önce edindiğiniz bazı becerileri
        bir araya getirir. Arka plana elipsler çizer ve hareketli nesne özelliklerini
        günceller. Bu kez hareketli nesnenin 'sprite.rotation' özelliğini değiştirir.\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n\\\r\nBu animasyon zaten bir hareketli nesnenin titriyor gibi
        görünmesi için dönüş özelliğini güncelliyor.\\\r\n\\\r\n\n-   Nasıl çalıştığını
        görmek için programı çalıştırın.\\\r\n-   Diğer uzaylıların ilki gibi titremesi
        için bu programa kod ekleyin.\\\r\n-   Programınız sağdaki resme benzediğinde
        devam edin."
      CSD U3 Draw Loop Plugged wiggle sprite x: "\\<img src=\"<https://images.code.org/71ae26edcc3286ff4d7697aaffecf144-image-1492036602240.gif\">,\nstyle=\"float:right;height:150px\">\\\r\n\n#
        Özellikleri Güncelleme\\\r\n\n\\\r\nHareketli nesnelerin bilgisayarın onların
        nerede olduğunu ve nereye çizeceklerini bildiren özellikleri vardır. Yaygın
        olan iki özellik 'sprite.x' ve 'sprite.y' olup hareketli nesnenin yerini kontrol
        ederler. Bu özelliklere yen değer atamak onları ekranda başka bir yere taşır.\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n\\\r\nBu animasyon zaten bir hareketli nesnenin titriyor gibi
        görünmesi için x özelliğini güncelliyor.\\\r\n\\\r\n\\*\nNasıl işlediğini
        görmek için programı çalıştırın.\\\r\n\n-   İkinci hareketli nesnenin ilki
        gibi titremesi için bu programda kodu değiştirin.\\\r\n-   Programınız sağdaki
        resme benzediğinde devam edin.\\\r\n    \\\r"
      CSD U3 Draw Loop Plugged wiggle sprite x_2018: "\\<img src=\"<https://images.code.org/71ae26edcc3286ff4d7697aaffecf144-image-1492036602240.gif\">,\nstyle=\"float:right;height:150px\">\\\r\n\n#
        Özellikleri Güncelleme\\\r\n\n\\\r\nHareketli nesnelerin bilgisayarın onların
        nerede olduğunu ve nereye çizeceklerini bildiren özellikleri vardır. Yaygın
        olan iki özellik 'sprite.x' ve 'sprite.y' olup hareketli nesnenin yerini kontrol
        ederler. Bu özelliklere yen değer atamak onları ekranda başka bir yere taşır.\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n\\\r\nBu animasyon zaten bir hareketli nesnenin titriyor gibi
        görünmesi için x özelliğini güncelliyor.\\\r\n\\\r\n\\*\nNasıl işlediğini
        görmek için programı çalıştırın.\\\r\n\n-   İkinci hareketli nesnenin ilki
        gibi titremesi için bu programda kodu değiştirin.\\\r\n-   Programınız sağdaki
        resme benzediğinde devam edin.\\\r\n    \\\r"
      CSD U3 Draw Loop Plugged wiggle sprite x_2019: "\\<img src=\"<https://images.code.org/71ae26edcc3286ff4d7697aaffecf144-image-1492036602240.gif\">,\nstyle=\"float:right;height:150px\">\\\r\n\n#
        Özellikleri Güncelleme\\\r\n\n\\\r\nHareketli nesnelerin bilgisayarın onların
        nerede olduğunu ve nereye çizeceklerini bildiren özellikleri vardır. Yaygın
        olan iki özellik 'sprite.x' ve 'sprite.y' olup hareketli nesnenin yerini kontrol
        ederler. Bu özelliklere yen değer atamak onları ekranda başka bir yere taşır.\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n\\\r\nBu animasyon zaten bir hareketli nesnenin titriyor gibi
        görünmesi için x özelliğini güncelliyor.\\\r\n\\\r\n\\*\nNasıl işlediğini
        görmek için programı çalıştırın.\\\r\n\n-   İkinci hareketli nesnenin ilki
        gibi titremesi için bu programda kodu değiştirin.\\\r\n-   Programınız sağdaki
        resme benzediğinde devam edin.\\\r\n    \\\r"
      CSD U3 Draw Loop Plugged wiggle sprite y: "\\<img src=\"<https://images.code.org/1e22fb89bcdf99168aee6324d17137ee-image-1493138232702.gif\">,\nstyle=\"float:right;height:150px\">\\\r\n\n#
        Özellikleri Güncelleme\\\r\n\n\\\r\nBu bölüm sonuncuya çok benziyor, ama bu
        kez, çizme döngüsünü siz ekleyeceksiniz.\\\r\n\\\r\n\n# \n\nBunu Yap\\\r\n\n-
        \  Bu programın alt kısmına çizme döngüsü ekleyin.\\\r\n-   Çizme döngüsünün
        içinde olması gereken blokları taşıyın.\\\r\n-   Programınız sağdaki resme
        benzediğinde devam edin.\\\r"
      CSD U3 Draw Loop Plugged wiggle sprite y_2018: "\\<img src=\"<https://images.code.org/1e22fb89bcdf99168aee6324d17137ee-image-1493138232702.gif\">,\nstyle=\"float:right;height:150px\">\\\r\n\n#
        Özellikleri Güncelleme\\\r\n\n\\\r\nBu bölüm sonuncuya çok benziyor, ama bu
        kez, çizme döngüsünü siz ekleyeceksiniz.\\\r\n\\\r\n\n# \n\nBunu Yap\\\r\n\n-
        \  Bu programın alt kısmına çizme döngüsü ekleyin.\\\r\n-   Çizme döngüsünün
        içinde olması gereken blokları taşıyın.\\\r\n-   Programınız sağdaki resme
        benzediğinde devam edin.\\\r"
      CSD U3 Draw Loop Plugged wiggle sprite y_2019: "\\<img src=\"<https://images.code.org/1e22fb89bcdf99168aee6324d17137ee-image-1493138232702.gif\">,\nstyle=\"float:right;height:150px\">\\\r\n\n#
        Özellikleri Güncelleme\\\r\n\n\\\r\nBu bölüm sonuncuya çok benziyor, ama bu
        kez, çizme döngüsünü siz ekleyeceksiniz.\\\r\n\\\r\n\n# \n\nBunu Yap\\\r\n\n-
        \  Bu programın alt kısmına çizme döngüsü ekleyin.\\\r\n-   Çizme döngüsünün
        içinde olması gereken blokları taşıyın.\\\r\n-   Programınız sağdaki resme
        benzediğinde devam edin.\\\r"
      CSD U3 Drawing Squares to Corners: "<img src=\"https://images.code.org/9e09a96901b1e5ad9d5869b2b1fd3897-image-1498671940133.45.12\nAM.png\"
        style=\"float:right;width:150px\">\\\r\n\\\r\n\n# Köşelere Kareleri Yerleştir\\\r\n\n\\\r\nOyun
        Laboratuvarını kullanmanın büyük kısmı konumu anlamaktır. İstediğiniz x ve
        y pozisyonunu bulmaya yardımcı olmak için ızgarayı aktif yapabilir ya da fare
        ile üzerinde hareket edebilirsiniz.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\n\n-
        \  İki dikdörtgeni resimdeki gibi ekranın tam köşelerine yerleştir."
      CSD U3 Drawing Squares to Corners_2018: "<img src=\"https://images.code.org/9e09a96901b1e5ad9d5869b2b1fd3897-image-1498671940133.45.12\nAM.png\"
        style=\"float:right;width:150px\">\\\r\n\\\r\n\n# Köşelere Kareleri Yerleştir\\\r\n\n\\\r\nOyun
        Laboratuvarını kullanmanın büyük kısmı konumu anlamaktır. İstediğiniz x ve
        y pozisyonunu bulmaya yardımcı olmak için ızgarayı aktif yapabilir ya da fare
        ile üzerinde hareket edebilirsiniz.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\n\n-
        \  İki dikdörtgeni resimdeki gibi ekranın tam köşelerine yerleştir."
      CSD U3 Drawing Squares to Corners_2019: "<img src=\"https://images.code.org/9e09a96901b1e5ad9d5869b2b1fd3897-image-1498671940133.45.12\nAM.png\"
        style=\"float:right;width:150px\">\\\r\n\\\r\n\n# Köşelere Kareleri Yerleştir\\\r\n\n\\\r\nOyun
        Laboratuvarını kullanmanın büyük kısmı konumu anlamaktır. İstediğiniz x ve
        y pozisyonunu bulmaya yardımcı olmak için ızgarayı aktif yapabilir ya da fare
        ile üzerinde hareket edebilirsiniz.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\n\n-
        \  İki dikdörtgeni resimdeki gibi ekranın tam köşelerine yerleştir."
      CSD U3 Else: |-
        # What If My Condition Isn't True?

        <img src="https://images.code.org/1a997d78fcd88efeb9e6dc5a02aa88e8-image-1464706463138.53.58.png" width="125px" style="float:right">

        Sometimes we want to tell our program what to do if a condition is `true`, but also what to do if it's `false`. Pressing the plus button at the bottom of your conditional block will give you another section called `else`. This `else` section is a fallback - it will get called whenever the condition in the `if` before it is `false`.

        # Do This

        The gears are back again. The last time you worked with them, you made them spin when the space bar is pressed. Instead of the gears only spinning when the space key is pressed, we want them to spin one way when the space key is pressed and spin the other way when it's not pressed.
        <img src="https://images.code.org/b074d47ca8dfa5ab3bfd08344b4f4e42-image-1464706389475.gif" style="float:right">

        -   Click the _plus_ button at the bottom of the if block to add an else.
        -   Add commands to make the gears spin opposite of the direction that they do when the space bar is pressed.
      CSD U3 Else_2018: |-
        # What If My Condition Isn't True?

        <img src="https://images.code.org/1a997d78fcd88efeb9e6dc5a02aa88e8-image-1464706463138.53.58.png" width="125px" style="float:right">

        Sometimes we want to tell our program what to do if a condition is `true`, but also what to do if it's `false`. Pressing the plus button at the bottom of your conditional block will give you another section called `else`. This `else` section will be run whenever the condition in the `if` before it is `false`.

        # Do This

        The gears are back again. The last time you worked with them, you made them spin when the space bar is pressed. Instead of the gears only spinning when the space key is pressed, we want them to spin one way when the space key is pressed and spin the other way when it's not pressed.
        <img src="https://images.code.org/b074d47ca8dfa5ab3bfd08344b4f4e42-image-1464706389475.gif" style="float:right">

        -   Click the _plus_ button at the bottom of the if block to add an else.
        -   Add commands to make the gears spin opposite of the direction that they do when the space bar is pressed.
      CSD U3 Else_2019: |-
        # Reverse the Gears

        The gears are back. They already spin one direction when you press the space bar, now you'll want them to spin the other direction when the space bar isn't pressed.

        # Do This

        -   Makes the gears spin opposite of the direction that they do when the space bar is pressed.
      CSD U3 Entertainment Sample 1: "# Zıplayan Uzaylı\\\r\n\n\\\r\nSol tarafta ki
        oyunu oynamak için \"çalıştır\"a tıklayın.  Boşluk tuşuyla uzaylıyı zıplatabilirsin
        ve ok tuşlarıyla sağa ve sola hareket ettirebilirsin.  Yıldızları toplayarak
        puan alırsın ve yeterince yüksek puan yaparsan, arka plan değişecek."
      CSD U3 Entertainment Sample 1_2018: "# Zıplayan Uzaylı\\\r\n\n\\\r\nSol tarafta
        ki oyunu oynamak için \"çalıştır\"a tıklayın.  Boşluk tuşuyla uzaylıyı zıplatabilirsin
        ve ok tuşlarıyla sağa ve sola hareket ettirebilirsin.  Yıldızları toplayarak
        puan alırsın ve yeterince yüksek puan yaparsan, arka plan değişecek."
      CSD U3 Entertainment Sample 1_2019: "# Zıplayan Uzaylı\\\r\n\n\\\r\nSol tarafta
        ki oyunu oynamak için \"çalıştır\"a tıklayın.  Boşluk tuşuyla uzaylıyı zıplatabilirsin
        ve ok tuşlarıyla sağa ve sola hareket ettirebilirsin.  Yıldızları toplayarak
        puan alırsın ve yeterince yüksek puan yaparsan, arka plan değişecek."
      CSD U3 Entertainment Sample 2: "# Aç Tavşan\\\r\n\n\\\r\nTavşan aç, yemek için
        mantar ve havuç arıyor.\\\r\n\\\r\nKazanmak için, yemek kasesi bulman gerekecek,
        sonra en az on havuç ve beş mantar toplaman gerekecek.\\\r\n\\\r\nBöceklerden
        kaçındığından emin ol.  Uğur böcekleri ve salyangozlar senin yiyeceğini yiyecekler,
        ve arılar seni sokacaklar, sana herşeyi bıraktıracaklar!\\\r\n\\\r\nZıplamak
        için boşluk tuşunu kullan. Üzerilerine zıplayarak uğur böcekleri ve salyangozları
        ezebilirsin.\\\r\n\\\r\nProgramı başlatmak için \"çalıştır\" a tıklayın."
      CSD U3 Entertainment Sample 2_2018: "# Aç Tavşan\\\r\n\n\\\r\nTavşan aç, yemek
        için mantar ve havuç arıyor.\\\r\n\\\r\nKazanmak için, yemek kasesi bulman
        gerekecek, sonra en az on havuç ve beş mantar toplaman gerekecek.\\\r\n\\\r\nBöceklerden
        kaçındığından emin ol.  Uğur böcekleri ve salyangozlar senin yiyeceğini yiyecekler,
        ve arılar seni sokacaklar, sana herşeyi bıraktıracaklar!\\\r\n\\\r\nZıplamak
        için boşluk tuşunu kullan. Üzerilerine zıplayarak uğur böcekleri ve salyangozları
        ezebilirsin.\\\r\n\\\r\nProgramı başlatmak için \"çalıştır\" a tıklayın."
      CSD U3 Entertainment Sample 2_2019: "# Aç Tavşan\\\r\n\n\\\r\nTavşan aç, yemek
        için mantar ve havuç arıyor.\\\r\n\\\r\nKazanmak için, yemek kasesi bulman
        gerekecek, sonra en az on havuç ve beş mantar toplaman gerekecek.\\\r\n\\\r\nBöceklerden
        kaçındığından emin ol.  Uğur böcekleri ve salyangozlar senin yiyeceğini yiyecekler,
        ve arılar seni sokacaklar, sana herşeyi bıraktıracaklar!\\\r\n\\\r\nZıplamak
        için boşluk tuşunu kullan. Üzerilerine zıplayarak uğur böcekleri ve salyangozları
        ezebilirsin.\\\r\n\\\r\nProgramı başlatmak için \"çalıştır\" a tıklayın."
      CSD U3 Entertainment Sample 3: "# Canlandırılmış Çizgi Karakterler\\\r\n\n\\\r\nResim,
        yazı ve bazı animasyonları birleştirmek gerçekten ilginç çizgi karakterleri
        ve grafik hikayeleri oluşturabilir.  Bir örnek görmek için \"çalıştır\"ı tıklayın.\\\r"
      CSD U3 Entertainment Sample 3_2018: "# Canlandırılmış Çizgi Karakterler\\\r\n\n\\\r\nResim,
        yazı ve bazı animasyonları birleştirmek gerçekten ilginç çizgi karakterleri
        ve grafik hikayeleri oluşturabilir.  Bir örnek görmek için \"çalıştır\"ı tıklayın.\\\r"
      CSD U3 Entertainment Sample 3_2019: "# Canlandırılmış Çizgi Karakterler\\\r\n\n\\\r\nResim,
        yazı ve bazı animasyonları birleştirmek gerçekten ilginç çizgi karakterleri
        ve grafik hikayeleri oluşturabilir.  Bir örnek görmek için \"çalıştır\"ı tıklayın.\\\r"
      CSD U3 Entertainment Sample 4: "# Pul Pad\\\r \\\r programa başlamak için Çalıştırı
        tıkla daha sonra temel renkler ve hayvan pulları ile resim çizmek için damga
        pedini kullanın. \\\r"
      CSD U3 Entertainment Sample 4_2018: "# Pul Pad\\\r \\\r programa başlamak için
        Çalıştırı tıkla daha sonra temel renkler ve hayvan pulları ile resim çizmek
        için damga pedini kullanın. \\\r"
      CSD U3 Entertainment Sample 4_2019: "# Pul Pad\\\r \\\r programa başlamak için
        Çalıştırı tıkla daha sonra temel renkler ve hayvan pulları ile resim çizmek
        için damga pedini kullanın. \\\r"
      CSD U3 Functions Add Change Background: |-
        # Change the Background with the Score

        Once you've caught 10 coins it's time to celebrate. You should change the background to be something fun.

        <img src="https://images.code.org/943c67e59502334fc65a25e690076bdb-image-1475030156530.33.54 PM.png" style="float:right; height:100px">

        # Do This

        -   Use an **if-statement** and two separate functions to draw your backgrounds.
        -   Then go write your functions outside your draw loop. You get to decide what a "simple" or "crazy" background are. Have fun with it!
      CSD U3 Functions Add Change Background_2018: |-
        # Change the Background with the Score

        Once you've caught 10 coins it's time to celebrate. You should change the background to be something fun.

        # Do This

        -   Use an **if-statement** and two separate functions to draw your backgrounds.
        -   Then go write your functions outside your draw loop. You get to decide what a "simple" or "silly" background are. Have fun with it!
      CSD U3 Functions Add Change Background_2019: |-
        # Change the Background with the Score

        Once you've caught 10 coins it's time to celebrate. You should change the background to be something fun.

        # Do This

        -   Use an **if-statement** and two separate functions to draw your backgrounds.
        -   Then go write your functions outside your draw loop. You get to decide what a "simple" or "silly" background are. Have fun with it!
      CSD U3 Functions Add IsTouching: |-
        # Catch the Coin, Increase the Score

        Let's make that score change now, too, to complete the game. You'll need to be able to tell when the bunny is touching the coin and then reset it.

        # Do This

        -   Use an **if-statement** and the **isTouching** block to increase the score when the bunny catches the coin.
        -   Make sure you're **calling your function** to reset the coin once it's been caught.
        -   Play the game and **randomize the velocity of the coin** to a range that you think is fun.
      CSD U3 Functions Add IsTouching_2018: |-
        # Catch the Coin, Increase the Score

        Let's make that score change now, too, to complete the game. You'll need to be able to tell when the bunny is touching the coin and then reset it.

        # Do This

        -   Use an **if-statement** and the **isTouching** block to increase the score when the bunny catches the coin.
        -   Make sure you're **calling your function** to reset the coin once it's been caught.
        -   Play the game and **randomize the velocity of the coin** to a range that you think is fun.
      CSD U3 Functions Add IsTouching_2019: |-
        # Catch the Coin, Increase the Score

        Let's make that score change now, too, to complete the game. You'll need to be able to tell when the bunny is touching the coin and then reset it.

        # Do This

        -   Use an **if-statement** and the **isTouching** block to increase the score when the bunny catches the coin.
        -   Make sure you're **calling your function** to reset the coin once it's been caught.
        -   Play the game and **randomize the velocity of the coin** to a range that you think is fun.
      CSD U3 Functions Call Draw Loop: |-
        # Calling Functions in the Draw Loop

        You can call a function inside the draw loop, just as you would anywhere else in your code.

        # Do This

        A function that will draw a background has been created for you. A sprite has been created to move across the background.

        -   **Call the function inside the draw loop** so that the sprite appears on top of the background.
        -   **Note:** Don't create functions inside the draw loop. Make them at the bottom of your code.
      CSD U3 Functions Call Draw Loop_2018: |-
        # Calling Functions in the Draw Loop

        You can call a function inside the draw loop, just as you would anywhere else in your code.

        # Do This

        A function that will draw a background has been created for you. A sprite has been created to move across the background.

        -   **Call the function inside the draw loop** so that the sprite appears on top of the background.
        -   **Note:** Don't create functions inside the draw loop. Make them at the bottom of your code.
      CSD U3 Functions Call Draw Loop_2019: |-
        # Calling Functions in the Draw Loop

        You can call a function inside the draw loop, just as you would anywhere else in your code.

        # Do This

        A function that will draw a background has been created for you. A sprite has been created to move across the background.

        -   **Call the function inside the draw loop** so that the sprite appears on top of the background.
        -   **Note:** Don't create functions inside the draw loop. Make them at the bottom of your code.
      CSD U3 Functions Call Function: |-
        # Calling Functions

        Functions let you build your own blocks and decide what code goes inside of them. This is the command that lets you create a new function.

        ![](<https://images.code.org/2493f74065d4e642ca51429b8832e431-image-1474913839061.17.09 PM.png>)

        You use or "call" your function like any other block by using the name you gave it.

        ![](<https://images.code.org/61a6eb716e263b580ecd63fab0de7547-image-1474913770359.16.00 PM.png>)

        The blocks to create and call functions can be found in the "Functions" tab of the palette.

        ![](<https://images.code.org/a570a05be61297ee9f0d79a02df8db6e-image-1474922721897.44.36 PM.png>)

        # Do This

        This program has already created 2 functions. Only one of them is being called.

        -   **Call the second function** to reveal the full image. Use the function that is being called as a guide.
        -   **Tip:** Just as with all other blocks, spelling and capitalization are important here.
      CSD U3 Functions Call Function_2018: |-
        # Calling Functions

        Functions let you build your own blocks and decide what code goes inside of them. This is the command that lets you create a new function.

        ![](<https://images.code.org/2493f74065d4e642ca51429b8832e431-image-1474913839061.17.09 PM.png>)

        You use or "call" your function like any other block by using the name you gave it.

        ![](<https://images.code.org/61a6eb716e263b580ecd63fab0de7547-image-1474913770359.16.00 PM.png>)

        The blocks to create and call functions can be found in the "Functions" tab of the palette.

        ![](<https://images.code.org/a570a05be61297ee9f0d79a02df8db6e-image-1474922721897.44.36 PM.png>)

        # Do This

        This program has already created 2 functions. Only one of them is being called.

        -   **Call the second function** to reveal the full image. Use the function that is being called as a guide.
        -   **Tip:** Just as with all other blocks, spelling and capitalization are important here.
      CSD U3 Functions Call Function_2019: |-
        # Calling Functions

        Functions let you build your own blocks and decide what code goes inside of them.  This program has already created two functions, but only one of them is being called.

        # Do This

        -   **Call the second function** to reveal the full image. Use the function that is being called as a guide.
        -   **Tip:** Just as with all other blocks, spelling and capitalization are important here.
      CSD U3 Functions Create Function: |-
        # Creating Functions to Organize Code

        In Game Lab all the action is happening in the draw loop, but too much complex code makes it really confusing to read. To keep your draw loop easy to read, use functions for larger chunks of code. You can call them inside the draw loop and define them below. This is a really good example of using **abstraction** to think about problems at a high level and worry about details later.

        <img src="https://images.code.org/1a5beeaad6e55c5b27a43604be4f039a-image-1475199750468.42.07 PM.png" style="float:right;width:150px">

        # Do This

        This program should draw a daytime scene or a nighttime scene, depending on the location of the mouse. The draw loop describes what needs to happen but one of the functions hasn't been written yet.

        -   **Write the `drawNight` function** which has been created but is empty.
        -   Hint: Look at the picture to the right for how your night image should look. Can you use the `drawDay` function to help you at all?
      CSD U3 Functions Create Function_2018: |-
        # Creating Functions to Organize Code

        In Game Lab all the action is happening in the draw loop, but too much complex code makes it really confusing to read. To keep your draw loop easy to read, use functions for larger chunks of code. You can call them inside the draw loop and define them below. This is a really good example of using **abstraction** to think about problems at a high level and worry about details later.

        <img src="https://images.code.org/1a5beeaad6e55c5b27a43604be4f039a-image-1475199750468.42.07 PM.png" style="float:right;width:150px">

        # Do This

        This program should draw a daytime scene or a nighttime scene, depending on the location of the mouse. The draw loop describes what needs to happen but one of the functions hasn't been written yet.

        -   **Write the `drawNight` function** which has been created but is empty.
        -   Hint: Look at the picture to the right for how your night image should look. Can you use the `drawDay` function to help you at all?
      CSD U3 Functions Create Function_2019: |-
        # Creating Functions to Organize Code

        In Game Lab all the action is happening in the draw loop, but too much complex code makes it really confusing to read. To keep your draw loop easy to read, use functions for larger chunks of code. You can call them inside the draw loop and define them below. This is a really good example of using **abstraction** to think about problems at a high level and worry about details later.

        <img src="https://images.code.org/1a5beeaad6e55c5b27a43604be4f039a-image-1475199750468.42.07 PM.png" style="float:right;width:150px">

        # Do This

        This program should draw a daytime scene or a nighttime scene, depending on the location of the mouse. The draw loop describes what needs to happen but one of the functions hasn't been written yet.

        -   **Write the `drawNight` function** which has been created but is empty.
        -   Hint: Look at the picture to the right for how your night image should look. Can you use the `drawDay` function to help you at all?
      CSD U3 Functions Order Functions: |-
        # Reordering Code

        Placing code inside functions makes it easy to read and make changes to. Good names for functions indicate what your program is doing to a reader. You can call your functions in a different order to quickly make significant changes to how your program runs.

        # Do This

        This program has already created 4 functions that draw parts of a scene. Unfortunately it's not coming out right.

        -   **Read the 4 functions** to know what they do
        -   **Call the functions** in an order that draws the scene in the way that looks best to you
      CSD U3 Functions Order Functions_2018: |-
        # Reordering Code

        Placing code inside functions makes it easy to read and make changes to. Good names for functions indicate what your program is doing to a reader. You can call your functions in a different order to quickly make significant changes to how your program runs.

        # Do This

        This program has already created 4 functions that draw parts of a scene. Unfortunately it's not coming out right.

        -   **Read the 4 functions** to know what they do
        -   **Call the functions** in an order that draws the scene in the way that looks best to you
      CSD U3 Functions Order Functions_2019: |-
        # Reordering Code

        Placing code inside functions makes it easy to read and make changes to. Good names for functions indicate what your program is doing to a reader. You can call your functions in a different order to quickly make significant changes to how your program runs.

        # Do This

        This program has already created 4 functions that draw parts of a scene. Unfortunately it's not coming out right.

        -   **Read the 4 functions** to know what they do
        -   **Call the functions** in an order that draws the scene in the way that looks best to you
      CSD U3 Functions Randomize Sprite: |-
        # Making Changes to Functions

        A nice benefit of using functions to remove repeated code is that you can now easily make changes to multiple places in your code. Just change how you create the functions, and your program will now use the new code everywhere your function is called.

        # Do This

        Make changes to the `setFlyer` function so that the flyer starts at a random Y location between 0 and 400, and moves at a random velocity every time he is reset.
      CSD U3 Functions Randomize Sprite_2018: |-
        # Making Changes to Functions

        A nice benefit of using functions to remove repeated code is that you can now easily make changes to multiple places in your code. Just change how you create the functions, and your program will now use the new code everywhere your function is called.

        # Do This

        Make changes to the `setFlyer` function so that the flyer starts at a random Y location between 0 and 400, and moves at a random velocity every time he is reset.
      CSD U3 Functions Randomize Sprite_2019: |-
        # Making Changes to Functions

        A nice benefit of using functions to remove repeated code is that you can now easily make changes to multiple places in your code. Just change how you create the functions, and your program will now use the new code everywhere your function is called.

        # Do This

        Make changes to the `setFlyer` function so that the flyer starts at a random Y location between 0 and 400, and moves at a random velocity every time he is reset.
      CSD U3 Functions Reset Sprite: |-
        # Calling Functions Multiple Times

        You'll often want to use the same code at many places in your program. Once you've created a function you can call it as many times as you like.

        # Do This

        This code creates a sprite that moves across the screen once. How can you make it go back across the screen?

        -   **Note:** The function is already called once at the beginning of your program
        -   Read the condition of the **if-statement** inside the draw loop. Why do you think it's there?
        -   Use this if-statement and the function written for you to make the sprite move across the screen multiple times.
      CSD U3 Functions Reset Sprite_2018: |-
        # Calling Functions Multiple Times

        You'll often want to use the same code at many places in your program. Once you've created a function you can call it as many times as you like.

        # Do This

        This code creates a sprite that moves across the screen once. How can you make it go back across the screen?

        -   **Note:** The function is already called once at the beginning of your program
        -   Read the condition of the **if-statement** inside the draw loop. Why do you think it's there?
        -   Use this if-statement and the function written for you to make the sprite move across the screen multiple times.
      CSD U3 Functions Reset Sprite_2019: |-
        # Calling Functions Multiple Times

        You'll often want to use the same code at many places in your program. Once you've created a function you can call it as many times as you like.

        # Do This

        This code creates a sprite that moves across the screen once. How can you make it go back across the screen?

        -   **Note:** The function is already called once at the beginning of your program
        -   Read the condition of the **if-statement** inside the draw loop. Why do you think it's there?
        -   Use this if-statement and the function written for you to make the sprite move across the screen multiple times.
      CSD U3 Functions Write Reset: |-
        # Write Your Own Function

        Time to practice writing functions of your own. This is a very simple game in which coins fall from the sky and the bunny tries to catch them. All you need to do is write the function that sets up the coin.

        # Do This

        -   **Read and run the code** that already exists to make sure you know how it works.
        -   **Write the code for the `setCoin`** function to make the coin fall from the sky.
        -   You can go look at some of the previous levels if you need help.
      CSD U3 Functions Write Reset_2018: |-
        # Write Your Own Function

        Time to practice writing functions of your own. This is a very simple game in which coins fall from the sky and the bunny tries to catch them. All you need to do is write the function that sets up the coin.

        # Do This

        -   **Read and run the code** that already exists to make sure you know how it works.
        -   **Write the code for the `setCoin`** function to make the coin fall from the sky.
        -   You can go look at some of the previous levels if you need help.
      CSD U3 Functions Write Reset_2019: |-
        # Write Your Own Function

        Time to practice writing functions of your own. This is a very simple game in which coins fall from the sky and the bunny tries to catch them. All you need to do is write the function that sets up the coin.

        # Do This

        -   **Read and run the code** that already exists to make sure you know how it works.
        -   **Write the code for the `setCoin`** function to make the coin fall from the sky.
        -   You can go look at some of the previous levels if you need help.
      CSD U3 If Else: |-
        # When to Provide a Fallback

        The else clause is useful as a fallback to the main condition that you're checking - that is, if you _care_ what happens when your primary condition is `false`, you should provide an else clause to take care of it.

        <img src="https://images.code.org/730a895b50375781e72c95f5fa21d09d-image-1477681109870.gif" style="float:right;">

        # Do This

        Click "Run" to see the swarm of bees created for you and a flower on the left side of the screen. Make the swarm of bees **appear when the mouse is near the flower** (on the left side of the screen) and **disappear when the mouse is away from the flower** (on the right side of the screen). Look at the example on the right.

        -   Add an `if else` statement after you update the position of the bees.
        -   In the input of the if use a boolean to check if the x position of the mouse is on the side of the screen with the flower.
        -   Set the `visible` property of each bee inside both the if and else statements appropriately to make the bees only show near the flower.
      CSD U3 If Else predict question: |-
        # If/Else Predict

        Read through the following program, paying special attention to the `if/else` block on Line 10.  After discussing the following questions with your partner, write down your predictions and run the code to see what the program does.

        -   What happens when you press the space bar?
        -   What happens when you **don't** press the space bar?
      CSD U3 If Else_2018: |-
        # When to Provide a Fallback

        The else clause is useful as a fallback to the main condition that you're checking - that is, if you _care_ what happens when your primary condition is `false`, you should provide an else clause to take care of it.

        <img src="https://images.code.org/730a895b50375781e72c95f5fa21d09d-image-1477681109870.gif" style="float:right;">

        # Do This

        Click "Run" to see the swarm of bees created for you and a flower on the left side of the screen. Make the swarm of bees **appear when the mouse is near the flower** (on the left side of the screen) and **disappear when the mouse is away from the flower** (on the right side of the screen). Look at the example on the right.

        -   Add an `if else` statement after you update the position of the bees.
        -   In the input of the if use a boolean to check if the x position of the mouse is on the side of the screen with the flower.
        -   Set the `visible` property of each bee inside both the if and else statements appropriately to make the bees only show near the flower.
      CSD U3 If Else_2019: |-
        # When to Provide an "Else"

        The else clause is useful when you want the program to do one thing when your condition is true, and a _different_ thing when your condition is false.

        <img src="https://images.code.org/730a895b50375781e72c95f5fa21d09d-image-1477681109870.gif" style="float:right;">

        # Do This

        Click "Run" to see the swarm of bees created for you and a flower on the left side of the screen. Make the swarm of bees **appear when the mouse is near the flower** (on the left side of the screen) and **disappear when the mouse is away from the flower** (on the right side of the screen). Look at the example on the right.

        -   Add an `if else` statement after the code that updates the position of the bees
        -   In the input of the if use a boolean to check if the x position of the mouse is on the side of the screen with the flower.
        -   Set the `visible` property of each bee inside both the if and else statements appropriately to make the bees only show near the flower.
      CSD U3 Input Fish: "# Ok tuşları ile Balık avı\\\r \\\r geri balıklar. Sol ok
        tuşuna basıldığında balığı sola taşıyabiliir misiniz? \\\r \\\r # Bunu yap\\\r
        \\\r \\* Eğer bloğu ekle ve sadece sol ok tuşu basıldığında hareket etsin.
        \\* balığı hareket eden komutları eğer bloğu içine taşı."
      CSD U3 Input Fish_2018: "# Ok tuşları ile Balık avı\\\r \\\r geri balıklar.
        Sol ok tuşuna basıldığında balığı sola taşıyabiliir misiniz? \\\r \\\r # Bunu
        yap\\\r \\\r \\* Eğer bloğu ekle ve sadece sol ok tuşu basıldığında hareket
        etsin. \\* balığı hareket eden komutları eğer bloğu içine taşı."
      CSD U3 Input Fish_2019: "# Ok tuşları ile Balık avı\\\r \\\r geri balıklar.
        Sol ok tuşuna basıldığında balığı sola taşıyabiliir misiniz? \\\r \\\r # Bunu
        yap\\\r \\\r \\* Eğer bloğu ekle ve sadece sol ok tuşu basıldığında hareket
        etsin. \\* balığı hareket eden komutları eğer bloğu içine taşı."
      CSD U3 Input Gears: "# Koşullar\\\r \\\r ile Hadi tekeri sadece boşluk tuşu
        basıldığında çevirelim. \\\r \\\r # Bunu yap\\\r \\\r Eğer koşulu ekleyin
        \\* 'Aşağı oka basıldığında' eğer koşulu ile boşluk tuşuna basılmış mı kontrol
        et.. \\\r \\* Tekeri döndürme kodunu eğer komutu içine yerleştirin."
      CSD U3 Input Gears_2018: "# Koşullar\\\r \\\r ile Hadi tekeri sadece boşluk
        tuşu basıldığında çevirelim. \\\r \\\r # Bunu yap\\\r \\\r Eğer koşulu ekleyin
        \\* 'Aşağı oka basıldığında' eğer koşulu ile boşluk tuşuna basılmış mı kontrol
        et.. \\\r \\* Tekeri döndürme kodunu eğer komutu içine yerleştirin."
      CSD U3 Input Gears_2019: "# Koşullar\\\r \\\r ile Hadi tekeri sadece boşluk
        tuşu basıldığında çevirelim. \\\r \\\r # Bunu yap\\\r \\\r Eğer koşulu ekleyin
        \\* 'Aşağı oka basıldığında' eğer koşulu ile boşluk tuşuna basılmış mı kontrol
        et.. \\\r \\* Tekeri döndürme kodunu eğer komutu içine yerleştirin."
      CSD U3 Interactive Card Background: |-
        # Laying Out Your Background

        Before beginning this project, you should have already completed the Interactive Card Planning activity, and you'll want to have that paper with you as you develop your program. Preparation is one of the **most important** elements of successfully creating a program!

        # Do This

        Refer to your planning activity sheet to help you lay out the shapes that will become the background to your card.

        -   First, figure out what the lowest layer in your image is (this should use the `background()` block) and add it to the very top of the draw loop.
        -   Next, layer each additional drawing block in the order you want them to appear in the stack.
        -   Finally, add a comment to the top of this section of code to describe what it does, and if you have any particularly complicated chunks of code within (such as code to draw a tree or a house), add a descriptive comment to that as well.

        **Challenge:** Can you use variables or `randomNumber()` to add some subtle animation to your background layer?
      CSD U3 Interactive Card Background_2018: |-
        # Laying Out Your Background

        Before beginning this project, you should have already completed the Interactive Card Planning activity, and you'll want to have that paper with you as you develop your program. Preparation is one of the **most important** elements of successfully creating a program!

        # Do This

        Refer to your planning activity sheet to help you lay out the shapes that will become the background to your card.

        -   First, figure out what the lowest layer in your image is (this should use the `background()` block) and add it to the very top of the draw loop.
        -   Next, layer each additional drawing block in the order you want them to appear in the stack.
        -   Finally, add a comment to the top of this section of code to describe what it does, and if you have any particularly complicated chunks of code within (such as code to draw a tree or a house), add a descriptive comment to that as well.

        **Challenge:** Can you use variables or `randomNumber()` to add some subtle animation to your background layer?
      CSD U3 Interactive Card Background_2019: |-
        # Laying Out Your Background

        Before beginning this project, you should have already completed the Interactive Card Planning activity, and you'll want to have that paper with you as you develop your program. Preparation is one of the **most important** elements of successfully creating a program!

        # Do This

        Refer to your planning activity sheet to help you lay out the shapes that will become the background to your card.

        -   First, figure out what the lowest layer in your image is (this should use the `background()` block) and add it to the very top of the draw loop.
        -   Next, layer each additional drawing block in the order you want them to appear in the stack.
        -   Finally, add a comment to the top of this section of code to describe what it does, and if you have any particularly complicated chunks of code within (such as code to draw a tree or a house), add a descriptive comment to that as well.

        **Challenge:** Can you use variables or `randomNumber()` to add some subtle animation to your background layer?
      CSD U3 Interactive Card Exemplar: |-
        # Example Project

        Run the program a few times and answer the following questions:

        1.  Which elements appear to use drawing commands?

        2.  Which elements appear to be Sprites?

        3.  For each Sprite, which properties are being updated?

        4.  Where do you see conditionals being used?

        5.  Are there elements that you don’t understand?
      CSD U3 Interactive Card Exemplar_2018: |-
        # Example Project

        Run the program a few times and answer the following questions:

        1.  Which elements appear to use drawing commands?

        2.  Which elements appear to be Sprites?

        3.  For each Sprite, which properties are being updated?

        4.  Where do you see conditionals being used?

        5.  Are there elements that you don’t understand?
      CSD U3 Interactive Card Exemplar_2019: |-
        # Example Project

        Run the program a few times and answer the following questions:

        1.  Which elements appear to use drawing commands?

        2.  Which elements appear to be Sprites?

        3.  For each Sprite, which properties are being updated?

        4.  Where do you see conditionals being used?

        5.  Are there elements that you don’t understand?
      CSD U3 Interactive Card Final: |-
        # Finishing Touches

        Now's your chance to put some finishing touches on your card. We've included some new blocks that you haven't seen before, so take some time to look around and try out some new blocks.

        # Do This

        Consider adding any of the following to finish up your card:

        -   Text
        -   Additional images for your sprites
        -   Subtle animation in the background
        -   Sound effects  (Can you figure out now to do this?)
        -   More ways for a user to interact with your card
      CSD U3 Interactive Card Final_2018: |-
        # Finishing Touches

        Now's your chance to put some finishing touches on your card. We've included some new blocks that you haven't seen before, so take some time to look around and try out some new blocks.

        # Do This

        Consider adding any of the following to finish up your card:

        -   Text
        -   Additional images for your sprites
        -   Subtle animation in the background
        -   Sound effects  (Can you figure out how to do this?)
        -   More ways for a user to interact with your card
      CSD U3 Interactive Card Final_2019: |-
        # Finishing Touches

        Now's your chance to put some finishing touches on your card. We've included some new blocks that you haven't seen before, so take some time to look around and try out some new blocks.

        # Do This

        Consider adding any of the following to finish up your card:

        -   Text
        -   Additional images for your sprites
        -   Subtle animation in the background
        -   Sound effects  (Can you figure out how to do this?)
        -   More ways for a user to interact with your card
      CSD U3 Interactive Card Other Conditionals: |-
        # Other Conditionals

        The _surprise_ in your card comes from conditionals that don't directly respond to user input, but to some other element of your card. This could be triggered by a variable that gets updated as the user interacts with your card, or a Sprite moving into a certain part of the screen.

        # Do This

        For each of the remaining items on your interactions table:

        -   Add an `if` block (or `if-else` block if you need a fallback action) inside the draw loop.
        -   Add the appropriate Boolean comparison block to the condition (eg. `<`, `>`, or `==`).
        -   Add the necessary actions inside the `if` block.

        **Challenge:** Can you create more sophisticated conditionals by nesting them or using compound booleans?
      CSD U3 Interactive Card Other Conditionals_2018: |-
        # Other Conditionals

        The _surprise_ in your card comes from conditionals that don't directly respond to user input, but to some other element of your card. This could be triggered by a variable that gets updated as the user interacts with your card, or a Sprite moving into a certain part of the screen.

        # Do This

        For each of the remaining items on your interactions table:

        -   Add an `if` block (or `if-else` block if you need a fallback action) inside the draw loop.
        -   Add the appropriate Boolean comparison block to the condition (eg. `<`, `>`, or `==`).
        -   Add the necessary actions inside the `if` block.

        **Challenge:** Can you create more sophisticated conditionals by nesting them or using compound booleans?
      CSD U3 Interactive Card Other Conditionals_2019: |-
        # Other Conditionals

        The _surprise_ in your card comes from conditionals that don't directly respond to user input, but to some other element of your card. This could be triggered by a variable that gets updated as the user interacts with your card, or a Sprite moving into a certain part of the screen.

        # Do This

        For each of the remaining items on your interactions table:

        -   Add an `if` block (or `if-else` block if you need a fallback action) inside the draw loop.
        -   Add the appropriate Boolean comparison block to the condition (eg. `<`, `>`, or `==`).
        -   Add the necessary actions inside the `if` block.

        **Challenge:** Can you create more sophisticated conditionals by nesting them or using compound booleans?
      CSD U3 Interactive Card Sprites: |-
        # Adding Sprites

        Now that you have the more static elements of your card layed out, it's time to add the Sprites. Your Sprites should provide the primary animations and interactions for your card - so feel free to get creative here and have fun.

        # Do This

        Check out the Sprites table on the back of your planning sheet. For each Sprite in your table:

        -   Initialize the Sprite at the top of your program with `createSprite()`.
        -   Find or create the image(s) for the Sprite and set it with `setAnimation()`.
        -   Inside the `draw()` loop update any Sprite properties that we will be constantly animating (we'll deal with conditionals in a minute).
      CSD U3 Interactive Card Sprites_2018: |-
        # Adding Sprites

        Now that you have the more static elements of your card layed out, it's time to add the Sprites. Your Sprites should provide the primary animations and interactions for your card - so feel free to get creative here and have fun.

        # Do This

        Check out the Sprites table on the back of your planning sheet. For each Sprite in your table:

        -   Initialize the Sprite at the top of your program with `createSprite()`.
        -   Find or create the image(s) for the Sprite and set it with `setAnimation()`.
        -   Inside the `draw()` loop update any Sprite properties that we will be constantly animating (we'll deal with conditionals in a minute).
      CSD U3 Interactive Card Sprites_2019: |-
        # Adding Sprites

        Now that you have the more static elements of your card layed out, it's time to add the Sprites. Your Sprites should provide the primary animations and interactions for your card - so feel free to get creative here and have fun.

        # Do This

        Check out the Sprites table on the back of your planning sheet. For each Sprite in your table:

        -   Initialize the Sprite at the top of your program with `createSprite()`.
        -   Find or create the image(s) for the Sprite and set it with `setAnimation()`.
        -   Inside the `draw()` loop update any Sprite properties that we will be constantly animating (we'll deal with conditionals in a minute).
      CSD U3 Interactive Card User Input: |-
        # User Input

        You've got a background, you've got Sprites, now it's time to give your user something to do!

        # Do This

        On the interactions table from your planning sheet, find all of the interactions that rely on user input (key presses and mouse movements). For each of those interactions:

        -   Add an `if` block (or `if-else` block if you need a fallback action) inside the `draw()` loop.
        -   Add the appropriate input block for your condition (such as `keyDown()` or `mouseDown()`).
        -   Add the necessary actions inside the `if` block.

        **Challenge:** Can you create more sophisticated conditionals by nesting them or using compound booleans?
      CSD U3 Interactive Card User Input_2018: |-
        # User Input

        You've got a background, you've got Sprites, now it's time to give your user something to do!

        # Do This

        On the interactions table from your planning sheet, find all of the interactions that rely on user input (key presses and mouse movements). For each of those interactions:

        -   Add an `if` block (or `if-else` block if you need a fallback action) inside the `draw()` loop.
        -   Add the appropriate input block for your condition (such as `keyDown()` or `mouseDown()`).
        -   Add the necessary actions inside the `if` block.

        **Challenge:** Can you create more sophisticated conditionals by nesting them or using compound booleans?
      CSD U3 Interactive Card User Input_2019: |-
        # User Input

        You've got a background, you've got Sprites, now it's time to give your user something to do!

        # Do This

        On the interactions table from your planning sheet, find all of the interactions that rely on user input (key presses and mouse movements). For each of those interactions:

        -   Add an `if` block (or `if-else` block if you need a fallback action) inside the `draw()` loop.
        -   Add the appropriate input block for your condition (such as `keyDown()` or `mouseDown()`).
        -   Add the necessary actions inside the `if` block.

        **Challenge:** Can you create more sophisticated conditionals by nesting them or using compound booleans?
      CSD U3 Keyboard Input Challenge: "# Meydan Okuma\\\r\n\n_Denemeden önce öğretmeninle
        birlikte kontrol et._\\\r\n\\\r\nBir kaç bölüm önce üzerinde çalıştığın böcek
        programı burada. Aşağıdaki zorluklardan bir ya da daha fazlasını seçin ve
        ya kendiniz yeni bir özellik ekleyin!\\\r\n\\\r\n\n-   Böcek nesnesinin dönüş
        ya da ölçekle gibi diğer özelliklerini kontrol etmek için boşluk tuşunu kullanın.\\\r\n-
        \  Hareketinize biraz rastgelelik ekleyin.\\\r\n-   İkinci bir hareketli nesne
        ekleyin ve bir dizi tuş farklı ile kontrol edin(\"w\", \"a\", \"s\" ve\"d\"
        yaygın olan seçeneklerdir).\\\r\n-   Sahnenin daha ilginç olması için arka
        plana bir kaç şekil ekleyin."
      CSD U3 Keyboard Input Challenge_2018: "# Meydan Okuma\\\r\n\n_Denemeden önce
        öğretmeninle birlikte kontrol et._\\\r\n\\\r\nBir kaç bölüm önce üzerinde
        çalıştığın böcek programı burada. Aşağıdaki zorluklardan bir ya da daha fazlasını
        seçin ve ya kendiniz yeni bir özellik ekleyin!\\\r\n\\\r\n\n-   Böcek nesnesinin
        dönüş ya da ölçekle gibi diğer özelliklerini kontrol etmek için boşluk tuşunu
        kullanın.\\\r\n-   Hareketinize biraz rastgelelik ekleyin.\\\r\n-   İkinci
        bir hareketli nesne ekleyin ve bir dizi tuş farklı ile kontrol edin(\"w\",
        \"a\", \"s\" ve\"d\" yaygın olan seçeneklerdir).\\\r\n-   Sahnenin daha ilginç
        olması için arka plana bir kaç şekil ekleyin."
      CSD U3 Keyboard Input Challenge_2018_2019: "# Meydan Okuma\\\r\n\n_Denemeden
        önce öğretmeninle birlikte kontrol et._\\\r\n\\\r\nBir kaç bölüm önce üzerinde
        çalıştığın böcek programı burada. Aşağıdaki zorluklardan bir ya da daha fazlasını
        seçin ve ya kendiniz yeni bir özellik ekleyin!\\\r\n\\\r\n\n-   Böcek nesnesinin
        dönüş ya da ölçekle gibi diğer özelliklerini kontrol etmek için boşluk tuşunu
        kullanın.\\\r\n-   Hareketinize biraz rastgelelik ekleyin.\\\r\n-   İkinci
        bir hareketli nesne ekleyin ve bir dizi tuş farklı ile kontrol edin(\"w\",
        \"a\", \"s\" ve\"d\" yaygın olan seçeneklerdir).\\\r\n-   Sahnenin daha ilginç
        olması için arka plana bir kaç şekil ekleyin."
      CSD U3 Keypress Boolean: |-
        # Prediction - keyDown()

        The `keyDown()` block is the first of a new set of blocks that will let us get input from the user. This is the first step on our road to actually making games! See if you can predict how the `keyDown()` block works. You will **not write any code**.

        # Do This

        -   Read the program carefully.
        -   **Make a prediction about how the code will run** and write it in the box below. Be specific!
        -   Run the program.
        -   While the program is running, press the up arrow on your keyboard.
        -   Were you correct? Were you surprised? Discuss with a classmate.
      CSD U3 Keypress Boolean embed: |-
        # Prediction - keyDown()

        The `keyDown()` block is the first of a new set of blocks that will let us get input from the user. This is the first step on our road to actually making games! See if you can predict how the `keyDown()` block works. You will **not write any code**.

        # Do This

        -   Read the program carefully.
        -   **Make a prediction about how the code will run** and write it in the box below. Be specific!
        -   Run the program.
        -   While the program is running, press the up arrow on your keyboard.
        -   Were you correct? Were you surprised? Discuss with a classmate.
      CSD U3 Keypress Boolean embed-2018: |-
        # Prediction - keyDown()

        The `keyDown()` block is the first of a new set of blocks that will let us get input from the user. This is the first step on our road to actually making games! See if you can predict how the `keyDown()` block works. You will **not write any code**.

        # Do This

        -   Read the program carefully.
        -   **Make a prediction about how the code will run** and write it in the box below. Be specific!
        -   Run the program.
        -   While the program is running, press the space bar on your keyboard.
        -   Were you correct? Were you surprised? Discuss with a classmate.
      CSD U3 Keypress Boolean embed-2018_2019: |-
        # Prediction - keyDown()

        The `keyDown()` block is the first of a new set of blocks that will let us get input from the user. This is the first step on our road to actually making games! See if you can predict how the `keyDown()` block works. You will **not write any code**.

        # Do This

        -   Read the program carefully.
        -   **Make a prediction about how the code will run** and write it in the box below. Be specific!
        -   Run the program.
        -   While the program is running, press the space bar on your keyboard.
        -   Were you correct? Were you surprised? Discuss with a classmate.
      CSD U3 Keypress Watchers Predict: "# Bir tahmin yap: kullanıcı ile ilk 'Aşağı
        oka basıldığında' bloğu ile etkileştin. Ama bu sadece birçok yöntemden sadece
        birisi. Tuşa basıldığında ne tepki vereceğinizi istediğinize bağlı olarak
        belirleyin. \\\r \\\r Aşağı, sağ ve sol tuşa basıldığında ne olacağını tahmin
        edin \\\r \\* Tahmini yaptıktan sonra kodu çalıştırın?\n\n\"Aşağı oka basılğında\"
        ile \"ok yukarı gittiğinde\" ve \"ok aşağı gittiğinde\" arasında ne fark var?
        10 satırdaki! işareti ne iş yapıyor?\nDiğer tuşları programında nasıl kullanırsın?"
      CSD U3 Keypress Watchers Predict_2018: "# Bir tahmin yap: kullanıcı ile ilk
        'Aşağı oka basıldığında' bloğu ile etkileştin. Ama bu sadece birçok yöntemden
        sadece birisi. Tuşa basıldığında ne tepki vereceğinizi istediğinize bağlı
        olarak belirleyin. \\\r \\\r Aşağı, sağ ve sol tuşa basıldığında ne olacağını
        tahmin edin \\\r \\* Tahmini yaptıktan sonra kodu çalıştırın?\n\n\"Aşağı oka
        basılğında\" ile \"ok yukarı gittiğinde\" ve \"ok aşağı gittiğinde\" arasında
        ne fark var? 10 satırdaki! işareti ne iş yapıyor?\nDiğer tuşları programında
        nasıl kullanırsın?"
      CSD U3 Keypress Watchers Predict_2019: "# Bir tahmin yap: kullanıcı ile ilk
        'Aşağı oka basıldığında' bloğu ile etkileştin. Ama bu sadece birçok yöntemden
        sadece birisi. Tuşa basıldığında ne tepki vereceğinizi istediğinize bağlı
        olarak belirleyin. \\\r \\\r Aşağı, sağ ve sol tuşa basıldığında ne olacağını
        tahmin edin \\\r \\* Tahmini yaptıktan sonra kodu çalıştırın?\n\n\"Aşağı oka
        basılğında\" ile \"ok yukarı gittiğinde\" ve \"ok aşağı gittiğinde\" arasında
        ne fark var? 10 satırdaki! işareti ne iş yapıyor?\nDiğer tuşları programında
        nasıl kullanırsın?"
      CSD U3 Keypress Watchers_2018: |-
        # More Ways to Get User Input

        So far you've used `keyDown` as a way to let users control your programs, but that's just one of many ways to take input. In fact, just one of many ways _to detect keypresses_! Depending on how you want to react to a keypress, there are a few other blocks you might want to use.

        # Do This

        You will **not write any code** in this program.

        -   Read the program and see if you can guess what will happen.
        -   While the program is running, press the arrow keys and observe how the screen responds.
        -   Write down or share with your neighbor your observations.
            -   What seems to be the difference between `keyDown()`, `keyWentDown()`, and `keyWentUp()`?
            -   What do you think the exclamation mark (`!`) on line 10 does?
            -   How might you use the different keypress blocks in a game?
      CSD U3 Keypress Watchers_2019: |-
        # More Ways to Get User Input

        So far you've used `keyDown` as a way to let users control your programs, but that's just one of many ways to take input. In fact, just one of many ways _to detect keypresses_! Depending on how you want to react to a keypress, there are a few other blocks you might want to use.

        # Do This

        You will **not write any code** in this program.

        -   Read the program and see if you can guess what will happen.
        -   While the program is running, press the arrow keys and observe how the screen responds.
        -   Write down or share with your neighbor your observations.
            -   What seems to be the difference between `keyDown()`, `keyWentDown()`, and `keyWentUp()`?
            -   What do you think the exclamation mark (`!`) on line 10 does?
            -   How might you use the different keypress blocks in a game?
      CSD U3 L11 Freeplay: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir şeyi
        oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına göndermek
        için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L11 Freeplay_2018: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir
        şeyi oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına
        göndermek için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L11 Freeplay_2019: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir
        şeyi oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına
        göndermek için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L12 Freeplay: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir şeyi
        oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına göndermek
        için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L12 Freeplay_2018: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir
        şeyi oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına
        göndermek için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L12 Freeplay_2019: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir
        şeyi oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına
        göndermek için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L13 Freeplay: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir şeyi
        oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına göndermek
        için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L13 Freeplay_2018: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir
        şeyi oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına
        göndermek için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L13 Freeplay_2019: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir
        şeyi oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına
        göndermek için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L15 Freeplay: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir şeyi
        oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına göndermek
        için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L15 Freeplay_2018: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir
        şeyi oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına
        göndermek için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L15 Freeplay_2019: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir
        şeyi oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına
        göndermek için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L16 Freeplay: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir şeyi
        oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına göndermek
        için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L16 Freeplay_2018: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir
        şeyi oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına
        göndermek için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L16 Freeplay_2019: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir
        şeyi oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına
        göndermek için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L17 Freeplay: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir şeyi
        oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına göndermek
        için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L17 Freeplay_2018: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir
        şeyi oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına
        göndermek için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L17 Freeplay_2019: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir
        şeyi oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına
        göndermek için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L18 Freeplay: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir şeyi
        oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına göndermek
        için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L18 Freeplay_2018: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir
        şeyi oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına
        göndermek için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L18 Freeplay_2019: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir
        şeyi oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına
        göndermek için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L19 Freeplay: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir şeyi
        oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına göndermek
        için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L19 Freeplay_2018: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir
        şeyi oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına
        göndermek için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L19 Freeplay_2019: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir
        şeyi oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına
        göndermek için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L3 Freeplay: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir şeyi
        oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına göndermek
        için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L3 Freeplay_2018: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir
        şeyi oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına
        göndermek için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L3 Freeplay_2019: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir
        şeyi oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına
        göndermek için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L4 Freeplay: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir şeyi
        oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına göndermek
        için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L4 Freeplay_2018: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir
        şeyi oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına
        göndermek için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L4 Freeplay_2019: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir
        şeyi oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına
        göndermek için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L5 Freeplay: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir şeyi
        oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına göndermek
        için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L5 Freeplay_2018: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir
        şeyi oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına
        göndermek için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L5 Freeplay_2019: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir
        şeyi oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına
        göndermek için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L6 Freeplay: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir şeyi
        oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına göndermek
        için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L6 Freeplay_2018: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir
        şeyi oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına
        göndermek için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L6 Freeplay_2019: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir
        şeyi oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına
        göndermek için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L7 Freeplay: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir şeyi
        oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına göndermek
        için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L7 Freeplay_2018: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir
        şeyi oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına
        göndermek için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L7 Freeplay_2019: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir
        şeyi oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına
        göndermek için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L9 Freeplay: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir şeyi
        oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına göndermek
        için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L9 Freeplay_2018: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir
        şeyi oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına
        göndermek için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 L9 Freeplay_2019: "# Serbest Oyun\\\r\n\n\\\r\nİstediğin herhangi bir
        şeyi oluşturmak için öğrendiklerini kullan.  Bitirdiğinde, bir arkadaşına
        göndermek için buna tıklayabilirsin  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        , veya oluşturduğun şeyi Proje Galerisine göndermek için buna tıklayabilirsin.
        ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)."
      CSD U3 Mouse Input Bee 1: "<img src=\"https://images.code.org/d2092b4f2debc336f963d48bd6cf4973-image-1477681020928.gif\"\nstyle=\"float:right\">\\\r\n\\\r\n\n#
        Fare X ve Y\\\r\n\n\\\r\nGiriş almanın basit yollarından birisi de kullanıcının
        fare imleci konumudur. **'World.mouseX' ve World.mouseY' özelliklerini kullanarak
        farenin x ve y konumlarını alabilirsiniz.** Bu kalıpla birlikte hareketli
        nesnenin özelliklerini öğrendiniz..\\\r\n\\\r\n\n# \n\nBunu Yap\\\r\n\\\r\nOyun
        alanı etrafındaki fareyi takip ederek arı nesnesi yapacaksınız.\\\r\n\\\r\n\n-
        \  Senin için arı resmi zaten animasyon sekmesinde var.\\\r\n-   Pencerenin
        ortasına çizen bir arı nesnesi oluştur.\\\r\n-   \\*\n    Çizme döngüsünün
        içerisinde hareketli nesnenin pozisyonunu farenin pozisyonuna güncelleyin:\\\r\n
        \   \\\\t\\* 'Wordl.MouseX' değerini hareketli nesnenin x konumuna ata.\\\r\n
        \   \\*\n    'Wordl.MouseY' değerini hareketli nesnenin y konumuna ata..\\\r\n-
        \  İşlediğini test etmek için programı çalıştır.\\\r"
      CSD U3 Mouse Input Bee 1_2018: "<img src=\"https://images.code.org/d2092b4f2debc336f963d48bd6cf4973-image-1477681020928.gif\"\nstyle=\"float:right\">\\\r\n\\\r\n\n#
        Fare X ve Y\\\r\n\n\\\r\nGiriş almanın basit yollarından birisi de kullanıcının
        fare imleci konumudur. **'World.mouseX' ve World.mouseY' özelliklerini kullanarak
        farenin x ve y konumlarını alabilirsiniz.** Bu kalıpla birlikte hareketli
        nesnenin özelliklerini öğrendiniz..\\\r\n\\\r\n\n# \n\nBunu Yap\\\r\n\\\r\nOyun
        alanı etrafındaki fareyi takip ederek arı nesnesi yapacaksınız.\\\r\n\\\r\n\n-
        \  Senin için arı resmi zaten animasyon sekmesinde var.\\\r\n-   Pencerenin
        ortasına çizen bir arı nesnesi oluştur.\\\r\n-   \\*\n    Çizme döngüsünün
        içerisinde hareketli nesnenin pozisyonunu farenin pozisyonuna güncelleyin:\\\r\n
        \   \\\\t\\* 'Wordl.MouseX' değerini hareketli nesnenin x konumuna ata.\\\r\n
        \   \\*\n    'Wordl.MouseY' değerini hareketli nesnenin y konumuna ata..\\\r\n-
        \  İşlediğini test etmek için programı çalıştır.\\\r"
      CSD U3 Mouse Input Bee 1_2019: "<img src=\"https://images.code.org/d2092b4f2debc336f963d48bd6cf4973-image-1477681020928.gif\"\nstyle=\"float:right\">\\\r\n\\\r\n\n#
        Fare X ve Y\\\r\n\n\\\r\nGiriş almanın basit yollarından birisi de kullanıcının
        fare imleci konumudur. **'World.mouseX' ve World.mouseY' özelliklerini kullanarak
        farenin x ve y konumlarını alabilirsiniz.** Bu kalıpla birlikte hareketli
        nesnenin özelliklerini öğrendiniz..\\\r\n\\\r\n\n# \n\nBunu Yap\\\r\n\\\r\nOyun
        alanı etrafındaki fareyi takip ederek arı nesnesi yapacaksınız.\\\r\n\\\r\n\n-
        \  Senin için arı resmi zaten animasyon sekmesinde var.\\\r\n-   Pencerenin
        ortasına çizen bir arı nesnesi oluştur.\\\r\n-   \\*\n    Çizme döngüsünün
        içerisinde hareketli nesnenin pozisyonunu farenin pozisyonuna güncelleyin:\\\r\n
        \   \\\\t\\* 'Wordl.MouseX' değerini hareketli nesnenin x konumuna ata.\\\r\n
        \   \\*\n    'Wordl.MouseY' değerini hareketli nesnenin y konumuna ata..\\\r\n-
        \  İşlediğini test etmek için programı çalıştır.\\\r"
      CSD U3 Mouse Input Bee 2: "# Noktanın Etrafında Rastgele\\\r\n\n\\\r\n<img\nsrc=\"https://images.code.org/d124946bb9e01a3623078c2a87beea8c-image-1477681483067.gif\"\nstyle=\"float:right\">\\\r\n\\\r\nŞimdi
        arının fareyi takip etmesini sağlayabilirsiniz, sağdaki resimde olduğu gibi
        arının fare etrafında uçmasını sağlayalım.  Bunu yapmak için, **'mouseX' veya
        'mouseY' konumlarına -50 ile 50 arasında rastgele miktarda ekleme yapmalısınız.**\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\nZaten fareyi takip eden bir arı nesnesine sahipsiniz.\\\r\n\\\r\n\n-
        \  x ve y konumlarını fareye rastgele yakınlaşacak şekilde güncelleyin.\\\r\n
        \   \\\\t\\* 'World.mouseX' and 'World.mouseY' değerlerine -50 ile 50 arasında
        rastgele sayı ekleyin.\\\r\n-   Eğer gerekli ise 'World.frameRate' blokunu
        kullanarak animasyonu yavaşlatın ve en iyi çerçeve hızını bulun.\\\r\n    \\\r\n
        \   _Büyük Zorluk:\n    Fareyi aynı yönde takip eden arı sürüsü yapmak için
        **3 arı daha ekleyin**_"
      CSD U3 Mouse Input Bee 2_2018: "# Noktanın Etrafında Rastgele\\\r\n\n\\\r\n<img\nsrc=\"https://images.code.org/d124946bb9e01a3623078c2a87beea8c-image-1477681483067.gif\"\nstyle=\"float:right\">\\\r\n\\\r\nŞimdi
        arının fareyi takip etmesini sağlayabilirsiniz, sağdaki resimde olduğu gibi
        arının fare etrafında uçmasını sağlayalım.  Bunu yapmak için, **'mouseX' veya
        'mouseY' konumlarına -50 ile 50 arasında rastgele miktarda ekleme yapmalısınız.**\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\nZaten fareyi takip eden bir arı nesnesine sahipsiniz.\\\r\n\\\r\n\n-
        \  x ve y konumlarını fareye rastgele yakınlaşacak şekilde güncelleyin.\\\r\n
        \   \\\\t\\* 'World.mouseX' and 'World.mouseY' değerlerine -50 ile 50 arasında
        rastgele sayı ekleyin.\\\r\n-   Eğer gerekli ise 'World.frameRate' blokunu
        kullanarak animasyonu yavaşlatın ve en iyi çerçeve hızını bulun.\\\r\n    \\\r\n
        \   _Büyük Zorluk:\n    Fareyi aynı yönde takip eden arı sürüsü yapmak için
        **3 arı daha ekleyin**_"
      CSD U3 Mouse Input Bee 2_2019: "# Noktanın Etrafında Rastgele\\\r\n\n\\\r\n<img\nsrc=\"https://images.code.org/d124946bb9e01a3623078c2a87beea8c-image-1477681483067.gif\"\nstyle=\"float:right\">\\\r\n\\\r\nŞimdi
        arının fareyi takip etmesini sağlayabilirsiniz, sağdaki resimde olduğu gibi
        arının fare etrafında uçmasını sağlayalım.  Bunu yapmak için, **'mouseX' veya
        'mouseY' konumlarına -50 ile 50 arasında rastgele miktarda ekleme yapmalısınız.**\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\nZaten fareyi takip eden bir arı nesnesine sahipsiniz.\\\r\n\\\r\n\n-
        \  x ve y konumlarını fareye rastgele yakınlaşacak şekilde güncelleyin.\\\r\n
        \   \\\\t\\* 'World.mouseX' and 'World.mouseY' değerlerine -50 ile 50 arasında
        rastgele sayı ekleyin.\\\r\n-   Eğer gerekli ise 'World.frameRate' blokunu
        kullanarak animasyonu yavaşlatın ve en iyi çerçeve hızını bulun.\\\r\n    \\\r\n
        \   _Büyük Zorluk:\n    Fareyi aynı yönde takip eden arı sürüsü yapmak için
        **3 arı daha ekleyin**_"
      CSD U3 Movement Fish: "<img src=\"https://images.code.org/7852ab38a8222ee827edeff2767e8efd-image-1492037897236.gif\"\nstyle=\"float:
        right; margin-left: 20px;\">\\\r\n\\\r\n\n# Balık Animasyonu\\\r\n\n\\\r\nSayaç
        desenini kullanın, balıkların üçünü de sağ tarafa resime hareket ettirin.
        En hızlısı mavi balık olmalı, onu turuncu balık takip etmeli, en yavaşı yeşil
        balık olmalı."
      CSD U3 Movement Fish challenge_2018: |-
        # More fish!

        This time, try updating the the rotation of each fish as it moves to make it look even more like it is swimming.  You can also try adding extra features, such as bubbles that rise up through the water.
      CSD U3 Movement Fish challenge_2019: |-
        # More fish!

        This time, try updating the the rotation of each fish as it moves to make it look even more like it is swimming.  You can also try adding extra features, such as bubbles that rise up through the water.
      CSD U3 Movement Fish_2018: "<img src=\"https://images.code.org/7852ab38a8222ee827edeff2767e8efd-image-1492037897236.gif\"\nstyle=\"float:
        right; margin-left: 20px;\">\\\r\n\\\r\n\n# Balık Animasyonu\\\r\n\n\\\r\nSayaç
        desenini kullanın, balıkların üçünü de sağ tarafa resime hareket ettirin.
        En hızlısı mavi balık olmalı, onu turuncu balık takip etmeli, en yavaşı yeşil
        balık olmalı."
      CSD U3 Movement Fish_2019: "<img src=\"https://images.code.org/7852ab38a8222ee827edeff2767e8efd-image-1492037897236.gif\"\nstyle=\"float:
        right; margin-left: 20px;\">\\\r\n\\\r\n\n# Balık Animasyonu\\\r\n\n\\\r\nSayaç
        desenini kullanın, balıkların üçünü de sağ tarafa resime hareket ettirin.
        En hızlısı mavi balık olmalı, onu turuncu balık takip etmeli, en yavaşı yeşil
        balık olmalı."
      CSD U3 Movement Gears: "<img src=\"https://images.code.org/eac110e64ccad62482c82d4ef66f237b-image-1465518920408.gif\"\nstyle=\"width:200px;
        float:right; margin-left: 20px;\">\\\r\n\\\r\n\n# Dönüş Yönü\\\r\n\n\\\r\nEk
        olarak dönüş özelliği için sayaç desenini kullanırsanız, nesne, saat yönünde
        dönecek. Halbuki bazen hareketli nesnenizin diğer tarafa d0ğru dönmesini istersiniz.
        Bunu yapmak için çıkarma kullanabilirsiniz!\\\r\n\\\r\n\n# Bunları Yapın\\\r\n\n\\\r\nBurada
        sizin için hazırlanmış 3 adet dişli var. Dişlileri, birbirleriyle eş zamanlı
        dönüyormuş gibi göstermeniz gerekiyor.\\\r\n\\\r\n\n-   Dişlileri döndürün
        böylece dişliler bir sistem olarak çalışıyormuş gibi görünecek.\\\r\n-   **İpucu:
        Onların hepsi aynı yönde dönmeyecek**."
      CSD U3 Movement Gears_2018: "<img src=\"https://images.code.org/eac110e64ccad62482c82d4ef66f237b-image-1465518920408.gif\"\nstyle=\"width:200px;
        float:right; margin-left: 20px;\">\\\r\n\\\r\n\n# Dönüş Yönü\\\r\n\n\\\r\nEk
        olarak dönüş özelliği için sayaç desenini kullanırsanız, nesne, saat yönünde
        dönecek. Halbuki bazen hareketli nesnenizin diğer tarafa d0ğru dönmesini istersiniz.
        Bunu yapmak için çıkarma kullanabilirsiniz!\\\r\n\\\r\n\n# Bunları Yapın\\\r\n\n\\\r\nBurada
        sizin için hazırlanmış 3 adet dişli var. Dişlileri, birbirleriyle eş zamanlı
        dönüyormuş gibi göstermeniz gerekiyor.\\\r\n\\\r\n\n-   Dişlileri döndürün
        böylece dişliler bir sistem olarak çalışıyormuş gibi görünecek.\\\r\n-   **İpucu:
        Onların hepsi aynı yönde dönmeyecek**."
      CSD U3 Movement Gears_2019: "<img src=\"https://images.code.org/eac110e64ccad62482c82d4ef66f237b-image-1465518920408.gif\"\nstyle=\"width:200px;
        float:right; margin-left: 20px;\">\\\r\n\\\r\n\n# Dönüş Yönü\\\r\n\n\\\r\nEk
        olarak dönüş özelliği için sayaç desenini kullanırsanız, nesne, saat yönünde
        dönecek. Halbuki bazen hareketli nesnenizin diğer tarafa d0ğru dönmesini istersiniz.
        Bunu yapmak için çıkarma kullanabilirsiniz!\\\r\n\\\r\n\n# Bunları Yapın\\\r\n\n\\\r\nBurada
        sizin için hazırlanmış 3 adet dişli var. Dişlileri, birbirleriyle eş zamanlı
        dönüyormuş gibi göstermeniz gerekiyor.\\\r\n\\\r\n\n-   Dişlileri döndürün
        böylece dişliler bir sistem olarak çalışıyormuş gibi görünecek.\\\r\n-   **İpucu:
        Onların hepsi aynı yönde dönmeyecek**."
      CSD U3 Movement Your Own 1: "# Kendi Animasyonunuzu Yapın\\\r\n\n\\\r\nSayaç
        deseni ve hareketli nesne özelliklerini kullanarak tamamını kendinizin yaptığı
        bir animasyon hazırlayın. Daha önceden hazırladığınız sabit resimler üzerinde
        oluşturmayı düşünebilir veya hikaye anlatmak veya yaratmak için yeni resim
        kullanmayı düşünebilirsiniz.\\\r\n\\\r\n\n# \n\nBunları Yapın\\\r\n\\\r\nBaşlamak
        için, sabit bir sahne oluşuralım.\\\r\n\\\r\n\n-   Canlandırma sekmesinden
        resimler ekleyin.\\\r\n-   Hareketli nesne oluşturun ve resim atayın\\\r\n-
        \  Hareketli nesnelerinizi ve bir arka planı çizmek için çizim döngüsü oluşturun."
      CSD U3 Movement Your Own 1_2018: "# Kendi Animasyonunuzu Yapın\\\r\n\n\\\r\nSayaç
        deseni ve hareketli nesne özelliklerini kullanarak tamamını kendinizin yaptığı
        bir animasyon hazırlayın. Daha önceden hazırladığınız sabit resimler üzerinde
        oluşturmayı düşünebilir veya hikaye anlatmak veya yaratmak için yeni resim
        kullanmayı düşünebilirsiniz.\\\r\n\\\r\n\n# \n\nBunları Yapın\\\r\n\\\r\nBaşlamak
        için, sabit bir sahne oluşuralım.\\\r\n\\\r\n\n-   Canlandırma sekmesinden
        resimler ekleyin.\\\r\n-   Hareketli nesne oluşturun ve resim atayın\\\r\n-
        \  Hareketli nesnelerinizi ve bir arka planı çizmek için çizim döngüsü oluşturun."
      CSD U3 Movement Your Own 1_2019: "# Kendi Animasyonunuzu Yapın\\\r\n\n\\\r\nSayaç
        deseni ve hareketli nesne özelliklerini kullanarak tamamını kendinizin yaptığı
        bir animasyon hazırlayın. Daha önceden hazırladığınız sabit resimler üzerinde
        oluşturmayı düşünebilir veya hikaye anlatmak veya yaratmak için yeni resim
        kullanmayı düşünebilirsiniz.\\\r\n\\\r\n\n# \n\nBunları Yapın\\\r\n\\\r\nBaşlamak
        için, sabit bir sahne oluşuralım.\\\r\n\\\r\n\n-   Canlandırma sekmesinden
        resimler ekleyin.\\\r\n-   Hareketli nesne oluşturun ve resim atayın\\\r\n-
        \  Hareketli nesnelerinizi ve bir arka planı çizmek için çizim döngüsü oluşturun."
      CSD U3 Movement Your Own 2: "# Animasyonunuza Hareket Ekleyin\\\r\n\n\\\r\nSabit
        sahnenizi oluşturduktan sonra, bazı hareketler ekleyebilirsiniz. Programınızı
        beğendiğiniz zaman, onu çalıştırmak için 'Gönder' e basın. Yeni özellikler
        eklemek isterseniz her zaman durdurabilir ve çalışmaya devam edebilirsin.\\\r\n\\\r\n\n#
        Bunları Yapın\\\r\n\n\\\r\nÇizim döngüsünde\\\r\n\\\r\n\n-   Değişiklik yapmak
        istediğiniz hareketli nesneleri seçin.\\\r\n-   Bu özellikleri güncellemek
        için sayaç desenini kullanın.\\\r\n    \\\r\n    _İpucu: Eğer sayaç deseni
        istediğiniz gibi çalışmıyorsa, yardımcı olması için hata ayıklama programına
        izleyici ekleyebilirsiniz._"
      CSD U3 Movement Your Own 2_2018: "# Animasyonunuza Hareket Ekleyin\\\r\n\n\\\r\nSabit
        sahnenizi oluşturduktan sonra, bazı hareketler ekleyebilirsiniz. Programınızı
        beğendiğiniz zaman, onu çalıştırmak için 'Gönder' e basın. Yeni özellikler
        eklemek isterseniz her zaman durdurabilir ve çalışmaya devam edebilirsin.\\\r\n\\\r\n\n#
        Bunları Yapın\\\r\n\n\\\r\nÇizim döngüsünde\\\r\n\\\r\n\n-   Değişiklik yapmak
        istediğiniz hareketli nesneleri seçin.\\\r\n-   Bu özellikleri güncellemek
        için sayaç desenini kullanın.\\\r\n    \\\r\n    _İpucu: Eğer sayaç deseni
        istediğiniz gibi çalışmıyorsa, yardımcı olması için hata ayıklama programına
        izleyici ekleyebilirsiniz._"
      CSD U3 Movement Your Own 2_2019: "# Animasyonunuza Hareket Ekleyin\\\r\n\n\\\r\nSabit
        sahnenizi oluşturduktan sonra, bazı hareketler ekleyebilirsiniz. Programınızı
        beğendiğiniz zaman, onu çalıştırmak için 'Gönder' e basın. Yeni özellikler
        eklemek isterseniz her zaman durdurabilir ve çalışmaya devam edebilirsin.\\\r\n\\\r\n\n#
        Bunları Yapın\\\r\n\n\\\r\nÇizim döngüsünde\\\r\n\\\r\n\n-   Değişiklik yapmak
        istediğiniz hareketli nesneleri seçin.\\\r\n-   Bu özellikleri güncellemek
        için sayaç desenini kullanın.\\\r\n    \\\r\n    _İpucu: Eğer sayaç deseni
        istediğiniz gibi çalışmıyorsa, yardımcı olması için hata ayıklama programına
        izleyici ekleyebilirsiniz._"
      CSD U3 Plotting Shapes Shape Lab: "# Şekiller Çizme\\\r\n\n\\\r\nBu aracı keşfetmek
        farklı renklerde şekiller çizmenizi sağlar. \\\r\n\\\r\nŞekilleri tam olarak
        yerleştirmenize yardımcı olması için, \"Çalıştır\" butonuna bastığınızdan
        ve ızgarayı görünür yaptığınızdan emin olun.\\\r\n\\\r\n![](<https://images.code.org/d52dbc112dcc088858c4b8f54be09aa1-image-1502914103923.07.59\nPM.png>)"
      CSD U3 Plotting Shapes Shape Lab_2018: "# Şekiller Çizme\\\r\n\n\\\r\nBu aracı
        keşfetmek farklı renklerde şekiller çizmenizi sağlar. \\\r\n\\\r\nŞekilleri
        tam olarak yerleştirmenize yardımcı olması için, \"Çalıştır\" butonuna bastığınızdan
        ve ızgarayı görünür yaptığınızdan emin olun.\\\r\n\\\r\n![](<https://images.code.org/d52dbc112dcc088858c4b8f54be09aa1-image-1502914103923.07.59\nPM.png>)"
      CSD U3 Plotting Shapes Shape Lab_2019: "# Şekiller Çizme\\\r\n\n\\\r\nBu aracı
        keşfetmek farklı renklerde şekiller çizmenizi sağlar. \\\r\n\\\r\nŞekilleri
        tam olarak yerleştirmenize yardımcı olması için, \"Çalıştır\" butonuna bastığınızdan
        ve ızgarayı görünür yaptığınızdan emin olun.\\\r\n\\\r\n![](<https://images.code.org/d52dbc112dcc088858c4b8f54be09aa1-image-1502914103923.07.59\nPM.png>)"
      CSD U3 Random Debug Cloud: "<img src=\"https://images.code.org/529b7e5ddda4683e6a0cc5b3028e4dbf-image-1490824752133.58.50\nPM.png\"
        style=\"float:right;height:150px\">\\\r\n\\\r\n\n# Hata Ayıklama - 4 Parametre
        Kullanma\\\r\n\n\\\r\nÇimen artık çalışıyor, gökyüzüne bir bulut ekleyelim.
        Ne yazık ki, biraz komik görünüyor.\\\r\n\\\r\n\n# Bunu Yapın\\\r\n\n\\\r\n\n-
        \  Bulutun, uzunluğundan daha geniş olması için hata ayıklayın, resimdeki
        gibi.\\\r\n-   İpucu: İki parametreyi değiştirmen gerekir. Hangileri bulutun
        yüksekliğini ve genişliğini ayarlar?\\\r\n    \\\r\n    _Meydan Okuma:\n    Güneş
        tam olarak resimdeki yerinde değil.  Güneşin koordinatlarını değiştirebilir
        misin böylece resimdekiyle tamamen eşleşecek?_"
      CSD U3 Random Debug Cloud_2018: |-
        <img src="https://images.code.org/45d1d513f5ed63592e98ea3e4a08840c-image-1520403109680.11.28 PM.png" style="float:right;height:150px">

        # Debug - Using 4 Parameters

        Now that the grass is working, let's add a cloud to the sky. Unfortunately, it looks a little funny right now.

        # Do This

        -   Debug this program to make the cloud wider than it is tall, like in the image.
        -   Hint: You'll need to change two parameters. Which ones set your cloud's width and height?
      CSD U3 Random Debug Cloud_2018_2019: |-
        <img src="https://images.code.org/45d1d513f5ed63592e98ea3e4a08840c-image-1520403109680.11.28 PM.png" style="float:right;height:150px">

        # Debug - Using 4 Parameters

        Now that the grass is working, let's add a cloud to the sky. Unfortunately, it looks a little funny right now.

        # Do This

        -   Debug this program to make the cloud wider than it is tall, like in the image.
        -   Hint: You'll need to change two parameters. Which ones set your cloud's width and height?
      CSD U3 Random Debug Grass: "<img src=\"https://images.code.org/83269268e1c4f8af8551253ff4573b43-image-1490825158453.03.45\nPM.png\"
        style=\"float:right;height:150px\">\\\r\n\\\r\n\n# Hata Ayıklama - 4 Parametre
        Kullanma\\\r\n\n\\\r\nBu program, basit bir sahne çizmek için `rect()` ve
        `ellipse()`bloklarının dört parametreli versiyonunu kullanır.\\\r\n\\\r\n\n#
        Bunu Yapın\\\r\n\n\\\r\n\n-   Bu programda hata ayıklayın ve düzeltin böylece
        çimen alt kısmın tamamını kaplayacak.\\\r\n-   İpucu: Sadece bir sayıyı değiştirmek
        zorundasın.Hangi parametre dikdörtgeni (çimen) daha geniş yapar?"
      CSD U3 Random Debug Grass_2018: |-
        <img src="https://images.code.org/08c7c6cd82f4d4ff57459165f29ab624-image-1520402652290.03.37 PM.png" style="float:right;height:150px">

        # Debug - Using 4 Parameters

        This program uses the four parameter version of `rect()` and `ellipse()` to draw a simple scene.

        # Do This

        -   Debug this program and correct the error so that the grass extends across the entire bottom.
        -   Hint: You only have to change one number. Which parameter makes your rectangle (the grass) wider?
      CSD U3 Random Debug Grass_2019: |-
        <img src="https://images.code.org/08c7c6cd82f4d4ff57459165f29ab624-image-1520402652290.03.37 PM.png" style="float:right;height:150px">

        # Debug - Using 4 Parameters

        This program uses the four parameter version of `rect()` and `ellipse()` to draw a simple scene.

        # Do This

        -   Debug this program and correct the error so that the grass extends across the entire bottom.
        -   Hint: You only have to change one number. Which parameter makes your rectangle (the grass) wider?
      CSD U3 Random Ellipse Behind: "<img src=\"https://images.code.org/a8ed6092389aedceceb38a83ac59fae1-image-1490832453029.07.10\nPM.png\"
        style=\"float:right;height:150px\">\\\r\n\\\r\n\n# Bunları Yapın\\\r\n\n\\\r\n\n-
        \  Yeşil elipsin arkasına turuncu bir elips oluşturmak için kod yazın.\\\r\n-
        \  Yeşil elips tamamen turuncu elipsin içinde olduğu müddetçe, turuncu elipsin
        tam boyutu için endişelenme."
      CSD U3 Random Ellipse Behind_2018: |-
        <img src="https://images.code.org/dd73760e7129225b1e9f53a542960b9a-image-1520402430622.59.19 PM.png" style="float:right;height:150px">

        # Do This

        -   Write code that makes an orange ellipse behind the green one.
        -   Don't worry about the exact size as long as the green ellipse is entirely inside the orange one.
      CSD U3 Random Ellipse Behind_2018_2019: |-
        <img src="https://images.code.org/dd73760e7129225b1e9f53a542960b9a-image-1520402430622.59.19 PM.png" style="float:right;height:150px">

        # Do This

        -   Write code that makes an orange ellipse behind the green one.
        -   Don't worry about the exact size as long as the green ellipse is entirely inside the orange one.
      CSD U3 Random Taller Rectangle: "<img src=\"https://images.code.org/02871e5c5d041ea1724e4a02d3697941-image-1492721665345.54.10\nPM.png\"
        style=\"float:right;height:150px; border: 1px solid #CCC\">\\\r\n\n# \n\nDikdörtgen
        Büyüklüğü\\\r\n\\\r\nBu `rect` bloklarının büyüklüğü kontrol etmek için kullanabileceğiniz
        iki tane daha parametresi vardır. `noStroke()` bloğunun şekilleri kenarlık(çerçeve)
        olmadan oluşturduğuna dikkat edin.\\\r\n\\\r\n\n# Bunları Yapın\\\r\n\n\\\r\n\n-
        \  Koda bakın ve 'rect' bloğundaki son iki parametrenin nasıl çalıştığını
        çözmeye çalışın.\\\r\n-   Kırmızı dikdörtgenin uzunluğunu mavi dikdörtgenden
        daha büyük yapmak için ikinci 'rect' bloğundaki sayıları değiştirin.\\\r"
      CSD U3 Random Taller Rectangle_2018: "<img src=\"https://images.code.org/02871e5c5d041ea1724e4a02d3697941-image-1492721665345.54.10\nPM.png\"
        style=\"float:right;height:150px; border: 1px solid #CCC\">\\\r\n\n# \n\nDikdörtgen
        Büyüklüğü\\\r\n\\\r\nBu `rect` bloklarının büyüklüğü kontrol etmek için kullanabileceğiniz
        iki tane daha parametresi vardır. `noStroke()` bloğunun şekilleri kenarlık(çerçeve)
        olmadan oluşturduğuna dikkat edin.\\\r\n\\\r\n\n# Bunları Yapın\\\r\n\n\\\r\n\n-
        \  Koda bakın ve 'rect' bloğundaki son iki parametrenin nasıl çalıştığını
        çözmeye çalışın.\\\r\n-   Kırmızı dikdörtgenin uzunluğunu mavi dikdörtgenden
        daha büyük yapmak için ikinci 'rect' bloğundaki sayıları değiştirin.\\\r"
      CSD U3 Random Taller Rectangle_2019: "<img src=\"https://images.code.org/02871e5c5d041ea1724e4a02d3697941-image-1492721665345.54.10\nPM.png\"
        style=\"float:right;height:150px; border: 1px solid #CCC\">\\\r\n\n# \n\nDikdörtgen
        Büyüklüğü\\\r\n\\\r\nBu `rect` bloklarının büyüklüğü kontrol etmek için kullanabileceğiniz
        iki tane daha parametresi vardır. `noStroke()` bloğunun şekilleri kenarlık(çerçeve)
        olmadan oluşturduğuna dikkat edin.\\\r\n\\\r\n\n# Bunları Yapın\\\r\n\n\\\r\n\n-
        \  Koda bakın ve 'rect' bloğundaki son iki parametrenin nasıl çalıştığını
        çözmeye çalışın.\\\r\n-   Kırmızı dikdörtgenin uzunluğunu mavi dikdörtgenden
        daha büyük yapmak için ikinci 'rect' bloğundaki sayıları değiştirin.\\\r"
      CSD U3 Random background: "# Arka plan\\\r\n\n\\\r\nBazen tüm ekranı bir renkle
        doldurmak isteyeceksin.  Bunun için `background` bloğunu kullanabilirsin.
        Bu blok ekrandaki her şeyi seçtiğiniz renkle kaplar.\\\r\n\\\r\n\n# \n\nBunları
        Yapın\\\r\n\\\r\n\n-   `background` bloğunun çalıştığını görmek için koda
        bakın.\\\r\n-   Arka planı sarıdan turuncuya çevirin.\\\r\n    \\\r\n    _Meydan
        Okuma: Arka plan tarafından üzeri kaplanmış pembe bir kare var.  Kodun sıralamasını
        değiştirebilir misin böylece pembe ve mavi karelerin her ikisini de görebilirsin?_"
      CSD U3 Random background2: "<img src=\"https://images.code.org/a68cfd23a13b6bdeef91dc9fd584f657-image-1491332601738.03.04\nPM.png\"
        style=\"float:right;height:150px\">\\\r\n\\\r\n\n# Arkaplan\\\r\n\n\\\r\n`background()`komutu
        halihazırdaki bütün çizimlerinizin üzerine kaplayacak, bu yüzden kodunuzun
        sıralamasını düşünmek önemlidir.\\\r\n\\\r\n\n# Bunları Yapın\\\r\n\n\\\r\n\n-
        \  \\`background()' komutunu yeşil dairenin arkasına siyah bir arka plan yapmak
        için kullanın."
      CSD U3 Random background2_2018: "<img src=\"https://images.code.org/a68cfd23a13b6bdeef91dc9fd584f657-image-1491332601738.03.04\nPM.png\"
        style=\"float:right;height:150px\">\\\r\n\\\r\n\n# Arkaplan\\\r\n\n\\\r\n`background()`komutu
        halihazırdaki bütün çizimlerinizin üzerine kaplayacak, bu yüzden kodunuzun
        sıralamasını düşünmek önemlidir.\\\r\n\\\r\n\n# Bunları Yapın\\\r\n\n\\\r\n\n-
        \  \\`background()' komutunu yeşil dairenin arkasına siyah bir arka plan yapmak
        için kullanın."
      CSD U3 Random background2_2019: "<img src=\"https://images.code.org/a68cfd23a13b6bdeef91dc9fd584f657-image-1491332601738.03.04\nPM.png\"
        style=\"float:right;height:150px\">\\\r\n\\\r\n\n# Arkaplan\\\r\n\n\\\r\n`background()`komutu
        halihazırdaki bütün çizimlerinizin üzerine kaplayacak, bu yüzden kodunuzun
        sıralamasını düşünmek önemlidir.\\\r\n\\\r\n\n# Bunları Yapın\\\r\n\n\\\r\n\n-
        \  \\`background()' komutunu yeşil dairenin arkasına siyah bir arka plan yapmak
        için kullanın."
      CSD U3 Random background_2018: "# Arka plan\\\r\n\n\\\r\nBazen tüm ekranı bir
        renkle doldurmak isteyeceksin.  Bunun için `background` bloğunu kullanabilirsin.
        Bu blok ekrandaki her şeyi seçtiğiniz renkle kaplar.\\\r\n\\\r\n\n# \n\nBunları
        Yapın\\\r\n\\\r\n\n-   `background` bloğunun çalıştığını görmek için koda
        bakın.\\\r\n-   Arka planı sarıdan turuncuya çevirin.\\\r\n    \\\r\n    _Meydan
        Okuma: Arka plan tarafından üzeri kaplanmış pembe bir kare var.  Kodun sıralamasını
        değiştirebilir misin böylece pembe ve mavi karelerin her ikisini de görebilirsin?_"
      CSD U3 Random background_2019: "# Arka plan\\\r\n\n\\\r\nBazen tüm ekranı bir
        renkle doldurmak isteyeceksin.  Bunun için `background` bloğunu kullanabilirsin.
        Bu blok ekrandaki her şeyi seçtiğiniz renkle kaplar.\\\r\n\\\r\n\n# \n\nBunları
        Yapın\\\r\n\\\r\n\n-   `background` bloğunun çalıştığını görmek için koda
        bakın.\\\r\n-   Arka planı sarıdan turuncuya çevirin.\\\r\n    \\\r\n    _Meydan
        Okuma: Arka plan tarafından üzeri kaplanmış pembe bir kare var.  Kodun sıralamasını
        değiştirebilir misin böylece pembe ve mavi karelerin her ikisini de görebilirsin?_"
      CSD U3 Random rainbow snake: "<img src=\"https://images.code.org/d1e4780e483ffa510a27e91b2b1f1963-image-1491341267537.26.14\nPM.png\"
        style=\"float:right;height:150px\">\\\r\n\\\r\n\n# Gökkuşağı Yılanı\\\r\n\n\\\r\nBu
        program gökkuşağı yılanının türüne az rastlanır bir cinsini çizer. Her defasında
        yılanı farklı çizmek için rastgele sayılara ihtiyaç duyarsınız.\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n\\\r\n\n-   Programı bir çok kez çalışarak başlangıç kodunun
        nasıl işlediğini gör.\\\r\n-   Gökkuşağı yılanının için en az üç yeni farklı
        renklendirilmiş daireler ekle.\\\r\n-   Yılanın geri kalan bedeninin, ilk
        üçü gibi aşağı ve yukarı hareket etmesi için 'randomNumber()' bloğunu kullan.\\\r\n
        \   \\\r\n-   Meydan Okuma:\n    Rastgele büyüklükte de bir kaç daire yapabilir
        misiniz?\\*"
      CSD U3 Random rainbow snake_2018: |-
        <img src="https://images.code.org/6af643f712b042e5b076f06cc2f902e2-image-1520404404645.32.58 PM.png" style="float:right;height:150px">

        # Rainbow Snake

        This program draws a very rare breed of rainbow snake. To make the snake draw differently every time you'll need to use random numbers.

        # Do This

        -   Run the program several times to see how the starter code works.
        -   Add at least three new different colored circles to your rainbow snake.
        -   Use `randomNumber()` to make the rest of the snake's body move up and down like the first three.

        _Challenge: Can you make size of some of the circles random, too?_
      CSD U3 Random rainbow snake_2018_2019: |-
        <img src="https://images.code.org/6af643f712b042e5b076f06cc2f902e2-image-1520404404645.32.58 PM.png" style="float:right;height:150px">

        # Rainbow Snake

        This program draws a very rare breed of rainbow snake. To make the snake draw differently every time you'll need to use random numbers.

        # Do This

        -   Run the program several times to see how the starter code works.
        -   Add at least three new different colored circles to your rainbow snake.
        -   Use `randomNumber()` to make the rest of the snake's body move up and down like the first three.

        _Challenge: Can you make the size of some of the circles random, too?_
      CSD U3 Random random ellipse: "# Rastgele Syılar\\\r\n\n\\\r\n`randomNumber()`minimum
        ve maksimum değerleri arasından rastgele bir sayı seçer. Belirli bir sayı
        yazmanın yerine bu kodu kullanabilirsiniz.  Eğer çizimlerinizi rastgele sayılarla
        yaparsanız, programı her çalıştırdığınızda çizim biraz farklı görünecektir.
        \\\r\n\\\r\n\n# Bunları Yapın\\\r\n\n\\\r\n\n-   Nasıl çalıştığını görmek
        için programı birkaç kez çalıştırın.\\\r\n-   `randomNumber` bloğunun içindeki
        sayıları değiştirin ve değişen şeyin ne olduğunu görmek için kodu birkaç kez
        tekrar çalıştırın."
      CSD U3 Random random ellipse2: "<img src=\"https://images.code.org/ff3be801c7e634d49584aac103df292a-image-1491334428729.33.18\nPM.png\"
        style=\"float:right;height:150px\">\\\r\n\\\r\n\n# Rastgele Sayılar\\\r\n\n\\\r\nBurada
        son yaptığınızla aynı güneş var. Şimdi sadece x konumu rastgele ama y konumunu
        da rastgele yapabilirsiniz.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\n\n-   Dairenin
        farklı Y konumunda çizilmesi için de elipsin Y parametresi için 'randomNumber()'
        bloğunu işlevini kullan.\\\r\n-   Daireniz farklı X ve Y konumunda göründüğünde
        devam edebilirsiniz."
      CSD U3 Random random ellipse2_2018: |-
        <img src="https://images.code.org/8306a9fd01470ac8582cf4374dde7033-image-1520403513967.17.40 PM.png" style="float:right;height:150px">

        # Random Numbers

        Here's the same sun from last time.  Right now only the x-coordinate is random, but you can make the y-coordinate random, too.

        # Do This

        -   Use `randomNumber()` for the ellipse's Y parameter so the circle is drawn in a random Y position, too.
        -   As long as your circle is appearing at random X and Y positions, you can move on.
      CSD U3 Random random ellipse2_2018_2019: |-
        <img src="https://images.code.org/8306a9fd01470ac8582cf4374dde7033-image-1520403513967.17.40 PM.png" style="float:right;height:150px">

        # Random Numbers

        Here's the same sun from last time.  Right now only the x-coordinate is random, but you can make the y-coordinate random, too.

        # Do This

        -   Use `randomNumber()` for the ellipse's Y parameter so the circle is drawn in a random Y position, too.
        -   As long as your circle is appearing at random X and Y positions, you can move on.
      CSD U3 Random random ellipse_2018: "# Rastgele Syılar\\\r\n\n\\\r\n`randomNumber()`minimum
        ve maksimum değerleri arasından rastgele bir sayı seçer. Belirli bir sayı
        yazmanın yerine bu kodu kullanabilirsiniz.  Eğer çizimlerinizi rastgele sayılarla
        yaparsanız, programı her çalıştırdığınızda çizim biraz farklı görünecektir.
        \\\r\n\\\r\n\n# Bunları Yapın\\\r\n\n\\\r\n\n-   Nasıl çalıştığını görmek
        için programı birkaç kez çalıştırın.\\\r\n-   `randomNumber` bloğunun içindeki
        sayıları değiştirin ve değişen şeyin ne olduğunu görmek için kodu birkaç kez
        tekrar çalıştırın."
      CSD U3 Random random ellipse_2018_2019: "# Rastgele Syılar\\\r\n\n\\\r\n`randomNumber()`minimum
        ve maksimum değerleri arasından rastgele bir sayı seçer. Belirli bir sayı
        yazmanın yerine bu kodu kullanabilirsiniz.  Eğer çizimlerinizi rastgele sayılarla
        yaparsanız, programı her çalıştırdığınızda çizim biraz farklı görünecektir.
        \\\r\n\\\r\n\n# Bunları Yapın\\\r\n\n\\\r\n\n-   Nasıl çalıştığını görmek
        için programı birkaç kez çalıştırın.\\\r\n-   `randomNumber` bloğunun içindeki
        sayıları değiştirin ve değişen şeyin ne olduğunu görmek için kodu birkaç kez
        tekrar çalıştırın."
      CSD U3 Scene Example: "# Sprite Sahneleri\\\r \\\r, şekilleri, spriteı ve 'metin'
        olarak adlandırılan yeni bir bloğu kullanarak basit öykü ya da çizgi roman
        sahneleri oluşturabilirsiniz. Bu örnek oldukça basit olmakla birlikte, sen
        istediğin kadar sprite ve şekil ekleyebilirsin \\\r \\\r Tasarla ## devam
        edelim, 'Metin' bloğunu kulanarak sahneyi nasıl hazırlarsın"
      CSD U3 Scene Example_2018: |-
        # Sprite Scenes

        By combining shapes, sprites, and text, you can create simple scenes, stories, or comics. While this example is fairly simple, you can combine as many sprites and shapes as you like to create scenes as complex or detailed as you like.

        ## Sketch It Out

        Before moving on, take a second to sketch out a scene that you'd like to make at the end of this lesson. Consider the simple shapes that you've used in the past, sprites for your characters, and any text that you'd like on the screen. Once you've sketched out an idea, you'll learn about `text` and how to compose a scene.
      CSD U3 Scene Example_2018_2019: |-
        # Sprite Scenes

        By combining shapes, sprites, and text, you can create simple scenes, stories, or comics. While this example is fairly simple, you can combine as many sprites and shapes as you like to create scenes as complex or detailed as you like.

        ## Sketch It Out

        Before moving on, take a second to sketch out a scene that you'd like to make at the end of this lesson. Consider the simple shapes that you've used in the past, sprites for your characters, and any text that you'd like on the screen. Once you've sketched out an idea, you'll learn about how to compose a scene.
      CSD U3 Sprite Movement Left: "<img src=\"https://images.code.org/9f9162cb94a02d9b3aba9b6067d0281a-image-1491862771496.gif\"\nstyle=\"float:
        right; margin-left: 20px\">\\\r\n\\\r\n\n# Sola Taşıma\\\r\n\n\\\r\nEğer hareketli
        nesnenin x konumuna değer eklerseniz onu sağa taşırsınız, sola taşımak için
        ne yapmalısınız?\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\nProgramınızı sağdaki
        resimdeki gibi hareketlendirin. Her karede sineğin biraz daha soldan uzaklaşması
        için çizme döngüsünün içerisinde 'fly.x' değerini güncelle.\\\r\n\\\r\n_İpucu:\nDaha
        büyük değerleri ekleyip çıkararak hareketli nesnenizi daha hızlı taşıyabilirsin.
        Örneğimizdeki sinek son bölümdeki uçağın iki kadar daha hızlı hareket eder._"
      CSD U3 Sprite Movement Left_2018: "<img src=\"https://images.code.org/9f9162cb94a02d9b3aba9b6067d0281a-image-1491862771496.gif\"\nstyle=\"float:
        right; margin-left: 20px\">\\\r\n\\\r\n\n# Sola Taşıma\\\r\n\n\\\r\nEğer hareketli
        nesnenin x konumuna değer eklerseniz onu sağa taşırsınız, sola taşımak için
        ne yapmalısınız?\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\nProgramınızı sağdaki
        resimdeki gibi hareketlendirin. Her karede sineğin biraz daha soldan uzaklaşması
        için çizme döngüsünün içerisinde 'fly.x' değerini güncelle.\\\r\n\\\r\n_İpucu:\nDaha
        büyük değerleri ekleyip çıkararak hareketli nesnenizi daha hızlı taşıyabilirsin.
        Örneğimizdeki sinek son bölümdeki uçağın iki kadar daha hızlı hareket eder._"
      CSD U3 Sprite Movement Left_2019: "<img src=\"https://images.code.org/9f9162cb94a02d9b3aba9b6067d0281a-image-1491862771496.gif\"\nstyle=\"float:
        right; margin-left: 20px\">\\\r\n\\\r\n\n# Sola Taşıma\\\r\n\n\\\r\nEğer hareketli
        nesnenin x konumuna değer eklerseniz onu sağa taşırsınız, sola taşımak için
        ne yapmalısınız?\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\nProgramınızı sağdaki
        resimdeki gibi hareketlendirin. Her karede sineğin biraz daha soldan uzaklaşması
        için çizme döngüsünün içerisinde 'fly.x' değerini güncelle.\\\r\n\\\r\n_İpucu:\nDaha
        büyük değerleri ekleyip çıkararak hareketli nesnenizi daha hızlı taşıyabilirsin.
        Örneğimizdeki sinek son bölümdeki uçağın iki kadar daha hızlı hareket eder._"
      CSD U3 Sprite Movement Right: "<img src=\"https://images.code.org/629bc615a879f0f3dc9f290bea2358c8-image-1491861334164.gif\"\nstyle=\"float:
        right; margin-left: 20px\">\\\r\n\\\r\n\n# Hareketli Nesne Taşınımı\\\r\n\n\\\r\nSayaç
        kalıbını kullanarak, hareketli nesneleri yumuşakça hareketlendiren programlar
        yazabilirsiniz. Çizme döngüsü içerisinde nesnenin 'x' ve 'y' konumunu arttırma
        ve azaltma küçük aralıklarla hareketli nesnenizin her çizildiğinde taşınmasını
        sağlar.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\nProgramınızı sağdaki resimdeki
        gibi hareketlendirin, Biz zaten 'plane.x' değerini güncelleyen bir satır ekledik
        ama bitirilmeye ihtiyacı var.\\\r"
      CSD U3 Sprite Movement Right_2018: "<img src=\"https://images.code.org/629bc615a879f0f3dc9f290bea2358c8-image-1491861334164.gif\"\nstyle=\"float:
        right; margin-left: 20px\">\\\r\n\\\r\n\n# Hareketli Nesne Taşınımı\\\r\n\n\\\r\nSayaç
        kalıbını kullanarak, hareketli nesneleri yumuşakça hareketlendiren programlar
        yazabilirsiniz. Çizme döngüsü içerisinde nesnenin 'x' ve 'y' konumunu arttırma
        ve azaltma küçük aralıklarla hareketli nesnenizin her çizildiğinde taşınmasını
        sağlar.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\nProgramınızı sağdaki resimdeki
        gibi hareketlendirin, Biz zaten 'plane.x' değerini güncelleyen bir satır ekledik
        ama bitirilmeye ihtiyacı var.\\\r"
      CSD U3 Sprite Movement Right_2019: "<img src=\"https://images.code.org/629bc615a879f0f3dc9f290bea2358c8-image-1491861334164.gif\"\nstyle=\"float:
        right; margin-left: 20px\">\\\r\n\\\r\n\n# Hareketli Nesne Taşınımı\\\r\n\n\\\r\nSayaç
        kalıbını kullanarak, hareketli nesneleri yumuşakça hareketlendiren programlar
        yazabilirsiniz. Çizme döngüsü içerisinde nesnenin 'x' ve 'y' konumunu arttırma
        ve azaltma küçük aralıklarla hareketli nesnenizin her çizildiğinde taşınmasını
        sağlar.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\nProgramınızı sağdaki resimdeki
        gibi hareketlendirin, Biz zaten 'plane.x' değerini güncelleyen bir satır ekledik
        ama bitirilmeye ihtiyacı var.\\\r"
      CSD U3 Sprites anitab 1: "# Resimler\\\r\n\n\\\r\n**Animasyon Sekmesi**inde,
        senin için yüklenmiş olan üç resim göreceksin.\nEkranın üzerinde bulunan **Animasyon**
        butonuna tıklayarak animasyon sekmesine ulaşabilirsiniz. \\\r\n\\\r\n<img
        src=\"https://images.code.org/f694a37bbadcf0533e7b19d8c0f5309b-image-1465580394090.35.11\nPM.png\"
        style=\"width:300px;float:right\">\\\r\n\\\r\nBir kez sprite oluşturduktan
        sonra, **sprite nesnesinin görüntüsünü bir kareden bir resme dönüştürmek için
        `sprite.setAnimation()` komutunu kullanabilirsin.** Animasyon sekmesinde yüklenmiş
        olan bütün resimler `sprite.setAnimation()` komutundaki açılır menüde görünür.
        Uzaylı örnek olarak senin için hazırlandı.\\\r\n\\\r\n\n# Bunu Yapın\\\r\n\nAnimasyon
        sekmesinden favori resminizi sprite olarak ayarlayın.\\\r\n\\\r\n\n-   Bir
        resim atanmış olan bir sprite sizin için halihazırda oluşturulmuş.\\\r\n-
        \  Nasıl çalıştığını görmek için kodu çalıştırın.\\\r\n-   Sprite nesnesinin
        görünümünü değiştirmek için  `setAnimation` komutundaki girdiyi değiştirin.\\\r\n-
        \  Tüm farklı resimleri deneyin."
      CSD U3 Sprites anitab 1_2018: "# Resimler\\\r\n\n\\\r\n**Animasyon Sekmesi**inde,
        senin için yüklenmiş olan üç resim göreceksin.\nEkranın üzerinde bulunan **Animasyon**
        butonuna tıklayarak animasyon sekmesine ulaşabilirsiniz. \\\r\n\\\r\n<img
        src=\"https://images.code.org/f694a37bbadcf0533e7b19d8c0f5309b-image-1465580394090.35.11\nPM.png\"
        style=\"width:300px;float:right\">\\\r\n\\\r\nBir kez sprite oluşturduktan
        sonra, **sprite nesnesinin görüntüsünü bir kareden bir resme dönüştürmek için
        `sprite.setAnimation()` komutunu kullanabilirsin.** Animasyon sekmesinde yüklenmiş
        olan bütün resimler `sprite.setAnimation()` komutundaki açılır menüde görünür.
        Uzaylı örnek olarak senin için hazırlandı.\\\r\n\\\r\n\n# Bunu Yapın\\\r\n\nAnimasyon
        sekmesinden favori resminizi sprite olarak ayarlayın.\\\r\n\\\r\n\n-   Bir
        resim atanmış olan bir sprite sizin için halihazırda oluşturulmuş.\\\r\n-
        \  Nasıl çalıştığını görmek için kodu çalıştırın.\\\r\n-   Sprite nesnesinin
        görünümünü değiştirmek için  `setAnimation` komutundaki girdiyi değiştirin.\\\r\n-
        \  Tüm farklı resimleri deneyin."
      CSD U3 Sprites anitab 1_2019: "# Resimler\\\r\n\n\\\r\n**Animasyon Sekmesi**inde,
        senin için yüklenmiş olan üç resim göreceksin.\nEkranın üzerinde bulunan **Animasyon**
        butonuna tıklayarak animasyon sekmesine ulaşabilirsiniz. \\\r\n\\\r\n<img
        src=\"https://images.code.org/f694a37bbadcf0533e7b19d8c0f5309b-image-1465580394090.35.11\nPM.png\"
        style=\"width:300px;float:right\">\\\r\n\\\r\nBir kez sprite oluşturduktan
        sonra, **sprite nesnesinin görüntüsünü bir kareden bir resme dönüştürmek için
        `sprite.setAnimation()` komutunu kullanabilirsin.** Animasyon sekmesinde yüklenmiş
        olan bütün resimler `sprite.setAnimation()` komutundaki açılır menüde görünür.
        Uzaylı örnek olarak senin için hazırlandı.\\\r\n\\\r\n\n# Bunu Yapın\\\r\n\nAnimasyon
        sekmesinden favori resminizi sprite olarak ayarlayın.\\\r\n\\\r\n\n-   Bir
        resim atanmış olan bir sprite sizin için halihazırda oluşturulmuş.\\\r\n-
        \  Nasıl çalıştığını görmek için kodu çalıştırın.\\\r\n-   Sprite nesnesinin
        görünümünü değiştirmek için  `setAnimation` komutundaki girdiyi değiştirin.\\\r\n-
        \  Tüm farklı resimleri deneyin."
      CSD U3 Sprites anitab 2: "# Kendi resminizi yükleme\\\r\n\n\\\r\nKendi resiminizi
        çizmek veya yüklemek için de Animasyon sekmesini kullanabilirsiniz.\\\r\n\\\r\n\n#
        \n\nBunları Yapın\\\r\nBir uçurtma yapacaksın. Bir resim için internette araştırma
        yapabilirsin veya kendi uçurtmanı çizerek yeni bir animasyon oluşturabilirsin.\\\r\n\\\r\n\\*\nUçurtma
        resminizi indirin. En iyisi şeffaf arka planlı resimdir.\\\r\n\\*\nAnimasyon
        sekmesini açın.\\\r\n\n-   Click <img src=\"https://images.code.org/346f6657dba57b0c3bd5deb534f76b69-image-1466194432449.13.05\n
        \   PM.png\" style=\"width:50px\"> sonra<img src=\"https://images.code.org/60c0371b45b29f10a3c8530db9154428-image-1466194434329.13.16\n
        \   PM.png\" style=\"width:50px\"> bir resim gönder.\\\r\n-   Bilgisayardan
        dosyanı seç.\\\r\n-   Resmi yeniden adlandırın böylece hatırlaması kolay olur.Resmi
        yeniden adlandırmak için resmin altındaki metni tıklayın.\\\r\n-   Kod moduna
        geri dönün, 'kite' nesnesini yeni animasyonda göstermek için `sprite.setAnimation()`
        bloğunu kullanın.\\\r\n    \\\r\n    Resmin çok büyük olursa endişelenme!
        Gelecek bölümde resmi nasıl sığdıracağınızı öğreneceksiniz."
      CSD U3 Sprites anitab 2_2018: "# Kendi resminizi yükleme\\\r\n\n\\\r\nKendi
        resiminizi çizmek veya yüklemek için de Animasyon sekmesini kullanabilirsiniz.\\\r\n\\\r\n\n#
        \n\nBunları Yapın\\\r\nBir uçurtma yapacaksın. Bir resim için internette araştırma
        yapabilirsin veya kendi uçurtmanı çizerek yeni bir animasyon oluşturabilirsin.\\\r\n\\\r\n\\*\nUçurtma
        resminizi indirin. En iyisi şeffaf arka planlı resimdir.\\\r\n\\*\nAnimasyon
        sekmesini açın.\\\r\n\n-   Click <img src=\"https://images.code.org/346f6657dba57b0c3bd5deb534f76b69-image-1466194432449.13.05\n
        \   PM.png\" style=\"width:50px\"> sonra<img src=\"https://images.code.org/60c0371b45b29f10a3c8530db9154428-image-1466194434329.13.16\n
        \   PM.png\" style=\"width:50px\"> bir resim gönder.\\\r\n-   Bilgisayardan
        dosyanı seç.\\\r\n-   Resmi yeniden adlandırın böylece hatırlaması kolay olur.Resmi
        yeniden adlandırmak için resmin altındaki metni tıklayın.\\\r\n-   Kod moduna
        geri dönün, 'kite' nesnesini yeni animasyonda göstermek için `sprite.setAnimation()`
        bloğunu kullanın.\\\r\n    \\\r\n    Resmin çok büyük olursa endişelenme!
        Gelecek bölümde resmi nasıl sığdıracağınızı öğreneceksiniz."
      CSD U3 Sprites anitab 2_2019: "# Kendi resminizi yükleme\\\r\n\n\\\r\nKendi
        resiminizi çizmek veya yüklemek için de Animasyon sekmesini kullanabilirsiniz.\\\r\n\\\r\n\n#
        \n\nBunları Yapın\\\r\nBir uçurtma yapacaksın. Bir resim için internette araştırma
        yapabilirsin veya kendi uçurtmanı çizerek yeni bir animasyon oluşturabilirsin.\\\r\n\\\r\n\\*\nUçurtma
        resminizi indirin. En iyisi şeffaf arka planlı resimdir.\\\r\n\\*\nAnimasyon
        sekmesini açın.\\\r\n\n-   Click <img src=\"https://images.code.org/346f6657dba57b0c3bd5deb534f76b69-image-1466194432449.13.05\n
        \   PM.png\" style=\"width:50px\"> sonra<img src=\"https://images.code.org/60c0371b45b29f10a3c8530db9154428-image-1466194434329.13.16\n
        \   PM.png\" style=\"width:50px\"> bir resim gönder.\\\r\n-   Bilgisayardan
        dosyanı seç.\\\r\n-   Resmi yeniden adlandırın böylece hatırlaması kolay olur.Resmi
        yeniden adlandırmak için resmin altındaki metni tıklayın.\\\r\n-   Kod moduna
        geri dönün, 'kite' nesnesini yeni animasyonda göstermek için `sprite.setAnimation()`
        bloğunu kullanın.\\\r\n    \\\r\n    Resmin çok büyük olursa endişelenme!
        Gelecek bölümde resmi nasıl sığdıracağınızı öğreneceksiniz."
      CSD U3 Sprites anitab 3: "# Boyutu Değiştirme\\\r\n\n\\\r\nIn\nSprites sekmesinde
        `sprite.scale` isimli yeni blok göreceksin.\nBu fonksiyon boyutu orantılı
        olarak değiştiriyor. \n`sprite.scale = 1` orjinal boyut\n`sprite.scale = 0.5`
        Yarı boyut\n `sprite.scale = 2` iki kat büyük.\\\r\n\\\r\n\n# \n\nBunu yap\\\r\n\\\r\nBu
        aşamada yeni yüklediğin görüntüyü kullanmalısın. `sprite.scale` bloğu ekle
        ve uçurtmanın boyutunu değiştir.\\\r\n\\\r\n\\_İpucu: Kodun sırası önemlidir!
        `sprite.scale` sprite yarattıktan sonra fakat drawSprites() bloğundan önce
        çağır"
      CSD U3 Sprites anitab 3_2018: "# Boyutu Değiştirme\\\r\n\n\\\r\nIn\nSprites
        sekmesinde `sprite.scale` isimli yeni blok göreceksin.\nBu fonksiyon boyutu
        orantılı olarak değiştiriyor. \n`sprite.scale = 1` orjinal boyut\n`sprite.scale
        = 0.5` Yarı boyut\n `sprite.scale = 2` iki kat büyük.\\\r\n\\\r\n\n# \n\nBunu
        yap\\\r\n\\\r\nBu aşamada yeni yüklediğin görüntüyü kullanmalısın. `sprite.scale`
        bloğu ekle ve uçurtmanın boyutunu değiştir.\\\r\n\\\r\n\\_İpucu: Kodun sırası
        önemlidir! `sprite.scale` sprite yarattıktan sonra fakat drawSprites() bloğundan
        önce çağır"
      CSD U3 Sprites anitab 3_2019: "# Boyutu Değiştirme\\\r\n\n\\\r\nIn\nSprites
        sekmesinde `sprite.scale` isimli yeni blok göreceksin.\nBu fonksiyon boyutu
        orantılı olarak değiştiriyor. \n`sprite.scale = 1` orjinal boyut\n`sprite.scale
        = 0.5` Yarı boyut\n `sprite.scale = 2` iki kat büyük.\\\r\n\\\r\n\n# \n\nBunu
        yap\\\r\n\\\r\nBu aşamada yeni yüklediğin görüntüyü kullanmalısın. `sprite.scale`
        bloğu ekle ve uçurtmanın boyutunu değiştir.\\\r\n\\\r\n\\_İpucu: Kodun sırası
        önemlidir! `sprite.scale` sprite yarattıktan sonra fakat drawSprites() bloğundan
        önce çağır"
      CSD U3 Sprites intro debug: "<img src=\"https://images.code.org/63207a624d751aacb376db18cdf09eec-image-1491255841823.png\"\nstyle=\"width:
        150px; float: right; margin-left: 20px; border: 1px solid #f2f2f2;\">\\\r\n\n#
        \n\nHata Ayıklama\\\r\n\\\r\nBu programın iki yeni sprite oluşturması gerekir,biri
        ekranın sağında diğeri solunda, fakat sadece bir tanesi çiziliyor. **Değiştirmen
        gereken kod yok**, sadece sağdaki resimde olduğu gibi iki sprite nesnesinin
        de görünür olması için var olan kodları yeniden düzenle."
      CSD U3 Sprites intro debug_2018: "<img src=\"https://images.code.org/63207a624d751aacb376db18cdf09eec-image-1491255841823.png\"\nstyle=\"width:
        150px; float: right; margin-left: 20px; border: 1px solid #f2f2f2;\">\\\r\n\n#
        \n\nHata Ayıklama\\\r\n\\\r\nBu programın iki yeni sprite oluşturması gerekir,biri
        ekranın sağında diğeri solunda, fakat sadece bir tanesi çiziliyor. **Değiştirmen
        gereken kod yok**, sadece sağdaki resimde olduğu gibi iki sprite nesnesinin
        de görünür olması için var olan kodları yeniden düzenle."
      CSD U3 Sprites intro debug_2019: "<img src=\"https://images.code.org/63207a624d751aacb376db18cdf09eec-image-1491255841823.png\"\nstyle=\"width:
        150px; float: right; margin-left: 20px; border: 1px solid #f2f2f2;\">\\\r\n\n#
        \n\nHata Ayıklama\\\r\n\\\r\nBu programın iki yeni sprite oluşturması gerekir,biri
        ekranın sağında diğeri solunda, fakat sadece bir tanesi çiziliyor. **Değiştirmen
        gereken kod yok**, sadece sağdaki resimde olduğu gibi iki sprite nesnesinin
        de görünür olması için var olan kodları yeniden düzenle."
      CSD U3 Sprites intro sprites: |-
        # Sprites

        **Creating Sprites:**  <img src = "https://images.code.org/92e06cddc5355dc37aa2c6a033793dd0-image-1466027030772.43.41 PM.png" style = "height:30px">  creates a new sprite and assigns it to a variable.  The default name is `sprite`, so you'll want to change it to something more meaningful.

        **Drawing Sprites:** Sprites only appear on the screen when you draw them there. Calling ![](<https://images.code.org/82a18afda6463323529acaa3dc326d55-image-1466004008638.19.16 AM.png>) will draw all of your created sprites on the screen.

        <img src="https://images.code.org/fe5905d6b89c14dca525865f4e579104-image-1491254588895.png" style="width: 150px; float: right; border: 1px solid #f2f2f2; margin-left: 20px">

        # Do This

        This program includes comments that let you know where to place code but otherwise is blank. Your program should look like the image on the right.

        -   Add `var sprite = createSprite(200, 200)` under the comment `Creating Sprites`.
            -   You can ignore the yellow triangle warning for now.  It's just telling you that you haven't used your sprite yet.
        -   Add `drawSprites()` under the comment `Drawing`.
        -   **Run the code** to draw your first sprite on the screen.

        _Hint: Sprites are drawn from their center, which means that center of the square (not the top left corner) is at (200, 200)._
      CSD U3 Sprites intro sprites_2018: |-
        # Sprites

        **Creating Sprites:**  <img src = "https://images.code.org/92e06cddc5355dc37aa2c6a033793dd0-image-1466027030772.43.41 PM.png" style = "height:30px">  creates a new sprite and assigns it to a variable.  The default name is `sprite`, so you'll want to change it to something more meaningful.

        **Drawing Sprites:** Sprites only appear on the screen when you draw them there. Calling ![](<https://images.code.org/82a18afda6463323529acaa3dc326d55-image-1466004008638.19.16 AM.png>) will draw all of your created sprites on the screen.

        <img src="https://images.code.org/fe5905d6b89c14dca525865f4e579104-image-1491254588895.png" style="width: 150px; float: right; border: 1px solid #f2f2f2; margin-left: 20px">

        # Do This

        This program includes comments that let you know where to place code but otherwise is blank. Your program should look like the image on the right.

        -   Add `var sprite = createSprite(200, 200)` under the comment `Creating Sprites`.
            -   You can ignore the yellow triangle warning for now.  It's just telling you that you haven't used your sprite yet.
        -   Add `drawSprites()` under the comment `Drawing`.
        -   **Run the code** to draw your first sprite on the screen.

        _Hint: Sprites are drawn from their center, which means that center of the square (not the top left corner) is at (200, 200)._
      CSD U3 Sprites intro sprites_2019: |-
        # Sprites

        **Creating Sprites:**  <img src = "https://images.code.org/92e06cddc5355dc37aa2c6a033793dd0-image-1466027030772.43.41 PM.png" style = "height:30px">  creates a new sprite and assigns it to a variable.  The default name is `sprite`, so you'll want to change it to something more meaningful.

        **Drawing Sprites:** Sprites only appear on the screen when you draw them there. Calling ![](<https://images.code.org/82a18afda6463323529acaa3dc326d55-image-1466004008638.19.16 AM.png>) will draw all of your created sprites on the screen.

        <img src="https://images.code.org/fe5905d6b89c14dca525865f4e579104-image-1491254588895.png" style="width: 150px; float: right; border: 1px solid #f2f2f2; margin-left: 20px">

        # Do This

        This program includes comments that let you know where to place code but otherwise is blank. Your program should look like the image on the right.

        -   Add `var sprite = createSprite(200, 200)` under the comment `Creating Sprites`.
            -   You can ignore the yellow triangle warning for now.  It's just telling you that you haven't used your sprite yet.
        -   Add `drawSprites()` under the comment `Drawing`.
        -   **Run the code** to draw your first sprite on the screen.

        _Hint: Sprites are drawn from their center, which means that center of the square (not the top left corner) is at (200, 200)._
      CSD U3 Sprites scene challenge: "# Meydan okuma: Başlamadan önce öğretmeninle
        kontrol et.\\\r \\\rSahneni bitirdiğine göre buna yeni eklemeler yapabilirsin
        yada yenisini yaratabilirsin."
      CSD U3 Sprites scene challenge_2018: "# Meydan okuma: Başlamadan önce öğretmeninle
        kontrol et.\\\r \\\rSahneni bitirdiğine göre buna yeni eklemeler yapabilirsin
        yada yenisini yaratabilirsin."
      CSD U3 Sprites scene challenge_2019: "# Meydan okuma: Başlamadan önce öğretmeninle
        kontrol et.\\\r \\\rSahneni bitirdiğine göre buna yeni eklemeler yapabilirsin
        yada yenisini yaratabilirsin."
      CSD U3 Sprites scene drawing: "# Kendi sahneni oluştur - bir sahne oluşturmaya
        başlayacağız. Daha önce yapmadıysanız önce kağıda bir sahne çizin (grafik
        kağıdı kullanmayı düşünün). Bir fikrin oluşuncaönce arka planı yap. \\\r \\\r
        # Bunu Yap\\\r \\\r çizmeye başla \\* 'backgound()' ile arka planı doldur\\\r
        \\* sahneye gereklişekilleri çiz"
      CSD U3 Sprites scene drawing_2018: "# Kendi sahneni oluştur - bir sahne oluşturmaya
        başlayacağız. Daha önce yapmadıysanız önce kağıda bir sahne çizin (grafik
        kağıdı kullanmayı düşünün). Bir fikrin oluşuncaönce arka planı yap. \\\r \\\r
        # Bunu Yap\\\r \\\r çizmeye başla \\* 'backgound()' ile arka planı doldur\\\r
        \\* sahneye gereklişekilleri çiz"
      CSD U3 Sprites scene drawing_2019: "# Kendi sahneni oluştur - bir sahne oluşturmaya
        başlayacağız. Daha önce yapmadıysanız önce kağıda bir sahne çizin (grafik
        kağıdı kullanmayı düşünün). Bir fikrin oluşuncaönce arka planı yap. \\\r \\\r
        # Bunu Yap\\\r \\\r çizmeye başla \\* 'backgound()' ile arka planı doldur\\\r
        \\* sahneye gereklişekilleri çiz"
      CSD U3 Sprites scene sprites: "# Sahnenizi Oluşturun - Hareketli Nesneler\\\r\n\n\\\r\nArkaplanınız
        yerinde olduğuna göre, hareketli nesnelerinizi ekleme zamanı.\\\r\n\n# Bunları
        Yapın\\\r\n\n\\\r\n\\*\nAnimasyon sekmesinden hareketli nesne resimlerinizin
        tamamını oluşturun veya ekleyin.\\\r\n\n-   Programınızın başında her hareketli
        nesne için bir değişken oluşturun ve animasyon sekmesinde oluşturduğunuz resimlere
        atamak için 'setAnimation()' komutunu kullanın.\\\r\n-   Prpgramın sonunda
        bir kez `drawSprites()`komutunu çalıştırın.\\\r\n    \\\r\n    _İpucu: Muhtemelen
        'drawSprites()' komutunu programınızın sonunda çalıştırmak isteyeceksiniz
        böylece hareketli nesneleriniz arka planın üzerinde olacak, fakat bazı tasarımlar
        için 'drawSprites()' komutunu daha önce çalıştırmak isteyebilirsiniz böylece
        hareketli nesneleriniz bazı şekillerin üzerinde bazılarınınsa altında olacak._"
      CSD U3 Sprites scene sprites_2018: "# Sahnenizi Oluşturun - Hareketli Nesneler\\\r\n\n\\\r\nArkaplanınız
        yerinde olduğuna göre, hareketli nesnelerinizi ekleme zamanı.\\\r\n\n# Bunları
        Yapın\\\r\n\n\\\r\n\\*\nAnimasyon sekmesinden hareketli nesne resimlerinizin
        tamamını oluşturun veya ekleyin.\\\r\n\n-   Programınızın başında her hareketli
        nesne için bir değişken oluşturun ve animasyon sekmesinde oluşturduğunuz resimlere
        atamak için 'setAnimation()' komutunu kullanın.\\\r\n-   Prpgramın sonunda
        bir kez `drawSprites()`komutunu çalıştırın.\\\r\n    \\\r\n    _İpucu: Muhtemelen
        'drawSprites()' komutunu programınızın sonunda çalıştırmak isteyeceksiniz
        böylece hareketli nesneleriniz arka planın üzerinde olacak, fakat bazı tasarımlar
        için 'drawSprites()' komutunu daha önce çalıştırmak isteyebilirsiniz böylece
        hareketli nesneleriniz bazı şekillerin üzerinde bazılarınınsa altında olacak._"
      CSD U3 Sprites scene sprites_2019: "# Sahnenizi Oluşturun - Hareketli Nesneler\\\r\n\n\\\r\nArkaplanınız
        yerinde olduğuna göre, hareketli nesnelerinizi ekleme zamanı.\\\r\n\n# Bunları
        Yapın\\\r\n\n\\\r\n\\*\nAnimasyon sekmesinden hareketli nesne resimlerinizin
        tamamını oluşturun veya ekleyin.\\\r\n\n-   Programınızın başında her hareketli
        nesne için bir değişken oluşturun ve animasyon sekmesinde oluşturduğunuz resimlere
        atamak için 'setAnimation()' komutunu kullanın.\\\r\n-   Prpgramın sonunda
        bir kez `drawSprites()`komutunu çalıştırın.\\\r\n    \\\r\n    _İpucu: Muhtemelen
        'drawSprites()' komutunu programınızın sonunda çalıştırmak isteyeceksiniz
        böylece hareketli nesneleriniz arka planın üzerinde olacak, fakat bazı tasarımlar
        için 'drawSprites()' komutunu daha önce çalıştırmak isteyebilirsiniz böylece
        hareketli nesneleriniz bazı şekillerin üzerinde bazılarınınsa altında olacak._"
      CSD U3 Sprites scene text: "# Sahnenizi Oluşturun - Metin\\\r\n\n\\\r\nSahnenizin
        son bölümü metin eklemektir..\\\r\n\\\r\n\n# Bunları Yapın\\\r\n\n\\\r\n\n-
        \  Metnin ayrı her bir satırı için bir adet 'text()' komutu ekleyin.\\\r\n-
        \  Eğer gerekliyse, yazınızın görünümü değiştirmek için 'fill()' ve 'textSize()'
        komutlarını kullanın.\\\r\n    \\\r\n    _İpucu: Çoğu sahnede metin her şeyin
        üstünde bulunur, ki bu 'text()' komutlarının programınızın son satırlarında
        bulunmasını gerektirir. Bununla birlikte eğer metni diğer öğelerle katman
        halinde kullanmak istiyorsanız, sıralamayı değiştirmeyi düşünebilirsiniz._"
      CSD U3 Sprites scene text_2018: "# Sahnenizi Oluşturun - Metin\\\r\n\n\\\r\nSahnenizin
        son bölümü metin eklemektir..\\\r\n\\\r\n\n# Bunları Yapın\\\r\n\n\\\r\n\n-
        \  Metnin ayrı her bir satırı için bir adet 'text()' komutu ekleyin.\\\r\n-
        \  Eğer gerekliyse, yazınızın görünümü değiştirmek için 'fill()' ve 'textSize()'
        komutlarını kullanın.\\\r\n    \\\r\n    _İpucu: Çoğu sahnede metin her şeyin
        üstünde bulunur, ki bu 'text()' komutlarının programınızın son satırlarında
        bulunmasını gerektirir. Bununla birlikte eğer metni diğer öğelerle katman
        halinde kullanmak istiyorsanız, sıralamayı değiştirmeyi düşünebilirsiniz._"
      CSD U3 Sprites scene text_2019: "# Sahnenizi Oluşturun - Metin\\\r\n\n\\\r\nSahnenizin
        son bölümü metin eklemektir..\\\r\n\\\r\n\n# Bunları Yapın\\\r\n\n\\\r\n\n-
        \  Metnin ayrı her bir satırı için bir adet 'text()' komutu ekleyin.\\\r\n-
        \  Eğer gerekliyse, yazınızın görünümü değiştirmek için 'fill()' ve 'textSize()'
        komutlarını kullanın.\\\r\n    \\\r\n    _İpucu: Çoğu sahnede metin her şeyin
        üstünde bulunur, ki bu 'text()' komutlarının programınızın son satırlarında
        bulunmasını gerektirir. Bununla birlikte eğer metni diğer öğelerle katman
        halinde kullanmak istiyorsanız, sıralamayı değiştirmeyi düşünebilirsiniz._"
      CSD U3 Sprites text: "# Metin Ekleme\\\r\n\n\\\r\n`text` kullanarak ekranda
        istediğiniz herhangi bir yere metin ekleyebilirsiniz. Kodun içinde gösterilen
        metni değiştirin, sonra ekranın farklı bir yerine yazmak için ikinci bir 'text'
        ekleyin.\\\r\n\\\r\n_İpucu: Varsayılan yazı boyutu oldukça küçüktür, fakat
        yazı boyutunu değiştirmek için 'textSize' bloğunu kullanabilirsin. Ayrıca
        metnin rengini değiştirmek için 'fill' komutunu kullanabilirsin._"
      CSD U3 Sprites text debug: "<img src=\"https://images.code.org/a313a455ef7033e840dfb21cb15cbb30-image-1491277088617.png\"\nstyle=\"float:
        right; width: 200px; margin-left: 20px;\">\\\r\n\n# Hata Ayıklama\\\r\n\n\\\r\nDoğru
        kodların tamamı bu sahnede, fakat doğru sırada değiller. Sahne, sağdaki resim
        gibi görünmelidir.  Blokları yeniden sıralayabilir misin? Böylece sahnenin
        her bölümü doğru sırada çizilecek."
      CSD U3 Sprites text debug_2018: "<img src=\"https://images.code.org/a313a455ef7033e840dfb21cb15cbb30-image-1491277088617.png\"\nstyle=\"float:
        right; width: 200px; margin-left: 20px;\">\\\r\n\n# Hata Ayıklama\\\r\n\n\\\r\nDoğru
        kodların tamamı bu sahnede, fakat doğru sırada değiller. Sahne, sağdaki resim
        gibi görünmelidir.  Blokları yeniden sıralayabilir misin? Böylece sahnenin
        her bölümü doğru sırada çizilecek."
      CSD U3 Sprites text debug_2018_2019: "<img src=\"https://images.code.org/a313a455ef7033e840dfb21cb15cbb30-image-1491277088617.png\"\nstyle=\"float:
        right; width: 200px; margin-left: 20px;\">\\\r\n\n# Hata Ayıklama\\\r\n\n\\\r\nDoğru
        kodların tamamı bu sahnede, fakat doğru sırada değiller. Sahne, sağdaki resim
        gibi görünmelidir.  Blokları yeniden sıralayabilir misin? Böylece sahnenin
        her bölümü doğru sırada çizilecek."
      CSD U3 Sprites text_2018: "# Metin Ekleme\\\r\n\n\\\r\n`text` kullanarak ekranda
        istediğiniz herhangi bir yere metin ekleyebilirsiniz. Kodun içinde gösterilen
        metni değiştirin, sonra ekranın farklı bir yerine yazmak için ikinci bir 'text'
        ekleyin.\\\r\n\\\r\n_İpucu: Varsayılan yazı boyutu oldukça küçüktür, fakat
        yazı boyutunu değiştirmek için 'textSize' bloğunu kullanabilirsin. Ayrıca
        metnin rengini değiştirmek için 'fill' komutunu kullanabilirsin._"
      CSD U3 Sprites text_2019: "# Metin Ekleme\\\r\n\n\\\r\n`text` kullanarak ekranda
        istediğiniz herhangi bir yere metin ekleyebilirsiniz. Kodun içinde gösterilen
        metni değiştirin, sonra ekranın farklı bir yerine yazmak için ikinci bir 'text'
        ekleyin.\\\r\n\\\r\n_İpucu: Varsayılan yazı boyutu oldukça küçüktür, fakat
        yazı boyutunu değiştirmek için 'textSize' bloğunu kullanabilirsin. Ayrıca
        metnin rengini değiştirmek için 'fill' komutunu kullanabilirsin._"
      CSD U3 UP_ARROW: |-
        # Moving Sprites

        You can change your sprite's position based on key presses in the same way you changed its animations.

        # Do This

        You have been provided with the start of a bug sprite. You need to pick the bug picture you want to use from the animation tab.

        -   Set the animation of the sprite to your favorite bug.
        -   Add an if statement inside your draw loop.
        -   Add a call to keyDown as the input to the if statement to check if the up arrow was pressed.
        -   Add code inside the conditional to move the sprite up if the up arrow is down.

        _Do you need to change sprite's x or y property to move it up?_
      CSD U3 UP_ARROW_2018: |-
        # Moving Sprites

        You can change your sprite's position based on key presses in the same way you changed its animations.

        # Do This

        -   Add an `if` statement inside your draw loop.
        -   Check whether the right arrow key has been pressed down.
        -   Add code inside the conditional to move the sprite right if the right arrow is down.

        _Do you need to change sprite's x or y property to move it right?_
      CSD U3 UP_ARROW_2018_2019: |-
        # Moving Sprites

        You can change your sprite's position based on key presses in the same way you changed its animations.

        # Do This

        -   Add an `if` statement inside your draw loop.
        -   Check whether the right arrow key has been pressed down.
        -   Add code inside the conditional to move the sprite right if the right arrow is down.

        _Do you need to change sprite's x or y property to move it right?_
      CSD U3 Variables Challenge: "# Meydan Okuma: Değişkenleri Güncelleme\\\r\n\n\\\r\n_Bu
        meydan okuma ile  mücadele etmeden önce öğretmenin ile birlikte kontrol et._\\\r\n\\\r\nŞimdiye
        kadar bir değişkene bir defa değer atadık ama program çalışırken değişkeni
        güncelleyebileceğinizi biliyor musunuz? Size sunduğumuz örneği okuyun, nasıl
        işlediğini anlamak içim bir kaç defa çalıştırın, aşağıdaki resimlerden birini
        çizerek programı değiştirmek için girişimde bulunun.\\\r\n\\\r\n\\\r\n<img
        src=\"https://images.code.org/29f4d46d5aa041fb7d27aa2e3c77652e-image-1493161823337.png\"\nstyle=\"width:150px;
        border: 1px solid grey; margin:20px;\">\\\r\n<img src=\"https://images.code.org/629819fe91016ee1b8275c81e41770b5-image-1493161823334.png\"\nstyle=\"width:150px;
        border: 1px solid grey; margin:20px;\">\\\r\n<img src=\"https://images.code.org/acf7b8223b3a87594e20348306464de7-image-1493161823305.png\"\nstyle=\"width:150px;
        border: 1px solid grey; margin:20px;\">\\\r"
      CSD U3 Variables Challenge_2018: "# Meydan Okuma: Değişkenleri Güncelleme\\\r\n\n\\\r\n_Bu
        meydan okuma ile  mücadele etmeden önce öğretmenin ile birlikte kontrol et._\\\r\n\\\r\nŞimdiye
        kadar bir değişkene bir defa değer atadık ama program çalışırken değişkeni
        güncelleyebileceğinizi biliyor musunuz? Size sunduğumuz örneği okuyun, nasıl
        işlediğini anlamak içim bir kaç defa çalıştırın, aşağıdaki resimlerden birini
        çizerek programı değiştirmek için girişimde bulunun.\\\r\n\\\r\n\\\r\n<img
        src=\"https://images.code.org/29f4d46d5aa041fb7d27aa2e3c77652e-image-1493161823337.png\"\nstyle=\"width:150px;
        border: 1px solid grey; margin:20px;\">\\\r\n<img src=\"https://images.code.org/629819fe91016ee1b8275c81e41770b5-image-1493161823334.png\"\nstyle=\"width:150px;
        border: 1px solid grey; margin:20px;\">\\\r\n<img src=\"https://images.code.org/acf7b8223b3a87594e20348306464de7-image-1493161823305.png\"\nstyle=\"width:150px;
        border: 1px solid grey; margin:20px;\">\\\r"
      CSD U3 Variables Challenge_2019: "# Meydan Okuma: Değişkenleri Güncelleme\\\r\n\n\\\r\n_Bu
        meydan okuma ile  mücadele etmeden önce öğretmenin ile birlikte kontrol et._\\\r\n\\\r\nŞimdiye
        kadar bir değişkene bir defa değer atadık ama program çalışırken değişkeni
        güncelleyebileceğinizi biliyor musunuz? Size sunduğumuz örneği okuyun, nasıl
        işlediğini anlamak içim bir kaç defa çalıştırın, aşağıdaki resimlerden birini
        çizerek programı değiştirmek için girişimde bulunun.\\\r\n\\\r\n\\\r\n<img
        src=\"https://images.code.org/29f4d46d5aa041fb7d27aa2e3c77652e-image-1493161823337.png\"\nstyle=\"width:150px;
        border: 1px solid grey; margin:20px;\">\\\r\n<img src=\"https://images.code.org/629819fe91016ee1b8275c81e41770b5-image-1493161823334.png\"\nstyle=\"width:150px;
        border: 1px solid grey; margin:20px;\">\\\r\n<img src=\"https://images.code.org/acf7b8223b3a87594e20348306464de7-image-1493161823305.png\"\nstyle=\"width:150px;
        border: 1px solid grey; margin:20px;\">\\\r"
      CSD U3 Variables Draw Challenge: "# Meydan Okuma: Bir Resim Çiz\\\r\n\n\\\r\n_Bu
        meydan okuma ile mücadele etmeden önce öğretmenin ile birlikte kontrol et._\\\r\n\\\r\nDeğişken
        kullanma, büyüklük ya da konum için bir çok ögesi genel değişkene bağlı bir
        resim çizin. \nÖrneğin değişkenlerin gözleri, kulakları ve burun deliği büyüklüğünü
        veya konumunu kontrol ettiği bir yüz çizin. Çiziminiz tamamlandığında, değişkenlerin
        değerini değiştirerek bütün resmin birlikte değiştiğinden emin olun.\\\r"
      CSD U3 Variables Draw Challenge_2018: "# Meydan Okuma: Bir Resim Çiz\\\r\n\n\\\r\n_Bu
        meydan okuma ile mücadele etmeden önce öğretmenin ile birlikte kontrol et._\\\r\n\\\r\nDeğişken
        kullanma, büyüklük ya da konum için bir çok ögesi genel değişkene bağlı bir
        resim çizin. \nÖrneğin değişkenlerin gözleri, kulakları ve burun deliği büyüklüğünü
        veya konumunu kontrol ettiği bir yüz çizin. Çiziminiz tamamlandığında, değişkenlerin
        değerini değiştirerek bütün resmin birlikte değiştiğinden emin olun.\\\r"
      CSD U3 Variables Draw Challenge_2019: "# Meydan Okuma: Bir Resim Çiz\\\r\n\n\\\r\n_Bu
        meydan okuma ile mücadele etmeden önce öğretmenin ile birlikte kontrol et._\\\r\n\\\r\nDeğişken
        kullanma, büyüklük ya da konum için bir çok ögesi genel değişkene bağlı bir
        resim çizin. \nÖrneğin değişkenlerin gözleri, kulakları ve burun deliği büyüklüğünü
        veya konumunu kontrol ettiği bir yüz çizin. Çiziminiz tamamlandığında, değişkenlerin
        değerini değiştirerek bütün resmin birlikte değiştiğinden emin olun.\\\r"
      CSD U3 Variables Draw Poppy: "# Bir Değişkeni Birçok Kez Kullanmak\\\r\\\r\n\n\\\r\nBu
        programda 'petalSize' olarak adlandırılan sadece bir değişken vardır fakat
        bu değişken 8 kez kullanılır. Bu, çizilen resimlerinizde birçok değişikliği
        hızlıca yapmayı kolaylaştırır.\\\r\n\\\r\n\n# Bunları Yapın\\\r\n\n\\\r\n\n-
        \  'petalSize' değişkenine atanan sayıyı değiştirin böylece kırmızı yapraklar
        bir başkasına temas eder.\\\r\n-   En mantıklı boyutu bulmayı deneyin. Cevabınızı
        etrafınızdaki birinin cevabıyla karşılaştırın."
      CSD U3 Variables Draw Poppy_2018: "# Bir Değişkeni Birçok Kez Kullanmak\\\r\\\r\n\n\\\r\nBu
        programda 'petalSize' olarak adlandırılan sadece bir değişken vardır fakat
        bu değişken 8 kez kullanılır. Bu, çizilen resimlerinizde birçok değişikliği
        hızlıca yapmayı kolaylaştırır.\\\r\n\\\r\n\n# Bunları Yapın\\\r\n\n\\\r\n\n-
        \  'petalSize' değişkenine atanan sayıyı değiştirin böylece kırmızı yapraklar
        bir başkasına temas eder.\\\r\n-   En mantıklı boyutu bulmayı deneyin. Cevabınızı
        etrafınızdaki birinin cevabıyla karşılaştırın."
      CSD U3 Variables Draw Poppy_2019: "# Bir Değişkeni Birçok Kez Kullanmak\\\r\\\r\n\n\\\r\nBu
        programda 'petalSize' olarak adlandırılan sadece bir değişken vardır fakat
        bu değişken 8 kez kullanılır. Bu, çizilen resimlerinizde birçok değişikliği
        hızlıca yapmayı kolaylaştırır.\\\r\n\\\r\n\n# Bunları Yapın\\\r\n\n\\\r\n\n-
        \  'petalSize' değişkenine atanan sayıyı değiştirin böylece kırmızı yapraklar
        bir başkasına temas eder.\\\r\n-   En mantıklı boyutu bulmayı deneyin. Cevabınızı
        etrafınızdaki birinin cevabıyla karşılaştırın."
      CSD U3 Variables Predict Where X: "# Değişkenleri Kullanma\\\r\n\n\\\r\nBu programdaki
        'xPosition' değişkeni, dairenin x koordinatını saklamak almak için kullanılır.\\\r\n\\\r\n\n#
        Bunu Yapın\\\r\n\n-   Nasıl çalıştığını görmek için programı çalıştırın.\\\r\n-
        \  \\*\n    Değişkende saklanan sayıyı değiştirin ([Nerede olduğunu göster](#triggercallout=code_triggered))\n
        \   ve kodu tekrar çalıştırın."
      CSD U3 Variables Predict Where XY Embed: |-
        # Predict

        In which corner of the screen will the circle be drawn?

        _Hint: Click the "Show grid" box to help you find the exact coordinates on the screen._
      CSD U3 Variables Predict Where XY Embed_2018: |-
        # Predict

        In which corner of the screen will the circle be drawn?

        _Hint: Click the "Show grid" box to help you find the exact coordinates on the screen._
      CSD U3 Variables Predict Where XY Embed_2019: |-
        # Predict

        In which corner of the screen will the circle be drawn?

        _Hint: Click the "Show grid" box to help you find the exact coordinates on the screen._
      CSD U3 Variables Predict Where X_2018: "# Değişkenleri Kullanma\\\r\n\n\\\r\nBu
        programdaki 'xPosition' değişkeni, dairenin x koordinatını saklamak almak
        için kullanılır.\\\r\n\\\r\n\n# Bunu Yapın\\\r\n\n-   Nasıl çalıştığını görmek
        için programı çalıştırın.\\\r\n-   \\*\n    Değişkende saklanan sayıyı değiştirin
        ([Nerede olduğunu göster](#triggercallout=code_triggered))\n    ve kodu tekrar
        çalıştırın."
      CSD U3 Variables Predict Where X_2019: "# Değişkenleri Kullanma\\\r\n\n\\\r\nBu
        programdaki 'xPosition' değişkeni, dairenin x koordinatını saklamak almak
        için kullanılır.\\\r\n\\\r\n\n# Bunu Yapın\\\r\n\n-   Nasıl çalıştığını görmek
        için programı çalıştırın.\\\r\n-   \\*\n    Değişkende saklanan sayıyı değiştirin
        ([Nerede olduğunu göster](#triggercallout=code_triggered))\n    ve kodu tekrar
        çalıştırın."
      CSD U3 Variables change circle size: "<img src=\"https://images.code.org/acc7f5763a9ca1c17647f7dd9711c9f5-image-1490977696189.28.01\nAM.png\"
        style=\"float:right; height:150px\">\\\r\n\\\r\n\n# Hata Ayıklama: Değişkenleri
        Kullanma\\\r\n\n\\\r\nBu program, dairenin yüksekliğini ve genişliğini kontrol
        etmek için 'circleSize' değişkenini kullanır.  Eğer daireyi yeterince büyük
        yaparsanız, daire tüm ekranı kaplayacak, sağdaki resimde olduğu gibi.\\\r\n\\\r\n\n#
        Bunları Yapın\\\r\n\n\\\r\n\\*`circleSize` değişkenine atanan değeri değiştirin,
        böylece daire tüm ekranı kaplar."
      CSD U3 Variables change circle size_2018: "<img src=\"https://images.code.org/acc7f5763a9ca1c17647f7dd9711c9f5-image-1490977696189.28.01\nAM.png\"
        style=\"float:right; height:150px\">\\\r\n\\\r\n\n# Hata Ayıklama: Değişkenleri
        Kullanma\\\r\n\n\\\r\nBu program, dairenin yüksekliğini ve genişliğini kontrol
        etmek için 'circleSize' değişkenini kullanır.  Eğer daireyi yeterince büyük
        yaparsanız, daire tüm ekranı kaplayacak, sağdaki resimde olduğu gibi.\\\r\n\\\r\n\n#
        Bunları Yapın\\\r\n\n\\\r\n\\*`circleSize` değişkenine atanan değeri değiştirin,
        böylece daire tüm ekranı kaplar."
      CSD U3 Variables change circle size_2019: "<img src=\"https://images.code.org/acc7f5763a9ca1c17647f7dd9711c9f5-image-1490977696189.28.01\nAM.png\"
        style=\"float:right; height:150px\">\\\r\n\\\r\n\n# Hata Ayıklama: Değişkenleri
        Kullanma\\\r\n\n\\\r\nBu program, dairenin yüksekliğini ve genişliğini kontrol
        etmek için 'circleSize' değişkenini kullanır.  Eğer daireyi yeterince büyük
        yaparsanız, daire tüm ekranı kaplayacak, sağdaki resimde olduğu gibi.\\\r\n\\\r\n\n#
        Bunları Yapın\\\r\n\n\\\r\n\\*`circleSize` değişkenine atanan değeri değiştirin,
        böylece daire tüm ekranı kaplar."
      CSD U3 Variables naming rules v2: "<img style=\"float:\nright\" src=\"https://images.code.org/f4b306422763c84bb924f4f7d3a6dca6-image-1492798058864.06.38\nAM.png\">\\\r\n\n#
        Hata Ayıklama: Değişkenleri İsimlendirme\\\r\n\n\\\r\nBu programda kötü etiket
        isimlerinden dolayı birçok hata var. Hatalar programın blok modunda görüntülenmesini
        engeller, bu yüzden kod metin şeklindedir.\\\r\n\\\r\n\n# Bunları Yapın\\\r\n\n\\\r\n\n-
        \  Her değişken etiketinin ihlal ettiği kuralı bulun.\\\r\n-   **Son seviyede
        öğrendiğiniz kurallara uyarak yeni isimler seçerek hataları düzeltin.**\\\r\n-
        \  Eğer program çalışırsa, sağdaki resim çizilmeli.\\\r\n    \\\r\n    <summary><em>İpucu:\n
        \   Hızlıca kuralları gözden geçirmek için oka tıklayın.</em><details><ul>\r\n
        \   <li>Etiketlerde boşluk bulunamaz.</li>\r\n    <li>Etiketler bir sayı ile
        başlamamalı</li>\r\n    <li>Büyük harf ve imla tam olarak aynı olmalı.</li>\r\n
        \   </ul></details></summary>"
      CSD U3 Variables naming rules v2_2018: "<img style=\"float:\nright\" src=\"https://images.code.org/f4b306422763c84bb924f4f7d3a6dca6-image-1492798058864.06.38\nAM.png\">\\\r\n\n#
        Hata Ayıklama: Değişkenleri İsimlendirme\\\r\n\n\\\r\nBu programda kötü etiket
        isimlerinden dolayı birçok hata var. Hatalar programın blok modunda görüntülenmesini
        engeller, bu yüzden kod metin şeklindedir.\\\r\n\\\r\n\n# Bunları Yapın\\\r\n\n\\\r\n\n-
        \  Her değişken etiketinin ihlal ettiği kuralı bulun.\\\r\n-   **Son seviyede
        öğrendiğiniz kurallara uyarak yeni isimler seçerek hataları düzeltin.**\\\r\n-
        \  Eğer program çalışırsa, sağdaki resim çizilmeli.\\\r\n    \\\r\n    <summary><em>İpucu:\n
        \   Hızlıca kuralları gözden geçirmek için oka tıklayın.</em><details><ul>\r\n
        \   <li>Etiketlerde boşluk bulunamaz.</li>\r\n    <li>Etiketler bir sayı ile
        başlamamalı</li>\r\n    <li>Büyük harf ve imla tam olarak aynı olmalı.</li>\r\n
        \   </ul></details></summary>"
      CSD U3 Variables naming rules v2_2018_2019: |-
        <img style="float: right" src="https://images.code.org/f4b306422763c84bb924f4f7d3a6dca6-image-1492798058864.06.38 AM.png">

        # Debug: Naming Variables

        This program has multiple errors caused by bad label names.  The errors prevent the program from being viewed in block mode, so the code is in text.

        # Do This

        -   Try to figure out what problems with the variable names are causing the errors.
        -   **Correct the errors by picking new names.**
        -   If your program works it should draw the image on the right.

        <summary><em>Hint: Click the arrow to see a few rules.</em><details><ul>
        <li>Labels can't have spaces.</li>
        <li>Labels can't start with a number.</li>
        <li>Capitalization and spelling must be exactly the same.</li>
        </ul></details></summary>
      CSD U3 Variables random with assignment: "<img src=\"https://images.code.org/ba9592e887f52c1a538a0517560cdacf-image-1493913633878.gif\"\nstyle=\"float:right;height:150px\">\\\r\n\\\r\n\n#
        Hata Ayıklama: Değişkenler ve Rastgele Sayılar\\\r\n\n\\\r\nDeğişkenlere rastgele
        sayılar da atanabilir. Bu tek bir rastgele değeri kaydetmenizi sağlar böylece
        bunu programınızda istediğiniz kadar kullanabilirsiniz. \n\\\r\n\n# \n\nBunları
        Yapın\\\r\n\\\r\n`eyeSize` değişkenine rastgele bir sayı atandı. Ne yazık
        ki gözlerden sadece biri şu anda onu kullanıyor.\\\r\n\\\r\n\n-   Nasıl çalıştığını
        görmek için **programı çalıştırın**.\\\r\n-   **Programı değiştirin** böylece
        gözlerin ikisi de sürekli aynı rastgele büyüklükte olacak. İpucu: Kodlardan
        sadece bir satırı değiştirmeniz gerekecek."
      CSD U3 Variables random with assignment_2018: "<img src=\"https://images.code.org/ba9592e887f52c1a538a0517560cdacf-image-1493913633878.gif\"\nstyle=\"float:right;height:150px\">\\\r\n\\\r\n\n#
        Hata Ayıklama: Değişkenler ve Rastgele Sayılar\\\r\n\n\\\r\nDeğişkenlere rastgele
        sayılar da atanabilir. Bu tek bir rastgele değeri kaydetmenizi sağlar böylece
        bunu programınızda istediğiniz kadar kullanabilirsiniz. \n\\\r\n\n# \n\nBunları
        Yapın\\\r\n\\\r\n`eyeSize` değişkenine rastgele bir sayı atandı. Ne yazık
        ki gözlerden sadece biri şu anda onu kullanıyor.\\\r\n\\\r\n\n-   Nasıl çalıştığını
        görmek için **programı çalıştırın**.\\\r\n-   **Programı değiştirin** böylece
        gözlerin ikisi de sürekli aynı rastgele büyüklükte olacak. İpucu: Kodlardan
        sadece bir satırı değiştirmeniz gerekecek."
      CSD U3 Variables random with assignment_2019: "<img src=\"https://images.code.org/ba9592e887f52c1a538a0517560cdacf-image-1493913633878.gif\"\nstyle=\"float:right;height:150px\">\\\r\n\\\r\n\n#
        Hata Ayıklama: Değişkenler ve Rastgele Sayılar\\\r\n\n\\\r\nDeğişkenlere rastgele
        sayılar da atanabilir. Bu tek bir rastgele değeri kaydetmenizi sağlar böylece
        bunu programınızda istediğiniz kadar kullanabilirsiniz. \n\\\r\n\n# \n\nBunları
        Yapın\\\r\n\\\r\n`eyeSize` değişkenine rastgele bir sayı atandı. Ne yazık
        ki gözlerden sadece biri şu anda onu kullanıyor.\\\r\n\\\r\n\n-   Nasıl çalıştığını
        görmek için **programı çalıştırın**.\\\r\n-   **Programı değiştirin** böylece
        gözlerin ikisi de sürekli aynı rastgele büyüklükte olacak. İpucu: Kodlardan
        sadece bir satırı değiştirmeniz gerekecek."
      CSD U3 Watcher Debug: "<img src=\"https://images.code.org/20cc981b4b4f99b2ff96415e19af7600-image-1492034149715.gif\"\nstyle=\"float:
        right; margin-left: 20px;\">\\\r\n\\\r\n\n# Hata Ayıklama: Sayaç İzleme Kalıbı\\\r\n\n\\\r\nKodunuzdaki
        hataları ayıklarken izleyici kullanmanın alıştırmasını yapalım. Bu program
        sağdaki resimdeki gibi motosikleti sol alttan sağ üste taşımalıdır. Maalesef
        motosiklet neyin yanlış gittiğini göremeden ekrandan kayboluyor.\\\r\n\\\r\nSize
        sağlanan izleyiciyi 'cycly.x' ve 'cycle.y' için kullanarak hangisinin yanlış
        yönde gittiğini bul ve programı düzelt."
      CSD U3 Watcher Debug_2018: "<img src=\"https://images.code.org/20cc981b4b4f99b2ff96415e19af7600-image-1492034149715.gif\"\nstyle=\"float:
        right; margin-left: 20px;\">\\\r\n\\\r\n\n# Hata Ayıklama: Sayaç İzleme Kalıbı\\\r\n\n\\\r\nKodunuzdaki
        hataları ayıklarken izleyici kullanmanın alıştırmasını yapalım. Bu program
        sağdaki resimdeki gibi motosikleti sol alttan sağ üste taşımalıdır. Maalesef
        motosiklet neyin yanlış gittiğini göremeden ekrandan kayboluyor.\\\r\n\\\r\nSize
        sağlanan izleyiciyi 'cycly.x' ve 'cycle.y' için kullanarak hangisinin yanlış
        yönde gittiğini bul ve programı düzelt."
      CSD U3 Watcher Debug_2019: "<img src=\"https://images.code.org/20cc981b4b4f99b2ff96415e19af7600-image-1492034149715.gif\"\nstyle=\"float:
        right; margin-left: 20px;\">\\\r\n\\\r\n\n# Hata Ayıklama: Sayaç İzleme Kalıbı\\\r\n\n\\\r\nKodunuzdaki
        hataları ayıklarken izleyici kullanmanın alıştırmasını yapalım. Bu program
        sağdaki resimdeki gibi motosikleti sol alttan sağ üste taşımalıdır. Maalesef
        motosiklet neyin yanlış gittiğini göremeden ekrandan kayboluyor.\\\r\n\\\r\nSize
        sağlanan izleyiciyi 'cycly.x' ve 'cycle.y' için kullanarak hangisinin yanlış
        yönde gittiğini bul ve programı düzelt."
      CSD U3 Watcher Predict response: |-
        # Watching the Counter Pattern

        Watchers are a really useful tool for debugging programs that use the counter pattern.

        -   **Read the program** and predict what the program will do.
        -   **Run the program** to check your prediction.
        -   **Look at the watchers** and explain to a neighbor what you are seeing.
      CSD U3 Watcher Predict response_2018: |-
        # Watching the Counter Pattern

        Watchers are a really useful tool for debugging programs that use the counter pattern.

        -   **Read the program** and predict what the program will do.
        -   **Run the program** to check your prediction.
        -   **Look at the watchers** and explain to a neighbor what you are seeing.
      CSD U3 Watcher Predict response_2019: |-
        # Watching the Counter Pattern

        Watchers are a really useful tool for debugging programs that use the counter pattern.

        -   **Read the program** and predict what the program will do.
        -   **Run the program** to check your prediction.
        -   **Look at the watchers** and explain to a neighbor what you are seeing.
      CSD U3 abstraction accelerateX: |-
        # Velocity and the Counter Pattern

        As you just saw, using a `sprite.velocityX` property with the counter pattern will change a sprite's velocity during the program. This makes the sprite speed up. Do a little practice using this pattern yourself.

        # Do This

        This program already makes a car move across the screen, but it's going very slowly.

        -   Use the counter pattern with the sprite's velocityX property to make the car speed up. ( [Show me where](#triggercallout=code_triggered) )
      CSD U3 abstraction accelerateX_2018: |-
        # Velocity and the Counter Pattern

        As you just saw, using a `sprite.velocityX` property with the counter pattern will change a sprite's velocity during the program. This makes the sprite speed up. Do a little practice using this pattern yourself.

        # Do This

        This program already makes a car move across the screen, but it's going very slowly.

        -   Use the counter pattern with the sprite's velocityX property to make the car speed up. ( [Show me where](#triggercallout=code_triggered) )
      CSD U3 abstraction accelerateX_2019: |-
        # Velocity and the Counter Pattern

        As you just saw, using a `sprite.velocityX` property with the counter pattern will change a sprite's velocity during the program. This makes the sprite speed up. Do a little practice using this pattern yourself.

        # Do This

        This program already makes a car move across the screen, but it's going very slowly.

        -   Use the counter pattern with the sprite's velocityX property to make the car speed up. ( [Show me where](#triggercallout=code_triggered) )
      CSD U3 abstraction accelerateY: |-
        # Falling Rock

        The rock should speed up as it falls down the screen.  Can you use the same counter pattern with `velocityY` inside the draw loop to make the rock go faster and faster as it falls?

        # Do This

        -   Use the counter pattern with the sprite's y velocity to make the rock speed up as it falls.  ( [Show me where](#triggercallout=code_triggered) )

        _Challenge: Can you make the rock spin as it falls?_
      CSD U3 abstraction accelerateY up: |-
        # Rising Bubble

        This program makes a bubble rise up the water. Can you make it get faster as it rises?

        # Do This

        -   Use the counter pattern and the sprite's y velocity to make the bubble move up more quickly.
      CSD U3 abstraction accelerateY up_2018: |-
        # Rising Bubble

        This program makes a bubble rise up the water. Can you make it get faster as it rises?

        # Do This

        -   Use the counter pattern and the sprite's y velocity to make the bubble move up more quickly.
      CSD U3 abstraction accelerateY up_2019: |-
        # Rising Bubble

        This program makes a bubble rise up the water. Can you make it get faster as it rises?

        # Do This

        -   Use the counter pattern and the sprite's y velocity to make the bubble move up more quickly.
      CSD U3 abstraction accelerateY_2018: |-
        # Falling Rock

        The rock should speed up as it falls down the screen.  Can you use the same counter pattern with `velocityY` inside the draw loop to make the rock go faster and faster as it falls?

        # Do This

        -   Use the counter pattern with the sprite's y velocity to make the rock speed up as it falls.  ( [Show me where](#triggercallout=code_triggered) )

        _Challenge: Can you make the rock spin as it falls?_
      CSD U3 abstraction accelerateY_2019: |-
        # Falling Rock

        The rock should speed up as it falls down the screen.  Can you use the same counter pattern with `velocityY` inside the draw loop to make the rock go faster and faster as it falls?

        # Do This

        -   Use the counter pattern with the sprite's y velocity to make the rock speed up as it falls.  ( [Show me where](#triggercallout=code_triggered) )

        _Challenge: Can you make the rock spin as it falls?_
      CSD U3 abstraction add coin: |-
        # Add a Coin

        In the next few levels you'll add to your program to make a simple game. In this game the player will collect points to increase the score. This is a good chance to see how different kinds of movement can affect the way a game feels, and it will also just help you practice programming skills.

        # Do This

        In this level you'll just be adding a new coin sprite to the game. You should be working at the top of your program, outside the draw loop.

        -   Use the `createSprite()` block to create a new sprite. Make sure to give it a descriptive name such as **coin**.
        -   Use the `sprite.x` and `sprite.y` properties of the sprite to give it a random X and Y position between 0 and 400.
        -   In the Animation Tab there is already a coin animation. Use the `sprite.setAnimation()` block to give your sprite this animation.

        Test your code before moving on. When you run the game, you should see a coin sprite appear somewhere randomly on the screen.
      CSD U3 abstraction add coin_2018: |-
        # Add a Coin

        In the next few levels you'll add to your program to make a simple game. In this game the player will collect points to increase the score. This is a good chance to see how different kinds of movement can affect the way a game feels, and it will also just help you practice programming skills.

        # Do This

        In this level you'll just be adding a new coin sprite to the game. You should be working at the top of your program, outside the draw loop.

        -   Use the `createSprite()` block to create a new sprite. Make sure to give it a descriptive name such as **coin**.
        -   Use the `sprite.x` and `sprite.y` properties of the sprite to give it a random X and Y position between 0 and 400.
        -   In the Animation Tab there is already a coin animation. Use the `sprite.setAnimation()` block to give your sprite this animation.

        Test your code before moving on. When you run the game, you should see a coin sprite appear somewhere randomly on the screen.
      CSD U3 abstraction add coin_2019: |-
        # Add a Coin

        In the next few levels you'll add to your program to make a simple game. In this game the player will collect points to increase the score. This is a good chance to see how different kinds of movement can affect the way a game feels, and it will also just help you practice programming skills.

        # Do This

        In this level you'll just be adding a new coin sprite to the game. You should be working at the top of your program, outside the draw loop.

        -   Use the `createSprite()` block to create a new sprite. Make sure to give it a descriptive name such as **coin**.
        -   Use the `sprite.x` and `sprite.y` properties of the sprite to give it a random X and Y position between 0 and 400.
        -   In the Animation Tab there is already a coin animation. Use the `sprite.setAnimation()` block to give your sprite this animation.

        Test your code before moving on. When you run the game, you should see a coin sprite appear somewhere randomly on the screen.
      CSD U3 abstraction decelerateX: "# Slowing Things Down\n\nNow that you've had
        some practice speeding things up, can you use the counter pattern to slow
        sprites down? \n\n# Do This\n\nThe car is going to run into the water! You'll
        need to use the counter pattern to slow it down.\n\n-   Use the `sprite.velocityX`
        block with a counter pattern to slow the car down by 0.25 as it moves across
        the screen.  \n-   Discuss with your Partner: What do you think will happen
        when the car finally stops?\n\n_Challenge: Add code that makes the car slow
        down only if his velocityX is greater than 0._"
      CSD U3 abstraction decelerateX_2018: "# Slowing Things Down\n\nNow that you've
        had some practice speeding things up, can you use the counter pattern to slow
        sprites down? \n\n# Do This\n\nThe car is going to run into the water! You'll
        need to use the counter pattern to slow it down.\n\n-   Use the `sprite.velocityX`
        block with a counter pattern to slow the car down by 0.25 as it moves across
        the screen.  \n-   Discuss with your Partner: What do you think will happen
        when the car finally stops?\n\n_Challenge: Add code that makes the car slow
        down only if its velocityX is greater than 0._"
      CSD U3 abstraction decelerateX_2019: "# Slowing Things Down\n\nNow that you've
        had some practice speeding things up, can you use the counter pattern to slow
        sprites down? \n\n# Do This\n\nThe car is going to run into the water! You'll
        need to use the counter pattern to slow it down.\n\n-   Use the `sprite.velocityX`
        block with a counter pattern to slow the car down by 0.25 as it moves across
        the screen.  \n-   Discuss with your Partner: What do you think will happen
        when the car finally stops?\n\n_Challenge: Add code that makes the car slow
        down only if its velocityX is greater than 0._"
      CSD U3 abstraction decelerateY: |-
        # Simulating Gravity

        In the last level you slowed down the car with the `sprite.velocityX` block and the counter pattern. It almost looked like the car was getting pulled to the left.

        If you use this same pattern with the `sprite.velocityY` block it will look like your sprite is always being pulled down, which is exactly what gravity does!

        # Do This

        The rock is thrown in the air but it never falls back down.

        -   Use the `sprite.velocityY` block with the counter pattern to make the rock slow down and then fall in the other direction.
        -   Experiment with different values in your counter pattern. Do you want the rock to slow down quickly or gradually? What looks most realistic to you?
        -   Discuss with your partner: Why are you setting the rock's initial velocity outside the draw loop? Why are you changing the sprite's velocity inside the draw loop?
      CSD U3 abstraction decelerateY_2018: |-
        # Simulating Gravity

        In the last level you slowed down the car with the `sprite.velocityX` block and the counter pattern. It almost looked like the car was getting pulled to the left.

        If you use this same pattern with the `sprite.velocityY` block it will look like your sprite is always being pulled down, which is exactly what gravity does!

        # Do This

        The rock is thrown in the air but it never falls back down.

        -   Use the `sprite.velocityY` block with the counter pattern to make the rock slow down and then fall in the other direction.
        -   Experiment with different values in your counter pattern. Do you want the rock to slow down quickly or gradually? What looks most realistic to you?
        -   Discuss with your partner: Why are you setting the rock's initial velocity outside the draw loop? Why are you changing the sprite's velocity inside the draw loop?
      CSD U3 abstraction decelerateY_2019: |-
        # Simulating Gravity

        In the last level you slowed down the car with the `sprite.velocityX` block and the counter pattern. It almost looked like the car was getting pulled to the left.

        If you use this same pattern with the `sprite.velocityY` block it will look like your sprite is always being pulled down, which is exactly what gravity does!

        # Do This

        The rock is thrown in the air but it never falls back down.

        -   Use the `sprite.velocityY` block with the counter pattern to make the rock slow down and then fall in the other direction.
        -   Experiment with different values in your counter pattern. Do you want the rock to slow down quickly or gradually? What looks most realistic to you?
        -   Discuss with your partner: Why are you setting the rock's initial velocity outside the draw loop? Why are you changing the sprite's velocity inside the draw loop?
      CSD U3 abstraction jump: |-
        # Jumping

        You now have all the blocks you need to make your sprite jump!

        Just as you checked whether your fish was at the left edge, you'll need to check whether the frog is on the ground.  If it is, it could either jump up or stay still, so you'll need one more `if` block to check whether the user has pressed the up arrow ( [Show me where](#triggercallout=code_triggered1) ).

        You'll also need to check whether the frog has reached its highest point, and send it back down if it has.

        # Do this

        -   Find the `if` statement that checks whether the sprite is on the ground, and look at the `if` statement inside of it that checks whether the user has pressed the "up" arrow key. ( [Show me where](#triggercallout=code_triggered1) )
            -   Use the `velocityY` block to make the frog jump up when the user presses the arrow key.
            -   Use the `velocityY` block to make the frog stop moving otherwise.
        -   Add an if statement that does the following  ( [Show me where](#triggercallout=code_triggered2) )
            -   Checks whether the frog sprite has reached its highest point.
            -   If so, use the `velocityY` block to make the sprite fall back down.
      CSD U3 abstraction jump_2018: |-
        # Jumping

        You now have all the blocks you need to make your sprite jump!  The sprite should jump up if it's on the ground and the user presses the "up" key, then should start moving back down when it reaches the top of its jump.

        # Do this

        -   Find the `if` statement that checks whether the sprite is on the ground, and look at the `if` statement inside of it that checks whether the user has pressed the "up" arrow key. ( [Show me where](#triggercallout=code_triggered1) )
            -   Make the frog jump up when the user presses the arrow key.
            -   Make the frog stop moving otherwise.
        -   Add code that does the following  ( [Show me where](#triggercallout=code_triggered2) )
            -   Checks whether the frog sprite has reached its highest point.
            -   If so, make the sprite go back down.
      CSD U3 abstraction jump_2018_2019: |-
        # Jumping

        You now have all the blocks you need to make your sprite jump!  The sprite should jump up if it's on the ground and the user presses the "up" key, then should start moving back down when it reaches the top of its jump.

        # Do this

        -   Find the `if` statement that checks whether the sprite is on the ground, and look at the `if` statement inside of it that checks whether the user has pressed the "up" arrow key. ( [Show me where](#triggercallout=code_triggered1) )
            -   Make the frog jump up when the user presses the arrow key.
            -   Make the frog stop moving otherwise.
        -   Add code that does the following  ( [Show me where](#triggercallout=code_triggered2) )
            -   Checks whether the frog sprite has reached its highest point.
            -   If so, make the sprite go back down.
      CSD U3 abstraction jumping: |-
        # Jumping

        Increasing a sprite's y velocity inside the counter pattern can simulate gravity. By adding user interactions you can make your sprite appear to jump as well. For starters you'll make a simple jump, and then make it more realistic looking in the next level.

        # Do This

        A sprite has already been created for you that falls because its y velocity is increased inside the draw loop. You'll need to make this sprite appear to jump.

        -   Inside the `if` block that checks whether the up arrow has been pressed, set the sprite's y velocity to -5. ( [Show me where](#triggercallout=callout1) )
        -   Discuss with a neighbor: Why does this code run the way it does? How would using a number besides -5 affect the way the code works? How could you jump higher or lower?
      CSD U3 abstraction jumping_2018: |-
        # Jumping

        Increasing a sprite's y velocity inside the counter pattern can simulate gravity. By adding user interactions you can make your sprite appear to jump as well. For starters you'll make a simple jump, and then make it more realistic looking in the next level.

        # Do This

        A sprite has already been created for you that falls because its y velocity is increased inside the draw loop. You'll need to make this sprite appear to jump.

        -   Inside the `if` block that checks whether the up arrow has been pressed, set the sprite's y velocity to -5. ( [Show me where](#triggercallout=callout1) )
        -   Discuss with a neighbor: Why does this code run the way it does? How would using a number besides -5 affect the way the code works? How could you jump higher or lower?
      CSD U3 abstraction jumping_2019: |-
        # Jumping

        Increasing a sprite's y velocity inside the counter pattern can simulate gravity. By adding user interactions you can make your sprite appear to jump as well. For starters you'll make a simple jump, and then make it more realistic looking in the next level.

        # Do This

        A sprite has already been created for you that falls because its y velocity is increased inside the draw loop. You'll need to make this sprite appear to jump.

        -   Inside the `if` block that checks whether the up arrow has been pressed, set the sprite's y velocity to -5. ( [Show me where](#triggercallout=callout1) )
        -   Discuss with a neighbor: Why does this code run the way it does? How would using a number besides -5 affect the way the code works? How could you jump higher or lower?
      CSD U3 abstraction left right counter: |-
        # Floating Right

        You're now using the counter pattern with the sprite's Y velocity to simulate gravity and jumping. If you use the sprite's X velocity in the counter pattern then you can make your sprite float from side to side as well.

        # Do This

        In this level you'll make your sprite start floating to the right when the right arrow is pressed.

        -   Add an `if` statement inside your draw loop below the one you created for the "up" arrow.
        -   Use the `keyDown` block to make the `if` statement respond to when the "right" arrow is pressed.
        -   Inside the `if` block use the counter pattern with the `sprite.velocityX` block to add 0.1 to the sprite's X velocity.

        Run your code to see how it works. The sprite should start floating to the right when you press the right arrow and jump when you press "up". You'll make the left arrow work in the next level.
      CSD U3 abstraction left right counter 2: |-
        # Floating Left

        In the last level you got detailed instructions on how to make your sprite start floating to the right. This time you'll need to make your sprite float to the left on your own. You should be pretty comfortable with using velocity and the counter pattern together at this point. If you're having trouble, talk to a neighbor or review some of the past levels.

        # Do This

        -   Add code to your draw loop that will make the sprite start moving to the left when the "left" arrow is down.
        -   Make sure you're using velocity and the counter pattern together.

        Once your code is working share what you wrote with a partner. Is your sprite easy to control? Does changing the amount you add or subtract in the counter patterns you wrote affect the way the game feels? What kind of game might be fun to make with a player that moves like this?
      CSD U3 abstraction left right counter 2_2018: |-
        # Floating Left

        In the last level you got detailed instructions on how to make your sprite start floating to the right. This time you'll need to make your sprite float to the left on your own. You should be pretty comfortable with using velocity and the counter pattern together at this point. If you're having trouble, talk to a neighbor or review some of the past levels.

        # Do This

        -   Add code to your draw loop that will make the sprite start moving to the left when the "left" arrow is down.
        -   Make sure you're using velocity and the counter pattern together.

        Once your code is working share what you wrote with a partner. Is your sprite easy to control? Does changing the amount you add or subtract in the counter patterns you wrote affect the way the game feels? What kind of game might be fun to make with a player that moves like this?
      CSD U3 abstraction left right counter 2_2019: |-
        # Floating Left

        In the last level you got detailed instructions on how to make your sprite start floating to the right. This time you'll need to make your sprite float to the left on your own. You should be pretty comfortable with using velocity and the counter pattern together at this point. If you're having trouble, talk to a neighbor or review some of the past levels.

        # Do This

        -   Add code to your draw loop that will make the sprite start moving to the left when the "left" arrow is down.
        -   Make sure you're using velocity and the counter pattern together.

        Once your code is working share what you wrote with a partner. Is your sprite easy to control? Does changing the amount you add or subtract in the counter patterns you wrote affect the way the game feels? What kind of game might be fun to make with a player that moves like this?
      CSD U3 abstraction left right counter_2018: |-
        # Floating Right

        You're now using the counter pattern with the sprite's Y velocity to simulate gravity and jumping. If you use the sprite's X velocity in the counter pattern then you can make your sprite float from side to side as well.

        # Do This

        In this level you'll make your sprite start floating to the right when the right arrow is pressed.

        -   Add an `if` statement inside your draw loop below the one you created for the "up" arrow.
        -   Use the `keyDown` block to make the `if` statement respond to when the "right" arrow is pressed.
        -   Inside the `if` block use the counter pattern with the `sprite.velocityX` block to add 0.1 to the sprite's X velocity.

        Run your code to see how it works. The sprite should start floating to the right when you press the right arrow and jump when you press "up". You'll make the left arrow work in the next level.
      CSD U3 abstraction left right counter_2019: |-
        # Floating Right

        You're now using the counter pattern with the sprite's Y velocity to simulate gravity and jumping. If you use the sprite's X velocity in the counter pattern then you can make your sprite float from side to side as well.

        # Do This

        In this level you'll make your sprite start floating to the right when the right arrow is pressed.

        -   Add an `if` statement inside your draw loop below the one you created for the "up" arrow.
        -   Use the `keyDown` block to make the `if` statement respond to when the "right" arrow is pressed.
        -   Inside the `if` block use the counter pattern with the `sprite.velocityX` block to add 0.1 to the sprite's X velocity.

        Run your code to see how it works. The sprite should start floating to the right when you press the right arrow and jump when you press "up". You'll make the left arrow work in the next level.
      CSD U3 abstraction looping: |-
        # Looping

        The game will be more fun if the frog can jump more than once.  You can make the mushroom "loop" by checking whether it's moved past the left edge and moving it back to the right edge when it has.

        # Do this

        -   Find the `if` statement that checks whether the mushroom has passed the left edge. ( [Show me where](#triggercallout=code_triggered1) )
        -   Use the `sprite.x` block to set the mushroom's position back to the right edge if it has.
      CSD U3 abstraction looping_2018: |-
        # Looping

        The game will be more fun if the frog can jump more than once.  You can make the mushroom "loop" by checking whether it's moved past the left edge and moving it back to the right edge when it has.

        # Do this

        -   Find the `if` statement that checks whether the mushroom has passed the left edge. ( [Show me where](#triggercallout=code_triggered1) )
        -   Use the `sprite.x` block to set the mushroom's position back to the right edge if it has.
      CSD U3 abstraction looping_2019: |-
        # Looping

        The game will be more fun if the frog can jump more than once.  You can make the mushroom "loop" by checking whether it's moved past the left edge and moving it back to the right edge when it has.

        # Do this

        -   Find the `if` statement that checks whether the mushroom has passed the left edge. ( [Show me where](#triggercallout=code_triggered1) )
        -   Use the `sprite.x` block to set the mushroom's position back to the right edge if it has.
      CSD U3 abstraction make it your own: |-
        # Make It Your Own

        You now have the basic mechanics of your game in place, so it's time to make it your own. What do you want to happen? Should the character get points every time it collects a coin? Can you add a scoreboard like you learned in the last lesson? Do you want to make another coin? What about a "bad coin" that takes away points?

        # Do This

        Make at least one improvement to the game that makes it your own. Be prepared to share your changes and improvements with your classmate.
      CSD U3 abstraction make it your own_2018: |-
        # Make It Your Own

        You now have the basic mechanics of your game in place, so it's time to make it your own. What do you want to happen? Should the character get points every time it collects a coin? Can you add a scoreboard like you learned in the last lesson? Do you want to make another coin? What about a "bad coin" that takes away points?

        # Do This

        Make at least one improvement to the game that makes it your own. Be prepared to share your changes and improvements with your classmate.
      CSD U3 abstraction make it your own_2019: |-
        # Make It Your Own

        You now have the basic mechanics of your game in place, so it's time to make it your own. What do you want to happen? Should the character get points every time it collects a coin? Can you add a scoreboard like you learned in the last lesson? Do you want to make another coin? What about a "bad coin" that takes away points?

        # Do This

        Make at least one improvement to the game that makes it your own. Be prepared to share your changes and improvements with your classmate.
      CSD U3 abstraction reset coin: |-
        # Reset Coin

        When your character touches the coin you should reset it somewhere on the screen.

        # Do This

        -   Place an `if` block inside of your draw loop.
        -   Use the `sprite.isTouching()` block as the condition to detect when the character touches the coin.
        -   Inside the `if` block write code that sets the coin's X and Y position to random numbers between 0 and 400.
            -   _Hint: You've already written this code elsewhere in your program._

        Test your code before moving on. When your player touches the coin, it should move somewhere else on the screen.
      CSD U3 abstraction reset coin_2018: |-
        # Reset Coin

        When your character touches the coin you should reset it somewhere on the screen.

        # Do This

        -   Place an `if` block inside of your draw loop.
        -   Use the `sprite.isTouching()` block as the condition to detect when the character touches the coin.
        -   Inside the `if` block write code that sets the coin's X and Y position to random numbers between 0 and 400.
            -   _Hint: You've already written this code elsewhere in your program._

        Test your code before moving on. When your player touches the coin, it should move somewhere else on the screen.
      CSD U3 abstraction reset coin_2019: |-
        # Reset Coin

        When your character touches the coin you should reset it somewhere on the screen.

        # Do This

        -   Place an `if` block inside of your draw loop.
        -   Use the `sprite.isTouching()` block as the condition to detect when the character touches the coin.
        -   Inside the `if` block write code that sets the coin's X and Y position to random numbers between 0 and 400.
            -   _Hint: You've already written this code elsewhere in your program._

        Test your code before moving on. When your player touches the coin, it should move somewhere else on the screen.
      CSD U3 abstraction rotation: |-
        # rotationSpeed

        You've already learned how to make your sprite spin by using the `rotation` block.  For example, when you wanted your sprite to rotate by two degrees each time it was drawn, you put `sprite.rotation = sprite.rotation + 2` inside the draw loop.

        Now, you can use `rotationSpeed` to make your sprites rotate by a certain amount each time they are drawn. If you want your sun to rotate by two degrees each time it's drawn, you can use `sun.rotationSpeed = 2` before the draw loop, after you create your sprite.

        # Do This

        Make the sun rotate by 3 degrees each time using the `rotationSpeed` block. ( [Show me where](#triggercallout=callout1) )
      CSD U3 abstraction rotation control: |-
        # Controlling Speed

        You used `rotatationSpeed` outside the draw loop to make your sprite rotate when your program started.  You can also use `rotationSpeed` **inside** the draw loop to change the speed of the sprite during the game.  For example, a sprite can start rotating when the user presses the space bar, and it will keep rotating until it's told to stop.

        # Do This

        -   Look at the `if` statement inside the draw loop that checks whether the space bar has been pressed. ( [Show me where](#triggercallout=code_triggered1) )
        -   Use the `rotationSpeed` block to make the color wheel start spinning when the user presses the space bar.
      CSD U3 abstraction rotation control_2018: |-
        # Controlling Speed

        You used `rotatationSpeed` outside the draw loop to make your sprite rotate when your program started.  You can also use `rotationSpeed` **inside** the draw loop to change the speed of the sprite during the game.  For example, a sprite can start rotating when the user presses the space bar, and it will keep rotating until it's told to stop.

        # Do This

        -   Look at the `if` statement inside the draw loop that checks whether the space bar has been pressed. ( [Show me where](#triggercallout=code_triggered1) )
        -   Use the `rotationSpeed` block to make the color wheel start spinning when the user presses the space bar.
      CSD U3 abstraction rotation control_2019: |-
        # Controlling Speed

        You used `rotationSpeed` outside the draw loop to make your sprite rotate when your program started.  You can also use `rotationSpeed` **inside** the draw loop to change the speed of the sprite during the game.  For example, a sprite can start rotating when the user presses the space bar, and it will keep rotating until it's told to stop.

        # Do This

        -   Look at the `if` statement inside the draw loop that checks whether the space bar has been pressed. ( [Show me where](#triggercallout=code_triggered1) )
        -   Use the `rotationSpeed` block to make the color wheel start spinning when the user presses the space bar.
      CSD U3 abstraction rotation_2018: |-
        # rotationSpeed

        You've already learned how to make your sprite spin by using the `rotation` block.  For example, when you wanted your sprite to rotate by two degrees each time it was drawn, you put `sprite.rotation = sprite.rotation + 2` inside the draw loop.

        Now, you can use `rotationSpeed` to make your sprites rotate by a certain amount each time they are drawn. If you want your sun to rotate by two degrees each time it's drawn, you can use `sun.rotationSpeed = 2` before the draw loop, after you create your sprite.

        # Do This

        Make the sun rotate by 3 degrees each time using the `rotationSpeed` block. ( [Show me where](#triggercallout=callout1) )
      CSD U3 abstraction rotation_2019: |-
        # rotationSpeed

        You've already learned how to make your sprite spin by using the `rotation` block.  For example, when you wanted your sprite to rotate by two degrees each time it was drawn, you put `sprite.rotation = sprite.rotation + 2` inside the draw loop.

        Now, you can use `rotationSpeed` to make your sprites rotate by a certain amount each time they are drawn. If you want your sun to rotate by two degrees each time it's drawn, you can use `sun.rotationSpeed = 2` before the draw loop, after you create your sprite.

        # Do This

        Make the sun rotate by 3 degrees each time using the `rotationSpeed` block. ( [Show me where](#triggercallout=callout1) )
      CSD U3 abstraction tumbleweed: |-
        # Mushroom

        Now you just need something for your sprite to jump over.  This program already has a mushroom just past the right edge of the screen, but it needs to move toward your frog.

        # Do this

        -   Use the `velocityX` block to make the mushroom move left across the screen.

        _Hint: The mushroom should start moving at the very beginning of the game, and never change, so should it be inside or outside the draw loop?_
      CSD U3 abstraction tumbleweed_2018: |-
        # Mushroom

        Now you just need something for your sprite to jump over.  This program already has a mushroom just past the right edge of the screen, but it needs to move toward your frog.

        # Do this

        -   Use the `velocityX` block to make the mushroom move left across the screen.

        _Hint: The mushroom should start moving at the very beginning of the game, and never change, so should it be inside or outside the draw loop?_
      CSD U3 abstraction tumbleweed_2019: |-
        # Mushroom

        Now you just need something for your sprite to jump over.  This program already has a mushroom just past the right edge of the screen, but it needs to move toward your frog.

        # Do this

        -   Use the `velocityX` block to make the mushroom move left across the screen.

        _Hint: The mushroom should start moving at the very beginning of the game, and never change, so should it be inside or outside the draw loop?_
      CSD U3 abstraction velocityX: |-
        # velocityX

        One way to move sprites in Game Lab is with the counter pattern. For example `sprite1.x = sprite1.x + 1` moves a sprite by 1 pixel each frame of the draw loop. This pattern is so common that sprites have a `velocityX` property that does this for you.

        # Do This

        -   Drag a `sprite.velocityX` block directly below where your sprite is created.       ( [Show me where](#triggercallout=code_triggered) )
        -   Write the name of your sprite in the block.
        -   Assign the `velocityX` property a value of 1.
        -   Run the code. What happens?
        -   Re-run the code giving the `velocityX` property a different value. What's changing?
      CSD U3 abstraction velocityX control: |-
        # Multiple Controls

        As you saw in the last level, you can change the sprite's velocity with multiple `if` statements. In this program, the fish has three different types of movement, each of which should be controlled by its own `if` statement.

        # Do This

        -   Look at the three `if` statements inside the draw loop.

        -   Use a `sprite.velocityX` block inside each `if` statement to make the three following movements:
            -   If the user presses the right arrow key, move the fish to the right.
            -   If the fish gets to the right-hand side of the screen, move the fish to the left.
            -   If the fish gets to the left-hand side of the screen, stop the fish.
      CSD U3 abstraction velocityX control_2018: |-
        # Multiple Controls

        As you saw in the last level, you can change the sprite's velocity with multiple `if` statements. In this program, the fish has three different types of movement, each of which should be controlled by its own `if` statement.

        # Do This

        -   Look at the three `if` statements inside the draw loop.

        -   Use a `sprite.velocityX` block inside each `if` statement to make the three following movements:
            -   If the user presses the right arrow key, move the fish to the right.
            -   If the fish gets to the right-hand side of the screen, move the fish to the left.
            -   If the fish gets to the left-hand side of the screen, stop the fish.
      CSD U3 abstraction velocityX control_2019: |-
        # Multiple Controls

        As you saw in the last level, you can change the sprite's velocity with multiple `if` statements. In this program, the fish has three different types of movement, each of which should be controlled by its own `if` statement.

        # Do This

        -   Look at the three `if` statements inside the draw loop.

        -   Use a `sprite.velocityX` block inside each `if` statement to make the three following movements:
            -   If the user presses the right arrow key, move the fish to the right.
            -   If the fish gets to the right-hand side of the screen, move the fish to the left.
            -   If the fish gets to the left-hand side of the screen, stop the fish.
      CSD U3 abstraction velocityX if-statements: |-
        # Changing Velocity with Position

        One advantage to using the velocity blocks inside conditionals (`if` blocks) is that your sprite keeps moving, even after the condition stops being true.  For example, you only had to press a key once to launch your fly bot, and it kept flying forever.

        In the code below, the fish sprite moves to the left when it hits the right edge, and to the right when it hits the left edge.  The sprite keeps moving, even when it's not touching the edge anymore.

        # Do This

        -   Look at `if` statements that check the sprite's position and set its velocity.
        -   With your partner, discuss how the sprite knows which way to move when neither of the `if` statements are true (the sprite is in the middle of the screen).
      CSD U3 abstraction velocityX if-statements predict: "# \n\nKonum ile Hızı Değiştirme\\\r\n\\\r\nEğer
        ('if') blokları içerisinde hız bloklarını kullanmanın bir faydası şartın doğruluğu
        devam etmese de nesnenizin yer değiştirmeye devam etmesidir. Örneğin siz sadece
        uçan kayığınızı çalıştırmak için bir kere tuşa basarsınız ve o sonsuza kadar
        dönmeye devam eder. Aşağıdaki kullanılan kodlar farklı yönlerde hareket eden
        balık nesne yapma ifadeleridir.\\\r\n\\\r\n\n# \n\nBunu Yap\\\r\n\\\r\n\\*Eğer
        ('if') ifadesine bak, hareketli nesnenin konumunu ve hızını kontrol et.\\\r\n\n-
        \  Ortağın ile birlikte, kodun ne yapacağını tartış ve cevabını aşağıya yaz.\\\r\n-
        \  Cevabını sunduğunda kodu çalıştır."
      CSD U3 abstraction velocityX if-statements predict_2018: "# \n\nKonum ile Hızı
        Değiştirme\\\r\n\\\r\nEğer ('if') blokları içerisinde hız bloklarını kullanmanın
        bir faydası şartın doğruluğu devam etmese de nesnenizin yer değiştirmeye devam
        etmesidir. Örneğin siz sadece uçan kayığınızı çalıştırmak için bir kere tuşa
        basarsınız ve o sonsuza kadar dönmeye devam eder. Aşağıdaki kullanılan kodlar
        farklı yönlerde hareket eden balık nesne yapma ifadeleridir.\\\r\n\\\r\n\n#
        \n\nBunu Yap\\\r\n\\\r\n\\*Eğer ('if') ifadesine bak, hareketli nesnenin konumunu
        ve hızını kontrol et.\\\r\n\n-   Ortağın ile birlikte, kodun ne yapacağını
        tartış ve cevabını aşağıya yaz.\\\r\n-   Cevabını sunduğunda kodu çalıştır."
      CSD U3 abstraction velocityX if-statements predict_2019: "# \n\nKonum ile Hızı
        Değiştirme\\\r\n\\\r\nEğer ('if') blokları içerisinde hız bloklarını kullanmanın
        bir faydası şartın doğruluğu devam etmese de nesnenizin yer değiştirmeye devam
        etmesidir. Örneğin siz sadece uçan kayığınızı çalıştırmak için bir kere tuşa
        basarsınız ve o sonsuza kadar dönmeye devam eder. Aşağıdaki kullanılan kodlar
        farklı yönlerde hareket eden balık nesne yapma ifadeleridir.\\\r\n\\\r\n\n#
        \n\nBunu Yap\\\r\n\\\r\n\\*Eğer ('if') ifadesine bak, hareketli nesnenin konumunu
        ve hızını kontrol et.\\\r\n\n-   Ortağın ile birlikte, kodun ne yapacağını
        tartış ve cevabını aşağıya yaz.\\\r\n-   Cevabını sunduğunda kodu çalıştır."
      CSD U3 abstraction velocityX if-statements_2018: |-
        # Changing Velocity with Position

        One advantage to using the velocity blocks inside conditionals (`if` blocks) is that your sprite keeps moving, even after the condition stops being true.  For example, you only had to press a key once to launch your fly bot, and it kept flying forever.

        In the code below, the fish sprite moves to the left when it hits the right edge, and to the right when it hits the left edge.  The sprite keeps moving, even when it's not touching the edge anymore.

        # Do This

        -   Look at `if` statements that check the sprite's position and set its velocity.
        -   With your partner, discuss how the sprite knows which way to move when neither of the `if` statements are true (the sprite is in the middle of the screen).
      CSD U3 abstraction velocityX if-statements_2019: |-
        # Changing Velocity with Position

        One advantage to using the velocity blocks inside conditionals (`if` blocks) is that your sprite keeps moving, even after the condition stops being true.  For example, you only had to press a key once to launch your fly bot, and it kept flying forever.

        In the code below, the fish sprite moves to the left when it hits the right edge, and to the right when it hits the left edge.  The sprite keeps moving, even when it's not touching the edge anymore.

        # Do This

        -   Look at `if` statements that check the sprite's position and set its velocity.
        -   With your partner, discuss how the sprite knows which way to move when neither of the `if` statements are true (the sprite is in the middle of the screen).
      CSD U3 abstraction velocityX_2018: |-
        # velocityX

        One way to move sprites in Game Lab is with the counter pattern. For example `sprite1.x = sprite1.x + 1` moves a sprite by 1 pixel each frame of the draw loop. This pattern is so common that sprites have a `velocityX` property that does this for you.

        # Do This

        -   Drag a `sprite.velocityX` block directly below where your sprite is created.       ( [Show me where](#triggercallout=code_triggered) )
        -   Write the name of your sprite in the block.
        -   Assign the `velocityX` property a value of 1.
        -   Run the code. What happens?
        -   Re-run the code giving the `velocityX` property a different value. What's changing?
      CSD U3 abstraction velocityX_2019: |-
        # velocityX

        One way to move sprites in Game Lab is with the counter pattern. For example `sprite1.x = sprite1.x + 1` moves a sprite by 1 pixel each frame of the draw loop. This pattern is so common that sprites have a `velocityX` property that does this for you.

        # Do This

        -   Drag a `sprite.velocityX` block directly below where your sprite is created.       ( [Show me where](#triggercallout=code_triggered) )
        -   Write the name of your sprite in the block.
        -   Assign the `velocityX` property a value of 1.
        -   Run the code. What happens?
        -   Re-run the code giving the `velocityX` property a different value. What's changing?
      CSD U3 abstraction velocityY: |-
        # Moving Down

        Here is a feather sprite that should be floating down the screen.  If `velocityX` makes a sprite move to the right, can you find the block that will make the feather move down?

        # Do This

        Find the block that will make the feather sprite go down the screen, and use it outside the draw loop.   (  [Show me where](#triggercallout=code_triggered) )
      CSD U3 abstraction velocityY control: |-
        # Controlling Speed

        Your code before the draw loop sets up the beginning of your game.  Your code inside the draw loop controls how the game will change while it's being played.  In this game, the helicopter bot starts off at the bottom of the screen, but when the space key is pressed, it flies up.

        # Do This

        -   Use an `if` statement inside the draw loop to check when the space bar is pressed.
        -   Use the `velocityY` block to make the sprite fly up when the user presses the space bar.  The sprite should keep moving up even after you let go of the space bar.
      CSD U3 abstraction velocityY control_2018: |-
        # Controlling Speed

        Your code before the draw loop sets up the beginning of your game.  Your code inside the draw loop controls how the game will change while it's being played.  In this game, the helicopter bot starts off at the bottom of the screen, but when the space key is pressed, it flies up.

        # Do This

        -   Use an `if` statement inside the draw loop to check when the space bar is pressed.
        -   Use the `velocityY` block to make the sprite fly up when the user presses the space bar.  The sprite should keep moving up even after you let go of the space bar.
      CSD U3 abstraction velocityY control_2019: |-
        # Controlling Speed

        Your code before the draw loop sets up the beginning of your game.  Your code inside the draw loop controls how the game will change while it's being played.  In this game, the helicopter bot starts off at the bottom of the screen, but when the space key is pressed, it flies up.

        # Do This

        -   Use an `if` statement inside the draw loop to check when the space bar is pressed.
        -   Use the `velocityY` block to make the sprite fly up when the user presses the space bar.  The sprite should keep moving up even after you let go of the space bar.
      CSD U3 abstraction velocityY_2018: |-
        # Moving Down

        Here is a feather sprite that should be floating down the screen.  If `velocityX` makes a sprite move to the right, can you find the block that will make the feather move down?

        # Do This

        Find the block that will make the feather sprite go down the screen, and use it outside the draw loop.   (  [Show me where](#triggercallout=code_triggered) )
      CSD U3 abstraction velocityY_2019: |-
        # Moving Down

        Here is a feather sprite that should be floating down the screen.  If `velocityX` makes a sprite move to the right, can you find the block that will make the feather move down?

        # Do This

        Find the block that will make the feather sprite go down the screen, and use it outside the draw loop.   (  [Show me where](#triggercallout=code_triggered) )
      CSD U3 challenge face: "<img src=\"https://images.code.org/aa5aedbcfec082c2886d88b565e5fc09-image-1495732712591.png\"\nstyle=\"float:
        right; max-width: 200px; border: 1px solid grey\">\\\r\n\n# Meydan Okuma:\n\nYüz\\\r\n\\\r\n_Herhangi
        bir meydan okumaya başlamadan önce öğretmeninin ile beraber kontrol et._\\\r\n\\\r\nSağ
        taraftaki yüzü oluşturmak için 'rec', 'ellipse' ve 'fill' komutlarını kullanan
        bir program yazın. Açık mavi, kırmızı ve açık yeşil renkleri kullanılmıştır.\\\r\nBitirdiğiniz
        zaman kişisel dokunuşlarınızı resme ekleyin.\\\r\n\\\r\n\\\r"
      CSD U3 challenge face_2018: "<img src=\"https://images.code.org/aa5aedbcfec082c2886d88b565e5fc09-image-1495732712591.png\"\nstyle=\"float:
        right; max-width: 200px; border: 1px solid grey\">\\\r\n\n# Meydan Okuma:\n\nYüz\\\r\n\\\r\n_Herhangi
        bir meydan okumaya başlamadan önce öğretmeninin ile beraber kontrol et._\\\r\n\\\r\nSağ
        taraftaki yüzü oluşturmak için 'rec', 'ellipse' ve 'fill' komutlarını kullanan
        bir program yazın. Açık mavi, kırmızı ve açık yeşil renkleri kullanılmıştır.\\\r\nBitirdiğiniz
        zaman kişisel dokunuşlarınızı resme ekleyin.\\\r\n\\\r\n\\\r"
      CSD U3 challenge face_2019: "<img src=\"https://images.code.org/aa5aedbcfec082c2886d88b565e5fc09-image-1495732712591.png\"\nstyle=\"float:
        right; max-width: 200px; border: 1px solid grey\">\\\r\n\n# Meydan Okuma:\n\nYüz\\\r\n\\\r\n_Herhangi
        bir meydan okumaya başlamadan önce öğretmeninin ile beraber kontrol et._\\\r\n\\\r\nSağ
        taraftaki yüzü oluşturmak için 'rec', 'ellipse' ve 'fill' komutlarını kullanan
        bir program yazın. Açık mavi, kırmızı ve açık yeşil renkleri kullanılmıştır.\\\r\nBitirdiğiniz
        zaman kişisel dokunuşlarınızı resme ekleyin.\\\r\n\\\r\n\\\r"
      CSD U3 challenge new shape: "<img src=\"https://images.code.org/cc725698ade5282931002db3bf762cbc-image-1495733456927.png\"\nstyle=\"float:
        right; max-width: 200px; border: 1px solid grey\">\\\r\n\\\r\n\n# \n\nMeydan
        Okuma: Şekillerden Şekil Oluştur\\\r\n\\\r\n_Herhangi bir meydan okumaya başlamadan
        önce öğretmenin ile beraber kontrol et._\\\r\n\\\r\nSadece 'rect' ve 'ellipse'
        komutlarını kullanarak, çemberlerden bir üçgen gibi yeni bir şekil çizebilir
        misiniz?"
      CSD U3 challenge new shape_2018: "<img src=\"https://images.code.org/cc725698ade5282931002db3bf762cbc-image-1495733456927.png\"\nstyle=\"float:
        right; max-width: 200px; border: 1px solid grey\">\\\r\n\\\r\n\n# \n\nMeydan
        Okuma: Şekillerden Şekil Oluştur\\\r\n\\\r\n_Herhangi bir meydan okumaya başlamadan
        önce öğretmenin ile beraber kontrol et._\\\r\n\\\r\nSadece 'rect' ve 'ellipse'
        komutlarını kullanarak, çemberlerden bir üçgen gibi yeni bir şekil çizebilir
        misiniz?"
      CSD U3 challenge new shape_2019: "<img src=\"https://images.code.org/cc725698ade5282931002db3bf762cbc-image-1495733456927.png\"\nstyle=\"float:
        right; max-width: 200px; border: 1px solid grey\">\\\r\n\\\r\n\n# \n\nMeydan
        Okuma: Şekillerden Şekil Oluştur\\\r\n\\\r\n_Herhangi bir meydan okumaya başlamadan
        önce öğretmenin ile beraber kontrol et._\\\r\n\\\r\nSadece 'rect' ve 'ellipse'
        komutlarını kullanarak, çemberlerden bir üçgen gibi yeni bir şekil çizebilir
        misiniz?"
      CSD U3 collisions bounciness: |-
        # Bounciness

        So far, `bounceOff` has made sprites bounce away from other objects as fast as they bounced into them.  In the real world, almost everything slows down just a little bit when it bounces off something else.  You can use the `bounciness` block to tell your sprite how much to slow down or speed up when it bounces off something else.

        # Do This

        -   Read the code below and press "Run" to see the behavior of the basketball and pool ball.
        -   Use a `bounciness` block to set the bounciness of your soccer ball.
        -   Run the code again to see how the sprites bounce off the floor.

        [//]: # "https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png"

        [//]: # "https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png"

        [//]: # "https://images.code.org/0e4e9c26bed0d31d14f6b3f8f8bb4c27-image-1475786966986.png"
      CSD U3 collisions bounciness_2018: |-
        # Bounciness

        So far, `bounceOff` has made sprites bounce away from other objects as fast as they bounced into them.  In the real world, almost everything slows down just a little bit when it bounces off something else.  You can use the `bounciness` block to tell your sprite how much to slow down or speed up when it bounces off something else.

        # Do This

        -   Read the code below and press "Run" to see the behavior of the basketball and pool ball.
        -   Use a `bounciness` block to set the bounciness of your soccer ball.
        -   Run the code again to see how the sprites bounce off the floor.

        [//]: # "https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png"

        [//]: # "https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png"

        [//]: # "https://images.code.org/0e4e9c26bed0d31d14f6b3f8f8bb4c27-image-1475786966986.png"
      CSD U3 collisions bounciness_2019: |-
        # Bounciness

        So far, `bounceOff` has made sprites bounce away from other objects as fast as they bounced into them.  In the real world, almost everything slows down just a little bit when it bounces off something else.  You can use the `bounciness` block to tell your sprite how much to slow down or speed up when it bounces off something else.

        # Do This

        -   Read the code below and press "Run" to see the behavior of the basketball and pool ball.
        -   Use a `bounciness` block to set the bounciness of your soccer ball.
        -   Run the code again to see how the sprites bounce off the floor.

        [//]: # "https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png"

        [//]: # "https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png"

        [//]: # "https://images.code.org/0e4e9c26bed0d31d14f6b3f8f8bb4c27-image-1475786966986.png"
      CSD U3 collisions build isTouching: |-
        # Balloon

        The code below uses the sprites' x and y positions to check whether they are touching.  It will change the balloon sprite's animation when the tack touches it.  Use the arrow keys to move the tack until it touches the balloon.

        # Do This

        -   You do not need to change any code on this level.
        -   Read the if statements inside the draw loop and find the different sprite properties and how they are compared.
        -   Discuss the code with your partner.  Would you want to write this code every time you checked whether sprites were touching?

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"
      CSD U3 collisions build isTouching_2018: |-
        # Balloon

        The code below uses the sprites' x and y positions to check whether they are touching.  It will change the balloon sprite's animation when the tack touches it.  Use the arrow keys to move the tack until it touches the balloon.

        # Do This

        -   You do not need to change any code on this level.
        -   Read the if statements inside the draw loop and find the different sprite properties and how they are compared.
        -   Discuss the code with your partner.  Would you want to write this code every time you checked whether sprites were touching?

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"
      CSD U3 collisions build isTouching_2019: |-
        # Balloon

        The code below uses the sprites' x and y positions to check whether they are touching.  It will change the balloon sprite's animation when the tack touches it.  Use the arrow keys to move the tack until it touches the balloon.

        # Do This

        -   You do not need to change any code on this level.
        -   Read the if statements inside the draw loop and find the different sprite properties and how they are compared.
        -   Discuss the code with your partner.  Would you want to write this code every time you checked whether sprites were touching?

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"
      CSD U3 collisions car intro: |-
        # Frog Jump

        Look at the frog jumping game to the left.   It looks like the game from the last lesson, but the frog moves the mushroom if it hits it.  What code do you think would help the computer to know whether two sprites are touching?

        [//]: # "https://images.code.org/ee9b677e93213846fe12abb3b34f563c-image-1469742494237.png"

        [//]: # "https://images.code.org/5f738da1a2b1ef8af124e4470e2babe7-image-1469742830481.png"

        [//]: # "https://images.code.org/f22e6b1a636337820e53fb37a137b3d1-image-1469742992179.png"
      CSD U3 collisions car intro_2018: |-
        # Frog Jump

        Look at the frog jumping game to the left.   It looks like the game from the last lesson, but the frog moves the mushroom if it hits it.  What code do you think would help the computer to know whether two sprites are touching?

        [//]: # "https://images.code.org/ee9b677e93213846fe12abb3b34f563c-image-1469742494237.png"

        [//]: # "https://images.code.org/5f738da1a2b1ef8af124e4470e2babe7-image-1469742830481.png"

        [//]: # "https://images.code.org/f22e6b1a636337820e53fb37a137b3d1-image-1469742992179.png"
      CSD U3 collisions car intro_2019: |-
        # Frog Jump

        Look at the frog jumping game to the left.   It looks like the game from the last lesson, but the frog moves the mushroom if it hits it.  What code do you think would help the computer to know whether two sprites are touching?

        [//]: # "https://images.code.org/ee9b677e93213846fe12abb3b34f563c-image-1469742494237.png"

        [//]: # "https://images.code.org/5f738da1a2b1ef8af124e4470e2babe7-image-1469742830481.png"

        [//]: # "https://images.code.org/f22e6b1a636337820e53fb37a137b3d1-image-1469742992179.png"
      CSD U3 collisions debug: |-
        # Debug

        Sometimes sprites will behave in ways that are unexpected. There is a special `sprite.debug` property you can use to better understand why the sprites interact the way that they do.

        # Do This

        These two coins are round, so you would expect them to bounce in a certain way. Something weird is happening though!

        -   Run the code and watch the way that the coins interact.
        -   Use the `sprite.debug` block to make debug 'true' for both the sprites and run the code again.
        -   Change the gold coin's starting x position to 51 and run the code again.
        -   Discuss with a partner: Why do you think the coins are bouncing strangely?
      CSD U3 collisions debug isTouching: |-
        # Debugging Collisions

        The balloon is popping before the tack touches it.  When sprites aren't doing what you expect, you can use the `debug` block to get more information about why the sprites are behaving that way.  Can you find out what's wrong in the code below?

        # Do This

        -   Run the code and use the arrow keys to move the tack to pop the balloon.
        -   In the code below, change `balloon.debug = false` to `balloon.debug = true`.
        -   Add a new `debug` block to the code and set the tack sprite's debug property to `true`.
        -   Run the code again, then discuss with your partner why the balloon is popping early.

        _Challenge: Can you use the animations tab to resize the balloon picture so it pops at the correct time?_

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"

        [//]: # "https://images.code.org/2892e65635d7a43d0664bb8ff58eb698-image-1471200175665.png"

        [//]: # "https://images.code.org/9ffeb3f543033353d073794071316860-image-1471200179449.png"
      CSD U3 collisions debug isTouching_2018: |-
        # Debugging Collisions

        The balloon is popping before the tack touches it.  When sprites aren't doing what you expect, you can use the `debug` block to get more information about why the sprites are behaving that way.  Can you find out what's wrong in the code below?

        # Do This

        -   Run the code and use the arrow keys to move the tack to pop the balloon.
        -   In the code below, change `balloon.debug = false` to `balloon.debug = true`.
        -   Add a new `debug` block to the code and set the tack sprite's debug property to `true`.
        -   Run the code again, then discuss with your partner why the balloon is popping early.

        _Challenge: Can you use the animations tab to resize the balloon picture so it pops at the correct time?_

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"

        [//]: # "https://images.code.org/2892e65635d7a43d0664bb8ff58eb698-image-1471200175665.png"

        [//]: # "https://images.code.org/9ffeb3f543033353d073794071316860-image-1471200179449.png"
      CSD U3 collisions debug isTouching_2019: |-
        # Debugging Collisions

        The balloon is popping before the tack touches it.  When sprites aren't doing what you expect, you can use the `debug` block to get more information about why the sprites are behaving that way.  Can you find out what's wrong in the code below?

        # Do This

        -   Run the code and use the arrow keys to move the tack to pop the balloon.
        -   In the code below, change `balloon.debug = false` to `balloon.debug = true`.
        -   Add a new `debug` block to the code and set the tack sprite's debug property to `true`.
        -   Run the code again, then discuss with your partner why the balloon is popping early.

        _Challenge: Can you use the animations tab to resize the balloon picture so it pops at the correct time?_

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"

        [//]: # "https://images.code.org/2892e65635d7a43d0664bb8ff58eb698-image-1471200175665.png"

        [//]: # "https://images.code.org/9ffeb3f543033353d073794071316860-image-1471200179449.png"
      CSD U3 collisions debug_2018: |-
        # Debug

        Sometimes sprites will behave in ways that are unexpected. There is a special `sprite.debug` property you can use to better understand why the sprites interact the way that they do.

        # Do This

        These two coins are round, so you would expect them to bounce in a certain way. Something weird is happening though!

        -   Run the code and watch the way that the coins interact.
        -   Use the `sprite.debug` block to make debug 'true' for both the sprites and run the code again.
        -   Change the gold coin's starting x position to 51 and run the code again.
        -   Discuss with a partner: Why do you think the coins are bouncing strangely?
      CSD U3 collisions debug_2019: |-
        # Debug

        Sometimes sprites will behave in ways that are unexpected. There is a special `sprite.debug` property you can use to better understand why the sprites interact the way that they do.

        # Do This

        These two coins are round, so you would expect them to bounce in a certain way. Something weird is happening though!

        -   Run the code and watch the way that the coins interact.
        -   Use the `sprite.debug` block to make debug 'true' for both the sprites and run the code again.
        -   Change the gold coin's starting x position to 51 and run the code again.
        -   Discuss with a partner: Why do you think the coins are bouncing strangely?
      CSD U3 collisions displace intro: |-
        # Displace

        The interaction you've been programming is so common that there's a block designed to do the interaction for you. `sprite.displace()` that will make one sprite push the other when they touch. The code underlying this block might look a lot like what you just wrote, but now you no longer need to worry about writing those details yourself.

        # Do This

        Someone tried to use the `sprite.displace()` block to make the **elephant push the hippo**, but there is a bug. Can you change the code so that the elephant pushes the hippo off the screen?

        -   Find the line of code where the `sprite.displace()` block is used and fix the error.
      CSD U3 collisions displace intro_2018: |-
        # Displace

        The interaction you've been programming is so common that there's a block designed to do the interaction for you. `sprite.displace()` that will make one sprite push the other when they touch. The code underlying this block might look a lot like what you just wrote, but now you no longer need to worry about writing those details yourself.

        # Do This

        Someone tried to use the `sprite.displace()` block to make the **elephant push the hippo**, but there is a bug. Can you change the code so that the elephant pushes the hippo off the screen?

        -   Find the line of code where the `sprite.displace()` block is used and fix the error.
      CSD U3 collisions displace intro_2019: |-
        # Displace

        The interaction you've been programming is so common that there's a block designed to do the interaction for you. `sprite.displace()` that will make one sprite push the other when they touch. The code underlying this block might look a lot like what you just wrote, but now you no longer need to worry about writing those details yourself.

        # Do This

        Someone tried to use the `sprite.displace()` block to make the **elephant push the hippo**, but there is a bug. Can you change the code so that the elephant pushes the hippo off the screen?

        -   Find the line of code where the `sprite.displace()` block is used and fix the error.
      CSD U3 collisions displace x: |-
        # Program a Sprite Interaction

        You should have discussed with your classmates how you could create the sprite interaction you saw in the last level. Now it's your turn to program it yourself. How can you make the giraffe move the monkey off the screen?

        # Do This

        The giraffe is already moving across the screen toward the monkey but the sprite interaction itself hasn't been programmed.

        -   Use the plan you developed with your classmates on the last level to program the sprite interaction yourself.

        [//]: # "https://images.code.org/2e6b993747a39cd5076dce219037903d-image-1470319674401.png"

        [//]: # "https://images.code.org/d44d7c1aa87ea7eeceea9e9b023408f9-image-1470319674396.png"
      CSD U3 collisions displace x_2018: |-
        # Program a Sprite Interaction

        You should have discussed with your classmates how you could create the sprite interaction you saw in the last level. Now it's your turn to program it yourself. How can you make the giraffe move the monkey off the screen?

        # Do This

        The giraffe is already moving across the screen toward the monkey but the sprite interaction itself hasn't been programmed.

        -   Use the plan you developed with your classmates on the last level to program the sprite interaction yourself.

        [//]: # "https://images.code.org/2e6b993747a39cd5076dce219037903d-image-1470319674401.png"

        [//]: # "https://images.code.org/d44d7c1aa87ea7eeceea9e9b023408f9-image-1470319674396.png"
      CSD U3 collisions displace x_2019: |-
        # Program a Sprite Interaction

        You should have discussed with your classmates how you could create the sprite interaction you saw in the last level. Now it's your turn to program it yourself. How can you make the giraffe move the monkey off the screen?

        # Do This

        The giraffe is already moving across the screen toward the monkey but the sprite interaction itself hasn't been programmed.

        -   Use the plan you developed with your classmates on the last level to program the sprite interaction yourself.

        [//]: # "https://images.code.org/2e6b993747a39cd5076dce219037903d-image-1470319674401.png"

        [//]: # "https://images.code.org/d44d7c1aa87ea7eeceea9e9b023408f9-image-1470319674396.png"
      CSD U3 collisions displace y: |-
        # Write Your Own Sprite Interaction

        In the last level you should have written code for a sprite interaction that you developed with your classmates. This time try to write the program on your own, but you can use the patterns you saw in the last level.

        # Do This

        The elephant should **push the hippo off the screen**. Notice that the elephant moves at a random Y velocity each time the program runs.

        -   Using the patterns from the last level, write code that makes the elephant push the hippo off the screen.
      CSD U3 collisions displace y_2018: |-
        # Write Your Own Sprite Interaction

        In the last level you should have written code for a sprite interaction that you developed with your classmates. This time try to write the program on your own, but you can use the patterns you saw in the last level.

        # Do This

        The elephant should **push the hippo off the screen**. Notice that the elephant moves at a random Y velocity each time the program runs.

        -   Using the patterns from the last level, write code that makes the elephant push the hippo off the screen.
      CSD U3 collisions displace y_2019: |-
        # Write Your Own Sprite Interaction

        In the last level you should have written code for a sprite interaction that you developed with your classmates. This time try to write the program on your own, but you can use the patterns you saw in the last level.

        # Do This

        The elephant should **push the hippo off the screen**. Notice that the elephant moves at a random Y velocity each time the program runs.

        -   Using the patterns from the last level, write code that makes the elephant push the hippo off the screen.
      CSD U3 collisions egg: |-
        # Applesauce

        When the apple hits the blender, the blender should turn on.

        # Do This

        Use the `isTouching` block to make the blender shake back and forth when the apple sprite touches the blender sprite.  The shaking motion is already coded using the random block, so you just have to check when the two sprites are touching.

        _Challenge: Can you make the apple disappear when it touches the blender?_

        [//]: # "https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png"

        [//]: # "https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png"

        [//]: # "https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png"

        [//]: # "https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png"

        [//]: # "https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png"

        [//]: # "https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png"
      CSD U3 collisions egg2: |-
        # Making Sounds

        You can also use code to play a blender sound.

        # Do This

        Use the `playSound` block from the "World" drawer to play the "<https://studio.code.org/docs/sounds/blender.mp3>" sound when the apple touches the blender.  You will need to paste the address of the sound into the block, so it looks like this: ![](<https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57 PM.png>)

        [//]: # "https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png"

        [//]: # "https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png"

        [//]: # "https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png"

        [//]: # "https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png"

        [//]: # "https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png"

        [//]: # "https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png"

        [//]: # "https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57 PM.png"
      CSD U3 collisions egg2_2018: |-
        # Making Sounds

        You can also use code to play a blender sound.

        # Do This

        Use the `playSound` block from the "World" drawer to play the "<https://studio.code.org/docs/sounds/blender.mp3>" sound when the apple touches the blender.  You will need to paste the address of the sound into the block, so it looks like this: ![](<https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57 PM.png>)

        [//]: # "https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png"

        [//]: # "https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png"

        [//]: # "https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png"

        [//]: # "https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png"

        [//]: # "https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png"

        [//]: # "https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png"

        [//]: # "https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57 PM.png"
      CSD U3 collisions egg2_2019: |-
        # Making Sounds

        You can also use code to play a blender sound.

        # Do This

        Use the `playSound` block from the "World" drawer to play the "<https://studio.code.org/docs/sounds/blender.mp3>" sound when the apple touches the blender.  You will need to paste the address of the sound into the block, so it looks like this: ![](<https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57 PM.png>)

        [//]: # "https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png"

        [//]: # "https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png"

        [//]: # "https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png"

        [//]: # "https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png"

        [//]: # "https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png"

        [//]: # "https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png"

        [//]: # "https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57 PM.png"
      CSD U3 collisions egg_2018: |-
        # Applesauce

        When the apple hits the blender, the blender should turn on.

        # Do This

        Use the `isTouching` block to make the blender shake back and forth when the apple sprite touches the blender sprite.  The shaking motion is already coded using the random block, so you just have to check when the two sprites are touching.

        _Challenge: Can you make the apple disappear when it touches the blender?_

        [//]: # "https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png"

        [//]: # "https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png"

        [//]: # "https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png"

        [//]: # "https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png"

        [//]: # "https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png"

        [//]: # "https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png"
      CSD U3 collisions egg_2019: |-
        # Applesauce

        When the apple hits the blender, the blender should turn on.

        # Do This

        Use the `isTouching` block to make the blender shake back and forth when the apple sprite touches the blender sprite.  The shaking motion is already coded using the random block, so you just have to check when the two sprites are touching.

        _Challenge: Can you make the apple disappear when it touches the blender?_

        [//]: # "https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png"

        [//]: # "https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png"

        [//]: # "https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png"

        [//]: # "https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png"

        [//]: # "https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png"

        [//]: # "https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png"
      CSD U3 collisions flyman add obstacles: |-
        # Flyer Game - Add Obstacle

        This is the flyer game you built in the last lesson. For the next several levels, you'll be adding an obstacle sprite to the game, using some of the sprite interactions you just learned. At the end you'll have a chance to keep adding on ideas of your own.

        <img src="https://images.code.org/47f8c130ca668080d48520ef9aced093-image-1477069764142.08.58 AM.png" style="float:right;width:200px">

        # Do This

        Add an obstacle sprite to the game. You can use whatever image you like from the animation tab but the example shown here uses a sun. Right now you just need to add the sprite to your game and give it an animation.

        -   Add a new sprite to your game called "obstacle".
        -   In the animation tab create a new animation for your obstacle. In the example a sun image was chosen.
        -   Use the `sprite.setAnimation()` block to give your sprite the image you chose.
        -   Run the code and make sure the sprite appears where you want it on the screen. You may need to set its X, Y, and scale properties to get it to look the way you want.
      CSD U3 collisions flyman add obstacles_2018: |-
        # Flyer Game - Add Obstacle

        This is the flyer game you built in the last lesson. For the next several levels, you'll be adding an obstacle sprite to the game, using some of the sprite interactions you just learned. At the end you'll have a chance to keep adding on ideas of your own.

        <img src="https://images.code.org/47f8c130ca668080d48520ef9aced093-image-1477069764142.08.58 AM.png" style="float:right;width:200px">

        # Do This

        Add an obstacle sprite to the game. You can use whatever image you like from the animation tab but the example shown here uses a sun. Right now you just need to add the sprite to your game and give it an animation.

        -   Add a new sprite to your game called "obstacle".
        -   In the animation tab create a new animation for your obstacle. In the example a sun image was chosen.
        -   Use the `sprite.setAnimation()` block to give your sprite the image you chose.
        -   Run the code and make sure the sprite appears where you want it on the screen. You may need to set its X, Y, and scale properties to get it to look the way you want.
      CSD U3 collisions flyman add obstacles_2019: |-
        # Flyer Game - Add Obstacle

        This is the flyer game you built in the last lesson. For the next several levels, you'll be adding an obstacle sprite to the game, using some of the sprite interactions you just learned. At the end you'll have a chance to keep adding on ideas of your own.

        <img src="https://images.code.org/47f8c130ca668080d48520ef9aced093-image-1477069764142.08.58 AM.png" style="float:right;width:200px">

        # Do This

        Add an obstacle sprite to the game. You can use whatever image you like from the animation tab but the example shown here uses a sun. Right now you just need to add the sprite to your game and give it an animation.

        -   Add a new sprite to your game called "obstacle".
        -   In the animation tab create a new animation for your obstacle. In the example a sun image was chosen.
        -   Use the `sprite.setAnimation()` block to give your sprite the image you chose.
        -   Run the code and make sure the sprite appears where you want it on the screen. You may need to set its X, Y, and scale properties to get it to look the way you want.
      CSD U3 collisions flyman bounceOff: |-
        # Flyer Game - Interacting with the Obstacle

        You don't want your player to be able to move through the obstacle, so you'll need to use one of the sprite interactions.

        # Do This

        -   Add code to your game that prevents your player from moving through the obstacle.
        -   If you use one of the bounce interactions, decide whether you want to reset the bounciness of your character.
        -   Discuss with a neighbor: Which sprite interaction did you decide to use? Is there more than one sprite interaction that works the way you'd expect?
      CSD U3 collisions flyman bounceOff_2018: |-
        # Flyer Game - Interacting with the Obstacle

        You don't want your player to be able to move through the obstacle, so you'll need to use one of the sprite interactions.

        # Do This

        -   Add code to your game that prevents your player from moving through the obstacle.
        -   If you use one of the bounce interactions, decide whether you want to reset the bounciness of your character.
        -   Discuss with a neighbor: Which sprite interaction did you decide to use? Is there more than one sprite interaction that works the way you'd expect?
      CSD U3 collisions flyman bounceOff_2019: |-
        # Flyer Game - Interacting with the Obstacle

        You don't want your player to be able to move through the obstacle, so you'll need to use one of the sprite interactions.

        # Do This

        -   Add code to your game that prevents your player from moving through the obstacle.
        -   If you use one of the bounce interactions, decide whether you want to reset the bounciness of your character.
        -   Discuss with a neighbor: Which sprite interaction did you decide to use? Is there more than one sprite interaction that works the way you'd expect?
      CSD U3 collisions flyman change colliders: |-
        # Flyer Game - Change Colliders

        Right now your colliders are all rectangular. Switch them over to circles to get more interesting and realistic bounces and collisions.

        # Do This

        -   Use the `sprite.setCollider()` block to change the colliders of your sprites to circles.
        -   Set your sprites' debug properties to `true` to make sure your game is working the way you want.
        -   Play your game to make sure it's working the way you want.
      CSD U3 collisions flyman change colliders_2018: |-
        # Flyer Game - Change Colliders

        Right now your colliders are all rectangular. Switch them over to circles to get more interesting and realistic bounces and collisions.

        # Do This

        -   Use the `sprite.setCollider()` block to change the colliders of your sprites to circles.
        -   Set your sprites' debug properties to `true` to make sure your game is working the way you want.
        -   Play your game to make sure it's working the way you want.
      CSD U3 collisions flyman change colliders_2019: |-
        # Flyer Game - Change Colliders

        Right now your colliders are all rectangular. Switch them over to circles to get more interesting and realistic bounces and collisions.

        # Do This

        -   Use the `sprite.setCollider()` block to change the colliders of your sprites to circles.
        -   Set your sprites' debug properties to `true` to make sure your game is working the way you want.
        -   Play your game to make sure it's working the way you want.
      CSD U3 collisions flyman displace coin: |-
        # Flyer Game - Coin Behind the Obstacle

        Right now your coin is moving to random locations. That means sometimes it even will appear behind your obstacle, so your character can't get to it. Using sprite interactions you can fix this problem.

        # Do This

        -   Add code to your game that prevents the coin from moving behind the obstacle. Don't be afraid to try out ideas just to see how they work.
        -   Discuss with a neighbor: Which sprite interaction did you decide to use? Is there more than one sprite interaction that works the way you'd expect?
      CSD U3 collisions flyman displace coin_2018: |-
        # Flyer Game - Coin Behind the Obstacle

        Right now your coin is moving to random locations. That means sometimes it even will appear behind your obstacle, so your character can't get to it. Using sprite interactions you can fix this problem.

        # Do This

        -   Add code to your game that prevents the coin from moving behind the obstacle. Don't be afraid to try out ideas just to see how they work.
        -   Discuss with a neighbor: Which sprite interaction did you decide to use? Is there more than one sprite interaction that works the way you'd expect?
      CSD U3 collisions flyman displace coin_2019: |-
        # Flyer Game - Coin Behind the Obstacle

        Right now your coin is moving to random locations. That means sometimes it even will appear behind your obstacle, so your character can't get to it. Using sprite interactions you can fix this problem.

        # Do This

        -   Add code to your game that prevents the coin from moving behind the obstacle. Don't be afraid to try out ideas just to see how they work.
        -   Discuss with a neighbor: Which sprite interaction did you decide to use? Is there more than one sprite interaction that works the way you'd expect?
      CSD U3 collisions flyman make it your own: |-
        # Flyer Game - Make It Your Own

        Time to make this game your own by using what you've learned about sprite interactions.

        # Do This

        Add at least one more aspect to your game that uses sprite interactions. There's some ideas below or you can choose to add features of your own. Make sure you're ready to share your ideas with your classmates.

        -   Create "edge" sprites to keep your character from bouncing out.
        -   Add platforms to the game for your character to navigate around.
        -   Add another obstacle to your game.
        -   Create another idea of your own.
      CSD U3 collisions flyman make it your own_2018: |-
        # Flyer Game - Make It Your Own

        Time to make this game your own by using what you've learned about sprite interactions.

        # Do This

        Add at least one more aspect to your game that uses sprite interactions. There's some ideas below or you can choose to add features of your own. Make sure you're ready to share your ideas with your classmates.

        -   Create invisible sprites at the edge of your game to keep your character from bouncing out.
        -   Add platforms to the game for your character to navigate around.
        -   Add another obstacle to your game.
        -   Create another idea of your own.
      CSD U3 collisions flyman make it your own_2019: |-
        # Flyer Game - Make It Your Own

        Time to make this game your own by using what you've learned about sprite interactions.

        # Do This

        Add at least one more aspect to your game that uses sprite interactions. There's some ideas below or you can choose to add features of your own. Make sure you're ready to share your ideas with your classmates.

        -   Create invisible sprites at the edge of your game to keep your character from bouncing out.
        -   Add platforms to the game for your character to navigate around.
        -   Add another obstacle to your game.
        -   Create another idea of your own.
      CSD U3 collisions horse: |-
        # Rainbow Horse

        When the rainbow touches the horse, it should turn into a unicorn.

        # Do This

        Use the `if`, `isTouching`, and `setAnimation` blocks to change the horse sprite's image when the rainbow touches it.  The unicorn image is already loaded in the animations tab for you.

        [//]: # "https://images.code.org/4d1d0e36e574117140ecc377d406c1de-image-1470256869920.png"

        [//]: # "https://images.code.org/b913bc2ee2231b908892472240a70105-image-1470256869922.png"

        [//]: # "https://images.code.org/558b42903bf40cc26410e651a85de922-image-1470256869923.png"

        [//]: # "https://images.code.org/1d41d2e5b3b55037911b8f73bdc2ff48-image-1470257277875.png"
      CSD U3 collisions horse_2018: |-
        # Rainbow Horse

        When the rainbow touches the horse, it should turn into a unicorn.

        # Do This

        Use the `if`, `isTouching`, and `setAnimation` blocks to change the horse sprite's image when the rainbow touches it.  The unicorn image is already loaded in the animations tab for you.

        [//]: # "https://images.code.org/4d1d0e36e574117140ecc377d406c1de-image-1470256869920.png"

        [//]: # "https://images.code.org/b913bc2ee2231b908892472240a70105-image-1470256869922.png"

        [//]: # "https://images.code.org/558b42903bf40cc26410e651a85de922-image-1470256869923.png"

        [//]: # "https://images.code.org/1d41d2e5b3b55037911b8f73bdc2ff48-image-1470257277875.png"
      CSD U3 collisions horse_2019: |-
        # Rainbow Horse

        When the rainbow touches the horse, it should turn into a unicorn.

        # Do This

        Use the `if`, `isTouching`, and `setAnimation` blocks to change the horse sprite's image when the rainbow touches it.  The unicorn image is already loaded in the animations tab for you.

        [//]: # "https://images.code.org/4d1d0e36e574117140ecc377d406c1de-image-1470256869920.png"

        [//]: # "https://images.code.org/b913bc2ee2231b908892472240a70105-image-1470256869922.png"

        [//]: # "https://images.code.org/558b42903bf40cc26410e651a85de922-image-1470256869923.png"

        [//]: # "https://images.code.org/1d41d2e5b3b55037911b8f73bdc2ff48-image-1470257277875.png"
      CSD U3 collisions isTouching intro: |-
        # isTouching()

        Writing out the math each time you want to check whether two sprites are touching can take a while, so a programmer created the `isTouching` block, which can check whether one sprite is touching another sprite (the _target_).  The computer is still doing the same math as in the previous program, but you don't have to worry about it because another programmer already did that work.

        # Do This

        Inside the draw loop, drag the `isTouching` block into the `if` block.     ( [Show me where](#triggercallout=code_triggered) )

        _Hint: Don't forget to change the "sprite" to "balloon" and the "target" to "tack"._

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"
      CSD U3 collisions isTouching intro_2018: |-
        # isTouching()

        Writing out the math each time you want to check whether two sprites are touching can take a while, so a programmer created the `isTouching` block, which can check whether one sprite is touching another sprite (the _target_).  The computer is still doing the same math as in the previous program, but you don't have to worry about it because another programmer already did that work.

        # Do This

        Inside the draw loop, drag the `isTouching` block into the `if` block.     ( [Show me where](#triggercallout=code_triggered) )

        _Hint: Don't forget to change the "sprite" to "balloon" and the "target" to "tack"._

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"
      CSD U3 collisions isTouching intro_2019: |-
        # isTouching()

        Writing out the math each time you want to check whether two sprites are touching can take a while, so a programmer created the `isTouching` block, which can check whether one sprite is touching another sprite (the _target_).  The computer is still doing the same math as in the previous program, but you don't have to worry about it because another programmer already did that work.

        # Do This

        Inside the draw loop, drag the `isTouching` block into the `if` block.     ( [Show me where](#triggercallout=code_triggered) )

        _Hint: Don't forget to change the "sprite" to "balloon" and the "target" to "tack"._

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"
      CSD U3 collisions predict set velocity code: |-
        # Sprite Interactions

        So far you've been able to create simple sprite interactions by using the `sprite.isTouching()` block. For example, you've reset a coin to a different location on the screen when a character touches it. Now it's time to start making sprites have more complex interactions.

        # Do This

        -   Run the program and observe the interaction between the two sprites.
        -   Discuss with a neighbor: Using only the commands you already know how could you create this kind of interaction? There are many ways to do it, but here are some blocks to consider:
            -   `sprite.isTouching()`
            -   `sprite.velocityX`
            -   `sprite.velocityY`
            -   `sprite.x`
            -   `sprite.y`

        Be ready to share your ideas with your classmates.
      CSD U3 collisions predict set velocity code_2018: |-
        # Sprite Interactions

        So far you've been able to create simple sprite interactions by using the `sprite.isTouching()` block. For example, you've reset a coin to a different location on the screen when a character touches it. Now it's time to start making sprites have more complex interactions.

        # Do This

        -   Run the program and observe the interaction between the two sprites.
        -   Discuss with a neighbor: Using only the commands you already know how could you create this kind of interaction? There are many ways to do it, but here are some blocks to consider:
            -   `sprite.isTouching()`
            -   `sprite.velocityX`
            -   `sprite.velocityY`
            -   `sprite.x`
            -   `sprite.y`

        Be ready to share your ideas with your classmates.
      CSD U3 collisions predict set velocity code_2019: |-
        # Sprite Interactions

        So far you've been able to create simple sprite interactions by using the `sprite.isTouching()` block. For example, you've reset a coin to a different location on the screen when a character touches it. Now it's time to start making sprites have more complex interactions.

        # Do This

        -   Run the program and observe the interaction between the two sprites.
        -   Discuss with a neighbor: Using only the commands you already know how could you create this kind of interaction? There are many ways to do it, but here are some blocks to consider:
            -   `sprite.isTouching()`
            -   `sprite.velocityX`
            -   `sprite.velocityY`
            -   `sprite.x`
            -   `sprite.y`

        Be ready to share your ideas with your classmates.
      CSD U3 collisions scoreboard: |-
        # Scoreboard

        You can also use `isTouching` to decide whether you should increase the score.  In this game, the score is stored inside the 'score' variable.  It is displayed on the screen using the `text` block.  ( [Show me where](#triggercallout=code_triggered) )

        # Do This

        -   Use the `if` and `isTouching` blocks to determine whether the bunny has caught the carrot. ( [Show me where](#triggercallout=code_triggered2) )
        -   If it has, do the following three things:
            -   Use the counter pattern on the score variable to increase the score.
            -   Reset the carrot's x position off the right-hand side of the screen.
            -   Set the carrot's y position to a random number between 10 and 390.
      CSD U3 collisions scoreboard_2018: |-
        # Scoreboard

        You can also use `isTouching` to decide whether you should increase the score.  In this game, the score is stored inside the 'score' variable.  It is displayed on the screen using the `text` block.  ( [Show me where](#triggercallout=code_triggered) )

        # Do This

        -   Use the `if` and `isTouching` blocks to determine whether the bunny has caught the carrot. ( [Show me where](#triggercallout=code_triggered2) )
        -   If it has, do the following three things:
            -   Use the counter pattern on the score variable to increase the score.
            -   Reset the carrot's x position off the right-hand side of the screen.
            -   Set the carrot's y position to a random number between 10 and 390.
      CSD U3 collisions scoreboard_2019: |-
        # Scoreboard

        You can also use `isTouching` to decide whether you should increase the score.  In this game, the score is stored inside the 'score' variable.  It is displayed on the screen using the `text` block.  ( [Show me where](#triggercallout=code_triggered) )

        # Do This

        -   Use the `if` and `isTouching` blocks to determine whether the bunny has caught the carrot. ( [Show me where](#triggercallout=code_triggered2) )
        -   If it has, do the following three things:
            -   Use the counter pattern on the score variable to increase the score.
            -   Reset the carrot's x position off the right-hand side of the screen.
            -   Set the carrot's y position to a random number between 10 and 390.
      CSD U3 collisions setCollider: |-
        # setCollider

        Sprites interact based on the size and shape of their collider, not the images that are assigned to them. You can only see the collider when debug mode is turned on.  You can change the shape of the collider using the `sprite.setCollider()` block, which lets you pick between a "rectangle" or a "circle".  By default all colliders are "rectangle".

        # Do This

        -   Find the `sprite.setCollider()` block for the gold coin, and change it from "rectangle" to "circle".
        -   Add a new `sprite.setCollider()` block for the silver coin, and choose "circle" for the shape of the collider.
        -   Run the code again to see how the sprites bounce.

        [//]: # "https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png"

        [//]: # "https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png"
      CSD U3 collisions setCollider_2018: |-
        # setCollider

        Sprites interact based on the size and shape of their collider, not the images that are assigned to them. You can only see the collider when debug mode is turned on.  You can change the shape of the collider using the `sprite.setCollider()` block, which lets you pick between a "rectangle" or a "circle".  By default all colliders are "rectangle".

        # Do This

        -   Find the `sprite.setCollider()` block for the gold coin, and change it from "rectangle" to "circle".
        -   Add a new `sprite.setCollider()` block for the silver coin, and choose "circle" for the shape of the collider.
        -   Run the code again to see how the sprites bounce.

        [//]: # "https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png"

        [//]: # "https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png"
      CSD U3 collisions setCollider_2019: |-
        # setCollider

        Sprites interact based on the size and shape of their collider, not the images that are assigned to them. You can only see the collider when debug mode is turned on.  You can change the shape of the collider using the `sprite.setCollider()` block, which lets you pick between a "rectangle" or a "circle".  By default all colliders are "rectangle".

        # Do This

        -   Find the `sprite.setCollider()` block for the gold coin, and change it from "rectangle" to "circle".
        -   Add a new `sprite.setCollider()` block for the silver coin, and choose "circle" for the shape of the collider.
        -   Run the code again to see how the sprites bounce.

        [//]: # "https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png"

        [//]: # "https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png"
      CSD U3 collisions sidescroll2: |-
        # Improve Your Game

        Now that you know how to use `isTouching` and `playSound`, you can make some fun things happen when your sprites run into each other.

        _Note: The `playSound` block now has an extra parameter called "loop" that can be set to true or false.  If this parameter is true, the sound will continue to play in a loop._

        # Do This

        -   Add at least two effects when your sprites collide.

        _Challenge: Add a scoreboard to the top of your screen._
      CSD U3 collisions sidescroll2_2018: |-
        # Improve Your Game

        Now that you know how to use `isTouching` and `playSound`, you can make some fun things happen when your sprites run into each other.

        _Note: The `playSound` block now has an extra parameter called "loop" that can be set to true or false.  If this parameter is true, the sound will continue to play in a loop._

        # Do This

        -   Add at least two effects when your sprites collide.

        _Challenge: Add a scoreboard to the top of your screen._
      CSD U3 collisions sidescroll2_2019: |-
        # Improve Your Game

        Now that you know how to use `isTouching` and `playSound`, you can make some fun things happen when your sprites run into each other.

        _Note: The `playSound` block now has an extra parameter called "loop" that can be set to true or false.  If this parameter is true, the sound will continue to play in a loop._

        # Do This

        -   Add at least two effects when your sprites collide.

        _Challenge: Add a scoreboard to the top of your screen._
      CSD U3 collisions try blocks: |-
        # More Collision Blocks

        Three new types of sprite interactions have been added to the toolbox, `sprite.collide()`, `sprite.bounce()`, and `sprite.bounceOff()`. How do you think they'll affect the sprites?

        # Do This

        -   Switch out the displace block for the `sprite.collide()`, `sprite.bounce()`, and `sprite.bounceOff()` blocks. ( [Show me where](#triggercallout=code_triggered) )
            -   _Hint: If you're having trouble doing this with blocks then switch over to text mode._
        -   Discuss with a neighbor: What is the difference between the four different sprite interactions? What do you think the purpose of each block is?

        [//]: # "https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png"

        [//]: # "https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png"
      CSD U3 collisions try blocks_2018: |-
        # More Collision Blocks

        Three new types of sprite interactions have been added to the toolbox, `sprite.collide()`, `sprite.bounce()`, and `sprite.bounceOff()`. How do you think they'll affect the sprites?

        # Do This

        -   Switch out the displace block for the `sprite.collide()`, `sprite.bounce()`, and `sprite.bounceOff()` blocks. ( [Show me where](#triggercallout=code_triggered) )
            -   _Hint: If you're having trouble doing this with blocks then switch over to text mode._
        -   Discuss with a neighbor: What is the difference between the four different sprite interactions? What do you think the purpose of each block is?

        [//]: # "https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png"

        [//]: # "https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png"
      CSD U3 collisions try blocks_2019: |-
        # More Collision Blocks

        Three new types of sprite interactions have been added to the toolbox, `sprite.collide()`, `sprite.bounce()`, and `sprite.bounceOff()`. How do you think they'll affect the sprites?

        # Do This

        -   Switch out the displace block for the `sprite.collide()`, `sprite.bounce()`, and `sprite.bounceOff()` blocks. ( [Show me where](#triggercallout=code_triggered) )
            -   _Hint: If you're having trouble doing this with blocks then switch over to text mode._
        -   Discuss with a neighbor: What is the difference between the four different sprite interactions? What do you think the purpose of each block is?

        [//]: # "https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png"

        [//]: # "https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png"
      CSD U3 collisions turtle: |-
        # Debugging Sprite Interactions

        Sprite interactions just run some code when they're called. The interactions are not "remembered" by the game. If you want one sprite to bounce or collide with another then it needs to be a part of the draw loop. If you forget then this can lead to unexpected behavior.

        # Do This

        The turtle can be moved with the arrow keys. It's not supposed to be able to walk through the tree, but something is wrong in the code. Can you find and correct the bug in the code?

        -   Run the code and try to make the turtle collide with the tree.
        -   Look through the code and discuss with your partner what the problem is.
        -   Correct the code, then run it again to make sure it works.
      CSD U3 collisions turtle_2018: |-
        # Debugging Sprite Interactions

        Sprite interactions just run some code when they're called. The interactions are not "remembered" by the game. If you want one sprite to bounce or collide with another then it needs to be a part of the draw loop. If you forget then this can lead to unexpected behavior.

        # Do This

        The turtle can be moved with the arrow keys. It's not supposed to be able to walk through the tree, but something is wrong in the code. Can you find and correct the bug in the code?

        -   Run the code and try to make the turtle collide with the tree.
        -   Look through the code and discuss with your partner what the problem is.
        -   Correct the code, then run it again to make sure it works.
      CSD U3 collisions turtle_2019: |-
        # Debugging Sprite Interactions

        Sprite interactions just run some code when they're called. The interactions are not "remembered" by the game. If you want one sprite to bounce or collide with another then it needs to be a part of the draw loop. If you forget then this can lead to unexpected behavior.

        # Do This

        The turtle can be moved with the arrow keys. It's not supposed to be able to walk through the tree, but something is wrong in the code. Can you find and correct the bug in the code?

        -   Run the code and try to make the turtle collide with the tree.
        -   Look through the code and discuss with your partner what the problem is.
        -   Correct the code, then run it again to make sure it works.
      CSD U3 collisions types: |-
        # Collision Types

        There are four types of collisions that we use in Game Lab.  These blocks will cause a certain type of interaction between the _sprite_ and its _target_.

        ## displace

        The `displace` block causes the sprite to push the target as long as they are touching each other. The sprite keeps moving normally.

        ## collide

        The `collide` block makes the sprite stop when it runs into the target.  If the target is moving, it will push the sprite with it.  The target keeps moving normally.

        ## bounce

        The `bounce` block makes the sprite and the target bounce when they touch each other.  Both the sprite and the target change how they are moving.

        ## bounceOff

        The `bounceOff` block makes the sprite bounce off the target.  The target keeps moving normally.

        # Do This

        Choose the best block to model the basketball bouncing off the floor. ( [Show me where](#triggercallout=code_triggered) )

        [//]: # "https://images.code.org/24355fc6377cfafdce3ce2b3568a33c3-image-1470343728940.png"

        [//]: # "https://images.code.org/87e4306e0371c7975b8fb2583657ee4a-image-1470343728942.png"
      CSD U3 collisions types_2018: |-
        # Collision Types

        There are four types of collisions that we use in Game Lab.  These blocks will cause a certain type of interaction between the _sprite_ and its _target_.

        ## displace

        The `displace` block causes the sprite to push the target as long as they are touching each other. The sprite keeps moving normally.

        ## collide

        The `collide` block makes the sprite stop when it runs into the target.  If the target is moving, it will push the sprite with it.  The target keeps moving normally.

        ## bounce

        The `bounce` block makes the sprite and the target bounce when they touch each other.  Both the sprite and the target change how they are moving.

        ## bounceOff

        The `bounceOff` block makes the sprite bounce off the target.  The target keeps moving normally.

        # Do This

        Choose the best block to model the basketball bouncing off the floor. ( [Show me where](#triggercallout=code_triggered) )

        [//]: # "https://images.code.org/24355fc6377cfafdce3ce2b3568a33c3-image-1470343728940.png"

        [//]: # "https://images.code.org/87e4306e0371c7975b8fb2583657ee4a-image-1470343728942.png"
      CSD U3 collisions types_2019: |-
        # Collision Types

        There are four types of collisions that we use in Game Lab: `displace`, `collide`, `bounce`, and `bounceOff`.  These blocks will cause a certain type of interaction between the _sprite_ and its _target_.

        # Do This

        Choose the best block to model the basketball bouncing off the floor. ( [Show me where](#triggercallout=code_triggered) )
        \*Hint: You can try the different blocks out, or read more about them in the "Help and Tips" tab.
        [//]\: # (<https://images.code.org/24355fc6377cfafdce3ce2b3568a33c3-image-1470343728940.png>)

        [//]: # "https://images.code.org/87e4306e0371c7975b8fb2583657ee4a-image-1470343728942.png"
      CSD U3 dancing alien: "# Çizme Döngüsü İçindeki Hareketli Nesneler\\\r\n\n\\\r\nÇizme
        döngüsü içindeki hareketli nesnelerin özelliklerini değiştirerek karakterlerinizi
        hareketlendirebilirsiniz.\n\\\r\n\\\r\nBu animasyon yavaşlıyor da. Çerçeve
        hızını 10'a ayarlamak için programın başında 'World.frameRate' bloku kullanılmıştır.
        Genellikle çerçeve hızı 30'tur. Farklı çerçeve hızı keşfetmekte rahat olun.\\\r\n\\\r\n\n#
        \n\nBunu Yap\\\r\n\n-   Nasıl işlediğini görmek için kodu çalıştır.\\\r\n-
        \  Ortağınız ile bazı kodların neden çizme döngüsü içinde ve bazı kodların
        da dışında olduğunu tartışın.\\\r\n-   Çerçeve hızlarını değiştirmeyi deneyerek
        \ kodları yeniden çalıştırın."
      CSD U3 dancing alien_2018: "# Çizme Döngüsü İçindeki Hareketli Nesneler\\\r\n\n\\\r\nÇizme
        döngüsü içindeki hareketli nesnelerin özelliklerini değiştirerek karakterlerinizi
        hareketlendirebilirsiniz.\n\\\r\n\\\r\nBu animasyon yavaşlıyor da. Çerçeve
        hızını 10'a ayarlamak için programın başında 'World.frameRate' bloku kullanılmıştır.
        Genellikle çerçeve hızı 30'tur. Farklı çerçeve hızı keşfetmekte rahat olun.\\\r\n\\\r\n\n#
        \n\nBunu Yap\\\r\n\n-   Nasıl işlediğini görmek için kodu çalıştır.\\\r\n-
        \  Ortağınız ile bazı kodların neden çizme döngüsü içinde ve bazı kodların
        da dışında olduğunu tartışın.\\\r\n-   Çerçeve hızlarını değiştirmeyi deneyerek
        \ kodları yeniden çalıştırın."
      CSD U3 dancing alien_2019: "# Çizme Döngüsü İçindeki Hareketli Nesneler\\\r\n\n\\\r\nÇizme
        döngüsü içindeki hareketli nesnelerin özelliklerini değiştirerek karakterlerinizi
        hareketlendirebilirsiniz.\n\\\r\n\\\r\nBu animasyon yavaşlıyor da. Çerçeve
        hızını 10'a ayarlamak için programın başında 'World.frameRate' bloku kullanılmıştır.
        Genellikle çerçeve hızı 30'tur. Farklı çerçeve hızı keşfetmekte rahat olun.\\\r\n\\\r\n\n#
        \n\nBunu Yap\\\r\n\n-   Nasıl işlediğini görmek için kodu çalıştır.\\\r\n-
        \  Ortağınız ile bazı kodların neden çizme döngüsü içinde ve bazı kodların
        da dışında olduğunu tartışın.\\\r\n-   Çerçeve hızlarını değiştirmeyi deneyerek
        \ kodları yeniden çalıştırın."
      CSD U3 debug: "<img src=\"https://images.code.org/249f124a9bbd3da7d6327a7be8ab73c9-image-1493138569984.41.50\nAM.png\"
        style=\"float:right;width:150px;\">\\\r\n\\\r\n\n# Hata Ayıklama\\\r\n\n\\\r\nİlk
        çalıştırmada programlar sıklıkla çalışmaz ve programcılar hata ayıklamak zorunda
        kalırlar. Aşağıdaki kodlardan sağdaki resmi oluşturması bekleniyor ama  ekranın
        sağındaki yere karenin nasıl yerleştirileceği ve ayrıca kodların hangi sırada
        olacağı konusunda da programcının kafası karışmış.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\n\n-
        \  Çalışma alanındaki kodlara bakın.\\\r\n-   Sağdaki resmi elde etmek için
        kodları değiştirin.\\\r\n-   (Kodun bir satırının yerini  VE karenin koordinatlarını
        değiştirmelisiniz.)"
      CSD U3 debug_2018: "<img src=\"https://images.code.org/249f124a9bbd3da7d6327a7be8ab73c9-image-1493138569984.41.50\nAM.png\"
        style=\"float:right;width:150px;\">\\\r\n\\\r\n\n# Hata Ayıklama\\\r\n\n\\\r\nİlk
        çalıştırmada programlar sıklıkla çalışmaz ve programcılar hata ayıklamak zorunda
        kalırlar. Aşağıdaki kodlardan sağdaki resmi oluşturması bekleniyor ama  ekranın
        sağındaki yere karenin nasıl yerleştirileceği ve ayrıca kodların hangi sırada
        olacağı konusunda da programcının kafası karışmış.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\n\n-
        \  Çalışma alanındaki kodlara bakın.\\\r\n-   Sağdaki resmi elde etmek için
        kodları değiştirin.\\\r\n-   (Kodun bir satırının yerini  VE karenin koordinatlarını
        değiştirmelisiniz.)"
      CSD U3 debug_2019: "<img src=\"https://images.code.org/249f124a9bbd3da7d6327a7be8ab73c9-image-1493138569984.41.50\nAM.png\"
        style=\"float:right;width:150px;\">\\\r\n\\\r\n\n# Hata Ayıklama\\\r\n\n\\\r\nİlk
        çalıştırmada programlar sıklıkla çalışmaz ve programcılar hata ayıklamak zorunda
        kalırlar. Aşağıdaki kodlardan sağdaki resmi oluşturması bekleniyor ama  ekranın
        sağındaki yere karenin nasıl yerleştirileceği ve ayrıca kodların hangi sırada
        olacağı konusunda da programcının kafası karışmış.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\n\n-
        \  Çalışma alanındaki kodlara bakın.\\\r\n-   Sağdaki resmi elde etmek için
        kodları değiştirin.\\\r\n-   (Kodun bir satırının yerini  VE karenin koordinatlarını
        değiştirmelisiniz.)"
      CSD U3 ellipse: "<img src=\"https://images.code.org/2ef29be10261f6a2c5df8f214d524f4d-image-1493060602794.02.44\nPM.png\"
        style=\"float:right;width:150px;\">\\\r\n\\\r\n\n# ellipse\\\r\n\n\\\r\nBir
        çember çizmek için `ellipse` bloğunu kullanabilirsin.\\\r\n\\\r\n\n# Bunları
        Yapın\\\r\n\n\\\r\n\n-   Daireyi oluşturan koda bakın.\\\r\n-   Farklı renkte
        yeni daire ekleyin.\\\r"
      CSD U3 ellipse_2018: "<img src=\"https://images.code.org/2ef29be10261f6a2c5df8f214d524f4d-image-1493060602794.02.44\nPM.png\"
        style=\"float:right;width:150px;\">\\\r\n\\\r\n\n# ellipse\\\r\n\n\\\r\nBir
        çember çizmek için `ellipse` bloğunu kullanabilirsin.\\\r\n\\\r\n\n# Bunları
        Yapın\\\r\n\n\\\r\n\n-   Daireyi oluşturan koda bakın.\\\r\n-   Farklı renkte
        yeni daire ekleyin.\\\r"
      CSD U3 ellipse_2019: "<img src=\"https://images.code.org/2ef29be10261f6a2c5df8f214d524f4d-image-1493060602794.02.44\nPM.png\"
        style=\"float:right;width:150px;\">\\\r\n\\\r\n\n# ellipse\\\r\n\n\\\r\nBir
        çember çizmek için `ellipse` bloğunu kullanabilirsin.\\\r\n\\\r\n\n# Bunları
        Yapın\\\r\n\n\\\r\n\n-   Daireyi oluşturan koda bakın.\\\r\n-   Farklı renkte
        yeni daire ekleyin.\\\r"
      CSD U3 fill: "<img src=\"https://images.code.org/c91390d63e52a3349c48f7b6b0057258-image-1493060802897.05.19\nPM.png\"
        style=\"float:right;width:200px;\">\\\r\n\n# fill(color)\\\r\n\n\\\r\n`fill`bloğu
        ile bütün kareleri farklı renklerde yapabilirsin. Bu blok kendisinden sonra
        gelen bütün şekillerin rengini ayarlar.\\\r\n\\\r\n\n# Bunu Yapın\\\r\n\n\\\r\n\\*\nRengi
        ayarlayan koda bakın. ( [Nerede olduğunu göster](#triggercallout=fill)\n)\\\r\n\n-
        \  Rengi maviden sarıya değiştirin.\\\r\n-   fill komutunu takip eden kod
        alanına bir 'rect' bloğu sürükleyerek yeni bir kare ekle   ( [Nerde olduğunu
        göster](#triggercallout=rect_block)\n    ).  Yeni kareyi ekranda istediğin
        yere yerleştir.\\\r"
      CSD U3 fill_2018: "<img src=\"https://images.code.org/c91390d63e52a3349c48f7b6b0057258-image-1493060802897.05.19\nPM.png\"
        style=\"float:right;width:200px;\">\\\r\n\n# fill(color)\\\r\n\n\\\r\n`fill`bloğu
        ile bütün kareleri farklı renklerde yapabilirsin. Bu blok kendisinden sonra
        gelen bütün şekillerin rengini ayarlar.\\\r\n\\\r\n\n# Bunu Yapın\\\r\n\n\\\r\n\\*\nRengi
        ayarlayan koda bakın. ( [Nerede olduğunu göster](#triggercallout=fill)\n)\\\r\n\n-
        \  Rengi maviden sarıya değiştirin.\\\r\n-   fill komutunu takip eden kod
        alanına bir 'rect' bloğu sürükleyerek yeni bir kare ekle   ( [Nerde olduğunu
        göster](#triggercallout=rect_block)\n    ).  Yeni kareyi ekranda istediğin
        yere yerleştir.\\\r"
      CSD U3 fill_2019: "<img src=\"https://images.code.org/c91390d63e52a3349c48f7b6b0057258-image-1493060802897.05.19\nPM.png\"
        style=\"float:right;width:200px;\">\\\r\n\n# fill(color)\\\r\n\n\\\r\n`fill`bloğu
        ile bütün kareleri farklı renklerde yapabilirsin. Bu blok kendisinden sonra
        gelen bütün şekillerin rengini ayarlar.\\\r\n\\\r\n\n# Bunu Yapın\\\r\n\n\\\r\n\\*\nRengi
        ayarlayan koda bakın. ( [Nerede olduğunu göster](#triggercallout=fill)\n)\\\r\n\n-
        \  Rengi maviden sarıya değiştirin.\\\r\n-   fill komutunu takip eden kod
        alanına bir 'rect' bloğu sürükleyerek yeni bir kare ekle   ( [Nerde olduğunu
        göster](#triggercallout=rect_block)\n    ).  Yeni kareyi ekranda istediğin
        yere yerleştir.\\\r"
      CSD U3 finishing touches: |-
        # Finishing Touches

        Now that you have the basis for your game, it's time to add some finishing touches.

        To make your game even better, try making at least two improvements to it. You can use the list below to help you, or you can come up with your own improvements that you'd like to make.

        -   Find a way to keep your player from going off the edges of the screen.
        -   Add a different item for your player to collect or avoid that are worth different point values.
        -   Make a variable to keep track of how many lives your player has, and then end the game when the lives run out.
        -   Add sprites that move in the background of your game.
        -   Make another background to switch to when the score gets even higher, or when the game ends.
        -   Give your game a way to end. Possible events to end your game could be the score reaching a certain value, or the amount of lives to keep the game running runs out.
        -   If your game has platforms, try making the objects in your game interact with these platforms in some way.
      CSD U3 finishing touches_2018: |-
        # Finishing Touches

        Now that you have the basis for your game, it's time to add some finishing touches.

        To make your game even better, try making at least two improvements to it. You can use the list below to help you, or you can come up with your own improvements that you'd like to make.

        -   Find a way to keep your player from going off the edges of the screen.
        -   Add a different item for your player to collect or avoid that are worth different point values.
        -   Make a variable to keep track of how many lives your player has, and then end the game when the lives run out.
        -   Add sprites that move in the background of your game.
        -   Make another background to switch to when the score gets even higher, or when the game ends.
        -   Give your game a way to end. Possible events to end your game could be the score reaching a certain value, or the amount of lives to keep the game running runs out.
        -   If your game has platforms, try making the objects in your game interact with these platforms in some way.
      CSD U3 finishing touches_2019: |-
        # Finishing Touches

        Now that you have the basis for your game, it's time to add some finishing touches.

        To make your game even better, try making at least two improvements to it. You can use the list below to help you, or you can come up with your own improvements that you'd like to make.

        -   Find a way to keep your player from going off the edges of the screen.
        -   Add a different item for your player to collect or avoid that are worth different point values.
        -   Make a variable to keep track of how many lives your player has, and then end the game when the lives run out.
        -   Add sprites that move in the background of your game.
        -   Make another background to switch to when the score gets even higher, or when the game ends.
        -   Give your game a way to end. Possible events to end your game could be the score reaching a certain value, or the amount of lives to keep the game running runs out.
        -   If your game has platforms, try making the objects in your game interact with these platforms in some way.
      CSD U3 function video: |-
        ## Questions to Consider

        -   Think of a time when a function might have helped you write a program.
            -   What code would go in the **definition** of the function?
            -   When would you **call** the function?
            -   What would you name it?
      CSD U3 game animations: |-
        # Create your Animations

        Next you will create your animations in the animation tab.  Don't forget to make multiple animations if you want your sprite to change appearance according to how it's moving.
      CSD U3 game animations_2018: |-
        # Create your Animations

        Next you will create your animations in the animation tab.  Don't forget to make multiple animations if you want your sprite to change appearance according to how it's moving.
      CSD U3 game animations_2019: |-
        # Create your Animations

        Next you will create your animations in the animation tab.  Don't forget to make multiple animations if you want your sprite to change appearance according to how it's moving.
      CSD U3 game backgrounds: |-
        # Create your Backgrounds

        Next, you'll create all of the background functions that you need for your game.  Some games only have one background, and others have more than one that's chosen according to user score or another aspect of gameplay.  You'll need to create a function for each separate background in your game.  You'll write the code to choose the correct background in the next level.

        -   [Show me the block to create a new function](#triggercallout=callout1)
        -   [Show me the area in the code to put my function](#triggercallout=callout2)

        After you create your functions, test them by calling them inside the draw loop, one background per test.

        -   [Show me the block to call my function](#triggercallout=callout3)
      CSD U3 game backgrounds_2018: |-
        # Create your Backgrounds

        Next, you'll create all of the background functions that you need for your game.  Some games only have one background, and others have more than one that's chosen according to user score or another aspect of gameplay.  You'll need to create a function for each separate background in your game.  You'll write the code to choose the correct background in the next level.

        -   [Show me the block to create a new function](#triggercallout=callout1)
        -   [Show me the area in the code to put my function](#triggercallout=callout2)

        After you create your functions, test them by calling them inside the draw loop, one background per test.

        -   [Show me the block to call my function](#triggercallout=callout3)
      CSD U3 game backgrounds_2019: |-
        # Create your Backgrounds

        Next, you'll create all of the background functions that you need for your game.  Some games only have one background, and others have more than one that's chosen according to user score or another aspect of gameplay.  You'll need to create a function for each separate background in your game.  You'll write the code to choose the correct background in the next level.

        -   [Show me the block to create a new function](#triggercallout=callout1)
        -   [Show me the area in the code to put my function](#triggercallout=callout2)

        After you create your functions, test them by calling them inside the draw loop, one background per test.

        -   [Show me the block to call my function](#triggercallout=callout3)
      CSD U3 game choose background: |-
        # Choose your Backgrounds

        Now that you have the backgrounds that you need, you'll write the code to choose the correct background.  You've seen this done in [Lesson 19 Level 11](/s/csd3-2017/stage/19/puzzle/11).

        After you've written the code, test it by changing the starting value of your variables and making sure the correct background shows up.
      CSD U3 game choose background_2018: |-
        # Choose your Backgrounds

        Now that you have the backgrounds that you need, you'll write the code to choose the correct background.  You've seen this done in [Lesson 19 Level 11](../../19/puzzle/11).

        After you've written the code, test it by changing the starting value of your variables and making sure the correct background shows up.
      CSD U3 game choose background_2019: |-
        # Choose your Backgrounds

        Now that you have the backgrounds that you need, you'll write the code to choose the correct background.  You've seen this done in [Lesson 19 Level 11](../../19/puzzle/11).

        After you've written the code, test it by changing the starting value of your variables and making sure the correct background shows up.
      CSD U3 game create sprites: |-
        # Create your Sprites

        Next you will create your sprites and give them starting properties in the "Create Sprites" area of your code.  For each sprite your should:

        -   Create the sprite in the correct place on the screen
        -   Set its animation (or color and size)
        -   Set its velocity and rotation speed, if needed
        -   Set its collider and bounciness, if needed

        After you create each sprite, test it before making the next one.  If your sprite starts off screen, first place it on the screen to test it, them move it back off screen once you know that it looks right.

        If your sprites position will need to be reset later in your game, it's a good idea to make a function that sets the position of this sprite that you can use again later.
      CSD U3 game create sprites_2018: |-
        # Create your Sprites

        Next you will create your sprites and give them starting properties in the "Create Sprites" area of your code.  For each sprite your should:

        -   Create the sprite in the correct place on the screen
        -   Set its animation (or color and size)
        -   Set its velocity and rotation speed, if needed
        -   Set its collider and bounciness, if needed

        After you create each sprite, test it before making the next one.  If your sprite starts off screen, first place it on the screen to test it, them move it back off screen once you know that it looks right.

        If your sprite's position will need to be reset later in your game, it's a good idea to make a function that sets the position of this sprite that you can use again later.
      CSD U3 game create sprites_2019: |-
        # Create your Sprites

        Next you will create your sprites and give them starting properties in the "Create Sprites" area of your code.  For each sprite your should:

        -   Create the sprite in the correct place on the screen
        -   Set its animation (or color and size)
        -   Set its velocity and rotation speed, if needed
        -   Set its collider and bounciness, if needed

        After you create each sprite, test it before making the next one.  If your sprite starts off screen, first place it on the screen to test it, them move it back off screen once you know that it looks right.

        If your sprite's position will need to be reset later in your game, it's a good idea to make a function that sets the position of this sprite that you can use again later.
      CSD U3 game display boards: |-
        # Display Boards

        Now that your backgrounds are working, you can add your display boards.  Most games have a score board, but you might also want to display information about player level or lives remaining.  Look at [Lesson 16 Puzzle 9](/s/csd3-2017/stage/16/puzzle/9) for an example of how to make a scoreboard.

        For each display board:

        -   Create a function to display the information
        -   Call the function in the draw loop

        Be sure to test your boards by changing the starting value of your variables and making sure the board also changes when you run the code.
      CSD U3 game display boards_2018: |-
        # Display Boards

        Now that your backgrounds are working, you can add your display boards.  Most games have a score board, but you might also want to display information about player level or lives remaining.  Look at [Lesson 16 Puzzle 9](../../16/puzzle/9) for an example of how to make a scoreboard.

        For each display board:

        -   Create a function to display the information
        -   Call the function in the draw loop

        Be sure to test your boards by changing the starting value of your variables and making sure the board also changes when you run the code.
      CSD U3 game display boards_2019: |-
        # Display Boards

        Now that your backgrounds are working, you can add your display boards.  Most games have a score board, but you might also want to display information about player level or lives remaining.  Look at [Lesson 16 Puzzle 9](../../16/puzzle/9) for an example of how to make a scoreboard.

        For each display board:

        -   Create a function to display the information
        -   Call the function in the draw loop

        Be sure to test your boards by changing the starting value of your variables and making sure the board also changes when you run the code.
      CSD U3 game interactions: |-
        # Sprite Interactions

        The last step is to create the functions that make your sprites interact in the right ways.  You'll need a function for each type of sprite interaction. You can use the `collectItems` in [Lesson 21 Puzzle 17](/s/csd3-2017/stage/21/puzzle/17) and `displaceEnemies` in [Lesson 20 Puzzle 15](/s/csd3-2017/stage/20/puzzle/15) as examples.

        For each interaction:

        -   Create a function in the functions area of your code
        -   Call the function inside the draw loop

        After you make each function, run the code to test it before making another.
      CSD U3 game interactions_2018: |-
        # Sprite Interactions

        The last step is to create the functions that make your sprites interact in the right ways.  You'll need a function for each type of sprite interaction. You can use the `collectItems` in [Lesson 21 Puzzle 17](/s/csd3-2018/stage/21/puzzle/17) and `displaceEnemies` in [Lesson 20 Puzzle 15](/s/csd3-2018/stage/20/puzzle/15) as examples.

        For each interaction:

        -   Create a function in the functions area of your code
        -   Call the function inside the draw loop

        After you make each function, run the code to test it before making another.
      CSD U3 game interactions_2019: |-
        # Sprite Interactions

        The last step is to create the functions that make your sprites interact in the right ways.  You'll need a function for each type of sprite interaction. You can use the `collectItems` in [Lesson 21 Puzzle 17](../../21/puzzle/17) and `displaceEnemies` in [Lesson 20 Puzzle 15](../../20/puzzle/15) as examples.

        For each interaction:

        -   Create a function in the functions area of your code
        -   Call the function inside the draw loop

        After you make each function, run the code to test it before making another.
      CSD U3 game sprite movement: |-
        # Sprite Movement Functions

        Now you'll make the functions that make the sprite move in different ways as the game is played.  Some examples of functions that you've written are `loopPlatforms` in [Lesson 21 Puzzle 9](/s/csd3-2017/stage/21/puzzle/9) and `playerFall` in [Lesson 21 Puzzle 14](/s/csd3-2017/stage/21/puzzle/14).

        For each movement:

        -   Create a function that will make the sprite move in that way
        -   Call the function inside the draw loop
      CSD U3 game sprite movement_2018: |-
        # Sprite Movement Functions

        Now you'll make the functions that make the sprite move in different ways as the game is played.  Some examples of functions that you've written are `loopPlatforms` in [Lesson 21 Puzzle 9](../../../stage/21/puzzle/9) and `playerFall` in [Lesson 21 Puzzle 14](../../../stage/21/puzzle/14).

        For each movement:

        -   Create a function that will make the sprite move in that way
        -   Call the function inside the draw loop
      CSD U3 game sprite movement_2019: |-
        # Sprite Movement Functions

        Now you'll make the functions that make the sprite move in different ways as the game is played.  Some examples of functions that you've written are `loopPlatforms` in [Lesson 21 Puzzle 9](../../../stage/21/puzzle/9) and `playerFall` in [Lesson 21 Puzzle 14](../../../stage/21/puzzle/14).

        For each movement:

        -   Create a function that will make the sprite move in that way
        -   Call the function inside the draw loop
      CSD U3 game user controls: |-
        # User Controls

        Next, you'll want to make sure your user controls are working.  Create a function that makes your sprites respond to user controls as defined in your project guide.  You can use the function in in [Lesson 20 Puzzle 13](/s/csd3-2017/stage/20/puzzle/13) as an example.
      CSD U3 game user controls_2018: |-
        # User Controls

        Next, you'll want to make sure your user controls are working.  Create a function that makes your sprites respond to user controls as defined in your project guide.  You can use the function in in [Lesson 20 Puzzle 13](../../20/puzzle/13) as an example.
      CSD U3 game user controls_2019: |-
        # User Controls

        Next, you'll want to make sure your user controls are working.  Create a function that makes your sprites respond to user controls as defined in your project guide.  You can use the function in in [Lesson 20 Puzzle 13](../../20/puzzle/13) as an example.
      CSD U3 game variables: |-
        # Create your Variables

        First, you'll need to create all of your variables and put them in the variables area of your code.

        -   [Show me the block](#triggercallout=callout1)
        -   [Show me the area in the code](#triggercallout=callout2)

        Don't forget, each variable needs a label (name) and a starting value.  You can change the value of the variable later in your code.
      CSD U3 game variables_2018: |-
        # Create your Variables

        First, you'll need to create all of your variables and put them in the variables area of your code.

        -   [Show me the block](#triggercallout=callout1)
        -   [Show me the area in the code](#triggercallout=callout2)

        Don't forget, each variable needs a label (name) and a starting value.  You can change the value of the variable later in your code.
      CSD U3 game variables_2019: |-
        # Create your Variables

        First, you'll need to create all of your variables and put them in the variables area of your code.

        -   [Show me the block](#triggercallout=callout1)
        -   [Show me the area in the code](#triggercallout=callout2)

        Don't forget, each variable needs a label (name) and a starting value.  You can change the value of the variable later in your code.
      CSD U3 if else predict: Predict Level, see contained level for instructions.
      CSD U3 keydown conditional: "# Hareketli Nesneleri Değiştirmek\\\r\n\n\\\r\nSon
        bölümde 'a' tuşuna basıldığında  'keyDown' komutunun 'doğru' değerini  ve
        hiç bir tuşa basıldığında 'yanlış' değerini geri döndürdüğünü gördünüz. 'keyDown'
        girişi için tırnaklar içindeki kontrol etmek istediğiniz tuş adıdır. Bunlardan
        bazıları \"x\", \"yukarı\" ve \"boşluk\" tuşlarıdır.\\\r\n\\\r\nTuş basılmalarına
        göre animasyonları değiştirmek için 'keyDown' komutunu bir eğer ('if') ifadesi
        için giriş olarak kullanabiliriz.\\\r\n\\\r\n\n# \n\nBunu Yap\\\r\n\n-   Kodu
        çalıştır ve yukarı ve aşağı tuşlarına basmayı dene.\\\r\n-   Kodun nasıl çalıştığını
        görmek için eğer ('if') blokunun içine bak.\\\r\n-   Animasyonu farklı bir
        hayvan ile değiştirmek için üçüncü eğer ('if') ifadesinin içine bir blok ekleyin.\\\r\n
        \   \\\r\n    _İpucu:\n    Animasyonlar sekmesinde bulunan tavşanı kullanabilir
        ya da yeni bir animasyon ekleyebilirsin._"
      CSD U3 keydown conditional_2018: |-
        # Changing Sprites

        You saw on the last level that `keyDown` returns `true` while you are holding a key down and `false` when the key is not pressed down.   The input for the `keyDown` command is the name of key you want to check in quotes. Some examples are "x", "up" and "space".

        We can use `keyDown` as an input to an `if` statement to change our animations based on key presses!

        # Do This

        -   Run the code and try pressing the "p" and "h" keys.
        -   Look inside the `if` statement to see how the code works.
        -   Add a block inside the third `if` statement to change the animation to a different animal.

        _Challenge: When you use `setAnimation`, it keeps the new animation until you change it again.  Can you change the code so that the sprite will automatically go back to a giraffe when you're not holding one of the keys down?_
      CSD U3 keydown conditional_2018_2019: |-
        # Changing Sprites

        You saw on the last level that `keyDown` returns `true` while you are holding a key down and `false` when the key is not pressed down.   The input for the `keyDown` command is the name of key you want to check in quotes. Some examples are "x", "up" and "space".

        We can use `keyDown` as an input to an `if` statement to change our animations based on key presses!

        # Do This

        -   Run the code and try pressing the "p" and "h" keys.
        -   Look inside the `if` statement to see how the code works.
        -   Add a block inside the third `if` statement to change the animation to a different animal.

        _Challenge: When you use `setAnimation`, it keeps the new animation until you change it again.  Can you change the code so that the sprite will automatically go back to a giraffe when you're not holding one of the keys down?_
      CSD U3 picture: "# Meydan Okuma: Bir Resim Çiz\\\r\n\n\\\r\n_Herhangi bir meydan
        okuma ile mücadele etmeden önce öğretmenin ile birlikte kontrol et._\\\r\n\\\r\nBir
        önceki derste ortağın ile birlikte bir çok ilginç resimler oluşturdunuz. Bunlardan
        bir tanesini kod ile yeniden oluşturabildiğini görelim."
      CSD U3 picture_2018: "# Meydan Okuma: Bir Resim Çiz\\\r\n\n\\\r\n_Herhangi bir
        meydan okuma ile mücadele etmeden önce öğretmenin ile birlikte kontrol et._\\\r\n\\\r\nBir
        önceki derste ortağın ile birlikte bir çok ilginç resimler oluşturdunuz. Bunlardan
        bir tanesini kod ile yeniden oluşturabildiğini görelim."
      CSD U3 picture_2019: "# Meydan Okuma: Bir Resim Çiz\\\r\n\n\\\r\n_Herhangi bir
        meydan okuma ile mücadele etmeden önce öğretmenin ile birlikte kontrol et._\\\r\n\\\r\nBir
        önceki derste ortağın ile birlikte bir çok ilginç resimler oluşturdunuz. Bunlardan
        bir tanesini kod ile yeniden oluşturabildiğini görelim."
      CSD U3 platform background1: |-
        # Background

        The first thing that you will create for your game is the background.   The sample game had two different backgrounds that were chosen according to the user's score.  The first background has already been created for you.  Look at the `background1` function in the code below to see how it works. ([Show me where](#triggercallout=code_triggered1))

        In order for the background function to do something, you have to call it inside the draw loop. ([Show me where](#triggercallout=code_triggered2))

        There is also an empty function named `background2`. ([Show me where](#triggercallout=code_triggered3))  You will need to fill that function with new code to make a different background, then test the code by calling the function inside the draw loop.

        # Do this

        -   Read the code for `background1`.
        -   Fill the `background2` function with new code for a second background.
        -   Test your `background2` function by calling it inside the draw loop.

        _Hint: It's much easier to copy, paste, and make small changes to your code in text mode._
      CSD U3 platform background1_2018: |-
        # Background

        The first thing that you will create for your game is the background.   The sample game had two different backgrounds that were chosen according to the user's score.  The first background has already been created for you.  Look at the `background1` function in the code below to see how it works. ([Show me where](#triggercallout=code_triggered1))

        In order for the background function to do something, you have to call it inside the draw loop. ([Show me where](#triggercallout=code_triggered2))

        There is also an empty function named `background2`. ([Show me where](#triggercallout=code_triggered3))  You will need to fill that function with new code to make a different background, then test the code by calling the function inside the draw loop.

        # Do this

        -   Read the code for `background1`.
        -   Fill the `background2` function with new code for a second background.
        -   Test your `background2` function by calling it inside the draw loop.

        _Hint: It's much easier to copy, paste, and make small changes to your code in text mode._
      CSD U3 platform background1_2019: |-
        # Background

        The first thing that you will create for your game is the background.   The sample game had two different backgrounds that were chosen according to the user's score.  The first background has already been created for you.  Look at the `background1` function in the code below to see how it works. ([Show me where](#triggercallout=code_triggered1))

        In order for the background function to do something, you have to call it inside the draw loop. ([Show me where](#triggercallout=code_triggered2))

        There is also an empty function named `background2`. ([Show me where](#triggercallout=code_triggered3))  You will need to fill that function with new code to make a different background, then test the code by calling the function inside the draw loop.

        # Do this

        -   Read the code for `background1`.
        -   Fill the `background2` function with new code for a second background.
        -   Test your `background2` function by calling it inside the draw loop.

        _Hint: It's much easier to copy, paste, and make small changes to your code in text mode._
      CSD U3 platform background2: |-
        # Choosing your Background

        Now that you have your score variable, you can use it to choose the right background for your game.  You can see an example of changing your background according to your score in [Lesson 19 Level 11](/s/csd3-2017/stage/19/puzzle/11)

        # Do This

        -   Inside the draw loop, use an `if` statement and your two background functions to draw your background according to your score level.
        -   Test your code by changing the start score to 100, then running to code to see whether the background changes.

        _Challenge: If you have a third background, you can click the plus sign at the bottom of the `if` block.  Another space will appear for your third background function, as well as a place to check the score again._
      CSD U3 platform background2_2018: |-
        # Choosing your Background

        Now that you have your score variable, you can use it to choose the right background for your game.  You can see an example of changing your background according to your score in [Lesson 19 Level 11](/s/csd3-2018/stage/19/puzzle/11)

        # Do This

        -   Inside the draw loop, use an `if` statement and your two background functions to draw your background according to your score level.
        -   Test your code by changing the start score to 100, then running to code to see whether the background changes.

        _Challenge: If you have a third background, you can click the plus sign at the bottom of the `if` block.  Another space will appear for your third background function, as well as a place to check the score again._
      CSD U3 platform background2_2019: |-
        # Choosing your Background

        Now that you have your score variable, you can use it to choose the right background for your game.  You can see an example of changing your background according to your score in [Lesson 19 Level 12](../../19/puzzle/12)

        # Do This

        -   Inside the draw loop, use an `if` statement and your two background functions to draw your background according to your score level.
        -   Test your code by changing the start score to 100, then running to code to see whether the background changes.

        _Challenge: If you have a third background, you can click the plus sign at the bottom of the `if` block.  Another space will appear for your third background function, as well as a place to check the score again._
      CSD U3 platform challenge: |-
        # Improve Your Game

        Improve your game by adding in two or more of the features you saw in the last two examples.  You can use the list below to help you.

        -   Choose new animations for your player, platform, and items.
        -   Prevent your player from going off the side of the screen.
        -   Add a different type of item for the player to collect or avoid.
        -   Add a variable that keeps track of how many lives the player has, and end the game if the player runs out.
        -   Make your player's animation change direction when the player changes direction.
        -   Change the player to only jump when it is on a platform.
        -   Add another background and make it appear when the score gets even higher.
        -   Make your items interact with the platforms in some way.
      CSD U3 platform challenge_2018: |-
        # Improve Your Game

        Improve your game by adding in two or more of the features you saw in the last two examples.  You can use the list below to help you.

        -   Choose new animations for your player, platform, and items.
        -   Prevent your player from going off the side of the screen.
        -   Add a different type of item for the player to collect or avoid.
        -   Add a variable that keeps track of how many lives the player has, and end the game if the player runs out.
        -   Make your player's animation change direction when the player changes direction.
        -   Change the player to only jump when it is on a platform.
        -   Add another background and make it appear when the score gets even higher.
        -   Make your items interact with the platforms in some way.
      CSD U3 platform challenge_2019: |-
        # Improve Your Game

        Improve your game by adding in two or more of the features you saw in the last two examples.  You can use the list below to help you.

        -   Choose new animations for your player, platform, and items.
        -   Prevent your player from going off the side of the screen.
        -   Add a different type of item for the player to collect or avoid.
        -   Add a variable that keeps track of how many lives the player has, and end the game if the player runs out.
        -   Make your player's animation change direction when the player changes direction.
        -   Change the player to only jump when it is on a platform.
        -   Add another background and make it appear when the score gets even higher.
        -   Make your items interact with the platforms in some way.
      CSD U3 platform items1: |-
        # Create an Item

        <img src="https://images.code.org/2cdb64a2e23e68c8a86296240642cd13-image-1476211650103.gif" style="float:right;">

        Next, you need to add the items that fall from the top of the screen.  These move just like the platforms, but faster.  In order to make the game more interesting, the items start at a random location above the screen.  For the sample game, the item's x position is a random number between 50 and 350, and the y position is a random number between -30 and -60.

        # Do This

        -   Use the `createSprite` block to make an item sprite in the "create sprites" section of your code.
        -   Use the `randomNumber` block inside your `createSprite` block to start the item at a random x and y position.
        -   Use `setAnimation` and `velocityY` to give your sprite the correct image and make it fall from the top of the screen.
        -   Run the code to test your sprite.
      CSD U3 platform items1_2018: |-
        # Create an Item

        <img src="https://images.code.org/2cdb64a2e23e68c8a86296240642cd13-image-1476211650103.gif" style="float:right;">

        Next, you need to add the items that fall from the top of the screen.  These move just like the platforms, but faster.  In order to make the game more interesting, the items start at a random location above the screen.  For the sample game, the item's x position is a random number between 50 and 350, and the y position is a random number between -30 and -60.

        # Do This

        -   Use the `createSprite` block to make an item sprite in the "create sprites" section of your code.
        -   Use the `randomNumber` block inside your `createSprite` block to start the item at a random x and y position.
        -   Use `setAnimation` and `velocityY` to give your sprite the correct image and make it fall from the top of the screen.
        -   Run the code to test your sprite.
      CSD U3 platform items1_2019: |-
        # Create an Item

        <img src="https://images.code.org/2cdb64a2e23e68c8a86296240642cd13-image-1476211650103.gif" style="float:right;">

        Next, you need to add the items that fall from the top of the screen.  These move just like the platforms, but faster.  In order to make the game more interesting, the items start at a random location above the screen.  For the sample game, the item's x position is a random number between 50 and 350, and the y position is a random number between -30 and -60.

        # Do This

        -   Use the `createSprite` block to make an item sprite in the "create sprites" section of your code.
        -   Use the `randomNumber` block inside your `createSprite` block to start the item at a random x and y position.
        -   Use `setAnimation` and `velocityY` to give your sprite the correct image and make it fall from the top of the screen.
        -   Run the code to test your sprite.
      CSD U3 platform items2: |-
        # Loop your Item

        <img src="https://images.code.org/bf06ad06acbba65dfd48b63608a08c90-image-1476212006882.gif" style="float:right">
        Now that your item is falling, you can add code to loop it back to the top.  This is similar to what you did for the platform sprite, but the item sprite will loop back to a random x and y location when it goes to the top of the screen.

        # Do This

        -   Create a `loopItems` function that uses an `if` block to check whether the item sprite is off the bottom of the screen, then sends the item back to a random x and y position, just as it did when you first created the sprite.
        -   Call the function inside the draw loop.
        -   Run the code to test your sprite.
      CSD U3 platform items2_2018: |-
        # Loop your Item

        <img src="https://images.code.org/bf06ad06acbba65dfd48b63608a08c90-image-1476212006882.gif" style="float:right">
        Now that your item is falling, you can add code to loop it back to the top.  This is similar to what you did for the platform sprite, but the item sprite will loop back to a random x and y location when it goes to the top of the screen.

        # Do This

        -   Create a `loopItems` function that uses an `if` block to check whether the item sprite is off the bottom of the screen, then sends the item back to a random x and y position, just as it did when you first created the sprite.
        -   Call the function inside the draw loop.
        -   Run the code to test your sprite.
      CSD U3 platform items2_2019: |-
        # Loop your Item

        <img src="https://images.code.org/bf06ad06acbba65dfd48b63608a08c90-image-1476212006882.gif" style="float:right">
        Now that your item is falling, you can add code to loop it back to the top.  This is similar to what you did for the platform sprite, but the item sprite will loop back to a random x and y location when it goes to the top of the screen.

        # Do This

        -   Create a `loopItems` function that uses an `if` block to check whether the item sprite is off the bottom of the screen, then sends the item back to a random x and y position, just as it did when you first created the sprite.
        -   Call the function inside the draw loop.
        -   Run the code to test your sprite.
      CSD U3 platform items3: |-
        # Make your Second Item

        <img src="https://images.code.org/dfd53f2ea4b4380c126dde8035bcdc45-image-1476212495388.gif" style="float: right">

        Next, you'll copy and paste the code for your first item to create a second item.  Remember that this is a lot easier in **text mode**, so be sure to try it out if you haven't already.

        You'll need to copy two parts of your code: the part at the beginning where you made the item, and the part in your `loopItem` function, where you looped the item back to the top of the screen.

        # Do This

        -   Copy the code you used to create the first item sprite (`createSprite`, `setAnimation`, and `velocityY`), and paste it directly beneath the original code.
        -   Change the names of the sprite in the new lines.  For example, if you named your original sprite "star", you could name this one "star2".
        -   Inside your `loopItems` function, copy the if statement, then paste it directly underneath the original code, inside the function.
        -   Change the sprite name in the new lines of code.
        -   Run your code to test it.
      CSD U3 platform items3_2018: |-
        # Make your Second Item

        <img src="https://images.code.org/dfd53f2ea4b4380c126dde8035bcdc45-image-1476212495388.gif" style="float: right">

        Next, you'll copy and paste the code for your first item to create a second item.  Remember that this is a lot easier in **text mode**, so be sure to try it out if you haven't already.

        You'll need to copy two parts of your code: the part at the beginning where you made the item, and the part in your `loopItem` function, where you looped the item back to the top of the screen.

        # Do This

        -   Copy the code you used to create the first item sprite (`createSprite`, `setAnimation`, and `velocityY`), and paste it directly beneath the original code.
        -   Change the names of the sprite in the new lines.  For example, if you named your original sprite "star", you could name this one "star2".
        -   Inside your `loopItems` function, copy the if statement, then paste it directly underneath the original code, inside the function.
        -   Change the sprite name in the new lines of code.
        -   Run your code to test it.
      CSD U3 platform items3_2019: |-
        # Make your Second Item

        <img src="https://images.code.org/dfd53f2ea4b4380c126dde8035bcdc45-image-1476212495388.gif" style="float: right">

        Next, you'll copy and paste the code for your first item to create a second item.  Remember that this is a lot easier in **text mode**, so be sure to try it out if you haven't already.

        You'll need to copy two parts of your code: the part at the beginning where you made the item, and the part in your `loopItem` function, where you looped the item back to the top of the screen.

        # Do This

        -   Copy the code you used to create the first item sprite (`createSprite`, `setAnimation`, and `velocityY`), and paste it directly beneath the original code.
        -   Change the names of the sprite in the new lines.  For example, if you named your original sprite "star", you could name this one "star2".
        -   Inside your `loopItems` function, copy the if statement, then paste it directly underneath the original code, inside the function.
        -   Change the sprite name in the new lines of code.
        -   Run your code to test it.
      CSD U3 platform platform1: "# Create a Platform Sprite\n\n<img src=\"https://images.code.org/6e5aa80eb72809d761a695fae1b42b81-image-1476210749306.gif\"
        style=\"float: right;\"> \n\nNow that you have your background and your variables,
        it's time to create your sprites.  Usually, it will be easiest to start with
        the sprites that are part of the environment, such as your platforms.  The
        sample game had two platform sprites, but you'll make just one first, then
        test it before copying and pasting the code to make the second.\n\n# Do This\n\n-
        \  Look at your worksheet and choose a platform sprite to create.\n-   In
        the \"Create sprites\" area at the top of your code, create your new sprite
        with the `createSprite` block, giving it the correct position and label (name).
        ([Show me the block](#triggercallout=callout))\n-   Use the `setAnimation`
        and `velocityY` blocks to give your sprite the correct image and downward
        velocity.\n-   Test the sprite to make sure that it's moving in the correct
        way.  You might need to adjust its velocity.\n\n_Hint: The sprite will go
        off the screen and not come back.  You'll make it loop back around in the
        next level._"
      CSD U3 platform platform1_2018: "# Create a Platform Sprite\n\n<img src=\"https://images.code.org/6e5aa80eb72809d761a695fae1b42b81-image-1476210749306.gif\"
        style=\"float: right;\"> \n\nNow that you have your background and your variables,
        it's time to create your sprites.  Usually, it will be easiest to start with
        the sprites that are part of the environment, such as your platforms.  The
        sample game had two platform sprites, but you'll make just one first, then
        test it before copying and pasting the code to make the second.\n\n# Do This\n\n-
        \  Look at your worksheet and choose a platform sprite to create.\n-   In
        the \"Create sprites\" area at the top of your code, create your new sprite
        with the `createSprite` block, giving it the correct position and label (name).
        ([Show me the block](#triggercallout=callout))\n-   Use the `setAnimation`
        and `velocityY` blocks to give your sprite the correct image and downward
        velocity.\n-   Test the sprite to make sure that it's moving in the correct
        way.  You might need to adjust its velocity.\n\n_Hint: The sprite will go
        off the screen and not come back.  You'll make it loop back around in the
        next level._"
      CSD U3 platform platform1_2019: "# Create a Platform Sprite\n\n<img src=\"https://images.code.org/6e5aa80eb72809d761a695fae1b42b81-image-1476210749306.gif\"
        style=\"float: right;\"> \n\nNow that you have your background and your variables,
        it's time to create your sprites.  Usually, it will be easiest to start with
        the sprites that are part of the environment, such as your platforms.  The
        sample game had two platform sprites, but you'll make just one first, then
        test it before copying and pasting the code to make the second.\n\n# Do This\n\n-
        \  Look at your worksheet and choose a platform sprite to create.\n-   In
        the \"Create sprites\" area at the top of your code, create your new sprite
        with the `createSprite` block, giving it the correct position and label (name).
        ([Show me the block](#triggercallout=callout))\n-   Use the `setAnimation`
        and `velocityY` blocks to give your sprite the correct image and downward
        velocity.\n-   Test the sprite to make sure that it's moving in the correct
        way.  You might need to adjust its velocity.\n\n_Hint: The sprite will go
        off the screen and not come back.  You'll make it loop back around in the
        next level._"
      CSD U3 platform platform2: |-
        # Loop the Platform Sprite

        <img src="https://images.code.org/6bfe6dd078b2022315a7f54a38c90826-image-1476211068588.gif" style="float: right;">

        Right now, your platform sprite moves down, but it doesn't loop back up to the top of the screen. You can look at [Lesson 15 Level 13](/s/csd3-2017/stage/15/puzzle/13) to see an example of a sprite looping around a screen.

        # Do This

        -   Use the `function` block to create a `loopPlatforms` function at the bottom of your code.
        -   Use the `if` block inside the function to check whether the platform has gone off the bottom of screen and, if it has, move it back to the top of the screen.
        -   Call the function inside the draw loop, in the "update sprites" area.
        -   Run the code to test your sprite.

        _Hint: What will platform.y be when the sprite moves off the bottom of the screen?  What should platform.y be when you put it back at the top of the screen?_
      CSD U3 platform platform2_2018: |-
        # Loop the Platform Sprite

        <img src="https://images.code.org/6bfe6dd078b2022315a7f54a38c90826-image-1476211068588.gif" style="float: right;">

        Right now, your platform sprite moves down, but it doesn't loop back up to the top of the screen. You can look at [Lesson 15 Level 13](/s/csd3-2018/stage/15/puzzle/13) to see an example of a sprite looping around a screen.

        # Do This

        -   Use the `function` block to create a `loopPlatforms` function at the bottom of your code.
        -   Use the `if` block inside the function to check whether the platform has gone off the bottom of screen and, if it has, move it back to the top of the screen.
        -   Call the function inside the draw loop, in the "update sprites" area.
        -   Run the code to test your sprite.

        _Hint: What will platform.y be when the sprite moves off the bottom of the screen?  What should platform.y be when you put it back at the top of the screen?_
      CSD U3 platform platform2_2019: |-
        # Loop the Platform Sprite

        <img src="https://images.code.org/6bfe6dd078b2022315a7f54a38c90826-image-1476211068588.gif" style="float: right;">

        Right now, your platform sprite moves down, but it doesn't loop back up to the top of the screen. You can look at [Lesson 15 Level 13](../../15/puzzle/13) to see an example of a sprite looping around a screen.

        # Do This

        -   Use the `function` block to create a `loopPlatforms` function at the bottom of your code.
        -   Use the `if` block inside the function to check whether the platform has gone off the bottom of screen and, if it has, move it back to the top of the screen.
        -   Call the function inside the draw loop, in the "update sprites" area.
        -   Run the code to test your sprite.

        _Hint: What will platform.y be when the sprite moves off the bottom of the screen?  What should platform.y be when you put it back at the top of the screen?_
      CSD U3 platform platform3: |-
        # Make your Second Platform

        <img src="https://images.code.org/94abf92949a82f6ba18a8cfafb9231b1-image-1476211447371.gif" style="float:right;">

        Making a second platform will be easier than making the first, because you can copy and paste a lot of the code, then make a few small changes.  This is a lot easier in _text mode_, so be sure to try it out if you haven't already.

        You'll need to copy two parts of your code: the part at the beginning where you made the platform, and the part in your `loopPlatforms` function, where you looped the platform back to the top of the screen.

        # Do This

        -   Copy the code you used to create the first platform sprite (`createSprite`, `setAnimation`, and `velocityY`), and paste it directly beneath the original code.
        -   Change the names of the sprite in the new lines.  For example, if you named your original sprite "platform", you could name this one "platform2".
        -   Change the starting position of your new platform sprite.
        -   Inside your `loopPlatforms` function, copy the if statement, then paste it directly underneath the original code, inside the function.
        -   Change the sprite name in the new lines of code.
        -   Run your code to test it.

        _Challenge: You can make your platforms appear at random x positions when they loop back to the top of the screen._
      CSD U3 platform platform3_2018: |-
        # Make your Second Platform

        <img src="https://images.code.org/94abf92949a82f6ba18a8cfafb9231b1-image-1476211447371.gif" style="float:right;">

        Making a second platform will be easier than making the first, because you can copy and paste a lot of the code, then make a few small changes.  This is a lot easier in _text mode_, so be sure to try it out if you haven't already.

        You'll need to copy two parts of your code: the part at the beginning where you made the platform, and the part in your `loopPlatforms` function, where you looped the platform back to the top of the screen.

        # Do This

        -   Copy the code you used to create the first platform sprite (`createSprite`, `setAnimation`, and `velocityY`), and paste it directly beneath the original code.
        -   Change the names of the sprite in the new lines.  For example, if you named your original sprite "platform", you could name this one "platform2".
        -   Change the starting position of your new platform sprite.
        -   Inside your `loopPlatforms` function, copy the if statement, then paste it directly underneath the original code, inside the function.
        -   Change the sprite name in the new lines of code.
        -   Run your code to test it.

        _Challenge: You can make your platforms appear at random x positions when they loop back to the top of the screen._
      CSD U3 platform platform3_2019: |-
        # Make your Second Platform

        <img src="https://images.code.org/94abf92949a82f6ba18a8cfafb9231b1-image-1476211447371.gif" style="float:right;">

        Making a second platform will be easier than making the first, because you can copy and paste a lot of the code, then make a few small changes.  This is a lot easier in _text mode_, so be sure to try it out if you haven't already.

        You'll need to copy two parts of your code: the part at the beginning where you made the platform, and the part in your `loopPlatforms` function, where you looped the platform back to the top of the screen.

        # Do This

        -   Copy the code you used to create the first platform sprite (`createSprite`, `setAnimation`, and `velocityY`), and paste it directly beneath the original code.
        -   Change the names of the sprite in the new lines.  For example, if you named your original sprite "platform", you could name this one "platform2".
        -   Change the starting position of your new platform sprite.
        -   Inside your `loopPlatforms` function, copy the if statement, then paste it directly underneath the original code, inside the function.
        -   Change the sprite name in the new lines of code.
        -   Run your code to test it.

        _Challenge: You can make your platforms appear at random x positions when they loop back to the top of the screen._
      CSD U3 platform player1: |-
        # Create your Player

        <img src="https://images.code.org/8358b8d2eef2461e113e0b3093da7403-image-1476212944204.gif" style="float:right">

        Now you can create your player sprite.  Just like the item sprites, the player sprite will fall from the top of the screen.  Unlike the items, your player sprite will get faster as it falls, just like real falling objects.  This is what allows it to jump up, and fall back down.

        # Do This

        -   Use the `createSprite` block to make a player sprite with the label and starting position that you put on your worksheet.
        -   Use `setAnimation` to give it the correct image.
        -   Create a `playerFall` function that makes the sprite fall from the top of the screen.  The code inside the function should use `velocityY` in a counter pattern, just as when you made the falling rock in [Lesson 17 Level 4](/s/csd3-2017/stage/17/puzzle/4).
        -   Call the `playerFall` function inside the draw loop.
        -   Run the code to test your sprite.
      CSD U3 platform player1_2018: |-
        # Create your Player

        <img src="https://images.code.org/8358b8d2eef2461e113e0b3093da7403-image-1476212944204.gif" style="float:right">

        Now you can create your player sprite.  Just like the item sprites, the player sprite will fall from the top of the screen.  Unlike the items, your player sprite will get faster as it falls, just like real falling objects.  This is what allows it to jump up, and fall back down.

        # Do This

        -   Use the `createSprite` block to make a player sprite with the label and starting position that you put on your worksheet.
        -   Use `setAnimation` to give it the correct image.
        -   Create a `playerFall` function that makes the sprite fall from the top of the screen.  The code inside the function should use `velocityY` in a counter pattern, just as when you made the falling rock in [Lesson 17 Level 4](/s/csd3-2018/stage/17/puzzle/4).
        -   Call the `playerFall` function inside the draw loop.
        -   Run the code to test your sprite.
      CSD U3 platform player1_2019: |-
        # Create your Player

        <img src="https://images.code.org/8358b8d2eef2461e113e0b3093da7403-image-1476212944204.gif" style="float:right">

        Now you can create your player sprite.  Just like the item sprites, the player sprite will fall from the top of the screen.  Unlike the items, your player sprite will get faster as it falls, just like real falling objects.  This is what allows it to jump up, and fall back down.

        # Do This

        -   Use the `createSprite` block to make a player sprite with the label and starting position that you put on your worksheet.
        -   Use `setAnimation` to give it the correct image.
        -   Create a `playerFall` function that makes the sprite fall from the top of the screen.  The code inside the function should use `velocityY` in a counter pattern, just as when you made the falling rock in [Lesson 17 Level 4](../../17/puzzle/4).
        -   Call the `playerFall` function inside the draw loop.
        -   Run the code to test your sprite.
      CSD U3 platform player2: |-
        # User Controls

        Next, you should add user controls so that you can move your player around.  Your player needs to move to the left when the left arrow key is pressed, to the right when the right arrow key is pressed, and jump when the space bar is pressed.

        # Do This

        -   Create a new `controlPlayer` function in the "functions" area of your code.
        -   Inside the `controlPlayer` function, use the `if`, `keyDown`, and `sprite.x` blocks to make your player move to the left and right according to the arrow keys.  Look at <a href="/s/csd3-2017/stage/12/puzzle/7" target="_blank"> Lesson 12 Puzzle 7 </a> for examples.
        -   Inside the `controlPlayer` function, use the `if`, `keyDown`, and `velocityY` blocks to make your player jump when the up arrow is pressed.  Look at <a href="/s/csd3-2017/stage/15/puzzle/11" target="_blank"> Lesson 15 Puzzle 11 </a> for an example.
        -   Call the `controlPlayer` function inside the draw loop.
        -   Run the game and test your code.
      CSD U3 platform player2_2018: |-
        # User Controls

        Next, you should add user controls so that you can move your player around.  Your player needs to move to the left when the left arrow key is pressed, to the right when the right arrow key is pressed, and jump when the space bar is pressed.

        # Do This

        -   Create a new `controlPlayer` function in the "functions" area of your code.
        -   Inside the `controlPlayer` function, use the `if`, `keyDown`, and `sprite.x` blocks to make your player move to the left and right according to the arrow keys.  Look at <a href="/s/csd3-2018/stage/12/puzzle/7" target="_blank"> Lesson 12 Puzzle 7 </a> for examples.
        -   Inside the `controlPlayer` function, use the `if`, `keyDown`, and `velocityY` blocks to make your player jump when the up arrow is pressed.  Look at <a href="/s/csd3-2018/stage/15/puzzle/11" target="_blank"> Lesson 15 Puzzle 11 </a> for an example.
        -   Call the `controlPlayer` function inside the draw loop.
        -   Run the game and test your code.
      CSD U3 platform player2_2019: |-
        # User Controls

        Next, you should add user controls so that you can move your player around.  Your player needs to move to the left when the left arrow key is pressed, to the right when the right arrow key is pressed, and jump when the space bar is pressed.

        # Do This

        -   Create a new `controlPlayer` function in the "functions" area of your code.
        -   Inside the `controlPlayer` function, use the `if`, `keyDown`, and `sprite.x` blocks to make your player move to the left and right according to the arrow keys.  Look at <a href="../../12/puzzle/7" target="_blank"> Lesson 12 Puzzle 7 </a> for examples.
        -   Inside the `controlPlayer` function, use the `if`, `keyDown`, and `velocityY` blocks to make your player jump when the up arrow is pressed.  Look at <a href="../../15/puzzle/11" target="_blank"> Lesson 15 Puzzle 11 </a> for an example.
        -   Call the `controlPlayer` function inside the draw loop.
        -   Run the game and test your code.
      CSD U3 platform player3: |-
        # Player Interactions

        The last part of making your game is programming the player interactions with the other sprites.  First, your player needs to land on the platforms.

        # Do This

        -   Create a `playerLands` function and add it to the "functions" area of your code.
        -   Inside the function, use the `collide` block so that your player can land on both the platforms.
        -   Call the function inside the draw loop.
        -   Run the code to test your function.
      CSD U3 platform player3_2018: |-
        # Player Interactions

        The last part of making your game is programming the player interactions with the other sprites.  First, your player needs to land on the platforms.

        # Do This

        -   Create a `playerLands` function and add it to the "functions" area of your code.
        -   Inside the function, use the `collide` block so that your player can land on both the platforms.
        -   Call the function inside the draw loop.
        -   Run the code to test your function.
      CSD U3 platform player3_2019: |-
        # Player Interactions

        The last part of making your game is programming the player interactions with the other sprites.  First, your player needs to land on the platforms.

        # Do This

        -   Create a `playerLands` function and add it to the "functions" area of your code.
        -   Inside the function, use the `collide` block so that your player can land on both the platforms.
        -   Call the function inside the draw loop.
        -   Run the code to test your function.
      CSD U3 platform player4: |-
        # Collect Items

        Last, you'll want your player to collect the items falling from the top of the screen.

        # Do This

        -   Create a `collectItems` function and add it to the "functions" area of your code.
        -   Use the `if` and `isTouching` blocks to change the x and y position of the items when the player touches them.  You can look at the `loopItem` function for clues in how to reset the item position.
        -   Inside your `if` statement, add a counter pattern that will increase the score every time the player touches an item.  Look at [Lesson 16 Puzzle 9](/s/csd3-2017/stage/16/puzzle/9) for an example.
        -   Call the function inside the draw loop, in the "update sprites" area of your code.
        -   Run the code to test your function.
      CSD U3 platform player4_2018: |-
        # Collect Items

        Last, you'll want your player to collect the items falling from the top of the screen.

        # Do This

        -   Create a `collectItems` function and add it to the "functions" area of your code.
        -   Use the `if` and `isTouching` blocks to change the x and y position of the items when the player touches them.  You can look at the `loopItem` function for clues in how to reset the item position.
        -   Inside your `if` statement, add a counter pattern that will increase the score every time the player touches an item.  Look at [Lesson 16 Puzzle 9](/s/csd3-2018/stage/16/puzzle/9) for an example.
        -   Call the function inside the draw loop, in the "update sprites" area of your code.
        -   Run the code to test your function.
      CSD U3 platform player4_2019: |-
        # Collect Items

        Last, you'll want your player to collect the items falling from the top of the screen.

        # Do This

        -   Create a `collectItems` function and add it to the "functions" area of your code.
        -   Use the `if` and `isTouching` blocks to change the x and y position of the items when the player touches them.  You can look at the `loopItem` function for clues in how to reset the item position.
        -   Inside your `if` statement, add a counter pattern that will increase the score every time the player touches an item.  Look at [Lesson 16 Puzzle 9](../../16/puzzle/9) for an example.
        -   Call the function inside the draw loop, in the "update sprites" area of your code.
        -   Run the code to test your function.
      CSD U3 platform sample1: |-
        # Platform Jumper

        The game on the left is an example of a platform jumper.  Press "Run" to play it.  You can make the alien jump with the up arrow, and move it to the left and right with the arrow keys.  You score by collecting stars, and if you score high enough, the background will change.

        You already know how to use all the blocks you need to make a game just like this one, and you'll be making your own platform jumper in this lesson.
      CSD U3 platform sample1_2018: |-
        # Platform Jumper

        The game on the left is an example of a platform jumper.  Press "Run" to play it.  You can make the alien jump with the up arrow, and move it to the left and right with the arrow keys.  You score by collecting stars, and if you score high enough, the background will change.

        You already know how to use all the blocks you need to make a game just like this one, and you'll be making your own platform jumper in this lesson.
      CSD U3 platform sample1_2019: |-
        # Platform Jumper

        The game on the left is an example of a platform jumper.  Press "Run" to play it.  You can make the alien jump with the up arrow, and move it to the left and right with the arrow keys.  You score by collecting stars, and if you score high enough, the background will change.

        You already know how to use all the blocks you need to make a game just like this one, and you'll be making your own platform jumper in this lesson.
      CSD U3 platform sample2: |-
        # Plane Jumper

        Here's another example of a platform jumper, but it has a few more features.  You can use it to get ideas to improve your own game.  For example, there is a coin sprite that gives the player an extra life.

        Choose one or more of the following changes and add them to your game.

        -   Choose new animations for your player, platform, and items.
        -   Make it impossible for your player to go off the left or right of the screen.
        -   Add a different type of item for the player to collect or avoid.
        -   Add a variable that keeps track of how many lives the player has, and end the game if the player runs out.
      CSD U3 platform sample2_2018: |-
        # Plane Jumper

        Here's another example of a platform jumper, but it has a few more features.  You can use it to get ideas to improve your own game.  For example, there is a coin sprite that gives the player an extra life.

        Choose one or more of the following changes and add them to your game.

        -   Choose new animations for your player, platform, and items.
        -   Make it impossible for your player to go off the left or right of the screen.
        -   Add a different type of item for the player to collect or avoid.
        -   Add a variable that keeps track of how many lives the player has, and end the game if the player runs out.
      CSD U3 platform sample2_2019: |-
        # Plane Jumper

        Here's another example of a platform jumper, but it has a few more features.  You can use it to get ideas to improve your own game.  For example, there is a coin sprite that gives the player an extra life.

        Choose one or more of the following changes and add them to your game.

        -   Choose new animations for your player, platform, and items.
        -   Make it impossible for your player to go off the left or right of the screen.
        -   Add a different type of item for the player to collect or avoid.
        -   Add a variable that keeps track of how many lives the player has, and end the game if the player runs out.
      CSD U3 platform sample3: |-
        # Bunny Jumper

        Here's another example of a jumper.  In this one, the items get faster when they fall, and bounce off the platforms.

        Choose one or more of the following changes and add them to your game.

        -   Make your player's animation change direction when the player changes direction.
        -   Add another background and make it appear when the score gets even higher.
        -   Make your items interact with the platforms in some way.
      CSD U3 platform sample3_2018: |-
        # Bunny Jumper

        Here's another example of a jumper.  In this one, the items get faster when they fall, and bounce off the platforms.

        Choose one or more of the following changes and add them to your game.

        -   Make your player's animation change direction when the player changes direction.
        -   Add another background and make it appear when the score gets even higher.
        -   Make your items interact with the platforms in some way.
      CSD U3 platform sample3_2019: |-
        # Bunny Jumper

        Here's another example of a jumper.  In this one, the items get faster when they fall, and bounce off the platforms.

        Choose one or more of the following changes and add them to your game.

        -   Make your player's animation change direction when the player changes direction.
        -   Add another background and make it appear when the score gets even higher.
        -   Make your items interact with the platforms in some way.
      CSD U3 platform scoreboard: |-
        # Make the Scoreboard

        <img src="https://images.code.org/ea490a1915a70676fd3a783adce93cdd-image-1476142534609.png" style="float:right;">

        You'll also need a scoreboard so the player can keep track of the score.   There's already a `showScore` function written, but it only shows the text "Score" and not the actual score. ([Show me where](#triggercallout=code_triggered))  You can see an example of a working scoreboard in [Lesson 16 Level 9](/s/csd3-2017/stage/16/puzzle/9).

        # Do This

        -   Read the code in the `showScore` function.
        -   Call the function inside the draw loop, right after you draw the backgrounds.
        -   Use the `text` block to display the score at the top of the screen.
      CSD U3 platform scoreboard_2018: |-
        # Make the Scoreboard

        <img src="https://images.code.org/ea490a1915a70676fd3a783adce93cdd-image-1476142534609.png" style="float:right;">

        You'll also need a scoreboard so the player can keep track of the score.   There's already a `showScore` function written, but it only shows the text "Score" and not the actual score. ([Show me where](#triggercallout=code_triggered))  You can see an example of a working scoreboard in [Lesson 16 Level 9](../../16/puzzle/9).

        # Do This

        -   Read the code in the `showScore` function.
        -   Call the function inside the draw loop, right after you draw the backgrounds.
        -   Use the `text` block to display the score at the top of the screen.
      CSD U3 platform scoreboard_2019: |-
        # Make the Scoreboard

        <img src="https://images.code.org/ea490a1915a70676fd3a783adce93cdd-image-1476142534609.png" style="float:right;">

        You'll also need a scoreboard so the player can keep track of the score.   There's already a `showScore` function written, but it only shows the text "Score" and not the actual score. ([Show me where](#triggercallout=code_triggered))  You can see an example of a working scoreboard in [Lesson 16 Level 9](../../16/puzzle/9).

        # Do This

        -   Read the code in the `showScore` function.
        -   Call the function inside the draw loop, right after you draw the backgrounds.
        -   Use the `text` block to display the score at the top of the screen.
      CSD U3 platform variable1: |-
        # Score Variable

        Now that you've created your backgrounds, you'll need to choose when each background is drawn.  For that, you'll need a score variable to hold information about your player's score.

        You should always give your variables a starting value at the very beginning of the program.  That way, they are available for any code that comes after.

        # Do This

        -   Create a score variable at the beginning of your game program. ( [Show me the block](#triggercallout=callout) )
        -   Set the score equal to 0.
      CSD U3 platform variable1_2018: |-
        # Score Variable

        Now that you've created your backgrounds, you'll need to choose when each background is drawn.  For that, you'll need a score variable to hold information about your player's score.

        You should always give your variables a starting value at the very beginning of the program.  That way, they are available for any code that comes after.

        # Do This

        -   Create a score variable at the beginning of your game program. ( [Show me the block](#triggercallout=callout) )
        -   Set the score equal to 0.
      CSD U3 platform variable1_2019: |-
        # Score Variable

        Now that you've created your backgrounds, you'll need to choose when each background is drawn.  For that, you'll need a score variable to hold information about your player's score.

        You should always give your variables a starting value at the very beginning of the program.  That way, they are available for any code that comes after.

        # Do This

        -   Create a score variable at the beginning of your game program. ( [Show me the block](#triggercallout=callout) )
        -   Set the score equal to 0.
      CSD U3 rect: "# Oyun Laboratuvarını Keşfet\\\r\n\n\\\r\nEtkileşimli animasyonlar
        ve oyunlar yapabileceğiniz Oyun Laboratuvarını hoşgeldiniz.!   \\\r\n\\\r\nDerste
        ızgaraya şekiller yerleştirme temellerinin alıştırmasını zaten yaptınız. Oyun
        Laboratuvarında soldaki ekranda aynısını yapacaksınız..\\\r\n\\\r\n\n# Bunu
        Yap\\\r\n\n\\\r\n\n-   Çalışma alanında aşağıdaki talimatlar için kod satırına
        bakın( [Nerede Olduğumu Göster](#triggercallout=block_trigger)\n    ) ve ortağınız
        ile ızgara üzerinde şekillerin nereye çizilmesi gerektiği konusunda tartışın.
        \ \\\r\n-   Programı çalıştırmak için  <img src=\"https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20\n
        \   PM.png\" width=100> tıklayın ve neler olduğunu görün. ( [Nerede Olduğumu
        Göster](#triggercallout=run_trigger)\n    )\\\r\n-   Bloğun içindeki sayıları
        değiştirin, sonra programı çalıştırmayı tekrar deneyin.\\\r\n-   \\*\n    Ekran
        alt sağ köşesinin yakınına dikdörtgeni yerleştirmeye çalışın."
      CSD U3 rect_2018: "# Oyun Laboratuvarını Keşfet\\\r\n\n\\\r\nEtkileşimli animasyonlar
        ve oyunlar yapabileceğiniz Oyun Laboratuvarını hoşgeldiniz.!   \\\r\n\\\r\nDerste
        ızgaraya şekiller yerleştirme temellerinin alıştırmasını zaten yaptınız. Oyun
        Laboratuvarında soldaki ekranda aynısını yapacaksınız..\\\r\n\\\r\n\n# Bunu
        Yap\\\r\n\n\\\r\n\n-   Çalışma alanında aşağıdaki talimatlar için kod satırına
        bakın( [Nerede Olduğumu Göster](#triggercallout=block_trigger)\n    ) ve ortağınız
        ile ızgara üzerinde şekillerin nereye çizilmesi gerektiği konusunda tartışın.
        \ \\\r\n-   Programı çalıştırmak için  <img src=\"https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20\n
        \   PM.png\" width=100> tıklayın ve neler olduğunu görün. ( [Nerede Olduğumu
        Göster](#triggercallout=run_trigger)\n    )\\\r\n-   Bloğun içindeki sayıları
        değiştirin, sonra programı çalıştırmayı tekrar deneyin.\\\r\n-   \\*\n    Ekran
        alt sağ köşesinin yakınına dikdörtgeni yerleştirmeye çalışın."
      CSD U3 rect_2019: "# Oyun Laboratuvarını Keşfet\\\r\n\n\\\r\nEtkileşimli animasyonlar
        ve oyunlar yapabileceğiniz Oyun Laboratuvarını hoşgeldiniz.!   \\\r\n\\\r\nDerste
        ızgaraya şekiller yerleştirme temellerinin alıştırmasını zaten yaptınız. Oyun
        Laboratuvarında soldaki ekranda aynısını yapacaksınız..\\\r\n\\\r\n\n# Bunu
        Yap\\\r\n\n\\\r\n\n-   Çalışma alanında aşağıdaki talimatlar için kod satırına
        bakın( [Nerede Olduğumu Göster](#triggercallout=block_trigger)\n    ) ve ortağınız
        ile ızgara üzerinde şekillerin nereye çizilmesi gerektiği konusunda tartışın.
        \ \\\r\n-   Programı çalıştırmak için  <img src=\"https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20\n
        \   PM.png\" width=100> tıklayın ve neler olduğunu görün. ( [Nerede Olduğumu
        Göster](#triggercallout=run_trigger)\n    )\\\r\n-   Bloğun içindeki sayıları
        değiştirin, sonra programı çalıştırmayı tekrar deneyin.\\\r\n-   \\*\n    Ekran
        alt sağ köşesinin yakınına dikdörtgeni yerleştirmeye çalışın."
      CSD U3 sequence: "<img src=\"https://images.code.org/30d68fb30db5b61187f104f46292e052-image-1493060980724.08.05\nPM.png\"
        style=\"float:right\">\\\r\n\n# Sıralamanın Önemi\\\r\n\n\\\r\nOyun Laboratuvarında
        kodunuzun hangi sırada olduğu önemlidir. Yeni şekiller önceki şekillerin üstüne
        çizilir, ilk çizilen şekil önce oluşturulur. Kodunuzda birden fazla renk kullandığınızda
        farkı görebilirsiniz.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\n\n-   İki dikdörtgen
        çizen koda bakın. İlki kırmızı, ikincisi mavi çizilmiş.\\\r\n-   Kırmızı dikdörtgenin
        rengini yeşil olarak değiştirin.\\\r\n-   Yeşil dikdörtgenin üstte görünmesi
        için kod sırasını değiştirin."
      CSD U3 sequence_2018: "<img src=\"https://images.code.org/30d68fb30db5b61187f104f46292e052-image-1493060980724.08.05\nPM.png\"
        style=\"float:right\">\\\r\n\n# Sıralamanın Önemi\\\r\n\n\\\r\nOyun Laboratuvarında
        kodunuzun hangi sırada olduğu önemlidir. Yeni şekiller önceki şekillerin üstüne
        çizilir, ilk çizilen şekil önce oluşturulur. Kodunuzda birden fazla renk kullandığınızda
        farkı görebilirsiniz.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\n\n-   İki dikdörtgen
        çizen koda bakın. İlki kırmızı, ikincisi mavi çizilmiş.\\\r\n-   Kırmızı dikdörtgenin
        rengini yeşil olarak değiştirin.\\\r\n-   Yeşil dikdörtgenin üstte görünmesi
        için kod sırasını değiştirin."
      CSD U3 sequence_2019: "<img src=\"https://images.code.org/30d68fb30db5b61187f104f46292e052-image-1493060980724.08.05\nPM.png\"
        style=\"float:right\">\\\r\n\n# Sıralamanın Önemi\\\r\n\n\\\r\nOyun Laboratuvarında
        kodunuzun hangi sırada olduğu önemlidir. Yeni şekiller önceki şekillerin üstüne
        çizilir, ilk çizilen şekil önce oluşturulur. Kodunuzda birden fazla renk kullandığınızda
        farkı görebilirsiniz.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\n\n-   İki dikdörtgen
        çizen koda bakın. İlki kırmızı, ikincisi mavi çizilmiş.\\\r\n-   Kırmızı dikdörtgenin
        rengini yeşil olarak değiştirin.\\\r\n-   Yeşil dikdörtgenin üstte görünmesi
        için kod sırasını değiştirin."
      CSD U4 - Design Mode Input Widgets: |-
        # Input Elements

        <img src="https://images.code.org/108fcc6fc89bf88edde00353afb33d75-image-1469814642375.49.23.png" style="float: right; width: 150px"/>

        Buttons are a great way to navigate around your app, and text labels are the primary way to display content in your app. When it comes to taking input from your users, sometimes you need a place for them to type or boxes to check. The **Text Input**, **Dropdown**, **Radio Button**, and **Checkbox** elements all provide ways for your users to input information to your app.

        # Do This

        Choose at least two of the input elements, and for each one:

        -   Drag it out and position it on the screen
        -   Change the id to something meaningful
        -   Read through the properties and experiment with them
        -   Add a label element next to each that describes what they do (don't forget to give it an id too!)
      CSD U4 - Design Mode Project: |-
        # Mocking Up Your App

        Using your paper prototype, create a digital version of your screen using the Design Mode elements you've learned about.

        # Do This

        -   Rename the screen to match your _namespace_.
        -   Use the built-in elements to lay out your app screen, giving each a proper ID
            -   For example, if your namespace is "home\_" you might create IDs like:
                -   `home_title`
                -   `home_login_button`
                -   `home_logo`
        -   For any components of your app that can't be recreated with the built in elements you can either:
            -   Redesign to utilize built in elements
            -   Find an image to use in place of your element
            -   Draw the element using your preferred image editor
        -   Share your design regularly with your teammates to ensure consistent style
      CSD U4 - Design Mode Project_2018: |-
        # Mocking Up Your App

        Using your paper prototype, create a digital version of your screen using the Design Mode elements you've learned about.

        # Do This

        -   Rename the screen to match your _namespace_.
        -   Use the built-in elements to lay out your app screen, giving each a proper ID
            -   For example, if your namespace is `home_` you might create IDs like:
                -   `home_title`
                -   `home_login_button`
                -   `home_logo`
        -   For any components of your app that can't be recreated with the built in elements you can either:
            -   Redesign to utilize built in elements
            -   Find an image to use in place of your element
            -   Draw the element using your preferred image editor
        -   Make sure that you and your teammates are regularly looking at each other's designs to ensure consistent style
      CSD U4 - Design Mode Project_2019: |-
        # Mocking Up Your App

        Using your paper prototype, create a digital version of your screen using the Design Mode elements you've learned about.

        # Do This

        -   Rename the screen to match your _namespace_.
        -   Use the built-in elements to lay out your app screen, giving each a proper ID
            -   For example, if your namespace is `home_` you might create IDs like:
                -   `home_title`
                -   `home_login_button`
                -   `home_logo`
        -   For any components of your app that can't be recreated with the built in elements you can either:
            -   Redesign to utilize built in elements
            -   Find an image to use in place of your element
            -   Draw the element using your preferred image editor
        -   Make sure that you and your teammates are regularly looking at each other's designs to ensure consistent style
      CSD U4 - Design Mode Text: "# Adding Text\n\n<img src=\"https://images.code.org/86ba633e04f90f3ca47dff3dcd064847-image-1469812708683.15.36.png\"
        style=\"float: right; width: 75px\"/>\nThe label element lets you add any
        text you'd like to your app. Just drag out a label block and set its \"text\"
        property. \n\n# Do This\n\nUse a label element to create a title for this
        app.\n\n-   Drag out a label and place it on the top of the screen\n-   Change
        the id to \"titleLabel\"\n-   Change the text to \"My App\"\n-   Increase
        the font size\n-   Choose a color you like for the title"
      CSD U5 Amazon Data Video: Bu sorunun Amazon tarafından nasıl çözüldüğünü öğrenmek
        için bu videoyu izleyin. İzlediğiniz gibi hangi verilerin toplandığı ve nereden
        geldiği hakkında düşünün.
      CSD U5 Amazon Data Video_2018: Bu sorunun Amazon tarafından nasıl çözüldüğünü
        öğrenmek için bu videoyu izleyin. İzlediğiniz gibi hangi verilerin toplandığı
        ve nereden geldiği hakkında düşünün.
      CSD U5 Amazon Data Video_2019: Bu sorunun Amazon tarafından nasıl çözüldüğünü
        öğrenmek için bu videoyu izleyin. İzlediğiniz gibi hangi verilerin toplandığı
        ve nereden geldiği hakkında düşünün.
      CSD U5 Netflix Data Video: Bu sorunun Netflix tarafından nasıl çözüldüğünü öğrenmek
        için bu videoyu izleyiniz. İzledikten hemen sonra hangi verilerin toplandığı
        ve nereden geldiği hakkında düşününüz.
      CSD U5 Netflix Data Video_2018: Bu sorunun Netflix tarafından nasıl çözüldüğünü
        öğrenmek için bu videoyu izleyiniz. İzledikten hemen sonra hangi verilerin
        toplandığı ve nereden geldiği hakkında düşününüz.
      CSD U5 Netflix Data Video_2019: Bu sorunun Netflix tarafından nasıl çözüldüğünü
        öğrenmek için bu videoyu izleyiniz. İzledikten hemen sonra hangi verilerin
        toplandığı ve nereden geldiği hakkında düşününüz.
      CSD U5 Pizza: "# Pizza Partisi \\\\ r\n\n\\\\ r \npizza partisi veri girmiştir
        bir  uygulamanın sizin için ve birbirinden cevaplar sınıfına eklendi. Bu bir
        \ uygulama olduğu için verilen veriden çubuk grafik oluşturulmasını otomatikleştirebiliriz.
        \\\\ r \n\\\\ r \n\n# Do Bu \\\\ r\n\n-   görmek için \"Çalıştır\" ı tıklayın\n
        \   listesini sınıfları verdikleri cevapların. \\\\ r \n-   Bu verilerin grafik
        gibi görünecektir düşüncelerinizi bir ortak ile tartışır. \\\\ r \n-   Kendiniz
        görünmek için \"Grafiği Göster\" i tıklayın. \\\\ r \n    \\\\ r \n    # Elektronik
        Tablo Sürümü \\\\ r\n    \\\\ r\n    Pizza partisi veriler de sizin için bir
        elektronik tabloya konulmuştur eğer bunun yerine kullanmak istiyorum. Tablo
        kullanmak için yapmanız gerekir yapmak o kendi kopyasını. \\\\ r \n    \\\\
        r \n-   Bu bağlantı olacak yapmak size \"Pizza Seçenekleri Topping\" Verilerin
        kendi kopyasını: [Pizza Seçimleri Topping] \\(<https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/copy>)
        \\\\ r \n-   You [here] dosyasının bir CSV sürümünü (<https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/export?>
        format = csv) indirebilirsiniz ."
      CSD U5 Pizza 2: "# Pizza Partisi \\\\ r\n\n\\\\ r \ninsanlar verilerle çalışırken,
        onlar yok cevaplar kapalı bırakmak biliyorum yapmak mantıklı ve bu\n bazı
        tür \"biber\", \"pepppers\" ve \"yeşil biber\" olarak cevaplar, aslında aynı
        anlamı şey. Bilgisayarlar için nasıl bilmiyorum yapmak bu yüzden önce verileri
        temizlemek zorunda bilgisayar kullanmak mümkün değildir. \\\\ r \n\\\\ r Uygulamanın
        \nbu sürümünde, temizlenecek veriler için ikinci bir sütun var. \\\\ r \n\\\\
        r \n\n## Do bu \\\\ r\n\n-   Yeni görmek için \"Çalıştır\" ı tıklayın liste
        cevapları temizlenecek. \\\\ r\n-   Temizlenmesi gereken her cevabı tıklayın
        ve bilgisayarın düzgün şekilde grafiğini çizecek şekilde düzeltin . ( Bazı
        cevapları tamamen silmek isteyebilirsiniz .) \\\\ R \n-   İşiniz bittiğinde
        temizlenmiş cevapların yeni grafiğini görmek için \"Grafiği Göster\" e tıklayın."
      CSD U5 Pizza 2_2018: "# Pizza Partisi \\\\ r\n\n\\\\ r \ninsanlar verilerle
        çalışırken, onlar yok cevaplar kapalı bırakmak biliyorum yapmak mantıklı ve
        bu\n bazı tür \"biber\", \"pepppers\" ve \"yeşil biber\" olarak cevaplar,
        aslında aynı anlamı şey. Bilgisayarlar için nasıl bilmiyorum yapmak bu yüzden
        önce verileri temizlemek zorunda bilgisayar kullanmak mümkün değildir. \\\\
        r \n\\\\ r Uygulamanın \nbu sürümünde, temizlenecek veriler için ikinci bir
        sütun var. \\\\ r \n\\\\ r \n\n## Do bu \\\\ r\n\n-   Yeni görmek için \"Çalıştır\"
        ı tıklayın liste cevapları temizlenecek. \\\\ r\n-   Temizlenmesi gereken
        her cevabı tıklayın ve bilgisayarın düzgün şekilde grafiğini çizecek şekilde
        düzeltin . ( Bazı cevapları tamamen silmek isteyebilirsiniz .) \\\\ R \n-
        \  İşiniz bittiğinde temizlenmiş cevapların yeni grafiğini görmek için \"Grafiği
        Göster\" e tıklayın."
      CSD U5 Pizza 2_2019: "# Pizza Partisi \\\\ r\n\n\\\\ r \ninsanlar verilerle
        çalışırken, onlar yok cevaplar kapalı bırakmak biliyorum yapmak mantıklı ve
        bu\n bazı tür \"biber\", \"pepppers\" ve \"yeşil biber\" olarak cevaplar,
        aslında aynı anlamı şey. Bilgisayarlar için nasıl bilmiyorum yapmak bu yüzden
        önce verileri temizlemek zorunda bilgisayar kullanmak mümkün değildir. \\\\
        r \n\\\\ r Uygulamanın \nbu sürümünde, temizlenecek veriler için ikinci bir
        sütun var. \\\\ r \n\\\\ r \n\n## Do bu \\\\ r\n\n-   Yeni görmek için \"Çalıştır\"
        ı tıklayın liste cevapları temizlenecek. \\\\ r\n-   Temizlenmesi gereken
        her cevabı tıklayın ve bilgisayarın düzgün şekilde grafiğini çizecek şekilde
        düzeltin . ( Bazı cevapları tamamen silmek isteyebilirsiniz .) \\\\ R \n-
        \  İşiniz bittiğinde temizlenmiş cevapların yeni grafiğini görmek için \"Grafiği
        Göster\" e tıklayın."
      CSD U5 Pizza_2018: "# Pizza Partisi \\\\ r\n\n\\\\ r \npizza partisi veri girmiştir
        bir  uygulamanın sizin için ve birbirinden cevaplar sınıfına eklendi. Bu bir
        \ uygulama olduğu için verilen veriden çubuk grafik oluşturulmasını otomatikleştirebiliriz.
        \\\\ r \n\\\\ r \n\n# Do Bu \\\\ r\n\n-   görmek için \"Çalıştır\" ı tıklayın\n
        \   listesini sınıfları verdikleri cevapların. \\\\ r \n-   Bu verilerin grafik
        gibi görünecektir düşüncelerinizi bir ortak ile tartışır. \\\\ r \n-   Kendiniz
        görünmek için \"Grafiği Göster\" i tıklayın. \\\\ r \n    \\\\ r \n    # Elektronik
        Tablo Sürümü \\\\ r\n    \\\\ r\n    Pizza partisi veriler de sizin için bir
        elektronik tabloya konulmuştur eğer bunun yerine kullanmak istiyorum. Tablo
        kullanmak için yapmanız gerekir yapmak o kendi kopyasını. \\\\ r \n    \\\\
        r \n-   Bu bağlantı olacak yapmak size \"Pizza Seçenekleri Topping\" Verilerin
        kendi kopyasını: [Pizza Seçimleri Topping] \\(<https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/copy>)
        \\\\ r \n-   You [here] dosyasının bir CSV sürümünü (<https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/export?>
        format = csv) indirebilirsiniz ."
      CSD U5 Pizza_2019: "# Pizza Partisi \\\\ r\n\n\\\\ r \npizza partisi veri girmiştir
        bir  uygulamanın sizin için ve birbirinden cevaplar sınıfına eklendi. Bu bir
        \ uygulama olduğu için verilen veriden çubuk grafik oluşturulmasını otomatikleştirebiliriz.
        \\\\ r \n\\\\ r \n\n# Do Bu \\\\ r\n\n-   görmek için \"Çalıştır\" ı tıklayın\n
        \   listesini sınıfları verdikleri cevapların. \\\\ r \n-   Bu verilerin grafik
        gibi görünecektir düşüncelerinizi bir ortak ile tartışır. \\\\ r \n-   Kendiniz
        görünmek için \"Grafiği Göster\" i tıklayın. \\\\ r \n    \\\\ r \n    # Elektronik
        Tablo Sürümü \\\\ r\n    \\\\ r\n    Pizza partisi veriler de sizin için bir
        elektronik tabloya konulmuştur eğer bunun yerine kullanmak istiyorum. Tablo
        kullanmak için yapmanız gerekir yapmak o kendi kopyasını. \\\\ r \n    \\\\
        r \n-   Bu bağlantı olacak yapmak size \"Pizza Seçenekleri Topping\" Verilerin
        kendi kopyasını: [Pizza Seçimleri Topping] \\(<https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/copy>)
        \\\\ r \n-   You [here] dosyasının bir CSV sürümünü (<https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/export?>
        format = csv) indirebilirsiniz ."
      CSD U5 Waze Data Video: Bu sorunun Waze tarafından nasıl çözüldüğünü öğrenmek
        için bu videoyu izleyin. İzlediğiniz gibi hangi verilerin toplandığı ve nereden
        geldiği hakkında düşünün.
      CSD U5 Waze Data Video_2018: Bu sorunun Waze tarafından nasıl çözüldüğünü öğrenmek
        için bu videoyu izleyin. İzlediğiniz gibi hangi verilerin toplandığı ve nereden
        geldiği hakkında düşünün.
      CSD U5 Waze Data Video_2019: Bu sorunun Waze tarafından nasıl çözüldüğünü öğrenmek
        için bu videoyu izleyin. İzlediğiniz gibi hangi verilerin toplandığı ve nereden
        geldiği hakkında düşünün.
      CSD U5 binary 1: "5.-Bit sayısı \\\\ r \n\\\\ r \nsadece dört bit vardı, sen
        verebilir en yüksek sayı yapmak onbeş oldu. Artık yüksek sayılar elde etmek
        için daha fazla bit ile çalışma şansınız olacak . \\\\ r \n\\\\ r \nBu aktivitede,
        noktalar sayılar ile değiştirilir, ama yine de hangi numarayı görmek gösteriyor
        herşeyi ekleyin olan ikili kod anlamına gelir. En soldaki bitin henüz bir
        numarası yok, bu yüzden bir tane vermek zorundasınız. \\\\ r \n\\\\ r \n\n#
        Do\n\nBu \\\\ r \n\\\\ r \n\n-   bit tıklayın açmak ve kapatmak onları ve
        farklı sayılar görme yapmak . \\\\ r\n-   Az sayıdaki en soldaki karakterin
        sayısını belirleyin, ardından değerini değiştirmek için \"Düzenle\" yi tıklayın
        . \\\\ r \n-   Değerini belirledikten sonra aşağıdaki sayıları yapmaya çalışın
        : 16, 27, 31"
      CSD U5 binary 1_2018: "5.-Bit sayısı \\\\ r \n\\\\ r \nsadece dört bit vardı,
        sen verebilir en yüksek sayı yapmak onbeş oldu. Artık yüksek sayılar elde
        etmek için daha fazla bit ile çalışma şansınız olacak . \\\\ r \n\\\\ r \nBu
        aktivitede, noktalar sayılar ile değiştirilir, ama yine de hangi numarayı
        görmek gösteriyor herşeyi ekleyin olan ikili kod anlamına gelir. En soldaki
        bitin henüz bir numarası yok, bu yüzden bir tane vermek zorundasınız. \\\\
        r \n\\\\ r \n\n# Do\n\nBu \\\\ r \n\\\\ r \n\n-   bit tıklayın açmak ve kapatmak
        onları ve farklı sayılar görme yapmak . \\\\ r\n-   Az sayıdaki en soldaki
        karakterin sayısını belirleyin, ardından değerini değiştirmek için \"Düzenle\"
        yi tıklayın . \\\\ r \n-   Değerini belirledikten sonra aşağıdaki sayıları
        yapmaya çalışın : 16, 27, 31"
      CSD U5 binary 1_2019: "5.-Bit sayısı \\\\ r \n\\\\ r \nsadece dört bit vardı,
        sen verebilir en yüksek sayı yapmak onbeş oldu. Artık yüksek sayılar elde
        etmek için daha fazla bit ile çalışma şansınız olacak . \\\\ r \n\\\\ r \nBu
        aktivitede, noktalar sayılar ile değiştirilir, ama yine de hangi numarayı
        görmek gösteriyor herşeyi ekleyin olan ikili kod anlamına gelir. En soldaki
        bitin henüz bir numarası yok, bu yüzden bir tane vermek zorundasınız. \\\\
        r \n\\\\ r \n\n# Do\n\nBu \\\\ r \n\\\\ r \n\n-   bit tıklayın açmak ve kapatmak
        onları ve farklı sayılar görme yapmak . \\\\ r\n-   Az sayıdaki en soldaki
        karakterin sayısını belirleyin, ardından değerini değiştirmek için \"Düzenle\"
        yi tıklayın . \\\\ r \n-   Değerini belirledikten sonra aşağıdaki sayıları
        yapmaya çalışın : 16, 27, 31"
      CSD U5 binary 2: "6.-Bit sayısı \\\\ r \n\\\\ r \nbu widget için, tüm farklı
        bit değerleri koymak gerekir. \\\\ r \n\\\\ r \n\n# Do\n\nBu \\\\ r \n\\\\
        r \n\n-   daha sonra kare şeklinde doğrudan değerleri yazın, \"Düzenle\" düğmesini
        tıklayın. \\\\ r \n-   Her bit değerini karar verdikten sonra, \"Kaydet\"
        düğmesine basın. \\\\ r \n    yeni sistemle \\*, yapmak aşağıdaki numaraları:
        32, 41, 63"
      CSD U5 binary 2_2018: "6.-Bit sayısı \\\\ r \n\\\\ r \nbu widget için, tüm farklı
        bit değerleri koymak gerekir. \\\\ r \n\\\\ r \n\n# Do\n\nBu \\\\ r \n\\\\
        r \n\n-   daha sonra kare şeklinde doğrudan değerleri yazın, \"Düzenle\" düğmesini
        tıklayın. \\\\ r \n-   Her bit değerini karar verdikten sonra, \"Kaydet\"
        düğmesine basın. \\\\ r \n    yeni sistemle \\*, yapmak aşağıdaki numaraları:
        32, 41, 63"
      CSD U5 binary 2_2019: "6.-Bit sayısı \\\\ r \n\\\\ r \nbu widget için, tüm farklı
        bit değerleri koymak gerekir. \\\\ r \n\\\\ r \n\n# Do\n\nBu \\\\ r \n\\\\
        r \n\n-   daha sonra kare şeklinde doğrudan değerleri yazın, \"Düzenle\" düğmesini
        tıklayın. \\\\ r \n-   Her bit değerini karar verdikten sonra, \"Kaydet\"
        düğmesine basın. \\\\ r \n    yeni sistemle \\*, yapmak aşağıdaki numaraları:
        32, 41, 63"
      CSD U5 binary 4-new: "# Birden fazla sayıyı çözme\\\r\n\n\\\r\nİşte 4, 5 veya
        6 bitlik sayıları hesaplayabilen bir widget. Bunu, aşağıdaki \nikili dizgide
        kodlanan iki dünya rekorunu bulmak için kullanabilirsiniz.\\\r\n\\\r\n![](<https://images.code.org/13b0d3307e688575b53e3e6bc86fb739-image-1505426509385.01.06\nPM.png>)\\\r\n\\\r\n\n1.
        \ Çoğu kişi kaldırdı ve iki dakika içinde atıldı.\n    (4 bits)\\\r\n2.  Bir
        dakika içinde bir papağan tarafından açılan konserve içeceklerin çoğu. (6
        bits)\\\r\n    \\\r\n    # \n    Bunu Yapın\\\r\n3.  İkili dizedeki iki sayıyı
        çözer."
      CSD U5 binary 4-new_2018: "# Birden fazla sayıyı çözme\\\r\n\n\\\r\nİşte 4,
        5 veya 6 bitlik sayıları hesaplayabilen bir widget. Bunu, aşağıdaki \nikili
        dizgide kodlanan iki dünya rekorunu bulmak için kullanabilirsiniz.\\\r\n\\\r\n![](<https://images.code.org/13b0d3307e688575b53e3e6bc86fb739-image-1505426509385.01.06\nPM.png>)\\\r\n\\\r\n\n1.
        \ Çoğu kişi kaldırdı ve iki dakika içinde atıldı.\n    (4 bits)\\\r\n2.  Bir
        dakika içinde bir papağan tarafından açılan konserve içeceklerin çoğu. (6
        bits)\\\r\n    \\\r\n    # \n    Bunu Yapın\\\r\n3.  İkili dizedeki iki sayıyı
        çözer."
      CSD U5 binary 4-new_2019: "# Birden fazla sayıyı çözme\\\r\n\n\\\r\nİşte 4,
        5 veya 6 bitlik sayıları hesaplayabilen bir widget. Bunu, aşağıdaki \nikili
        dizgide kodlanan iki dünya rekorunu bulmak için kullanabilirsiniz.\\\r\n\\\r\n![](<https://images.code.org/13b0d3307e688575b53e3e6bc86fb739-image-1505426509385.01.06\nPM.png>)\\\r\n\\\r\n\n1.
        \ Çoğu kişi kaldırdı ve iki dakika içinde atıldı.\n    (4 bits)\\\r\n2.  Bir
        dakika içinde bir papağan tarafından açılan konserve içeceklerin çoğu. (6
        bits)\\\r\n    \\\r\n    # \n    Bunu Yapın\\\r\n3.  İkili dizedeki iki sayıyı
        çözer."
      CSD U5 binary 5-new: "# Birden fazla sayıyı çözmek\\\r\n\n\\\r\nİşte\n8 bite
        kadar olan sayıları hesaplayabilen bir araç. Aşağıdaki dünya rekorlarının
        değerlerini bulmak için bunu kullanabilirsiniz.\\\r\n\\\r\n\"1\" bitinin her
        zaman en sağdaki bit olduğundan emin olmayı unutmayın. Eğer aracın solunda
        fazladan bit var ise, onları kapalı tutun.\\\r\n\\\r \n![](<https://images.code.org/e86788ff9b92a2b01b99749fa1aba8e8-image-1505426626592.01.14\nPM.png>)\\\r\n\\\r\n\n1.
        \ Bir köpekteki en uzun kuyruk (inç cinsinden) (5 bit)\\\r\n2.  Birinin yüzünde\n
        \   dengede duran en fazla kaşık (5 bit)\\\r\n    \\\r\n    # Bunu Yap\\\r\n3.
        \ İkili dizedeki \n    iki sayıyı çözün."
      CSD U5 binary 5-new_2018: "# Birden fazla sayıyı çözmek\\\r\n\n\\\r\nİşte\n8
        bite kadar olan sayıları hesaplayabilen bir araç. Aşağıdaki dünya rekorlarının
        değerlerini bulmak için bunu kullanabilirsiniz.\\\r\n\\\r\n\"1\" bitinin her
        zaman en sağdaki bit olduğundan emin olmayı unutmayın. Eğer aracın solunda
        fazladan bit var ise, onları kapalı tutun.\\\r\n\\\r \n![](<https://images.code.org/e86788ff9b92a2b01b99749fa1aba8e8-image-1505426626592.01.14\nPM.png>)\\\r\n\\\r\n\n1.
        \ Bir köpekteki en uzun kuyruk (inç cinsinden) (5 bit)\\\r\n2.  Birinin yüzünde\n
        \   dengede duran en fazla kaşık (5 bit)\\\r\n    \\\r\n    # Bunu Yap\\\r\n3.
        \ İkili dizedeki \n    iki sayıyı çözün."
      CSD U5 binary 5-new_2019: "# Birden fazla sayıyı çözmek\\\r\n\n\\\r\nİşte\n8
        bite kadar olan sayıları hesaplayabilen bir araç. Aşağıdaki dünya rekorlarının
        değerlerini bulmak için bunu kullanabilirsiniz.\\\r\n\\\r\n\"1\" bitinin her
        zaman en sağdaki bit olduğundan emin olmayı unutmayın. Eğer aracın solunda
        fazladan bit var ise, onları kapalı tutun.\\\r\n\\\r \n![](<https://images.code.org/e86788ff9b92a2b01b99749fa1aba8e8-image-1505426626592.01.14\nPM.png>)\\\r\n\\\r\n\n1.
        \ Bir köpekteki en uzun kuyruk (inç cinsinden) (5 bit)\\\r\n2.  Birinin yüzünde\n
        \   dengede duran en fazla kaşık (5 bit)\\\r\n    \\\r\n    # Bunu Yap\\\r\n3.
        \ İkili dizedeki \n    iki sayıyı çözün."
      CSD U5 binary 6-new: "# Birden fazla sayıyı çözmek\\\r\n\n\\\r\nİşte\nyeni bir
        bit dizesi. Bu sefer, iki sayının bit uzunluğunu bilmiyorsunuz. Bit uzunluğunu
        bilmeden sayıları çözmeye çalışın.\\\r\n\\\r\n![](<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46\nPM.png>)\\\r\n\\\r\n\n1.
        \ En büyük rüzgar çanı, fit cinsinden (? bit)\\\r\n2.  Birinin ayakla\n    en
        uzağa attığı ok (fit cinsinden) (? bit)\\\r\n    \\\r\n    # Bunu Yap\\\r\n3.
        \ İkili dizedeki\n    iki sayıyı çözmeyi deneyin.\\\r\n4.  Cevabınızın doğru
        olup olmadığını neden kesin olarak bilemeyeceğinizi takım arkadaşınızla tartışın."
      CSD U5 binary 6-new_2018: "# Birden fazla sayıyı çözmek\\\r\n\n\\\r\nİşte\nyeni
        bir bit dizesi. Bu sefer, iki sayının bit uzunluğunu bilmiyorsunuz. Bit uzunluğunu
        bilmeden sayıları çözmeye çalışın.\\\r\n\\\r\n![](<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46\nPM.png>)\\\r\n\\\r\n\n1.
        \ En büyük rüzgar çanı, fit cinsinden (? bit)\\\r\n2.  Birinin ayakla\n    en
        uzağa attığı ok (fit cinsinden) (? bit)\\\r\n    \\\r\n    # Bunu Yap\\\r\n3.
        \ İkili dizedeki\n    iki sayıyı çözmeyi deneyin.\\\r\n4.  Cevabınızın doğru
        olup olmadığını neden kesin olarak bilemeyeceğinizi takım arkadaşınızla tartışın."
      CSD U5 binary 6-new_2019: "# Birden fazla sayıyı çözmek\\\r\n\n\\\r\nİşte\nyeni
        bir bit dizesi. Bu sefer, iki sayının bit uzunluğunu bilmiyorsunuz. Bit uzunluğunu
        bilmeden sayıları çözmeye çalışın.\\\r\n\\\r\n![](<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46\nPM.png>)\\\r\n\\\r\n\n1.
        \ En büyük rüzgar çanı, fit cinsinden (? bit)\\\r\n2.  Birinin ayakla\n    en
        uzağa attığı ok (fit cinsinden) (? bit)\\\r\n    \\\r\n    # Bunu Yap\\\r\n3.
        \ İkili dizedeki\n    iki sayıyı çözmeyi deneyin.\\\r\n4.  Cevabınızın doğru
        olup olmadığını neden kesin olarak bilemeyeceğinizi takım arkadaşınızla tartışın."
      CSD U5 binary 7-new: "# Bit Uzunluğu\\\r\n\n\\\r\nHer bir numaranın kaç bit
        uzunluğunu bilmiyorsanız, bir dizi sayıdaki kodu çözemezsiniz.\\\r\n\\\r\nÖrneğin,
        aşağıdaki ikili dize birçok farklı şekilde çözülebilir.\\\r\n\\\r\n![](<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46\nPM.png>)\\\r\n\\\r\nDizi
        bu şekilde bölünürse, dize 10, 84'ü okur.\\\r\n\\\r\n![](<https://images.code.org/c8586b93427166ae6ecfdb8b1ff66bdd-image-1505427228630.13.01\nPM.png>)
        ![](<https://images.code.org/7d9814dc4bae8512dfaebbe459c29c9b-image-1505427230882.13.08\nPM.png>)\\\r\n\\\r\n\\\r\nEğer
        böyle bölüyorsanız, dize 42, 20 okur.\\\r\n\\\r\n![](<https://images.code.org/2e62b4a71b98b68bdf04713c508e4cb2-image-1505427233001.13.13\nPM.png>)
        ![](<https://images.code.org/10a316c870b575db4b30a687815bf481-image-1505427235482.13.19\nPM.png>)\\\r\n\\\r\nBu
        sorunu çözmek için, insanlar her sayı için sabit bir uzunluğu kabul ediyorlar.
        \nAşağıdaki dize aynı iki sayıyı kullanır, ancak her bir numara \ngerçekte
        kaç bit olursa olsun tam olarak sekiz bit alır.\\\r\n\\\r\n![](<https://images.code.org/257cb728fde57421e58ef31164be5a51-image-1505427467235.13.26\nPM.png>)\\\r\n\\\r\n\n#
        Bunu Yapın\\\r\n\n\\\r\n\n-   Sekiz bitlik sayıyı kullanan dizgeyi çözmek
        için ikili widget'i kullanın.\\\r\n-   Aynı cevaba sahip olup olmadığınızı
        görmek için bir takım arkadaşı ile cevaplarınızı kontrol edin."
      CSD U5 binary 7-new_2018: "# Bit Uzunluğu\\\r\n\n\\\r\nHer bir numaranın kaç
        bit uzunluğunu bilmiyorsanız, bir dizi sayıdaki kodu çözemezsiniz.\\\r\n\\\r\nÖrneğin,
        aşağıdaki ikili dize birçok farklı şekilde çözülebilir.\\\r\n\\\r\n![](<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46\nPM.png>)\\\r\n\\\r\nDizi
        bu şekilde bölünürse, dize 10, 84'ü okur.\\\r\n\\\r\n![](<https://images.code.org/c8586b93427166ae6ecfdb8b1ff66bdd-image-1505427228630.13.01\nPM.png>)
        ![](<https://images.code.org/7d9814dc4bae8512dfaebbe459c29c9b-image-1505427230882.13.08\nPM.png>)\\\r\n\\\r\n\\\r\nEğer
        böyle bölüyorsanız, dize 42, 20 okur.\\\r\n\\\r\n![](<https://images.code.org/2e62b4a71b98b68bdf04713c508e4cb2-image-1505427233001.13.13\nPM.png>)
        ![](<https://images.code.org/10a316c870b575db4b30a687815bf481-image-1505427235482.13.19\nPM.png>)\\\r\n\\\r\nBu
        sorunu çözmek için, insanlar her sayı için sabit bir uzunluğu kabul ediyorlar.
        \nAşağıdaki dize aynı iki sayıyı kullanır, ancak her bir numara \ngerçekte
        kaç bit olursa olsun tam olarak sekiz bit alır.\\\r\n\\\r\n![](<https://images.code.org/257cb728fde57421e58ef31164be5a51-image-1505427467235.13.26\nPM.png>)\\\r\n\\\r\n\n#
        Bunu Yapın\\\r\n\n\\\r\n\n-   Sekiz bitlik sayıyı kullanan dizgeyi çözmek
        için ikili widget'i kullanın.\\\r\n-   Aynı cevaba sahip olup olmadığınızı
        görmek için bir takım arkadaşı ile cevaplarınızı kontrol edin."
      CSD U5 binary 7-new_2019: "# Bit Uzunluğu\\\r\n\n\\\r\nHer bir numaranın kaç
        bit uzunluğunu bilmiyorsanız, bir dizi sayıdaki kodu çözemezsiniz.\\\r\n\\\r\nÖrneğin,
        aşağıdaki ikili dize birçok farklı şekilde çözülebilir.\\\r\n\\\r\n![](<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46\nPM.png>)\\\r\n\\\r\nDizi
        bu şekilde bölünürse, dize 10, 84'ü okur.\\\r\n\\\r\n![](<https://images.code.org/c8586b93427166ae6ecfdb8b1ff66bdd-image-1505427228630.13.01\nPM.png>)
        ![](<https://images.code.org/7d9814dc4bae8512dfaebbe459c29c9b-image-1505427230882.13.08\nPM.png>)\\\r\n\\\r\n\\\r\nEğer
        böyle bölüyorsanız, dize 42, 20 okur.\\\r\n\\\r\n![](<https://images.code.org/2e62b4a71b98b68bdf04713c508e4cb2-image-1505427233001.13.13\nPM.png>)
        ![](<https://images.code.org/10a316c870b575db4b30a687815bf481-image-1505427235482.13.19\nPM.png>)\\\r\n\\\r\nBu
        sorunu çözmek için, insanlar her sayı için sabit bir uzunluğu kabul ediyorlar.
        \nAşağıdaki dize aynı iki sayıyı kullanır, ancak her bir numara \ngerçekte
        kaç bit olursa olsun tam olarak sekiz bit alır.\\\r\n\\\r\n![](<https://images.code.org/257cb728fde57421e58ef31164be5a51-image-1505427467235.13.26\nPM.png>)\\\r\n\\\r\n\n#
        Bunu Yapın\\\r\n\n\\\r\n\n-   Sekiz bitlik sayıyı kullanan dizgeyi çözmek
        için ikili widget'i kullanın.\\\r\n-   Aynı cevaba sahip olup olmadığınızı
        görmek için bir takım arkadaşı ile cevaplarınızı kontrol edin."
      CSD U5 binary video_2019: |-
        ## Questions to Consider

        -   Why are all the types of data on the computer stored as numbers?
        -   If everything is stored as a number, how do you think the computer tell the difference between numbers, letters, images, and sound?
      CSD U5 black white images pixelation: "# Bunu Yap\\\r\n\n\\\r\nSıfırları ve
        birleri kullanrak \"X\" şeklini tamamla. İşlerini toparlamak için \"Okunabilir
        Biçim\"e istediğin zaman tıklayabilirsin."
      CSD U5 black white images pixelation 2: "# Bunu Yap\\\r\n\n\\\r\nPikselleme
        aracını kullanarak gülen yüz çizin.\\\r\n\\\r\n![](<https://images.code.org/3e81e7e5c95a63173242552de2e9c094-image-1491425592286.52.47\nPM.png>)"
      CSD U5 black white images pixelation 2_2018: "# Bunu Yap\\\r\n\n\\\r\nPikselleme
        aracını kullanarak gülen yüz çizin.\\\r\n\\\r\n![](<https://images.code.org/3e81e7e5c95a63173242552de2e9c094-image-1491425592286.52.47\nPM.png>)"
      CSD U5 black white images pixelation 2_2019: "# Bunu Yap\\\r\n\n\\\r\nPikselleme
        aracını kullanarak gülen yüz çizin.\\\r\n\\\r\n![](<https://images.code.org/3e81e7e5c95a63173242552de2e9c094-image-1491425592286.52.47\nPM.png>)"
      CSD U5 black white images pixelation 3: "# Bunu Yap\\\r\n\n\\\r\nBu resmin genişlik
        ve yükseklik kaydırma çubuğu doğru ayarlanmadığı için hiçbir şeye benzemiyor.
        Resmi bulana kadar onları değiştirin.\\\r\n\\\r\n![](<https://images.code.org/c2abe82051e700f22ce613e407e71536-image-1491426050751.00.17\nPM.png>)"
      CSD U5 black white images pixelation 3_2018: "# Bunu Yap\\\r\n\n\\\r\nBu resmin
        genişlik ve yükseklik kaydırma çubuğu doğru ayarlanmadığı için hiçbir şeye
        benzemiyor. Resmi bulana kadar onları değiştirin.\\\r\n\\\r\n![](<https://images.code.org/c2abe82051e700f22ce613e407e71536-image-1491426050751.00.17\nPM.png>)"
      CSD U5 black white images pixelation 3_2019: "# Bunu Yap\\\r\n\n\\\r\nBu resmin
        genişlik ve yükseklik kaydırma çubuğu doğru ayarlanmadığı için hiçbir şeye
        benzemiyor. Resmi bulana kadar onları değiştirin.\\\r\n\\\r\n![](<https://images.code.org/c2abe82051e700f22ce613e407e71536-image-1491426050751.00.17\nPM.png>)"
      CSD U5 black white images pixelation 4: "# Bunu Yap\\\r\n\n\\\r\nBu gülen yüze
        kaşlarını ekleyin. Eğer takılırsan \"Okunabilir Biçim\"i kullanmayı hatırla.\\\r\n\\\r\n![](<https://images.code.org/269725fa3d9d6857912fe4a20464a830-image-1491427249017.18.37\nPM.png>)"
      CSD U5 black white images pixelation 4_2018: "# Bunu Yap\\\r\n\n\\\r\nBu gülen
        yüze kaşlarını ekleyin. Eğer takılırsan \"Okunabilir Biçim\"i kullanmayı hatırla.\\\r\n\\\r\n![](<https://images.code.org/269725fa3d9d6857912fe4a20464a830-image-1491427249017.18.37\nPM.png>)"
      CSD U5 black white images pixelation 4_2019: "# Bunu Yap\\\r\n\n\\\r\nBu gülen
        yüze kaşlarını ekleyin. Eğer takılırsan \"Okunabilir Biçim\"i kullanmayı hatırla.\\\r\n\\\r\n![](<https://images.code.org/269725fa3d9d6857912fe4a20464a830-image-1491427249017.18.37\nPM.png>)"
      CSD U5 black white images pixelation 5: "# Bunu Yap\\\r\n\n\\\r\nŞimdi senin
        sıran. Pikselleme aracını kullanarak istediğini çiz. Resmin genişliğini ve
        yüksekliğini istediğin gibi değiştirme konusunda rahat ol."
      CSD U5 black white images pixelation 5_2018: "# Bunu Yap\\\r\n\n\\\r\nŞimdi
        senin sıran. Pikselleme aracını kullanarak istediğini çiz. Resmin genişliğini
        ve yüksekliğini istediğin gibi değiştirme konusunda rahat ol."
      CSD U5 black white images pixelation 5_2019: "# Bunu Yap\\\r\n\n\\\r\nŞimdi
        senin sıran. Pikselleme aracını kullanarak istediğini çiz. Resmin genişliğini
        ve yüksekliğini istediğin gibi değiştirme konusunda rahat ol."
      CSD U5 black white images pixelation_2018: "# Bunu Yap\\\r\n\n\\\r\nSıfırları
        ve birleri kullanrak \"X\" şeklini tamamla. İşlerini toparlamak için \"Okunabilir
        Biçim\"e istediğin zaman tıklayabilirsin."
      CSD U5 black white images pixelation_2019: "# Bunu Yap\\\r\n\n\\\r\nSıfırları
        ve birleri kullanrak \"X\" şeklini tamamla. İşlerini toparlamak için \"Okunabilir
        Biçim\"e istediğin zaman tıklayabilirsin."
      CSD U6 Catch the Mouse: Gömülü Tahmin
      CSD U6 Catch the Mouse prediction: "# Fareyi Yakala\\\r\n\n\\\r\nBu\nbir tıklama
        oyunu, son derste yaptığınıza benzer bir oyun.\\\r\n\\\r\nTakım \narkadaşınızla
        birlikte koda bakın ve aşağıdaki soruları cevaplayın:\\\r\n\\\r\n\\*\nLED
        yanıp sönmeye başlamadan önce kaç kere fareye tıklamanız gerekiyor?\\\r\n\\\r\nCevabınızı\naşağıdaki
        kutuya yazın sonra kodu çalıştırın ve ne olacağını görün."
      CSD U6 Catch the Mouse prediction_2018: "# Fareyi Yakala\\\r\n\n\\\r\nBu\nbir
        tıklama oyunu, son derste yaptığınıza benzer bir oyun.\\\r\n\\\r\nTakım \narkadaşınızla
        birlikte koda bakın ve aşağıdaki soruları cevaplayın:\\\r\n\\\r\n\\*\nLED
        yanıp sönmeye başlamadan önce kaç kere fareye tıklamanız gerekiyor?\\\r\n\\\r\nCevabınızı\naşağıdaki
        kutuya yazın sonra kodu çalıştırın ve ne olacağını görün."
      CSD U6 Catch the Mouse prediction_2019: "# Fareyi Yakala\\\r\n\n\\\r\nBu\nbir
        tıklama oyunu, son derste yaptığınıza benzer bir oyun.\\\r\n\\\r\nTakım \narkadaşınızla
        birlikte koda bakın ve aşağıdaki soruları cevaplayın:\\\r\n\\\r\n\\*\nLED
        yanıp sönmeye başlamadan önce kaç kere fareye tıklamanız gerekiyor?\\\r\n\\\r\nCevabınızı\naşağıdaki
        kutuya yazın sonra kodu çalıştırın ve ne olacağını görün."
      CSD U6 Catch the Mouse_2018: Gömülü Tahmin
      CSD U6 Catch the Mouse_2019: Gömülü Tahmin
      CSD U6 Driver pt 2: "# Sınırlayıcı Dönüş\\\r\n\n\\\r\nEğer ellerinizi \nçok
        yavaş ve dikkatlice hareket ettirmediyseniz arabayı yönlendirmenin çok zor
        olduğunu fark etmişsinizdir. Bu nedeni `oyna`nın döndüğü sayının ivmeölçerin
        ne kadar döndürülüdüğüne bağlı olarak çok büyük bir sayı olabilmesidir. Unutmayın,
        `oyna` -90 ile 90 aralığındadır.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\n`oyna`yı\nhala
        arabayı yönlendirmek için kullanırken onu daha küçük bir sayı yapmanın yolunu
        bulun.\nBunun için kullanabileceğiniz tüm matematik operatörlerine sahipsiniz.\\\r\n\\\r\n_Zor
        Görev_:\nArabanın ekranın kenarından çıkmasını önleyebilir misiniz?"
      CSD U6 Driver pt 2_2018: "# Sınırlayıcı Dönüş\\\r\n\n\\\r\nEğer ellerinizi \nçok
        yavaş ve dikkatlice hareket ettirmediyseniz arabayı yönlendirmenin çok zor
        olduğunu fark etmişsinizdir. Bu nedeni `oyna`nın döndüğü sayının ivmeölçerin
        ne kadar döndürülüdüğüne bağlı olarak çok büyük bir sayı olabilmesidir. Unutmayın,
        `oyna` -90 ile 90 aralığındadır.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\n`oyna`yı\nhala
        arabayı yönlendirmek için kullanırken onu daha küçük bir sayı yapmanın yolunu
        bulun.\nBunun için kullanabileceğiniz tüm matematik operatörlerine sahipsiniz.\\\r\n\\\r\n_Zor
        Görev_:\nArabanın ekranın kenarından çıkmasını önleyebilir misiniz?"
      CSD U6 Driver pt 2_2019: "# Sınırlayıcı Dönüş\\\r\n\n\\\r\nEğer ellerinizi \nçok
        yavaş ve dikkatlice hareket ettirmediyseniz arabayı yönlendirmenin çok zor
        olduğunu fark etmişsinizdir. Bu nedeni `oyna`nın döndüğü sayının ivmeölçerin
        ne kadar döndürülüdüğüne bağlı olarak çok büyük bir sayı olabilmesidir. Unutmayın,
        `oyna` -90 ile 90 aralığındadır.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\n`oyna`yı\nhala
        arabayı yönlendirmek için kullanırken onu daha küçük bir sayı yapmanın yolunu
        bulun.\nBunun için kullanabileceğiniz tüm matematik operatörlerine sahipsiniz.\\\r\n\\\r\n_Zor
        Görev_:\nArabanın ekranın kenarından çıkmasını önleyebilir misiniz?"
      CSD U6 Driver pt1: "# Direksiyon Simidi\\\r\n\n\\\r\nBu oyun, biraz daha farklı
        \nolan hariç, oynadığınız kaleci oyuna benzer. Tahtanı aracın direksiyon simidi
        olarak \nkullanın (yan yana hareket ettirin). Yol boyunca kırmızı bayraklardan
        \nkaçınırken, damalı bayrağa gitmeniz gerekiyor!\\\r\n\\\r\n\\\r\n\n# Bunu
        Yapın\\\r\n\n\\\r\n\n-   Program çalışırken aracı hareket ettirin.\\\r\n-
        \  Arabaya yan yana dönme yeteneği kazandırın.\\\r\n    \\\r\n    Bu noktaya
        kadar yaptığınız programlara geri dönün, bu değerleri nasıl güncelleyebilirsiniz?"
      CSD U6 Driver pt1_2018: "# Direksiyon Simidi\\\r\n\n\\\r\nBu oyun, biraz daha
        farklı \nolan hariç, oynadığınız kaleci oyuna benzer. Tahtanı aracın direksiyon
        simidi olarak \nkullanın (yan yana hareket ettirin). Yol boyunca kırmızı bayraklardan
        \nkaçınırken, damalı bayrağa gitmeniz gerekiyor!\\\r\n\\\r\n\\\r\n\n# Bunu
        Yapın\\\r\n\n\\\r\n\n-   Program çalışırken aracı hareket ettirin.\\\r\n-
        \  Arabaya yan yana dönme yeteneği kazandırın.\\\r\n    \\\r\n    Bu noktaya
        kadar yaptığınız programlara geri dönün, bu değerleri nasıl güncelleyebilirsiniz?"
      CSD U6 Driver pt1_2019: "# Direksiyon Simidi\\\r\n\n\\\r\nBu oyun, biraz daha
        farklı \nolan hariç, oynadığınız kaleci oyuna benzer. Tahtanı aracın direksiyon
        simidi olarak \nkullanın (yan yana hareket ettirin). Yol boyunca kırmızı bayraklardan
        \nkaçınırken, damalı bayrağa gitmeniz gerekiyor!\\\r\n\\\r\n\\\r\n\n# Bunu
        Yapın\\\r\n\n\\\r\n\n-   Program çalışırken aracı hareket ettirin.\\\r\n-
        \  Arabaya yan yana dönme yeteneği kazandırın.\\\r\n    \\\r\n    Bu noktaya
        kadar yaptığınız programlara geri dönün, bu değerleri nasıl güncelleyebilirsiniz?"
      CSD U6 LED all: "# Çok Fonksiyonlu Işık\\\r\n\n\\\r\nBu uygulama,\nüç farklı
        ışık türü arasından seçim yapmanıza izin vermelidir: açık, yanıp sönen, titreyen.
        Işığı tamamen kapatan bir buton da olmalıdır. Şu an sadece \"açık\" butonu
        çalışıyor ve \"kapalı\" butonu yok.\\\r\n\\\r\n\n# \n\nBunu Yap\\\r\n\\*\"yanıp
        sönen\" ve \"titreyen\" butonlarının çalışmasını sağlayan bir kod ekleyin.\\\r\n\\*\nTasarım
        modunda yeni bir \"kapalı\" butonu ekleyin.\\\r\n\\*\"kapalı\" butonunun çalışmasını
        sağlayan bir kod ekleyin."
      CSD U6 LED all_2018: "# Çok Fonksiyonlu Işık\\\r\n\n\\\r\nBu uygulama,\nüç farklı
        ışık türü arasından seçim yapmanıza izin vermelidir: açık, yanıp sönen, titreyen.
        Işığı tamamen kapatan bir buton da olmalıdır. Şu an sadece \"açık\" butonu
        çalışıyor ve \"kapalı\" butonu yok.\\\r\n\\\r\n\n# \n\nBunu Yap\\\r\n\\*\"yanıp
        sönen\" ve \"titreyen\" butonlarının çalışmasını sağlayan bir kod ekleyin.\\\r\n\\*\nTasarım
        modunda yeni bir \"kapalı\" butonu ekleyin.\\\r\n\\*\"kapalı\" butonunun çalışmasını
        sağlayan bir kod ekleyin."
      CSD U6 LED all_2019: "# Çok Fonksiyonlu Işık\\\r\n\n\\\r\nBu uygulama,\nüç farklı
        ışık türü arasından seçim yapmanıza izin vermelidir: açık, yanıp sönen, titreyen.
        Işığı tamamen kapatan bir buton da olmalıdır. Şu an sadece \"açık\" butonu
        çalışıyor ve \"kapalı\" butonu yok.\\\r\n\\\r\n\n# \n\nBunu Yap\\\r\n\\*\"yanıp
        sönen\" ve \"titreyen\" butonlarının çalışmasını sağlayan bir kod ekleyin.\\\r\n\\*\nTasarım
        modunda yeni bir \"kapalı\" butonu ekleyin.\\\r\n\\*\"kapalı\" butonunun çalışmasını
        sağlayan bir kod ekleyin."
      CSD U6 LED toggle: "# Işık Düğmesi\\\r\n\n\\\r\nKullanmadığınız üç tane\ndaha
        LED bloğu var. Onlardan biri butonun, kapalıyken LED'i açabilen ve açıkken
        kapayabilen bir ışık düğmesi gibi çalışmasını sağlayabilir.\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n-   'yanıp sön', 'değiştir' ve 'titre' bloklarının \n    ne
        yaptığını görmek için deneyin.\\\r\n-   Butonun bir ışık düğmesi gibi çalışması
        için \n    bloklardan birini kullanın.\\\r\n-   Eğer LED kapalıysa, buton
        onu açmalıdır.\\\r\n\n\\*Eğer LED açıksa, buton onu kapamalıdır."
      CSD U6 LED toggle_2018: "# Işık Düğmesi\\\r\n\n\\\r\nKullanmadığınız üç tane\ndaha
        LED bloğu var. Onlardan biri butonun, kapalıyken LED'i açabilen ve açıkken
        kapayabilen bir ışık düğmesi gibi çalışmasını sağlayabilir.\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n-   'yanıp sön', 'değiştir' ve 'titre' bloklarının \n    ne
        yaptığını görmek için deneyin.\\\r\n-   Butonun bir ışık düğmesi gibi çalışması
        için \n    bloklardan birini kullanın.\\\r\n-   Eğer LED kapalıysa, buton
        onu açmalıdır.\\\r\n\n\\*Eğer LED açıksa, buton onu kapamalıdır."
      CSD U6 LED toggle_2019: "# Işık Düğmesi\\\r\n\n\\\r\nKullanmadığınız üç tane\ndaha
        LED bloğu var. Onlardan biri butonun, kapalıyken LED'i açabilen ve açıkken
        kapayabilen bir ışık düğmesi gibi çalışmasını sağlayabilir.\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n-   'yanıp sön', 'değiştir' ve 'titre' bloklarının \n    ne
        yaptığını görmek için deneyin.\\\r\n-   Butonun bir ışık düğmesi gibi çalışması
        için \n    bloklardan birini kullanın.\\\r\n-   Eğer LED kapalıysa, buton
        onu açmalıdır.\\\r\n\n\\*Eğer LED açıksa, buton onu kapamalıdır."
      CSD U6 LEDbutton predict embed: "# Etkinlikler Kullanma\\\r\n\n\\\r\nBu program
        etkinlikleri kullanır. Bir takım arkadaşı ile birlikte kodu inceleyin ve ne
        yapacağını tartışın. \nSoruları cevapladıktan sonra, cevabınızı kontrol etmek
        için \"Çalıştır\" ı tıklayın.\\\r\n\\\r\n\n-   Program \"Çalıştır\" durumundayken
        ışık yanar mı? Neden ya da neden değil?"
      CSD U6 LEDbutton predict embed_2018: "# Etkinlikler Kullanma\\\r\n\n\\\r\nBu
        program etkinlikleri kullanır. Bir takım arkadaşı ile birlikte kodu inceleyin
        ve ne yapacağını tartışın. \nSoruları cevapladıktan sonra, cevabınızı kontrol
        etmek için \"Çalıştır\" ı tıklayın.\\\r\n\\\r\n\n-   Program \"Çalıştır\"
        durumundayken ışık yanar mı? Neden ya da neden değil?"
      CSD U6 LEDbutton predict embed_2019: "# Etkinlikler Kullanma\\\r\n\n\\\r\nBu
        program etkinlikleri kullanır. Bir takım arkadaşı ile birlikte kodu inceleyin
        ve ne yapacağını tartışın. \nSoruları cevapladıktan sonra, cevabınızı kontrol
        etmek için \"Çalıştır\" ı tıklayın.\\\r\n\\\r\n\n-   Program \"Çalıştır\"
        durumundayken ışık yanar mı? Neden ya da neden değil?"
      CSD U6 LEDs color: "# Biraz Renk Ekleme\\\r\n\n\\\r\nMuhtemelen, son seviyede
        `colorLeds[0].on()` kullanıldığında LED'lerin beyaz renkte olduğunu fark ettiniz.
        \nBir renk belirtmezseniz, beyaz üretmek için `on()` LED'in üç parçasını da
        (kırmızı, yeşil ve mavi) açacaktır. \nAraç kutusunda, \"blue\" gibi bir dize
        veya `color()` komutu kullanılarak bir RGB değeri gibi bir renk\nbelirtmenizi
        sağlayan `colorLeds[0].color()` adlı yeni bir komut görürsünüz.\\\r\n\\\r\n\n#
        Bunu Yapın\\\r\n\n\\\r\nRenkli LED'lerin her birini farklı bir renge ayarlamak
        için `.color ()` komutunu kullanın."
      CSD U6 LEDs color_2018: "# Biraz Renk Ekleme\\\r\n\n\\\r\nMuhtemelen, son seviyede
        `colorLeds[0].on()` kullanıldığında LED'lerin beyaz renkte olduğunu fark ettiniz.
        \nBir renk belirtmezseniz, beyaz üretmek için `on()` LED'in üç parçasını da
        (kırmızı, yeşil ve mavi) açacaktır. \nAraç kutusunda, \"blue\" gibi bir dize
        veya `color()` komutu kullanılarak bir RGB değeri gibi bir renk\nbelirtmenizi
        sağlayan `colorLeds[0].color()` adlı yeni bir komut görürsünüz.\\\r\n\\\r\n\n#
        Bunu Yapın\\\r\n\n\\\r\nRenkli LED'lerin her birini farklı bir renge ayarlamak
        için `.color ()` komutunu kullanın."
      CSD U6 LEDs color_2019: "# Biraz Renk Ekleme\\\r\n\n\\\r\nMuhtemelen, son seviyede
        `colorLeds[0].on()` kullanıldığında LED'lerin beyaz renkte olduğunu fark ettiniz.
        \nBir renk belirtmezseniz, beyaz üretmek için `on()` LED'in üç parçasını da
        (kırmızı, yeşil ve mavi) açacaktır. \nAraç kutusunda, \"blue\" gibi bir dize
        veya `color()` komutu kullanılarak bir RGB değeri gibi bir renk\nbelirtmenizi
        sağlayan `colorLeds[0].color()` adlı yeni bir komut görürsünüz.\\\r\n\\\r\n\n#
        Bunu Yapın\\\r\n\n\\\r\nRenkli LED'lerin her birini farklı bir renge ayarlamak
        için `.color ()` komutunu kullanın."
      CSD U6 Pedometer: "# Yavaş Koşu Adımsayarı\\\r\n\n\\\r\n\\`Change ' etkinliği
        kullanışlıdır, ancak hareket için gerçekten de hassastır. 'shake', 'change'
        benzeri bir şey olup, kart saptırıldığında tetiklenir ancak olayı tetiklemeden
        önce hareket değişiklikleri için daha yüksek bir eşik değeri vardır. \\\r\n\\\r\nBu
        ektinliği bir adımsayar yapmak için kullanacaksın.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\n\n-
        \  Kartı her salladığında yavaş koşu yapan kişiyi hareket ettirmek için sayaç
        modelini kullanın.\\\r\n-   Yavaş koşu yapan kişinin her seferinde 5 adım
        ilerlediğinden emin olun."
      CSD U6 Pedometer_2018: "# Yavaş Koşu Adımsayarı\\\r\n\n\\\r\n\\`Change ' etkinliği
        kullanışlıdır, ancak hareket için gerçekten de hassastır. 'shake', 'change'
        benzeri bir şey olup, kart saptırıldığında tetiklenir ancak olayı tetiklemeden
        önce hareket değişiklikleri için daha yüksek bir eşik değeri vardır. \\\r\n\\\r\nBu
        ektinliği bir adımsayar yapmak için kullanacaksın.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\n\n-
        \  Kartı her salladığında yavaş koşu yapan kişiyi hareket ettirmek için sayaç
        modelini kullanın.\\\r\n-   Yavaş koşu yapan kişinin her seferinde 5 adım
        ilerlediğinden emin olun."
      CSD U6 Pedometer_2019: "# Yavaş Koşu Adımsayarı\\\r\n\n\\\r\n\\`Change ' etkinliği
        kullanışlıdır, ancak hareket için gerçekten de hassastır. 'shake', 'change'
        benzeri bir şey olup, kart saptırıldığında tetiklenir ancak olayı tetiklemeden
        önce hareket değişiklikleri için daha yüksek bir eşik değeri vardır. \\\r\n\\\r\nBu
        ektinliği bir adımsayar yapmak için kullanacaksın.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\n\n-
        \  Kartı her salladığında yavaş koşu yapan kişiyi hareket ettirmek için sayaç
        modelini kullanın.\\\r\n-   Yavaş koşu yapan kişinin her seferinde 5 adım
        ilerlediğinden emin olun."
      CSD U6 add LED button: "# Etkinlikleri Kullanma\\\r\n\n\\\r\nBu programın iki
        düğmesi vardır. \"Açık\" düğmesi çalışır, ancak \"kapalı\" düğmesinin hala
        programlanması gerekiyor.\\\r\n\\\r\n\n# Bunu Yapın\\\r\n\n-   İkinci düğmenin
        LED'i kapatması için kod ekleyin."
      CSD U6 add LED button_2018: "# Etkinlikleri Kullanma\\\r\n\n\\\r\nBu programın
        iki düğmesi vardır. \"Açık\" düğmesi çalışır, ancak \"kapalı\" düğmesinin
        hala programlanması gerekiyor.\\\r\n\\\r\n\n# Bunu Yapın\\\r\n\n-   İkinci
        düğmenin LED'i kapatması için kod ekleyin."
      CSD U6 add LED button_2019: "# Etkinlikleri Kullanma\\\r\n\n\\\r\nBu programın
        iki düğmesi vardır. \"Açık\" düğmesi çalışır, ancak \"kapalı\" düğmesinin
        hala programlanması gerekiyor.\\\r\n\\\r\n\n# Bunu Yapın\\\r\n\n-   İkinci
        düğmenin LED'i kapatması için kod ekleyin."
      CSD U6 airplane predict markdown: |-
        # Accelerometer

        Look at the code below. What do you think it's going to do? Give it a guess, and run the code to find out!
      CSD U6 airplane predict markdown_2018: |-
        # Accelerometer

        Look at the code below. What do you think it's going to do? Give it a guess, and run the code to find out!
      CSD U6 airplane predict markdown_2019: |-
        # Accelerometer

        Look at the code below. What do you think it's going to do? Give it a guess, and run the code to find out!
      CSD U6 analog challenge: "# Meydan Okuma\\\r\n\n\\\r\n_Bu meydan okumadan önce
        öğretmeninizle birlikte kontrol edin_\\\r\n\\\r\nÇeşitli analog sensörlerden
        gelen girdileri almakta ve ölçeklerinizi ihtiyaçlarınızı karşılamak için değiştirdiğinize
        göre, sensör verileri için ilginç bir kullanım bulabilir misiniz? Bir sensörden
        gelen ham sayıları görüntülemek kolaydır, ancak bu verileri farklı şekillerde
        sunmak çok daha ilginçtir.\\\r\n\\\r\nSensör verilerini iletişim kurmak için
        aşağıdaki yolları düşünün:\\\r\n\\\r\n\n-   Kart çıktılarını kullanın\\\r\n-
        \  Bir kullanıcı arayüzü öğesinin genişliğini, yüksekliğini veya konumunu
        değiştirin\\\r\n-   Sensör değerlerine dayalı farklı görüntüler görüntülemek
        için koşullu ifadeleri kullanın"
      CSD U6 analog challenge_2018: "# Meydan Okuma\\\r\n\n\\\r\n_Bu meydan okumadan
        önce öğretmeninizle birlikte kontrol edin_\\\r\n\\\r\nÇeşitli analog sensörlerden
        gelen girdileri almakta ve ölçeklerinizi ihtiyaçlarınızı karşılamak için değiştirdiğinize
        göre, sensör verileri için ilginç bir kullanım bulabilir misiniz? Bir sensörden
        gelen ham sayıları görüntülemek kolaydır, ancak bu verileri farklı şekillerde
        sunmak çok daha ilginçtir.\\\r\n\\\r\nSensör verilerini iletişim kurmak için
        aşağıdaki yolları düşünün:\\\r\n\\\r\n\n-   Kart çıktılarını kullanın\\\r\n-
        \  Bir kullanıcı arayüzü öğesinin genişliğini, yüksekliğini veya konumunu
        değiştirin\\\r\n-   Sensör değerlerine dayalı farklı görüntüler görüntülemek
        için koşullu ifadeleri kullanın"
      CSD U6 analog challenge_2019: "# Meydan Okuma\\\r\n\n\\\r\n_Bu meydan okumadan
        önce öğretmeninizle birlikte kontrol edin_\\\r\n\\\r\nÇeşitli analog sensörlerden
        gelen girdileri almakta ve ölçeklerinizi ihtiyaçlarınızı karşılamak için değiştirdiğinize
        göre, sensör verileri için ilginç bir kullanım bulabilir misiniz? Bir sensörden
        gelen ham sayıları görüntülemek kolaydır, ancak bu verileri farklı şekillerde
        sunmak çok daha ilginçtir.\\\r\n\\\r\nSensör verilerini iletişim kurmak için
        aşağıdaki yolları düşünün:\\\r\n\\\r\n\n-   Kart çıktılarını kullanın\\\r\n-
        \  Bir kullanıcı arayüzü öğesinin genişliğini, yüksekliğini veya konumunu
        değiştirin\\\r\n-   Sensör değerlerine dayalı farklı görüntüler görüntülemek
        için koşullu ifadeleri kullanın"
      CSD U6 analog change: "# Etkinlik Değiştirin\\\r\n\n\\\r\nVeri olayı, kodunuzun
        sürekli çalışmasına aldırmazsanız iyidir, ancak bazen bu, sorununuza en etkili
        çözüm değildir. Sensör \"change\" olayı, sensör değeri son okumadan bu yana
        değişirse gerek duyulmadığında programınızın çalışmadığından emin olabilirsiniz.\\\r\n\\\r\n\n#
        \n\nBunu Yapın\\\r\n\\\r\nSağlanan olay işleyicisini kullanarak, zil sesini
        duyuran ve sıcaklık sensörü okuması değiştiğinde \"temp\\_value\" değerlerini
        güncelleyen bir program yazın. Değiştirmek ve programınızın nasıl tepki verdiğini
        görmek için baş parmağınızı sıcaklık sensörünün üzerine getirin."
      CSD U6 analog change_2018: "# Etkinlik Değiştirin\\\r\n\n\\\r\nVeri olayı, kodunuzun
        sürekli çalışmasına aldırmazsanız iyidir, ancak bazen bu, sorununuza en etkili
        çözüm değildir. Sensör \"change\" olayı, sensör değeri son okumadan bu yana
        değişirse gerek duyulmadığında programınızın çalışmadığından emin olabilirsiniz.\\\r\n\\\r\n\n#
        \n\nBunu Yapın\\\r\n\\\r\nSağlanan olay işleyicisini kullanarak, zil sesini
        duyuran ve sıcaklık sensörü okuması değiştiğinde \"temp\\_value\" değerlerini
        güncelleyen bir program yazın. Değiştirmek ve programınızın nasıl tepki verdiğini
        görmek için baş parmağınızı sıcaklık sensörünün üzerine getirin."
      CSD U6 analog change_2019: "# Etkinlik Değiştirin\\\r\n\n\\\r\nVeri olayı, kodunuzun
        sürekli çalışmasına aldırmazsanız iyidir, ancak bazen bu, sorununuza en etkili
        çözüm değildir. Sensör \"change\" olayı, sensör değeri son okumadan bu yana
        değişirse gerek duyulmadığında programınızın çalışmadığından emin olabilirsiniz.\\\r\n\\\r\n\n#
        \n\nBunu Yapın\\\r\n\\\r\nSağlanan olay işleyicisini kullanarak, zil sesini
        duyuran ve sıcaklık sensörü okuması değiştiğinde \"temp\\_value\" değerlerini
        güncelleyen bir program yazın. Değiştirmek ve programınızın nasıl tepki verdiğini
        görmek için baş parmağınızı sıcaklık sensörünün üzerine getirin."
      CSD U6 analog data: "# Veri Olayı\\\r\n\n\\\r\nBu benzer sensörlerin her biri
        sensörden her seferimde yeni veri geldiğinde meydana gelen \"veri\" diye adlandırılan
        özel bir olayı yayarlar. Bu olayı kullanrak, sürekli güncellenen programlar
        yazabiliriz.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\nBu derste çalıştığın ilk
        program bu, Bakalım \"veri\" olayını kullanarak sesi sürekli güncelleyebilecek
        miyiz.\\\r\n\\\r\n\n-   Ses sensörünün \"veri\" olayına yanıt vermesi için
        bir olay denetimcisi oluşturun\\\r\n-   Var olan kodu olay denetimcinizin
        içine taşıyın"
      CSD U6 analog data_2018: "# Veri Olayı\\\r\n\n\\\r\nBu benzer sensörlerin her
        biri sensörden her seferimde yeni veri geldiğinde meydana gelen \"veri\" diye
        adlandırılan özel bir olayı yayarlar. Bu olayı kullanrak, sürekli güncellenen
        programlar yazabiliriz.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\nBu derste çalıştığın
        ilk program bu, Bakalım \"veri\" olayını kullanarak sesi sürekli güncelleyebilecek
        miyiz.\\\r\n\\\r\n\n-   Ses sensörünün \"veri\" olayına yanıt vermesi için
        bir olay denetimcisi oluşturun\\\r\n-   Var olan kodu olay denetimcinizin
        içine taşıyın"
      CSD U6 analog data_2019: "# Veri Olayı\\\r\n\n\\\r\nBu benzer sensörlerin her
        biri sensörden her seferimde yeni veri geldiğinde meydana gelen \"veri\" diye
        adlandırılan özel bir olayı yayarlar. Bu olayı kullanrak, sürekli güncellenen
        programlar yazabiliriz.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\nBu derste çalıştığın
        ilk program bu, Bakalım \"veri\" olayını kullanarak sesi sürekli güncelleyebilecek
        miyiz.\\\r\n\\\r\n\n-   Ses sensörünün \"veri\" olayına yanıt vermesi için
        bir olay denetimcisi oluşturun\\\r\n-   Var olan kodu olay denetimcinizin
        içine taşıyın"
      CSD U6 analog light: |-
        # Light Sensor Updates

        This app is very similar to the last, but we've added a button with the ID "update\_button". Write a program that displays the current value of the light sensor every time the update button is clicked.

        # Do This

        Use an event handler to update the text of "light\_value" using the `lightSensor.value` block.
      CSD U6 analog light_2018: |-
        # Light Sensor Updates

        This app is very similar to the last, but we've added a button with the ID "update\_button". Write a program that displays the current value of the light sensor every time the update button is clicked.

        # Do This

        Use an event handler to update the text of "light\_value" using the `lightSensor.value` block.
      CSD U6 analog light_2019: |-
        # Light Sensor Updates

        This app is very similar to the last, but we've added a button with the ID "update\_button". Write a program that displays the current value of the light sensor every time the update button is clicked.

        # Do This

        Use an event handler to update the text of "light\_value" using the `lightSensor.value` block.
      CSD U6 analog rbg 1: "# Sensörün Okuduklarını Renkli Gösterme\\\r\n\n\\\r\nErken
        tahmin seviyelerinde, 'ölçeğiAyarla()' methodunun sensör verilerinin tam aralığını(0-1023)
        nasıl RGB değerlerinde(0-255) bir aralığa çevirebileceğini gördünüz. Hadi
        vu düşünce doğrultusunda tüm üç benzer sensörün mevcut değerlerini tek bir
        renkle bildiren bir uygulama inşa edelim.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\nBaşlangıç
        olarak, sadece sensörlerin ölçeklerini düzgün ayarlamaya ihtiyacımız var -
        arka plannın rengini ayarlamayı henüz dert etmeyin.\\\r\n\\\r\n\n-   'sensör.ölçeğiAyarla()'
        bloğunu kullanarak, RGB kanalı için her bir ışık ve ses sensörünü doğru ölçekte
        ayarlayın.\\\r\n-   Üç rengin her biri için bir değişken oluşturun ve her
        birini farklı sensör değerine atayın.\\\r\n-   Değişkenelerin doğru uzaklıkta
        olduğunu test etmek için 'konsol.günlüğü()' kullanın.\\\r\n    \\\r\n    _İpucu:
        Sıralama önemlidir. Sensörün ölçeğini değerini ölçmeden önce ayalamanız gerekir_\\\r\n
        \   _İpucu: Sıcaklık sönsörü celsius ve farenheit olarak okuma yapabilir -
        her iki türlüde RGB için gerekli aralıkta bir değer vermesi gerektiğini unutmayın_"
      CSD U6 analog rbg 1_2018: "# Sensörün Okuduklarını Renkli Gösterme\\\r\n\n\\\r\nErken
        tahmin seviyelerinde, 'ölçeğiAyarla()' methodunun sensör verilerinin tam aralığını(0-1023)
        nasıl RGB değerlerinde(0-255) bir aralığa çevirebileceğini gördünüz. Hadi
        vu düşünce doğrultusunda tüm üç benzer sensörün mevcut değerlerini tek bir
        renkle bildiren bir uygulama inşa edelim.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\nBaşlangıç
        olarak, sadece sensörlerin ölçeklerini düzgün ayarlamaya ihtiyacımız var -
        arka plannın rengini ayarlamayı henüz dert etmeyin.\\\r\n\\\r\n\n-   'sensör.ölçeğiAyarla()'
        bloğunu kullanarak, RGB kanalı için her bir ışık ve ses sensörünü doğru ölçekte
        ayarlayın.\\\r\n-   Üç rengin her biri için bir değişken oluşturun ve her
        birini farklı sensör değerine atayın.\\\r\n-   Değişkenelerin doğru uzaklıkta
        olduğunu test etmek için 'konsol.günlüğü()' kullanın.\\\r\n    \\\r\n    _İpucu:
        Sıralama önemlidir. Sensörün ölçeğini değerini ölçmeden önce ayalamanız gerekir_\\\r\n
        \   _İpucu: Sıcaklık sönsörü celsius ve farenheit olarak okuma yapabilir -
        her iki türlüde RGB için gerekli aralıkta bir değer vermesi gerektiğini unutmayın_"
      CSD U6 analog rbg 1_2019: "# Sensörün Okuduklarını Renkli Gösterme\\\r\n\n\\\r\nErken
        tahmin seviyelerinde, 'ölçeğiAyarla()' methodunun sensör verilerinin tam aralığını(0-1023)
        nasıl RGB değerlerinde(0-255) bir aralığa çevirebileceğini gördünüz. Hadi
        vu düşünce doğrultusunda tüm üç benzer sensörün mevcut değerlerini tek bir
        renkle bildiren bir uygulama inşa edelim.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\nBaşlangıç
        olarak, sadece sensörlerin ölçeklerini düzgün ayarlamaya ihtiyacımız var -
        arka plannın rengini ayarlamayı henüz dert etmeyin.\\\r\n\\\r\n\n-   'sensör.ölçeğiAyarla()'
        bloğunu kullanarak, RGB kanalı için her bir ışık ve ses sensörünü doğru ölçekte
        ayarlayın.\\\r\n-   Üç rengin her biri için bir değişken oluşturun ve her
        birini farklı sensör değerine atayın.\\\r\n-   Değişkenelerin doğru uzaklıkta
        olduğunu test etmek için 'konsol.günlüğü()' kullanın.\\\r\n    \\\r\n    _İpucu:
        Sıralama önemlidir. Sensörün ölçeğini değerini ölçmeden önce ayalamanız gerekir_\\\r\n
        \   _İpucu: Sıcaklık sönsörü celsius ve farenheit olarak okuma yapabilir -
        her iki türlüde RGB için gerekli aralıkta bir değer vermesi gerektiğini unutmayın_"
      CSD U6 analog rbg 2: "# Ekranı Renklendirme\\\r\n\n\\\r\nŞimdi sensör veriniz
        RGB için ölçekli, ekran rengi ayarlarına başlayabilirsiniz.\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n\\\r\n\n-   setProperty() bloğu ekleyin ve onu \"screen1\"
        ögesinin \"background-color\" özelliğini değiştirmesi için ayarlayın.\\\r\n-
        \  setProperty() bloğunun son parametresine 'rgb()' bloğu ekleyin.\\\r\n-
        \  'rgb()' bloğu için girdi olarak oluşturduğunuz 3 farklı renk değişkenini
        kullanın."
      CSD U6 analog rbg 2_2018: "# Ekranı Renklendirme\\\r\n\n\\\r\nŞimdi sensör veriniz
        RGB için ölçekli, ekran rengi ayarlarına başlayabilirsiniz.\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n\\\r\n\n-   setProperty() bloğu ekleyin ve onu \"screen1\"
        ögesinin \"background-color\" özelliğini değiştirmesi için ayarlayın.\\\r\n-
        \  setProperty() bloğunun son parametresine 'rgb()' bloğu ekleyin.\\\r\n-
        \  'rgb()' bloğu için girdi olarak oluşturduğunuz 3 farklı renk değişkenini
        kullanın."
      CSD U6 analog rbg 2_2019: "# Ekranı Renklendirme\\\r\n\n\\\r\nŞimdi sensör veriniz
        RGB için ölçekli, ekran rengi ayarlarına başlayabilirsiniz.\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n\\\r\n\n-   setProperty() bloğu ekleyin ve onu \"screen1\"
        ögesinin \"background-color\" özelliğini değiştirmesi için ayarlayın.\\\r\n-
        \  setProperty() bloğunun son parametresine 'rgb()' bloğu ekleyin.\\\r\n-
        \  'rgb()' bloğu için girdi olarak oluşturduğunuz 3 farklı renk değişkenini
        kullanın."
      CSD U6 analog rgb 3: "# Sürekli Güncelleme\\\r\n\n\\\r\nSensörden-renge uygulaması
        eğer sadece uygulama başladığında rengi ayarlıyorsa çok da kullanışlı değil
        demektir. Uygulamanızın arka plan renginin değer değiştikçe sürekli olarak
        güncellemesi için sensör verileri olaylarını kullanın.\\\r\n\\\r\nProgramın
        sürekli güncellemesi için 'setScale()' bloğunuzu sensörlerinizden birinin
        olay yöneticisi içerisine taşıyın."
      CSD U6 analog rgb 3_2018: "# Sürekli Güncelleme\\\r\n\n\\\r\nSensörden-renge
        uygulaması eğer sadece uygulama başladığında rengi ayarlıyorsa çok da kullanışlı
        değil demektir. Uygulamanızın arka plan renginin değer değiştikçe sürekli
        olarak güncellemesi için sensör verileri olaylarını kullanın.\\\r\n\\\r\nProgramın
        sürekli güncellemesi için 'setScale()' bloğunuzu sensörlerinizden birinin
        olay yöneticisi içerisine taşıyın."
      CSD U6 analog rgb 3_2019: "# Sürekli Güncelleme\\\r\n\n\\\r\nSensörden-renge
        uygulaması eğer sadece uygulama başladığında rengi ayarlıyorsa çok da kullanışlı
        değil demektir. Uygulamanızın arka plan renginin değer değiştikçe sürekli
        olarak güncellemesi için sensör verileri olaylarını kullanın.\\\r\n\\\r\nProgramın
        sürekli güncellemesi için 'setScale()' bloğunuzu sensörlerinizden birinin
        olay yöneticisi içerisine taşıyın."
      CSD U6 analog sound: |-
        # Reading the Sound Sensor

        The `soundSensor.value` block allows you to get the current sound sensor reading

        # Do This

        In this app we've already added a text label with the id "sound\_value". Using the `soundSensor.value` block, display the value of the sound sensor.

        _Tip: You can drag the `soundSensor.value` block directly into any other block where you could type a value instead._

        ![](https://images.code.org/3bd9ac3f869e42f48aaf190944fe1c22-image-1511293198110.png)
      CSD U6 analog sound_2018: |-
        # Reading the Sound Sensor

        The `soundSensor.value` block allows you to get the current sound sensor reading

        # Do This

        In this app we've already added a text label with the id "sound\_value". Using the `soundSensor.value` block, display the value of the sound sensor.

        _Tip: You can drag the `soundSensor.value` block directly into any other block where you could type a value instead._

        ![](https://images.code.org/3bd9ac3f869e42f48aaf190944fe1c22-image-1511293198110.png)
      CSD U6 analog sound_2019: |-
        # Reading the Sound Sensor

        The `soundSensor.value` block allows you to get the current sound sensor reading

        # Do This

        In this app we've already added a text label with the id "sound\_value". Using the `soundSensor.value` block, display the value of the sound sensor.

        _Tip: You can drag the `soundSensor.value` block directly into any other block where you could type a value instead._

        ![](https://images.code.org/3bd9ac3f869e42f48aaf190944fe1c22-image-1511293198110.png)
      CSD U6 analog temp: "# Termometre Uygulaması Yap\\\r\n\n\\\r\nIşık ve ses sensörleri
        değer (value) özelliğiyle sadece ham değerlere sahipken, sıcaklık sensörü
        biraz daha akıllıdır. 'tempSensor.value' yerine ham değerleri Fahrenhayt ve
        Santigrat'a çeviren 'tempSensor.F' ve 'tempSensor.C' olmak üzere 2 özellik
        vardır.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\nSıcaklık sensöründen değerleri
        okuyan basit bir termometre uygulaması yap. Uygulaman sıcaklığı ya Fahrenhayt
        ya da Santigrat olarak (ya da her ikisi olarak!) göstersin.\\\r\n\\\r\n_Meydan
        Okuma:\nUygulamanı sıcaklık okumalarını sürekli güncelleyen bir şekilde programlayabilir
        misin?_"
      CSD U6 analog temp_2018: "# Termometre Uygulaması Yap\\\r\n\n\\\r\nIşık ve ses
        sensörleri değer (value) özelliğiyle sadece ham değerlere sahipken, sıcaklık
        sensörü biraz daha akıllıdır. 'tempSensor.value' yerine ham değerleri Fahrenhayt
        ve Santigrat'a çeviren 'tempSensor.F' ve 'tempSensor.C' olmak üzere 2 özellik
        vardır.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\nSıcaklık sensöründen değerleri
        okuyan basit bir termometre uygulaması yap. Uygulaman sıcaklığı ya Fahrenhayt
        ya da Santigrat olarak (ya da her ikisi olarak!) göstersin.\\\r\n\\\r\n_Meydan
        Okuma:\nUygulamanı sıcaklık okumalarını sürekli güncelleyen bir şekilde programlayabilir
        misin?_"
      CSD U6 analog temp_2019: "# Termometre Uygulaması Yap\\\r\n\n\\\r\nIşık ve ses
        sensörleri değer (value) özelliğiyle sadece ham değerlere sahipken, sıcaklık
        sensörü biraz daha akıllıdır. 'tempSensor.value' yerine ham değerleri Fahrenhayt
        ve Santigrat'a çeviren 'tempSensor.F' ve 'tempSensor.C' olmak üzere 2 özellik
        vardır.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\nSıcaklık sensöründen değerleri
        okuyan basit bir termometre uygulaması yap. Uygulaman sıcaklığı ya Fahrenhayt
        ya da Santigrat olarak (ya da her ikisi olarak!) göstersin.\\\r\n\\\r\n_Meydan
        Okuma:\nUygulamanı sıcaklık okumalarını sürekli güncelleyen bir şekilde programlayabilir
        misin?_"
      CSD U6 analog threshold: |-
        # Change Threshold

        By default a sensor's "change" event fires every time the sensor value changes at all, even by one. The light and sound sensors are constantly fluctuating, so you probably want the "change" event to be a little less responsive. The `threshold` property allows you to set how much a sensor should change before considering it a "change" event - so setting `soundSensor.threshold = 100` would cause the sound sensor's "change" event only to trigger if its value increased or decreased by at least 100.

        # Do This

        This app changes the background color of the screen whenever the sound sensor value changes, but we want to only respond to big changes in volume (like a loud noise). Use the `soundSensor.threshold` block to fix it.

        -   Add a `soundSensor.threshold` block before the event handler
        -   Test out which how different threshold values impact the "change" event
        -   Choose a threshold value that makes the screen background change only when a loud noise is sensed.

        _Tip: Your threshold depends on how much ambient noise there is in the room, and how much it changes. A threshold that works in a quiet room may not work in a louder classroom._
      CSD U6 analog threshold_2018: |-
        # Change Threshold

        By default a sensor's "change" event fires every time the sensor value changes at all, even by one. The light and sound sensors are constantly fluctuating, so you probably want the "change" event to be a little less responsive. The `threshold` property allows you to set how much a sensor should change before considering it a "change" event - so setting `soundSensor.threshold = 100` would cause the sound sensor's "change" event only to trigger if its value increased or decreased by at least 100.

        # Do This

        This app changes the background color of the screen whenever the sound sensor value changes, but we want to only respond to big changes in volume (like a loud noise). Use the `soundSensor.threshold` block to fix it.

        -   Add a `soundSensor.threshold` block before the event handler
        -   Test out how different threshold values impact the "change" event
        -   Choose a threshold value that makes the screen background change only when a loud noise is sensed.

        _Tip: Your threshold depends on how much ambient noise there is in the room, and how much it changes. A threshold that works in a quiet room may not work in a louder classroom._
      CSD U6 analog threshold_2019: |-
        # Change Threshold

        By default a sensor's "change" event fires every time the sensor value changes at all, even by one. The light and sound sensors are constantly fluctuating, so you probably want the "change" event to be a little less responsive. The `threshold` property allows you to set how much a sensor should change before considering it a "change" event - so setting `soundSensor.threshold = 100` would cause the sound sensor's "change" event only to trigger if its value increased or decreased by at least 100.

        # Do This

        This app changes the background color of the screen whenever the sound sensor value changes, but we want to only respond to big changes in volume (like a loud noise). Use the `soundSensor.threshold` block to fix it.

        -   Add a `soundSensor.threshold` block before the event handler
        -   Test out how different threshold values impact the "change" event
        -   Choose a threshold value that makes the screen background change only when a loud noise is sensed.

        _Tip: Your threshold depends on how much ambient noise there is in the room, and how much it changes. A threshold that works in a quiet room may not work in a louder classroom._
      CSD U6 array piano: "# Piyano Panik\\\r\n\n\\\r\nŞimdiye kadar bir dizi eleman
        kullandınız. Şimdi dizinin içinde ne olduğunu değiştireceksiniz.\\\r\n\\\r\nİyi
        arkadaşımız piyano geri geldi, şimdi iki dizilişten notalar çalmasının dışında:
        doğal notaları tutan 'notalar' (C, D, E, F, G, A, B), ve keskin notaları tutan
        'keskinNotalar' (C#, D#, F#, G#, A#).\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\nŞu
        anda 'keskinNotalar' dizisi yanlızca bir öğeye sahip.\\\r\n\\\r\n\n-   Diziyi
        düzeltin böylece piyanodaki keskin tuşlar doğru notayı çalabilir."
      CSD U6 array piano_2018: "# Piyano Panik\\\r\n\n\\\r\nŞimdiye kadar bir dizi
        eleman kullandınız. Şimdi dizinin içinde ne olduğunu değiştireceksiniz.\\\r\n\\\r\nİyi
        arkadaşımız piyano geri geldi, şimdi iki dizilişten notalar çalmasının dışında:
        doğal notaları tutan 'notalar' (C, D, E, F, G, A, B), ve keskin notaları tutan
        'keskinNotalar' (C#, D#, F#, G#, A#).\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\nŞu
        anda 'keskinNotalar' dizisi yanlızca bir öğeye sahip.\\\r\n\\\r\n\n-   Diziyi
        düzeltin böylece piyanodaki keskin tuşlar doğru notayı çalabilir."
      CSD U6 array piano_2019: "# Piyano Panik\\\r\n\n\\\r\nŞimdiye kadar bir dizi
        eleman kullandınız. Şimdi dizinin içinde ne olduğunu değiştireceksiniz.\\\r\n\\\r\nİyi
        arkadaşımız piyano geri geldi, şimdi iki dizilişten notalar çalmasının dışında:
        doğal notaları tutan 'notalar' (C, D, E, F, G, A, B), ve keskin notaları tutan
        'keskinNotalar' (C#, D#, F#, G#, A#).\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\nŞu
        anda 'keskinNotalar' dizisi yanlızca bir öğeye sahip.\\\r\n\\\r\n\n-   Diziyi
        düzeltin böylece piyanodaki keskin tuşlar doğru notayı çalabilir."
      CSD U6 arrays video: |-
        ## Questions to Consider

        -   When might an array be more useful than a variable?
        -   Why do you always need to assign an array to a variable?
        -   How can you access the elements in your array?
      CSD U6 board getters: "# Devre Oyun Alanını Kullanmak\\\r\n\n\\\r\nAlıcıları
        ve Ayarlayıcıları Devre Oyun Alanı ile de kullanabilirsiniz. Bu seviye için,\nkartınızı
        fişe takmanız gerekecek.\\\r\n\\\r\nKodu okuyun ve programın ne yapacağını
        tahmin edin, sonra tahminizi test etmek için \"Çalıştır'a\" basın."
      CSD U6 board getters_2018: "# Devre Oyun Alanını Kullanmak\\\r\n\n\\\r\nAlıcıları
        ve Ayarlayıcıları Devre Oyun Alanı ile de kullanabilirsiniz. Bu seviye için,\nkartınızı
        fişe takmanız gerekecek.\\\r\n\\\r\nKodu okuyun ve programın ne yapacağını
        tahmin edin, sonra tahminizi test etmek için \"Çalıştır'a\" basın."
      CSD U6 board getters_2019: "# Devre Oyun Alanını Kullanmak\\\r\n\n\\\r\nAlıcıları
        ve Ayarlayıcıları Devre Oyun Alanı ile de kullanabilirsiniz. Bu seviye için,\nkartınızı
        fişe takmanız gerekecek.\\\r\n\\\r\nKodu okuyun ve programın ne yapacağını
        tahmin edin, sonra tahminizi test etmek için \"Çalıştır'a\" basın."
      CSD U6 challenge motorcycle_2018: "# Zor Görev\\\r\n\n\\\r\nBu programı\nkullanarak,
        özellikleri alma ve ayarlama ile biraz daha deneme yapın. Deneyebileceğiniz
        bazı fikirler:\\\r\n\\\r\n\n-   Motosikletin hareketini aşağı ve yukarı doğru
        olarak \n    değiştirmek için değiştir düğmesini kullanın.\\\r\n-   Motosikletin
        rengini değiştirmek için \n    renk isimleri olan bir aşağı açılır menü kullanın\\\r\n-
        \  Motosiklet ekranın en üstüne ya da en altına ulaştığında \n    zilin çalmasını
        veya LED'in yanmasını sağlayın."
      CSD U6 challenge motorcycle_2019: "# Zor Görev\\\r\n\n\\\r\nBu programı\nkullanarak,
        özellikleri alma ve ayarlama ile biraz daha deneme yapın. Deneyebileceğiniz
        bazı fikirler:\\\r\n\\\r\n\n-   Motosikletin hareketini aşağı ve yukarı doğru
        olarak \n    değiştirmek için değiştir düğmesini kullanın.\\\r\n-   Motosikletin
        rengini değiştirmek için \n    renk isimleri olan bir aşağı açılır menü kullanın\\\r\n-
        \  Motosiklet ekranın en üstüne ya da en altına ulaştığında \n    zilin çalmasını
        veya LED'in yanmasını sağlayın."
      CSD U6 change: "# Değiştir\\\r\n\n\\\r\nSon seviyede, sol butona bastığınızda
        program kaydırıcıdan sadece aralık bir değer aldı. Bazen kullanıcı yeni bir
        değer seçer seçmez LED'in aralığını değiştirmek isteyeceksiniz. Bunun için,
        \"değiştir\" olayına ihtiyacınız var.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\n\n-
        \  Programdaki ilk olay bloğuna bakın ve \"değiştir\" yazan yeri bulun.\\\r\n-
        \  Olay bloğunun içinde, kaydırıcıdan aralık değer alın ve LED'i yeni oranda
        yanıp söndürmek için kullanın.\\\r\n-   Programı çalıştırın, LED hızının otomatik
        olarak değişip değişmediğini kaydırıcıyı hareket ettirerek görün."
      CSD U6 change_2018: "# Değiştir\\\r\n\n\\\r\nSon seviyede, sol butona bastığınızda
        program kaydırıcıdan sadece aralık bir değer aldı. Bazen kullanıcı yeni bir
        değer seçer seçmez LED'in aralığını değiştirmek isteyeceksiniz. Bunun için,
        \"değiştir\" olayına ihtiyacınız var.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\n\n-
        \  Programdaki ilk olay bloğuna bakın ve \"değiştir\" yazan yeri bulun.\\\r\n-
        \  Olay bloğunun içinde, kaydırıcıdan aralık değer alın ve LED'i yeni oranda
        yanıp söndürmek için kullanın.\\\r\n-   Programı çalıştırın, LED hızının otomatik
        olarak değişip değişmediğini kaydırıcıyı hareket ettirerek görün."
      CSD U6 change_2019: "# Değiştir\\\r\n\n\\\r\nSon seviyede, sol butona bastığınızda
        program kaydırıcıdan sadece aralık bir değer aldı. Bazen kullanıcı yeni bir
        değer seçer seçmez LED'in aralığını değiştirmek isteyeceksiniz. Bunun için,
        \"değiştir\" olayına ihtiyacınız var.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\n\n-
        \  Programdaki ilk olay bloğuna bakın ve \"değiştir\" yazan yeri bulun.\\\r\n-
        \  Olay bloğunun içinde, kaydırıcıdan aralık değer alın ve LED'i yeni oranda
        yanıp söndürmek için kullanın.\\\r\n-   Programı çalıştırın, LED hızının otomatik
        olarak değişip değişmediğini kaydırıcıyı hareket ettirerek görün."
      CSD U6 circuit createButton: "<div style=\"float: right\"\nmarkdown=\"1\">\r\n\r\n![expandable](https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_alligator.png)\r\n\r\n</div>\r\n\r\n#
        Kendi Butonlarınızı Yapın\r\n\r\nLED'lere benzer şekilde, butonlar tahtanıza
        kolayca ekleyebileceğiniz çok basit çemberlerdir. LED'ler gibi, butonlar numaralandırılmış
        pimden zemin pimine bağlı olmalıdırlar, Ama LED'lerin aksine, bir buton çemberi
        ortada bağlantısız olmalıdır. Çemberi bağladığınızda, bir tuşa bas olayı üretecektir.\r\n\r\n#
        Bunu Yap\r\n\r\n* İki kablo alın.\r\n* Bir kabloyu açık numaralandırılmış
        bir pime bağlayın.\r\n* İkinci kabloyu bir zemin pimine bağlayın.\r\n* 2.
        satırı güncelleyin bu sayede referans olacaktır.\r\n* Sağlanan kodu çalıştırın.\r\n*
        Program çalışırken, tuşa \"bas\"mak için her iki kablonun da bağlı olmayan
        uçlarına birlikte dokunun.\r\n\r\n_İpucu: A butonu çemberi elektriksel olarak
        iletken olduğu sürece birçok farklı materyalden yapılabilir. Butonları folyo,
        gümüş eşya, veya ataşlardan yapmayı deneyin._"
      CSD U6 circuit createButton_2018: "<div style=\"float: right\"\nmarkdown=\"1\">\r\n\r\n![expandable](https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_alligator.png)\r\n\r\n</div>\r\n\r\n#
        Kendi Butonlarınızı Yapın\r\n\r\nLED'lere benzer şekilde, butonlar tahtanıza
        kolayca ekleyebileceğiniz çok basit çemberlerdir. LED'ler gibi, butonlar numaralandırılmış
        pimden zemin pimine bağlı olmalıdırlar, Ama LED'lerin aksine, bir buton çemberi
        ortada bağlantısız olmalıdır. Çemberi bağladığınızda, bir tuşa bas olayı üretecektir.\r\n\r\n#
        Bunu Yap\r\n\r\n* İki kablo alın.\r\n* Bir kabloyu açık numaralandırılmış
        bir pime bağlayın.\r\n* İkinci kabloyu bir zemin pimine bağlayın.\r\n* 2.
        satırı güncelleyin bu sayede referans olacaktır.\r\n* Sağlanan kodu çalıştırın.\r\n*
        Program çalışırken, tuşa \"bas\"mak için her iki kablonun da bağlı olmayan
        uçlarına birlikte dokunun.\r\n\r\n_İpucu: A butonu çemberi elektriksel olarak
        iletken olduğu sürece birçok farklı materyalden yapılabilir. Butonları folyo,
        gümüş eşya, veya ataşlardan yapmayı deneyin._"
      CSD U6 circuit createButton_2019: "<div style=\"float: right\"\nmarkdown=\"1\">\r\n\r\n![expandable](https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_alligator.png)\r\n\r\n</div>\r\n\r\n#
        Kendi Butonlarınızı Yapın\r\n\r\nLED'lere benzer şekilde, butonlar tahtanıza
        kolayca ekleyebileceğiniz çok basit çemberlerdir. LED'ler gibi, butonlar numaralandırılmış
        pimden zemin pimine bağlı olmalıdırlar, Ama LED'lerin aksine, bir buton çemberi
        ortada bağlantısız olmalıdır. Çemberi bağladığınızda, bir tuşa bas olayı üretecektir.\r\n\r\n#
        Bunu Yap\r\n\r\n* İki kablo alın.\r\n* Bir kabloyu açık numaralandırılmış
        bir pime bağlayın.\r\n* İkinci kabloyu bir zemin pimine bağlayın.\r\n* 2.
        satırı güncelleyin bu sayede referans olacaktır.\r\n* Sağlanan kodu çalıştırın.\r\n*
        Program çalışırken, tuşa \"bas\"mak için her iki kablonun da bağlı olmayan
        uçlarına birlikte dokunun.\r\n\r\n_İpucu: A butonu çemberi elektriksel olarak
        iletken olduğu sürece birçok farklı materyalden yapılabilir. Butonları folyo,
        gümüş eşya, veya ataşlardan yapmayı deneyin._"
      CSD U6 circuit createLed: "# Tahta objeleri oluşturmak\\\r\n\n\\\r\nFark etmiş
        olabilirsiniz ki yeni kullandığımız bloklar farklı bir alet çantası çekemcesinin
        içinde. **Devre** çekmecesi Devre Parkı'nda yapılmış bütün tahta objelerini
        içerir, ama kendi devrelerinizi bağlamaya başladığınızda Yaratıcı Alet Takımı
        artık neyin nerede olduğunu bilmez.\\\r\n\\\r\nYeni **Yaratıcı** çekmecesi
        Devre Parkı için özelleştirilmiş olanlar yerine genel amaçlı komutları içerir.
        Gördüğünüz 'pimModu()' ve 'dijitalYaz()' komutlarına ek olarak, **Devre**
        çekmecesindeki bloklarla aynı şekilde programlanabilen tahta üzerindeki yeni
        objeleri oluşturan komutlar içerir. 'var benimLedim = led Oluştur()' komutu,
        örneğini kullandığın 'led blokları gibi davranan yeni bir LED objesi oluşturur.\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n\\\r\nBloklar için sahip olmadığımız yeni tahta objeleri oluşturduğuna
        göre, yazı modunda çalıman gerekecek. **Devre** çekmecesinden hala aşina olduğun
        blokları sürükleyebilirsin, Sadece objenin ismini değiştirmen gerekecek.\\\r\n\\\r\n\n-
        \  Daha önce olduğu gibi LED'i bağlı tut(pim 2'ye)\\\r\n-   Yazı modunda olduğundan,
        blok modunda olmadığından emin olun.\\\r\n-   'led.yanıpsöndür()' bloğunu
        yorumun altına sürükleyin '// benimLedimi Yanıp söndür'.\\\r\n-   Yazı 'led'ini
        'benimLedim'le değiştir.\\\r\n-   Kodunu test et."
      CSD U6 circuit createLed_2018: "# Tahta objeleri oluşturmak\\\r\n\n\\\r\nFark
        etmiş olabilirsiniz ki yeni kullandığımız bloklar farklı bir alet çantası
        çekemcesinin içinde. **Devre** çekmecesi Devre Parkı'nda yapılmış bütün tahta
        objelerini içerir, ama kendi devrelerinizi bağlamaya başladığınızda Yaratıcı
        Alet Takımı artık neyin nerede olduğunu bilmez.\\\r\n\\\r\nYeni **Yaratıcı**
        çekmecesi Devre Parkı için özelleştirilmiş olanlar yerine genel amaçlı komutları
        içerir. Gördüğünüz 'pimModu()' ve 'dijitalYaz()' komutlarına ek olarak, **Devre**
        çekmecesindeki bloklarla aynı şekilde programlanabilen tahta üzerindeki yeni
        objeleri oluşturan komutlar içerir. 'var benimLedim = led Oluştur()' komutu,
        örneğini kullandığın 'led blokları gibi davranan yeni bir LED objesi oluşturur.\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n\\\r\nBloklar için sahip olmadığımız yeni tahta objeleri oluşturduğuna
        göre, yazı modunda çalıman gerekecek. **Devre** çekmecesinden hala aşina olduğun
        blokları sürükleyebilirsin, Sadece objenin ismini değiştirmen gerekecek.\\\r\n\\\r\n\n-
        \  Daha önce olduğu gibi LED'i bağlı tut(pim 2'ye)\\\r\n-   Yazı modunda olduğundan,
        blok modunda olmadığından emin olun.\\\r\n-   'led.yanıpsöndür()' bloğunu
        yorumun altına sürükleyin '// benimLedimi Yanıp söndür'.\\\r\n-   Yazı 'led'ini
        'benimLedim'le değiştir.\\\r\n-   Kodunu test et."
      CSD U6 circuit createLed_2019: "# Tahta objeleri oluşturmak\\\r\n\n\\\r\nFark
        etmiş olabilirsiniz ki yeni kullandığımız bloklar farklı bir alet çantası
        çekemcesinin içinde. **Devre** çekmecesi Devre Parkı'nda yapılmış bütün tahta
        objelerini içerir, ama kendi devrelerinizi bağlamaya başladığınızda Yaratıcı
        Alet Takımı artık neyin nerede olduğunu bilmez.\\\r\n\\\r\nYeni **Yaratıcı**
        çekmecesi Devre Parkı için özelleştirilmiş olanlar yerine genel amaçlı komutları
        içerir. Gördüğünüz 'pimModu()' ve 'dijitalYaz()' komutlarına ek olarak, **Devre**
        çekmecesindeki bloklarla aynı şekilde programlanabilen tahta üzerindeki yeni
        objeleri oluşturan komutlar içerir. 'var benimLedim = led Oluştur()' komutu,
        örneğini kullandığın 'led blokları gibi davranan yeni bir LED objesi oluşturur.\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n\\\r\nBloklar için sahip olmadığımız yeni tahta objeleri oluşturduğuna
        göre, yazı modunda çalıman gerekecek. **Devre** çekmecesinden hala aşina olduğun
        blokları sürükleyebilirsin, Sadece objenin ismini değiştirmen gerekecek.\\\r\n\\\r\n\n-
        \  Daha önce olduğu gibi LED'i bağlı tut(pim 2'ye)\\\r\n-   Yazı modunda olduğundan,
        blok modunda olmadığından emin olun.\\\r\n-   'led.yanıpsöndür()' bloğunu
        yorumun altına sürükleyin '// benimLedimi Yanıp söndür'.\\\r\n-   Yazı 'led'ini
        'benimLedim'le değiştir.\\\r\n-   Kodunu test et."
      CSD U6 circuit multi led: |-
        # Wiring Multiple LEDs

        Using the `createLed()` block you can connect and control as many LEDs as your board has room for. Each LED needs to be connected to a separate numbered pin, but they can all share the same ground pin.

        # Do This

        Leave the current LED connected to pin 2, but add another one to a numbered pin of your choice. For your new LED:

        -   Add a `var myLed = createLed()` block.
        -   Replace the variable label `myLed` with a unique label.
        -   Make sure you're in text mode, not block mode.
        -   Add an `led.blink()` command.
        -   Replace the text `led` with your new LED variable.
        -   Test your code.

        _Challenge: Try adding a third LED and make all three LED blink at different intervals._
      CSD U6 circuit multi led_2018: |-
        # Wiring Multiple LEDs

        Using the `createLed()` block you can connect and control as many LEDs as your board has room for. Each LED needs to be connected to a separate numbered pin, but they can all share the same ground pin.

        # Do This

        Leave the current LED connected to pin 2, but add another one to a numbered pin of your choice. For your new LED:

        -   Add a `var myLed = createLed()` block.
        -   Replace the variable label `myLed` with a unique label.
        -   Make sure you're in text mode, not block mode.
        -   Add an `led.blink()` command.
        -   Replace the text `led` with your new LED variable.
        -   Test your code.

        _Challenge: Try adding a third LED and make all three LED blink at different intervals._
      CSD U6 circuit multi led_2019: |-
        # Wiring Multiple LEDs

        Using the `createLed()` block you can connect and control as many LEDs as your board has room for. Each LED needs to be connected to a separate numbered pin, but they can all share the same ground pin.

        # Do This

        Leave the current LED connected to pin 2, but add another one to a numbered pin of your choice. For your new LED:

        -   Add a `var myLed = createLed()` block.
        -   Replace the variable label `myLed` with a unique label.
        -   Make sure you're in text mode, not block mode.
        -   Add an `led.blink()` command.
        -   Replace the text `led` with your new LED variable.
        -   Test your code.

        _Challenge: Try adding a third LED and make all three LED blink at different intervals._
      CSD U6 circuit pinMode: |-
        # Wire a Circuit

        You can use any of the numbered pads to add additional circuits to your board. Let's use pin 2 to add another LED.

        # Do This

        -   Using a wire, connect pin 2 to the positive (+) side of an LED
        -   Using another wire, connect the negative (-) side of the LED to a ground (GND) pin (it doesn't matter which one)
        -   Run this program to test your circuit. If it worked, your LED should turn on.

        _Debugging Tip: LEDs only work if the electricity is flowing from positive to negative. If your LED doesn't light up, make sure that it's oriented the right way._
      CSD U6 circuit pinMode_2018: |-
        # Wire a Circuit

        You can use any of the numbered pads to add additional circuits to your board. Let's use pin 2 to add another LED.

        # Do This

        -   Using a wire, connect pin 2 to the positive (+) side of an LED
        -   Using another wire, connect the negative (-) side of the LED to a ground (GND) pin (it doesn't matter which one)
        -   Run this program to test your circuit. If it worked, your LED should turn on.

        _Debugging Tip: LEDs only work if the electricity is flowing from positive to negative. If your LED doesn't light up, make sure that it's oriented the right way._
      CSD U6 circuit pinMode_2019: |-
        # Wire a Circuit

        You can use any of the numbered pads to add additional circuits to your board. Let's use pin 2 to add another LED.

        # Do This

        -   Using a wire, connect pin 2 to the positive (+) side of an LED
        -   Using another wire, connect the negative (-) side of the LED to a ground (GND) pin (it doesn't matter which one)
        -   Run this program to test your circuit. If it worked, your LED should turn on.

        _Debugging Tip: LEDs only work if the electricity is flowing from positive to negative. If your LED doesn't light up, make sure that it's oriented the right way._
      CSD U6 circuit predict multi: "# Bir Tahminde Bulunun\\\r\n\n\\\r\nŞimdiye \nkadar
        kullandığınız tüm cihazlar aslında numaralı pinlere bağlı devrelerdir. Hangi
        devrenin 13 numaralı pine bağlı olduğunu görmek için kartınızda **#13'ü**
        arayın, sonra bu kodun tamamını okuyun ve program çalıştığında ne olacağını
        tahmin edin."
      CSD U6 circuit predict multi_2018: "# Bir Tahminde Bulunun\\\r\n\n\\\r\nŞimdiye
        \nkadar kullandığınız tüm cihazlar aslında numaralı pinlere bağlı devrelerdir.
        Hangi devrenin 13 numaralı pine bağlı olduğunu görmek için kartınızda **#13'ü**
        arayın, sonra bu kodun tamamını okuyun ve program çalıştığında ne olacağını
        tahmin edin."
      CSD U6 circuit predict multi_2019: "# Bir Tahminde Bulunun\\\r\n\n\\\r\nŞimdiye
        \nkadar kullandığınız tüm cihazlar aslında numaralı pinlere bağlı devrelerdir.
        Hangi devrenin 13 numaralı pine bağlı olduğunu görmek için kartınızda **#13'ü**
        arayın, sonra bu kodun tamamını okuyun ve program çalıştığında ne olacağını
        tahmin edin."
      CSD U6 circuit smart bike blinker buttons: "# Akıllı Bisiklet\n\n-   Sinyal
        Lambası Kontrolleri\\\r\n    \\\r\n    Dönüş sinyali LED'leri bağlandığında,
        onları kontrol etmek için sadece bazı butonları programlamanız gerekiyor.
        Dönüş sinyallerini kontrol etmeyi kolaylaştırmak için butonları bisiklet üzerinde
        başka bir yere koymayı isteyebilirsiniz ama şimdilik biz sadece var olan sol
        ve sağ butonları kullanacağız.\\\r\n    \\\r\n    # Bunu Yap\\\r\n    \\\r\n-
        \  Sol\n    buton basıldığında sol dönüş sinyalinin yanıp sönmesi için olay
        yöneticilerini ekleyin.\\\r\n-   Sağ\n    buton basıldığında sağ dönüş sinyalinin
        yanıp sönmesi için olay yöneticilerini \n    ekleyin.\\\r\n-   Kodunuzu test
        edin!"
      CSD U6 circuit smart bike blinker buttons_2018: "# Akıllı Bisiklet\n\n-   Sinyal
        Lambası Kontrolleri\\\r\n    \\\r\n    Dönüş sinyali LED'leri bağlandığında,
        onları kontrol etmek için sadece bazı butonları programlamanız gerekiyor.
        Dönüş sinyallerini kontrol etmeyi kolaylaştırmak için butonları bisiklet üzerinde
        başka bir yere koymayı isteyebilirsiniz ama şimdilik biz sadece var olan sol
        ve sağ butonları kullanacağız.\\\r\n    \\\r\n    # Bunu Yap\\\r\n    \\\r\n-
        \  Sol\n    buton basıldığında sol dönüş sinyalinin yanıp sönmesi için olay
        yöneticilerini ekleyin.\\\r\n-   Sağ\n    buton basıldığında sağ dönüş sinyalinin
        yanıp sönmesi için olay yöneticilerini \n    ekleyin.\\\r\n-   Kodunuzu test
        edin!"
      CSD U6 circuit smart bike blinker buttons_2019: "# Akıllı Bisiklet\n\n-   Sinyal
        Lambası Kontrolleri\\\r\n    \\\r\n    Dönüş sinyali LED'leri bağlandığında,
        onları kontrol etmek için sadece bazı butonları programlamanız gerekiyor.
        Dönüş sinyallerini kontrol etmeyi kolaylaştırmak için butonları bisiklet üzerinde
        başka bir yere koymayı isteyebilirsiniz ama şimdilik biz sadece var olan sol
        ve sağ butonları kullanacağız.\\\r\n    \\\r\n    # Bunu Yap\\\r\n    \\\r\n-
        \  Sol\n    buton basıldığında sol dönüş sinyalinin yanıp sönmesi için olay
        yöneticilerini ekleyin.\\\r\n-   Sağ\n    buton basıldığında sağ dönüş sinyalinin
        yanıp sönmesi için olay yöneticilerini \n    ekleyin.\\\r\n-   Kodunuzu test
        edin!"
      CSD U6 circuit smart bike blinkers: "# Akıllı Bisiklet\n\n-   Sinyal Lambaları\\\r\n
        \   \\\r\n    Planlama\n    rehberinizi kullanarak, sinyal lambası görevi
        görecek iki LED'i bağlayın.\\\r\n    \\\r\n    # \n    Bunu Yap\\\r\n    \\\r\n
        \   Krokodil pensleri, kablo ya da başka iletken malzeme kullanarak iki LED'i
        kartınıza bağlayın, her dönüş sinyali lambası için bir tane.\\\r\n    \\\r\n-
        \  \\*\n    Her LED'i kart üstündeki farklı numaralı pine bağlayın.\\\r\n-
        \  Her sinyal lambasına bir LED nesnesi oluşturmak için\n    `createLed()`
        bloğunu kullanın.\\\r\n    \\\r\n    _İpucu: Kullanılacak pini seçerken sinyal
        lambalarının nasıl monte edileceğini göz önünde bulundurarak kablolamanızı
        kolaylaştırın._ "
      CSD U6 circuit smart bike blinkers_2018: "# Akıllı Bisiklet\n\n-   Sinyal Lambaları\\\r\n
        \   \\\r\n    Planlama\n    rehberinizi kullanarak, sinyal lambası görevi
        görecek iki LED'i bağlayın.\\\r\n    \\\r\n    # \n    Bunu Yap\\\r\n    \\\r\n
        \   Krokodil pensleri, kablo ya da başka iletken malzeme kullanarak iki LED'i
        kartınıza bağlayın, her dönüş sinyali lambası için bir tane.\\\r\n    \\\r\n-
        \  \\*\n    Her LED'i kart üstündeki farklı numaralı pine bağlayın.\\\r\n-
        \  Her sinyal lambasına bir LED nesnesi oluşturmak için\n    `createLed()`
        bloğunu kullanın.\\\r\n    \\\r\n    _İpucu: Kullanılacak pini seçerken sinyal
        lambalarının nasıl monte edileceğini göz önünde bulundurarak kablolamanızı
        kolaylaştırın._ "
      CSD U6 circuit smart bike blinkers_2019: "# Akıllı Bisiklet\n\n-   Sinyal Lambaları\\\r\n
        \   \\\r\n    Planlama\n    rehberinizi kullanarak, sinyal lambası görevi
        görecek iki LED'i bağlayın.\\\r\n    \\\r\n    # \n    Bunu Yap\\\r\n    \\\r\n
        \   Krokodil pensleri, kablo ya da başka iletken malzeme kullanarak iki LED'i
        kartınıza bağlayın, her dönüş sinyali lambası için bir tane.\\\r\n    \\\r\n-
        \  \\*\n    Her LED'i kart üstündeki farklı numaralı pine bağlayın.\\\r\n-
        \  Her sinyal lambasına bir LED nesnesi oluşturmak için\n    `createLed()`
        bloğunu kullanın.\\\r\n    \\\r\n    _İpucu: Kullanılacak pini seçerken sinyal
        lambalarının nasıl monte edileceğini göz önünde bulundurarak kablolamanızı
        kolaylaştırın._ "
      CSD U6 circuit smart bike buzzer: |-
        # Smart Bike - Buzzer

        Now that we know how to add more buttons, you can add a button to control the smart bike's horn.

        # Do This

        Using the button that you've already wired to the board, find a good spot to place your horn button. Then:

        -   Create a button object for your horn button
        -   Add an event handler to buzz when button is pressed

        _Hint: The button object that you create won't be in the `onBoardEvent()` dropdown, so you'll need to type the name you've chosen in. Make sure not to use quotation marks!_
      CSD U6 circuit smart bike buzzer_2018: |-
        # Smart Bike - Buzzer

        Now that we know how to add more buttons, you can add a button to control the smart bike's horn.

        # Do This

        Using the button that you've already wired to the board, find a good spot to place your horn button. Then:

        -   Create a button object for your horn button
        -   Add an event handler to buzz when button is pressed

        _Hint: The button object that you create won't be in the `onBoardEvent()` dropdown, so you'll need to type the name you've chosen in. Make sure not to use quotation marks!_
      CSD U6 circuit smart bike buzzer_2019: |-
        # Smart Bike - Buzzer

        Now that we know how to add more buttons, you can add a button to control the smart bike's horn.

        # Do This

        Using the button that you've already wired to the board, find a good spot to place your horn button. Then:

        -   Create a button object for your horn button
        -   Add an event handler to buzz when button is pressed

        _Hint: The button object that you create won't be in the `onBoardEvent()` dropdown, so you'll need to type the name you've chosen in. Make sure not to use quotation marks!_
      CSD U6 circuit smart bike final: |-
        # Smart Bike - Final Touches

        At this point your smart bike should have all of its basic functionality in place. Now is your chance to add any finishing touches.

        # Do This

        You may want to divide and conquer at this point, allowing some members of your group to focus on the physical aspects of the prototype while others work on improving the code. As this is a prototype, don't worry about making everything perfect, but do try to ensure that the prototype communicates your design well enough to test and get feedback.
      CSD U6 circuit smart bike final_2018: |-
        # Smart Bike - Final Touches

        At this point your smart bike should have all of its basic functionality in place. Now is your chance to add any finishing touches.

        # Do This

        You may want to divide and conquer at this point, allowing some members of your group to focus on the physical aspects of the prototype while others work on improving the code. As this is a prototype, don't worry about making everything perfect, but do try to ensure that the prototype communicates your design well enough to test and get feedback.
      CSD U6 circuit smart bike final_2019: |-
        # Smart Bike - Final Touches

        At this point your smart bike should have all of its basic functionality in place. Now is your chance to add any finishing touches.

        # Do This

        You may want to divide and conquer at this point, allowing some members of your group to focus on the physical aspects of the prototype while others work on improving the code. As this is a prototype, don't worry about making everything perfect, but do try to ensure that the prototype communicates your design well enough to test and get feedback.
      CSD U6 circuit smart bike light: "# Akıllı Bisiklet - Far\\\r\n\n\\\r\nOtomatik
        far,\nhalletmemiz gereken akıllı bisiklet planının son parçasıdır. \\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n\\\r\nÖncelikle, far olarak ne kullanacağınıza karar vermeniz
        gerekecek. Başka bir LED devresi ekleyebilirsiniz ya da belki renkli LED'leri
        far olarak kullanmayı sağlayan kartı monte etmek için bir yol bulabilirsiniz.
        Işıklarınızın düzenini hallettikten sonra ortamın ne kadar aydınlık ya da
        karanlık olduğuna göre farı açıp kapatan kodu programınıza ekleyin.\\\r\n\\\r\n\\_İpucu:
        Eğer varolan renkli LED'leri kullanıyorsanız, ışık sensörünün LED'lerden gelen
        ışığa göre değil, ortamdaki ışık seviyesine göre tepki gösterdiğinden emin
        olmak için ışık sensörünü korumanız gerekebilir"
      CSD U6 circuit smart bike light_2018: "# Akıllı Bisiklet - Far\\\r\n\n\\\r\nOtomatik
        far,\nhalletmemiz gereken akıllı bisiklet planının son parçasıdır. \\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n\\\r\nÖncelikle, far olarak ne kullanacağınıza karar vermeniz
        gerekecek. Başka bir LED devresi ekleyebilirsiniz ya da belki renkli LED'leri
        far olarak kullanmayı sağlayan kartı monte etmek için bir yol bulabilirsiniz.
        Işıklarınızın düzenini hallettikten sonra ortamın ne kadar aydınlık ya da
        karanlık olduğuna göre farı açıp kapatan kodu programınıza ekleyin.\\\r\n\\\r\n\\_İpucu:
        Eğer varolan renkli LED'leri kullanıyorsanız, ışık sensörünün LED'lerden gelen
        ışığa göre değil, ortamdaki ışık seviyesine göre tepki gösterdiğinden emin
        olmak için ışık sensörünü korumanız gerekebilir"
      CSD U6 circuit smart bike light_2019: "# Akıllı Bisiklet - Far\\\r\n\n\\\r\nOtomatik
        far,\nhalletmemiz gereken akıllı bisiklet planının son parçasıdır. \\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n\\\r\nÖncelikle, far olarak ne kullanacağınıza karar vermeniz
        gerekecek. Başka bir LED devresi ekleyebilirsiniz ya da belki renkli LED'leri
        far olarak kullanmayı sağlayan kartı monte etmek için bir yol bulabilirsiniz.
        Işıklarınızın düzenini hallettikten sonra ortamın ne kadar aydınlık ya da
        karanlık olduğuna göre farı açıp kapatan kodu programınıza ekleyin.\\\r\n\\\r\n\\_İpucu:
        Eğer varolan renkli LED'leri kullanıyorsanız, ışık sensörünün LED'lerden gelen
        ışığa göre değil, ortamdaki ışık seviyesine göre tepki gösterdiğinden emin
        olmak için ışık sensörünü korumanız gerekebilir"
      CSD U6 colorLED on: |-
        <img src="//curriculum.code.org/images/circuitplayground/colorLedonoff.gif" style="float: right; margin: 10px;">

        # colorLeds

        The color LEDs can use the same basic commands that you used with the red LED, such as `on()` and `off()`. This program should turn on and off the bottom LEDs as shown in the picture, but only one LED is working.

        # Do This

        -   Read and run the code to see how the program turns the bottom left LED on and off.
        -   Add more code to make both bottom LEDs turn on and off.
      CSD U6 colorLED on_2018: |-
        <img src="//curriculum.code.org/images/circuitplayground/colorLedonoff.gif" style="float: right; margin: 10px;">

        # colorLeds

        The color LEDs can use the same basic commands that you used with the red LED, such as `on()` and `off()`. This program should turn on and off the bottom LEDs as shown in the picture, but only one LED is working.

        # Do This

        -   Read and run the code to see how the program turns the bottom left LED on and off.
        -   Add more code to make both bottom LEDs turn on and off.
      CSD U6 colorLED on_2019: |-
        <img src="//curriculum.code.org/images/circuitplayground/colorLedonoff.gif" style="float: right; margin: 10px;">

        # colorLeds

        The color LEDs can use the same basic commands that you used with the red LED, such as `on()` and `off()`. This program should turn on and off the bottom LEDs as shown in the picture, but only one LED is working.

        # Do This

        -   Read and run the code to see how the program turns the bottom left LED on and off.
        -   Add more code to make both bottom LEDs turn on and off.
      CSD U6 colorLeds debug: |-
        <img src="https://images.code.org/e055be621221385d3503962bee5aa616-image-1491493475417.44.28.png" style="width:250px; float:right">

        # Debug: colorLeds

        Can you debug the index values so that the rainbow shows up on the board like in the picture?
      CSD U6 colorLeds debug_2018: |-
        <img src="https://images.code.org/723f036c40ef2770426d5d437e69fcde-image-1527268321449.png" style="width:250px; float:right">

        # Debug: colorLeds

        Can you debug the index values so that the rainbow shows up on the board like in the picture?
      CSD U6 colorLeds debug_2019: |-
        <img src="https://images.code.org/723f036c40ef2770426d5d437e69fcde-image-1527268321449.png" style="width:250px; float:right">

        # Debug: colorLeds

        Can you debug the index values so that the rainbow shows up on the board like in the picture?
      CSD U6 colorLeds intensity: |-
        # Changing Brightness

        The `intensity()` command lets you set an LED's brightness (or _intensity_) from 0 - 100. This program lets you choose three levels of brightness for your rainbow lights, but the medium level doesn't work yet.

        # Do This

        -   Read the program and see how the "Bright" and "Dim" buttons work.
        -   Add code to make the "Medium" button make the rainbow a medium level of brightness (between "Bright" and "Dim"). ([Show me where](#triggercallout=code_triggered))
      CSD U6 colorLeds intensity_2018: |-
        # Changing Brightness

        The `intensity()` command lets you set an LED's brightness (or _intensity_) from 0 - 100. This program lets you choose three levels of brightness for your rainbow lights, but the medium level doesn't work yet.

        # Do This

        -   Read the program and see how the "Bright" and "Dim" buttons work.
        -   Add code to make the "Medium" button make the rainbow a medium level of brightness (between "Bright" and "Dim"). ([Show me where](#triggercallout=code_triggered))
      CSD U6 colorLeds intensity_2019: |-
        # Changing Brightness

        The `intensity()` command lets you set an LED's brightness (or _intensity_) from 0 - 100. This program lets you choose three levels of brightness for your rainbow lights, but the medium level doesn't work yet.

        # Do This

        -   Read the program and see how the "Bright" and "Dim" buttons work.
        -   Add code to make the "Medium" button make the rainbow a medium level of brightness (between "Bright" and "Dim"). ([Show me where](#triggercallout=code_triggered))
      CSD U6 colorLeds light pattern: |-
        # Light Patterns

        This app already has one light pattern program, which can be activated by clicking a button. Notice that we put this pattern into a function to make the code cleaner and clearer.

        # Do This

        Create a light pattern function of your own - maybe the colors of your favorite holiday, college, sports team, or try to create an image with the lights.

        After you've created your new function, add a button and event handler so that you can switch between the two light patterns.
      CSD U6 colorLeds light pattern_2018: |-
        # Light Patterns

        This app already has one light pattern program, which can be activated by clicking a button. Notice that we put this pattern into a function to make the code cleaner and clearer.

        # Do This

        Create a light pattern function of your own - maybe the colors of your favorite holiday, college, sports team, or try to create an image with the lights.

        After you've created your new function, add a button and event handler so that you can switch between the two light patterns.
      CSD U6 colorLeds light pattern_2019: |-
        # Light Patterns

        This app already has one light pattern program, which can be activated by clicking a button. Notice that we put this pattern into a function to make the code cleaner and clearer.

        # Do This

        Create a light pattern function of your own - maybe the colors of your favorite holiday, college, sports team, or try to create an image with the lights.

        After you've created your new function, add a button and event handler so that you can switch between the two light patterns.
      CSD U6 colorLeds predict embed: |-
        # colorLEDs

        This program uses the colorLEDs array, which lets you control the color LEDs in your Circuit Playground.

        What do you think this code will do?  Write your prediction in the box below, then run the code to see what happens.
      CSD U6 colorLeds predict embed_2018: |-
        # colorLEDs

        This program uses the colorLEDs array, which lets you control the color LEDs in your Circuit Playground.

        What do you think this code will do?  Write your prediction in the box below, then run the code to see what happens.
      CSD U6 colorLeds predict embed_2019: |-
        # colorLEDs

        This program uses the colorLEDs array, which lets you control the color LEDs in your Circuit Playground.

        What do you think this code will do?  Write your prediction in the box below, then run the code to see what happens.
      CSD U6 create LED app: |-
        # Make Your App - The Screen

        Now, you and your partner can make your own app using the LED.  Discuss with your partner what kind of app you want to make.

        # Do This

        -   Discuss with your partner what screen elements you will need in your app.  Do you want...
            -   Buttons?
            -   Images?
            -   Text?
        -   In Design Mode, add the elements, making sure you give each a meaningful ID.
      CSD U6 create LED app 2: "# Uygulamanızı Yapın - Kod\\\r\n\n\\\r\nBundan sonra,
        \nuygulamanızı çalıştıran kodu eklemeniz gerekecek.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\n\\*\nUygulamanızda
        hangi koda ihtiyacınız olacağını takım arkadaşınızla tartışın. Şunlara mı
        ihtiyacınız var?\\\r\n \\*\nOlaylara?\\\r\n\n-   Değişkenlere?\\\r\n-   Ayarlayıcılara?\\\r\n-
        \  Rastgele Sayılara?\\\r\n-   Kod\n    Modunda, uygulamanızı çalıştıracak
        kodu ekleyin."
      CSD U6 create LED app 2_2018: "# Uygulamanızı Yapın - Kod\\\r\n\n\\\r\nBundan
        sonra, \nuygulamanızı çalıştıran kodu eklemeniz gerekecek.\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n\\\r\n\\*\nUygulamanızda hangi koda ihtiyacınız olacağını
        takım arkadaşınızla tartışın. Şunlara mı ihtiyacınız var?\\\r\n \\*\nOlaylara?\\\r\n\n-
        \  Değişkenlere?\\\r\n-   Ayarlayıcılara?\\\r\n-   Rastgele Sayılara?\\\r\n-
        \  Kod\n    Modunda, uygulamanızı çalıştıracak kodu ekleyin."
      CSD U6 create LED app 2_2019: "# Uygulamanızı Yapın - Kod\\\r\n\n\\\r\nBundan
        sonra, \nuygulamanızı çalıştıran kodu eklemeniz gerekecek.\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n\\\r\n\\*\nUygulamanızda hangi koda ihtiyacınız olacağını
        takım arkadaşınızla tartışın. Şunlara mı ihtiyacınız var?\\\r\n \\*\nOlaylara?\\\r\n\n-
        \  Değişkenlere?\\\r\n-   Ayarlayıcılara?\\\r\n-   Rastgele Sayılara?\\\r\n-
        \  Kod\n    Modunda, uygulamanızı çalıştıracak kodu ekleyin."
      CSD U6 create LED app_2018: |-
        # Make Your App - The Screen

        Now, you and your partner can make your own app using the LED.  Discuss with your partner what kind of app you want to make.

        # Do This

        -   Discuss with your partner what screen elements you will need in your app.  Do you want...
            -   Buttons?
            -   Images?
            -   Text?
        -   In Design Mode, add the elements, making sure you give each a meaningful ID.
      CSD U6 create LED app_2019: |-
        # Make Your App - The Screen

        Now, you and your partner can make your own app using the LED.  Discuss with your partner what kind of app you want to make.

        # Do This

        -   Discuss with your partner what screen elements you will need in your app.  Do you want...
            -   Buttons?
            -   Images?
            -   Text?
        -   In Design Mode, add the elements, making sure you give each a meaningful ID.
      CSD U6 design motorcycle: |-
        # Add Your Own Elements

        Now it's time to add some elements of your own. The motorcycle should be able to move up and down right now, but how can you control its speed?

        # Do This

        -   Add a slider in design mode.
            -   Make sure you set the min and max values of the slider in design mode.
        -   Create an event that will trigger when the slider value is changed.
        -   Add code to get the slider value and store it into the `speed` variable when the event is triggered.
      CSD U6 design motorcycle_2018: |-
        # Add Your Own Elements

        Now it's time to add some elements of your own. The motorcycle should be able to move up and down right now, but how can you control its speed?

        # Do This

        -   Add a slider in design mode.
            -   Make sure you set the min and max values of the slider in design mode.
        -   Create an event that will trigger when the slider value is changed.
        -   Add code to get the slider value and store it into the `speed` variable when the event is triggered.
      CSD U6 design motorcycle_2019: |-
        # Add Your Own Elements

        Now it's time to add some elements of your own. The motorcycle should be able to move up and down right now, but how can you control its speed?

        # Do This

        -   Add a slider in design mode.
            -   Make sure you set the min and max values of the slider in design mode.
        -   Create an event that will trigger when the slider value is changed.
        -   Add code to get the slider value and store it into the `speed` variable when the event is triggered.
      CSD U6 directional LEDs roll: |-
        # Roll

        This program should display "Left" or "Right" on the screen, depending on which way the board is tilted.

        # Do this

        -   Use the "roll" property of the accelerometer to determine whether the board is tilted to the left or right.
        -   Use a conditional to change the text for the "direction" element to be either "Left" or "Right", depending on the board's orientation.
      CSD U6 directional LEDs roll_2018: |-
        # Roll

        This program should display "Left" or "Right" on the screen, depending on which way the board is tilted.

        # Do this

        -   Use the "roll" property of the accelerometer to determine whether the board is tilted to the left or right.
        -   Use a conditional to change the text for the "direction" element to be either "Left" or "Right", depending on the board's orientation.
      CSD U6 directional LEDs roll_2019: |-
        # Roll

        This program should display "Left" or "Right" on the screen, depending on which way the board is tilted.

        # Do this

        -   Use the "roll" property of the accelerometer to determine whether the board is tilted to the left or right.
        -   Use a conditional to change the text for the "direction" element to be either "Left" or "Right", depending on the board's orientation.
      CSD U6 directional leds pitch: |-
        # Pitch

        This program lights the top LEDs (0 and 9) when you tilt the board forward. If you tilt the board back, the LEDs at the bottom (4 and 5) should light.

        # Do This

        -   Use the board's pitch to make LEDs 4 and 5 light up when you tilt the board back.
        -   Run your code and test it a few times.
      CSD U6 directional leds pitch_2018: |-
        # Pitch

        This program lights the top LEDs (0 and 9) when you tilt the board forward. If you tilt the board back, the LEDs at the bottom (4 and 5) should light.

        # Do This

        -   Use the board's pitch to make LEDs 4 and 5 light up when you tilt the board back.
        -   Run your code and test it a few times.
      CSD U6 directional leds pitch_2019: |-
        # Pitch

        This program lights the top LEDs (0 and 9) when you tilt the board forward. If you tilt the board back, the LEDs at the bottom (4 and 5) should light.

        # Do This

        -   Use the board's pitch to make LEDs 4 and 5 light up when you tilt the board back.
        -   Run your code and test it a few times.
      CSD U6 emoji race demo: "# Emoji Yarışı!\\\r\n\n\\\r\nBu, bu dersin\nsonunda
        yapacağınız yarış oyununun bir örneğidir. Oynamak için başka bir öğrenci ile
        eşleşin. Soldaki öğrenci Devre Oyun Alanındaki sol butona mümkün olduğunca
        hızlı bir şekilde tıklarken, sağdaki öğrenci sağ butona tıklar. Emojisini
        ekranın en altına ilk ulaştıran kişi kazanır. \\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\nBir
        sınıf arkadaşınıza dönün ve\naşağıdaki bilgilerin listesini yapın.\\\r\n\\\r\n\n-
        \  Bu program kartın hangi \n    bileşenlerini kullanıyor?\\\r\n-   Bu program
        hangi olaylara tepki veriyor?\\\r\n-   \\*\n    Bu programın çalışması için
        hangi fonksiyonları oluşturmanız gerekebilir?"
      CSD U6 emoji race demo_2018: "# Emoji Yarışı!\\\r\n\n\\\r\nBu, bu dersin\nsonunda
        yapacağınız yarış oyununun bir örneğidir. Oynamak için başka bir öğrenci ile
        eşleşin. Soldaki öğrenci Devre Oyun Alanındaki sol butona mümkün olduğunca
        hızlı bir şekilde tıklarken, sağdaki öğrenci sağ butona tıklar. Emojisini
        ekranın en altına ilk ulaştıran kişi kazanır. \\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\nBir
        sınıf arkadaşınıza dönün ve\naşağıdaki bilgilerin listesini yapın.\\\r\n\\\r\n\n-
        \  Bu program kartın hangi \n    bileşenlerini kullanıyor?\\\r\n-   Bu program
        hangi olaylara tepki veriyor?\\\r\n-   \\*\n    Bu programın çalışması için
        hangi fonksiyonları oluşturmanız gerekebilir?"
      CSD U6 emoji race demo_2019: "# Emoji Yarışı!\\\r\n\n\\\r\nBu, bu dersin\nsonunda
        yapacağınız yarış oyununun bir örneğidir. Oynamak için başka bir öğrenci ile
        eşleşin. Soldaki öğrenci Devre Oyun Alanındaki sol butona mümkün olduğunca
        hızlı bir şekilde tıklarken, sağdaki öğrenci sağ butona tıklar. Emojisini
        ekranın en altına ilk ulaştıran kişi kazanır. \\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\nBir
        sınıf arkadaşınıza dönün ve\naşağıdaki bilgilerin listesini yapın.\\\r\n\\\r\n\n-
        \  Bu program kartın hangi \n    bileşenlerini kullanıyor?\\\r\n-   Bu program
        hangi olaylara tepki veriyor?\\\r\n-   \\*\n    Bu programın çalışması için
        hangi fonksiyonları oluşturmanız gerekebilir?"
      CSD U6 emotion machine 1: |-
        # Changing Images

        The first thing you'll need your emotion machine to do is change to the appropriate image when a button is clicked. If you look at the starting code, you'll see that we already added `setProperty("face", "image", "icon://fa-smile-o")` to change to a smiley face when you click happy.

        # Do This

        <div markdown="1" style="float:right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/uploads/select_image.gif)

        </div>

        Create an event handler for "sad\_button" and make it change to a sad emoji. To do this you'll need to set the "image" property of the image with id "face".

        _Tip: when you click the last dropdown in the `setProperty` block click "Choose..." to go to your media library. From there you can select an icon from our icon library or upload an image of your own._
      CSD U6 emotion machine 1_2018: |-
        # Changing Images

        The first thing you'll need your emotion machine to do is change to the appropriate image when a button is clicked. If you look at the starting code, you'll see that we already added `setProperty("face", "image", "icon://fa-smile-o")` to change to a smiley face when you click happy.

        # Do This

        <div markdown="1" style="float:right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/uploads/select_image.gif)

        </div>

        Create an event handler for "sad\_button" and make it change to a sad emoji. To do this you'll need to set the "image" property of the image with id "face".

        _Tip: when you click the last dropdown in the `setProperty` block click "Choose..." to go to your media library. From there you can select an icon from our icon library or upload an image of your own._
      CSD U6 emotion machine 1_2019: |-
        # Changing Images

        The first thing you'll need your emotion machine to do is change to the appropriate image when a button is clicked. If you look at the starting code, you'll see that we already added `setProperty("face", "image", "icon://fa-smile-o")` to change to a smiley face when you click happy.

        # Do This

        <div markdown="1" style="float:right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/uploads/select_image.gif)

        </div>

        Create an event handler for "sad\_button" and make it change to a sad emoji. To do this you'll need to set the "image" property of the image with id "face".

        _Tip: when you click the last dropdown in the `setProperty` block click "Choose..." to go to your media library. From there you can select an icon from our icon library or upload an image of your own._
      CSD U6 emotion machine 2: "# Renk Değiştirmek\\\r\n\n\\\r\nEğer\nbu uygulama
        için olan örneğe dönüp bakarsanız, bir butona tıkladığınızda sadece emojilerin
        değişmediğini aynı zamanda renklerinin de değiştiğini fark etmelisiniz.\\\r\n\\\r\n\n#
        \n\nBunu Yap\\\r\n\\\r\nHer olay yöneticisinde, \"yüz\"ün \"simge-rengi\"
        özelliğini ayarlayın. Mutlu ifade için sıcak bir renk, üzgün ifade için soğuk
        bir renk seçin."
      CSD U6 emotion machine 2_2018: "# Renk Değiştirmek\\\r\n\n\\\r\nEğer\nbu uygulama
        için olan örneğe dönüp bakarsanız, bir butona tıkladığınızda sadece emojilerin
        değişmediğini aynı zamanda renklerinin de değiştiğini fark etmelisiniz.\\\r\n\\\r\n\n#
        \n\nBunu Yap\\\r\n\\\r\nHer olay yöneticisinde, \"yüz\"ün \"simge-rengi\"
        özelliğini ayarlayın. Mutlu ifade için sıcak bir renk, üzgün ifade için soğuk
        bir renk seçin."
      CSD U6 emotion machine 2_2019: "# Renk Değiştirmek\\\r\n\n\\\r\nEğer\nbu uygulama
        için olan örneğe dönüp bakarsanız, bir butona tıkladığınızda sadece emojilerin
        değişmediğini aynı zamanda renklerinin de değiştiğini fark etmelisiniz.\\\r\n\\\r\n\n#
        \n\nBunu Yap\\\r\n\\\r\nHer olay yöneticisinde, \"yüz\"ün \"simge-rengi\"
        özelliğini ayarlayın. Mutlu ifade için sıcak bir renk, üzgün ifade için soğuk
        bir renk seçin."
      CSD U6 emotion machine 3: "# Yazıyı Ayarlamak\\\r\n\n\\\r\nSizin\nmutlu ve üzgün
        butonlarınız artık neredeyse tamamen işlevsel olmalı. Onların hala yapması
        gereken son şey, ekranın en altındaki yazıyı değiştirmek.\\\r\n\\\r\n\n# \n\nBunu
        Yap\\\r\n\\\r\nHer olay yöneticisinin \"duygu\" yazısını uygun duygu ile değiştirmesini
        sağlayın (\"mutlu\" ya da \"üzgün\")"
      CSD U6 emotion machine 3_2018: "# Yazıyı Ayarlamak\\\r\n\n\\\r\nSizin\nmutlu
        ve üzgün butonlarınız artık neredeyse tamamen işlevsel olmalı. Onların hala
        yapması gereken son şey, ekranın en altındaki yazıyı değiştirmek.\\\r\n\\\r\n\n#
        \n\nBunu Yap\\\r\n\\\r\nHer olay yöneticisinin \"duygu\" yazısını uygun duygu
        ile değiştirmesini sağlayın (\"mutlu\" ya da \"üzgün\")"
      CSD U6 emotion machine 3_2019: "# Yazıyı Ayarlamak\\\r\n\n\\\r\nSizin\nmutlu
        ve üzgün butonlarınız artık neredeyse tamamen işlevsel olmalı. Onların hala
        yapması gereken son şey, ekranın en altındaki yazıyı değiştirmek.\\\r\n\\\r\n\n#
        \n\nBunu Yap\\\r\n\\\r\nHer olay yöneticisinin \"duygu\" yazısını uygun duygu
        ile değiştirmesini sağlayın (\"mutlu\" ya da \"üzgün\")"
      CSD U6 emotion machine 4: "# Başka Bir Duygu Ekleyin\\\r\n\n\\\r\nDaha \nönce
        gördüğünüz örnek uygulamada duyguyu mutlu, üzgün veya eh olarak ayarlayabilirdiniz.
        Sizin uygulamanızda sadece mutlu ve üzgün var, üçüncü bir duygu ekleyebilir
        misiniz?\\\r\n\\\r\n\n# \n\nBunu Yap\\\r\n\\\r\nMutlu ve üzgün butonları için
        kullandığınız aynı teknikleri kullanarak üçüncü bir duygu butonu ekleyin.
        Eh kullanabilirsiniz ya da kendi duygunuzu seçebilirsiniz.\\\r\n\\\r\nBitirdiğinizde,
        son sürümünüzü göndermeden önce daha çok duygu ve özellik eklemekten çekinmeyin."
      CSD U6 emotion machine 4_2018: "# Başka Bir Duygu Ekleyin\\\r\n\n\\\r\nDaha
        \nönce gördüğünüz örnek uygulamada duyguyu mutlu, üzgün veya eh olarak ayarlayabilirdiniz.
        Sizin uygulamanızda sadece mutlu ve üzgün var, üçüncü bir duygu ekleyebilir
        misiniz?\\\r\n\\\r\n\n# \n\nBunu Yap\\\r\n\\\r\nMutlu ve üzgün butonları için
        kullandığınız aynı teknikleri kullanarak üçüncü bir duygu butonu ekleyin.
        Eh kullanabilirsiniz ya da kendi duygunuzu seçebilirsiniz.\\\r\n\\\r\nBitirdiğinizde,
        son sürümünüzü göndermeden önce daha çok duygu ve özellik eklemekten çekinmeyin."
      CSD U6 emotion machine 4_2019: "# Başka Bir Duygu Ekleyin\\\r\n\n\\\r\nDaha
        \nönce gördüğünüz örnek uygulamada duyguyu mutlu, üzgün veya eh olarak ayarlayabilirdiniz.
        Sizin uygulamanızda sadece mutlu ve üzgün var, üçüncü bir duygu ekleyebilir
        misiniz?\\\r\n\\\r\n\n# \n\nBunu Yap\\\r\n\\\r\nMutlu ve üzgün butonları için
        kullandığınız aynı teknikleri kullanarak üçüncü bir duygu butonu ekleyin.
        Eh kullanabilirsiniz ya da kendi duygunuzu seçebilirsiniz.\\\r\n\\\r\nBitirdiğinizde,
        son sürümünüzü göndermeden önce daha çok duygu ve özellik eklemekten çekinmeyin."
      CSD U6 emotion machine example: "# Duygu Makinesi\\\r\n\n\\\r\nBirazdan yapacağınız
        bu Duygu Makinesi uygulamasına bir göz atın. Nasıl çalıştığını görmek için
        butonlara basmaya deneyin.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\nUygulamayı
        deneyin,\nve sonra yakınınızdaki biriyle şunları tartışın:\\\r\n\\\r\n\n-
        \  Bu uygulama hangi olay yöneticilerini kullanıyor?\\\r\n-   Kod ile hangi
        öğeler değiştiriliyor?\\\r\n-   Bir butona \n    tıkladığınızda hangi özellikler
        değiştiriliyor?"
      CSD U6 emotion machine example_2018: "# Duygu Makinesi\\\r\n\n\\\r\nBirazdan
        yapacağınız bu Duygu Makinesi uygulamasına bir göz atın. Nasıl çalıştığını
        görmek için butonlara basmaya deneyin.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\nUygulamayı
        deneyin,\nve sonra yakınınızdaki biriyle şunları tartışın:\\\r\n\\\r\n\n-
        \  Bu uygulama hangi olay yöneticilerini kullanıyor?\\\r\n-   Kod ile hangi
        öğeler değiştiriliyor?\\\r\n-   Bir butona \n    tıkladığınızda hangi özellikler
        değiştiriliyor?"
      CSD U6 emotion machine example_2019: "# Duygu Makinesi\\\r\n\n\\\r\nBirazdan
        yapacağınız bu Duygu Makinesi uygulamasına bir göz atın. Nasıl çalıştığını
        görmek için butonlara basmaya deneyin.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\nUygulamayı
        deneyin,\nve sonra yakınınızdaki biriyle şunları tartışın:\\\r\n\\\r\n\n-
        \  Bu uygulama hangi olay yöneticilerini kullanıyor?\\\r\n-   Kod ile hangi
        öğeler değiştiriliyor?\\\r\n-   Bir butona \n    tıkladığınızda hangi özellikler
        değiştiriliyor?"
      CSD U6 for loop button array: |-
        # Looping Over Arrays

        One of the most powerful ways to use a for loop is to loop over an array, running code on each item in the array. We can do this by using the for loop counter variable (usually `i`) as the index of your array.

        # Do This

        This program should loop over the array `buttons` and do two things to each button - change the background color to red, and change the height to 50 px.

        -   Add a second `setProperty` block inside the loop
        -   Change the target to `buttons[i]`
        -   Set the "height" property to 50

        ![expandable](https://images.code.org/df3d514bae5c23de9e0fbdf1d7798432-image-1512431649584.png)
      CSD U6 for loop button array_2018: |-
        # Looping Over Arrays

        One of the most powerful ways to use a for loop is to loop over an array, running code on each item in the array. We can do this by using the for loop counter variable (usually `i`) as the index of your array.

        # Do This

        This program should loop over the array `buttons` and do two things to each button - change the background color to red, and change the height to 50 px.

        -   Add a second `setProperty` block inside the loop
        -   Change the target to `buttons[i]`
        -   Set the "height" property to 50

        ![expandable](https://images.code.org/df3d514bae5c23de9e0fbdf1d7798432-image-1512431649584.png)
      CSD U6 for loop button array_2019: |-
        # Looping Over Arrays

        One of the most powerful ways to use a for loop is to loop over an array, running code on each item in the array. We can do this by using the for loop counter variable (usually `i`) as the index of your array.

        # Do This

        This program should loop over the array `buttons` and do two things to each button - change the background color to red, and change the height to 50 px.

        -   Add a second `setProperty` block inside the loop
        -   Change the target to `buttons[i]`
        -   Set the "height" property to 50

        ![expandable](https://images.code.org/df3d514bae5c23de9e0fbdf1d7798432-image-1512431649584.png)
      CSD U6 for loop click exit: "# Ne Zaman Durulacağını Bilmek\\\r\n\n\\\r\nSon
        seviyede,\nbutona birden çok kere tıkladığınızda bir hata aldığınızı muhtemelen
        fark etmişsinizdir. Ne zaman tekrar eden bir kod yazarken (bunun gibi manuel
        olarak tekrarlandığında bile), tekrarlamayı _durdurmanın_ zamanının geldiğini
        nasıl bileceğinizi düşünmek önemlidir.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\nDeğişken
        adını \ndaha açıklayıcı olan bir adla değiştirmemiz ve olay yöneticisi içine
        bir koşul eklememiz dışında, bu program öncekine benzerdir. Var olmayan bir
        LED'i değiştirmeyi denemememiz için koşulu yerini getirmeniz gerekir.\\\r\n\\\r\n_Daha
        çok ya da daha az LED'li bir kart için değişiklikler olmadan kodunuz çalışır
        mı? Eğer çalışmazsa, kartınızın çalışması için üzerinde değişiklik yapabilir
        misiniz?_"
      CSD U6 for loop click exit_2018: "# Ne Zaman Durulacağını Bilmek\\\r\n\n\\\r\nSon
        seviyede,\nbutona birden çok kere tıkladığınızda bir hata aldığınızı muhtemelen
        fark etmişsinizdir. Ne zaman tekrar eden bir kod yazarken (bunun gibi manuel
        olarak tekrarlandığında bile), tekrarlamayı _durdurmanın_ zamanının geldiğini
        nasıl bileceğinizi düşünmek önemlidir.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\nDeğişken
        adını \ndaha açıklayıcı olan bir adla değiştirmemiz ve olay yöneticisi içine
        bir koşul eklememiz dışında, bu program öncekine benzerdir. Var olmayan bir
        LED'i değiştirmeyi denemememiz için koşulu yerini getirmeniz gerekir.\\\r\n\\\r\n_Daha
        çok ya da daha az LED'li bir kart için değişiklikler olmadan kodunuz çalışır
        mı? Eğer çalışmazsa, kartınızın çalışması için üzerinde değişiklik yapabilir
        misiniz?_"
      CSD U6 for loop click exit_2019: "# Ne Zaman Durulacağını Bilmek\\\r\n\n\\\r\nSon
        seviyede,\nbutona birden çok kere tıkladığınızda bir hata aldığınızı muhtemelen
        fark etmişsinizdir. Ne zaman tekrar eden bir kod yazarken (bunun gibi manuel
        olarak tekrarlandığında bile), tekrarlamayı _durdurmanın_ zamanının geldiğini
        nasıl bileceğinizi düşünmek önemlidir.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\nDeğişken
        adını \ndaha açıklayıcı olan bir adla değiştirmemiz ve olay yöneticisi içine
        bir koşul eklememiz dışında, bu program öncekine benzerdir. Var olmayan bir
        LED'i değiştirmeyi denemememiz için koşulu yerini getirmeniz gerekir.\\\r\n\\\r\n_Daha
        çok ya da daha az LED'li bir kart için değişiklikler olmadan kodunuz çalışır
        mı? Eğer çalışmazsa, kartınızın çalışması için üzerinde değişiklik yapabilir
        misiniz?_"
      CSD U6 for loop click predict question: |-
        # Make a Prediction

        Read through the code for this program and predict what will happen each time the button is clicked?
      CSD U6 for loop click predict question_2018: |-
        # Make a Prediction

        Read through the code for this program and predict what will happen each time the button is clicked?
      CSD U6 for loop click predict question_2019: |-
        # Make a Prediction

        Read through the code for this program and predict what will happen each time the button is clicked?
      CSD U6 for loop images: |-
        # Constructing a for loop from scratch

        Now that you've had some practice modifying for loops to process arrays, let's see if you can do it yourself.

        # Do This

        We've provided the design elements and an array to start with, but the rest is on you.

        -   Add an event handler to respond to the "thumbsup\_button" being clicked
        -   Place a _for loop_ inside the event handler
        -   Modify the exit condition of the _for loop_ so that it will run until it gets to the end of the array `images`
        -   Inside your _for loop_ change the current image to "icon://fa-thumbs-o-up"

        _Challenge: Can you add a second button that turns all of the images back to thumbs down?_
      CSD U6 for loop images_2018: |-
        # Constructing a for loop from scratch

        Now that you've had some practice modifying for loops to process arrays, let's see if you can do it yourself.

        # Do This

        We've provided the design elements and an array to start with, but the rest is on you.

        -   Add an event handler to respond to the "thumbsup\_button" being clicked
        -   Place a _for loop_ inside the event handler
        -   Modify the exit condition of the _for loop_ so that it will run until it gets to the end of the array `images`
        -   Inside your _for loop_ change the current image to "icon://fa-thumbs-o-up"

        _Challenge: Can you add a second button that turns all of the images back to thumbs down?_
      CSD U6 for loop images_2019: |-
        # Constructing a for loop from scratch

        Now that you've had some practice modifying for loops to process arrays, let's see if you can do it yourself.

        # Do This

        We've provided the design elements and an array to start with, but the rest is on you.

        -   Add an event handler to respond to the "thumbsup\_button" being clicked
        -   Place a _for loop_ inside the event handler
        -   Modify the exit condition of the _for loop_ so that it will run until it gets to the end of the array `images`
        -   Inside your _for loop_ change the current image to "icon://fa-thumbs-o-up"

        _Challenge: Can you add a second button that turns all of the images back to thumbs down?_
      CSD U6 for loop led bonus 1_2018: |-
        # Challenge: Add More Buttons

        Extend the program by adding more buttons that change the board to different colors.

        # Do This

        Add your new buttons in Design Mode and create event handlers to respond to your buttons and change the LED colors.
      CSD U6 for loop led bonus 2_2018: |-
        # Challenge: Color Patterns

        Extend the program by adding more buttons that create different patterns of light.

        # Do This

        Add your new buttons in Design Mode and create event handlers to respond to your buttons and change the LED colors.

        _Hint: As you design your patterns, consider whether a function with parameters could help simplify your program._
      CSD U6 for loop led bonus 3_2018: |-
        # Challenge: Music

        Use what you learned in the Making Music lesson to make the board play music when the lights change.

        # Do This

        Create some arrays of notes for different songs and add code to your event handlers to play your music.
      CSD U6 for loop led color_2019: |-
        # Add Some Color

        Now that you can turn the LEDs on and off, it's time to add some color.

        # Do This

        Add event handlers to "button\_red" and "button\_green" that turns all the LEDs those colors.
      CSD U6 for loop led function: |-
        # Switching Colors with a Function

        We could write a for loop for each different color that we want to set LEDs to, but that would be a lot of duplicate code that's _almost_ the same. This is the perfect place to use a _function with a parameter_! You've seen and used functions with parameters before, but now you're going to make one from scratch.

        # Do This

        Create a function called `setLedsColor` that takes a parameter `color` and uses it to change the color of all of the LEDs

        -   At the bottom of your program, drag out a function with parameter block ![expandable](https://images.code.org/bd6ec3d9a651cf760a7dc8e1949658c0-image-1512761901850.png)
        -   Change the name from `myFunction` to `setLedsColor`
        -   Change the parameter name from `n` to `color`
        -   Inside your function, add a _for loop_ that repeats until it reaches the end of `colorLeds`
        -   Inside your _for loop_, set the color of the current led to the parameter `color` (eg. `colorLeds[i].color(color)`

        We'll add event handlers that use this function in the next level, but for now you can test your function by your program and typing this into the debug console: `setLedsColor("blue")`
      CSD U6 for loop led function call: |-
        # Calling Your Function

        Now that you've created a function that can behave differently based on the parameter it is passed, we can use it in multiple different event handlers to change the lights to different colors.

        # Do This

        We'll start simple by just creating an event handler for "button\_red"

        -   Create a new event handler to respond to "button\_red"
        -   Inside your event handler, add a "call function with parameter" block
            ![expandable](https://images.code.org/ee8e026b59682066eccfc4795b5c5036-image-1512771755527.png)
        -   Change the name from `myFunction` to `setLedsColor`
        -   Change the parameter from `n` to "red" (note the quotation marks!)
        -   Test your program, the "Red" button should turn all of your LEDs red
      CSD U6 for loop led function call_2018: |-
        # Calling Your Function

        Now that you've created a function that can behave differently based on the parameter it is passed, we can use it in multiple different event handlers to change the lights to different colors.

        # Do This

        We'll start simple by just creating an event handler for "button\_red"

        -   Create a new event handler to respond to "button\_red"
        -   Inside your event handler, add a "call function with parameter" block
            ![expandable](https://images.code.org/ee8e026b59682066eccfc4795b5c5036-image-1512771755527.png)
        -   Change the name from `myFunction` to `setLedsColor`
        -   Change the parameter from `n` to "red" (note the quotation marks!)
        -   Test your program, the "Red" button should turn all of your LEDs red
      CSD U6 for loop led function finish: |-
        # Finish the App

        If your red button worked, the only thing left is to call your new function when all of the remaining buttons is pressed.

        # Do This

        For each of the remaining buttons (green, blue, and white):

        -   Create a new event handler
        -   Call your `setLedsColor` function with the appropriate color ("green", "blue", or "white")
        -   Test your program to make sure all of the buttons work

        When you've got all of your buttons working properly, click "Submit" to turn your program in.
      CSD U6 for loop led function finish_2018: |-
        # Finish the App

        If your red button worked, the only thing left is to call your new function when all of the remaining buttons is pressed.

        # Do This

        For each of the remaining buttons (green, blue, and white):

        -   Create a new event handler
        -   Call your `setLedsColor` function with the appropriate color ("green", "blue", or "white")
        -   Test your program to make sure all of the buttons work

        When you've got all of your buttons working properly, click "Submit" to turn your program in.
      CSD U6 for loop led function_2018: |-
        # Switching Colors with a Function

        We could write a for loop for each different color that we want to set LEDs to, but that would be a lot of duplicate code that's _almost_ the same. This is the perfect place to use a _function with a parameter_! You've seen and used functions with parameters before, but now you're going to make one from scratch.

        # Do This

        Create a function called `setLedsColor` that takes a parameter `color` and uses it to change the color of all of the LEDs

        -   At the bottom of your program, drag out a function with parameter block ![expandable](https://images.code.org/bd6ec3d9a651cf760a7dc8e1949658c0-image-1512761901850.png)
        -   Change the name from `myFunction` to `setLedsColor`
        -   Change the parameter name from `n` to `color`
        -   Inside your function, add a _for loop_ that repeats until it reaches the end of `colorLeds`
        -   Inside your _for loop_, set the color of the current led to the parameter `color` (eg. `colorLeds[i].color(color)`

        We'll add event handlers that use this function in the next level, but for now you can test your function by your program and typing this into the debug console: `setLedsColor("blue")`
      CSD U6 for loop led off: |-
        # Turning all the Color LEDs Off

        Now that you've got one button to turn the color LEDs on, you can make another turn them off.

        # Do This

        Add an event handler to "button\_off" with a for loop that turns each color LED off.
      CSD U6 for loop led off_2018: |-
        # Turning all the Color LEDs Off

        Now that you've got one button to turn the color LEDs on, you can make another turn them off.

        # Do This

        Add an event handler to "button\_off" with a for loop that turns each color LED off.
      CSD U6 for loop led off_2019: |-
        # Turning all the Color LEDs Off

        Now that you've got one button to turn the color LEDs on, you can make another turn them off.

        # Do This

        Add an event handler to "button\_off" with a for loop that turns each color LED off.
      CSD U6 for loop led on: |-
        # Turning all the Color LEDs On

        Now that you know how to use a _for loop_ to process all of the elements in an array, you can turn on all of the Color LEDs much more easily than before.

        # Do This

        We're going to start an app that will control all of the Color LEDs on your board. The first step is to wire up the button that turns all of the LEDs on.

        -   Add an event handler for "button\_on"
        -   Place a _for loop_ in your event handler that repeats until it reaches in the end of the array `colorLeds`
        -   Inside the for loop, call `colorLeds[i].on()` to turn on the current color LED
      CSD U6 for loop led on_2018: |-
        # Turning all the Color LEDs On

        Now that you know how to use a _for loop_ to process all of the elements in an array, you can turn on all of the Color LEDs much more easily than before.

        # Do This

        Over the next few levels, you'll create an app that will control all of the Color LEDs on your board. The first step is to wire up the button that turns all of the LEDs on.  (Don't worry about the rest of the comments in the workspace.  You'll work on those in later levels.)

        -   Add an event handler for "button\_on"
        -   Place a _for loop_ in your event handler that repeats until it reaches in the end of the array `colorLeds`
        -   Inside the for loop, call `colorLeds[i].on()` to turn on the current color LED
      CSD U6 for loop led on_2019: |-
        # Turning all the Color LEDs On

        Now that you know how to use a _for loop_ to process all of the elements in an array, you can turn on all of the Color LEDs much more easily than before.

        # Do This

        Over the next few levels, you'll create an app that will control all of the Color LEDs on your board. The first step is to wire up the button that turns all of the LEDs on.  (Don't worry about the rest of the comments in the workspace.  You'll work on those in later levels.)

        -   Add an event handler for "button\_on"
        -   Place a _for loop_ in your event handler that repeats until it reaches in the end of the array `colorLeds`
        -   Inside the for loop, call `colorLeds[i].on()` to turn on the current color LED
      CSD U6 for loop led personalize_2019: |-
        # Make it Your Own

        Think of a new button that you would like in this project.  Don't forget about the other LED options, such as pulse and blink.

        # Do This

        Add a new button to the project, and program it with a behavior of your choice.
      CSD U6 for loop list.length: |-
        # Array Length

        In the last program we told the loop to run three times with the code `for (var i = 0; i < 3; i++)`. This works, but we could write smarter programs by using the length of the array to decide how many times to loop.

        # Do This

        Change the exit condition of this for loop so that it runs while `i < buttons.length`.
      CSD U6 for loop list.length_2018: |-
        # Array Length

        In the last program we told the loop to run three times with the code `for (var i = 0; i < 3; i++)`. This works, but we could write smarter programs by using the length of the array to decide how many times to loop.

        # Do This

        Change the exit condition of this for loop so that it runs while `i < buttons.length`.
      CSD U6 for loop list.length_2019: |-
        # Array Length

        In the last program we told the loop to run three times with the code `for (var i = 0; i < 3; i++)`. This works, but we could write smarter programs by using the length of the array to decide how many times to loop.

        # Do This

        Change the exit condition of this for loop so that it runs while `i < buttons.length`.
      CSD U6 frequency: |-
        # Frequency

        This buzzer controller has been expanded to control frequency as well, but the code isn't finished yet.

        # Do This

        -   Using the `duration` variable as a model, create a `frequency` variable that gets the value from the _frequency_ slider.
        -   Modify the line of code that makes the buzzer sound so that it uses the `frequency` variable rather than the default frequency of `500`.
        -   Run your code, then change the frequency and the duration to hear the difference in the buzzer.  (Don't forget to hit the button after you make a change!)
      CSD U6 frequency_2018: |-
        # Frequency

        This buzzer controller has been expanded to control frequency as well, but the code isn't finished yet.

        # Do This

        -   Using the `duration` variable as a model, create a `frequency` variable that gets the value from the _frequency_ slider.
        -   Modify the line of code that makes the buzzer sound so that it uses the `frequency` variable rather than the default frequency of `500`.
        -   Run your code, then change the frequency and the duration to hear the difference in the buzzer.  (Don't forget to hit the button after you make a change!)
      CSD U6 frequency_2019: |-
        # Frequency

        This buzzer controller has been expanded to control frequency as well, but the code isn't finished yet.

        # Do This

        -   Using the `duration` variable as a model, create a `frequency` variable that gets the value from the _frequency_ slider.
        -   Modify the line of code that makes the buzzer sound so that it uses the `frequency` variable rather than the default frequency of `500`.
        -   Run your code, then change the frequency and the duration to hear the difference in the buzzer.  (Don't forget to hit the button after you make a change!)
      CSD U6 functions paramters video_2019: |-
        ## Questions to Consider

        -   How do parameters make functions more useful?
        -   How do you know when you can combine multiple functions into one?
      CSD U6 game project board events: |-
        # Board Events

        Go back to the Events section of your activity guide and find any events that respond to your board (ones that would use `onBoardEvent()`). Create event handlers for each of those now. If these events rely on functions you haven't written yet, just leave yourself a comment in the code.
      CSD U6 game project board events_2018: |-
        # Board Events

        Go back to the Events section of your activity guide and find any events that respond to your board (ones that would use `onBoardEvent()`). Create event handlers for each of those now. If these events rely on functions you haven't written yet, just leave yourself a comment in the code.
      CSD U6 game project board events_2019: |-
        # Board Events

        Go back to the Events section of your activity guide and find any events that respond to your board (ones that would use `onBoardEvent()`). Create event handlers for each of those now. If these events rely on functions you haven't written yet, just leave yourself a comment in the code.
      CSD U6 game project finish: |-
        # Finishing Touches and Testing

        At this point you should have most of your program in place. Now you need to add whatever finishing touches are needed and do a little testing. When your app is ready, have your classmates try it out. See if you can find any bugs, confusing design choices, or missing features you'd like to work on.

        Once you're all done with this version of your program, click Submit to turn it in.
      CSD U6 game project finish_2018: |-
        # Finishing Touches and Testing

        At this point you should have most of your program in place. Now you need to add whatever finishing touches are needed and do a little testing. When your app is ready, have your classmates try it out. See if you can find any bugs, confusing design choices, or missing features you'd like to work on.

        Once you're all done with this version of your program, click Submit to turn it in.
      CSD U6 game project finish_2019: |-
        # Finishing Touches and Testing

        At this point you should have most of your program in place. Now you need to add whatever finishing touches are needed and do a little testing. When your app is ready, have your classmates try it out. See if you can find any bugs, confusing design choices, or missing features you'd like to work on.

        Once you're all done with this version of your program, click Submit to turn it in.
      CSD U6 game project functions call: "# Fonksiyonlarınızı Çağırmak\\\r\n\n\\\r\nFonksiyonlarınız
        \ntanımlandığında, onlara nerede ihtiyacınız varsa oraya çağırabilirsiniz.
        Olay yöneticilerinizi ya da fonksiyonlarınızın kullanılması gereken herhangi
        bir yeri inceleyin ve oluşturduğunuz fonksiyonlar için çağrılar ekleyin."
      CSD U6 game project functions call_2018: "# Fonksiyonlarınızı Çağırmak\\\r\n\n\\\r\nFonksiyonlarınız
        \ntanımlandığında, onlara nerede ihtiyacınız varsa oraya çağırabilirsiniz.
        Olay yöneticilerinizi ya da fonksiyonlarınızın kullanılması gereken herhangi
        bir yeri inceleyin ve oluşturduğunuz fonksiyonlar için çağrılar ekleyin."
      CSD U6 game project functions call_2019: "# Fonksiyonlarınızı Çağırmak\\\r\n\n\\\r\nFonksiyonlarınız
        \ntanımlandığında, onlara nerede ihtiyacınız varsa oraya çağırabilirsiniz.
        Olay yöneticilerinizi ya da fonksiyonlarınızın kullanılması gereken herhangi
        bir yeri inceleyin ve oluşturduğunuz fonksiyonlar için çağrılar ekleyin."
      CSD U6 game project functions define: "# Define Your Functions\n\nDefine all
        of your functions at the bottom of the program, under the comment `// Create
        your functions here`.\n\nRight now we're only worrying about writing the function
        _definitions_, the part which looks like:\n\n    function myFunction() {\n
        \   \t// Things my function does\n    }"
      CSD U6 game project functions define_2018: "# Define Your Functions\n\nDefine
        all of your functions at the bottom of the program, under the comment `//
        Create your functions here`.\n\nRight now we're only worrying about writing
        the function _definitions_, the part which looks like:\n\n    function myFunction()
        {\n    \t// Things my function does\n    }"
      CSD U6 game project functions define_2019: "# Define Your Functions\n\nDefine
        all of your functions at the bottom of the program, under the comment `//
        Create your functions here`.\n\nRight now we're only worrying about writing
        the function _definitions_, the part which looks like:\n\n    function myFunction()
        {\n    \t// Things my function does\n    }"
      CSD U6 game project screen links: |-
        # UI Element Events

        Now that all of your screens are designed, you can add any event handlers that will respond to _screen interaction_. These should be listed in the "Events" section of your activity guide. If you run into new events that you hadn't thought of in the planning stage, make sure you add them to your project guide.

        Don't worry about making these completely functional yet. If your events rely on board elements or your own functions, we'll take care of that in later levels.
      CSD U6 game project screen links_2018: |-
        # UI Element Events

        Now that all of your screens are designed, you can add any event handlers that will respond to _screen interaction_. These should be listed in the "Events" section of your activity guide. If you run into new events that you hadn't thought of in the planning stage, make sure you add them to your project guide.

        Don't worry about making these completely functional yet. If your events rely on board elements or your own functions, we'll take care of that in later levels.
      CSD U6 game project screen links_2019: |-
        # UI Element Events

        Now that all of your screens are designed, you can add any event handlers that will respond to _screen interaction_. These should be listed in the "Events" section of your activity guide. If you run into new events that you hadn't thought of in the planning stage, make sure you add them to your project guide.

        Don't worry about making these completely functional yet. If your events rely on board elements or your own functions, we'll take care of that in later levels.
      CSD U6 game project screens: "# Ekranlarınızı Oluşturun\\\r\n\n\\\r\nYapmanız\ngereken
        ilk şey planlama rehberinizde taslağını çizdiğiniz tüm \nekranları oluşturmaktır.
        \\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\nProgramınızın ihtiyaç duyacağı tüm ekranları
        oluşturmak için Tasarım Modu'nu kullanın. Tüm tasarım öğeleriniz için **mantıklı
        kimlikler seçmeyi** unutmayın."
      CSD U6 game project screens_2018: "# Ekranlarınızı Oluşturun\\\r\n\n\\\r\nYapmanız\ngereken
        ilk şey planlama rehberinizde taslağını çizdiğiniz tüm \nekranları oluşturmaktır.
        \\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\nProgramınızın ihtiyaç duyacağı tüm ekranları
        oluşturmak için Tasarım Modu'nu kullanın. Tüm tasarım öğeleriniz için **mantıklı
        kimlikler seçmeyi** unutmayın."
      CSD U6 game project screens_2019: "# Ekranlarınızı Oluşturun\\\r\n\n\\\r\nYapmanız\ngereken
        ilk şey planlama rehberinizde taslağını çizdiğiniz tüm \nekranları oluşturmaktır.
        \\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\nProgramınızın ihtiyaç duyacağı tüm ekranları
        oluşturmak için Tasarım Modu'nu kullanın. Tüm tasarım öğeleriniz için **mantıklı
        kimlikler seçmeyi** unutmayın."
      CSD U6 get toggle: |-
        # change

        This program has events that detect three different changes: the toggle switch, the interval slider, and the duration slider.  Because there are so many different things that cause the LED and buzzer to reset, it uses functions to organize the code.

        # Do This

        -   Read the `updateLED` function to see what it does.
        -   Add code to `updateBuzzer` to make the buzzer only turn on when the toggle switch is open.
      CSD U6 get toggle_2018: |-
        # change

        This program has events that detect three different changes: the toggle switch, the interval slider, and the frequency slider.  Because there are so many different things that cause the LED and buzzer to reset, it uses functions to organize the code.

        # Do This

        -   Read the `updateLED` function to see what it does.
        -   Add code to `updateBuzzer` to make the buzzer only turn on when the toggle switch is open.
      CSD U6 get toggle_2019: |-
        # change

        This program has events that detect three different changes: the toggle switch, the interval slider, and the frequency slider.  Because there are so many different things that cause the LED and buzzer to reset, it uses functions to organize the code.

        # Do This

        -   Read the `updateLED` function to see what it does.
        -   Add code to `updateBuzzer` to make the buzzer only turn on when the toggle switch is open.
      CSD U6 getProperty Demo: |-
        # Updating Properties

        Here's an example of an app that uses both `getProperty` and `setProperty` to update elements on the screen. Read through the code, and then test it out by filling out the input fields and clicking "Save"

        _Note: you don't need to change any code here, but read through the provided code to see how it works._
      CSD U6 getProperty Demo_2018: |-
        # Updating Properties

        Here's an example of an app that uses both `getProperty` and `setProperty` to update elements on the screen. Read through the code, and then test it out by filling out the input fields and clicking "Save"

        _Note: you don't need to change any code here, but read through the provided code to see how it works._
      CSD U6 getProperty Demo_2019: |-
        # Updating Properties

        Here's an example of an app that uses both `getProperty` and `setProperty` to update elements on the screen. Read through the code, and then test it out by filling out the input fields and clicking "Save"

        _Note: you don't need to change any code here, but read through the provided code to see how it works._
      CSD U6 getProperty board predict: Tahmin Düzeyi (Markdown için içerilen seviyeye
        bakın)
      CSD U6 getProperty board predict_2018: Tahmin Düzeyi (Markdown için içerilen
        seviyeye bakın)
      CSD U6 getProperty board predict_2019: Tahmin Düzeyi (Markdown için içerilen
        seviyeye bakın)
      CSD U6 getProperty buzzer: |-
        # Using the Circuit Playground

        Here's the same code you saw in the last level, but this time there's another dropdown menu to control the buzzer.  You'll have to add the code to make it work.

        # Do This

        -   Using the LED code as a model, add new code inside the buttonL event that will play a long or short buzz according to the chosen value property of the *buzzer\_input* dropdown menu.
        -   Add new code that will turn the buzzer off when the right button is pressed.
            -   (Hint: the event is already in the code.)
      CSD U6 getProperty buzzer_2018: |-
        # Using the Circuit Playground

        Here's the same code you saw in the last level, but this time there's another dropdown menu to control the buzzer.  You'll have to add the code to make it work.

        # Do This

        -   Using the LED code as a model, add new code inside the buttonL event that will play a long or short buzz according to the chosen value property of the *buzzer\_input* dropdown menu.
        -   Add new code that will turn the buzzer off when the right button is pressed.
            -   (Hint: the event is already in the code.)
      CSD U6 getProperty buzzer_2019: |-
        # Using the Circuit Playground

        Here's the same code you saw in the last level, but this time there's another dropdown menu to control the buzzer.  You'll have to add the code to make it work.

        # Do This

        -   Using the LED code as a model, add new code inside the buttonL event that will play a long or short buzz according to the chosen value property of the *buzzer\_input* dropdown menu.
        -   Add new code that will turn the buzzer off when the right button is pressed.
            -   (Hint: the event is already in the code.)
      CSD U6 getProperty dropdown: |-
        # Dropdowns

        Text Inputs are nice when you want users to be able to enter _anything_ they want, but often you want to restrict them to just a few choices. For example, if you want your user to pick a color, you probably want to make sure they can only choose colors that will actually work.

        The provided dropdown with the ID "color\_input" allows a user to choose from a handful of background colors. When the "Set Color" button is clicked, the screen will turn that color.

        # Do This

        -   Inside the event block, create a variable called `color` and assign it a value using the `getProperty` block.
            -   Hint: You'll need to use the "value" property to get the user's choice.
        -   Use the `setProperty` block to set the "background-color" property of "screen1" to your variable `color`.
            -   Hint: Make sure you type `color` without quotation marks.
        -   Test your program by picking a color and clicking "Set Color".
      CSD U6 getProperty dropdown_2018: |-
        # Dropdowns

        Text Inputs are nice when you want users to be able to enter _anything_ they want, but often you want to restrict them to just a few choices. For example, if you want your user to pick a color, you probably want to make sure they can only choose colors that will actually work.

        The provided dropdown with the ID "color\_input" allows a user to choose from a handful of background colors. When the "Set Color" button is clicked, the screen will turn that color.

        # Do This

        -   Inside the event block, create a variable called `color` and assign it a value using the `getProperty` block.
            -   Hint: You'll need to use the "value" property to get the user's choice.
        -   Use the `setProperty` block to set the "background-color" property of "screen1" to your variable `color`.
            -   Hint: Make sure you type `color` without quotation marks.
        -   Test your program by picking a color and clicking "Set Color".
      CSD U6 getProperty dropdown_2019: |-
        # Dropdowns

        Text Inputs are nice when you want users to be able to enter _anything_ they want, but often you want to restrict them to just a few choices. For example, if you want your user to pick a color, you probably want to make sure they can only choose colors that will actually work.

        The provided dropdown with the ID "color\_input" allows a user to choose from a handful of background colors. When the "Set Color" button is clicked, the screen will turn that color.

        # Do This

        -   Inside the event block, create a variable called `color` and assign it a value using the `getProperty` block.
            -   Hint: You'll need to use the "value" property to get the user's choice.
        -   Use the `setProperty` block to set the "background-color" property of "screen1" to your variable `color`.
            -   Hint: Make sure you type `color` without quotation marks.
        -   Test your program by picking a color and clicking "Set Color".
      CSD U6 getProperty input: |-
        # getProperty and Variables

        This program uses the `name` variable to display the name typed into "name\_input" when the Submit button is clicked. It should do the same for *friend\_input* and *friend\_output*, but it's missing a block.

        # Do This

        -   Read the code and comments, then run the program to see how it works. (Make sure you type in your name and your friend's name before hitting "Submit".)
        -   Use a `getProperty` block to store the text property of *friend\_input* into your the variable "friend\_name". ([Show me where.](#triggercallout=code_triggered))
      CSD U6 getProperty input_2018: |-
        # getProperty and Variables

        This program uses the `name` variable to display the name typed into "name\_input" when the Submit button is clicked. It should do the same for *friend\_input* and *friend\_output*, but it's missing a block.

        # Do This

        -   Read the code and comments, then run the program to see how it works. (Make sure you type in your name and your friend's name before hitting "Submit".)
        -   Use a `getProperty` block to store the text property of *friend\_input* into your the variable "friend\_name". ([Show me where.](#triggercallout=code_triggered))
      CSD U6 getProperty input_2019: |-
        # getProperty and Variables

        This program uses the `name` variable to display the name typed into "name\_input" when the Submit button is clicked. It should do the same for *friend\_input* and *friend\_output*, but it's missing a block.

        # Do This

        -   Read the code and comments, then run the program to see how it works. (Make sure you type in your name and your friend's name before hitting "Submit".)
        -   Use a `getProperty` block to store the text property of *friend\_input* into your the variable "friend\_name". ([Show me where.](#triggercallout=code_triggered))
      CSD U6 getters debug: |-
        # LED and Buzzer Controller

        This program operates the LED and the buzzer, but it has some problems.

        # Do This

        -   Read the program to understand how it is supposed to work.
        -   Find and correct the bugs so that the program works properly.
      CSD U6 getters debug_2018: |-
        # LED and Buzzer Controller

        This program operates the LED and the buzzer, but it has some problems.

        # Do This

        -   Read the program to understand how it is supposed to work.
        -   Find and correct the bugs so that the program works properly.
      CSD U6 getters debug_2019: |-
        # LED and Buzzer Controller

        This program operates the LED and the buzzer, but it has some problems.

        # Do This

        -   Read the program to understand how it is supposed to work.
        -   Find and correct the bugs so that the program works properly.
      CSD U6 goalie: "# Değerleri Veri ile Güncelleme\\\r\n\n\\\r\nBu\nprogramda kaleci
        futbol topunu engellemeye çalışıyor. Eğer topu engellerse, kaleci puan kazanır.
        Eğer kaçırırsa, puan kaybeder. Bu program kısmen çalışıyor ama şu an ne top
        ne de kaleci hareket edebiliyor. Siz bunu düzelteceksiniz.\\\r\n\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n\\\r\n\n-   Topun 'x' değerini güncellemek için sayaç modelini
        kullanın.\\\r\n-   Kalecinin 'y' konumunu kartın yüksekliğine göre güncelleyin."
      CSD U6 goalie_2018: "# Değerleri Veri ile Güncelleme\\\r\n\n\\\r\nBu\nprogramda
        kaleci futbol topunu engellemeye çalışıyor. Eğer topu engellerse, kaleci puan
        kazanır. Eğer kaçırırsa, puan kaybeder. Bu program kısmen çalışıyor ama şu
        an ne top ne de kaleci hareket edebiliyor. Siz bunu düzelteceksiniz.\\\r\n\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n\\\r\n\n-   Topun 'x' değerini güncellemek için sayaç modelini
        kullanın.\\\r\n-   Kalecinin 'y' konumunu kartın yüksekliğine göre güncelleyin."
      CSD U6 goalie_2019: "# Değerleri Veri ile Güncelleme\\\r\n\n\\\r\nBu\nprogramda
        kaleci futbol topunu engellemeye çalışıyor. Eğer topu engellerse, kaleci puan
        kazanır. Eğer kaçırırsa, puan kaybeder. Bu program kısmen çalışıyor ama şu
        an ne top ne de kaleci hareket edebiliyor. Siz bunu düzelteceksiniz.\\\r\n\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n\\\r\n\n-   Topun 'x' değerini güncellemek için sayaç modelini
        kullanın.\\\r\n-   Kalecinin 'y' konumunu kartın yüksekliğine göre güncelleyin."
      CSD U6 hardware software video_2019: |-
        ## Questions to Consider

        -   What's the difference between hardware and software?
        -   What does the operating system of a computer do?
      CSD U6 interval: Öngörü Düzeyi
      CSD U6 interval predict: |-
        # Interval

        Now we're using the slider to affect the behavior of the LED.   Just as we could change the values for the frequency and duration of the buzzer, we can change the value for the blink or pulse interval of the LED.

        # Do This

        -   Read the code and predict what the program will do, then hit "Run" to test your prediction.
      CSD U6 interval predict_2018: |-
        # Interval

        Now we're using the slider to affect the behavior of the LED.   Just as we could change the values for the frequency and duration of the buzzer, we can change the value for the blink or pulse interval of the LED.

        # Do This

        -   Read the code and predict what the program will do, then hit "Run" to test your prediction.
      CSD U6 interval predict_2019: |-
        # Interval

        Now we're using the slider to affect the behavior of the LED.   Just as we could change the values for the frequency and duration of the buzzer, we can change the value for the blink or pulse interval of the LED.

        # Do This

        -   Read the code and predict what the program will do, then hit "Run" to test your prediction.
      CSD U6 interval_2018: Öngörü Düzeyi
      CSD U6 interval_2019: Öngörü Düzeyi
      CSD U6 investigate orientation: "# Pitch and Roll\n\nThis program displays the
        board's pitch and roll, and it will also change colors depending on their
        values.  \n\n# Do This\n\nMake the program change the following colors by
        tilting the board to the correct pitch and roll.\n\n<div style=\"display:inline-block;
        background-color: skyblue; height: 30px; width:30px\">&nbsp;</div> Pitch:
        0 | Roll: -20\n\n<p/>\n\n<div style=\"display:inline-block; background-color:
        burlywood; height: 30px; width:30px\">&nbsp;</div> Pitch: 30 | Roll: 0\n\n<p/>\n\n<div
        style=\"display:inline-block; background-color: mistyrose; height: 30px; width:30px\">&nbsp;</div>
        Pitch: -15 | Roll: 10\n\n<p/>\n\n<div style=\"display:inline-block; background-color:
        yellowgreen; height: 30px; width:30px\">&nbsp;</div> Pitch: 5 | Roll: -25\n\n<p/>\n\n<div
        style=\"display:inline-block; background-color: thistle; height: 30px; width:30px\">&nbsp;</div>
        Pitch: 10 | Roll: 30\n\n<p/>\n\nWhich way should you tilt to get a positive
        pitch?\n\nWhich way should you tilt to get a negative roll?"
      CSD U6 investigate orientation_2018: "# Pitch and Roll\n\nThis program displays
        the board's pitch and roll, and it will also change colors depending on their
        values.  \n\n# Do This\n\nMake the program change the following colors by
        tilting the board to the correct pitch and roll.\n\n<div style=\"display:inline-block;
        background-color: skyblue; height: 30px; width:30px\">&nbsp;</div> Pitch:
        0 | Roll: -20\n\n<p/>\n\n<div style=\"display:inline-block; background-color:
        burlywood; height: 30px; width:30px\">&nbsp;</div> Pitch: 30 | Roll: 0\n\n<p/>\n\n<div
        style=\"display:inline-block; background-color: mistyrose; height: 30px; width:30px\">&nbsp;</div>
        Pitch: -15 | Roll: 10\n\n<p/>\n\n<div style=\"display:inline-block; background-color:
        yellowgreen; height: 30px; width:30px\">&nbsp;</div> Pitch: 5 | Roll: -25\n\n<p/>\n\n<div
        style=\"display:inline-block; background-color: thistle; height: 30px; width:30px\">&nbsp;</div>
        Pitch: 10 | Roll: 30\n\n<p/>\n\nWhich way should you tilt to get a positive
        pitch?\n\nWhich way should you tilt to get a negative roll?"
      CSD U6 investigate orientation_2019: "# Pitch and Roll\n\nThis program displays
        the board's pitch and roll, and it will also change colors depending on their
        values.  \n\n# Do This\n\nMake the program change the following colors by
        tilting the board to the correct pitch and roll.\n\n<div style=\"display:inline-block;
        background-color: skyblue; height: 30px; width:30px\">&nbsp;</div> Pitch:
        0 | Roll: -20\n\n<p/>\n\n<div style=\"display:inline-block; background-color:
        burlywood; height: 30px; width:30px\">&nbsp;</div> Pitch: 30 | Roll: 0\n\n<p/>\n\n<div
        style=\"display:inline-block; background-color: mistyrose; height: 30px; width:30px\">&nbsp;</div>
        Pitch: -15 | Roll: 10\n\n<p/>\n\n<div style=\"display:inline-block; background-color:
        yellowgreen; height: 30px; width:30px\">&nbsp;</div> Pitch: 5 | Roll: -25\n\n<p/>\n\n<div
        style=\"display:inline-block; background-color: thistle; height: 30px; width:30px\">&nbsp;</div>
        Pitch: 10 | Roll: 30\n\n<p/>\n\nWhich way should you tilt to get a positive
        pitch?\n\nWhich way should you tilt to get a negative roll?"
      CSD U6 iter create notes: |-
        # Music Player

        This program lets you play music by waving a wand over the different notes, but it's missing a function definition.

        # Do This

        -   Create a `checkNotes()` function that will call `checkNote(note)` on everything in the "notes" array.
      CSD U6 iter create notes_2018: |-
        # Music Player

        This program lets you play music by waving a wand over the different notes, but it's missing a function definition.

        # Do This

        -   Create a `checkNotes()` function that will call `checkNote(note)` on everything in the "notes" array.
      CSD U6 iter create notes_2019: |-
        # Music Player

        This program lets you play music by waving a wand over the different notes, but it's missing a function definition.

        # Do This

        -   Create a `checkNotes()` function that will call `checkNote(note)` on everything in the "notes" array.
      CSD U6 iter modify bugs: |-
        # Bug Shaker

        This program shakes bugs around when the board is shaken, but it's only working for one bug.

        # Do This

        -   Change the `moveBugs()` function so that it calls `moveBug(color)` on every bug color.
            -   (Hint: Look at the `detectHits()` function for clues how to do this.)
      CSD U6 iter modify bugs_2018: |-
        # Bug Shaker

        This program shakes bugs around when the board is shaken, but it's only working for one bug.

        # Do This

        -   Change the `moveBugs()` function so that it calls `moveBug(color)` on every bug color.
            -   (Hint: Look at the `detectHits()` function for clues how to do this.)
      CSD U6 iter modify bugs_2019: |-
        # Bug Shaker

        This program shakes bugs around when the board is shaken, but it's only working for one bug.

        # Do This

        -   Change the `moveBugs()` function so that it calls `moveBug(color)` on every bug color.
            -   (Hint: Look at the `detectHits()` function for clues how to do this.)
      CSD U6 iter predict bubbles: "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
      CSD U6 iter predict bubbles contained: |-
        # Fish Bubbles

        This program uses the sound sensor in the same way as the clouds program.  How many bubbles will move when you blow on the board?
      CSD U6 iter predict bubbles contained_2018: |-
        # Fish Bubbles

        This program uses the sound sensor in the same way as the clouds program.  How many bubbles will move when you blow on the board?
      CSD U6 iter predict bubbles contained_2019: |-
        # Fish Bubbles

        This program uses the sound sensor in the same way as the clouds program.  How many bubbles will move when you blow on the board?
      CSD U6 iter predict bubbles_2018: "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
      CSD U6 iter predict bubbles_2019: "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
      CSD U6 light pattern challenge_2018: "# Meydan Okuma: Daha Fazla Desen\\\r\n\n\\\r\nUygulamanıza
        bir kaç desen daha ekleyin. Bir ortak bulun ve seçenek olarak onların desenini
        ekleyin. Her kalıbın kendi fonksiyonu olduğundan emin olun."
      CSD U6 light pattern challenge_2019: "# Meydan Okuma: Daha Fazla Desen\\\r\n\n\\\r\nUygulamanıza
        bir kaç desen daha ekleyin. Bir ortak bulun ve seçenek olarak onların desenini
        ekleyin. Her kalıbın kendi fonksiyonu olduğundan emin olun."
      CSD U6 light pattern off: "# Işığı Kapamak\\\r\n\n\\\r\nBu\nuygulamayı başlattığınızda
        ışıklar kapalıdır ama siz bir desen seçer seçmez, ışıkları tekrar kapatmanın
        imkanı yoktur!\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\nTüm LED'leri kapayan\nbir
        fonksiyon oluşturun ve sonra uygulamanıza bir \"Kapalı\" butonu ekleyin ve
        tüm renkli LED'leri kapatmasını sağlayın."
      CSD U6 light pattern off_2018: "# Işığı Kapamak\\\r\n\n\\\r\nBu\nuygulamayı
        başlattığınızda ışıklar kapalıdır ama siz bir desen seçer seçmez, ışıkları
        tekrar kapatmanın imkanı yoktur!\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\nTüm
        LED'leri kapayan\nbir fonksiyon oluşturun ve sonra uygulamanıza bir \"Kapalı\"
        butonu ekleyin ve tüm renkli LED'leri kapatmasını sağlayın."
      CSD U6 light pattern off_2019: "# Işığı Kapamak\\\r\n\n\\\r\nBu\nuygulamayı
        başlattığınızda ışıklar kapalıdır ama siz bir desen seçer seçmez, ışıkları
        tekrar kapatmanın imkanı yoktur!\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\nTüm
        LED'leri kapayan\nbir fonksiyon oluşturun ve sonra uygulamanıza bir \"Kapalı\"
        butonu ekleyin ve tüm renkli LED'leri kapatmasını sağlayın."
      CSD U6 light show predict: |-
        # Put on a Light Show

        This app lets you put on a light show with the LED.

        Look at the code with your partner and answer the following questions:

        -   What does this line of code do: `setProperty("screen", "background-color", rgb(randomNumber(0,255), randomNumber(0,255), randomNumber(0,255)));`?

        Once you have answered the question, run the code and click the buttons to see what happens.
      CSD U6 light show predict_2018: |-
        # Put on a Light Show

        This app lets you put on a light show with the LED.

        Look at the code with your partner and answer the following questions:

        -   What does this line of code do: `setProperty("screen", "background-color", rgb(randomNumber(0,255), randomNumber(0,255), randomNumber(0,255)));`?

        Once you have answered the question, run the code and click the buttons to see what happens.
      CSD U6 light show predict_2019: |-
        # Put on a Light Show

        This app lets you put on a light show with the LED.

        Look at the code with your partner and answer the following questions:

        -   What does this line of code do: `setProperty("screen", "background-color", rgb(randomNumber(0,255), randomNumber(0,255), randomNumber(0,255)));`?

        Once you have answered the question, run the code and click the buttons to see what happens.
      CSD U6 move motorcycle: |-
        # Movement with Properties

        Earlier we used `setProperty` to change the x and y position of elements on the screen, but we could only move them to either a single specific location, or a random location. By using `getProperty` to find out an element's current position, we can use the **counter pattern** from Unit 3 to update that position.

        # Do This

        -   Read the program and discuss with your partner how the left button makes the motorcycle go up.
        -   Using the working left button as an example, program the right button to make the motorcycle go down.
      CSD U6 move motorcycle_2018: |-
        # Movement with Properties

        Earlier we used `setProperty` to change the x and y position of elements on the screen, but we could only move them to either a single specific location, or a random location. By using `getProperty` to find out an element's current position, we can use the **counter pattern** from Unit 3 to update that position.

        # Do This

        -   Read the program and discuss with your partner how the left button makes the motorcycle go up.
        -   Using the working left button as an example, program the right button to make the motorcycle go down.
      CSD U6 move motorcycle_2019: |-
        # Movement with Properties

        Earlier we used `setProperty` to change the x and y position of elements on the screen, but we could only move them to either a single specific location, or a random location. By using `getProperty` to find out an element's current position, we can use the **counter pattern** from Unit 3 to update that position.

        # Do This

        -   Read the program and discuss with your partner how the left button makes the motorcycle go up.
        -   Using the working left button as an example, program the right button to make the motorcycle go down.
      CSD U6 params create colors: |-
        # Color Picker

        In this program, pressing the buttons at the bottom of the screen changes the color of the images and the color LEDs.

        # Do This

        -   Create a function `chooseColor(color)` that changes each of the images and the color LEDs to the given color.
        -   Call your function in the event blocks so that all the buttons work.
      CSD U6 params create colors_2018: |-
        # Color Picker

        In this program, pressing the buttons at the bottom of the screen changes the color of the images and the color LEDs.

        # Do This

        -   Create a function `chooseColor(color)` that changes each of the images and the color LEDs to the given color.
        -   Call your function in the event blocks so that all the buttons work.
      CSD U6 params create colors_2019: |-
        # Color Picker

        In this program, pressing the buttons at the bottom of the screen changes the color of the images and the color LEDs.

        # Do This

        -   Create a function `chooseColor(color)` that changes each of the images and the color LEDs to the given color.
        -   Call your function in the event blocks so that all the buttons work.
      CSD U6 params modify clouds_2019: |-
        # Clouds

        This program makes the clouds move when you blow on the sound sensor, but it's not finished.

        # Do This

        -   Create a new function `moveCloud(name)` that will move any cloud.
            -   (Hint: you will use almost all the same code as the `moveCloud0` function)
        -   Call your new `moveCloud(name)` function inside the event block, once for each cloud name.
            -   (Hint: this is similar to how the `loopCloud(name)` function is called many times.)
      CSD U6 params predict contained: |-
        # Bug Crawl

        Look at the program below, paying special attention to the function `crawl(bug)`.  What happens if you press the left or right button?
      CSD U6 params predict contained_2018: |-
        # Bug Crawl

        Look at the program below, paying special attention to the function `crawl(bug)`.  What happens if you press the left or right button?
      CSD U6 params predict contained_2019: |-
        # Bug Crawl

        Look at the program below, paying special attention to the function `crawl(bug)`.  What happens if you press the left or right button?
      CSD U6 params starchaser 1: |-
        # Make your `loopStar(color)` function

        Right now only the red star works, so you'll need to change this code.

        # Do This

        -   Use the code from the `loopRedStar()` function to create a `loopStar(color)` function that will work with any star.
        -   Test your function by calling `loopStar("red")` and `loopStar("blue")` inside the `loopStars()` function.
      CSD U6 params starchaser 1_2018: |-
        # Make your `loopStar(color)` function

        Right now only the red star works, so you'll need to change this code.

        # Do This

        -   Use the code from the `loopRedStar()` function to create a `loopStar(color)` function that will work with any star.
        -   Test your function by calling `loopStar("red")` and `loopStar("blue")` inside the `loopStars()` function.
      CSD U6 params starchaser 1_2019: |-
        # Make your `loopStar(color)` function

        Right now only the red star works, so you'll need to change this code.

        # Do This

        -   Use the code from the `loopRedStar()` function to create a `loopStar(color)` function that will work with any star.
        -   Test your function by calling `loopStar("red")` and `loopStar("blue")` inside the `loopStars()` function.
      CSD U6 params starchaser 2: |-
        # Star Chaser

        Now you'll need to make all the stars loop around the screen.

        # Do This

        -   Use a `for` loop inside your `loopStars()` function to make every star in "starArray" loop around the screen.
      CSD U6 params starchaser 2_2018: |-
        # Star Chaser

        Now you'll need to make all the stars loop around the screen.

        # Do This

        -   Use a `for` loop inside your `loopStars()` function to make every star in "starArray" loop around the screen.
      CSD U6 params starchaser 2_2019: |-
        # Star Chaser

        Now you'll need to make all the stars loop around the screen.

        # Do This

        -   Use a `for` loop inside your `loopStars()` function to make every star in "starArray" loop around the screen.
      CSD U6 params starchaser 3: |-
        # Star Chaser

        All the stars loop, but you can still only catch the red star.

        # Do This

        -   Use code from the `moveRedStar()` function to make a `moveStar(color)` function that can move any star.
        -   Use code from the `checkRedStar()` function to make a `checkStar(color)` function that works for any star.
        -   Test your code by calling `checkStar("red")` and `checkStar("blue")` inside your event block.
      CSD U6 params starchaser 3_2018: |-
        # Star Chaser

        All the stars loop, but you can still only catch the red star.

        # Do This

        -   Use code from the `moveRedStar()` function to make a `moveStar(color)` function that can move any star.
        -   Use code from the `checkRedStar()` function to make a `checkStar(color)` function that works for any star.
        -   Test your code by calling `checkStar("red")` and `checkStar("blue")` inside your event block.
      CSD U6 params starchaser 3_2019: |-
        # Star Chaser

        All the stars loop, but you can still only catch the red star.

        # Do This

        -   Use code from the `moveRedStar()` function to make a `moveStar(color)` function that can move any star.
        -   Use code from the `checkRedStar()` function to make a `checkStar(color)` function that works for any star.
        -   Test your code by calling `checkStar("red")` and `checkStar("blue")` inside your event block.
      CSD U6 params starchaser 4: |-
        # Star Chaser

        Now make it work for all the stars

        # Do This

        -   Create a `checkStars()` functions that uses a `for` loop to check every star in the star array.
        -   Test your code by calling the `checkStars()` function inside the event block.
      CSD U6 params starchaser 4_2018: |-
        # Star Chaser

        Now make it work for all the stars

        # Do This

        -   Create a `checkStars()` functions that uses a `for` loop to check every star in the star array.
        -   Test your code by calling the `checkStars()` function inside the event block.
      CSD U6 params starchaser 4_2019: |-
        # Star Chaser

        Now make it work for all the stars

        # Do This

        -   Create a `checkStars()` functions that uses a `for` loop to check every star in the star array.
        -   Test your code by calling the `checkStars()` function inside the event block.
      CSD U6 params starchaser 5: |-
        # Star Chaser

        Now you can add extra stars, and your functions will work with them, too.

        # Do This

        -   In design mode, copy one of the stars, and change its name and color to "yellow".
        -   Add a new element, "yellow", to your star array.
        -   Test the game with your new star.
      CSD U6 params starchaser 5_2018: |-
        # Star Chaser

        Now you can add extra stars, and your functions will work with them, too.

        # Do This

        -   In design mode, copy one of the stars, and change its name and color to "yellow".
        -   Add a new element, "yellow", to your star array.
        -   Test the game with your new star.
      CSD U6 params starchaser 5_2019: |-
        # Star Chaser

        Now you can add extra stars, and your functions will work with them, too.

        # Do This

        -   In design mode, copy one of the stars, and change its name and color to "yellow".
        -   Add a new element, "yellow", to your star array.
        -   Test the game with your new star.
      CSD U6 params starchaser challenge 1_2018: |-
        # Star Chaser

        Now that you have a working game, you can challenge yourself with some different features.

        # Do This

        -   Start the user with 5 "lives", and take one away every time the user touches the **wrong** star.
        -   Make an end screen, and change to that screen when the user runs out of lives.
      CSD U6 params starchaser challenge 1_2019: |-
        # Star Chaser

        Now that you have a working game, you can challenge yourself with some different features.

        # Do This

        -   Start the user with 5 "lives", and take one away every time the user touches the **wrong** star.
        -   Make an end screen, and change to that screen when the user runs out of lives.
      CSD U6 params starchaser challenge 2_2018: |-
        # Star Chaser

        Now that you have a working game, you can challenge yourself with some different features.

        # Do This

        -   Make the player go back to the middle of the screen when the left button is pressed.
      CSD U6 params starchaser challenge 2_2019: |-
        # Star Chaser

        Now that you have a working game, you can challenge yourself with some different features.

        # Do This

        -   Make the player go back to the middle of the screen when the left button is pressed.
      CSD U6 params starchaser intro: "# Yıldız Kovalayan\\\r\n\n\\\r\nBu\noyunda,
        kullanıcı yıldızları LED'lerin rengine göre yakalamaya çalışır.\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n-   Oyunu oynayın ve aşağıdakileri bir takım arkadaşınızla
        \n    tartışın:\\\r\n-   Bu programın hangi fonksiyonlara ihtiyacı var?\\\r\n-
        \  Bu fonksiyonların\n    hangi parametreleri olmalı?"
      CSD U6 params starchaser intro_2018: "# Yıldız Kovalayan\\\r\n\n\\\r\nBu\noyunda,
        kullanıcı yıldızları LED'lerin rengine göre yakalamaya çalışır.\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n-   Oyunu oynayın ve aşağıdakileri bir takım arkadaşınızla
        \n    tartışın:\\\r\n-   Bu programın hangi fonksiyonlara ihtiyacı var?\\\r\n-
        \  Bu fonksiyonların\n    hangi parametreleri olmalı?"
      CSD U6 params starchaser intro_2019: "# Yıldız Kovalayan\\\r\n\n\\\r\nBu\noyunda,
        kullanıcı yıldızları LED'lerin rengine göre yakalamaya çalışır.\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n-   Oyunu oynayın ve aşağıdakileri bir takım arkadaşınızla
        \n    tartışın:\\\r\n-   Bu programın hangi fonksiyonlara ihtiyacı var?\\\r\n-
        \  Bu fonksiyonların\n    hangi parametreleri olmalı?"
      CSD U6 predict LED button: Gömülü Tahmin
      CSD U6 predict LED button_2018: Gömülü Tahmin
      CSD U6 predict LED button_2019: Gömülü Tahmin
      CSD U6 random array notes: "# Random Song Generator\n\nYou're going to make
        a random song generator. When you press a button, a random note should play.
        Press it enough times, and you have yourself a beautiful arrangement of bleeps
        and bloops. \n\nYou used `randomNumber()` to select an element from an array
        in the previous lesson, so this should be familiar.\n\n# Do This\n\n-   Add
        code to randomly select a note from the `notes` array and play it.\n-   Run
        the program and press the left button to hear your buzzer sing its beautiful
        tune."
      CSD U6 random array notes_2018: "# Random Song Generator\n\nYou're going to
        make a random song generator. When you press a button, a random note should
        play. Press it enough times, and you have yourself a beautiful arrangement
        of bleeps and bloops. \n\nYou used `randomNumber()` to select an element from
        an array in the previous lesson, so this should be familiar.\n\n# Do This\n\n-
        \  Add code to randomly select a note from the `notes` array and play it.\n-
        \  Run the program and press the left button to hear your buzzer sing its
        beautiful tune."
      CSD U6 random array notes_2019: "# Random Song Generator\n\nYou're going to
        make a random song generator. When you press a button, a random note should
        play. Press it enough times, and you have yourself a beautiful arrangement
        of bleeps and bloops. \n\nYou used `randomNumber()` to select an element from
        an array in the previous lesson, so this should be familiar.\n\n# Do This\n\n-
        \  Add code to randomly select a note from the `notes` array and play it.\n-
        \  Run the program and press the left button to hear your buzzer sing its
        beautiful tune."
      CSD U6 sensor experiment embedded: |-
        # Sensor Experiment

        Run the program to the right and experiment with your board. Try interacting with your board in many different ways to figure out what each sensor might be. As you experiment with each sensor, discuss with a neighbor:

        -   What does this sensor measure?
        -   What is its maximum value?
        -   What is its minimum value?
      CSD U6 sensor experiment embedded_2018: |-
        # Sensor Experiment

        Run the program to the right and experiment with your board. Try interacting with your board in many different ways to figure out what each sensor might be. As you experiment with each sensor, discuss with a neighbor:

        -   What does this sensor measure?
        -   What is its maximum value?
        -   What is its minimum value?
      CSD U6 sensor experiment embedded_2019: |-
        # Sensor Experiment

        Run the program to the right and experiment with your board. Try interacting with your board in many different ways to figure out what each sensor might be. As you experiment with each sensor, discuss with a neighbor:

        -   What does this sensor measure?
        -   What is its maximum value?
        -   What is its minimum value?
      CSD U6 setProperty Text: |-
        # Changing the Text

        The `setProperty` block can be used to change lots of things about your design elements, including the text they contain.

        # Do This

        -   Drag out a `setProperty` block
        -   For the first parameter, select "name" (the element's id)
        -   For the second parameter, select "text" (the property you want to set)
        -   For the third parameter, write your name in quotes (the value to set)

        _Note: We've removed the Design Mode tab for now so you can practice working with `setProperty`, but it'll come back later once you're building apps of your own._
      CSD U6 setProperty Text_2018: |-
        # Changing the Text

        The `setProperty` block can be used to change lots of things about your design elements, including the text they contain.

        # Do This

        -   Drag out a `setProperty` block
        -   For the first parameter, select "name" (the element's id)
        -   For the second parameter, select "text" (the property you want to set)
        -   For the third parameter, write your name in quotes (the value to set)

        _Note: We've removed the Design Mode tab for now so you can practice working with `setProperty`, but it'll come back later once you're building apps of your own._
      CSD U6 setProperty Text_2019: |-
        # Changing the Text

        The `setProperty` block can be used to change lots of things about your design elements, including the text they contain.

        # Do This

        -   Drag out a `setProperty` block
        -   For the first parameter, select "name" (the element's id)
        -   For the second parameter, select "text" (the property you want to set)
        -   For the third parameter, write your name in quotes (the value to set)

        _Note: We've removed the Design Mode tab for now so you can practice working with `setProperty`, but it'll come back later once you're building apps of your own._
      CSD U6 setProperty hidden: |-
        # Hidden

        Design elements have a property called "hidden" that controls whether the element should show on screen or not. We are going to use this property to create an alarm app. Notice that when the program starts one button is hidden, and one is not.

        We have already set up an event handler for the "triggerAlarmButton" which will do two things when clicked:

        -   Change the "text" property of "statusLabel" to "on"
        -   Set the "hidden" property of "stopAlarmButton" to `false` (meaning it should _not_ be hidden)

        # Do This

        -   Run the program and click "Trigger Alarm" to see how it works
        -   Add code to the provided event handler that hides the "triggerAlarmButton"

        _Note: the button "stopAlarmButton" is already on the screen, but because its "hidden" property is marked true, it isn't shown when the program starts._
      CSD U6 setProperty hidden 2: |-
        # Showing/Hiding

        This alarm app isn't super useful if you can't turn the alarm off once it's been triggered. Let's fix that.

        # Do This

        Add a second `onEvent` block to watch for the "stopAlarmButton" to be clicked. Inside that block:

        -   Change the status text to "OFF"
        -   Hide the "stopAlarmButton"

        _Hint: "hidden" is a boolean property. If we used `false` to make the button show up, what should you use to make it hidden again?_
      CSD U6 setProperty hidden 2_2018: |-
        # Showing/Hiding

        This alarm app isn't super useful if you can't turn the alarm off once it's been triggered. Let's fix that.

        # Do This

        Add a second `onEvent` block to watch for the "stopAlarmButton" to be clicked. Inside that block:

        -   Change the status text to "OFF"
        -   Hide the "stopAlarmButton"

        _Hint: "hidden" is a boolean property. If we used `false` to make the button show up, what should you use to make it hidden again?_
      CSD U6 setProperty hidden 2_2019: |-
        # Showing/Hiding

        This alarm app isn't super useful if you can't turn the alarm off once it's been triggered. Let's fix that.

        # Do This

        Create a second event to watch for the "stopAlarmButton" to be clicked. When that event is triggered:

        -   Change the status text to "OFF"
        -   Hide the "stopAlarmButton"

        _Hint: "hidden" is a boolean property. If we used `false` to make the button show up, what should you use to make it hidden again?_
      CSD U6 setProperty hidden_2018: |-
        # Hidden

        Design elements have a property called "hidden" that controls whether the element should show on screen or not. We are going to use this property to create an alarm app. Notice that when the program starts one button is hidden, and one is not.

        We have already set up an event handler for the "triggerAlarmButton" which will do two things when clicked:

        -   Change the "text" property of "statusLabel" to "on"
        -   Set the "hidden" property of "stopAlarmButton" to `false` (meaning it should _not_ be hidden)

        # Do This

        -   Run the program and click "Trigger Alarm" to see how it works
        -   Add code to the provided event handler that hides the "triggerAlarmButton"

        _Note: the button "stopAlarmButton" is already on the screen, but because its "hidden" property is marked true, it isn't shown when the program starts._
      CSD U6 setProperty hidden_2019: |-
        # Hidden

        Design elements have a property called "hidden" that controls whether the element should show on screen or not. We are going to use this property to create an alarm app. Notice that when the program starts one button is hidden, and one is not.

        We have already set up an event handler for the "triggerAlarmButton" which will do two things when clicked:

        -   Change the "text" property of "statusLabel" to "on"
        -   Set the "hidden" property of "stopAlarmButton" to `false` (meaning it should _not_ be hidden)

        # Do This

        -   Run the program and click "Trigger Alarm" to see how it works
        -   Add code to the provided event handler that hides the "triggerAlarmButton"

        _Note: the button "stopAlarmButton" is already on the screen, but because its "hidden" property is marked true, it isn't shown when the program starts._
      CSD U6 setProperty xy: |-
        # Changing Position

        Every design element (except for the screen) has an "x" and a "y" property that controls its position.

        # Do This

        <div markdown="1" style="float:right">

        ![expandable](https://images.code.org/3a67642609071cf6766c296b8ca5a68e-image-1526944857178.png)

        </div>

        Using the `setProperty` block, move "red\_button" so that it matches the image to the right. (Click on the image to see the full size.)

        _Note: We've removed the Design Mode tab for now so you can practice working with setProperty, but it'll come back later once you're building apps of your own._
      CSD U6 setProperty xy click: |-
        # Changing With a Click

        It's not really useful to only set a property when your program is first run. After all, you could just do all of that in Design Mode. When you use an `onEvent` block with `setProperty`, you're able to do things you couldn't do with Design Mode alone.

        # Do This

        We've provided an empty `onEvent` block that's watching the "smiley" image. Inside the `onEvent` block, use two `setProperty` blocks to move the smiley somewhere else (it doesn't really matter where for now). Test your program by running it and clicking on the smiley.
      CSD U6 setProperty xy click_2018: |-
        # Changing With a Click

        It's not really useful to only set a property when your program is first run. After all, you could just do all of that in Design Mode. When you use an `onEvent` block with `setProperty`, you're able to do things you couldn't do with Design Mode alone.

        # Do This

        We've provided an empty `onEvent` block that's watching the "smiley" image. Inside the `onEvent` block, use two `setProperty` blocks to move the smiley somewhere else (it doesn't really matter where for now). Test your program by running it and clicking on the smiley.
      CSD U6 setProperty xy click_2019: |-
        # Changing With a Click

        It's not really useful to only set a property when your program is first run. After all, you could just do all of that in Design Mode. When you use an `onEvent` block with `setProperty`, you're able to do things you couldn't do with Design Mode alone.

        # Do This

        We've provided an empty `onEvent` block that's watching the "smiley" image. Inside the `onEvent` block, use two `setProperty` blocks to move the smiley somewhere else (it doesn't really matter where for now). Test your program by running it and clicking on the smiley.
      CSD U6 setProperty xy random: |-
        <img src="https://images.code.org/67c6cc358b235e2c2ae39f3f72a3e0b1-image-1507326303839.gif" style="float:right; max-width: 150px; margin: 10px;">

        # Randomization

        Moving on the first click is fine, but this smiley would be even cooler if it moved somewhere new _every time_ we clicked. Fortunately, we can use the `randomNumber` block to do just that.

        # Do This

        Instead of setting the "x" and "y" properties to a specific number, use the `randomNumber` block to pick a new random "x" and "y" each time the smiley is clicked.

        _Tip: The App Lab screen is 320 pixels wide by 450 pixels tall. What range of random numbers will ensure that the smiley is always visible on screen?_
      CSD U6 setProperty xy random_2018: |-
        <img src="https://images.code.org/67c6cc358b235e2c2ae39f3f72a3e0b1-image-1507326303839.gif" style="float:right; max-width: 150px; margin: 10px;">

        # Randomization

        Moving on the first click is fine, but this smiley would be even cooler if it moved somewhere new _every time_ we clicked. Fortunately, we can use the `randomNumber` block to do just that.

        # Do This

        Instead of setting the "x" and "y" properties to a specific number, use the `randomNumber` block to pick a new random "x" and "y" each time the smiley is clicked.

        _Tip: The App Lab screen is 320 pixels wide by 450 pixels tall. What range of random numbers will ensure that the smiley is always visible on screen?_
      CSD U6 setProperty xy random_2019: |-
        <img src="https://images.code.org/67c6cc358b235e2c2ae39f3f72a3e0b1-image-1507326303839.gif" style="float:right; max-width: 150px; margin: 10px;">

        # Randomization

        Moving on the first click is fine, but this smiley would be even cooler if it moved somewhere new _every time_ we clicked. Fortunately, we can use the `randomNumber` block to do just that.

        # Do This

        Instead of setting the "x" and "y" properties to a specific number, use the `randomNumber` block to pick a new random "x" and "y" each time the smiley is clicked.

        _Tip: The App Lab screen is 320 pixels wide by 450 pixels tall. What range of random numbers will ensure that the smiley is always visible on screen?_
      CSD U6 setProperty xy_2018: |-
        # Changing Position

        Every design element (except for the screen) has an "x" and a "y" property that controls its position.

        # Do This

        <div markdown="1" style="float:right">

        ![expandable](https://images.code.org/3a67642609071cf6766c296b8ca5a68e-image-1526944857178.png)

        </div>

        Using the `setProperty` block, move "red\_button" so that it matches the image to the right. (Click on the image to see the full size.)

        _Note: We've removed the Design Mode tab for now so you can practice working with setProperty, but it'll come back later once you're building apps of your own._
      CSD U6 setProperty xy_2019: |-
        # Changing Position

        Every design element (except for the screen) has an "x" and a "y" property that controls its position.

        # Do This

        <div markdown="1" style="float:right">

        ![expandable](https://images.code.org/3a67642609071cf6766c296b8ca5a68e-image-1526944857178.png)

        </div>

        Using the `setProperty` block, move "red\_button" so that it matches the image to the right. (Click on the image to see the full size.)

        _Note: We've removed the Design Mode tab for now so you can practice working with setProperty, but it'll come back later once you're building apps of your own._
      CSD U6 slider intro: |-
        # Sliders

        Last time, your users were only able to choose between a short and long buzz.  To give the user control over the exact duration of the buzzer, you'll want to use a slider.

        This slider lets users choose a value between 100 and 1000 for the duration of the buzz, but there's something not quite right about how it's working.

        # Do This

        -   Look over the code and find the bug that's keeping the duration from being set correctly.
            -   (Hint: Hover over the yellow triangles for clues as to what might be wrong with the code.)
      CSD U6 slider intro_2018: |-
        # Sliders

        Last time, your users were only able to choose between a short and long buzz.  To give the user control over the exact duration of the buzzer, you'll want to use a slider.

        This slider lets users choose a value between 100 and 1000 for the duration of the buzz, but there's something not quite right about how it's working.

        # Do This

        -   Look over the code and find the bug that's keeping the duration from being set correctly.
            -   (Hint: Hover over the yellow triangles for clues as to what might be wrong with the code.)
      CSD U6 slider intro_2019: |-
        # Sliders

        Last time, your users were only able to choose between a short and long buzz.  To give the user control over the exact duration of the buzzer, you'll want to use a slider.

        This slider lets users choose a value between 100 and 1000 for the duration of the buzz, but there's something not quite right about how it's working.

        # Do This

        -   Look over the code and find the bug that's keeping the duration from being set correctly.
            -   (Hint: Hover over the yellow triangles for clues as to what might be wrong with the code.)
      CSD U6 stillness game predict code: |-
        # Change with the Accelerometer

        This program uses the change event to increase a movement meter every time the board moves. When the movement meter reaches 100, the alarm will sound.

        # Do This

        This program has two bugs that you need to fix:

        -   The movement meter is being triggered by a button press, instead of the accelerometer's `change` event.
        -   The programmer forgot how to use the counter pattern to increase the movement variable.

        Once you have found the bugs, run the program and try to pass the board to your partner without setting off the alarm.
      CSD U6 stillness game predict code_2018: |-
        # Change with the Accelerometer

        This program uses the change event to increase a movement meter every time the board moves. When the movement meter reaches 100, the alarm will sound.

        # Do This

        This program has two bugs that you need to fix:

        -   The movement meter is being triggered by a button press, instead of the accelerometer's `change` event.
        -   The programmer forgot how to use the counter pattern to increase the movement variable.

        Once you have found the bugs, run the program and try to pass the board to your partner without setting off the alarm.
      CSD U6 stillness game predict code_2019: |-
        # Change with the Accelerometer

        This program uses the change event to increase a movement meter every time the board moves. When the movement meter reaches 100, the alarm will sound.

        # Do This

        This program has two bugs that you need to fix:

        -   The movement meter is being triggered by a button press, instead of the accelerometer's `change` event.
        -   The programmer forgot how to use the counter pattern to increase the movement variable.

        Once you have found the bugs, run the program and try to pass the board to your partner without setting off the alarm.
      CSD U6 test LED: "# LED'i Kontrol Edin\\\r\n\n\\\r\nArtık kartınızın nasıl çalıştığını
        bildiğinize göre farklı LED blokları deneyebilirsiniz.\\\r\n\\\r\n\n# \n\nBunu
        Yap\\\r\n\n-   \"Çalıştır'a\" basın ve kodun nasıl çalıştığını takım arkadaşınızla
        tartışın.\\\r\n-   \\*\n    Ne yaptıklarını görmek için farklı LED blokları
        deneyin.\\\r\n    -   İpucu: Kodunuzu değiştirdikten\n        sonra \"Sıfırla'ya\"
        basmayı ve ve kodunuzu tekrar çalıştırmayı unutmayın"
      CSD U6 test LED_2018: "# LED'i Kontrol Edin\\\r\n\n\\\r\nArtık kartınızın nasıl
        çalıştığını bildiğinize göre farklı LED blokları deneyebilirsiniz.\\\r\n\\\r\n\n#
        \n\nBunu Yap\\\r\n\n-   \"Çalıştır'a\" basın ve kodun nasıl çalıştığını takım
        arkadaşınızla tartışın.\\\r\n-   \\*\n    Ne yaptıklarını görmek için farklı
        LED blokları deneyin.\\\r\n    -   İpucu: Kodunuzu değiştirdikten\n        sonra
        \"Sıfırla'ya\" basmayı ve ve kodunuzu tekrar çalıştırmayı unutmayın"
      CSD U6 test LED_2019: "# LED'i Kontrol Edin\\\r\n\n\\\r\nArtık kartınızın nasıl
        çalıştığını bildiğinize göre farklı LED blokları deneyebilirsiniz.\\\r\n\\\r\n\n#
        \n\nBunu Yap\\\r\n\n-   \"Çalıştır'a\" basın ve kodun nasıl çalıştığını takım
        arkadaşınızla tartışın.\\\r\n-   \\*\n    Ne yaptıklarını görmek için farklı
        LED blokları deneyin.\\\r\n    -   İpucu: Kodunuzu değiştirdikten\n        sonra
        \"Sıfırla'ya\" basmayı ve ve kodunuzu tekrar çalıştırmayı unutmayın"
      CSD U6 tugowar buzzer: "# Winning Buzzer\n\nThat last thing that that is missing
        from your project guide's description of this project is the buzzer. It should
        buzz a high tone if player 1 wins and a low tone if player 2 wins. \n\n# Do
        This\n\nSo far we've been able to just use the `player` parameter directly
        to report which player won, but that won't work for buzzing different sounds.
        Inside the conditional that checks if a player won, you'll need to add _another_
        conditional that checks which player it was. If `player == \"red\"` the buzzer
        should play a high note, otherwise (else) it should play a low note."
      CSD U6 tugowar buzzer_2018: "# Winning Buzzer\n\nThat last thing that that is
        missing from your project guide's description of this project is the buzzer.
        It should buzz a high tone if player 1 wins and a low tone if player 2 wins.
        \n\n# Do This\n\nSo far we've been able to just use the `player` parameter
        directly to report which player won, but that won't work for buzzing different
        sounds. Inside the conditional that checks if a player won, you'll need to
        add _another_ conditional that checks which player it was. If `player == \"red\"`
        the buzzer should play a high note, otherwise (else) it should play a low
        note."
      CSD U6 tugowar buzzer_2019: "# Winning Buzzer\n\nThat last thing that that is
        missing from your project guide's description of this project is the buzzer.
        It should buzz a high tone if player 1 wins and a low tone if player 2 wins.
        \n\n# Do This\n\nSo far we've been able to just use the `player` parameter
        directly to report which player won, but that won't work for buzzing different
        sounds. Inside the conditional that checks if a player won, you'll need to
        add _another_ conditional that checks which player it was. If `player == \"red\"`
        the buzzer should play a high note, otherwise (else) it should play a low
        note."
      CSD U6 tugowar conditional: |-
        # Check for a Winner

        Your game should be pretty playable by now. Two players can click their respective buttons, and their emojies will race down the screen. We still need a way for a player to win though.

        # Do This

        Using a conditional inside the `checkWin()` function, you want to check if a player has won each time they click. For now, we can just use `console.log` to report the winner.

        -   Add an if statement to the bottom of `checkWin()`
        -   For the condition of your if statement, check if `player_y` is greater than 350 (or use the bottom of screen value you decided on in the last level)
        -   In your conditional, add a `console.log` that reports which player won
        -   Test your program to make sure that it reports a winner when one of the emojis makes it to the bottom of the screen
      CSD U6 tugowar conditional_2018: |-
        # Check for a Winner

        Your game should be pretty playable by now. Two players can click their respective buttons, and their emojies will race down the screen. We still need a way for a player to win though.

        # Do This

        Using a conditional inside the `checkWin()` function, you want to check if a player has won each time they click. For now, we can just use `console.log` to report the winner.

        -   Add an if statement to the bottom of `checkWin()`
        -   For the condition of your if statement, check if `player_y` is greater than 350 (or use the bottom of screen value you decided on in the last level)
        -   In your conditional, add a `console.log` that reports which player won
        -   Test your program to make sure that it reports a winner when one of the emojis makes it to the bottom of the screen
      CSD U6 tugowar conditional_2019: |-
        # Check for a Winner

        Your game should be pretty playable by now. Two players can click their respective buttons, and their emojies will race down the screen. We still need a way for a player to win though.

        # Do This

        Using a conditional inside the `checkWin()` function, you want to check if a player has won each time they click. For now, we can just use `console.log` to report the winner.

        -   Add an if statement to the bottom of `checkWin()`
        -   For the condition of your if statement, check if `player_y` is greater than 350 (or use the bottom of screen value you decided on in the last level)
        -   In your conditional, add a `console.log` that reports which player won
        -   Test your program to make sure that it reports a winner when one of the emojis makes it to the bottom of the screen
      CSD U6 tugowar demo: |-
        # Grab that Bug!

        This is an example of a tug o' war game that could be built in this lesson. To play, pair up with another student. The student on the left will the click the left button on the Circuit Playground as fast as they can, while the student on the right clicks the right button. Whoever can get the bug over to their side first wins.
      CSD U6 tugowar demo_2018: |-
        # Grab that Bug!

        This is an example of a tug o' war game that could be built in this lesson. To play, pair up with another student. The student on the left will the click the left button on the Circuit Playground as fast as they can, while the student on the right clicks the right button. Whoever can get the bug over to their side first wins.
      CSD U6 tugowar demo_2019: |-
        # Grab that Bug!

        This is an example of a tug o' war game that could be built in this lesson. To play, pair up with another student. The student on the left will the click the left button on the Circuit Playground as fast as they can, while the student on the right clicks the right button. Whoever can get the bug over to their side first wins.
      CSD U6 tugowar design 1: |-
        # Getting Started: Screen Design

        You should have already reviewed the planning guide for this project. Some of the work to turn this project guide into a working program has already been started. Based on the project guide you're going to do the rest of this work.

        # Do This

        We've already created a "start" screen and included a title and "play" button. Using your planning guide, finish creating this screen. Specifically you'll want to:

        -   Update the title text to say "Emoji Race"
        -   Add instructions for playing using the ID "instructions"

        Feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 1.5: "# Oyun Ekranı Tasarımı\\\r\n\n\\\r\nOyunun \noynanacağı
        bir \"oyun\" ekranı da ekledik. Sadece birkaç ince ayara ihtiyacı var.\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n\\\r\n\"Oyun\" ekranına geçin\" ve planlama rehberiniz ile
        iki emoji resminin renklerini değiştirerek bu ekranı düzeltin.\\\r\n\\\r\nİstediğiniz
        herhangi bir tasarım ayarını eklemekten çekinmeyin."
      CSD U6 tugowar design 1.5_2018: "# Oyun Ekranı Tasarımı\\\r\n\n\\\r\nOyunun
        \noynanacağı bir \"oyun\" ekranı da ekledik. Sadece birkaç ince ayara ihtiyacı
        var.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\n\"Oyun\" ekranına geçin\" ve planlama
        rehberiniz ile iki emoji resminin renklerini değiştirerek bu ekranı düzeltin.\\\r\n\\\r\nİstediğiniz
        herhangi bir tasarım ayarını eklemekten çekinmeyin."
      CSD U6 tugowar design 1.5_2019: "# Oyun Ekranı Tasarımı\\\r\n\n\\\r\nOyunun
        \noynanacağı bir \"oyun\" ekranı da ekledik. Sadece birkaç ince ayara ihtiyacı
        var.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\n\"Oyun\" ekranına geçin\" ve planlama
        rehberiniz ile iki emoji resminin renklerini değiştirerek bu ekranı düzeltin.\\\r\n\\\r\nİstediğiniz
        herhangi bir tasarım ayarını eklemekten çekinmeyin."
      CSD U6 tugowar design 1_2018: |-
        # Getting Started: Screen Design

        You should have already reviewed the planning guide for this project. Some of the work to turn this project guide into a working program has already been started. Based on the project guide you're going to do the rest of this work.

        # Do This

        We've already created a "start" screen and included a title and "play" button. Using your planning guide, finish creating this screen. Specifically you'll want to:

        -   Update the title text to say "Emoji Race"
        -   Add instructions for playing using the ID "instructions"

        Feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 1_2019: |-
        # Getting Started: Screen Design

        You should have already reviewed the planning guide for this project. Some of the work to turn this project guide into a working program has already been started. Based on the project guide you're going to do the rest of this work.

        # Do This

        We've already created a "start" screen and included a title and "play" button. Using your planning guide, finish creating this screen. Specifically you'll want to:

        -   Update the title text to say "Emoji Race"
        -   Add instructions for playing using the ID "instructions"

        Feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 2: |-
        # Designing the Win Screen

        The final screen in this program shows who won. It's totally blank right now.

        # Do This

        Switch to "win" and design it based on your project guide. Make sure to pay close attention to the ID of each element. Once you've added the required elements, feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 2_2018: |-
        # Designing the Win Screen

        The final screen in this program shows who won. It's totally blank right now.

        # Do This

        Switch to "win" and design it based on your project guide. Make sure to pay close attention to the ID of each element. Once you've added the required elements, feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 2_2019: |-
        # Designing the Win Screen

        The final screen in this program shows who won. It's totally blank right now.

        # Do This

        Switch to "win" and design it based on your project guide. Make sure to pay close attention to the ID of each element. Once you've added the required elements, feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar final: |-
        # Make It Your Own

        You just walked through someone else's plan for creating a program, so now it's time to make it your own. What additional features or challenges do you want to create?

        # Do This

        Select one of the challenges below to add to the game or come up with a challenge of your own.

        -   Change the look and layout of the screens
        -   Use the buzzer or the led to show when one of the buttons has been clicked
        -   Set the "icon-color" property of "winner\_image" to the winning color
        -   Make the emojis start out sad, change to meh halfway, and end up happy
        -   Use a variable and conditionals to make sure that players can only move their emojis when the "game" screen is showing
      CSD U6 tugowar final_2018: |-
        # Make It Your Own

        You just walked through someone else's plan for creating a program, so now it's time to make it your own. What additional features or challenges do you want to create?

        # Do This

        Select one of the challenges below to add to the game or come up with a challenge of your own.

        -   Change the look and layout of the screens
        -   Use the buzzer or the led to show when one of the buttons has been clicked
        -   Set the "icon-color" property of "winner\_image" to the winning color
        -   Make the emojis start out sad, change to meh halfway, and end up happy
        -   Use a variable and conditionals to make sure that players can only move their emojis when the "game" screen is showing
      CSD U6 tugowar final_2019: |-
        # Make It Your Own

        You just walked through someone else's plan for creating a program, so now it's time to make it your own. What additional features or challenges do you want to create?

        # Do This

        Select one of the challenges below to add to the game or come up with a challenge of your own.

        -   Change the look and layout of the screens
        -   Use the buzzer or the led to show when one of the buttons has been clicked
        -   Set the "icon-color" property of "winner\_image" to the winning color
        -   Make the emojis start out sad, change to meh halfway, and end up happy
        -   Use a variable and conditionals to make sure that players can only move their emojis when the "game" screen is showing
      CSD U6 tugowar setProperty: |-
        # Display the Winner

        The winning screen doesn't actually know _who_ won the game. Let's fix that now.

        # Do This

        Before each call to `setScreen`, add a `setProperty` block to change the "text" property of "winner" to display the actual winner.
      CSD U6 tugowar setProperty_2018: |-
        # Display the Winner

        The winning screen doesn't actually know _who_ won the game. Let's fix that now.

        # Do This

        Before the call to `setScreen`, add a `setProperty` block to change the "text" property of "winner" to display the actual winner.
      CSD U6 tugowar setProperty_2019: |-
        # Display the Winner

        The winning screen doesn't actually know _who_ won the game. Let's fix that now.

        # Do This

        Before the call to `setScreen`, add a `setProperty` block to change the "text" property of "winner" to display the actual winner.
      CSD U6 tugowar setScreen: |-
        # Change to the Win Screen

        Now that we have conditionals to check which player won, let's switch to the "win" screen when a player wins.

        # Do This

        Inside the conditional that you've created to check if a player has reached the bottom, add a `setScreen` block to change to the "win" screen. Make sure you test that your new code works before moving on!
      CSD U6 tugowar setScreen_2018: |-
        # Change to the Win Screen

        Now that we have conditionals to check which player won, let's switch to the "win" screen when a player wins.

        # Do This

        Inside the conditional that you've created to check if a player has reached the bottom, add a `setScreen` block to change to the "win" screen. Make sure you test that your new code works before moving on!
      CSD U6 tugowar setScreen_2019: |-
        # Change to the Win Screen

        Now that we have conditionals to check which player won, let's switch to the "win" screen when a player wins.

        # Do This

        Inside the conditional that you've created to check if a player has reached the bottom, add a `setScreen` block to change to the "win" screen. Make sure you test that your new code works before moving on!
      CSD U6 tugowar variables 1: "# The startGame() Function\n\nIf you look at the
        events we planned for in the planning guide, you may notice that two events
        do essentially the same thing. The events that respond to both the \"play\"
        and \"replay\" buttons could be written with identical code, but duplicate
        code like this is a perfect place to use a **function**.\n\n# Do This\n\nWe've
        already added blocks that call a new function named `startGame()` to the appropriate
        event handlers, and we've created an empty function for you to build out.
        \n\n-   Find the `startGame()` function definition ( [Show me where](#triggercallout=block_trigger)
        )\n-   Inside the function:\n    -   Move both of the emoji images to the
        top of the screen by setting each one's \"y\" property to 0\n    -   Change
        the screen to \"game\"\n\nOnce you've fleshed out the `startGame()` function,
        try clicking the \"play\" button to check that it's working."
      CSD U6 tugowar variables 1_2018: "# The startGame() Function\n\nIf you look
        at the events we planned for in the planning guide, you may notice that two
        events do essentially the same thing. The events that respond to both the
        \"play\" and \"replay\" buttons could be written with identical code, but
        duplicate code like this is a perfect place to use a **function**.\n\n# Do
        This\n\nWe've already added blocks that call a new function named `startGame()`
        to the appropriate event handlers, and we've created an empty function for
        you to build out. \n\n-   Find the `startGame()` function definition ( [Show
        me where](#triggercallout=block_trigger) )\n-   Inside the function:\n    -
        \  Move both of the emoji images to the top of the screen by setting each
        one's \"y\" property to 0\n    -   Change the screen to \"game\"\n\nOnce you've
        fleshed out the `startGame()` function, try clicking the \"play\" button to
        check that it's working."
      CSD U6 tugowar variables 1_2019: "# The startGame() Function\n\nIf you look
        at the events we planned for in the planning guide, you may notice that two
        events do essentially the same thing. The events that respond to both the
        \"play\" and \"replay\" buttons could be written with identical code, but
        duplicate code like this is a perfect place to use a **function**.\n\n# Do
        This\n\nWe've already added blocks that call a new function named `startGame()`
        to the appropriate event handlers, and we've created an empty function for
        you to build out. \n\n-   Find the `startGame()` function definition ( [Show
        me where](#triggercallout=block_trigger) )\n-   Inside the function:\n    -
        \  Move both of the emoji images to the top of the screen by setting each
        one's \"y\" property to 0\n    -   Change the screen to \"game\"\n\nOnce you've
        fleshed out the `startGame()` function, try clicking the \"play\" button to
        check that it's working."
      CSD U6 tugowar variables 2: |-
        # Functions with Parameters

        Most of the existing functions you use in App Lab need inputs, or **parameters**, to pass the function necessary information. For example, when changing a screen, you pass the ID of that screen as a parameter, which looks like `setScreen("win")`.

        These parameters show up as a variable that can be used inside the function, and you can create functions that use parameters too!

        # Do This

        <div markdown="1" style="float:right; margin: 20px;">

        ![expandable](https://images.code.org/2eccd9fc9f4887aefd0bfd94d7f332c8-image-1509402194012.png)

        <br/>

        Click to expand

        </div>

        Instead of a separate function to move the red and the blue players, we've created one function called `movePlayer()` that takes the ID of the player image as a parameter called `player`. Inside this function, you can use `player` any place where you need to specify the ID of the player you want to control.

        -   Find where `movePlayer()` is defined ( [Show me where](#triggercallout=block_trigger) )
        -   Inside the `movePlayer()` definition:
            -   Get the current "y" property of the player and save it to a variable called `player_y`
            -   Increase the value of `player_y` by 10
            -   Set the "y" property of player to your new value `player_y`

        Once you've added your code, test it. You should see that _both buttons_ work even though we only created one function - cool!
      CSD U6 tugowar variables 2_2018: |-
        # Functions with Parameters

        Most of the existing functions you use in App Lab need inputs, or **parameters**, to pass the function necessary information. For example, when changing a screen, you pass the ID of that screen as a parameter, which looks like `setScreen("win")`.

        These parameters show up as a variable that can be used inside the function, and you can create functions that use parameters too!

        # Do This

        <div markdown="1" style="float:right; margin: 20px;">

        ![expandable](https://images.code.org/2eccd9fc9f4887aefd0bfd94d7f332c8-image-1509402194012.png)

        <br/>

        Click to expand

        </div>

        Instead of a separate function to move the red and the blue players, we've created one function called `movePlayer()` that takes the ID of the player image as a parameter called `player`. Inside this function, you can use `player` any place where you need to specify the ID of the player you want to control.

        -   Find where `movePlayer()` is defined ( [Show me where](#triggercallout=block_trigger) )
        -   Inside the `movePlayer()` definition:
            -   Get the current "y" property of the player and save it to a variable called `player_y`
            -   Increase the value of `player_y` by 10
            -   Set the "y" property of player to your new value `player_y`

        Once you've added your code, test it. You should see that _both buttons_ work even though we only created one function - cool!
      CSD U6 tugowar variables 2_2019: |-
        # Functions with Parameters

        Most of the existing functions you use in App Lab need inputs, or **parameters**, to pass the function necessary information. For example, when changing a screen, you pass the ID of that screen as a parameter, which looks like `setScreen("win")`.

        These parameters show up as a variable that can be used inside the function, and you can create functions that use parameters too!

        # Do This

        <div markdown="1" style="float:right; margin: 20px;">

        ![expandable](https://images.code.org/2eccd9fc9f4887aefd0bfd94d7f332c8-image-1509402194012.png)

        <br/>

        Click to expand

        </div>

        Instead of a separate function to move the red and the blue players, we've created one function called `movePlayer()` that takes the ID of the player image as a parameter called `player`. Inside this function, you can use `player` any place where you need to specify the ID of the player you want to control.

        -   Find where `movePlayer()` is defined ( [Show me where](#triggercallout=block_trigger) )
        -   Inside the `movePlayer()` definition:
            -   Get the current "y" property of the player and save it to a variable called `player_y`
            -   Increase the value of `player_y` by 10
            -   Set the "y" property of player to your new value `player_y`

        Once you've added your code, test it. You should see that _both buttons_ work even though we only created one function - cool!
      CSD U6 tugowar variables 3: |-
        # The checkWin() Function

        The last function that you need to figure out is the `checkWin()` function, which after each player is moved, and is used to both check if that player has made it to the bottom of the screen and to announce the winner if necessary. For now, we're just going to find out where the player is and log it to the console.

        # Do This

        Just like the `movePlayer()` function, `checkWin()` takes a single parameter called `player`. If you call `checkWin("red")`, then the variable `player` will have the value "red".

        -   Find where the function is defined ( [Show me where](#triggercallout=block_trigger) )
        -   Create a variable called `player_y` and assign it the "y" property of the player
        -   Use either a `console.log()` command or a watcher to report the value of `player_y`
        -   Play the game with only one button, keeping an eye on the value of `player_y`
        -   Decide what value of `player_y` should be considered the bottom of the screen
      CSD U6 tugowar variables 3_2018: |-
        # The checkWin() Function

        The last function that you need to figure out is the `checkWin()` function, which after each player is moved, and is used to both check if that player has made it to the bottom of the screen and to announce the winner if necessary. For now, we're just going to find out where the player is and log it to the console.

        # Do This

        Just like the `movePlayer()` function, `checkWin()` takes a single parameter called `player`. If you call `checkWin("red")`, then the variable `player` will have the value "red".

        -   Find where the function is defined ( [Show me where](#triggercallout=block_trigger) )
        -   Create a variable called `player_y` and assign it the "y" property of the player
        -   Use either a `console.log()` command or a watcher to report the value of `player_y`
        -   Play the game with only one button, keeping an eye on the value of `player_y`
        -   Decide what value of `player_y` should be considered the bottom of the screen
      CSD U6 tugowar variables 3_2019: |-
        # The checkWin() Function

        The last function that you need to figure out is the `checkWin()` function, which after each player is moved, and is used to both check if that player has made it to the bottom of the screen and to announce the winner if necessary. For now, we're just going to find out where the player is and log it to the console.

        # Do This

        Just like the `movePlayer()` function, `checkWin()` takes a single parameter called `player`. If you call `checkWin("red")`, then the variable `player` will have the value "red".

        -   Find where the function is defined ( [Show me where](#triggercallout=block_trigger) )
        -   Create a variable called `player_y` and assign it the "y" property of the player
        -   Use either a `console.log()` command or a watcher to report the value of `player_y`
        -   Play the game with only one button, keeping an eye on the value of `player_y`
        -   Decide what value of `player_y` should be considered the bottom of the screen
      CSD What Makes a Computer a Computer Video_2019: |-
        ## Düşünülmesi gereken sorular

        -   Bilgisayarı kendisinden önce gelen makinelerle farklı kılan ne?
        -   Bilgisayarda yaptığınız bir şeyi düşünün. Ne tür girdi, çıktı, depolama ve işlemler oluyor?
      CSD sprite movement challenge_2018: |-
        # Improve your animation

        Make your animation even better by changing more sprite properties, or by adding even more sprites!
      CSD sprite movement challenge_2019: |-
        # Improve your animation

        Make your animation even better by changing more sprite properties, or by adding even more sprites!
      CSD-Arrays: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      CSD-Arrays_2018: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      CSD-Arrays_2019: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      'CSD: Animating Sprite Movement_2019': |-
        ## Questions to Consider

        -   What is the counter pattern?
        -   How does the counter pattern move sprites across the screen?
      'CSD: Animation Tab_2019': |-
        ## Questions to Consider

        -   What are the steps to adding an image to a sprite?
        -   What are the different ways to get an image?
      'CSD: Drawing in Game Lab 1_2019': |-
        ## Questions to Consider

        -   Where can you find more information about how to use the blocks?
        -   What’s an advantage of using block mode?
      'CSD: Drawing in Game Lab 2_2019': |-
        ## Questions to Consider

        -   What’s the difference between stroke and fill?
      'CSD: For Loop_2019': |-
        ## Questions to Consider

        -   What are loops used for in programming?
        -   Where do loops go in your code?
      'CSD: Introduction to the Draw Loop_2019': |-
        ## Question to Consider

        -   What does the draw function do?
      'CSD: Sprite Velocity_2019': |-
        ## Questions to Consider

        -   Why might you want to use a velocity block instead of the counter pattern?
        -   Give an example of a counter pattern and how you could use a velocity block instead.
      'CSD: Sprites in Game Lab_2019': |-
        ## Questions to Consider

        -   What is a sprite?
        -   What are properties?
        -   What problem do sprites solve?
      CSDU2 - PW - Class Style Personal Site: |-
        # Free Play Styling

        Your turn to decide what you want to style! Play with the classes styling and RGB colors to improve your personal website.

        -   Make sure you have completed the checklist below.
        -   Take a screenshot of your home page and save it somewhere on your computer so you can find it later.

        ## Checklist

        -   Somewhere on your site, give text a particular color using RGB values.
        -   On your lists page, give all the list items the same background color.
        -   Use classes to style at least two other elements of your personal website
      CSDU2 - PW - Class Style Personal Site_2018: |-
        # Free Play Styling

        Your turn to decide what you want to style! Play with the classes styling and RGB colors to improve your personal website.

        -   Make sure you have completed the checklist below.
        -   Take a screenshot of your home page and save it somewhere on your computer so you can find it later.

        ## Checklist

        -   Somewhere on your site, give text a particular color using RGB values.
        -   On your lists page, give all the list items the same background color.
        -   Use classes to style at least two other elements of your personal website
      CSDU2 - PW - Class Style Personal Site_2019: |-
        # Free Play Styling

        Your turn to decide what you want to style! Play with the classes styling and RGB colors to improve your personal website.

        -   Make sure you have completed the checklist below.
        -   Take a screenshot of your home page and save it somewhere on your computer so you can find it later.

        ## Checklist

        -   Somewhere on your site, give text a particular color using RGB values.
        -   On your lists page, give all the list items the same background color.
        -   Use classes to style at least two other elements of your personal website
      CSDU2 - Type Anything: |-
        <img src="https://images.code.org/12ffe6980a25a3664eabe69be487a921-image-1485384422334.jpg" style="width:400px; float:right">
        # Web Laboratuvarına Hoşgeldiniz!

        Şuan kullandığınız platforma Web Lab deniyor.Web Lab'da ekranın 3 ana parçası vardır.

        # Şunu Yap

        \-Çalışma alanına bir şey yazmayı dene.
        \-Önizleme alanında görmek için <img src="https://images.code.org/678619085e37ea6ce904ac8abd0df2f2-image-1493226906609.14.45 AM.png" style="width:150px"> koduna bas!
      CSDU2 - Type Anything_2018: |-
        <img src="https://images.code.org/12ffe6980a25a3664eabe69be487a921-image-1485384422334.jpg" style="width:400px; float:right">
        # Web Laboratuvarına Hoşgeldiniz!

        Şuan kullandığınız platforma Web Lab deniyor.Web Lab'da ekranın 3 ana parçası vardır.

        # Şunu Yap

        \-Çalışma alanına bir şey yazmayı dene.
        \-Önizleme alanında görmek için <img src="https://images.code.org/678619085e37ea6ce904ac8abd0df2f2-image-1493226906609.14.45 AM.png" style="width:150px"> koduna bas!
      CSDU2 - Type Anything_2019: |-
        <img src="https://images.code.org/12ffe6980a25a3664eabe69be487a921-image-1485384422334.jpg" style="width:400px; float:right">
        # Web Laboratuvarına Hoşgeldiniz!

        Şuan kullandığınız platforma Web Lab deniyor.Web Lab'da ekranın 3 ana parçası vardır.

        # Şunu Yap

        \-Çalışma alanına bir şey yazmayı dene.
        \-Önizleme alanında görmek için <img src="https://images.code.org/678619085e37ea6ce904ac8abd0df2f2-image-1493226906609.14.45 AM.png" style="width:150px"> koduna bas!
      CSDU4 - Design Mode - 15: "# Design Mode\n\nWelcome to Design Mode in AppLab!
        This will allow you to easily create a digital version of your sketched wireframes
        by adding UI elements from the toolbox and and styling them the way you want!\n\n**Goal:**
        Add a large red button to your app using Design Mode.\n\n# Do This:\n\n-   **Find
        <img src=\"https://images.code.org/278f146396c80c97d0b5d73f24d48aec-image-1444335461720.png\">
        in the Design Toolbox** and drag out a button and resize it. \n\n-   **Change
        the button text** to say \"Click Me\".\n\n-   **Set the color for the button**
        to be red.\n\n<img src=\"https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif\"
        style=\"width: 500px; float: middle\">"
      CSDU4 - Design Mode - 16: |-
        # Activate Your Button

        In the last lesson you focused on laying out a page of your app in Design Mode. This is a great, quick way to get the visual side of an app figured out, but it's not very functional. If you click any of the buttons you added, nothing happens. Now you're work towards adding some basic functionality by making the buttons in your app actually _do_ something!

        **Goal:** Add code using Design Mode to make the button respond to a click.

        # Do This

        Your starter app has two elements, a _label_ with the id `titleLabel` and a _button_ with the id `changeTitleButton`. To start with, you're going to make the button log a message to the console when it's clicked.

        -   In Design Mode, **click on the provided button to edit its properties**
        -   Click on the **Events** tab
        -   Insert an `onEvent` from Design Mode by clicking **Insert and show code** under the **Events Tab**.
        -   Take a look at the block that was added to the **Code Mode** tab.
        -   Run the program, click your button and **look for the output in the _Debug Console_** below the workspace instead of the app window. We will discuss the _Debug Console_ on the next level.
      CSDU4 - Design Mode - 17: |-
        # Updating IDs and Debugging with Console Log

        Here we have a couple buttons with event handlers and `console.log` statements, but they are all switched around!

        We should have given the buttons better ID names so we could tell the difference based on the ID. **Can you update the ID names and `console.log` messages to match the correct button?**

        # Do This

        -   **Change the IDs** of the buttons in Design Mode to more descriptive names.

        -   Switch to Code Mode and notice that the **ID pulldowns have been updated to include the new IDs**. (You still need to select the correct ID from the pulldown menu.)

        -   **Update the `console.log` messages** to match the buttons.
      CSDU4 - Design Mode - 18: "# Layering and Deleting\n\n<img src=\"https://images.code.org/9e620f70869de438c4f0c66663686876-image-1444678130772.gif\"
        style=\"width: 200px; float: right\">User interface elements can overlap one
        another, so you'll want the ability to change the order or **depth** at which
        each one is rendered. \n\nIf you **scroll to the bottom of the Properties
        tab** you'll find buttons which allow you to easily **delete or change the
        depth** of an element.\n\n-   **Delete an Element** by selecting it (clicking
        on it) in the design view and then clicking **Delete** in the properties tab.\n-
        \  **Change the depth** of elements by using the double or single arrows.\n
        \   -   Click the double arrow to send all the way to front or back.\n    -
        \  Click the single arrow to move up or down one layer.\n\n# Do This:\n\nUse
        the **delete** and **depth** tools to **create the \"After\" image**\n\n<table>\n<tr>\n\t<th
        style=\"text-align:center\">Before</th>\n    <th style=\"text-align:center\">After</th>\n</tr>\n<tr>\n\t<td
        align=center><img src=\"https://images.code.org/023f749ecb58c91869a4eacab6701203-image-1444685187662.png\"
        style=\"width:200px ; border: solid 1px black\"></td>\n    <td style=\"text-align:center\"><img
        src=\"https://images.code.org/e45fc7d451c071683fd3b59466b106b0-image-1444684677212.png\"
        style=\"width:200px; border: solid 1px black\"></td>\n</tr>\n</table>"
      CSDU4 - Design Mode - 19: "# Second Screen\n\nMost apps have more than one screen
        or page that each have different contents. With Design Mode you can quickly
        add new screen to your app.\n\n# Do This\n\nYou're going to add a second screen
        to your app and add a button to that screen. Make sure you're using good IDs!\n\n-
        \  Drag out <img src=\"https://images.code.org/4337b39cfd797ed9289b70fb6cb365fb-image-1444353631083.17.39
        PM.png\" style=\"width: 50px\"> from the Design Toolbox into your app. You
        now have two screens!\n-   Using Design Mode create a button in your new screen.
        \ <img src=\"https://images.code.org/bbf464e2fc94bacba39407d6842f2336-image-1478300698068.04.35
        PM.png\" style=\"width: 150px\"> \n-   Set the IDs for your screens and buttons
        to something meaningful, for example _\"homeScreen\"_, _\"detailsScreen\"_,
        _\"homeButton\"_, and _\"detailsButton\"_\n\nYou can always use the screen
        dropdown menu at the top of the app window to switch between your screens
        <img src=\"https://images.code.org/404e0b3f520a413c8a5e62e74b70bb19-image-1478300388689.58.59
        PM.png\" style=\"width: 150px\"> "
      CSDU4 - Design Mode - 20: |-
        # Switching Screens

        You can set which screen is showing in your app with the `setScreen()` command. If you're working in blocks you can select which screen you want to switch to from a dropdown.

        ![](<https://images.code.org/615fae136488e1e6d1349e4383388e08-image-1478303858022.13.25 PM.png>)

        # Do This

        You'll use an `onEvent()` block with `setScreen()` to make the two buttons in your app switch between the two screen.

        -   Drag out two `onEvent()` blocks
        -   Set the IDs for your `onEvent()` blocks for each of your two buttons
        -   Place a `setScreen` block inside each of the `onEvent` blocks.
        -   Choose the appropriate screen from the dropdown of each `setScreen` block.
        -   Test out your app to make sure your buttons let you switch back and forth between the two screens
      CSDU4 - Design Mode - 21: "# Adding Images\n\nSometimes the functionality you
        want to represent in your prototype is too complicated to do with just the
        default buttons and fields. If you want to mock up more advanced interfaces
        (like a map), the easiest way to do it is with an image\n\n# Do This\n\n-
        \  Find and download an image of a map you like\n-   Drag an image element
        into your app ![](<https://images.code.org/cda02ffe3acc869822a551f5cdbf8606-image-1444667846363.37.14
        AM.png>)\n-   Choose your image ![](<https://images.code.org/e5b9571ae54af60a3ae597b787e741ea-image-1444667688762.34.42
        AM.png>)\n    -   **URLs** can be added directly into the \"picture\" field.
        \ \n    -   **Upload images** by clicking \"Choose\".\n    -   **Note:** You
        can always see all the files you've uploaded by clicking the gear at the top
        of the toolbox. ![](<https://images.code.org/53b405b771bc11bf5d24c84c878c80dd-image-1444668067826.35.10
        AM.png>)\n-   Make sure to give your image a good ID!"
      CSDU4 - Design Mode - 3: |-
        # How Do Events Work?

        Event-driven apps are made up of elements that can trigger events (such as buttons) and pieces of code called **event handlers**. Event handlers are commands that "watch" for certain events to occur in your program, and then run some function when an event occurs.

        When you first create an event handler from Design Mode, puts a `console.log()` block inside to help you test the event, but you can put just about any code you want inside the event hander.

        # Do This

        The toolbox has a new block called `setText` which allows you to change the text of an element on the screen. You're going to modify the button event handler so that it changes the title text when clicked.

        -   Drag out a `setText()` block to the _inside_ of the `onEvent()` callback function (where the `console.log()` block currently is)
        -   From the block's dropdown, select "titleLabel" (the id of the element you want to change)
        -   In the block's second input, replace "text" with a new title for the app
        -   Run your program and click the button to see it work
      CSDU4 - Design Mode - 4: |-
        # IDs

        The `id` (we'll typically write **ID**) is a **unique identifier** used for each element in the app.

        Each element that appears in the app must have a **unique ID**. In fact, if you try to run a program that has two buttons with same ID you will get a warning message in the console.

        # Do This

        While each element you drag out in Design Mode gets a default ID, they aren't really that helpful (like `button1` and `button2`), so you should get in the habit of creating your own IDs.

        -   Change the ID of your "click me" button to something useful (like `redButton`)
        -   Drag out a second button
        -   Make the second button blue and give it an ID of `blueButton`
      CSDU4 - Design Mode Icons: |-
        <img src="https://images.code.org/2b405319f597910b1563ae607958171c-image-1475866226306.49.51.png" style="width: 200px; float:right">

        # Icons

        Icons help users find the right functionality while also making your app feel more polished.

        # Do This

        Add a few icons to your app. For each icon:

        -   Drag out an image element
        -   Next to the "Picture" field click "Choose..."
        -   Click on the "Icons" tab and select one
        -   Make sure to give your image a good ID! (do we still need to say it?)
      CSDU4 Connecting Screens: |-
        # Navigating

        Once you start adding multiple screens to an app, you need to make sure that users can always get where they want to go. In the next two levels you'll learn how to make sure a user can always get back to the "homepage" of your app.

        # Do This

        Here's an app with four different pages, but only the "red" screen is linked so far. In this level you'll make the other two buttons take the user to the correct screen.

        -   Add two `onEvent()` blocks, one each for the "greenButton" and "blueButton"
        -   Use the `setScreen()` block to make each button switch to the appropriate screen
        -   Test your app to make sure both buttons work. For example, when you click the green button you should go to the green screen.
      CSDU4 Connecting Screens Getting Back: |-
        # Navigating Back

        Someone using your app can now get to each of the red, green, and blue pages, but they can't get back to the homepage. You can add buttons and event handlers of your own to help them do this.

        # Do This

        Create buttons and event handlers to help a user navigate back to the "home" screen

        -   Use Design Mode to create a button inside each of the "red", "green", and "blue" screens. Make sure to give them descriptive IDs.
        -   Back in your code drag in three `onEvent()` blocks, one for each of the three buttons you made.
        -   Inside each `onEvent()` block use the `setScreen()` block that switches back to your "home" screen.
        -   Test your app. You should now be able to navigate back to the home screen from each of the other three.
      CSDU4 Crowdsource App Demo: |-
        # Crowdsourcing

        Crowdsourcing apps allow multiple users to submit content for everyone to use (the _source_ of content is the _crowd_). This app is very similar to the list app, with the main difference being that the list app assumes a single user while this app allows all users to add to the same list and "like" submissions.

        This example uses a list of crowdsourced information for simplicity, but you could display any kind of information in many different formats. A crowdsourcing app could allow users to submit locations for display on a map, images to go into a gallery, or any number of other types of information.

        # Functionality Missing from this Prototype

        -   User's can't create accounts or profiles
        -   Submitted things aren't added to the list
        -   Clicking on the "like" icons don't change their state
      CSDU4 Crowdsource App Demo_2018: |-
        # Crowdsourcing

        Crowdsourcing apps allow multiple users to submit content for everyone to use (the _source_ of content is the _crowd_). This app is very similar to the list app, with the main difference being that the list app assumes a single user while this app allows all users to add to the same list and "like" submissions.

        This example uses a list of crowdsourced information for simplicity, but you could display any kind of information in many different formats. A crowdsourcing app could allow users to submit locations for display on a map, images to go into a gallery, or any number of other types of information.

        # Functionality Missing from this Prototype

        -   User's can't create accounts or profiles
        -   Submitted things aren't added to the list
        -   Clicking on the "like" icons don't change their state
      CSDU4 Crowdsource App Demo_2019: |-
        # Crowdsourcing

        Crowdsourcing apps allow multiple users to submit content for everyone to use (the _source_ of content is the _crowd_). This app is very similar to the list app, with the main difference being that the list app assumes a single user while this app allows all users to add to the same list and "like" submissions.

        This example uses a list of crowdsourced information for simplicity, but you could display any kind of information in many different formats. A crowdsourcing app could allow users to submit locations for display on a map, images to go into a gallery, or any number of other types of information.

        # Functionality Missing from this Prototype

        -   User's can't create accounts or profiles
        -   Submitted things aren't added to the list
        -   Clicking on the "like" icons don't change their state
      CSDU4 Decision App Demo: |-
        # Decision Maker

        Similar to the quiz app, a decision tree app asks the user a series of questions. The primary difference between the two is that a decision tree doesn't check for right or wrong answers, but instead attempts to give the user a suggestion or help them make a decision based on their answers.

        This simple decision maker asks only three questions,  but more advanced ones actually take the form of a tree as seen below:

        ![](https://images.code.org/aeadfca116011949855c169905ff89a3-image-1476823699500.png)

        Depending on the user's answer to each question, they're given a different page for the next question. This allows the app to gradually narrow down the decision one question at a time. This type of app can be really useful to help users understand complex processes - for example, you might introduce a recycling program by using a decision tree app to help users figure out which bin to sort items into - first asking what material it's made out of, then whether it is clean or not, and so on.

        # Functionality Missing from this Prototype

        -   Question buttons don't direct you to different screens
        -   The final screen doesn't give you a recommended decision
      CSDU4 Decision App Demo_2018: |-
        # Decision Maker

        Similar to the quiz app, a decision tree app asks the user a series of questions. The primary difference between the two is that a decision tree doesn't check for right or wrong answers, but instead attempts to give the user a suggestion or help them make a decision based on their answers.

        This simple decision maker asks only three questions,  but more advanced ones actually take the form of a tree as seen below:

        ![](https://images.code.org/aeadfca116011949855c169905ff89a3-image-1476823699500.png)

        Depending on the user's answer to each question, they're given a different page for the next question. This allows the app to gradually narrow down the decision one question at a time. This type of app can be really useful to help users understand complex processes - for example, you might introduce a recycling program by using a decision tree app to help users figure out which bin to sort items into - first asking what material it's made out of, then whether it is clean or not, and so on.

        # Functionality Missing from this Prototype

        -   Question buttons don't direct you to different screens
        -   The final screen doesn't give you a recommended decision
      CSDU4 Decision App Demo_2019: |-
        # Decision Maker

        Similar to the quiz app, a decision tree app asks the user a series of questions. The primary difference between the two is that a decision tree doesn't check for right or wrong answers, but instead attempts to give the user a suggestion or help them make a decision based on their answers.

        This simple decision maker asks only three questions,  but more advanced ones actually take the form of a tree as seen below:

        ![](https://images.code.org/aeadfca116011949855c169905ff89a3-image-1476823699500.png)

        Depending on the user's answer to each question, they're given a different page for the next question. This allows the app to gradually narrow down the decision one question at a time. This type of app can be really useful to help users understand complex processes - for example, you might introduce a recycling program by using a decision tree app to help users figure out which bin to sort items into - first asking what material it's made out of, then whether it is clean or not, and so on.

        # Functionality Missing from this Prototype

        -   Question buttons don't direct you to different screens
        -   The final screen doesn't give you a recommended decision
      CSDU4 Design Mode Video_2019: |-
        ## Questions to Consider

        -   Where in App Lab can you design the user interface of your app?
        -   What are some types of elements that you can add to your app?
      CSDU4 Functionality visible: |-
        # Controlling Visibility

        Earlier in this lesson, when we were proposing ways to simplify the quiz app, we mentioned that it was possible to show or hide design elements with code. App Lab has two functions that let you control the visibility of an element:

        -   `hideElement()` makes the specified element invisible
        -   `showElement()` makes the specified element visible

        # Do This

        The provided app has an image and two buttons.

        -   Attach an event handler to the "Hide" button that hides the image when clicked
        -   Attach an event handler to the "Show" button that shows the image when clicked
      CSDU4 List App Demo: |-
        # List Manager

        The list manager app allows user to keep track of the state of information and can be modified to serve many different purposes, such as checking in / out loaned items, tracking personal To Dos, or keeping track of where things are in a multi-step process.

        While this example focuses on a single list, more sophisticated list apps could allow the user to create multiple lists, or even move items between lists. This app also only keeps track of the name of an item and whether or not it is "Done," but it could be extended to track and organize any amount of information about the list items.

        # Functionality Missing from this Prototype

        -   Delete buttons don't actually delete items from the list
        -   Add screen doesn't actually add an item to the list
      CSDU4 List App Demo_2018: |-
        # List Manager

        The list manager app allows user to keep track of the state of information and can be modified to serve many different purposes, such as checking in / out loaned items, tracking personal To Dos, or keeping track of where things are in a multi-step process.

        While this example focuses on a single list, more sophisticated list apps could allow the user to create multiple lists, or even move items between lists. This app also only keeps track of the name of an item and whether or not it is "Done," but it could be extended to track and organize any amount of information about the list items.

        # Functionality Missing from this Prototype

        -   Delete buttons don't actually delete items from the list
        -   Add screen doesn't actually add an item to the list
      CSDU4 List App Demo_2019: |-
        # List Manager

        The list manager app allows user to keep track of the state of information and can be modified to serve many different purposes, such as checking in / out loaned items, tracking personal To Dos, or keeping track of where things are in a multi-step process.

        While this example focuses on a single list, more sophisticated list apps could allow the user to create multiple lists, or even move items between lists. This app also only keeps track of the name of an item and whether or not it is "Done," but it could be extended to track and organize any amount of information about the list items.

        # Functionality Missing from this Prototype

        -   Delete buttons don't actually delete items from the list
        -   Add screen doesn't actually add an item to the list
      CSDU4 Project Bug Feature: |-
        # Improving and Iterating

        You've put your app in front of users, gathered feedback, and identified bugs and new features - time to do something about it.

        # Do This

        Each team member is going to implement select features and bug fixes on their own version of the team's app. Start by selecting a sticky note from the **To Do** column of your team's chart and moving it to the **Doing** column. For each sticky you tackle:

        -   Add a comment to the top of your program describing the feature or bug fix you are implementing
        -   Work on your iteration until it works. Try to stay focused on only the single feature or bug that you've selected.
        -   When done, move your sticky to the **Done** column, pick a new one, and start the process over.
      CSDU4 Project Bug Feature_2018: |-
        # Improving and Iterating

        You've put your app in front of users, gathered feedback, and identified bugs and new features - time to do something about it.

        # Do This

        Each team member is going to implement select features and bug fixes on their own version of the team's app. Start by selecting a sticky note from the **To Do** column of your team's chart and moving it to the **Doing** column. For each sticky you tackle:

        -   Add a comment to the top of your program describing the feature or bug fix you are implementing
        -   Work on your iteration until it works. Try to stay focused on only the single feature or bug that you've selected.
        -   When done, move your sticky to the **Done** column, pick a new one, and start the process over.
      CSDU4 Project Bug Feature_2019: |-
        # Improving and Iterating

        You've put your app in front of users, gathered feedback, and identified bugs and new features - time to do something about it.

        # Do This

        Each team member is going to implement select features and bug fixes on their own version of the team's app. Start by selecting a sticky note from the **To Do** column of your team's chart and moving it to the **Doing** column. For each sticky you tackle:

        -   Add a comment to the top of your program describing the feature or bug fix you are implementing
        -   Work on your iteration until it works. Try to stay focused on only the single feature or bug that you've selected.
        -   When done, move your sticky to the **Done** column, pick a new one, and start the process over.
      CSDU4 Project Events: |-
        # Linking Screens

        With all of your screens in place you can start adding events that will change the screens. When you're done with this step you'll actually have an interactive prototype!

        # Do This

        For each screen of your app:

        -   Find all of the button IDs
        -   For each button, add an event handler that watches that ID
        -   In each event handler, use `setScreen()` to move the the right screen
        -   Test it all out!

        Depending on the number of screens and buttons your app has, this can be a pretty involved process. Make sure that you test your work often, using `console.log()` blocks to debug any strange behavior with your app. When you think you've got the whole thing working, compare your app with other members of your group to see if they work the same.
      CSDU4 Project Events_2018: |-
        # Linking Screens

        With all of your screens in place you can start adding events that will change the screens. When you're done with this step you'll actually have an interactive prototype!

        # Do This

        For each screen of your app:

        -   Find all of the button IDs
        -   For each button, add an event handler that watches that ID
        -   In each event handler, use `setScreen()` to move the the right screen
        -   Test it all out!

        Depending on the number of screens and buttons your app has, this can be a pretty involved process. Make sure that you test your work often, using `console.log()` blocks to debug any strange behavior with your app. When you think you've got the whole thing working, compare your app with other members of your group to see if they work the same.
      CSDU4 Project Events_2019: |-
        # Linking Screens

        With all of your screens in place you can start adding events that will change the screens. When you're done with this step you'll actually have an interactive prototype!

        # Do This

        For each screen of your app:

        -   Find all of the button IDs
        -   For each button, add an event handler that watches that ID
        -   In each event handler, use `setScreen()` to move the the right screen
        -   Test it all out!

        Depending on the number of screens and buttons your app has, this can be a pretty involved process. Make sure that you test your work often, using `console.log()` blocks to debug any strange behavior with your app. When you think you've got the whole thing working, compare your app with other members of your group to see if they work the same.
      CSDU4 Project Import: |-
        # Back To Your App

        Now that you've had some practice with importing screens, it's time to start working on your team's app.

        # Do This

        Each member of your team is going to create their own copy of the app, with all of the team members' screens imported in. This will be your copy of the app, and the copy that you will start to add code to in the next lesson.

        -   Collect all of the sharing urls for your team's pages
            -   You can find the share url by going back to the last level of the previous lesson, or by finding the screen in your [projects directory](/projects)
        -   Import each of the screens, one at a time
            -   If you run into an ID error with one of the screens, discuss the issue with the screen's creator so it can be fixed and imported
        -   Delete the default "screen1"
        -   Set the main screen as the default

        Don't worry about adding any code at this point; we'll get to that in the next level.
      CSDU4 Project Import_2018: |-
        # Back To Your App

        Now that you've had some practice with importing screens, it's time to start working on your team's app.

        # Do This

        Each member of your team is going to create their own copy of the app, with all of the team members' screens imported in. This will be your copy of the app, and the copy that you will start to add code to in the next lesson.  (Don't forget that you'll also need to import your own screen into this project.)

        -   Collect all of the sharing urls for your team's pages, **including your own**
            -   Each team member can find the share url for their own screen by going back to the last level of the previous lesson, or by finding the screen in their [projects directory](/projects)
        -   Import each of the screens, one at a time
            -   If you run into an ID error with one of the screens, discuss the issue with the screen's creator so it can be fixed and imported
        -   Delete the default "screen1"
        -   Set the main screen as the default

        Don't worry about adding any code at this point; we'll get to that in the next level.
      CSDU4 Project Import_2019: |-
        # Back To Your App

        Now that you've had some practice with importing screens, it's time to start working on your team's app.

        # Do This

        Each member of your team is going to create their own copy of the app, with all of the team members' screens imported in. This will be your copy of the app, and the copy that you will start to add code to in the next lesson.  (Don't forget that you'll also need to import your own screen into this project.)

        -   Collect all of the sharing urls for your team's pages, **including your own**
            -   Each team member can find the share url for their own screen by going back to the last level of the previous lesson, or by finding the screen in their [projects directory](/projects)
        -   Import each of the screens, one at a time
            -   If you run into an ID error with one of the screens, discuss the issue with the screen's creator so it can be fixed and imported
        -   Delete the default "screen1"
        -   Set the main screen as the default

        Don't worry about adding any code at this point; we'll get to that in the next level.
      CSDU4 Quiz App Demo: |-
        # Quiz Me

        A quiz app can be used to teach, or help reinforce, information important to your chosen topic.

        At its most basic, a quiz app is composed of a screen for each question with two or more buttons for multiple choice answers. Each button links to a page that either confirms that you were correct, or gives you information about why you were were wrong.

        More advanced quiz apps could include features such as:

        -   Different types of questions (such as matching, free response, or even interactive games)
        -   Randomizing the order of questions
        -   Changing the questions based on how we'll you're doing
        -   Providing a final score
        -   Incorporating study material

        # Functionality Missing from this Prototype

        -   Questions aren't actually checked for correctness
      CSDU4 Quiz App Demo_2018: |-
        # Quiz Me

        A quiz app can be used to teach, or help reinforce, information important to your chosen topic.

        At its most basic, a quiz app is composed of a screen for each question with two or more buttons for multiple choice answers. Each button links to a page that either confirms that you were correct, or gives you information about why you were were wrong.

        More advanced quiz apps could include features such as:

        -   Different types of questions (such as matching, free response, or even interactive games)
        -   Randomizing the order of questions
        -   Changing the questions based on how we'll you're doing
        -   Providing a final score
        -   Incorporating study material

        # Functionality Missing from this Prototype

        -   Questions aren't actually checked for correctness
      CSDU4 Quiz App Demo_2019: |-
        # Quiz Me

        A quiz app can be used to teach, or help reinforce, information important to your chosen topic.

        At its most basic, a quiz app is composed of a screen for each question with two or more buttons for multiple choice answers. Each button links to a page that either confirms that you were correct, or gives you information about why you were were wrong.

        More advanced quiz apps could include features such as:

        -   Different types of questions (such as matching, free response, or even interactive games)
        -   Randomizing the order of questions
        -   Changing the questions based on how we'll you're doing
        -   Providing a final score
        -   Incorporating study material

        # Functionality Missing from this Prototype

        -   Questions aren't actually checked for correctness
      CSDU6 - LED buttonL: "# Using Board Events\n\nRight now the LED turns on when
        the left button (`buttonL`) is pressed down. It should turn off when the right
        button (buttonR) is pressed down.\n\n<div style=\"float:right;\" markdown=1>
        \n\n![expandable](https://images.code.org/402489ec13fb6c6f38910829a9633ac3-image-1510874304220.png)
        \n\n</div>\n\n# Do this\n\n-   Add another `onBoardEvent()` block to turn
        the LED off when the right button is pressed down."
      CSDU6 - LED buttonL_2018: "# Using Board Events\n\nRight now the LED turns on
        when the left button (`buttonL`) is pressed down. It should turn off when
        the right button (buttonR) is pressed down.\n\n<div style=\"float:right;\"
        markdown=1> \n\n![expandable](https://images.code.org/402489ec13fb6c6f38910829a9633ac3-image-1510874304220.png)
        \n\n</div>\n\n# Do this\n\n-   Add another `onBoardEvent()` block to turn
        the LED off when the right button is pressed down."
      CSDU6 - LED buttonL_2019: "# Using Board Events\n\nRight now the LED turns on
        when the left button (`buttonL`) is pressed down. It should turn off when
        the right button (buttonR) is pressed down.\n\n<div style=\"float:right;\"
        markdown=1> \n\n![expandable](https://images.code.org/402489ec13fb6c6f38910829a9633ac3-image-1510874304220.png)
        \n\n</div>\n\n# Do this\n\n-   Add another `onBoardEvent()` block to turn
        the LED off when the right button is pressed down."
      CSDU6 - LED toggle buttonL up: |-
        # Other Board Events with the Buttons

        Instead of using the right button, you can make the LED turn off when the left button comes back up.

        # Do this

        -   Create an 'up' event for the left button.
        -   Add code to turn the LED off when the button pops back up.
      CSDU6 - LED toggle buttonL up_2018: |-
        # Other Board Events with the Buttons

        Instead of using the right button, you can make the LED turn off when the left button comes back up.

        # Do this

        -   Create an 'up' event for the left button.
        -   Add code to turn the LED off when the button pops back up.
      CSDU6 - LED toggle buttonL up_2019: |-
        # Other Board Events with the Buttons

        Instead of using the right button, you can make the LED turn off when the left button comes back up.

        # Do this

        -   Create an 'up' event for the left button.
        -   Add code to turn the LED off when the button pops back up.
      CSDU6 - UI and Inputs - dropdown setText: |-
        # setText and getText

        Often you will want to get the text of a UI Element and use it to set the text of another element on the screen. Can you get the text from the dropdown when the user picks a new input and use it to set the text of the "choiceDisplay" label.
      CSDU6 - UI and Inputs - get set with text input: |-
        # setText and getText

        You've seen how to use getText and setText already. Can you make this app get the text the user typed once they hit enter and show it in the text area at the bottom?

        _Tip: The "change" event is triggered when the user clicks "enter" in a field. Use an event handler for the text input watching for the "change" event._
      CSDU6 - UI and Inputs - getNumber: |-
        # getNumber

        **Starter Code:** This program creates a simple calculator but **there is something wrong with it. Try putting in 2 + 2.**

        We can fix this by using `getNumber()` instead of `getText()`. Can you fix the program by changing `getText()` to `getNumber()`?
      CSDU6 - UI and Inputs - getNumber practice: |-
        # getNumber

        **Starter Code:** The program tries to update the valueDisplay whenever the slider value changes but it always sets the value to 10.

        Can you use `getNumber()` to get the value of the slider and update the valueDisplay as it changes?
      CSDU6 - UI and Inputs - getText: |-
        # getText

        Try to set up an event handler that gets the text from the dropdown whenever a user selects a new item from the dropdown. You will need to use the getter `getText()`. Whenever you use a getter you should save it in a variable. Use `console.log()` to make sure it is working.
      CSDU6 - UI and Inputs - hide show: |-
        # Hide and Show

        It is a little weird that both buttons are on the screen at the same time. You don't need the stop alarm button until the alarm is on. Can you make the buttons only show when they are needed?

        -   You will want the stop alarm button to be hidden when the program starts. You can do this in design mode.

        Hint: When you click the trigger alarm button, you should change the text, hide the trigger alarm button, _and_ show the stop alarm button.
      CSDU6 - UI and Inputs - setProperty: |-
        # setProperty background-color

        Change the `background-color` of a button to a new random color each time it is clicked using `setProperty()`.
      CSDU6 - UI and Inputs - setProperty Image: "# setProperty image\n\n**Note:**
        This level starts in Design Mode.\n\nThere is an image element set up for
        you but it does not show when you leave Design Mode because it has not been
        told what image to display. \n\n-   Use the `setProperty()` command to set
        the image of the UI Image Element on the screen."
      CSDU6 - UI and Inputs - setProperty first level: |-
        # setProperty

        **Starter Code:** There is one call to `setProperty()` which sets the text-color to blue when you run the program.

        Can you add more calls to `setProperty()` that change other things about the text when you run the program? Try to change at least 3 more things.
      CSDU6 - UI and Inputs - setScreen: "# setScreen\n\nLets start with a setter
        you have used before `setScreen()`. \n\n-   Make the About Me button on the
        Home page go to the About Me page.\n-   Make the Back button on the About
        Me go to the Home page."
      CSDU6 - UI and Inputs - setText: |-
        # setText

        We are going to start making an alarm app. We have already set up an event handler for the "triggerAlarmButton" which will change the "statusLabel" text to ON when clicked. Can you make the stop alarm button change the text to OFF when clicked?
      CSDU6 - board event challenge_2018: |-
        # Challenge: Sound Board

        Check with your teacher before starting the challenge.

        Now that you know how to use board events, the buttons, switch, and the buzzer, try making a program that turns your board into a sound board when you press the buttons or flip the switch. Play around with the duration and frequencies of the sounds, and listen to how it turns out.
      CSDU6 - board event challenge_2019: |-
        # Challenge: Sound Board

        Check with your teacher before starting the challenge.

        Now that you know how to use board events, the buttons, switch, and the buzzer, try making a program that turns your board into a sound board when you press the buttons or flip the switch. Play around with the duration and frequencies of the sounds, and listen to how it turns out.
      CSDU6 - button LED prediction: Düşürmek için içerilen seviyeye bakın
      CSDU6 - button LED prediction_2018: Düşürmek için içerilen seviyeye bakın
      CSDU6 - button LED prediction_2019: Düşürmek için içerilen seviyeye bakın
      CSDU6 - button_LED_prediction: |-
        # Board Events

        The `onBoardEvent()` block allows you to start taking input from your Circuit Playground. Look at the program with a partner and discuss what you think it'll do. Once you've come up with an answer, click "Run" to check your answer.

        -   What will happen when you press the left button down?
      CSDU6 - button_LED_prediction_2018: |-
        # Board Events

        The `onBoardEvent()` block allows you to start taking input from your Circuit Playground. Look at the program with a partner and discuss what you think it'll do. Once you've come up with an answer, click "Run" to check your answer.

        -   What will happen when you press the left button down?
      CSDU6 - button_LED_prediction_2019: |-
        # Board Events

        The `onBoardEvent()` block allows you to start taking input from your Circuit Playground. Look at the program with a partner and discuss what you think it'll do. Once you've come up with an answer, click "Run" to check your answer.

        -   What will happen when you press the left button down?
      CSDU6 - buzzer duration: |-
        # Buzzer Duration

        As you've noticed, `buzzer.frequency()` has two parameters: frequency and duration. Both of these take a number as input.

        -   Frequency changes how the buzzer sounds. The bigger the number you give it, the higher the buzzer's sound will be.

        -   Duration determines how long the buzzer is going to play a sound for in milliseconds.

        For right now we're going to focus on duration, the second parameter.

        # Do this

        Try out a few things with duration:

        -   Change the duration of the buzzer to something longer than 100.
        -   Try setting the duration to 0, what happens?

        Run the program multiple times to see what happens before you move on.
      CSDU6 - buzzer duration buttons: |-
        # Buzzer and the Buttons

        This program should use the buttons to play long and short buzzes.

        # Do this

        -   Change the duration parameter of `buzzer.frequency` to make the left button play a long buzz, and the right button play a short buzz.
      CSDU6 - buzzer duration buttons_2018: |-
        # Buzzer and the Buttons

        This program should use the buttons to play long and short buzzes.

        # Do this

        -   Change the duration parameter of `buzzer.frequency` to make the left button play a long buzz, and the right button play a short buzz.
      CSDU6 - buzzer duration buttons_2019: |-
        # Buzzer and the Buttons

        This program should use the buttons to play long and short buzzes.

        # Do this

        -   Change the duration parameter of `buzzer.frequency` to make the left button play a long buzz, and the right button play a short buzz.
      CSDU6 - buzzer duration_2018: |-
        # Buzzer Duration

        As you've noticed, `buzzer.frequency()` has two parameters: frequency and duration. Both of these take a number as input.

        -   Frequency changes how the buzzer sounds. The bigger the number you give it, the higher the buzzer's sound will be.

        -   Duration determines how long the buzzer is going to play a sound for in milliseconds.

        For right now we're going to focus on duration, the second parameter.

        # Do this

        Try out a few things with duration:

        -   Change the duration of the buzzer to something longer than 100.
        -   Try setting the duration to 0, what happens?

        Run the program multiple times to see what happens before you move on.
      CSDU6 - buzzer duration_2019: |-
        # Buzzer Duration

        As you've noticed, `buzzer.frequency()` has two parameters: frequency and duration. Both of these take a number as input.

        -   Frequency changes how the buzzer sounds. The bigger the number you give it, the higher the buzzer's sound will be.

        -   Duration determines how long the buzzer is going to play a sound for in milliseconds.

        For right now we're going to focus on duration, the second parameter.

        # Do this

        Try out a few things with duration:

        -   Change the duration of the buzzer to something longer than 100.
        -   Try setting the duration to 0, what happens?

        Run the program multiple times to see what happens before you move on.
      CSDU6 - buzzer intro: |-
        # Using the Buzzer

        You can use the buzzer in a lot of different ways, but right now we're just going to use the `buzzer.frequency()`.

        # Do this

        -   Pull out a `buzzer.frequency()` block from the toolbox and play around with it. You'll notice it has two parameters, what happens when you change either, or both of those?
        -   Run the program and enjoy the music of your Circuit Playground.
      CSDU6 - buzzer intro_2018: |-
        # Using the Buzzer

        You can use the buzzer in a lot of different ways, but right now we're just going to use the `buzzer.frequency()`.

        # Do this

        -   Pull out a `buzzer.frequency()` block from the toolbox and play around with it. You'll notice it has two parameters, what happens when you change either, or both of those?
        -   Run the program and enjoy the music of your Circuit Playground.
      CSDU6 - buzzer intro_2019: |-
        # Using the Buzzer

        You can use the buzzer in a lot of different ways, but right now we're just going to use the `buzzer.frequency()`.

        # Do this

        -   Pull out a `buzzer.frequency()` block from the toolbox and play around with it. You'll notice it has two parameters, what happens when you change either, or both of those?
        -   Run the program and enjoy the music of your Circuit Playground.
      CSDU6 - final project 1: "# Kullanıcı Arayüzünü Tasarlama\\\r\n\n\\\r\nProgramını
        kodlamaktan endişelenmeden önce, kullanıcı arayüzünü yerleştirmek ile başlayalım.
        Tasarım görünümünde öge eklerken anlamlı birer ID verdiğinizden emin olun.
        O ögeye kodla ulaşmayı planlamasınız bile, açıklayıcı ID'lere sahip olduklarından
        emin olmanız programını daha okunabilir ve kolay programlanabilir yapmaya
        yardımcı olacaktır."
      CSDU6 - final project 1_2018: "# Kullanıcı Arayüzünü Tasarlama\\\r\n\n\\\r\nProgramını
        kodlamaktan endişelenmeden önce, kullanıcı arayüzünü yerleştirmek ile başlayalım.
        Tasarım görünümünde öge eklerken anlamlı birer ID verdiğinizden emin olun.
        O ögeye kodla ulaşmayı planlamasınız bile, açıklayıcı ID'lere sahip olduklarından
        emin olmanız programını daha okunabilir ve kolay programlanabilir yapmaya
        yardımcı olacaktır."
      CSDU6 - final project 1_2019: "# Kullanıcı Arayüzünü Tasarlama\\\r\n\n\\\r\nProgramını
        kodlamaktan endişelenmeden önce, kullanıcı arayüzünü yerleştirmek ile başlayalım.
        Tasarım görünümünde öge eklerken anlamlı birer ID verdiğinizden emin olun.
        O ögeye kodla ulaşmayı planlamasınız bile, açıklayıcı ID'lere sahip olduklarından
        emin olmanız programını daha okunabilir ve kolay programlanabilir yapmaya
        yardımcı olacaktır."
      CSDU6 - final project 2: "# Kullanıcı Arayüzünü Birbirine Bağlamak\\\r\n\n\\\r\nKullanıcı
        arayüzünü yerleştirmekle birlikte bu ögelerin olay yöneticilerini ekleyebilirsiniz.
        Bu noktada olaylarınızın sadece 'console.log()' komutunu içermesini isteyebilirsiniz
        - işlevsel kodları daha sonra ekleyebilirsiniz."
      CSDU6 - final project 2_2018: "# Kullanıcı Arayüzünü Birbirine Bağlamak\\\r\n\n\\\r\nKullanıcı
        arayüzünü yerleştirmekle birlikte bu ögelerin olay yöneticilerini ekleyebilirsiniz.
        Bu noktada olaylarınızın sadece 'console.log()' komutunu içermesini isteyebilirsiniz
        - işlevsel kodları daha sonra ekleyebilirsiniz."
      CSDU6 - final project 2_2019: "# Kullanıcı Arayüzünü Birbirine Bağlamak\\\r\n\n\\\r\nKullanıcı
        arayüzünü yerleştirmekle birlikte bu ögelerin olay yöneticilerini ekleyebilirsiniz.
        Bu noktada olaylarınızın sadece 'console.log()' komutunu içermesini isteyebilirsiniz
        - işlevsel kodları daha sonra ekleyebilirsiniz."
      CSDU6 - final project 3: "# Kart Giriş Olayları\\\r\n\n\\\r\nŞimdi karttan giriş
        alacak olayları ekleyebilirsiniz. Tekrar, olaylarının çalıştığı konusunda
        emin olmak için sadece 'console.log()' ifadelerini kullanmakta rahat ol."
      CSDU6 - final project 3_2018: "# Kart Giriş Olayları\\\r\n\n\\\r\nŞimdi karttan
        giriş alacak olayları ekleyebilirsiniz. Tekrar, olaylarının çalıştığı konusunda
        emin olmak için sadece 'console.log()' ifadelerini kullanmakta rahat ol."
      CSDU6 - final project 3_2019: "# Kart Giriş Olayları\\\r\n\n\\\r\nŞimdi karttan
        giriş alacak olayları ekleyebilirsiniz. Tekrar, olaylarının çalıştığı konusunda
        emin olmak için sadece 'console.log()' ifadelerini kullanmakta rahat ol."
      CSDU6 - final project 4: "# Fonksiyonlar\\\r\n\n\\\r\nProgramınızın her bir
        işlevi için fonksiyon oluşturun ve daha önceden oluşturduğunuz olay yöneticilerinden
        onları çağırın."
      CSDU6 - final project 4_2018: "# Fonksiyonlar\\\r\n\n\\\r\nProgramınızın her
        bir işlevi için fonksiyon oluşturun ve daha önceden oluşturduğunuz olay yöneticilerinden
        onları çağırın."
      CSDU6 - final project 4_2019: "# Fonksiyonlar\\\r\n\n\\\r\nProgramınızın her
        bir işlevi için fonksiyon oluşturun ve daha önceden oluşturduğunuz olay yöneticilerinden
        onları çağırın."
      CSDU6 - final project 5: "# Kart Çıkışı\\\r\n\n\\\r\nZaten yapamadıysanız, kullanışlı
        bilgileri kullanıcıya iletmek için kart üzerindeki bazı çıkış ögelerini kullanın."
      CSDU6 - final project 5_2018: "# Kart Çıkışı\\\r\n\n\\\r\nZaten yapamadıysanız,
        kullanışlı bilgileri kullanıcıya iletmek için kart üzerindeki bazı çıkış ögelerini
        kullanın."
      CSDU6 - final project 5_2019: "# Kart Çıkışı\\\r\n\n\\\r\nZaten yapamadıysanız,
        kullanışlı bilgileri kullanıcıya iletmek için kart üzerindeki bazı çıkış ögelerini
        kullanın."
      CSDU6 - final project 6: "# Son dokunuşlar\\\r \\\r son dokunuşları yaparak
        programınız harika bir hale getirebilirsniz."
      CSDU6 - final project 6_2018: "# Son dokunuşlar\\\r \\\r son dokunuşları yaparak
        programınız harika bir hale getirebilirsniz."
      CSDU6 - final project 6_2019: "# Son dokunuşlar\\\r \\\r son dokunuşları yaparak
        programınız harika bir hale getirebilirsniz."
      CSDU6 - lightswitch toggleswitch: |-
        # Using the Toggle Switch

        The toggle switch can flip in one of two positions: `open` and `close`.  This program uses it to make a light switch.  Right now it can only turn the light on.

        # Do this

        -   Create a new toggle switch event that is triggered when the switch is flipped to `close`.
        -   Add code so that when the toggle switch is flipped to `close` the light turns off.
      CSDU6 - lightswitch toggleswitch_2018: |-
        # Using the Toggle Switch

        The toggle switch can flip in one of two positions: `open` and `close`.  This program uses it to make a light switch.  Right now it can only turn the light on.

        # Do this

        -   Create a new toggle switch event that is triggered when the switch is flipped to `close`.
        -   Add code so that when the toggle switch is flipped to `close` the light turns off.
      CSDU6 - lightswitch toggleswitch_2019: |-
        # Using the Toggle Switch

        The toggle switch can flip in one of two positions: `open` and `close`.  This program uses it to make a light switch.  Right now it can only turn the light on.

        # Do this

        -   Create a new toggle switch event that is triggered when the switch is flipped to `close`.
        -   Add code so that when the toggle switch is flipped to `close` the light turns off.
      CSDU6 - sensors predict question: |-
        # Make a Prediction

        Read the code in this program and make a prediction below. What do you think this program will do when you run it? How is the user intended to interact with the board? You may need to blow onto the board to see the full range of this app.
      CSDU6 - sensors predict question_2018: |-
        # Make a Prediction

        Read the code in this program and make a prediction below. What do you think this program will do when you run it? How is the user intended to interact with the board? You may need to blow onto the board to see the full range of this app.
      CSDU6 - sensors predict question_2019: |-
        # Make a Prediction

        Read the code in this program and make a prediction below. What do you think this program will do when you run it? How is the user intended to interact with the board? You may need to blow onto the board to see the full range of this app.
      CSDU6 - toggle state LED prediction: Düşürmek için içerilen seviyeye bakın
      CSDU6 - toggle state LED prediction_2018: Düşürmek için içerilen seviyeye bakın
      CSDU6 - toggle state LED prediction_2019: Düşürmek için içerilen seviyeye bakın
      CSDU6 - toggleswitch state setProp: |-
        # State and the Toggle Switch

        This program tells you whether the toggle switch is opened or closed, but it needs the `toggleSwitch.isOpen` block to work.  `toggleSwitch.isOpen` is `true` if the switch is opened and `false` if the switch is closed.

        # Do this

        -   Complete the if-statement with the `toggleSwitch.isOpen` property.
        -   Run the program and press the left button, then flip the toggle switch and press the button again.
      CSDU6 - toggleswitch state setProp_2018: |-
        # State and the Toggle Switch

        This program tells you whether the toggle switch is opened or closed, but it needs the `toggleSwitch.isOpen` block to work.  `toggleSwitch.isOpen` is `true` if the switch is opened and `false` if the switch is closed.

        # Do this

        -   Complete the if-statement with the `toggleSwitch.isOpen` property.
        -   Run the program and press the left button, then flip the toggle switch and press the button again.
      CSDU6 - toggleswitch state setProp_2019: |-
        # State and the Toggle Switch

        This program tells you whether the toggle switch is opened or closed, but it needs the `toggleSwitch.isOpen` block to work.  `toggleSwitch.isOpen` is `true` if the switch is opened and `false` if the switch is closed.

        # Do this

        -   Complete the if-statement with the `toggleSwitch.isOpen` property.
        -   Run the program and press the left button, then flip the toggle switch and press the button again.
      CSDU6 AppLab Input 1: |-
        # Input in App Lab

        _You don't need to make any changes to the code here_

        Take a minute to read through the code and run the program. Discuss with a partner:

        1.  What is the source of input?
        2.  Where and how does the program check for input?
        3.  What does the program do when it gets the right input?
        4.  What is the program doing when there is no input?
      CSDU6 AppLab Input 1_2018: |-
        # Input in App Lab

        _You don't need to make any changes to the code here_

        Take a minute to read through the code and run the program. Discuss with a partner:

        1.  What is the source of input?
        2.  Where and how does the program check for input?
        3.  What does the program do when it gets the right input?
        4.  What is the program doing when there is no input?
      CSDU6 AppLab Input 1_2019: |-
        # Input in App Lab

        _You don't need to make any changes to the code here_

        Take a minute to read through the code and run the program. Discuss with a partner:

        1.  What is the source of input?
        2.  Where and how does the program check for input?
        3.  What does the program do when it gets the right input?
        4.  What is the program doing when there is no input?
      CSDU6 Circuit Playground Test: |-
        # Test Your Board

        This level is just a quick test to make sure your board is working. To run this test, do the following:

        1.  Plug your board into your computer with a USB cable
        2.  Click "Run"
        3.  Wait a few seconds for either a Success or Error screen to pop up
        4.  If your test was successful, move on to the next level. If not, try some of the troubleshooting steps

        ## Troubleshooting

        There are a number of things that could prevent your test from passing.

        1.  Try refreshing the page and running the test again (you should refresh the page for each of the following ideas as well)
        2.  Try connecting your board to a different USB port
        3.  Try a different USB cable. Some USB cables can only be used for charging, so make sure your cable supports data transfer!
        4.  Try a different board
        5.  Go to [studio.code.org/maker/setup](/maker/setup) to run a more detailed test
      CSDU6 Circuit Playground Test_2018: |-
        # Test Your Board

        This level is just a quick test to make sure your board is working. To run this test, do the following:

        1.  Plug your board into your computer with a USB cable
        2.  Click "Run"
        3.  Wait a few seconds for either a Success or Error screen to pop up
        4.  If your test was successful, move on to the next level. If not, try some of the troubleshooting steps

        ## Troubleshooting

        There are a number of things that could prevent your test from passing.

        1.  Try refreshing the page and running the test again (you should refresh the page for each of the following ideas as well)
        2.  Try connecting your board to a different USB port
        3.  Try a different USB cable. Some USB cables can only be used for charging, so make sure your cable supports data transfer!
        4.  Try a different board
        5.  Go to [studio.code.org/maker/setup](/maker/setup) to run a more detailed test
      CSDU6 Circuit Playground Test_2019: |-
        # Test Your Board

        This level is just a quick test to make sure your board is working. To run this test, do the following:

        1.  Plug your board into your computer with a USB cable
        2.  Click "Run"
        3.  Wait a few seconds for either a Success or Error screen to pop up
        4.  If your test was successful, move on to the next level. If not, try some of the troubleshooting steps

        ## Troubleshooting

        There are a number of things that could prevent your test from passing.

        1.  Try refreshing the page and running the test again (you should refresh the page for each of the following ideas as well)
        2.  Try connecting your board to a different USB port
        3.  Try a different USB cable. Some USB cables can only be used for charging, so make sure your cable supports data transfer!
        4.  Try a different board
        5.  Go to [studio.code.org/maker/setup](/maker/setup) to run a more detailed test
      CSDU6 GameLab Input 1: |-
        # Input in Game Lab

        _You don't need to make any changes to the code here_

        Take a minute to read through the code and run the program. Discuss with a partner:

        1.  What is the source of input?
        2.  Where and how does the program check for input?
        3.  What does the program do when it gets the correct input?
        4.  What is the program doing when there is no input?
      CSDU6 GameLab Input 1_2018: |-
        # Input in Game Lab

        _You don't need to make any changes to the code here_

        Take a minute to read through the code and run the program. Discuss with a partner:

        1.  What is the source of input?
        2.  Where and how does the program check for input?
        3.  What does the program do when it gets the correct input?
        4.  What is the program doing when there is no input?
      CSDU6 GameLab Input 1_2019: |-
        # Input in Game Lab

        _You don't need to make any changes to the code here_

        Take a minute to read through the code and run the program. Discuss with a partner:

        1.  What is the source of input?
        2.  Where and how does the program check for input?
        3.  What does the program do when it gets the correct input?
        4.  What is the program doing when there is no input?
      CSDU6 array index predict contained: |-
        # Predict

        The code below will display four things on the screen.  What do you think they will be?
      CSDU6 array index predict contained_2018: |-
        # Predict

        The code below will display four things on the screen.  What do you think they will be?
      CSDU6 array index predict contained_2019: |-
        # Predict

        The code below will display four things on the screen.  What do you think they will be?
      CSDU6 array select days: "# Bir Dizideki Nesnelere Erişmek\\\r\n\n\\\r\nBu\nprogram
        Devre Oyun Alanı'nı kullanır. Haftanın günlerinin bir dizisini oluşturur.
        Sol butona basıldığında, günü \"Salı\" olarak gösterir.\\\r\n\\\r\n\n# \n\nBunu
        Yap\\\r\n\\\r\n\n-   Sağ butona basıldığında günü \"Perşembe\" olarak gösteren
        bir kod ekleyin."
      CSDU6 array select days_2018: "# Bir Dizideki Nesnelere Erişmek\\\r\n\n\\\r\nBu\nprogram
        Devre Oyun Alanı'nı kullanır. Haftanın günlerinin bir dizisini oluşturur.
        Sol butona basıldığında, günü \"Salı\" olarak gösterir.\\\r\n\\\r\n\n# \n\nBunu
        Yap\\\r\n\\\r\n\n-   Sağ butona basıldığında günü \"Perşembe\" olarak gösteren
        bir kod ekleyin."
      CSDU6 array select days_2019: "# Bir Dizideki Nesnelere Erişmek\\\r\n\n\\\r\nBu\nprogram
        Devre Oyun Alanı'nı kullanır. Haftanın günlerinin bir dizisini oluşturur.
        Sol butona basıldığında, günü \"Salı\" olarak gösterir.\\\r\n\\\r\n\n# \n\nBunu
        Yap\\\r\n\\\r\n\n-   Sağ butona basıldığında günü \"Perşembe\" olarak gösteren
        bir kod ekleyin."
      CSDU6 arrays select rainbow: |-
        # Index Practice

        <img src="https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45 PM.png" style="width: 150px; float: right">

        **Starter code** has been provided that creates a list called `colors` and uses it to set the colors of the rectangles on the screen.  Unfortunately, the colors are out of order.

        # Do This

        -   Change the index numbers inside each selection block to make the rainbow appear as in the picture on the right.
      CSDU6 arrays select rainbow_2018: |-
        # Index Practice

        <img src="https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45 PM.png" style="width: 150px; float: right">

        **Starter code** has been provided that creates a list called `colors` and uses it to set the colors of the rectangles on the screen.  Unfortunately, the colors are out of order.

        # Do This

        -   Change the index numbers inside each selection block to make the rainbow appear as in the picture on the right.
      CSDU6 arrays select rainbow_2019: |-
        # Index Practice

        <img src="https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45 PM.png" style="width: 150px; float: right">

        **Starter code** has been provided that creates a list called `colors` and uses it to set the colors of the rectangles on the screen.  Unfortunately, the colors are out of order.

        # Do This

        -   Change the index numbers inside each selection block to make the rainbow appear as in the picture on the right.
      CSDU6 arrays select random: |-
        # Random Selection

        You can also select a random element in the list by using the `randomNumber` block instead of an index.  This program selects a random icon from a list and displays it on the screen when the left button is pressed.  Right now, the icons are always blue.

        # Do This

        -   Add code that will select a random color from the list and use that as the icon color.
      CSDU6 arrays select random_2018: |-
        # Random Selection

        You can also select a random element in the list by using the `randomNumber` block instead of an index.  This program selects a random icon from a list and displays it on the screen when the left button is pressed.  Right now, the icons are always blue.

        # Do This

        -   Add code that will select a random color from the list and use that as the icon color.
      CSDU6 arrays select random_2019: |-
        # Random Selection

        You can also select a random element in the list by using the `randomNumber` block instead of an index.  This program selects a random icon from a list and displays it on the screen when the left button is pressed.  Right now, the icons are always blue.

        # Do This

        -   Add code that will select a random color from the list and use that as the icon color.
      CSDU6 arrays select variable: |-
        # Using Variables

        This program is like the last one, but the icons should always match the colors (red heart, yellow star, green leaf, and blue water).  You can do this using the variable "myIndex", which will store the value of a random number so that it can be used to get the icon and the color from the same place on each list.

        # Do This

        -   Change the code so that both the icon and its color are chosen using the "myIndex" variable.
      CSDU6 arrays select variable_2018: |-
        # Using Variables

        This program is like the last one, but the icons should always match the colors (red heart, yellow star, green leaf, and blue water).  You can do this using the variable "myIndex", which will store the value of a random number so that it can be used to get the icon and the color from the same place on each list.

        # Do This

        -   Change the code so that both the icon and its color are chosen using the "myIndex" variable.
      CSDU6 arrays select variable_2019: |-
        # Using Variables

        This program is like the last one, but the icons should always match the colors (red heart, yellow star, green leaf, and blue water).  You can do this using the variable "myIndex", which will store the value of a random number so that it can be used to get the icon and the color from the same place on each list.

        # Do This

        -   Change the code so that both the icon and its color are chosen using the "myIndex" variable.
      CSDU6 buzzer 2d arrays_2018: |-
        # Challenge: 2D Arrays

        Arrays can hold all sorts of data, like numbers, strings, and even other arrays. When we put an array inside another, this becomes a 2D array. The `buzzer.playSong()` block can be used to play songs that sound more precise with 2D arrays.

        The structure that you've been using to play notes looks like this:

        `buzzer.playNotes( [array of notes to play] , tempo of the whole song);`

        The main difference with `buzzer.playSong()` is each element inside the `[array of notes to play]`, is an array with two elements: the note you want to play, and the duration of the note. Sometime you'll want a quarter note in your song, other times you'll want a full note, or maybe somewhere in between. A full song might look something like this:

        `buzzer.playSong([
          ["G3",0.25],
          ["C4",0.25],
          ["E4",0.25],
          ["G4",0.125],
          [null,0.375],
          ["E4",0.1875],
          ["G4",1]
        ], 120);`

        # Do this

        -   Use the `buzzer.playSong` block to make a different song.
        -   When you get comfortable with the structure, add more notes to the song.
      CSDU6 buzzer 2d arrays_2019: |-
        # Challenge: 2D Arrays

        Arrays can hold all sorts of data, like numbers, strings, and even other arrays. When we put an array inside another, this becomes a 2D array. The `buzzer.playSong()` block can be used to play songs that sound more precise with 2D arrays.

        The structure that you've been using to play notes looks like this:

        `buzzer.playNotes( [array of notes to play] , tempo of the whole song);`

        The main difference with `buzzer.playSong()` is each element inside the `[array of notes to play]`, is an array with two elements: the note you want to play, and the duration of the note. Sometime you'll want a quarter note in your song, other times you'll want a full note, or maybe somewhere in between. A full song might look something like this:

        `buzzer.playSong([
          ["G3",0.25],
          ["C4",0.25],
          ["E4",0.25],
          ["G4",0.125],
          [null,0.375],
          ["E4",0.1875],
          ["G4",1]
        ], 120);`

        # Do this

        -   Use the `buzzer.playSong` block to make a different song.
        -   When you get comfortable with the structure, add more notes to the song.
      CSDU6 buzzer.stop_2018: |-
        # Stopping the Music

        Sometimes you need to be able to stop the music when you want, like in the code below. Duration wasn't specified so now the note plays continuously. Luckily, the `buzzer.stop()` method is here to save your ears.

        # Do this

        -   Find a way to get the note to stop playing with `buzzer.stop()`.
        -   Celebrate your win over the endless note!
      CSDU6 buzzer.stop_2019: |-
        # Stopping the Music

        Sometimes you need to be able to stop the music when you want, like in the code below. Duration wasn't specified so now the note plays continuously. Luckily, the `buzzer.stop()` method is here to save your ears.

        # Do this

        -   Find a way to get the note to stop playing with `buzzer.stop()`.
        -   Celebrate your win over the endless note!
      CSDU6 circuit playground piano: "# Devre Piyanosu\\\r\n\n\\\r\nAşağıdaki\nkoda
        bakın. Kodu değiştirmeyeceksiniz ama onun ne yaptığını anlamaya \nçalışın.\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n\\\r\n\n-   Programı çalıştırın ve ekrandaki piyanoyu çalın."
      CSDU6 circuit playground piano_2018: "# Devre Piyanosu\\\r\n\n\\\r\nAşağıdaki\nkoda
        bakın. Kodu değiştirmeyeceksiniz ama onun ne yaptığını anlamaya \nçalışın.\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n\\\r\n\n-   Programı çalıştırın ve ekrandaki piyanoyu çalın."
      CSDU6 circuit playground piano_2019: "# Devre Piyanosu\\\r\n\n\\\r\nAşağıdaki\nkoda
        bakın. Kodu değiştirmeyeceksiniz ama onun ne yaptığını anlamaya \nçalışın.\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n\\\r\n\n-   Programı çalıştırın ve ekrandaki piyanoyu çalın."
      CSDU6 frequency creation: |-
        # Making the Buzzer Buzz

        Now that you can use the buzzer's frequency, try to make the buzzer play a high sound when the same button pops back up.

        # Do this

        -   Add another onBoardEvent block so the buzzer plays a high sound when the left button comes back **up**
      CSDU6 frequency creation_2018: |-
        # Making the Buzzer Buzz

        Now that you can use the buzzer's frequency, try to make the buzzer play a high sound when the same button pops back up.

        # Do this

        -   Add another onBoardEvent block so the buzzer plays a high sound when the left button comes back **up**
      CSDU6 frequency creation_2019: |-
        # Making the Buzzer Buzz

        Now that you can use the buzzer's frequency, try to make the buzzer play a high sound when the same button pops back up.

        # Do this

        -   Add another onBoardEvent block so the buzzer plays a high sound when the left button comes back **up**
      CSDU6 frequency modification: |-
        # Making the Buzzer Buzz

        The frequency of the buzzer determines how high or how low the buzzer will sound when it plays. The higher the number you give frequency, the higher the buzzer will sound.

        # Do this

        -   Right now the buzzer plays a high note when the left button is pressed. Make the buzzer play a low note instead.
      CSDU6 frequency modification_2018: |-
        # Making the Buzzer Buzz

        The frequency of the buzzer determines how high or how low the buzzer will sound when it plays. The higher the number you give frequency, the higher the buzzer will sound.

        # Do this

        -   Right now the buzzer plays a high note when the left button is pressed. Make the buzzer play a low note instead.
      CSDU6 frequency modification_2019: |-
        # Making the Buzzer Buzz

        The frequency of the buzzer determines how high or how low the buzzer will sound when it plays. The higher the number you give frequency, the higher the buzzer will sound.

        # Do this

        -   Right now the buzzer plays a high note when the left button is pressed. Make the buzzer play a low note instead.
      CSDU6 making new arrays: |-
        # Making New Arrays

        You know how to change arrays, now it's time for you to make your own.

        # Do this

        -   Make a new array with whatever notes you want. They can be in different octaves, arranged in a certain key, etc. Anything you want!
        -   Have the buzzer play a random note from your array when the **right** button is pressed.
      CSDU6 making new arrays_2018: |-
        # Making New Arrays

        You know how to change arrays, now it's time for you to make your own.

        # Do this

        -   Make a new array with whatever notes you want. They can be in different octaves, arranged in a certain key, etc. Anything you want!
        -   Have the buzzer play a random note from your array when the **right** button is pressed.
      CSDU6 making new arrays_2019: |-
        # Making New Arrays

        Now that you can change arrays, it's time for you to make your own.

        # Do this

        -   Make a new array with whatever notes you want. They can be in different octaves, arranged in a certain key, etc. Anything you want!
        -   Have the buzzer play a random note from your array when the **right** button is pressed.
      CSDU6 piano with notes: |-
        # Piano Notes

        This is the same piano that you saw at the beginning of the lesson, but there are some bugs!

        # Do this

        -   Edit the code so that all keys are using a `buzzer.note()` block to play the corresponding note.
        -   Make sure that all the values passed in to `buzzer.note()` are notes, and not frequencies.

        _Hint: Remember to put quotes around the notes! e.g `buzzer.note("A4", 100);`_
      CSDU6 piano with notes_2018: |-
        # Piano Notes

        This is the same piano that you saw at the beginning of the lesson, but there are some bugs!

        # Do this

        -   Edit the code so that all keys are using a `buzzer.note()` block to play the corresponding note.
        -   Make sure that all the values passed in to `buzzer.note()` are notes, and not frequencies.

        _Hint: Remember to put quotes around the notes! e.g `buzzer.note("A4", 100);`_
      CSDU6 piano with notes_2019: |-
        # Piano Notes

        This is the same piano that you saw at the beginning of the lesson, but there are some bugs!

        # Do this

        -   Edit the code so that all keys are using a `buzzer.note()` block to play the corresponding note.
        -   Make sure that all the values passed in to `buzzer.note()` are notes, and not frequencies.

        _Hint: Remember to put quotes around the notes! e.g `buzzer.note("A4", 100);`_
      CSDU6 play null notes: |-
        # Null Notes

        You may have noticed that if you put the same note side-by-side in the array, the buzzer just plays that note as one long sound instead of as individual notes. In music we often want a break (or _rest_) between notes. You can get your buzzer to play a rest by sending it the value `null`.

        `null` is a special value that represents emptiness in computer science. `playNotes` plays each note for the same duration, so a `null` element in the array is just telling `playNotes` to play nothing for the same duration as everything else.

        # Do this

        -   Run the code to hear what it sounds like first.
        -   Examine the array inside `buzzer.playNotes()`.
        -   Put a pause between notes that are the same and side-by-side, and any other place you deem appropriate.

        _Tip: `null` references a value, just like a variable name. Make sure you don't put it in quotation marks!_
      CSDU6 play null notes_2018: |-
        # Null Notes

        You may have noticed that if you put the same note side-by-side in the array, the buzzer just plays that note as one long sound instead of as individual notes. In music we often want a break (or _rest_) between notes. You can get your buzzer to play a rest by sending it the value `null`.

        `null` is a special value that represents emptiness in computer science. `playNotes` plays each note for the same duration, so a `null` element in the array is just telling `playNotes` to play nothing for the same duration as everything else.

        # Do this

        -   Run the code to hear what it sounds like first.
        -   Examine the array inside `buzzer.playNotes()`.
        -   Put a pause between notes that are the same and side-by-side, and any other place you deem appropriate.

        _Tip: `null` references a value, just like a variable name. Make sure you don't put it in quotation marks!_
      CSDU6 play null notes_2019: |-
        # Null Notes

        You may have noticed that if you put the same note side-by-side in the array, the buzzer just plays that note as one long sound instead of as individual notes. In music we often want a break (or _rest_) between notes. You can get your buzzer to play a rest by sending it the value `null`.

        `null` is a special value that represents emptiness in computer science. `playNotes` plays each note for the same duration, so a `null` element in the array is just telling `playNotes` to play nothing for the same duration as everything else.

        # Do this

        -   Run the code to hear what it sounds like first.
        -   Examine the array inside `buzzer.playNotes()`.
        -   Put a pause between notes that are the same and side-by-side, and any other place you deem appropriate.

        _Tip: `null` references a value, just like a variable name. Make sure you don't put it in quotation marks!_
      CSDU6 play predict code: Markdown is in contained level
      CSDU6 play predict code_2018: Markdown is in contained level
      CSDU6 play predict code_2019: Markdown is in contained level
      CSDU6 play predict markdown: |-
        # Make a Prediction

        Look at the code below. What do you think it's going to do?

        Give it a guess and run the code to find out!
      CSDU6 play predict markdown_2018: |-
        # Make a Prediction

        Look at the code below. What do you think it's going to do?

        Give it a guess and run the code to find out!
      CSDU6 play predict markdown_2019: |-
        # Make a Prediction

        Look at the code below. What do you think it's going to do?

        Give it a guess and run the code to find out!
      CSDU6 play songs: |-
        # Making Songs

        You can make and play full songs with `buzzer.playNotes()`. It takes two parameters: an array of notes to play, and a tempo at which to play the notes. In previous bubbles you created arrays of notes and played through them randomly, but `buzzer.playNotes()` plays each note consecutively instead.

        # Do this

        -   Pull out a `buzzer.playNotes` block and change the starting array inside.
        -   Make sure the new array you give it has at least two pairs of notes that are next to each other in the list (Example: `["A5", "A5", "G4", "G4"]`)

        _Hint: Don't forget that you can always switch back and forth between block and text mode._
      CSDU6 play songs_2018: |-
        # Making Songs

        You can make and play full songs with `buzzer.playNotes()`. It takes two parameters: an array of notes to play, and a tempo at which to play the notes. In previous bubbles you created arrays of notes and played through them randomly, but `buzzer.playNotes()` plays each note consecutively instead.

        # Do this

        -   Pull out a `buzzer.playNotes` block and change the starting array inside.
        -   Make sure the new array you give it has at least two pairs of notes that are next to each other in the list (Example: `["A5", "A5", "G4", "G4"]`)

        _Hint: Don't forget that you can always switch back and forth between block and text mode._
      CSDU6 play songs_2019: |-
        # Making Songs

        You can make and play full songs with `buzzer.playNotes()`. It takes two parameters: an array of notes to play, and a tempo at which to play the notes. In previous bubbles you created arrays of notes and played through them randomly, but `buzzer.playNotes()` plays each note consecutively instead.

        # Do this

        -   Pull out a `buzzer.playNotes` block and change the starting array inside.
        -   Make sure the new array you give it has at least two pairs of notes that are next to each other in the list (Example: `["A5", "A5", "G4", "G4"]`)

        _Hint: Don't forget that you can always switch back and forth between block and text mode._
      CSDU6 toggle state prediction: "# More on the Toggle Switch\n\nYou can also
        check whether the toggle switch is in the `open` or `close` position anywhere
        in your program. \n\nWhat different things does the button do when the toggle
        switch is `open` or `close`?"
      CSDU6 toggle state prediction_2018: "# More on the Toggle Switch\n\nYou can
        also check whether the toggle switch is in the `open` or `close` position
        anywhere in your program. \n\nWhat different things does the button do when
        the toggle switch is `open` or `close`?"
      CSDU6 toggle state prediction_2019: "# More on the Toggle Switch\n\nYou can
        also check whether the toggle switch is in the `open` or `close` position
        anywhere in your program. \n\nWhat different things does the button do when
        the toggle switch is `open` or `close`?"
      Course 4 Artist 1: "Help me draw a box.\\\n(Each line is 200 pixels long) \n\n<br/><br/>"
      Course 4 Artist 10: "<img src=\"https://images.code.org/c876143212d195192013582f57c6df04-image-1445625392518.36.18.png\"
        width=\"150px;\" style=\"mix-blend-mode: multiply;\" />\n\n**Play time:**
        \ Here is the code for an interesting shape.   \n\nWhat happens when you repeat
        it multiple times, turning between each iteration?   \n\nNotice that the turns
        in this shape add up to _420 degrees_, which means that when your artist is
        done drawing, it will be facing a different direction than when you started.
        \ That new direction is exactly _60 degrees_ to the _right_ of where you began.\n\n<hr/>\n\n<h4>\n<details>\n<summary><b>Repeat
        4</b></summary>\n<br/>\n\nIf you want to come full circle in just 4 repetitions,
        you need the artist to turn a total of **360 degrees/4 = 90 degrees** each
        time.  You can do that by adding an extra `turn right by 30 degrees` block
        to the outer loop (since **60+30 = 90**.)\n\n<br/>\n<img src=\"https://images.code.org/9da67a628ed72e87520a02a0d917e2af-image-1440132370113.44.12.png\"
        width=\"500px;\" style=\"mix-blend-mode: multiply;\" />\n<br/><br/>\n</details>\n</h4>\n\n<h4>\n<details>\n<summary><b>Repeat
        6</b></summary>\n<br/>\n\nWhen you repeat the shape as-is 6 times, you get
        a total rotation of **6x60 degrees** which is a full **360 degree** cycle.\n\n<img
        src=\"https://images.code.org/b79f96b87097ce3afe8a6a5608d04e36-image-1440132287456.44.27.png\"
        \ width=\"500px;\"  style=\"mix-blend-mode: multiply;\" />\n</details>\n</h4>\n\n<h4>\n<details>\n<summary><b>Repeat
        12</b></summary>\n\n<br/>\n\nIf you want to repeat the image 12 times, you
        need the artist to turn a total of **360 degrees/12 = 30 degrees** each iteration.
        \ That means you will need to adjust the artist back a bit with `turn left
        by 30 degrees` before you repeat the shape again.\n\n<br/><br/>\n<img src=\"https://images.code.org/ad254952522674496918561096817c66-image-1440132424792.44.01.png\"
        width=\"500px;\" style=\"mix-blend-mode: multiply;\" />\n\n</details>\n</h4>\n\nNow
        it's your turn!  Can you recreate each image by repeating the starting shape?
        \ "
      Course 4 Artist 11: "<img src=\"https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png\"
        width=\"200px\"/> \\\r \\\r şimdi bir meydan okuma!  \\\r \\\r burada sadece
        gösterilmiş olan blokları kullanan bir tasarımdır.  Deneme yanılma kullanmaktan
        çekinmeyin. \\\r \\\r tekrarlanan şekilson Bulmaca ile aynı,  İlk döngüde
        kullanılan uzunluk biraz daha küçük. "
      Course 4 Artist 12: "<img src=\"https://images.code.org/70795d84048767ae7fb65883f476b27c-image-1440050836837.01.09.png\"\nwidth=\"250px\"/>\\\r\n\\\r\nSerbest
        ilham zamanı. Bu deseni oluşturmak için gerekli herşeyi öğrendin. Eğer bu
        resim ilham veriyorsa benzer birşeyler yapmaya çalış. Yoksa kendi tasarımını
        yap.\\\r"
      Course 4 Artist 13: Oynamaya devam ediyor musun? Burada istediğin şekilde bir
        şeyler yarata bileceğin boş tuval var!
      Course 4 Artist 2: |-
        Can you use a loop to draw the greyed out square?\
        (Each side is 300px long)
      Course 4 Artist 20: Oynamaya devam ediyor musun? Boş alana istediğin şekilde
        bir şeyler çizebilirsin!
      Course 4 Artist 3: Bu kodu çalıştırdığında ne olacak anlamaya çalış (Çalıştır
        tuşu ile test edebilirsin). Aynı kodu Tekrarla bloğu ile yeterince tekrarlayarak
        çizimi tamamla.
      Course 4 Artist 4: Dairede kaç derece var? Tekrarla  bloğu içini doldur ve renk
        çemberi oluşturun.
      Course 4 Artist 5: 'Simetrik olacak şekilde diğer yarısını çizin. Üçgenler eşkenar
        ve 50 piksel uzunluğunda. İpucu: Kullanmanız gereken bütün bloklara karar
        vermek için birkaç kez çalıştırmanız gerekebilir.'
      Course 4 Artist 6: Üç adet eşkenar üçgen çizmek için kodu tamamla.
      Course 4 Artist 7: 'Şimdi içiçe döngü ile 10 üçgen çiz. '
      Course 4 Artist 8: Bütün kodu döngüleyerek güneş çizebilr misin.
      Course 4 Artist 8a: Bu şekli hatırlıyor musun?  Şimdi herhangi bir blok vermeden
        sizin baştan oluşturmanıza izin vereceğiz!
      Course 4 Artist 9: "Bu tasarımı 10 kes tekrarlayın ve her çizimde dönmeyi unutmayın
        \\\r"
      Course 4 Artist Binary 1: "Bu fonksiyon 1 ve 0 dan oluşan ikili diziyi alır
        ve sanatçının bunu soldan sağa ve üstten alta  doğru uygulamasını sağlar.
        Sanatçı 1 görünce kareyi doldurur ve 0 görünce boş bırakır. \\\r\n\\\r\nBu
        kodu çalıştırın ve nasıl bir desen çizdiğini görün."
      Course 4 Artist Binary Free Play 2b: "<img src=\"https://images.code.org/0a30f23ff6138828d053267719d34fa8-image-1444435986654.00.22.png\"\nwidth=\"250px\"/>\\\r
        \\\r\nSerbest ilham zamanı. Bu deseni oluşturmak için gerekli herşeyi öğrendin.
        Eğer bu resim ilham veriyorsa benzer birşeyler yapmaya çalış. Yoksa kendi
        tasarımını yap.\\\r"
      Course 4 Artist Binary pre1: "İkili sadece iki seçeneği kullanarak bilgileri
        gösteren bir yoldur.  Burada,  \"kapalı\" seçeneğini (sayı 0 ile gösterilir)
        ve \"açık\" (sayı 1 ile gösterilir) seçeneğini kullanacağız.  \\\r \\\r  Yalnızca
        belirli kareleri üzerinde çevirerek tasarımlar yapmak için bir kılavuz ile
        sağladık.  \"01010101\" ikili diziyi ilk satırda çizebilr miyim?"
      Course 4 Artist For Loops 1: Use a repeat block to draw this triangle that is
        50 pixels wide.
      Course 4 Artist For Loops 11: 'Bir önceki aşamada şeklin kenar sayısını kontrol
        etmek için değişken kullanmıştık. Şimdi aynıo şeyi "sayaç" değişkeni ile yapacağız.
        Bu desen üçgen ile başlıyor ve her seferinde bir kenar daha ekleyerek ongen
        ile bitiyor. İpucu: 360 bölü kenar sayısı kaç derece dönmen gerektiğini verecektir.'
      Course 4 Artist For Loops 11a: "Hepsini biraraya koyalım. Kere tekrarla döngüsü
        ve sayaç kullanarak her seferinde iki fazla kenarı olan şekil çizin. \nBir
        miktar kod hazır olarak size verildi."
      Course 4 Artist For Loops 14: Eğer her seferinde biraz daha fazla yada az dönerseniz
        hoş bir etki oluşturur. Önceki seviyedeki aynı kodu kullanın fakat bu sefer
        89 derece dönün ve bu sarmal kareyi çizin.
      Course 4 Artist For Loops 15: 'Serbest oyun: Şununla say (for) döngüsü kullanarak
        kendi çizimini yap. Kullanışlı birkaç değişken ekledik.'
      Course 4 Artist For Loops 2: |-
        I've put the code for drawing a triangle inside a `for loop` that counts from 50 to 100 by 10.

        **NOTE:** Make sure you look at the code _before_ you hit "Run".
      Course 4 Artist For Loops 3: Son bulmaca bunu tamamlamak için bir başvuru olarak
        kullanın.  En küçük üçgenin 20 piksel kenarı vardır, en büyük 200 piksel kenarı
        vardır ve her üçgen öncekinden 20 piksel daha büyüktür.
      Course 4 Artist For Loops 4: 'Bu kareleri çizmek için nasıl değişiklikler yaparsın.
        15 piksel uzunluğunda kenarla başlar ve en büyüğü 300 piksel olan üçgenlerden
        oluşur. Her üçgen bir öncekinden 15 piksel daha büyük. '
      Course 4 Artist For Loops 6a: Bir önceki aşamadaki koda üç ufak değişiklik yaparak
        bu çizimi yapabilirsin!
      Course 4 Artist For Loops 8: |-
        Sadece küçük bir kod değişikliğiyle bu çizimi oluşturmak mümkün. Neyin değişeceğini görebildin mi?
        İpucu: Bir şeyleri çıkartman gerekiyor!
      Course 4 Artist For Loops Challenge: "\\*\\* Meydan okumna: \\*\\* Öğrendiğin
        şeyleri kullan ve  bu 40 piksel kenarları olan Çokgenleri oluştur.? \\\r \\\r
        bir spiral oluşturmak için çokgeni kapatamazsınız.  Bu demek oluyor ki her
        şeklin her zamankinden bir tane daha az tarafı olması gerekir."
      Course 4 Artist For Loops inspire: "<br/><br/>\\\r <img\nsrc=\"https://images.code.org/9b5897e059bb29bd2faf8504659a3cfc-image-1440719685627.49.33.png\"\nwidth=\"250px\"/>
        \\\r <br/><br/>\\\r\nSerbest ilham zamanı. Bu deseni oluşturmak için gerekli
        herşeyi öğrendin. Eğer bu resim ilham veriyorsa benzer birşeyler yapmaya çalış.
        Yoksa kendi tasarımını yap.\\\r."
      Course 4 Artist Functions Inspiration: "<img src=\"https://images.code.org/cf373e03bede480ae54aec72ce823454-image-1442951867535.54.11.png\"\nwidth=\"250px\"/>\\\r\n\nSerbest
        ilham zamanı. Bu deseni oluşturmak için gerekli herşeyi öğrendin. Eğer bu
        resim ilham veriyorsa benzer birşeyler yapmaya çalış. Yoksa kendi tasarımını
        yap.\\\r."
      Course 4 Artist Functions challenge: "<img src=\"https://images.code.org/69f1c2b415f907c86aaa6ed2534c3682-image-1442870371171.13.38.png\"
        width=\"250px\"/> \\\r \\\r \\*\\* meydan okuma düzeyi: \\*\\* Bu aşamada
        yukarıdaki çizimi yapmak için öğrendikleribi kullanın.  "
      Course 4 Artist Inspire: "<img src=\"https://images.code.org/b5e28b084cb331ee030ea3853ed921bd-image-1440060815818.51.21.png\"\nwidth=\"250px\"/>\\\r
        \\\r\nSerbest ilham zamanı. Bu deseni oluşturmak için gerekli herşeyi öğrendin.
        Eğer bu resim ilham veriyorsa benzer birşeyler yapmaya çalış. Yoksa kendi
        tasarımını yap.\\\r. "
      Course 4 Artist Vars 1: "Let's draw an equilateral triangle. \n\nIt has to be
        exactly 100 pixels long on each side.\n\n<br/>"
      Course 4 Artist Vars 11: "Burada son bulmacadaki ile aynı anlayışa sahip daha
        karışık kodlar var - Bu resmin karelerden oluşması için 'sides' değişkenini
        kaç yapmalısın?\\\r\n\\\r\n\n<p\nstyle=\"font-size:small; padding: 15px 15px
        15px 40px; background-color:#dcf3f3;\nborder-radius:10px;\">\r\n\\tTadını
        çıkar: Kalıba ne olduğunu görmek için bir kaç farklı sayı kullanarak dene!\r\n</p>"
      Course 4 Artist Vars 12: |-
        Let's set the `sides` variable to 5. The more sides we add to this algorithm, the bigger this whole pattern gets!

        Notice that there is another variable called `length`.
        We can now use that variable wherever we have a `move forward` block.

        Set the `length` variable to 75 for this shape.
      Course 4 Artist Vars 13: "Çok kenarlı bir şekilse şeklin ekrana sığması için
        kenarlarının daha kısa olması lazım.\nBu harika desen için algoritma oluşturalım.
        Length değişkenine sabit bir değer atayacağımıza sides değişkeni üzerinde
        işlem yapıp hesaplayalım. Çokgenin etrafı 300 piksel olmalı. "
      Course 4 Artist Vars 14: "Serbest oyun: Kontrol et! Şimdi algoritman bir döngüye
        daha sokulmuş. Değişkenlerinin değerlerini değiştirerek güzel bir şekil çizmeye
        çalış..\\\r\n\\\r\nDaha fazla etki için renklerle rastgele oynamayı dene."
      Course 4 Artist Vars 2: '"İleriye taşı 150" yerine "ileriye taşı" bloğu uzunluk
        "length" değişkeni kullanıyor. uzunluk "length" değişkenine 150 atayıp bu
        üçgeni çizebilir misin?'
      Course 4 Artist Vars 4: Şimdi iki kat geniş kadar uzun bir dikdörtgen yapmak
        istiyorum. Genişlik "width" değişkeninine 100 atanmış olması gerekiyor. Kodu
        tamamlayabilmek için matematik bloklarını kullanabilir misin?
      Course 4 Artist Vars 6: Düzenli bir poligon çizen bir kod parçası. Kenar "sides"
        değişkenine 4 atanmış. sides değişkenini ve matematik bloklarını kullanarak
        her bir çokgen de ne kadar döneceğini hesaplayabilir misin?
      Course 4 Artist Vars 7: Bir önceki bulmacada öğrendiklerini kullanarak ve kenar
        sayısı"sides" değişkenine değer atayarak altıgeni oluştur?
      Course 4 Artist Vars 8: "\\*\\* Serbestoyun: \\*\\* Bu şeklin kenar sayısını
        ile değiştirmeyi. Kenar sayisi ne olursa olsun eklin toplam çevre boyutunun
        ayni kalmasını sağlayabilir misin?"
      Course 4 Bee 1: "The bee can't tell what's under the cloud! \n\nUse the `if`
        block to check whether there is a flower under the cloud. \n\nGet nectar one
        time, **ONLY** if there is a flower."
      Course 4 Bee 2: Eğer/değilse bloklarını kullanarak nesnenin çiçek yada petek
        olduğunu kontrol et. Çiçek ise nektar al değilse bal yap!
      Course 4 Bee 3: Bilinmeyen nesne çiçek yada petek. B sefer eğer/değilse bloğunu
        kullanarak, eğer Çiçek ise nektar al değilse bal yap (çünkü bu durumda petektir).
      Course 4 Bee Params 1: '"3 nektar al" komutunu kullanarak nektarın tamamını
        toplamak için bir sıralama oluştur ki böylelikle döner, nektarları toplamak
        için ilerler ve ardından ilk konumuna geri döner.'
      Course 4 Bee Params 2: ' "3 nektar al" işlevini değiştirin ve sağa döneceğime
        sola dönmemi sağlayın.'
      Course 4 Bee Params 3: 'Şimdi her iki tarafta çiçekler var. Sol "Left" ve Sağ
        "Right" isimli iki değişken tanımladık. Ayrıca "Get 3 nectar" fonksiyonu için
        yön"direction" parametresi ekledik. Fonksiyonu güncelleyin ve arı left ve
        rigth değişkenine göre dönüp nektarı alsın.  '
      Course 4 Bee Params 5: Sıfırdan başlayalım - "5 nektar kazan" isminde ve yön
        parametreli bir fonksiyon yazabilir misin?
      Course 4 Bee Params 6: Bütün nektarları tek bir fonksiyonla alsak iyi olmaz
        mıydı? Nektar miktarı "nectars" parametresi ekleyerek toplanacak nektar miktarını
        kontrol edin. Fonksiyonun adını da değiştirebilirsiniz!
      Course 4 Bee Params 7: |-
        Try using your new function to collect all of this nectar.

        <br/>
      Course 4 Bee Params 8: Balda yapmak gerekiyor. Fonksiyonu değiştirerek parametre
        kadar nektar al yada bal yap şekline getir?
      Course 4 EC 1a: "\\*\\*Sana meydan okunuyor. İpucu yok. Haydi bakalım!"
      Course 4 EC 1b: "\\*\\*Sana meydan okunuyor. İpucu yok. Haydi bakalım!"
      Course 4 EC 2a: "\\*\\*Sana meydan okunuyor. İpucu yok. Haydi bakalım!"
      Course 4 EC 2b: "\\*\\*Sana meydan okunuyor. İpucu yok. Haydi bakalım!"
      Course 4 EC 2c: "\\*\\*Sana meydan okunuyor. İpucu yok. Haydi bakalım!"
      Course 4 Maze 4: '"Tekrar" bloğunu kullanarak daha az sayıda blokla bulmacayı
        çöz...'
      Course 4 Play Lab Params 1: Burada tanımlanan 'zıpla' (jump) fonksiyonu ana
        oyuncuyu 100 piksel zıplatıyor. Bu fonksiyonu kullan ve köpeği ok tuşlarıyla
        hareket ettirip bütün bayrakları toplamasını sağla.
      Course 4 Play Lab Params 10: |-
        We've added one last function for you.

        <hr/>

        Use an `if` statement to program your game to call the `level_up` function only when `player_score` becomes greater than a certain number.

        </h4>

        *For example: `player_score` > 6*

        <hr/>

        _Play the game, and make it to level 3 to move to the next puzzle._
      Course 4 Play Lab Params 2: |-
        Bizim atlayacağımızdan daha yüksek bayraklar var. Yukarı ve aşağı  ok tuşlarını kullanalım ve birden fazla seviye zıplama yapalım.
        Yükseklik "height" parametresini zıpla "jump" fonksiyonuna ekleyelim. Yukarı ok köpeğin 200 piksel, aşağı ok 100 piksel zıplamasını sağlasın.
      Course 4 Play Lab Params 3: 'Zıpla "Jump" fonkssiyonuna hangi oyuncunun zıplamasını
        belirten bir parametre daha ekledik. Her bir oyuncu bir sayı ile belirtiliyor.
        Düzenle ile fonksiyonu ilgili aktörün zıplamasını sağlayacak şekilde değiştir. '
      Course 4 Play Lab Params 4: "Here's a function called `patrol`. \n\nEdit `patrol`
        to move Cat up 400 pixels and then down 400 pixels."
      Course 4 Play Lab Params 5: Devriye "patrol" fonksiyonunu düzenle ve oyuncu
        "actor" parametresi ekle. Böylece her bir oyuncuyu için kullanabiliriz. Oyuncular
        1, 2, 3 diye numaralandırılmış.
      Course 4 Play Lab Params 6: Devriye "patrol" fonkisyonuna hız "speed" parametresi
        ekle. "ayarla hız" bloğunu kullanarak penguenin diğerlerinden önce her iki
        bayrağı almasını sağla.
      Course 4 Play Lab Params 7: Eğlence zamanı. kodu incele ve her bir bloğun ne
        yaptığına bak. bitirdiğinde ok tuşları ile köpeğin bütün bayrakları toplamasını
        sağla.
      Course 4 Play Lab Params 8: '"aktör zamanında dokunur" bloğunu kullan ve köpeği
        başka bir oyuncuya dokunursa sol üst köşeye gönder.'
      Course 4 Play Lab Params 9: |-
        Here's our game from an earlier stage but most of the code is hidden. We've added a new function called `score_points.`

        * * *

        #### Edit the function so that a new parameter called `points` is added to `player_score`.

        #### The variable `player_score` should increase each time Dog tags Cat with pie, and decrease each time that Cat tags Dog with a sandwich.

        * * *

        _Note: When you're done, click "Run" to play.  When Dog scores 6 points, you will move on to the next puzzle._
      Course 4 Play Lab Vars 1: Bu sefer kod yazman gerekmiyor. Sadece çalıştır düğmesine
        bas ve oyunu oyna! Bu oyunda köpek kediden fazla bayrak toplamak istiyor.
        aşağı tuşu ile köpeği kontrol et. Oyunun bitince bitiş tuşuna bas.
      Course 4 Play Lab Vars 2: Önceki oyundaki bulmaca adil değildi. dog\_speed değişkeni
        ile hızı değiştirerek köpeğin kediden fazla bayrak toplamasını sağla. Önce
        10 bayrak toplayan kazanır!
      Course 4 Play Lab Vars 3: "Here's a new kind of game! \n\nYou don't need to
        change anything on this level.\n\n**Directions:** Use the left and right arrows
        to move, and the up arrow to jump. See if you can collect all of the flags."
      Course 4 Play Lab Vars 4: 'Şimdi köpeğin atabileceği yüksekliği kontrol etmek
        için ''yükseklik'' adlı bir değişkeni kullanıyoruz. Köpeğin tüm bayraklara
        erişmek için yeterince yüksek atlayabilmesi için `height` değişkenini güncelleyin. '
      Course 4 Play Lab Vars 6: |-
        In our game, how should we score points?

        1.  Add 1 to your `points` variable each time Dog hits Cat with a piece of pie.

        2.  Use the `when actor 2 touches anything` event to trigger an update to your score. You can increment your variable by setting `points = points + 1.`

        3.  Get your score up to 10 to pass the level.

        **Note:** Use the right arrow to throw pie!
      Course 4 Play Lab Vars 7: "Güzel, şimdi bu oyunu oynamanın kolay olmadığından
        emin olalım! \\\r\n\\\r\nKöpek (aktör 1) Cat'den bir sandviç (aktör 2) tarafından
        vurulduğu zaman, bir noktayı kaybetmelisiniz.\\\r\n\\\r\n10 puanla başlayın,
        bu da zor değil. Seviyeyi geçmek için puanınızın 10'dan 0'a düşmesine izin
        verin."
      Course 4 Play Lab Vars 9: "Serbest Oyun Zamanı! İşte burada bu bölümde oynadığımız
        bütün değişkenlerle birlikte birkaç fazlalık var ihtiyacın olursa diye.\\\r\n\\\r\nŞu
        anda alet çantamızda düzenlenmesi gereken çok kare var olduğunun farkına varın!
        İşte, biz her parçayı uygun kategoriye koyduk. Mevcut olan her şeyi keşfetmeye
        biraz zaman ayırın. Göz atmayı bitirdiğinde, tekrarları, değişkenleri, ve
        olayları kullanarak bir oyun veya hikaye yapın.\\\r\n\\\r\nÇalışma alanındaki
        bütün komutları görmek için aşağı kaydırın."
      Course 4 Play Labs For Loops 1: Köpeğin 1 den 100 e kadar bütün sayıları saymasını
        sağlayalım. For döngüsü kullanalım ve köpek her döngüde sayaç "counter" değişkenini
        söylesin.
      Course 4 Playlab For Loop Freeplay: 'Serbest oyun: Öğrendiğin herşeyi kullan
        ve oyunu yapmak için for döngüsüde kullan!'
      Course 4 Playlab For Loops 4b: "Şimdi, bu iki karakter yarışa giriyor!  her
        biri sayaç kadar ilerleyecek, ama bunların sayaçları farklı değerde olacak
        \ \\\r \\\r döngülerden birisinin artışını değiştirerek yarışı berabere bitire
        bilirmisin?"
      Course 4 Playlab For Loops 5b: Yarıştaki aralığı ayarla ve iki karakterin aynı
        yere ulaşmasını sağla.
      Course 4 Playlab For Loops 6b: "Now we're going to use `for` loops in a whole
        different way!\n\nThis game gets hard quickly because the time between disappearances
        shrinks fast!\n\n<hr/>\n\n**Edit this `for` loop to create a game that's fun
        for you to play!**  \n\n<hr/>\n\nPress \"Run\" and click Madame Unicorn as
        many times as you can.  Can you beat our score of 24? "
      Course 4 SCF 1: 'Meydan Okuma: Önerilen fonksiyonları kullanarak 4 satır altıgen
        çiz. Çift sayılı satırların sağa kayık olduğuna dikkat edin?'
      Course 4 SCF 1a: "\\*\\* Fonksiyonlar süper meydan okuma: \\*\\* mümkün olan
        en az sayıda blok ile bu nektarları toplayabilr misin? \\\r"
      Course 4 SCF 1b: "**Functions Super Challenge:** Can you figure out how to collect
        all of this honey with the fewest blocks possible?"
      Course 4 SCF 2: 'Meydan Okuma: Bir önceki seviyede öğrendiklerini kullanarak
        bu görüntüyü çiz. Parametre kullanırsan kod daha basit hale gelir. '
      Course 4 SCF 3: "\\*\\* Fonksiyonlar süper meydan okuma: 1\\*\\*\n böyle resim
        çizmek için önceki düzeyde öğrendiklerini kullanın. \\\r \\\r \\* Not: kod
        parametreleri kullanarak daha basit hale gelir \\* \\\r \\\r <br/> \\\r <img
        src=\"https://images.code.org/d3d6a51fafdcc0a09a5c6b0e0f3c2b92-image-1446239805818.08.59.png\"
        width=\"300px\"/> \\\r <br/>  "
      Course 4 SCFL 1: "\\*\\* Şununla say döngüsü- süper meydan okuma: \\*\\* En
        az sayıda blok ile bu bulmacayı çöz. \\\r <br/> \\\r."
      Course 4 SCFL 1a: "\\*\\* Şununla say döngüsü- süper meydan okuma: \\*\\* En
        az sayıda blok ile buScaktı pslsmuta götür. \\\r <br/> \\\r"
      Course 4 SCFL 1b: "\\*\\* Şununla say döngüsü- süper meydan okuma: \\*\\* En
        az sayıda blok ile buScaktı pslsmuta götür. \\\r <br/> \\\r"
      Course 4 SCFL 2: |-
        **For-Loops Super Challenge:** Solve this puzzle with the fewest number of blocks possible.\
        <br/>
      Course 4 SCFL 3: "\\*\\*Şununla say döngüsü- süper meydan okuma: \\*\\* Bu çizimi
        yeniden nasıl oluşturabilirsin? \\\r \\\r <img src=\"https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png\"
        width=\"350px\"/> \\\r"
      Course 4 SCFL 4: "\\*\\*Şununla say döngüsü- süper meydan okuma: \\*\\* Bu çizimi
        yeniden nasıl oluşturabilirsin? \n<img src=\"https://images.code.org/407f502735beec686187451bdf67aada-image-1446002848700.59.34.png\"\nwidth=\"350px\"/>"
      Course 4 SCFL 6: "\\*\\*Şununla say döngüsü- süper meydan okuma: \\*\\* Bu çizimi
        bir döngü ile yeniden nasıl oluşturabilirsin? \n<img src=\"https://images.code.org/407f502735beec686187451bdf67aada-image-1446002848700.59.34.png\"\nwidth=\"350px\"/>"
      Course 4 SCFL 7: "\\*\\*Şununla say süper meydan okuma: \\*\\* sanatçı dalgaları
        yakalamak istiyor! Bu çizimi yeniden oluşturabilirmisin? \\\r \\\r <img src=\"https://images.code.org/fba3423f2e9a405d4d3859de32cdb0f3-image-1446102880655.13.36.png\"
        width=\"350px\"/>"
      Course 4 SCV 1: "<img src=\"https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png\"
        width=\"250px\"/> \\\r \\\r \\*\\* değişkenler Super Meydan Okuma: \\*\\*
        Şimdi böyle bir model yapmak için bilmeniz gereken her şeyi öğrendin! Bu bulmacanın
        zor olması gerekiyordu.  çözmek kiçin çabalayabilir misin?"
      Course 4 SCV 2: "<img src=\"https://images.code.org/85f0b27009edd86eff78692004b9ed52-image-1444712655590.02.32.png\"\nwidth=\"250px\"/>\\\r
        \\\r\\*\\* değişkenler Super Meydan Okuma: \\*\\* Şimdi böyle bir model yapmak
        için bilmeniz gereken her şeyi öğrendin! Bu bulmacanın zor olması gerekiyordu.
        \ çözmek kiçin çabalayabilir misin?"
      Course 4 SCV 3: |-
        **Variables Super Challenge:** You've now learned everything you need to know to solve this puzzle! This game is meant to be difficult.  Can you stick with it until you figure out the solution?

        * * *

        Now for a game of tag!  Tag Cat to get 2 points. Tag Penguin to get 3 points.  Get exactly 10 points to win!
        But be careful, when Cat and Penguin tag each other, they take points away.

        **Add the blocks necessary to make this game work the way it's been explained.**

        -   **How will you get Dog to move in all directions using the arrow keys?**
        -   **How will you add points when Dog tags Cat or Penguin?**
        -   **How will you subtract points when Cat and Penguin touch?**
      Course 4 SCV 4: "\\*\\* Değişkenler- süper meydan okuma: \\*\\* En az sayıda
        blok ile bu bulmacayı çöz. \\\r <br/> \\\r"
      Course 4 SCV 5: "\\*\\* Değişkenler- süper meydan okuma: \\*\\* En az sayıda
        blok ile bu bulmacayı çöz. \\\r <br/> \\\r"
      Course 4 SCV 6: "<img src=\"https://images.code.org/499fc71a0a06bacb68a9789ad57f8148-image-1445574373673.16.44.png\"\nwidth=\"250px\"/>\\\r
        \\\r\\*\\* değişkenler Super Meydan Okuma: \\*\\* Şimdi böyle bir model yapmak
        için bilmeniz gereken her şeyi öğrendin! Bu bulmacanın zor olması gerekiyordu.
        \ çözmek kiçin çabalayabilir misin?  "
      CourseD_Dance_Party_01: |-
        _Dans partisi yapalım!_

        İlk dansçınızı yaratmak için `yeni yap` bloğunu çalışma alanına sürükleyin ve `kurulum` bloğunun içine bağlayın.

        -   _Eğer daha fazla bilgi almak veya ek görevler istiyorsanız sol taraftaki ampüle tıklayın._
      CourseD_Dance_Party_02: |-
        Bu geyik dansını alalım!

        <xml><block type="Dancelab_changeMoveLR"><title name="SPRITE">new\_dancer</title><title name="MOVE" config="MOVES.Dab, MOVES.Drop, MOVES.Floss">Floss</title><title name="DIR">-1</title></block></xml> bloğunu çalışma alanına sürükleyin. <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">4</title><title name="UNIT">"measures"</title></block></xml> bloğunun altına bağlayın. Dansçınız dördüncü ölçüden sonra yeni bir harekete başlayacaktır.

        **Ölçüler** müziğin içindeki zamanı hesaplamak için kullanılır. Bu eğitimde bir ölçü dört vuruş uzunluğundadır.
      CourseD_Dance_Party_03: |-
        _Şimdi hareketleniyoruz!_

        Çalışma alanına bir <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">6</title><title name="UNIT">"measures"</title></block></xml> bloğu ekleyin. Dansçının 6 ölçü sonra yeni bir harekete başlamasını sağlayın.
      CourseD_Dance_Party_04: |-
        _Bu dansın biraz parıltıya ihtiyacı var!_

        Araç kutunuzda dansçınızın arkasına bir arka plan efekti ekleyecek yeni bir blok arayın. Efektin müzik ilerledikçe değişimini izleyin!
      CourseD_Dance_Party_05: |-
        Dansçının **her 2 ölçüde bir** hareket değiştirmesini sağlamak için başka bir yeni blok kullanın!

        -   `(İleri)`, `(Geri)`, veya `(Rastgele)` seçenekleri ile kod her çalıştığında dansçınıza farklı bir hareket yapma komutu verirsiniz.
      CourseD_Dance_Party_06: |-
        _Daha fazla dansçıya ihtiyacımız var!_

        Kediyle birlikte dans edecek `arkaplan_dansçısı1` isimli bir arka plan dansçısı yaratın.
      CourseD_Dance_Party_08: |-
        Her dansçının nasıl göründüğünü belirleyen bir _özellikler_ seti vardır.

        _boyut_ küçülterek bir dansçının arka planda dans eden bir dansçı gibi görünmesini sağlayabilirsiniz. İki arka plan dansçısını da aynı boyuta getirebilir misiniz?
      CourseD_Dance_Party_09: |-
        Dansçılar kendilerine yeni bir renk katmanı ekleyen bir "renk tonu" özelliğine sahiptir. Dansçılarınızdan birinin renk tonunu değiştirmeye çalışın.

        -   Renk tonu özelliği sayesinde seçtiğiniz renk ve dansçının rengi karışacaktır.
      CourseD_Dance_Party_10: |-
        Artık bir dansçının özelliklerinin nasıl değiştirildiğini biliyoruz. Ayrıca aynı özelliklerin bu bloğu kullanan müziğe otomatik olarak tepki vermelerini sağlayabiliriz.
        <xml>
        <block type="Dancelab_startMapping">

        <title name="SPRITE">right_pineapple</title>
        <title name="PROPERTY">"scale"</title>
        <title name="RANGE">"bass"</title>
        </block></xml>

        Bu program bir dansçının boyunun kontrolü için müziğin "bas" (düşük) seslerini kullanır. Diğer dansçıların da müziğe tepki vermesini sağlayabilir misiniz?
      CourseD_Dance_Party_11: |-
        <xml><block type="Dancelab_whenKey"></block></xml> bloğu yukarı oka basıldığında kodu çalıştırmanızı sağlar.

        Dans hareketini değiştirebilir, bir dansçının özelliklerini değiştirebilir ya da bir kereliğine hızlı bir hareket yapabilirsiniz. Yaratıcı olun ve yeni bloklar arayın!
      CourseD_Dance_Party_11_5: |-
        Bu bloğa bir bakın:

        <xml>
        <block type="Dancelab_makeNewDanceSpriteGroup">
        <title name="N">6</title>
        <title name="COSTUME">"DUCK"</title>
        <title name="LAYOUT">"circle"</title>
        </block></xml>

        Artık tek seferde birden çok dansçı yaratabilirsiniz!

        Tüm ördeklerin hep birlikte dans etmesini sağlayacak kodu yazmak için "tüm ördekler" bloklarının bazılarını kullanmayı deneyin.
      CourseD_Dance_Party_11b: Şimdi dans zamanı! Sol ok tuşuna bastığınızda Kedi
        dab dansı yapar. Sağ ok tuşuna bastığınızda Robota "drop" figürü yaptırırsınız.
      CourseD_Dance_Party_12: Havaya girin! Kendi dansınızı yaratın ve arkadaşlarınızla
        paylaşın.
      CourseE_HOC 2018 Level_1: Seni bekleyen yolculuk için malzemelere ihtiyacın
        var. **Sandık**tan ![](https://images.code.org/e0cf43fd36a50dd16ee06595047bfd8f-image-1538697999418.png)
        **sandalı** ![](https://images.code.org/0b3162de9dc0abf3e0890d315b8cc699-image-1538697977747.png)
        al.
      CourseE_HOC 2018 Level_10: Bir **kalamar** ![](https://images.code.org/82f305ab1cb4a9ff9044991a18edb16e-image-1538947827218.png)
        bu Okyanus Anıtı içinde bir yerlerde saklanıyor, onu bulabilir misin?
      CourseE_HOC 2018 Level_11: Siyah beton etrafına **prizmarin** ![](https://images.code.org/d110b8d13c01756fcdbef3768b2e2859-image-1538699770898.png)
        duvarı ör. Bu **su yolunu** ![](https://images.code.org/7773cf30f42e6727a23c8cb364d4664b-image-1538699800030.png)
        harekete geçirecek ve görevini tamamlayacak!
      CourseE_HOC 2018 Level_2: Sandalla gitmek açık suda yüzmekten çok daha kolay!
        Binmek için iskelenin sonuna git.
      CourseE_HOC 2018 Level_3: Kürekleri al ve **morinayı** ![](https://images.code.org/9b636884eefb1efe18f9f844e1e916a9-image-1538698597353.png)
        yakalamak için sandalını açık denize sür.
      CourseE_HOC 2018 Level_4: Hadi morinayla **yunus** ![](https://images.code.org/8c240fd4df4da2795ba7ca942b77a057-image-1538947890991.png)
        besleyelim. Okyanusu daha hızlı geçmek için bir tekrarla bloku kullan.
      CourseE_HOC 2018 Level_5: Orada bir yerlerde bir **notilus kabuğu** ![](https://images.code.org/2eb084fa0c718dee6ca4b6379381f735-image-1538698936660.png)
        saklanıyor! **Sandığa** ![](https://images.code.org/16cdd5779b38909d4bf47b29535c92b0-image-1538698950602.png)
        ulaşmak için gemi enkazını araştır.
      CourseE_HOC 2018 Level_6: Dışarısı buz gibi görünüyor! Su altı harabelerine
        giderken bir **somon** ![](https://images.code.org/c66eadf25b3cdfe20bbfdc91e2c28c94-image-1538699000102.png)
        yakala.
      CourseE_HOC 2018 Level_7a: Sualtı harabelerini buldun. **Prizmarin** ![](https://images.code.org/5f5ebe5121b8f9787d7dbd38ad0a86cc-image-1538699091018.png)
        hazinesi içeren **sandığı** ![](https://images.code.org/29a5fd76b869d755a60d39fbbb4057eb-image-1538699081910.png)
        bulmak için kumtaşını ara.
      CourseE_HOC 2018 Level_8: Önce buz dağları, şimdi de lav mı? Bu volkanik adayı
        geç ve mercan resifi içinde **tropikal balığı** ![](https://images.code.org/6d3293e7709cb1a43d9f7617fd0cc2b8-image-1538699180397.png)
        bul.
      CourseE_HOC 2018 Level_9b: Resife geldin, şimdi de **Denizin Kalbini** ![](https://images.code.org/3035926d2a37aa695b5d47413adcffa2-image-1538699398781.png)
        ara! Hazine **sandığına** ![](https://images.code.org/af697397dd70e5b6b93b00eb46c558af-image-1538699377397.png)
        ulaşmak için mavi ve kırmızı mercanları kullan.
      Crack Random Substitution: |-
        # Break a random substitution cipher!

        This version of the tool gives you more information about the encrypted text and more options for how to try out different substitutions.

        ### Different ways to analyze text

        -   Play with some of the sorting options available in the Random substitution cipher tab to get different views on the letter frequencies in the input text as well as standard English text.
            ![](https://images.code.org/82efbca1807206c9a07de520fdb22027-image-1443572614493.23.28.png)

        ### Different ways to substitute

        -   To substitute a letter you can drag a blue letter of the alphabet directly underneath the orange letter you want changed in the original ciphertext.
            ![](https://images.code.org/da9a7af7568d8c1698872ab91b4d79d7-image-1443572471212.gif)

        ### Play.  Always play.

        -   There are other ways to analyze and substitute characters that you can find by clicking on the buttons and trying out whatever you like.
        -   Remember: you can't break it :)

        See how long it takes you to crack the cipher! Is this a good method of encrypting secret data?

        <img src="http://code.org/api/hour/finish_encryption.png">
      Crack a Caesar Cipher: |-
        # Crack a Caesar cipher!

        This tool lets you play with text and do Caesar ciphers. You can use this to either encrypt a message or decrypt it.

        # Do this

        -   Load a **Sample message** from the message dropdown. This will load a message that has been encrypted with a Caesar cipher.

        ![](https://images.code.org/347139486c8c729bf3c6e72ce67da878-image-1476286380409.gif)

        -   Using the buttons in the Caesar substitution tab, you can shift the alphabet forwards or backwards to try to unscramble the message.

        ![](https://images.code.org/ef9ebc16d2f1442dc46fba9bd48b5d43-image-1476285966821.gif)

        See how long it takes you to crack the cipher! Is this a good method of encrypting secret data?

        <img src="http://code.org/api/hour/begin_encryption.png">
      Dance Party 1-validated: "**Make a prediction:** Here’s a sprite called `alien1`!
        \n\nWhat do you think will happen when you click on it?  "
      Dance Party 2: "The alien was proud of its dancing skills on Mars, but now it
        can only move side-to-side.  \n\nCan you change the behavior inside the <xml>
        <block type=\"gamelab_addBehaviorSimple\" inline=\"true\">\n      <value name=\"SPRITE\">\n
        \       <block type=\"sprite_variables_get\">\n          <title name=\"VAR\">alien1</title>\n
        \       </block>\n      </value>\n    </block></xml> block to make it start
        spinning around?  "
      Dance Party 2_2019: |-
        The alien was proud of its dancing skills on Mars, but now it can only move side-to-side.

        Replace the behavior block in <xml>
        <block type="gamelab_addBehaviorSimple" block-text="the sprite begins block">
                <value name="SPRITE">
                  <block type="gamelab_allSpritesWithAnimation">
                    <title name="ANIMATION">"blue alien"</title>
                  </block>
                </value>
              </block></xml> to a different one that will make the alien start spinning!
      Dance Party 3: "Create a new sprite called `alien2`.  \n\nMake it do a different
        dance move when it's clicked.  "
      Dance Party 3_2019: |-
        Create a new sprite that looks like a pink alien. <img src="https://levelbuilder-studio.code.org/media?u=https%3A%2F%2Flevelbuilder-studio.code.org%2Fapi%2Fv1%2Fanimation-library%2FecnW7rdKTB0fUrKRKrqIHbrHVvyWh5hu%2Fcategory_characters%2FalienPink.png" width="3%"></img>

        Make it do any move you want when it's clicked. Try using a new move this time!
      Dance Party 4: "Create a third sprite called `alien3`.  \n\nCan you set all
        of your aliens to stand in a straight line? It's an alien dance crew!"
      Dance Party 4_2019: "Form an alien dance crew! \n\n-   Create a third sprite
        that looks like a yellow alien, and make it begin a dance move when clicked.\n-
        \  Set all of your aliens to stand in a horizontal line, like this:\n\n![](https://images.code.org/09380fc01069e79d9d33a979379a666b-image-1555960752137.png)"
      Dance Party 5: "We can change all kinds of things in this program when you click
        on the sprites.  Let’s change their color!  \n\n**Add code to change the color
        of each alien when it gets clicked.**"
      Dance Party 5_2019: "<!-- We can change all kinds of things in this program
        when you click on the sprites. Add code to change the color of each alien
        when it gets clicked. -->\n\nLet's try using a different kind of event. \n\nCreate
        a single keypress event using <xml><block type=\"gamelab_keyPressed\" block-text=\"the
        keypress event block\"></block></xml>. \n\nFor this event, make it so that
        when a key is pressed, each of your aliens changes color! Choose any key you
        like, but if you are using a touch screen we recommend _up_, _down_, _left_,
        or _right_."
      Dance Party 6: "These aliens are running wild!  \n\nUse the <xml><block type=\"gamelab_removeAllBehaviors\"
        inline=\"true\">\n      <value name=\"SPRITE\"/>\n    </block></xml> block
        to make each alien stop moving when it is clicked."
      Dance Party 6_2019: |-
        These aliens are running wild! Let's calm them down by ringing a bell.

        First add a new sprite that looks like a bell.

        Then add an event that makes each alien stop dancing when the bell is clicked, using <xml><block type="gamelab_removeAllBehaviors" block-text="the stops everything block"><value name="SPRITE"><block type="gamelab_allSpritesWithAnimation"><title name="ANIMATION">"blue alien"</title></block></value></block></xml>!
      Dance Party 7: "Finally, add a new bell sprite called `myBell`.  \n\nWhen you
        click on it, make all the aliens start doing the same dance move!"
      Dance Party 7_2019: "For the pink alien, fun is contagious! Touching it makes
        anyone want to dance! \n\nUse <xml><block type=\"gamelab_checkTouching\" block-text=\"the
        when touching event block\"><title name=\"CONDITION\">\"when\"</title><value
        name=\"SPRITE1\"><block type=\"gamelab_allSpritesWithAnimation\"><title name=\"ANIMATION\">\"blue
        alien\"</title></block></value><value name=\"SPRITE2\"><block type=\"gamelab_allSpritesWithAnimation\"><title
        name=\"ANIMATION\">\"pink alien\"</title></block></value></block></xml> to
        make the blue alien begin a new dance move when the pink alien touches it."
      Dance Party Freeplay: |-
        Now create your own alien disco! Looking for inspiration? Try these ideas:

        -   Create two bell sprites, and make the aliens do a different dance move for each
        -   Make the aliens do a new dance move whenever they touch each other
      Dance Party Freeplay_2019: |-
        Now create your own alien disco! Looking for inspiration? Try these ideas:

        -   Create another alien that does another move when clicked.
        -   Make aliens do more dance moves when they touch each other.
      Dance Party Predict: "**Make a prediction:** Here’s a sprite called `alien1`!
        \  \n\nWhat do you think will happen when you click on it?  "
      Dance Party Predict_2019: "**Make a prediction:** Here’s a sprite that looks
        like a blue alien!   \n\nWhat do you think will happen when you click on it?
        \ "
      Dance_2019_01: '<xml><block type="Dancelab_makeAnonymousDanceSprite" block-text="make
        a new dancer"><title name="COSTUME" config="&quot;CAT&quot;, &quot;PINEAPPLE&quot;">"CAT"</title><title
        name="LOCATION">{x: 200, y: 200}</title></block></xml> bloğunu çalışma alanına
        sürükleyin ve <xml><block type="Dancelab_whenSetup2" next_connection_disabled="true"
        block-text="setup"></block></xml> bloğunun içine bağlayın. İlk dansçınızı
        oluşturmak için “kedi” veya “tembellik” seçeneğini seçin. - _Daha fazla bilgi
        veya ilave zorluklar istiyorsanız soldaki ampulü de tıklayabilirsiniz._'
      Dance_2019_02: <xml><block type="Dancelab_whenKey" block-text="when up pressed"></block></xml>
        bloğu, ok düğmelerine bastığınızda kod çalıştırmanıza izin verir. Kedi alkışlaması
        için <xml><block type="Dancelab_doMoveEachLR" block-text="do once"><title
        name="GROUP">"CAT"</title><title name="MOVE">MOVES.XClapSide</title><title
        name="DIR">-1</title></block></xml> bloğunu kullanın! _Çalıştır düğmesine
        tıkladıktan sonra "yukarı ok" tuşuna veya \[] [2] tuşuna bastığınızdan emin
        olun!_
      Dance_2019_03: Dansı bitirme zamanı! Her dansçıyı farklı tuşlara bastığınızda
        hareket etmesi için programlayın. Her dansçı için favori hareketini seçin
        ya da tamamen tahmin edilemeyecek bir şey için onu "(Rastgele)" olarak ayarlayın!
      Dance_2019_04: Dansçıların müzikle birlikte hareket etmesini sağlayalım!  <xml><block
        type="Dancelab_atTimestamp"><title name="TIMESTAMP">4</title><title name="UNIT">"measures"</title></block></xml>
        bloğunu araç kutusundan <xml><block type="Dancelab_changeMoveEachLR"><title
        name="GROUP">"SHARK"</title><title name="MOVE">MOVES.ThisOrThat</title><title
        name="DIR">-1</title></block></xml> bloğuna bağlayın.   Dansçınız dördüncü
        ölçütten sonra yeni bir hareket yapmalıdır.  **Ölçütler** müzikte zamanı saymak
        için kullanılır. Bu eğiticide, bir ölçüt dört atım uzunluğundadır.
      Dance_2019_05: |-
        _Şimdi hareketleniyoruz!_

        Çalışma alanına bir <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">6</title><title name="UNIT">"measures"</title></block></xml> bloğu ekleyin. Dansçının 6 ölçü sonra yeni bir harekete başlamasını sağlayın.
      Dance_2019_06: |-
        Ortada bir dansçı etrafında bir grup küçük yedek dansçı oluşturmak için bu yeni bloğu kullanın.     <xml><block type="Dancelab_makeNewDanceSpriteGroup">
            <title name="N">???</title>
            <title name="COSTUME" config="&quot;BEAR&quot;, &quot;CAT&quot;, &quot;FROG&quot;, &quot;PINEAPPLE&quot;, &quot;SHARK&quot;, &quot;UNICORN&quot;, &quot;SLOTH&quot;">???</title>
            <title name="LAYOUT">"circle"</title>
          </block></xml>  Şimdi aynı anda bir grup yedek dansçı oluşturabilirsiniz.!
      Dance_2019_07: Her dansçının, neye benzediğini kontrol eden bir dizi özelliği
        vardır. Dansçıların müzik başladıktan sonra daha yakın veya uzak görünmesini
        sağlamak için yeşil bir etkinlik bloğunun altındaki <xml><block type="Dancelab_setPropEach"
        block-text="the set block"><title name="GROUP" config="sprites, &quot;BEAR&quot;,
        &quot;CAT&quot;, &quot;DUCK&quot;, &quot;FROG&quot;, &quot;PINEAPPLE&quot;,
        &quot;SHARK&quot;, &quot;UNICORN&quot;, &quot;SLOTH&quot;">???</title><title
        name="PROPERTY">"scale"</title><title name="VAL">???</title></block></xml>
        bloğunu kullanın.
      Dance_2019_08: Dansçılar, renk katmanı ekleyebilen "renk tonu" özelliğine sahiptir.
        Dansçılarınızdan birinin (veya tüm grubun) renk tonunu değiştirmeyi deneyin!
      Dance_2019_09: Bu, tekrar tekrar tetiklenen özel bir etkinlik türüdür.  <xml><block
        type="Dancelab_everySeconds"><title name="N">2</title><title name="UNIT">"measures"</title></block></xml>  Araç
        kutunuzdaki diğer yeni bloklar, dansçıların özelliklerini zaman içinde rastgele
        değiştirmenize olanak sağlar.  _Yaratıcı olun ve eğlenin!_
      Dance_2019_10: Havaya girin! Kendi dansınızı yaratın ve arkadaşlarınızla paylaşın.
      Dance_Party_01: |-
        _Dans partisi yapalım!_

        İlk dansçınızı yaratmak için `yeni yap` bloğunu çalışma alanına sürükleyin ve `kurulum` bloğunun içine bağlayın.

        -   _Eğer daha fazla bilgi almak veya ek görevler istiyorsanız sol taraftaki ampüle tıklayın._
      Dance_Party_02: |-
        Bu geyik dansını alalım!

        <xml><block type="Dancelab_changeMoveLR"><title name="SPRITE">new&#95;dancer</title><title name="MOVE" config="MOVES.Dab, MOVES.Drop, MOVES.Floss">Floss</title><title name="DIR">-1</title></block></xml> bloğunu çalışma alanına sürükleyin. <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">4</title><title name="UNIT">"measures"</title></block></xml> bloğunun altına bağlayın. Dansçınız dördüncü ölçüden sonra yeni bir harekete başlayacaktır.

        **Ölçüler** müziğin içindeki zamanı hesaplamak için kullanılır. Bu eğitimde bir ölçü dört vuruş uzunluğundadır.
      Dance_Party_03: |-
        _Şimdi hareketleniyoruz!_

        Çalışma alanına bir <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">6</title><title name="UNIT">"measures"</title></block></xml> bloğu ekleyin. Dansçının 6 ölçü sonra yeni bir harekete başlamasını sağlayın.
      Dance_Party_04: |-
        _Bu dansın biraz parıltıya ihtiyacı var!_

        Araç kutunuzda dansçınızın arkasına bir arka plan efekti ekleyecek yeni bir blok arayın. Efektin müzik ilerledikçe değişimini izleyin!
      Dance_Party_05: |-
        Dansçının **her 2 ölçüde bir** hareket değiştirmesini sağlamak için başka bir yeni blok kullanın!

        -   `(İleri)`, `(Geri)`, veya `(Rastgele)` seçenekleri ile kod her çalıştığında dansçınıza farklı bir hareket yapma komutu verirsiniz.
      Dance_Party_06: |-
        _Daha fazla dansçıya ihtiyacımız var!_

        Kediyle birlikte dans edecek `arkaplan_dansçısı1` isimli bir arka plan dansçısı yaratın.
      Dance_Party_08: |-
        Her dansçının nasıl göründüğünü belirleyen bir _özellikler_ seti vardır.

        _boyut_ küçülterek bir dansçının arka planda dans eden bir dansçı gibi görünmesini sağlayabilirsiniz. İki arka plan dansçısını da aynı boyuta getirebilir misiniz?
      Dance_Party_09: |-
        Dansçılar kendilerine yeni bir renk katmanı ekleyen bir "renk tonu" özelliğine sahiptir. Dansçılarınızdan birinin renk tonunu değiştirmeye çalışın.

        -   Renk tonu özelliği sayesinde seçtiğiniz renk ve dansçının rengi karışacaktır.
      Dance_Party_10: |-
        Artık bir dansçının özelliklerinin nasıl değiştirildiğini biliyoruz. Ayrıca aynı özelliklerin bu bloğu kullanan müziğe otomatik olarak tepki vermelerini sağlayabiliriz.
        <xml>
        <block type="Dancelab_startMapping">

        <title name="SPRITE">right_pineapple</title>
        <title name="PROPERTY">"scale"</title>
        <title name="RANGE">"bass"</title>
        </block></xml>

        Bu program bir dansçının boyunun kontrolü için müziğin "bas" (düşük) seslerini kullanır. Diğer dansçıların da müziğe tepki vermesini sağlayabilir misiniz?
      Dance_Party_11: |-
        <xml><block type="Dancelab_whenKey"></block></xml> bloğu yukarı oka basıldığında kodu çalıştırmanızı sağlar.

        Dans hareketini değiştirebilir, bir dansçının özelliklerini değiştirebilir ya da bir kereliğine hızlı bir hareket yapabilirsiniz. Yaratıcı olun ve yeni bloklar arayın!
      Dance_Party_11_5: |-
        Bu bloğa bir bakın:

        <xml>
          <block type="Dancelab_makeNewDanceSpriteGroup">
            <title name="N">6</title>
            <title name="COSTUME">"DUCK"</title>
            <title name="LAYOUT">"circle"</title>
          </block></xml>

        Artık tek seferde birden çok dansçı yaratabilirsiniz!

        Tüm ördeklerin hep birlikte dans etmesini sağlayacak kodu yazmak için "tüm ördekler" bloklarının bazılarını kullanmayı deneyin.
      Dance_Party_11b: Şimdi dans zamanı! Sol ok tuşuna bastığınızda Kedi dab dansı
        yapar. Sağ ok tuşuna bastığınızda Robota "drop" figürü yaptırırsınız.
      Dance_Party_12: Havaya girin! Kendi dansınızı yaratın ve arkadaşlarınızla paylaşın.
      Dance_Party_extras_alternate_2019: "# Geri ve ileri!\n\nBazen seçtiğiniz dans
        hamle paternini oluşturmak isteyebilirsiniz. Bu yeni blok tam olarak bunu
        yapmanıza izin verir.\n\n[blockly block] [0] \n\nYukarıda seçtiğiniz hareketler
        sonsuza dek art arda tekrarlanacaktır.\n\n-   Öndeki dansçı için alternatif
        bir rutin oluşturun!\n-   Hareketlerin değişme oranını değiştirmek için farklı
        sayılar kullanın. Daha hızlı geçiş yapmak için `1` veya 0,5\\`i deneyin!"
      Dance_Party_extras_battle: |-
        # Dans Ekipleri

        İşte iki ekibin kıyasıya dansı Ok tuşları dansçılardan birini, "w,a,s,d" tuşları diğerini kontrol eder. Bir arkadaşınızla kıyasıya dans edin ve sonra bu dansı geliştirmeye çalışın

        -   Dansları kontrol etmek için daha fazla tuş ekleyin
        -   Tuşlara basıldığında arka plan dansçılarının da tepki vermesini sağlayın
        -   Görünürlüklerini ayarlayarak dansçının dört ölçüde bir değişmesini sağlayın
      Dance_Party_extras_battle_2019: |-
        # Dans Ekipleri

        İşte iki ekibin kıyasıya dansı Ok tuşları dansçılardan birini, "w,a,s,d" tuşları diğerini kontrol eder. Bir arkadaşınızla kıyasıya dans edin ve sonra bu dansı geliştirmeye çalışın

        -   Dansları kontrol etmek için daha fazla tuş ekleyin
        -   Tuşlara basıldığında arka plan dansçılarının da tepki vermesini sağlayın
        -   Görünürlüklerini ayarlayarak dansçının dört ölçüde bir değişmesini sağlayın
      Dance_Party_extras_every_beat: |-
        # Çeyrek Notalar

        Danslarımızın çoğunda tam ölçüler kullanılır ama her ölçü 4 çeyrek notadan oluşur. Bu dans, dansçının her çeyrek notada el çırpması için `her 0,25 ölçüde bir` kullanır.

        Bu dans aynı zamanda, 'her 0,25 ölçüde bir' bloğunun dansı ne zaman değiştireceğini belirlemek için bir _koşul_ bloğu da kullanır. Dansı nasıl değiştirdiğini görmek için koşul bloğunun içindeki sayıyı değiştirmeyi deneyin.

        -   Diğer nota uzunluklarıyla denemeler yapın (örneğin yarım nota için 0,5 veya 1/8’lik nota için 0,125 değeri girin).
        -   Birkaç `ölçüden sonra` etkinliği ekleyin.
        -   "Ölçüler" değerini "saniyeler" ile değiştirerek danslarınızı böyle zamanlamayı deneyin.
      Dance_Party_extras_every_beat_2019: "# Çeyrek Notlar\n\nDanslarımızın çoğu tüm
        ölçüleri kullanmıştır, ancak her ölçüt 4 çeyrek notundan oluşmaktadır. Bu
        dans, 4. ölçütten sonra her çeyrek notunda dansçının alkışlaması için <xml><block
        type=\"controls_if\"><value name=\"IF0\"><block type=\"logic_compare\"><title
        name=\"OP\">LT</title><value name=\"A\"><block type=\"Dancelab_getTime\"><title
        name=\"UNIT\">\"measures\"</title></block></value><value name=\"B\"><block
        type=\"math_number\"><title name=\"NUM\">5</title></block></value></block></value><statement
        name=\"DO0\"></statement></block></xml> kullanır. \n\nDansı nasıl değiştirdiğini
        görmek için bloktaki sayıları değiştirmeyi deneyin. \n\n-   Diğer not süreleri
        ile deneme (yarım not için 0,5 veya sekizinci not için 0,125 gibi). \n-   Başka
        etkinlikler de ekleyin."
      Dance_Party_extras_layout: |-
        # Hadi Düzene Girelim!

        Dans boyunca arka plan dansçılarının dizilimini değiştirmek için `düzen` bloğunu kullanan bu dansa göz atın. Geliştirmek için şu fikirlerden birini deneyin:

        -   Farklı bir düzende ikinci bir dansçı grubu oluşturun
        -   Bir tuşa basıldığında düzeni değiştirin
        -   Dansçılar dizilimi değiştirdiğinde bir özelliği değiştirin
      Dance_Party_extras_layout_2019: |-
        # Formasyona girelim!

        dans boyunca yedek dansçıların oluşumunu değiştirmek için <xml><block type="Dancelab_layoutSprites" block-text="layout"><title name="GROUP">"MOOSE"</title><title name="FORMAT">???</title></block></xml> bloğunu kullanan bu dansı kontrol edin. Uzatmak için bu fikirlerden birini deneyin:

        -   Farklı bir düzende dansçı ikinci bir grup oluşturun
        -   Bir tuşa basıldığında düzeni değiştirin
        -   Dansçılar oluşumunu değiştirdiğinde bir özelliği değiştirin
      Dance_Party_extras_mixed_2019: |-
        # Daha fazla

        düğme Bu dans, otomatik olarak dans ederlerken, dansçıların özelliklerini gerçek zamanlı olarak kontrol etmenizi sağlar. Düğmelere basarken diğer özellikleri değiştirmeyi deneyin. Örneğin:

        -   "Aşağı" öğesine bastığınızda dansçının tonunu rastgele ayarlayın.
        -   "Boşluk" öğesine bastığınızda rastgele düzende bir dansçı grubu ekleyin.
      Dance_Party_extras_on_beat: |-
        # Bas, Orta ve Tizler

        Bu dans, müziğin farklı bölümlerinde ses seviyesi yükseldiğinde kodu başlatmak için "zirve" etkinliklerini kullanır. Farklı şarkıların dansı nasıl değiştirdiğini görmek için şarkıyı değiştirin.
      Dance_Party_extras_on_beat_2019: |-
        # Bas, Orta ve Tizler

        Bu dans, müziğin farklı bölümlerinde ses seviyesi yükseldiğinde kodu başlatmak için "zirve" etkinliklerini kullanır. Farklı şarkıların dansı nasıl değiştirdiğini görmek için şarkıyı değiştirin.
      Dance_Party_extras_speed: |-
        # Hızlandır, Yavaşlat

        Bu son dans dansçıların hızını belirlemek için `hız ayarla` bloğunu kullanır. Şarkının farklı yerlerinde farklı hızlarla denemeler yapın. Bu dansta özgürce denemeler yapın veya daha önceki danslara dönerek onları daha da güzelleştirin.
      Dance_Party_extras_speed_2019: |-
        # Hızlandırın, Yavaşlatın

        Bu final dansı, her dansçının ne kadar hızlı hareket ettiğini kontrol etmek için <xml><block type="Dancelab_setDanceSpeedEach"><title name="GROUP">"SHARK"</title><title name="SPEED">2</title></block></xml> bloğunu kullanır. Şarkının farklı noktaları sırasında farklı hızlarla deneme yapmayı deneyin. Bu dansı takip etmeye devam etmekten çekinmeyin ya da daha güzel olmaları için önceki danslardan birine geri dönün.
      Dance_Party_extras_visible: |-
        # Nereye gittiler?

        Bu dans iki farklı dansçı grubunu görünür yapar ve gizler. Deneyin ve sonra kendi yaratıcılığınızı ekleyin.

        -   Başka bir dansçı grubu ekleyin
        -   Ok tuşlarını kullanarak dansçıları görünür yapın ve gizleyin
        -   Tüm dansçıları gizleyin ve heyecan veren bir arka plan efektine geçiş yapın
      Dance_Party_extras_visible_2019: |-
        # Nereye gittiler?

        Bu dans iki farklı dansçı grubunu görünür yapar ve gizler. Deneyin ve sonra kendi yaratıcılığınızı ekleyin.

        -   Başka bir dansçı grubu ekleyin
        -   Ok tuşlarını kullanarak dansçıları görünür yapın ve gizleyin
        -   Tüm dansçıları gizleyin ve heyecan veren bir arka plan efektine geçiş yapın
      Escape Room Example: |-
        # Room Escape

        In today's workshop you are going to be working on making a room escape app!  This level has an example app that you should play around with to get the feel for what you will be creating.

        # Do This

        -   Click RUN to start the app
        -   Try to find the key that will open the door.
      Final Personal Website: |-
        # Personal Website

        This is it! You have been working on your Personal Website for the whole unit. Put the finishing touches on it and submit it to your teacher! Remember to use the problem solving process as your guide in preparing your final product.

        # Do This

        -   Define: Read the rubric so you know what is expected
        -   Plan: Decide what you still need to work on and put those things in priority order
        -   Try: Implement your improvements to your personal website.
        -   Reflect: Get feedback from a classmate and decide what of that feedback to act on.

        Don't forget to take a screenshot of your home page and save it somewhere on your computer so you can find it later (_Need help with how to screenshot? Check out this <a href="http://www.take-a-screenshot.org/">website </a>._)
      Final Personal Website_2018: |-
        # Personal Website

        This is it! You have been working on your Personal Website for the whole unit. Put the finishing touches on it and submit it to your teacher! Remember to use the problem solving process as your guide in preparing your final product.

        # Do This

        -   Define: Read the rubric so you know what is expected
        -   Plan: Decide what you still need to work on and put those things in priority order
        -   Try: Implement your improvements to your personal website.
        -   Reflect: Get feedback from a classmate and decide what of that feedback to act on.

        Don't forget to take a screenshot of your home page and save it somewhere on your computer so you can find it later (*Need help with how to screenshot? Check out this <a href="http://www.take-a-screenshot.org/" target="_new">website </a>.*)
      Final Personal Website_2019: |-
        # Personal Website

        This is it! You have been working on your Personal Website for the whole unit. Put the finishing touches on it and submit it to your teacher! Remember to use the problem solving process as your guide in preparing your final product.

        # Do This

        -   Define: Read the rubric so you know what is expected
        -   Plan: Decide what you still need to work on and put those things in priority order
        -   Try: Implement your improvements to your personal website.
        -   Reflect: Get feedback from a classmate and decide what of that feedback to act on.

        Don't forget to take a screenshot of your home page and save it somewhere on your computer so you can find it later (*Need help with how to screenshot? Check out this <a href="http://www.take-a-screenshot.org/" target="_new">website </a>.*)
      Final Room Escape App: "# You've done it!\n\nYou made a room escape! Now its
        time to customize it. \n\nConsider:\n\n-   Add more style to the room\n-   Adding
        more things users can interact with in the room\n-   Try to make your secret
        code random\n-   Adding more rooms"
      Fish Tank 1-validated: "**Make a prediction**: What do you think will happen
        when you run this code?"
      Fish Tank 2-validated: "Let's make a fish tank!  \n\nChange Dusty (the tumbleweed)
        to a fish."
      Fish Tank 2-validated_2019: "Let's make a fish tank!  \n\nChange the tumbleweed
        sprite into any kind of fish by clicking <xml><block type=\"gamelab_allSpritesWithAnimation\"
        block-text=\"the sprite picker block\"><title name=\"ANIMATION\">\"tumbleweed\"</title></block></xml>.\n\nBe
        sure to also update this sprite's costume in <xml><block type=\"gamelab_addBehaviorSimple\"
        block-text=\"the add behavior block\"></block></xml>."
      Fish Tank 3-validated: "The fish is getting dizzy! \n\nChange the fish's behavior
        so that it swims around the tank."
      Fish Tank 3-validated_2019: "The fish is getting dizzy! \n\nChange the fish's
        behavior so that it swims left and right."
      Fish Tank 4-validated: "Our fish tank needs some water! \n\nUse <xml><block
        type=\"gamelab_setBackground\" inline=\"true\">\n    <value name=\"COLOR\">\n
        \     <block type=\"colour_picker\">\n        <title name=\"COLOUR\">#0000ff</title>\n
        \     </block>\n    </value>\n  </block></xml> to make the background blue."
      Fish Tank 4-validated_2019: "Our fish tank needs some water! \n\nUse <xml><block
        type=\"gamelab_setBackground\" inline=\"true\" block-text=\"the set background
        color block\">\n    <value name=\"COLOR\">\n      <block type=\"colour_picker\">\n
        \       <title name=\"COLOUR\">#0000ff</title>\n      </block>\n    </value>\n
        \ </block></xml> to make the background any color. We recommend blue!"
      Fish Tank 5-validated: Our fish is getting a little lonely. Add another sprite
        to the fish tank.
      Fish Tank 5-validated_2019: The fish is adventurous and wants to meet new creatures
        in the sea. Add another sprite to the fish tank. This sprite can have any
        costume other than the one you use for your fish!
      Fish Tank 6-validated: "What do you want your fish’s new friend to do?   \n\nAdd
        a behavior and watch them go!"
      Fish Tank 6-validated_2019: |-
        What do you want your fish’s new friend to do?

        Add a behavior and watch them go!
      Fish Tank 7-validated: "We've added a lot of new blocks to the toolbox.   \n\nPlay
        with them to make your fish tank special!"
      Fish Tank 7-validated_2019: "We've added a lot of new blocks to the toolbox.
        \  \n\nPlay with them to make your fish tank special!"
      Fish Tank Predict: "**Make a prediction**: What do you think will happen when
        you run this code?"
      Fish Tank Predict_2019: "**Make a prediction**: What do you think will happen
        when you run this code?"
      Frequency Analysis: |-
        # Break a random substitution cipher!

        Messages encrypted with the **Caesar cipher** are very easy to crack. What if instead of shifting the whole alphabet, we mapped every letter of the alphabet to a random different letter of the alphabet? This is called a **random substitution cipher**.

        In this version of the tool, you'll be interacting more with the graphs that show letter frequency. By analyzing the frequency of the letters in the encrypted input message compared to the frequency of letters in a typical piece of English prose, you can start to narrow in on what some of the letter mappings might be. Did you know that _'E'_ is the most common letter used in the English language? Maybe the most common letter in your encrypted text maps to the letter _'E'_, but maybe not! You'll have to do a bit of guess and check to see if that substitution makes sense.

        # Do this

        -   Load the **Sample message (hard)** from the message dropdown. This will load a message that has been encrypted with a random substitution cipher.\
            ![](https://images.code.org/04c6230c9607110126581c298bc09183-image-1443569176380.gif)

        -   You will crack the message by guessing what each letter of the alphabet contained in the original ciphertext should be changed to. You can do so by dragging the blue letters of the alphabet directly underneath the orange letter you want changed in the original ciphertext. Letters that have been changed using your guesses will no longer be highlighted orange in the message window on the left.
            ![](https://images.code.org/da9a7af7568d8c1698872ab91b4d79d7-image-1443572471212.gif)

        -   Play with some of the sorting options available in the Random substitution cipher tab to get different views on the letter frequencies in the input text as well as standard English text.
            ![](https://images.code.org/82efbca1807206c9a07de520fdb22027-image-1443572614493.23.28.png)

        See how long it takes you to crack the cipher! Is this a good method of encrypting secret data?
      Function intro Ryan: "Çalışma alanında `köprü inşa et` adlı bir **işlev** var.
        \ Nehrin karşısına geçmek için gereken tüm kodlar orada bulunuyor! \\\r\n
        \\\r\nKüçük yeşil bloğu çalışma alanına iki kez tutturarak yolu tamir et ve
        {currentPlayerName} karakterini Redstone Meşalesine [redstone_torch] ulaştır."
      Function intro Ryan_2019: "Çalışma alanında `köprü inşa et` adlı bir **işlev**
        var.  Nehrin karşısına geçmek için gereken tüm kodlar orada bulunuyor! \\\r\n
        \\\r\nKüçük yeşil bloğu çalışma alanına iki kez tutturarak yolu tamir et ve
        {currentPlayerName} karakterini Redstone Meşalesine [redstone_torch] ulaştır."
      Gamelab StartScreen Change State: |-
        # Changing the State

        Now that you can display a different screen according to the state of your program, you will need a way to change between states.  To go from the "starting" state to the "playing" state, you can have the user press the "s" key.  You'll **only** want the program to check for the key press when the program is in the "starting" state, so your code for this will go inside the "starting" conditional.  Putting one `if` block inside another is called **nesting** conditionals.

        ## Do this

        -   Inside the `if` statement that checks for "starting", add in a new `if` statement that checks whether the user has pressed the "s" key.  (`if (keyDown("s")) {`)
        -   Inside your new `if` statement, set the value of your `gameState` variable to "playing". (`gameState = "playing";`)
        -   Test the code by starting the game and pressing "s".  The game should start playing after the key is pressed.

        If the game isn't starting on the start screen, double check that when the `gameState` variable is created at the beginning of the program, its value is "starting".  (`var gameState = "starting";`)
      Gamelab StartScreen Check State: |-
        # Checking Game State

        Now that you have your game state stored in a variable, you can check it to determine what should be displayed.  This should happen inside the draw loop, since it's something that will change as the program is being run.  The program should check whether the game is in the "playing" state, and only run the program if it is.  We can worry about the other states later.

        ## Do This

        -   Inside the draw loop, add a conditional (`if` statement).
        -   For the condition, check if `gameState == "playing"`.
        -   Move the rest of the code from the draw loop inside the `if` statement, so it only runs if the game is "playing".
        -   Run the program.  Nothing should happen because the game is still in the "starting" state.
        -   Go back to where you set the value of your `gameState` variable and change it from "starting" to "playing".
        -   Run the game again, and it should play normally, because it is now in the "playing" state.
        -   Change the value of the variable back to "starting".

        (It is important to find ways to check your code as you go, rather than wait until the end of many complex changes to run it.  By checking both the playing and starting states, you know that your conditional is working properly and that the game should play while in the "playing" state.)
      Gamelab StartScreen Check States: |-
        # Check all States

        Right now the only state your program can deal with is "playing", but you can add more conditionals to account for the other three states.

        ## Do this

        -   Inside the draw loop, add in three more `if` statements that check for `gameState == "starting"`, `gameState == "won"`, and `gameState == "lost"`, respectively.
        -   Inside each `if` statement, add code that will draw text to the screen, so you can see the results of the different states.  You may also want to use `drawSprites` so you can see the background image and the player sprites, but make sure you are drawing the text on top of the sprites.
        -   Check your code by running the program in the different states.  (Don't worry about making them perfect yet, just make sure that the conditionals are working as they should.)

        In order to keep track of your code, you might find it useful to create a function for each of the different text displays, then call those functions inside the conditionals.
      Gamelab StartScreen End Game: |-
        # Ending the Game

        Next, you'll need to add code that changes the state of the game when you lose.   Scroll down to the bottom of the program, to the `gameStatus` function.  Inside the function, the program checks the score and lives variables to check whether the use should win or lose the game.  Instead of displaying a win or lose message, you'll want to change the state of the game to "won" or "lost";

        ## Do this

        -   Inside the `gameStatus` function, replace the code `text("You Won!", 35, 200);` with `gameState = "won"`.
        -   Inside the `gameStatus` function, replace the code `text("You Lost!", 35, 200);` with `gameState = "lost"`.
        -   Check your code by running the game and losing.
        -   Check your code by running the game and winning.

        (To make the game much easier to win, change the original number of lives to 1000 by replacing `var lives = 3;` to `var lives = 1000;`.)
      Gamelab StartScreen Hide Sprites: |-
        # Hide and Show Sprites

        You may prefer that the platform, coin, and rock sprites only be visible when the game is playing.  You can change the game setup to set their visible property to `false` at the beginning of the game, then set it to `true` when you start the game, then `false` again when the game is won or lost.

        ## Do this

        -   Add code after you create your platforms, gold, and rocks sprite groups that sets those sprite groups' visible properties to `false` (e.g. `platforms.setVisibileEach(false);` )
        -   In the same  three places where you set `gameState = "playing";`, set the sprite groups' visible properties to `true`.
        -   In the same places where you set `gameState = "lost";` and `gameState = "won";`, set the sprite groups' visible
        -   Check your code by running the game and losing and restarting the game.
        -   Check your code by running the game and winning and restarting the game.
      Gamelab StartScreen Intro: |-
        # Start and End Screens

        This tutorial will teach you how to make start and end screens in Game Lab, as well as restart the game from the end screen.

        Hit run to play the game on the left.  Follow the instructions on the start screen to play.  Once the game is over, follow the instructions on the end screen to restart the game.

        In the next bubble, you'll see the code for game play and start to add your own start and end screens.

        ## Start Screen

        The start screen is the introductory screen that appears before the user starts playing the game.  It usually has the title of the game and some basic instructions for playing.  It might also include the game developer.

        ## End Screen

        The end screen appears after the user has won or lost the game.  It sometimes includes the final score, player rankings or other information.  It can also have an option to play the game again.
      Gamelab StartScreen Restart Game: |-
        # Restarting the Game

        Last, you'll need to add code that restarts the game.   This is similar to how you started the game by having the user press the "s" key.  This time, you'll need to check during the "lost" and "won" states.  If the user presses the "r" key during on of these states, you should restart the game by setting the `gameState` to "playing" and also resetting the `score` and `lives` variables to 0 and 3, respectively.

        ## Do this

        -   Inside the `if (gameState == "lost") {` statement, add an if statement that checks whether the user has pressed the "r" key.
        -   Inside your new `if` statement, set `score` to 0, `lives` to 3, and `gameState` to "playing".
        -   Inside the `if (gameState == "won") {` statement, add an if statement that checks whether the user has pressed the "r" key.
        -   Inside your new `if` statement, set `score` to 0, `lives` to 3, and `gameState` to "playing".
        -   Inside the `gameStatus` function, replace the code `text("You Lost!", 35, 200);` with `gameState = "lost"`.
        -   Check your code by running the game and losing and restarting the game.
        -   Check your code by running the game and winning and restarting the game.
      Gamelab StartScreen State: |-
        # Game State Variable

        Our sample game had four different scenarios (or **states**) that we need to keep track of in order to display the right screen: "starting", "playing", "won", and "lost".  The first step in adding a start or end screen to the game is creating a variable to keep track of any changes in the state of the game.

        ## Do This

        -   Declare a variable called `gameState` at the beginning of the program.  (A good place to do this would be near where `score` and `lives` are declared.
        -   Set the initial value of  your `gameState` variable to "starting"

        (Because you are not using this variable yet, you will see a warning triangle next to the line where it is declared.  It also will not affect how the program runs.)
      Gamelab StartScreen base code: |-
        # Game Code

        This is the code for the game without the start and end screens.  The function `gameStatus` (called on line 43 and defined on line 208) checks whether the user has won or lost, but it only adds a text message to the screen.  Gameplay also continues even after the game is over.

        ## Do This

        Read the code, in particular the code before the draw loop (lines 1-24), inside the draw loop (lines 27-43), and inside the `gameStatus` function (lines 209-224).  It's okay if you don't understand everything in the game, but you should see that the code before the draw loop sets up the sprites, and the code inside the draw loop controls the gameplay.
      Geometric Sun: "\\*\\* Proje fikri: \\*\\* geometrik şekiller fikirler kullanarak
        bir model oluşturma. Bu sebat ve planlama gerektirir!"
      Geometric Sun_2018: "\\*\\* Proje fikri: \\*\\* geometrik şekiller fikirler
        kullanarak bir model oluşturma. Bu sebat ve planlama gerektirir!"
      HOC 2018 Level_1: Seni bekleyen yolculuk için malzemelere ihtiyacın var. **Sandık**tan
        ![](https://images.code.org/e0cf43fd36a50dd16ee06595047bfd8f-image-1538697999418.png)
        **sandalı** ![](https://images.code.org/0b3162de9dc0abf3e0890d315b8cc699-image-1538697977747.png)
        al.
      HOC 2018 Level_10: Bir **kalamar** ![](https://images.code.org/82f305ab1cb4a9ff9044991a18edb16e-image-1538947827218.png)
        bu Okyanus Anıtı içinde bir yerlerde saklanıyor, onu bulabilir misin?
      HOC 2018 Level_11: Siyah beton etrafına **prizmarin** ![](https://images.code.org/d110b8d13c01756fcdbef3768b2e2859-image-1538699770898.png)
        duvarı ör. Bu **su yolunu** ![](https://images.code.org/7773cf30f42e6727a23c8cb364d4664b-image-1538699800030.png)
        harekete geçirecek ve görevini tamamlayacak!
      HOC 2018 Level_12: Tebrikler! Uçsuz bucaksız su dünyası seni bekliyor. Bir mercan
        resifi inşa et! Bir volkan! Bir gemi enkazı! Sana kalmış.
      HOC 2018 Level_2: Sandalla gitmek açık suda yüzmekten çok daha kolay! Binmek
        için iskelenin sonuna git.
      HOC 2018 Level_3: Kürekleri al ve **morinayı** ![](https://images.code.org/9b636884eefb1efe18f9f844e1e916a9-image-1538698597353.png)
        yakalamak için sandalını açık denize sür.
      HOC 2018 Level_4: Hadi morinayla **yunus** ![](https://images.code.org/8c240fd4df4da2795ba7ca942b77a057-image-1538947890991.png)
        besleyelim. Okyanusu daha hızlı geçmek için bir tekrarla bloku kullan.
      HOC 2018 Level_5: Orada bir yerlerde bir **notilus kabuğu** ![](https://images.code.org/2eb084fa0c718dee6ca4b6379381f735-image-1538698936660.png)
        saklanıyor! **Sandığa** ![](https://images.code.org/16cdd5779b38909d4bf47b29535c92b0-image-1538698950602.png)
        ulaşmak için gemi enkazını araştır.
      HOC 2018 Level_6: Dışarısı buz gibi görünüyor! Su altı harabelerine giderken
        bir **somon** ![](https://images.code.org/c66eadf25b3cdfe20bbfdc91e2c28c94-image-1538699000102.png)
        yakala.
      HOC 2018 Level_7a: Sualtı harabelerini buldun. **Prizmarin** ![](https://images.code.org/5f5ebe5121b8f9787d7dbd38ad0a86cc-image-1538699091018.png)
        hazinesi içeren **sandığı** ![](https://images.code.org/29a5fd76b869d755a60d39fbbb4057eb-image-1538699081910.png)
        bulmak için kumtaşını ara.
      HOC 2018 Level_8: Önce buz dağları, şimdi de lav mı? Bu volkanik adayı geç ve
        mercan resifi içinde **tropikal balığı** ![](https://images.code.org/6d3293e7709cb1a43d9f7617fd0cc2b8-image-1538699180397.png)
        bul.
      HOC 2018 Level_9b: Resife geldin, şimdi de **Denizin Kalbini** ![](https://images.code.org/3035926d2a37aa695b5d47413adcffa2-image-1538699398781.png)
        ara! Hazine **sandığına** ![](https://images.code.org/af697397dd70e5b6b93b00eb46c558af-image-1538699377397.png)
        ulaşmak için mavi ve kırmızı mercanları kullan.
      InspirationalArtwork: "Serbest ilham zamanı. Bu deseni oluşturmak için gerekli
        herşeyi öğrendin. Eğer bu resim ilham veriyorsa benzer birşeyler yapmaya çalış.
        Yoksa kendi tasarımını yap.\\\r\n\\\r\nİlham alınan tasarımın kodunu görmek
        ister misin? "
      InspirationalArtwork_2018: "Serbest ilham zamanı. Bu deseni oluşturmak için
        gerekli herşeyi öğrendin. Eğer bu resim ilham veriyorsa benzer birşeyler yapmaya
        çalış. Yoksa kendi tasarımını yap.\\\r\n\\\r\nİlham alınan tasarımın kodunu
        görmek ister misin? "
      Intro to Web Lab - Part 1_2019: |-
        ## Question to consider:

        -   What are the different parts of Web Lab, and what are they used for?
      Intro to Web Lab - Part 2_2019: |-
        ## Questions to consider

        -   Why are HTML tags useful?
        -   What does the paragraph tag do?
      Introduction to Variables - Part 1_2019: |-
        ## Questions to Consider

        -   What are variables used to do?
        -   How do you create a variable and assign it a value?
        -   What can go into a variable?
      K-1 Bee Loops 2: '"Tekrarla" bloğu kullanarak ilerleyip nektar ve balı alalım!'
      K-1 Bee Loops 3: Nektar almak ve bal yapmak için 3 'tekrarla' döngüsünü kullan!
      K-1 Bee Loops 4: '"Tekrarla" bloğu kullanarak ilerleyip nektar ve balı alalım
        ve ilerleyelim!'
      K-1 Bee Loops 5: '"Tekrarla" bloğu kullanarak ilerleyip nektar ve balı alalım!'
      K-1 Bee Loops 6: '"Tekrarla" bloğu kullanarak ilerleyip nektar ve balı alalım
        ve ilerleyelim!'
      K-1 Maze Loops 10: Beni domuza götür! Tekrarla döngüsünü kullan.
      K-1 Maze Loops 11: |-
        Get me to the pig!\
        The `repeat` loop will make this easier.
      K-1 Maze Loops 12: |-
        Get me to the pig!\
        The `repeat` loop will make this easier.
      K-1 Maze Loops 2: Tekrar bloğu kullanarak beni domuza götür!
      K-1 Maze Loops 3: |-
        Get me to the pig!\
        Be sure to use `repeat` loops.
      K-1 Maze Loops 5: |-
        Get me to the pig!\
        Be sure to use `repeat` loops.
      K-1 Maze Loops 6: |-
        Get me to the pig!\
        Be sure to use `repeat` loops.
      K-1 Maze Loops 7: |-
        Get me to the pig!\
        Be sure to use `repeat` loops.
      K-1 Maze Loops 8: Domuzcuğa ulaşmak için 'tekrarla' döngüsünü kullanın!
      K-1 Maze Loops Assessment 1: Bak neler öğrendik! Bana domuzcuğa ulaşmak için
        'tekrarla' döngüsünü kullanın!
      MC HOC 2016 SCORE LEVEL: "Some games let you keep score. Play tag with these
        Iron Golems and use the <xml>  <block type=\"craft_addScore\">\n    <title
        name=\"SCORE\">1</title>\n  </block></xml> block to give yourself a point
        when you tag them.  \n\n  Reach five points to win!"
      MC_HOC_2017_01_RETRY: "{currentPlayerName} evin içinde sıkışıp kaldı, ama Agent
        yardım etmek için burada!   \\\r\n \\\r\n   \\\r\nÇalışma alanında `koştuğunda`
        bloğunun üzerine bir `ileri taşı` bloğu tutturarak Agent'ı baskı plakasına
        [PressurePlate_Up] götür, ardından \"Çalıştır\" düğmesine basıp ok tuşlarını
        kullanarak {currentPlayerName} karakterini evin dışına çıkar ve **sandığı**
        [chest] toplamasını sağla.  "
      MC_HOC_2017_01_RETRY_2019: "{currentPlayerName} evin içinde sıkışıp kaldı, ama
        Agent yardım etmek için burada!   \\\r\n \\\r\n   \\\r\nÇalışma alanında `koştuğunda`
        bloğunun üzerine bir `ileri taşı` bloğu tutturarak Agent'ı baskı plakasına
        [PressurePlate_Up] götür, ardından \"Çalıştır\" düğmesine basıp ok tuşlarını
        kullanarak {currentPlayerName} karakterini evin dışına çıkar ve **sandığı**
        [chest] toplamasını sağla.  "
      MC_HOC_2017_02_Cole: "{currentPlayerName} bir maceraya atıldı! Yardımcı olmak
        için sağ taraftaki kilitli kapının arkasında bulunan **haritayı** [map_empty]
        al. \\\r\n \\\r\n{currentPlayerName} geçebilsin diye Agent'ı baskı plakasına
        [PressurePlate_Up] götürmek için kodu çalışma alanına tuttur. "
      MC_HOC_2017_02_Cole_2019: "{currentPlayerName} bir maceraya atıldı! Yardımcı
        olmak için sağ taraftaki kilitli kapının arkasında bulunan **haritayı** [map_empty]
        al. \\\r\n \\\r\n{currentPlayerName} geçebilsin diye Agent'ı baskı plakasına
        [PressurePlate_Up] götürmek için kodu çalışma alanına tuttur. "
      MC_HOC_2017_03_Cole: "{currentPlayerName} maceraya devam ediyor ve yolculuğa
        hazırlanmak için **pusulaya** [compass] ihtiyacı var.  \\\r\n   \\\r\nAgent'ı
        geçidi açacak şekilde kodla. "
      MC_HOC_2017_03_Cole_2019: "{currentPlayerName} maceraya devam ediyor ve yolculuğa
        hazırlanmak için **pusulaya** [compass] ihtiyacı var.  \\\r\n   \\\r\nAgent'ı
        geçidi açacak şekilde kodla. "
      MC_HOC_2017_04POINT5_RYAN: "Karşıya geçtin! \\\r\n\\\r\nŞimdi {currentPlayerName}
        karakterini labirentten güvenli bir şekilde geçirerek **baltayı** [diamond_axe]
        almasını sağla\\\r"
      MC_HOC_2017_04POINT5_RYAN_2019: "Karşıya geçtin! \\\r\n\\\r\nŞimdi {currentPlayerName}
        karakterini labirentten güvenli bir şekilde geçirerek **baltayı** [diamond_axe]
        almasını sağla\\\r"
      MC_HOC_2017_04_Cole: "Agent suyun karşısına geçebilir!  \\\r\n \\\r\nBu bulmacayı
        çözmek için bir `tekrarla` döngüsü kullan ve {currentPlayerName} karakterinin
        kapının arkasındaki **kovaya** [bucket_empty] ulaşmasına yardımcı ol. "
      MC_HOC_2017_04_Cole_2019: "Agent suyun karşısına geçebilir!  \\\r\n \\\r\nBu
        bulmacayı çözmek için bir `tekrarla` döngüsü kullan ve {currentPlayerName}
        karakterinin kapının arkasındaki **kovaya** [bucket_empty] ulaşmasına yardımcı
        ol. "
      MC_HOC_2017_05_Cole: "Olamaz, köprü yıkılmış! \\\r\n\\\r\n{currentPlayerName}
        **küreğe** [diamond_shovel] ulaşabilsin diye, Agent'ı `yerleştir` bloğunu
        kullanarak köprüyü yeniden inşa edecek şekilde kodla."
      MC_HOC_2017_05_Cole_2019: "Olamaz, köprü yıkılmış! \\\r\n\\\r\n{currentPlayerName}
        **küreğe** [diamond_shovel] ulaşabilsin diye, Agent'ı `yerleştir` bloğunu
        kullanarak köprüyü yeniden inşa edecek şekilde kodla."
      MC_HOC_2017_06_Cole: "Başka bir nehir, ama bu kez çok daha geniş! \\\r\n \\\r\n{currentPlayerName}
        **kazmaya** [diamond_pickaxe] ulaşabilsin diye Agent'ın köprü inşa etmesine
        yardımcı olmak için bu kodu düzelt. "
      MC_HOC_2017_06_Cole_2019: "Başka bir nehir, ama bu kez çok daha geniş! \\\r\n
        \\\r\n{currentPlayerName} **kazmaya** [diamond_pickaxe] ulaşabilsin diye Agent'ın
        köprü inşa etmesine yardımcı olmak için bu kodu düzelt. "
      MC_HOC_2017_07_Cole: "Yolda buz var!  \\\r\n \\\r\n`Yolu temizle` işlevi, buzu
        yok edip {currentPlayerName} karakterini Maden Arabasına [minecart_normal]
        geçirmeye yardımcı olabilir! "
      MC_HOC_2017_07_Cole_2019: "Yolda buz var!  \\\r\n \\\r\n`Yolu temizle` işlevi,
        buzu yok edip {currentPlayerName} karakterini Maden Arabasına [minecart_normal]
        geçirmeye yardımcı olabilir! "
      MC_HOC_2017_10_RETRY: "Çalışma alanında bulunan iki işlev arasındaki farkı bulabilir
        misin? \\\r\n \\\r\nBu işlevleri araç kutusundaki diğer kodla birlikte kullanarak
        Maden Arabasının yolunu temizle ve sonra **Çakmaktaşı ve Çeliği** [flint_and_steel]
        topla. \\\r\n "
      MC_HOC_2017_10_RETRY_2019: "Çalışma alanında bulunan iki işlev arasındaki farkı
        bulabilir misin? \\\r\n \\\r\nBu işlevleri araç kutusundaki diğer kodla birlikte
        kullanarak Maden Arabasının yolunu temizle ve sonra **Çakmaktaşı ve Çeliği**
        [flint_and_steel] topla. \\\r\n "
      MC_HOC_2017_Ali: 'Aşağıdaki işlevlere bak.  Ghast''lardan uzak durmak ve {currentPlayerName}
        karakterinin güvenli bir şekilde **Büyülü Kitaba** [book_enchanted] ulaşmasına
        yardımcı olmak için bu işlevleri nasıl kullanabilirsin?  '
      MC_HOC_2017_Ali_2019: 'Aşağıdaki işlevlere bak.  Ghast''lardan uzak durmak ve
        {currentPlayerName} karakterinin güvenli bir şekilde **Büyülü Kitaba** [book_enchanted]
        ulaşmasına yardımcı olmak için bu işlevleri nasıl kullanabilirsin?  '
      MC_HOC_2017_FP20x20: |-
        **Serbest Oyun** Şimdi her şey sana bağlı!
        Bu dünyayı keşfetmene yardımcı olması için Ajan'ın kodunu kullan.
      MC_HOC_2017_FP20x20_2019: |-
        **Serbest Oyun** Şimdi her şey sana bağlı!
        Bu dünyayı keşfetmene yardımcı olması için Ajan'ın kodunu kullan.
      Making Music: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      Making Music_2018: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      Making Music_2019: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      NEW Course 4 Artist Functions 1: '"Tekrarla" döngüsü kullanarak 100 piksel uzunluğunda
        olan bir kare çizebilir misin?'
      NEW Course 4 Artist Functions 11: 'Şimdi karelerden çizgi çiz "draw a line of
        square" isimli 6 tane kare çizen bir fonksiyon yazalım. Bu fonksiyonu "draw
        a square 20" fonksiyonunu kullanarak yapabilir misin? Not: düzenle tuşuna
        bas ve kalemi daha ince yaptığımızı gör'
      NEW Course 4 Artist Functions 12: '"Kareden çizgi çiz " fonksiyonunu kullanarak
        şekildeki deseni çiz'
      NEW Course 4 Artist Functions 13: "Can you draw a star shape using the `draw
        a line of squares` function?  \n\n(Be sure to `move forward` 60 pixels before
        you turn 144 degrees!)"
      NEW Course 4 Artist Functions 14: Serbest zaman-İstediğini çiz!
      NEW Course 4 Artist Functions 2: "Can you draw 3 squares 20 pixels apart from
        one another? \n\nEach square is 100 pixels in size."
      NEW Course 4 Artist Functions 3: Burada fonksiyon isimli yeni bir blok var.
        "Düzenle" yi tıklayın sonra 100 piksel kenarlara sahip bir kare çizmek için
        kodu ile doldurun. Bittiğinde programına gitmek için "Kapat"'ı tıklatın.
      NEW Course 4 Artist Functions 4: '"Kare Çiz" fonksiyonunu kullanarak bu deseni
        oluştur.'
      NEW Course 4 Artist Functions 7: 'Fonksiyon bloklarının nasıl kullanılacağına
        alıştın mı? Hadi bu kareyi 200 piksel boyutunda olacak şekilde değiştirin.
        İpucu: Kare çiz "draw a square" fonksiyonu üzerindeki "Düzenle" bağlantısını
        tıklayın. Bittiğinde kapat düğmesine basmayı unutmayın. '
      NEW Course 4 Artist Functions 8: Sizin için "draw a triangle adı verilen yeni
        bir fonksiyon oluşturduk.  100 piksel kenarları olacak bir üçgen çizmek için
        fonksiyonu düzenleyebilir misin?
      NEW Course 4 Artist Functions 9: Bu sadece bir blok ekleyerek çözebilir misiniz?
      NEW Course 4 Artist Params 1: Hadi 50 piksel kenarlara sahip bir kare çizmek
        için bu fonksiyon tanımlayın. Başlamak için "Düzenle" seçeneğini tıklatın.
      NEW Course 4 Artist Params 10: '"Draw a hexagon" fonksiyonunu uzunluk "length"
        parametresi ile yaratalım. İpucu: Bu altıgen 100 piksel uzunluğunda kenarları
        vardır. '
      NEW Course 4 Artist Params 11: "Can you figure out how to draw this shape? \n\nEdit
        the function to use the `sides` parameter."
      NEW Course 4 Artist Params 12: Bu çizim tamamlayabilirsiniz? Tüm şekillerin
        kenarları 100 pikseldir.
      NEW Course 4 Artist Params 12a: "This image is similar to the last.  \n\nCan
        you use a `for` loop with your function to make this design?"
      NEW Course 4 Artist Params 13: "Let's edit this `draw a polygon` function. \n\nIt
        already has a `sides` parameter. Now, let's add a `length` parameter. \n\nThe
        perimeter of each shape is 200 pixels. Do you remember the equation to make
        shapes the same size when they have a different number of sides?"
      NEW Course 4 Artist Params 14: "'length' (uzunluk) ve 'sides' (kenarlar) parametresini
        kullanmak için 'draw a spiral edge' (sarmal bir kenar çiz) komutunu düzenle,
        sonra bu şekilleri yeniden oluştur.\\\r\n\\\r\n\\-\nKarenin en küçük kenarın
        uzunluğu 5 piksel.\\\r\n\n-   Üçgenin en küçük kenarın uzunluğu 10 piksel.\\\r\n-
        \  Altıgenin en küçük kenarın uzunluğu 2 piksel.\\\r\n-   Hepsi 100 piksele
        kadar artacak.  "
      NEW Course 4 Artist Params 15: 'Serbest Zaman: Yazdığınız fonksiyonlar ve ektra
        birkaç tanesi burada. Harika bir şeyler çiz! Kalem ucu ile oyna be çizimin
        ne kadar farklı olabildiğini gör!'
      NEW Course 4 Artist Params 2: 50 piksel kenarlı bir üçgen yapan çiziklerden
        bir 'üçgen çiz' fonksiyonu oluşturun.
      NEW Course 4 Artist Params 3: "Now let's use the function to draw 5 triangles
        in a row. \n\nEach triangle is 30 pixels apart."
      NEW Course 4 Artist Params 4: Bu fonksiyon bloklarında farklılık gördünüz mü?
        Çalıştırın ve ne olacağını görün.
      NEW Course 4 Artist Params 5: "Replace the `???` in the `length` parameter input
        block. \n\nThe pentagon has 100 pixel sides."
      NEW Course 4 Artist Params 6: "Fill in the `length` parameter to draw these
        shapes by replacing the `???` with the right numbers.  \n\nThe square and
        triangle have 100 pixel sides.\\\nThe hexagon sides are 75 pixels long. "
      NEW Course 4 Artist Params 7: "Can you complete this drawing? \n\nThe sides
        of each triangle are 25 pixels larger than the last.\\\nThe first triangle
        has 25 pixel sides."
      NEW Course 4 Artist Params 8: Bu üçgen çizme fonksiyonu hatalıdır. Bu fonksiyonu
        düzenleyerek düzeltebilir misin? Sonra kenar uzunluğu 25, 50 ve 75 olan üçgen
        çizebilir misin?
      NEW Course 4 Artist Params 9: Kare çiz "draw a square" fonksiyonunu düzenle
        ve parametre ekle. Uzunluk "Length" parametresi alsın. Bu defa 25, 50 ve 75
        piksel uzunluğunda 3 üçgen çiz. Aralarında 100 piksel mesafe olsun.
      NEW Course 4 Artist Params inspire: "<img src=\"https://images.code.org/1df195df9d808f0dd539bef0f5c2958b-image-1443049871563.02.54.png\"
        width=\"250px\"/> \\\r \\\r \\*\\* Serbest ilham: \\*\\* Şimdi böyle bir model
        yapmak için bilmeniz gereken her şeyi öğrendin! \\\r \\\r bu resimden ilham
        almayı deneyin ve benzer bir şey yapın. Aksi takdirde, kendiniz birşey yaratın.
        \\\r \\\r dikkat: 'set Alfa' bloğu kullandım."
      NEW Course 4 Artist Vars 12: Şimdi bir önceki algoritmayı tekrar yaratarak kenar
        uzunlukları 150 olan beşgen çiz.
      NEW Course 4 Artist Vars 2: Sayı bloğunu çekerek uzunluğu ayarla "set length"
        ve tekrarla "repeat\_times" değerlerine değer aktar ve 50 piksel uzunluğunda
        üçgenler çiz.
      NEW Course 4 Artist Vars 4: Tekrar dene!. Uzunluk "length" değerini 60 yapıp
        hoş bir altıgen çizebilir misin?
      NEW Course 4 Artist Vars 6: |-
        Beşgenlerden oluşan bir desen oluşturabilir misiniz. Kenarları için length değişkenini 100 piksele ayarla. Sonra length değişkenini bütün gerekli yerlerde kullan.
        Değişkenin değerinin bir defa ayarlandıktan sonra defalarca nasıl kullanıldığını gör.
      NEW Course 4 Bee For Loops 10a: 'Hazır mısın? Döngüler hakkından öğrendiklerini
        kullanarak bu problemi çöz. Unutma: Sonuca ulaşmak için çözümünü birkaç defa
        çalıştırman gerekebilir.'
      NEW Course 4 Bee For Loops 2: Nekrar toplamak için gerekli kodları ekle. Bu
        bulmaca için ne kadar kod yazman gerektiğini gör. (Bir sonraki bulmacada daha
        basit yöntemi öğreneceğiz)
      NEW Course 4 Bee For Loops 3: For döngüsü bu işe çok daha kolay yapar! Bütün
        kod burada bak ve incele. Sonra Çalıştır tuşuna bas ve nasıl çalıştığını gör.
      NEW Course 4 Bee For Loops 4: "?? ifadesini değiştirerek en çok sayıda nektarı
        toplamasını sağla. "
      NEW Course 4 Bee For Loops 4 4: Şimdi sayaç (counter) kadar ilerlemeliyiz. Sonra
        sayaç (counter) kadar nektar alalım. Problemi çözmek için "tekrarla" döngüsü
        kullanabilir misin?
      NEW Course 4 Bee For Loops 5: Bununla tekrarla "For" döngülerinde geriye doğruda
        sayabilirsiniz. 5 ten geriye doğru 1 e kadar sayarak nektarları toplayın.
      NEW Course 4 Bee For Loops 6: Döngüdeki son sayı artış "increment" olarak adlandırılır.
        Her döngüde sayaç değeri bu miktarda değiştirilir. Bu çiçekleri sayacı ikişer
        artırarak toplayın.
      NEW Course 4 Bee For Loops 7: "Şimdi counter değişkeninin matematik blokları
        ile birleştirelim! Counter değişkeninin kullanarak ve en az sayıda blok kullanarak
        bahçede dolaşabilir misin? Yapman gereken 3, 6, 9, 12 ve 15 nektar toplamak.
        İşin sırrı sayaç \"counter\" değişkeninde dir. \nUnutma: Sayaç değeri artıyorsa,
        her döngüde artış miktarı counter değişkenine eklenir."
      NEW Course 4 Bee For Loops 8: Bunu anladın! 3, 6, 9, 12, ve 15 nektar toplamak
        için ne kadar arttırmak gerekir?
      NEW Course 4 Play Lab Params 11: "It's free play time! Have fun with all the
        blocks in your tool box.\\\n<br/>\n\n<h5>\n<details>\n<summary><b>Need some
        ideas?</b></summary>\n\t<br>\n\t<h5>\n\t\t<ul>\n        \t<li><strong>Tag</strong>
        - Have character 2 patrol and use your arrow keys to make character 1 chase
        until they collide. </li>\n            <li><strong>Whack-a-Sprite</strong>
        - Have a character constantly pop up at a random location. Award points for
        clicking the sprite before it disappears. </li>\n            <li><strong>Best
        Guess</strong> - Make both characters disappear, change location to a random
        spot, then reappear as a random character.  Click on the first one and get
        a point...but if you click on the second one you LOSE a point! </li>\n        </ul>\n\t</h5>\n\n</details>\n</h5>"
      NetSim Standalone Automatic DNS: |-
        # Domain Name System (DNS)

        In this version of the Internet Simulator, a Domain Name System (DNS) is provided for you and knows the IP addresses of all connected computers. You can only see the hostnames of other connected computers.\
        ![](https://images.code.org/3ac2c23ed610abc7e785ec85054e89a9-image-1434746293690.PNG)

        The address of the DNS is always \<yourRouterNumber>.15. Send a message with protocol `GET [hostname]`, for example `GET Bob2`, to the DNS to get another student's address. You can keep track of the responses in the Notes section in the DNS tab.\
        ![](https://images.code.org/c81c1a6b876eb46674a7f7e5e70506ce-image-1434746797267.png)

        Your teacher will hand out more specific instructions for this activity.
      NetSim Standalone Broadcast: |-
        # Broadcast messages in the Internet Simulator

        In this version of the Internet Simulator, you can connect to up to 5 other people in a room. When you send messages in the room, everyone receives them. What are some of the challenges of this system, and how might you solve them?

        Your teacher will hand out more specific instructions for this activity.
      NetSim Standalone Classroom Routers: |-
        # Routing messages

        In this version of the Internet Simulator, everyone connects to a router and has a specific address. To send messages, you have to address your message to the specific address of the recipient, and the router will take care of delivering it to the right computer. If there are other routers created in your class, ask for the address of one of your classmates and send them a message! View the Log Router to see the path the messages have taken through the network.

        Your teacher will hand out more specific instructions for this activity.
      NetSim Standalone Freeplay: |-
        # Internet Simulator Freeplay

        In this version of the Internet Simulator, most of the options are turned on and are configurable. Messages can be sent to any router within the class, and messages will take different paths to reach their destination.

        Your teacher will hand out more specific instructions for this activity.
      NetSim Standalone Manual DNS: |-
        # Introduction to DNS

        In this version of the simulator you can't see the other students' addresses.  Instead, one of you must act as a name service, to help share addresses with each other. From the DNS tab in the left column, one person can take over as DNS.

        Your teacher will hand out more specific instructions for this activity.
      NetSim Standalone Packets TCP: |-
        # Packets and Making a Reliable Internet

        Messages on the Internet can take many paths to get to their destination, and sometimes along the way the message gets dropped. In this version of the Internet Simulator:

        -   There is a 10% chance of a packet being dropped
        -   Multiple packets may take different paths to the destination
        -   The default max packet size is set to 6 additional characters

        Your teacher will hand out more specific instructions for this activity.
      NetSim Standalone SendAB: |-
        # Sending bits with the Internet Simulator

        You and your partner share a single wire that can only be in state A or state B. You can set the wire to either state at any time, and you can read the state of the wire at any time. Can you figure out a way to effectively communicate with just this system?

        Your teacher will hand out more specific instructions for this activity.
      NetSim Standalone Sending Numbers: "# Sending Numbers with the Internet Simulator\n\nYou
        and your partner can now reliably send messages back and forth without extra
        coordination! While you're always sending bits back and forth, you can also
        represent those bits as decimal numbers. What kinds of information can you
        represent with this system? \n\nYour teacher will hand out more specific instructions
        for this activity."
      NetSim Standalone Sending Numbers Ascii: "# Sending Text with the Internet Simulator\n\nNow
        that you've transmitted information represented as decimal numbers, you can
        map those numbers to text characters to send text-based information back and
        forth. With a text-based protocol, you can easily represent and communicate
        all kinds of information. \n\nYour teacher will hand out more specific instructions
        for this activity."
      New Minecraft Hero Project: |-
        **Serbest Oyun** Şimdi her şey sana bağlı!
        Bu dünyayı keşfetmene yardımcı olması için Ajan'ın kodunu kullan.
      OPD-K5 CS Video: "## Getting Started: Why Computer Science (CS) Fundamentals?\n\nYou'll
        complete this free, self-paced course using the same learning platform you
        can use in your classroom with your students. \n\nLet's start by learning
        a bit about what Computer Science (CS) Fundamentals is, and how it's worked
        for teachers and students around the globe. In the next level, we'll cover
        how to interact with the CS Fundamentals learning platform, which you'll be
        using to complete this course.\n\n> ## Reflect\n>\n> What are your first impressions
        of CS Fundamentals?\n>\n> [Tweet your thoughts](https://twitter.com/teachcode)
        and be sure to tag @teachcode in your tweet so we can respond.\n>\n> <a href=\"http://ctt.ec/Bfjw3\"
        target=\"blank\">Share on Twitter >></a>\n>\n> Don't have a Twitter account?
        You can also find us on [Facebook](https://www.facebook.com/Code.org/) or
        [Instagram](https://www.instagram.com/codeorg/)."
      OPD-K5 CS Video_copy: "## Get to know CS Fundamentals\n\nLet's start by learning
        a bit about what Computer Science (CS) Fundamentals is, and how it has worked
        for teachers and students around the globe. "
      OPD-K5 Closing: |-
        > **If you enjoyed this course, sign up for an in-person workshop:**
        >
        > [Sign up now](http://code.org/professional-development-workshops) to continue learning computer science and its pedagogy. The free in-person workshops are a valuable place to collaborate and engage with other passionate educators in your area.
      OPD-K5 Closing_copy: |-
        > **If you enjoyed this course, sign up for an in-person workshop:**
        >
        > <a href="http://code.org/professional-development-workshops" target="blank">Sign up now</a> to continue learning computer science and its pedagogy. The free in-person workshops are a valuable place to collaborate and engage with other passionate educators in your area.
      OPD-K5 EventsVid: |-
        Watch this video that defines "events" and shows how they work in CS Fundamentals. Afterwards, you will try some puzzles that require you to code events.

        > An event is a line of code that tells your computer to "listen" for something to happen, then take an action. For example, on web pages, you often can display a drop down menu when you roll over the navigation bar with your mouse. The "mouse rollover" is an "event" that triggers an action.
      OPD-K5 FirstProgram: Watch the video below, which explains the very first program
        that young students will write in [Course A](https://studio.code.org/s/coursea-2018?section_id=2042045).
        On the next page, you'll get to write a similar program of your own!
      OPD-K5 FirstProgram_copy: Watch the video below, which explains a program that
        young students will write in <a href="https://studio.code.org/s/coursea-2019"
        target="blank">Course A</a>. On the next page, you'll get to write a similar
        program of your own!
      OPD-K5 LessonPlanning: "So far, you've been introduced to some of our unplugged
        lesson plans. However, there are lesson plans for every single CS Fundamentals
        lesson -- both plugged and online. You can find the full list of lesson plans
        for each course below:\n<br/>\n<br/> \n[Course A lesson plans](https://curriculum.code.org/csf-18/coursea/)<br/>
        \n[Course B lesson plans](https://curriculum.code.org/csf-18/courseb/)<br/>\n[Course
        C lesson plans](https://curriculum.code.org/csf-18/coursec/)<br/> \n[Course
        D lesson plans](https://curriculum.code.org/csf-18/coursed/)<br/> \n[Course
        E lesson plans](https://curriculum.code.org/csf-18/coursee/)<br/> \n[Course
        F lesson plans](https://curriculum.code.org/csf-18/coursef/)<br/> \n\nHowever,
        you may want to adapt these lessons, or build your own! The video below explains
        the structure of the CS Fundamentals lessons, but also provides tips in case
        if you want to develop your own lessons."
      OPD-K5 Problem Solving: |-
        # Best Practices > Meta-Cognitive Problem Solving

        Explicitly teaching meta-cognitive problem solving strategies before, during and after coding is extremely important in helping students process their learning. Mega-cognitive problem solving involves thinking about your thought process itself, and reflecting on _how_ you solve problems. Watch the video below to learn about Code.org's "Puzzle Solving Recipe" that can help students have success with difficult problems:

        [This worksheet](http://code.org/curriculum/docs/k-5/PuzzleSolvingStudent.png) details the different steps of the Puzzle Solving Recipe.

        <img src="https://images.code.org/18ec61f8b911b83ca1cdea404a34c40e-image-1434399798952.png" width="650px" style="margin-right:45px; border-radius:10px;">

        > ## Reflect:
        >
        > How might you explicitly teach problem solving in your CS classroom?
        >
        > [Tweet your thoughts](https://twitter.com/teachcode) and be sure to tag @teachcode in your tweet so we can respond.
        >
        > <a href="http://ctt.ec/ic2bx" target="blank"><h4><i class="fa fa-external-link-square" ></i> Share on Twitter</h4></a>
      OPD-K5 RepeatBlock: Watch the video below, which explains how loops work and
        introduces the 'Repeat' block in CS Fundamentals.
      OPD-K5 RepeatBlock_copy: Watch the video below, which explains how loops work
        and introduces the 'Repeat' block in CS Fundamentals.
      OPD-K5 Unplugged Video: |-
        ## Looking Ahead > Getting "Unplugged"

        <img src="https://images.code.org/ae83fdee9390a1155e5173b2a06f9773-image-1434399991310.JPG" class="level-image">

        In teaching computer science, you might think it would be best to have access to top tier technology -- new computers, fast Internet, the latest apps. But at Code.org, we've found that some of the most impactful computer science lessons are actually "unplugged," or conducted with little to no technology at all. In these lessons, students learn computer concepts without a computer.

        That's why all of our CS Fundamentals courses use unplugged activities to introduce computer science concepts with physical manipulatives before students write computer programs using those concepts. An example of this would be doing a dance of repeated movements with the class to understand the concept of how loops repeat commands in a computer program. This way when the students go on to writing programs using loops, the unplugged activity has set them up with something they are already familiar with and they can relate this new concept back to that activity.

        Watch the video below to understand the benefits of using unplugged activities to teach computer science.

        **As you work your way through Stages 4-8**, you'll have a chance to review some of our unplugged activities for each of the core concepts covered in this course.
      OPD-K5 Unplugged Video_copy: "It might seem counterproductive to teach computer
        science away from the computer! However, we've found that some of the most
        impactful  lessons are actually \"unplugged,\" or conducted with little to
        no technology at all. \n\nAll of our CS Fundamentals courses use unplugged
        activities to introduce computer science concepts with physical manipulatives
        before students write computer programs using those concepts. We also use
        unplugged activities to teach important concepts that are not coding, like
        digital citizenship. Watch the video below to understand the benefits of using
        unplugged activities to teach computer science."
      OPD-K5 WhatIsCS: Have you ever wondered "Exactly what is computer science?"
        Or, "Why are some computer programs written with words and some are written
        using images?" If so, watch this video; it's a great introduction to the field
        of computer science.
      OPD-K5 WhatIsCS_copy: |-
        <span style="font-size: 1.1em">
        Have you ever wondered what computer science is, or what kinds of different program languages there are? This video provides an introduction to the field of computer science.
        </span>
      OPD-K5 conditionals free response: |-
        # Reflect on Conditionals

        In this lesson, we explored how conditionals help programmers add logic to their code.

        Now take a moment to reflect. How would you explain the concept of conditionals to your students? What is the benefit of journaling as a teaching practice for comptuer science?
      OPD-K5 events free response: |-
        # Reflect on Events

        In this lesson, you stretched your coding muscles by using events to trigger certain actions in your program.

        Now take a moment to reflect. How would you explain the concept of events to your students? What are the steps you could take to debug a program?
      OPD-K5 for loops free response: |-
        # Reflect on For Loops

        Take a moment to reflect. How would you explain the concept of for loops to your students? What is one teaching practice that you could use to teach this concept?
      OPD-K5 functions free response: |-
        # Reflect on Functions

        In this lesson, we explored how functions can make you a faster and better programmer by allowing you to reuse segments of your code. In the next lesson, we'll look at the concept of variables.

        Now take a moment to reflect. How would you explain the concept of functions to your students? What is one teaching practice that you could use to teach this concept?
      OPD-K5 loops free response: |-
        # Reflect on Loops

        In this lesson, we explored how loops can be used to make code more efficient. In the next lesson, we'll look at how events can add interactivity into a program.

        Now take a moment to reflect. How can you connect the concept of loops to your students’ prior experience outside of the CS classroom? What are the benefits of pair programming, and how could you use the it when teaching this lesson?
      OPD-K5 projects free response: |-
        # Reflect on end-of-course projects

        Take a moment to reflect. How would you use end-of-course proejcts in your classroom? What is the benefit of having students complete a project?
      OPD-K5 sequencing free response: "# Reflect on Sequencing\n\nCongratulations!
        You just wrote some code. You are officially a programmer!\n\nDid you notice
        that the last puzzle was a little more difficult? It was a challenge puzzle.
        Challenge puzzles are meant to stretch the boundaries of what students will
        do. We make it clear that they should be attempted, but do not require that
        they be completed for students to succeed for the lesson.\n\nNow take a moment
        to reflect. How would you describe the difference between computer science
        and coding? How would you explain sequencing and algorithms to your students? "
      OPD-K5 sprite lab free response: "# Reflect on Sprite Lab\n\nTake a moment to
        reflect. How would you use Sprite Lab in your classroom? "
      OPD-K5 variables free response: |-
        # Reflect on Variables

        Take a moment to reflect. How would you explain the concept of variables to your students? What is one teaching practice that you could use to teach this concept?
      OPD-K5 whats your plan: "# What's your plan?\n\nThroughout the course, you will
        be asked to write reflections on what you have learned. Once you submit your
        response, it will save, and you can always come back to it. We will revisit
        it at the end of this online course.\n\nTake a moment now to reflect. How
        and when will you complete this online course to make ensure you get the most
        benefit from the experience? "
      OPD-K5-events-2: "'Tıklandığı zaman' olayına 'normal miktarda kanat çırp' bloğunu
        ekleyin, sonra 'Çalıştır' a basın.   \\\r\n\\\r\n\\---\\\r\n\\\r\nFlappy'
        i hedefe hareket ettirmek için oyun alanına dokunun veya tıklayın."
      OPD-K5-events-3: "'Çalıştığı zaman' olayı oyun başlar başlamaz kodu çalıştırmanızı
        sağlar.  \\\r\n\\\r\n\"Çalıştır\" butonuna basıldığında bölümün hızının ayarlanacağı
        bir blok eklemeyi deneyin. \\\r\n\\\r\n\\---\\\r\n\\\r\nOyunu oynayın ve devam
        etmek için hedefe kanat çırpın."
      OPD-K5-events-4: "Şimdi zemin ekledik.\n\\\r\n\\\r\n'Zemine çarptığında' olayına
        'oyunu bitir' bloğunu bağla. \\\r\n\\\r\n\\---\\\r\n\\\r\nOyunu oyna ve devam
        etmek için kuşu zemine çarptır."
      OPD-K5-events-5: "Flappy için çarpışma kodunu yazmadığınız sürece Flappy engellerin
        içinden uçacaktır. \\\r\n\\\r\n'Bir engele çarptığı zaman' olayına bir blok
        ekleyin böylece Flappy ilk borulara çarptığı zaman oyun sona erer."
      OPD-K5-events-6: "Flappy engelleri geçtiğinde puanları saymak için bir skor
        tabelası ekledik  \\\r\n\\\r\n'Bir engel geçildiğinde' olayına, puanları sayacak
        bir kod bloğu ekle, ardından Flappy'nin ilk grup borular arasında uçması için
        \"Çalıştır\" butonuna tıkla."
      OPD-K5-forloops-2: |-
        Write the code to help the bee collect all of the nectar.

        You will need lots of blocks for this challenge, but we'll learn an easier way in the next puzzle.
      OPD-K5-forloops-6: "You can also use a `for` loop to count down. \n\nTry gathering
        this nectar by counting down from **5** to **1** by **1**."
      OPD-K5-forloops-7: |-
        The last number in your `for` loop is called the **"increment"**.  Each time the loop is run, the counter variable changes by the value of the **increment**.

        Try collecting these flowers using an **increment** of 2.
      OPD-K5-projects-2: "Ne kadar öğrendiğin hayret verici! Adım adım bir oyun hazırlayalım.\\\r\n\\\r\nAraç
        kutusunda yeni bloklar kullanarak, yeni bir arka plan seçin, ardından oyununuzda
        olabilecek bir oyuncu seçin."
      OPD-K5-projects-3: "Oyuncunuzu klavyenizdeki oklara göre hareket ettirmek için
        olay işleyicileri ve işlemler gibi blokları kullan.\\\r\n\\\r\nBu bulmacayı
        tamamlamak için oyuncuyu hedeflere götürün."
      OPD-K5-projects-4: "Oyununa biraz daha karakter katalım!\\\r\n\\\r\nDaha fazla
        karakter eklemek için `aktörü ayarla` bloğunu kullanın, sonra bu bulmacayı
        tamamlamak için hedefe ilerleyin."
      OPD-K5-projects-5: "Birden fazla karakter ve aktörlerin hareket ettirilmesi
        oyun için büyük bir başlangıçtır, ancak bunu gerçek bir oyun gibi hissettirmek
        için daha fazla şey yapmak zorundayız. Bir puan ekleyelim!\\\r\n\\\r\nSkoru
        değiştirmek için 'aktör dokunursa' gibi etkinlik bloklarını kullanın. Bu bulmacayı
        tamamlamak için 10 puan topla."
      OPD-K5-projects-6: İyi iş! Çalışan bir oyunun bütün temel bileşenlerine sahipsin.
        Şimdi oyunu oynamak istediğine emin olmak için biraz vakit geçir. Oyunu kazanmak
        ya da kaybetmek için bir yol ekle, sonra bu koşullardan birini yerine getirene
        kadar oyna.
      OPD-K5-projects-7: Bitirdin! Şimdi oyununuzu oynayabilir veya dostlarınızla
        ve sınıf arkadaşlarınızla paylaşabilirsiniz!
      OPD-K5-spritelab-2: "Let's make a fish tank!  \n\nChange the tumbleweed sprite
        into any kind of fish by clicking <xml><block type=\"gamelab_allSpritesWithAnimation\"
        block-text=\"the sprite picker block\"><title name=\"ANIMATION\">\"tumbleweed\"</title></block></xml>.\n\nBe
        sure to also update this sprite's costume in <xml><block type=\"gamelab_addBehaviorSimple\"
        block-text=\"the add behavior block\"></block></xml>."
      OPD-K5-spritelab-3: "The fish is getting dizzy! \n\nChange the fish's behavior
        so that it swims left and right."
      OPD-K5-spritelab-4: "Our fish tank needs some water! \n\nUse <xml><block type=\"gamelab_setBackground\"
        inline=\"true\" block-text=\"the set background color block\">\n    <value
        name=\"COLOR\">\n      <block type=\"colour_picker\">\n        <title name=\"COLOUR\">#0000ff</title>\n
        \     </block>\n    </value>\n  </block></xml> to make the background any
        color. We recommend blue!"
      OPD-K5-spritelab-6: The fish is adventurous and wants to meet new creatures
        in the sea. Add another sprite to the fish tank. This sprite can have any
        costume other than the one you use for your fish!
      OPD-K5-spritelab-7: |-
        What do you want your fish’s new friend to do?

        Add a behavior and watch them go!
      OPD-K5-variables-1: "Let's draw an equilateral triangle. \n\nIt has to be exactly
        50 pixels long on each side."
      OPD-K5-variables-2: "Now use another loop to draw three of those triangles right
        next to each other.   \n\nYou can nest the code from your last puzzle inside."
      OPD-K5-variables-5: "Before things get tricky, can you move the length of 50
        into a variable so we can use it in the next few puzzles?  \n\n![expandable](https://images.code.org/73447d004093c6be8ab01a1358155f16-image-1498068386665.gif)"
      OPD-K5-variables-6: Now, use the `length` variable to have the artist jump forward
        and down by `length` pixels between triangles.
      Overworld Chop Tree: |-
        Odun çok önemli bir kaynaktır.
        Birçok şey odundan yapılır. Ağaca doğru yürü ve devirmek için 'yok et' bloğunu kullan.
      Overworld Chop Tree_2019: |-
        Odun çok önemli bir kaynaktır.
        Birçok şey odundan yapılır. Ağaca doğru yürü ve devirmek için 'yok et' bloğunu kullan.
      Overworld House Frame Chosen: İstediğin materyalleri kullanarak evinin geri
        kalanını inşa et. 'Tekrarla' komutu oldukça işine yarayacak.
      Overworld House Frame Chosen_2019: İstediğin materyalleri kullanarak evinin
        geri kalanını inşa et. 'Tekrarla' komutu oldukça işine yarayacak.
      Overworld Move to Sheep: Koyuna ulaşmak için ikinci bir “ilerle“ komutu ekle.
      Overworld Move to Sheep_2019: Koyuna ulaşmak için ikinci bir “ilerle“ komutu
        ekle.
      Overworld Place Wall: |-
        Her ev bir duvarla başlar.
        Tekrarla döngüsü içine 'yerleştir' ve 'ilerle' komutlarını koyarak evinin ilk parçasını inşa et.
      Overworld Place Wall_2019: |-
        Her ev bir duvarla başlar.
        Tekrarla döngüsü içine 'yerleştir' ve 'ilerle' komutlarını koyarak evinin ilk parçasını inşa et.
      Overworld Shear Sheep: Koyun kırpma zamanı! İki koyundan da yün toplamak için
        'Kırp' komutunu kullan.
      Overworld Shear Sheep_2019: Koyun kırpma zamanı! İki koyundan da yün toplamak
        için 'Kırp' komutunu kullan.
      Pixelation - Lesson 15 - Color Shades: |-
        # Color Pixelation: Task 2

        **Directions:**
        <img src='https://images.code.org/548d1daa698a17b1005b1747f152587f-image-1439476855059.png' style="width: 150px; float:right">We start you out with the row of shades of red that Maddie created in the video. Experiment with 6-bit color by filling in the bottom row of the image with shades of a different color.  Here is an example with some shades of blue.  Try your own color!
      Pixelation - Lesson 15 - Color Shades 4x4: "# Pixelation: Task 3\n\n<img src
        = \"https://code.org/images/cspunit1/ColorTask3.png\" style=\"float:right;
        margin:0 20px\" width=200>\n\n**Directions:**\nWe start you out with the 4x4
        image Maddie created in the video.\n\nYour task is to fill a 4x4 grid with
        colors using _12-bits per pixel_. The result should look something like (but
        not exactly) the image shown at right.  \n\nHere are the requirements:\n\n-
        \  Row 1 - fill with shades of red. \n-   Row 2 - shades of green. \n-   Row
        3 - shades of blue. \n-   Row 4 - shades of gray."
      Pixelation - Lesson 15 - Complete 3-bit color: "# \n\nRenk Pikselasyonu: Görev
        1\n**Yol tarifi:**\n\n-   Seni oluşturulmuş 4x2 Maddie resmi ile başlatıyoruz
        ancak son iki kareyi bıraktık.\n-   Resmi, hangi iki rengin eksik olduğunu
        bularak ve onları kodlayarak bitirmelisin."
      Pixelation 4x4 Empty: The width and height are now encoded in the pixel data.
        Can you figure out how to adjust the dimensions?
      Pixelation Bee: |-
        # Example of 12 bits per pixel

        -   This larger image of a bee encodes color with 12 bits per pixel, but viewing in hex makes it easier to see the color of each pixel.
        -   If you switch to binary mode - hold on to your hat - it's a lot of bits.
        -   Here's another mind-blowing thing to try: slide the bits per pixel up to 24 bits per pixel. What happens? Can you explain this behavior?
      Pixelation Flappy: |-
        # Example of more bits per pixel

        Here is a bigger image at 9 bits per pixel. With 9 bits per pixel you can express 512 different colors. Click through to see the next image which is even more sophisticated, but easier to understand.
      Predict Loop I: |-
        # Predict

        What will print as a result of this loop?
      Predict Loop I_2018: |-
        # Predict

        What will print as a result of this loop?
      Predict Loop I_2019: |-
        # Predict

        What will print as a result of this loop?
      Revisiting the Counter Pattern: "Today you’re going to learn how to use and
        create **functions**.\n\nCreating a function lets you make your own blocks!
        There are two parts to a function: \n\nMaking a newly named block that has
        all of the code you want to run inside of it. \n\\-xml of function definition-
        \n\nThe single green block itself that you use, or call, to run the function
        you created.\n\\-xml of function call-\n\nPrepare to get familiar with functions,
        learn how to edit them, and create your own!"
      Revisiting the Counter Pattern_2018: "Today you’re going to learn how to use
        and create **functions**.\n\nCreating a function lets you make your own blocks!
        There are two parts to a function: \n\nMaking a newly named block that has
        all of the code you want to run inside of it. \n\\-xml of function definition-
        \n\nThe single green block itself that you use, or call, to run the function
        you created.\n\\-xml of function call-\n\nPrepare to get familiar with functions,
        learn how to edit them, and create your own!"
      Revisiting the Counter Pattern_2019: "Today you’re going to learn how to use
        and create **functions**.\n\nCreating a function lets you make your own blocks!
        There are two parts to a function: \n\nMaking a newly named block that has
        all of the code you want to run inside of it. \n\\-xml of function definition-
        \n\nThe single green block itself that you use, or call, to run the function
        you created.\n\\-xml of function call-\n\nPrepare to get familiar with functions,
        learn how to edit them, and create your own!"
      Robot Doodle: "**Proje Fikri:** Gerçek dünyadan tanıdık bir şeyin resmini oluşturun.
        Bu biraz sabır ve planlama gerektirir!"
      Robot Doodle_2018: "**Proje Fikri:** Gerçek dünyadan tanıdık bir şeyin resmini
        oluşturun. Bu biraz sabır ve planlama gerektirir!"
      Room Escape Workshop - 1: "# Odayı Kur\\\r\n\n\\\r\n<img\nsrc=\"https://images.code.org/9d103d74f7c2da05aeccd5fc317e6ab6-image-1490368234432.08.44\nAM.png\"
        style=\"width:200px; float:right\">\\\r\n\\\r\nOdadan kaçış oyununu yapmak
        için kullanıcının içerisinde macera yaşayabileceği bir şekilde odayı kurmalısın.
        Bazı işle senin için yapıldı. Sadece  resim seçerek odanın farklı bölümlerinin
        neye benzeyeceğine karar vermelisin!\\\r\n\\\r\n\n# \n\nBunu Yap\\\r\n\\\r\n\n-
        \  Oyun Tasarım Görünümünde başlar\\\r\n-   Boş olan ögelerden her biri(gri
        dikdörtgen) için uygun resim ekle. Örneğin kapı etiketli nesne için kapı resmine
        ihtiycın var.\\\r\n-   Odanın neye benzeyecebileceği sağdaki resimde var."
      Room Escape Workshop - 10: |-
        # Door Open

        <img src="https://images.code.org/3651f7d5306bdcfd2d9a3d9bb842626e-image-1491066778787.12.36 PM.png" style="width:200px;float:right">

        Getting close! Lets set up the door to get ready for opening it.

        # Do This

        -   Add image for the outdoors
        -   Give it a good ID (maybe _outside_)
        -   Hide the image for the outdoors (It will be shown when door opens)
      Room Escape Workshop - 10 - 2: |-
        # Door Open

        <img src="https://images.code.org/57407cb51f50e08ecddb8ce7d2d89157-image-1491065952915.58.58 PM.png" style="width:200px;float:right">

        Open the door if they have the key!

        # Do This

        -   Add an `onEvent` block for clicking on the door
        -   Add an `if` statement inside the `onEvent` to check if the key position has moved to the bottom of the screen
            -   Add an if statement
            -   In the if statement add the `==`
            -   On one side of the `==` put the x position you move the key to when it is clicked
            -   On the other side add the `getXPosition()` block - The ID for that should be the ID of your key!
        -   Inside the `if` statement use `showElement` to show the hidden outdoors image if they got the key
      Room Escape Workshop - 3: "# Kodu Gizle\\\r\n\n\\\r\n<img\nsrc=\"https://images.code.org/6fa80456a39d9b6417545f5f66ec83a5-image-1490368827625.png\"\nstyle=\"width:400px;float:right\">\\\r\n\\\r\n\n1.
        \ Tasarım Görünümünde \"CODE\" diyen beyaz kareye tıklayın. Seçiminizin gizli
        kodunu göstermesi için değiştirin.\\\r\n2.  2\\.\n    Kodu kaplamak için resmi
        aşağıya çekin\\\r\n    \\\r\n    ![](<>)"
      Room Escape Workshop - 3-2: |-
        # Move Picture

        Now make it so the user can find the secret code by clicking the picture. When they click the picture it should move up and out of the way.

        # Do This

        -   Pull out an `onEvent` block
        -   Change the id spot in the `onEvent` block to picture (which is the ID of the picture element)
        -   Inside the `onEvent` block add the `setPosition` block with the following inputs
            -   ID: picture
            -   The next two inputs are x and y values - test out some numbers to try to get the picture to move like in the pictures on the right
      Room Escape Workshop - 4: "# Setting Up the Safe\n\nYou have generated a secret
        code and made it so users can navigate to the second room. Lets give the user
        the ability to enter the secret code when they click on the safe\n\n# Do This\n\n-
        \  Add an `onEvent` block\n    -   Pick the ID for the safe\n-   Inside the
        `onEvent` block add a <img src=\"https://images.code.org/c0964a8543728d018d5d9583319e22b9-image-1491060910093.34.36
        AM.png\" style=\"width:300px\"> block\n    -   On the left side change the
        _x_ (the name of the variable) to be _guess_ \n    -   On the right side change
        _\"Enter a value\"_ (the prompt to ask the user) to _\"Enter the code\"_"
      Room Escape Workshop - 5: "# Gizli Kodu Kontrol Etme\\\r\n\n\\\r\nŞimdi kullanıcıdan
        gizli kod tahminlerini topladınız, kodların doğruluğunu kontrol etmeye ihtiyacınız
        var! Eğer (if) ifadesini kullanabiliriz. Bir eğer(if) ifadesi şartın doğruluğunu
        kontrol eder, bu durumda kullanıcının girdiği numaranın gizli koda eşit olup
        olmadığını kontrol edecek.\\\r\n\\\r\n\n# Bunu Yap\\\r\n\n\\\r\n\\*\nKasa
        için 'onEvent' bloku içerisinde aşağıda yer alan sor(prompt) komutuna <img\nsrc=\"https://images.code.org/5e9a434b1ad6b8f010db928b668127a5-image-1491061131564.37.01\nAM.png\"
        style=\"width:100px\"> durumu ekle\\\r\n\n-   Bloku çıkartarak <img src=\"https://images.code.org/f0680979704c30975550211b03ed222e-image-1491061134985.37.08\n
        \   AM.png\" style=\"width:100px\"> iki şeyin birbirine eşitliğini kontrol
        edecek şartı oluştur\\\r\n-   \\*\n    Bir tarafa <img src=\"https://images.code.org/f0680979704c30975550211b03ed222e-image-1491061134985.37.08\n
        \   AM.png\" style=\"width:100px\"> _tahmin_ yerleştir (bizim depoladığımız
        kullanıcıların tahmin ettiği değerin adı)\\\rı\n-   Diğer tarafa gizli kodu
        yerleştirin"
      Room Escape Workshop - 7: "# Kasanın içini gösterme\\\r\n\n\\\r\n<img\nsrc=\"https://images.code.org/71e74305187a46d0badeb29a9a69ac56-image-1490371014841.55.37\nAM.png\"
        style=\"width:200px;float:right\">\\\r\n\\\r\nGizli kodu kontrol ederek programa
        başlattınız, kasayı \"açmak\" ve içindeki anahtarı göstermek isteyeceksiniz.
        Öncelikle tasarım görünümünde bu ögeleri oluşturmalısınız.\\\r\n\\\r\n\n#
        Bunu Yap\\\r\n\n\\\r\n\n-   Tasarım Görünüme geçin ve gri kare resmi ekleyin\\\r\n
        \   \\\\t\\*\n    Resim ögesini ekranda <img src=\"https://images.code.org/8f4bc108415d83e5c528c9204502efc2-image-1491059181186.06.13\n
        \   AM.png\" style=\"width:75px\"> tıklayın ve sürükleyin\\\r\n    -   İyi
        bir ID verin\n        (belki _kasaİçi_)\\\r\n    -   Resim olarak kullanmak
        için gri kareyi bulun\\\r\n    -   \\*\n        Bu kasanın önünü gizleyeceği
        için gösterildiğinde kasanın içindeymiş gibi davranacaktır. \\\r\n-   Anahtar
        resm ekleyin\\\r\n    \\\\t\\* Resim ögesini sürükleyip bırakın<img\n    src=\"https://images.code.org/8f4bc108415d83e5c528c9204502efc2-image-1491059181186.06.13\n
        \   AM.png\" style=\"width:75px\"> onto the screen\\\r\n    -   İyi bir ID
        verin\n        (belki_anahtar_)\\\r\n    -   Kullanmak üzere bir anahtar resmi
        bulun \\\r\n-   Gri kare ve anahtar için Tasarım Görünümünde gizli özelliğine
        tıklayın. Tasarım Görünümünde onlar gizli olduğunda aşağıdaki gibi görünecektir.\\\r\n
        \   \\\r\n    <img src=\"https://images.code.org/2c2c7e9996515f2b30d416b558fd1360-image-1489605526794.17.55\n
        \   PM.png\" style=\"width:200px\">"
      Room Escape Workshop - 8: |-
        # Showing inside the safe

        Now set up the code to show the key and the gray square when the user inputs the correct code.

        # Do This

        -   Inside the `if` statement you created in the `onEvent` command for the safe add:
            -   The `showElement` block to show the gray square
            -   The `showElement` block to show the key
      Room Escape Workshop - 9-2: "# Click Key\n\n<img src=\"https://images.code.org/1a736d2774860bebc5072b8ae8b38f34-image-1491066638078.10.00
        PM.png\" style=\"width:170px;float:right\">\n\nOnce a user clicks the key
        you will want to show they are holding it. You can do this by moving the key
        to the bottom corner of the room. \n\n# Do This\n\n-   Add an `onEvent` block
        for when the user clicks the key. \n-   Inside the `onEvent` block:\n    -
        \  Use `setPosition` to move the key to the bottom corner of the screen"
      Standalone_Artist_2: 120 ve 60 derecelik açılar ile 150 piksellik uzun kenarları
        kullanarak bu elması çiz.
      Standalone_Artist_3: Bu altıgeni 100 piksellik kenarlar ile 60 derecelik dönüşler
        kullanarak çizebilir misin?
      Standalone_Artist_4: Şimdi yeni bir döngü bloğun var. Komutlardan bazılarını
        yineleyecek. Bu komutları 6 kez döndürürsen ne olur?
      Standalone_Artist_5: Elmaslar ile çiçek için bu döngüyü kaç kez tekrarlaman
        lazım?
      Standalone_Artist_5.5: 'Döngüde dönmek için elmas kodlamayı ne kadar basitleştirdiğimize
        dikkat et. Çiçeği çizmek için bütün diziyi 12 kez döndürebilirsin. İpucu:
        Aynı elması tekrar çizmemek için elmas döngüsünü yaptıktan sonra 30 derece
        çevirmen lazım.'
      Standalone_Artist_6: 'Tasarım oluşturmak için bu altıgen kodu 6 kez döndür.
        Her seferinde kaç derece çevirmen lazım? İpucu:  Açıların sayısını döngü sayısına
        böl.'
      Standalone_Artist_7: 'Fonksiyon, kendini tekrarlamandan kaçınmanı sağlayan farklı
        bir programlama aracıdır. Bu fonksiyon çiçek çizebilir, yani çiçek çizmek
        istediğin zaman bunu kullanabilirsin. Çiçekleri çizmek için bunu ve yeni atlama
        bloğunu kullan. İpucu: Çiçekler 150 piksel arayla durmaktalar'
      Standalone_Artist_8: İşte altıgenleri çizmek için programladığımız ve "Şekil
        Çiz" diye adlandırdığımız bir fonksiyon. Ne olduğunu görmek ve fonksiyonlar
        nelere yapılabileceğini denemek için kodu çalıştırın. Kare, üçgen veya sekizgenlerden
        desen yapabilir misin?
      Standalone_Artist_9: Şimdi devam et ve istediğin her türlü resmi yap! Hatta
        ne istiyorsan yapabileceğin bir fonksiyonun bile var!
      The Accelerometer: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      The Accelerometer_2018: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      The Accelerometer_2019: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      U4 Model Design 1: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model.png)

        <br/>

        Click to expand

        </div>

        # Creating a digital prototype

        Using the prototype to the right (click the image to enlarge it) you're going to create a digital prototype of the example app "Recycling Finder". We've already added a few of the elements for you, including the title, but it doesn't look quite right yet. We'll go over each element of this as we go, but for now let's **just focus on the title**.

        <!--<img src="https://images.code.org/66633526e03550bedb8503fefdc2ece3-image-1502921575904.png" style="width: 300px; float: right; clear: both;">-->

        # Do This

        -   **Make sure you are in Design Mode,** the switch appears above your app window on the left.
        -   **Click on the title text** to view its properties.
        -   **Change the property "text"** to "Recycling Finder".
        -   **Change the "font size"** to make the title larger.
        -   **Change the "text alignment"** so the title is centered on the screen.

        _Note: Make sure you click **"Run"** before moving on to save your progress._
      U4 Model Design 1_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model.png)

        <br/>

        Click to expand

        </div>

        # Creating a digital prototype

        Using the prototype to the right (click the image to enlarge it) you're going to create a digital prototype of the example app "Recycling Finder". We've already added a few of the elements for you, including the title, but it doesn't look quite right yet. We'll go over each element of this as we go, but for now let's **just focus on the title**.

        <!--<img src="https://images.code.org/66633526e03550bedb8503fefdc2ece3-image-1502921575904.png" style="width: 300px; float: right; clear: both;">-->

        # Do This

        -   **Make sure you are in Design Mode,** the switch appears above your app window on the left.
        -   **Click on the title text** to view its properties.
        -   **Change the property "text"** to "Recycling Finder".
        -   **Change the "font size"** to make the title larger.
        -   **Change the "text alignment"** so the title is centered on the screen.

        _Note: Make sure you click **"Run"** before moving on to save your progress._
      U4 Model Design 1_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model.png)

        <br/>

        Click to expand

        </div>

        # Creating a digital prototype

        Using the prototype to the right (click the image to enlarge it) you're going to create a digital prototype of the example app "Recycling Finder". We've already added a few of the elements for you, including the title, but it doesn't look quite right yet. We'll go over each element of this as we go, but for now let's **just focus on the title**.

        <!--<img src="https://images.code.org/66633526e03550bedb8503fefdc2ece3-image-1502921575904.png" style="width: 300px; float: right; clear: both;">-->

        # Do This

        -   **Make sure you are in Design Mode,** the switch appears above your app window on the left.
        -   **Click on the title text** to view its properties.
        -   **Change the property "text"** to "Recycling Finder".
        -   **Change the "font size"** to make the title larger.
        -   **Change the "text alignment"** so the title is centered on the screen.

        _Note: Make sure you click **"Run"** before moving on to save your progress._
      U4 Model Design 2: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/c0a6e147bc1cb940893f87ffd25b5015-image-1505758331506.png)

        <br/>

        Click to expand

        </div>

        # Adding more text

        Each screen of your app is composed of multiple design _elements_. You can drag out elements from the "Design Toolbox" on the left side of the workspace. To add more blocks of text, just drag out additional "label" elements.

        # Do This

        -   **Drag out a new "label" element** and place it where the "home\_description" text should be.
        -   **Change the id** to match the prototype (home\_description)
        -   **Change the field "text"** to match the prototype.
        -   **Resize** the text area by clicking and dragging the bottom right corner.
        -   **Change any other properties** to make the text look like you want it to.
      U4 Model Design 2_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/c0a6e147bc1cb940893f87ffd25b5015-image-1505758331506.png)

        <br/>

        Click to expand

        </div>

        # Adding more text

        Each screen of your app is composed of multiple design _elements_. You can drag out elements from the "Design Toolbox" on the left side of the workspace. To add more blocks of text, just drag out additional "label" elements.

        # Do This

        -   **Drag out a new "label" element** and place it where the "home\_description" text should be.
        -   **Change the id** to match the prototype (home\_description)
        -   **Change the field "text"** to match the prototype.
        -   **Resize** the text area by clicking and dragging the bottom right corner.
        -   **Change any other properties** to make the text look like you want it to.
      U4 Model Design 2_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/c0a6e147bc1cb940893f87ffd25b5015-image-1505758331506.png)

        <br/>

        Click to expand

        </div>

        # Adding more text

        Each screen of your app is composed of multiple design _elements_. You can drag out elements from the "Design Toolbox" on the left side of the workspace. To add more blocks of text, just drag out additional "label" elements.

        # Do This

        -   **Drag out a new "label" element** and place it where the "home\_description" text should be.
        -   **Change the id** to match the prototype (home\_description)
        -   **Change the field "text"** to match the prototype.
        -   **Resize** the text area by clicking and dragging the bottom right corner.
        -   **Change any other properties** to make the text look like you want it to.
      U4 Model Design 3: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/cad5b0e54f67976fee68ecf29c2a603b-image-1505758463551.png)

        <br/>

        Click to expand

        </div>

        # Adding images

        The prototype just has a plain black square where the logo should be - let's add an image to spice it up. The "image" element allows you to either upload an image from your computer or select from a library of graphic icons.

        # Do This

        -   **Drag out a new "image" element** and place between the description and the title.
        -   **Change the id** to match the prototype.
        -   **Click the "Choose..." link** next to the "image" field.
        -   **Select the "Icons" tab** and choose an icon for your logo.
        -   **Change the color** of the icon using the "icon color" field.
      U4 Model Design 3_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/cad5b0e54f67976fee68ecf29c2a603b-image-1505758463551.png)

        <br/>

        Click to expand

        </div>

        # Adding images

        The prototype just has a plain black square where the logo should be - let's add an image to spice it up. The "image" element allows you to either upload an image from your computer or select from a library of graphic icons.

        # Do This

        -   **Drag out a new "image" element** and place between the description and the title.
        -   **Change the id** to match the prototype.
        -   **Click the "Choose..." link** next to the "image" field.
        -   **Select the "Icons" tab** and choose an icon for your logo.
        -   **Change the color** of the icon using the "icon color" field.
      U4 Model Design 3_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/cad5b0e54f67976fee68ecf29c2a603b-image-1505758463551.png)

        <br/>

        Click to expand

        </div>

        # Adding images

        The prototype just has a plain black square where the logo should be - let's add an image to spice it up. The "image" element allows you to either upload an image from your computer or select from a library of graphic icons.

        # Do This

        -   **Drag out a new "image" element** and place between the description and the title.
        -   **Change the id** to match the prototype.
        -   **Click the "Choose..." link** next to the "image" field.
        -   **Select the "Icons" tab** and choose an icon for your logo.
        -   **Change the color** of the icon using the "icon color" field.
      U4 Model Design 4: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/17b565cb2f5da12babc16fbd22685732-image-1505758655682.png)

        <br/>

        Click to expand

        </div>

        # Adding buttons

        Buttons allow your user to interact with your app. This prototype screen will need three buttons (each shaded gray on the prototype.) We've already added the Search button, so you just need to add Contact and About.

        # Do This

        -   **Drag out a new "button" element** for each of the two remaining buttons.
        -   **Change the ids** to match the prototype.
        -   **Change the text** to match the prototype.
        -   **Modify other properties** to make the screen look like you'd like.

        <img src="https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif" style="width: 500px;">
      U4 Model Design 4_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/17b565cb2f5da12babc16fbd22685732-image-1505758655682.png)

        <br/>

        Click to expand

        </div>

        # Adding buttons

        Buttons allow your user to interact with your app. This prototype screen will need three buttons (each shaded gray on the prototype.) We've already added the Search button, so you just need to add Contact and About.

        # Do This

        -   **Drag out a new "button" element** for each of the two remaining buttons.
        -   **Change the ids** to match the prototype.
        -   **Change the text** to match the prototype.
        -   **Modify other properties** to make the screen look like you'd like.

        <img src="https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif" style="width: 500px;">
      U4 Model Design 4_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/17b565cb2f5da12babc16fbd22685732-image-1505758655682.png)

        <br/>

        Click to expand

        </div>

        # Adding buttons

        Buttons allow your user to interact with your app. This prototype screen will need three buttons (each shaded gray on the prototype.) We've already added the Search button, so you just need to add Contact and About.

        # Do This

        -   **Drag out a new "button" element** for each of the two remaining buttons.
        -   **Change the ids** to match the prototype.
        -   **Change the text** to match the prototype.
        -   **Modify other properties** to make the screen look like you'd like.

        <img src="https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif" style="width: 500px;">
      U4 Model Design 5: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/d257d0b06a24195a40adc60e4c96c0e1-image-1505759167176.png)

        <br/>

        Click to expand

        </div>

        # Making a Search Box

        The search box in our prototype can be created using a "Text Input" element. This is a box that your user can type into, and later your software can read what was entered and do something with it.

        # Do This

        -   **Add a Text Input** element.
        -   **Change the id** to match the prototype.
        -   **Add a Label** with the text "Location" next to your text input.
      U4 Model Design 5_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/d257d0b06a24195a40adc60e4c96c0e1-image-1505759167176.png)

        <br/>

        Click to expand

        </div>

        # Making a Search Box

        The search box in our prototype can be created using a "Text Input" element. This is a box that your user can type into, and later your software can read what was entered and do something with it.

        # Do This

        -   **Add a Text Input** element.
        -   **Change the id** to match the prototype.
        -   **Add a Label** with the text "Location" next to your text input.
      U4 Model Design 5_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/d257d0b06a24195a40adc60e4c96c0e1-image-1505759167176.png)

        <br/>

        Click to expand

        </div>

        # Making a Search Box

        The search box in our prototype can be created using a "Text Input" element. This is a box that your user can type into, and later your software can read what was entered and do something with it.

        # Do This

        -   **Add a Text Input** element.
        -   **Change the id** to match the prototype.
        -   **Add a Label** with the text "Location" next to your text input.
      U4 Model Design 6: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/7c8f4893c0b1f4bcd2280c950e389c95-image-1505759396699.png)

        <br/>

        Click to expand

        </div>

        # Checkboxes

        The type of recyclables you're searching for can be set using "Checkbox" elements. We already added a checkbox and label for glass, so you just need to add ones for paper and plastic.

        # Do This

        -   **Add a Checkbox** for each of the options.
        -   **Change the ids** to match the prototype.
        -   **Add labels** to describe each checkbox.
      U4 Model Design 6_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/7c8f4893c0b1f4bcd2280c950e389c95-image-1505759396699.png)

        <br/>

        Click to expand

        </div>

        # Checkboxes

        The type of recyclables you're searching for can be set using "Checkbox" elements. We already added a checkbox and label for glass, so you just need to add ones for paper and plastic.

        # Do This

        -   **Add a Checkbox** for each of the options.
        -   **Change the ids** to match the prototype.
        -   **Add labels** to describe each checkbox.
      U4 Model Design 6_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/7c8f4893c0b1f4bcd2280c950e389c95-image-1505759396699.png)

        <br/>

        Click to expand

        </div>

        # Checkboxes

        The type of recyclables you're searching for can be set using "Checkbox" elements. We already added a checkbox and label for glass, so you just need to add ones for paper and plastic.

        # Do This

        -   **Add a Checkbox** for each of the options.
        -   **Change the ids** to match the prototype.
        -   **Add labels** to describe each checkbox.
      U4 Model Design 7: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model.png)

        <br/>

        Click to expand

        </div>

        # Finishing Touches

        By now you should have a fairly complete (though non-functional) digital version of the paper prototype we started with. All that's left to do is check back over your paper prototype and add any final touches you might have missed.

        # Do This

        -   **Check over the prototype** to make sure you've included everything.
        -   **Read through your IDs** and fix any that aren't descriptive.
        -   **Clean up** any rough edges by resizing or moving around elements.
      U4 Model Design 7_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model.png)

        <br/>

        Click to expand

        </div>

        # Finishing Touches

        By now you should have a fairly complete (though non-functional) digital version of the paper prototype we started with. All that's left to do is check back over your paper prototype and add any final touches you might have missed.

        # Do This

        -   **Check over the prototype** to make sure you've included everything.
        -   **Read through your IDs** and fix any that aren't descriptive.
        -   **Clean up** any rough edges by resizing or moving around elements.
      U4 Model Design 7_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model.png)

        <br/>

        Click to expand

        </div>

        # Finishing Touches

        By now you should have a fairly complete (though non-functional) digital version of the paper prototype we started with. All that's left to do is check back over your paper prototype and add any final touches you might have missed.

        # Do This

        -   **Check over the prototype** to make sure you've included everything.
        -   **Read through your IDs** and fix any that aren't descriptive.
        -   **Clean up** any rough edges by resizing or moving around elements.
      U4 Model Program 1: |-
        # Adding a New Screen

        To complete your app, you're going to need more than than just a home screen. Each card that you created in your paper prototype is represented by a "screen" in App Lab. To create more screens, just click the dropdown at the top of the app display and select "New Screen..."

        <img src="https://images.code.org/2b49c36a57fb904d4fcf219ca498647d-image-1504714832027.png" style="width: 200px">

        # Do This

        -   **Create a New Screen** and give it the ID "about".
      U4 Model Program 1.5: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model_about.png)

        <br/>

        Click to expand

        </div>

        # Design the About Screen

        To add elements to your new About screen, you'll need to first select it from the screens dropdown.

        # Do This

        -   **Complete the About screen** using the prototype to the right.
        -   **Use the screens dropdown** to switch between your Home and About screens.
      U4 Model Program 1.5_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model_about.png)

        <br/>

        Click to expand

        </div>

        # Design the About Screen

        To add elements to your new About screen, you'll need to first select it from the screens dropdown.

        # Do This

        -   **Complete the About screen** using the prototype to the right.
        -   **Use the screens dropdown** to switch between your Home and About screens.
      U4 Model Program 1.5_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model_about.png)

        <br/>

        Click to expand

        </div>

        # Design the About Screen

        To add elements to your new About screen, you'll need to first select it from the screens dropdown.

        # Do This

        -   **Complete the About screen** using the prototype to the right.
        -   **Use the screens dropdown** to switch between your Home and About screens.
      U4 Model Program 1_2018: |-
        # Adding a New Screen

        To complete your app, you're going to need more than just a home screen. Each card that you created in your paper prototype is represented by a "screen" in App Lab. To create more screens, just click the dropdown at the top of the app display and select "New Screen..."

        <img src="https://images.code.org/2b49c36a57fb904d4fcf219ca498647d-image-1504714832027.png" style="width: 200px">

        # Do This

        -   **Create a New Screen** and give it the ID "about".
      U4 Model Program 1_2019: |-
        # Adding a New Screen

        To complete your app, you're going to need more than just a home screen. Each card that you created in your paper prototype is represented by a "screen" in App Lab. To create more screens, just click the dropdown at the top of the app display and select "New Screen..."

        <img src="https://images.code.org/2b49c36a57fb904d4fcf219ca498647d-image-1504714832027.png" style="width: 200px">

        # Do This

        -   **Create a New Screen** and give it the ID "about".
      U4 Model Program 2: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/9ca7398a9b7403dc39ec6a6b2d2b8a5e-image-1477346132059.png)

        <br/>

        Click to expand

        </div>

        # Screen Import

        In addition to adding new blank screens, you can import screens from "Import Screen..." To import a screen from someone else, you'll need them to give you the sharing URL.

        **Note:** Screens you import _must not_ share any IDs with elements already in your app!

        # Do This

        Another student has created a search results screen that you can import into your app. Their app's share link is **<a href="https://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/" target="_blank">https\://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/</a>**

        -   **Select "Import Screen...** from the screens dropdown.
        -   **Copy and paste the above url** into the import screens dialog.
        -   **Select the screen** you wish to import.
        -   **Click Import** to import the screen.
        -   **Use the screens dropdown** to switch between your Home, About, and Search screens.
      U4 Model Program 2.5: |-
        # Contact Screen Import

        Yet another student created a Contact screen that you can import into your app. Their share link is **<a href ="https://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/" target="_blank">https\://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/</a>**

        # Do This

        -   **Select "Import Screen...** from the screens dropdown.
        -   **Copy and paste the above url** into the import screens dialog.
        -   **Select the screen** you wish to import.
        -   **Click Import** to import the screen.
        -   **Use the screens dropdown** to make sure your app has Home, About, Contact, and Search screens.
      U4 Model Program 2.5_2018: |-
        # Contact Screen Import

        Yet another student created a Contact screen that you can import into your app. Their share link is **<a href ="https://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/" target="_blank">https\://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/</a>**

        # Do This

        -   **Select "Import Screen...** from the screens dropdown.
        -   **Copy and paste the above url** into the import screens dialog.
        -   **Select the screen** you wish to import.
        -   **Click Import** to import the screen.
        -   **Use the screens dropdown** to make sure your app has Home, About, Contact, and Search screens.
      U4 Model Program 2.5_2019: |-
        # Contact Screen Import

        Yet another student created a Contact screen that you can import into your app. Their share link is **<a href ="https://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/" target="_blank">https\://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/</a>**

        # Do This

        -   **Select "Import Screen...** from the screens dropdown.
        -   **Copy and paste the above url** into the import screens dialog.
        -   **Select the screen** you wish to import.
        -   **Click Import** to import the screen.
        -   **Use the screens dropdown** to make sure your app has Home, About, Contact, and Search screens.
      U4 Model Program 2_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/9ca7398a9b7403dc39ec6a6b2d2b8a5e-image-1477346132059.png)

        <br/>

        Click to expand

        </div>

        # Screen Import

        In addition to adding new blank screens, you can import screens from "Import Screen..." To import a screen from someone else, you'll need them to give you the sharing URL.

        **Note:** Screens you import _must not_ share any IDs with elements already in your app!

        # Do This

        Another student has created a search results screen that you can import into your app. Their app's share link is **<a href="https://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/" target="_blank">https\://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/</a>**

        -   **Select "Import Screen...** from the screens dropdown.
        -   **Copy and paste the above url** into the import screens dialog.
        -   **Select the screen** you wish to import.
        -   **Click Import** to import the screen.
        -   **Use the screens dropdown** to switch between your Home, About, and Search screens.
      U4 Model Program 2_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/9ca7398a9b7403dc39ec6a6b2d2b8a5e-image-1477346132059.png)

        <br/>

        Click to expand

        </div>

        # Screen Import

        In addition to adding new blank screens, you can import screens from "Import Screen..." To import a screen from someone else, you'll need them to give you the sharing URL.

        **Note:** Screens you import _must not_ share any IDs with elements already in your app!

        # Do This

        Another student has created a search results screen that you can import into your app. Their app's share link is **<a href="https://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/" target="_blank">https\://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/</a>**

        -   **Select "Import Screen...** from the screens dropdown.
        -   **Copy and paste the above url** into the import screens dialog.
        -   **Select the screen** you wish to import.
        -   **Click Import** to import the screen.
        -   **Use the screens dropdown** to switch between your Home, About, and Search screens.
      U4 Model Program 3: |-
        # Button Events

        With our screens in place, it's time to start actually _programming_ the app so that it responds to button clicks. For each button on each screen, you'll want to add an `onEvent` block that watches for that button to be clicked and responds appropriately. To start off with we'll just watch the "home\_search\_btn" button and print something to the console when it's clicked

        # Do This

        You're now in Code Mode (you can use the buttons above your app to switch between Code Mode and Design Mode). This is where you can write the code that will respond to users interacting with your app.

        ![](https://images.code.org/278b27dd31b6ca014c0dd32c5f964a54-image-1505764431751.png)

        -   **Drag out an `onEvent` block** from the code toolbox.
        -   **Select "home\_search\_btn"** from the "id" dropdown.
        -   **Drag out a `console.log` block** from the variables drawer.
        -   **Run your app**.
        -   **Click the Search button** and look for messages in the console.
      U4 Model Program 3_2018: |-
        # Button Events

        With our screens in place, it's time to start actually _programming_ the app so that it responds to button clicks. For each button on each screen, you'll want to add an `onEvent` block that watches for that button to be clicked and responds appropriately. To start off with we'll just watch the `home_search_btn` button and print something to the console when it's clicked

        # Do This

        You're now in Code Mode (you can use the buttons above your app to switch between Code Mode and Design Mode). This is where you can write the code that will respond to users interacting with your app.

        ![](https://images.code.org/278b27dd31b6ca014c0dd32c5f964a54-image-1505764431751.png)

        -   **Drag out an `onEvent` block** from the code toolbox.
        -   **Select `home_search_btn`** from the "id" dropdown.
        -   **Drag out a `console.log` block** from the variables drawer.
        -   **Run your app**.
        -   **Click the Search button** and look for messages in the console.
      U4 Model Program 3_2019: |-
        # Button Events

        With our screens in place, it's time to start actually _programming_ the app so that it responds to button clicks. For each button on each screen, you'll want to add an `onEvent` block that watches for that button to be clicked and responds appropriately. To start off with we'll just watch the `home_search_btn` button and print something to the console when it's clicked

        # Do This

        You're now in Code Mode (you can use the buttons above your app to switch between Code Mode and Design Mode). This is where you can write the code that will respond to users interacting with your app.

        ![](https://images.code.org/278b27dd31b6ca014c0dd32c5f964a54-image-1505764431751.png)

        -   **Drag out an `onEvent` block** from the code toolbox.
        -   **Select `home_search_btn`** from the "id" dropdown.
        -   **Drag out a `console.log` block** from the variables drawer.
        -   **Run your app**.
        -   **Click the Search button** and look for messages in the console.
      U4 Model Program 4: |-
        # Changing Screens On Click

        The `setScreen` block will change your app to whichever screen you specify. If you place a `setScreen` block _inside_ an `onEvent` block, you can program your buttons to change to the correct screen.

        # Do This

        Using the `onEvent` block that you've created, make your program change to the "search" screen when the "home\_search\_btn" is clicked.

        -   **Drag out a `setScreen` block** an put it inside the `onEvent` block.
        -   **Select "search"** from the `setScreen` dropdown.
        -   **Run your app** and test the "home\_search\_btn" button.
      U4 Model Program 4_2018: |-
        # Changing Screens On Click

        The `setScreen` block will change your app to whichever screen you specify. If you place a `setScreen` block _inside_ an `onEvent` block, you can program your buttons to change to the correct screen.

        # Do This

        Using the `onEvent` block that you've created, make your program change to the "search" screen when the `home_search_btn` is clicked.

        -   **Drag out a `setScreen` block** an put it inside the `onEvent` block.
        -   **Select "search"** from the `setScreen` dropdown.
        -   **Run your app** and test the `home_search_btn` button.
      U4 Model Program 4_2019: |-
        # Changing Screens On Click

        The `setScreen` block will change your app to whichever screen you specify. If you place a `setScreen` block _inside_ an `onEvent` block, you can program your buttons to change to the correct screen.

        # Do This

        Using the `onEvent` block that you've created, make your program change to the "search" screen when the `home_search_btn` is clicked.

        -   **Drag out a `setScreen` block** an put it inside the `onEvent` block.
        -   **Select "search"** from the `setScreen` dropdown.
        -   **Run your app** and test the `home_search_btn` button.
      U4 Model Program 5: |-
        # Wire Up the Other Buttons

        Now that you've made one button work, just follow the same pattern for all of your others.

        # Do This

        -   **Add an `onEvent` block** for each button.
        -   **Select the button ID** from the "id" dropdown.
        -   **Add a `setScreen` block** inside each `onEvent` block.
        -   **Select the screen ID** from each `setScreen` dropdown.
        -   **Run your app** and test that all of the buttons work.
      U4 Model Program 5_2018: |-
        # Wire Up the Other Buttons

        Now that you've made one button work, just follow the same pattern for all of your others.

        # Do This

        -   **Add an `onEvent` block** for each button.
        -   **Select the button ID** from the "id" dropdown.
        -   **Add a `setScreen` block** inside each `onEvent` block.
        -   **Select the screen ID** from each `setScreen` dropdown.
        -   **Run your app** and test that all of the buttons work.
      U4 Model Program 5_2019: |-
        # Wire Up the Other Buttons

        Now that you've made one button work, just follow the same pattern for all of your others.

        # Do This

        -   For each button, create an event that links to the appropriate screen when the button is pressed.
        -   Run your app and test that all of the buttons work.
      Underground Avoiding Lava: Bu blokların bazılarının altında lav gizli ve ilerlemeden
        önce bunların üstünü örtmen gerekir. 'Eğer' komutu burada işine yarayacak.
        Bu blokları çıkarmak için doğru yere bir adet 'ilerle' komutu ekle.
      Underground Avoiding Lava_2019: Bu blokların bazılarının altında lav gizli ve
        ilerlemeden önce bunların üstünü örtmen gerekir. 'Eğer' komutu burada işine
        yarayacak. Bu blokları çıkarmak için doğru yere bir adet 'ilerle' komutu ekle.
      Underground If Statements: Şimdi işler biraz daha zorlaşıyor. 3 kızıltaş çıkarın
        ama lavın içine düşmeyin. Ortaya çıkardığınız lavların üstüne kırıktaş yerleştirmek
        için bir "eğer" komutu kullanın.
      Underground If Statements_2019: Şimdi işler biraz daha zorlaşıyor. 3 kızıltaş
        çıkarın ama lavın içine düşmeyin. Ortaya çıkardığınız lavların üstüne kırıktaş
        yerleştirmek için bir "eğer" komutu kullanın.
      Using Accelerometer Events: "Today you’re going to learn how to use and create
        **functions**.\n\nCreating a function lets you make your own blocks! There
        are two parts to a function: \n\nMaking a newly named block that has all of
        the code you want to run inside of it. \n\\-xml of function definition- \n\nThe
        single green block itself that you use, or call, to run the function you created.\n\\-xml
        of function call-\n\nPrepare to get familiar with functions, learn how to
        edit them, and create your own!"
      Using Accelerometer Events_2018: "Today you’re going to learn how to use and
        create **functions**.\n\nCreating a function lets you make your own blocks!
        There are two parts to a function: \n\nMaking a newly named block that has
        all of the code you want to run inside of it. \n\\-xml of function definition-
        \n\nThe single green block itself that you use, or call, to run the function
        you created.\n\\-xml of function call-\n\nPrepare to get familiar with functions,
        learn how to edit them, and create your own!"
      Using Accelerometer Events_2019: "Today you’re going to learn how to use and
        create **functions**.\n\nCreating a function lets you make your own blocks!
        There are two parts to a function: \n\nMaking a newly named block that has
        all of the code you want to run inside of it. \n\\-xml of function definition-
        \n\nThe single green block itself that you use, or call, to run the function
        you created.\n\\-xml of function call-\n\nPrepare to get familiar with functions,
        learn how to edit them, and create your own!"
      'Video: Intro to CSS Part 2_2019': |-
        ## Question to Consider

        -   How does the web page know what stylesheet it should be using?
      'Video: Intro to CSS_2019': |-
        ## Questions to Consider

        -   How is the style of a web page different from structure?
        -   Why might you want your web page to have a certain style?
      Vigenere: "# Encrypt and decrypt a message with the Vigenère cipher\n\nThis
        is an interactive version of the Vigenère cipher that animates the encryption
        and decryption as it’s happening, given a piece of text to encrypt or decrypt
        and the key.\n\n# Do this\n\n### Encrypt a message\n\nClick Step several times,
        and trace what’s happening. Pay attention to:\n\n-   How the ciphertext is
        being produced\n-   What happens when you get to the last character of the
        key\n-   After you’ve stepped through a few characters click Play to watch
        the rest animate\n-   Hit Restart and play the animation again. You can use
        the speed slider to speed it up or slow it down  \n\n![](https://images.code.org/06858f88ac12997bba73f4f76638a068-image-1443574425185.gif)\n\n###
        Decrypt a message\n\nEncrypt a message as above, then:  \n\n-   Highlight
        and copy the ciphertext\n-   Paste it into the plaintext area. Note: Don’t
        change the key\n-   Change the Encrypt/Decrypt toggle to Decrypt\n-   Hit
        Step a few times, and then Play\n\nYou should see the original text emerge.\\\n![](https://images.code.org/dc89d6c19c17adb23b6b5ff9a62c4583-image-1443574425182.gif)\n\nHow
        hard would it be to crack a message encrypted with this cipher? Does the length
        of the key make a difference?"
      Virtual Pet 1: "This is Geraldine, your new pet giraffe.  \n\nWhat do you think
        will happen if you press \"▶ Run\" and then click on her?"
      Virtual Pet 1 Predict: |-
        **Make a prediction:** This is Geraldine, your new pet giraffe.

        What do you think will happen if you press "▶ Run" and then click on her?
      Virtual Pet 1_2019: "**Free Play**: Whoa! Check out this cool pet! \n\nWhile
        reading the code below, ask yourself:\n\n-   How do you command the pet to
        move? \n-   What happens when the pet touches the ice cream cone? How about
        the pepper?\n-   How is the `energy` variable used? How can you check the
        pet's current `energy` value?\n\nRun the code and play with the pet! When
        you are done, click **Finish**."
      Virtual Pet 2: "There's a mud puddle over in the corner.  \n\nCreate an **event**
        so that when Geraldine touches the puddle, her color changes to brown."
      Virtual Pet 2_2019: "Now it's your turn to create your own virtual pet! Start
        by giving it a look you like.\n\n1.  Click the **Costumes** tab at the top-left
        of your screen (next to **Code**). \n2.  Edit the starting costume, or add
        a new one that you like. \n3.  Change the sprite's costume to your own in
        the code below.\n4.  Click **Run** to see your pet's new look!"
      Virtual Pet 3: "We can’t have a dirty giraffe wandering around!  \n\n1.  Add
        a new soap sprite to the screen.\n2.  Can you make it so that when the giraffe
        and the soap touch, the giraffe goes back to its normal color?\n\n* * *\n\nTo
        reset the color, use this block:\n<xml><block type=\"gamelab_removeTint\"
        inline=\"true\">\n      <value name=\"THIS\">\n        <block type=\"sprite_variables_get\">\n
        \         <title name=\"VAR\">mySprite</title>\n        </block>\n      </value>\n
        \   </block></xml>"
      Virtual Pet 3_2019: |-
        Create events to make your pet move on command!

        Start by using <xml><block type="gamelab_keyPressed" block-text="the while up key pressed event block"><title name="CONDITION">"while"</title><title name="KEY">"up"</title></block></xml> along with <xml><block type="gamelab_moveInDirection" block-text="the move in direction action block"><title name="DIRECTION">"North"</title></block></xml> to make your pet move North **while** the up arrow is pressed.

        Repeat the above for the other three directions (South, West, East) and arrow keys (down, left, right)!
      Virtual Pet 4: "We don't want to wait for the giraffe to clean itself every
        time.  \n\nAdd a behavior to your soap to make it draggable, then drag it
        over to clean the giraffe!"
      Virtual Pet 4_2019: "Let's make some wandering food!\n\n1.  Add **two** sprites
        to your world. \n2.  Make one sprite look like what your pet **likes** to
        eat, and the other look like what it **doesn't** like to eat.\n3.  Make each
        food sprite begin the **wandering** behavior immediately after it appears."
      Virtual Pet 5: "All of this play takes energy!  \n\nAdd actions to each event
        so the giraffe gets a little smaller (shrinks by 5) each time it collides
        with another sprite.  "
      Virtual Pet 5_2019: |-
        Use <xml><block type="gamelab_checkTouching" block-text="the when touching block"></block></xml> with <xml><block type="gamelab_jumpTo" block-text="the jump to location block"></block></xml> to **simulate** "eating" in your virtual world!

        1.  Create an event that makes one of your food sprites jump to a random location when your pet touches it.
        2.  Repeat the above for the other food sprite.
      Virtual Pet 6: "A balanced diet is important! We have to feed the giraffe to
        get its strength back.  \n\nAdd an apple to the scene and have it return the
        giraffe back to regular size when the two sprites touch.  "
      Virtual Pet 6_2019: "Use <xml><block type=\"variables_set\" block-text=\"the
        set variable block\"><title name=\"VAR\">energy</title></block></xml> along
        with <xml><block type=\"math_change\" block-text=\"the change variable block\"><title
        name=\"VAR\">energy</title></block></xml> to make eating food affect your
        pet's energy! The more energy it has, the faster it moves! \n\n1.  Set the
        variable `energy` to 5 when the program starts.\n2.  When your pet eats food
        it **likes**, add 1 to `energy`.\n3.  When your pet eats food it **doesn't
        like**, set `energy` back to 5.\n4.  Change each arrow key event so that your
        pet now moves `energy` pixels instead of a specific number."
      Virtual Pet 7_2019: "You can check your pet's `energy` value with <xml><block
        type=\"gamelab_printText\" block-text=\"the print block\"></block></xml>,
        a new block found in the `World` category! \n\nCreate an event that makes
        the value of `energy` be printed when the pet sprite is clicked. "
      Virtual Pet 8_2019: "**Free Play:** Your virtual pet is _VIRTUALLY AWESOME!_
        \n\nWhat more can you do? Try these ideas:\n\n-   Change the background to
        a color or an image.\n-   Print more! Try printing _\"Yum! Energy increased!\"_
        when the pet eats food it likes, or _\"Yuck! Energy reset!\"_ when it eats
        food it doesn't like.\n-   Add another sprite that interacts with your pet
        in a different way. How about a **toy** sprite?\n-   Add another variable
        that can affect your pet or the world. What might `happiness` or `age` do?\n-
        \  Experiment with behaviors! Try editing the **wandering** behavior to slow
        down or speed up the food sprites (hint: their \"speed\" is currently 5...)."
      Virtual Pet Freeplay: "Freeplay: What more can you make your giraffe do? \n\n-
        \  Can you add more special items for your virtual pet?  \n-   Can you give
        her some friends?  "
      'Widget: Text Compression': Look for patterns (repeated words or phrases) in
        the text. Enter the patterns you see into the dictionary on the right. As
        you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      behaviors 1: |-
        Make a prediction! Study the code.

        -   The sprite will spin.
        -   The sprite will shrink.
        -   The sprite will move.
        -   The sprite will change colors.
      behaviors 2: |-
        Fly the rocket to the stars!

        -   Change the behavior of the rocket so that it flies upwards in the display area.
      behaviors 3: |-
        Help the rover outrun the robot!

        -   Edit the behavior of the rover sprite (top) so that it goes faster than the robot.
      behaviors 3a: |-
        Edit the `spinning right` behavior. The <xml><block type="sprite_parameter_get" block-text="this sprite"><title name="VAR">this sprite</title></block></xml> block should be used instead of the `costume` block. This will make it work for any sprite, regardless of the costume it uses.

        **Debug:** Make all of the stars spin the same way!
      behaviors 4: Make a prediction! Which path will the satellite follow to reach
        the solar system?
      behaviors 5: |-
        Write your own behavior.

        -   Write a new behavior for this astronaut to lead it towards one of the four ships in the display area.
      behaviors 6: |-
        Make the ball roll.

        -   Create a new behavior and use it to make the ball roll. Your behavior should combine two different actions.

        ![](<https://images.code.org/4c81af6da51ce5b8ce83e9056dbfe34c-image-1567714812224.2019-09-05 16_19_45.gif>)
      behaviors 7: |-
        Drive off into the horizon!

        -   Create a new behavior and use it to make the car move up (north) and shrink. If you do it right, it could look like it is driving off into the horizon.

        ![](<https://images.code.org/e0ea2b008bf557ea81e99a27dd03ef03-image-1567713536857.2019-09-05 15_58_25.gif>)
      behaviors free play: "**Free play:** Create your own outer space scene!"
      comment_intro_maze_2018: "_\"I'm confused. Help me remember how to solve this
        maze.\"_  \n\n* * *\n\nTo pass this puzzle, solve the maze and use the new
        <xml><block type=\"comment\">\n    <title name=\"TEXT\"> </title>\n  </block></xml>
        block to leave yourself quick reminders. They can help you remember what you
        were doing and why!   \n\nComments are only used for **you**, they don't affect
        the play area."
      course1_artist_loops_challenge2: Bir oyun oynayalım! Çizebildiğin kadar X çiz!
        Üst üste 3 alabilir miyim?
      course1_artist_loops_challenge3: |-
        **Tweet!**

        _"Can you help me make two bird houses?"_
      course1_artist_loops_challenge4: Zar atma zamanı! Çizmek için yardımcı olabilir
        misin?
      course1_maze_debugging_challenge1: |-
        Hatayı ayıkla.
        Fazla blokları çıkar ve eksik blokları ekle. Kuşu domuza ulaştır!
      course1_maze_debugging_challenge2: Bu bölümün hatalarını ayıkla. Bunlar doğru
        bloklar, ama yanlış sıradalar!
      course1_maze_seq_challenge2: Her yönde yalnızca 4 kez ilerleyebilirsin. Kod
        bloklarını bitirmeden bir çözüm yolu bulabilir misin?
      course1_playlab_events_challenge1: |-
        _"Where are my friends hiding? In this game, clicking on me will show my friend Olive the cat!"_

        Clicking Olive will make Robin appear! Can you write code to show the rest of the characters too?

        In this puzzle, make sure to click for hints! The hints will help you do this project step-by-step!

        ![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png>)
      course1_playlab_events_challenge2: |-
        _"Let's have a party! Give my friends something to do when you click or tap them."_

        What will the animals say? What else will happen?

        In this puzzle, make sure to click for hints! The hints will give you fun things to try!

        ![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png>)
      course2_artist_nestedLoops_challenge1: "Bunun gibi bir resmin nasıl yapılacağını
        çözebilir misin?\\\r\n\\\r\n\n-   Her iki şeklin **50 piksel yan alanı var.**\\\r\n-
        \  _sekizgenler_ **45 derecelik** dönüşlerle yapılmış.\\\r\n-   _üçgenler_
        **120 derecelik** dönüşlerle yapılmış."
      course2_artist_nestedLoops_challenge2: "Bunun gibi bir resmin nasıl yapılacağını
        çözebilir misin?\\\r\n\\\r\n\n-   Birinci iç döngü bir sekizgen oluşturmalı.\\\r\n-
        \  İkinci iç döngü bir altıgen oluşturmalı.\\\r\n-   Üçüncü iç döngü bir kare
        oluşturmalı."
      course2_artist_prog_challenge1: Hayvanların her biri için odalar çiz. Bu bulmacayı
        çözmek için birçok farklı yol var, bol bol eğlen!
      course2_artist_prog_challenge2: _Help me paint the yellow lines on this road!_
      course2_bee_conditionals_challenge1: Bütün nektarı topla veya hepsini bal yap.
        Nektarı sadece çiçeklerden toplayabilirsin ve peteklerden bal yapabilirsin.
        Çiçek veya petek var mı diye herhangi alanı bir kontrol et.
      course2_bee_conditionals_challenge2: Bütün nektarı topla veya hepsini bal yap.
        Bir çiçekteki bütün nektarı 'While nectar > 0' döngüsünü kullanarak tamamlayabilirsin.
      course2_collector_loops_challenge2: |-
        _"Let's hunt for treasure - using loops!"_

        Help the collector by debugging this code. Get all of the treasure!
      course2_collector_prog_challenge1: Dikkatli bak! Hazinenin **10** parçasının
        tamamını toplayabilir misin?
      course2_collector_prog_challenge2: Bu mağarada **20** parça hazine var. Meydan
        okumayı tamamlamak için en az yarısını toplayın!
      course2_harvester_loops_challenge1: Bütün mısırları topla.
      course2_harvester_loops_challenge2: Tüm marulları topla. Ağaçlardan ve tarlalardan
        sakın!
      course2_maze_programming_challenge1: _"The pig is hiding! Can you help me find
        a way around?"_
      course2_maze_programming_challenge2: Bazen aynı sorunu çözmek için birden fazla
        yol vardır. Bazen geriye doğru gitmek daha hızlı olabilir!
      course3_artist_functions_challenge1: Bir kez bir fonksiyonu tanımladıktan sonra
        onu tekrar tekrar çalıştırabilirsin - ne zaman ve nerede istersen! Nasıl çalıştığını
        görmek için bu kodu deneyin, sonra onu kendi etkileyici tasarımınızı yapmak
        için değiştirin!
      course3_artist_functions_challenge2: "Sadece tuvalin köşeleri gibi daha önceden
        belirlediğin noktalara zıplamakla kalmaz, 'jump to' komutunu kullanarak tam
        olarak istediğin noktaya ulaşabilirsin. Nasıl çalıştığını görmek için aşağıdaki
        kodu dene, sonra kendi programını yap!\\\r\n<xml>\\\r\n  <block\ntype=\"jump_to_xy\">\\\r\n
        \   <title name=\"XPOS\">???</title>\\\r\n    <title\nname=\"YPOS\">???</title>\\\r\n
        \   </block></xml>"
      course3_bee_debugging_challenge1: Arıların nasıl nektar topladığını izle. Benzer
        deseni kullanarak arıların bütün balı yapmasına yardım edebilir misin?
      course3_bee_functions_challenge1: Bu meydan okumada tek başınasın. Göründüğünden
        daha zor olabilir!
      course3_bee_functions_challenge2: Bu mücadelede tamamen kendi başınasın!
      course3_bee_functions_challenge3: Bir yol var iken nektar ve bal toplayan yeni
        bir fonksiyon oluşturun. Fonksiyonu bulmacayı tamamlamak için kullanın!
      course3_bee_functions_challenge4: Bulmacayı tamamlamak için öğrendiğin her şeyi
        kullan!
      course3_collector_debugging_challenge2: İç içe döngülerin uzmanı mısınız? Hazinenin
        tümünü toplamak öğrendiklerinizi kullanın!
      course3_farmer_condLoops_challenge1: "Kabaklar nereden dönmen gerektiğini belirliyor.
        _Kabaklardan sağa dön._ Aksi halde düz gitmeye devam et ama yol boyunca bütün
        marul ve mısırları toplamayı unutma. \\\r\n\\\r\n**Her gizli ürün bir mısır
        ya da marula sahip.**"
      course3_farmer_condLoops_challenge2: "_\"It's a vegetable maze!\"_ \n\nTurn
        right at pumpkins, turn left at the lettuce. Collect everything to complete
        the level."
      course3_farmer_until_challenge2: Kıvrımlı yolu takip etmek için eğer/değilse
        (if/else) bloklarını kullan. Her köşede ürünleri silmek amacıyla bir döngü
        içerisinde 'remove1' komutunu kullan.
      course3_maze_debugging_challenge1: _"Am I just going around in circles?"_
      course3_maze_debugging_challenge2: '-   "Çok sık dönersem, başım dönebilir!
        Sadece dört dönüş komutu ile domuza ulaşmama yardım et." \*'
      course3_maze_until_challenge1: Hiçbir ipuçları yok sadece meydan okuma. Zombiyi
        ayçiçeğine ulaştır.
      course3_playLab_challenge1: "-   **Sincaplar** **dinozorların** şehre indiğini
        görünce dehşete kapıldılar. Cesur **şövalye**onları paniklemekten kurtarabilir
        mi?\\*\\\r\n    \\\r\n    Burada sizin için önceden başlatılmış çeşitli oyunlar
        var! Nasıl çalıştığını görmek için oyna. \\\r\n    \\\r\n    \\\r\n    Yeterince
        puan aldığınıza ve bitirdiğinizde bir şeyler olmalı. Oyunun olması gerektiği
        gibi çalışması için 'oyun kazan' (win game) ve 'oyun kaybet' (lose game) fonksiyonlarına
        birkaç kod ekleyin. \\\r\n    Fikirler için ipucuna tıklayın!"
      course4_artist_binary_challenge1: Bulmaca içinde her ikili değeri (0 veya 1)
        yalnızca bir kez kullanabilirsiniz. Bu çizimi tamamlamak için iç içe döngüleri
        kullanmayı deneyin.
      course4_artist_binary_challenge2: "Bu ızgarada temsil edilen 256 bit var - bu,
        küçük bir değişikliğin kolayca büyük problemlere sebep olacağı anlamına gelir.
        Bu logoyu normal haline çevirmekte yeterince ısrarcı mısın?\\\r\n\\\r\n![](https://images.code.org/74e15f513982b47762dd33ebbc21e5e9-image-1498776314610.png)"
      course4_artist_concept_challenge2: Aşağıdaki kodları kullanarak beş adet rüzgar
        gülü tasarımı oluştur.
      course4_artist_functions_challenge2: "Sadece tuvalin köşeleri gibi daha önceden
        belirlediğin noktalara zıplamakla kalmaz, 'jump to' komutunu kullanarak tam
        olarak istediğin noktaya ulaşabilirsin. Nasıl çalıştığını görmek için aşağıdaki
        kodu dene, sonra kendi programını yap!\\\r\n<xml>\\\r\n  <block\ntype=\"jump_to_xy\">\\\r\n
        \   <title name=\"XPOS\">???</title>\\\r\n    <title\nname=\"YPOS\">???</title>\\\r\n
        \   </block></xml>"
      course4_artist_fwp_challenge1: Bu programı çalıştırmayı deneyin ve ne olacağını
        görmek için değişiklikler yapın. Nasıl çalıştığını tahmin edebiliyor musun?
        (Ya da silin ve tamamen farklı bir şey ile değiştirin)
      course4_artist_variables_challenge1: Uzunluk (length) değişkeni oluşturup bu
        ilginç deseni oluşturmak için kullanabilir misin?
      course4_bee_for_challenge1: Bütün nektarı toplamak için bu döngüyü kullan. Sayaç
        kadar tekrar ettirmek için bir kaç aksiyon(actions) var.
      course4_bee_fwp_challenge1: Tüm Mısır toplamak için fonksiyon içinde bununla
        say döngüsü kullanın. Aynı bununla say döngüsünü 'uzunluk' parametresini kullanarak
        farklı maksimum değerler için kullanabilirsiniz.
      course4_bee_fwp_challenge2: "Son bir final testinin üstesinden gelebilecek misin
        görelim! Elindeki her şeyi ver!\\\r\n\\\r\nSatırdaki tüm sebzeleri toplamak
        için şununla say(for) döngüsünü fonksiyon içinde kullanın. Bununla say döngüsü
        uzunluk(length) parametresini kullanarak farklı en büyük değerleri saymasını
        sağla. Programınızı olabildiğince kısa tutmak için fonksiyon dışına da bir
        bununla say(for) döngüsü yerleştirin.\\\r\n\\\r\nİyi Şanslar!"
      course4_collector_nested_loops_challenge2: Hazine için avlanalım - döngüleri
        kullanarak! Sadece araç kutundaki blokları kullanarak toplayıcının en az 2
        yığın hazineye ulaşmasına yardım et. 4'ünün tamamını toplamak mümkün.
      course4_harvester_nested_loops_challenge1: _"Çiftlikte biraz yardıma ihtiyacım
        var! Sadece araç kutusundaki blokları kullanarak bu mısırı hasat etmeme yardım
        et."_
      course4_playlab_variables_challenge1: Bu blokları aktörün tak-tak şakasını paylaşmasını
        sağlamak için kullan. Vurucu cümleyi değiştirin ve kendi şakanızı kurgulayın!
      courseA_artist_loops10: "<div style=\"color: #7665a0;\nfont-size: 1.6em; line-height:
        1.4em;\" >\rAraziye dönüş zamanı. Taş dizmeme yardım et!<br/><br/>\r </div>\r
        \r <img src=\"https://images.code.org/5ba9e8e5c1524eec2b0ba3e4684b0cef-image-1467936361364.gif\"\nwidth=\"300\"/>\r"
      courseA_artist_loops10_2018: "<div style=\"color: #7665a0;\nfont-size: 1.6em;
        line-height: 1.4em;\" >\rAraziye dönüş zamanı. Taş dizmeme yardım et!<br/><br/>\r
        </div>\r \r <img src=\"https://images.code.org/5ba9e8e5c1524eec2b0ba3e4684b0cef-image-1467936361364.gif\"\nwidth=\"300\"/>\r"
      courseA_artist_loops10_2019: "<div style=\"color: #7665a0;\nfont-size: 1.6em;
        line-height: 1.4em;\" >\rAraziye dönüş zamanı. Taş dizmeme yardım et!<br/><br/>\r
        </div>\r \r <img src=\"https://images.code.org/5ba9e8e5c1524eec2b0ba3e4684b0cef-image-1467936361364.gif\"\nwidth=\"300\"/>\r"
      courseA_artist_loops11: "<div style=\"color: #7665a0;\nfont-size: 1.6em; line-height:
        1.4em;\" >\rMerdivenleri yapmama yardım etki geminin gittiğini izleyebileyim.<br/>\r
        </div>\r \r <img src=\"https://images.code.org/0dfa647dbc835fae09989a0fbfd798c7-image-1470871168220.gif\""
      courseA_artist_loops11_2018: "<div style=\"color: #7665a0;\nfont-size: 1.6em;
        line-height: 1.4em;\" >\rMerdivenleri yapmama yardım etki geminin gittiğini
        izleyebileyim.<br/>\r </div>\r \r <img src=\"https://images.code.org/0dfa647dbc835fae09989a0fbfd798c7-image-1470871168220.gif\""
      courseA_artist_loops11_2019: "<div style=\"color: #7665a0;\nfont-size: 1.6em;
        line-height: 1.4em;\" >\rMerdivenleri yapmama yardım etki geminin gittiğini
        izleyebileyim.<br/>\r </div>\r \r <img src=\"https://images.code.org/0dfa647dbc835fae09989a0fbfd798c7-image-1470871168220.gif\""
      courseA_artist_loops12: "Sanatçı uzaklarda eğlenceli bir şeyler gördü. Onun
        gördüğü şey hakkında ne düşündüğünü çiz.\\\r\n\\\r\n\\_\\_\\_\\\r\n\n### Fikirler\\\r\n\n\\\r\n![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)\\\r\n![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)\\\r\n![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)\\\r\n![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)"
      courseA_artist_loops12_2018: "Sanatçı uzaklarda eğlenceli bir şeyler gördü.
        Onun gördüğü şey hakkında ne düşündüğünü çiz.\\\r\n\\\r\n\\_\\_\\_\\\r\n\n###
        Fikirler\\\r\n\n\\\r\n![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)\\\r\n![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)\\\r\n![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)\\\r\n![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)"
      courseA_artist_loops12_2019: "Sanatçı uzaklarda eğlenceli bir şeyler gördü.
        Onun gördüğü şey hakkında ne düşündüğünü çiz.\\\r\n\\\r\n\\_\\_\\_\\\r\n\n###
        Fikirler\\\r\n\n\\\r\n![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)\\\r\n![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)\\\r\n![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)\\\r\n![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)"
      courseA_artist_loops2: "Bu çizgiyi iki kez ileri. \\\r \\\r Sanatçı yardım!
        \\[] (<https://images.code.org/04501f26a36673460f5c8fe04e3e7686-image-1498002095108.gif>)"
      courseA_artist_loops2_2018: "Bu çizgiyi iki kez ileri. \\\r \\\r Sanatçı yardım!
        \\[] (<https://images.code.org/04501f26a36673460f5c8fe04e3e7686-image-1498002095108.gif>)"
      courseA_artist_loops2_2019: "Bu çizgiyi iki kez ileri. \\\r \\\r Sanatçı yardım!
        \\[] (<https://images.code.org/04501f26a36673460f5c8fe04e3e7686-image-1498002095108.gif>)"
      courseA_artist_loops3: |-
        Our artist is trying to draw a line five times, but can't get it right. Can you help?

        ![expandable](https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif)
      courseA_artist_loops3_2018: |-
        Our artist is trying to draw a line five times, but can't get it right. Can you help?

        ![expandable](https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif)
      courseA_artist_loops3_2019: |-
        Our artist is trying to draw a line five times, but can't get it right. Can you help?

        ![expandable](https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif)
      courseA_artist_loops4: "Şimdi, beş kez bu çizgiyi çizmek için bir tane <xml><block
        type=\"controls_repeat_simplified_dropdown\"><title\nname=\"TIMES\" config=\"2-6\">5</title></block></xml>
        döngüsünü kullan!\\\r\n\\\r\n![](https://images.code.org/b2bc7f52ffdac2ad0d8e7c2d798c24df-image-1501875818062.gif)"
      courseA_artist_loops4_2018: "Şimdi, beş kez bu çizgiyi çizmek için bir tane
        <xml><block type=\"controls_repeat_simplified_dropdown\"><title\nname=\"TIMES\"
        config=\"2-6\">5</title></block></xml> döngüsünü kullan!\\\r\n\\\r\n![](https://images.code.org/b2bc7f52ffdac2ad0d8e7c2d798c24df-image-1501875818062.gif)"
      courseA_artist_loops4_2019: "Şimdi, beş kez bu çizgiyi çizmek için bir tane
        <xml><block type=\"controls_repeat_simplified_dropdown\"><title\nname=\"TIMES\"
        config=\"2-6\">5</title></block></xml> döngüsünü kullan!\\\r\n\\\r\n![](https://images.code.org/b2bc7f52ffdac2ad0d8e7c2d798c24df-image-1501875818062.gif)"
      courseA_artist_loops5: "## 7 adım uzunluğunda bir çizgi çiz.\n\nBu bizim ufuk
        çizgimiz olacak.\\\r\n\\\r\n![](https://images.code.org/dc7c4317177f2b94421c5aa589c31ac7-image-1498002771889.gif)"
      courseA_artist_loops5_2018: "## 7 adım uzunluğunda bir çizgi çiz.\n\nBu bizim
        ufuk çizgimiz olacak.\\\r\n\\\r\n![](https://images.code.org/dc7c4317177f2b94421c5aa589c31ac7-image-1498002771889.gif)"
      courseA_artist_loops5_2019: "## 7 adım uzunluğunda bir çizgi çiz.\n\nBu bizim
        ufuk çizgimiz olacak.\\\r\n\\\r\n![](https://images.code.org/dc7c4317177f2b94421c5aa589c31ac7-image-1498002771889.gif)"
      courseA_artist_loops6: "## Geride güzel bir tepe oluşturalım.\\\r\n\n\\\r\n![](https://images.code.org/f64d93b6d9a7d9c3edfce3c227c0dd49-image-1498062074031.gif)"
      courseA_artist_loops6_2018: "## Geride güzel bir tepe oluşturalım.\\\r\n\n\\\r\n![](https://images.code.org/f64d93b6d9a7d9c3edfce3c227c0dd49-image-1498062074031.gif)"
      courseA_artist_loops6_2019: "## Geride güzel bir tepe oluşturalım.\\\r\n\n\\\r\n![](https://images.code.org/f64d93b6d9a7d9c3edfce3c227c0dd49-image-1498062074031.gif)"
      courseA_artist_loops7: "## Suya dalgalar eklemek için 'tekrarla' döngüsünü kullan.\\\r\n\n\\\r\n![](https://images.code.org/01c5f6772a8b608a2fca5f6de7e25c67-image-1498062629139.gif)"
      courseA_artist_loops7_2018: "## Suya dalgalar eklemek için 'tekrarla' döngüsünü
        kullan.\\\r\n\n\\\r\n![](https://images.code.org/01c5f6772a8b608a2fca5f6de7e25c67-image-1498062629139.gif)"
      courseA_artist_loops7_2019: "## Suya dalgalar eklemek için 'tekrarla' döngüsünü
        kullan.\\\r\n\n\\\r\n![](https://images.code.org/01c5f6772a8b608a2fca5f6de7e25c67-image-1498062629139.gif)"
      courseA_artist_loops8: "## Tekneye çıkmak için bir merdivene ihtiyacımız var.\\\r\n\n\\\r\n![](https://images.code.org/ee90228fae25ecca1fba589b721f9120-image-1498063066878.gif)"
      courseA_artist_loops8_2018: "## Tekneye çıkmak için bir merdivene ihtiyacımız
        var.\\\r\n\n\\\r\n![](https://images.code.org/ee90228fae25ecca1fba589b721f9120-image-1498063066878.gif)"
      courseA_artist_loops8_2019: "## Tekneye çıkmak için bir merdivene ihtiyacımız
        var.\\\r\n\n\\\r\n![](https://images.code.org/ee90228fae25ecca1fba589b721f9120-image-1498063066878.gif)"
      courseA_artist_loops9: "## **Meydan Okuma:** Rıhtıma inen merdivenler kırıldı.
        Onları tamir etmem için bana yardım et.\\\r\n\n\\\r\n![](https://images.code.org/9d36df1afb6a738ba7bcff8734403ff3-image-1498063282074.gif)"
      courseA_artist_loops9_2018: "## **Meydan Okuma:** Rıhtıma inen merdivenler kırıldı.
        Onları tamir etmem için bana yardım et.\\\r\n\n\\\r\n![](https://images.code.org/9d36df1afb6a738ba7bcff8734403ff3-image-1498063282074.gif)"
      courseA_artist_loops9_2019: "## **Meydan Okuma:** Rıhtıma inen merdivenler kırıldı.
        Onları tamir etmem için bana yardım et.\\\r\n\n\\\r\n![](https://images.code.org/9d36df1afb6a738ba7bcff8734403ff3-image-1498063282074.gif)"
      courseA_artist_loops_challenge1: "Bir satırda bir çok çizgi çizmek için bir
        döngü kullanabilirsin .\\\r\n\\\r\nBir ev çizebilir misin? İstediğin şekilde
        görünmesini sağla!  Tekrar eden desenleri bulmaya çalış!\\\r\n\\\r\nİşte bazı
        fikirler:\\\r\n\\\r\n![](https://images.code.org/6e59e881e0aa1d31186e81a203655a0b-image-1501785654664.png)"
      courseA_artist_loops_challenge1_2018: "Bir satırda bir çok çizgi çizmek için
        bir döngü kullanabilirsin .\\\r\n\\\r\nBir ev çizebilir misin? İstediğin şekilde
        görünmesini sağla!  Tekrar eden desenleri bulmaya çalış!\\\r\n\\\r\nİşte bazı
        fikirler:\\\r\n\\\r\n![](https://images.code.org/6e59e881e0aa1d31186e81a203655a0b-image-1501785654664.png)"
      courseA_artist_loops_challenge1_2019: "Bir satırda bir çok çizgi çizmek için
        bir döngü kullanabilirsin .\\\r\n\\\r\nBir ev çizebilir misin? İstediğin şekilde
        görünmesini sağla!  Tekrar eden desenleri bulmaya çalış!\\\r\n\\\r\nİşte bazı
        fikirler:\\\r\n\\\r\n![](https://images.code.org/6e59e881e0aa1d31186e81a203655a0b-image-1501785654664.png)"
      courseA_artist_loops_challenge2a: |-
        _"Help me get the camp site ready!"_

        Use the blocks in the toolbox to draw these three tents.
      courseA_artist_loops_challenge2a_2018: |-
        _"Help me get the camp site ready!"_

        Use the blocks in the toolbox to draw these three tents.
      courseA_artist_loops_challenge2a_2019: |-
        _"Help me get the camp site ready!"_

        Use the blocks in the toolbox to draw these three tents.
      courseA_collector_loops1: "**Ücretsiz Oyun:** Bu Maceracı Laurel! Onu hareket
        ettir ve alabildiğin kadar hazine aldır.\\\r\n\\\r\nÇalışma alanına blokları
        sürükle ve hazineyi nasıl alacağını çözmeye çalış.  Bu seviyeyi geçmek için
        en az bir tane nesne al."
      courseA_collector_loops12: "Buldum! Alabildiğin kadar çok hazine al! \\\r\n(Tamamını
        almak zorunda değilsin.)"
      courseA_collector_loops12_2018: "Buldum! Alabildiğin kadar çok hazine al! \\\r\n(Tamamını
        almak zorunda değilsin.)"
      courseA_collector_loops12_2019: "Buldum! Alabildiğin kadar çok hazine al! \\\r\n(Tamamını
        almak zorunda değilsin.)"
      courseA_collector_loops1_2018: "**Ücretsiz Oyun:** Bu Maceracı Laurel! Onu hareket
        ettir ve alabildiğin kadar hazine aldır.\\\r\n\\\r\nÇalışma alanına blokları
        sürükle ve hazineyi nasıl alacağını çözmeye çalış.  Bu seviyeyi geçmek için
        en az bir tane nesne al."
      courseA_collector_loops1_2019: "**Ücretsiz Oyun:** Bu Maceracı Laurel! Onu hareket
        ettir ve alabildiğin kadar hazine aldır.\\\r\n\\\r\nÇalışma alanına blokları
        sürükle ve hazineyi nasıl alacağını çözmeye çalış.  Bu seviyeyi geçmek için
        en az bir tane nesne al."
      courseA_collector_loops2: "Laurel i hazine taşıyın ve sonra <xml><block type=\"collector_collect\"/></xml>
        bloğu kullanarak hazineyi toplayın \\\r \\\r \nSeviyeyi geçmek için 3 yığınıda
        alın."
      courseA_collector_loops2_2018: "Laurel i hazine taşıyın ve sonra <xml><block
        type=\"collector_collect\"/></xml> bloğu kullanarak hazineyi toplayın \\\r
        \\\r \nSeviyeyi geçmek için 3 yığınıda alın."
      courseA_collector_loops2_2019: 'Get all three piles! Move Laurel to each piece
        of treasure, then use the <xml><block type="collector_collect" block-text="get
        treasure"/></xml> block. '
      courseA_collector_loops3: Laurel '[E-->]' sadece bir blok kullanarak beş yığını
        nasıl toplayabilir?
      courseA_collector_loops3_2018: Laurel '[E-->]' sadece bir blok kullanarak beş
        yığını nasıl toplayabilir?
      courseA_collector_loops3_2019: Laurel '[E-->]' sadece bir blok kullanarak beş
        yığını nasıl toplayabilir?
      courseA_collector_loops_challenge1: _"Bazı hataları bulmama yardım eder misin?
        Hangi yöne gitmek istediğimi biliyorum, fakat kaç adım atacağımdan emin değilim."_
      courseA_collector_loops_challenge1_2018: _"Bazı hataları bulmama yardım eder
        misin? Hangi yöne gitmek istediğimi biliyorum, fakat kaç adım atacağımdan
        emin değilim."_
      courseA_collector_loops_challenge1_2019: _"Bazı hataları bulmama yardım eder
        misin? Hangi yöne gitmek istediğimi biliyorum, fakat kaç adım atacağımdan
        emin değilim."_
      courseA_collector_preLoops1: "This is Laurel the Adventurer! \n\nPress \"Run\"
        to see her walk up to the treasure and grab it."
      courseA_collector_preLoops2: "Great!  Now you get to add code yourself!  \n\nSnap
        a ![](https://images.code.org/563c0deb5c51d43cdfa72d62dec3419d-image-1508904559201.05.30.png)
        block to the bottom of the program and click \"Run\"!"
      courseA_collector_preLoops3: To grab the treasure, snap two ![](https://images.code.org/54c206b62a02f1d7ea8f1bee52664ecb-image-1508905670742.25.37.png)
        blocks and one ![](https://images.code.org/563c0deb5c51d43cdfa72d62dec3419d-image-1508904559201.05.30.png)
        block to the bottom of the program and click "Run"!
      courseA_collector_preLoops7: "Laurel i hazine taşıyın ve sonra <xml><block type=\"collector_collect\"/></xml>
        bloğu kullanarak hazineyi toplayın \\\r \\\r \nSeviyeyi geçmek için 3 yığınıda
        alın."
      courseA_harvester_loops1: Help the harvester pick all the corn!
      courseA_harvester_loops10: Help the harvester pick all five ears of corn!
      courseA_harvester_loops10_2019: Help the harvester pick all five ears of corn!
      courseA_harvester_loops11: 'Try one more on your own! '
      courseA_harvester_loops11_2019: 'Try one more on your own! '
      courseA_harvester_loops1_2019: Help the harvester pick all the corn!
      courseA_harvester_loops2: The harvester needs to pick all the corn! Do you see
        a pattern?
      courseA_harvester_loops2_2019: The harvester needs to pick all the corn! Do
        you see a pattern?
      courseA_harvester_loops3: Can you pick all the corn using only **one** move
        block?
      courseA_harvester_loops3_2019: Can you pick all the corn using only **one**
        move block?
      courseA_harvester_loops4: |-
        _"I need help to find what's wrong!"_

        Can you help the harvester find the bug in her code?
      courseA_harvester_loops4_2019: |-
        _"I need help to find what's wrong!"_

        Can you help the harvester find the bug in her code?
      courseA_harvester_loops5: Try it yourself! Can you pick the corn at the end
        too?
      courseA_harvester_loops5_2019: Try it yourself! Can you pick the corn at the
        end too?
      courseA_harvester_loops5a: Look at all this corn? Can you pick it all by yourself?
      courseA_harvester_loops5a_2019: Look at all this corn? Can you pick it all by
        yourself?
      courseA_harvester_loops5b: Can you change your code to make the harvester pick
        all the corn?
      courseA_harvester_loops5b_2019: Can you change your code to make the harvester
        pick all the corn?
      courseA_harvester_loops6: You will need **one** <xml><block type="maze_moveWest"
        block-text="move west"></block></xml> block and **one** <xml><block type="maze_moveNorth"
        block-text="move north"></block></xml> block to finish this puzzle!
      courseA_harvester_loops6_2019: You will need **one** <xml><block type="maze_moveWest"
        block-text="move west"></block></xml> block and **one** <xml><block type="maze_moveNorth"
        block-text="move north"></block></xml> block to finish this puzzle!
      courseA_harvester_loops7: 'Try it on your own! '
      courseA_harvester_loops7_2019: 'Try it on your own! '
      courseA_harvester_loops9: Can you figure out how to pick _all_ this corn?
      courseA_harvester_loops9_2019: Can you figure out how to pick _all_ this corn?
      courseA_harvester_seq1: Help the harvester pick the piece of corn!
      courseA_harvester_seq10: The harvester needs to pick all the corn! Do you see
        a pattern?
      courseA_harvester_seq10_2019: The harvester needs to pick all the corn! Do you
        see a pattern?
      courseA_harvester_seq11: Try it by yourself! Pick all the corn.
      courseA_harvester_seq11_2019: Try it by yourself! Pick all the corn.
      courseA_harvester_seq12: "_Thank you for helping me!_ \n\nPick all the corn."
      courseA_harvester_seq12_2019: "_Thank you for helping me!_ \n\nPick all the
        corn."
      courseA_harvester_seq13: Help the harvester pick corn!
      courseA_harvester_seq13_2019: Help the harvester pick corn!
      courseA_harvester_seq1_2019: Help the harvester pick the piece of corn!
      courseA_harvester_seq2: 'Use <xml><block type="maze_moveWest"/></xml> **three**
        times to get the harvester to the corn! '
      courseA_harvester_seq2_2019: 'Use **three** <xml><block type="maze_moveWest"
        block-text="move west"/></xml> blocks to get the harvester to the corn! '
      courseA_harvester_seq3: Use <xml><block type="maze_moveNorth"/></xml> **three**
        times to get the harvester to the corn! Don't forget to pick the corn at the
        end.
      courseA_harvester_seq3_2019: Use **three** <xml><block type="maze_moveNorth"
        block-text="move north"/></xml> blocks to get the harvester to the corn! Don't
        forget to pick the corn at the end.
      courseA_harvester_seq4: Add _one_ block to help the harvester pick the corn.
      courseA_harvester_seq4_2019: Add _one_ block to help the harvester pick the
        corn.
      courseA_harvester_seq5: Can you figure out what is wrong with this code? Help
        the harvester pick the corn!
      courseA_harvester_seq5_2019: Can you figure out what is wrong with this code?
        Help the harvester pick the corn!
      courseA_harvester_seq6: Try it yourself!
      courseA_harvester_seq6_2019: Try it yourself!
      courseA_harvester_seq7: You have to move in two directions to get to the corn!
        Help the harvester pick the right direction.
      courseA_harvester_seq7_2019: You have to move in two directions to get to the
        corn! Help the harvester pick the right direction.
      courseA_harvester_seq8: Now the harvester needs to pick corn two times!
      courseA_harvester_seq8_2019: Now the harvester needs to pick corn two times!
      courseA_harvester_seq9: Add two blocks to finish this puzzle!
      courseA_harvester_seq9_2019: Add two blocks to finish this puzzle!
      courseA_maze_ramp2_2018: Attach both <xml><block type="maze_moveEast"/></xml>
        blocks to <xml><block type="when_run"/></xml> to finish your code, then click
        "▶ Run".
      courseA_maze_ramp2_2019: Attach both <xml><block type="maze_moveEast" block-text="move
        east"/></xml> blocks to the <xml><block type="when_run" block-text="when run"/></xml>
        block to finish your code, then click "▶ Run".
      courseA_maze_ramp3a_2018: Grab a <xml><block type="maze_moveNorth"/></xml> from
        the toolbox and add it to the bottom of the other blocks to finish this code,
        then click "▶ Run".
      courseA_maze_ramp3a_2019: Grab a <xml><block type="maze_moveNorth" block-text="move
        north"/></xml> block from the toolbox and add it to the bottom of the other
        blocks to finish this code, then click "▶ Run".
      courseA_maze_ramp3b_2018: "There's an extra block at the end of this code!  \n\nDrag
        it back to the toolbox to throw it away."
      courseA_maze_ramp3b_2019: "There's an extra block at the end of this code!  \n\nDrag
        it back to the toolbox to throw it away."
      courseA_maze_ramp4a_2018: Can you figure out which block you need to add to
        the bottom of the other blocks to finish this code?
      courseA_maze_ramp4a_2019: Can you figure out which block you need to add to
        the bottom of the other blocks to finish this code?
      courseA_maze_ramp5a_2018: Try this one all by yourself!
      courseA_maze_ramp5a_2019: Try this one all by yourself!
      courseA_maze_seq1: Bu bloklarla oynayın ve beni kötü domuza ulaştırın
      courseA_maze_seq10: "\\*\\* Meydan Okuma: \\*\\* domuza ulaşmak için kuşu TNT
        etrafından dolaştır! \\\r \\\r <img src=\"https://images.code.org/fa04813e9451e0bc070af50bc01d4a6b-image-1467932582838.gif\"
        width=\"200px\"/>"
      courseA_maze_seq10_2018: "**Challenge:** Avoid the TNT to get the bird to the
        pig!"
      courseA_maze_seq10_2019: "**Challenge:** Avoid the TNT to get the bird to the
        pig!"
      courseA_maze_seq10_copy: "\\*\\* Meydan Okuma: \\*\\* domuza ulaşmak için kuşu
        TNT etrafından dolaştır! \\\r \\\r <img src=\"https://images.code.org/fa04813e9451e0bc070af50bc01d4a6b-image-1467932582838.gif\"
        width=\"200px\"/>"
      courseA_maze_seq11: "Daha kısa bir bulmaca Zamanı!  Önce bir yana sonra öbür
        yöne giderek kuşu domuza ulaştır <img src=\"https://images.code.org/c2e2d7ea98a18d899c6de183ce6d82e1-image-1471385293382.gif\"
        width=\"200px\"/> \\\r"
      courseA_maze_seq11_2018: "Daha kısa bir bulmaca Zamanı!  Önce bir yana sonra
        öbür yöne giderek kuşu domuza ulaştır <img src=\"https://images.code.org/c2e2d7ea98a18d899c6de183ce6d82e1-image-1471385293382.gif\"
        width=\"200px\"/> \\\r"
      courseA_maze_seq11_2019: "Daha kısa bir bulmaca Zamanı!  Önce bir yana sonra
        öbür yöne giderek kuşu domuza ulaştır <img src=\"https://images.code.org/c2e2d7ea98a18d899c6de183ce6d82e1-image-1471385293382.gif\"
        width=\"200px\"/> \\\r"
      courseA_maze_seq12: "O domuzu yakala! \\\r \\\r <img src=\"https://images.code.org/f908ff77eb81ee85d405a7ba66cc2986-image-1467933103380.gif\"
        width=\"200px\"/> \\\r"
      courseA_maze_seq12_2018: "O domuzu yakala! \\\r \\\r <img src=\"https://images.code.org/f908ff77eb81ee85d405a7ba66cc2986-image-1467933103380.gif\"
        width=\"200px\"/> \\\r"
      courseA_maze_seq12_2019: "O domuzu yakala! \\\r \\\r <img src=\"https://images.code.org/f908ff77eb81ee85d405a7ba66cc2986-image-1467933103380.gif\"
        width=\"200px\"/> \\\r"
      courseA_maze_seq13_2019: Domuza ulaşın!
      courseA_maze_seq1_2018: Bu bloklarla oynayın ve beni kötü domuza ulaştırın
      courseA_maze_seq1_2019: Bu bloklarla oynayın ve beni kötü domuza ulaştırın
      courseA_maze_seq2: |-
        _"A bug! Fix the code to get me to the pig."_

        ![expandable](https://images.code.org/4af4959874b3ca1fdd3008dc4f77add4-image-1497994904322.gif)
      courseA_maze_seq3: "_\"Kodu düzelt ve domuza ulaştır!\"_\\\r \\\r <img\nsrc=\"https://images.code.org/629cddc754f9ad02929f06fc68462e4d-image-1467924800613.gif\"\nwidth=\"200\"/>"
      courseA_maze_seq4: "_\"Bir şeyler doğru değil.\"_ \\\r \\\r Blok kaldır ve kuşu
        domuza ulaştır!\\\r \\\r <img src=\"https://images.code.org/dd6d92233199ee0f524caa4051b99275-image-1467920800577.gif\"\nwidth=\"200px\"/>"
      courseA_maze_seq5: "Bunu kendin dene. \\\r <img\nsrc=\"https://images.code.org/43001078c4df6feea1a6edf025192d85-image-1467929743355.gif\"\nwidth=\"200px\"/>"
      courseA_maze_seq5_2018: Give this one a try.
      courseA_maze_seq5_2019: Give this one a try.
      courseA_maze_seq5_copy: "Bunu kendin dene. \\\r <img\nsrc=\"https://images.code.org/43001078c4df6feea1a6edf025192d85-image-1467929743355.gif\"\nwidth=\"200px\"/>"
      courseA_maze_seq5a_2018: |-
        _"Here piggy, piggy!"_

        What can you add to the end of this code to get the bird to the pig?
      courseA_maze_seq5a_2019: |-
        _"Here piggy, piggy!"_

        What can you add to the end of this code to get the bird to the pig?
      courseA_maze_seq6: "Bir yöne ilerle sonra öteki yöne ve kuşu domuza ulaştır!\\\r
        \\\r <img src=\"https://images.code.org/0b324bc0f684f7a22171acd8b38c8d9f-image-1467931807767.gif\"\nwidth=\"200px\"/>"
      courseA_maze_seq6_2018: Bir yöne ilerle ve sonra başka yöne ve kuşu domuza götür!
      courseA_maze_seq6_2019: Bir yöne ilerle ve sonra başka yöne ve kuşu domuza götür!
      courseA_maze_seq6_copy: "Bir yöne ilerle sonra öteki yöne ve kuşu domuza ulaştır!\\\r
        \\\r <img src=\"https://images.code.org/0b324bc0f684f7a22171acd8b38c8d9f-image-1467931807767.gif\"\nwidth=\"200px\"/>"
      courseA_maze_seq7: "Eksik bloğu bul be kuşu domuza ulaştır!\\\r \\\r <img src=\"https://images.code.org/b9803e12911694d8bb18bd55304f85d5-image-1467932006704.gif\"\nwidth=\"200px\"/>"
      courseA_maze_seq7_copy: "Eksik bloğu bul be kuşu domuza ulaştır!\\\r \\\r <img
        src=\"https://images.code.org/b9803e12911694d8bb18bd55304f85d5-image-1467932006704.gif\"\nwidth=\"200px\"/>"
      courseA_maze_seq8: "Bu seviyeyi çöz ve kuşu domuza ulaştır!\\\r \\\r <img src=\"https://images.code.org/1eb9139e2887083dc80b98d9aeb3bef2-image-1467932105884.gif\"\nwidth=\"200px\"/>"
      courseA_maze_seq8_2018: Bu seviyeyi çözün ve kuşu donuza ulaştırın!
      courseA_maze_seq8_2019: Bu seviyeyi çözün ve kuşu donuza ulaştırın!
      courseA_maze_seq8_copy: "Bu seviyeyi çöz ve kuşu domuza ulaştır!\\\r \\\r <img
        src=\"https://images.code.org/1eb9139e2887083dc80b98d9aeb3bef2-image-1467932105884.gif\"\nwidth=\"200px\"/>"
      courseA_maze_seq9: "**Meydan okuma:** Blok ekleyerek kodu düzelt ve kuşu domuza
        ulaştır!\\\r \\\r <img src=\"https://images.code.org/810d7189bcd0767d37ea82319b4c678c-image-1467932445247.gif\"\nwidth=\"200px\"/>"
      courseA_maze_seq_challenge1: |-
        Hatayı ayıkla.
        Fazla blokları çıkar ve eksik blokları ekle. Kuşu domuza ulaştır!
      courseA_maze_seq_challenge1_2018: |-
        Hatayı ayıkla.
        Fazla blokları çıkar ve eksik blokları ekle. Kuşu domuza ulaştır!
      courseA_maze_seq_challenge1_2019: |-
        Hatayı ayıkla.
        Fazla blokları çıkar ve eksik blokları ekle. Kuşu domuza ulaştır!
      courseA_maze_seq_challenge2_2019: Yolu takip et ve beni sersem domuza götür.
        Patlayıcılardan uzak dur yoksa bu tüylerim havaya uçacak!
      courseA_playLab_events1_2019: This is a Play Lab level. Move blocks to the workspace
        and see what happens!
      courseA_playLab_events2_2019: Jorge the Dog wants to say "Hi there." Can you
        help him?
      courseA_playLab_events3: "Köpek Jorge u hareket ettirmek için  ! \\[] (<https://images.code.org/b3d6215901969328333d6393f8101c5b-image-1478142333199.png>)
        bloğu ile \\[] (<https://images.code.org/4f2130b2a3053695414a02c3d39ef864-image-1478143461271.png>)
        olay bloğunu birleştir.   \\\r \\\r Bu seviyeyi bitirmek için Jorge u bayrağa
        ulaştır!"
      courseA_playLab_events3_2018: "Köpek Jorge u hareket ettirmek için  ! \\[] (<https://images.code.org/b3d6215901969328333d6393f8101c5b-image-1478142333199.png>)
        bloğu ile \\[] (<https://images.code.org/4f2130b2a3053695414a02c3d39ef864-image-1478143461271.png>)
        olay bloğunu birleştir.   \\\r \\\r Bu seviyeyi bitirmek için Jorge u bayrağa
        ulaştır!"
      courseA_playLab_events3_2019: "Köpek Jorge u hareket ettirmek için  ! \\[] (<https://images.code.org/b3d6215901969328333d6393f8101c5b-image-1478142333199.png>)
        bloğu ile \\[] (<https://images.code.org/4f2130b2a3053695414a02c3d39ef864-image-1478143461271.png>)
        olay bloğunu birleştir.   \\\r \\\r Bu seviyeyi bitirmek için Jorge u bayrağa
        ulaştır!"
      courseA_playLab_events4: Şimdi, sağ ok butonuna tıklandığında Jorge' u sağa
        hareket ettir.
      courseA_playLab_events4_2018: Şimdi, sağ ok butonuna tıklandığında Jorge' u
        sağa hareket ettir.
      courseA_playLab_events4_2019: Now, add another event block to get Jorge to move
        right when the right arrow button is clicked. Use the arrow keys or press
        the arrow buttons to move Jorge to both flags and finish the level!
      courseA_playLab_events5: Yukarı ve aşağı ok tuşlarına basıldığında Jorge' u
        yukarı ve aşağı hareket ettirmek için olaylar ekleyin.
      courseA_playLab_events5_2018: Yukarı ve aşağı ok tuşlarına basıldığında Jorge'
        u yukarı ve aşağı hareket ettirmek için olaylar ekleyin.
      courseA_playLab_events5_2019: Add events to have Jorge move up and down when
        the \`up\` and \`down\` buttons are pressed. Make Jorge get the flags to finish
        the level!
      courseA_playLab_events6_2019: Make this more interesting by changing the background
        and playing a random sound when Jorge is clicked. When your code is ready,
        click on Jorge to try it out!
      courseA_playLab_events7_2018: _Freeplay:_ Add anything you want to this game.  Can
        you make the dinosaur disappear when Jorge runs into him?
      courseA_playLab_events7_2019: _Freeplay:_ Add anything you want to this game.  Can
        you make the dinosaur disappear when Jorge runs into him?
      courseA_playlab_events_challenge1: Büyük hayvan yarışı Zamanı! ▼ bastığınızda
        aşağı ilerlesin. Kim en hızlı koşar
      courseA_playlab_events_challenge1_2018: Büyük hayvan yarışı Zamanı! ▼ bastığınızda
        aşağı ilerlesin. Kim en hızlı koşar
      courseA_playlab_events_challenge1_2019: Büyük hayvan yarışı Zamanı! ▼ bastığınızda
        aşağı ilerlesin. Kim en hızlı koşar
      courseA_playlab_events_challenge2: "Hadi bir parti verelim!\nArkadaşlarımın
        her birine, onlara tıkladığında ya da dokunduğunda yapabilecekleri bir şeyler
        ver. Hayvanlar nasıl ses çıkarır? Ya da neler gerçekleşir?\\\r\n\\\r\n\\\r\n\\\r\nBu
        bulmacada, ipuçlarına tıkladığından emin ol! İpuçları, denemen için sana eğlenceli
        şeyler sunacak!\\\r\n\\\r\n![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19\nPM.png>)"
      courseA_playlab_events_challenge2_2018: "Hadi bir parti verelim!\nArkadaşlarımın
        her birine, onlara tıkladığında ya da dokunduğunda yapabilecekleri bir şeyler
        ver. Hayvanlar nasıl ses çıkarır? Ya da neler gerçekleşir?\\\r\n\\\r\n\\\r\n\\\r\nBu
        bulmacada, ipuçlarına tıkladığından emin ol! İpuçları, denemen için sana eğlenceli
        şeyler sunacak!\\\r\n\\\r\n![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19\nPM.png>)"
      courseA_playlab_events_challenge2_2019: "Hadi bir parti verelim!\nArkadaşlarımın
        her birine, onlara tıkladığında ya da dokunduğunda yapabilecekleri bir şeyler
        ver. Hayvanlar nasıl ses çıkarır? Ya da neler gerçekleşir?\\\r\n\\\r\n\\\r\n\\\r\nBu
        bulmacada, ipuçlarına tıkladığından emin ol! İpuçları, denemen için sana eğlenceli
        şeyler sunacak!\\\r\n\\\r\n![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19\nPM.png>)"
      courseB_Scrat_ramp1_2018: To get Scrat to the acorn, snap the <xml><block type="maze_moveEast"/></xml>
        block to the bottom of the <xml><block type="when_run"/></xml> block, then
        press "▶ Run"!
      courseB_Scrat_ramp1_2019: To get Scrat to the acorn, snap the <xml><block type="maze_moveEast"
        block-text="move East"/></xml> block to the bottom of the <xml><block type="when_run"
        block-text="when run"/></xml> block, then press "▶ Run"!
      courseB_Scrat_ramp2_2018: Snap both <xml><block type="maze_moveEast"/></xml>
        blocks to the bottom of the <xml><block type="when_run"/></xml> block to finish
        your code, then click "▶ Run".
      courseB_Scrat_ramp2_2019: Snap both <xml><block type="maze_moveEast" block-text="move
        east"/></xml> blocks to the bottom of the <xml><block type="when_run" block-text="when
        run"/></xml> block to finish your code, then click "▶ Run".
      courseB_Scrat_ramp3a_2018: Grab a <xml><block type="maze_moveNorth"/></xml>
        from the toolbox and add it to the bottom of the other blocks to finish this
        code, then click "▶ Run".
      courseB_Scrat_ramp3a_2019: Grab a <xml><block type="maze_moveNorth" block-text="move
        north"/></xml> block from the toolbox and add it to the bottom of the other
        blocks to finish this code, then click "▶ Run".
      courseB_Scrat_ramp3b_2018: |-
        There's an extra block at the end of this code!

        Drag it back to the toolbox to throw it away.
      courseB_Scrat_ramp3b_2019: |-
        There's an extra block at the end of this code!

        Drag it back to the toolbox to throw it away.
      courseB_Scrat_ramp4a_2018: Can you figure out which block you need to add to
        the bottom of the other blocks to finish this code?
      courseB_Scrat_ramp4a_2019: Can you figure out which block you need to add to
        the bottom of the other blocks to finish this code?
      courseB_Scrat_ramp5a_2018: Try this one all by yourself!
      courseB_Scrat_ramp5a_2019: Try this one all by yourself!
      courseB_artist_loops10: "Öğrendiklerini kullan ve resmi çiz. Sizce sanatçı eve
        gittiğinde ne gördü.\\\r\n\\\r\n\n<hr/>\r\n<h3>Ideas</h3>\r\n<table>\r\n<tr>\r\n<td>\r\n<img\nsrc=\"https://images.code.org/8f4f2a68dae2cf0aa82cc0a49ea4df04-image-1466787750475.gif\"\nwidth=\"150\"/><br/>\r\n<h4>A
        Singing Snail</h4><br/><br/>\r\n</td>\r\n\r\n<td>\r\n<img\nsrc=\"https://images.code.org/732ce5dd91c7f49f06e88da1a9f664f3-image-1466794904255.gif\"\nwidth=\"150\"/><br/>\r\n<h4>A
        Big City</h4><br/><br/>\r\n</td>\r\n\r\n<td>\r\n<img\nsrc=\"https://images.code.org/37fdd6fdd761df09fd4949d5e43f0a7f-image-1466795165642.gif\"\nwidth=\"150\"/><br/>\r\n<h4>A
        Concert</h4><br/><br/>\r\n</td>\r\n\r\n<td>\r\n<img\nsrc=\"https://images.code.org/f7bf86b0f86669d82ee2c1565738b9cb-image-1466794447737.gif\"\nwidth=\"150\"/><br/>\r\n<h4>A
        Birthday Cake</h4><br/><br/>\r\n</td>\r\n\r\n</tr>\r\n</table>\r\n "
      courseB_artist_loops10_2018: "Öğrendiklerini kullan ve resmi çiz. Sizce sanatçı
        eve gittiğinde ne gördü.\\\r\n\\\r\n\n<hr/>\r\n<h3>Ideas</h3>\r\n<table>\r\n<tr>\r\n<td>\r\n<img\nsrc=\"https://images.code.org/8f4f2a68dae2cf0aa82cc0a49ea4df04-image-1466787750475.gif\"\nwidth=\"150\"/><br/>\r\n<h4>A
        Singing Snail</h4><br/><br/>\r\n</td>\r\n\r\n<td>\r\n<img\nsrc=\"https://images.code.org/732ce5dd91c7f49f06e88da1a9f664f3-image-1466794904255.gif\"\nwidth=\"150\"/><br/>\r\n<h4>A
        Big City</h4><br/><br/>\r\n</td>\r\n\r\n<td>\r\n<img\nsrc=\"https://images.code.org/37fdd6fdd761df09fd4949d5e43f0a7f-image-1466795165642.gif\"\nwidth=\"150\"/><br/>\r\n<h4>A
        Concert</h4><br/><br/>\r\n</td>\r\n\r\n<td>\r\n<img\nsrc=\"https://images.code.org/f7bf86b0f86669d82ee2c1565738b9cb-image-1466794447737.gif\"\nwidth=\"150\"/><br/>\r\n<h4>A
        Birthday Cake</h4><br/><br/>\r\n</td>\r\n\r\n</tr>\r\n</table>\r\n "
      courseB_artist_loops10_2019: "Öğrendiklerini kullan ve resmi çiz. Sizce sanatçı
        eve gittiğinde ne gördü.\\\r\n\\\r\n\n<hr/>\r\n<h3>Ideas</h3>\r\n<table>\r\n<tr>\r\n<td>\r\n<img\nsrc=\"https://images.code.org/8f4f2a68dae2cf0aa82cc0a49ea4df04-image-1466787750475.gif\"\nwidth=\"150\"/><br/>\r\n<h4>A
        Singing Snail</h4><br/><br/>\r\n</td>\r\n\r\n<td>\r\n<img\nsrc=\"https://images.code.org/732ce5dd91c7f49f06e88da1a9f664f3-image-1466794904255.gif\"\nwidth=\"150\"/><br/>\r\n<h4>A
        Big City</h4><br/><br/>\r\n</td>\r\n\r\n<td>\r\n<img\nsrc=\"https://images.code.org/37fdd6fdd761df09fd4949d5e43f0a7f-image-1466795165642.gif\"\nwidth=\"150\"/><br/>\r\n<h4>A
        Concert</h4><br/><br/>\r\n</td>\r\n\r\n<td>\r\n<img\nsrc=\"https://images.code.org/f7bf86b0f86669d82ee2c1565738b9cb-image-1466794447737.gif\"\nwidth=\"150\"/><br/>\r\n<h4>A
        Birthday Cake</h4><br/><br/>\r\n</td>\r\n\r\n</tr>\r\n</table>\r\n "
      courseB_artist_loops1_2019: This is a new type of puzzle called "Artist". Play
        with the level and draw something fun.
      courseB_artist_loops2_2019: Sanatçı **6** kere bir çizgi çizmeyi deniyor ama
        doğru yapamıyor. Yardım edebilir misin?
      courseB_artist_loops3_2019: Bahçe duvarı yapmak için 7 kere bir çizgi çizin.
      courseB_artist_loops4_2019: Now we need to get the soil ready to plant. Find
        the bugs in the code and help the artist prepare the ground.
      courseB_artist_loops5_2019: Merdivenleri düzeltme zamanı! Bu deseni **5** kere
        tekrarlayın ki sanatçı çalıların tepesine ulaşabilsin.
      courseB_artist_loops6: Çalıların arkasına güzel asma çiçekleri tam orada.  Asmaya
        tırmanıp nereye gittiğini görebilir misin?
      courseB_artist_loops6_2018: Çalıların arkasına güzel asma çiçekleri tam orada.  Asmaya
        tırmanıp nereye gittiğini görebilir misin?
      courseB_artist_loops6_2019: Çalıların arkasına güzel asma çiçekleri tam orada.  Asmaya
        tırmanıp nereye gittiğini görebilir misin?
      courseB_artist_loops7: "\\*\\* Meydan Okuma: \\*\\* gizli bahçe! Hadi dolaşalım."
      courseB_artist_loops7_2018: "\\*\\* Meydan Okuma: \\*\\* gizli bahçe! Hadi dolaşalım."
      courseB_artist_loops7_2019: "\\*\\* Meydan Okuma: \\*\\* gizli bahçe! Hadi dolaşalım."
      courseB_artist_loops8_2019: Eve dönme vakti. Sanatçıya yardımcı olmak için sadece
        bir blok kullanarak bu merdiveni tamir edebilir misin?
      courseB_artist_loops9_2019: Let's take the short way home, over the pond. Can
        you help the artist stay on the stones?
      courseB_artist_loops_challenge1: Zar atma zamanı! Çizmek için yardımcı olabilir
        misin?
      courseB_artist_loops_challenge1_2018: Zar atma zamanı! Çizmek için yardımcı
        olabilir misin?
      courseB_artist_loops_challenge1_2019: Zar atma zamanı! Çizmek için yardımcı
        olabilir misin?
      courseB_artist_loops_challenge2: Bir oyun oynayalım! Çizebildiğin kadar X çiz!
        Üst üste 3 alabilir miyim?
      courseB_artist_loops_challenge2_2018: Bir oyun oynayalım! Çizebildiğin kadar
        X çiz! Üst üste 3 alabilir miyim?
      courseB_artist_loops_challenge2_2019: Bir oyun oynayalım! Çizebildiğin kadar
        X çiz! Üst üste 3 alabilir miyim?
      courseB_collector_loops1: "**Ücretsiz Oyun:** Bu Maceracı Laurel! Onu hareket
        ettir ve alabildiğin kadar hazine aldır.\\\r\n\\\r\nÇalışma alanına blokları
        sürükle ve hazineyi nasıl alacağını çözmeye çalış.  Bu seviyeyi geçmek için
        en az bir tane nesne al."
      courseB_collector_loops10_2019: Laurel'in çukurdan tüm hazineyi almasına yardım
        edin.
      courseB_collector_loops11_2019: Haydi!  Mümkün olduğu kadar hazineyi alın!
      courseB_collector_loops1_2018: "**Ücretsiz Oyun:** Bu Maceracı Laurel! Onu hareket
        ettir ve alabildiğin kadar hazine aldır.\\\r\n\\\r\nÇalışma alanına blokları
        sürükle ve hazineyi nasıl alacağını çözmeye çalış.  Bu seviyeyi geçmek için
        en az bir tane nesne al."
      courseB_collector_loops1_2019: "**Ücretsiz Oyun:** Bu Maceracı Laurel! Onu hareket
        ettir ve alabildiğin kadar hazine aldır.\\\r\n\\\r\nÇalışma alanına blokları
        sürükle ve hazineyi nasıl alacağını çözmeye çalış.  Bu seviyeyi geçmek için
        en az bir tane nesne al."
      courseB_collector_loops2: "Laurel i hazine taşıyın ve sonra <xml><block type=\"collector_collect\"/></xml>
        bloğu kullanarak hazineyi toplayın \\\r \\\r \nSeviyeyi geçmek için 4 yığınıda
        alın."
      courseB_collector_loops2_2018: "Laurel i hazine taşıyın ve sonra <xml><block
        type=\"collector_collect\"/></xml> bloğu kullanarak hazineyi toplayın \\\r
        \\\r \nSeviyeyi geçmek için 4 yığınıda alın."
      courseB_collector_loops2_2019: "Laurel i hazine taşıyın ve sonra <xml><block
        type=\"collector_collect\"/></xml> bloğu kullanarak hazineyi toplayın \\\r
        \\\r \nSeviyeyi geçmek için 4 yığınıda alın."
      courseB_collector_loops3: Laurel '[E-->]' sadece bir blok kullanarak beş yığını
        nasıl toplayabilir?
      courseB_collector_loops3_2018: Laurel '[E-->]' sadece bir blok kullanarak beş
        yığını nasıl toplayabilir?
      courseB_collector_loops3_2019: Laurel '[E-->]' sadece bir blok kullanarak beş
        yığını nasıl toplayabilir?
      courseB_collector_loops4_2019: Tüm bu hazineyi almak için Laurel'ın yolunu düzeltin!
      courseB_collector_loops5_2019: 'Tüm hazineyi almak için son bulmacaya kod ekleyin. '
      courseB_collector_loops6_2019: Laurel tüm hazineyi almasına yardımcı olacak
        kodu yazın!
      courseB_collector_loops7_2019: Tüm bu hazineyi almak için kod yazın.
      courseB_collector_loops8_2019: "\\*\\* Meydan: Okuma\\*\\* Hazine bu merdivenlerden
        yukarı gider!  Laurel yardım için kod yazın."
      courseB_collector_loops9_2019: '-   "Bu derin vadiden hazine çıkarmama yardım
        et." \*'
      courseB_collector_loops_challenge1_2019: 'Bu sefer sadece ok bloklrından birini
        kullanabilirsiniz. Tüm hazineyi al! '
      courseB_collector_loops_challenge2a: |-
        _"Let's get the treasure!"_

        Help Laurel get at least **5** pieces of treasure to finish this puzzle.
      courseB_collector_loops_challenge2a_2018: |-
        _"Let's get the treasure!"_

        Help Laurel get at least **5** pieces of treasure to finish this puzzle.
      courseB_collector_loops_challenge2a_2019: |-
        _"Let's get the treasure!"_

        Help Laurel get at least **5** pieces of treasure to finish this puzzle.
      courseB_iceage_loops1: Help Scrat across the slippery ice to get to the acorn!
      courseB_iceage_loops10: Help Scrat get all the way over to the acorn!
      courseB_iceage_loops10_2019: Help Scrat get all the way over to the acorn!
      courseB_iceage_loops11: Scrat'in meşe palamuduna ulaşmasını sağlayın!
      courseB_iceage_loops11_2019: Scrat'in meşe palamuduna ulaşmasını sağlayın!
      courseB_iceage_loops12: Get to the acorn any way you can!
      courseB_iceage_loops12_2019: Get to the acorn any way you can!
      courseB_iceage_loops1_2019: Help Scrat across the slippery ice to get to the
        acorn!
      courseB_iceage_loops2: Use both <xml><block type="maze_moveWest"/></xml> and
        <xml><block type="maze_moveSouth"/></xml> blocks to get to the acorn!
      courseB_iceage_loops2_2019: Use both <xml><block type="maze_moveWest" block_text="move
        west"/></xml> and <xml><block type="maze_moveSouth" block_text="move south"/></xml>
        blocks to get to the acorn!
      courseB_iceage_loops3: Can you get to the acorn with just one <xml><block type="maze_moveWest"/></xml>
        block? Try using a loop!
      courseB_iceage_loops3_2019: Can you get to the acorn with just one <xml><block
        type="maze_moveWest" block-text="move west"/></xml> block? Try using a loop!
      courseB_iceage_loops4: Add one more block to get Scrat all the way to the acorn!
      courseB_iceage_loops4_2019: Add one more block to get Scrat all the way to the
        acorn!
      courseB_iceage_loops6: Can you add a loop to get to the acorn?
      courseB_iceage_loops6_2019: Can you add a loop to get to the acorn?
      courseB_iceage_loops7: 'Scrat really wants that acorn! '
      courseB_iceage_loops7_2019: 'Scrat really wants that acorn! '
      courseB_iceage_loops8: 'Can you fix this code? '
      courseB_iceage_loops8_2019: 'Can you fix this code? '
      courseB_iceage_loops9: The acorn is so far away! Can you use loops to help Scrat
        get there?
      courseB_iceage_loops9_2019: The acorn is so far away! Can you use loops to help
        Scrat get there?
      courseB_maze_seq10_2019: Fix the bugs to get Scrat to the acorn.
      courseB_maze_seq11_2019: It's all you!  Get Scrat to the acorn.
      courseB_maze_seq12_2019: Domuza ulaşın!
      courseB_maze_seq1_2019: "Play with these blocks to see what they make Scrat
        do! \n\nGet Scrat to the acorn to complete the level."
      courseB_maze_seq3: Beni domuza götürmek için kodu değiştir
      courseB_maze_seq4_2019: Use **2** movement blocks to get the Scrat to the acorn.
      courseB_maze_seq5_2019: This puzzle is a little tricky!
      courseB_maze_seq6_2019: Move one way, then another to get Scrat to the acorn!
      courseB_maze_seq7_2019: Figure out what is missing and then add blocks to get
        Scrat to the acorn!
      courseB_maze_seq8_2019: Your turn!  What do you need to do to get Scrat to the
        acorn?
      courseB_maze_seq9: 'Meydan Okuma: TNT nin etrafından dolaşıp kuşu domuza eriştirin.'
      courseB_maze_seq9_2018: "**Challenge:** Move around the broken ice to get Scrat
        to the acorn."
      courseB_maze_seq9_2019: "**Challenge:** Move around the broken ice to get Scrat
        to the acorn."
      courseB_maze_seq_challenge1: Her yönde yalnızca 4 kez ilerleyebilirsin. Blokları
        bitirmeden bir yol bulabilir misin?
      courseB_maze_seq_challenge1_2018: Her yönde yalnızca 4 kez ilerleyebilirsin.
        Blokları bitirmeden bir yol bulabilir misin?
      courseB_maze_seq_challenge1_2019: Her yönde yalnızca 4 kez ilerleyebilirsin.
        Blokları bitirmeden bir yol bulabilir misin?
      courseB_maze_seq_challenge2_2019: Bu bölümün hatalarını ayıkla. Bunlar doğru
        bloklar, ama yanlış sıradalar!
      courseB_playLab_events1: "Bu oyuna \"Play Lab\" denir.  \\\r\n\\\r\nHer bloğun
        ne yaptığını anlamaya çalışın."
      courseB_playLab_events1_2018: "Bu oyuna \"Play Lab\" denir.  \\\r\n\\\r\nHer
        bloğun ne yaptığını anlamaya çalışın."
      courseB_playLab_events1_2019: "Bu oyuna \"Play Lab\" denir.  \\\r\n\\\r\nHer
        bloğun ne yaptığını anlamaya çalışın."
      courseB_playlab_events2_2019: Have Daisy the Dragon say something when you click
        "Run".
      courseB_playlab_events3: Use an event to make Daisy the Dragon switch to a random
        ![](https://images.code.org/c365e065614fea592612264f33624c09-image-1475698889081.17.53.png)
        mood when you click on her.
      courseB_playlab_events3_2018: Use an event to make Daisy the Dragon switch to
        a random ![](https://images.code.org/c365e065614fea592612264f33624c09-image-1475698889081.17.53.png)
        mood when you click on her.
      courseB_playlab_events3_2019: Use an event to make Daisy the Dragon switch to
        a random ![](https://images.code.org/c365e065614fea592612264f33624c09-image-1475698889081.17.53.png)
        mood when you click on her.
      courseB_playlab_events4: "Knight time!  \n\nAdd an event so that the knight
        moves toward the dragon when the left arrow is clicked."
      courseB_playlab_events4_2018: |-
        Knight time!  Get the dragon to finish this level.

        Add an event so that the knight moves toward the dragon when the left arrow is clicked.
      courseB_playlab_events4_2019: |-
        Knight time!  Get the dragon to finish this level.

        Add an event so that the knight moves toward the dragon when the left arrow is clicked.
      courseB_playlab_events5_2018: "Now add an event so that the knight runs away
        from the dragon when you press the right arrow.  \n\nMove the knight to the
        right to pass this level."
      courseB_playlab_events5_2019: "Now add an event so that the knight runs away
        from the dragon when you press the right arrow.  \n\nMove the knight to the
        right to pass this level."
      courseB_playlab_events6: |-
        Help your knight get all of the flags!

        To do this, you'll need to add events to help the knight move up, down, left, and right.
      courseB_playlab_events6_2018: |-
        Help your knight get all of the flags!

        To do this, you'll need to add events to help the knight move up, down, left, and right.
      courseB_playlab_events6_2019: |-
        Help your knight get all of the flags!

        To do this, you'll need to add events to help the knight move up, down, left, and right.
      courseB_playlab_events7: "Make this game fun by setting the knight to vanish
        when he runs into the dragon on his way to get the flags! \n\nPlay a sound
        when they collide to make it feel more real.\n\nVisit all of the goals, then
        run into the dragon to pass the level."
      courseB_playlab_events7_2018: "Make this game fun by adding more things!\n\n1.
        \ Set the knight to vanish when he runs into the dragon.   \n2.  Play a sound
        when they collide to make it feel more real.   \n\n* * *\n\nVisit all of the
        goals, then run into the dragon to pass the level."
      courseB_playlab_events7_2019: "Make this game fun by adding more things!\n\n1.
        \ Set the knight to vanish when he runs into the dragon.   \n2.  Play a sound
        when they collide to make it feel more real.   \n\n* * *\n\nVisit all of the
        goals, then run into the dragon to pass the level."
      courseB_playlab_eventsFP_2019: "**Free play:** Use your imagination. What can
        you do to make this game more fun?"
      courseB_playlab_events_challenge1: Bu oyun eğlenceli hale getirmek için şovalye
        dragona geldiğinde yok olmasını sağlayın! Daha gerçekçi olmasını istiyorsan
        çarptığında ses çal.
      courseB_playlab_events_challenge1_2018: Bu oyun eğlenceli hale getirmek için
        şovalye dragona geldiğinde yok olmasını sağlayın! Daha gerçekçi olmasını istiyorsan
        çarptığında ses çal.
      courseB_playlab_events_challenge1_2019: Bu oyun eğlenceli hale getirmek için
        şovalye dragona geldiğinde yok olmasını sağlayın! Daha gerçekçi olmasını istiyorsan
        çarptığında ses çal.
      courseB_playlab_events_challenge2: "Haydi, onlara tıklandığında hayvanları kaybedelim.
        Şimdi domuz ile oynamayı dene sonra diğer hayvanların eğlenceye katılmasına
        yardım et.\\\r\nHayvan Etiketi oyunu oluşturmak için sesler ve puanlar da
        ekleyebilirsin.!\\\r\n\\\r\n![](https://images.code.org/d48437a0b08be90110541e0ef21076e0-image-1497907722000.gif)"
      courseB_playlab_events_challenge2_2018: "Haydi, onlara tıklandığında hayvanları
        kaybedelim. Şimdi domuz ile oynamayı dene sonra diğer hayvanların eğlenceye
        katılmasına yardım et.\\\r\nHayvan Etiketi oyunu oluşturmak için sesler ve
        puanlar da ekleyebilirsin.!\\\r\n\\\r\n![](https://images.code.org/d48437a0b08be90110541e0ef21076e0-image-1497907722000.gif)"
      courseB_playlab_events_challenge2_2019: "Haydi, onlara tıklandığında hayvanları
        kaybedelim. Şimdi domuz ile oynamayı dene sonra diğer hayvanların eğlenceye
        katılmasına yardım et.\\\r\nHayvan Etiketi oyunu oluşturmak için sesler ve
        puanlar da ekleyebilirsin.!\\\r\n\\\r\n![](https://images.code.org/d48437a0b08be90110541e0ef21076e0-image-1497907722000.gif)"
      courseB_starWars_prog1: "![](https://images.code.org/cb247dd9f435264e2e6d897f245d1596-image-1495736234762.gif)\n\\\r\nBB-8
        yanmakta olan hurda metalleri topluyor. Hepsini toplayabilmesi için ona yardım
        et!\\\r\n\\\r\nDuvarlara ve sandıklara dikkat et! \\\r\n\\\r"
      courseB_starWars_prog10: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Hepsini alabilir misin?"_
      courseB_starWars_prog10_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Hepsini alabilir misin?"_
      courseB_starWars_prog10_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Hepsini alabilir misin?"_
      courseB_starWars_prog11: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Devam et!"_
      courseB_starWars_prog11_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Devam et!"_
      courseB_starWars_prog11_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Devam et!"_
      courseB_starWars_prog1_2018: "![](https://images.code.org/cb247dd9f435264e2e6d897f245d1596-image-1495736234762.gif)\n\\\r\nBB-8
        yanmakta olan hurda metalleri topluyor. Hepsini toplayabilmesi için ona yardım
        et!\\\r\n\\\r\nDuvarlara ve sandıklara dikkat et! \\\r\n\\\r"
      courseB_starWars_prog1_2019: "![](https://images.code.org/cb247dd9f435264e2e6d897f245d1596-image-1495736234762.gif)\n\\\r\nBB-8
        yanmakta olan hurda metalleri topluyor. Hepsini toplayabilmesi için ona yardım
        et!\\\r\n\\\r\nDuvarlara ve sandıklara dikkat et! \\\r\n\\\r"
      courseB_starWars_prog2: "![](https://images.code.org/cb247dd9f435264e2e6d897f245d1596-image-1495736234762.gif)
        \ Şimdi, BB-8' in parlayan hurda metalin **tamamını** toplamasına yardım et!
        \\\r\n\\\r\nKasalara ve duvarlara dikkat et!  \\\r\n\\\r"
      courseB_starWars_prog2_2018: "![](https://images.code.org/cb247dd9f435264e2e6d897f245d1596-image-1495736234762.gif)
        \ Şimdi, BB-8' in parlayan hurda metalin **tamamını** toplamasına yardım et!
        \\\r\n\\\r\nKasalara ve duvarlara dikkat et!  \\\r\n\\\r"
      courseB_starWars_prog2_2019: "![](https://images.code.org/cb247dd9f435264e2e6d897f245d1596-image-1495736234762.gif)
        \ Şimdi, BB-8' in parlayan hurda metalin **tamamını** toplamasına yardım et!
        \\\r\n\\\r\nKasalara ve duvarlara dikkat et!  \\\r\n\\\r"
      courseB_starWars_prog3: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Devam et, BB-8!"_
      courseB_starWars_prog3_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Devam et, BB-8!"_
      courseB_starWars_prog3_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Devam et, BB-8!"_
      courseB_starWars_prog4: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Al onu, BB-8!"_
      courseB_starWars_prog4_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Al onu, BB-8!"_
      courseB_starWars_prog4_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Al onu, BB-8!"_
      courseB_starWars_prog5: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Hepsini alabilir misin?"_
      courseB_starWars_prog5_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Hepsini alabilir misin?"_
      courseB_starWars_prog5_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Hepsini alabilir misin?"_
      courseB_starWars_prog6: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Bunu yapabilirsin!"_
      courseB_starWars_prog6_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Bunu yapabilirsin!"_
      courseB_starWars_prog6_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Bunu yapabilirsin!"_
      courseB_starWars_prog7: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Git ve onu al!"_
      courseB_starWars_prog7_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Git ve onu al!"_
      courseB_starWars_prog7_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Git ve onu al!"_
      courseB_starWars_prog8: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Devam
        et, BB-8.\"_\\\r\n\\\r\n**Meydan Okuma**: Tüm hurda metali topla."
      courseB_starWars_prog8_2018: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Devam
        et, BB-8.\"_\\\r\n\\\r\n**Meydan Okuma**: Tüm hurda metali topla."
      courseB_starWars_prog8_2019: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Devam
        et, BB-8.\"_\\\r\n\\\r\n**Meydan Okuma**: Tüm hurda metali topla."
      courseB_starWars_prog9: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Bunu yapabilirsin!"_
      courseB_starWars_prog9_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Bunu yapabilirsin!"_
      courseB_starWars_prog9_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Bunu yapabilirsin!"_
      courseC19_playLab_EOC1: "Ne kadar öğrendiğin hayret verici! Adım adım bir oyun
        hazırlayalım.\\\r\n\\\r\nAraç kutusunda yeni bloklar kullanarak, yeni bir
        arka plan seçin, ardından oyununuzda olabilecek bir oyuncu seçin."
      courseC19_playLab_EOC2: "Oyuncunuzu klavyenizdeki oklara göre hareket ettirmek
        için olay işleyicileri ve işlemler gibi blokları kullan.\\\r\n\\\r\nBu bulmacayı
        tamamlamak için oyuncuyu hedeflere götürün."
      courseC19_playLab_EOC3: "Oyununa biraz daha karakter katalım!\\\r\n\\\r\nDaha
        fazla karakter eklemek için `aktörü ayarla` bloğunu kullanın, sonra bu bulmacayı
        tamamlamak için hedefe ilerleyin."
      courseC19_playLab_EOC4: "Birden fazla karakter ve aktörlerin hareket ettirilmesi
        oyun için büyük bir başlangıçtır, ancak bunu gerçek bir oyun gibi hissettirmek
        için daha fazla şey yapmak zorundayız. Bir puan ekleyelim!\\\r\n\\\r\nSkoru
        değiştirmek için 'aktör dokunursa' gibi etkinlik bloklarını kullanın. Bu bulmacayı
        tamamlamak için 10 puan topla."
      courseC19_playLab_EOC5: İyi iş! Çalışan bir oyunun bütün temel bileşenlerine
        sahipsin. Şimdi oyunu oynamak istediğine emin olmak için biraz vakit geçir.
        Oyunu kazanmak ya da kaybetmek için bir yol ekle, sonra bu koşullardan birini
        yerine getirene kadar oyna.
      courseC19_playLab_EOC6: Bitirdin! Şimdi oyununuzu oynayabilir veya dostlarınızla
        ve sınıf arkadaşlarınızla paylaşabilirsiniz!
      courseC_PlayLab_events6_2019: Now, write a program to make Waddles the Penguin
        move around using the up / down / left / right keys to hit all of the targets!
      courseC_PlayLab_events7: |-
        The `repeat forever` block allows you to run code over and over forever.  Use this block to move Chomp the Dino (actor 2) up and down by 400 pixels forever.

        ![](https://images.code.org/0cbe6dd5f4e2251e3f121dbabc0cc19d-image-1523040103822.com-resize.gif)
      courseC_PlayLab_events7_2018: |-
        The `repeat forever` block allows you to run code over and over forever.  Use this block to move Chomp the Dino (actor 2) up and down by 400 pixels forever.

        ![](https://images.code.org/0cbe6dd5f4e2251e3f121dbabc0cc19d-image-1523040103822.com-resize.gif)
      courseC_PlayLab_events7_2019: |-
        The `repeat forever` block allows you to run code over and over forever.  Use this block to move Chomp the Dino (actor 2) up and down by 400 pixels forever.

        ![](https://images.code.org/0cbe6dd5f4e2251e3f121dbabc0cc19d-image-1523040103822.com-resize.gif)
      courseC_PlayLab_events8: "Can you have Waddles (actor 1) say \"Ouch!\" and play
        a \"hit\" sound if he runs into Chomp? \n\nWhen you're done, play the game
        to make that happen.\n\n![](https://images.code.org/a634f249021651f60a1acf37bf78d07d-image-1475342557950.gif)"
      courseC_PlayLab_events8_2018: "Can you have Waddles (actor 1) say \"Ouch!\"
        and play a \"hit\" sound if he runs into Chomp? \n\nWhen you're done, play
        the game to make that happen.\n\n![](https://images.code.org/a634f249021651f60a1acf37bf78d07d-image-1475342557950.gif)"
      courseC_PlayLab_events8_2019: "Can you have Waddles (actor 1) say \"Ouch!\"
        and play a \"hit\" sound if he runs into Chomp? \n\nWhen you're done, play
        the game to make that happen.\n\n![](https://images.code.org/a634f249021651f60a1acf37bf78d07d-image-1475342557950.gif)"
      courseC_PlayLab_eventsA_embed_2019: Let's play a game. Move the penguin to the
        octopus to score a point. Score 5 points to win.
      courseC_PlayLab_events_challenge1: "Waddles' ın, dinazorla karşılaştığında ve
        puan aldığında başlangıç konumuna otomatik olarak geri dönmesi için yeni bir
        blok kullan. Bu, oyunu daha zorlu ve eğlenceli hale getirecek!\\\r\n\\\r\nOyunu
        oyna ve yeterli puan alıncaya kadar oklarla Waddles'ı hareket ettir. Bu meydan
        okumayı tamamlamak için Waddles, ekranın 'sol orta' pozisyonuna getirilmeli."
      courseC_PlayLab_events_challenge1_2018: "Waddles' ın, dinazorla karşılaştığında
        ve puan aldığında başlangıç konumuna otomatik olarak geri dönmesi için yeni
        bir blok kullan. Bu, oyunu daha zorlu ve eğlenceli hale getirecek!\\\r\n\\\r\nOyunu
        oyna ve yeterli puan alıncaya kadar oklarla Waddles'ı hareket ettir. Bu meydan
        okumayı tamamlamak için Waddles, ekranın 'sol orta' pozisyonuna getirilmeli."
      courseC_PlayLab_events_challenge1_2019: "Waddles' ın, dinazorla karşılaştığında
        ve puan aldığında başlangıç konumuna otomatik olarak geri dönmesi için yeni
        bir blok kullan. Bu, oyunu daha zorlu ve eğlenceli hale getirecek!\\\r\n\\\r\nOyunu
        oyna ve yeterli puan alıncaya kadar oklarla Waddles'ı hareket ettir. Bu meydan
        okumayı tamamlamak için Waddles, ekranın 'sol orta' pozisyonuna getirilmeli."
      courseC_artist_loop1: "Muhteşem!  \\\r\n\\\r\nBizim döngüler başlamadan önce
        'set pattern' blokunu kullanıp fırçayı değiştirerek bir kaç pizza ekleyelim."
      courseC_artist_loop1_2018: "Muhteşem!  \\\r\n\\\r\nBizim döngüler başlamadan
        önce 'set pattern' blokunu kullanıp fırçayı değiştirerek bir kaç pizza ekleyelim."
      courseC_artist_loop1_2019: "Muhteşem!  \\\r\n\\\r\nBizim döngüler başlamadan
        önce 'set pattern' blokunu kullanıp fırçayı değiştirerek bir kaç pizza ekleyelim."
      courseC_artist_loops1a: "Tek seferde daga büyüğünü yapalım!  \\\r\n\\\r\nSanatçıyı
        oyun alanının ortasına almak için 'jump to 200 over 200 down' komutunu kullan,
        sonra kuşu görünür yapmak için 'draw a sticker' komutunu kullan. "
      courseC_artist_loops1a_2018: "**Free Play:** Let's build something bigger, one
        step at a time!  \n\nUse the `jump to 200 over 200 down` to get the artist
        to the center of the play area, then use the `draw a sticker` block to make
        a bird appear.  \n\n* * *\n\nPress \"Finish\" when you are happy with what
        you've made."
      courseC_artist_loops1a_2019: |-
        **Free Play:** Let's build something bigger, one step at a time!

        Get the artist to the center of the play area using the <xml> <block type="jump_to" block-text="jump to the middle center position"><title name="VALUE">13</title></block></xml> block, then use the <xml><block type="sticker" block-text="draw sticker"><title name="VALUE">Beaver</title></block></xml> block to make something appear.

        * * *

        Press "Finish" when you are happy with what you've made.

        ![expandable](https://images.code.org/1435d3650553df44eba973572d409a50-image-1553096405891.png)
        ![expandable](https://images.code.org/6912d2144b90aa7087fe854742d1e8b9-image-1553096425394.png)
        ![expandable](https://images.code.org/8de9e1aa15fdfe30ffed763e0e1d6e04-image-1553096428531.png)
      courseC_artist_loops1b_2019: "Change the direction your sticker is facing by
        adding a `turn` command to your code. \n\n* * *\n\nPress \"Finish\" when you
        are happy with what you've made.\n\n![expandable](https://images.code.org/30fe9d37758abd27055d9a6e5a890680-image-1553097358155.png)\n![expandable](https://images.code.org/61feed00662019b99ac774322231f084-image-1553097362176.png)\n![expandable](https://images.code.org/fd123bb703ea4c630218a12eb5994053-image-1553097354066.png)"
      courseC_artist_loops2a: Şimdi, kuşun 36 derecelik 10 dönüş yapacağı bir döngü
        kullan.
      courseC_artist_loops2a_2018: Şimdi, kuşun 36 derecelik 10 dönüş yapacağı bir
        döngü kullan.
      courseC_artist_loops2a_2019: Şimdi, kuşun 36 derecelik 10 dönüş yapacağı bir
        döngü kullan.
      courseC_artist_loops3a: "Çok Eğlenceli!  \\\r\n\\\r\nAşağıdaki gibi bir resim
        yapmak için kuştan hemen sonra bir yarasa çıkartması ekleyin.\\\r\n\\_\\_\\_\\\r\n\\\r\n![](https://images.code.org/3aa37f679eabc7a5a337291db614dd98-image-1496711069351.03.49.png)"
      courseC_artist_loops3a_2018: "Çok Eğlenceli!  \\\r\n\\\r\nAşağıdaki gibi bir
        resim yapmak için kuştan hemen sonra bir yarasa çıkartması ekleyin.\\\r\n\\_\\_\\_\\\r\n\\\r\n![](https://images.code.org/3aa37f679eabc7a5a337291db614dd98-image-1496711069351.03.49.png)"
      courseC_artist_loops3a_2019: "Çok Eğlenceli!  \\\r\n\\\r\nAşağıdaki gibi bir
        resim yapmak için kuştan hemen sonra bir yarasa çıkartması ekleyin.\\\r\n\\_\\_\\_\\\r\n\\\r\n![](https://images.code.org/3aa37f679eabc7a5a337291db614dd98-image-1496711069351.03.49.png)"
      courseC_artist_loops4a: "Kodu düzenleyin böylece kuş ve yarasa damgalarının
        arasında 75 piksel ileri atlayarak boşluk bırakacaksınız. Bu bulmacada döngünün
        içine '200 yukarı 200 aşağı atla' koyarak ortada kalabilirsiniz. \\\r\n\\_\\_\\_\\\r\n\\\r\n![](https://images.code.org/5b67ed8d878d6c2a5009eee054427fd5-image-1496711253365.05.35.png)"
      courseC_artist_loops4a_2018: |-
        Edit your code so that you jump forward by 75 pixels between stamping the bird and the bat. In this puzzle, make sure you have `jump to 200 over 200 down` inside of your loop, so you stay in the center!

        * * *

        ![expandable](https://images.code.org/5b67ed8d878d6c2a5009eee054427fd5-image-1496711253365.05.35.png)
      courseC_artist_loops4a_2019: |-
        Edit your code so that you jump forward between drawing the two stickers. In this puzzle, make sure you have `jump to the middle center position` inside of your loop, so you stay in the center!

        * * *

        Press "Finish" when you are happy with what you've made.

        ![expandable](https://images.code.org/5b67ed8d878d6c2a5009eee054427fd5-image-1496711253365.05.35.png)
        ![expandable](https://images.code.org/5774170704916cfddcf2e98c2c01d718-image-1553099207939.png)
        ![expandable](https://images.code.org/9b016314df4aed5165c76282bab0cea1-image-1553099212229.png)
        ![expandable](https://images.code.org/2cf50b8e9ae75803f15908304c22a10b-image-1553099215987.png)
      courseC_artist_loops5a: "Çıkartmaların birini veya ikisini farklı bir yaratıkla
        değiştirdiğinizde ne olur?\\\r\n\\_\\_\\_\\\r\n![](https://images.code.org/cadb5e244db64a781bc02b55f2e7ccca-image-1496711397989.08.28.png)"
      courseC_artist_loops5a_2018: "Çıkartmaların birini veya ikisini farklı bir yaratıkla
        değiştirdiğinizde ne olur?\\\r\n\\_\\_\\_\\\r\n![](https://images.code.org/cadb5e244db64a781bc02b55f2e7ccca-image-1496711397989.08.28.png)"
      courseC_artist_loops5a_2019: "Çıkartmaların birini veya ikisini farklı bir yaratıkla
        değiştirdiğinizde ne olur?\\\r\n\\_\\_\\_\\\r\n![](https://images.code.org/cadb5e244db64a781bc02b55f2e7ccca-image-1496711397989.08.28.png)"
      courseC_artist_loops5b: "## 'move forward' komutunu kullandıktan sonra 'move
        backward' komutunu 100,200 veya 400 piksel değerleriyle döngünün içinde bir
        yerlerde kullanırsanız ne olur?  \\\r\n\nSanat eser iyapmak amacıyla döngüyü
        başlatmadan önce 'set pattern' komutunu kullanmayı dene!\\\r\n\\_\\_\\_\\\r\n![](https://images.code.org/d523de02389fd23db3029327c03b727d-image-1497039953252.24.18.png)"
      courseC_artist_loops5b_2018: "## 'move forward' komutunu kullandıktan sonra
        'move backward' komutunu 100,200 veya 400 piksel değerleriyle döngünün içinde
        bir yerlerde kullanırsanız ne olur?  \\\r\n\nSanat eser iyapmak amacıyla döngüyü
        başlatmadan önce 'set pattern' komutunu kullanmayı dene!\\\r\n\\_\\_\\_\\\r\n![](https://images.code.org/d523de02389fd23db3029327c03b727d-image-1497039953252.24.18.png)"
      courseC_artist_loops5b_2019: "## 'move forward' komutunu kullandıktan sonra
        'move backward' komutunu 100,200 veya 400 piksel değerleriyle döngünün içinde
        bir yerlerde kullanırsanız ne olur?  \\\r\n\nSanat eser iyapmak amacıyla döngüyü
        başlatmadan önce 'set pattern' komutunu kullanmayı dene!\\\r\n\\_\\_\\_\\\r\n![](https://images.code.org/d523de02389fd23db3029327c03b727d-image-1497039953252.24.18.png)"
      courseC_artist_loops6a: "Döngünün içinde istediğiniz herhangi bir yere üçüncü
        bir çıkartma ekle! Şimdi neye benziyor?\\\r\n\n-   Daha fazla çeşitlilik için
        fırçadaki deseni değiştirin!\\\r\n    \\\r\n    \\_\\_\\_\\\r\n    \\\r\n
        \   ![](https://images.code.org/b0f999ef4b9ab6bd9780e9fbac07dc8d-image-1497040845047.39.55.png)"
      courseC_artist_loops6a_2018: "Döngünün içinde istediğiniz herhangi bir yere
        üçüncü bir çıkartma ekle! Şimdi neye benziyor?\\\r\n\n-   Daha fazla çeşitlilik
        için fırçadaki deseni değiştirin!\\\r\n    \\\r\n    \\_\\_\\_\\\r\n    \\\r\n
        \   ![](https://images.code.org/b0f999ef4b9ab6bd9780e9fbac07dc8d-image-1497040845047.39.55.png)"
      courseC_artist_loops6a_2019: |-
        Add a third sticker anywhere in the loop that you want! What does it look like now?

        -   Change the pattern on your brush for more variety!

        * * *

        ![expandable](https://images.code.org/edc53f27379e018e61a6ab9dcc2717ea-image-1560984648573.png)
        ![expandable](https://images.code.org/c41b00a743f245f98d2cfb66cb18e771-image-1560984690182.png)
        ![expandable](https://images.code.org/4c8910f72a7f0cd81713ded7b866a883-image-1560984706203.png)
      courseC_artist_loops7a: "Farklı sayılarla çalıştırarak 'tekrarla' döngüsünü
        değiştirmeyi dene.  Bir çemberin etrafını tam olarak dolaşabilmek için ne
        kadar dönmen gerekir?\\\r\n\n-   Kaç defa döneceğini değiştirmeyi dene\\\r\n
        \   -   6 defa 60 derece dönmeyi dene\\\r\n    -   18 defa 20 derece dönmeyi
        dene\\\r\n        \\_\\_\\_\\\r\n        Bu resimde bir korsan, bir ninja
        ve bir zürafa kullanılmış. Onlar 20 derecelik açı ile 18 defa dönüyor.\\\r\n
        \       \\\r\n        ![](https://images.code.org/99411638acb44e8a7ba5b9696fe11fa4-image-1496714175039.53.24.png)"
      courseC_artist_loops7a_2018: "Farklı sayılarla çalıştırarak 'tekrarla' döngüsünü
        değiştirmeyi dene.  Bir çemberin etrafını tam olarak dolaşabilmek için ne
        kadar dönmen gerekir?\\\r\n\n-   Kaç defa döneceğini değiştirmeyi dene\\\r\n
        \   -   6 defa 60 derece dönmeyi dene\\\r\n    -   18 defa 20 derece dönmeyi
        dene\\\r\n        \\_\\_\\_\\\r\n        Bu resimde bir korsan, bir ninja
        ve bir zürafa kullanılmış. Onlar 20 derecelik açı ile 18 defa dönüyor.\\\r\n
        \       \\\r\n        ![](https://images.code.org/99411638acb44e8a7ba5b9696fe11fa4-image-1496714175039.53.24.png)"
      courseC_artist_loops7a_2019: |-
        Try changing the `repeat` loop to run a different number of times.  How far do you have to turn to go around in a full circle?

        -   Try changing how many times you spin
            -   Try a 60 degree turn for 6 times around
            -   Try a 20 degree turn for 18 times around

        * * *

        The first image uses a pirate, a ninja, and a giraffe. They loop 18 times with a 20 degree turn.

        ![expandable](https://images.code.org/99411638acb44e8a7ba5b9696fe11fa4-image-1496714175039.53.24.png)
        ![expandable](https://images.code.org/9f28cb9b434b914846c3846bc6652f66-image-1560982666379.png)
        ![expandable](https://images.code.org/e9128684956504b0172708d63b65f93a-image-1560982686482.png)
        ![expandable](https://images.code.org/8e9cf52ecaf72678c65558f18f3e0d3e-image-1560982695632.png)
      courseC_artist_loops8a: "Şimdi kendi istediğini yap.  Farklı çıkartmalardan
        iki ayrı daire yaptığında ne oluyor?\\\r\n\\_\\_\\_\\\r\nFikre mi ihtiyacın
        var? Bunun gibi bir tasarım yapmaya çalış.\\\r\n\\\r\n![](https://images.code.org/d8e0ad6294aa5e04e4aab56631a6b50b-image-1496714582863.02.14.png)"
      courseC_artist_loops8a_2018: "Şimdi kendi istediğini yap.  Farklı çıkartmalardan
        iki ayrı daire yaptığında ne oluyor?\\\r\n\\_\\_\\_\\\r\nFikre mi ihtiyacın
        var? Bunun gibi bir tasarım yapmaya çalış.\\\r\n\\\r\n![](https://images.code.org/d8e0ad6294aa5e04e4aab56631a6b50b-image-1496714582863.02.14.png)"
      courseC_artist_loops8a_2019: "Şimdi kendi istediğini yap.  Farklı çıkartmalardan
        iki ayrı daire yaptığında ne oluyor?\\\r\n\\_\\_\\_\\\r\nFikre mi ihtiyacın
        var? Bunun gibi bir tasarım yapmaya çalış.\\\r\n\\\r\n![](https://images.code.org/d8e0ad6294aa5e04e4aab56631a6b50b-image-1496714582863.02.14.png)"
      courseC_artist_loopsPre1a: "Şimdi, içinde bulunduğun 'tekrarla' döngüsüne kodu
        yerleştir, ve onu 6 defa döndür. \\\r\n\n-   Ekrandaki resmi tamamlamak için
        her döngünün sonunda 60 derece dönmen gerekecek."
      courseC_artist_loopsPre1a_2018: "Şimdi, içinde bulunduğun 'tekrarla' döngüsüne
        kodu yerleştir, ve onu 6 defa döndür. \\\r\n\n-   Ekrandaki resmi tamamlamak
        için her döngünün sonunda 60 derece dönmen gerekecek."
      courseC_artist_loopsPre1a_2019: "Şimdi, içinde bulunduğun 'tekrarla' döngüsüne
        kodu yerleştir, ve onu 6 defa döndür. \\\r\n\n-   Ekrandaki resmi tamamlamak
        için her döngünün sonunda 60 derece dönmen gerekecek."
      courseC_artist_loopsPrePre1a: Sanatçıyı oyun alanının merkezine getirmek için
        '200 yukarı 200 aşağı zıpla' komutunu kullan, ardından '50 piksel ilerle'
        bloğu ile 50 piksel uzunluğunda bir çizgi çiz.
      courseC_artist_loopsPrePre1a_2018: Sanatçıyı oyun alanının merkezine getirmek
        için '200 yukarı 200 aşağı zıpla' komutunu kullan, ardından '50 piksel ilerle'
        bloğu ile 50 piksel uzunluğunda bir çizgi çiz.
      courseC_artist_loopsPrePre1a_2019: Sanatçıyı oyun alanının merkezine getirmek
        için '200 yukarı 200 aşağı zıpla' komutunu kullan, ardından '50 piksel ilerle'
        bloğu ile 50 piksel uzunluğunda bir çizgi çiz.
      courseC_artist_prog1: |-
        _"Hi, I'm an artist. You can write code to make me draw almost anything."_

        Play with the blocks in the toolbox to see what they do!
      courseC_artist_prog1_2018: |-
        _"Hi, I'm an artist. You can write code to make me draw almost anything."_

        Play with the blocks in the toolbox to see what they do!
      courseC_artist_prog1_2019: |-
        _"Hi, I'm an artist. You can write code to make me draw almost anything."_

        Play with the blocks in the toolbox to see what they do!
      courseC_artist_prog2: |-
        _"Let's make a cage for my pet monster!"_

        Drag blocks onto the screen to have the artist draw over the grey lines in the picture.\
        (Each line is 100 pixels long)
      courseC_artist_prog2_2018: |-
        _"Let's make a cage for my pet monster!"_

        Drag blocks onto the screen to have the artist draw over the grey lines in the picture.\
        (Each line is 100 pixels long)
      courseC_artist_prog2_2019: |-
        _"Let's make a cage for my pet monster!"_

        Drag blocks onto the screen to have the artist draw over the grey lines in the picture.\
        (Each line is 100 pixels long)
      courseC_artist_prog3: |-
        _"This spaceship needs a window!"_

        Each side of the inner square is 100 pixels and all of the angles are 90 degrees.
      courseC_artist_prog3_2018: |-
        _"This spaceship needs a window!"_

        Each side of the inner square is 100 pixels and all of the angles are 90 degrees.
      courseC_artist_prog3_2019: |-
        _"This spaceship needs a window!"_

        Each side of the inner square is 100 pixels and all of the angles are 90 degrees.
      courseC_artist_prog4: |-
        _"Oh no!  Starla's pet alien just flew away! Let's help the spacewoman!"_

        Finish Starla's rocket so she can chase her pet.\
        (Each side of the triangle is 100 pixels long and has 120 degree outer angles.)
      courseC_artist_prog4_2018: |-
        _"Oh no!  Starla's pet alien just flew away! Let's help the spacewoman!"_

        Finish Starla's rocket so she can chase her pet.\
        (Each side of the triangle is 100 pixels long and has 120 degree outer angles.)
      courseC_artist_prog4_2019: |-
        _"Oh no!  Starla's pet alien just flew away! Let's help the spacewoman!"_

        Finish Starla's rocket so she can chase her pet.\
        (Each side of the triangle is 100 pixels long and has 120 degree outer angles.)
      courseC_artist_prog5: |-
        _"Maybe we should make a tag for each of our pets in case they get lost!"_

        Finish this tag by drawing a rectangle around the outside.\
        (The long sides are 200 pixels each and the short sides are each 100 pixels)
      courseC_artist_prog5_2018: |-
        _"Maybe we should make a tag for each of our pets in case they get lost!"_

        Finish this tag by drawing a rectangle around the outside.\
        (The long sides are 200 pixels each and the short sides are each 100 pixels)
      courseC_artist_prog5_2019: |-
        _"Maybe we should make a tag for each of our pets in case they get lost!"_

        Finish this tag by drawing a rectangle around the outside.\
        (The long sides are 200 pixels each and the short sides are each 100 pixels)
      courseC_artist_prog6: |-
        _"Now a tag for Belle!"_

        Draw this diamond with 200 pixel sides.
      courseC_artist_prog6_2018: |-
        _"Now a tag for Belle!"_

        Draw this square with 200 pixel sides.
      courseC_artist_prog6_2019: |-
        _"Now a tag for Belle!"_

        Draw this square with 200 pixel sides.
      courseC_artist_prog7: "**Challenge:** This tag is a special one!  \n\nCan you
        figure out how to draw the outline?\\\n(The long side is 150 pixels and each
        of the short sides are 75 pixels.)"
      courseC_artist_prog7_2018: "**Challenge:** This tag is a special one!  \n\nCan
        you figure out how to draw the outline?\\\n(The long side is 150 pixels and
        each of the short sides are 75 pixels.)"
      courseC_artist_prog7_2019: "**Challenge:** This tag is a special one!  \n\nCan
        you figure out how to draw the outline?\\\n(The long side is 150 pixels and
        each of the short sides are 75 pixels.)"
      courseC_artist_prog8: |-
        One more tag.  This is a triangle for Pi.\
        (Each side is 150 pixels)
      courseC_artist_prog8_2018: |-
        One more tag.  This is a triangle for Pi.\
        (Each side is 150 pixels)
      courseC_artist_prog8_2019: |-
        One more tag.  This is a triangle for Pi.\
        (Each side is 150 pixels)
      courseC_artist_prog_challenge1: 'Hayvanların her biri için odalar çiz. Bu bulmacayı
        çözmek için birçok farklı yol var, keşfederek eğlen! Karelerin her kenarı
        100 piksel uzunluğundadır. '
      courseC_artist_prog_challenge1_2018: 'Hayvanların her biri için odalar çiz.
        Bu bulmacayı çözmek için birçok farklı yol var, keşfederek eğlen! Karelerin
        her kenarı 100 piksel uzunluğundadır. '
      courseC_artist_prog_challenge1_2019: 'Hayvanların her biri için odalar çiz.
        Bu bulmacayı çözmek için birçok farklı yol var, keşfederek eğlen! Karelerin
        her kenarı 100 piksel uzunluğundadır. '
      courseC_artist_prog_challenge2a: |-
        _"Help me paint the yellow lines on this road!"_

        The three line segments have lengths of 150, 100, and 200 pixels!
      courseC_artist_prog_challenge2a_2018: |-
        _"Help me paint the yellow lines on this road!"_

        The three line segments have lengths of 150, 100, and 200 pixels!
      courseC_artist_prog_challenge2a_2019: |-
        _"Help me paint the yellow lines on this road!"_

        The three line segments have lengths of 150, 100, and 200 pixels!
      courseC_collector_loops_challenge2: Döngüleri kullanarak hazine avı yapalım.
        Bu koddaki hatayı ayıklayarak toplayıcıya yardım et. Tüm hazineyi al!
      courseC_collector_loops_challenge2_2018: Döngüleri kullanarak hazine avı yapalım.
        Bu koddaki hatayı ayıklayarak toplayıcıya yardım et. Tüm hazineyi al!
      courseC_collector_loops_challenge2_2019: Döngüleri kullanarak hazine avı yapalım.
        Bu koddaki hatayı ayıklayarak toplayıcıya yardım et. Tüm hazineyi al!
      courseC_collector_prog1: |-
        **Free Play:** This is Laurel the Adventurer! Move her around and get as much treasure as you can. Use the `collect` block to pick up the treasure!

        Drag blocks into the workspace and try to figure out how to get treasure.  Get at least one item to pass this level.
      courseC_collector_prog1_2018: |-
        **Free Play:** This is Laurel the Adventurer! Move her around and get as much treasure as you can. Use the `collect` block to pick up the treasure!

        Drag blocks into the workspace and try to figure out how to get treasure.  Get at least one item to pass this level.
      courseC_collector_prog1_2019: |-
        **Free Play:** This is Laurel the Adventurer! Move her around and get as much treasure as you can. Use the `collect` block to pick up the treasure!

        Drag blocks into the workspace and try to figure out how to get treasure.  Get at least one item to pass this level.
      courseC_collector_prog2: Move Laurel to the treasure, then use <xml><block type="collector_collect"/></xml>
        to pick it up.
      courseC_collector_prog2_2018: Move Laurel to the treasure, then use <xml><block
        type="collector_collect"/></xml> to pick it up.
      courseC_collector_prog2_2019: Move Laurel to the treasure, then use the <xml><block
        type="collector_collect" block-text="collect"/></xml> block to pick it up.
      courseC_collector_prog3: "_\"Sequence matters!\"_ \n\nThe blocks you need are
        already in the workspace, but not connected.\\\nOrder these blocks to collect
        the treasure and solve the puzzle."
      courseC_collector_prog3_2018: "_\"Sequence matters!\"_ \n\nThe blocks you need
        are already in the workspace, but not connected.\\\nOrder these blocks to
        collect the treasure and solve the puzzle."
      courseC_collector_prog3_2019: "_\"Sequence matters!\"_ \n\nThe blocks you need
        are already in the workspace, but not connected.\\\nOrder these blocks to
        collect the treasure and solve the puzzle."
      courseC_collector_prog4: "_\"Sequence matters!\"_\n\nThe blocks you need are
        already in the workspace, but not connected.  \n\nPut these blocks in order
        to collect all of the treasure and solve the puzzle."
      courseC_collector_prog4_2018: "_\"Sequence matters!\"_\n\nThe blocks you need
        are already in the workspace, but not connected.  \n\nPut these blocks in
        order to collect all of the treasure and solve the puzzle."
      courseC_collector_prog4_2019: "_\"Sequence matters!\"_\n\nThe blocks you need
        are already in the workspace, but not connected.  \n\nPut these blocks in
        order to collect all of the treasure and solve the puzzle."
      courseC_collector_prog5: |-
        _"Help me collect each bit of treasure!"_

        These blocks are in the wrong order. Can you fix them?
      courseC_collector_prog5_2018: |-
        _"Help me collect each bit of treasure!"_

        These blocks are in the wrong order. Can you fix them?
      courseC_collector_prog5_2019: |-
        _"Help me collect each bit of treasure!"_

        These blocks are in the wrong order. Can you fix them?
      courseC_collector_prog6: |-
        _"Help me collect all of the treasure!"_

        These blocks are in the wrong order. Reorder them to collect all of the treasure.
      courseC_collector_prog6_2018: |-
        _"Help me collect all of the treasure!"_

        These blocks are in the wrong order. Reorder them to collect all of the treasure.
      courseC_collector_prog6_2019: |-
        _"Help me collect all of the treasure!"_

        These blocks are in the wrong order. Reorder them to collect all of the treasure.
      courseC_collector_prog7: |-
        **Challenge:** _"What is going on here?"_

        Even if we put these in the right order, there will still be some missing.\
        Use blocks from the toolbox to collect all of the treasure.
      courseC_collector_prog7_2018: |-
        **Challenge:** _"What is going on here?"_

        Even if we put these in the right order, there will still be some missing.\
        Use blocks from the toolbox to collect all of the treasure.
      courseC_collector_prog7_2019: |-
        **Challenge:** _"What is going on here?"_

        Even if we put these in the right order, there will still be some missing.\
        Use blocks from the toolbox to collect all of the treasure.
      courseC_collector_prog8: _"Keep up the good work! Help me collect all of the
        treasure."_
      courseC_collector_prog8_2018: _"Keep up the good work! Help me collect all of
        the treasure."_
      courseC_collector_prog8_2019: _"Keep up the good work! Help me collect all of
        the treasure."_
      courseC_collector_prog9: Bütün hazineyi toplayalım
      courseC_collector_prog9_2018: Bütün hazineyi toplayalım
      courseC_collector_prog9_2019: Bütün hazineyi toplayalım
      courseC_collector_prog_challenge2: Bu mağarada **20** parça hazine var. Meydan
        okumayı tamamlamak için en az yarısını toplayın!
      courseC_collector_prog_challenge2_2018: Bu mağarada **20** parça hazine var.
        Meydan okumayı tamamlamak için en az yarısını toplayın!
      courseC_collector_prog_challenge2_2019: Bu mağarada **20** parça hazine var.
        Meydan okumayı tamamlamak için en az yarısını toplayın!
      courseC_data wizard: Press Run. The wizard will make animals appear. Count them.
        What do you notice?
      courseC_flappy_events1: "'Tıklandığı zaman' olayına 'normal miktarda kanat çırp'
        bloğunu ekleyin, sonra 'Çalıştır' a basın.   \\\r\n\\\r\n\\---\\\r\n\\\r\nFlappy'
        i hedefe hareket ettirmek için oyun alanına dokunun veya tıklayın."
      courseC_flappy_events10: "Kendi Flappy oyununu yarat!\n\\\r\n\\\r\nGörselleri
        ve kuralları değiştirebilirsin...hatta yerçekimi bile! \\\r\nBitirdiğinde,
        arkadaşlarınla paylaşmak için \"Bitir\" butonuna tıkla."
      courseC_flappy_events10_2018: "Kendi Flappy oyununu yarat!\n\\\r\n\\\r\nGörselleri
        ve kuralları değiştirebilirsin...hatta yerçekimi bile! \\\r\nBitirdiğinde,
        arkadaşlarınla paylaşmak için \"Bitir\" butonuna tıkla."
      courseC_flappy_events10_2019: "Kendi Flappy oyununu yarat!\n\\\r\n\\\r\nGörselleri
        ve kuralları değiştirebilirsin...hatta yerçekimi bile! \\\r\nBitirdiğinde,
        arkadaşlarınla paylaşmak için \"Bitir\" butonuna tıkla."
      courseC_flappy_events1_2018: "'Tıklandığı zaman' olayına 'normal miktarda kanat
        çırp' bloğunu ekleyin, sonra 'Çalıştır' a basın.   \\\r\n\\\r\n\\---\\\r\n\\\r\nFlappy'
        i hedefe hareket ettirmek için oyun alanına dokunun veya tıklayın."
      courseC_flappy_events1_2019: "'Tıklandığı zaman' olayına 'normal miktarda kanat
        çırp' bloğunu ekleyin, sonra 'Çalıştır' a basın.   \\\r\n\\\r\n\\---\\\r\n\\\r\nFlappy'
        i hedefe hareket ettirmek için oyun alanına dokunun veya tıklayın."
      courseC_flappy_events2: "'Çalıştığı zaman' olayı oyun başlar başlamaz kodu çalıştırmanızı
        sağlar.  \\\r\n\\\r\n\"Çalıştır\" butonuna basıldığında bölümün hızının ayarlanacağı
        bir blok eklemeyi deneyin. \\\r\n\\\r\n\\---\\\r\n\\\r\nOyunu oynayın ve devam
        etmek için hedefe kanat çırpın."
      courseC_flappy_events2_2018: "'Çalıştığı zaman' olayı oyun başlar başlamaz kodu
        çalıştırmanızı sağlar.  \\\r\n\\\r\n\"Çalıştır\" butonuna basıldığında bölümün
        hızının ayarlanacağı bir blok eklemeyi deneyin. \\\r\n\\\r\n\\---\\\r\n\\\r\nOyunu
        oynayın ve devam etmek için hedefe kanat çırpın."
      courseC_flappy_events2_2019: "'Çalıştığı zaman' olayı oyun başlar başlamaz kodu
        çalıştırmanızı sağlar.  \\\r\n\\\r\n\"Çalıştır\" butonuna basıldığında bölümün
        hızının ayarlanacağı bir blok eklemeyi deneyin. \\\r\n\\\r\n\\---\\\r\n\\\r\nOyunu
        oynayın ve devam etmek için hedefe kanat çırpın."
      courseC_flappy_events3: "Şimdi zemin ekledik.\n\\\r\n\\\r\n'Zemine çarptığında'
        olayına 'oyunu bitir' bloğunu bağla. \\\r\n\\\r\n\\---\\\r\n\\\r\nOyunu oyna
        ve devam etmek için kuşu zemine çarptır."
      courseC_flappy_events3_2018: "Şimdi zemin ekledik.\n\\\r\n\\\r\n'Zemine çarptığında'
        olayına 'oyunu bitir' bloğunu bağla. \\\r\n\\\r\n\\---\\\r\n\\\r\nOyunu oyna
        ve devam etmek için kuşu zemine çarptır."
      courseC_flappy_events3_2019: "Şimdi zemin ekledik.\n\\\r\n\\\r\n'Zemine çarptığında'
        olayına 'oyunu bitir' bloğunu bağla. \\\r\n\\\r\n\\---\\\r\n\\\r\nOyunu oyna
        ve devam etmek için kuşu zemine çarptır."
      courseC_flappy_events4: "Flappy için çarpışma kodunu yazmadığınız sürece Flappy
        engellerin içinden uçacaktır. \\\r\n\\\r\n'Bir engele çarptığı zaman' olayına
        bir blok ekleyin böylece Flappy ilk borulara çarptığı zaman oyun sona erer."
      courseC_flappy_events4_2018: "Flappy için çarpışma kodunu yazmadığınız sürece
        Flappy engellerin içinden uçacaktır. \\\r\n\\\r\n'Bir engele çarptığı zaman'
        olayına bir blok ekleyin böylece Flappy ilk borulara çarptığı zaman oyun sona
        erer."
      courseC_flappy_events4_2019: "Flappy için çarpışma kodunu yazmadığınız sürece
        Flappy engellerin içinden uçacaktır. \\\r\n\\\r\n'Bir engele çarptığı zaman'
        olayına bir blok ekleyin böylece Flappy ilk borulara çarptığı zaman oyun sona
        erer."
      courseC_flappy_events5: "Flappy engelleri geçtiğinde puanları saymak için bir
        skor tabelası ekledik  \\\r\n\\\r\n'Bir engel geçildiğinde' olayına, puanları
        sayacak bir kod bloğu ekle, ardından Flappy'nin ilk grup borular arasında
        uçması için \"Çalıştır\" butonuna tıkla."
      courseC_flappy_events5_2018: "Flappy engelleri geçtiğinde puanları saymak için
        bir skor tabelası ekledik  \\\r\n\\\r\n'Bir engel geçildiğinde' olayına, puanları
        sayacak bir kod bloğu ekle, ardından Flappy'nin ilk grup borular arasında
        uçması için \"Çalıştır\" butonuna tıkla."
      courseC_flappy_events5_2019: "Flappy engelleri geçtiğinde puanları saymak için
        bir skor tabelası ekledik  \\\r\n\\\r\n'Bir engel geçildiğinde' olayına, puanları
        sayacak bir kod bloğu ekle, ardından Flappy'nin ilk grup borular arasında
        uçması için \"Çalıştır\" butonuna tıkla."
      courseC_flappy_events6: "Farklı bir kanat çırpma hızı almak için 'normal miktarda
        kanat çırp' ın içindeki aşağı oka tıklayın.  \\\r\n\\\r\nHer tıkladığınızda
        Flappy daha fazla veya daha az miktarda kanat çırptıktan sonra hala bir puan
        alıp alamadığınıza bakın."
      courseC_flappy_events6_2018: "Farklı bir kanat çırpma hızı almak için 'normal
        miktarda kanat çırp' ın içindeki aşağı oka tıklayın.  \\\r\n\\\r\nHer tıkladığınızda
        Flappy daha fazla veya daha az miktarda kanat çırptıktan sonra hala bir puan
        alıp alamadığınıza bakın."
      courseC_flappy_events6_2019: "Farklı bir kanat çırpma hızı almak için 'normal
        miktarda kanat çırp' ın içindeki aşağı oka tıklayın.  \\\r\n\\\r\nHer tıkladığınızda
        Flappy daha fazla veya daha az miktarda kanat çırptıktan sonra hala bir puan
        alıp alamadığınıza bakın."
      courseC_flappy_events7: Daha sonra, 'çalıştığı zaman' olayına bir blok ekleyerek
        sahneyi değiştirmeyi dene.
      courseC_flappy_events7_2018: Daha sonra, 'çalıştığı zaman' olayına bir blok
        ekleyerek sahneyi değiştirmeyi dene.
      courseC_flappy_events7_2019: Daha sonra, 'çalıştığı zaman' olayına bir blok
        ekleyerek sahneyi değiştirmeyi dene.
      courseC_flappy_events8: "Arka planı, sadece oyun başladığında değil, herhangi
        bir olayın altında da değiştirebilirsin. \\\r\n\\\r\nDiğer olaylar gerçekleştiğinde
        **rastgele** bir sahne ayarlamaya çalış...örneğin bir engel geçildiğinde."
      courseC_flappy_events8_2018: "Arka planı, sadece oyun başladığında değil, herhangi
        bir olayın altında da değiştirebilirsin. \\\r\n\\\r\nDiğer olaylar gerçekleştiğinde
        **rastgele** bir sahne ayarlamaya çalış...örneğin bir engel geçildiğinde."
      courseC_flappy_events8_2019: "Arka planı, sadece oyun başladığında değil, herhangi
        bir olayın altında da değiştirebilirsin. \\\r\n\\\r\nDiğer olaylar gerçekleştiğinde
        **rastgele** bir sahne ayarlamaya çalış...örneğin bir engel geçildiğinde."
      courseC_flappy_events9: Flappy bir engele çarptığında oyunu sonlandırmak yerine,
        işleri iyice karıştırmak için, skoru yeniden 0 olarak ayarlamaya çalışın.
      courseC_flappy_events9_2018: Flappy bir engele çarptığında oyunu sonlandırmak
        yerine, işleri iyice karıştırmak için, skoru yeniden 0 olarak ayarlamaya çalışın.
      courseC_flappy_events9_2019: Flappy bir engele çarptığında oyunu sonlandırmak
        yerine, işleri iyice karıştırmak için, skoru yeniden 0 olarak ayarlamaya çalışın.
      courseC_harvester_loops1: "Loops can be used to repeat more than moves.  \n\nUse
        loops to collect all four of the pumpkins."
      courseC_harvester_loops10: Bütün balkabaklarını ve bütün mısırı topla.
      courseC_harvester_loops10_2018: Bütün balkabaklarını ve bütün mısırı topla.
      courseC_harvester_loops10_2019: Bütün balkabaklarını ve bütün mısırı topla.
      courseC_harvester_loops11: Bütün balkabaklarını ve bütün mısırı topla.
      courseC_harvester_loops11_2018: Bütün balkabaklarını ve bütün mısırı topla.
      courseC_harvester_loops11_2019: Bütün balkabaklarını ve bütün mısırı topla.
      courseC_harvester_loops1_2018: "Loops can be used to repeat more than moves.
        \ \n\nUse loops to collect all four of the pumpkins."
      courseC_harvester_loops1_2019: "Loops can be used to repeat more than moves.
        \ \n\nUse loops to collect all four of the pumpkins."
      courseC_harvester_loops2: Can you combine two different loops to move toward
        the pumpkins, then collect them all?
      courseC_harvester_loops2_2018: Can you combine two different loops to move toward
        the pumpkins, then collect them all?
      courseC_harvester_loops2_2019: Can you combine two different loops to move toward
        the pumpkins, then collect them all?
      courseC_harvester_loops3: Bütün balkabaklarını topla.
      courseC_harvester_loops3_2018: Bütün balkabaklarını topla.
      courseC_harvester_loops3_2019: Bütün balkabaklarını topla.
      courseC_harvester_loops4: |-
        Now there is corn growing, too!

        Collect all of the corn and all of the pumpkins.
      courseC_harvester_loops4_2018: |-
        Now there is corn growing, too!

        Collect all of the corn and all of the pumpkins.
      courseC_harvester_loops4_2019: |-
        Now there is corn growing, too!

        Collect all of the corn and all of the pumpkins.
      courseC_harvester_loops5: Bütün balkabaklarını ve bütün mısırı topla.
      courseC_harvester_loops5_2018: Bütün balkabaklarını ve bütün mısırı topla.
      courseC_harvester_loops5_2019: Bütün balkabaklarını ve bütün mısırı topla.
      courseC_harvester_loops6: Bütün balkabaklarını ve bütün mısırı topla.
      courseC_harvester_loops6_2018: Bütün balkabaklarını ve bütün mısırı topla.
      courseC_harvester_loops6_2019: Bütün balkabaklarını ve bütün mısırı topla.
      courseC_harvester_loops7: Bütün balkabaklarını ve bütün mısırı topla.
      courseC_harvester_loops7_2018: Bütün balkabaklarını ve bütün mısırı topla.
      courseC_harvester_loops7_2019: Bütün balkabaklarını ve bütün mısırı topla.
      courseC_harvester_loops8: |-
        **Challenge:** Collect all of the corn and all of the pumpkins.

        You can complete this challenge any way you want, but it will either take a lot of work or a lot of thinking!
      courseC_harvester_loops8_2018: |-
        **Challenge:** Collect all of the corn and all of the pumpkins.

        You can complete this challenge any way you want, but it will either take a lot of work or a lot of thinking!
      courseC_harvester_loops8_2019: |-
        **Challenge:** Collect all of the corn and all of the pumpkins.

        You can complete this challenge any way you want, but it will either take a lot of work or a lot of thinking!
      courseC_harvester_loops9: Bütün balkabaklarını ve bütün mısırı topla.
      courseC_harvester_loops9_2018: Bütün balkabaklarını ve bütün mısırı topla.
      courseC_harvester_loops9_2019: Bütün balkabaklarını ve bütün mısırı topla.
      courseC_harvester_loops_challenge2: Tüm marulları topla. Ağaçlardan ve tarlalardan
        sakın!
      courseC_harvester_loops_challenge2_2018: Tüm marulları topla. Ağaçlardan ve
        tarlalardan sakın!
      courseC_harvester_loops_challenge2_2019: Tüm marulları topla. Ağaçlardan ve
        tarlalardan sakın!
      courseC_maze_debugging1: "This code isn't quite right!  \n\nFix the code to
        help Scrat get to the acorn."
      courseC_maze_debugging1_2018: "This code isn't quite right!  \n\nFix the code
        to help Scrat get to the acorn."
      courseC_maze_debugging1_2019: "This code isn't quite right!  \n\nFix the code
        to help Scrat get to the acorn."
      courseC_maze_debugging3: "Something is not quite right. \n\nRemove blocks to
        get Scrat to the acorn!"
      courseC_maze_debugging3_2018: "Something is not quite right. \n\nRemove blocks
        to get Scrat to the acorn!"
      courseC_maze_debugging3_2019: "Something is not quite right. \n\nRemove blocks
        to get Scrat to the acorn!"
      courseC_maze_debugging_challenge2: '-   "Çok sık dönersem, başım dönebilir!
        Sadece dört dönüş komutu ile domuza ulaşmama yardım et." \*'
      courseC_maze_debugging_challenge2_2018: '-   "Çok sık dönersem, başım dönebilir!
        Sadece dört dönüş komutu ile domuza ulaşmama yardım et." \*'
      courseC_maze_debugging_challenge2_2019: '-   "Çok sık dönersem, başım dönebilir!
        Sadece dört dönüş komutu ile domuza ulaşmama yardım et." \*'
      courseC_maze_programming1: Bu bulmaca için tüm blokların birlikte sürükleyin
        ve izlemek için "Çalıştır" ı tıklatın!
      courseC_maze_programming1_2018: Bu bulmaca için tüm blokların birlikte sürükleyin
        ve izlemek için "Çalıştır" ı tıklatın!
      courseC_maze_programming1_2019: Bu bulmaca için tüm blokların birlikte sürükleyin
        ve izlemek için "Çalıştır" ı tıklatın!
      courseC_maze_programming2: Drag an extra <xml><block type="maze_moveForward"/></xml>
        block out of the toolbox to finish your code.
      courseC_maze_programming2_2018: Drag an extra <xml><block type="maze_moveForward"/></xml>
        block out of the toolbox to finish your code.
      courseC_maze_programming2_2019: Drag an extra <xml><block type="maze_moveForward"
        block-text="move forward"/></xml> block out of the toolbox to finish your
        code.
      courseC_maze_programming3: |-
        _"This pig is ruffling my feathers."_

        There is one extra block that is going to cause the bird to crash.\
        Throw it away by unhooking it from the grey blocks and dragging it back to the toolbox.
      courseC_maze_programming3_2018: |-
        _"This pig is ruffling my feathers."_

        There is one extra block that is going to cause the bird to crash.\
        Throw it away by unhooking it from the grey blocks and dragging it back to the toolbox.
      courseC_maze_programming3_2019: |-
        _"This pig is ruffling my feathers."_

        There is one extra block that is going to cause the bird to crash.\
        Throw it away by unhooking it from the grey blocks and dragging it back to the toolbox.
      courseC_maze_programming4: Yolu izleyin ve aptal domuza ulaşmamda bana öncülük
        edin. TNT'lerden kaçının yoksa tüylerim havaya uçar!
      courseC_maze_programming4_2018: Yolu izleyin ve aptal domuza ulaşmamda bana
        öncülük edin. TNT'lerden kaçının yoksa tüylerim havaya uçar!
      courseC_maze_programming4_2019: Yolu izleyin ve aptal domuza ulaşmamda bana
        öncülük edin. TNT'lerden kaçının yoksa tüylerim havaya uçar!
      courseC_maze_programming5: "-   Domuza ulaşmak için yolu takip edin!\" \\* \\\r
        \\\r TNT den kaçının."
      courseC_maze_programming5_2018: "-   Domuza ulaşmak için yolu takip edin!\"
        \\* \\\r \\\r TNT den kaçının."
      courseC_maze_programming5_2019: "-   Domuza ulaşmak için yolu takip edin!\"
        \\* \\\r \\\r TNT den kaçının."
      courseC_maze_programming6: |-
        _"Keep calm and help me find the bad pig. Otherwise I might get angry!"_

        Get the bird to the pig and avoid the TNT.
      courseC_maze_programming6_2018: |-
        _"Keep calm and help me find the bad pig. Otherwise I might get angry!"_

        Get the bird to the pig and avoid the TNT.
      courseC_maze_programming6_2019: |-
        _"Keep calm and help me find the bad pig. Otherwise I might get angry!"_

        Get the bird to the pig and avoid the TNT.
      courseC_maze_programming7: |-
        _"It's time to get angry!"_

        **Challenge:** This code has a lot of bugs. You'll need to remove some blocks and add others.
      courseC_maze_programming7_2018: |-
        _"It's time to get angry!"_

        **Challenge:** This code has a lot of bugs. You'll need to remove some blocks and add others.
      courseC_maze_programming7_2019: |-
        _"It's time to get angry!"_

        **Challenge:** This code has a lot of bugs. You'll need to remove some blocks and add others.
      courseC_maze_programming8: '-   "Sakin ol ve kötü domuzu bulmama yardım et."
        \*'
      courseC_maze_programming8_2018: '-   "Sakin ol ve kötü domuzu bulmama yardım
        et." \*'
      courseC_maze_programming8_2019: '-   "Sakin ol ve kötü domuzu bulmama yardım
        et." \*'
      courseC_maze_programming8_predict1: '-   "Sakin ol ve kötü domuzu bulmama yardım
        et." \*'
      courseC_maze_programming8_predict1_2018: '-   "Sakin ol ve kötü domuzu bulmama
        yardım et." \*'
      courseC_maze_programming8_predict1_2019: '-   "Sakin ol ve kötü domuzu bulmama
        yardım et." \*'
      courseC_maze_programming9: _"Now, help me sneak up on the pig any way you want
        to!"_
      courseC_maze_programming9_2018: _"Now, help me sneak up on the pig any way you
        want to!"_
      courseC_maze_programming9_2019: _"Now, help me sneak up on the pig any way you
        want to!"_
      courseC_maze_programming_challenge1: '-   "Domuz saklanıyor! Etrafından bir
        yol bulmam için bana yardımcı olabilir misin?" \*'
      courseC_maze_programming_challenge1_2018: '-   "Domuz saklanıyor! Etrafından
        bir yol bulmam için bana yardımcı olabilir misin?" \*'
      courseC_maze_programming_challenge1_2019: '-   "Domuz saklanıyor! Etrafından
        bir yol bulmam için bana yardımcı olabilir misin?" \*'
      courseC_maze_programming_challenge2: Bazen aynı sorunu çözmek için birden fazla
        yol vardır. Bazen geriye doğru gitmek daha hızlı olabilir!
      courseC_maze_programming_challenge2_2018: Bazen aynı sorunu çözmek için birden
        fazla yol vardır. Bazen geriye doğru gitmek daha hızlı olabilir!
      courseC_maze_programming_challenge2_2019: Bazen aynı sorunu çözmek için birden
        fazla yol vardır. Bazen geriye doğru gitmek daha hızlı olabilir!
      courseC_starWars_loops1: "![](https://images.code.org/cb247dd9f435264e2e6d897f245d1596-image-1495736234762.gif)\nBB-8
        yuvarlanmış parlayan hurda metallerin hepsini alır. BB-8' in hepsini almasına
        yardımcı ol!  \\\r\nSandıklara ve duvarlara dikkat et!  \\\r"
      courseC_starWars_loops10: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\\\r\n\n_\"Hadi
        BB-8!\"_\\\r\n\\\r\nÇok iyi gidiyorsun! Devam et!"
      courseC_starWars_loops10_2018: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\\\r\n\n_\"Hadi
        BB-8!\"_\\\r\n\\\r\nÇok iyi gidiyorsun! Devam et!"
      courseC_starWars_loops10_2019: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\\\r\n\n_\"Hadi
        BB-8!\"_\\\r\n\\\r\nÇok iyi gidiyorsun! Devam et!"
      courseC_starWars_loops11: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Devam
        et, BB-8!\"_\\\r\n\\\r\nNeredeyse ulaştın! Bu sefer istediğin yolu seç!"
      courseC_starWars_loops11_2018: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Devam
        et, BB-8!\"_\\\r\n\\\r\nNeredeyse ulaştın! Bu sefer istediğin yolu seç!"
      courseC_starWars_loops11_2019: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Devam
        et, BB-8!\"_\\\r\n\\\r\nNeredeyse ulaştın! Bu sefer istediğin yolu seç!"
      courseC_starWars_loops1_2018: "![](https://images.code.org/cb247dd9f435264e2e6d897f245d1596-image-1495736234762.gif)\nBB-8
        yuvarlanmış parlayan hurda metallerin hepsini alır. BB-8' in hepsini almasına
        yardımcı ol!  \\\r\nSandıklara ve duvarlara dikkat et!  \\\r"
      courseC_starWars_loops1_2019: "![](https://images.code.org/cb247dd9f435264e2e6d897f245d1596-image-1495736234762.gif)\nBB-8
        yuvarlanmış parlayan hurda metallerin hepsini alır. BB-8' in hepsini almasına
        yardımcı ol!  \\\r\nSandıklara ve duvarlara dikkat et!  \\\r"
      courseC_starWars_loops2: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Hadi
        BB-8!\"_\\\r\n\\\r\nTüm hurda metalleri toplamak için, 'tekrarla' bloğu içinde
        yalnızca bir blok bulunan bir döngü oluşturmaya çalış."
      courseC_starWars_loops2_2018: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Hadi
        BB-8!\"_\\\r\n\\\r\nTüm hurda metalleri toplamak için, 'tekrarla' bloğu içinde
        yalnızca bir blok bulunan bir döngü oluşturmaya çalış."
      courseC_starWars_loops2_2019: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Hadi
        BB-8!\"_\\\r\n\\\r\nTüm hurda metalleri toplamak için, 'tekrarla' bloğu içinde
        yalnızca bir blok bulunan bir döngü oluşturmaya çalış."
      courseC_starWars_loops2_copy: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Hadi
        BB-8!\"_\\\r\n\\\r\nTüm hurda metalleri toplamak için, 'tekrarla' bloğu içinde
        yalnızca bir blok bulunan bir döngü oluşturmaya çalış."
      courseC_starWars_loops4: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Devam
        et, BB-8.\"_\\\r\n\\\r\nBu bulmacada, BB-8'in en az sayıda blok ile tüm hurda
        metalleri toplaması için iki 'tekrarla' dönügüsü sana yardım edecektir!\\\r"
      courseC_starWars_loops4_2018: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Devam
        et, BB-8.\"_\\\r\n\\\r\nBu bulmacada, BB-8'in en az sayıda blok ile tüm hurda
        metalleri toplaması için iki 'tekrarla' dönügüsü sana yardım edecektir!\\\r"
      courseC_starWars_loops4_2019: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Devam
        et, BB-8.\"_\\\r\n\\\r\nBu bulmacada, BB-8'in en az sayıda blok ile tüm hurda
        metalleri toplaması için iki 'tekrarla' dönügüsü sana yardım edecektir!\\\r"
      courseC_starWars_loops4_copy: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Devam
        et, BB-8.\"_\\\r\n\\\r\nBu bulmacada, BB-8'in en az sayıda blok ile tüm hurda
        metalleri toplaması için iki 'tekrarla' dönügüsü sana yardım edecektir!\\\r"
      courseC_starWars_loops5: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Hadi
        BB-8!\"_\\\r"
      courseC_starWars_loops5_2018: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Hadi
        BB-8!\"_\\\r"
      courseC_starWars_loops5_2019: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Hadi
        BB-8!\"_\\\r"
      courseC_starWars_loops5_copy: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Hadi
        BB-8!\"_\\\r"
      courseC_starWars_loops6: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Hepsini
        alabilir misin?\"_\\\r\n\\\r\nDöngüler içinde birden fazla blokla da çalışır!
        \ Bu diziyi döngü haline getirebilir misiniz?"
      courseC_starWars_loops6_2018: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Hepsini
        alabilir misin?\"_\\\r\n\\\r\nDöngüler içinde birden fazla blokla da çalışır!
        \ Bu diziyi döngü haline getirebilir misiniz?"
      courseC_starWars_loops6_2019: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Hepsini
        alabilir misin?\"_\\\r\n\\\r\nDöngüler içinde birden fazla blokla da çalışır!
        \ Bu diziyi döngü haline getirebilir misiniz?"
      courseC_starWars_loops6_copy: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Hepsini
        alabilir misin?\"_\\\r\n\\\r\nDöngüler içinde birden fazla blokla da çalışır!
        \ Bu diziyi döngü haline getirebilir misiniz?"
      courseC_starWars_loops7: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Bunu
        yapabilirsin!\"_\\\r\n\\\r\nSadece bir döngü kullanarak bütün hurda metalleri
        toplamayı dener misin? Hepsini almak için programlamaya, ardından da döngünün
        içine koymak için tekrar eden kodu bulmaya çalış."
      courseC_starWars_loops7_2018: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Bunu
        yapabilirsin!\"_\\\r\n\\\r\nSadece bir döngü kullanarak bütün hurda metalleri
        toplamayı dener misin? Hepsini almak için programlamaya, ardından da döngünün
        içine koymak için tekrar eden kodu bulmaya çalış."
      courseC_starWars_loops7_2019: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Bunu
        yapabilirsin!\"_\\\r\n\\\r\nSadece bir döngü kullanarak bütün hurda metalleri
        toplamayı dener misin? Hepsini almak için programlamaya, ardından da döngünün
        içine koymak için tekrar eden kodu bulmaya çalış."
      courseC_starWars_loops7_copy: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Bunu
        yapabilirsin!\"_\\\r\n\\\r\nSadece bir döngü kullanarak bütün hurda metalleri
        toplamayı dener misin? Hepsini almak için programlamaya, ardından da döngünün
        içine koymak için tekrar eden kodu bulmaya çalış."
      courseC_starWars_loops8: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Devam
        et, BB-8.\"_\\\r\n\\\r\n**Meydan Okuma:** Bu seviyeyi tamamlamak için son
        birkaç bulmacada kullandığın fikirleri birleştir."
      courseC_starWars_loops8_2018: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Devam
        et, BB-8.\"_\\\r\n\\\r\n**Meydan Okuma:** Bu seviyeyi tamamlamak için son
        birkaç bulmacada kullandığın fikirleri birleştir."
      courseC_starWars_loops8_2019: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Devam
        et, BB-8.\"_\\\r\n\\\r\n**Meydan Okuma:** Bu seviyeyi tamamlamak için son
        birkaç bulmacada kullandığın fikirleri birleştir."
      courseC_starWars_loops8_copy: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Devam
        et, BB-8.\"_\\\r\n\\\r\n**Meydan Okuma:** Bu seviyeyi tamamlamak için son
        birkaç bulmacada kullandığın fikirleri birleştir."
      courseC_starWars_loops9: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Devam
        et!\"_\\\r\n\\\r\nTüm hurda metalleri toplamak için önceden öğrendiklerini
        kullan!"
      courseC_starWars_loops9_2018: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Devam
        et!\"_\\\r\n\\\r\nTüm hurda metalleri toplamak için önceden öğrendiklerini
        kullan!"
      courseC_starWars_loops9_2019: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n_\"Devam
        et!\"_\\\r\n\\\r\nTüm hurda metalleri toplamak için önceden öğrendiklerini
        kullan!"
      courseD_artist_1_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Hi, I’m Elsa of Arendelle, help me draw a shape.”_\n\nDraw a hexagon with
        50 pixel long sides.  \n\n* * *\n\nTo draw a hexagon, you will need to: \n\n-
        \  move forward by **50** pixels\n-   turn right by **60** degrees\n-   repeat
        a total of **6** times"
      courseD_artist_1_2018_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Hi, I’m Elsa of Arendelle, help me draw a shape.”_\n\nDraw a hexagon with
        50 pixel long sides.  \n\n* * *\n\nTo draw a hexagon, you will need to: \n\n-
        \  move forward by **50** pixels\n-   turn right by **60** degrees\n-   repeat
        a total of **6** times"
      courseD_artist_2_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Good job!”_\n\nAfter your hexagon, turn right by **60** degrees, then draw
        a line that is **150** pixels long.   \n\nFinish by putting Elsa back to the
        center of the play area, using the <xml><block type=\"jump_to\"><title name=\"VALUE\">middle
        center</title></block></xml> block."
      courseD_artist_2_2018_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Good job!”_\n\nAfter your hexagon, turn right by **60** degrees, then draw
        a line that is **150** pixels long.   \n\nFinish by putting Elsa back to the
        center of the play area, using the <xml><block type=\"jump_to\" block-text=\"jump
        to the middle center position\"><title name=\"VALUE\">middle center</title></block></xml>
        block."
      courseD_artist_3_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _“Let’s make a snowflake.”_

        To turn this code into a snowflake, nest all of the code inside of another `repeat` loop and run it a total of **6** times.  You should only need to add one block.
      courseD_artist_3_2018_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _“Let’s make a snowflake.”_

        To turn this code into a snowflake, nest all of the code inside of another `repeat` loop and run it a total of **6** times.  You should only need to add one block.
      courseD_artist_4_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Let's make our snowflakes special!"_

        **Inspiration:** Where do you need to add code if you want to draw a tiny square at the tip of each long line?

        * * *

        You can try whatever you want in this puzzle, but here is an idea:

        Try making a tiny square at the end of each line

        -   Each side should be 15 pixels long
        -   You should turn by 90 degrees
        -   Repeat those actions a total of 4 times
      courseD_artist_4_2018_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Let's make our snowflakes special!"_

        **Inspiration:** Where do you need to add code if you want to draw a tiny square at the tip of each long line?

        * * *

        You can try whatever you want in this puzzle, but here is an idea:

        Try making a tiny square at the end of each line

        -   Each side should be 15 pixels long
        -   You should turn by 90 degrees
        -   Repeat those actions a total of 4 times
      courseD_artist_5_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Try changing the shapes or the lengths of the lines to make this your own!"_

        **Inspiration:** You can change your drawing in any way you want, but here is an idea:

        -   Try switching the types of shape in the middle of the snowflake with the one at the end of each line!
      courseD_artist_5_2018_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Try changing the shapes or the lengths of the lines to make this your own!\"_\n\n<br/>
        \ \n\n**Inspiration:** You can change your drawing in any way you want, but
        here is an idea:\n\n-   Try switching the types of shape in the middle of
        the snowflake with the one at the end of each line!"
      courseD_artist_6_2018: "<img src=\"https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png\"\nwidth=\"200px\"
        style=\"float: left; margin: 0 15px 15px 0;\" />Bu bulmaca, yeni bir çizim
        projesine başlamak için sana bir şans verecek! \\\r\n\\\r\n75 ve 105 derece
        arasında dönüşler kullanarak bir merdiven deseni çiz -- fakat sola ve sağa
        dönüşlerde aynı açıyı kullandığından emin ol.  \\\r\n(Sebebini daha sonra
        göreceksin)"
      courseD_artist_6_2018_2019: "<img src=\"https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png\"\nwidth=\"200px\"
        style=\"float: left; margin: 0 15px 15px 0;\" />Bu bulmaca, yeni bir çizim
        projesine başlamak için sana bir şans verecek! \\\r\n\\\r\n75 ve 105 derece
        arasında dönüşler kullanarak bir merdiven deseni çiz -- fakat sola ve sağa
        dönüşlerde aynı açıyı kullandığından emin ol.  \\\r\n(Sebebini daha sonra
        göreceksin)"
      courseD_artist_binary1: |-
        We've provided you with a grid of "pixels" that you can walk through and make designs by turning on only certain squares.

        Use the blocks below to have the artist draw "01010101" in binary in the first row.
      courseD_artist_binary1_2018: |-
        We've provided you with a grid of "pixels" that you can walk through and make designs by turning on only certain squares.

        Use the blocks below to have the artist draw "01010101" in binary in the first row.
      courseD_artist_binary1_2019: |-
        We've provided you with a grid of "pixels" that you can walk through and make designs by turning on only certain squares.

        Use the blocks below to have the artist draw "01010101" in binary in the first row.
      courseD_artist_binary2: "Bu fonksiyon 1 ve 0 dan oluşan ikili diziyi alır ve
        sanatçının bunu soldan sağa ve üstten alta  doğru uygulamasını sağlar. Sanatçı
        1 görünce kareyi doldurur ve 0 görünce boş bırakır. \\\r\n\\\r\nBu kodu çalıştırın
        ve nasıl bir desen çizdiğini görün."
      courseD_artist_binary2_2018: "Bu fonksiyon 1 ve 0 dan oluşan ikili diziyi alır
        ve sanatçının bunu soldan sağa ve üstten alta  doğru uygulamasını sağlar.
        Sanatçı 1 görünce kareyi doldurur ve 0 görünce boş bırakır. \\\r\n\\\r\nBu
        kodu çalıştırın ve nasıl bir desen çizdiğini görün."
      courseD_artist_binary2_2019: "Bu fonksiyon 1 ve 0 dan oluşan ikili diziyi alır
        ve sanatçının bunu soldan sağa ve üstten alta  doğru uygulamasını sağlar.
        Sanatçı 1 görünce kareyi doldurur ve 0 görünce boş bırakır. \\\r\n\\\r\nBu
        kodu çalıştırın ve nasıl bir desen çizdiğini görün."
      courseD_artist_binary_challenge1_2018: Bulmaca içinde her ikili değeri (0 veya
        1) yalnızca bir kez kullanabilirsiniz. Bu çizimi tamamlamak için iç içe döngüleri
        kullanmayı deneyin.
      courseD_artist_binary_challenge1_2019: Bulmaca içinde her ikili değeri (0 veya
        1) yalnızca bir kez kullanabilirsiniz. Bu çizimi tamamlamak için iç içe döngüleri
        kullanmayı deneyin.
      courseD_artist_binary_challenge2_2018: "Bu ızgarada temsil edilen 256 bit var
        - bu, küçük bir değişikliğin kolayca büyük problemlere sebep olacağı anlamına
        gelir. Bu logoyu normal haline çevirmekte yeterince ısrarcı mısın?\\\r\n\\\r\n![](https://images.code.org/74e15f513982b47762dd33ebbc21e5e9-image-1498776314610.png)"
      courseD_artist_binary_challenge2_2019: "Bu ızgarada temsil edilen 256 bit var
        - bu, küçük bir değişikliğin kolayca büyük problemlere sebep olacağı anlamına
        gelir. Bu logoyu normal haline çevirmekte yeterince ısrarcı mısın?\\\r\n\\\r\n![](https://images.code.org/74e15f513982b47762dd33ebbc21e5e9-image-1498776314610.png)"
      courseD_artist_nestedLoops1a: 'Şimdi, üçgeni 6 kez döngüle. Her üçgenden sonra,
        yeni bir tane çizmeden önce 60 derece dönmen gerek. '
      courseD_artist_nestedLoops1a_2018: 'Şimdi, üçgeni 6 kez döngüle. Her üçgenden
        sonra, yeni bir tane çizmeden önce 60 derece dönmen gerek. '
      courseD_artist_nestedLoops1a_2019: 'Şimdi, üçgeni 6 kez döngüle. Her üçgenden
        sonra, yeni bir tane çizmeden önce 60 derece dönmen gerek. '
      courseD_artist_nestedLoops2: |-
        This time, complete the puzzle with the fewest number of blocks possible.

        After each triangle, you'll need to turn 60 degrees before drawing the next.
        See how much easier this is with **nested loops**?
      courseD_artist_nestedLoops2_2018: |-
        This time, complete the puzzle with the fewest number of blocks possible.

        After each triangle, you'll need to turn 60 degrees before drawing the next.
        See how much easier this is with **nested loops**?
      courseD_artist_nestedLoops2_2019: |-
        This time, complete the puzzle with the fewest number of blocks possible.

        After each triangle, you'll need to turn 60 degrees before drawing the next.
        See how much easier this is with **nested loops**?
      courseD_artist_nestedLoops4: "Great!  Do the same thing with these circles.
        \n\n-   Each circle is made by moving 1 pixel before turning 1 degree, 360
        times.\n-   Each circle begins just 50 pixels from where the last one ended"
      courseD_artist_nestedLoops4_2018: "Great!  Do the same thing with these circles.
        \n\n-   Each circle is made by moving 1 pixel before turning 1 degree, 360
        times.\n-   Each circle begins just 50 pixels from where the last one ended"
      courseD_artist_nestedLoops4_2019: "Great!  Do the same thing with these circles.
        \n\n-   Each circle is made by moving 1 pixel before turning 1 degree, 360
        times.\n-   Each circle begins just 50 pixels from where the last one ended"
      courseD_artist_nestedLoops5: |-
        What happens if you also turn 90 degrees between circles?

        (To get this image, you still need to jump 50 pixels between circles)
      courseD_artist_nestedLoops5_2018: |-
        What happens if you also turn 90 degrees between circles?

        (To get this image, you still need to jump 50 pixels between circles)
      courseD_artist_nestedLoops5_2019: |-
        What happens if you also turn 90 degrees between circles?

        (To get this image, you still need to jump 50 pixels between circles)
      courseD_artist_nestedLoops7: |-
        Use what you've learned to make this drawing.

        -   The squares each have **100 pixel sides** and **90 degree angles**
        -   You will need to turn **60 degrees between each square**. Why? Because there are 6 squares, and 360 degrees (a full turn around) divided by 6 is 60 degrees.
        -   Make sure you jump **50 pixels to get to the next square**
      courseD_artist_nestedLoops7_2018: |-
        Use what you've learned to make this drawing.

        -   The squares each have **100 pixel sides** and **90 degree angles**
        -   You will need to turn **60 degrees between each square**. Why? Because there are 6 squares, and 360 degrees (a full turn around) divided by 6 is 60 degrees.
        -   Make sure you jump **50 pixels to get to the next square**
      courseD_artist_nestedLoops7_2019: |-
        Use what you've learned to make this drawing.

        -   The squares each have **100 pixel sides** and **90 degree angles**
        -   You will need to turn **60 degrees between each square**. Why? Because there are 6 squares, and 360 degrees (a full turn around) divided by 6 is 60 degrees.
        -   Make sure you jump **50 pixels to get to the next square**
      courseD_artist_nestedLoops8: |-
        Using what you have learned in the last couple of puzzles, build this image from the beginning.

        -   Each hexagon has **50 pixel sides** and **60 degree turns**
      courseD_artist_nestedLoops8_2018: |-
        Using what you have learned in the last couple of puzzles, build this image from the beginning.

        -   Each hexagon has **50 pixel sides** and **60 degree turns**
      courseD_artist_nestedLoops8_2019: |-
        Using what you have learned in the last couple of puzzles, build this image from the beginning.

        -   Each hexagon has **50 pixel sides** and **60 degree turns**
      courseD_artist_nestedLoops9: |-
        **Challenge:** Can you figure out how to make a picture like this?

        -   Both shapes have **50 pixel sides**
        -   Between each pair of shapes, you will need to jump forward the length of a side, and turn 45 degrees.
      courseD_artist_nestedLoops9_2018: |-
        **Challenge:** Can you figure out how to make a picture like this?

        -   Both shapes have **50 pixel sides**
        -   Between each pair of shapes, you will need to jump forward the length of a side, and turn 45 degrees.
      courseD_artist_nestedLoops9_2019: |-
        **Challenge:** Can you figure out how to make a picture like this?

        -   Both shapes have **50 pixel sides**
        -   Between each pair of shapes, you will need to jump forward the length of a side, and turn 45 degrees.
      courseD_artist_nestedLoops9_predict1: "\\*\\* Meydan Okuma: \\*\\* nasıl böyle
        bir resim yapılalir? \\\r \\\r - Her iki şeklinde 50 piksel kenar uzunluğu
        vardır"
      courseD_artist_nestedLoops9_predict1_2018: "\\*\\* Meydan Okuma: \\*\\* nasıl
        böyle bir resim yapılalir? \\\r \\\r - Her iki şeklinde 50 piksel kenar uzunluğu
        vardır"
      courseD_artist_nestedLoops9_predict1_2019: "\\*\\* Meydan Okuma: \\*\\* nasıl
        böyle bir resim yapılalir? \\\r \\\r - Her iki şeklinde 50 piksel kenar uzunluğu
        vardır"
      courseD_artist_nestedLoopsFP: |-
        Now it's your turn.  Take the skills you have learned and make something that you love!

        Need an idea?  Try to make one of these:

        ![expandable](https://images.code.org/7ac814e356b3548f57bfab8a9eb31dff-image-1497993113904.png)
        ![expandable](https://images.code.org/bd29d35c9a8abf9d27591b90b0f3ec0f-image-1497993121072.png)
        ![expandable](https://images.code.org/2970f34785e51ae98be7aff6fe0827ce-image-1497993126938.png)
      courseD_artist_nestedLoopsFP_2018: |-
        Now it's your turn.  Take the skills you have learned and make something that you love!

        Need an idea?  Try to make one of these:

        ![expandable](https://images.code.org/7ac814e356b3548f57bfab8a9eb31dff-image-1497993113904.png)
        ![expandable](https://images.code.org/bd29d35c9a8abf9d27591b90b0f3ec0f-image-1497993121072.png)
        ![expandable](https://images.code.org/2970f34785e51ae98be7aff6fe0827ce-image-1497993126938.png)
      courseD_artist_nestedLoopsFP_2019: |-
        Now it's your turn.  Take the skills you have learned and make something that you love!

        Need an idea?  Try to make one of these:

        ![expandable](https://images.code.org/7ac814e356b3548f57bfab8a9eb31dff-image-1497993113904.png)
        ![expandable](https://images.code.org/bd29d35c9a8abf9d27591b90b0f3ec0f-image-1497993121072.png)
        ![expandable](https://images.code.org/2970f34785e51ae98be7aff6fe0827ce-image-1497993126938.png)
      courseD_artist_nestedLoops_challenge1: "Bunun gibi bir resmin nasıl yapılacağını
        çözebilir misin?\\\r\n\\\r\n\n-   Her iki şeklin **50 piksel yan alanı var.**\\\r\n-
        \  _sekizgenler_ **45 derecelik** dönüşlerle yapılmış.\\\r\n-   _üçgenler_
        **120 derecelik** dönüşlerle yapılmış."
      courseD_artist_nestedLoops_challenge1_2018: "Bunun gibi bir resmin nasıl yapılacağını
        çözebilir misin?\\\r\n\\\r\n\n-   Her iki şeklin **50 piksel yan alanı var.**\\\r\n-
        \  _sekizgenler_ **45 derecelik** dönüşlerle yapılmış.\\\r\n-   _üçgenler_
        **120 derecelik** dönüşlerle yapılmış."
      courseD_artist_nestedLoops_challenge1_2019: "Bunun gibi bir resmin nasıl yapılacağını
        çözebilir misin?\\\r\n\\\r\n\n-   Her iki şeklin **50 piksel yan alanı var.**\\\r\n-
        \  _sekizgenler_ **45 derecelik** dönüşlerle yapılmış.\\\r\n-   _üçgenler_
        **120 derecelik** dönüşlerle yapılmış."
      courseD_artist_nestedLoops_challenge2: "Bunun gibi bir resmin nasıl yapılacağını
        çözebilir misin?\\\r\n\\\r\n\n-   Birinci iç döngü bir sekizgen oluşturmalı.\\\r\n-
        \  İkinci iç döngü bir altıgen oluşturmalı.\\\r\n-   Üçüncü iç döngü bir kare
        oluşturmalı."
      courseD_artist_nestedLoops_challenge2_2018: "Bunun gibi bir resmin nasıl yapılacağını
        çözebilir misin?\\\r\n\\\r\n\n-   Birinci iç döngü bir sekizgen oluşturmalı.\\\r\n-
        \  İkinci iç döngü bir altıgen oluşturmalı.\\\r\n-   Üçüncü iç döngü bir kare
        oluşturmalı."
      courseD_artist_nestedLoops_challenge2_2019: "Bunun gibi bir resmin nasıl yapılacağını
        çözebilir misin?\\\r\n\\\r\n\n-   Birinci iç döngü bir sekizgen oluşturmalı.\\\r\n-
        \  İkinci iç döngü bir altıgen oluşturmalı.\\\r\n-   Üçüncü iç döngü bir kare
        oluşturmalı."
      courseD_artist_project1: "**20 ve 50** piksel aralığındaki genişlikte küçük
        bir şekil çiz.  Sevdiğin herhangi bir şekil olabilir.  \\\r\n\n<hr/>\r\n\r\nBunlara
        benzeyen bir çokgen yapmayı deneyebilirsin:  \r\n![](https://images.code.org/14e58b3901ca7c13319cc64f18ae5d82-image-1495765942356.21.06.png)\r\n![](https://images.code.org/8f79d689ea4936a3725a37025f8fda40-image-1495765942357.25.49.png)\r\n![](https://images.code.org/e5d222ae7356af4811aa153640af135e-image-1495765942357.26.09.png)
        \ \r\n\r\n  \r\n  \r\nYa da bunlardan birine benzeyen soyut bir şekil:  \r\n![](https://images.code.org/8471c095219da3044b3830bebeedefb3-image-1496436883704.32.19.png)\r\n![](https://images.code.org/2fe6ed2db5308f4b34f7632fc6b8a64d-image-1496436883705.40.32.png)\r\n![](https://images.code.org/abb0947f634bc4b712d47516587a6cb8-image-1496436883705.47.21.png)"
      courseD_artist_project1_2018: "**20 ve 50** piksel aralığındaki genişlikte küçük
        bir şekil çiz.  Sevdiğin herhangi bir şekil olabilir.  \\\r\n\n<hr/>\r\n\r\nBunlara
        benzeyen bir çokgen yapmayı deneyebilirsin:  \r\n![](https://images.code.org/14e58b3901ca7c13319cc64f18ae5d82-image-1495765942356.21.06.png)\r\n![](https://images.code.org/8f79d689ea4936a3725a37025f8fda40-image-1495765942357.25.49.png)\r\n![](https://images.code.org/e5d222ae7356af4811aa153640af135e-image-1495765942357.26.09.png)
        \ \r\n\r\n  \r\n  \r\nYa da bunlardan birine benzeyen soyut bir şekil:  \r\n![](https://images.code.org/8471c095219da3044b3830bebeedefb3-image-1496436883704.32.19.png)\r\n![](https://images.code.org/2fe6ed2db5308f4b34f7632fc6b8a64d-image-1496436883705.40.32.png)\r\n![](https://images.code.org/abb0947f634bc4b712d47516587a6cb8-image-1496436883705.47.21.png)"
      courseD_artist_project1_2019: "**20 ve 50** piksel aralığındaki genişlikte küçük
        bir şekil çiz.  Sevdiğin herhangi bir şekil olabilir.  \\\r\n\n<hr/>\r\n\r\nBunlara
        benzeyen bir çokgen yapmayı deneyebilirsin:  \r\n![](https://images.code.org/14e58b3901ca7c13319cc64f18ae5d82-image-1495765942356.21.06.png)\r\n![](https://images.code.org/8f79d689ea4936a3725a37025f8fda40-image-1495765942357.25.49.png)\r\n![](https://images.code.org/e5d222ae7356af4811aa153640af135e-image-1495765942357.26.09.png)
        \ \r\n\r\n  \r\n  \r\nYa da bunlardan birine benzeyen soyut bir şekil:  \r\n![](https://images.code.org/8471c095219da3044b3830bebeedefb3-image-1496436883704.32.19.png)\r\n![](https://images.code.org/2fe6ed2db5308f4b34f7632fc6b8a64d-image-1496436883705.40.32.png)\r\n![](https://images.code.org/abb0947f634bc4b712d47516587a6cb8-image-1496436883705.47.21.png)"
      courseD_artist_project1a: "<img src=\"https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png\"\nwidth=\"200px\"
        style=\"float: left; margin: 0 15px 15px 0;\" />Bu bulmaca, yeni bir çizim
        projesine başlamak için sana bir şans verecek! \\\r\n\\\r\n75 ve 105 derece
        arasında dönüşler kullanarak bir merdiven deseni çiz -- fakat sola ve sağa
        dönüşlerde aynı açıyı kullandığından emin ol.  \\\r\n(Sebebini daha sonra
        göreceksin)"
      courseD_artist_project1a_2018: "<img src=\"https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png\"\nwidth=\"200px\"
        style=\"float: left; margin: 0 15px 15px 0;\" />Bu bulmaca, yeni bir çizim
        projesine başlamak için sana bir şans verecek! \\\r\n\\\r\n75 ve 105 derece
        arasında dönüşler kullanarak bir merdiven deseni çiz -- fakat sola ve sağa
        dönüşlerde aynı açıyı kullandığından emin ol.  \\\r\n(Sebebini daha sonra
        göreceksin)"
      courseD_artist_project1a_2019: "<img src=\"https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png\"\nwidth=\"200px\"
        style=\"float: left; margin: 0 15px 15px 0;\" />Bu bulmaca, yeni bir çizim
        projesine başlamak için sana bir şans verecek! \\\r\n\\\r\n75 ve 105 derece
        arasında dönüşler kullanarak bir merdiven deseni çiz -- fakat sola ve sağa
        dönüşlerde aynı açıyı kullandığından emin ol.  \\\r\n(Sebebini daha sonra
        göreceksin)"
      courseD_artist_project2: "Şimdi şeklini al ve ileriye doğru bazı piksellleri
        atlayarak her satırda iki üç tane çiz.  \\\r\n\\\r\n\\-\nEğer şeklinin genişliğinden
        **daha az** atlarsan şekillerin üst üste gelebilir.\\\r\n\\-\nEğer şeklinin
        genişliğinden **daha çok** atlarsan şekillerin arasında boşluk oluşabilir.\\\r\n\\\r\n\n<hr/>\r\n\r\n\nSatırın
        bunlar gibi düz çizgi ile bitebilir:\\\r\n\\\r\n![](https://images.code.org/cefc818d8636c7ce185738311870ff1d-image-1495820778762.39.25.png)\\\r\n![](https://images.code.org/80dc77914de15685dc696825dff61723-image-1495820778762.39.43.png)\\\r\n![](https://images.code.org/00cda078f119b1ddb0af27ae4a44b089-image-1495820778761.39.08.png)\\\r\n<br/>
        \ <br/>\\\r\n\\\r\n\\\r\nVeya şekillerin bunlardan biri gibi gezinebilir:
        \\\r\n\\\r\n![](https://images.code.org/0c4066fe7547bc1f4495aacbeecdea6d-image-1496437220447.47.04.png)\\\r\n![](https://images.code.org/4069376b784c147a8d443d49e22f783f-image-1496437220446.40.15.png)\\\r\n![](https://images.code.org/02704ab3fb3356f76c544bb64c1a7cce-image-1496437220446.32.04.png)"
      courseD_artist_project2_2018: "Şimdi şeklini al ve ileriye doğru bazı piksellleri
        atlayarak her satırda iki üç tane çiz.  \\\r\n\\\r\n\\-\nEğer şeklinin genişliğinden
        **daha az** atlarsan şekillerin üst üste gelebilir.\\\r\n\\-\nEğer şeklinin
        genişliğinden **daha çok** atlarsan şekillerin arasında boşluk oluşabilir.\\\r\n\\\r\n\n<hr/>\r\n\r\n\nSatırın
        bunlar gibi düz çizgi ile bitebilir:\\\r\n\\\r\n![](https://images.code.org/cefc818d8636c7ce185738311870ff1d-image-1495820778762.39.25.png)\\\r\n![](https://images.code.org/80dc77914de15685dc696825dff61723-image-1495820778762.39.43.png)\\\r\n![](https://images.code.org/00cda078f119b1ddb0af27ae4a44b089-image-1495820778761.39.08.png)\\\r\n<br/>
        \ <br/>\\\r\n\\\r\n\\\r\nVeya şekillerin bunlardan biri gibi gezinebilir:
        \\\r\n\\\r\n![](https://images.code.org/0c4066fe7547bc1f4495aacbeecdea6d-image-1496437220447.47.04.png)\\\r\n![](https://images.code.org/4069376b784c147a8d443d49e22f783f-image-1496437220446.40.15.png)\\\r\n![](https://images.code.org/02704ab3fb3356f76c544bb64c1a7cce-image-1496437220446.32.04.png)"
      courseD_artist_project2_2019: "Şimdi şeklini al ve ileriye doğru bazı piksellleri
        atlayarak her satırda iki üç tane çiz.  \\\r\n\\\r\n\\-\nEğer şeklinin genişliğinden
        **daha az** atlarsan şekillerin üst üste gelebilir.\\\r\n\\-\nEğer şeklinin
        genişliğinden **daha çok** atlarsan şekillerin arasında boşluk oluşabilir.\\\r\n\\\r\n\n<hr/>\r\n\r\n\nSatırın
        bunlar gibi düz çizgi ile bitebilir:\\\r\n\\\r\n![](https://images.code.org/cefc818d8636c7ce185738311870ff1d-image-1495820778762.39.25.png)\\\r\n![](https://images.code.org/80dc77914de15685dc696825dff61723-image-1495820778762.39.43.png)\\\r\n![](https://images.code.org/00cda078f119b1ddb0af27ae4a44b089-image-1495820778761.39.08.png)\\\r\n<br/>
        \ <br/>\\\r\n\\\r\n\\\r\nVeya şekillerin bunlardan biri gibi gezinebilir:
        \\\r\n\\\r\n![](https://images.code.org/0c4066fe7547bc1f4495aacbeecdea6d-image-1496437220447.47.04.png)\\\r\n![](https://images.code.org/4069376b784c147a8d443d49e22f783f-image-1496437220446.40.15.png)\\\r\n![](https://images.code.org/02704ab3fb3356f76c544bb64c1a7cce-image-1496437220446.32.04.png)"
      courseD_artist_project2a: "Şimdi, etrafında 180 derece dön ve tamamıyla aynı
        merdiven desenini çiz!  \\\r\n\\\r\n\n-   Eğer Elsa'nın \\\r <br/> çizip 180
        derece dönmesini, çizip yeniden 180 derece dönmesini sağlamak için kodunu
        bir döngü içine yerleştirirsen, bu aşamanın kalan kısmı daha kolay olacaktır.\\\r\n
        \   \\\r\n    <hr/>\r\n    \r\n    Burada 76 derecelik dönüş kullanılan bir
        merdiven örneği var:\r\n    \r\n    ![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)"
      courseD_artist_project2a_2018: "Şimdi, etrafında 180 derece dön ve tamamıyla
        aynı merdiven desenini çiz!  \\\r\n\\\r\n\n-   Eğer Elsa'nın \\\r <br/> çizip
        180 derece dönmesini, çizip yeniden 180 derece dönmesini sağlamak için kodunu
        bir döngü içine yerleştirirsen, bu aşamanın kalan kısmı daha kolay olacaktır.\\\r\n
        \   \\\r\n    <hr/>\r\n    \r\n    Burada 76 derecelik dönüş kullanılan bir
        merdiven örneği var:\r\n    \r\n    ![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)"
      courseD_artist_project2a_2019: "Şimdi, etrafında 180 derece dön ve tamamıyla
        aynı merdiven desenini çiz!  \\\r\n\\\r\n\n-   Eğer Elsa'nın \\\r <br/> çizip
        180 derece dönmesini, çizip yeniden 180 derece dönmesini sağlamak için kodunu
        bir döngü içine yerleştirirsen, bu aşamanın kalan kısmı daha kolay olacaktır.\\\r\n
        \   \\\r\n    <hr/>\r\n    \r\n    Burada 76 derecelik dönüş kullanılan bir
        merdiven örneği var:\r\n    \r\n    ![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)"
      courseD_artist_project3: "Sonra Elsa 'jump to 200 over and 200 down' blokunu
        kullanarak ortaya zıplar ve etrafında tekrar ve tekrar dönerek farklı yönlerde
        çizgiler çizer.  \\\r\n\\\r\nŞaşırtıcı kar taneleri yapabilirsin!\\\r\n\n<hr/>\r\nPolygonlar
        ile yapılan bu örnekler bir göz at:   \r\n![](https://images.code.org/b32ebfb3be559bf8a6d017a854e0b97e-image-1495821528995.42.08.png)\r\n![](https://images.code.org/08d7155f6829f82d878dfa57ad5dcaf3-image-1495821528996.42.26.png)\r\n![](https://images.code.org/7d461ee9046871e6993406e558f28176-image-1495821528996.42.58.png)\r\n\r\nSoyut
        şekiller bunlardan biri gibi kar tanesi oluşturabilir:  \r\n![](https://images.code.org/376d7ba20b6bb86e08b1675370e87b92-image-1496695869798.44.00.png)\r\n![](https://images.code.org/4f649cc779920632674afac5acce5c95-image-1496695869798.47.51.png)\r\n![](https://images.code.org/a68f925ffd87241ebc09183acc908b4b-image-1496695869796.31.49.png)"
      courseD_artist_project3_2018: "Sonra Elsa 'jump to 200 over and 200 down' blokunu
        kullanarak ortaya zıplar ve etrafında tekrar ve tekrar dönerek farklı yönlerde
        çizgiler çizer.  \\\r\n\\\r\nŞaşırtıcı kar taneleri yapabilirsin!\\\r\n\n<hr/>\r\nPolygonlar
        ile yapılan bu örnekler bir göz at:   \r\n![](https://images.code.org/b32ebfb3be559bf8a6d017a854e0b97e-image-1495821528995.42.08.png)\r\n![](https://images.code.org/08d7155f6829f82d878dfa57ad5dcaf3-image-1495821528996.42.26.png)\r\n![](https://images.code.org/7d461ee9046871e6993406e558f28176-image-1495821528996.42.58.png)\r\n\r\nSoyut
        şekiller bunlardan biri gibi kar tanesi oluşturabilir:  \r\n![](https://images.code.org/376d7ba20b6bb86e08b1675370e87b92-image-1496695869798.44.00.png)\r\n![](https://images.code.org/4f649cc779920632674afac5acce5c95-image-1496695869798.47.51.png)\r\n![](https://images.code.org/a68f925ffd87241ebc09183acc908b4b-image-1496695869796.31.49.png)"
      courseD_artist_project3_2019: "Sonra Elsa 'jump to 200 over and 200 down' blokunu
        kullanarak ortaya zıplar ve etrafında tekrar ve tekrar dönerek farklı yönlerde
        çizgiler çizer.  \\\r\n\\\r\nŞaşırtıcı kar taneleri yapabilirsin!\\\r\n\n<hr/>\r\nPolygonlar
        ile yapılan bu örnekler bir göz at:   \r\n![](https://images.code.org/b32ebfb3be559bf8a6d017a854e0b97e-image-1495821528995.42.08.png)\r\n![](https://images.code.org/08d7155f6829f82d878dfa57ad5dcaf3-image-1495821528996.42.26.png)\r\n![](https://images.code.org/7d461ee9046871e6993406e558f28176-image-1495821528996.42.58.png)\r\n\r\nSoyut
        şekiller bunlardan biri gibi kar tanesi oluşturabilir:  \r\n![](https://images.code.org/376d7ba20b6bb86e08b1675370e87b92-image-1496695869798.44.00.png)\r\n![](https://images.code.org/4f649cc779920632674afac5acce5c95-image-1496695869798.47.51.png)\r\n![](https://images.code.org/a68f925ffd87241ebc09183acc908b4b-image-1496695869796.31.49.png)"
      courseD_artist_project3a: "Bu şekli daire etrafında 5 ya da 6 defa döndürün.\\\r\n\n-
        \  Eğer 5 defayı seçerseniz 72 derecelik açıyla deneyin\\\r\n-   \\-\n    Eğer
        6 defa seçerseniz 60 derecelik açıyla deneyin\\\r\n    <hr/>\r\n    \r\n    Burada
        Elsa'nın 6 kez dönerek oluşturduğu desen var:\r\n    \r\n    ![](https://images.code.org/b0fe02e728f80ae7a4b731f32371a37b-image-1496697582505.19.34.png)"
      courseD_artist_project3a_2018: "Bu şekli daire etrafında 5 ya da 6 defa döndürün.\\\r\n\n-
        \  Eğer 5 defayı seçerseniz 72 derecelik açıyla deneyin\\\r\n-   \\-\n    Eğer
        6 defa seçerseniz 60 derecelik açıyla deneyin\\\r\n    <hr/>\r\n    \r\n    Burada
        Elsa'nın 6 kez dönerek oluşturduğu desen var:\r\n    \r\n    ![](https://images.code.org/b0fe02e728f80ae7a4b731f32371a37b-image-1496697582505.19.34.png)"
      courseD_artist_project3a_2019: "Bu şekli daire etrafında 5 ya da 6 defa döndürün.\\\r\n\n-
        \  Eğer 5 defayı seçerseniz 72 derecelik açıyla deneyin\\\r\n-   \\-\n    Eğer
        6 defa seçerseniz 60 derecelik açıyla deneyin\\\r\n    <hr/>\r\n    \r\n    Burada
        Elsa'nın 6 kez dönerek oluşturduğu desen var:\r\n    \r\n    ![](https://images.code.org/b0fe02e728f80ae7a4b731f32371a37b-image-1496697582505.19.34.png)"
      courseD_artist_project4: "Eğer kar tanesinin iki farklı şeklini birbirinin üstüne
        diğerini az döndürerek katmanlara ayırırsak ne olur?    \\\r\nDene ve ne edeceğini
        gör!"
      courseD_artist_project4_2018: "Eğer kar tanesinin iki farklı şeklini birbirinin
        üstüne diğerini az döndürerek katmanlara ayırırsak ne olur?    \\\r\nDene
        ve ne edeceğini gör!"
      courseD_artist_project4_2019: "Eğer kar tanesinin iki farklı şeklini birbirinin
        üstüne diğerini az döndürerek katmanlara ayırırsak ne olur?    \\\r\nDene
        ve ne edeceğini gör!"
      courseD_artist_project4a: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        \ _\"Şimdi, ne yapmamız gerekiyor? Haydi, kendi kış harikalar dünyamızı keşfedelim
        ve oluşturalım!\"_\\\r\n\\\r\nOluşturduklarınızla oynamayı deneyin. Ne isterseniz
        onu çizin!\\\r\n\n-   Merdiven basamağı deseninde iki farklı açı kullanırsanız
        ne olur?\\\r\n-   Elmas desenini daha uzun veya kısa yaparsanız ne olur?\\\r\n-
        \  Bir kar tanesinin üzerine iki tane daha çizince nasıl görünüyor?\\\r"
      courseD_artist_project4a_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        \ _\"Şimdi, ne yapmamız gerekiyor? Haydi, kendi kış harikalar dünyamızı keşfedelim
        ve oluşturalım!\"_\\\r\n\\\r\nOluşturduklarınızla oynamayı deneyin. Ne isterseniz
        onu çizin!\\\r\n\n-   Merdiven basamağı deseninde iki farklı açı kullanırsanız
        ne olur?\\\r\n-   Elmas desenini daha uzun veya kısa yaparsanız ne olur?\\\r\n-
        \  Bir kar tanesinin üzerine iki tane daha çizince nasıl görünüyor?\\\r"
      courseD_artist_project4a_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        \ _\"Şimdi, ne yapmamız gerekiyor? Haydi, kendi kış harikalar dünyamızı keşfedelim
        ve oluşturalım!\"_\\\r\n\\\r\nOluşturduklarınızla oynamayı deneyin. Ne isterseniz
        onu çizin!\\\r\n\n-   Merdiven basamağı deseninde iki farklı açı kullanırsanız
        ne olur?\\\r\n-   Elmas desenini daha uzun veya kısa yaparsanız ne olur?\\\r\n-
        \  Bir kar tanesinin üzerine iki tane daha çizince nasıl görünüyor?\\\r"
      courseD_artist_project5: Şekillerle ve açılarla ne tür yeni resimler çizebileceğini
        görmek için yaratıcı ol!
      courseD_artist_project5_2018: Şekillerle ve açılarla ne tür yeni resimler çizebileceğini
        görmek için yaratıcı ol!
      courseD_artist_project5_2019: Şekillerle ve açılarla ne tür yeni resimler çizebileceğini
        görmek için yaratıcı ol!
      courseD_artist_ramp11: "Harika!  Şimdi sanatçıyı kullanarak bir kare yapalım!
        \ Bloklar biraz farklıdır, ancak fikir aynıdır. \\\r <hr/> \\\r  200 piksel
        uzunlukta kenarlar vardır ve her açıyı yapmak için 90 derece döndürmek gerekir."
      courseD_artist_ramp12: "Öğrendiklerini kullan ve karenin içine üçgen çiz <hr/>
        \\\r her kenar 200 piksel uzunluktadırr. Kare için 90 ve üçgen için 120 derece
        yapmak döndürmek gerekir."
      courseD_autorun_binary2_2019: "Bu fonksiyon 1 ve 0 dan oluşan ikili diziyi alır
        ve sanatçının bunu soldan sağa ve üstten alta  doğru uygulamasını sağlar.
        Sanatçı 1 görünce kareyi doldurur ve 0 görünce boş bırakır. \\\r\n\\\r\nBu
        kodu çalıştırın ve nasıl bir desen çizdiğini görün."
      courseD_bee_conditionals10: "Her bir noktada ne olduğunu tam olarak bilebildiğinizde
        bile, şartlılar yardımcı olabilir!\\\r\n\\\r\nTüm nektarı toplayın ve balın
        tamamını yapın."
      courseD_bee_conditionals10_2018: "Her bir noktada ne olduğunu tam olarak bilebildiğinizde
        bile, şartlılar yardımcı olabilir!\\\r\n\\\r\nTüm nektarı toplayın ve balın
        tamamını yapın."
      courseD_bee_conditionals10_2019: "Her bir noktada ne olduğunu tam olarak bilebildiğinizde
        bile, şartlılar yardımcı olabilir!\\\r\n\\\r\nTüm nektarı toplayın ve balın
        tamamını yapın."
      courseD_bee_conditionals1_predict1: "-   \"Bu bulut görüşümü engelliyor!\" \\*
        \\\r \\\r bir çiçek bulut altında olup olmadığını kontrol edin. Eğer çiçek
        ise, nektar al."
      courseD_bee_conditionals1_predict1_2018: "-   \"Bu bulut görüşümü engelliyor!\"
        \\* \\\r \\\r bir çiçek bulut altında olup olmadığını kontrol edin. Eğer çiçek
        ise, nektar al."
      courseD_bee_conditionals1_predict1_2019: "-   \"Bu bulut görüşümü engelliyor!\"
        \\* \\\r \\\r bir çiçek bulut altında olup olmadığını kontrol edin. Eğer çiçek
        ise, nektar al."
      courseD_bee_conditionals1_predict1_copy: "-   \"Bu bulut görüşümü engelliyor!\"
        \\* \\\r \\\r bir çiçek bulut altında olup olmadığını kontrol edin. Eğer çiçek
        ise, nektar al."
      courseD_bee_conditionals2: "More clouds! \n\nCheck underneath every cloud to
        see if it is hiding a flower before you get nectar. If there is a flower underneath
        the cloud, the bee will need to get nectar _once_.  \n\nRemember: Not all
        clouds hide the same thing!"
      courseD_bee_conditionals2_2018: "More clouds! \n\nCheck underneath every cloud
        to see if it is hiding a flower before you get nectar. If there is a flower
        underneath the cloud, the bee will need to get nectar _once_.  \n\nRemember:
        Not all clouds hide the same thing!"
      courseD_bee_conditionals2_2019: "More clouds! \n\nCheck underneath every cloud
        to see if it is hiding a flower before you get nectar. If there is a flower
        underneath the cloud, the bee will need to get nectar _once_.  \n\nRemember:
        Not all clouds hide the same thing!"
      courseD_bee_conditionals2_copy: "More clouds! \n\nCheck underneath every cloud
        to see if it is hiding a flower before you get nectar. If there is a flower
        underneath the cloud, the bee will need to get nectar _once_.  \n\nRemember:
        Not all clouds hide the same thing!"
      courseD_bee_conditionals3: Sadece çiçeklerden nektar toplayabilirsiniz, ancak
        bir çiçek olup olmadığını görmek için herhangi bir alanı kontrol edebilirsiniz.
        Bu bulutların herhangi birinin altında bir çiçek varsa, arı nektarı toplamaya
        **ilk defasında** ihtiyaç duyacaktır.
      courseD_bee_conditionals3_2018: Sadece çiçeklerden nektar toplayabilirsiniz,
        ancak bir çiçek olup olmadığını görmek için herhangi bir alanı kontrol edebilirsiniz.
        Bu bulutların herhangi birinin altında bir çiçek varsa, arı nektarı toplamaya
        **ilk defasında** ihtiyaç duyacaktır.
      courseD_bee_conditionals3_2019: Sadece çiçeklerden nektar toplayabilirsiniz,
        ancak bir çiçek olup olmadığını görmek için herhangi bir alanı kontrol edebilirsiniz.
        Bu bulutların herhangi birinin altında bir çiçek varsa, arı nektarı toplamaya
        **ilk defasında** ihtiyaç duyacaktır.
      courseD_bee_conditionals3_copy: Sadece çiçeklerden nektar toplayabilirsiniz,
        ancak bir çiçek olup olmadığını görmek için herhangi bir alanı kontrol edebilirsiniz.
        Bu bulutların herhangi birinin altında bir çiçek varsa, arı nektarı toplamaya
        **ilk defasında** ihtiyaç duyacaktır.
      courseD_bee_conditionals4: |-
        In this puzzle, we know that every flower has exactly one nectar, but the flowers aren't spaced evenly.

        Get all of the nectar using as few blocks as possible.
      courseD_bee_conditionals4_2018: |-
        In this puzzle, we know that every flower has exactly one nectar, but the flowers aren't spaced evenly.

        Get all of the nectar using as few blocks as possible.
      courseD_bee_conditionals4_2019: |-
        In this puzzle, we know that every flower has exactly one nectar, but the flowers aren't spaced evenly.

        Get all of the nectar using as few blocks as possible.
      courseD_bee_conditionals4_copy: |-
        In this puzzle, we know that every flower has exactly one nectar, but the flowers aren't spaced evenly.

        Get all of the nectar using as few blocks as possible.
      courseD_bee_conditionals6: |-
        _"Now I just want to make honey."_

        Some of these clouds might have honeycombs under them.  Be sure to check if a honeycomb is hiding behind each cloud! If there is a honeycomb, the bee will only need to make honey _once_.
      courseD_bee_conditionals6_2018: |-
        _"Now I just want to make honey."_

        Some of these clouds might have honeycombs under them.  Be sure to check if a honeycomb is hiding behind each cloud! If there is a honeycomb, the bee will only need to make honey _once_.
      courseD_bee_conditionals6_2019: |-
        _"Now I just want to make honey."_

        Some of these clouds might have honeycombs under them.  Be sure to check if a honeycomb is hiding behind each cloud! If there is a honeycomb, the bee will only need to make honey _once_.
      courseD_bee_conditionals7: "Sometimes a cloud covers a flower, sometimes it
        covers a honeycomb! \n\nUse the `if/else` block to collect nectar at flowers
        and make honey at honeycomb. Remember: if there is a flower, the bee only
        needs to get nectar _once_. If there is a honeycomb, the bee only needs to
        make honey _once_."
      courseD_bee_conditionals7_2018: "Sometimes a cloud covers a flower, sometimes
        it covers a honeycomb! \n\nUse the `if/else` block to collect nectar at flowers
        and make honey at honeycomb. Remember: if there is a flower, the bee only
        needs to get nectar _once_. If there is a honeycomb, the bee only needs to
        make honey _once_."
      courseD_bee_conditionals7_2019: "Sometimes a cloud covers a flower, sometimes
        it covers a honeycomb! \n\nUse the `if/else` block to collect nectar at flowers
        and make honey at honeycomb. Remember: if there is a flower, the bee only
        needs to get nectar _once_. If there is a honeycomb, the bee only needs to
        make honey _once_."
      courseD_bee_conditionals7_predict2: Bazen bulut çiçeği saklar bazende peteği.
        Eğer/değilse bloğu kullanarak çiçek ise nektar al değilse bal yap( bu durumda
        petektir).
      courseD_bee_conditionals7_predict2_2018: Bazen bulut çiçeği saklar bazende peteği.
        Eğer/değilse bloğu kullanarak çiçek ise nektar al değilse bal yap( bu durumda
        petektir).
      courseD_bee_conditionals7_predict2_2019: Bazen bulut çiçeği saklar bazende peteği.
        Eğer/değilse bloğu kullanarak çiçek ise nektar al değilse bal yap( bu durumda
        petektir).
      courseD_bee_conditionals8: "**Meydan Okuma:** Bu bulutların altında çiçek ya
        da petek olacak!\\\r\n\\\r\nEğer çiçek varsa bir defa nektarları topla. Yoksa,
        bir defa bal yap(çünkü petek var)."
      courseD_bee_conditionals8_2018: "**Meydan Okuma:** Bu bulutların altında çiçek
        ya da petek olacak!\\\r\n\\\r\nEğer çiçek varsa bir defa nektarları topla.
        Yoksa, bir defa bal yap(çünkü petek var)."
      courseD_bee_conditionals8_2019: "**Meydan Okuma:** Bu bulutların altında çiçek
        ya da petek olacak!\\\r\n\\\r\nEğer çiçek varsa bir defa nektarları topla.
        Yoksa, bir defa bal yap(çünkü petek var)."
      courseD_bee_conditionals9: Bütün nektarı topla veya hepsini bal yap. Nektarı
        sadece çiçeklerden toplayabilirsin ve peteklerden bal yapabilirsin. Çiçek
        veya petek var mı diye herhangi alanı bir kontrol et. Her bir bulutun altında
        sadece bir çiçek veya bir petek bulunur.
      courseD_bee_conditionals9_2018: Bütün nektarı topla veya hepsini bal yap. Nektarı
        sadece çiçeklerden toplayabilirsin ve peteklerden bal yapabilirsin. Çiçek
        veya petek var mı diye herhangi alanı bir kontrol et. Her bir bulutun altında
        sadece bir çiçek veya bir petek bulunur.
      courseD_bee_conditionals9_2019: Bütün nektarı topla veya hepsini bal yap. Nektarı
        sadece çiçeklerden toplayabilirsin ve peteklerden bal yapabilirsin. Çiçek
        veya petek var mı diye herhangi alanı bir kontrol et. Her bir bulutun altında
        sadece bir çiçek veya bir petek bulunur.
      courseD_bee_conditionals_challenge1: Bütün nektarı topla veya hepsini bal yap.
        Nektarı sadece çiçeklerden toplayabilirsin ve peteklerden bal yapabilirsin.
        Çiçek veya petek var mı diye herhangi alanı bir kontrol et.
      courseD_bee_conditionals_challenge1_2018: Bütün nektarı topla veya hepsini bal
        yap. Nektarı sadece çiçeklerden toplayabilirsin ve peteklerden bal yapabilirsin.
        Çiçek veya petek var mı diye herhangi alanı bir kontrol et.
      courseD_bee_conditionals_challenge1_2019: Bütün nektarı topla veya hepsini bal
        yap. Nektarı sadece çiçeklerden toplayabilirsin ve peteklerden bal yapabilirsin.
        Çiçek veya petek var mı diye herhangi alanı bir kontrol et.
      courseD_bee_conditionals_challenge2: Bütün nektarı topla veya hepsini bal yap.
        Bir çiçekteki bütün nektarı 'While nectar > 0' döngüsünü kullanarak tamamlayabilirsin.
      courseD_bee_conditionals_challenge2_2018: Bütün nektarı topla veya hepsini bal
        yap. Bir çiçekteki bütün nektarı 'While nectar > 0' döngüsünü kullanarak tamamlayabilirsin.
      courseD_bee_conditionals_challenge2_2019: Bütün nektarı topla veya hepsini bal
        yap. Bir çiçekteki bütün nektarı 'While nectar > 0' döngüsünü kullanarak tamamlayabilirsin.
      courseD_bee_debugging_challenge1: Arıların nasıl nektar topladığını izle. Benzer
        deseni kullanarak arıların bütün balı yapmasına yardım edebilir misin?
      courseD_bee_debugging_challenge1a: Arıların nasıl nektar topladığını izle. Benzer
        deseni kullanarak arıların bütün balı yapmasına yardım edebilir misin?
      courseD_bee_nestedLoops1: |-
        "_This is going to **BEE** great!_"

        Help the bee collect all of the nectar.
      courseD_bee_nestedLoops1_2018: |-
        "_This is going to **BEE** great!_"

        Help the bee collect all of the nectar.
      courseD_bee_nestedLoops1_2019: |-
        "_This is going to **BEE** great!_"

        Help the bee collect all of the nectar.
      courseD_bee_nestedLoops1a: |-
        _"This is going to **BEE** great!"_

        Help the bee collect all of the nectar.
      courseD_bee_nestedLoops1a_2018: |-
        _"This is going to **BEE** great!"_

        Help the bee collect all of the nectar.
      courseD_bee_nestedLoops1a_2019: |-
        _"This is going to **BEE** great!"_

        Help the bee collect all of the nectar.
      courseD_bee_nestedLoops2: Bu sefer tüm mümkün olduğunca az blok kullanarak tüm
        nektarı toplaması için arıya yardım edin.
      courseD_bee_nestedLoops2_2018: Bu sefer tüm mümkün olduğunca az blok kullanarak
        tüm nektarı toplaması için arıya yardım edin.
      courseD_bee_nestedLoops2_2019: Bu sefer tüm mümkün olduğunca az blok kullanarak
        tüm nektarı toplaması için arıya yardım edin.
      courseD_bee_nestedLoops2_predict1: Bu sefer tüm mümkün olduğunca az blok kullanarak
        tüm nektarı toplaması için arıya yardım edin.
      courseD_bee_nestedLoops2_predict1_2018: Bu sefer tüm mümkün olduğunca az blok
        kullanarak tüm nektarı toplaması için arıya yardım edin.
      courseD_bee_nestedLoops2_predict1_2019: Bu sefer tüm mümkün olduğunca az blok
        kullanarak tüm nektarı toplaması için arıya yardım edin.
      courseD_bee_nestedLoops7: "**Challenge:** Figure out how to get all of the nectar
        using only the blocks available."
      courseD_bee_nestedLoops7_2018: "**Challenge:** Figure out how to get all of
        the nectar using only the blocks available."
      courseD_bee_nestedLoops7_2019: "**Challenge:** Figure out how to get all of
        the nectar using only the blocks available."
      courseD_bee_nestedLoops8: 'Tüm çiçeklerdeki nektarları topla ve peteklere bal
        yap. İç içe döngü kullan. '
      courseD_bee_nestedLoops8_2018: 'Tüm çiçeklerdeki nektarları topla ve peteklere
        bal yap. İç içe döngü kullan. '
      courseD_bee_nestedLoops8_2019: 'Tüm çiçeklerdeki nektarları topla ve peteklere
        bal yap. İç içe döngü kullan. '
      courseD_bee_nestedLoops9: Balın tamamını yap.
      courseD_bee_nestedLoops9_2018: Balın tamamını yap.
      courseD_bee_nestedLoops9_2019: Balın tamamını yap.
      courseD_bee_nestedLoops9_predict2: Balın tamamını yap.
      courseD_bee_nestedLoops9_predict2_2018: Balın tamamını yap.
      courseD_bee_nestedLoops9_predict2_2019: Balın tamamını yap.
      courseD_bounce_events10s_2018: "There is now a hoop at the top.  \n\nAttach
        the `score point` block to the `when ball in goal` event and the `score opponent
        point` block to the `when ball misses hand` event to make a game. \n\n* *
        *\n\nSee how many points you can score before your opponent scores twice."
      courseD_bounce_events10s_2019: "There is now a hoop at the top.  \n\nAttach
        the `score point` block to the `when ball in goal` event and the `score opponent
        point` block to the `when ball misses hand` event to make a game. \n\n* *
        *\n\nSee how many points you can score before your opponent scores twice."
      courseD_bounce_events11s_2018: "Şimdi, topun kontrolü sizde! Oyunda yeni bir
        topa ihtiyaç olan her yere 'yeni top fırlat' bloğunu ekleyin.\\\r\n\\\r\n\\---\\\r\n\\\r\nRakibiniz
        iki sayı almadan önce kaç puan alabileceğinizi görün!"
      courseD_bounce_events11s_2019: "Şimdi, topun kontrolü sizde! Oyunda yeni bir
        topa ihtiyaç olan her yere 'yeni top fırlat' bloğunu ekleyin.\\\r\n\\\r\n\\---\\\r\n\\\r\nRakibiniz
        iki sayı almadan önce kaç puan alabileceğinizi görün!"
      courseD_bounce_events1s_2018: "Get to the hoop!     \n\nAttach a block to the
        `when left arrow` event and press \"Run\" to move the player to the net."
      courseD_bounce_events1s_2019: "Get to the hoop!     \n\nAttach a block to the
        `when left arrow` event and press \"Run\" to move the player to the net."
      courseD_bounce_events2s_2018: Şimdi, 'sağ olay olduğunda'ya bir blok ekleyin
        bu sayede el her iki potaya da ulaşabilir.
      courseD_bounce_events2s_2019: Şimdi, 'sağ olay olduğunda'ya bir blok ekleyin
        bu sayede el her iki potaya da ulaşabilir.
      courseD_bounce_events5s_2018: We're going to send a basketball flying down towards
        the hand.  Attach a block to the `when ball hits hand` event to ensure the
        ball reaches the basket.
      courseD_bounce_events5s_2019: We're going to send a basketball flying down towards
        the hand.  Attach a block to the `when ball hits hand` event to ensure the
        ball reaches the basket.
      courseD_bounce_events6s_2018: "Now the basket is at the top.  \n\nAttach code
        to make the ball bounce when it hits the wall so you can solve this puzzle."
      courseD_bounce_events6s_2019: "Now the basket is at the top.  \n\nAttach code
        to make the ball bounce when it hits the wall so you can solve this puzzle."
      courseD_bounce_events7s_2018: "Potaya vurduğunuzda filenin hışırdamasını ve
        top elinizi ıskaladığında düdüğün çalmasını sağlamak için ses blokları ekleyin.
        \\\r\n\\\r\n\\---\\\r\n\\\r\nTop son hedefe vurana kadar topu sektirin."
      courseD_bounce_events7s_2019: "Potaya vurduğunuzda filenin hışırdamasını ve
        top elinizi ıskaladığında düdüğün çalmasını sağlamak için ses blokları ekleyin.
        \\\r\n\\\r\n\\---\\\r\n\\\r\nTop son hedefe vurana kadar topu sektirin."
      courseD_collector_debugging1: "_\"Oh hayır! Bir problem görüyorum.\"_\\\r\n\\\r\nTüm
        hazineyi toplamak için hatayı/hataları düzeltin."
      courseD_collector_debugging10_predict1: "_\"Burası Hazine Adası!\"_\\\r\n\\\r\nKodu
        düzeltip bütün hazineyi alması için Laurel'e yardım et."
      courseD_collector_debugging1a_2018: "_\"Oh hayır! Bir problem görüyorum.\"_\\\r\n\\\r\nTüm
        hazineyi toplamak için hatayı/hataları düzeltin."
      courseD_collector_debugging1a_2019: "_\"Oh hayır! Bir problem görüyorum.\"_\\\r\n\\\r\nTüm
        hazineyi toplamak için hatayı/hataları düzeltin."
      courseD_collector_debugging2: "_\"Bunu yapabilirsin!\"_\\\r\n\\\r\nTüm hazineyi
        toplamak için hatayı/hataları düzeltin."
      courseD_collector_debugging2a_2018: "_\"Bunu yapabilirsin!\"_\\\r\n\\\r\nTüm
        hazineyi toplamak için hatayı/hataları düzeltin."
      courseD_collector_debugging2a_2019: "_\"Bunu yapabilirsin!\"_\\\r\n\\\r\nTüm
        hazineyi toplamak için hatayı/hataları düzeltin."
      courseD_collector_debugging3: "_\"Israrcı ol, bunu çözeceksin\"_\\\r\n\\\r\nTüm
        hazineye toplamak için hatayı/hataları düzeltin."
      courseD_collector_debugging3a_2018: "_\"Israrcı ol, bunu çözeceksin\"_\\\r\n\\\r\nTüm
        hazineye toplamak için hatayı/hataları düzeltin."
      courseD_collector_debugging3a_2019: "_\"Israrcı ol, bunu çözeceksin\"_\\\r\n\\\r\nTüm
        hazineye toplamak için hatayı/hataları düzeltin."
      courseD_collector_debugging4: "_\"Hayal kırıklığına uğrama.\nBunu yapabilirsin!\"_\\\r\n\\\r\nTüm
        hazineyi toplamak için hataları düzeltin."
      courseD_collector_debugging4a_2018: "_\"Hayal kırıklığına uğrama.\nBunu yapabilirsin!\"_\\\r\n\\\r\nTüm
        hazineyi toplamak için hataları düzeltin."
      courseD_collector_debugging4a_2019: "_\"Hayal kırıklığına uğrama.\nBunu yapabilirsin!\"_\\\r\n\\\r\nTüm
        hazineyi toplamak için hataları düzeltin."
      courseD_collector_debugging5: "_\"Bu bulmaca beni deli ediyor!\"_\\\r\n\\\r\nİhtiyaç
        duyduğun bütün komutlar zaten burada... Şimdi hata ayıklama yeteneğini bu
        bulmacayı nasıl çözeceğini bulmak için kullan."
      courseD_collector_debugging5a_2018: "_\"Bu bulmaca beni deli ediyor!\"_\\\r\n\\\r\nİhtiyaç
        duyduğun bütün komutlar zaten burada... Şimdi hata ayıklama yeteneğini bu
        bulmacayı nasıl çözeceğini bulmak için kullan."
      courseD_collector_debugging5a_2019: "_\"Bu bulmaca beni deli ediyor!\"_\\\r\n\\\r\nİhtiyaç
        duyduğun bütün komutlar zaten burada... Şimdi hata ayıklama yeteneğini bu
        bulmacayı nasıl çözeceğini bulmak için kullan."
      courseD_collector_debugging6: "**Meydan Okuma**:İhtiyaç duyduğun bütün bloklar
        zaten burada... Şimdi hata ayıklama yeteneğini hataları düzeltip bütün hazineyi
        toplamak için kullan."
      courseD_collector_debugging6a_2018: 'Meydan Okuma: En az **6** tane hazine toplamak
        için çalışma alanındaki kodları kullan!'
      courseD_collector_debugging6a_2019: 'Meydan Okuma: En az **6** tane hazine toplamak
        için çalışma alanındaki kodları kullan!'
      courseD_collector_debugging8: "_\"Daha fazla hazine!\"_\\\r\n\\\r\nKodu düzeltip
        bütün hazineyi alması için\nLaurel'e yardım et."
      courseD_collector_debugging8a_2018: "_\"Daha fazla hazine!\"_\\\r\n\\\r\nKodu
        düzeltip bütün hazineyi alması için\nLaurel'e yardım et."
      courseD_collector_debugging8a_2019: "_\"Daha fazla hazine!\"_\\\r\n\\\r\nKodu
        düzeltip bütün hazineyi alması için\nLaurel'e yardım et."
      courseD_collector_debugging9: "_\"Burası Hazine Adası!\"_\\\r\n\\\r\nKodu düzeltip
        bütün hazineyi alması için Laurel'e yardım et."
      courseD_collector_debugging9a_2018: "_\"Burası Hazine Adası!\"_\\\r\n\\\r\nKodu
        düzeltip bütün hazineyi alması için Laurel'e yardım et."
      courseD_collector_debugging9a_2019: "_\"Burası Hazine Adası!\"_\\\r\n\\\r\nKodu
        düzeltip bütün hazineyi alması için Laurel'e yardım et."
      courseD_collector_nested_loops_challenge2: Hazine için avlanalım - döngüleri
        kullanarak! Sadece araç kutundaki blokları kullanarak toplayıcının en az 2
        yığın hazineye ulaşmasına yardım et. 4'ünün tamamını toplamak mümkün.
      courseD_collector_nested_loops_challenge2_2018: Hazine için avlanalım - döngüleri
        kullanarak! Sadece araç kutundaki blokları kullanarak toplayıcının en az 2
        yığın hazineye ulaşmasına yardım et. 4'ünün tamamını toplamak mümkün.
      courseD_collector_nested_loops_challenge2_2019: Hazine için avlanalım - döngüleri
        kullanarak! Sadece araç kutundaki blokları kullanarak toplayıcının en az 2
        yığın hazineye ulaşmasına yardım et. 4'ünün tamamını toplamak mümkün.
      courseD_collector_nested_loops_challenge2a: Hazine için avlanalım - döngüleri
        kullanarak! Sadece araç kutundaki blokları kullanarak toplayıcının en az 2
        yığın hazineye ulaşmasına yardım et. 4'ünün tamamını toplamak mümkün.
      courseD_collector_ramp10: Laurel kare etrafında yürüt ve buldukça hazine topla
      courseD_collector_ramp8: "Bu bulmaca s onuncusu gibi, ama şimdi maceracı Laurel
        yıldız! \\\r <hr/> \\\r \\\r daha önce olduğu gibi aynı yolu git, \\\r Tekrarla
        bloğunu kullanarak hazine topla"
      courseD_collector_ramp9: Daha önceki ile aynı yolu al, ama bu sefer tüm hazineyi
        topla
      courseD_farmer_condLoops1: |-
        _"Corn you help me harvest today?"_

        Help the harvester check her row of corn to see if anything is ready to pick.  Use conditionals to look at each sprout.  Every stalk will have either **0 or 1** pieces of corn ready to harvest.
      courseD_farmer_condLoops1_2018: |-
        _"Corn you help me harvest today?"_

        Help the harvester check her row of corn to see if anything is ready to pick.  Use conditionals to look at each sprout.  Every stalk will have either **0 or 1** pieces of corn ready to harvest.
      courseD_farmer_condLoops1_2019: |-
        _"Corn you help me harvest today?"_

        Help the harvester check her row of corn to see if anything is ready to pick.  Use conditionals to look at each sprout.  Every stalk will have either **0 or 1** pieces of corn ready to harvest.
      courseD_farmer_condLoops2: "_\"Lettuce collect both crops from this row!\"_\n\nThis
        garden is all mixed up, it has both **corn and lettuce**!  \n\nHelp the harvester
        pick the items that are ready for harvesting.  Each plant will have either
        **one** corn or **one** lettuce."
      courseD_farmer_condLoops2_2018: "_\"Lettuce collect both crops from this row!\"_\n\nThis
        garden is all mixed up, it has both **corn and lettuce**!  \n\nHelp the harvester
        pick the items that are ready for harvesting.  Each plant will have either
        **one** corn or **one** lettuce."
      courseD_farmer_condLoops2_2019: "_\"Lettuce collect both crops from this row!\"_\n\nThis
        garden is all mixed up, it has both **corn and lettuce**!  \n\nHelp the harvester
        pick the items that are ready for harvesting.  Each plant will have either
        **one** corn or **one** lettuce."
      courseD_farmer_condLoops3: "-   \"Mısır, marul, ve kabak! \n    Bana tüm bunları
        hasat etmede yardım et.\" \\* \\\r\n    \\\r\n    Her bir bitki bir mısır
        tanesi, bir marul veya bir kabak olacak."
      courseD_farmer_condLoops3_2018: "-   \"Mısır, marul, ve kabak! \n    Bana tüm
        bunları hasat etmede yardım et.\" \\* \\\r\n    \\\r\n    Her bir bitki bir
        mısır tanesi, bir marul veya bir kabak olacak."
      courseD_farmer_condLoops3_2019: "-   \"Mısır, marul, ve kabak! \n    Bana tüm
        bunları hasat etmede yardım et.\" \\* \\\r\n    \\\r\n    Her bir bitki bir
        mısır tanesi, bir marul veya bir kabak olacak."
      courseD_farmer_condLoops4: "_\"Gosh! Now the lettuce is growing in clusters!\"_
        \ \n\nThe harvester wants to pick everything from her lettuce garden. Each
        plant will now have more than one head of lettuce on it, so the farmer will
        need to keep picking while there is still lettuce growing.  \n\n##### (Remember:
        This garden only has lettuce!)"
      courseD_farmer_condLoops4_2018: "_\"Gosh! Now the lettuce is growing in clusters!\"_
        \ \n\nThe harvester wants to pick everything from her lettuce garden. Each
        plant will now have more than one head of lettuce on it, so the harvester
        will need to keep picking while there is still lettuce growing.  \n\n#####
        (Remember: This garden only has lettuce!)"
      courseD_farmer_condLoops4_2019: "_\"Gosh! Now the lettuce is growing in clusters!\"_
        \ \n\nThe harvester wants to pick everything from her lettuce garden. Each
        plant will now have more than one head of lettuce on it, so the harvester
        will need to keep picking while there is still lettuce growing.  \n\n#####
        (Remember: This garden only has lettuce!)"
      courseD_farmer_condLoops5: |-
        _"What a bountiful crop!"_

        This field has clusters of corn and lettuce growing together -- with one pumpkin at the end.  Can you harvest everything?
      courseD_farmer_condLoops5_2018: |-
        _"What a bountiful crop!"_

        This field has clusters of corn and lettuce growing together -- with one pumpkin at the end.  Can you harvest everything?
      courseD_farmer_condLoops5_2019: |-
        _"What a bountiful crop!"_

        This field has clusters of corn and lettuce growing together -- with one pumpkin at the end.  Can you harvest everything?
      courseD_farmer_condLoops6: |-
        _"Let's take this one step further!"_

        Can you figure out how to pick the pumpkin?  Make sure to collect all of the corn along the way!
      courseD_farmer_condLoops6_2018: |-
        _"Let's take this one step further!"_

        Can you figure out how to pick the pumpkin?  Make sure to collect all of the corn along the way!
      courseD_farmer_condLoops6_2019: |-
        _"Let's take this one step further!"_

        Can you figure out how to pick the pumpkin?  Make sure to collect all of the corn along the way!
      courseD_farmer_condLoops7: "**Challenge:** Collect all of the corn and lettuce,
        then pick the pumpkin."
      courseD_farmer_condLoops7_2018: "**Challenge:** Collect all of the corn and
        lettuce, then pick the pumpkin."
      courseD_farmer_condLoops7_2019: "**Challenge:** Collect all of the corn and
        lettuce, then pick the pumpkin."
      courseD_farmer_condLoops8: Mısır ve marulların hepsini topla sonra kabakları
        seç.
      courseD_farmer_condLoops8_2018: Mısır ve marulların hepsini topla sonra kabakları
        seç.
      courseD_farmer_condLoops8_2019: Mısır ve marulların hepsini topla sonra kabakları
        seç.
      courseD_farmer_condLoops9: Mısır ve marulların hepsini topla sonra kabakları
        seç.
      courseD_farmer_condLoops9_2018: Mısır ve marulların hepsini topla sonra kabakları
        seç.
      courseD_farmer_condLoops9_2019: Mısır ve marulların hepsini topla sonra kabakları
        seç.
      courseD_farmer_condLoops9_predict1: Mısır ve marulların hepsini topla sonra
        kabakları seç.
      courseD_farmer_condLoops9_predict1_2018: Mısır ve marulların hepsini topla sonra
        kabakları seç.
      courseD_farmer_condLoops9_predict1_2019: Mısır ve marulların hepsini topla sonra
        kabakları seç.
      courseD_farmer_condLoops_challenge1: "Kabaklar nereden dönmen gerektiğini belirliyor.
        _Kabaklardan sağa dön._ Aksi halde düz gitmeye devam et ama yol boyunca bütün
        marul ve mısırları toplamayı unutma. \\\r\n\\\r\n**Her gizli ürün bir mısır
        ya da marula sahip.**"
      courseD_farmer_condLoops_challenge1_2018: "Kabaklar nereden dönmen gerektiğini
        belirliyor. _Kabaklardan sağa dön._ Aksi halde düz gitmeye devam et ama yol
        boyunca bütün marul ve mısırları toplamayı unutma. \\\r\n\\\r\n**Her gizli
        ürün bir mısır ya da marula sahip.**"
      courseD_farmer_condLoops_challenge1_2019: "Kabaklar nereden dönmen gerektiğini
        belirliyor. _Kabaklardan sağa dön._ Aksi halde düz gitmeye devam et ama yol
        boyunca bütün marul ve mısırları toplamayı unutma. \\\r\n\\\r\n**Her gizli
        ürün bir mısır ya da marula sahip.**"
      courseD_farmer_condLoops_challenge2: Burası sebze labirenti. Kabaklardan sağa
        dön, marullardan sola dön. Bölümü tamamlamak için her şeyi topla.
      courseD_farmer_condLoops_challenge2_2018: Burası sebze labirenti. Kabaklardan
        sağa dön, marullardan sola dön. Bölümü tamamlamak için her şeyi topla.
      courseD_farmer_condLoops_challenge2_2019: Burası sebze labirenti. Kabaklardan
        sağa dön, marullardan sola dön. Bölümü tamamlamak için her şeyi topla.
      courseD_farmer_until_challenge2: Kıvrımlı yolu takip etmek için eğer/değilse
        (if/else) bloklarını kullan. Her köşede ürünleri silmek amacıyla bir döngü
        içerisinde 'remove1' komutunu kullan.
      courseD_farmer_while1: "_\"Hi, I'm a farmer. I need your help to flatten the
        field on my farm so it's ready for planting!\"_  \n\nMove to the pile of dirt
        and use the `remove` block to remove it."
      courseD_farmer_while1_2018: "_\"Hi, I'm a farmer. I need your help to flatten
        the field on my farm so it's ready for planting!\"_  \n\nMove to the pile
        of dirt and use the `remove` block to remove it."
      courseD_farmer_while1_2019: "_\"Hi, I'm a farmer. I need your help to flatten
        the field on my farm so it's ready for planting!\"_  \n\nMove to the pile
        of dirt and use the `remove` block to remove it."
      courseD_farmer_while3: |-
        _"Move to the pile of dirt and tell me how many shovelfuls to remove."_

        Use as few blocks as possible to solve this puzzle.
      courseD_farmer_while3_2018: |-
        _"Move to the pile of dirt and tell me how many shovelfuls to remove."_

        Use as few blocks as possible to solve this puzzle.
      courseD_farmer_while3_2019: |-
        _"Move to the pile of dirt and tell me how many shovelfuls to remove."_

        Use as few blocks as possible to solve this puzzle.
      courseD_farmer_while4: "-   \"Ne kadar toprak olduğunu bilmiyorum!\" \\* \\\r
        \\\r 'sürece' döngüsü kullanarak tüm yığını kaldırmak için çiftçiye yardım
        et."
      courseD_farmer_while4_2018: "-   \"Ne kadar toprak olduğunu bilmiyorum!\" \\*
        \\\r \\\r 'sürece' döngüsü kullanarak tüm yığını kaldırmak için çiftçiye yardım
        et."
      courseD_farmer_while4_2019: "-   \"Ne kadar toprak olduğunu bilmiyorum!\" \\*
        \\\r \\\r 'sürece' döngüsü kullanarak tüm yığını kaldırmak için çiftçiye yardım
        et."
      courseD_farmer_while4_predict1: "-   \"Ne kadar toprak olduğunu bilmiyorum!\"
        \\* \\\r \\\r 'sürece' döngüsü kullanarak tüm yığını kaldırmak için çiftçiye
        yardım et."
      courseD_farmer_while4_predict1_2018: "-   \"Ne kadar toprak olduğunu bilmiyorum!\"
        \\* \\\r \\\r 'sürece' döngüsü kullanarak tüm yığını kaldırmak için çiftçiye
        yardım et."
      courseD_farmer_while4_predict1_2019: "-   \"Ne kadar toprak olduğunu bilmiyorum!\"
        \\* \\\r \\\r 'sürece' döngüsü kullanarak tüm yığını kaldırmak için çiftçiye
        yardım et."
      courseD_farmer_while6: "Look at all of those holes!  Each one needs a different
        amount of dirt.   \n\nYou can use the `while` loop to easily fill them all!"
      courseD_farmer_while6_2018: "Look at all of those holes!  Each one needs a different
        amount of dirt.   \n\nYou can use the `while` loop to easily fill them all!"
      courseD_farmer_while6_2019: "Look at all of those holes!  Each one needs a different
        amount of dirt.   \n\nYou can use the `while` loop to easily fill them all!"
      courseD_farmer_while8: "**Challenge:** Fill all of these holes using as few
        blocks as possible. "
      courseD_farmer_while8_2018: "**Challenge:** Fill all of these holes using as
        few blocks as possible. "
      courseD_farmer_while8_2019: "**Challenge:** Fill all of these holes using as
        few blocks as possible. "
      courseD_farmer_while_challenge1: Tüm delikleri doldurun ve tüm yığınları kaldır.
      courseD_farmer_while_challenge1_2018: Tüm delikleri doldurun ve tüm yığınları
        kaldır.
      courseD_farmer_while_challenge1_2019: Tüm delikleri doldurun ve tüm yığınları
        kaldır.
      courseD_farmer_while_challenge2: Tüm delikleri doldurun ve tüm yığınları kaldır.
      courseD_harvester_nested_loops_challenge1: _"Çiftlikte biraz yardıma ihtiyacım
        var! Sadece araç kutusundaki blokları kullanarak bu mısırı hasat etmeme yardım
        et."_
      courseD_harvester_nested_loops_challenge1_2018: _"Çiftlikte biraz yardıma ihtiyacım
        var! Sadece araç kutusundaki blokları kullanarak bu mısırı hasat etmeme yardım
        et."_
      courseD_harvester_nested_loops_challenge1_2019: _"Çiftlikte biraz yardıma ihtiyacım
        var! Sadece araç kutusundaki blokları kullanarak bu mısırı hasat etmeme yardım
        et."_
      courseD_iceage_loops1: Help Scrat across the slippery ice to get to the acorn!
      courseD_iceage_loops10: Help Scrat get all the way over to the acorn!
      courseD_iceage_loops10_2019: Help Scrat get all the way over to the acorn!
      courseD_iceage_loops11: Scrat'in meşe palamuduna ulaşmasını sağlayın!
      courseD_iceage_loops11_2019: Scrat'in meşe palamuduna ulaşmasını sağlayın!
      courseD_iceage_loops12: Get to the acorn any way you can!
      courseD_iceage_loops12_2019: Get to the acorn any way you can!
      courseD_iceage_loops1_2019: Help Scrat across the slippery ice to get to the
        acorn!
      courseD_iceage_loops2: |-
        Use a <xml><block type="maze_turn">
            <title name="DIR">turnLeft</title>
          </block></xml> block to get to the acorn!
      courseD_iceage_loops2_2019: |-
        Use a <xml><block type="maze_turn" block-text="turn left">
            <title name="DIR">turnLeft</title>
          </block></xml> block to get to the acorn!
      courseD_iceage_loops3: Can you get to the acorn with just one <xml><block type="maze_moveForward"/></xml>
        block? Try using a loop!
      courseD_iceage_loops3_2019: Can you get to the acorn with just one <xml><block
        type="maze_moveForward" block-text="move forward"/></xml> block? Try using
        a loop!
      courseD_iceage_loops4: Add one more block to get Scrat all the way to the acorn!
      courseD_iceage_loops4_2019: Add one more block to get Scrat all the way to the
        acorn!
      courseD_iceage_loops6: Can you add a loop to get to the acorn?
      courseD_iceage_loops6_2019: Can you add a loop to get to the acorn?
      courseD_iceage_loops7: 'Scrat really wants that acorn! '
      courseD_iceage_loops7_2019: 'Scrat really wants that acorn! '
      courseD_iceage_loops8: 'Can you fix this code? '
      courseD_iceage_loops8_2019: 'Can you fix this code? '
      courseD_iceage_loops9: The acorn is so far away! Can you use loops to help Scrat
        get there?
      courseD_iceage_loops9_2019: The acorn is so far away! Can you use loops to help
        Scrat get there?
      courseD_maze_intro4_2019: '_"Trace the path and lead me to the pig."_ '
      courseD_maze_intro5a_2019: Sıraya dikkat edin ve o domuza nasıl ulaşacağınızı
        bulmaya çalışın!
      courseD_maze_intro5c_2019: Watch out for TNT! Help Red get to the pig.
      courseD_maze_nestedLoops3: |-
        _"Zombie hungry!"_

        Get the zombie to the sunflower using the fewest number of blocks possible.
      courseD_maze_nestedLoops3_2018: |-
        _"Zombie hungry!"_

        Get the zombie to the sunflower using the fewest number of blocks possible.
      courseD_maze_nestedLoops3_2019: |-
        _"Zombie hungry!"_

        Get the zombie to the sunflower using the fewest number of blocks possible.
      courseD_maze_nestedLoops4: Beni ayçiçeğine götür!
      courseD_maze_nestedLoops4_2018: Beni ayçiçeğine götür!
      courseD_maze_nestedLoops4_2019: Beni ayçiçeğine götür!
      courseD_maze_nestedLoops6: |-
        _"Must eat sunflower!"_

        Get the zombie to the sunflower using only the blocks available.
      courseD_maze_nestedLoops6_2018: |-
        _"Must eat sunflower!"_

        Get the zombie to the sunflower using only the blocks available.
      courseD_maze_nestedLoops6_2019: |-
        _"Must eat sunflower!"_

        Get the zombie to the sunflower using only the blocks available.
      courseD_maze_ramp1: Bu bulmaca için tüm blokların birlikte sürükleyin ve izlemek
        için "Çalıştır" ı tıklatın!
      courseD_maze_ramp1_2018: Bu bulmaca için tüm blokların birlikte sürükleyin ve
        izlemek için "Çalıştır" ı tıklatın!
      courseD_maze_ramp1_2019: Bu bulmaca için tüm blokların birlikte sürükleyin ve
        izlemek için "Çalıştır" ı tıklatın!
      courseD_maze_ramp2: Bir ilave 'ileri' bloğundan sürükleyin, sonra çalıştığı
        zaman ' tüm blokları ekleyebilirsiniz.
      courseD_maze_ramp2_2018: Bir ilave 'ileri' bloğundan sürükleyin, sonra çalıştığı
        zaman ' tüm blokları ekleyebilirsiniz.
      courseD_maze_ramp2_2019: Bir ilave 'ileri' bloğundan sürükleyin, sonra çalıştığı
        zaman ' tüm blokları ekleyebilirsiniz.
      courseD_maze_ramp3: "-   \"Bu domuz benim tüylerini  diken d\n    iken ediyor.\"
        \\* \\\r \\\r orada kuşun parçalanmasına sebep olacak bir blok var.  \\\r
        Onu geri araç kutusuna geri sürükle."
      courseD_maze_ramp3_2018: "-   \"Bu domuz benim tüylerini  diken d\n    iken
        ediyor.\" \\* \\\r \\\r orada kuşun parçalanmasına sebep olacak bir blok var.
        \ \\\r Onu geri araç kutusuna geri sürükle."
      courseD_maze_ramp3_2019: "-   \"Bu domuz benim tüylerini  diken d\n    iken
        ediyor.\" \\* \\\r \\\r orada kuşun parçalanmasına sebep olacak bir blok var.
        \ \\\r Onu geri araç kutusuna geri sürükle."
      courseD_maze_ramp4: Yolu izleyin ve aptal domuza ulaşmamda bana öncülük edin.
        TNT'lerden kaçının yoksa tüylerim havaya uçar!
      courseD_maze_ramp4_2018: Yolu izleyin ve aptal domuza ulaşmamda bana öncülük
        edin. TNT'lerden kaçının yoksa tüylerim havaya uçar!
      courseD_maze_ramp4_2019: Yolu izleyin ve aptal domuza ulaşmamda bana öncülük
        edin. TNT'lerden kaçının yoksa tüylerim havaya uçar!
      courseD_maze_ramp5: "-   Domuza ulaşmak için yolu takip edin!\" \\* \\\r \\\r
        TNT den kaçının."
      courseD_maze_ramp5_2018: "-   Domuza ulaşmak için yolu takip edin!\" \\* \\\r
        \\\r TNT den kaçının."
      courseD_maze_ramp5_2019: "-   Domuza ulaşmak için yolu takip edin!\" \\* \\\r
        \\\r TNT den kaçının."
      courseD_maze_ramp5a: Sıraya dikkat edin ve o domuza nasıl ulaşacağınızı bulmaya
        çalışın!
      courseD_maze_ramp5a_2018: Sıraya dikkat edin ve o domuza nasıl ulaşacağınızı
        bulmaya çalışın!
      courseD_maze_ramp5a_2019: Sıraya dikkat edin ve o domuza nasıl ulaşacağınızı
        bulmaya çalışın!
      courseD_maze_ramp5b: "**Challenge:** Navigate this maze to help the bird find
        the pig!"
      courseD_maze_ramp5b_2018: "**Challenge:** Navigate this maze to help the bird
        find the pig!"
      courseD_maze_ramp5b_2019: "**Challenge:** Navigate this maze to help the bird
        find the pig!"
      courseD_maze_ramp5c: Domuza ulaşması için kuşa yardım et.
      courseD_maze_ramp5c_2018: Domuza ulaşması için kuşa yardım et.
      courseD_maze_ramp5c_2019: Domuza ulaşması için kuşa yardım et.
      courseD_maze_ramp5d: Kuşu domuza götür.
      courseD_maze_ramp5d_2018: Kuşu domuza götür.
      courseD_maze_ramp5d_2019: Kuşu domuza götür.
      courseD_maze_ramp6: "-   \"Sakin ol ve kötü domuzu bulmama yardım et. Aksi takdirde
        sinirleniyorum!\" \\* \\\r \\\r bir satırda birkaç blok varsa 'tekrarla' döngüsü
        içine taşıyın.  Bu daha az kod ile aynı şeyi yapmayı sağlar!"
      courseD_maze_ramp7: "-   \"Kızgın olma zamanı!\" \\* \\\r \\\r \\*\\* meydan
        okuma: \\*\\* kuşu domuza iletmek için öğrendiklerini kullanın!"
      courseD_maze_until10: Ayçiçeğine ulaşması için zombiye yardım et.
      courseD_maze_until10_2018: Ayçiçeğine ulaşması için zombiye yardım et.
      courseD_maze_until10_2019: Ayçiçeğine ulaşması için zombiye yardım et.
      courseD_maze_until10_predict2: Ayçiçeğine ulaşması için zombiye yardım et.
      courseD_maze_until10_predict2_2018: Ayçiçeğine ulaşması için zombiye yardım
        et.
      courseD_maze_until10_predict2_2019: Ayçiçeğine ulaşması için zombiye yardım
        et.
      courseD_maze_until4: |-
        _"Dear person. Me zombie. Me hungry. Must... get... to sunflower..."_

        Can you get the zombie to the sunflower using only the blocks that are available?
      courseD_maze_until4_2018: |-
        _"Dear person. Me zombie. Me hungry. Must... get... to sunflower..."_

        Can you get the zombie to the sunflower using only the blocks that are available?
      courseD_maze_until4_2019: |-
        _"Dear person. Me zombie. Me hungry. Must... get... to sunflower..."_

        Can you get the zombie to the sunflower using only the blocks that are available?
      courseD_maze_until5: Use the `if` block to help the zombie decide when to turn,
        then get the zombie to the sunflower.
      courseD_maze_until5_2018: Use the `if` block to help the zombie decide when
        to turn, then get the zombie to the sunflower.
      courseD_maze_until5_2019: Use the `if` block to help the zombie decide when
        to turn, then get the zombie to the sunflower.
      courseD_maze_until6: Ayçiçeğine ulaşması için zombiye yardım et.
      courseD_maze_until6_2018: Ayçiçeğine ulaşması için zombiye yardım et.
      courseD_maze_until6_2019: Ayçiçeğine ulaşması için zombiye yardım et.
      courseD_maze_until7: Ayçiçeğine ulaşması için zombiye yardım et.
      courseD_maze_until7_2018: Ayçiçeğine ulaşması için zombiye yardım et.
      courseD_maze_until7_2019: Ayçiçeğine ulaşması için zombiye yardım et.
      courseD_maze_until8: Ayçiçeğine ulaşması için zombiye yardım et.
      courseD_maze_until9: "**Challenge:** Avoid the chompers and help the zombie
        get to the sunflower."
      courseD_maze_until9_2018: "**Challenge:** Avoid the chompers and help the zombie
        get to the sunflower."
      courseD_maze_until9_2019: "**Challenge:** Avoid the chompers and help the zombie
        get to the sunflower."
      courseD_maze_until_challenge1: Hiçbir ipuçları yok sadece meydan okuma. Zombiyi
        ayçiçeğine ulaştır.
      courseD_playLab_cond1: "To start our game, Pirate Pegleg (actor 1) needs to
        be able to get around in all directions.   Connect the blocks to the correct
        events to get Pegleg moving.  \n\n* * *\n\nHelp Pegleg gather the flags to
        solve this puzzle."
      courseD_playLab_cond1_2018: "To start our game, Pirate Pegleg (actor 1) needs
        to be able to get around in all directions.   Connect the blocks to the correct
        events to get Pegleg moving.  \n\n* * *\n\nHelp Pegleg gather the flags to
        solve this puzzle."
      courseD_playLab_cond2: "Time to add points!  \n\nEdit the code to give Pegleg
        (actor 1) a point when he makes it to the dragon (actor 2). "
      courseD_playLab_cond2_2018: "Time to add points!  \n\nEdit the code to give
        Pegleg (actor 1) a point when he makes it to the dragon (actor 2). "
      courseD_playLab_cond3: 'Use a `repeat forever` loop to make the dragon (actor
        2) change between random emotions every second.  '
      courseD_playLab_cond3_2018: 'Use a `repeat forever` loop to make the dragon
        (actor 2) change between random emotions every second.  '
      courseD_playLab_cond3a: Kod ekle böylece Pegleg ejderhaya ulaştığında _eğer_
        ejderha mutluysa iki puan alır. Aksi takdirde, puanına yalnızca bir puan eklemelisin.
      courseD_playLab_cond3a_2018: Kod ekle böylece Pegleg ejderhaya ulaştığında _eğer_
        ejderha mutluysa iki puan alır. Aksi takdirde, puanına yalnızca bir puan eklemelisin.
      courseD_playLab_cond4: |-
        This is about to get interesting!

        Add some code so that the ninja (actor 3) starts chasing Pegleg as soon as the game begins.  End the game as a loss if the ninja catches him.
      courseD_playLab_cond4_2018: |-
        This is about to get interesting!

        Add some code so that the ninja (actor 3) starts chasing Pegleg as soon as the game begins.  End the game as a loss if the ninja catches him.
      courseD_playLab_cond5: |-
        Now we need a way to win.

        Add a `repeat forever` loop that continuously checks **if** the score is greater than 5, then ends the game as a **win** when it is.
      courseD_playLab_cond5_2018: |-
        Now we need a way to win.

        Add a `repeat forever` loop that continuously checks **if** the score is greater than 5, then ends the game as a **win** when it is.
      courseD_playLab_cond6: |-
        Wow, this game is hard to win!

        Let's customize this game to make it more fun.  This challenge has two parts:

        * * *

        1.  Slow down the ninja (actor 3) before you set him to chase the pirate (actor 1).

        2.  Use a `repeat forever` loop to check to see if the pirate is in the "safe zone" beneath the line of octopuses (greater than 225 pixels down).  If he is, set the ninja to **flee** the pirate.  Otherwise, set the ninja to **chase** the pirate.
      courseD_playLab_cond6_2018: "Wow, this game is hard to win!\n\nLet's customize
        this game to make it more fun.  This challenge has two parts:\n\n* * *\n\n1.
        \ Slow down the ninja (actor 3) before you set him to chase the pirate (actor
        1).  \n\n2.  Use a `repeat forever` loop to check to see if the pirate is
        in the \"safe zone\" beneath the line of octopuses (greater than 225 pixels
        down).  If he is, set the ninja to **flee** the pirate.  Otherwise, set the
        ninja to **chase** the pirate.  "
      courseD_playLab_cond6a: "Korsanın 'güvenli bölge' de çok uzun kalmasını istemeyiz!
        \ \\\r\n\\\r\n`Eğer` deyiminin üzerine kod ekleyin böylece eğer korsan güvenli
        bölgedeyse, program bir saniye bekleyecek, sonra ahtapot hattının altında
        kaldığı sürece bir puan azalacak."
      courseD_playLab_cond6a_2018: "Korsanın 'güvenli bölge' de çok uzun kalmasını
        istemeyiz!  \\\r\n\\\r\n`Eğer` deyiminin üzerine kod ekleyin böylece eğer
        korsan güvenli bölgedeyse, program bir saniye bekleyecek, sonra ahtapot hattının
        altında kaldığı sürece bir puan azalacak."
      courseD_playLab_condFP_2018: |-
        Now, build your own game to show off to your friends!

        * * *

        You could:

        -   Have the pirate and ninja work together to get points from the octopus
        -   Have both octopuses follow the pirate, doing double damage to the ninja when they collide
        -   Have each character disappear when touched by the ninja
        -   Invent your own game!
      courseD_scrat_ramp1: Bu bulmaca için tüm blokların birlikte sürükleyin ve izlemek
        için "Çalıştır" ı tıklatın!
      courseD_scrat_ramp2: Bir ilave 'ileri' bloğundan sürükleyin, sonra çalıştığı
        zaman ' tüm blokları ekleyebilirsiniz.
      courseD_scrat_ramp3: "-   \"Bu domuz benim tüylerini  diken d\n    iken ediyor.\"
        \\* \\\r \\\r orada kuşun parçalanmasına sebep olacak bir blok var.  \\\r
        Onu geri araç kutusuna geri sürükle."
      courseD_scrat_ramp4: Scrat'in güvende olması için onu çatlak buzdan koru!
      courseD_scrat_ramp5: "-   Domuza ulaşmak için yolu takip edin!\" \\* \\\r \\\r
        TNT den kaçının."
      courseD_scrat_ramp6: "-   \"Sakin ol ve kötü domuzu bulmama yardım et. Aksi
        takdirde sinirleniyorum!\" \\* \\\r \\\r bir satırda birkaç blok varsa 'tekrarla'
        döngüsü içine taşıyın.  Bu daha az kod ile aynı şeyi yapmayı sağlar!"
      courseD_scrat_ramp7: Scrat'in meşe palamuduna ulaşmasını sağlayın!
      courseD_scrat_ramp8: "**Challenge:** Use what you've learned to get Scrat to
        the acorn!"
      courseE_aboutme_1: "![](https://images.code.org/93e1c04857ff781bb5c4cc76b15ed563-image-1557179820861.png)
        _\"Hello, world! My name is Rikki, and here are some things I'd to share about
        me!\"_\n\n**Free Play**: Rikki is using Sprite Lab to create an _interactive
        poster_ about herself that she can share on the web.  \n\nRikki has given
        you permission to check out her poster. You can even edit her code! \n\nPlay
        with Rikki's poster and code for a bit, then click **Finish**."
      courseE_aboutme_2: "![](https://images.code.org/2bae4bc7c7d59fac0cd4b1370d3c4a11-image-1557179992653.png)
        _\"Rikki here! I'll help you make a cool poster. First, click the Costumes
        tab!\"_\n\n1.  Click the **Costumes** tab at the top-left of your screen (next
        to **Code**). \n2.  Edit the starting costume, or add a new one that you like.
        \n3.  Change the sprite's costume to your own in the code below.\n4.  Click
        **Run** to see your sprite's new look!"
      courseE_aboutme_3: "![](https://images.code.org/2bae4bc7c7d59fac0cd4b1370d3c4a11-image-1557179992653.png)
        _\"Say something about yourself, and make sure it's SAFE!\"_\n\nUse <xml><block
        type=\"gamelab_spriteClicked\" block-text=\"the when sprite clicked event
        block\"></block></xml> and <xml><block type=\"gamelab_printText\" block-text=\"the
        print text block\"></block></xml> (in the `World` blocks category) to share
        information about yourself when your sprite is clicked! \n\n**Just be sure
        the information you share is SAFE.**\n\n* * *\n\n#### Examples of SAFE vs
        UNSAFE Information\n\n| SAFE                | UNSAFE                |\n| -------------------
        | --------------------- |\n| first name          | full name             |\n|
        favorite things     | home address          |\n| respectful opinions | phone
        number or email |"
      courseE_aboutme_4: |-
        ![](https://images.code.org/2bae4bc7c7d59fac0cd4b1370d3c4a11-image-1557179992653.png) _"Add more sprites to your poster! Don't forget to give them costumes!"_

        Add **at least two** other sprites to your poster. Give each sprite a unique costume!
      courseE_aboutme_5: |-
        ![](https://images.code.org/0c3ec1da3493c3e10f5ec714ef1670e3-image-1557185359875.png) _"Tell the world more about yourself through your new sprites!"_

        Make your other sprites print information when they are clicked. Be sure whatever you share is SAFE!
      courseE_aboutme_6: "![](https://images.code.org/4e9c4465463d0c061b2b47b23d5817ca-image-1557185863600.png)
        _\"Wow! Your poster is almost as cool as mine! Almost. \U0001F609\"_\n\nWhose
        world is this?! It's yours! \n\nSo keep going! Here are a few ideas to make
        your poster even better:\n\n-   Add a background! Choose a background that
        fits your poster.\n-   Add behaviors! Make each of your sprites react differently
        when clicked.\n-   Add more events! Use the other blocks in the `Events` blocks
        category."
      courseE_artist_concept1: "Recreate this image. \n\n-   The hexagons have sides
        of 50 pixels\n-   The hexagons are 100 pixels apart\n-   The pen widths of
        the hexagons are 1 pixel, 4 pixels, and 8 pixels."
      courseE_artist_concept1_2018: "Recreate this image. \n\n-   The hexagons have
        sides of 50 pixels\n-   The hexagons are 100 pixels apart\n-   The pen widths
        of the hexagons are 1 pixel, 4 pixels, and 8 pixels."
      courseE_artist_concept4: "Recreate this drawing. \n\nEach square has a side
        length of **20 pixels** and there are **15 squares per row**."
      courseE_artist_concept4_2018: "Recreate this drawing. \n\nEach square has a
        side length of **20 pixels** and there are **15 squares per row**."
      courseE_artist_concept_challenge1: "<img src=\"https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png\"
        width=\"200px\"/> \\\r \\\r şimdi bir meydan okuma!  \\\r \\\r burada sadece
        gösterilmiş olan blokları kullanan bir tasarımdır.  Deneme yanılma kullanmaktan
        çekinmeyin. \\\r \\\r tekrarlanan şekilson Bulmaca ile aynı,  İlk döngüde
        kullanılan uzunluk biraz daha küçük. "
      courseE_artist_concept_challenge1_2018: "<img src=\"https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png\"
        width=\"200px\"/> \\\r \\\r şimdi bir meydan okuma!  \\\r \\\r burada sadece
        gösterilmiş olan blokları kullanan bir tasarımdır.  Deneme yanılma kullanmaktan
        çekinmeyin. \\\r \\\r tekrarlanan şekilson Bulmaca ile aynı,  İlk döngüde
        kullanılan uzunluk biraz daha küçük. "
      courseE_artist_concept_challenge2: Aşağıdaki kodları kullanarak beş adet rüzgar
        gülü tasarımı oluştur.
      courseE_artist_concept_challenge2_2018: Aşağıdaki kodları kullanarak beş adet
        rüzgar gülü tasarımı oluştur.
      courseE_artist_functions1: |-
        _"Me zombie artist. Me love drawing!"_

        Help the zombie draw glasses using squares with sides of 100 pixels.\
        The bridge between the glasses is 75 pixels long.
      courseE_artist_functions10: |-
        This time, use lines of 8 hexagons with 25 pixel sides.

        -   To make each hexagon, repeat the side 6 times, turning 60 degrees.
        -   Jump 25 pixels between each hexagon.
        -   To draw a diamond, you will need to alternate between turning 60 degrees and 120 degrees.
      courseE_artist_functions10_2018: |-
        This time, use lines of 8 hexagons with 25 pixel sides.

        -   To make each hexagon, repeat the side 6 times, turning 60 degrees.
        -   Jump 25 pixels between each hexagon.
        -   To draw a diamond, you will need to alternate between turning 60 degrees and 120 degrees.
      courseE_artist_functions10_2019: |-
        This time, use lines of 8 hexagons with 25 pixel sides.

        -   To make each hexagon, repeat the side 6 times, turning 60 degrees.
        -   Jump 25 pixels between each hexagon.
        -   To draw a diamond, you will need to alternate between turning 60 degrees and 120 degrees.
      courseE_artist_functions1_copy: |-
        _"Me zombie artist. Me love drawing!"_

        Help the zombie draw glasses using squares with sides of 100 pixels.\
        The bridge between the glasses is 75 pixels long.
      courseE_artist_functions2: "Functions let you define new blocks! \n\nWe've moved
        the blocks needed for drawing a square into a function called `draw a square`.
        This time, use the `draw a square` function to create the glasses. \n\n* *
        *\n\nThe squares are 75 pixels apart."
      courseE_artist_functions2_2018: "Here is a function called `draw a square`.
        Use it to complete this drawing. \n\n* * *\n\nThe squares are 75 pixels apart."
      courseE_artist_functions2_2019: "Here is a function called `draw a square`.
        Use it to complete this drawing. \n\n* * *\n\nThe squares are 75 pixels apart."
      courseE_artist_functions2_copy: "Functions let you define new blocks! \n\nWe've
        moved the blocks needed for drawing a square into a function called `draw
        a square`. This time, use the `draw a square` function to create the glasses.
        \n\n* * *\n\nThe squares are 75 pixels apart."
      courseE_artist_functions3: "We will come back to functions shortly. Let's take
        a break to practice making this star. \n\nYou can make this drawing by adding
        a repeat block."
      courseE_artist_functions3_2018: |-
        Build a function that will create this star.

        * * *

        -   Each arm of the star is 25 pixels long
        -   You need to turn 45 degrees to get 8 arms
        -   It is okay to go forward and backward over the same arm
      courseE_artist_functions3_2019: |-
        Build a function that will create this star.

        * * *

        -   Each arm of the star is 25 pixels long
        -   You need to turn 45 degrees to get 8 arms
        -   It is okay to go forward and backward over the same arm
      courseE_artist_functions3_copy: "We will come back to functions shortly. Let's
        take a break to practice making this star. \n\nYou can make this drawing by
        adding a repeat block."
      courseE_artist_functions4: |-
        Now that you can draw a star, try drawing four stars!

        -   Each branch of the star is 25 pixels long
        -   Turn 45 degrees between branches
        -   Jump 100 pixels between each star
      courseE_artist_functions4_copy: |-
        Now that you can draw a star, try drawing four stars!

        -   Each branch of the star is 25 pixels long
        -   Turn 45 degrees between branches
        -   Jump 100 pixels between each star
      courseE_artist_functions5: |-
        When is drawing three stars harder than drawing four? When you also have to jump over the moon!

        Draw only those three stars to finish this puzzle.
      courseE_artist_functions5_2018: |-
        When is drawing three stars harder than drawing four? When you also have to jump over the moon!

        Draw only those three stars to finish this puzzle.

        * * *

        -   The jump between the first and second star is **200** pixels
        -   The jump between the second and third is **100** pixels
      courseE_artist_functions5_2019: |-
        When is drawing three stars harder than drawing four? When you also have to jump over the moon!

        Draw only those three stars to finish this puzzle.

        * * *

        -   The jump between the first and second star is **200** pixels
        -   The jump between the second and third is **100** pixels
      courseE_artist_functions5_copy: |-
        When is drawing three stars harder than drawing four? When you also have to jump over the moon!

        Draw only those three stars to finish this puzzle.
      courseE_artist_functions6: "You are doing great! \n\nMake this window by drawing
        a square, then turning 90 degrees before drawing another, and so on."
      courseE_artist_functions7: "Let's take the code for the window and add it to
        function `draw a window`. Now, we can call the function any time we need to
        draw a window without having to write the code again. \n\n![](https://images.code.org/615a5e93abdaffeed438a976a56fc1f5-image-1497998528859.gif)\n\nTry
        solving this puzzle by creating `draw a window` and calling it five times.
        Watch out for the door!\n\n-   The top windows are 50 pixels away from each
        other.  \n-   The bottom windows are 100 pixels below the top set."
      courseE_artist_functions7_2018: "Drawing all of these windows individually would
        be a pain!  \n\nTry solving this puzzle by creating `draw a window` and calling
        it five times. Watch out for the door!\n\n* * *\n\n-   Each window is made
        up of four **25** pixel squares.\n-   The top windows are a **100** pixel
        jump away from each other.  \n-   The bottom windows are a **150** pixel jump
        below the top set."
      courseE_artist_functions7_2019: "Drawing all of these windows individually would
        be a pain!  \n\nTry solving this puzzle by creating `draw a window` and calling
        it five times. Watch out for the door!\n\n* * *\n\n-   Each window is made
        up of four **25** pixel squares.\n-   The top windows are a **100** pixel
        jump away from each other.  \n-   The bottom windows are a **150** pixel jump
        below the top set."
      courseE_artist_functions8: |-
        **Challenge:** Did you know that you can call functions from _inside_ other functions?!

        Create as many functions as you think you need to make this drawing of 50 pixel squares.
      courseE_artist_functions8a_2018: |-
        _"Functions easy!"_

        We are going to build up to something fancy!  Start by creating a function for this square.
      courseE_artist_functions8a_2019: |-
        _"Functions easy!"_

        We are going to build up to something fancy!  Start by creating a function for this square.
      courseE_artist_functions8b_2018: |-
        _"Zombie get dizzy."_

        Call the `draw a square` function from inside your `draw a line of squares` function to make this even easier!

        * * *

        -   The squares are _50_ pixels apart.
      courseE_artist_functions8b_2019: |-
        _"Zombie get dizzy."_

        Call the `draw a square` function from inside your `draw a line of squares` function to make this even easier!

        * * *

        -   The squares are _50_ pixels apart.
      courseE_artist_functions8c_2018: Add one more function that creates this stack
        of staggered squares using the `draw a line of squares` function.
      courseE_artist_functions8c_2019: Add one more function that creates this stack
        of staggered squares using the `draw a line of squares` function.
      courseE_artist_functions9: "Create this image using the limited blocks provided.
        \n\n-   Each triangle has sides of **50 pixels**  \n-   To draw a diamond,
        you will need to alternate between turning **60 degrees and 120 degrees**."
      courseE_artist_functions9_2018: "**Challenge:** Create this image using the
        limited blocks provided. \n\n-   Each triangle has sides of **50 pixels**
        \ \n-   To draw a diamond, you will need to alternate between turning **60
        degrees and 120 degrees**."
      courseE_artist_functions9_2019: "**Challenge:** Create this image using the
        limited blocks provided. \n\n-   Each triangle has sides of **50 pixels**
        \ \n-   To draw a diamond, you will need to alternate between turning **60
        degrees and 120 degrees**."
      courseE_artist_functionsProj_2018: "**Inspiration:** Use what you've learned
        to make whatever you want!  \n\nCan you make something like this pinwheel?"
      courseE_artist_functionsProj_2019: "**Inspiration:** Use what you've learned
        to make whatever you want!  \n\nCan you make something like this pinwheel?"
      courseE_artist_functions_challenge1: Bir kez bir fonksiyonu tanımladıktan sonra
        onu tekrar tekrar çalıştırabilirsin - ne zaman ve nerede istersen! Nasıl çalıştığını
        görmek için bu kodu deneyin, sonra onu kendi etkileyici tasarımınızı yapmak
        için değiştirin!
      courseE_artist_functions_challenge1_2018: Bir kez bir fonksiyonu tanımladıktan
        sonra onu tekrar tekrar çalıştırabilirsin - ne zaman ve nerede istersen! Nasıl
        çalıştığını görmek için bu kodu deneyin, sonra onu kendi etkileyici tasarımınızı
        yapmak için değiştirin!
      courseE_artist_functions_challenge1_2019: Bir kez bir fonksiyonu tanımladıktan
        sonra onu tekrar tekrar çalıştırabilirsin - ne zaman ve nerede istersen! Nasıl
        çalıştığını görmek için bu kodu deneyin, sonra onu kendi etkileyici tasarımınızı
        yapmak için değiştirin!
      courseE_artist_functions_challenge2: "Sadece tuvalin köşeleri gibi daha önceden
        belirlediğin noktalara zıplamakla kalmaz, 'jump to' komutunu kullanarak tam
        olarak istediğin noktaya ulaşabilirsin. Nasıl çalıştığını görmek için aşağıdaki
        kodu dene, sonra kendi programını yap!\\\r\n<xml>\\\r\n  <block\ntype=\"jump_to_xy\">\\\r\n
        \   <title name=\"XPOS\">???</title>\\\r\n    <title\nname=\"YPOS\">???</title>\\\r\n
        \   </block></xml>"
      courseE_artist_functions_challenge2_2018: "Sadece tuvalin köşeleri gibi daha
        önceden belirlediğin noktalara zıplamakla kalmaz, 'jump to' komutunu kullanarak
        tam olarak istediğin noktaya ulaşabilirsin. Nasıl çalıştığını görmek için
        aşağıdaki kodu dene, sonra kendi programını yap!\\\r\n<xml>\\\r\n  <block\ntype=\"jump_to_xy\">\\\r\n
        \   <title name=\"XPOS\">???</title>\\\r\n    <title\nname=\"YPOS\">???</title>\\\r\n
        \   </block></xml>"
      courseE_artist_functions_challenge2_2019: "Sadece tuvalin köşeleri gibi daha
        önceden belirlediğin noktalara zıplamakla kalmaz, 'jump to' komutunu kullanarak
        tam olarak istediğin noktaya ulaşabilirsin. Nasıl çalıştığını görmek için
        aşağıdaki kodu dene, sonra kendi programını yap!\\\r\n<xml>\\\r\n  <block\ntype=\"jump_to_xy\">\\\r\n
        \   <title name=\"XPOS\">???</title>\\\r\n    <title\nname=\"YPOS\">???</title>\\\r\n
        \   </block></xml>"
      courseE_artist_functions_predict1: 'Here is a puzzle that uses a function that
        we have defined. '
      courseE_artist_functions_predict1_2018: 'Here is a puzzle that uses a function
        that we have defined. '
      courseE_artist_functions_predict1_2019: 'Here is a puzzle that uses a function
        that we have defined. '
      courseE_artist_functions_predict1_copy: 'Here is a puzzle that uses a function
        that we have defined. '
      courseE_artist_ramp8: "Harika!  Şimdi sanatçıyı kullanarak bir kare yapalım!
        \ Bloklar biraz farklıdır, ancak fikir aynıdır. \\\r <hr/> \\\r  200 piksel
        uzunlukta kenarlar vardır ve her açıyı yapmak için 90 derece döndürmek gerekir."
      courseE_artist_ramp8_2: "Harika!  Şimdi sanatçıyı kullanarak bir kare yapalım!
        \ Bloklar biraz farklıdır, ancak fikir aynıdır. \\\r <hr/> \\\r  200 piksel
        uzunlukta kenarlar vardır ve her açıyı yapmak için 90 derece döndürmek gerekir."
      courseE_artist_ramp9: "Bu üçgeni. \\\r çizmek için öğrendiklerini kullanın <hr/>
        \\\r her kenar100 piksel uzunluktadır. Her köşede 120 derece dönmek gerekir."
      courseE_artist_ramp9_2: "Bu üçgeni. \\\r çizmek için öğrendiklerini kullanın
        <hr/> \\\r her kenar100 piksel uzunluktadır. Her köşede 120 derece dönmek
        gerekir."
      courseE_bee_concept1: "_\"Can you BEE-lieve all of these flowers?\"_\n\nCollect
        all of the nectar from each flower. "
      courseE_bee_concept1_2018: "_\"Can you BEE-lieve all of these flowers?\"_\n\nCollect
        all of the nectar from each flower. "
      courseE_bee_concept2: "Help the bee make all of the honey.  \n\nYou can only
        make honey at a honeycomb, but you can check any space to see if there is
        a honeycomb."
      courseE_bee_concept2_2018: "Help the bee make all of the honey.  \n\nYou can
        only make honey at a honeycomb, but you can check any space to see if there
        is a honeycomb."
      courseE_bee_concept5: "Can you help the bee collect the nectar from the flowers?
        \n\nYou can only collect nectar from flowers, but you can check any space
        to see if there is a flower."
      courseE_bee_concept5_2018: "Can you help the bee collect the nectar from the
        flowers? \n\nYou can only collect nectar from flowers, but you can check any
        space to see if there is a flower."
      courseE_bee_functions10: "_\"Show me the HONEY!\"_\n\nSolve this puzzle by creating
        a function that causes the bee to: \n\n-   turn toward the branch in the path\n-
        \  move forward\n-   make all of the honey\n-   return to the main path \n-
        \  turn back to the original direction"
      courseE_bee_functions2: "Fonksiyonlar, bir görevi gerçekleştiren kod bloklarıdır.
        \ \\\r\n\\\r\n'2 nektar al' fonksiyonunu kullanarak tüm çiçeklerden nektarları
        topla."
      courseE_bee_functions3: Fonksiyonlar, bir görevi gerçekleştiren kod bloklarıdır.Bir
        seferde 5 nektar almak için ''5 al''fonksiyonunu kulllan.En ideal döngü bloğunu
        kullandığından emin ol.
      courseE_bee_functions4: "The `move and get nectar` function turns the bee, collects
        nectar, and then returns the bee to where it started.  \n\nUse the `move and
        get nectar` function to collect all of the nectar."
      courseE_bee_functions8: "**Challenge:** These flowers can have a different amount
        of nectar each time you run the puzzle.   \n\nCreate a function that collects
        all of the nectar from each flower."
      courseE_bee_functions_challenge1: Bu meydan okumada tek başınasın. Göründüğünden
        daha zor olabilir!
      courseE_farmer_functions1: |-
        _"Have we met before? I'm the harvester!"_

        Help the harvester get to the pumpkin and pick it.
      courseE_farmer_functions10a1_2018: "**Challenge:** Use everything that you've
        learned so far to solve this puzzle in 19 blocks or less!"
      courseE_farmer_functions10a1_2019: "**Challenge:** Use everything that you've
        learned so far to solve this puzzle in 19 blocks or less!"
      courseE_farmer_functions10b: Use your new function twice to solve this puzzle.
      courseE_farmer_functions11_predict: Figure out which function to use and which
        one to delete, then solve this puzzle!
      courseE_farmer_functions11_predict_2018: Figure out which function to use and
        which one to delete, then solve this puzzle!
      courseE_farmer_functions11_predict_2019: Figure out which function to use and
        which one to delete, then solve this puzzle!
      courseE_farmer_functions13_2018: |-
        Solve this puzzle in 23 blocks or less.

        * * *

        ##### Each sprout will either grow _one_ corn or nothing. To find the best solution, you will need to edit the functions directly.
      courseE_farmer_functions13_2019: |-
        Solve this puzzle in 23 blocks or less.

        * * *

        ##### Each sprout will either grow _one_ corn or nothing. To find the best solution, you will need to edit the functions directly.
      courseE_farmer_functions1_2018: |-
        _"Have we met before? I'm the harvester!"_

        Help the harvester get to the pumpkin and pick it.
      courseE_farmer_functions1_2019: |-
        _"Have we met before? I'm the harvester!"_

        Help the harvester get to the pumpkin and pick it.
      courseE_farmer_functions1a: |-
        _"Oooh, veggies are cropping up everywhere!"_

        Now help the harvester pick all of the corn on the way to the pumpkin at the end.

        * * *

        ##### Note: Every square on the path that leads to the pumpkin will either have _one_ corn or nothing.  You will need to use an `if` statement to check whether there is corn before you try to pick it!
      courseE_farmer_functions1a_2018: |-
        _"Oooh, veggies are cropping up everywhere!"_

        Now help the harvester pick all of the corn on the way to the pumpkin at the end.

        * * *

        ##### Note: Every square on the way to the pumpkin either has **1** corn or nothing at all.  Use the provided `check for corn` function to make sure you get everything.
      courseE_farmer_functions1a_2019: |-
        _"Oooh, veggies are cropping up everywhere!"_

        Now help the harvester pick all of the corn on the way to the pumpkin at the end.

        * * *

        ##### Note: Every square on the way to the pumpkin either has **1** corn or nothing at all.  Use the provided `check for corn` function to make sure you get everything.
      courseE_farmer_functions2b: |-
        Help the harvester pick the corn and pumpkins.

        * * *

        ##### Each sprout will either grow _one_ corn or nothing.
      courseE_farmer_functions2b_2018: |-
        Use the function to help the harvester pick the corn and pumpkins.

        * * *

        ##### Each sprout will either grow _one_ corn or nothing.
      courseE_farmer_functions2b_2019: |-
        Use the function to help the harvester pick the corn and pumpkins.

        * * *

        ##### Each sprout will either grow _one_ corn or nothing.
      courseE_farmer_functions2ba: "_\"Çok fonksiyonel hissediyorum!\"_\\\r\n\\\r\nBu
        bulmacadaki tekrarlayan kodları fark ettin mi? Hepsini döngünün içine yerleştiremeyiz
        ama fonksiyonları **kullanabiliriz.**\n  \\\r\n\\\r\nBu bulmaca için tekrarlayan
        \ kodları 'mısır ve kabak' (corn and pumpkin) isimli fonksiyona taşıdık. Şimdi
        bütün ihtiyacın olan küçük 'mısır ve kabak' (corn and pumpkin) **fonksiyon
        çağırma blokunu** ihtiyacın olan yere yerleştirmek. \\\r\n\\\r\n\\_\\_\\_\\\r\n\n#####
        Her filiz _bir_ mısır olarak büyüyecek yada hiçbir şey olmayacak."
      courseE_farmer_functions2ba_2018: "_\"Çok fonksiyonel hissediyorum!\"_\\\r\n\\\r\nBu
        bulmacadaki tekrarlayan kodları fark ettin mi? Hepsini döngünün içine yerleştiremeyiz
        ama fonksiyonları **kullanabiliriz.**\n  \\\r\n\\\r\nBu bulmaca için tekrarlayan
        \ kodları 'mısır ve kabak' (corn and pumpkin) isimli fonksiyona taşıdık. Şimdi
        bütün ihtiyacın olan küçük 'mısır ve kabak' (corn and pumpkin) **fonksiyon
        çağırma blokunu** ihtiyacın olan yere yerleştirmek. \\\r\n\\\r\n\\_\\_\\_\\\r\n\n#####
        Her filiz _bir_ mısır olarak büyüyecek yada hiçbir şey olmayacak."
      courseE_farmer_functions2ba_2019: "_\"Çok fonksiyonel hissediyorum!\"_\\\r\n\\\r\nBu
        bulmacadaki tekrarlayan kodları fark ettin mi? Hepsini döngünün içine yerleştiremeyiz
        ama fonksiyonları **kullanabiliriz.**\n  \\\r\n\\\r\nBu bulmaca için tekrarlayan
        \ kodları 'mısır ve kabak' (corn and pumpkin) isimli fonksiyona taşıdık. Şimdi
        bütün ihtiyacın olan küçük 'mısır ve kabak' (corn and pumpkin) **fonksiyon
        çağırma blokunu** ihtiyacın olan yere yerleştirmek. \\\r\n\\\r\n\\_\\_\\_\\\r\n\n#####
        Her filiz _bir_ mısır olarak büyüyecek yada hiçbir şey olmayacak."
      courseE_farmer_functions3c: "Now, fill-in the function yourself by pulling the
        blocks from the code and dropping them into the **function definition**.  \n\nDon't
        forget to add the little **function call** blocks to use the function in your
        program when you're done."
      courseE_farmer_functions3c1_2018: |-
        Did you notice that there was a lot of repeated code in that last puzzle?  We can save space by calling that code `pick along path` and using a new function to call the other functions!

        Use `pick along path` to solve this puzzle again using fewer blocks.
      courseE_farmer_functions3c1_2019: |-
        Did you notice that there was a lot of repeated code in that last puzzle?  We can save space by calling that code `pick along path` and using a new function to call the other functions!

        Use `pick along path` to solve this puzzle again using fewer blocks.
      courseE_farmer_functions3c_2018: Great!  Try your functions out on a longer
        path.
      courseE_farmer_functions3c_2019: Great!  Try your functions out on a longer
        path.
      courseE_farmer_functions4b: Bu bulmacayı çözmek için yeni fonksiyonu kullanın.
      courseE_farmer_functions5c: Your function will come in handy here.
      courseE_farmer_functions6c: |-
        _"Lettuce pick all of the produce!"_

        Now the sprouts can be either corn **or** lettuce.  What do you need to add to this program to check each sprout before you pick?

        * * *

        ##### Note: Each sprout will turn into either **one** corn or **one** lettuce.
      courseE_farmer_functions7a1_2018: |-
        _"Functions **lettuce** do more with less work!"_

        Create a function that sends the harvester down a square path to pick a single head of lettuce from the middle of each row.
      courseE_farmer_functions7a1_2019: |-
        _"Functions **lettuce** do more with less work!"_

        Create a function that sends the harvester down a square path to pick a single head of lettuce from the middle of each row.
      courseE_farmer_functions7b: "_\"This harvest is a-MAZE-ing!\"_\n\nHelp the harvester
        find her way down this confusing path and to the pumpkin by turning **left**
        at the corn and **right** at the lettuce.  \n\n_(Don't forget to collect all
        of the produce along the way!)_"
      courseE_farmer_functions8a1_2018: Try writing your function again. Is it still
        helpful?  How can you make it work for this puzzle?
      courseE_farmer_functions8a1_2019: Try writing your function again. Is it still
        helpful?  How can you make it work for this puzzle?
      courseE_farmer_functions8b: "**Challenge:** Not all corners are marked in this
        maze, that means that you will need to use your navigation code more than
        once to get where you need to go.  \n\nCan you figure out what you need to
        do?"
      courseE_farmer_functions9a1_2018: |-
        **This puzzle is a-MAZE-ing!**

        Is your function still helpful for this puzzle?
      courseE_farmer_functions9a1_2019: |-
        **This puzzle is a-MAZE-ing!**

        Is your function still helpful for this puzzle?
      courseE_farmer_functions9b: Bu bulmacaya iyice göz atın. Bu deseni çözebilir
        misiniz?
      courseE_farmer_ramp11a: "Amanın!  Marul demetleri çok yakın ve çiftçi kaç tane
        olduklarını bilmiyor! \\\r \\\r <hr/> \\\r \\\rYeni bir blok ekledik 'marul
        (olduğu) sürece'. Bu bloğu kullanın ve marul olduğu sürece toplayın"
      courseE_farmer_ramp11a_2018: "Amanın!  Marul demetleri çok yakın ve çiftçi kaç
        tane olduklarını bilmiyor! \\\r \\\r <hr/> \\\r \\\rYeni bir blok ekledik
        'marul (olduğu) sürece'. Bu bloğu kullanın ve marul olduğu sürece toplayın"
      courseE_farmer_ramp11a_2019: "Amanın!  Marul demetleri çok yakın ve çiftçi kaç
        tane olduklarını bilmiyor! \\\r \\\r <hr/> \\\r \\\rYeni bir blok ekledik
        'marul (olduğu) sürece'. Bu bloğu kullanın ve marul olduğu sürece toplayın"
      courseE_farmer_ramp11b: Let's try that again, but with more piles!
      courseE_farmer_ramp11b_2018: Let's try that again, but with more piles!
      courseE_farmer_ramp11b_2019: Let's try that again, but with more piles!
      courseE_farmer_ramp12_forswap: "Şimdi iç içe döngüleri kullanın ('tekrarla'
        ve 'sürece') ve bulmacayı çözün\\\r \\\r \\\r \\\r"
      courseE_farmer_ramp12_forswap_2018: "Şimdi iç içe döngüleri kullanın ('tekrarla'
        ve 'sürece') ve bulmacayı çözün\\\r \\\r \\\r \\\r"
      courseE_farmer_ramp12_forswap_2019: "Şimdi iç içe döngüleri kullanın ('tekrarla'
        ve 'sürece') ve bulmacayı çözün\\\r \\\r \\\r \\\r"
      courseE_farmer_ramp12b: Now the harvester needs to pick all of the lettuce.  Use
        `while there is lettuce` inside of a `repeat` loop to get it all!
      courseE_farmer_ramp12b_2018: Now the harvester needs to pick all of the lettuce.  Use
        `while there is lettuce` inside of a `repeat` loop to get it all!
      courseE_farmer_ramp12b_2019: Now the harvester needs to pick all of the lettuce.  Use
        `while there is lettuce` inside of a `repeat` loop to get it all!
      courseE_farmer_ramp12c: "Vay be!  Bu fidelere bak. Bazıları marul mazıları Mısıra
        dönecek.  'Eğer Mısır / değilse' bloğu ile  Mısır ise, Mısır al \\*\\* değilse
        \\*\\*maruldur ve marul al. \\\r \\\r \\\r \\\r"
      courseE_farmer_ramp12c_2018: "Marul şimdi sadece yolun sonundadır.\\\r\nBir
        marulun başına ulaşıncaya **kadar** yolun aşağısına inin,, ardından hala kalanlar
        **varken** onu toplamaya devam edin.  "
      courseE_farmer_ramp12c_2019: "Vay be!  Bu fidelere bak. Bazıları marul mazıları
        Mısıra dönecek.  'Eğer Mısır / değilse' bloğu ile  Mısır ise, Mısır al \\*\\*
        değilse \\*\\*maruldur ve marul al. \\\r \\\r \\\r \\\r"
      courseE_farmer_ramp12d: "Aynı teknik nektar ve bal ile de çalışıyor!  \\\r \\\r
        Bu bulutlara bak. Bazıları nektar bazıları balbulundurmakta.  'Eğer çiçek
        ise nektarı al \\*\\* değilse \\*\\* balı. \\\r \\\r \\\r \\\r"
      courseE_farmer_ramp12d_2018: "Marul bahçenin her tarafına dağılmış durumda.\\\r\nBir
        marulun başına ulaşıncaya **kadar** herbir yolun aşağısına inin,, ardından
        hala kalanlar **varken** onu toplamaya devam edin.  "
      courseE_farmer_ramp12d_2019: "Aynı teknik nektar ve bal ile de çalışıyor!  \\\r
        \\\r Bu bulutlara bak. Bazıları nektar bazıları balbulundurmakta.  'Eğer çiçek
        ise nektarı al \\*\\* değilse \\*\\* balı. \\\r \\\r \\\r \\\r"
      courseE_farmer_ramp12e: "Aynı teknik nektar ve bal ile de çalışıyor!  \\\r \\\r
        Bu bulutlara bak. Bazıları nektar bazıları balbulundurmakta.  'Eğer çiçek
        ise nektarı al \\*\\* değilse \\*\\* balı. \\\r \\\r \\\r \\\r"
      courseE_farmer_ramp12e_2018: "Aynı teknik nektar ve bal ile de çalışıyor!  \\\r
        \\\r Bu bulutlara bak. Bazıları nektar bazıları balbulundurmakta.  'Eğer çiçek
        ise nektarı al \\*\\* değilse \\*\\* balı. \\\r \\\r \\\r \\\r"
      courseE_farmer_ramp12e_2019: "Aynı teknik nektar ve bal ile de çalışıyor!  \\\r
        \\\r Bu bulutlara bak. Bazıları nektar bazıları balbulundurmakta.  'Eğer çiçek
        ise nektarı al \\*\\* değilse \\*\\* balı. \\\r \\\r \\\r \\\r"
      courseE_farmer_ramp12f: "\\*\\* Meydan Okuma **: Bütün bitkileri elde etmenin
        tek yolu, marula ulaşıncaya kadar ileri gitmek, sonra  \\*\\*eğer** sola giden
        bir yol varsa sola dönün. Aksi takdirde sağa dönün."
      courseE_farmer_ramp12f_2018: "\\*\\* Meydan Okuma **: Bütün bitkileri elde etmenin
        tek yolu, marula ulaşıncaya kadar ileri gitmek, sonra  \\*\\*eğer** sola giden
        bir yol varsa sola dönün. Aksi takdirde sağa dönün."
      courseE_farmer_ramp12f_2019: "\\*\\* Meydan Okuma **: Bütün bitkileri elde etmenin
        tek yolu, marula ulaşıncaya kadar ileri gitmek, sonra  \\*\\*eğer** sola giden
        bir yol varsa sola dönün. Aksi takdirde sağa dönün."
      courseE_farmer_ramp12g: Marula ulaşana kadar ilerle, sonra sola dön **eğer**
        sola doğru yol varsa. Aksi taktirde, sağa dön.
      courseE_farmer_ramp12g_2018: Marula ulaşana kadar ilerle, sonra sola dön **eğer**
        sola doğru yol varsa. Aksi taktirde, sağa dön.
      courseE_farmer_ramp12g_2019: Marula ulaşana kadar ilerle, sonra sola dön **eğer**
        sola doğru yol varsa. Aksi taktirde, sağa dön.
      courseE_playLab_challenge1: "-   **Sincaplar** **dinozorların** şehre indiğini
        görünce dehşete kapıldılar. Cesur **şövalye**onları paniklemekten kurtarabilir
        mi?\\*\\\r\n    \\\r\n    Burada sizin için önceden başlatılmış çeşitli oyunlar
        var! Nasıl çalıştığını görmek için oyna. \\\r\n    \\\r\n    \\\r\n    Yeterince
        puan aldığınıza ve bitirdiğinizde bir şeyler olmalı. Oyunun olması gerektiği
        gibi çalışması için 'oyun kazan' (win game) ve 'oyun kaybet' (lose game) fonksiyonlarına
        birkaç kod ekleyin. \\\r\n    Fikirler için ipucuna tıklayın!"
      courseE_playLab_scaffold1: "Ne kadar öğrendiğin hayret verici! Adım adım bir
        oyun hazırlayalım.\\\r\n\\\r\nAraç kutusunda yeni bloklar kullanarak, yeni
        bir arka plan seçin, ardından oyununuzda olabilecek bir oyuncu seçin."
      courseE_playLab_scaffold2: "Oyuncunuzu klavyenizdeki oklara göre hareket ettirmek
        için olay işleyicileri ve işlemler gibi blokları kullan.\\\r\n\\\r\nBu bulmacayı
        tamamlamak için oyuncuyu hedeflere götürün."
      courseE_playLab_scaffold3: "Oyununa biraz daha karakter katalım!\\\r\n\\\r\nDaha
        fazla karakter eklemek için `aktörü ayarla` bloğunu kullanın, sonra bu bulmacayı
        tamamlamak için hedefe ilerleyin."
      courseE_playLab_scaffold4: "Birden fazla karakter ve aktörlerin hareket ettirilmesi
        oyun için büyük bir başlangıçtır, ancak bunu gerçek bir oyun gibi hissettirmek
        için daha fazla şey yapmak zorundayız. Bir puan ekleyelim!\\\r\n\\\r\nSkoru
        değiştirmek için 'aktör dokunursa' gibi etkinlik bloklarını kullanın. Bu bulmacayı
        tamamlamak için 10 puan topla."
      courseE_playLab_scaffold5: İyi iş! Çalışan bir oyunun bütün temel bileşenlerine
        sahipsin. Şimdi oyunu oynamak istediğine emin olmak için biraz vakit geçir.
        Oyunu kazanmak ya da kaybetmek için bir yol ekle, sonra bu koşullardan birini
        yerine getirene kadar oyna.
      courseE_playLab_scaffold6: Bitirdin! Şimdi oyununuzu oynayabilir veya dostlarınızla
        ve sınıf arkadaşlarınızla paylaşabilirsiniz!
      courseF_artist_for1: "**Free Play:** Experiment with the `for` loop and the
        `counter` variable.  \n\nDrag out a few blocks and see what happens.  "
      courseF_artist_for10: |-
        **Free Play:** Try using the `counter` variable with other drawing elements to make magical images like this one.

        ![](https://images.code.org/5a4eec10a53aa78ad6b12fb5e48680f8-image-1497991505852.png)
      courseF_artist_for10_2018: |-
        **Free Play:** Try using the `counter` variable with other drawing elements to make magical images like this one.

        ![](https://images.code.org/5a4eec10a53aa78ad6b12fb5e48680f8-image-1497991505852.png)
      courseF_artist_for10_2019: |-
        **Free Play:** Try using the `counter` variable with other drawing elements to make magical images like this one.

        ![](https://images.code.org/5a4eec10a53aa78ad6b12fb5e48680f8-image-1497991505852.png)
      courseF_artist_for1_2018: "**Free Play:** Experiment with the `for` loop and
        the `counter` variable.  \n\nDrag out a few blocks and see what happens.  "
      courseF_artist_for1_2019: "**Free Play:** Experiment with the `for` loop and
        the `counter` variable.  \n\nDrag out a few blocks and see what happens.  "
      courseF_artist_for2: 50 pikselden 100 piksel kenarına çıkan bu üçgen yığını
        oluşturmak için bir \`for 'döngüsü içinde bir' tekrarlama 'döngüsü kullanın.
      courseF_artist_for2_2018: 50 pikselden 100 piksel kenarına çıkan bu üçgen yığını
        oluşturmak için bir \`for 'döngüsü içinde bir' tekrarlama 'döngüsü kullanın.
      courseF_artist_for2_2019: 50 pikselden 100 piksel kenarına çıkan bu üçgen yığını
        oluşturmak için bir \`for 'döngüsü içinde bir' tekrarlama 'döngüsü kullanın.
      courseF_artist_for3: 20 piksellik kenarından 200 piksellik kenarına kadar giden
        bu üçgenleri oluşturun, herbir üçgen sonuncudan 20 piksel daha büyüktür.
      courseF_artist_for3_2018: 20 piksellik kenarından 200 piksellik kenarına kadar
        giden bu üçgenleri oluşturun, herbir üçgen sonuncudan 20 piksel daha büyüktür.
      courseF_artist_for3_2019: 20 piksellik kenarından 200 piksellik kenarına kadar
        giden bu üçgenleri oluşturun, herbir üçgen sonuncudan 20 piksel daha büyüktür.
      courseF_artist_for5: "Son görüntünün kodundaki sadece küçük bir değişiklik bu
        çizimi yaratabilir. Bu değişikliğin ne olduğunu öğrenebilir misin?\\\r\n\\_\\_\\_\\\r\nİpucu:
        Bir şeyi kaldırmanız gerekiyor!"
      courseF_artist_for5_2018: "Son görüntünün kodundaki sadece küçük bir değişiklik
        bu çizimi yaratabilir. Bu değişikliğin ne olduğunu öğrenebilir misin?\\\r\n\\_\\_\\_\\\r\nİpucu:
        Bir şeyi kaldırmanız gerekiyor!"
      courseF_artist_for5_2019: "Son görüntünün kodundaki sadece küçük bir değişiklik
        bu çizimi yaratabilir. Bu değişikliğin ne olduğunu öğrenebilir misin?\\\r\n\\_\\_\\_\\\r\nİpucu:
        Bir şeyi kaldırmanız gerekiyor!"
      courseF_artist_for6: |-
        If you turn a little bit more or less than you normally would for a shape, it creates a neat effect.

        Recreate your code from the last level, but turn 89 degrees to create this twisted square spiral.
      courseF_artist_for6_2018: |-
        If you turn a little bit more or less than you normally would for a shape, it creates a neat effect.

        Recreate your code from the last level, but turn 89 degrees to create this twisted square spiral.
      courseF_artist_for6_2019: |-
        If you turn a little bit more or less than you normally would for a shape, it creates a neat effect.

        Recreate your code from the last level, but turn 89 degrees to create this twisted square spiral.
      courseF_artist_for7: Bir önceki aşamadaki koda üç ufak değişiklik yaparak bu
        çizimi yapabilirsin!
      courseF_artist_for7_2018: Bir önceki aşamadaki koda üç ufak değişiklik yaparak
        bu çizimi yapabilirsin!
      courseF_artist_for7_2019: Bir önceki aşamadaki koda üç ufak değişiklik yaparak
        bu çizimi yapabilirsin!
      courseF_artist_for9: |-
        **Inspiration:** Use the counter inside the `set alpha` block to get something like this faded center.\
        (This hexagon pattern was made using a 60 degree turn.)
      courseF_artist_for9_2018: |-
        **Inspiration:** Use the counter inside the `set alpha` block to get something like this faded center.\
        (This hexagon pattern was made using a 60 degree turn.)
      courseF_artist_for9_2019: |-
        **Inspiration:** Use the counter inside the `set alpha` block to get something like this faded center.\
        (This hexagon pattern was made using a 60 degree turn.)
      courseF_artist_for_challenge1: "Bu çizimi nasıl yeniden oluşturabileceğini kestirebiliyor
        musun?\\\r\n\\\r\n<img src=\"https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png\"\nwidth=\"350px\"/>\\\r"
      courseF_artist_for_challenge1_2018: "Bu çizimi nasıl yeniden oluşturabileceğini
        kestirebiliyor musun?\\\r\n\\\r\n<img src=\"https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png\"\nwidth=\"350px\"/>\\\r"
      courseF_artist_for_challenge1_2019: "Bu çizimi nasıl yeniden oluşturabileceğini
        kestirebiliyor musun?\\\r\n\\\r\n<img src=\"https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png\"\nwidth=\"350px\"/>\\\r"
      courseF_artist_for_challenge2: "Bu çizimi bir döngü ile nasıl yeniden oluşturabileceğini
        kestirebiliyor musun?\\\r\n\\\r\n<img src=\"https://images.code.org/b0d15d06465d645c5ca533e5da6387b3-image-1446075597132.36.04.png\"\nwidth=\"350px\"/>"
      courseF_artist_for_challenge2_2018: "Bu çizimi bir döngü ile nasıl yeniden oluşturabileceğini
        kestirebiliyor musun?\\\r\n\\\r\n<img src=\"https://images.code.org/b0d15d06465d645c5ca533e5da6387b3-image-1446075597132.36.04.png\"\nwidth=\"350px\"/>"
      courseF_artist_for_challenge2_2019: "Bu çizimi bir döngü ile nasıl yeniden oluşturabileceğini
        kestirebiliyor musun?\\\r\n\\\r\n<img src=\"https://images.code.org/b0d15d06465d645c5ca533e5da6387b3-image-1446075597132.36.04.png\"\nwidth=\"350px\"/>"
      courseF_artist_fwp1: Bugün, güçlü bir fonksiyon editörü deneyeceğiz. 'bir kare
        çiz' fonksiyonunu düzenle ve hataları bul.
      courseF_artist_fwp2: "'Uzunluğu' adında bir parametre için fonksiyonu düzenleyin.
        \ \\\r \\\r karenin kenarları 25 piksel daha büyük olmalıdır.  İlk karenin
        25 piksel kenarları vardır.'?? ' yerine doğru değeri koyun ve resmi çizin."
      courseF_artist_fwp2_predict1: "'Uzunluğu' adında bir parametre için fonksiyonu
        düzenleyin.  \\\r \\\r karenin kenarları 25 piksel daha büyük olmalıdır.  İlk
        karenin 25 piksel kenarları vardır.'?? ' yerine doğru değeri koyun ve resmi
        çizin."
      courseF_artist_fwp3: "Şimdi fonksyonu sıfırdan oluşturmayı deneyin!  \\\r \\\r
        'bir kare çiz' adında bir fonksiyonu oluşturun ve bu dört kutunun anahattı
        için kullanın.  \\\r 'uzunluğu' için bir parametre ekleyin! \\\r \\\r <hr/>,
        üst sağ köşeden başlayarak kutu genişlikleri  50, 100, 150 ve 200 pikseldir."
      courseF_artist_fwp4: "Harita!  Şimdi bu fonksiyona parametre eklemek için Düzenleye
        tıkla \\\r \\\rtüm şekillerin  kenar sayısını 100 piksel uzunluğundadır."
      courseF_artist_fwp5: "Son bulmacadaki fonksiyonu bu dizi şekilleri çizmek için
        kullanın.  \\\r \\\r \\\r üçgenin 21 piksel kena uzunluğu vardır aşağıdaki
        üçgen  öncekinden 7 piksel daha uzun kenara sahiptir.   \\\r Çarpma bloğu
        kullanın ve sadece bir foksiyon ile halledin. \\\r ile <hr/> \\\r 'çarpım'
        bloğu şuna benzer!] (<https://images.code.org/55e293447c6b26bbbcf29cda2036706b-image-1481322763779.png>)
        \\\r \\\r"
      courseF_artist_fwp6: "\\*\\* Meydan Okuma: \\*\\* Sipiral fonksiyonunu güncelleve
        'uzunluk' ve 'taraf' parametrelerini alsın kare 3 pikselden 90 piksel e gider.
        \\\r - altıgen iyine 3 pikselden 100 piksele gidiyor - üçgen 3 pikselden 105
        piksele gider."
      courseF_artist_fwp7: "Sprial kenar fonksiyonunu bitir ve merkezin minimum uzunluğunu
        sor. \\\r \\\r - Kare için minimum merkez 50 piksel \\\r En uzun tarafında
        200 piksel"
      courseF_artist_fwp8: "Nasıl yeni oluşturduğunuz işlevini kullanarak bu çizimi
        yapabilir misin? \\\r \\\r - kırmızı sarmal 50 den 200 pixelee - mavi sarmal
        25 den 125 pixele\\\r gidiyor - yeşil sarmal 100 den 300 pixelse\\\r gider"
      courseF_artist_fwp9: 'Serbest Zaman: Yazdığınız fonksiyonlar ve ektra birkaç
        tanesi burada. Harika bir şeyler çiz! Kalem ucu ile oyna be çizimin ne kadar
        farklı olabildiğini gör!'
      courseF_artist_fwp_challenge1: Bu programı çalıştırmayı deneyin ve ne olacağını
        görmek için değişiklikler yapın. Nasıl çalıştığını tahmin edebiliyor musun?
        (Ya da silin ve tamamen farklı bir şey ile değiştirin)
      courseF_artist_fwp_challenge2: "Bunu gibi bir resim çizmek için önceki bölümde
        öğrendiklerini kullan.\\\r\n\\\r\n\n-   Not: Kodların içine parametreleri
        dahil edersen daha basit hale gelir. \\*\\\r\n    \\\r\n    <br/>\\\r\n    <img
        src=\"https://images.code.org/d3d6a51fafdcc0a09a5c6b0e0f3c2b92-image-1446239805818.08.59.png\"\n
        \   width=\"300px\"/>\\\r\n    <br/>  "
      courseF_artist_variables10: "Here's your code from the last puzzle.  Try editing
        the variable in other ways.  \n\n-   What happens if you start out with `length`
        less than 150? \n-   What if you multiply your variable by 1.25 each time
        through?\n-   What will your code do if you turn 119 degrees?"
      courseF_artist_variables10_2018: "Here's your code from the last puzzle.  Try
        editing the variable in other ways.  \n\n-   What happens if you start out
        with `length` less than 150? \n-   What if you multiply your variable by 1.25
        each time through?\n-   What will your code do if you turn 119 degrees?"
      courseF_artist_variables10_2019: "Here's your code from the last puzzle.  Try
        editing the variable in other ways.  \n\n-   What happens if you start out
        with `length` less than 150? \n-   What if you multiply your variable by 1.25
        each time through?\n-   What will your code do if you turn 119 degrees?"
      courseF_artist_variables2: "Now use another loop to draw three of those triangles
        right next to each other.   \n\nYou can nest the code from your last puzzle
        inside."
      courseF_artist_variables2_2018: "Now use another loop to draw three of those
        triangles right next to each other.   \n\nYou can nest the code from your
        last puzzle inside."
      courseF_artist_variables2_2019: "Now use another loop to draw three of those
        triangles right next to each other.   \n\nYou can nest the code from your
        last puzzle inside."
      courseF_artist_variables3: "Before things get tricky, can you move the length
        of 50 into a variable so we can use it in the next few puzzles?  \n\n![expandable](https://images.code.org/73447d004093c6be8ab01a1358155f16-image-1498068386665.gif)"
      courseF_artist_variables3_2018: "Before things get tricky, can you move the
        length of 50 into a variable so we can use it in the next few puzzles?  \n\n![expandable](https://images.code.org/73447d004093c6be8ab01a1358155f16-image-1498068386665.gif)"
      courseF_artist_variables3_2019: "Before things get tricky, can you move the
        length of 50 into a variable so we can use it in the next few puzzles?  \n\n![expandable](https://images.code.org/73447d004093c6be8ab01a1358155f16-image-1498068386665.gif)"
      courseF_artist_variables4: Now, use the `length` variable to have the artist
        jump forward and down by `length` pixels between triangles.
      courseF_artist_variables4_2018: Now, use the `length` variable to have the artist
        jump forward and down by `length` pixels between triangles.
      courseF_artist_variables4_2019: Now, use the `length` variable to have the artist
        jump forward and down by `length` pixels between triangles.
      courseF_artist_variables6: "**OOPS!**  \n\nWe actually need the triangles to
        be 60 pixels wide, with 60 pixel jumps.  \n\nAren't you glad you're using
        a variable?"
      courseF_artist_variables6_2018: "**OOPS!**  \n\nWe actually need the triangles
        to be 60 pixels wide, with 60 pixel jumps.  \n\nAren't you glad you're using
        a variable?"
      courseF_artist_variables6_2019: "**OOPS!**  \n\nWe actually need the triangles
        to be 60 pixels wide, with 60 pixel jumps.  \n\nAren't you glad you're using
        a variable?"
      courseF_artist_variables6a: Use what you've learned to build this design where
        the squares have 80 pixel sides and the artist jumps 80 pixels over and down
        between each one.
      courseF_artist_variables6a_2018: Use what you've learned to build this design
        where the squares have 80 pixel sides and the artist jumps 80 pixels over
        and down between each one.
      courseF_artist_variables6a_2019: Use what you've learned to build this design
        where the squares have 80 pixel sides and the artist jumps 80 pixels over
        and down between each one.
      courseF_artist_variables7: "Let's start this section by drawing a triangle with
        150 pixel sides. \n\nBe sure to use the `length` variable and a repeat loop."
      courseF_artist_variables7_2018: "Let's start this section by drawing a triangle
        with 150 pixel sides. \n\nBe sure to use the `length` variable and a repeat
        loop."
      courseF_artist_variables7_2019: "Let's start this section by drawing a triangle
        with 150 pixel sides. \n\nBe sure to use the `length` variable and a repeat
        loop."
      courseF_artist_variables8: |-
        Rebuild the triangle code from the last puzzle, but this time use the `set length to` block to reset the `length` variable to `length`+10 at the end of each loop iteration.

        <xml>
        <block type="variables_set" inline="false">
                                <title name="VAR">length</title>
                                <value name="VALUE">
                                  <block type="math_arithmetic" inline="true">
                                    <title name="OP">ADD</title>
                                    <value name="A">
                                      <block type="variables_get">
                                        <title name="VAR">length</title>
                                      </block>
                                    </value>
                                    <value name="B">
                                      <block type="math_number">
                                        <title name="NUM">10</title>
                                      </block>
                                    </value>
                                  </block>
                                </value>
                              </block>
        </xml>

        The length of the first side of the triangle is 150 pixels.
      courseF_artist_variables8_2018: |-
        Rebuild the triangle code from the last puzzle, but this time use the `set length to` block to reset the `length` variable to `length`+10 at the end of each loop iteration.

        <xml>
        <block type="variables_set" inline="false">
                                <title name="VAR">length</title>
                                <value name="VALUE">
                                  <block type="math_arithmetic" inline="true">
                                    <title name="OP">ADD</title>
                                    <value name="A">
                                      <block type="variables_get">
                                        <title name="VAR">length</title>
                                      </block>
                                    </value>
                                    <value name="B">
                                      <block type="math_number">
                                        <title name="NUM">10</title>
                                      </block>
                                    </value>
                                  </block>
                                </value>
                              </block>
        </xml>

        The length of the first side of the triangle is 150 pixels.
      courseF_artist_variables8_2019: |-
        Rebuild the triangle code from the last puzzle, but this time use the `set length to` block to reset the `length` variable to `length`+10 at the end of each loop iteration.

        <xml>
        <block type="variables_set" inline="false">
                                <title name="VAR">length</title>
                                <value name="VALUE">
                                  <block type="math_arithmetic" inline="true">
                                    <title name="OP">ADD</title>
                                    <value name="A">
                                      <block type="variables_get">
                                        <title name="VAR">length</title>
                                      </block>
                                    </value>
                                    <value name="B">
                                      <block type="math_number">
                                        <title name="NUM">10</title>
                                      </block>
                                    </value>
                                  </block>
                                </value>
                              </block>
        </xml>

        The length of the first side of the triangle is 150 pixels.
      courseF_artist_variables9: "Time to make some art!  \n\nSee what happens when
        you repeat the code from the last puzzle **30** times instead of only 3!\n\nFeel
        free to make your lines any color or pattern for some extra zest."
      courseF_artist_variables9_2018: "Time to make some art!  \n\nSee what happens
        when you repeat the code from the last puzzle **30** times instead of only
        3!\n\nFeel free to make your lines any color or pattern for some extra zest."
      courseF_artist_variables9_2019: "Time to make some art!  \n\nSee what happens
        when you repeat the code from the last puzzle **30** times instead of only
        3!\n\nFeel free to make your lines any color or pattern for some extra zest."
      courseF_artist_variablesFP: "**Freeplay:** Take what you've learned and make
        your own drawing. \n\nHow can you use variables with squares, pentagons, or
        hexagons?"
      courseF_artist_variablesFP_2018: "**Freeplay:** Take what you've learned and
        make your own drawing. \n\nHow can you use variables with squares, pentagons,
        or hexagons?"
      courseF_artist_variablesFP_2019: "**Freeplay:** Take what you've learned and
        make your own drawing. \n\nHow can you use variables with squares, pentagons,
        or hexagons?"
      courseF_artist_variables_challenge1: Uzunluk (length) değişkeni oluşturup bu
        ilginç deseni oluşturmak için kullanabilir misin?
      courseF_artist_variables_challenge1_2018: Uzunluk (length) değişkeni oluşturup
        bu ilginç deseni oluşturmak için kullanabilir misin?
      courseF_artist_variables_challenge1_2019: Uzunluk (length) değişkeni oluşturup
        bu ilginç deseni oluşturmak için kullanabilir misin?
      courseF_artist_variables_challenge2: "<img src=\"https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png\"\nwidth=\"250px\"/>\\\r\n\\\r\nBöyle
        bir deseni oluşturmak için ihtiyacı olan her şeyi öğrendin! Bu bulmacanın
        zor olması gerekiyor. Çözümü bulana kadar çabalayabilir misin?"
      courseF_artist_variables_challenge2_2018: "<img src=\"https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png\"\nwidth=\"250px\"/>\\\r\n\\\r\nBöyle
        bir deseni oluşturmak için ihtiyacı olan her şeyi öğrendin! Bu bulmacanın
        zor olması gerekiyor. Çözümü bulana kadar çabalayabilir misin?"
      courseF_artist_variables_challenge2_2019: "<img src=\"https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png\"\nwidth=\"250px\"/>\\\r\n\\\r\nBöyle
        bir deseni oluşturmak için ihtiyacı olan her şeyi öğrendin! Bu bulmacanın
        zor olması gerekiyor. Çözümü bulana kadar çabalayabilir misin?"
      courseF_bee_conditionals10: "Her bir noktada ne olduğunu tam olarak bilebildiğinizde
        bile, şartlılar yardımcı olabilir!\\\r\n\\\r\nTüm nektarı toplayın ve balın
        tamamını yapın."
      courseF_bee_conditionals1_predict1: "-   \"Bu bulut görüşümü engelliyor!\" \\*
        \\\r \\\r bir çiçek bulut altında olup olmadığını kontrol edin. Eğer çiçek
        ise, nektar al."
      courseF_bee_conditionals2: "_\"Herhangi bir çiçek görmek için hava çok bulutlu!\"_\\\r\n\\\r\nNektarı
        almadan önce altında çiçek gizli mi diye her bulutun altını kontrol et. Eğer
        bulutun altında çiçek varsa, arının _bir defa_ nektar almaya ihtiyacı var.
        \\\r\n\\\r\nHatırla: Bütün bulutlar aynı şeyi gizlemiyor!"
      courseF_bee_conditionals3: Sadece çiçeklerden nektar toplayabilirsiniz, ancak
        bir çiçek olup olmadığını görmek için herhangi bir alanı kontrol edebilirsiniz.
        Bu bulutların herhangi birinin altında bir çiçek varsa, arı nektarı toplamaya
        **ilk defasında** ihtiyaç duyacaktır.
      courseF_bee_conditionals4: |-
        In this puzzle, we know that every flower has exactly one nectar, but the flowers aren't spaced evenly.

        Get all of the nectar using as few blocks as possible.
      courseF_bee_conditionals7_predict2: Bazen bulut çiçeği saklar bazende peteği.
        Eğer/değilse bloğu kullanarak çiçek ise nektar al değilse bal yap( bu durumda
        petektir).
      courseF_bee_conditionals8: "**Meydan Okuma:** Bu bulutların altında çiçek ya
        da petek olacak!\\\r\n\\\r\nEğer çiçek varsa bir defa nektarları topla. Yoksa,
        bir defa bal yap(çünkü petek var)."
      courseF_bee_for10: "**Challenge:** Take what you've learned about `for` loops
        and try to solve this problem. \n\nRemember: You may have to run through solutions
        multiple times before you figure out all of the steps."
      courseF_bee_for10_2018: "**Challenge:** Take what you've learned about `for`
        loops and try to solve this problem. \n\nRemember: You may have to run through
        solutions multiple times before you figure out all of the steps."
      courseF_bee_for10_2019: "**Challenge:** Take what you've learned about `for`
        loops and try to solve this problem. \n\nRemember: You may have to run through
        solutions multiple times before you figure out all of the steps."
      courseF_bee_for11: "If your loop is counting down, the increment is **subtracted**
        from your counter variable each time through. \n\nWhat should your increment
        be to collect 15, then 12, then 9, 6, 3 nectar?"
      courseF_bee_for11_2018: "If your loop is counting down, the increment is **subtracted**
        from your counter variable each time through. \n\nWhat should your increment
        be to collect 15, then 12, then 9, 6, 3 nectar?"
      courseF_bee_for11_2019: "If your loop is counting down, the increment is **subtracted**
        from your counter variable each time through. \n\nWhat should your increment
        be to collect 15, then 12, then 9, 6, 3 nectar?"
      courseF_bee_for2: |-
        Write the code to help the bee collect all of the nectar.

        You will need lots of blocks for this challenge, but we'll learn an easier way in the next puzzle.
      courseF_bee_for2_2018: |-
        Write the code to help the bee collect all of the nectar.

        You will need lots of blocks for this challenge, but we'll learn an easier way in the next puzzle.
      courseF_bee_for2_2019: |-
        Write the code to help the bee collect all of the nectar.

        You will need lots of blocks for this challenge, but we'll learn an easier way in the next puzzle.
      courseF_bee_for6: "You can also use a `for` loop to count down. \n\nTry gathering
        this nectar by counting down from **5** to **1** by **1**."
      courseF_bee_for6_2018: "You can also use a `for` loop to count down. \n\nTry
        gathering this nectar by counting down from **5** to **1** by **1**."
      courseF_bee_for6_2019: "You can also use a `for` loop to count down. \n\nTry
        gathering this nectar by counting down from **5** to **1** by **1**."
      courseF_bee_for7: |-
        The last number in your `for` loop is called the **"increment"**.  Each time the loop is run, the counter variable changes by the value of the **increment**.

        Try collecting these flowers using an **increment** of 2.
      courseF_bee_for7_2018: |-
        The last number in your `for` loop is called the **"increment"**.  Each time the loop is run, the counter variable changes by the value of the **increment**.

        Try collecting these flowers using an **increment** of 2.
      courseF_bee_for7_2019: |-
        The last number in your `for` loop is called the **"increment"**.  Each time the loop is run, the counter variable changes by the value of the **increment**.

        Try collecting these flowers using an **increment** of 2.
      courseF_bee_for8: "You've got this!  \n\nWhat should your **increment** be to
        collect 3, 6, 9, 12, 15 nectar?"
      courseF_bee_for8_2018: "You've got this!  \n\nWhat should your **increment**
        be to collect 3, 6, 9, 12, 15 nectar?"
      courseF_bee_for8_2019: "You've got this!  \n\nWhat should your **increment**
        be to collect 3, 6, 9, 12, 15 nectar?"
      courseF_bee_for9: "Now, let's combine the `counter` variable with a `math` block!
        \n\nHow can you use the `counter` variable to navigate this garden with the
        fewest number of blocks possible?"
      courseF_bee_for9_2018: "Now, let's combine the `counter` variable with a `math`
        block! \n\nHow can you use the `counter` variable to navigate this garden
        with the fewest number of blocks possible?"
      courseF_bee_for9_2019: "Now, let's combine the `counter` variable with a `math`
        block! \n\nHow can you use the `counter` variable to navigate this garden
        with the fewest number of blocks possible?"
      courseF_bee_for_challenge1: Bütün nektarı toplamak için bu döngüyü kullan. Sayaç
        kadar tekrar ettirmek için bir kaç aksiyon(actions) var.
      courseF_bee_for_challenge1_2018: Bütün nektarı toplamak için bu döngüyü kullan.
        Sayaç kadar tekrar ettirmek için bir kaç aksiyon(actions) var.
      courseF_bee_for_challenge1_2019: Bütün nektarı toplamak için bu döngüyü kullan.
        Sayaç kadar tekrar ettirmek için bir kaç aksiyon(actions) var.
      courseF_bee_for_challenge2: Mümkün olan en az blokla bu bulmacayı çöz.
      courseF_bee_for_challenge2_2018: Mümkün olan en az blokla bu bulmacayı çöz.
      courseF_bee_for_challenge2_2019: Mümkün olan en az blokla bu bulmacayı çöz.
      courseF_bee_functions2: "İşleri kolaylaştırmak için fonksiyonları öğrenme zamanı!\\\r\n\\\r\nBurada,
        yeni bir _fonksiyon editörü_ kullanacaksınız.  Bu editör fonksiyonunuzu düzenlerken
        ortaya çıkan ayrı bir penceredir. Çalışma alanında kodlama yaparken fonksiyonunuzdaki
        tüm kodu göremezsiniz, ama merak etmeyin...kodlarınız hala orada!  \\\r\n\\_\\_\\_\\\r\n\\\r\n
        Arı bir çiçekte olduğunda nektarı alan bu fonksiyonla alıştırma yapalım.  İçindeki
        kodu görmek için mavi \"düzenle\" butonuna tıklayın!\\\r\n\\\r\nHer çiçekteki
        nektarı toplamak için `sadece nektar al` fonksiyonunu kullanın."
      courseF_bee_functions3: '**Sadece** petek varsa biraz bal yapmak için fonksiyon
        yazma sırası sende. Bulmacayı çözmek amacıyla "only make honey" (sadece bal
        yap) fonksiyonunu yapmak için "edit" düğmesine tıkla.'
      courseF_bee_functions3a: "Her bulut bir çiçek veya petek gizleyebilir. Eğer
        çiçekse nektar alması değilse bal yapması için bir fonksiyon yaz.\\\r\n\\\r\nFonksiyonu
        bulmacayı çözmek için kullan!"
      courseF_bee_functions4: "Bir fonksiyonu başka bir fonksiyon _içinden_ çağırabileceğini
        biliyor musun?\\\r\n\\\r\n'move and check' (ilerle ve kontrol et) fonksiyonu
        içerisinde 'check nectar or honey' (bal mı nektar mı kontrol et) fonksiyonunu
        kullanarak arının dönmesine yardım et, hangi bulutun altındaysa git, sonra
        geriye git ve geriye dön!"
      courseF_bee_functions5a: Şimdi, 'move and check' (ilerle ve kontrol et) fonksiyonunu
        yaprak sağda yol olduğunda arıyı buluta götürsün, sonra fonksiyonu bulmacayı
        çözmek için kullan!
      courseF_bee_functions6: "_\"Bu labirent inanılmaz!\"_\\\r\n\\\r\nArının labirent
        boyunca çiçeklerden sola peteklerden sağa dönmesi için yardım etmek amacıyla
        kendi fonksiyonunu yap. Yol boyunca nektar toplamayı ve bal yapmayı unutma!\\\r"
      courseF_bee_functions7: "Bu labirenti çözmek için son bulmacadan fonksiyonu
        yeniden oluştur.\\\r\n\\\r\nPeteklerden sola ve çiçeklerden sağa dön.  \\\r\n**Not:**
        Bazı köşeler işaretsiz!"
      courseF_bee_functions8a: "Bu bulutun altında, bilinmeyen miktarda nektar veya
        petek ile bilinmeyen miktarda bal bulunduran bir çiçek olmalı. \\\r\n\\\r\nBunun
        da üstesinden gelebilecek bir program yazabilir misin?"
      courseF_bee_functionsPre7: "Şimdi bu labirenti çözmek için fonksiyonu oluştur.
        Sonuncudan farkı ne?\\\r\n\\\r\nPeteklerden sola ve çiçeklerden sağa dön.
        \ \\\r\n**Not:** Bazı köşeler işaretsiz!"
      courseF_bee_functions_challenge1: Bir yol var iken nektar ve bal toplayan yeni
        bir fonksiyon oluşturun. Fonksiyonu bulmacayı tamamlamak için kullanın!
      courseF_bee_functions_challenge2: Bulmacayı tamamlamak için öğrendiğin her şeyi
        kullan!
      courseF_bee_fwp1: Bulutlar altında çiçeklere bak ve herhangi bir nektar olup
        olmadığını kontrol edin.
      courseF_bee_fwp2: "İşte son bulmacayı  çözen kod.  \\\r Hadi bir fonksiyon içine
        koy, sonra nektarı  kontrol için fonkisyonu çağırın.  \\\r <hr/> \\\r bu şimdi
        garip bir adım gibi gelebilir ama yakında gerçekten yararlı olacak!"
      courseF_bee_fwp3: |-
        Fonksiyonu test etme zamanı.
        Nektarları toplamamızı kolaylaştırdımı görelim.
      courseF_bee_fwp4: "-   \"Fonksiyonlarınızın  durumu nasıl?\" \\* \\\r \\\r Bazı
        ayarlamalar yapmanız gerekir  'uzunluğu' parametresi eklemek için \"Düzenle\"
        seçeneğini tıklatın. Satır farklı uzunlukta olduğunda işe yarayacaktır."
      courseF_bee_fwp5: "-   \"Harikasın!\" \\* \\\r \\\r Hadi nektarı toplamak için
        bu fonksyonu kullanın."
      courseF_bee_fwp6: "Fonksiyonları diğer programlama öğeleri ile birleştirdiğinizde
        kod daha kısa ve daha verimli olacaktır.  \\\r <hr/> Bu bulmaca için kısa
        ve tatlı bir çözüm oluşturmak için hangi blokları kullanırdınız \\\r?"
      courseF_bee_fwp7: "\\*\\* Meydan Okuma: \\*\\* bir şey biraz farklı görünüyor.
        Fonksiyonu değiştirerek Bal da yapmasını sağlayın."
      courseF_bee_fwp_challenge1: Tüm Mısır toplamak için fonksiyon içinde bununla
        say döngüsü kullanın. Aynı bununla say döngüsünü 'uzunluk' parametresini kullanarak
        farklı maksimum değerler için kullanabilirsiniz.
      courseF_bee_fwp_challenge2: "Son bir final testinin üstesinden gelebilecek misin
        görelim! Elindeki her şeyi ver!\\\r\n\\\r\nSatırdaki tüm sebzeleri toplamak
        için şununla say(for) döngüsünü fonksiyon içinde kullanın. Bununla say döngüsü
        uzunluk(length) parametresini kullanarak farklı en büyük değerleri saymasını
        sağla. Programınızı olabildiğince kısa tutmak için fonksiyon dışına da bir
        bununla say(for) döngüsü yerleştirin.\\\r\n\\\r\nİyi Şanslar!"
      courseF_bee_variables_3_2018: |-
        _"Such an a-MAZE-ing garden!"_

        In this puzzle, each patch needs the variable to be one less than the patch before. Subtract one from the variable each time through the loop if you want to use the same function to solve this level.
      courseF_bee_variables_3_2019: |-
        _"Such an a-MAZE-ing garden!"_

        In this puzzle, each patch needs the variable to be one less than the patch before. Subtract one from the variable each time through the loop if you want to use the same function to solve this level.
      courseF_bee_variables_4_2018: |-
        "Un-BEE-lievable!"

        Edit the code to make it work for this puzzle.
      courseF_bee_variables_4_2019: |-
        "Let's keep going!"

        Edit the code to make it work for this puzzle.
      courseF_playlab_variables1a: "Variables can be used to store text that you want
        to use later.  \n\nHave Kiki, the soccer player,  scream \"Goal!\" by assigning
        that text to the `shout` variable."
      courseF_playlab_variables2b: "Metin parçalarıyla değişkenleri karıştırarak cümleleri
        daha ilginç hale getirebiliriz.\\\r\n\\\r\n'join' blokunun içinde boş bir
        yuvaya yerleştirerek cümlenin ortasına 'color' (renk) değişkeni ekle."
      courseF_playlab_variables3b_josh: 'Yaşın ''12'' olarak kullanılması gereken
        her yerde ''A1'' değişkenini kullanarak Kiki''nin Brian ile sohbetine yardım
        et. '
      courseF_playlab_variables4b: "Now, Pirate Pegleg has some questions for Brian.\n\nThis
        code uses an `ask` block, so you can type Brian's answers after you click
        \"Run\". \n\nPut the variables in the correct places to create this conversation."
      courseF_playlab_variables5c: "'ask' (sor) blokuyla eğer (if) ifadesini birleştirerek
        bir oyun yapalım!\\\r\n\\\r\nKorsan Pegleg sana bir soru soracak. Doğru rengi
        girdiğini kontrol etmek için 'answer' (cevap) değişkeninin bir kopyası eğer(if)
        ifadesinin üzerine sürükle."
      courseF_playlab_variables6c: "Bu bölümün geri kalan kısmında, sizin kontrolünüzde
        olan bir oyun oluşturmak için çoklu 'ask' (sor) blokları ve eğer/değilse (if/else)
        ifadeleri kullanacağız!\\\r\n\\\r\n\"codename\" değişkeni hatırlayabileceğiniz
        bir kelime olarak belirleyerek başla. Sonra, kullanıcıdan kod adını almak
        için 'ask' blokunu kullan. Kullanıcının girdiği kod adı ile senin belirlediğinin
        eşleştiğini kontrol etmek için eğer/değilse (if/else) blokuna ihtiyacın var.\\\r\n\\\r\n\\\r\n\\\r"
      courseF_playlab_variables7b: "Time to make your own project!  \n\nCreate some
        questions and weave the answers together into your very own story.\n\nIf you
        need ideas, click the hints icon."
      courseF_playlab_variables7c: "Başka bir 'ask' blokunu kullanıcıya rengi tahmin
        etmesi  için kullan.\\\r\n\\\r\nSenin kod adını girenlerin oyunu kazanması
        ama başka koda adı girenlerin oyunu kaybetmesi için eğer/değilse ifadesini
        kullanmaya devam et.\\\r\n\\\r\n\\\r\n\\\r"
      courseF_playlab_variables8c: "Kod adı ve renk sorularına verilen cevapları birleştirerek
        kazan/kaybet mesajlarını daha kişisel hale getirmek amacıyla 'join' blokunu
        kullan.\\\r\n\\\r\n\\\r"
      courseF_playlab_variables_challenge1: Bu blokları aktörün tak-tak şakasını paylaşmasını
        sağlamak için kullan. Vurucu cümleyi değiştirin ve kendi şakanızı kurgulayın!
      courseF_playlab_variables_challenge2: "Şimdi etiket oyunu zamanı! Kediye etiketleme
        2 puan getirir. Pengueni etiketleme 3 puan getirir. Kazanmak için 10 puan
        topla!\\\r\nama dikkatli ol, ne zaman kedi ve penguen birbirini etiketler,
        puanı onlar alır\\\r\n\\\r\n<strong>\\\r\nOyunu açıklandığı gibi yapmak için
        gerekli blokları ekle. \\\r\n\n-   Köpeği yön ok tuşlarını kullanarak nasıl
        tüm yönlerde ilerleteceksin?  \\\r\n-   Köpek, kedi veya pengueni etiketlediğinde
        nasıl puan ekleyeceksin? \\\r\n-   Kedi penguen dokunduğunda nasıl puan çıkaracaksın?\\\r\n
        \   </strong>\\\r\n    \\\r\n    <hr/>\r\n    \r"
      coursea_maze_ramp1_2018: To get the bird to the pig, snap the <xml><block type="maze_moveEast"/></xml>
        block to the bottom of the <xml><block type="when_run"/></xml> block, then
        press "▶ Run"!
      coursea_maze_ramp1_2019: To get the bird to the pig, snap the <xml><block type="maze_moveEast"
        block-text="move east"/></xml> block to the bottom of the <xml><block type="when_run"
        block-text="when run"/></xml> block, then press "▶ Run"!
      csd U3 conditional statements video_2019: |-
        ## Question to Consider

        -   When would you want to use an if statement?
      csd u5 recommender sample: "# Sample App\n\nHere is an example of an app that
        uses data to help the user solve a problem.  With a partner, play through
        the app a few times to see how it works.\n\nDiscuss the following questions
        with your partner:\n\n-   What choice does the app help the user to make?
        \n-   What data does it use to make that recommendation?\n-   How do you think
        the creators of the app decided on the algorithm that they use to make the
        choice?"
      csd u5 recommender sample_2019: "# Sample App\n\nHere is an example of an app
        that uses data to help the user solve a problem.  With a partner, play through
        the app a few times to see how it works.\n\nDiscuss the following questions
        with your partner:\n\n-   What choice does the app help the user to make?
        \n-   What data does it use to make that recommendation?\n-   How do you think
        the creators of the app decided on the algorithm that they use to make the
        choice?"
      frozen circle: Çember özel bir şekildir. Bir çember çizmek için soru işareti
        yerine kaç gelmesi gerektiğini bulabilir misiniz?
      frozen circle function: 10 tane üst üste çember oluşturmak için "Çember oluştur"
        yani "Create a circle"bloğunu kullanın. Çemberler arasında ileri zıplamayı
        unutmayın.
      frozen circle function in circle: Şimdi herbirini çizdikten sonra 18 derece
        bırakacağınız 20 tane çember oluşturun.
      frozen circle function with parameter: '"Çember oluştur" "create circle" bloğuyla
        farklı büyüklüklerde çemberler oluşturabilirsiniz. Bunu 5 birim ve 10 birimlik
        çemberler çizmek için kullanır mısınız?'
      frozen cross: Bu komutların dışına "Tekrarla" bloğu koyarak artı işareti yapabilir
        misin? Elsa'nın ileri ve geri hareket edebildiğini fark ettiniz mi?
      frozen cross rotate: Şimdi, bu işlemi 10 kez deneyerek tekrarlayınız. Her bir
        çizgi arasını dönmek için kaç dereceye ihtiyacınız var?
      frozen cross rotate dense: 'Bu işlemi 90 kez tekrarlayalım! Kaç kere de 90''dan
        360''a varılır? İpucu: cevabı gerçekten çok küçük bir sayı.'
      frozen diamond: '"Tekrarla" bloğunu bir paralelkenar oluşturmak için kullanın.
        Bir dikdörtgen gibi ama farklı açıları vardır. 4 tane 90 derecelik açı yerine
        iki tane 60 derece ve iki tane 120 derece açı vardır.'
      frozen diamond mini snowflake: Her kar tanesinin birbirinden farklı olduğunu
        biliyor muydunuz? "Tekrarla" bloğunu kullarak, bir paralelkenarı 4 kez, her
        bir paralel kenar arasında 90 derece olacak şekilde sağa doğru döndürerek
        yeni bir kar tanesi oluşturalım.
      frozen diamond snowflake: Şimdi, tekrarla bloğunu kullanarak yeni kar taneleri
        oluşturalım. Tekrarla bloğu ile 10 tane paralelkenar çizelim her paralelkenar
        çizildikten sonra sağa doğru 36 derece dönelim.
      frozen freeplay: Resmen bir usta sanatçı haline geldiniz! Kış harikalar diyarı
        yaratın.
      frozen perpendicular: Şimdi bakalım birbirine 90 derecelik açı yapan iki çizgiyi
        nasıl oluşturacağız. Bunun için "Dön" ve "İlerle" bloklarını kullanmanız gerekecek.
      frozen snowflake branch: Üç tane dal oluşturmak için "Kar taneciği dalı oluştur"
        bloğunu deneyin gitgide kar taneciğine benziyor.
      frozen snowflake full: Şimdi bunu kar taneciği yapmak için 8 kere tekrar edin!
      frozen snowflower: Karmaşık kar tanecikleri aslında basit şekillerle oluşturulur.
        Bu modeli 5 birim uzunlukta 5 çember ve 10 birim uzunluktaki 5 çember ile
        oluşturabilir misiniz?
      frozen square iterative: Karenin yarısı yapmışız gibi görünüyor. Bir kare oluşturmak
        için 4 satırı bir araya getirelim.
      frozen square loop: Merhaba, ben Arendelle'den Anna! Haydi "Tekrarla" bloğunu
        kullanarak daha az blok kullanarak kare yapalım. Bir kare yapmak için kaç
        kere (???) "Tekrar" yapmak gerekir?
      frozen square loop 3x: Haydi her birinin ardından dönerek, 3 tane kare oluşturalım.
        Her bir karenin ardından 120 derece dönmem gerektiğine emin ol.
      frozen square snowflake: '"Tekrarla" bloğuyla 10 kare çizerek ve her bir karenin
        arasında "Dönme" bloğuyla 36 derece dönerek bir kar tanesi oluşturabilir misin?'
      grade2_collector_10: "You're almost done!  \n\nCollect as many pieces of treasure
        as you can to finish the stage!"
      grade2_collector_10_2018: "You're almost done!  \n\nCollect as many pieces of
        treasure as you can to finish the stage!"
      grade2_collector_10_2019: "You're almost done!  \n\nCollect as many pieces of
        treasure as you can to finish the stage!"
      grade2_collector_A: Help Laurel collect all of the treasure.
      grade2_collector_A_2018: Help Laurel collect all of the treasure.
      grade2_collector_A_2019: Help Laurel collect all of the treasure.
      grade5_artist_variables_triangles1: "Let's draw an equilateral triangle. \n\nIt
        has to be exactly 50 pixels long on each side."
      grade5_artist_variables_triangles1_2018: "Let's draw an equilateral triangle.
        \n\nIt has to be exactly 50 pixels long on each side."
      grade5_artist_variables_triangles1_2019: "Let's draw an equilateral triangle.
        \n\nIt has to be exactly 50 pixels long on each side."
      grade5_pixelation: "# Make your own image of any size\n\n![](https://images.code.org/01c15fed4f1a2c6c3af531edc35e736e-image-1439596066108.png)\n![](https://images.code.org/24efcaa184d1fc852f37c32911b3b87c-image-1439596070178.png)\n![](https://images.code.org/c9a5d0fd5ba445b7f6b5744e08b50e49-image-1439596071878.png)\n![](https://images.code.org/f14e1b8dd722b0ca5bc54fa96b34f2eb-image-1439596074236.png)\n![](https://images.code.org/fe938c0c16453b9d461b4023098079df-image-1439596075744.png)\n![](https://images.code.org/02c88a7da51289b2f2d1f64bd8c97b28-image-1439596077514.png)\n![](https://images.code.org/309e3157dcfd91956181007f483f8e58-image-1439596079084.png)\n\n**Directions:**\n\n-
        \  Encode an image of anything you like using `binary`.\n-   The binary language
        will be represented with `0` and `1` only.\n-   You might want to do some
        planning and sketching with graph paper first. \n-   Depict something, perhaps
        your name written out, your initials, an icon or logo of some sort.\n-   Get
        creative! The image doesn't have to be a perfect square, it can be long and
        skinny."
      iceage_click_hello: "Sid' e tıkladığında, arkadaşlarına seslenmesine yardımcı
        olur musun?  \\\r\n\\\r\nTamamladığında, oynamak için \"Çalıştır\" a bas.
        \ Kodun çalıştığını görmek için Sid' e tıkla!"
      iceage_free_play: "Kendi oyununu ya da hikayeni yaratma zamanı!  \\\r\n\\\r\nTamamladığın
        zaman, arkadaşlarının kendi telefon, tablet ya da bilgisayarlarında oyununu
        denemelerine izin vermek için \"Bitir\" butonuna tıkla!\\\r\nNe yapacağını
        bilmiyor musun? Ayrıntılar için ipuçlarına tıkla."
      iceage_hello1: "Sid (1. aktör) herkesi yeni bir macera için bir araya getirmek
        istiyor. 'söyle' bloğunu sürükleyip 'çalıştığında' olayının altına bağlayarak
        Sid'in \"Merhaba!\" demesine yardımcı olabilir misiniz? \\\r\n\\\r\nİçine
        \n\"Merhaba!\" yazmayı unutmayın!"
      iceage_hello2: Manny (aktör 1), Sid (aktör 2) ' i buldu ve onu bir maceraya
        davet etmek istiyor. `Aktör ___ söyle` bloğunu iki kez kullanarak onların
        birbirleriyle selamlaşmalarına yardımcı ol.
      iceage_move_events: "Scrat hâlâ meşe palamutlarını arıyor!\n\\\r\nHerbir olaya
        bir 'hareket aktörü 1' bloğu ekleyerek ve herbir ok tuşu için çalısıp, yön
        değiştirerek onun dönüp dolaşmasına yardımcı olun.\\\r\nİşiniz bittiğinde,
        \"Çalıştır\" ı tıklayın ve tüm meşe palamutlarını toplamayı deneyin."
      iceage_move_to_actor: Diego (actor 1) is searching for Manny (actor 2). Can
        you help bring the two together? Connect a block to the `when actor touches`
        event to play a sound when they find each other.
      iceage_move_to_flag: Scrat meşe palamudunu arıyor! Son 200 pikseli hareket ettirerek
        ona yardımcı olur musun?
      iceage_repeat: "'Sürekli tekrarla' bloğu kodun devamlı çalışmasını sağlar. Granny'
        nin sağa ve sola tekrar tekrar hareket ederek bazı alıştırmalar yapmasına
        yardımcı olmak için kodlarınızı 'sürekli tekrarla' bloğunun içine koyabilir
        misin?"
      iceage_sound_and_points: "Here is your code from the last puzzle, as well as
        the code to move Granny left and right. \nCan you finish the program to make
        it so that you both **play a sound** and **score a point** when Sid and Granny
        collide? \nPress \"Run\" to play the game."
      iceage_throw_hearts: "Sid büyükannesi Granny' nin onu sevdiğini bilmesini istiyor.
        \  \\\r\n\\\r\nSid (aktör 1)' in,  Granny (aktör 2)' ye kalpler fırlatması
        için `aktör __ fırlat` komutunu kullanın! \\\r\nKalpler Granny' ye çarptığında,
        Granny' nin modunu mutlu olarak ayarlayın."
      iceage_warn_ice_age: "Herkesin daha hızlı olması gerekiyor çünkü kar fırtınası
        geliyor! \\\r\nSahneyi buzlu bir arka planla değiştir ve Sid (actor 1) ' in
        hızını arttır.\\\r\n\"Çalıştır\" a bas ve Sid' i, Diego' yu uyarması için
        ona doğru hareket ettir."
      mike3bit: "# 3-Bit Color\n\n**Directions:**\n\n-   We start you with the 4x2
        image Maddie was creating, but we've left out the last few pixels. \n-   Finish
        off the image by figuring out which colors are missing and encoding them."
      mike3bitbird: "# 3-Bit Color\n\nHere's an example of an image made with 3-bit
        color. Try changing it to understand how it works. \n\n_If you want to reset
        the image, press \"Start Over\"._"
      mike3bitfreeplay: |-
        # 3-Bit Color

        You have one last chance to experiment and get creative with the pixelation widget. Make something awesome and share it with your classmates!

        -   _Hint:_ You can copy and paste the value of a pixel to use it repeatedly.
      mike3bitmario: "# 3-Bit Color\n\n**Challenge:** \n\nA careless binary coder
        typed in ONE extra 0 or 1 somewhere within this image's data. The extra bit
        that is causing Mario to glitch out! \n\nDelete the extra bit to restore Mario
        back to normal!\n\n![](<https://images.code.org/8b7c17ba204a1a4d33e1bd6de7f01d76-image-1477306657312.54.57
        AM.png>)"
      ramp_artist_loops1: "What a lovely day!  \n\nHelp the Artist cover his flowers
        before the winter by moving forward by 60 pixels."
      ramp_artist_loops1_2018: "What a lovely day!  \n\nHelp the Artist cover his
        flowers before the winter by moving forward by 60 pixels."
      ramp_artist_loops1_2019: "What a lovely day!  \n\nHelp the Artist cover his
        flowers before the winter by moving forward by 60 pixels."
      ramp_artist_loops2: Her hareket arasında rasgele bir renk değiştirip, bu adımı
        beş kez tekrarlayarak biraz güzellik katın.
      ramp_artist_loops2_2018: Her hareket arasında rasgele bir renk değiştirip, bu
        adımı beş kez tekrarlayarak biraz güzellik katın.
      ramp_artist_loops2_2019: Her hareket arasında rasgele bir renk değiştirip, bu
        adımı beş kez tekrarlayarak biraz güzellik katın.
      ramp_artist_loops3: "Renkli çizgiyi tekrar 5 kere çizin, \nbu sefer bir 'tekrarla'
        döngüsü kullanarak."
      ramp_artist_loops3_2018: "Renkli çizgiyi tekrar 5 kere çizin, \nbu sefer bir
        'tekrarla' döngüsü kullanarak."
      ramp_artist_loops3_2019: "Renkli çizgiyi tekrar 5 kere çizin, \nbu sefer bir
        'tekrarla' döngüsü kullanarak."
      ramp_artist_loops4: Diğer her şey döngünün içine girdikten sonra 72 derece sağa
        dön eklediğinde ne olur?
      ramp_artist_loops4_2018: Diğer her şey döngünün içine girdikten sonra 72 derece
        sağa dön eklediğinde ne olur?
      ramp_artist_loops4_2019: Diğer her şey döngünün içine girdikten sonra 72 derece
        sağa dön eklediğinde ne olur?
      ramp_artist_loops5: "Döngüler kesinlikle kod yazmayı daha kolay hale getirir!\nBu
        merdiveni çizmek için döngüleri kullanın.\n\n-   Her basamak 50 piksel uzunluğunda
        ve 50 \n    piksel yüksekliğindedir\n-   Her yönde 90 derece dönmeniz gerekecek"
      ramp_artist_loops5_2018: "Döngüler kesinlikle kod yazmayı daha kolay hale getirir!\nBu
        merdiveni çizmek için döngüleri kullanın.\n\n-   Her basamak 50 piksel uzunluğunda
        ve 50 \n    piksel yüksekliğindedir\n-   Her yönde 90 derece dönmeniz gerekecek"
      ramp_artist_loops5_2019: "Döngüler kesinlikle kod yazmayı daha kolay hale getirir!\nBu
        merdiveni çizmek için döngüleri kullanın.\n\n-   Her basamak 50 piksel uzunluğunda
        ve 50 \n    piksel yüksekliğindedir\n-   Her yönde 90 derece dönmeniz gerekecek"
      ramp_artist_loops6: |-
        This staircase is much bigger, but it takes the same amount of code as the last puzzle!

        Fix this loop to complete the puzzle.
      ramp_artist_loops6_2018: |-
        This staircase is much bigger, but it takes the same amount of code as the last puzzle!

        Fix this loop to complete the puzzle.
      ramp_artist_loops6_2019: |-
        This staircase is much bigger, but it takes the same amount of code as the last puzzle!

        Fix this loop to complete the puzzle.
      ramp_artist_loops7: Tekrarlayan deseni bulun ve kodu daha kısa yapın!
      ramp_artist_loops7_2018: Tekrarlayan deseni bulun ve kodu daha kısa yapın!
      ramp_artist_loops7_2019: Tekrarlayan deseni bulun ve kodu daha kısa yapın!
      ramp_artist_loops8: "**Challenge:** Look for a pattern and make this code shorter
        using loops."
      ramp_artist_loops8_2018: "**Challenge:** Look for a pattern and make this code
        shorter using loops."
      ramp_artist_loops8_2019: "**Challenge:** Look for a pattern and make this code
        shorter using loops."
      ramp_artist_loops9: Bu bulmacayı 200 piksel kenarlı bir kare çizerek çözün.
      ramp_artist_loops9_2018: Bu bulmacayı 200 piksel kenarlı bir kare çizerek çözün.
      ramp_artist_loops9_2019: Bu bulmacayı 200 piksel kenarlı bir kare çizerek çözün.
      simconfig: |-
        # Modify and Predict

        Pick one of the variables that control this simulation to modify and predict how that will change the outcome.

        After you have written down your prediction, run the simulation 5 times and write down your findings. Was your prediction accurate?
      simstarter: |-
        # Collecting Data

        Run this simulation 5 times. Each time, use the Collecting Data activity guide to record:

        -   How many apples did the elephant collect?
        -   How many apples did the hippo collect?
        -   How much time did it take for all of the apples to be collected?
