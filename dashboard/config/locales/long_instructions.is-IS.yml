---
is-IS:
  data:
    long_instructions:
      2-3 Artist 1 new: Hæ, ég er listamaður. Þú getur skrifað kóða til að láta mig
        teikna næstum hvað sem er. Notaðu fáeina kubba til að láta mig teikna í gráu
        strikin á myndinni. (Hver lína er 100 díla löng)
      2-3 Artist 11: 'Teiknaðu útlínu á merkið með því að búa til átthyrning með 100
        díla hliðum. '
      2-3 Artist 12: "Búðu til hring til að ljúka auganu! \n\nEf listamaðurinn snýr
        um 1 gráðu í hverri lykkju, hve oft þarf þá að endurtaka kóðann til að teikna
        hring? "
      2-3 Artist 2 new: Þetta er hús er með hálfan vegg. Hver hlið er 100, en hálfi
        veggurinn er bara 50. Ljúktu við vegginn.
      2-3 Artist 3.4: Kubburinn `hoppa` færir listamanninn án þess að teikna. Gerðu
        brotalínuna með því að nota bæði `hoppa` og `færa áfram` kubbana. Hver lína
        er 50 díla löng.
      2-3 Artist 3new: "Rauði hatturinn er 100 díla hár. Ljúktu við að teikna svartan
        hatt sem er 70 dílum styttri. \n\n_(Athugaðu: Breidd hvors hatts er 50 dílar.)_"
      2-3 Artist 4: Hjálpaðu mér að ljúka húsinu fyrir þennan kött.
      2-3 Artist 6: "Þetta hús þarf þak! Teiknaðu þríhyrninginn.  \n\nVísbending:
        allar þrjár hliðarnar hafa sömu lengd.\n\n<img src=\"https://images.code.org/8b10073fd1a7fe53b4da33ec2229894b-image-1468018903891.gif\"
        width=\"300\"/>"
      2-3 Artist 7: "Ljúktu við að teikna síðustu gluggaröðina á skólann svo allir
        í bekknum geti séð út. \n\nHver gluggarúða er 25 dílar á hæð og breidd. "
      2-3 Artist 8: "Nú skulum við byggja yfir dýrin!\n\nBúðu til svæði fyrir dýrin
        með því að skipta byggingunni í 2 jafnstóra ferninga. \n\nVísbending: Rétthyrningurinn
        er 200 dílar á breidd og 100 dílar á hæð.\n\nÞað eru margar mismunandi lausnir
        á þessari þraut."
      2-3 Artist 9 NEW: Kláraðu flugdrekann
      2-3 Artist Assessment 1: "**Mat:** Ljúktu við að teikna síðustu tönnina. Hún
        er 25 dílar á breidd og hæð."
      2-3 Artist Debugging 1: "Þessi hattur á að vera aðeins 50 díla breiður. \nGetur
        þú lagað hann?\n\n<br/>"
      2-3 Artist Debugging 10: "Stýripinnasvæðið á leikjastýrinu mínu er of mjótt.
        \n\nGetur þú breikkað það um 10 díla?\n\nPrófaðu að keyra kóðann fyrst til
        að sjá hvað er að."
      2-3 Artist Debugging 11: |-
        Snjókornið mitt er að detta í sundur!

        Getur þú fundið út hvað er að?
      2-3 Artist Debugging 2: "Þessi kóði fyrir veiðihár kattarins er rangur. \n\nLagaðu
        kóðann svo hann teikni veiðihár sem öll eru jafnlöng."
      2-3 Artist Debugging 3: "Báturinn minn lekur! \n\nHvað þarftu að laga svo að
        endarnir nái saman?"
      2-3 Artist Debugging 5: "Þessi kóði fyrir fótlegg og fót er rangur. \n\nGetur
        þú lagað hann?"
      2-3 Artist Debugging 6: |-
        Það virðist vanta fót á stólinn sem ég sit á!

        Breyttu kóðanum svo hann teikni síðasta fótinn.
      2-3 Artist Debugging 7: "Hér virðist C vera teiknað öfugt. \n\nGetur þú teiknað
        það rétt?"
      2-3 Artist Debugging 8: |-
        Kennarinn segir að ég eigi að klára það sem ég byrja á!

        Hjálpaðu mér að ljúka hjólinu. Getur þú fundið út hvað er að?
      2-3 Artist Debugging 9: |-
        Eitthvað er ekki í lagi!

        Þessi kóði fyrir stilk er rangur. Getur þú fundið út hvernig þú færð listamanninn til að teikna stilkinn rétt?
      2-3 Artist Debugging Assessment 1: "**Mat:** \nAf hverju fær þessi ferningur
        hliðar sem eru 75 dílum of stuttar?  \n\nHvar fer kóðinn úrskeiðis?"
      2-3 Artist Free Play: Frjáls æfing! Teiknaðu eigin hugmynd.
      2-3 Artist Functions 1: "\"Ég zombí liztamaður. Ég elzka teikna!\" \n\nHjálpaðu
        uppvakningnum að teikna ferköntuð gleraugu. \n\nBrúin milli glerja er 25 dílum
        styttri en hliðar ferninganna, sem eru 100 dílar."
      2-3 Artist Functions 10: "**Frjáls æfing:** Hér eru tvö föll, eitt til að teikna
        stórt tannhjól og annað fyrir lítið tannhjól. \n\nNotaðu þau til að teikna
        innviði vélar!"
      2-3 Artist Functions 11: "Við höfum breytt heiti `teikna ferning` fallsins í
        `teikna sexhyrning`, en það teiknar samt bara ferninga! \n\nGetur þú breytt
        `teikna sexhyrning` fallinu svo það teikni sexhyrning með 50 díla hliðar?
        \n\nTeiknaðu myndina með nýja fallinu!"
      2-3 Artist Functions 11.5: "Hér er sama `teikna sexhyrning` fallið. \n\nHvað
        gerist ef þú endurtekur aðalforritið 6 sinnum og snýrð um 60 gráður í hverri
        umferð lykkjunnar?"
      2-3 Artist Functions 12: "Föll er mjög hentug ef teikna þarf flókna hluti mörgum
        sinnum. \n\nGetur þú notað fallið `teikna blóm` til að fylla blómabeðið?\nÞað
        eru 100 dílar á milli plantna."
      2-3 Artist Functions 2: "Með föllum getur þú búið til nýja kubba! \n\nVið höfum
        fært kubbana sem teikna ferning inn í fall, sem heitir `teikna ferning`. Getur
        þú notað `teikna ferning` fallið til að búa til gleraugun? \n\nÞað eru 75
        dílar á milli ferninganna."
      2-3 Artist Functions 3: "Breyttu fallinu svo að það teikni ferning með 115 díla
        hliðar og teiknaðu svo stærri gleraugun. \n\nNú eru 45 dílar á milli ferninganna."
      2-3 Artist Functions 4: Settu nú fallið í lykkju til að teikna þessa 3 ferninga.
      2-3 Artist Functions 9: "**Frjáls æfing:** Hér er fall fyrir snjókorn. Reyndu
        að nota það til að búa til vetrarlega mynd! \n\nÞetta er frjáls æfing svo
        það er engin þraut að leysa. Skemmtu þér vel!"
      2-3 Artist Loops New 1: |-
        Teiknum haus á vélmennið! Getur þú búið til ferning með hliðar sem eru 100 dílar?

        <br/>
      2-3 Artist Loops New 10: Nú skulum við tengja nokkur V saman í lykkju.
      2-3 Artist Loops New 11: "Tími til að gera eitthvað spennandi! \n\nSmíðaðu kóðann
        úr síðustu þraut, en bættu við vinstri snúningi um 30 gráður innan í lykkjunni.
        Og endurtaktu hana 24 sinnum í stað 8."
      2-3 Artist Loops New 12: 'Teiknaðu tígul með 100 díla hliðar. '
      2-3 Artist Loops New 13: "Við byrjum með (gráan) kóða til að teikna einn tígul.
        \n\nSettu hann í lykkju til að teikna skemmtilegt mynstur!"
      2-3 Artist Loops New 14: "Leiktu þér með kóðann fyrir tígulinn til að sjá hvaða
        önnur mynstur þú getur skapað. \n\nPrófaðu að breyta gráðum snúnings og hve
        oft lykkjan er endurtekin."
      2-3 Artist Loops New 15: |-
        Teiknaðu nú hvað sem þú vilt!
        <br/><br/>
      2-3 Artist Loops New 2: |-
        Hér er sama þraut og við vorum að leysa, en nú getum við aðeins notað einn `færa áfram` kubb og einn `snúa` kubb.

        Getur þú notað `endurtaka` kubb til að leysa þessa þraut?
      2-3 Artist Loops New 9: Teiknaðu einfalt V með 50 díla hliðar til að ljúka við
        örina.
      2-3 Artist Nested Loops 1: |-
        Þú hefur áður notað lykkjur til að teikna form, en nú ætlum við að setja lykkjur innan í lykkjur!

        Settu `endurtaka` kubb utan um alla þessa stæðu af kóða til að teikna mynstrið.

        <br/>
      2-3 Artist Nested Loops 10: Endurtaktu kóðan 12 sinnum til að teikna mynstrið.
      2-3 Artist Nested Loops 11: Endurtaktu kóðann 4 sinnum með 90 gráðu snúningi
        eftir hvern hring.
      2-3 Artist Nested Loops 12: Endurtaktu kóðann 12 sinnum til að ljúka teikningunni.
      2-3 Artist Nested Loops 2: "Endurtaktu nú þríhyrninginn 6 sinnum. \n\nSnúðu
        um 60 gráður eftir hvern þríhyrning."
      2-3 Artist Nested Loops 3: "Til að teikna þetta mynstur þarf að endurtaka þríhyrninginn
        12 sinnum. \n\nDeildu fjölda gráða í hring (360) með fjölda forma sem á að
        teikna (12) til að finna út hve mikið þarf að snúa eftir hvert form."
      2-3 Artist Nested Loops 4: "Endurtaktu þennan tígul 12 sinnum í lykkju til að
        teikna blóm! \n\nAth. Við notum sama hornið til endurtaka 12 tígla og við
        notuðum til að snúa 12 þríhyrningum.\\\nHve mikið þarf að snúa eftir hvert
        form?"
      2-3 Artist Nested Loops 5: "Teiknaðu glugga þessarar byggingar með faldaðri
        lykkju. \n\nGluggarnir eru 20 díla langir og með 20 díla millibili."
      2-3 Artist Nested Loops 6: "Þessi risaeðla er með 8 brodda upp eftir halanum.
        \n\nHver broddur er 30 dílar á lengd. \n\nEndurtaktu þríhyrninginn 8 sinnum,
        en gættu þess að fara áfram eftir hvern!"
      2-3 Artist Nested Loops 7: "Teiknaðu sólina með lykkju sem teiknar 10 þríhyrninga.
        \n\nÞú verður að færa og snúa eftir hvern þríhyrning. \n\nÞú getur fundið
        út hve mikið þarf að snúa með því að deila fjölda gráða í hring með fjölda
        forma sem eiga að mynda hringinn."
      2-3 Artist Nested Loops 8: "Nú skulum við bæta grasi í myndina. \n\nHver grastó
        er 50 díla frá næstu."
      2-3 Artist Nested Loops 9: "Ljúkum myndinni með því að bæta við blómi. \n\nEndurtaktu
        tígulinn 12 sinnum í lykkju til að teikna blómið."
      2-3 Artist Nested Loops Free Play: Frjáls æfing. Teiknaðu eitthvað sniðugt með
        lykkjum í lykkjum.
      2-3 Bee Conditionals 11: "Hvað ætli sé þarna úti!\n\nHjálpaðu mér að fljúga
        um garðinn og safna blómasafa aðeins ef blóm hafa safa. "
      2-3 Bee Conditionals 13: |-
        Hér er margt að gerast!

        Notaðu það sem þú hefur lært til að safna öllum blómasafanum og búa svo til hunang.
      2-3 Bee Conditionals 14: "Nú skulum við nota þetta allt!\n\nNotaðu það sem þú
        hefur lært til að safna blómasafa aðeins úr blómum sem hafa hann og með sem
        fæstum kubbum. \n\nEkki gleyma að búa til hunang í lokin."
      2-3 Bee Conditionals 15: "Þetta þrepamynstur ætti að vera kunnuglegt. \n\nGetur
        þú safnað blómasafa aðeins úr blómum sem hafa hann og með sem fæstum kubbum?"
      2-3 Bee Conditionals 2: "Ég er svöng býfluga! \n\nHjálpaðu mér að safna öllum
        blómasafanum úr blómunum með sem fæstum kubbum."
      2-3 Bee Conditionals 3: "Sjáðu allan þennan blómasafa!\n\nHjálpaðu mér að safna
        öllum blómasafanum úr blómunum og búa til hunang og með sem fæstum kubbum.
        \ "
      2-3 Bee Conditionals 5: "Þessi fjólubláu töfrablóm breytast!\n\nÍ hvert skipti
        sem þú keyrir þrautina geta fjólublá blóm haft 1 af blómasafa eða engan...en
        þú veist það ekki fyrr en þú keyrir kóðann!\n\nGættu þess að reyna ekki að
        safna blómasafa á blómi sem hefur engan. \nÞú verður fyrst að athuga hvort
        blómasafinn sé 1 með þvi að nota `ef blómasafi` kubb."
      2-3 Bee Conditionals Assessment 1: |-
        **Mat:** Safnaðu öllum blómasafanum.\
        Gættu þess að reyna ekki að safna blómasafa úr fjólubláu blómi sem hefur engan safa.
      2-3 Bee Debugging 1: |-
        Þessir kubbar eru að bögga mig!

        Lagaðu villu(r) til að safna öllum blómasafanum.
      2-3 Bee Debugging 10: "Þessi þraut snýr mér í hringi! \n\nLagaðu villu(r) til
        að safna öllum blómasafanum og búa til allt hunangið."
      2-3 Bee Debugging 2: |-
        Geturðu séð hvað vandamálið er hér?

        Lagaðu villu(r) til að safna öllum blómasafanum.
      2-3 Bee Debugging 3: |-
        Æ, þessi stingur!

        Lagaðu villu(r) til að safna öllum blómasafanum.
      2-3 Bee Debugging 5: |-
        Þetta blóm virðist sætt!

        Lagaðu villu(r) til að safna öllum blómasafanum. Þú getur nú keyrt í skrefum.
      2-3 Bee Debugging 6: |-
        Þessi þraut er sykursæt!

        Lagaðu villu(r) til að safna öllum blómasafanum.
      2-3 Bee Debugging 9: |-
        Hunang er æði en þarf þolinmæði!

        Þú þarft að lagfæra ýmislegt til að geta safnað öllum blómasafanum og búið til allt hunangið.
      2-3 Bee Debugging Assessment 1: |-
        **Mat:** Nú skaltu sýna hvað þú kannt!

        Lagaðu villu(r) til að safna öllum blómasafanum og búa til allt hunangið.
      2-3 Bee Functions 1: "Föll eru kubbar sem saman leysa ákveðið verkefni.\\\r\n\\\r\nNotaðu
        fallið `sækja 2 blómasafa` til að safna safanum úr hverju blómi."
      2-3 Bee Functions 10: "Fjólublá blóm geta haft 1 eða 0 af blómasafa en það breytist
        í hvert sinn sem þú keyrir þrautina.  \n\nBúðu til fall sem safnar blómasafa
        aðeins úr fjólubláum blómum sem hafa safa."
      2-3 Bee Functions 2: "Föll eru kubbar með kóða sem leysir tiltekið verk. \n\nNotaðu
        fallið `sækja 5` til að sækja 5 af blómasafa í einu."
      2-3 Bee Functions 4: "Fallið `færa og sækja blómasafa` snýr býflugunni, safnar
        safa og færir býfluguna aftur á upphaflega staðinn. \n\nNotaðu fallið til
        að safna öllum blómasafanum."
      2-3 Bee Functions Assessment 1: "**Mat:** Notaðu gefna fallið til að safna blómasafa
        úr hverju blómi."
      2-3 Bee Functions Assessment 2: "**Mat:** Búðu til fall sem snýr býflugunni,
        færir hana áfram, býr til 3 hunang og færir hana svo og snýr henni í upphaflega
        stöðu."
      2-3 Bee Loops 1: |-
        Þessi blóm virðast ljúffeng!

        Safnaðu safa úr hverju blómi með sem fæstum kubbum.
      2-3 Bee Loops 13: "**Mat:** Safnaðu öllum blómasafanum með sem allra fæstum
        kubbum."
      2-3 Bee Loops 3A: Notaðu `endurtaka` lykkju til að safna öllum blómasafanum.
      2-3 Bee Loops 3B: Notaðu nú `endurtaka` kubbinn til að safna öllum blómasafanum
        og búa til allt hunangið.
      2-3 Bee Loops 4: |-
        Þetta er býsna duglegt bý!

        Hjálpaðu býflugunni að safna öllum blómasafanum og búa til allt hunangið með sem fæstum kubbum.
      2-3 Bee Loops 4A: "Hve oft geta lykkjur hjálpað þér í þessari þraut?  \n\nLykkjur
        eru vinir þínir! Notaðu nokkrar til að leysa þessa þraut með sem allra fæstum
        kubbum."
      2-3 Bee Loops 5: "Þessi slóð er ólík hinum slóðunum. \n\nGetur þú safnað öllum
        blómasafanum með sem allra fæstum kubbum?"
      2-3 Bee Loops 7: "En fallegt blómaengi!  \n\nHjálpaðu býflugunni að heimsækja
        hvert blóm. \n\nGeturðu gert það með færri en 7 kubbum?"
      2-3 Bee Loops 8: "Þessi fjólubláu blóm hafa mismunandi magn blómasafa í hvert
        sinn sem þrautin er keyrð. \n\nNotaðu `meðan blómasafi` lykkju til að safna
        öllum safanum. \n\nÞessi lykkja endurtekur sig á meðan skilyrðið er satt,
        hér `blómasafi > 0`."
      2-3 Bee Loops Assessment 1: "**Mat:** Notaðu `meðan` lykkju til að safna öllum
        blómasafanum úr þessum blómum."
      2-3 Maze 1: "Getur þú hjálpað mér að ná óþekka svíninu? \n\nSmelltu saman tveimur
        `færa áfram` kubbum fyrir neðan `þegar keyrt` kubbinn og ýttu svo á \"Keyra\". "
      2-3 Maze 12: |-
        Nú færðu töfrakubb til að nota! Með `endurtaka` kubbnum getur þú endurtekið kóða aftur og aftur í lykkju.

        Getur þú komist til svínsins með því að búa til lykkju sem notar bara einn `færa áfram` kubb innan í `endurtaka` kubbi?
      2-3 Maze 13: Komdu mér til svínsins! Í þetta sinn mátt þú aðeins nota einn `færa
        áfram` kubb
      2-3 Maze 15: Notaðu tvær `endurtaka` lykkjur til að ná svíninu með sem fæstum
        kubbum!
      2-3 Maze Loops 18: "Komdu mér til sólblómsins með sem allra fæstum kubbum!  \n\nReyndu
        að nota einn `endurtaka` kubb innan í öðrum til að stytta kóðann."
      2-3 Maze Loops 19: "Förum með þetta á hærra plan! \n\nNotaðu lykkjur til að
        koma mér til sólblómsins með sem allra fæstum kubbum."
      2-3 Maze Loops Assessment 1: "**Mat:** Komdu mér til sólblómsins með aðeins
        5 kubbum! "
      4-5 Artist 1: 'Hjálpaðu mér að ljúka teikningunni. (Hver lína er 300 díla löng) '
      4-5 Artist 11: "Ljúktu við grænu línurnar. \n\nLínurnar eru 300 díla langar
        og bilið á milli þeirra er 15 dílar."
      4-5 Artist 2: Settu þennan kóða í lykkju og notaðu `endurtaka` kubbinn til að
        ljúka við ferninginn.
      4-5 Artist 3: "Þetta rétthyrnda blómabeð hefur ummálið 600.\\\nLanga hliðin
        er 200. \n\nTeiknaðu rétthyrninginn með sem fæstum kubbum."
      4-5 Artist 3.5: "Reyndu að finna út hvað muni gerast ef þú keyrir þennan kóða
        (eða ýttu bara á \"Keyra\" til að komast að því). \\\r\n\\\r\nEndurtaktu kóðann
        svo nógu oft til að ljúka við teikninguna!"
      4-5 Artist 4: "Hve margar gráður eru í hring? \\\r\n\\\r\nEndurtaktu kubbana
        í lykkju til að búa til litahring."
      4-5 Artist 5: Hvað getum við sett í stað "???" til að tryggja að uppvakningurinn
        ljúki teikningunni með gefnu lykkjunni?
      4-5 Artist 6: Hvert horn í þessum jafnhliða þríhyrningi er 60 gráður. Hver hlið
        er 200 dílar. Ljúktu við teikninguna.
      4-5 Artist 7: "Þessi rétthyrndi þríhyrningur er með 30, 60 og 90 gráðu horn.
        Lengd hallandi hliðarinnar (langhliðarinnar) er 200 dílar. \n\nLjúktu við
        teikninguna."
      4-5 Artist 8: "Miðlínan á fótboltavelli liggur _hornrétt_ á hliðarlínurnar.\\\nÞessi
        rétthyrningur hefur ummálið 800 dílar og hann er 240 dílar á lengd. Hve hár
        er hann?  \n\nTeiknaðu útlínurnar og miðlínuna."
      4-5 Artist 9: Teiknaðu hægri helming þessarar myndar svo að teikningin sé samhverf.
        Þríhyrningarnir eru jafnhliða og hver hlið er 50 dílar á lengd.
      4-5 Artist Assessment 1: "**Mat:** Notaðu lykkju til að teikna jafnhliða þríhyrninginn.
        Hver hlið er 300 dílar."
      4-5 Artist Free Draw 1: Frjáls teikning! Teiknaðu hvað sem þér dettur í hug
        að skapa.
      4-5 Artist Patterns 1: |-
        Teiknaðu þennan ferning með því að nota lykkju.

        Hver hlið er 20 dílar á lengd.
      4-5 Artist Patterns 10: "Þessi kóði teiknar tvær raðir af sexhyrningum - endurtaktu
        hann í lykkju 4 sinnum til að teikna alla býkúpuna. \n\nÍ ytri lykkjunni þarf
        að hoppa til baka um 120 díla til að listamaðurinn teikni ekki út fyrir skjáinn."
      4-5 Artist Patterns 11: Hversu oft þarf að endurtaka þetta til að teikna hálfan
        hring?
      4-5 Artist Patterns 12: "Hvað gerist ef þú notar sömu lykkju, en snýrð til vinstri
        í stað hægri? \n\nGetur þú endurtekið þetta og teiknað þessa bylgju?"
      4-5 Artist Patterns 13: "Nú skulum endurtaka þetta allt 4 sinnum til að búa
        til myndarammann. Gættu þín á hornunum - þú getur ekki bara snúið um 90 gráður!
        \n\nSnúningur um 3 gráður, sem er endurtekinn 60 sinnum, teiknar hálfan hring.
        Hvaða kubbar teikna fjórðung úr hring fyrir hornin?"
      4-5 Artist Patterns 2: "Lykkja, sem er sett innan í aðra lykkju, er kölluð földuð
        lykkja (enska: nested loop). \n\nFaldaðu lykkjuna fyrir ferning. Hverju þarf
        að bæta við ytri lykkjuna svo að ferningarnir 15 raðist hlið við hlið?"
      4-5 Artist Patterns 3: Nú skulum við fara dýpra! Allur kóðinn er faldaður í
        annarri lykkju, en við þurfum að koma listamanninum aftur á sama stað til
        að teikna næstu línu. Hvaða kóða vantar í endann á ytri lykkjunni til að teikna
        alla grindina?
      4-5 Artist Patterns 4: "Þessi tígull er með 50 díla hliðar og hornin 120 og
        60 gráður. \n\nNotaðu lykkju til að teikna hann."
      4-5 Artist Patterns 5: "Endurtaktu þennan kóða til búa til röð með 6 tíglum.
        \n\nTaktu eftir að kóðinn fyrir tígul er endurtekinn 3 sinnum í stað 2 - af
        hverju heldurðu að það sé?"
      4-5 Artist Patterns 6: Hve oft þarf að endurtaka þennan kubb til að teikna alla
        tíglana?
      4-5 Artist Patterns 7: Við skulum breyta kóðanum úr síðustu þraut til að teikna
        þetta flóknara mynstur. Taktu eftir hvernig tíglarnir skarast núna. Prófaðu
        að breyta fyrsta "hoppa aftur á bak" úr 100 í 50 (hálfa leið). Hve langt ætti
        listamaðurinn að hoppa aftur á bak í næsta skipti?
      4-5 Artist Patterns 8: Notaðu lykkju til að teikna þennan sexhyrning með 40
        díla hliðar og 60 gráðu horn.
      4-5 Artist Patterns 9: "Endurtaktu nú þennan kóða 3 sinnum til að teikna alla
        röðina. \n\nHver sexhyrningur er 80 dílar á breidd milli ystu marka til vinstri
        og hægri."
      4-5 Artist Patterns 9.5: "Setjum þennan kóða í lykkju til að teikna tvær raðir
        af sexhyrningum. \n\nTaktu eftir hvernig seinni röðin er færð til hægri."
      4-5 Artist Patterns Free Play: Frjáls leikur. Spreyttu þig á að búa til eigið
        mynstur!
      4-5 Bee Conditionals 1: |-
        Þetta ský skyggir á! Gáðu hvort að það sé blóm bak við skýið og ekki safna blómasafa nema það sé blóm.\
        Farðu varlega því það getur breyst!
      4-5 Bee Conditionals 2: "Fleiri ský! \n\nÞað verður að skoða undir hvert ský
        til að sjá hvort þar sé falið blóm áður þú safnar blómasafa. \n\nMundu: Skýin
        fela ekki öll það sama!"
      4-5 Bee Conditionals 4: "Þetta ský felur stundum blóm og stundum býkúpu! \n\nNotaðu
        `ef-annars` kubb til að safna safa ef það er blóm.\\\nAnnars búa til hunang
        (því þá er það býkúpa)."
      4-5 Bee Conditionals 5: "Hvert þessara skýja felur annað hvort blóm eða býflugnabú!
        \n\nNotaðu `ef/annars` kubbinn til að safna blómasafa ef um blóm er að ræða.\nAnnars
        búa til hunang (því þá er það bú)."
      4-5 Bee Conditionals 6: "Þetta blóm gæti innihaldið 1, 2 eða 3 af blómasafa.
        \n\nHér eru skilyrðiskubbar (`ef` og/eða `ef-annars`) notaðir saman til að
        safna nákvæmlega þeim safa sem blóm hefur. \n\nMundu að magn blómasafans getur
        breyst í hvert sinn sem þrautin er keyrð!"
      4-5 Bee Conditionals 7: "Þessi blóm geta haft 3, 2 eða 1 af blómasafa. \n\nLjúktu
        við fallið `athuga fjólublátt blóm` og notaðu það til að safna öllum safa
        úr blómunum."
      4-5 Bee Conditionals 8: "Skrifaðu fallið `athuga blóm búa til hunang`. \n\nFallið
        á að athuga hvort fjólubláa blómið hefur 3, 2 eða 1 af blómasafa og safna
        öllum safanum. \nFæra svo áfram og búa til hunang."
      4-5 Bee Conditionals Assessment 1: "**Mat:** Þetta ský felur annað hvort blóm
        með 1 safa eða býflugnabú sem þarf 1 hunang.  \n\nLjúktu við fallið `sækja
        blómasafa eða búa til hunang` og kallaðu svo á það til að safna öllum safanum
        eða búa til hunangið. "
      4-5 Bee Debugging 1: "Þessir kubbar eru eitthvað í ólagi. \n\nGetur þú lagað
        þá?"
      4-5 Bee Debugging 6: "Fjólubláa blómið hefur mismunandi magn af blómasafa í
        hvert sinn sem þrautin er keyrð. \n\nLagaðu kubbana til að ná alltaf öllum
        safanum úr blóminu."
      4-5 Bee Debugging Assessment 1: "**Mat:** Lagaðu kóðann."
      4-5 Bee Nested Loops 2: "Safnaðu öllum blómasafanum úr hverju blómi. \n\nNotaðu
        faldaða lykkju. "
      4-5 Bee Nested Loops 4: "Safnaðu öllum blómasafanum úr hverju blómi og búðu
        til hunang í býkúpunni. \n\nNotaðu faldaða lykkju. "
      4-5 Bee Nested Loops Assessment 1: "**Mat:** Safnaðu öllum blómasafanum og búðu
        til allt hunangið með því að nota lykkjur."
      4-5 Maze 7: "Komdu uppvakningnum til sólblómsins fljótt! \n\nGetur þú leyst
        þessa þraut með færri en 11 kubbum?"
      4-5 Maze 9: "Nú höfum við nýja kubbinn `endurtaka þar til`.\nMeð honum getum
        við endurtekið skipanir þar til uppvakningurinn nær til sólblómsins. \n\nNotaðu
        nýja `endurtaka þar til` kubbinn til að leysa þessa þraut með sem fæstum skipunum."
      4-5 Maze Assessment 1: "**Mat:** Náðu til sólblómsins með sem fæstum kubbum."
      4-5 Maze Conditionals 1: Notaðu `endurtaka þar til` kubbinn til að koma uppvakningnum
        til sólblómsins.
      4-5 Maze Conditionals 10: "Getur þú bætt við bara 3 kubbum til að hjálpa uppvakningnum
        að rata flóknari leið? \n\nEf þú gerir það rétt, getur hann gengið hvaða slóð
        sem er alveg sama hvað hún er löng!"
      4-5 Maze Conditionals 2: Notaðu `endurtaka þar til` kubbinn til að koma uppvakningnum
        til sólblómsins.
      4-5 Maze Conditionals 3: 'Notaðu `ef` kubbinn til að hjálpa mér að ákveða hvenær
        á að snúa. '
      4-5 Maze Conditionals 4: Jæja, þetta er alveg eins og síðasta þraut, en þú þarft
        að muna hvernig `ef` og `endurtaka þar til` kubbarnir voru notaðir saman.
      4-5 Maze Conditionals 5: "\"Ég vilja zólblóm!\" \n\nNotaðu `ef` kubb til að
        koma uppvakningnum að sólblóminu með sem fæstum kubbum."
      4-5 Maze Conditionals 6: "\"Éta zólblóm!\" \n\nNotaðu `ef` kubb til að koma
        uppvakningnum að sólblóminu með sem fæstum kubbum."
      4-5 Maze Conditionals 7: Þessi þraut hefur svipaða lausn, en gættu þín á ætunum!
      4-5 Maze Conditionals 8: "`Ef-annars` kubburinn athugar skilyrði og gerir svo
        eitt EÐA annað. \n\nKomdu mér til sólblómsins með því að nota þennan nýja
        kubb."
      4-5 Maze Conditionals 9: |-
        Enn ein æfing með `ef-annars` kubbinn!

        Rektu slóðina með fingrinum til að gá hvort þú getir leyst þetta í fyrstu tilraun.
      4-5 Maze Conditionals Assessment 1: "**Mat:** Notaðu `endurtaka þar til` og
        `ef-annars` kubb til að koma mér til sólblómsins með sem fæstum kubbum."
      4-5 Nested Loops 1: 'Ljúktu við kóða sem teiknar þessa þrihyrninga. Sá fyrsti
        er tilbúinn. Vísbending: 3 þríhyrningar sem mynda 360 gráðu hring.'
      4-5 Nested Loops 11: "Getur þú teiknað þessa 10 ferninga fyrir gangstétt með
        faldaðri lykkju? \n\nHver ferningur er 30 dílar."
      4-5 Nested Loops 12: Getur þú teiknað þessa 36 þríhyrninga með faldaðri lykkju?
      4-5 Nested Loops 2: "Faldaðu nú þessa lykkju innan í annari lykkju til að teikna
        10 þríhyrninga. \\\nÞetta er kallað \"földuð\" lykkja.  "
      4-5 Nested Loops 3: |-
        Búðu til sól með því að falda byrjunarkóðann í annarri lykkju.

        Til að miðjan verði hol þarft þú að stökkva áfram um lengd þríhyrningsins áður en þú snýrð.
      4-5 Nested Loops 5: Settu gefna kóðann í lykkju til að búa til vindmyllu.
      4-5 Nested Loops 6: Getur þú teiknað sexhyrning með því að setja þríhyrningskóðann
        í lykkju?
      4-5 Nested Loops 7: "Endurtaktu þetta 10 sinnum í lykkju. \n\nHvað þarf að snúa
        mikið í hverri umferð?"
      4-5 Nested Loops 8: "Endurtaktu þetta 6 sinnum í lykkju. \n\nHvað þarf að snúa
        mikið í hverri umferð? "
      4-5 Nested Loops 9: Teiknaðu tennur krókódílsins!
      4-5 Nested Loops Assessment 1: "**Mat:** Notaðu faldaða lykkju til að ljúka
        teikningunni."
      4-5 While Loops 1: Færðu mig að holunni og notaðu `fylla` kubbinn til að fylla
        hana með tveimur skóflufyllum af mold.
      4-5 While Loops 2: Færðu mig að moldarhaugnum og notaðu `fjarlægja 1` kubbinn
        til að fjarlægja hann með 5 skóflustungum.
      4-5 While Loops 3: "Notaðu sem fæsta kubba til að ljúka þessari þraut! \n\nFærðu
        mig að haugnum og fjarlægðu hann allan. Farðu svo að holunni og fylltu hana."
      4-5 While Loops 4: "Vá, ég fann mjög djúpa holu! \n\nÉg veit ekki hve mörg skóflufylli
        af mold þessi hola þarf. \nGetur þú skrifað forrit sem heldur áfram að nota
        `fylla` kubbinn þar til holan er full?  "
      Alien Defender: "**Hugmynd að verkefni:** Búðu til Defender leik í Leikjasmiðjunni!"
      AppLab Intro 7 - Change Screen Color: "<div style=\"float:right\">\n\t<img src=\"https://images.code.org/bf9b1fb57751fa90c9b786339914ad70-image-1508521068798.34.54
        AM.png\" style=\"height:150px\"> \n</div>\n\n**Markmið:** Lita skjáinn grænan.
        \n\n**Hvernig:** Dragðu inn `setProperty()` kubb. Notaðu fellilistana til
        að stilla `\"background-color\"` fyrir skjáinn á `\"green\"`. Ýttu svo á \"Keyra\".\n\n**Í
        vandræðum? Smelltu hér:** ![expandable](https://images.code.org/3b5e70522b02867a1df1d5b5e481785e-image-1511279858395.gif)"
      AppLab Intro 7 - Change Text 2: |-
        <div style="float:right">
        <img src="https://images.code.org/39ead723fbd2b047aa2d1e401cbfec8a-image-1506545619076.34.29 PM.png" style="height:200px;">
        </div>

        **Markmið:** Stækka textann og lita bláan.

        **Hvernig:**  Þú þarft tvær línur af kóða. Láttu `"label1"` hafa `"font-size"` sem er `80` og `"text-color"` sem er `"blue"`.

        **Í vandræðum? Smelltu hér:** ![expandable](https://images.code.org/2d5d46a03082af3b01847aad6602e2ea-image-1511280140482.gif)
      AppLab Intro 7 - Full Text: "<div style=\"float:right\">\n<img src=\"https://images.code.org/1e81d5bcdd69172f4127de55d045225f-image-1507565161167.05.19
        AM.png\" style=\"height:200px\">\n</div>\n\n**Markmið:** Búa til hnappana
        `\"red\"` og `\"blue\"`. Breyta svo textanum á stóra appelsínugula svæðinu.\n\n**Hvernig:**
        \n\n-   Mundu að þú getur sett músina á einingar til að sjá `\"id\"` eiginleika
        þeirra.\n-   Stilltu `\"background-color\"` fyrir hnappana á `\"red\"` og
        `\"blue\"`.\n-   Breyttu `\"text\"` eiginleika appelsínugula svæðisins í hvað
        sem þú vilt, t.d. `\"Velkomin í appið mitt!\"`.\n\n**Alveg stopp? Smelltu
        hér:** ![expandable](https://images.code.org/4bf99e7352e7c17a5bf73ced80171f6a-image-1511280628092.gif)"
      AppLab Intro 7 - onEvent intro: |-
        <img src="https://images.code.org/3d8c8487ea669563d3401c0009cd9462-image-1511281194897.gif" style="float:right;height:200px">

        **Markmið:** Skjárinn er upphaflega blár. Bættu við kóða svo að hann verði grænn þegar þú smellir á "Green-ify" hnappinn.

        **Hvernig:** Settu kóða inn í `onEvent()` sem stillir `"background-color"` skjásins á `"green"`.

        **Alveg stopp? Smelltu hér:** ![expandable](https://images.code.org/5ddf6b129bc04b79839b3661ccef788b-image-1511281012076.gif)
      AppLab Intro 7 - onEvent twoButtons: |-
        <img src="https://images.code.org/158c9258bfff18c2177440f201446c47-image-1507566793890.gif" style="float:right;height:200px">

        **Markmið:** Hjálpaðu að ljúka þessu vasaljós-appi. "On" hnappurinn virkar nú þegar og gerir skjáinn hvítan. Keyrðu appið og prófaðu. Skrifaðu svo kóða til að "Off" hnappurinn geri skjáinn svartan.

        **Hvernig:** Bættu kóða inn í tómt `onEvent()` sem stillir `"background-color"` fyrir skjáinn á `"black"` og `"text-color"` textans á `"white"`.

        **Í festu? Smelltu hér:** ![expandable](https://images.code.org/020b1d9b465aaf35967a528a92961c13-image-1511281772276.gif)
      AppLab Intro 7 - playSound: "<img src=\"https://images.code.org/28176329f15dea1a863564b069e72aab-image-1511282702534.44.52
        AM.png\" style=\"float:right;height:200px\">\n\n**Markmið:** Þetta dýrahljóðaapp
        er næstum tilbúið! Keyrðu það til að prófa. Settu svo mynd, texta og hljóð
        í síðasta hnappinn.\n\n**Hvernig:** \n\n-   Bættu `onEvent()` í forritið og
        láttu \"id\" þess vera `\"button4\"`. Dragðu `playSound()` inn í `onEvent()`
        og veldu hljóð úr safninu. \n-   Bættu við `setProperty()` (utan við `onEvent()`)
        til að breyta  `\"image\"` eiginleika hnappsins. Veldu mynd úr þriðja fellilistanum.\n-
        \  Bættu við enn öðru `setProperty()` til að breyta `\"text\"` eiginleika
        hnappsins.\n\n**Allt fast? Smelltu hér:** ![expandable](https://images.code.org/a3fdcb8954c5e8d585bef64df1ec5b1a-image-1511285408512.gif)"
      AppLab Intro 7 - thisOrThatAddButton: |-
        <img src="https://images.code.org/3feb07aaf3d933b094647479673a3293-image-1508373443129.37.00 PM.png" style="float:right;height:200px">

        **Markmið:** Bæta öðrum hnappi á skjáinn með textanum "Right!" og með `"id"` sem er `"rightButton"`.

        **Hvernig:** Vertu í Hönnunarstöðu (Design Mode) og dragðu inn nýjan hnapp. Stilltu stað og stærð hans. Stilltu svo eiginleikana `"id"`, `"text"`, `"background color"` og `"font size"`.

        **Í vandræðum? Smelltu hér:** ![expandable](https://images.code.org/7035ad0445984cf889b159cf5682e35a-image-1508383186447.gif)
      AppLab Intro 7 - thisOrThatAddScreen: |-
        <img src="https://images.code.org/f102a1363aa575cc530379d9a4ee378c-image-1508382068883.00.59 PM.png" style="float:right;height:200px">

        **Markmið:** Búðu til nýjan skjá sem heitir `"rightScreen"`. Bættu við texta sem segir "Þú fórst til hægri!".

        **Hvernig:** Vertu í Hönnunarstöðu og dragðu inn nýja skjá einingu (screen). Gefðu honum `"id"` sem er `"rightScreen"`. Dragðu svo texta á skjáinn og láttu textann vera "Þú fórst til hægri!".

        **Allt fast? Smelltu hér:** ![expandable](https://images.code.org/11cf186acb0453cf9ec46929b763f568-image-1508383646159.gif)
      AppLab Intro 7 - thisOrThatPersonalize: "<a href=\"https://studio.code.org/projects/applab/gx21oCP10-V4GlNMlSpwdQ\"
        target=\"_blank\"><img src=\"https://images.code.org/ba6c0db48cc1c3c28c135f1c2f67f361-image-1511244802597.10.18
        PM.png\" style=\"float:right;height:200px\"></a>\n<a href=\"https://studio.code.org/projects/applab/SM_edi1btguZZiQaTtUT9Q\"
        target=\"_blank\"><img src=\"https://images.code.org/284b55697d786e0cd64350d0967c5dda-image-1511244806272.11.05
        PM.png\" style=\"float:right;height:200px\"></a>\n<a href=\"https://studio.code.org/projects/applab/SMvVhgBX_GGyxg5LSEMrgg\"
        target=\"_blank\"><img src=\"https://images.code.org/445181ff8d84861919512ba9b8e09586-image-1511244809994.12.40
        PM.png\" style=\"float:right;height:200px\"></a>\n\n**Markmið:** Búðu til
        þitt eigið app með því að útvíkka þetta verkefni. Notaðu svo \"Share\" til
        að deila því með einhverjum!\n\n**Hvernig:** Ákveddu hvers konar app þú hefur
        áhuga á að smíða. Búðu það svo til með því að bæta í það skjám, hnöppum, texta,
        hljóðum og gagnvirkni við notanda. Það eru líka nokkrir viðbótarkubbar í verkfærakassanum
        fyrir þig að prófa. Þgear það er fullgert getur þú smellt á \"Share\" til
        að senda það á þig eða vin! \n\n<details>\n\n<summary><b>Hugmyndir</b></summary>\n\nPrófaðu
        þetta <a href=\"https://studio.code.org/projects/applab/SMvVhgBX_GGyxg5LSEMrgg\"
        target=\"_blank\">Dæmi um ævintýraapp</a> svo þú getir séð hvernig svona app
        virkar. Hér eru svo nokkrar hugmyndir til að koma þér af stað.\n\n<li>Búa
        til ævintýri um uppáhaldspersónu, raunverulega eða ímyndaða.</li>\n<li>Búa
        til ævintýri sem segir sögu úr bók eða bíómynd sem er í í uppáhaldi hjá þér,
        eða þá sögu sem þú býrð til.</li>\n<li>Búa til ævintýri með óvænum vendingum
        eða þar sem þarf að taka erfiða siðferðilega ákvörðun.</li>\n<br>\n</details>\n\n<details><summary><b>Hugmyndir
        að kortaappi</b></summary>\n\nPrófaðu þetta <a href=\"https://studio.code.org/projects/applab/SM_edi1btguZZiQaTtUT9Q\"
        target=\"_blank\">Dæmi um kortaapp</a> svo þú getir séð hvernig svona app
        virkar. Hér eru svo nokkrar hugmyndir sem gætu hjálpað þér að búa til eigið
        kort.\n\n<li>Búa til kort til að fagna afmæli, fríi eða einhverjum sérstökum
        degi á næstunni.</li>\n<li>Búa til þakkarkort fyrir einhvern sem þú kannt
        að meta.</li>\n<li>Búa til boðskort fyrir komandi atburð.</li>\n<br>\n</details>\n\n<details><summary><b>Hugmyndir
        að persónuleikaprófi</b></summary>\n\nPrófaðu þetta <a href=\"https://studio.code.org/projects/applab/gx21oCP10-V4GlNMlSpwdQ\"
        target=\"_blank\">Dæmi um app með persónuleikaspurningum</a> svo þú getir
        séð hvernig svona app virkar. Hér eru nokkrar hugmyndir til að koma þér af
        stað með eigin spurningar.\n\n<li>Búa til spurningaapp sem spyr notandann
        um hvað honum líkar, t.d. máltíð, íþróttalið, bók eða stað.</li>\n<li>Búa
        til spurningaapp sem \"spáir um framtíðina\" út frá svörum notanda.</li>\n<li>Búa
        til spurningaapp sem hjálpar fólki að taka erfiða ákvörðun.</li>\n\n</details>"
      AppLab Intro 7 - thisOrThatSetScreen: |-
        <img src="https://images.code.org/acd1acf659a2504d38ff80256d8e870f-image-1508374065550.com-crop (1).gif" style="float:right;height:200px">

        **Markmið:** Skjárinn skiptir yfir í `"rightScreen"` þegar notandinn smellir á `"rightButton"`.

        **Hvernig:** Vertu í kóðastöðu (Code Mode) og bættu nýju `onEvent()` í forritið fyrir hnappinn "Right!". Settu í það `setScreen()` kubb sem skiptir skjánum yfir í `"rightScreen"`.

        **Í vandræðum? Smelltu hér:** ![expandable](https://images.code.org/64dfec0d9f9c2fc237abb90ef6a72f0e-image-1508384166252.gif)
      CDU U6 Playground Sound Board: |-
        # Sound Board 2.0

        You can now play sounds, notes, and songs! With this new knowledge, you can even turn your board into a sound board.

        In the toolbox you have all of the buzzer and led-related blocks at your disposal. See what cool stuff you can come up with!

        # Do This

        -   Use all of the button related board events (up, down), to play a unique sound or song at each event.
        -   Are there any other events you could use to play even more sounds/songs?
      CDU U6 Playground Sound Board_2018: |-
        # Sound Board 2.0

        You can now play sounds, notes, and songs! With this new knowledge, you can even turn your board into a sound board.

        In the toolbox you have all of the buzzer and led-related blocks at your disposal. See what cool stuff you can come up with!

        # Do This

        -   Use all of the button related board events (up, down), to play a unique sound or song at each event.
        -   Are there any other events you could use to play even more sounds/songs?
      CDU U6 Playground Sound Board_2019: |-
        # Sound Board 2.0

        You can now play sounds, notes, and songs! With this new knowledge, you can even turn your board into a sound board.

        In the toolbox you have all of the buzzer and led-related blocks at your disposal. See what cool stuff you can come up with!

        # Do This

        -   Use all of the button related board events (up, down), to play a unique sound or song at each event.
        -   Are there any other events you could use to play even more sounds/songs?
      CSD Problem Solving Process Video: |-
        ## Spurningar til að hugleiða

        -   Hvernig notaðir þú þrautarlausnarferlið í síðustu kennslustund?
        -   Hvernig gætir þú notað þetta ferli til að leysa vandamál í þínu daglega lífi?
      CSD U1 - PixFilter 1x1 intro: |-
        # 3 Bit Colors

        Each pixel is a square on a screen that emits light. Each pixel can have a certain number of bits assigned to it, and bits per pixel determine the colors that can be rendered.

        In this tool we're using 3 bits to define the one large black pixel. The first bit affects the red tint. The second bit affects the green tint. The third bit affects the blue tint.

        # Do This

        -   Click the "Run" button to start the widget
        -   Click on the light bulbs to turn on or off each color and see what happens to your pixel
        -   See how many different colors you can create with just three bits
        -   Write down the binary associated with each color you come up with
      CSD U1 - PixFilter Filter Intro: |-
        # Filtering Pixels

        If you've ever used Instagram you've probably encountered an image filter. Image filters read in each pixel, process it in some way, and the return the filtered pixel. In this tool we're going to start by filtering just a single pixel before moving on to a full image.

        # Do This

        -   Try changing the color drop downs in the Filter section
        -   Click on the top row of lightbulbs in the Diagram section to see how the filter will convert the input (top bulbs) to the output (bottom bulbs)
        -   Look at how the numbers in the Binary section reflect changes to the colors
        -   Based on how the bits change, can you formulate what replace is doing? Talk to your partner and see if you can figure it out.
        -   Complete the Level 2 table in your Activity Guide
      CSD U1 - PixFilter Filter Revisit: |-
        # Combining Filters

        Now that you've played with filtering a single color channel, it's time to see what happens if we filter more than one color.

        # Do This

        -   Using the color dropdowns in the filter section, build a filter that changes the value of more than one color channel
        -   Click on the top row of lightbulbs in the Diagram section to see how the filter will convert the input (top bulbs) to the output (bottom bulbs)
        -   Look at how the numbers in the Binary section reflect changes to the colors
        -   Complete the Level 4 table in your Activity Guide
      CSD U1 - PixFilter FreePlay: |-
        # Free Play

        Do as you will, make something awesome
      CSD U1 - PixFilter Mario: |-
        # Combining Filters

        Sometimes you'll need to filter more than one pixel to get the color change that you want.

        # Do This

        Check out Mario, he's lookin' pretty good in his red hat and overalls. Your job it to set up the filter so he looks like Luigi, with a green hat and overalls.

        -   First, determine which bit(s) needs to change in order to the change you want
        -   Once you've figured out which bit needs changing, set the filter dropdown appropriately
        -   After you've got the filter working so that, try to come up with other filters that change _only_ his hat and overalls - how many different clothing colors can you come up with?

        _How many tries did it take you to find the right filter?_
      CSD U1 - PixFilter Mushroom: |-
        # Filtering Images

        Now that we've seen how a single pixel can be filtered to change its color, let's try applying a filter to an image made of multiple pixels. The filter you create will be applied to each pixel in the image - and you still have the light bulbs available to experiment with how your filter will work with individual colors.

        # Do This

        Here's a picture of a red mushroom - you're going to try and turn it into a yellow mushroom.

        -   First, determine which bit needs to change in order to turn red into yellow
        -   Once you've figured out which bit needs changing, use the filter dropdowns to make all of the red areas turn yellow
        -   After you've got the filter working so that the red has turned yellow, see if you can come up with filters that turn the mushroom other colors

        _How many tries did it take you to find the right filter?_
      CSD U1 - PixFilter UnFilter: |-
        # UnFiltering

        Bit filters can be used to _undo_ filtering as well. Here's an image of a bird that's been filtered from it's original colors. Can you get it back to normal?

        # Do This

        <img src="https://images.code.org/c15636bda16e8792c59ac955332e37a5-image-1471372091393.22.56.png" style="float:right; width: 200px"/>
        Here's what our bird should look like. Use the filter to get him back to normal.

        -   Decide which colors (and so which bits) you need to change. You might need to write your thoughts with pencil and paper.
        -   Once you know which bits need changing, set the filter dropdown appropriately to test your answer
        -   After you've fixed the image, write down both your process and your final filter in the Level 6 section of your Activity Guide

        _How many tries did it take you to find the right filter?_
      CSD U2 CSS explore CSS: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"markdown="1">
        <details>

        <summary>

        **Hvernig skipti ég á milli skráa?**

        </summary>

        Smelltu á heiti skrárinnar sem þú vilt skoða, í valmyndinni vinstra megin á skjánum.

        </details>
        </div>

        # Að bæta við sniði

        Þetta Vefsmiðjuverkefni er að nota nýtt tungumál til að bæta sniði (útliti) við síðuna. Skoðaðu með félaga skrárnar `index.html` og `style.css`. Undirbúðu þig fyrir að ræða eftirfarandi spurningar.

        -   Hvaða breytingar hefur þetta nýja tungumál gert á síðunni?
        -   Hvernig er þetta tungumál ólíkt HTML?
        -   Hvernig tengjast skrárnar `index.html` og `style.css`?
      CSD U2 CSS explore CSS_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"markdown="1">
        <details>

        <summary>

        **Hvernig skipti ég á milli skráa?**

        </summary>

        Smelltu á heiti skrárinnar sem þú vilt skoða, í valmyndinni vinstra megin á skjánum.

        </details>
        </div>

        # Að bæta við sniði

        Þetta Vefsmiðjuverkefni er að nota nýtt tungumál til að bæta sniði (útliti) við síðuna. Skoðaðu með félaga skrárnar `index.html` og `style.css`. Undirbúðu þig fyrir að ræða eftirfarandi spurningar.

        -   Hvaða breytingar hefur þetta nýja tungumál gert á síðunni?
        -   Hvernig er þetta tungumál ólíkt HTML?
        -   Hvernig tengjast skrárnar `index.html` og `style.css`?
      CSD U2 CSS explore CSS_2019: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"markdown="1">
        <details>

        <summary>

        **Hvernig skipti ég á milli skráa?**

        </summary>

        Smelltu á heiti skrárinnar sem þú vilt skoða, í valmyndinni vinstra megin á skjánum.

        </details>
        </div>

        # Að bæta við sniði

        Þetta Vefsmiðjuverkefni er að nota nýtt tungumál til að bæta sniði (útliti) við síðuna. Skoðaðu með félaga skrárnar `index.html` og `style.css`. Undirbúðu þig fyrir að ræða eftirfarandi spurningar.

        -   Hvaða breytingar hefur þetta nýja tungumál gert á síðunni?
        -   Hvernig er þetta tungumál ólíkt HTML?
        -   Hvernig tengjast skrárnar `index.html` og `style.css`?
      CSD U2 Debugging 1: "# Villuleit\n\n<div style=\"float: right; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n\n**Hvað
        er villa?**\n\n</summary>\nVillur eru mistök í kóða sem verða til þess að
        hann virkar ekki eins og búist var við.\n</details>\n<details>\n<summary>\n\n**Hvað
        er villuleit?**\n\n</summary>\nVilluleit er það að finna og laga villur. Ferlið
        er það sama og fyrir lausn vandamála almennt svo þú getur notað þær aðferðir
        við að finna og laga villur. \n\n</details>\n<details>\n<summary>\n\n**Dæmi
        um villur**\n\n</summary>\n\nVillur geta verið hvað sem er en þær orsaka að
        kóðinn virkar ekki rétt. Nokkur dæmi eru ritvillur, kóði settur á rangan stað,
        rangt tag notað eða það gleymdist að loka tagi.\n\n</details>\n</div>\n\nTölvukóði
        er skrifaður af mannfólki og allar mannverur gera mistök. Það er hluti af
        því að vera góður tölvunarfræðingur að geta fundið eigin villur og lagfært
        þær. Í tölvunarfræði eru villur kenndar við pöddur (enska: bugs) eða lýs og
        sagt að kóði sé lúsugur ef það eru villur í honum. Að lagfæra villurnar er
        þá að aflúsa kóðann (enska: debug)! Í næstu áföngum munt þú öðlast færni í
        að aflúsa kóða.\n\n# Gerðu þetta\n\n<img src=\"https://images.code.org/ed7cb1f2e093b9c36b82bfbf9bbcd76b-image-1474383288840.54.26
        AM.png\" style=\"float:right;border:black solid 5px;width:200px\">\n\n-   Skoðaðu
        kóðann fyrir vefsíðuna og ræddu við félaga hvað það er sem veldur þessum tveimur
        villum:\n    \\\\t\\* Fyrirsögnin er ekki nógu stór.\n    \\\\t\\* Annað atriðið
        í listanum er ekki tölusett.\n-   Aflúsaðu kóðann svo að útkoman í lokin passi
        við myndina hægra megin."
      CSD U2 Debugging 1_2018: "# Villuleit\n\n<div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary>\n\n**Hvað er villa?**\n\n</summary>\nVillur
        eru mistök í kóða sem verða til þess að hann virkar ekki eins og búist var
        við.\n</details>\n<details>\n<summary>\n\n**Hvað er villuleit?**\n\n</summary>\nVilluleit
        er það að finna og laga villur. Ferlið er það sama og fyrir lausn vandamála
        almennt svo þú getur notað þær aðferðir við að finna og laga villur. \n\n</details>\n<details>\n<summary>\n\n**Dæmi
        um villur**\n\n</summary>\n\nVillur geta verið hvað sem er en þær orsaka að
        kóðinn virkar ekki rétt. Nokkur dæmi eru ritvillur, kóði settur á rangan stað,
        rangt tag notað eða það gleymdist að loka tagi.\n\n</details>\n</div>\n\nTölvukóði
        er skrifaður af mannfólki og allar mannverur gera mistök. Það er hluti af
        því að vera góður tölvunarfræðingur að geta fundið eigin villur og lagfært
        þær. Í tölvunarfræði eru villur kenndar við pöddur (enska: bugs) eða lýs og
        sagt að kóði sé lúsugur ef það eru villur í honum. Að lagfæra villurnar er
        þá að aflúsa kóðann (enska: debug)! Í næstu áföngum munt þú öðlast færni í
        að aflúsa kóða.\n\n# Gerðu þetta\n\n<img src=\"https://images.code.org/ed7cb1f2e093b9c36b82bfbf9bbcd76b-image-1474383288840.54.26
        AM.png\" style=\"float:right;border:black solid 5px;width:200px\">\n\n-   Skoðaðu
        kóðann fyrir vefsíðuna og ræddu við félaga hvað það er sem veldur þessum tveimur
        villum:\n    \\\\t\\* Fyrirsögnin er ekki nógu stór.\n    \\\\t\\* Annað atriðið
        í listanum er ekki tölusett.\n-   Aflúsaðu kóðann svo að útkoman í lokin passi
        við myndina hægra megin."
      CSD U2 Debugging 1_2019: "# Villuleit\n\n<div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary>\n\n**Hvað er villa?**\n\n</summary>\nVillur
        eru mistök í kóða sem verða til þess að hann virkar ekki eins og búist var
        við.\n</details>\n<details>\n<summary>\n\n**Hvað er villuleit?**\n\n</summary>\nVilluleit
        er það að finna og laga villur. Ferlið er það sama og fyrir lausn vandamála
        almennt svo þú getur notað þær aðferðir við að finna og laga villur. \n\n</details>\n<details>\n<summary>\n\n**Dæmi
        um villur**\n\n</summary>\n\nVillur geta verið hvað sem er en þær orsaka að
        kóðinn virkar ekki rétt. Nokkur dæmi eru ritvillur, kóði settur á rangan stað,
        rangt tag notað eða það gleymdist að loka tagi.\n\n</details>\n</div>\n\nTölvukóði
        er skrifaður af mannfólki og allar mannverur gera mistök. Það er hluti af
        því að vera góður tölvunarfræðingur að geta fundið eigin villur og lagfært
        þær. Í tölvunarfræði eru villur kenndar við pöddur (enska: bugs) eða lýs og
        sagt að kóði sé lúsugur ef það eru villur í honum. Að lagfæra villurnar er
        þá að aflúsa kóðann (enska: debug)! Í næstu áföngum munt þú öðlast færni í
        að aflúsa kóða.\n\n# Gerðu þetta\n\n<img src=\"https://images.code.org/ed7cb1f2e093b9c36b82bfbf9bbcd76b-image-1474383288840.54.26
        AM.png\" style=\"float:right;border:black solid 5px;width:200px\">\n\n-   Skoðaðu
        kóðann fyrir vefsíðuna og ræddu við félaga hvað það er sem veldur þessum tveimur
        villum:\n    \\\\t\\* Fyrirsögnin er ekki nógu stór.\n    \\\\t\\* Annað atriðið
        í listanum er ekki tölusett.\n-   Aflúsaðu kóðann svo að útkoman í lokin passi
        við myndina hægra megin."
      CSD U2 Debugging 2: "# Villuleit\n\n<div style=\"float: right; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n\n**Hvað
        er villa?**\n\n</summary>\nVillur eru mistök í kóða sem valda því að hann
        virkar ekki eins og ætlað var.\n</details>\n<details>\n<summary>\n\n**Hvað
        er villuleit?**\n\n</summary>\nVilluleit er það að finna og lagfæra villur.
        Villuleitarferlið er það sama og við lausn vandamála almennt svo þær aðferðir
        nýtast hér. \n</details>\n<details>\n<summary>\n\n**Dæmi um villur?**\n\n</summary>\n\nVillur
        geta verið hvað sem lætur kóðann ekki virka sem skyldi. Nokkur dæmi eru ritvillur,
        kóði settur á rangan stað, rangt tag notað eða gleymt að loka tagi.\n\n</details>\n</div>\n\nMeiri
        þjálfun í villuleit! Villuleitin hér er svolítið erfiðari en í síðustu síðu.\n\n#
        Gerðu þetta\n\n<img src=\"https://images.code.org/61190513dba270c731251df168b98f80-image-1474383960371.02.38
        AM.png\" style=\"float:right;border:5px black solid;width:250px\">\n\n-   Ræddu
        við félaga þinn hvaða villur gætu verið á þessari síðu.\n-   Finndu og lagaðu
        allar villurnar svo að síðan verði eins og síðan hér til hægri."
      CSD U2 Debugging 2_2018: "# Villuleit\n\n<div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary>\n\n**Hvað er villa?**\n\n</summary>\nVillur
        eru mistök í kóða sem valda því að hann virkar ekki eins og ætlað var.\n</details>\n<details>\n<summary>\n\n**Hvað
        er villuleit?**\n\n</summary>\nVilluleit er það að finna og lagfæra villur.
        Villuleitarferlið er það sama og við lausn vandamála almennt svo þær aðferðir
        nýtast hér. \n</details>\n<details>\n<summary>\n\n**Dæmi um villur?**\n\n</summary>\n\nVillur
        geta verið hvað sem lætur kóðann ekki virka sem skyldi. Nokkur dæmi eru ritvillur,
        kóði settur á rangan stað, rangt tag notað eða gleymt að loka tagi.\n\n</details>\n</div>\n\nMeiri
        þjálfun í villuleit! Villuleitin hér er svolítið erfiðari en í síðustu síðu.\n\n#
        Gerðu þetta\n\n<img src=\"https://images.code.org/61190513dba270c731251df168b98f80-image-1474383960371.02.38
        AM.png\" style=\"float:right;border:5px black solid;width:250px\">\n\n-   Ræddu
        við félaga þinn hvaða villur gætu verið á þessari síðu.\n-   Finndu og lagaðu
        allar villurnar svo að síðan verði eins og síðan hér til hægri."
      CSD U2 Debugging 2_2019: "# Villuleit\n\n<div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary>\n\n**Hvað er villa?**\n\n</summary>\nVillur
        eru mistök í kóða sem valda því að hann virkar ekki eins og ætlað var.\n</details>\n<details>\n<summary>\n\n**Hvað
        er villuleit?**\n\n</summary>\nVilluleit er það að finna og lagfæra villur.
        Villuleitarferlið er það sama og við lausn vandamála almennt svo þær aðferðir
        nýtast hér. \n</details>\n<details>\n<summary>\n\n**Dæmi um villur?**\n\n</summary>\n\nVillur
        geta verið hvað sem lætur kóðann ekki virka sem skyldi. Nokkur dæmi eru ritvillur,
        kóði settur á rangan stað, rangt tag notað eða gleymt að loka tagi.\n\n</details>\n</div>\n\nMeiri
        þjálfun í villuleit! Villuleitin hér er svolítið erfiðari en í síðustu síðu.\n\n#
        Gerðu þetta\n\n<img src=\"https://images.code.org/61190513dba270c731251df168b98f80-image-1474383960371.02.38
        AM.png\" style=\"float:right;border:5px black solid;width:250px\">\n\n-   Ræddu
        við félaga þinn hvaða villur gætu verið á þessari síðu.\n-   Finndu og lagaðu
        allar villurnar svo að síðan verði eins og síðan hér til hægri."
      CSD U2 Debugging 3: "# Villuleit\n\n<div style=\"float:right; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n\n**Hvað
        er villa?**\n\n</summary>\nVillur eru mistök í kóða sem valda því að kóðinn
        virkar ekki sem skyldi.\n</details>\n<details>\n<summary>\n\n**Hvað er villuleit?**\n\n</summary>\nVilluleit
        er það að finna og lagfæra villur. Villuleitarferlið er það sama og fyrir
        lausn vandamála almennt svo færni á því sviði nýtist við villuleit. \n</details>\n<details>\n<summary>\n\n**Dæmi
        um villur**\n\n</summary>\nVillur geta verið hvað sem lætur kóðann ekki virka
        eins og ætlað var. Nokkur dæmi eru ritvillur, kóði settur á rangan stað, rangt
        tag notað eða gleymt að loka tagi.\n</details>\n<details>\n<summary>\n\n**Af
        hverju hættir forritstúlkurinn stundum að virka?**\n\n</summary>\n\nStundum
        eru svo margar villur í HTML kóðanum að túlkurinn getur ekki lesið hann almennilega
        og hættir því alveg að virka, líka í þeim hlutum kóðans sem eru réttir. Þegar
        búið er að lagfæra villurnar mun túlkurinn virka aftur.\n\n</details>\n</div>\n\nÞessi
        síða er með myndir. Myndirnar gera villuleitina svolítið flóknari. Getur þú
        aflúsað þessa síðu?\n\n# Gerðu þetta\n\n-   Ræddu við félaga þinn hvað geti
        verið að valda villunum.\n-   Lagaðu villurnar svo að síðan þín líti út eins
        og fyrirmyndin hér fyrir neðan.\n\n![](<https://images.code.org/4a9ac71bcf6c04775df791516562cd47-image-1508779270522.56.24
        AM.png>)"
      CSD U2 Debugging 3_2018: "# Villuleit\n\n<div style=\"float:right; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n\n**Hvað
        er villa?**\n\n</summary>\nVillur eru mistök í kóða sem valda því að kóðinn
        virkar ekki sem skyldi.\n</details>\n<details>\n<summary>\n\n**Hvað er villuleit?**\n\n</summary>\nVilluleit
        er það að finna og lagfæra villur. Villuleitarferlið er það sama og fyrir
        lausn vandamála almennt svo færni á því sviði nýtist við villuleit. \n</details>\n<details>\n<summary>\n\n**Dæmi
        um villur**\n\n</summary>\nVillur geta verið hvað sem lætur kóðann ekki virka
        eins og ætlað var. Nokkur dæmi eru ritvillur, kóði settur á rangan stað, rangt
        tag notað eða gleymt að loka tagi.\n</details>\n<details>\n<summary>\n\n**Af
        hverju hættir forritstúlkurinn stundum að virka?**\n\n</summary>\n\nStundum
        eru svo margar villur í HTML kóðanum að túlkurinn getur ekki lesið hann almennilega
        og hættir því alveg að virka, líka í þeim hlutum kóðans sem eru réttir. Þegar
        búið er að lagfæra villurnar mun túlkurinn virka aftur.\n\n</details>\n</div>\n\nÞessi
        síða er með myndir. Myndirnar gera villuleitina svolítið flóknari. Getur þú
        aflúsað þessa síðu?\n\n# Gerðu þetta\n\n-   Ræddu við félaga þinn hvað geti
        verið að valda villunum.\n-   Lagaðu villurnar svo að síðan þín líti út eins
        og fyrirmyndin hér fyrir neðan.\n\n![](<https://images.code.org/4a9ac71bcf6c04775df791516562cd47-image-1508779270522.56.24
        AM.png>)"
      CSD U2 Debugging 3_2019: "# Villuleit\n\n<div style=\"float:right; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n\n**Hvað
        er villa?**\n\n</summary>\nVillur eru mistök í kóða sem valda því að kóðinn
        virkar ekki sem skyldi.\n</details>\n<details>\n<summary>\n\n**Hvað er villuleit?**\n\n</summary>\nVilluleit
        er það að finna og lagfæra villur. Villuleitarferlið er það sama og fyrir
        lausn vandamála almennt svo færni á því sviði nýtist við villuleit. \n</details>\n<details>\n<summary>\n\n**Dæmi
        um villur**\n\n</summary>\nVillur geta verið hvað sem lætur kóðann ekki virka
        eins og ætlað var. Nokkur dæmi eru ritvillur, kóði settur á rangan stað, rangt
        tag notað eða gleymt að loka tagi.\n</details>\n<details>\n<summary>\n\n**Af
        hverju hættir forritstúlkurinn stundum að virka?**\n\n</summary>\n\nStundum
        eru svo margar villur í HTML kóðanum að túlkurinn getur ekki lesið hann almennilega
        og hættir því alveg að virka, líka í þeim hlutum kóðans sem eru réttir. Þegar
        búið er að lagfæra villurnar mun túlkurinn virka aftur.\n\n</details>\n</div>\n\nÞessi
        síða er með myndir. Myndirnar gera villuleitina svolítið flóknari. Getur þú
        aflúsað þessa síðu?\n\n# Gerðu þetta\n\n-   Ræddu við félaga þinn hvað geti
        verið að valda villunum.\n-   Lagaðu villurnar svo að síðan þín líti út eins
        og fyrirmyndin hér fyrir neðan.\n\n![](<https://images.code.org/4a9ac71bcf6c04775df791516562cd47-image-1508779270522.56.24
        AM.png>)"
      CSD U2 Debugging 4: |-
        # Mótun útlits

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        **Hvað eru bil?**

        </summary>
        Bil eru þeir stafir sem sjást sem eyður á skjánum, svo sem stafabil, dálkbil eða ný lína. Bil aðskilja hluta skjals svo það sé auðveldara að lesa skjalið. Í HTML kóða eru ný atriði yfirleitt sett á nýju línu, svo það sé auðveldara að lesa kóðann, en það hefur engin áhrif á það hvernig vefsíðan birtist.
        </details>
        <details>

        <summary>
        **Hvað er inndráttur?**

        </summary>
        Inndráttur er það þegar texti byrjar innar á síðunni en venjulega til að sýna að inndregnu línurnar séu einhvern veginn saman.  Í kóða hjálpar inndráttur að sýna uppbyggingu forrits. Í HTML er venjan að hafa einingar inndregnar ef þær eru innan í öðrum einingum. Hér er dæmi:
        <pre>
           &lt;body&gt;
              &lt;p&gt;Þessi efnisgrein er innan í "body" einingunni.&lt;/p&gt;
           &lt;/body&gt;
        </pre>

        </details>
        <details>
        <summary>

        **Hvað er útlitsmótun?**

        </summary>
        Útlitsmótun er það að stilla texta upp svo það sé auðveldara að lesa hann. Algengasta útlitsmótun á HTML er inndráttur. Einingar sem eru innan í öðrum einingum eru lengra til hægri í kóðanum. Hér er dæmi:
        <pre>
           &lt;body&gt;
              &lt;p&gt;Þessi efnisgrein er innan í "body" einingunni.&lt;/p&gt;
           &lt;/body&gt;
        </pre>
        </details>
        <details>
        <summary>

        **Af hverju hættir forritstúlkurinn stundum að virka?**

        </summary>

        Stundum eru svo margar villur í HTML kóðanum að túlkurinn getur ekki lesið hann almennilega og hættir því alveg að virka, líka í þeim hlutum kóðans sem eru réttir. Þegar búið er að lagfæra villurnar mun túlkurinn virka aftur.

        </details>
        </div>

        Útlitsmótun kóða getur auðveldað eða torveldað villuleit. Ef þú notar  **bil** og **inndrátt**, verður auðveldara að lesa og laga kóðann.

        # Gerðu þetta

        -   Skoðaðu kóðann með félaga þínum og ræddu hvernig ætti að útlitsmóta kóðann svo hann sé auðlesnari.
        -   Gerðu kóðann auðlesnari með því að bæta inn auðum línum og inndrætti.
        -   Lagaðu allar villurnar svo síðan þín verði eins og fyrirmyndin hér fyrir neðan.

        ![](<https://images.code.org/7e194db101f71235340fc075bf09776c-image-1508777739384.46.13 AM.png>)
      CSD U2 Debugging 4_2018: |-
        # Mótun útlits

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        **Hvað eru bil?**

        </summary>
        Bil eru þeir stafir sem sjást sem eyður á skjánum, svo sem stafabil, dálkbil eða ný lína. Bil aðskilja hluta skjals svo það sé auðveldara að lesa skjalið. Í HTML kóða eru ný atriði yfirleitt sett á nýju línu, svo það sé auðveldara að lesa kóðann, en það hefur engin áhrif á það hvernig vefsíðan birtist.
        </details>
        <details>

        <summary>
        **Hvað er inndráttur?**

        </summary>
        Inndráttur er það þegar texti byrjar innar á síðunni en venjulega til að sýna að inndregnu línurnar séu einhvern veginn saman.  Í kóða hjálpar inndráttur að sýna uppbyggingu forrits. Í HTML er venjan að hafa einingar inndregnar ef þær eru innan í öðrum einingum. Hér er dæmi:
        <pre>
           &lt;body&gt;
              &lt;p&gt;Þessi efnisgrein er innan í "body" einingunni.&lt;/p&gt;
           &lt;/body&gt;
        </pre>

        </details>
        <details>
        <summary>

        **Hvað er útlitsmótun?**

        </summary>
        Útlitsmótun er það að stilla texta upp svo það sé auðveldara að lesa hann. Algengasta útlitsmótun á HTML er inndráttur. Einingar sem eru innan í öðrum einingum eru lengra til hægri í kóðanum. Hér er dæmi:
        <pre>
           &lt;body&gt;
              &lt;p&gt;Þessi efnisgrein er innan í "body" einingunni.&lt;/p&gt;
           &lt;/body&gt;
        </pre>
        </details>
        <details>
        <summary>

        **Af hverju hættir forritstúlkurinn stundum að virka?**

        </summary>

        Stundum eru svo margar villur í HTML kóðanum að túlkurinn getur ekki lesið hann almennilega og hættir því alveg að virka, líka í þeim hlutum kóðans sem eru réttir. Þegar búið er að lagfæra villurnar mun túlkurinn virka aftur.

        </details>
        </div>

        Útlitsmótun kóða getur auðveldað eða torveldað villuleit. Ef þú notar  **bil** og **inndrátt**, verður auðveldara að lesa og laga kóðann.

        # Gerðu þetta

        -   Skoðaðu kóðann með félaga þínum og ræddu hvernig ætti að útlitsmóta kóðann svo hann sé auðlesnari.
        -   Gerðu kóðann auðlesnari með því að bæta inn auðum línum og inndrætti.
        -   Lagaðu allar villurnar svo síðan þín verði eins og fyrirmyndin hér fyrir neðan.

        ![](<https://images.code.org/7e194db101f71235340fc075bf09776c-image-1508777739384.46.13 AM.png>)
      CSD U2 Debugging 4_2019: |-
        # Mótun útlits

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        **Hvað eru bil?**

        </summary>
        Bil eru þeir stafir sem sjást sem eyður á skjánum, svo sem stafabil, dálkbil eða ný lína. Bil aðskilja hluta skjals svo það sé auðveldara að lesa skjalið. Í HTML kóða eru ný atriði yfirleitt sett á nýju línu, svo það sé auðveldara að lesa kóðann, en það hefur engin áhrif á það hvernig vefsíðan birtist.
        </details>
        <details>

        <summary>
        **Hvað er inndráttur?**

        </summary>
        Inndráttur er það þegar texti byrjar innar á síðunni en venjulega til að sýna að inndregnu línurnar séu einhvern veginn saman.  Í kóða hjálpar inndráttur að sýna uppbyggingu forrits. Í HTML er venjan að hafa einingar inndregnar ef þær eru innan í öðrum einingum. Hér er dæmi:
        <pre>
           &lt;body&gt;
              &lt;p&gt;Þessi efnisgrein er innan í "body" einingunni.&lt;/p&gt;
           &lt;/body&gt;
        </pre>

        </details>
        <details>
        <summary>

        **Hvað er útlitsmótun?**

        </summary>
        Útlitsmótun er það að stilla texta upp svo það sé auðveldara að lesa hann. Algengasta útlitsmótun á HTML er inndráttur. Einingar sem eru innan í öðrum einingum eru lengra til hægri í kóðanum. Hér er dæmi:
        <pre>
           &lt;body&gt;
              &lt;p&gt;Þessi efnisgrein er innan í "body" einingunni.&lt;/p&gt;
           &lt;/body&gt;
        </pre>
        </details>
        <details>
        <summary>

        **Af hverju hættir forritstúlkurinn stundum að virka?**

        </summary>

        Stundum eru svo margar villur í HTML kóðanum að túlkurinn getur ekki lesið hann almennilega og hættir því alveg að virka, líka í þeim hlutum kóðans sem eru réttir. Þegar búið er að lagfæra villurnar mun túlkurinn virka aftur.

        </details>
        </div>

        Útlitsmótun kóða getur auðveldað eða torveldað villuleit. Ef þú notar  **bil** og **inndrátt**, verður auðveldara að lesa og laga kóðann.

        # Gerðu þetta

        -   Skoðaðu kóðann með félaga þínum og ræddu hvernig ætti að útlitsmóta kóðann svo hann sé auðlesnari.
        -   Gerðu kóðann auðlesnari með því að bæta inn auðum línum og inndrætti.
        -   Lagaðu allar villurnar svo síðan þín verði eins og fyrirmyndin hér fyrir neðan.

        ![](<https://images.code.org/7e194db101f71235340fc075bf09776c-image-1508777739384.46.13 AM.png>)
      CSD U2 HTML Adding Paragraphs: |-
        # Bæta texta í body

        Þegar þú byrjar nýtt verkefni í Vefsmiðjunni bætir hún tögunum `<!DOCTYPE>`, `<html>`, `<head>` og `<body>` sjálfkrafa í verkefnið. Allt innihald sem þú vilt láta birtast á vefsíðunni verður að fara á milli `<body>` og `</body>` taganna.

        # Gerðu þetta

        -   Skrifaðu þrjár setningar um eitthver efni innan body taganna á vefsíðunni.
        -   Ýttu á "Endurhlaða og vista" ef þú sérð enga breytingu á forskoðunarsvæðinu.
        -   Berðu verk þitt saman við verk annars. Gættu þess að þið séuð að setja kóða á sama stað.
      CSD U2 HTML Adding Paragraphs pt 2: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        **Hvað er efnisgrein?**
        </summary>
        Efnisgreinar (enska: paragraph) eru merktar með `<p>` tagi í upphafi og `</p>` tagi í lokin. Efnisgreinar í HTML geta verið eitt orð eða margar setningar. Efnisgreinar halda hópi setninga saman og aðgreina hópinn frá öðrum hópum með bili á milli.
        </details>

        <details>
        <summary>**Hvernig bý ég til margar efnisgreinar?**
        </summary>

        Hér er dæmi um nokkur efnisgreinartög í röð. Þessi kóði mundi vera settur innan í "body" tag vefsíðunnar.

        <pre>
        `<p>Þetta er efnisgrein. Í henni eru tvær setningar.</p>`
        `<p>Þetta er önnur efnisgrein.</p>`
        </pre>

        </details>
        </div>

        # Notkun efnisgreinartaga

        `<p>` tagið (efnisgreinartagið) er sett utan um texta til að láta sjást að textinn tilheyri sömu efnisgrein. Að setja texta í efnisgreinartag segir tölvunni að hún eigi að birta textann á ákveðinn hátt, yfirleitt með því að setja bil á milli textans og annars texta.

        # Gerðu þetta

        -   Settu textann sem þú varst að skrifa innan í minnst tvær efnisgreinar með því setja `<p>` og `</p>` tög utan um hann
        -   Berðu þína útkomu saman við útkomu annars. Hvað hefur breyst með það hvernig textinn birtist á síðunni?
      CSD U2 HTML Adding Paragraphs pt 2_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        **Hvað er efnisgrein?**

        </summary>

        Efnisgreinar (enska: paragraph) eru merktar með `<p>` tagi í upphafi og `</p>` tagi í lokin. Efnisgreinar í HTML geta verið eitt orð eða margar setningar. Efnisgreinar halda hópi setninga saman og aðgreina hópinn frá öðrum hópum með bili á milli.

        </details>
        <details>
        <summary>

        **Hvernig bý ég til margar efnisgreinar? </span>**

        </summary>

        Hér er dæmi um nokkur efnisgreinartög í röð. Þessi kóði mundi vera settur innan í "body" tag vefsíðunnar.

        <pre>
        <p>Þetta er efnisgrein. Í henni eru tvær setningar.</p>
        <p>Þetta er önnur efnisgrein.</p>
        </pre>

        </details>
        </div>

        # Notkun efnisgreinartaga

        Efnisgreinartagið `<p>` er sett framan við texta og `</p>` aftan við til að láta textann tilheyra sömu efnisgrein. Að setja texta í efnisgreinartag segir tölvunni að hún eigi að birta textann á ákveðinn hátt, yfirleitt með því að setja bil á milli textans og annars texta.

        # Gerðu þetta

        -   Settu textann sem þú varst að skrifa innan í minnst tvær efnisgreinar með því setja `<p>` og `</p>` tög utan um hann
        -   Berðu þína útkomu saman við útkomu annars. Hvað hefur breyst með það hvernig textinn birtist á síðunni?
      CSD U2 HTML Adding Paragraphs pt 2_2019: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        **Hvað er efnisgrein?**

        </summary>

        Efnisgreinar (enska: paragraph) eru merktar með `<p>` tagi í upphafi og `</p>` tagi í lokin. Efnisgreinar í HTML geta verið eitt orð eða margar setningar. Efnisgreinar halda hópi setninga saman og aðgreina hópinn frá öðrum hópum með bili á milli.

        </details>
        <details>
        <summary>

        **Hvernig bý ég til margar efnisgreinar? </span>**

        </summary>

        Hér er dæmi um nokkur efnisgreinartög í röð. Þessi kóði mundi vera settur innan í "body" tag vefsíðunnar.

        <pre>
        <p>Þetta er efnisgrein. Í henni eru tvær setningar.</p>
        <p>Þetta er önnur efnisgrein.</p>
        </pre>

        </details>
        </div>

        # Notkun efnisgreinartaga

        Efnisgreinartagið `<p>` er sett framan við texta og `</p>` aftan við til að láta textann tilheyra sömu efnisgrein. Að setja texta í efnisgreinartag segir tölvunni að hún eigi að birta textann á ákveðinn hátt, yfirleitt með því að setja bil á milli textans og annars texta.

        # Gerðu þetta

        -   Settu textann sem þú varst að skrifa innan í minnst tvær efnisgreinar með því setja `<p>` og `</p>` tög utan um hann
        -   Berðu þína útkomu saman við útkomu annars. Hvað hefur breyst með það hvernig textinn birtist á síðunni?
      CSD U2 HTML Adding Paragraphs_2018: |-
        # Bæta texta í body

        Þegar þú byrjar nýtt verkefni í Vefsmiðjunni bætir hún tögunum `<!DOCTYPE>`, `<html>`, `<head>` og `<body>` sjálfkrafa í verkefnið. Allt innihald sem þú vilt láta birtast á vefsíðunni verður að fara á milli `<body>` og `</body>` taganna.

        # Gerðu þetta

        -   Skrifaðu þrjár setningar um eitthver efni innan body taganna á vefsíðunni.
        -   Ýttu á "Endurhlaða og vista" ef þú sérð enga breytingu á forskoðunarsvæðinu.
        -   Berðu verk þitt saman við verk annars. Gættu þess að þið séuð að setja kóða á sama stað.
      CSD U2 HTML Adding Paragraphs_2019: |-
        # Bæta texta í body

        Þegar þú byrjar nýtt verkefni í Vefsmiðjunni bætir hún tögunum `<!DOCTYPE>`, `<html>`, `<head>` og `<body>` sjálfkrafa í verkefnið. Allt innihald sem þú vilt láta birtast á vefsíðunni verður að fara á milli `<body>` og `</body>` taganna.

        # Gerðu þetta

        -   Skrifaðu þrjár setningar um eitthver efni innan body taganna á vefsíðunni.
        -   Ýttu á "Endurhlaða og vista" ef þú sérð enga breytingu á forskoðunarsvæðinu.
        -   Berðu verk þitt saman við verk annars. Gættu þess að þið séuð að setja kóða á sama stað.
      CSD U2 HTML Debug Paragraphs: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>Hvað er efnisgrein?</strong>
        </summary>
        Efnisgreinar eru afmarkaðar með tögunum `<p>` í upphafi og `</p>`í lokin. Í HTML geta efnisgreinar haft hvaða lengd sem er, frá einu orði upp í fjölda setninga. Með efnisgreinum eru setningum hópað saman og aðgreindar frá öðrum efnisgreinum með bilum á milli.
        </details>
        <details>
        <summary>
        <strong>Hvers vegna virðist HTML virka jafnvel þó það séu villur í því?
        </strong>
        </summary>
        HTML er lesið af vafranum, sem býr svo til vefsíðurnar. Það eru oft smá-villur í HTML kóðanum, en vafrarnir giska þá yfirleitt á hvað var ætlast til. Stundum eru ágiskanir mismunandi vafra ekki þær sömu! Eina leiðin til að vera viss um að vefsíðan líti út eins og þú ætlaðist til er að nota alltaf réttu tögin á réttan hátt.
        </details>
        <details>
        <summary>

        <strong>Af hverju verður kóðinn stundum bleikur?</strong>

        </summary>

        Vefsmiðjan er forrituð þannig að hún á að greina sumar villur í HTML kóðanum. Þegar hún finnur villur litar hún þann kóða bleikan. Kannske er bara sjálf villan bleik eða þá að villan er einhvers staðar í bleika kóðanum. Þú þarft að villuleita vandlega til að finna villuna.

        </details>
        </div>

        # Villuleit: Laga biluð tög

        Þessi einfalda vefsíða er með vandamál sem hindra að innihaldið birtist rétt. Komdu auga á og lagaðu villurnar. Svona villuleit er oft kölluð að "aflúsa" kóðann.

        # Gerðu þetta

        -   Lagaðu bilaða kóðann svo að vefsíðan birtist rétt
        -   Berðu villurnar sem þú lagaðir saman við villur hjá öðrum
      CSD U2 HTML Debug Paragraphs_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        <strong>Hvað er efnisgrein?</strong>

        </summary>

        Efnisgreinar eru afmarkaðar með tögunum `<p>` í upphafi og `</p>`í lokin. Í HTML geta efnisgreinar haft hvaða lengd sem er, frá einu orði upp í fjölda setninga. Með efnisgreinum eru setningum hópað saman og aðgreindar frá öðrum efnisgreinum með bilum á milli.

        </details>
        <details>
        <summary>

        <strong>Hvers vegna virðist HTML virka jafnvel þó það séu villur í því?</strong>

        </summary>

        HTML er lesið af vafranum, sem býr svo til vefsíðurnar. Það eru oft smá-villur í HTML kóðanum, en vafrarnir giska þá yfirleitt á hvað var ætlast til. Stundum eru ágiskanir mismunandi vafra ekki þær sömu! Eina leiðin til að vera viss um að vefsíðan líti út eins og þú ætlaðist til er að nota alltaf réttu tögin á réttan hátt.

        </details>
        <details>
        <summary>

        <strong>Af hverju verður kóðinn stundum bleikur?</strong>

        </summary>

        Vefsmiðjan er forrituð þannig að hún á að greina sumar villur í HTML kóðanum. Þegar hún finnur villur litar hún þann kóða bleikan. Kannske er bara sjálf villan bleik eða þá að villan er einhvers staðar í bleika kóðanum. Þú þarft að villuleita vandlega til að finna villuna.

        </details>
        </div>

        # Villuleit: Laga biluð tög

        Þessi einfalda vefsíða er með vandamál sem hindra að innihaldið birtist rétt. Komdu auga á og lagaðu villurnar. Svona villuleit er oft kölluð að "aflúsa" kóðann.

        # Gerðu þetta

        -   Lagaðu bilaða kóðann svo að vefsíðan birtist rétt
        -   Berðu þær villur sem þú lagaðir saman við þær hjá öðrum
      CSD U2 HTML Debug Paragraphs_2019: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        <strong>Hvað er efnisgrein?</strong>

        </summary>

        Efnisgreinar eru afmarkaðar með tögunum `<p>` í upphafi og `</p>`í lokin. Í HTML geta efnisgreinar haft hvaða lengd sem er, frá einu orði upp í fjölda setninga. Með efnisgreinum eru setningum hópað saman og aðgreindar frá öðrum efnisgreinum með bilum á milli.

        </details>
        <details>
        <summary>

        <strong>Hvers vegna virðist HTML virka jafnvel þó það séu villur í því?</strong>

        </summary>

        HTML er lesið af vafranum, sem býr svo til vefsíðurnar. Það eru oft smá-villur í HTML kóðanum, en vafrarnir giska þá yfirleitt á hvað var ætlast til. Stundum eru ágiskanir mismunandi vafra ekki þær sömu! Eina leiðin til að vera viss um að vefsíðan líti út eins og þú ætlaðist til er að nota alltaf réttu tögin á réttan hátt.

        </details>
        <details>
        <summary>

        <strong>Af hverju verður kóðinn stundum bleikur?</strong>

        </summary>

        Vefsmiðjan er forrituð þannig að hún á að greina sumar villur í HTML kóðanum. Þegar hún finnur villur litar hún þann kóða bleikan. Kannske er bara sjálf villan bleik eða þá að villan er einhvers staðar í bleika kóðanum. Þú þarft að villuleita vandlega til að finna villuna.

        </details>
        </div>

        # Villuleit: Laga biluð tög

        Þessi einfalda vefsíða er með vandamál sem hindra að innihaldið birtist rétt. Komdu auga á og lagaðu villurnar. Svona villuleit er oft kölluð að "aflúsa" kóðann.

        # Gerðu þetta

        -   Lagaðu bilaða kóðann svo að vefsíðan birtist rétt
        -   Berðu þær villur sem þú lagaðir saman við þær hjá öðrum
      CSD U2 Heading Demo: "# Headings\n\n<div style=\"float: right; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>What
        are headings?</strong></summary>\n\nHeadings are the different sized section
        titles throughout a web page. Headings add structure to your web page by breaking
        it up so its easier for a user to read.\n\n</details>\n<details>\n<summary><strong>How
        do I make different sized headings?</strong></summary>\n\nHeadings come in
        6 different sizes. So far you have primarily used the biggest one: \\<h1>.
        The number '1' in the HTML tag designates that this is the biggest heading.
        The smallest heading is \\<h6>. You can also try the \\<h2>, \\<h3>, \\<h4>,
        and \\<h5> tags, which get smaller as the number gets larger.\n\n</h1>\n</details>\n<details>\n<summary><strong>What
        is HTML?</strong></summary>\n\nHTML stands for Hypertext Markup Language.
        HTML is used to add structure to the content of a web page. HTML uses tags
        to specify where certain structures start and end. These tags are sets of
        characters not found in the English language so that the content and structure
        can be differentiated. \n\n</details>\n<details>\n<summary><strong>What is
        an HTML element?</strong></summary>\n\nAn HTML element is a piece of a website
        that is marked by a start tag and sometimes closed with an end tag. The element
        also includes the content inside the tags. For example: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"
        style=\"width:500px\">\n\n</details>\n<details>\n<summary><strong>What is
        an HTML tag?</strong></summary>\n\nAn HTML tag is the special set of characters
        that tells the machine where the start or end of an HTML element is and what
        type it is.\n\n</details>\n</div>\n\nSo far, you've organized your content
        into paragraphs.  Another way HTML allows you to organize your code is by
        using **headings**.  A heading is a short piece of text that goes at the top
        of a section of content, like a title.\n\nDo This:\n\n-   Find the headings
        in the web page below and use the Inspector Tool to see the code that makes
        them.\n-   Make sure you and your partner agree on what the tags do.\n-   Change
        the code so that \"Drawing\" and \"2 years\" match the headings on the rest
        of the page."
      CSD U2 Heading Demo_2018: "# Headings\n\n<div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary>\n\n**What are headings?**\n\n</summary>\nHeadings
        are the different sized section titles throughout a web page. Headings add
        structure to your web page by breaking it up so its easier for a user to read.\n</details>\n<details>\n<summary>\n\n**How
        do I make different sized headings?**\n\n</summary>\nHeadings come in 6 different
        sizes. So far you have primarily used the biggest one: &lt;h1&gt;. The number
        '1' in the HTML tag designates that this is the biggest heading. The smallest
        heading is &lt;h6&gt;. You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;,
        and &lt;h5&gt; tags, which get smaller as the number gets larger.\n</h1>\n</details>\n<details>\n<summary>\n\n**What
        is HTML?**\n\n</summary>\nHTML stands for Hypertext Markup Language. HTML
        is used to add structure to the content of a web page. HTML uses tags to specify
        where certain structures start and end. These tags are sets of characters
        not found in the English language so that the content and structure can be
        differentiated. \n</details>\n<details>\n<summary>\n\n**What is an HTML element?**\n\n</summary>\nAn
        HTML element is a piece of a website that is marked by a start tag and sometimes
        closed with an end tag. The element also includes the content inside the tags.
        For example: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"
        style=\"width:500px\">\n</details>\n<details>\n<summary>\n\n**What is an HTML
        tag?**\n\n</summary>\n\nAn HTML tag is the special set of characters that
        tells the machine where the start or end of an HTML element is and what type
        it is.\n\n</details>\n</div>\n\nSo far, you've organized your content into
        paragraphs.  Another way HTML allows you to organize your code is by using
        **headings**.  A heading is a short piece of text that goes at the top of
        a section of content, like a title.\n\nDo This:\n\n-   Find the headings in
        the web page below and use the Inspector Tool to see the code that makes them.\n-
        \  Make sure you and your partner agree on what the tags do.\n-   Change the
        code so that \"Drawing\" and \"2 years\" match the headings on the rest of
        the page."
      CSD U2 Heading Demo_2019: "# Fyrirsagnir\n\n<div class=\"no-pullthrough\" style=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n<details>\n\n<summary><strong>Hvað
        eru fyrirsagnir?</strong>\n\n</summary>\nFyrirsagnir (headings) eru misstórar
        yfirskriftir sem skipta vefsíðu í kafla eða hluta. Fyrirsagnir sýna hvernig
        efni vefsíðu er skipulagt í smærri bútum svo það sé auðveldara að lesa hana.\n</details>\n<details>\n<summary><strong>Hvernig
        eru mismunandi stórar fyrirsagnir gerðar?</strong>\n\n</summary>\nFyrirsagnir
        koma í 6 stærðum. Hingað til hefur þú aðallega notað þá stærstu: &lt;h1&gt;.
        Talan '1' í HTML taginu gefur til kynna að þetta sé stærsta fyrirsögnin. Minnsta
        fyrirsögnin er &lt;h6&gt;. Þú getur líka prófað &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;,
        og &lt;h5&gt; tögin, sem verða smærri eftir því sem talan stækkar.\n</details>\n<details>\n<summary><strong>Hvað
        er HTML?</strong>\n\n</summary>\nHTML er skammstöfun fyrir Hypertext Markup
        Language. HTML er notað til að skipuleggja efni vefsíðu. HTML notar tög (tags)
        til að segja til um hvar tiltekinn hluti efnisins byrjar og hvar hann endar.
        Þessi tög eru tákn sem ekki eru notuð í venjulegum texta svo að hægt sé að
        aðgreina hvað er efni og hvað er skipulag. \n</details>\n<details>\n<summary><strong>Hvað
        er HTML eining?</strong>\n\n</summary>\nHTML eining (element) er hluti vefsíðu
        sem er afmarkaður með upphafstagi og (yfirleitt) endatagi. Einingin inniheldur
        líka efnið á milli taganna. Til dæmis: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"
        style=\"width:500px\">\n</details>\n<details>\n<summary><strong>Hvað er HTML
        tag?</strong>\n\n</summary>\n\nHTML tag (tag) er sérstakt tákn sem segir tölvunni
        hvar HTML eining byrjar og endar og hvers konar eining það er.\n\n</details>\n</div>\n\nHingað
        hefur þú skipulagt efnið í efnisgreinum (paragraphs).  En með HTML getur þú
        líka skipulagt efnið með því að nota  **fyrirsagnir**.  Fyrirsögn (heading)
        er stuttur texti sem hafður fyrir ofan hluta eða kafla af efninu. Annað heiti
        væri 'yfirskrift'.\n\n# Gerðu þetta:\n\n-   Finndu fyrirsagnirnar í vefsíðunni
        hér fyrir neðan og notaðu Inspector Tool tækið til að sjá kóðann sem býr þær
        til.\n-   Gættu þess að þú og félagi þinn séuð sammála um hvað þessi tög gera.\n-
        \  Breyttu kóðanum svo að \"Drawing\" og \"2 years\" passi við aðrar fyrirsagnir
        á síðunni."
      CSD U2 Heading Sizes: "# Heading Sizes\n\n<div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary>\n<strong>What are headings?</strong>\n\n</summary>\nHeadings
        are the different sized section titles throughout a web page. Headings add
        structure to your web page by breaking it up so its easier for a user to read.\n</details>\n<details>\n<summary><strong>How
        do I make different sized headings?</strong>\n\n</summary>\nHeadings come
        in 6 different sizes.  The most common heading is &lt;h1&gt; The number 1
        in the HTML tag designates that this is the biggest heading. The smallest
        heading is &lt;h6&gt;. You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;,
        and &lt;h5&gt; tags which get smaller as the number gets larger.\n</details>\n<details>\n<summary><strong>What
        is HTML?</strong>\n\n</summary>\nHTML stands for Hypertext Markup Language.
        HTML is used to add structure to the content of a web page. HTML uses tags
        to specify where certain structures start and end. These tags are sets of
        characters not found in the English language so that the content and structure
        can be differentiated. \n</details>\n<details>\n<summary><strong>What is an
        HTML element?</strong>\n\n</summary>\nAn HTML element is a piece of a website
        that is marked by a start tag and sometimes closed with an end tag. The element
        also includes the content inside the tags. For example: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"
        style=\"width:500px\">\n</details>\n<details>\n<summary><strong>What is an
        HTML tag?</strong>\n\n</summary>\n\nAn HTML tag is the special set of characters
        that tells the machine where the start or end of an HTML element is and what
        type it is.\n\n</details>\n</div>\n\nHeadings can come in different sizes.
        \ In this page, there are six different sized headings, but they are all mixed
        up.  Can you and your partner figure out how to fix them?\n\nDo This:\n\n-
        \  Use the inspector tool to figure out what makes the headings different
        sizes\n-   Make sure you and your partner agree on what the different heading
        tags do.\n-   Change the tags so that the headings are in order from biggest
        to smallest, and the text says the correct size, as in the picture below.
        \n\n<img src=\"https://images.code.org/762022f97a355dd63dce5ecc8d0127aa-image-1493161154608.58.15
        PM.png\" style=\"width:100px; float:left\">"
      CSD U2 Heading Sizes_2018: "# Heading Sizes\n\n<div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary>\n\n**What are headings?**\n\n</summary>\nHeadings
        are the different sized section titles throughout a web page. Headings add
        structure to your web page by breaking it up so its easier for a user to read.\n</details>\n<details>\n<summary>\n\n**How
        do I make different sized headings?**\n\n</summary>\nHeadings come in 6 different
        sizes.  The most common heading is &lt;h1&gt; The number 1 in the HTML tag
        designates that this is the biggest heading. The smallest heading is &lt;h6&gt;.
        You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, and &lt;h5&gt; tags
        which get smaller as the number gets larger.\n</details>\n<details>\n<summary>\n\n**What
        is HTML?**\n\n</summary>\nHTML stands for Hypertext Markup Language. HTML
        is used to add structure to the content of a web page. HTML uses tags to specify
        where certain structures start and end. These tags are sets of characters
        not found in the English language so that the content and structure can be
        differentiated. \n</details>\n<details>\n<summary>\n\n**What is an HTML element?**\n\n</summary>\nAn
        HTML element is a piece of a website that is marked by a start tag and sometimes
        closed with an end tag. The element also includes the content inside the tags.
        For example: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"
        style=\"width:500px\">\n</details>\n<details>\n<summary>\n\n**What is an HTML
        tag?**\n\n</summary>\n\nAn HTML tag is the special set of characters that
        tells the machine where the start or end of an HTML element is and what type
        it is.\n\n</details>\n</div>\n\nHeadings can come in different sizes.  In
        this page, there are six different sized headings, but they are all mixed
        up.  Can you and your partner figure out how to fix them?\n\nDo This:\n\n-
        \  Use the inspector tool to figure out what makes the headings different
        sizes\n-   Make sure you and your partner agree on what the different heading
        tags do.\n-   Change the tags so that the headings are in order from biggest
        to smallest, and the text says the correct size, as in the picture below.
        \n\n<img src=\"https://images.code.org/762022f97a355dd63dce5ecc8d0127aa-image-1493161154608.58.15
        PM.png\" style=\"width:100px; float:left\">"
      CSD U2 Heading Sizes_2019: "# Stærð fyrirsagna (headings)\n\n<div class=\"no-pullthrough\"
        style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px\">\n<details>\n\n<summary><strong>Hvað eru fyrirsagnir?</strong>\n\n</summary>\nFyrirsagnir
        (headings) eru notaðar til að skipta vefsíðu upp í hluta eða kafla sem hafa
        heiti. Fyrirsagnir sýna hvernig vefsíða skiptist í aðalkafla og undirkafla
        og auðvelda lestur hennar.\n</details>\n<details>\n<summary><strong>Hvernig
        er efni merkt sem fyrirsögn?</strong>\n\n</summary>\nHTML notar 6 mismunandi
        tög til að afmarka fyrirsagnir eftir mikilvægi þeirra. Algengasta tagið er
        &lt;h1&gt; Talan 1 gefur til kynna að þetta sé aðalfyrirsögn og sú stærsta.
        Minnsta fyrirsögnin er &lt;h6&gt;. Önnur tög fyrirsagna eru &lt;h2&gt;, &lt;h3&gt;,
        &lt;h4&gt; og &lt;h5&gt; sem hafa minna letur eftir því sem talan stækkar.\n</details>\n<details>\n<summary><strong>Hvað
        er HTML?</strong>\n\n</summary>\nHTML er skammstöfun fyrir Hypertext Markup
        Language. HTML er notað til að skipuleggja efni vefsíðu. HTML notar tög (tags)
        til að segja hvar tiltekið efni eða tilteknir hlutar síðunnar byrja og enda.
        Þessi tög eru skrifuð með sérstökum táknum sem ekki finnast í tungumálum svo
        að hægt sé að sjá hvað er innihald og hvað er skipulag síðu. \n</details>\n<details>\n<summary><strong>Hvað
        er HTML eining?</strong>\n\n</summary>\nHTML eining er hluti vefsíðu sem er
        afmarkaður með upphafstagi og oftast með endatagi. Til einingarinnar telst
        líka innihaldið innan í tögunum. Til dæmis: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"
        style=\"width:500px\">\n</details>\n<details>\n<summary><strong>Hvað er HTML
        tag?</strong>\n\n</summary>\n\nHTML eru sérstök stafatákn sem segja vélinni
        hvar HTML eining byrjar og endar og hvers konar eining þetta er.\n\n</details>\n</div>\n\nFyrirsagnir
        geta komið í mismunandi stærðum. Á þessari síðu eru sex mismunandi stórar
        fyrirsagnir, en ekki í neinni sérstakri röð. Getið þið félagi þinn lagað þær?\n\nGerðu
        þetta:\n\n-   Notaðu skoðunartækið (inspector tool) til að sjá hvað það er
        sem gefur fyrirsögnunum mismunandi stærðir\n-   Gættu þess að þið félagi þinn
        séuð sammála um hvað mismunandi fyrirsagnatög gera.\n-   Breyttu tögunum svo
        að fyrirsagnirnar séu í röð frá stærstu til minnstu og að textinn segi til
        um rétta stærð, eins og myndin fyrir neðan sýnir. \n\n<img src=\"https://images.code.org/762022f97a355dd63dce5ecc8d0127aa-image-1493161154608.58.15
        PM.png\" style=\"width:100px; float:left\">"
      CSD U2 Heading Test: "# Headings and Paragraphs\n\n<div style=\"float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary><strong>What is a paragraph element?</strong>\n</summary>\n\nParagraphs
        are marked by opening(`<p>`) and closing(`</p>`) tags as well. Paragraphs
        in HTML can be any length of text from one word to a bunch of sentences. All
        of your text in your web page should be contained in an HTML element (headings
        or paragraphs). Paragraphs group together sets of sentences and put some space
        between that group of text and the next group of text.\n\n</details>\n<details>\n<summary><strong>How
        do I create multiple paragraphs?</strong>\n</summary>\n\nParagraphs are marked
        by opening(`<p>`) and closing(`</p>`) tags as well. To create more than one
        paragraph you will want multiple sets of opening and closing `<p>` tags. For
        example\n\n<pre>\n&lt;p&gt;\n  This is a paragraph.\n&lt;/p&gt;\n&lt;p&gt;\n
        \ This is another paragraph.\n&lt;/p&gt;\n</pre>\n\n</details>\n<details>\n<summary><strong>What
        are headings?</strong>\n</summary>\n\nHeadings are the different sized section
        titles throughout a web page. Headings add structure to your web page by breaking
        it up so its easier for a user to read.\n\n</details>\n<details>\n<summary><strong>How
        do I make different sized headings?</strong>\n</summary>\n\nHeadings come
        in 6 different sizes. So far you have primarily used the biggest one \\<h1>.
        The number 1 in the HTML tag designates that this is the biggest heading.
        The smallest heading is \\<h6>. You can also try the \\<h2>, \\<h3>, \\<h4>,
        and \\<h5> tags which get smaller as the number gets larger.\n\n</details>\n<details>\n<summary><strong>What
        is HTML?</strong>\n</summary>\n\nHTML stands for Hypertext Markup Language.
        HTML is used to add structure to the content of a web page. HTML uses tags
        to specify where certain structures start and end. These tags are sets of
        characters not found in the English language so that the content and structure
        can be differentiated. \n\n</details>\n<details>\n<summary><strong>What is
        an HTML element?</strong>\n</summary>\n\nAn HTML element is a piece of a website
        that is marked by a start tag and sometimes closed with an end tag. The element
        also includes the content inside the tags. For example:\n\n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"
        style=\"width:500px\">\n\n</details>\n<details>\n<summary><strong>What is
        an HTML tag?</strong>\n</summary>\n\nAn HTML tag is the special set of characters
        that tells the machine where the start or end of an HTML element is and what
        type it is.\n\n</details>\n</div>\n\nThe author of this page added in a lot
        of content, but did not think about structure.  All of the text is mashed
        together.\n\nDo This:\n\n-   Look through the content with your partner and
        decide what you think the best structure should be.\n-   Use your heading
        and paragraph tags to code the structure into the page."
      CSD U2 Heading Test_2018: "# Headings and Paragraphs\n\n<div style=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary><strong>What is a paragraph element?</strong></summary>\n\nParagraphs
        are marked by opening(`<p>`) and closing(`</p>`) tags as well. Paragraphs
        in HTML can be any length of text from one word to a bunch of sentences. All
        of your text in your web page should be contained in an HTML element (headings
        or paragraphs). Paragraphs group together sets of sentences and put some space
        between that group of text and the next group of text.\n\n</details>\n<details>\n<summary>\n<strong>How
        do I create multiple paragraphs?</strong>\n\n</summary>\n\nParagraphs are
        marked by opening (`<p>`) and closing (`</p>`) tags as well. To create more
        than one paragraph you will want multiple sets of opening and closing `<p>`
        tags. For example\n\n<pre>\n    &lt;p&gt;\n        This is a paragraph.\n
        \   &lt;/p&gt;\n    &lt;p&gt;\n        This is another paragraph.\n    &lt;/p&gt;\n</pre>\n\n</details>\n<details>\n<summary>\n<strong>What
        are headings?</strong>\n</summary>\nHeadings are the different sized section
        titles throughout a web page. Headings add structure to your web page by breaking
        it up so its easier for a user to read.\n</details>\n<details>\n<summary>\n<strong>How
        do I make different sized headings?</strong>\n</summary>\nHeadings come in
        6 different sizes. So far you have primarily used the biggest one &lt;h1&gt;.
        The number 1 in the HTML tag designates that this is the biggest heading.
        The smallest heading is &lt;h6&gt;. You can also try the &lt;h2&gt;, &lt;h3&gt;,
        &lt;h4&gt;, and &lt;h5&gt; tags which get smaller as the number gets larger.\n</details>\n<details>\n<summary>\n<strong>What
        is HTML?</strong>\n</summary>\nHTML stands for Hypertext Markup Language.
        HTML is used to add structure to the content of a web page. HTML uses tags
        to specify where certain structures start and end. These tags are sets of
        characters not found in the English language so that the content and structure
        can be differentiated. \n</details>\n<details>\n<summary>\n<strong>What is
        an HTML element?</strong>\n</summary>\nAn HTML element is a piece of a website
        that is marked by a start tag and sometimes closed with an end tag. The element
        also includes the content inside the tags. For example: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"
        style=\"width:500px\">\n</details>\n<details>\n<summary>\n<strong>What is
        an HTML tag?</strong>\n</summary>\n\nAn HTML tag is the special set of characters
        that tells the machine where the start or end of an HTML element is and what
        type it is.\n\n</details>\n</div>\n\nThe author of this page added in a lot
        of content, but did not think about structure.  All of the text is mashed
        together.\n\nDo This:\n\n-   Look through the content with your partner and
        decide what you think the best structure should be.\n-   Use your heading
        and paragraph tags to code the structure into the page."
      CSD U2 Heading Test_2019: "# Fyrirsagnir og efnisgreinar\n\n<div class=\"no-pullthrough\"
        style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px\">\n<details>\n\n<summary><strong>Hvað er efnisgrein?</strong></summary>\n\nEfnisgreinar
        (paragraphs) eru afmarkaðar með upphafstaginu (`<p>`) og endataginu (`</p>`).
        Efnisgreinar í HTML geta innihaldið eitt orð eða margar setningar. Allur texti
        vefsíðu ætti að vera í HTML einingum (fyrirsögnum eða efnisgreinum). Efnisgreinar
        mynda hóp setninga og setja bil á milli eins setningahóps og þess næsta.\n\n</details>\n<details>\n<summary>\n<strong>Hvernig
        bý ég til margar efnisgreinar?</strong>\n\n</summary>\n\nEfnisgreinar eru
        afmarkaðar með upphafstagi (`<p>`) og þær hafa líka endatag (`</p>`). Til
        að hafa margar efnisgreinar þarf að setja hverja þeirra inn í `<p>` tag. Til
        dæmis\n\n<pre>\n    &lt;p&gt;\n        Þetta er efnisgrein.\n    &lt;/p&gt;\n
        \   &lt;p&gt;\n        Þetta er önnur efnisgrein.\n    &lt;/p&gt;\n</pre>\n\n</details>\n<details>\n<summary>\n<strong>Hvað
        eru fyrirsagnir?</strong>\n</summary>\nFyrirsagnir (headings) eru notaðar
        til að skipta vefsíðu upp í hluta eða kafla sem hafa heiti. Fyrirsagnir sýna
        hvernig vefsíða skiptist í aðalkafla og undirkafla og auðvelda lestur hennar.\n</details>\n<details>\n<summary><strong>Hvernig
        er efni merkt sem fyrirsögn?</strong>\n</summary>\nHTML notar 6 mismunandi
        tög til að afmarka fyrirsagnir eftir mikilvægi þeirra. Algengasta tagið er
        &lt;h1&gt; Talan 1 gefur til kynna að þetta sé aðalfyrirsögn og sú stærsta.
        Minnsta fyrirsögnin er &lt;h6&gt;. Önnur tög fyrirsagna eru &lt;h2&gt;, &lt;h3&gt;,
        &lt;h4&gt; og &lt;h5&gt; sem hafa minna letur eftir því sem talan stækkar.\n</details>\n<details>\n<summary><strong>Hvað
        er HTML?</strong>\n</summary>\nHTML er skammstöfun fyrir Hypertext Markup
        Language. HTML er notað til að skipuleggja efni vefsíðu. HTML notar tög (tags)
        til að segja hvar tiltekið efni eða tilteknir hlutar síðunnar byrja og enda.
        Þessi tög eru skrifuð með sérstökum táknum sem ekki finnast í tungumálum svo
        að hægt sé að sjá hvað er innihald og hvað er skipulag síðu. \n</details>\n<details>\n<summary><strong>Hvað
        er HTML eining?</strong>\n</summary>\nHTML eining er hluti vefsíðu sem er
        afmarkaður með upphafstagi og oftast með endatagi. Til einingarinnar telst
        líka innihaldið innan í tögunum. Til dæmis: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"
        style=\"width:500px\">\n</details>\n<details>\n<summary><strong>Hvað er HTML
        tag?</strong>\n</summary>\n\nHTML eru sérstök stafatákn sem segja vélinni
        hvar HTML eining byrjar og endar og hvers konar eining þetta er.\n\n</details>\n</div>\n\nHöfundur
        þessarar síðu setti inn fullt af efni en gleymdi að skipuleggja það. Allur
        textinn er í einum graut.\n\nGerðu þetta:\n\n-   Skoðu innihaldið með félaga
        þínum og ákveðið saman hvernig væri best að skipuleggja efnið.\n-   Notaðu
        fyrirsagna- og efnisgreinartög til að kóða skipulag fyrir síðuna."
      CSD U2 Image Tag 1: "<div style=\"float: right; height: 250px; width: 40%; overflow-y:
        scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>How
        do I add images?</strong></summary>\n\nThe `<img>` tag allows you to show
        images on your web page. <br><br>\n\nExample:\n\n<pre>&lt;img src=\"dog.png\"
        alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which
        file to use, extra information, called an **attribute**, is added to the \\<img>
        tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and
        tell the name of the image. Image files names include extensions which tell
        the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing
        tag** because it starts and closes in one tag. To mark this we put the `/`
        which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary><strong>Why
        does an image tag not have a closing tag?</strong></summary>\n\nAn image tag
        doesn't need a closing tag because there is no text content which must be
        wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\n\n</details>\n<details>\n<summary><strong>What is an
        attribute?</strong></summary>\n\nAttributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example \\<img> tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n</details>\n</div>\n\n# Images\n\nA Dog vs Cat web page has
        been started for you. The dog image has already been added to the below web
        page. Use an image tag to add the `cat.jpeg` image to the page below the cat
        heading."
      CSD U2 Image Tag 1_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How do I add images?</strong>
        </summary>

        The `<img>` tag allows you to show images on your web page. <br><br>

        Example:

        <pre>&lt;img src="dog.png" alt="dog jumping"/&gt;</pre><br><br>

        In order to tell the browser which file to use, extra information, called an **attribute**, is added to the \<img> tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and tell the name of the image. Image files names include extensions which tell the computer which type of image they are working with. Common extensions are .jpg, .jpeg, .png. <br><br>

        In addition to have the src attribute, image elements also have the `alt` attribute which describe the image. This is important in case the image doesn’t load or for people who have trouble with their eyesight. <br><br>

        An `<img>` tag is an example of a  **self-closing tag** because it starts and closes in one tag. To mark this we put the `/` which usually goes in the close tag at the end of the image tag.

        </details>
        <details>
        <summary>
        <strong>Why does an image tag not have a closing tag?</strong>
        </summary>
        An image tag doesn't need a closing tag because there is no text content which must be wrapped in tags. The content that shows on the screen is specified through the tags attributes.
        </details>
        <details>
        <summary>
        <strong>What is an attribute?</strong>
        </summary>

        Attributes are extra information included in a tag.  Attributes have names and values. The name tells what type of information is being provided and then the value gives the specific information for that tag.

        For example \<img> tags have two attributes, src and alt. src specifies the name of the image file and alt tells the browser in readable text what the image is.

        </details>
        </div>

        # Images

        A Dog vs Cat web page has been started for you. The dog image has already been added to the below web page. Use an image tag to add the `cat.jpeg` image to the page below the cat heading.
      CSD U2 Image Tag 1_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">
        <details>

        <summary>
        <strong>Hvernig bæti ég við myndum?</strong>
        </summary>

        Með taginu `<img>` getur þú birt myndir á vefsíðunni þinni. <br><br>

        Dæmi:

        <pre>&lt;img src="dog.png" alt="dog jumping"&gt;</pre><br><br>

        Svo að vafrinn viti hvaða mynd á að sýna eru viðbótarupplýsingar settar í það sem nefnist **eigind** (attribute) \<img> tagsins innan í hornklofunum. Eigindin `src` er skammstöfun fyrir enska orðið **s**ou**rc**e (uppruni) og segir til um hvaða mynd á að sækja. Heiti vistaðra mynda hafa endingar sem segja til um gerð þeirra. Algengar endingar eru .jpg, .jpeg, .png. <br><br>

        Auk eigingarinnar src, hafa myndeiningar líka eigindina `alt` sem inniheldur lýsingu á myndinni. Lýsingin birtist ef myndin finnst ekki og er einnig notuð af skjálesurum fyrir sjónskerta. <br><br>

        `<img>` tag er dæmi um **sjálf-lokandi** því að upphafstagið er líka endatag.

        </details>
        <details>
        <summary>
        <strong>Af hverju hefur tagið fyrir mynd ekki endatag?</strong>
        </summary>
        Tagið fyrir mynd þarf ekki endatag því að það hefur engan texta sem þarf að afmarka með endatagi. Innihaldið sem tagið sýnir er skilgreint í eigindum tagsins.
        </details>
        <details>
        <summary>
        <strong>What is an attribute?</strong>
        </summary>

        Eigindin innihalda nánari upplýsingar um hvernig tag á að virka.  Eigind samanstednur af heiti eigindar og gildi hennar. Heitið gefur til kynna hvers konar upplýsingar er verið að veita og gildið er þá sjálfar upplýsingarnar.

        Sem dæmi hafa \<img> tög tvær eigindir, src og alt. src tilgreinir heiti myndskrárinnar og alt segir vafranum með lesanlegan texta hvaða mynd þetta er.

        </details>
        </div>

        # Myndir

        Það hefur verið byrjað á Dog vs Cat vefsíðu fyrir þig. Það er búið að setja myndina af hundinum á vefsíðuna. Skoðaðu kóðann sem lét myndina af hundinum birtast, og notaðu síðan myndtag til að bæta myndinni `cat.jpeg` á síðuna neðan við kattarfyrirsögnina.

        Þessi mynd fannst á vefnum pixabay og var hlaðið upp af notandanum "Alexas\_Fotos", sem notaði notkunarleyfin "free for commercial use" (frjáls notkun) og "no attribution required" (tilvitnun óþörf).
      CSD U2 Image Tag 2: "<div style=\"float: right; height: 250px; width: 40%; overflow-y:
        scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>How
        do I add images?</strong></summary>\n\nThe `<img>` tag allows you to show
        images on your web page. <br><br>\n\nExample:\n\n<pre>&lt;img src=\"dog.png\"
        alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which
        file to use, extra information, called an **attribute**, is added to the \\<img>
        tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and
        tell the name of the image. Image files names include extensions which tell
        the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing
        tag** because it starts and closes in one tag. To mark this we put the `/`
        which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary><strong>Why
        does an image tag not have a closing tag?</strong></summary>\n\nAn image tag
        doesn't need a closing tag because there is no text content which must be
        wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\n\n</details>\n<details>\n<summary><strong>What is an
        attribute?</strong></summary>\n\nAttributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example \\<img> tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n</details>\n</div>\n\n# Uploading Images\n\nYou can upload
        images that you've found elsewhere using the **Add Image** button. Go find
        an image of a different type of pet that you like and download it to your
        computer (using right-click \"Save As\").\n\nOnce you have your images, click
        ![](<https://images.code.org/c35789d00e59b0dbe42879390dabf925-image-1493240590385.01.49
        PM.png>) and upload the image from your computer into your project, where
        you can then use it in your page.\n\n# Do This\n\n-   Upload at least one
        image into this web page\n-   Use the `<img>` tag to display the image(s)
        in your website.\n-   Make sure to add an `alt` attribute."
      CSD U2 Image Tag 2_2018: "<div style=\"float: right; height: 250px; width: 40%;
        overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>How
        do I add images?</strong>\n</summary>\n\nThe `<img>` tag allows you to show
        images on your web page. <br><br>\n\nExample:\n\n<pre>&lt;img src=\"dog.png\"
        alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which
        file to use, extra information, called an **attribute**, is added to the \\<img>
        tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and
        tell the name of the image. Image files names include extensions which tell
        the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing
        tag** because it starts and closes in one tag. To mark this we put the `/`
        which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary>\n<strong>Why
        does an image tag not have a closing tag?</strong>\n</summary>\nAn image tag
        doesn't need a closing tag because there is no text content which must be
        wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\n</details>\n<details>\n<summary>\n<strong>What is an
        attribute?</strong>\n</summary>\n\nAttributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example \\<img> tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n</details>\n</div>\n\n# Uploading Images\n\nYou can upload
        images that you've found elsewhere using the **Add Image** button. Go find
        an image of a different type of pet that you like and download it to your
        computer (using right-click \"Save As\").\n\nOnce you have your images, click
        ![](<https://images.code.org/c35789d00e59b0dbe42879390dabf925-image-1493240590385.01.49
        PM.png>) and upload the image from your computer into your project, where
        you can then use it in your page.\n\n# Do This\n\n-   Upload at least one
        image into this web page\n-   Use the `<img>` tag to display the image(s)
        in your website.\n-   Make sure to add an `alt` attribute."
      CSD U2 Image Tag 2_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>Hvernig bæti ég við myndum?</strong>
        </summary>

        Með taginu `<img>` getur þú birt myndir á vefsíðunni þinni. <br><br>

        Dæmi:

        <pre>&lt;img src="dog.png" alt="dog jumping"&gt;</pre><br><br>

        Svo að vafrinn viti hvaða mynd á að sýna eru viðbótarupplýsingar settar í það sem nefnist **eigind** (attribute) \<img> tagsins innan í hornklofunum. Eigindin `src` er skammstöfun fyrir enska orðið **s**ou**rc**e (uppruni) og segir til um hvaða mynd á að sækja. Heiti vistaðra mynda hafa endingar sem segja til um gerð þeirra. Algengar endingar eru .jpg, .jpeg, .png. <br><br>

        Auk eigingarinnar src, hafa myndeiningar líka eigindina `alt` sem inniheldur lýsingu á myndinni. Lýsingin birtist ef myndin finnst ekki og er einnig notuð af skjálesurum fyrir sjónskerta. <br><br>

        `<img>` tag er dæmi um **sjálf-lokandi** því að upphafstagið er líka endatag.

        </details>
        <details>
        <summary>
        <strong>Af hverju hefur tagið fyrir mynd ekki endatag?</strong>
        </summary>
        Tagið fyrir mynd þarf ekki endatag því að það hefur engan texta sem þarf að afmarka með endatagi. Innihaldið sem tagið sýnir er skilgreint í eigindum tagsins.
        </details>
        <details>
        <summary>
        <strong>What is an attribute?</strong>
        </summary>

        Eigindin innihalda nánari upplýsingar um hvernig tag á að virka.  Eigind samanstednur af heiti eigindar og gildi hennar. Heitið gefur til kynna hvers konar upplýsingar er verið að veita og gildið er þá sjálfar upplýsingarnar.

        Sem dæmi hafa \<img> tög tvær eigindir, src og alt. src tilgreinir heiti myndskrárinnar og alt segir vafranum með lesanlegan texta hvaða mynd þetta er.

        </details>
        </div>

        # Að hlaða upp myndum

        Þú getur hlaðið upp myndum sem þú átt eða hefur fundið annars staðar með því að nota **Add Image** hnappinn. Finndu mynd af einhverju uppáhaldsdýri og vistaðu hana á tölvuna (hægrismelltu og notaðu "Save Image").

        Þegar myndin er vistuð skaltu smella á ![](<https://images.code.org/c35789d00e59b0dbe42879390dabf925-image-1493240590385.01.49 PM.png>) og hlaða myndinni upp frá tölvunni og í verkefnið hér svo þú getir notað hana á vefsíðunni.

        # Gerðu þetta

        -   Hladdu upp að minnsta kosti einni mynd
        -   Notaðu `<img>` tagið til að birta myndina á vefsíðunni.
        -   Mundu eftir að hafa `alt` eigind með texta.
      CSD U2 Image Tag Attribution: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>How
        do I add images?</strong></summary>\n\nThe `<img>` tag allows you to show
        images on your web page. <br><br>\n\nExample:\n\n<pre>&lt;img src=\"dog.png\"
        alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which
        file to use, extra information, called an **attribute**, is added to the \\<img>
        tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and
        tell the name of the image. Image files names include extensions which tell
        the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing
        tag** because it starts and closes in one tag. To mark this we put the `/`
        which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary><strong>Why
        does an image tag not have a closing tag?</strong></summary>\n\nAn image tag
        doesn't need a closing tag because there is no text content which must be
        wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\n\n</details>\n<details>\n<summary><strong>What is an
        attribute?</strong></summary>\n\nAttributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example \\<img> tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n</details>\n</div>\n\n# Giving Credit\n\nWhen using a Creative
        Commons licensed image, you need to give credit to the original creator (this
        is also called _attribution_). There are lots of ways to provide attribution,
        but the easiest way is to add text below the image that identifies the creator
        and website it came from.\n\n# Do This\n\nIn this page we've already added
        and attributed an image of a frog. Use the Creative Commons search engine
        to find another image of an amphibian. Add your found image to this page,
        along with proper attribution, including:\n\n-   The name of the creator (if
        available)\n-   The website it was found on (e.g. commons.wikimedia.org)\n-
        \  The license it was published under (e.g. CC-BY)"
      CSD U2 Image Tag Attribution_2018: "<div style=\"float: right; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>How
        do I add images?</strong>\n</summary>\n\nThe `<img>` tag allows you to show
        images on your web page. <br><br>\n\nExample:\n\n<pre>&lt;img src=\"dog.png\"
        alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which
        file to use, extra information, called an **attribute**, is added to the \\<img>
        tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and
        tell the name of the image. Image files names include extensions which tell
        the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing
        tag** because it starts and closes in one tag. To mark this we put the `/`
        which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary>\n<strong>Why
        does an image tag not have a closing tag?</strong>\n</summary>\nAn image tag
        doesn't need a closing tag because there is no text content which must be
        wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\n</details>\n<details>\n<summary>\n<strong>What is an
        attribute?</strong>\n</summary>\n\nAttributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example \\<img> tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n</details>\n</div>\n\n# Giving Credit\n\nWhen using a Creative
        Commons licensed image, you need to give credit to the original creator (this
        is also called _attribution_). There are lots of ways to provide attribution,
        but the easiest way is to add text below the image that identifies the creator
        and website it came from.\n\n# Do This\n\nIn this page we've already added
        and attributed an image of a frog. Use the Creative Commons search engine
        to find another image of an amphibian. Add your found image to this page,
        along with proper attribution, including:\n\n-   The name of the creator (if
        available)\n-   The website it was found on (e.g. commons.wikimedia.org)\n-
        \  The license it was published under (e.g. CC-BY)"
      CSD U2 Image Tag Attribution_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>Hvernig bæti ég við myndum?</strong>
        </summary>

        Með taginu `<img>` getur þú birt myndir á vefsíðunni þinni. <br><br>

        Dæmi:

        <pre>&lt;img src="dog.png" alt="dog jumping"&gt;</pre><br><br>

        Svo að vafrinn viti hvaða mynd á að sýna eru viðbótarupplýsingar settar í það sem nefnist **eigind** (attribute) \<img> tagsins innan í hornklofunum. Eigindin `src` er skammstöfun fyrir enska orðið **s**ou**rc**e (uppruni) og segir til um hvaða mynd á að sækja. Heiti vistaðra mynda hafa endingar sem segja til um gerð þeirra. Algengar endingar eru .jpg, .jpeg, .png. <br><br>

        Auk eigingarinnar src, hafa myndeiningar líka eigindina `alt` sem inniheldur lýsingu á myndinni. Lýsingin birtist ef myndin finnst ekki og er einnig notuð af skjálesurum fyrir sjónskerta. <br><br>

        `<img>` tag er dæmi um **sjálf-lokandi** því að upphafstagið er líka endatag.

        </details>
        <details>
        <summary>
        <strong>Af hverju hefur tagið fyrir mynd ekki endatag?</strong>
        </summary>
        Tagið fyrir mynd þarf ekki endatag því að það hefur engan texta sem þarf að afmarka með endatagi. Innihaldið sem tagið sýnir er skilgreint í eigindum tagsins.
        </details>
        <details>
        <summary>
        <strong>What is an attribute?</strong>
        </summary>

        Eigindin innihalda nánari upplýsingar um hvernig tag á að virka.  Eigind samanstednur af heiti eigindar og gildi hennar. Heitið gefur til kynna hvers konar upplýsingar er verið að veita og gildið er þá sjálfar upplýsingarnar.

        Sem dæmi hafa \<img> tög tvær eigindir, src og alt. src tilgreinir heiti myndskrárinnar og alt segir vafranum með lesanlegan texta hvaða mynd þetta er.

        </details>
        </div>

        # Tilvísanir

        Þegar mynd, sem annar á, er notuð með Creative Commons leyfi, verður þú að hafa tilvísun á eigandann eða upprunann (þetta er einnig kallað _eignun_). Það eru margar aðferðir til að koma eignun á framfæri, en auðveldast er að bæta við texta neðan við myndina sem tilgreinir eigandann og vefinn þaðan sem myndin kom.

        # Gerðu þetta

        Á þessari síðu höfum við sett inn mynd af froski og bætt við eignun fyrir hana. Notaðu Creative Commons leitarvélina til að finna aðra mynd af froskdýri. Bættu myndinni á þessa síðu með viðeigandi eignun, þar á meðal:

        -   Nafni höfundar (ef það er tiltækt)
        -   Vefinn sem myndin fannst á (t.d. commons.wikimedia.org)
        -   Leyfið sem birting myndarinnar er háð (e.g. CC-BY)
      CSD U2 Image Tag Debug: "<div style=\"float: right; height: 250px; width: 40%;
        overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>How
        do I add images?</strong>\n</summary>\n\nThe `<img>` tag allows you to show
        images on your web page. <br><br>\n\nExample:\n\n<pre>&lt;img src=\"dog.png\"
        alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which
        file to use, extra information, called an **attribute**, is added to the \\<img>
        tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and
        tell the name of the image. Image files names include extensions which tell
        the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing
        tag** because it starts and closes in one tag. To mark this we put the `/`
        which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary><strong>Why
        does an image tag not have a closing tag?</strong>\n</summary>\n\nAn image
        tag doesn't need a closing tag because there is no text content which must
        be wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\n\n</details>\n<details>\n<summary><strong>What is an
        attribute?</strong>\n</summary>\n\nAttributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example \\<img> tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n</details>\n</div>\n\n# The Details Matter\n\nThe `src` attribute
        needs to point to the _exact_ filename of the image you want to use. That
        means you need to pay attention to spelling, capitalization, and the file
        extension. Each of the three images on this page is broken because of an improper
        `src` attribute. Using the file menu for reference, fix each of the image
        tags.\n\n_Note: Even though the images are not loading properly, our website
        is still showing descriptive text of what should be there because we used
        `alt` attributes. Cool!_"
      CSD U2 Image Tag Debug_2018: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>How
        do I add images?</strong>\n</summary>\n\nThe `<img>` tag allows you to show
        images on your web page. <br><br>\n\nExample:\n\n<pre>&lt;img src=\"dog.png\"
        alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which
        file to use, extra information, called an **attribute**, is added to the \\<img>
        tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and
        tell the name of the image. Image files names include extensions which tell
        the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing
        tag** because it starts and closes in one tag. To mark this we put the `/`
        which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary>\n<strong>Why
        does an image tag not have a closing tag?</strong>\n</summary>\nAn image tag
        doesn't need a closing tag because there is no text content which must be
        wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\n</details>\n<details>\n<summary>\n<strong>What is an
        attribute?</strong>\n</summary>\n\nAttributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example \\<img> tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n</details>\n</div>\n\n# The Details Matter\n\nThe `src` attribute
        needs to point to the _exact_ filename of the image you want to use. That
        means you need to pay attention to spelling, capitalization, and the file
        extension. Each of the three images on this page is broken because of an improper
        `src` attribute. Using the file menu for reference, fix each of the image
        tags.\n\n_Note: Even though the images are not loading properly, our website
        is still showing descriptive text of what should be there because we used
        `alt` attributes. Cool!_"
      CSD U2 Image Tag Debug_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>Hvernig bæti ég við myndum?</strong>
        </summary>

        Með taginu `<img>` getur þú birt myndir á vefsíðunni þinni. <br><br>

        Dæmi:

        <pre>&lt;img src="dog.png" alt="dog jumping"&gt;</pre><br><br>

        Svo að vafrinn viti hvaða mynd á að sýna eru viðbótarupplýsingar settar í það sem nefnist **eigind** (attribute) \<img> tagsins innan í hornklofunum. Eigindin `src` er skammstöfun fyrir enska orðið **s**ou**rc**e (uppruni) og segir til um hvaða mynd á að sækja. Heiti vistaðra mynda hafa endingar sem segja til um gerð þeirra. Algengar endingar eru .jpg, .jpeg, .png. <br><br>

        Auk eigingarinnar src, hafa myndeiningar líka eigindina `alt` sem inniheldur lýsingu á myndinni. Lýsingin birtist ef myndin finnst ekki og er einnig notuð af skjálesurum fyrir sjónskerta. <br><br>

        `<img>` tag er dæmi um **sjálf-lokandi** því að upphafstagið er líka endatag.

        </details>
        <details>
        <summary>
        <strong>Af hverju hefur tagið fyrir mynd ekki endatag?</strong>
        </summary>
        Tagið fyrir mynd þarf ekki endatag því að það hefur engan texta sem þarf að afmarka með endatagi. Innihaldið sem tagið sýnir er skilgreint í eigindum tagsins.
        </details>
        <details>
        <summary>
        <strong>What is an attribute?</strong>
        </summary>

        Eigindin innihalda nánari upplýsingar um hvernig tag á að virka.  Eigind samanstednur af heiti eigindar og gildi hennar. Heitið gefur til kynna hvers konar upplýsingar er verið að veita og gildið er þá sjálfar upplýsingarnar.

        Sem dæmi hafa \<img> tög tvær eigindir, src og alt. src tilgreinir heiti myndskrárinnar og alt segir vafranum með lesanlegan texta hvaða mynd þetta er.

        </details>
        </div>

        # Smáatriðin skipta máli

        Eigindin `src` verður að vísa á _nákvæmt_ heiti myndarinnar sem á að nota. Það þýðir að þarf að gæta að ritun, há-/lágstöfum og skrárendingunni. Myndirnar þrjár á þessari síðu virka ekki vegna þess að `src` eiginindin er ekki rétt. Hafðu listann yfir skrárnar til hliðsjónar og lagaðu myndtögin.

        _Athugaðu: Þó að myndirnar birtist ekki, sýnir vefsíðan samt lýsandi texta um hvað ætti að vera þar vegna þess að við notuðum `alt` eigindina. Gagnlegt!_
      CSD U2 Info Page Final Touches: "<div style=\"float: right;\nheight: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\r\n\r\n<h2>\r\nGátlisti\r\n</h2>\r\n\r\n<input\ntype=\"checkbox\"
        style=\"float: left\"><span style=\"display: block; margin-left:\n20px; margin-bottom:
        10px\">Gættu þess að notuð mynd sé með viðeigandi notkunarleyfi</span>\r\n<input\ntype=\"checkbox\"
        style=\"float: left\"><span style=\"display: block; margin-left:\n20px; margin-bottom:
        10px\">Hlaða mynd upp í Vefsmiðjuna</span>\r\n<input type=\"checkbox\"\nstyle=\"float:
        left\"><span style=\"display: block; margin-left: 20px; margin-bottom:\n10px\">Búa
        til myndtag með lýsingu í alt eigindinni</span>\r\n<input\ntype=\"checkbox\"
        style=\"float: left\"><span style=\"display: block; margin-left:\n20px; margin-bottom:
        10px\">Ef þetta er ekki þín eigin mynd, þarf að setja eignun fyrir neðan hana<br/>\r\n\r\n</div>\r\n\r\n\r\n#
        Að bæta myndum í vefinn þinn\r\n\r\nÞú hefur þegar búið til nokkrar síður
        með innihaldi á vefnum þínum, en nú er kominn tími til að bæta við myndum!\r\n\r\n#
        Gerðu þetta\r\n\r\nNotaðu annað hvort eigin myndir eða myndir sem þú hefur
        fundið með Commons leit og bættu þeim við síðurnar sem þú hefur þegar smíðað.
        Notaðu ímyndinaraflið! Notaðu gátlistann hér hægra megin til að leiða þig
        í gegnum ferlið sem þarf að fylgja þegar myndum er bætt við.\r"
      CSD U2 Info Page Final Touches_2018: "<div style=\"float: right;\nheight: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\r\n\r\n<h2>\r\nGátlisti\r\n</h2>\r\n\r\n<input\ntype=\"checkbox\"
        style=\"float: left\"><span style=\"display: block; margin-left:\n20px; margin-bottom:
        10px\">Gættu þess að notuð mynd sé með viðeigandi notkunarleyfi</span>\r\n<input\ntype=\"checkbox\"
        style=\"float: left\"><span style=\"display: block; margin-left:\n20px; margin-bottom:
        10px\">Hlaða mynd upp í Vefsmiðjuna</span>\r\n<input type=\"checkbox\"\nstyle=\"float:
        left\"><span style=\"display: block; margin-left: 20px; margin-bottom:\n10px\">Búa
        til myndtag með lýsingu í alt eigindinni</span>\r\n<input\ntype=\"checkbox\"
        style=\"float: left\"><span style=\"display: block; margin-left:\n20px; margin-bottom:
        10px\">Ef þetta er ekki þín eigin mynd, þarf að setja eignun fyrir neðan hana<br/>\r\n\r\n</div>\r\n\r\n\r\n#
        Að bæta myndum í vefinn þinn\r\n\r\nÞú hefur þegar búið til nokkrar síður
        með innihaldi á vefnum þínum, en nú er kominn tími til að bæta við myndum!\r\n\r\n#
        Gerðu þetta\r\n\r\nNotaðu annað hvort eigin myndir eða myndir sem þú hefur
        fundið með Commons leit og bættu þeim við síðurnar sem þú hefur þegar smíðað.
        Notaðu ímyndinaraflið! Notaðu gátlistann hér hægra megin til að leiða þig
        í gegnum ferlið sem þarf að fylgja þegar myndum er bætt við.\r"
      CSD U2 Info Page Final Touches_2019: "<div style=\"float: right;\nheight: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\r\n\r\n<h2>\r\nGátlisti\r\n</h2>\r\n\r\n<input\ntype=\"checkbox\"
        style=\"float: left\"><span style=\"display: block; margin-left:\n20px; margin-bottom:
        10px\">Gættu þess að notuð mynd sé með viðeigandi notkunarleyfi</span>\r\n<input\ntype=\"checkbox\"
        style=\"float: left\"><span style=\"display: block; margin-left:\n20px; margin-bottom:
        10px\">Hlaða mynd upp í Vefsmiðjuna</span>\r\n<input type=\"checkbox\"\nstyle=\"float:
        left\"><span style=\"display: block; margin-left: 20px; margin-bottom:\n10px\">Búa
        til myndtag með lýsingu í alt eigindinni</span>\r\n<input\ntype=\"checkbox\"
        style=\"float: left\"><span style=\"display: block; margin-left:\n20px; margin-bottom:
        10px\">Ef þetta er ekki þín eigin mynd, þarf að setja eignun fyrir neðan hana<br/>\r\n\r\n</div>\r\n\r\n\r\n#
        Að bæta myndum í vefinn þinn\r\n\r\nÞú hefur þegar búið til nokkrar síður
        með innihaldi á vefnum þínum, en nú er kominn tími til að bæta við myndum!\r\n\r\n#
        Gerðu þetta\r\n\r\nNotaðu annað hvort eigin myndir eða myndir sem þú hefur
        fundið með Commons leit og bættu þeim við síðurnar sem þú hefur þegar smíðað.
        Notaðu ímyndinaraflið! Notaðu gátlistann hér hægra megin til að leiða þig
        í gegnum ferlið sem þarf að fylgja þegar myndum er bætt við.\r"
      CSD U2 Inspector Warm Up: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n<details>\n\n<summary>\n\n**<span>Hvernig
        nota ég Inspector Tool? </span>**\n\n</summary>\n\nInspector Tool greiningartækið
        getur kennt þér heilmikið um ókunnuglegan kóða í Vefsmiðjunni. Þú kveikir
        á því með því að smella á <img src=\"https://images.code.org/188579d7c6e7645d0d2edd203a33bd63-image-1480361561351.31.56
        PM.png\" style=\"width:100px\">. Þú getur séð að það er kveikt á Inspector
        Tool því að hnappurinn verður hvítur og á honum stendur Inspector: On. Eftir
        að þú kveikir á Inspector Tool getur þú fært músina á eitthvað í forskoðunarglugganum
        og Vefsmiðjan mun lýsa upp kóðann sem er að baki því efni á síðunni.\n\n</details>\n</div>\n\n#
        Kannaðu HTML\n\nÞetta er vefsíða skrifuð í HTML, sem er mál veraldarvefsins.
        Þú munt læra meira um notkun þess, en byrjaðu á að kanna það með Inspector
        Tool greiningartækinu. \n\n# Gerðu þetta\n\n-   Smelltu á ábendinguna \"Hvernig
        nota ég Inspector Tool?\" hægra megin til að læra að nota greiningartækið.\n-
        \  Fylgdu leiðbeiningunum á síðunni og kannaðu gerð hennar og ræddu við félaga
        hvernig hún virkar."
      CSD U2 Inspector Warm Up_2018: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n<details>\n\n<summary>\n<strong><span>Hvernig
        nota ég Inspector Tool? </span></strong>\n</summary>\n\nInspector Tool greiningartækið
        getur kennt þér heilmikið um ókunnuglegan kóða í Vefsmiðjunni. Þú kveikir
        á því með því að smella á <img src=\"https://images.code.org/188579d7c6e7645d0d2edd203a33bd63-image-1480361561351.31.56
        PM.png\" style=\"width:100px\">. Þú getur séð að það er kveikt á Inspector
        Tool því að hnappurinn verður hvítur og á honum stendur Inspector: On. Eftir
        að þú kveikir á Inspector Tool getur þú fært músina á eitthvað í forskoðunarglugganum
        og Vefsmiðjan mun lýsa upp kóðann sem er að baki því efni á síðunni.\n\n</details>\n</div>\n\n#
        Kannaðu HTML\n\nÞetta er vefsíða skrifuð í HTML, sem er mál veraldarvefsins.
        Þú munt læra meira um notkun þess, en byrjaðu á að kanna það með Inspector
        Tool greiningartækinu. \n\n# Gerðu þetta\n\n-   Smelltu á ábendinguna \"Hvernig
        nota ég Inspector Tool?\" hægra megin til að læra að nota greiningartækið.\n-
        \  Fylgdu leiðbeiningunum á síðunni og kannaðu gerð hennar og ræddu við félaga
        hvernig hún virkar."
      CSD U2 Inspector Warm Up_2019: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n<details>\n\n<summary>\n<strong><span>Hvernig
        nota ég Inspector Tool? </span></strong>\n</summary>\n\nInspector Tool greiningartækið
        getur kennt þér heilmikið um ókunnuglegan kóða í Vefsmiðjunni. Þú kveikir
        á því með því að smella á <img src=\"https://images.code.org/188579d7c6e7645d0d2edd203a33bd63-image-1480361561351.31.56
        PM.png\" style=\"width:100px\">. Þú getur séð að það er kveikt á Inspector
        Tool því að hnappurinn verður hvítur og á honum stendur Inspector: On. Eftir
        að þú kveikir á Inspector Tool getur þú fært músina á eitthvað í forskoðunarglugganum
        og Vefsmiðjan mun lýsa upp kóðann sem er að baki því efni á síðunni.\n\n</details>\n</div>\n\n#
        Kannaðu HTML\n\nÞetta er vefsíða skrifuð í HTML, sem er mál veraldarvefsins.
        Þú munt læra meira um notkun þess, en byrjaðu á að kanna það með Inspector
        Tool greiningartækinu. \n\n# Gerðu þetta\n\n-   Smelltu á ábendinguna \"Hvernig
        nota ég Inspector Tool?\" hægra megin til að læra að nota greiningartækið.\n-
        \  Fylgdu leiðbeiningunum á síðunni og kannaðu gerð hennar og ræddu við félaga
        hvernig hún virkar."
      CSD U2 Pair Programming Video_2019: |-
        ## Spurningar til að hugleiða

        -   Af hverju heldurðu að fólk sem vinnur við forritun noti félagaforritun?
        -   Hvernig heldur þú að félagaforritun muni hjálpa þér að forrita betur?
      CSD U2 Project Start: |-
        # Byrjað á verkefninu

        Nú ættir þú að hafa ákveðið hvernig vefurinn þinn á að vera. Þá er komið að því að kóða hann hér. Ekki gera ráð fyrir að geta gert allt í dag. Þú munt hafa næg tækifæri til að betrumbæta verkefnið eftir því sem þú lærir meira um vefsmíði.

        # Gerðu þetta

        -   Notaðu HTML til að búa til síðuna sem þú lagðir drög að. Gættu þess að hafa
        -   Minnst **tvo hausa í mismunandi stærð**
        -   Minnst **eina efnisgrein**
        -   **Ígrundaðu** síðuna þína með því að bera hana saman við drögin og sýndu félaga þínum hana
      CSD U2 Project Start_2018: |-
        # Byrjað á verkefninu

        Nú ættir þú að hafa ákveðið hvernig vefurinn þinn á að vera. Þá er komið að því að kóða hann hér. Ekki gera ráð fyrir að geta gert allt í dag. Þú munt hafa næg tækifæri til að betrumbæta verkefnið eftir því sem þú lærir meira um vefsmíði.

        # Gerðu þetta

        -   Notaðu HTML til að búa til síðuna sem þú lagðir drög að. Gættu þess að hafa
        -   Minnst **tvo hausa í mismunandi stærð**
        -   Minnst **eina efnisgrein**
        -   **Ígrundaðu** síðuna þína með því að bera hana saman við drögin og sýndu félaga þínum hana
      CSD U2 Project Start_2019: |-
        # Byrjað á verkefninu

        Nú ættir þú að hafa ákveðið hvernig vefurinn þinn á að vera. Þá er komið að því að kóða hann hér. Ekki gera ráð fyrir að geta gert allt í dag. Þú munt hafa næg tækifæri til að betrumbæta verkefnið eftir því sem þú lærir meira um vefsmíði.

        # Gerðu þetta

        -   Notaðu HTML til að búa til síðuna sem þú lagðir drög að. Gættu þess að hafa
        -   Minnst **tvo hausa í mismunandi stærð**
        -   Minnst **eina efnisgrein**
        -   **Ígrundaðu** síðuna þína með því að bera hana saman við drögin og sýndu félaga þínum hana
      CSD U2 RGB intro: |-
        # RGB Colors

        All colors, whether they have names or not, can be described by the level of red, green, and blue light it takes to make them.  This is called an RGB value (short for Red-Green-Blue).  You can use the widget on your left to try out different RGB values and see what colors they make.

        -   **Click "Run" to start the widget on the left,** and use the sliders to adjust the levels of red, green, and blue light.
        -   For each of the colors below, match it to its RGB value.

        A) red: 216, green: 191, blue: 216 - rgb(216,191,216)

        B) red: 255, green: 239, blue: 213 - rgb(255,239,213)

        C) red: 250, green: 128, blue: 114 - rgb(250,128,114)

        D) red: 70, green: 130, blue: 180 - rgb(70, 130, 180)

        E) red: 107, green: 142, blue: 35 - rgb(107,142,35)

        <div style="font-size: 16px">
        <br />
        <details>

        <summary><strong>Why do red and green make yellow?</strong></summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary><strong>How many colors can I make with RGB color mixing?</strong></summary>

        <p>
        You can make over sixteen million different colors with RGB color mixing.
        </p>

        </details>
        </div>
      CSD U2 RGB intro_2018: |-
        # RGB Colors

        All colors, whether they have names or not, can be described by the level of red, green, and blue light it takes to make them.  This is called an RGB value (short for Red-Green-Blue).  You can use the widget on your left to try out different RGB values and see what colors they make.

        -   **Click "Run" to start the widget on the left,** and use the sliders to adjust the levels of red, green, and blue light.
        -   For each of the colors below, match it to its RGB value.

        A) red: 216, green: 191, blue: 216 - rgb(216,191,216)

        B) red: 255, green: 239, blue: 213 - rgb(255,239,213)

        C) red: 250, green: 128, blue: 114 - rgb(250,128,114)

        D) red: 70, green: 130, blue: 180 - rgb(70, 130, 180)

        E) red: 107, green: 142, blue: 35 - rgb(107,142,35)

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        <p>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </p> </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        <p>
        You can make over sixteen million different colors with RGB color mixing.
        </p>

        </details>
        </div>
      CSD U2 RGB intro_2019: |-
        # RGB Colors

        All colors, whether they have names or not, can be described by the level of red, green, and blue light it takes to make them.  This is called an RGB value (short for Red-Green-Blue).  You can use the widget on your left to try out different RGB values and see what colors they make.

        -   **Click "Run" to start the widget on the left,** and use the sliders to adjust the levels of red, green, and blue light.
        -   For each of the colors below, match it to its RGB value.

        A) red: 216, green: 191, blue: 216 - rgb(216,191,216)

        B) red: 255, green: 239, blue: 213 - rgb(255,239,213)

        C) red: 250, green: 128, blue: 114 - rgb(250,128,114)

        D) red: 70, green: 130, blue: 180 - rgb(70, 130, 180)

        E) red: 107, green: 142, blue: 35 - rgb(107,142,35)

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        <p>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </p> </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        <p>
        You can make over sixteen million different colors with RGB color mixing.
        </p>

        </details>
        </div>
      CSD U2 RGB others: |-
        # Spring and Autumn Colors

        Choose RGB values for spring and autumn colors.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you find a spring color you like, then write down the values on your activity guide.
        -   Do the same for an autumn color.   You will need the RGB values for the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary><strong>Where can I see the whole range of color types?</strong></summary>
        You can find many options for colors at <a href="http://www.w3schools.com/colors/colors_picker.asp">W3Schools - HTML Color Picker</a></details>
        <details>
        <summary><strong>Why do red and green make yellow?</strong></summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary><strong>How many colors can I make with RGB color mixing?</strong></summary>

        <p>You can make make over sixteen million different colors with RGB color mixing.</p>

        </details>
        </div>
      CSD U2 RGB others_2018: |-
        # Spring and Autumn Colors

        Choose RGB values for spring and autumn colors.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you find a spring color you like, then write down the values on your activity guide.
        -   Do the same for an autumn color.   You will need the RGB values for the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>Where can I see the whole range of color types?</strong>
        </summary>

        You can find many options for colors at <a href="http://www.w3schools.com/colors/colors_picker.asp" target="_new">W3Schools - HTML Color Picker</a>

        </details>
        <details>
        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        You can make make over sixteen million different colors with RGB color mixing.

        </details>
        </div>
      CSD U2 RGB others_2019: |-
        # Spring and Autumn Colors

        Choose RGB values for spring and autumn colors.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you find a spring color you like, then write down the values on your activity guide.
        -   Do the same for an autumn color.   You will need the RGB values for the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>Where can I see the whole range of color types?</strong>
        </summary>

        You can find many options for colors at <a href="http://www.w3schools.com/colors/colors_picker.asp" target="_new">W3Schools - HTML Color Picker</a>

        </details>
        <details>
        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        You can make make over sixteen million different colors with RGB color mixing.

        </details>
        </div>
      CSD U2 RGB summer: |-
        # Summer Color

        Find the RGB values for a summery yellow color.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you match the summery yellow at the bottom of the widget.
        -   Write the RGB values on your activity guide.  You will need them in the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary><strong>Why do red and green make yellow?</strong></summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary><strong>How many colors can I make with RGB color mixing?</strong></summary>

        <p>You can make make over sixteen million different colors with RGB color mixing.</p>

        </details>
        </div>
      CSD U2 RGB summer_2018: |-
        # Summer Color

        Find the RGB values for a summery yellow color.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you match the summery yellow at the bottom of the widget.
        -   Write the RGB values on your activity guide.  You will need them in the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        You can make make over sixteen million different colors with RGB color mixing.

        </details>
        </div>
      CSD U2 RGB summer_2019: |-
        # Summer Color

        Find the RGB values for a summery yellow color.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you match the summery yellow at the bottom of the widget.
        -   Write the RGB values on your activity guide.  You will need them in the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        You can make make over sixteen million different colors with RGB color mixing.

        </details>
        </div>
      CSD U2 RGB winter: |-
        # Winter Color

        In the next few levels, you'll be finding seasonal colors for a website.  Here, you'll need to find the RGB values for a wintery blue color.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you match the wintery blue color at the bottom of the widget.
        -   Write the RGB values on your activity guide.  You will need them in the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary><strong>How do I make a color lighter?</strong></summary>
        <p>To make a color lighter, you need to add more light (increase the level of the slider).  If you have already added the maximum amount of blue light, you will need to add more red and green light to make your blue lighter.</p></details>
        <details>
        <summary><strong>Why do red and green make yellow?</strong></summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary><strong>How many colors can I make with RGB color mixing?</strong></summary>

        <p>You can make make over sixteen million different colors with RGB color mixing.</p>

        </details>
        </div>
      CSD U2 RGB winter_2018: |-
        # Winter Color

        In the next few levels, you'll be finding seasonal colors for a website.  Here, you'll need to find the RGB values for a wintery blue color.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you match the wintery blue color at the bottom of the widget.
        -   Write the RGB values on your activity guide.  You will need them in the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>How do I make a color lighter?</strong>
        </summary>

        To make a color lighter, you need to add more light (increase the level of the slider).  If you have already added the maximum amount of blue light, you will need to add more red and green light to make your blue lighter.

        </details>
        <details>
        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        You can make make over sixteen million different colors with RGB color mixing.

        </details>
        </div>
      CSD U2 RGB winter_2019: |-
        # Winter Color

        In the next few levels, you'll be finding seasonal colors for a website.  Here, you'll need to find the RGB values for a wintery blue color.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you match the wintery blue color at the bottom of the widget.
        -   Write the RGB values on your activity guide.  You will need them in the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>How do I make a color lighter?</strong>
        </summary>

        To make a color lighter, you need to add more light (increase the level of the slider).  If you have already added the maximum amount of blue light, you will need to add more red and green light to make your blue lighter.

        </details>
        <details>
        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        You can make make over sixteen million different colors with RGB color mixing.

        </details>
        </div>
      CSD U2 add content: "# Bæta HTML við\\\r\n\n\\\r\nNæst ættir þú að bæta HTML
        við síðurnar þínar.\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n-   Bættu HTML í hverja
        nýja síðu sem þú dróst upp í leiðarvísi verkefnisins.\\\r\n-   Þú getur líka
        bætt meira HTML í síður sem þú bjóst til áður.\\\r"
      CSD U2 add content_2018: "# Bæta HTML við\\\r\n\n\\\r\nNæst ættir þú að bæta
        HTML við síðurnar þínar.\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n-   Bættu HTML
        í hverja nýja síðu sem þú dróst upp í leiðarvísi verkefnisins.\\\r\n-   Þú
        getur líka bætt meira HTML í síður sem þú bjóst til áður.\\\r"
      CSD U2 add content_2019: "# Bæta HTML við\\\r\n\n\\\r\nNæst ættir þú að bæta
        HTML við síðurnar þínar.\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n-   Bættu HTML
        í hverja nýja síðu sem þú dróst upp í leiðarvísi verkefnisins.\\\r\n-   Þú
        getur líka bætt meira HTML í síður sem þú bjóst til áður.\\\r"
      CSD U2 add file: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What is a style sheet?</strong></summary>
        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.
        </details>
        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        <details>
        <summary><strong>How do I create a new style sheet?</strong></summary>
        To create a new style sheet, click on the "Add CSS" button above the code area.
        </details>
        <details>
        <summary><strong>What should I name my style sheet?</strong></summary>

        You can name your style sheet anything, but it's better to choose a relevant name, such as "style.css" or "aboutmestyles.css" so that it's clear what the file is.  Your file should always end in the ".css" extension.

        </details>
        <details>
        <summary><strong>How do I rename a file?</strong></summary>

        To rename a file, you can right click (or control click) on the file name and choose the "Rename" option.  This will allow you to type in a new file name.  Clicking on a file name after it is already highlighted will also allow you to rename the file.

        </details>
        <details>
        <summary><strong>How do I add a style sheet to a web page?</strong></summary>

        To add a style sheet to a web page, open up the code for the web page.  Inside the head tag, add the following code `<link rel="stylesheet" href="style.css">`.  Then change "style.css" to the name of your style sheet.

        </details>
        </div>

        # Adding a Style Sheet

        This is your project from before.  In the next level, you'll have a chance to add some different styles to it, but first, you need to add a style sheet, name it, and link it to your html page.

        1.  Create a new style sheet for your project.
        2.  Rename the style sheet file.
        3.  Add your style sheet to your HTML page.

        <img src="https://cdo-curriculum.s3.amazonaws.com/media/uploads/weblab_stylesheet.png" style=" max-width:500px">
      CSD U2 add file_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What is a style sheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        <details>
        <summary>
        <strong>How do I create a new style sheet?</strong>
        </summary>
        To create a new style sheet, click on the "Add CSS" button above the code area.
        </details>
        <details>
        <summary>
        <strong>What should I name my style sheet?</strong>
        </summary>
        You can name your style sheet anything, but it's better to choose a relevant name, such as "style.css" or "aboutmestyles.css" so that it's clear what the file is.  Your file should always end in the ".css" extension.
        </details>
        <details>
        <summary>
        <strong>How do I rename a file?</strong>
        </summary>
        To rename a file, you can right click (or control click) on the file name and choose the "Rename" option.  This will allow you to type in a new file name.  Clicking on a file name after it is already highlighted will also allow you to rename the file.
        </details>
        <details>
        <summary>
        <strong>How do I add a style sheet to a web page?</strong>
        </summary>

        To add a style sheet to a web page, open up the code for the web page.  Inside the head tag, add the following code `<link rel="stylesheet" href="style.css">`.  Then change "style.css" to the name of your style sheet.

        </details>
        </div>

        # Adding a Style Sheet

        This is your project from before.  In the next level, you'll have a chance to add some different styles to it, but first, you need to add a style sheet, name it, and link it to your html page.

        1.  Create a new style sheet for your project.
        2.  Rename the style sheet file.
        3.  Add your style sheet to your HTML page.

        <img src="https://cdo-curriculum.s3.amazonaws.com/media/uploads/weblab_stylesheet.png" style=" max-width:500px">
      CSD U2 add file_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>Hvað er stílsíða?</strong>
        </summary>

        Stílsíða er skjal sem stjórnar útliti vefsíðu.  Utanáliggjandi stílsíður eru sérstakar skrár sem eru tengdar HTML síðunni.

        </details>
        <details>
        <summary>
        <strong>Hvað er CSS?</strong>
        </summary>

        CSS er forritunarmál sem stjórnar því hvernig innihald vefs birtist.  Það notar sett af reglum til að stýra útliti vefsíðu.  Hvert sett af reglum hefur veljara (selector), sem velur þær einingar á síðunni sem stjórnast af reglunum, og sjálfar reglurnar, sem segja til um hvernig einingarnar skuli birtast.   Hver regla samanstendur af eiginleika (property) og gildi (value) fyrir eiginleikann.

        Hér er dæmi um reglusett sem lætur textann í `h2` tögum fá bláan lit og skrifstafi:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }</pre>

        Í þessu dæmi er `h2` veljarinn, `color` og `font-family` eru eiginleikar og `blue` og `cursive` eru gildi fyrir þá eiginleika.

        </details>
        <details>
        <summary>
        <strong>Hvernig bý ég til nýja stílsíðu?</strong>
        </summary>
        Ný stílsíða er búin til með því að smella á "Bæta við CSS" (Add CSS) hnappinn ofan við kóðasvæðið.
        </details>
        <details>
        <summary>
        <strong>Hvaða heiti ætti ég að gefa stílsíðunni?</strong>
        </summary>
        Þú getur látið hana heita hvað sem er, en það er betra að velja lýsandi heiti svo sem "style.css" eða "vefurinnminn.css" svo það sé á hreinu hvers konar skrá þetta er.  Skráin ætti alltaf að hafa ".css" endinguna.
        </details>
        <details>
        <summary>
        <strong>Hvernig breyti ég heiti skrár?</strong>
        </summary>
        Þú getur hægrismellt (eða control smellt) á núverandi heiti skrárinnar og valið "Endurnefna" (rename) valkostinn.  Þá opnast textareitur þar sem getur þú skrifað nýtt heiti. Önnur aðferð til að opna textareitinn: Smella á skráarheiti sem er þegar valið (litað).
        </details>
        <details>
        <summary>
        <strong>Hvernig tengi ég stílsíðu við vefsíðu?</strong>
        </summary>

        Opnaðu kóða vefsíðunnar. Bættu eftirfarandi kóða við innan í "head" taginu: `<link rel="stylesheet" href="style.css">`.  Breyttu "style.css" í það heiti sem þú gafst þinni stílsíðu.

        </details>
        </div>

        # Að bæta við stílsíðu

        Þetta er verkefnið þitt frá því áður. Í næsta áfanga færðu tækifæri til að bæta ýmsum stílum í það, en fyrst þarftu að búa til stílsíðu, gefa henni heiti og tengja hana við html síðuna þína.

        1.  Búðu til nýja stílsíðu fyrir verkefnið þitt.
        2.  Gefðu skránni lýsandi heiti.
        3.  Tengdu stílsíðuna við HTML síðuna þína.

        <img src="https://cdo-curriculum.s3.amazonaws.com/media/uploads/weblab_stylesheet.png" style=" max-width:500px">
      CSD U2 add style_2019: |-
        # Prófaðu þetta!

        Nú þegar þú hefur séð nokkrar mismunandi aðferðir við að útlitsmóta vefsíðu, er kominn tími til að þú prófir.  Hér er vefsíða sem þú hefur séð áður, en það vantar að gefa henni betra útlit!

        # Gerðu þetta

        -   Settu bakgrunnslit á síðuna.
        -   Hafðu meira bil milli mynda og texta.
        -   Láttu allan texta hafa annan textalit.
        -   Bættu við öðrum útlitsatriðum eins og þú vilt.
      CSD U2 challenge: |-
        # Áskorun

        Fáðu grænt ljós hjá kennaranum áður en þú byrjar á þessari áskorun.

        Þessi síða er ókláruð og það eru villur í henni. En það eru athugasemdir í henni sem ættu að hjálpa þér að klára síðuna eins og höfundurinn ætlaðist til.

        # Gerðu þetta

        -   Skoðaðu kóðann með félaga. Ræðið hvernig síðan ætti að vera.
        -   Vinnið saman að því að ljúka síðunni. Gefið útlitsmótun hennar gaum.
        -   Berið ykkur saman við aðra til að sjá hvort síðurnar eru eins.
      CSD U2 challenge_2018: |-
        # Áskorun

        Fáðu grænt ljós hjá kennaranum áður en þú byrjar á þessari áskorun.

        Þessi síða er ókláruð og það eru villur í henni. En það eru athugasemdir í henni sem ættu að hjálpa þér að klára síðuna eins og höfundurinn ætlaðist til.

        # Gerðu þetta

        -   Skoðaðu kóðann með félaga. Ræðið hvernig síðan ætti að vera.
        -   Vinnið saman að því að ljúka síðunni. Gefið útlitsmótun hennar gaum.
        -   Berið ykkur saman við aðra til að sjá hvort síðurnar eru eins.
      CSD U2 challenge_2019: |-
        # Áskorun

        Fáðu grænt ljós hjá kennaranum áður en þú byrjar á þessari áskorun.

        Þessi síða er ókláruð og það eru villur í henni. En það eru athugasemdir í henni sem ættu að hjálpa þér að klára síðuna eins og höfundurinn ætlaðist til.

        # Gerðu þetta

        -   Skoðaðu kóðann með félaga. Ræðið hvernig síðan ætti að vera.
        -   Vinnið saman að því að ljúka síðunni. Gefið útlitsmótun hennar gaum.
        -   Berið ykkur saman við aðra til að sjá hvort síðurnar eru eins.
      CSD U2 classes modify: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>

        </summary>
        For the code to work, you need to both create a winter class and add elements to the class.

        The class is created in the style sheet, with the following code.

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        This code creates a class called `winter` and makes everything in the class our winter blue, which has the RGB values of (195,230,255).

        The code that adds a `h5` element to the winter class is `<h5 class="winter">`.  The `class=winter` inside the opening tag adds everything inside the tag to the class.

        </details>
        <details>
        <summary>
        <strong>What rules can be added to a class rule-set?</strong>

        </summary>

        A class rule-set can have the same rules as any other type of selector.  If a rule does not apply to the content of the class (for example, using `font-size` on an element with no text), then the computer will ignore that rule, but still use the rules that work.

        </details>
        <details>
        <summary>
        <strong>Why does the selector have a period in front of it?</strong>

        </summary>
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        </details>
        <details>
        <summary>
        <strong>Why would a web developer use classes?</strong>

        </summary>
        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.
        </details>
        <details>
        <summary>
        <strong>I got different RGB values, but mine are right, too.</strong>

        </summary>

        Because RGB creates millions of different colors, some are so similar that people have a hard time telling them apart.  That means that there are multiple RGB values that are close enough to work for our winter color.

        </details>
        </div>

        # Adding Rules

        Your winter words should all have the same color and font.

        -   Find the CSS rule-set in the style sheet that gives the winter words their style.
        -   Add a rule that changes the font of the winter words.  It can be any font, but it will need to be different from that of the other three seasons.
        -   Add any other rules you'd like for your winter words.
      CSD U2 classes modify_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>
        For the code to work, you need to both create a winter class and add elements to the class.

        The class is created in the style sheet, with the following code.

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        This code creates a class called `winter` and makes everything in the class our winter blue, which has the RGB values of (195,230,255).

        The code that adds a `h5` element to the winter class is `<h5 class="winter">`.  The `class=winter` inside the opening tag adds everything inside the tag to the class.

        </details>
        <details>

        <summary>
        <strong>What rules can be added to a class rule-set?</strong>
        </summary>

        A class rule-set can have the same rules as any other type of selector.  If a rule does not apply to the content of the class (for example, using `font-size` on an element with no text), then the computer will ignore that rule, but still use the rules that work.

        </details>
        <details>
        <summary>
        <strong>Why does the selector have a period in front of it?</strong>
        </summary>
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        </details>
        <details>
        <summary>
        <strong>Why would a web developer use classes?</strong>
        </summary>
        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.
        </details>
        <details>
        <summary>
        <strong>I got different RGB values, but mine are right, too.</strong>
        </summary>

        Because RGB creates millions of different colors, some are so similar that people have a hard time telling them apart.  That means that there are multiple RGB values that are close enough to work for our winter color.

        </details>
        </div>

        # Adding Rules

        Your winter words should all have the same color and font.

        -   Find the CSS rule-set in the style sheet that gives the winter words their style.
        -   Add a rule that changes the font of the winter words.  It can be any font, but it will need to be different from that of the other three seasons.
        -   Add any other rules you'd like for your winter words.
      CSD U2 classes modify_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>Hvernig virkar þessi kóði?</strong>
        </summary>
        Til að kóðinn virku þarft þú að búa til klasa (class) til að skilgreina útlit fyrir kaflann um vetur og bæta einingum í þann klasa.

        Klasinn er búinn til í stílsíðunni með eftirfarandi kóða.

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        Þessi kóði býr til klasa (class) sem nefnist `winter` og lætur allt í klasanum fá vetrarlegan bláan lit, sem hefur RGB gildin (195,230,255).

        Kóðinn sem setur svo `h5` einingar í klasann er `<h5 class="winter">`.  Eigindin `class=winter` innan í upphafstaginu setur allt innihald tagsins í þennan klasa.

        </details>
        <details>

        <summary>
        <strong>Hvaða reglur er hægt að setja í reglusett klasa?</strong>
        </summary>

        Reglur fyrir klasa geta haft sömu reglur og aðrir veljarar, t.d. tög.  Ef regla á ekki við innihalda klasa (t.d. ef `font-size` er notað á einingu sem hefur engan texta), þá gerir tölvan einfaldlega ekkert með þá reglu, en notar samt þær reglur sem virka.

        </details>
        <details>
        <summary>
        <strong>Af hverju er veljarinn með punkt fyrir framan heitið?</strong>
        </summary>
        Í CSS táknar punktur framan við heiti veljara að þetta er heiti á klasa. Ef það er enginn punktur þýðir það að veljarinn er heiti á HTML tagi.
        </details>
        <details>
        <summary>
        <strong>Af hverju mundi vefsmiður vilja nota klasa?</strong>
        </summary>
        Vefsmiður notar klasa ef hann vill að sumar einingar hafi annað útlit en aðrar jafnvel þó að þær séu í samskonar tagi.  Það er líka hægt að nota klasa til að gefa einingum sem eru í ólíkum tögum sama útlit.
        </details>
        <details>
        <summary>
        <strong>Ég er með aðeins öðruvísi RGB gildi en fæ sama lit.</strong>
        </summary>

        Þar sem RGB kerfið býr til miljónir lita, eru sumir þeirra svo líkir að sjá að mannlegt auga á erfitt með að greina á milli. Það þýðir að það eru mörg RGB gildi sem geta gefið okkur þennan kuldalega bláa lit.

        </details>
        </div>

        # Að bæta við reglum

        Vetrarorðin á síðunni ættu öll að hafa sama lit og leturgerð.

        -   Finndu CSS reglurnar í stílsíðunni sem gefa vetrarorðunum útlit sitt.
        -   Bættu við reglu sem breytir leturgerð vetrarorðanna.  Það má vera hvaða leturgerð sem er, en verður að vera ólík leturgerðum hinna árstíðanna.
        -   Bættu við hvaða reglum sem þú vilt fyrir vetrarorðin.
      CSD U2 classes sample: "<div style=\"float: right; height: 250px; width: 40%;
        overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>How
        does the code work?</strong>\n</summary>\nFor the code to work, you need to
        both create a winter class and add elements to the class.\n\nThe class is
        created in the style sheet, with the following code.\n\n<pre>.winter {\n  color:
        rgb(195,230,255);\n}</pre>\n\nThis code creates a class called `winter` and
        makes everything in the class our winter blue, which has the RGB values of
        (195,230,255).\n\nThe code that adds a `h5` element to the winter class is
        `<h5 class=\"winter\">`.  The `class=winter` inside the opening tag adds everything
        inside the tag to the class.\n\n</details>\n<details>\n<summary>\n<strong>Why
        does the selector have a period in front of it?</strong>\n\n</summary>\nIn
        CSS, a period in front of a selector means that the selector is the name of
        a class.  If there is no period, it means that the selector is the name of
        an HTML tag.\n</details>\n<details>\n<summary>\n<strong>Why would a web developer
        use classes?</strong>\n\n</summary>\nA web developer uses classes when some
        elements should be styled differently than others, even if they are the same
        tag.  Classes can also be used to give elements that have different tags the
        same style.\n</details>\n<details>\n<summary>\n<strong>I got different RGB
        values, but mine are right, too.</strong>\n\n</summary>\n\nBecause RGB creates
        millions of different colors, some are so similar that people have a hard
        time telling them apart.  That means that there are multiple RGB values that
        are close enough to work for our winter color.\n\n</details>\n</div>\n\n#
        Classes\n\nIn this page, the web developer has used classes to give some of
        the words our winter color.\n\n-   Look at the HTML code for the winter words.
        \ Why is \"snowy\" the only winter word without the winter color?\n-   Add
        code to the HTML that will give \"snowy\" the same winter blue as the other
        words.\n-   Look inside the style sheet to find the rule that makes all the
        words in the winter class blue, and check whether your RGB numbers are close
        to the ones in the style sheet.  \n-   Discuss with your partner how the code
        works."
      CSD U2 classes sample_2018: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>How
        does the code work?</strong>\n</summary>\nFor the code to work, you need to
        both create a winter class and add elements to the class.\n\nThe class is
        created in the style sheet, with the following code.\n\n<pre>.winter {\n  color:
        rgb(195,230,255);\n}</pre>\n\nThis code creates a class called `winter` and
        makes everything in the class our winter blue, which has the RGB values of
        (195,230,255).\n\nThe code that adds a `h5` element to the winter class is
        `<h5 class=\"winter\">`.  The `class=winter` inside the opening tag adds everything
        inside the tag to the class.\n\n</details>\n<details>\n<summary>\n<strong>Why
        does the selector have a period in front of it?</strong>\n</summary>\nIn CSS,
        a period in front of a selector means that the selector is the name of a class.
        \ If there is no period, it means that the selector is the name of an HTML
        tag.\n</details>\n<details>\n<summary>\n<strong>Why would a web developer
        use classes?</strong>\n</summary>\nA web developer uses classes when some
        elements should be styled differently than others, even if they are the same
        tag.  Classes can also be used to give elements that have different tags the
        same style.\n</details>\n<details>\n<summary>\n<strong>I got different RGB
        values, but mine are right, too.</strong>\n</summary>\n\nBecause RGB creates
        millions of different colors, some are so similar that people have a hard
        time telling them apart.  That means that there are multiple RGB values that
        are close enough to work for our winter color.\n\n</details>\n</div>\n\n#
        Classes\n\nIn this page, the web developer has used classes to give some of
        the words our winter color.\n\n-   Look at the HTML code for the winter words.
        \ Why is \"snowy\" the only winter word without the winter color?\n-   Add
        code to the HTML that will give \"snowy\" the same winter blue as the other
        words.\n-   Look inside the style sheet to find the rule that makes all the
        words in the winter class blue, and check whether your RGB numbers are close
        to the ones in the style sheet.  \n-   Discuss with your partner how the code
        works."
      CSD U2 classes sample_2019: "<div class=\"no-pullthrough\" style=\"float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary>\n<strong>Hvernig virkar þessi kóði?</strong>\n</summary>\nTil
        að kóðinn virku þarft þú að búa til klasa (class) til að skilgreina útlit
        fyrir kaflann um vetur og bæta einingum í þann klasa.\n\nKlasinn er búinn
        til í stílsíðunni með eftirfarandi kóða.\n\n<pre>.winter {\n  color: rgb(195,230,255);\n}</pre>\n\nÞessi
        kóði býr til klasa (class) sem nefnist `winter` og lætur allt í klasanum fá
        vetrarlegan bláan lit, sem hefur RGB gildin (195,230,255).\n\nKóðinn sem setur
        svo `h5` einingar í klasann er `<h5 class=\"winter\">`.  Eigindin `class=winter`
        innan í upphafstaginu setur allt innihald tagsins í þennan klasa.\n\n</details>\n<details>\n<summary>\n<strong>Af
        hverju er veljarinn með punkt fyrir framan heitið?</strong>\n</summary>\nÍ
        CSS táknar punktur framan við heiti veljara að þetta er heiti á klasa. Ef
        það er enginn punktur þýðir það að veljarinn er heiti á HTML tagi.\n</details>\n<details>\n<summary>\n<strong>Af
        hverju mundi vefsmiður vilja nota klasa?</strong>\n</summary>\nVefsmiður notar
        klasa ef hann vill að sumar einingar hafi annað útlit en aðrar jafnvel þó
        að þær séu í samskonar tagi.  Það er líka hægt að nota klasa til að gefa einingum
        sem eru í ólíkum tögum sama útlit.\n</details>\n<details>\n<summary>\n<strong>Ég
        er með aðeins öðruvísi RGB gildi en fæ sama lit.</strong>\n</summary>\n\nÞar
        sem RGB kerfið býr til miljónir lita, eru sumir þeirra svo líkir að sjá að
        mannlegt auga á erfitt með að greina á milli. Það þýðir að það eru mörg RGB
        gildi sem geta gefið okkur þennan kuldalega bláa lit.\n\n</details>\n</div>\n\n#
        Klasar\n\nÁ þessari síðu hefur vefsmiðurinn notað klasa til að setja vetrarlega
        litinn á eitthvað af orðunm.\n\n-   Skoðaðu HTML kóðann til að finna vetrarlegu
        orðin.  Af hverju er \"snowy\" eina vetrarorðið sem hefur ekki vetrarlitinn?\n-
        \  Bættu kóða í HTML sem lætur orðið \"snowy\" fá sama vetrarlega litinn og
        hin orðin.\n-   Skoðaðu stílsíðuna til að finna regluna sem lætur öll orðin
        í \"winter\" klasanum fá bláa litinn og athugaðu hvort þín RGB gildi eru lík
        þeim í stílsíðunni.  \n-   Ræddu við félaga hvernig þessi kóði virkar."
      CSD U2 classes spring: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>

        </summary>
        For the code to work, you need to both create a spring class and add elements to the class.

        The spring class is already created in the style sheet, but it doesn't have any rules.

        <pre>.spring {
          color: rgb(195,230,255);
        }</pre>

        Look at the rules in the `winter` class for clues to how to make rules for the summer class.

        You will also need to add some elements to the spring class inside your HTML file.

        The code in the HTML file that adds a `h5` element to the winter class is `<h5 class="winter">`.  Use this pattern to add elements to the spring class, too.

        </details>
        <details>
        <summary>
        <strong>What rules can be added to a class rule-set?</strong>

        </summary>

        A class rule-set can have the same rules as any other type of selector.  If a rule does not apply to the content of the class (for example, using `font-size` on an element with no text), then the computer will ignore that rule, but still use the rules that work.

        </details>
        <details>
        <summary>
        <strong>Why does the selector have a period in front of it?</strong>

        </summary>
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        </details>
        <details>
        <summary>
        <strong>Why would a web developer use classes?</strong>

        </summary>

        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.

        </details>
        </div>

        # Spring Class

        Now that your winter class is ready, you can start on the other seasons.

        -   Find the empty CSS rule-set in the style sheet that gives the spring words their style.
        -   Add two rules, one to give the text your spring color for earlier in the lesson, and another to give the text a different font, font size, or decoration.
        -   Add the spring class to the spring elements in the HTML page.
      CSD U2 classes spring_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>
        For the code to work, you need to both create a spring class and add elements to the class.

        The spring class is already created in the style sheet, but it doesn't have any rules.

        <pre>.spring {
          color: rgb(195,230,255);
        }</pre>

        Look at the rules in the `winter` class for clues to how to make rules for the summer class.

        You will also need to add some elements to the spring class inside your HTML file.

        The code in the HTML file that adds a `h5` element to the winter class is `<h5 class="winter">`.  Use this pattern to add elements to the spring class, too.

        </details>
        <details>
        <summary>
        <strong>What rules can be added to a class rule-set?</strong>
        </summary>

        A class rule-set can have the same rules as any other type of selector.  If a rule does not apply to the content of the class (for example, using `font-size` on an element with no text), then the computer will ignore that rule, but still use the rules that work.

        </details>
        <details>
        <summary>
        <strong>Why does the selector have a period in front of it?</strong>
        </summary>
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        </details>
        <details>
        <summary>
        <strong>Why would a web developer use classes?</strong>
        </summary>

        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.

        </details>
        </div>

        # Spring Class

        Now that your winter class is ready, you can start on the other seasons.

        -   Find the empty CSS rule-set in the style sheet that gives the spring words their style.
        -   Add two rules, one to give the text your spring color for earlier in the lesson, and another to give the text a different font, font size, or decoration.
        -   Add the spring class to the spring elements in the HTML page.
      CSD U2 classes spring_2019: "<div class=\"no-pullthrough\" style=\"float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary>\n<strong>Hvernig virkar þessi kóði?</strong>\n</summary>\nTil
        að kóðinn virku þarft þú að búa til klasa (class) til að skilgreina útlit
        fyrir kaflann um vorið og bæta einingum í þann klasa.\n\nKlasinn fyrir vorið
        er þegar í stílsíðunni en hefur engar reglur.\n\n<pre>.spring {\n  color:
        rgb(195,230,255);\n}</pre>\n\nSkoðaðu reglurnar fyrir klasann `winter` til
        að fá vísbendingar um hvernig þú getur búið til reglur fyrir vorið. \n\nÞú
        þarft líka að bæta nokkrum einingum í vorklasann í sjálfri HTML síðunni.\n\nKóðinn
        sem setur `h5` einingar í vetrarklasann er `<h5 class=\"winter\">`.  Notaðu
        sömu aðferð til að setja einingar í vorklasann.\n\n</details>\n<details>\n<summary>\n<strong>Hvaða
        reglur er hægt að setja í reglusett klasa?</strong>\n</summary>\n\nReglur
        fyrir klasa geta haft sömu reglur og aðrir veljarar, t.d. tög.  Ef regla á
        ekki við innihalda klasa (t.d. ef `font-size` er notað á einingu sem hefur
        engan texta), þá gerir tölvan einfaldlega ekkert með þá reglu, en notar samt
        þær reglur sem virka.\n\n</details>\n<details>\n<summary>\n<strong>Af hverju
        er veljarinn með punkt fyrir framan heitið?</strong>\n</summary>\nÍ CSS táknar
        punktur framan við heiti veljara að þetta er heiti á klasa. Ef það er enginn
        punktur þýðir það að veljarinn er heiti á HTML tagi.\n</details>\n<details>\n<summary>\n<strong>Af
        hverju mundi vefsmiður vilja nota klasa?</strong>\n</summary>\n\nVefsmiður
        notar klasa ef hann vill að sumar einingar hafi annað útlit en aðrar jafnvel
        þó að þær séu í samskonar tagi.  Það er líka hægt að nota klasa til að gefa
        einingum sem eru í ólíkum tögum sama útlit.\n\n</details>\n</div>\n\n# Vorklasinn\n\nNú
        þegar klasinn fyrir vetur er tilbúinn, getur þú byrjað á hinum árstíðunum.\n\n-
        \  Finndu tóma CSS reglusettið í stílsíðunni sem gefa vororðunum útlit sitt.\n-
        \  Bættu við tveimur reglum, aðra til að gefa textanum vorlega litinn úr fyrri
        áfanga og hina til að setja aðra leturgerð, leturstærð eða skreytingu á textann.\n-
        \  Bættu einingunum í vorhluta síðunnar við klasann `spring` í HTML síðunni."
      CSD U2 classes summer: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>

        </summary>
        For the code for the winter class to work, it needs to both create a winter class and add elements to the class.

        The class is created in the style sheet, with the following code.

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        This code creates a class called `winter` and makes everything in the class our winter blue, which has the RGB values of (195,230,255).

        The code that adds a `h5` element to the winter class is `<h5 class="winter">`.  The `class=winter` inside the opening tag adds everything inside the tag to the class.

        </details>
        <details>
        <summary>
        <strong>How do I create a new rule-set?</strong>

        </summary>
        You can create a new rule-set by following the pattern that the `winter` and `spring` classes used in the style sheet.
        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        The selector name and the color values will be different, but the following pattern is always the same.

        <pre>.classname {
          property1: value1;
          property2: value2;
        }</pre>

        </details>
        <details>
        <summary>
        <strong>Why does the selector have a period in front of it?</strong>

        </summary>
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        </details>
        <details>
        <summary>
        <strong>Why would a web developer use classes?</strong>

        </summary>

        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.

        </details>
        </div>

        # Summer and Autumn Classes

        -   Inside the style sheet, create a new rule-set for a "summer" class.
        -   Add a rule to set the text in the summer class to your summer RGB color.
        -   Add the summer class to the summer elements in the HTML page.
        -   Do the same for the autumn class.
      CSD U2 classes summer_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>
        For the code for the winter class to work, it needs to both create a winter class and add elements to the class.

        The class is created in the style sheet, with the following code.

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        This code creates a class called `winter` and makes everything in the class our winter blue, which has the RGB values of (195,230,255).

        The code that adds a `h5` element to the winter class is `<h5 class="winter">`.  The `class=winter` inside the opening tag adds everything inside the tag to the class.

        </details>
        <details>
        <summary>
        <strong>How do I create a new rule-set?</strong>
        </summary>

        You can create a new rule-set by following the pattern that the `winter` and `spring` classes used in the style sheet.

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        The selector name and the color values will be different, but the following pattern is always the same.

        <pre>.classname {
          property1: value1;
          property2: value2;
        }</pre>

        </details>
        <details>
        <summary>
        <strong>Why does the selector have a period in front of it?</strong>
        </summary>
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        </details>
        <details>
        <summary>
        <strong>Why would a web developer use classes?</strong>
        </summary>

        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.

        </details>
        </div>

        # Summer and Autumn Classes

        -   Inside the style sheet, create a new rule-set for a "summer" class.
        -   Add a rule to set the text in the summer class to your summer RGB color.
        -   Add the summer class to the summer elements in the HTML page.
        -   Do the same for the autumn class.
      CSD U2 classes summer_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>Hvernig virkar kóðinn?</strong>
        </summary>
        Til að kóðinn með klasanum "vetur" virki, þarf bæði að búa til klasann "vetur" og setja einingar í þennan klasa.

        Klasinn er búinn til í stílsíðunni með eftirfarandi kóða.

        <pre>.vetur {
          color: rgb(195,230,255);
        }</pre>

        Þessi kóði býr til klasa sem heitir `vetur` og gefur öllum texta sem er settur í klasann fölbláan leturlit með RGB gildin (195,230,255).

        Kóðinn sem setur `h5` einingu í klasann veturer `<h5 class="vetur">`.  Kóðinn `class=winter` innan í opnunartaginu setur allt sem er í taginu í klasann.

        </details>
        <details>
        <summary>
        <strong>Hvernig bý ég til nýtt sett af reglum?</strong>
        </summary>

        Þú getur búið til nýjar reglur með því að gera eins og gert var með `vetur` og `vor` klasana í stílsíðunni.

        <pre>.vetur {
          color: rgb(195,230,255);
        }</pre>

        Eiginleikinn og litagildin geta verið önnur en mynstrið er alltaf eins og hér sýnt.

        <pre>.klasaheiti {
          eiginleiki1: gildi1;
          eiginleiki2: gildi2;
        }</pre>

        </details>
        <details>
        <summary>
        <strong>Hvers vegna er punktur framan við heitið?</strong>
        </summary>
        Í CSS táknar punktur fram við heiti veljara að veljarinn er heiti á klasa (class). Ef enginn punktur er þýðir það að veljarinn er heiti á HTML tagi.
        </details>
        <details>
        <summary>
        <strong>Af hverju mundi vefsmiður nota klasa?</strong>
        </summary>

        Vefsmiður notar klasa þegar einingar þurfa að hafa mismunandi útlit þó að þær séu í samskonar tagi. Klasa má einnig nota til að gefa einingum sem eru í mismunandi tögum sama útlit.

        </details>
        </div>

        # Klasarnir sumar og haust

        -   Bættu í stílsíðuna nýju reglusetti fyrir "sumar" klasa.
        -   Bættu við reglu sem lætur texta í sumar-klasanum fá RGB litinn fyrir sumar.
        -   Láttu einingar fyrir sumar á HTML síðunni vera í sumar-klasanum.
        -   Endurtaktu þetta fyrir "haust" klasa.
      CSD U2 commenting: |-
        # Athugasemdir

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        **Hvað eru bil?**

        </summary>
        Bil eru þeir stafir sem sjást sem eyður á skjánum, svo sem stafabil, dálkbil eða ný lína. Bil aðskilja hluta skjals svo það sé auðveldara að lesa það. Í HTML kóða eru ný atriði yfirleitt sett á nýju línu, svo það sé auðveldara að lesa kóðann, en það hefur engin áhrif á það hvernig vefsíðan birtist.
        </details>
        <details>
        <summary>

        **Hvað er inndráttur?**

        </summary>
        Inndráttur er það þegar texti byrjar innar á síðunni en venjulega og aðskilur hann frá öðrum texta.  Í kóða hjálpar inndráttur að sýna uppbyggingu forrits. Í HTML er venjan að hafa einingar inndregnar ef þær eru innan í öðrum einingum. Hér er dæmi:
        <pre>
           &lt;body&gt;
              &lt;p&gt;Þessi efnisgrein er innan í "body" einingunni.&lt;/p&gt;
           &lt;/body&gt;
        </pre>

        </details>
        <details>
        <summary>

        **Hvað er útlitsmótun?**

        </summary>

        Útlitsmótun er það að stilla texta upp svo það sé auðveldara að lesa hann. Algengasta útlitsmótun á HTML er inndráttur. Einingar sem eru innan í öðrum einingum eru lengra til hægri í kóðanum. Hér er dæmi:

        <pre>
           &lt;body&gt;
              &lt;p&gt;Þessi efnisgrein er innan í "body" einingunni.&lt;/p&gt;
           &lt;/body&gt;
        </pre>

        </details>
        </div>

        Þú getur bætt **athugasemdum** í kóðann til að útskýra hvað kóðinn er að gera og hvað hann á að búa til. Athugasemdir geta hjálpað við villuleit og hjálpa líka öðrum sem þurfa að lesa kóðann þinn og skilja hann.

        <pre>
        &lt;!--þetta er athugasemd --&gt;
        </pre>

        # Gerðu þetta

        -   Skoðaðu kóðann með félaga og finndu athugasemdirnar.
        -   Notaðu athugasemdirnar til að hjálpa þér að laga villurnar í HTML kóðanum.
      CSD U2 commenting_2018: |-
        # Athugasemdir

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        **Hvað eru bil?**

        </summary>
        Bil eru þeir stafir sem sjást sem eyður á skjánum, svo sem stafabil, dálkbil eða ný lína. Bil aðskilja hluta skjals svo það sé auðveldara að lesa það. Í HTML kóða eru ný atriði yfirleitt sett á nýju línu, svo það sé auðveldara að lesa kóðann, en það hefur engin áhrif á það hvernig vefsíðan birtist.
        </details>
        <details>
        <summary>

        **Hvað er inndráttur?**

        </summary>
        Inndráttur er það þegar texti byrjar innar á síðunni en venjulega og aðskilur hann frá öðrum texta.  Í kóða hjálpar inndráttur að sýna uppbyggingu forrits. Í HTML er venjan að hafa einingar inndregnar ef þær eru innan í öðrum einingum. Hér er dæmi:
        <pre>
           &lt;body&gt;
              &lt;p&gt;Þessi efnisgrein er innan í "body" einingunni.&lt;/p&gt;
           &lt;/body&gt;
        </pre>

        </details>
        <details>
        <summary>

        **Hvað er útlitsmótun?**

        </summary>

        Útlitsmótun er það að stilla texta upp svo það sé auðveldara að lesa hann. Algengasta útlitsmótun á HTML er inndráttur. Einingar sem eru innan í öðrum einingum eru lengra til hægri í kóðanum. Hér er dæmi:

        <pre>
           &lt;body&gt;
              &lt;p&gt;Þessi efnisgrein er innan í "body" einingunni.&lt;/p&gt;
           &lt;/body&gt;
        </pre>

        </details>
        </div>

        Þú getur bætt **athugasemdum** í kóðann til að útskýra hvað kóðinn er að gera og hvað hann á að búa til. Athugasemdir geta hjálpað við villuleit og hjálpa líka öðrum sem þurfa að lesa kóðann þinn og skilja hann.

        <pre>
        &lt;!--þetta er athugasemd --&gt;
        </pre>

        # Gerðu þetta

        -   Skoðaðu kóðann með félaga og finndu athugasemdirnar.
        -   Notaðu athugasemdirnar til að hjálpa þér að laga villurnar í HTML kóðanum.
      CSD U2 commenting_2019: |-
        # Athugasemdir

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        **Hvað eru bil?**

        </summary>
        Bil eru þeir stafir sem sjást sem eyður á skjánum, svo sem stafabil, dálkbil eða ný lína. Bil aðskilja hluta skjals svo það sé auðveldara að lesa það. Í HTML kóða eru ný atriði yfirleitt sett á nýju línu, svo það sé auðveldara að lesa kóðann, en það hefur engin áhrif á það hvernig vefsíðan birtist.
        </details>
        <details>
        <summary>

        **Hvað er inndráttur?**

        </summary>
        Inndráttur er það þegar texti byrjar innar á síðunni en venjulega og aðskilur hann frá öðrum texta.  Í kóða hjálpar inndráttur að sýna uppbyggingu forrits. Í HTML er venjan að hafa einingar inndregnar ef þær eru innan í öðrum einingum. Hér er dæmi:
        <pre>
           &lt;body&gt;
              &lt;p&gt;Þessi efnisgrein er innan í "body" einingunni.&lt;/p&gt;
           &lt;/body&gt;
        </pre>

        </details>
        <details>
        <summary>

        **Hvað er útlitsmótun?**

        </summary>

        Útlitsmótun er það að stilla texta upp svo það sé auðveldara að lesa hann. Algengasta útlitsmótun á HTML er inndráttur. Einingar sem eru innan í öðrum einingum eru lengra til hægri í kóðanum. Hér er dæmi:

        <pre>
           &lt;body&gt;
              &lt;p&gt;Þessi efnisgrein er innan í "body" einingunni.&lt;/p&gt;
           &lt;/body&gt;
        </pre>

        </details>
        </div>

        Þú getur bætt **athugasemdum** í kóðann til að útskýra hvað kóðinn er að gera og hvað hann á að búa til. Athugasemdir geta hjálpað við villuleit og hjálpa líka öðrum sem þurfa að lesa kóðann þinn og skilja hann.

        <pre>
        &lt;!--þetta er athugasemd --&gt;
        </pre>

        # Gerðu þetta

        -   Skoðaðu kóðann með félaga og finndu athugasemdirnar.
        -   Notaðu athugasemdirnar til að hjálpa þér að laga villurnar í HTML kóðanum.
      CSD U2 create page: |-
        # Búðu til og skírðu nýju síðuna

        Áður en þú byrjar að kóða ættirðu að ganga úr skugga um að þú hafir allar síðurnar sem þú þarft fyrir verkefnið.

        # Gerðu þetta

        -   Búðu til nýja HTML síðu og gefðu henni heiti. (Kíktu á [Kennslustund 6 Þraut 8](/s/csd2/stage/6/puzzle/8) hafir þú gleymt hvernig.)
        -   Endurtaktu þetta fyrir aðrar síður sem þú vilt bæta við.
      CSD U2 create page_2018: |-
        # Búðu til og skírðu nýju síðuna

        Áður en þú byrjar að kóða ættirðu að ganga úr skugga um að þú hafir allar síðurnar sem þú þarft fyrir verkefnið.

        # Gerðu þetta

        -   Búðu til nýja HTML síðu og gefðu henni heiti. (Kíktu á [Kennslustund 6 Þraut 8](/s/csd2/stage/6/puzzle/8) hafir þú gleymt hvernig.)
        -   Endurtaktu þetta fyrir aðrar síður sem þú vilt bæta við.
      CSD U2 create page_2019: |-
        # Búðu til og skírðu nýju síðuna

        Áður en þú byrjar að kóða ættirðu að ganga úr skugga um að þú hafir allar síðurnar sem þú þarft fyrir verkefnið.

        # Gerðu þetta

        -   Búðu til nýja HTML síðu og gefðu henni heiti. (Kíktu á [Kennslustund 6 Þraut 8](/s/csd2/stage/6/puzzle/8) hafir þú gleymt hvernig.)
        -   Endurtaktu þetta fyrir aðrar síður sem þú vilt bæta við.
      CSD U2 header footer: "# Tenglarönd og síðufótur\n\nAllar síðurnar þínar þurfa
        að hafa tenglarönd (enska: navigation bar) og síðufót (enska: footer). \n\n#
        Gerðu þetta\n\n-   Gættu þess að hver síða hafi tenglarönd sem tengir þessa
        síðu við aðrar síður á vefnum þínum. Þú getur rfjað upp tenglarendur í <a
        href=\"/s/csd2/stage/9/puzzle/4\" target=\"_new\">áfanga 9 þraut 4</a>.\n-
        \  Settu á hverja síðu síðufót sem inniheldur upplýsingar um höfundarrétt
        fyrir síðuna. (Farðu á <a href=\"https://creativecommons.org/choose/\" target=\"_new\">Creative
        Commons</a> til að fá hjálp með að búa til þetta HTML.)"
      CSD U2 header footer_2018: "# Tenglarönd og síðufótur\n\nAllar síðurnar þínar
        þurfa að hafa tenglarönd (enska: navigation bar) og síðufót (enska: footer).
        \n\n# Gerðu þetta\n\n-   Gættu þess að hver síða hafi tenglarönd sem tengir
        þessa síðu við aðrar síður á vefnum þínum. Þú getur rfjað upp tenglarendur
        í <a href=\"/s/csd2/stage/9/puzzle/4\" target=\"_new\">áfanga 9 þraut 4</a>.\n-
        \  Settu á hverja síðu síðufót sem inniheldur upplýsingar um höfundarrétt
        fyrir síðuna. (Farðu á <a href=\"https://creativecommons.org/choose/\" target=\"_new\">Creative
        Commons</a> til að fá hjálp með að búa til þetta HTML.)"
      CSD U2 header footer_2019: "# Tenglarönd og síðufótur\n\nAllar síðurnar þínar
        þurfa að hafa tenglarönd (enska: navigation bar) og síðufót (enska: footer).
        \n\n# Gerðu þetta\n\n-   Gættu þess að hver síða hafi tenglarönd sem tengir
        þessa síðu við aðrar síður á vefnum þínum. Þú getur rfjað upp tenglarendur
        í <a href=\"/s/csd2/stage/9/puzzle/4\" target=\"_new\">áfanga 9 þraut 4</a>.\n-
        \  Settu á hverja síðu síðufót sem inniheldur upplýsingar um höfundarrétt
        fyrir síðuna. (Farðu á <a href=\"https://creativecommons.org/choose/\" target=\"_new\">Creative
        Commons</a> til að fá hjálp með að búa til þetta HTML.)"
      CSD U2 layout style bgcolor: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>How does the code work?</strong></summary>

        Here is the code that is making the background of the page blue:

        <pre>body {
          background-color: lightblue;
        }</pre>

        -   `body` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the body element is the entire page.
        -   `background-color: lightblue;` is the rule that makes the entire page light blue.
            -   `background-color` is the _property_.  It explains what the rule is about, in this case the color of the background.
            -   `lightblue` is the _value_.  It explains how the rule should be applied, in this case making the background light blue.
                </details>
                <details>
                <summary><strong>What colors can I use in CSS?</strong></summary>

        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools - CSS Legal Color Values</a>

        </details>
        <details>
        <summary><strong>What does the `background-color` property do?</strong></summary>

        The `background-color` property determines the color of the background of an element.  You can read more about the property at <a href="http://www.w3schools.com/cssref/pr_background-color.asp">W3Schools - CSS background-color Property</a>

        </details>
        <details>
        <summary><strong>What if an element inside the page has a different background color from the body?</strong></summary>

        You can see the answer to this question by adding a `background-color` rule to the `p` tag.  The paragraphs will have the background color in the rule for the `p` tag, and the rest of the page will follow the rule for the `body` tag.

        </details>
        <details>
        <summary><strong>What is a style sheet?</strong></summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Background Color

        -   Find the code in the style sheet that is making the background of the entire page light blue.
        -   Change the code to make the page a different color.
        -   Try to change the background color of just the paragraphs.
      CSD U2 layout style bgcolor_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>

        Here is the code that is making the background of the page blue:

        <pre>
        body {
          background-color: lightblue;
        }
        </pre>

        -   `body` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the body element is the entire page.
        -   `background-color: lightblue;` is the rule that makes the entire page light blue.
            -   `background-color` is the _property_.  It explains what the rule is about, in this case the color of the background.
            -   `lightblue` is the _value_.  It explains how the rule should be applied, in this case making the background light blue.

        </details>
        <details>
        <summary>
        <strong>What colors can I use in CSS?</strong>
        </summary>

        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp" target="_new">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp" target="_new">W3Schools - CSS Legal Color Values</a>

        </details>
        <details>
        <summary>
        <strong>What does the background-color property do?</strong>
        </summary>

        The `background-color` property determines the color of the background of an element.  You can read more about the property at <a href="http://www.w3schools.com/cssref/pr_background-color.asp" target="_new">W3Schools - CSS background-color Property</a>

        </details>
        <details>
        <summary>
        <strong>What if an element inside the page has a different background color from the body?</strong>
        </summary>

        You can see the answer to this question by adding a `background-color` rule to the `p` tag.  The paragraphs will have the background color in the rule for the `p` tag, and the rest of the page will follow the rule for the `body` tag.

        </details>
        <details>
        <summary>
        <strong>What is a style sheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>
        h2 {
          color: blue;
          font-family: cursive;
        }
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Background Color

        -   Find the code in the style sheet that is making the background of the entire page light blue.
        -   Change the code to make the page a different color.
        -   Try to change the background color of just the paragraphs.
      CSD U2 layout style bgcolor_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">
        <details>

        <summary>
        <strong>Hvernig virkar kóðinn?</strong>
        </summary>

        Hér er kóðinn sem gefur síðunni bláan bakgrunn:

        <pre>
        body {
          background-color: lightblue;
        }
        </pre>

        -   `body` er _veljarinn_ (selector).  Hann velur hvaða einingar eiga að fylgja reglunum í krullusviganum { }. Í þessu tilfelli er það "body" einingin sem er öll síðan.
        -   `background-color: lightblue;` er reglan sem litar síðuna ljósbláa.
            -   `background-color` er _eiginleiki_ (property). Hann segir til um hverju á að breyta í völdu einingunum, í þessu tilfelli lit bakgrunns.
            -   `lightblue` er _gildið_ (value). Það segir til um hvernig eigi að hafa eiginleikann, í þessu tilfelli að hafa bakgrunnslitinn ljósbláan.

        </details>
         <details>
            <summary>
              <strong>Hvaða liti get ég notað í CSS?</strong>
            </summary>

        CSS getur notað algengustu (ensku) heitin á litum (red, blue, green, o.s.frv.), og mörg af þeim óalgengari.  Þú getur séð lista yfir öll litaheiti sem CSS skilur á vefsíðunni <a href="http://www.w3schools.com/colors/colors_names.asp" target="_new">W3Schools - HTML Color Names</a>.  Þú getur samt notað liti sem ekki eru á listanum en þá þarft þú að nota RGB gildi þeirra.  Þú getur lesið meira um notkun lita í CSS á síðunni <a href="http://www.w3schools.com/cssref/css_colors_legal.asp" target="_new">W3Schools - CSS Legal Color Values</a>

        </details>
        <details>
        <summary>
        <strong>Hvað gerir eiginleikinn "background-color"?</strong>
        </summary>

        Eiginleikinn `background-color` segir til um lit á bakgrunni einingar.  Þú getur lesið meira um þennan eiginleika á síðunni <a href="http://www.w3schools.com/cssref/pr_background-color.asp" target="_new">W3Schools - CSS background-color Property</a>

        </details>
        <details>
        <summary>
        <strong>Hvað ef eining innan síðunnar hefur annan bakgrunnslit en body einingin?</strong>
        </summary>

        Þú getur séð svarið við spurningunni með því að bæta reglu fyrir `background-color` við `p` tagið.  Efnisgreinar munu þá fá lit samkvæmt reglunni fyrir `p` tagið og aðrar einingar síðunnar fylgja reglunni fyrir `body` tagið.

        </details>
        <details>
        <summary>
        <strong>Hvað er stílsíða?</strong>
        </summary>

        Stílsíða er skjal sem stjórnar útliti vefsíðu.  Utanáliggjandi stílsíður eru sérstakar skrár sem eru tengdar HTML síðunni.

        </details>
        <details>
        <summary>
        <strong>Hvað er CSS?</strong>
        </summary>

        CSS er forritunarmál sem stjórnar því hvernig innihald vefs birtist.  Það notar sett af reglum til að stýra útliti vefsíðu.  Hvert sett af reglum hefur veljara (selector), sem velur þær einingar á síðunni sem stjórnast af reglunum, og sjálfar reglurnar, sem segja til um hvernig einingarnar skuli birtast.   Hver regla samanstendur af eiginleika (property) og gildi (value) fyrir eiginleikann.

        Hér er dæmi um reglusett sem lætur textann í `h2` tögum fá bláan lit og skrifstafi:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }</pre>

        Í þessu dæmi er `h2` veljarinn, `color` og `font-family` eru eiginleikar og `blue` og `cursive` eru gildi fyrir þá eiginleika.

        </details>
        </div>

        # Bakgrunnslitur

        -   Finndu kóðann í stílsíðunni sem setur ljósbláan bakgrunn á alla síðuna.
        -   Breyttu kóðanum svo síðan fái annan lit.
        -   Prófaðu að breyta bakgrunnslit bara fyrir efnisgreinar.
      CSD U2 layout style body: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">
        <details>

        <summary><strong>What does the `body` selector do?</strong></summary>

        Because the content of the web page is all inside the `body` tag, the body selector gives style rules for everything on the web page.

        </details>
        <details>
        <summary><strong>What does the `color` property do?</strong></summary>

        The `color` property specifies the color of the text.  If there’s no text, it won’t do anything. Read more at <a href="http://www.w3schools.com/cssref/pr_text_color.asp"> W3Schools - CSS color Property</a>

        </details>
        <details>
        <summary><strong>What does the `text-align` property do?</strong></summary>

        The `text-align` property aligns the text to the left, right, or center. You can read more at <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp">W3Schools - CSS text-align Property</a>

        </details>
        <details>
        <summary><strong>What does the `text-decoration` property do?</strong></summary>

        The `text-decoration` property puts a line over, under, or through a piece of text.  You can read more about the property at <a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp">W3Schools - CSS text-decoration Property</a>

        </details>
        <details>
        <summary><strong>What does the `font-family` property do?</strong></summary>

        The `font-family` property changes the font of the text.  It gives a general description of the type of font that should be used, but each browser might display the font slightly differently.  Read more at <a href="http://www.w3schools.com/cssref/pr_font_font-family.asp">W3chools - CSS font-family Property</a>

        </details>
        <details>
        <summary><strong>What does the `font-size` property do?</strong></summary>

        The `font-size` property changes the size of the text.  You can use general terms, such as `small`, `medium`, and `large`, or you can specify the exact size in pixels, such as `20px`. Read more at <a href="http://www.w3schools.com/cssref/pr_font_font-size.asp">W3Schools - CSS font-size Property</a>

        </details>
        <details>
        <summary><strong>What is a stylesheet?</strong></summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # The Body Element

        -   Find the `body` rule-set in the style sheet.
        -   Discuss with a partner what you think will happen if you add `text-align`, `color`, or other text properties to the `body` rule set.
        -   Try out some different properties to check your guesses.
      CSD U2 layout style body_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What does the body selector do?</strong>
        </summary>

        Because the content of the web page is all inside the `body` tag, the body selector gives style rules for everything on the web page.

        </details>
        <details>
        <summary>
        <strong>What does the color property do?</strong>
        </summary>

        The `color` property specifies the color of the text.  If there’s no text, it won’t do anything. Read more at <a href="http://www.w3schools.com/cssref/pr_text_color.asp" target="_new"> W3Schools - CSS color Property</a>

        </details>
        <details>
        <summary>
        <strong>What does the text-align property do?</strong>
        </summary>

        The `text-align` property aligns the text to the left, right, or center. You can read more at <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp" target="_new">W3Schools - CSS text-align Property</a>

        </details>
        <details>
        <summary>
        <strong>What does the text-decoration property do?</strong>
        </summary>

        The `text-decoration` property puts a line over, under, or through a piece of text.  You can read more about the property at <a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp" target="_new">W3Schools - CSS text-decoration Property</a>

        </details>
        <details>
        <summary>
        <strong>What does the font-family property do?</strong>
        </summary>

        The `font-family` property changes the font of the text.  It gives a general description of the type of font that should be used, but each browser might display the font slightly differently.  Read more at <a href="http://www.w3schools.com/cssref/pr_font_font-family.asp" target="_new">W3chools - CSS font-family Property</a>

        </details>
        <details>
        <summary>
        <strong>What does the font-size property do?</strong>
        </summary>

        The `font-size` property changes the size of the text.  You can use general terms, such as `small`, `medium`, and `large`, or you can specify the exact size in pixels, such as `20px`. Read more at <a href="http://www.w3schools.com/cssref/pr_font_font-size.asp" target="_new">W3Schools - CSS font-size Property</a>

        </details>
        <details>
        <summary>
        <strong>What is a stylesheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>
        h2 {
           color: blue;
           font-family: cursive;
        }
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # The Body Element

        -   Find the `body` rule-set in the style sheet.
        -   Discuss with a partner what you think will happen if you add `text-align`, `color`, or other text properties to the `body` rule set.
        -   Try out some different properties to check your guesses.
      CSD U2 layout style body_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">
        <details>

        <summary>
        <strong>Hvað gerir veljarinn "body"?</strong>
        </summary>

        Þar sem allt innihald vefsíðu er innan í `body` taginu, geta reglur með "body" fyrir veljara haft áhrif á allt efni síðunnar.

        </details>
        <details>
        <summary>
        <strong>Hvað gerir eiginleikinn "color"?</strong>
        </summary>

        Eiginleikinn `color` skilgreinir lit á texta.  Ef það er enginn texti hefur hann ekki áhrif. Meira um það á <a href="http://www.w3schools.com/cssref/pr_text_color.asp" target="_new"> W3Schools - CSS color Property</a>

        </details>
        <details>
        <summary>
        <strong>Hvað gerir eiginleikinn "text-align"?</strong>
        </summary>

        Eiginleikinn `text-align` stillir texta til vinstri, hægri eða fyrir miðju. Meira um það á síðunni <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp" target="_new">W3Schools - CSS text-align Property</a>

        </details>
        <details>
        <summary>
        <strong>Hvað gerir eiginleikinn "text-decoration"?</strong>
        </summary>

        Eiginleikinn `text-decoration` setur línu yfir, undir eða í gegnum texta.  Þú getur lesið meira um hann á síðunni <a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp" target="_new">W3Schools - CSS text-decoration Property</a>

        </details>
        <details>
        <summary>
        <strong>Hvað gerir eiginleikinn "font-family"?</strong>
        </summary>

        Eiginleikinn `font-family` stjórnar almennri leturgerð texta. Hann segir til um almenna gerð leturs, en nákvæmlega hvaða letur er notað getur verið mismunandi eftir vöfrum. Meiri lesning um það á <a href="http://www.w3schools.com/cssref/pr_font_font-family.asp" target="_new">W3chools - CSS font-family Property</a>

        </details>
        <details>
        <summary>
        <strong>Hvað gerir eiginleikinn "font-size"?</strong>
        </summary>

        Eiginleikinn `font-size` stýrir stærð leturs. Það er m.a. hægt að nota stærðarflokka eins og `small`, `medium` og `large`, eða tilgreina stærðina nákvæmlega í skjádílum, svo sem `20px`. Nánar á <a href="http://www.w3schools.com/cssref/pr_font_font-size.asp" target="_new">W3Schools - CSS font-size Property</a>

        </details>
        <details>
        <summary>
        <strong>Hvað er stílsíða?</strong>
        </summary>

        Stílsíða (stylesheet) er skjal sem stjórnar útliti vefsíðu. Utanáliggjandi stílsíður eru sérstakar skrár sem eru tengdar við HTML síðuna.

        </details>
        <details>
        <summary>
        <strong>Hvað er CSS?</strong>
        </summary>

        CSS er forritunarmál sem stjórnar því hvernig innihald vefs birtist.  Það notar sett af reglum til að stýra útliti vefsíðu.  Hvert sett af reglum hefur veljara (selector), sem velur þær einingar á síðunni sem stjórnast af reglunum, og sjálfar reglurnar, sem segja til um hvernig einingarnar skuli birtast.   Hver regla samanstendur af eiginleika (property) og gildi (value) fyrir eiginleikann.

        Hér er dæmi um reglusett sem lætur textann í `h2` tögum fá bláan lit og skrifstafi:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }</pre>

        Í þessu dæmi er `h2` veljarinn, `color` og `font-family` eru eiginleikar og `blue` og `cursive` eru gildi fyrir þá eiginleika.

        </details>
        </div>

        # Body einingin

        -   Finndu reglusettið fyrir `body` í stílsíðunni.
        -   Ræddu við félaga um hvað þið haldið að muni gerast ef þú bætir `text-align`, `color`, eða öðrum textaeiginleikum við `body` reglurnar.
        -   Prófaðu eitthvað af öðrum eiginleikum til að sjá hvaða áhrif þeir hafa.
      CSD U2 layout style border: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What colors can I use in CSS?</strong></summary>

        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools - CSS Legal Color Values</a>

        </details>
        <details>
        <summary><strong>How does the code work?</strong></summary>

        Here is the code that is making the image borders:

        <pre>img {
          border-color: saddlebrown;
          border-width: 4px;
          border-style: solid;
          border-radius: 10px;
        }</pre>

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;`, and `border-radius: 10px;` are the rules that make the border.
            </details>
            <details>
            <summary><strong>What does the <code>border-style</code> property do?</strong></summary>

        The `border-style` property determines what kind of border (solid, dotted, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp">W3Schools - CSS border-style Property</a>

        </details>
        <details>
        <summary><strong>What does the <code>border-radius</code> property do?</strong></summary>

        The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp">W3Schools - CSS3 border-radius property</a>

        </details>
        <details>
        <summary><strong>What does the <code>float</code> property do?</strong></summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Borders

        -   Find the rules in the style sheet that set image borders color and width.
        -   Change the color and width of your borders.
        -   Try out some different border styles.
            -   Choose from `dotted`, `dashed`, `solid`, and `double`
        -   Put a border on another type of page element, such as one of the headings or the paragraphs.
      CSD U2 layout style border_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What colors can I use in CSS?</strong>
        </summary>
        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp" target="_new">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp" target="_new">W3Schools - CSS Legal Color Values</a>
        </details>
        <details>
        <summary>
        <strong>How does the code work?</strong>
        </summary>
        Here is the code that is making the image borders:

        <pre>img {
          border-color: saddlebrown;
          border-width: 4px;
          border-style: solid;
          border-radius: 10px;
        }</pre>

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;`, and `border-radius: 10px;` are the rules that make the border.
            </details>
            <details>
            <summary>
            <strong>What does the <code>border-style</code> property do?</strong>
            </summary>
            The `border-style` property determines what kind of border (solid, dotted, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp" target="_new">W3Schools - CSS border-style Property</a>
            </details>
            <details>
            <summary>
            <strong>What does the <code>border-radius</code> property do?</strong>
            </summary>
            The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp" target="_new">W3Schools - CSS3 border-radius property</a>
            </details>
            <details>
            <summary>
            <strong>What does the <code>float</code> property do?</strong>
            </summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Borders

        -   Find the rules in the style sheet that set image borders color and width.
        -   Change the color and width of your borders.
        -   Try out some different border styles.
            -   Choose from `dotted`, `dashed`, `solid`, and `double`
        -   Put a border on another type of page element, such as one of the headings or the paragraphs.
      CSD U2 layout style border_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
          <details>

            <summary>
              <strong>Hvaða liti get ég notað í CSS?</strong>
            </summary>

        CSS getur notað algengustu (ensku) heitin á litum (red, blue, green, o.s.frv.), og mörg af þeim óalgengari.  Þú getur séð lista yfir öll litaheiti sem CSS skilur á vefsíðunni <a href="http://www.w3schools.com/colors/colors_names.asp" target="_new">W3Schools - HTML Color Names</a>.  Þú getur samt notað liti sem ekki eru á listanum en þá þarft þú að nota RGB gildi þeirra.  Þú getur lesið meira um notkun lita í CSS á síðunni <a href="http://www.w3schools.com/cssref/css_colors_legal.asp" target="_new">W3Schools - CSS Legal Color Values</a>

          </details>
        <details>
        <summary>
        <strong>Hvernig virkar kóðinn?</strong>
        </summary>
        Hér er kóðinn sem býr til umgjörð myndanna:

        <pre>img {
          border-color: saddlebrown;
          border-width: 4px;
          border-style: solid;
          border-radius: 10px;
        }</pre>

        -   `img` er _veljarinn_ (selector). Hann velur hvaða einingar eiga að fylgja reglunum sem eru í krullusviganum { }, í þessu tilfelli myndirnar (img).
        -   `border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;` og `border-radius: 10px;` eru reglurnar sem skilgreina jaðar myndanna.
            </details>
            <details>
            <summary>
            <strong>Hvað gerir eiginleikinn <code>border-style</code>?</strong>
            </summary>
            Eiginleikinn `border-style` segir til um hvernig rammalína (heila línu, punktalínu, o.s.frv.) er á jaðri einingarinnar.  Nánar um það á síðunni <a href="http://www.w3schools.com/cssref/pr_border-style.asp" target="_new">W3Schools - CSS border-style Property</a>
            </details>
            <details>
            <summary>
            <strong>Hvað gerir eiginleikinn <code>border-radius</code>?</strong>
            </summary>
            Eiginleikinn `border-radius` stjórnar hvorn horn einingar eru bogadregin eða venjuleg.  Stærri radíus gefur lengri, mýkri boga og smærri radíus gefur styttri og skarpari boga. Radíus sem er 0 gefur venjulegt horn. Nánar um þennan eiginleika á <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp" target="_new">W3Schools - CSS3 border-radius property</a>
            </details>
            <details>
            <summary>
            <strong>Hvað gerir eiginleikinn <code>float</code>?</strong>
            </summary>

        Með `float` eiginleikanum getum við látið einingu "fljóta", sem þýðir að einingarnar sem koma á eftir henni munu flæða í kringum hana eins og hægt er.  Ef gildi `float` er `left`, mun einingin fljóta til vinstri og einingarnar sem fylgja munu liggja til hægri við hana (eftir því sem þær geta).  Ef `float` hefur gildið `right`, mun einingin fljóta til hægri og einingarnar á eftir henni munu liggja til vinstri við hana. Þú getur lesið meira um þennan eiginleika á síðunni <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Jaðrar

        -   Finndu reglurnar í stílsíðunni sem stilla lit og breidd á jöðrum mynda.
        -   Breyttu lit og breidd jaðranna.
        -   Prófaðu mismunandi línugerðir á jöðrunum.
            -   Valkostir eru `dotted`, `dashed`, `solid` og `double`
        -   Settu sýnilegan jaðar á einhverja aðra einingu á síðunni, svo sem a´eina fyrirsögnina eða á efnisgreinar.
      CSD U2 layout style borderradius: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>How does the code work?</strong></summary>

        Here is the code that is making the image borders:

        <pre>img {
          border-color: saddlebrown;
          border-width: 4px;
          border-style: solid;
          border-radius: 10px;
        }</pre>

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;`, and `border-radius: 10px;` are the rules that make the border.
            </details>
            <details>
            <summary><strong>What does the `border-style` property do?</strong>
            </summary>

        The `border-style` property determines what kind of border (solid, dotted, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp">W3Schools - CSS border-style Property</a>

        </details>
        <details>
        <summary><strong>What does the <code>border-radius</code>code> property do?</strong>

        </summary>

        The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp">W3Schools - CSS3 border-radius property</a>

        </details>
        <details>
        <summary><strong>What does the <code>float</code> property do?</strong>
        </summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Border Radius

        -   Look at the `border-radius` property inside your `img` rule-set
        -   Discuss with your partner what you think the property does.
        -   Try different values for border radius and decide which one you like the best.
      CSD U2 layout style borderradius_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>
        Here is the code that is making the image borders:

        <pre>img {
          border-color: saddlebrown;
          border-width: 4px;
          border-style: solid;
          border-radius: 10px;
        }</pre>

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;`, and `border-radius: 10px;` are the rules that make the border.
            </details>
            <details>
            <summary>
            <strong>What does the <code>border-style</code> property do?</strong>
            </summary>
            The `border-style` property determines what kind of border (solid, dotted, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp" target="_new">W3Schools - CSS border-style Property</a>
            </details>
            <details>
            <summary>
            <strong>What does the <code>border-radius</code> property do?</strong>
            </summary>
            The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp" target="_new">W3Schools - CSS3 border-radius property</a>
            </details>
            <details>
            <summary>
            <strong>What does the <code>float</code> property do?</strong>
            </summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Border Radius

        -   Look at the `border-radius` property inside your `img` rule-set
        -   Discuss with your partner what you think the property does.
        -   Try different values for border radius and decide which one you like the best.
      CSD U2 layout style borderradius_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>
        <summary>
        <strong>Hvernig virkar kóðinn?</strong>
        </summary>
        Hér er kóðinn sem býr til umgjörð myndanna:

        <pre>img {
          border-color: saddlebrown;
          border-width: 4px;
          border-style: solid;
          border-radius: 10px;
        }</pre>

        -   `img` er _veljarinn_ (selector). Hann velur hvaða einingar eiga að fylgja reglunum sem eru í krullusviganum { }, í þessu tilfelli myndirnar (img).
        -   `border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;` og `border-radius: 10px;` eru reglurnar sem skilgreina jaðar myndanna.
            </details>
            <details>
            <summary>
            <strong>Hvað gerir eiginleikinn <code>border-style</code>?</strong>
            </summary>
            Eiginleikinn `border-style` segir til um hvernig rammalína (heila línu, punktalínu, o.s.frv.) er á jaðri einingarinnar.  Nánar um það á síðunni <a href="http://www.w3schools.com/cssref/pr_border-style.asp" target="_new">W3Schools - CSS border-style Property</a>
            </details>
            <details>
            <summary>
            <strong>Hvað gerir eiginleikinn <code>border-radius</code>?</strong>
            </summary>
            Eiginleikinn `border-radius` stjórnar hvorn horn einingar eru bogadregin eða venjuleg.  Stærri radíus gefur lengri, mýkri boga og smærri radíus gefur styttri og skarpari boga. Radíus sem er 0 gefur venjulegt horn. Nánar um þennan eiginleika á <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp" target="_new">W3Schools - CSS3 border-radius property</a>
            </details>
            <details>
            <summary>
            <strong>Hvað gerir eiginleikinn <code>float</code>?</strong>
            </summary>

        Með `float` eiginleikanum getum við látið einingu "fljóta", sem þýðir að einingarnar sem koma á eftir henni munu flæða í kringum hana eins og hægt er.  Ef gildi `float` er `left`, mun einingin fljóta til vinstri og einingarnar sem fylgja munu liggja til hægri við hana (eftir því sem þær geta).  Ef `float` hefur gildið `right`, mun einingin fljóta til hægri og einingarnar á eftir henni munu liggja til vinstri við hana. Þú getur lesið meira um þennan eiginleika á síðunni <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Radíus jaðarhorna

        -   Skoðaðu eiginleikann `border-radius` í `img` reglunum
        -   Ræddu við félaga þinn hvað þið haldið að þessi eiginleiki geri.
        -   Prófaðu mismunandi tölur fyrir radíusinn og veldu þá sem þér finns tkoma best út.
      CSD U2 layout style float: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        <details>

        <summary><strong>How does the code work?</strong></summary>

        Here is the code that is making the image float on the left hand side of the page:

        <pre>img {
          float: left;
        }</pre>

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `float: left;` is the rule that makes the image float to the left.
            </details>
            <details>
            <summary><strong>What does the <code>float</code> property do?</strong></summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Float

        -   Look at the `float` property inside your `img` rule-set
        -   Discuss with your partner what you think the property does.
        -   Change the value from `left` to `right`.
      CSD U2 layout style float_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>
        Here is the code that is making the image float on the left hand side of the page:

        <pre>img {
          float: left;
        }</pre>

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `float: left;` is the rule that makes the image float to the left.
            </details>
            <details>
            <summary>
            <strong>
            What does the <code>float</code> property do?

        </strong>
        </summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Float

        -   Look at the `float` property inside your `img` rule-set
        -   Discuss with your partner what you think the property does.
        -   Change the value from `left` to `right`.
      CSD U2 layout style float_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        <details>

        <summary>
        <strong>Hvernig virkar þessi kóði?</strong>
        </summary>
        Hér er kóðinn sem lætur myndina "fljóta" til vinstri á síðunnni:

        <pre>img {
          float: left;
        }</pre>

        -   `img` er _veljarinn_ (selector). Hann velur þær einingar sem þurfa að fylgja reglunum í krullusviganum { }, í þessu tilfelli eru það myndirnar.
        -   `float: left;` er reglan sem lætur myndina fljóta til vinstri.
            </details>
            <details>
            <summary>
            <strong>
            Hvað gerir eiginleikinn <code>float</code>?

        </strong>
        </summary>

        Með `float` eiginleikanum getum við látið einingu "fljóta", sem þýðir að einingarnar sem koma á eftir henni munu flæða í kringum hana eins og hægt er.  Ef gildi `float` er `left`, mun einingin fljóta til vinstri og einingarnar sem fylgja munu liggja til hægri við hana (eftir því sem þær geta).  Ef `float` hefur gildið `right`, mun einingin fljóta til hægri og einingarnar á eftir henni munu liggja til vinstri við hana. Þú getur lesið meira um þennan eiginleika á síðunni <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Float

        -   Skoðaðu `float` eiginleikan í `img` reglunum
        -   Ræddu við félaga þinn hvað þið haldið að þessi eiginleiki geri.
        -   Breyttu gildinu úr `left` í `right`.
      CSD U2 layout style freeplay: |-
        # Personal Web Site

        Try out some of these new CSS properties on your personal web site.

        -   Add styling of your choice to your web site. Be sure to use at least three new CSS properties.

        # Checklist

        -   At least three of the following CSS Properties are used:

            -   `background-color`
            -   `height`
            -   `width`
            -   `border-style`
            -   `border-radius`
            -   `border-width`
            -   `float`
            -   `margin`

        We encourage you to use more than three, though!  Explore additional CSS properties and add them to your page.
      CSD U2 layout style freeplay_2018: |-
        # Personal Web Site

        Try out some of these new CSS properties on your personal web site.

        -   Add styling of your choice to your web site. Be sure to use at least three new CSS properties.

        # Checklist

        -   At least three of the following CSS Properties are used:

            -   `background-color`
            -   `height`
            -   `width`
            -   `border-style`
            -   `border-radius`
            -   `border-width`
            -   `float`
            -   `margin`

        We encourage you to use more than three, though!  Explore additional CSS properties and add them to your page.
      CSD U2 layout style freeplay_2019: |-
        # Personal Web Site

        Try out some of these new CSS properties on your personal web site.

        -   Add styling of your choice to your web site. Be sure to use at least three new CSS properties.

        # Checklist

        -   At least three of the following CSS Properties are used:

            -   `background-color`
            -   `height`
            -   `width`
            -   `border-style`
            -   `border-radius`
            -   `border-width`
            -   `float`
            -   `margin`

        We encourage you to use more than three, though!  Explore additional CSS properties and add them to your page.
      CSD U2 layout style margin: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>How
        does the code work?</strong></summary>\n\nHere is the code that is putting
        extra space around the images:\n\n<pre>img {\n\tmargin: 10px;\n}</pre>\n\n-
        \  `img` is the _selector_.  It specifies which elements will have to follow
        the rules inside the curly braces, in this case, the images.\n-   `margin:
        10px;` is the rule that puts 10 pixels of space around the image.\n    </details>\n
        \   <details>\n    <summary><strong>What does the `margin` property do?</strong></summary>\n\nThe
        `margin` property determines how much space will be around the image.  Most
        of the time, you will define in the margin in pixels.  You can read more about
        this property at <a href=\"http://www.w3schools.com/cssref/pr_margin.asp\">W3Schools
        - CSS margin Property</a>\n\n</details>\n<details>\n<summary><strong>What
        does `px` mean / What is a pixel?</strong></summary>\n\nPixel, which is abbreviated
        `px`, is how elements are measured in CSS.  It’s the size of a single point
        of light on the screen.\n\n</details>\n</div>\n\n# Margin\n\nMargins specify
        how much space should be around an element.\n\n-   Find the `margin` property
        in the `img` rule-set.\n-   Change the margin to be larger, and discuss the
        effect with a partner.\n-   Choose another element type and give it a margin,
        too."
      CSD U2 layout style margin_2018: "<div style=\"float: right; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>How
        does the code work?</strong>\n</summary>\nHere is the code that is putting
        extra space around the images:\n\n<pre>img {\n\tmargin: 10px;\n}</pre>\n\n-
        \  `img` is the _selector_.  It specifies which elements will have to follow
        the rules inside the curly braces, in this case, the images.\n\n-   `margin:
        10px;` is the rule that puts 10 pixels of space around the image.\n    </details>\n
        \   <details>\n    <summary>\n    <strong>What does the `margin` property
        do?</strong>\n    </summary>\n\nThe `margin` property determines how much
        space will be around the image.  Most of the time, you will define in the
        margin in pixels.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_margin.asp\"
        target=\"_new\">W3Schools - CSS margin Property</a>\n\n</details>\n<details>\n<summary>\n<strong>What
        does `px` mean / What is a pixel?</strong>\n</summary>\n\nPixel, which is
        abbreviated `px`, is how elements are measured in CSS.  It’s the size of a
        single point of light on the screen.\n\n</details>\n</div>\n\n# Margin\n\nMargins
        specify how much space should be around an element.\n\n-   Find the `margin`
        property in the `img` rule-set.\n-   Change the margin to be larger, and discuss
        the effect with a partner.\n-   Choose another element type and give it a
        margin, too."
      CSD U2 layout style margin_2019: "<div class=\"no-pullthrough\" style=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary>\n<strong>Hvernig virkar þessi kóði?</strong>\n</summary>\nHér
        er kóði sem býr til autt svæði í kringum myndirnar:\n\n<pre>img {\n\tmargin:
        10px;\n}</pre>\n\n-   `img` er _veljarinn_ (selector).  Hann velur þær einingar
        sem þurfa að fylgja reglunum í krullusviganum { }, í þessu tilfelli eru það
        myndir.\n\n-   `margin: 10px` er reglan sem setur 10 díla breitt autt svæði
        utan um einingarnar.\n    </details>\n    <details>\n    <summary>\n    <strong>Hvað
        gerir eiginleikinn `margin`?</strong>\n    </summary>\n\nEiginleikinn `margin`
        (spássía) stækkar einingu með því að bæta auðu svæði utan við og í kringum
        eininguna.  Oftast er spássían skilgreind í dílum.  Þú getur lesið meira um
        þetta á síðunni <a href=\"http://www.w3schools.com/cssref/pr_margin.asp\"
        target=\"_new\">W3Schools - CSS margin Property</a>\n\n</details>\n<details>\n<summary>\n<strong>Hvað
        táknar `px` / Hvað er díll (pixel)?</strong>\n</summary>\n\nDíll eða pixill
        (pixel, skammstafað `px`) er mælieininig í CSS. Einn díll er einn ljóspunktur
        á tölvuskjánum.\n\n</details>\n</div>\n\n# Margin\n\nEiginleikinn `margin`
        skilgreinir autt svæði utan um einingu.\n\n-   Finndu eiginleikann `margin`
        í reglunum fyrir `img` einingar.\n-   Stækkaðu auða svæðið utan um myndir
        og ræddu árangurinn við félaga.\n-   Veldu einhverja aðra einingu og prófaðu
        að skilgreina autt svæði (spássíu) utan um hana líka."
      CSD U2 layout style sample: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What does the `body` selector do?</strong></summary>

        Because the content of the web page is all inside the `body` tag, the body selector gives style rules for everything on the web page.

        </details>
        <details>
        <summary><strong>What does the `border-style` property do?</strong></summary>

        The `border-style` property determines what kind of border (solid, dotted, dashed, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp">W3Schools - CSS border-style Property</a>

        </details>
        <details>
        <summary><strong>What does the `border-radius` property do?</strong></summary>

        The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp">W3Schools - CSS3 border-radius property</a>

        </details>
        <details>
        <summary><strong>What does the `float` property do?</strong></summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Layout and Style

        -   Look through web page below for new styles.
        -   Open the style sheet
        -   With your partner, discuss which parts of the CSS code you think are making the page appear different.
            -   What makes the entire page blue?
            -   How are the images positioned to the left of all the other elements?
            -   What made the image corners rounded?

        In the next few levels, you'll be changing and adding new styles on this page.
      CSD U2 layout style sample_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What does the body selector do?</strong>
        </summary>

        Because the content of the web page is all inside the `body` tag, the body selector gives style rules for everything on the web page.

        </details>
        <details>
        <summary>
        <strong>What does the border-style property do?</strong>
        </summary>

        The `border-style` property determines what kind of border (solid, dotted, dashed, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp" target="_new">W3Schools - CSS border-style Property</a>

        </details>
        <details>
        <summary>
        <strong>What does the border-radius property do?</strong>
        </summary>

        The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp" target="_new">W3Schools - CSS3 border-radius property</a>

        </details>
        <details>
        <summary>
        <strong>What does the float property do?</strong>
        </summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Layout and Style

        -   Look through web page below for new styles.
        -   Open the style sheet
        -   With your partner, discuss which parts of the CSS code you think are making the page appear different.
            -   What makes the entire page blue?
            -   How are the images positioned to the left of all the other elements?
            -   What made the image corners rounded?

        In the next few levels, you'll be changing and adding new styles on this page.
      CSD U2 layout style sample_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">
        <details>

        <summary>
        <strong>Hvað gerir veljarinn "body"?</strong>
        </summary>

        Þar sem allt efni vefsíðunnar er innan í `body` taginu, þá virkar CSS regla með "body" sem veljara á allt viðeigandi efni síðu.

        </details>
        <details>
        <summary>
        <strong>Hvað gerir eiginleikinn "border-style"?</strong>
        </summary>

        Eiginleikinn `border-style` stjórnar því hvers konar lína er notuð fyrir ramma utan um einingu. Valkostir eru m.a. heil lína (solid), punktalína (dotted) og strikalína (dashed). Þú getur lesið meira um þennan eiginleika á síðunni <a href="http://www.w3schools.com/cssref/pr_border-style.asp" target="_new">W3Schools - CSS border-style Property</a>

        </details>
        <details>
        <summary>
        <strong>Hvað gerir eiginleikinn "border-radius"?</strong>
        </summary>

        Með `border-radius` eiginleikanum getum við stjórnað því hvort hornin á einingu eru venjuleg eða bogadregin. Stærri radíus gefur lengri og mýkri boga og lítill radíus gefur styttri og skarpari boga. Ef radíusinn er 0 er það venjulegt horn. Þú getur lesið meira um þennan eiginleika á síðunni <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp" target="_new">W3Schools - CSS3 border-radius property</a>

        </details>
        <details>
        <summary>
        <strong>Hvað gerir eiginleikinn "float"?</strong>
        </summary>

        Með `float` eiginleikanum getum við látið einingu "fljóta", sem þýðir að einingarnar sem koma á eftir henni munu flæða í kringum hana eins og hægt er.  Ef gildi `float` er `left`, mun einingin fljóta til vinstri og einingarnar sem fylgja munu liggja til hægri við hana (eftir því sem þær geta).  Ef `float` hefur gildið `right`, mun einingin fljóta til hægri og einingarnar á eftir henni munu liggja til vinstri við hana. Þú getur lesið meira um þennan eiginleika á síðunni <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Uppstilling og stílar

        -   Skoðaðu vefsíðuna hér fyrir neðan til að finna nýja stíla.
        -   Opnaðu stílsíðuna
        -   Ræddu við félaga þinn um hvaða hlutar CSS kóðans eru að gera hvað á síðunni.
            -   Hvað lætur alla síðuna vera bláa?
            -   Hvernig eru myndirnar látnar vera vinstra megin við allar hinar einingarnar?
            -   Af hverju er myndin með bogadregin horn?

        Í næstu áföngum munt þú breyta og bæta stílum við þessa síða.
      CSD U2 layout style width: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>How
        does the code work?</strong></summary>\nHere is the code that is making the
        image its current size:\n\n<pre>img {\n\twidth: 250px;\n}</pre>\n\n-   `img`
        is the _selector_.  It specifies which elements will have to follow the rules
        inside the curly braces, in this case, the images.\n-   `width: 250px` is
        the rule that makes the image 250 pixels wide.  It also changes the height
        so that the image does not stretch.\n    </details>\n    <details>\n    <summary><strong>What
        does the `width` property do?</strong></summary>\n\nThe `width` property determines
        how wide the element will be.  Most of the time, you will define in the width
        in pixels, which makes the element take up an exact amount of space on the
        screen.  Defining the width will also change the height so that the image
        does not stretch, unless you have also defined the height.  You can read more
        about this property at <a href=\"http://www.w3schools.com/cssref/pr_dim_width.asp\">W3Schools
        - CSS width Property</a>\n\n</details>\n<details>\n<summary><strong>What does
        the `height` property do?</strong></summary>\n\nThe `height` property determines
        how tall the element will be.  Most of the time, you will define in the height
        in pixels, which makes the element take up an exact amount of space on the
        screen.  Defining the height will also change the width so that the image
        does not stretch, unless you have also defined the width.  You can read more
        about this property at <a href=\"http://www.w3schools.com/cssref/pr_dim_height.asp\">W3Schools
        - CSS width Property</a>\n\n</details>\n<details>\n<summary><strong>What does
        `px` mean / What is a pixel?</strong></summary>\n\nPixel, which is abbreviated
        `px`, is how elements are measured in CSS.  It’s the size of a single point
        of light on the screen.\n\n</details>\n<details>\n<summary><strong>Why does
        using a width and height rule at the same time sometimes stretch out the image?</strong></summary>\n\nWhen
        the width of an images changes, the height must change by the same percentage,
        otherwise the image will stretch.  For example, if you double the width of
        an image, you must also double the height, or the image will be stretched
        horizonally.  When you only define the width or the height, the computer will
        automatically change the other property so that the image looks the same.\n\n</details>\n</div>\n\n#
        Width and Height\n\n-   Find the property in the style sheet that controls
        the width of the images.\n-   Change the width of the images to be larger
        or smaller.\n-   Create a new rule with a `height` property to control the
        height of the images.\n-   Use the `width` property in the `p` rule-set to
        change the width of your paragraphs."
      CSD U2 layout style width_2018: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>How
        does the code work?</strong>\n</summary>\n\nHere is the code that is making
        the image its current size:\n\n    img {\n    \twidth: 250px;\n    }\n\n-
        \  `img` is the _selector_.  It specifies which elements will have to follow
        the rules inside the curly braces, in this case, the images.\n-   `width:
        250px` is the rule that makes the image 250 pixels wide.  It also changes
        the height so that the image does not stretch.\n\n</details>\n<details>\n<summary>\n<strong>What
        does the <code>width</code> property do?</strong>\n</summary>\n\nThe `width`
        property determines how wide the element will be.  Most of the time, you will
        define the width in pixels, which makes the element take up an exact amount
        of space on the screen.  Defining the width will also change the height so
        that the image does not stretch, unless you have also defined the height.
        \ You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_dim_width.asp\"
        target=\"_new\">W3Schools - CSS width Property</a>\n\n</details>\n<details>\n<summary>\n<strong>What
        does the <code>height</code> property do?</strong>\n</summary>\n\nThe `height`
        property determines how tall the element will be.  Most of the time, you will
        define the height in pixels, which makes the element take up an exact amount
        of space on the screen.  Defining the height will also change the width so
        that the image does not stretch, unless you have also defined the width.  You
        can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_dim_height.asp\"
        target=\"_new\">W3Schools - CSS height Property</a>\n\n</details>\n<details>\n<summary>\n<strong>What
        does <code>px</code> mean / What is a pixel?</strong>\n</summary>\n\nPixel,
        which is abbreviated `px`, is how elements are measured in CSS.  It’s the
        size of a single point of light on the screen.\n\n</details>\n<details>\n<summary>\n<strong>Why
        does using a width and height rule at the same time sometimes stretch out
        the image?</strong>\n</summary>\n\nWhen the width of an images changes, the
        height must change by the same percentage, otherwise the image will stretch.
        \ For example, if you double the width of an image, you must also double the
        height, or the image will be stretched horizonally.  When you only define
        the width or the height, the computer will automatically change the other
        property so that the image looks the same.\n\n</details>\n</div>\n\n# Width
        and Height\n\n-   Find the property in the style sheet that controls the width
        of the images.\n-   Change the width of the images to be larger or smaller.\n-
        \  Create a new rule with a `height` property to control the height of the
        images.\n-   Use the `width` property in the `p` rule-set to change the width
        of your paragraphs."
      CSD U2 layout style width_2019: "<div class=\"no-pullthrough\" style=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n<details>\n\n<summary>\n<strong>Hvernig
        virkar þessi kóði?</strong>\n</summary>\n\nHér er kóðinn sem gefur myndinni
        núverandi stærð hennar:\n\n    img {\n    \twidth: 250px;\n    }\n\n-   `img`
        er _veljarinn_ (selector).  Hann velur þær einingar sem þurfa að fylgja reglunum
        í krullusviganum { }, í þessu tilfelli eru það myndir.\n-   `width: 250px`
        er reglan sem gerir myndina 250 díla (pixels) breiða.  Hæð myndarinnar breytist
        sjálfkrafa um leið svo að myndin verði ekki teygð.\n\n</details>\n<details>\n<summary>\n<strong>Hvað
        gerir eiginleikinn <code>width</code>?</strong>\n</summary>\n\nEiginleikinn
        `width` stjórnar því hve breið einingin verður. Algengast er að skilgreina
        breiddina í dílum (pixels), sem lætur eininguna ná yfir visst svæði á tölvuskjánum.
        Ef aðeins breiddin er tiltekin, breytist hæðin sjálfkrafa með svo myndin bjagist
        ekki. Ef hæðin er líka tiltekin, fær myndin þá hæð. Þú getur lesið meira um
        þennan eiginleika á síðunni <a href=\"http://www.w3schools.com/cssref/pr_dim_width.asp\"
        target=\"_new\">W3Schools - CSS width Property</a>\n\n</details>\n<details>\n<summary>\n<strong>Hvað
        gerir eiginleikinn <code>height</code>?</strong>\n</summary>\n\nEiginleikinn
        `height` stjórnar því hve há einingin verður. Algengast er að skilgreina hæðina
        í dílum (pixels), sem lætur eininguna ná yfir visst svæði á tölvuskjánum.
        Ef aðeins hæðin er tiltekin, breytist breiddin sjálfkrafa með svo myndin bjagist
        ekki. Ef breiddin er líka tiltekin, fær myndin þá breidd. Þú getur lesið meira
        um þennan eiginleika á síðunni <a href=\"http://www.w3schools.com/cssref/pr_dim_height.asp\"
        target=\"_new\">W3Schools - CSS height Property</a>\n\n</details>\n<details>\n<summary>\n<strong>Hvað
        táknar <code>px</code> / Hvað er díll (pixel)?</strong>\n</summary>\n\nDíll
        eða pixill (pixel, skammstafað `px`) er mælieininig í CSS. Einn díll er einn
        ljóspunktur á tölvuskjánum.\n\n</details>\n<details>\n<summary>\n<strong>Af
        hverju getur það aflagað mynd að tilgreina bæði hæð og breidd í sömu reglu?</strong>\n</summary>\n\nÞegar
        breiddin breytist verður hæðin að breytast í sama hlutfalli, annars verður
        myndin teygð. Tildæmis ef breiddin er tvöfölduð verður líka að tvöfalda hæðina,
        annars aflagast myndin. Ef aðeins hæðin eða breiddin er tilgreind, mun tölvan
        sjálfkrafa breyta hinum eiginleikanum svo að hlutföllin haldist og myndin
        líti eðlilega út..\n\n</details>\n</div>\n\n# Breidd og hæð\n\n-   Finndu
        þann eiginleika í stílsíðunni sem stjórnar breidd myndanna.\n-   Breyttu breiddinni
        svo að myndirnar verði stærri eða minni.\n-   Búðu til nýja reglu með `height`
        eiginleika til að stjórna hæð myndanna.\n-   Notaðu `width` eiginleikann með
        reglunum fyrir `p` til að breyta breidd efnisgreinanna."
      CSD U2 link demo: |-
        # Gerð vefs með fleiri síður

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px" markdown="1">
        <details>

        <summary>

        **Hvað eru tenglar?**

        </summary>
        Tenglar (enska:hyperlinks) geta tengt við vefsíður á staðnum eða ytri vefjum. Til að notendur geti ferðast á milli síðna verður þú að hafa tengla sem tengja saman einstakar vefsíður. Þú getur **bætt tenglum við vefsíðuna þína með `<a>` einingunni**.  Efnið sem þú vilt að sjáist sem tengill er sett á milli byrjunar- og endatagsins. `<a>` einingin hefur eigindina `href` en gildi hennar er staðurinn sem tengt er við.  Ef vefsíðan er á staðnum, er skráarslóð síðunnar notuð. <br> <br>

        Dæmi: Til að tengja við síðuna um einstök hús mundir þú bæta þessum kóða í `<body>` eininguna. <br><br>

        <pre>
        &lt;a href=”houses.html”&gt; Einstök hús &lt;/a&gt;
        </pre>

        </details>
        <details>
        <summary>

        **Hvernig bæti ég við tengli?**

        </summary>

        Þú getur **bætt tenglum við vefsíðuna þína með `<a>` einingunni**.  Efnið sem þú vilt að sjáist sem tengill er sett á milli byrjunar- og endatagsins. `<a>` einingin hefur eigindina `href` en gildi hennar er staðurinn sem tengt er við.  Ef vefsíðan er á staðnum, er skráarslóð síðunnar notuð.  <br> <br>

        Dæmi: Til að tengja við síðuna um einstök hús mundir þú bæta þessum kóða í `<body>` eininguna.<br><br>

        <pre>
        &lt;a href=”houses.html”&gt; Einstök hús &lt;/a&gt;
        </pre>

        </details>
        </div>

        Vefsetur ætti að innihalda fleiri en eina vefsíðu og þær ættu að tengjast innbyrðis.   Hér er dæmi um verkefni með vefsíðum sem eru tengdar með tenglum (tengill hefur blá undirstrikuð orð sem færa þig á aðra síðu þegar þú smellir á þau).

        # Gerðu þetta

        -   Notaðu greiningartækið (inspector tool) til að sjá kóðann sem býr til tenglana efst á síðunni index.html.
        -   Ræddu við félaga um hvernig þið teljið að þessi kóði virki.
        -   Smelltu á recipe.html í skráalistanum vinstra megin.  Bættu við tengli efst á þessari síðu sem færir þig aftur yfir á index.html.
      CSD U2 link demo_2018: |-
        # Gerð vefs með fleiri síður

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>Hvað eru tenglar?</strong>
        </summary>

        Tenglar (enska:hyperlinks) geta tengt við vefsíður á staðnum eða ytri vefjum. Til að notendur geti ferðast á milli síðna verður þú að hafa tengla sem tengja saman einstakar vefsíður. Þú getur **bætt tenglum við vefsíðuna þína með `<a>` einingunni**.  Efnið sem þú vilt að sjáist sem tengill er sett á milli byrjunar- og endatagsins. `<a>` einingin hefur eigindina `href` en gildi hennar er staðurinn sem tengt er við.  Ef vefsíðan er á staðnum, er skráarslóð síðunnar notuð. <br> <br>

        Dæmi: Til að tengja við síðuna um einstök hús mundir þú bæta þessum kóða í `<body>` eininguna. <br><br>

        <pre>
        &lt;a href=”houses.html”&gt; Einstök hús &lt;/a&gt;
        </pre>

        </details>
        <details>
        <summary>
        <strong>Hvernig bæti ég við tengli?</strong>
        </summary>

        Þú getur **bætt tenglum við vefsíðuna þína með `<a>` einingunni**.  Efnið sem þú vilt að sjáist sem tengill er sett á milli byrjunar- og endatagsins. `<a>` einingin hefur eigindina `href` en gildi hennar er staðurinn sem tengt er við.  Ef vefsíðan er á staðnum, er skráarslóð síðunnar notuð.  <br> <br>

        Dæmi: Til að tengja við síðuna um einstök hús mundir þú bæta þessum kóða í `<body>` eininguna.<br><br>

        <pre>
        &lt;a href=”houses.html”&gt; Einstök hús &lt;/a&gt;
        </pre>

        </details>
        </div>

        Vefsetur ætti að innihalda fleiri en eina vefsíðu og þær ættu að tengjast innbyrðis.   Hér er dæmi um verkefni með vefsíðum sem eru tengdar með tenglum (tengill hefur blá undirstrikuð orð sem færa þig á aðra síðu þegar þú smellir á þau).

        # Gerðu þetta

        -   Notaðu greiningartækið (inspector tool) til að sjá kóðann sem býr til tenglana efst á síðunni index.html.
        -   Ræddu við félaga um hvernig þið teljið að þessi kóði virki.
        -   Smelltu á recipe.html í skráalistanum vinstra megin.  Bættu við tengli efst á þessari síðu sem færir þig aftur yfir á index.html.
      CSD U2 link demo_2019: |-
        # Gerð vefs með fleiri síður

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>Hvað eru tenglar?</strong>
        </summary>

        Tenglar (enska:hyperlinks) geta tengt við vefsíður á staðnum eða ytri vefjum. Til að notendur geti ferðast á milli síðna verður þú að hafa tengla sem tengja saman einstakar vefsíður. Þú getur **bætt tenglum við vefsíðuna þína með `<a>` einingunni**.  Efnið sem þú vilt að sjáist sem tengill er sett á milli byrjunar- og endatagsins. `<a>` einingin hefur eigindina `href` en gildi hennar er staðurinn sem tengt er við.  Ef vefsíðan er á staðnum, er skráarslóð síðunnar notuð. <br> <br>

        Dæmi: Til að tengja við síðuna um einstök hús mundir þú bæta þessum kóða í `<body>` eininguna. <br><br>

        <pre>
        &lt;a href=”houses.html”&gt; Einstök hús &lt;/a&gt;
        </pre>

        </details>
        <details>
        <summary>
        <strong>Hvernig bæti ég við tengli?</strong>
        </summary>

        Þú getur **bætt tenglum við vefsíðuna þína með `<a>` einingunni**.  Efnið sem þú vilt að sjáist sem tengill er sett á milli byrjunar- og endatagsins. `<a>` einingin hefur eigindina `href` en gildi hennar er staðurinn sem tengt er við.  Ef vefsíðan er á staðnum, er skráarslóð síðunnar notuð.  <br> <br>

        Dæmi: Til að tengja við síðuna um einstök hús mundir þú bæta þessum kóða í `<body>` eininguna.<br><br>

        <pre>
        &lt;a href=”houses.html”&gt; Einstök hús &lt;/a&gt;
        </pre>

        </details>
        </div>

        Vefsetur ætti að innihalda fleiri en eina vefsíðu og þær ættu að tengjast innbyrðis.   Hér er dæmi um verkefni með vefsíðum sem eru tengdar með tenglum (tengill hefur blá undirstrikuð orð sem færa þig á aðra síðu þegar þú smellir á þau).

        # Gerðu þetta

        -   Notaðu greiningartækið (inspector tool) til að sjá kóðann sem býr til tenglana efst á síðunni index.html.
        -   Ræddu við félaga um hvernig þið teljið að þessi kóði virki.
        -   Smelltu á recipe.html í skráalistanum vinstra megin.  Bættu við tengli efst á þessari síðu sem færir þig aftur yfir á index.html.
      CSD U2 lists intro: "# Listar\n\n<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n\n**Tvær
        tegundir af listum**\n\n</summary>\n\nÞað eru tvenns konar listar í HTML:
        raðaðir (enska:ordered) og óraðaðir (enska:unordered).\n\n</details>\n\n<details>\n<summary>\n\n**Hvað
        er óraðaður listi?**\n\n</summary>\nÓraðaður listi er bara röð af áherslumerktum
        atriðum.\n<br /><br />\nÞessi eining hefur tagið &lt;ul&gt;. Þetta er skammstöfun
        á enska heitinu <strong>\"U</strong>nordered <strong>L</strong>ist\".\nHvert
        atriði í listanum er sjálfstæð eining með tagið &lt;li&gt;. Þetta er aftur
        skammstöfun á enska heitinu \"<strong>L</strong>ist <strong>I</strong>tem\".
        \ Listaatriðið er dæmi um einingarbarn (enska:child element), sem er innan
        í einingarforeldri (enska:parent element), sem hér er óraðaði listinn (&lt;ul&gt;).\r\n</details>\n\n<details>\n<summary>\n\n**Hvernig
        bý ég til óraðaðan lista?**\n\n</summary>\nÞað gerist í tveimur áföngum: fyrsta
        að búa til listann og svo bæta í hann listaatriðum.  Óraðaði listinn er búinn
        til með því að skrifa listatögin`&lt;ul&gt; &lt;/ul&gt;`.  Síðan er listaatriðum
        bætt við **á milli** listataganna.  Búðu til hvert listaatriði með tögunum`&lt;li&gt;
        &lt;/li&gt;` og skrifaðu efni atriðisins á milli þeirra.\n<br /><br />\nÞað
        getur verið hjálplegt að hafa inndrátt á &lt;li&gt; tögunum\nsvo það sjáist
        greinilega að þau eru innan í &lt;ul&gt; taginu.\n</details>\n\n<details>\n<summary>\n\n**Hvað
        er raðaður listi?**\n\n</summary>\nRaðaður listi (enska:ordered list) er röð
        atriða sem eru tölusett.\n<br /><br />\nRaðaður listi er eining með tagið
        &lt;ol&gt;. Þetta er skammstöfun á enska heitinu \"<strong>O</strong>rdered
        <strong>L</strong>ist\".\nHvert atriði í listanum er sjálfstæð eining með
        tagið &lt;li&gt;. Þetta er aftur skammstöfun á enska heitinu \"<strong>L</strong>ist
        <strong>I</strong>tem\".  Listaatriðið er dæmi um einingarbarn (enska:child
        element), sem er innan í einingarforeldri (enska:parent element), sem hér
        er raðaði listinn (&lt;ol&gt;).\n</details>\n\n<details>\n<summary>\n\n**Hvernig
        bý ég til raðaðan lista?**\n\n</summary>\n\nÞað gerist í tveimur áföngum:
        fyrst að búa til listann og svo bæta í hann listaatriðum.  Raðaði listinn
        er búinn til með því að skrifa listatögin`&lt;ol&gt; &lt;/ol&gt;`.  Síðan
        er listaatriðum bætt við **á milli** listataganna.  Búðu til hvert listaatriði
        með tögunum`&lt;li&gt; &lt;/li&gt;` og skrifaðu efni atriðisins á milli þeirra.\n<br/><br
        />\nÞað getur verið hjálplegt að hafa inndrátt á \\<li> tögunum\nsvo það sjáist
        greinilega að þau eru innan í \\<ol> taginu.\n\n</details>\n</div>\n\nÞú getur
        notað HTML til að búa til mismunandi tegundir lista á vefsíðu.  Þessi uppskrift
        inniheldur tvær tegundir af lista, einn raðaðan (tölusettan) og hinn óraðaðan
        (með áherslumerkjum).\n\n# Gerðu þetta\n\n-   Notaðu greiningartækið (inspector
        tool) til að sjá kóðann sem býr til þessar tvær tegundir af listum.\n-   Gættu
        þess að þú og félagi þinn séuð sammála um hvað tögin gera.\n-   Lagaðu kóðann
        í seinni listanum svo að atriðin birtist rétt"
      CSD U2 lists intro_2018: |-
        # Listar

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>Tvær tegundir af listum</strong>
        </summary>
        Það eru tvenns konar listar í HTML: raðaðir (enska:ordered) og óraðaðir (enska:unordered).
        </details>

        <details>
        <summary>
        <strong>Hvað er óraðaður listi?</strong>
        </summary>

        Óraðaður listi er bara röð af áherslumerktum atriðum.

        Þessi eining hefur tagið \<ul>. Þetta er skammstöfun á enska heitinu <strong>"U</strong>nordered <strong>L</strong>ist".
        Hvert atriði í listanum er sjálfstæð eining með tagið \<li>. Þetta er aftur skammstöfun á enska heitinu "<strong>L</strong>ist <strong>I</strong>tem".  Listaatriðið er dæmi um einingarbarn (enska:child element), sem er innan í einingarforeldri (enska:parent element), sem hér er óraðaði listinn (\<ul>).

        </details>

        <details>
        <summary>
        <strong>Hvernig bý ég til óraðaðan lista?</strong>
        </summary>

        Það gerist í tveimur áföngum: fyrsta að búa til listann og svo bæta í hann listaatriðum.  Óraðaði listinn er búinn til með því að skrifa listatögin`&lt;ul&gt; &lt;/ul&gt;`.  Síðan er listaatriðum bætt við **á milli** listataganna.  Búðu til hvert listaatriði með tögunum`&lt;li&gt; &lt;/li&gt;` og skrifaðu efni atriðisins á milli þeirra.
        <br /><br />
        Það getur verið hjálplegt að hafa inndrátt á \<li> tögunum
        svo það sjáist greinilega að þau eru innan í \<ul> taginu.

        </details>

        <details>
        <summary>
        <strong>Hvað er raðaður listi?</strong>
        </summary>

        Raðaður listi (enska:ordered list) er röð atriða sem eru tölusett.

        Raðaður listi er eining með tagið \<ol>. Þetta er skammstöfun á enska heitinu "<strong>O</strong>rdered <strong>L</strong>ist".
        Hvert atriði í listanum er sjálfstæð eining með tagið \<li>. Þetta er aftur skammstöfun á enska heitinu "<strong>L</strong>ist <strong>I</strong>tem".  Listaatriðið er dæmi um einingarbarn (enska:child element), sem er innan í einingarforeldri (enska:parent element), sem hér er raðaði listinn (\<ol>).

        </details>
        <details>
        <summary>
        <strong>Hvernig bý ég til raðaðan lista?</strong>
        </summary>

        Það gerist í tveimur áföngum: fyrst að búa til listann og svo bæta í hann listaatriðum.  Raðaði listinn er búinn til með því að skrifa listatögin`&lt;ol&gt; &lt;/ol&gt;`.  Síðan er listaatriðum bætt við **á milli** listataganna.  Búðu til hvert listaatriði með tögunum`&lt;li&gt; &lt;/li&gt;` og skrifaðu efni atriðisins á milli þeirra.
        <br/><br />
        Það getur verið hjálplegt að hafa inndrátt á \<li> tögunum
        svo það sjáist greinilega að þau eru innan í \<ol> taginu.

        </details>
        </div>

        Þú getur notað HTML til að búa til mismunandi tegundir lista á vefsíðu.  Þessi uppskrift inniheldur tvær tegundir af lista, einn raðaðan (tölusettan) og hinn óraðaðan (með áherslumerkjum).

        # Gerðu þetta

        -   Notaðu greiningartækið (inspector tool) til að sjá kóðann sem býr til þessar tvær tegundir af listum.
        -   Gættu þess að þú og félagi þinn séuð sammála um hvað tögin gera.
        -   Lagaðu kóðann í seinni listanum svo að atriðin birtist rétt
      CSD U2 lists intro_2019: |-
        # Listar

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>Tvær tegundir af listum</strong>
        </summary>
        Það eru tvenns konar listar í HTML: raðaðir (enska:ordered) og óraðaðir (enska:unordered).
        </details>

        <details>
        <summary>
        <strong>Hvað er óraðaður listi?</strong>
        </summary>

        Óraðaður listi er bara röð af áherslumerktum atriðum.

        Þessi eining hefur tagið \<ul>. Þetta er skammstöfun á enska heitinu <strong>"U</strong>nordered <strong>L</strong>ist".
        Hvert atriði í listanum er sjálfstæð eining með tagið \<li>. Þetta er aftur skammstöfun á enska heitinu "<strong>L</strong>ist <strong>I</strong>tem".  Listaatriðið er dæmi um einingarbarn (enska:child element), sem er innan í einingarforeldri (enska:parent element), sem hér er óraðaði listinn (\<ul>).

        </details>

        <details>
        <summary>
        <strong>Hvernig bý ég til óraðaðan lista?</strong>
        </summary>

        Það gerist í tveimur áföngum: fyrsta að búa til listann og svo bæta í hann listaatriðum.  Óraðaði listinn er búinn til með því að skrifa listatögin`&lt;ul&gt; &lt;/ul&gt;`.  Síðan er listaatriðum bætt við **á milli** listataganna.  Búðu til hvert listaatriði með tögunum`&lt;li&gt; &lt;/li&gt;` og skrifaðu efni atriðisins á milli þeirra.
        <br /><br />
        Það getur verið hjálplegt að hafa inndrátt á \<li> tögunum
        svo það sjáist greinilega að þau eru innan í \<ul> taginu.

        </details>

        <details>
        <summary>
        <strong>Hvað er raðaður listi?</strong>
        </summary>

        Raðaður listi (enska:ordered list) er röð atriða sem eru tölusett.

        Raðaður listi er eining með tagið \<ol>. Þetta er skammstöfun á enska heitinu "<strong>O</strong>rdered <strong>L</strong>ist".
        Hvert atriði í listanum er sjálfstæð eining með tagið \<li>. Þetta er aftur skammstöfun á enska heitinu "<strong>L</strong>ist <strong>I</strong>tem".  Listaatriðið er dæmi um einingarbarn (enska:child element), sem er innan í einingarforeldri (enska:parent element), sem hér er raðaði listinn (\<ol>).

        </details>
        <details>
        <summary>
        <strong>Hvernig bý ég til raðaðan lista?</strong>
        </summary>

        Það gerist í tveimur áföngum: fyrst að búa til listann og svo bæta í hann listaatriðum.  Raðaði listinn er búinn til með því að skrifa listatögin`&lt;ol&gt; &lt;/ol&gt;`.  Síðan er listaatriðum bætt við **á milli** listataganna.  Búðu til hvert listaatriði með tögunum`&lt;li&gt; &lt;/li&gt;` og skrifaðu efni atriðisins á milli þeirra.
        <br/><br />
        Það getur verið hjálplegt að hafa inndrátt á \<li> tögunum
        svo það sjáist greinilega að þau eru innan í \<ol> taginu.

        </details>
        </div>

        Þú getur notað HTML til að búa til mismunandi tegundir lista á vefsíðu.  Þessi uppskrift inniheldur tvær tegundir af lista, einn raðaðan (tölusettan) og hinn óraðaðan (með áherslumerkjum).

        # Gerðu þetta

        -   Notaðu greiningartækið (inspector tool) til að sjá kóðann sem býr til þessar tvær tegundir af listum.
        -   Gættu þess að þú og félagi þinn séuð sammála um hvað tögin gera.
        -   Lagaðu kóðann í seinni listanum svo að atriðin birtist rétt
      CSD U2 navigation: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        **Hvað eru tenglar?**

        </summary>
        Tenglar (enska:hyperlinks) geta tengt við vefsíður á staðnum eða ytri vefjum. Til að notendur geti ferðast á milli síðna verður þú að hafa tengla sem tengja saman einstakar vefsíður. Þú getur **bætt tenglum við vefsíðuna þína með `<a>` einingunni**.  Efnið sem þú vilt að sjáist sem tengill er sett á milli byrjunar- og endatagsins. `<a>` einingin hefur eigindina `href` en gildi hennar er staðurinn sem tengt er við.  Ef vefsíðan er á staðnum, er skráarslóð síðunnar notuð. <br> <br>

        Dæmi: Til að tengja við síðuna um einstök hús mundir þú bæta þessum kóða í `<body>` eininguna. <br><br>

        <pre>
        &lt;a href=”houses.html”&gt; Einstök hús &lt;/a&gt;
        </pre>

        </details>
        <details>
        <summary>

        **Hvernig bæti ég við tengli?**

        </summary>

        Þú getur **bætt tenglum við vefsíðuna þína með `<a>` einingunni**.  Efnið sem þú vilt að sjáist sem tengill er sett á milli byrjunar- og endatagsins. `<a>` einingin hefur eigindina `href` en gildi hennar er staðurinn sem tengt er við.  Ef vefsíðan er á staðnum, er skráarslóð síðunnar notuð.  <br> <br>

        Dæmi: Til að tengja við síðuna um einstök hús mundir þú bæta þessum kóða í `<body>` eininguna.<br><br>

        <pre>
        &lt;a href=”houses.html”&gt; Einstök hús &lt;/a&gt;
        </pre>

        </details>
        </div>

        # Gerð tenglastiku

        Hér er verkefnið þitt frá því áður.  Þú átt að tengja þessar tvær síður saman með því að búa til **tenglastiku** (enska:navigation bar) efst á síðunni.  Vefsetur hafa yfirleitt tenglastiku á öllum síðum til að auðvelda að fara milli efnis á vefsetrinu.  Þú getur séð dæmi um tenglastiku  <a href="https://studio.code.org/projects/weblab/2KO4FIjN89QPeYnTG_NzLIjroaG8daOY3jRl5uHm1Co/" target="_new">þessari síðu</a>

        # Gerðu þetta

        -   Opnaðu heimasíðuna þína (index.html), og bættu tveimur tenglum efst á síðuna. Láttu annan vísa á listasíðuna, hinn á sjálfa heimasíðuna.
        -   _Þó það virðist skrítið að hafa tengil sem vísar á sömu síðu, þá er það gert til að tenglastikan líti eins út á öllum síðum._
        -   Afritaðu kóðann fyrir tenglastikuna og bættu tenglastiku efst á listasíðuna.
        -   Prófaðu tenglana á forskoðunarsvæðinu með því að smella á þá.
      CSD U2 navigation_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>Hvað eru tenglar?</strong>
        </summary>

        Tenglar (enska:hyperlinks) geta tengt við vefsíður á staðnum eða ytri vefjum. Til að notendur geti ferðast á milli síðna verður þú að hafa tengla sem tengja saman einstakar vefsíður. Þú getur **bætt tenglum við vefsíðuna þína með `<a>` einingunni**.  Efnið sem þú vilt að sjáist sem tengill er sett á milli byrjunar- og endatagsins. `<a>` einingin hefur eigindina `href` en gildi hennar er staðurinn sem tengt er við.  Ef vefsíðan er á staðnum, er skráarslóð síðunnar notuð. <br> <br>

        Dæmi: Til að tengja við síðuna um einstök hús mundir þú bæta þessum kóða í `<body>` eininguna. <br><br>

        <pre>
        &lt;a href=”houses.html”&gt; Einstök hús &lt;/a&gt;
        </pre>

        </details>
        <details>
        <summary>
        <strong>Hvernig bæti ég við tengli?</strong>

        </summary>

        Þú getur **bætt tenglum við vefsíðuna þína með `<a>` einingunni**.  Efnið sem þú vilt að sjáist sem tengill er sett á milli byrjunar- og endatagsins. `<a>` einingin hefur eigindina `href` en gildi hennar er staðurinn sem tengt er við.  Ef vefsíðan er á staðnum, er skráarslóð síðunnar notuð.  <br> <br>

        Dæmi: Til að tengja við síðuna um einstök hús mundir þú bæta þessum kóða í `<body>` eininguna.<br><br>

        <pre>
        &lt;a href=”houses.html”&gt; Einstök hús &lt;/a&gt;
        </pre>

        </details>
        </div>

        # Gerð tenglastiku

        Hér er verkefnið þitt frá því áður.  Þú átt að tengja þessar tvær síður saman með því að búa til **tenglastiku** (enska:navigation bar) efst á síðunni.  Vefsetur hafa yfirleitt tenglastiku á öllum síðum til að auðvelda að fara milli efnis á vefsetrinu.  Þú getur séð dæmi um tenglastiku  <a href="https://studio.code.org/projects/weblab/2KO4FIjN89QPeYnTG_NzLIjroaG8daOY3jRl5uHm1Co/" target="_new">þessari síðu</a>

        # Gerðu þetta

        -   Opnaðu heimasíðuna þína (index.html), og bættu tveimur tenglum efst á síðuna. Láttu annan vísa á listasíðuna, hinn á sjálfa heimasíðuna.
        -   _Þó það virðist skrítið að hafa tengil sem vísar á sömu síðu, þá er það gert til að tenglastikan líti eins út á öllum síðum._
        -   Afritaðu kóðann fyrir tenglastikuna og bættu tenglastiku efst á listasíðuna.
        -   Prófaðu tenglana á forskoðunarsvæðinu með því að smella á þá.
      CSD U2 navigation_2019: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>Hvað eru tenglar?</strong>
        </summary>

        Tenglar (enska:hyperlinks) geta tengt við vefsíður á staðnum eða ytri vefjum. Til að notendur geti ferðast á milli síðna verður þú að hafa tengla sem tengja saman einstakar vefsíður. Þú getur **bætt tenglum við vefsíðuna þína með `<a>` einingunni**.  Efnið sem þú vilt að sjáist sem tengill er sett á milli byrjunar- og endatagsins. `<a>` einingin hefur eigindina `href` en gildi hennar er staðurinn sem tengt er við.  Ef vefsíðan er á staðnum, er skráarslóð síðunnar notuð. <br> <br>

        Dæmi: Til að tengja við síðuna um einstök hús mundir þú bæta þessum kóða í `<body>` eininguna. <br><br>

        <pre>
        &lt;a href=”houses.html”&gt; Einstök hús &lt;/a&gt;
        </pre>

        </details>
        <details>
        <summary>
        <strong>Hvernig bæti ég við tengli?</strong>

        </summary>

        Þú getur **bætt tenglum við vefsíðuna þína með `<a>` einingunni**.  Efnið sem þú vilt að sjáist sem tengill er sett á milli byrjunar- og endatagsins. `<a>` einingin hefur eigindina `href` en gildi hennar er staðurinn sem tengt er við.  Ef vefsíðan er á staðnum, er skráarslóð síðunnar notuð.  <br> <br>

        Dæmi: Til að tengja við síðuna um einstök hús mundir þú bæta þessum kóða í `<body>` eininguna.<br><br>

        <pre>
        &lt;a href=”houses.html”&gt; Einstök hús &lt;/a&gt;
        </pre>

        </details>
        </div>

        # Gerð tenglastiku

        Hér er verkefnið þitt frá því áður.  Þú átt að tengja þessar tvær síður saman með því að búa til **tenglastiku** (enska:navigation bar) efst á síðunni.  Vefsetur hafa yfirleitt tenglastiku á öllum síðum til að auðvelda að fara milli efnis á vefsetrinu.  Þú getur séð dæmi um tenglastiku  <a href="https://studio.code.org/projects/weblab/2KO4FIjN89QPeYnTG_NzLIjroaG8daOY3jRl5uHm1Co/" target="_new">þessari síðu</a>

        # Gerðu þetta

        -   Opnaðu heimasíðuna þína (index.html), og bættu tveimur tenglum efst á síðuna. Láttu annan vísa á listasíðuna, hinn á sjálfa heimasíðuna.
        -   _Þó það virðist skrítið að hafa tengil sem vísar á sömu síðu, þá er það gert til að tenglastikan líti eins út á öllum síðum._
        -   Afritaðu kóðann fyrir tenglastikuna og bættu tenglastiku efst á listasíðuna.
        -   Prófaðu tenglana á forskoðunarsvæðinu með því að smella á þá.
      CSD U2 new page: |-
        # Búa til nýja síðu fyrir vefinn.

        Hér er verkefnið þitt frá því áður.  Þú átt að bæta við annarri síðu.  Nýja síðan þín getur verið Topp 10 listi, uppskrift eða eitthvað sem þú ákveður.

        # Gerðu þetta

        -   Bættu við nýrri HTML skrá með því að smella á ![](<https://images.code.org/9b9f9f78962ef77664333d1b0f762ff1-image-1493252448756.19.38 PM.png>).  Nýja skráin birtist í skráalistanum vinstra megin.
        -   Gefðu skránni heiti með því að hægrismella á hana og velja "Endurnefna" (rename) eða með því að smella á hana þegar hún er þegar valin.  **Gættu þess að heitið sé einstakt, lýsandi og endi á ".html"**.
        -   Notaðu HTML til að stilla upp efni síðunnar. Hún ætti að innihalda:
        -   lista
        -   fyrirsögn
      CSD U2 new page_2018: |-
        # Búa til nýja síðu fyrir vefinn.

        Hér er verkefnið þitt frá því áður.  Þú átt að bæta við annarri síðu.  Nýja síðan þín getur verið Topp 10 listi, uppskrift eða eitthvað sem þú ákveður.

        # Gerðu þetta

        -   Bættu við nýrri HTML skrá með því að smella á ![](<https://images.code.org/9b9f9f78962ef77664333d1b0f762ff1-image-1493252448756.19.38 PM.png>).  Nýja skráin birtist í skráalistanum vinstra megin.
        -   Gefðu skránni heiti með því að hægrismella á hana og velja "Endurnefna" (rename) eða með því að smella á hana þegar hún er þegar valin.  **Gættu þess að heitið sé einstakt, lýsandi og endi á ".html"**.
        -   Notaðu HTML til að stilla upp efni síðunnar. Hún ætti að innihalda:
        -   lista
        -   fyrirsögn
      CSD U2 new page_2019: |-
        # Búa til nýja síðu fyrir vefinn.

        Hér er verkefnið þitt frá því áður.  Þú átt að bæta við annarri síðu.  Nýja síðan þín getur verið Topp 10 listi, uppskrift eða eitthvað sem þú ákveður.

        # Gerðu þetta

        -   Bættu við nýrri HTML skrá með því að smella á ![](<https://images.code.org/9b9f9f78962ef77664333d1b0f762ff1-image-1493252448756.19.38 PM.png>).  Nýja skráin birtist í skráalistanum vinstra megin.
        -   Gefðu skránni heiti með því að hægrismella á hana og velja "Endurnefna" (rename) eða með því að smella á hana þegar hún er þegar valin.  **Gættu þess að heitið sé einstakt, lýsandi og endi á ".html"**.
        -   Notaðu HTML til að stilla upp efni síðunnar. Hún ætti að innihalda:
        -   lista
        -   fyrirsögn
      CSD U2 ordered list: "# Raðaðir listar\n\n<div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary>\n\n**Tvær tegundir af listum**\n\n</summary>\nÞað
        eru tvenns konar listar í HTML: raðaðir (enska:ordered) og óraðaðir (enska:unordered).\n</details>\n<details>\n<summary>\n\n**Hvað
        er raðaður listi?**\n\n</summary>\nRaðaður listi (enska:ordered list) er röð
        atriða sem eru tölusett.\n<br /><br />\nRaðaður listi er eining með tagið
        `<ol>`  . Þetta er skammstöfun á enska heitinu \"<strong>O</strong>rdered
        <strong>L</strong>ist\".\nHvert atriði í listanum er sjálfstæð eining með
        tagið `<li>`. Þetta er aftur skammstöfun á enska heitinu \"<strong>L</strong>ist
        <strong>I</strong>tem\".  Listaatriðið er dæmi um einingarbarn (enska:child
        element), sem er innan í einingarforeldri (enska:parent element), sem hér
        er raðaði listinn (`<ol>`).\n</details>\n\n<details>\n<summary>\n\n**Hvernig
        bý ég til raðaðan lista?**\n\n</summary>\nÞað gerist í tveimur áföngum: fyrst
        að búa til listann og svo bæta í hann listaatriðum.  Raðaði listinn er búinn
        til með því að skrifa listatögin`<ol></ol>`.  Síðan er listaatriðum bætt við
        **á milli** listataganna.  Búðu til hvert listaatriði með tögunum`<li></li>`
        og skrifaðu efni atriðisins á milli þeirra.\n<br /><br />\nÞað getur verið
        hjálplegt að hafa inndrátt á `<li>` tögunum\nsvo það sjáist greinilega að
        þau eru innan í `<ol>`  taginu.\n</details>\n\n<details>\n<summary>\n\n**Dæmi
        um kóða.**\n\n</summary>\n\n<table border=\"1\">\n<tr>\n<td>Dæmi</td>\n<td>Útkoma</td>\n</tr>\n<tr>\n<td><pre>\n&lt;ol&gt;
        <br>   &lt;li&gt;1. skref &lt;/li&gt; <br>   &lt;li&gt;2. skref &lt;/li&gt;\n<br>
        \  &lt;li&gt;3. skref &lt;/li&gt; <br> &lt;/ol&gt; </pre></td>\n<td><img\nsrc=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04
        PM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n</details>\n</div>\n\nÞessi
        síða ætti að hafa raðaðan lista, en það vantar listatögin.\n\n# Gerðu þetta\n\n-
        \  Notaðu tögin `<ol>` og `<li>` til að stilla þessu efni upp í röðuðum lista
        sem er eins og listinn hér að neðan.\n\n_Vísbending: Það eru ENGAR TÖLUR í
        sjálfum kóðanum._ \n\n![](<https://images.code.org/b3186e83c3e3bd2680a1a300e5abd126-image-1493238064706.17.03
        PM.png>)"
      CSD U2 ordered list_2018: "# Raðaðir listar\n\n<div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary>\n<strong>Tvær tegundir af listum</strong>\n</summary>\nÞað
        eru tvenns konar listar í HTML: raðaðir (enska:ordered) og óraðaðir (enska:unordered).\n</details>\n<details>\n<summary>\n<strong>Hvað
        er raðaður listi?</strong>\n</summary>\n\nRaðaður listi (enska:ordered list)
        er röð atriða sem eru tölusett.\n<br /><br />\nRaðaður listi er eining með
        tagið `<ol>`  . Þetta er skammstöfun á enska heitinu \"<strong>O</strong>rdered
        <strong>L</strong>ist\".\nHvert atriði í listanum er sjálfstæð eining með
        tagið `<li>`. Þetta er aftur skammstöfun á enska heitinu \"<strong>L</strong>ist
        <strong>I</strong>tem\".  Listaatriðið er dæmi um einingarbarn (enska:child
        element), sem er innan í einingarforeldri (enska:parent element), sem hér
        er raðaði listinn (`<ol>`).\n\n</details>\n\n<details>\n<summary>\n<strong>Hvernig
        bý ég til raðaðan lista?</strong>\n</summary>\n\nÞað gerist í tveimur áföngum:
        fyrst að búa til listann og svo bæta í hann listaatriðum.  Raðaði listinn
        er búinn til með því að skrifa listatögin`<ol></ol>`.  Síðan er listaatriðum
        bætt við **á milli** listataganna.  Búðu til hvert listaatriði með tögunum`<li></li>`
        og skrifaðu efni atriðisins á milli þeirra.\n<br /><br />\nÞað getur verið
        hjálplegt að hafa inndrátt á `<li>` tögunum svo það sjáist greinilega að þau
        eru innan í `<ol>`  taginu.\n\n</details>\n\n<details>\n<summary>\n<strong>Dæmi
        um kóða.</strong>\n</summary>\n<table\nborder=\"1\">\n<tr>\n<td>Dæmi</td>\n<td>Útkoma</td>\n</tr>\n<tr>\n<td><pre>\n&lt;ol&gt;
        <br>   &lt;li&gt;1. skref &lt;/li&gt; <br>   &lt;li&gt;2. skref &lt;/li&gt;\n<br>
        \  &lt;li&gt;3. skref &lt;/li&gt; <br> &lt;/ol&gt; </pre></td>\n<td><img src=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04
        PM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n</details>\n</div>\n\nÞessi
        síða ætti að hafa raðaðan lista, en það vantar listatögin.\n\n# Gerðu þetta\n\n-
        \  Notaðu tögin `<ol>` og `<li>` til að stilla þessu efni upp í röðuðum lista
        sem er eins og listinn hér að neðan.\n\n_Vísbending: Það eru ENGAR TÖLUR í
        sjálfum kóðanum._ \n\n![](<https://images.code.org/b3186e83c3e3bd2680a1a300e5abd126-image-1493238064706.17.03
        PM.png>)"
      CSD U2 ordered list_2019: "# Raðaðir listar\n\n<div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary>\n<strong>Tvær tegundir af listum</strong>\n</summary>\nÞað
        eru tvenns konar listar í HTML: raðaðir (enska:ordered) og óraðaðir (enska:unordered).\n</details>\n<details>\n<summary>\n<strong>Hvað
        er raðaður listi?</strong>\n</summary>\n\nRaðaður listi (enska:ordered list)
        er röð atriða sem eru tölusett.\n<br /><br />\nRaðaður listi er eining með
        tagið `<ol>`  . Þetta er skammstöfun á enska heitinu \"<strong>O</strong>rdered
        <strong>L</strong>ist\".\nHvert atriði í listanum er sjálfstæð eining með
        tagið `<li>`. Þetta er aftur skammstöfun á enska heitinu \"<strong>L</strong>ist
        <strong>I</strong>tem\".  Listaatriðið er dæmi um einingarbarn (enska:child
        element), sem er innan í einingarforeldri (enska:parent element), sem hér
        er raðaði listinn (`<ol>`).\n\n</details>\n\n<details>\n<summary>\n<strong>Hvernig
        bý ég til raðaðan lista?</strong>\n</summary>\n\nÞað gerist í tveimur áföngum:
        fyrst að búa til listann og svo bæta í hann listaatriðum.  Raðaði listinn
        er búinn til með því að skrifa listatögin`<ol></ol>`.  Síðan er listaatriðum
        bætt við **á milli** listataganna.  Búðu til hvert listaatriði með tögunum`<li></li>`
        og skrifaðu efni atriðisins á milli þeirra.\n<br /><br />\nÞað getur verið
        hjálplegt að hafa inndrátt á `<li>` tögunum svo það sjáist greinilega að þau
        eru innan í `<ol>`  taginu.\n\n</details>\n\n<details>\n<summary>\n<strong>Dæmi
        um kóða.</strong>\n</summary>\n<table\nborder=\"1\">\n<tr>\n<td>Dæmi</td>\n<td>Útkoma</td>\n</tr>\n<tr>\n<td><pre>\n&lt;ol&gt;
        <br>   &lt;li&gt;1. skref &lt;/li&gt; <br>   &lt;li&gt;2. skref &lt;/li&gt;\n<br>
        \  &lt;li&gt;3. skref &lt;/li&gt; <br> &lt;/ol&gt; </pre></td>\n<td><img src=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04
        PM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n</details>\n</div>\n\nÞessi
        síða ætti að hafa raðaðan lista, en það vantar listatögin.\n\n# Gerðu þetta\n\n-
        \  Notaðu tögin `<ol>` og `<li>` til að stilla þessu efni upp í röðuðum lista
        sem er eins og listinn hér að neðan.\n\n_Vísbending: Það eru ENGAR TÖLUR í
        sjálfum kóðanum._ \n\n![](<https://images.code.org/b3186e83c3e3bd2680a1a300e5abd126-image-1493238064706.17.03
        PM.png>)"
      CSD U2 project review: "# Farðu yfir verkefnið\\\r\n\n\\\r\nVerkefnið þitt er
        næstum tilbúið til birtingar, en þú ættir að athuga eftirfarandi atriði einu
        sinni enn. \\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n-   Vertu viss um að þér finnist
        í lagi að deila þeim upplýsingum sem eru á vefsetrinu þínu.\\\r\n-   Gættu
        þess að allar myndir séu rétt eignaðar og að þú hafir leyfi til að nota þær
        á vefsetrinu þínu.\\\r\n-   \\*\n    Gakktu úr skugga um að verkefnið innihaldi
        allt sem tiltekið er í lýsingu verkefnisins.\\\r\n-   \\*\n    Notaðu athugasemdir
        og bil í kóðanum til að gera hann skiljanlegri.\\\r\n-   Biddu félaga þinn
        að hjálpa þér að finna hugsanleg vandamál með vefinn þinn.\\\r"
      CSD U2 project review_2018: "# Farðu yfir verkefnið\\\r\n\n\\\r\nVerkefnið þitt
        er næstum tilbúið til birtingar, en þú ættir að athuga eftirfarandi atriði
        einu sinni enn. \\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n-   Vertu viss um að þér
        finnist í lagi að deila þeim upplýsingum sem eru á vefsetrinu þínu.\\\r\n-
        \  Gættu þess að allar myndir séu rétt eignaðar og að þú hafir leyfi til að
        nota þær á vefsetrinu þínu.\\\r\n-   \\*\n    Gakktu úr skugga um að verkefnið
        innihaldi allt sem tiltekið er í lýsingu verkefnisins.\\\r\n-   \\*\n    Notaðu
        athugasemdir og bil í kóðanum til að gera hann skiljanlegri.\\\r\n-   Biddu
        félaga þinn að hjálpa þér að finna hugsanleg vandamál með vefinn þinn.\\\r"
      CSD U2 project review_2019: "# Farðu yfir verkefnið\\\r\n\n\\\r\nVerkefnið þitt
        er næstum tilbúið til birtingar, en þú ættir að athuga eftirfarandi atriði
        einu sinni enn. \\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n-   Vertu viss um að þér
        finnist í lagi að deila þeim upplýsingum sem eru á vefsetrinu þínu.\\\r\n-
        \  Gættu þess að allar myndir séu rétt eignaðar og að þú hafir leyfi til að
        nota þær á vefsetrinu þínu.\\\r\n-   \\*\n    Gakktu úr skugga um að verkefnið
        innihaldi allt sem tiltekið er í lýsingu verkefnisins.\\\r\n-   \\*\n    Notaðu
        athugasemdir og bil í kóðanum til að gera hann skiljanlegri.\\\r\n-   Biddu
        félaga þinn að hjálpa þér að finna hugsanleg vandamál með vefinn þinn.\\\r"
      CSD U2 project share: "# Deildu verkefninu\\\r\n\n\\\r\nÞað er kominn tími til
        að deila verkefninu með restinni af heiminum!\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n-
        \  Smelltu á \n    ![](<https://images.code.org/26bcf1645e18ac064cf0631fb5ca023c-image-1493744000091.52.27\n
        \   AM.png>) hnappinn efst á þessari síðu.\\\r\n-   Afritaðu vefslóðina sem
        þú færð og sendu hana í tölvupósti til þeirra sem mega sjá síðuna.\\\r\n    \\\r"
      CSD U2 project share_2018: "# Deildu verkefninu\\\r\n\n\\\r\nÞað er kominn tími
        til að deila verkefninu með restinni af heiminum!\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n-
        \  Smelltu á \n    ![](<https://images.code.org/26bcf1645e18ac064cf0631fb5ca023c-image-1493744000091.52.27\n
        \   AM.png>) hnappinn efst á þessari síðu.\\\r\n-   Afritaðu vefslóðina sem
        þú færð og sendu hana í tölvupósti til þeirra sem mega sjá síðuna.\\\r\n    \\\r"
      CSD U2 project share_2019: "# Deildu verkefninu\\\r\n\n\\\r\nÞað er kominn tími
        til að deila verkefninu með restinni af heiminum!\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n-
        \  Smelltu á \n    ![](<https://images.code.org/26bcf1645e18ac064cf0631fb5ca023c-image-1493744000091.52.27\n
        \   AM.png>) hnappinn efst á þessari síðu.\\\r\n-   Afritaðu vefslóðina sem
        þú færð og sendu hana í tölvupósti til þeirra sem mega sjá síðuna.\\\r\n    \\\r"
      CSD U2 publish video: |-
        ## Spurningar til að hugleiða

        -   Hvaða ábyrgð heldur þú að þú hafir sem útgefandi vefs og hvað finnst þér um það?
        -   Af hverju mundir þú vilja sjá kóða bak við vefsíðu einhvers annars eða nota hann fyrir eigin vef með breytingum?
      CSD U2 text style decoration: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>How does the code work?</strong></summary>
        Here is the code that makes the `h1` elements underlined:

        <pre>h1 {
          text-decoration: underline;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `text-decoration: underline;` is the rule that makes the text inside the `h1` tag underlined.
            -   `text-decoration` is the _property_.  It explains what the rule is about, in this case where the line goes.
            -   `underline` is the _value_.  It explains how the rule should be applied, in this case making the test underlined.
                </details>
                <details>
                <summary><strong>What are the possible values for text decoration?</strong></summary>
                You can choose between "underline", "overline", and "line-through".  You can read more about the text-decoration property at <a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp">W3Schools - CSS text-decoration Property</a>
                </details>
                <details>
                <summary><strong>Why do I need all the punctuation?</strong></summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the stylesheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary><strong>What is a stylesheet?</strong></summary>
        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.
        </details>
        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Underlining

        -   Find the code in the style sheet that makes the h1 tag underlined.
        -   Change the text decoration and see which one you like.
            -   Choose from "underline", "overline", and "line-through"
        -   Add a text decoration rule for the paragraph or h3 tag.
      CSD U2 text style decoration_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>How does the code work?</strong></summary>
        Here is the code that makes the `h1` elements underlined:

        <pre>h1 {
          text-decoration: underline;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `text-decoration: underline;` is the rule that makes the text inside the `h1` tag underlined.
            -   `text-decoration` is the _property_.  It explains what the rule is about, in this case where the line goes.
            -   `underline` is the _value_.  It explains how the rule should be applied, in this case making the test underlined.
                </details>
                <details>
                <summary><strong>What are the possible values for text decoration?</strong></summary>
                You can choose between "underline", "overline", and "line-through".  You can read more about the text-decoration property at <a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp" target="_new">W3Schools - CSS text-decoration Property</a>
                </details>

        <details>
        <summary><strong>Why do I need all the punctuation?</strong></summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the stylesheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary><strong>What is a stylesheet?</strong></summary>
        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.
        </details>

        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }</pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Underlining

        -   Find the code in the style sheet that makes the h1 tag underlined.
        -   Change the text decoration and see which one you like.
            -   Choose from "underline", "overline", and "line-through"
        -   Add a text decoration rule for the paragraph or h3 tag.
      CSD U2 text style decoration_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">
        <details>

        <summary>
        <strong>Hvernig virkar kóðinn?</strong>
        </summary>

        Hér er kóðinn sem setur undirstrikun á `h1` einingarnar:

        <pre>p {
          text-decoration: underline;
        }</pre>

        -   `h1` er _veljarinn_ (selector). Hann velur hvaða einingar eiga að fylgja reglunum í krullusviganum { }. `h` táknar fyrirsögn (heading).
        -   `text-decoration: underline;` er reglan sem lætur texta innan í `h1` tögum fá undurstrikun.
            -   `text-decoration` er _eiginleikinn_.  Hann segir til um á hvað reglan hefur áhrif, í þessu tilfelli að "skreyta" letrið.
            -   `underline` er _gildið_.  Það segir til um hvaða áhrif reglan hefur varðandi eiginleikann, í þessu tilfelli á letrið að vera undirstrikað.
                </details>
                <details>
                <summary>
                <strong>Hvað gildi getur `text-decoration` haft?</strong>
                </summary>

        Þú getur m.a. valið um "underline", "overline" og "line-through".  Þú getur lesið meira um `text-decoration` eiginleikann á síðunni  <a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp" target="_new">W3Schools - CSS text-decoration Property</a>

        </details>

        <details>
        <summary><strong>Af hverju þarf öll þessi greinarmerki?</strong>
        </summary>

        Greinarmerkin, svo sem krullusvigarnir `{ }`, tvípunkturinn `:` og semikomman `;`, hjálpa tölvunni að skilja reglur stílsíðunnar.  Krullusvigarnir afmarka allar reglurnar fyrir tiltekinn veljara.  Hver regla þarf að enda á tvípunkti, og eiginleikarnir ásamt gildum þeirra eru alltaf aðskildir með semikommu.

        </details>
        <details>
        <summary><strong>Hvað er stílsíða?</strong></summary>
        Stílsíða er skjal sem stjórnar útliti vefsíðu.  Utanáliggjandi stílsíður eru sérstakar skrár sem eru tengdar HTML síðunni.

        </details>
        <details>
        <summary><strong>Hvað er CSS?</strong></summary>

        CSS er forritunarmál sem stjórnar því hvernig innihald vefs birtist.  Það notar sett af reglum til að stýra útliti vefsíðu.  Hvert sett af reglum hefur veljara (selector), sem velur þær einingar á síðunni sem stjórnast af reglunum, og sjálfar reglurnar, sem segja til um hvernig einingarnar skuli birtast.   Hver regla samanstendur af eiginleika (property) og gildi (value) fyrir eiginleikann.

        Hér er dæmi um reglusett sem lætur textann í `h2` tögum fá bláan lit og skrifstafi:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }</pre>

        Í þessu dæmi er `h2` veljarinn, `color` og `font-family` eru eiginleikar og `blue` og `cursive` eru gildi fyrir þá eiginleika.

        </details>
        </div>

        # Undirstrikun

        -   Finndu kóðann í stílsíðunni sem setur undirstrikun á h1 tög.
        -   Breyttu textaskreytingunni (text-decoration) og veldu þá sem þér líst best á.
            -   Valkostir eru "underline", "overline", og "line-through"
        -   Bættu samskonar reglu við fyrir p eða h3 tögin.
      CSD U2 text style font family: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>How does the code work?</strong></summary>

        Here is the code that is controlling the paragraph font:

        <pre>p {
          font-family: cursive;
        }</pre>

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `font-family: cursive;` is the rule that makes the text inside the `p` tags a particular font.
            -   `font-family` is the _property_.  It explains what the rule is about, in this case the font.
            -   `cursive` is the _value_.  It explains how the rule should be applied, in this case making the text cursive.

        </details>
        <details>
        <summary><strong>What are the possible values for font family?</strong></summary>

        You can choose between "serif", "sans-serif", "cursive", "fantasy", and "monospace".  You can also try more specific fonts as described in <a href="http://www.w3schools.com/cssref/css_websafe_fonts.asp">W3Schools - CSS Web Safe Font Combinations</a>

        </details>
        <details>
        <summary><strong>Why do I need all the punctuation?</strong></summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the stylesheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary><strong>What is a stylesheet?</strong></summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Changing the Font

        -   Find the CSS rule-set in the style sheet that determines the style for the paragraph tag.
        -   Change the font family and choose which one you like the best.
            -   Choose from "serif", "sans-serif", "cursive", "fantasy", and "monospace"
        -   Add a font family rule for the h1 or h3 tags.
      CSD U2 text style font family_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>

        Here is the code that is controlling the paragraph font:

        <pre>p {
          font-family: cursive;
        }</pre>

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `font-family: cursive;` is the rule that makes the text inside the `p` tags a particular font.
            -   `font-family` is the _property_.  It explains what the rule is about, in this case the font.
            -   `cursive` is the _value_.  It explains how the rule should be applied, in this case making the text cursive.

        </details>
        <details>
        <summary>
        <strong>What are the possible values for font family?</strong>
        </summary>

        You can choose between "serif", "sans-serif", "cursive", "fantasy", and "monospace".  You can also try more specific fonts as described in <a href="http://www.w3schools.com/cssref/css_websafe_fonts.asp" target="_new">W3Schools - CSS Web Safe Font Combinations</a>

        </details>
        <details>
        <summary>
        <strong>Why do I need all the punctuation?</strong>
        </summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the stylesheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary>
        <strong>What is a stylesheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }</pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Changing the Font

        -   Find the CSS rule-set in the style sheet that determines the style for the paragraph tag.
        -   Change the font family and choose which one you like the best.
            -   Choose from "serif", "sans-serif", "cursive", "fantasy", and "monospace"
        -   Add a font family rule for the h1 or h3 tags.
      CSD U2 text style font family_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">
        <details>

        <summary>
        <strong>Hvernig virkar kóðinn?</strong>
        </summary>

        Hér er kóðinn sem stjórnar leturgerð efnisgreina:

        <pre>p {
          font-family: cursive;
        }</pre>

        -   `p` er _veljarinn_ (selector). Hann velur hvaða einingar eiga að fylgja reglunum í krullusviganum { }. `p` táknar efnisgrein (paragraph).
        -   `font-family: cursive;` er reglan sem lætur texta innan í `p` tögum fá þessa leturgerð.
            -   `font-family` er _eiginleikinn_.  Hann segir til um á hvað reglan hefur áhrif, í þessu tilfelli að stilla leturgerð.
            -   `cursive` er _gildið_.  Það segir til um hvaða áhrif reglan hefur varðandi eiginleikann, í þessu tilfelli á letrið að vera skriftarletur.

        </details>
        <details>
        <summary>
        <strong>Hvað gildi getur `font-family` haft?</strong>
        </summary>

        Þú getur m.a. valið um "serif", "sans-serif", "cursive", "fantasy" og "monospace".  Þú getur líka prófað tilteknar leturgerðir eins og lýst er á síðunni  <a href="http://www.w3schools.com/cssref/css_websafe_fonts.asp" target="_new">W3Schools - CSS Web Safe Font Combinations</a>

        </details>
        <details>
        <summary>
        <strong>Af hverju þarf öll þessi greinarmerki?</strong>
        </summary>

        Greinarmerkin, svo sem krullusvigarnir `{ }`, tvípunkturinn `:` og semikomman `;`, hjálpa tölvunni að skilja reglur stílsíðunnar.  Krullusvigarnir afmarka allar reglurnar fyrir tiltekinn veljara.  Hver regla þarf að enda á tvípunkti, og eiginleikarnir ásamt gildum þeirra eru alltaf aðskildir með semikommu.

        </details>
        <details>
        <summary>
        <strong>Hvað er stílsíða?</strong>
        </summary>

        Stílsíða er skjal sem stjórnar útliti vefsíðu.  Utanáliggjandi stílsíður eru sérstakar skrár sem eru tengdar HTML síðunni.

        </details>

        <details>
        <summary>
        <strong>Hvað er CSS?</strong>
        </summary>

        CSS er forritunarmál sem stjórnar því hvernig innihald vefs birtist.  Það notar sett af reglum til að stýra útliti vefsíðu.  Hvert sett af reglum hefur veljara (selector), sem velur þær einingar á síðunni sem stjórnast af reglunum, og sjálfar reglurnar, sem segja til um hvernig einingarnar skuli birtast.   Hver regla samanstendur af eiginleika (property) og gildi (value) fyrir eiginleikann.

        Hér er dæmi um reglusett sem lætur textann í `h2` tögum fá bláan lit og skrifstafi:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }</pre>

        Í þessu dæmi er `h2` veljarinn, `color` og `font-family` eru eiginleikar og `blue` og `cursive` eru gildi fyrir þá eiginleika.

        </details>
        </div>

        # Að breyta leturgerðinni

        -   Finndu CSS reglusettið í stílsíðunni sem ákveður útlit efnisgreinartagsins.
        -   Breyttu leturgerðinni (font family) og veldu það sem þér líst best á.
            -   Valkostir eru "serif", "sans-serif", "cursive", "fantasy" og "monospace"
        -   Bættu leturgerðarreglu við fyrir h1 eða h3 tögin.
      CSD U2 text style freeplay: |-
        # Adding Styles

        Now you can style the text on your personal web site!

        -   Open your style sheet and add styling of your choice to your project. Be sure to use at least 3 different CSS properties.

        # Checklist

        -   At least 3 of the following CSS Properties are used:
            -   `font-size`
            -   `font-family`
            -   `color`
            -   `text-decoration`
            -   `text-align`

        If you’ve used at least 3 of the properties from the checklist, you can explore some additional text properties to add to your project.
      CSD U2 text style freeplay_2018: |-
        # Adding Styles

        Now you can style the text on your personal web site!

        -   Open your style sheet and add styling of your choice to your project. Be sure to use at least 3 different CSS properties.

        # Checklist

        -   At least 3 of the following CSS Properties are used:
            -   `font-size`
            -   `font-family`
            -   `color`
            -   `text-decoration`
            -   `text-align`

        If you’ve used at least 3 of the properties from the checklist, you can explore some additional text properties to add to your project.
      CSD U2 text style freeplay_2019: |-
        # Adding Styles

        Now you can style the text on your personal web site!

        -   Open your style sheet and add styling of your choice to your project. Be sure to use at least 3 different CSS properties.

        # Checklist

        -   At least 3 of the following CSS Properties are used:
            -   `font-size`
            -   `font-family`
            -   `color`
            -   `text-decoration`
            -   `text-align`

        If you’ve used at least 3 of the properties from the checklist, you can explore some additional text properties to add to your project.
      CSD U2 text style h1: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What colors can I use in CSS?</strong></summary>
        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools - CSS Legal Color Values</a>
        </details><details>
        <summary><strong>How does the code work?</strong></summary>
        Here is the code that is making the `h1` heading red:

        <pre>h1 {
          color: red;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.
                </details>
                <details>
                <summary><strong>Why do I need all the punctuation?</strong></summary>
                The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.
                </details>
                <details>
                <summary><strong>What is a style sheet?</strong></summary>
                A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.
                </details>
                <details>
                <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # CSS and Text Color

        This HTML file uses a style sheet ("style.css") to give the page a particular style.  The style sheet contains information about what each of the HTML elements should look like.

        -   Find the code in the style sheet (click on "style.css" in the files list) that is making the h1 heading red.
        -   Change the code for the color of the h1 heading from `red` to a different color.
      CSD U2 text style h1_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What colors can I use in CSS?</strong>
        </summary>

        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp" target="_new">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp" target="_new">W3Schools - CSS Legal Color Values</a>

        </details><details>
        <summary>
        <strong>How does the code work?</strong>
        </summary>

        Here is the code that is making the `h1` heading red:

        <pre>h1 {
          color: red;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.

        </details>
        <details>
        <summary>
        <strong>Why do I need all the punctuation?</strong>
        </summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary>
        <strong>What is a style sheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }</pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # CSS and Text Color

        This HTML file uses a style sheet ("style.css") to give the page a particular style.  The style sheet contains information about what each of the HTML elements should look like.

        -   Find the code in the style sheet (click on "style.css" in the files list) that is making the h1 heading red.
        -   Change the code for the color of the h1 heading from `red` to a different color.
      CSD U2 text style h1_2019: "<div class=\"no-pullthrough\" \n style=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n\n
        \ <details>\n    <summary>\n      <strong>\n        Hvaða liti get ég notað
        í CSS?\n      </strong>\n    </summary>\n    CSS getur notað algengustu (ensku)
        heitin á litum (red, blue, green, o.s.frv.), og mörg af þeim óalgengari.  Þú
        getur séð lista yfir öll litaheiti sem CSS skilur á vefsíðunni <a href=\"http://www.w3schools.com/colors/colors_names.asp\"
        target=\"_new\">W3Schools - HTML Color Names</a>.  Þú getur samt notað liti
        sem ekki eru á listanum en þá þarft þú að nota RGB gildi þeirra.  Þú getur
        lesið meira um notkun lita í CSS á síðunni <a href=\"http://www.w3schools.com/cssref/css_colors_legal.asp\"
        target=\"_new\">W3Schools - CSS Legal Color Values</a>\n  </details>\n\n<details>\n<summary>\n<strong>Hvernig
        virkar kóðinn?</strong>\n</summary>\n\nHér er kóði sem gefur `h1` fyrirsögninni
        rauðan textalit:\n\n<pre>h1 {\n  color: red;\n}</pre>\n\n-   `h1` er _veljarinn_
        (selector).  Hann skilgreinir hvaða einingar munu fylgja reglunum innan krullusviganna
        { }.\n-   `color: red;` er reglan sem lætur texta innan í `h1` tögum fá rauðan
        lit.\n    -   `color` er _eiginleikinn_.  Hann skýrir það um hvað reglan snýst,
        í þessu tilfelli textalit.\n    -   `red` er _gildið_.  Það skýrir hvernig
        skuli framfylgja reglunni, í þessu tilfelli að hafa textalitinn rauðan.\n\n</details>\n\n<details>\n<summary>\n<strong>Af
        hverju þarf öll þessi greinarmerki?</strong>\n</summary>\n\nGreinarmerkin,
        svo sem krullusvigarnir `{ }`, tvípunkturinn `:` og semikomman `;`, hjálpa
        tölvunni að skilja reglur stílsíðunnar.  Krullusvigarnir afmarka allar reglurnar
        fyrir tiltekinn veljara.  Hver regla þarf að enda á tvípunkti, og eiginleikarnir
        ásamt gildum þeirra eru alltaf aðskildir með semikommu.\n\n</details>\n<details>\n<summary>\n<strong>Hvað
        er stílsíða?</strong>\n</summary>\n\nStílsíða er skjal sem stjórnar útliti
        vefsíðu.  Utanáliggjandi stílsíður eru sérstakar skrár sem eru tengdar HTML
        síðunni.\n\n</details>\n\n<details>\n<summary>\n<strong>Hvað er CSS?</strong>\n</summary>\nCSS
        er forritunarmál sem stjórnar því hvernig innihald vefs birtist.  Það notar
        sett af reglum til að stýra útliti vefsíðu.  Hvert sett af reglum hefur veljara
        (selector), sem velur þær einingar á síðunni sem stjórnast af reglunum, og
        sjálfar reglurnar, sem segja til um hvernig einingarnar skuli birtast.   Hver
        regla samanstendur af eiginleika (property) og gildi (value) fyrir eiginleikann.\n\nHér
        er dæmi um reglusett sem lætur textann í `h2` tögum fá bláan lit og skrifstafi:\n\n<pre>h2
        {\n   color: blue;\n   font-family: cursive;\n}</pre>\n\nÍ þessu dæmi er `h2`
        veljarinn, `color` og `font-family` eru eiginleikar og `blue` og `cursive`
        eru gildi fyrir þá eiginleika.\n\n</details>\n\n</div>\n\n# CSS og textalitur\n\nÞessi
        HTML skrá notar stílsíðu (\"style.css\") til að gefa síðunni þetta tiltekna
        útlit eða stíl.  Stílsíðan inniheldur upplýsingar um hvernig HTML einingarnar
        eiga að líta út.\n\n-   Finndu kóðann í stílsíðunni (smelltu á \"style.css\"
        í skráalistanum) sem gefur h1 fyrirsögninnni rauðan lit.\n-   Breyttu kóðanum
        fyrir lit h1 fyrirsagnarinnar úr `red` í annan lit."
      CSD U2 text style h3: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What colors can I use in CSS?</strong></summary>

        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools - CSS Legal Color Values</a>

        </details>
        <details>
        <summary><strong>How does the code work?</strong></summary>
        Here is the code that is making the `h1` header red:

        <pre>h1 {
          color: red;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.
                </details>
                <details>
                <summary><strong>How do I make a new rule-set?</strong></summary>

        To make a new rule set, you'll need a selector and a list of rules.  The selector is the name of the tag you want the rules to be applied to.  The rules are a list of property and value pairs.  You'll also need to pay careful attention to the punctuation in the rule set.  Look at the code below for an example of how the code should look.  You'll need to change the specifics for your page.

        <pre>h1 {
          color: red;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.
                </details>
                <details>
                <summary><strong>Why do I need all the punctuation?</strong></summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary><strong>What is a style sheet?</strong></summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Making a new CSS rule-set

        The block of code that gives rules for a particular tag is called a _rule-set_.  You can make a new rule set by copying the pattern you see in the rule-set for the `h1` tag.

        -   Find the CSS rule-set in the style sheet that determines the styles for the h1 tag.
        -   Using the same pattern, write a new CSS rule-set that will determine the style for the h3 tag.
        -   Add code to set a different color for the h3 tags.
      CSD U2 text style h3_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What colors can I use in CSS?</strong>
        </summary>
        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools - CSS Legal Color Values</a>
        </details>
        <details>
        <summary>
        <strong>How does the code work?</strong>
        </summary>

        Here is the code that is making the `h1` header red:

        <pre>h1 {
          color: red;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.

        </details>
        <details>
        <summary>
        <strong>How do I make a new rule-set?</strong>
        </summary>

        To make a new rule set, you'll need a selector and a list of rules.  The selector is the name of the tag you want the rules to be applied to.  The rules are a list of property and value pairs.  You'll also need to pay careful attention to the punctuation in the rule set.  Look at the code below for an example of how the code should look.  You'll need to change the specifics for your page.

        <pre>h1 {
          color: red;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.

        </details>
        <details>
        <summary>
        <strong>Why do I need all the punctuation?</strong>
        </summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary>
        <strong>What is a style sheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Making a new CSS rule-set

        The block of code that gives rules for a particular tag is called a _rule-set_.  You can make a new rule set by copying the pattern you see in the rule-set for the `h1` tag.

        -   Find the CSS rule-set in the style sheet that determines the styles for the `h1` tag.
        -   Using the same pattern, write a new CSS rule-set that will determine the style for the `h3` tag.
        -   Add code to set a different color for the `h3` tags.
      CSD U2 text style h3_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">
          <details>
            <summary>
              <strong>Hvaða liti get ég notað í CSS?</strong>
            </summary>
        CSS getur notað algengustu (ensku) heitin á litum (red, blue, green, o.s.frv.), og mörg af þeim óalgengari.  Þú getur séð lista yfir öll litaheiti sem CSS skilur á vefsíðunni <a href="http://www.w3schools.com/colors/colors_names.asp" target="_new">W3Schools - HTML Color Names</a>.  Þú getur samt notað liti sem ekki eru á listanum en þá þarft þú að nota RGB gildi þeirra.  Þú getur lesið meira um notkun lita í CSS á síðunni <a href="http://www.w3schools.com/cssref/css_colors_legal.asp" target="_new">W3Schools - CSS Legal Color Values</a>
        </details>

        <details>
        <summary>
        <strong>Hvernig virkar kóðinn?</strong>
        </summary>

        Hér er kóði sem gefur `h1` fyrirsögninni rauðan textalit:

        <pre>h1 {
          color: red;
        }</pre>

        -   `h1` er _veljarinn_ (selector).  Hann skilgreinir hvaða einingar munu fylgja reglunum innan krullusviganna { }.
        -   `color: red;` er reglan sem lætur texta innan í `h1` tögum fá rauðan lit.
            -   `color` er _eiginleikinn_.  Hann skýrir það um hvað reglan snýst, í þessu tilfelli textalit.
            -   `red` er _gildið_.  Það skýrir hvernig skuli framfylgja reglunni, í þessu tilfelli að hafa textalitinn rauðan.

        </details>
        <details>
        <summary>
        <strong>Hvernig bý ég til nýtt reglusett?</strong>
        </summary>
        Til að búa til nýtt reglusett þarftu að hafa veljar og lista af reglum. Veljarinn er heiti þess tags sem þú vilt láta reglurnar gilda um. Reglurnar eru listi þar sem eiginleikar og gildi eru pöruð saman.  Þú þarft að gæta vandlega að ritun greinarmerkja í reglusettinu.  Skoðaðu kóðann hér fyrir neðan til að sjá hvernig kóðinn á að líta út.  Þú þarft auðvitað að aðlaga smáatriðin að síðunni þinni.

        <pre>h1 {
          color: red;
        }</pre>

        -   `h1` er _veljarinn_ (selector).  Hann skilgreinir hvaða einingar munu fylgja reglunum innan krullusviganna { }.
        -   `color: red;` er reglan sem lætur texta innan í `h1` tögum fá rauðan lit.
            -   `color` er _eiginleikinn_.  Hann skýrir það um hvað reglan snýst, í þessu tilfelli textalit.
            -   `red` er _gildið_.  Það skýrir hvernig skuli framfylgja reglunni, í þessu tilfelli að hafa textalitinn rauðan.
                </details>
                <details>
                <summary>
                <strong>Af hverju þarf öll þessi greinarmerki?</strong>
                </summary>

        Greinarmerkin, svo sem krullusvigarnir `{ }`, tvípunkturinn `:` og semikomman `;`, hjálpa tölvunni að skilja reglur stílsíðunnar.  Krullusvigarnir afmarka allar reglurnar fyrir tiltekinn veljara.  Hver regla þarf að enda á tvípunkti, og eiginleikarnir ásamt gildum þeirra eru alltaf aðskildir með semikommu.

        </details>
        <details>
        <summary>
        <strong>Hvað er stílsíða?</strong>
        </summary>

        Stílsíða er skjal sem stjórnar útliti vefsíðu.  Utanáliggjandi stílsíður eru sérstakar skrár sem eru tengdar HTML síðunni.

        </details>

        <details>
        <summary>
        <strong>Hvað er CSS?</strong>
        </summary>
        CSS er forritunarmál sem stjórnar því hvernig innihald vefs birtist.  Það notar sett af reglum til að stýra útliti vefsíðu.  Hvert sett af reglum hefur veljara (selector), sem velur þær einingar á síðunni sem stjórnast af reglunum, og sjálfar reglurnar, sem segja til um hvernig einingarnar skuli birtast.   Hver regla samanstendur af eiginleika (property) og gildi (value) fyrir eiginleikann.

        Hér er dæmi um reglusett sem lætur textann í `h2` tögum fá bláan lit og skrifstafi:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }</pre>

        Í þessu dæmi er `h2` veljarinn, `color` og `font-family` eru eiginleikar og `blue` og `cursive` eru gildi fyrir þá eiginleika.

        </details>

        </div>

        # Að búa til nýtt CSS reglusett

        Kóðabúturinn sem skilgreinur reglur fyrir tiltekið tag er kallað _reglusett_.  Þú getur búið til nýtt reglusett með því að fylgja mynstrinu fyrir `h1` tagið.

        -   Finndu CSS reglusettið í stílsíðunni sem skilgreinir stílana fyrir `h1` tagið.
        -   Notaðu sömu uppsetningu til að skrifa nýtt CSS reglusett sem á að stjórna stíl tagsins `h3`.
        -   Settu inn kóða til að gefa `h3` tögum öðruvísi lit.
      CSD U2 text style size: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>How does the code work?</strong></summary>
        Here is the code that is controlling the paragraph text size:

        <pre>p {
          font-size: 14px;
        }</pre>

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `font-size: 14px;` is the rule that makes the text inside the `p` tags a particular size.
            -   `font-size` is the _property_.  It explains what the rule is about, in this case the text size.
            -   `14px` is the _value_.  It explains how the rule should be applied, in this case making the text 14 pixels big.
                </details>
                <details>
                <summary><strong>What does `px` mean / What is a pixel?</strong></summary>

        Pixel, which is abbreviated `px`, is how elements are measured in CSS.  It’s the size of a single point of light on the screen.

        </details>
        <details>
        <summary><strong>Why do I need all the punctuation?</strong></summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary><strong>What is a style sheet?</strong></summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Changing text size

        You can control other things besides colors by using other properties.

        -   Find the CSS rule-set in the style sheet that determines the style for the paragraph tag.
        -   Change the text size of the paragraphs to be bigger.
        -   Add a new rule to your rule-set for your h3 tag to make the text bigger or smaller.
      CSD U2 text style size_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>

        Here is the code that is controlling the paragraph text size:

        <pre>p {
          font-size: 14px;
        }</pre>

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `font-size: 14px;` is the rule that makes the text inside the `p` tags a particular size.
            -   `font-size` is the _property_.  It explains what the rule is about, in this case the text size.
            -   `14px` is the _value_.  It explains how the rule should be applied, in this case making the text 14 pixels big.

        </details>
        <details>
        <summary>
        <strong>What does <code>px</code> mean / What is a pixel?</strong>
        </summary>

        Pixel, which is abbreviated `px`, is how elements are measured in CSS.  It’s the size of a single point of light on the screen.

        </details>
        <details>
        <summary>
        <strong>Why do I need all the punctuation?</strong>
        </summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary>
        <strong>What is a style sheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }</pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Changing text size

        You can control other things besides colors by using other properties.

        -   Find the CSS rule-set in the style sheet that determines the style for the paragraph tag.
        -   Change the text size of the paragraphs to be bigger.
        -   Add a new rule to your rule-set for your h3 tag to make the text bigger or smaller.
      CSD U2 text style size_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">
        <details>

        <summary>
        <strong>Hvernig virkar kóðinn?</strong>
        </summary>

        Hér er kóðinn sem stjórnar stærð textans í efnisgreinum (p tögum):

        <pre>p {
          font-size: 14px;
        }</pre>

        -   `p` er _veljarinn_ (selector). Hann velur hvaða einingar eiga að fylgja reglunum í krullusviganum { }. `p` táknar efnisgrein (paragraph).
        -   `font-size: 14px;` er reglan sem lætur texta innan í `p` tögum fá þessa leturstærð.
            -   `font-size` er _eiginleikinn_.  Hann segir til um á hvað reglan hefur áhrif, í þessu tilfelli að stilla leturstærð.
            -   `14px` er _gildið_.  Það segir til um hvaða áhrif reglan hefur varðandi eiginleikann, í þessu tilfelli á leturstærðin að vera 14 dílar.

        </details>
        <details>
        <summary>
        <strong>Hvað þýðir <code>px</code> / Hvað er díll?</strong>
        </summary>

        Díll (pixel, skammstafað `px`) er mælieining sem er notuð í CSS. Díll er stærðin á einum ljóspunkti á tölvuskjánum.

        </details>
        <details>
        <summary>
        <strong>Af hverju þarf öll þessi greinarmerki?</strong>
        </summary>

        Greinarmerkin, svo sem krullusvigarnir `{ }`, tvípunkturinn `:` og semikomman `;`, hjálpa tölvunni að skilja reglur stílsíðunnar.  Krullusvigarnir afmarka allar reglurnar fyrir tiltekinn veljara.  Hver regla þarf að enda á tvípunkti, og eiginleikarnir ásamt gildum þeirra eru alltaf aðskildir með semikommu.

        </details>
        <details>
        <summary>
        <strong>Hvað er stílsíða?</strong>
        </summary>

        Stílsíða er skjal sem stjórnar útliti vefsíðu.  Utanáliggjandi stílsíður eru sérstakar skrár sem eru tengdar HTML síðunni.

        </details>

        <details>
        <summary>
        <strong>Hvað er CSS?</strong>
        </summary>
        CSS er forritunarmál sem stjórnar því hvernig innihald vefs birtist.  Það notar sett af reglum til að stýra útliti vefsíðu.  Hvert sett af reglum hefur veljara (selector), sem velur þær einingar á síðunni sem stjórnast af reglunum, og sjálfar reglurnar, sem segja til um hvernig einingarnar skuli birtast.   Hver regla samanstendur af eiginleika (property) og gildi (value) fyrir eiginleikann.

        Hér er dæmi um reglusett sem lætur textann í `h2` tögum fá bláan lit og skrifstafi:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }</pre>

        Í þessu dæmi er `h2` veljarinn, `color` og `font-family` eru eiginleikar og `blue` og `cursive` eru gildi fyrir þá eiginleika.

        </details>
        </div>

        # Að breyta stærð texta

        Þú getur stjórnað fleiru en litum með því að nota aðra eiginleika.

        -   Finndu CSS reglusettið í stílsíðunni sem stjórnar útlit efnisgreinartagsins `p`.
        -   Breyttu stærð textans í efnisgreinum svo hann verði stærri.
        -   Bættu nýrri reglu við reglusettið fyrir h3 tagið til að gera textann stærri eða minni.
      CSD U2 text style text align: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        **How does the code work?**

        </summary>
        Here is the code that is controlling the paragraph text alignment:

        <pre>p {
          text-align: left;
        }</pre>

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `text-align: left;` is the rule that makes the text inside the `p` tags align to the left side of the paragraph.
            -   `text-align` is the _property_.  It explains what the rule is about, in this case the text alignment.
            -   `left` is the _value_.  It explains how the rule should be applied, in this case making the text align to the left side of the paragraph.
                </details>
                <details>
                <summary>

        **Why doesn't `text-align: left;` do anything?**

        </summary>
        Most properties have default values.  The default values are the styles that an element will have automatically, before you add your style sheet.  The default value for `text-align` is `left`, so it doesn't change from how it already looked.
        </details>
        <details>
        <summary>

        **What are the possible values for text align?**

        </summary>
        You can choose between "left", "right", and "center".  You can read more about the text-align property at <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp">W3Schools - CSS text-align Property</a>
        </details>
        <details>
        <summary>

        **Why do I need all the punctuation?**

        </summary>
        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.
        </details>
        <details>
        <summary>

        **What is a style sheet?**

        </summary>
        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.
        </details>
        <details>
        <summary>

        **What is CSS?**

        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>

        </details>
        </div>

        # Text Alignment

        The `text-align` property sets the horizontal (side to side) position of the text within each line.

        -   Find the "text-align" property in the paragraph tag.
        -   Change the paragraph alignment.
            -   Choose from "left", "right", and "center"
      CSD U2 text style text align_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>

        Here is the code that is controlling the paragraph text alignment:

        <pre>p {
          text-align: left;
        }</pre>

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `text-align: left;` is the rule that makes the text inside the `p` tags align to the left side of the paragraph.
            -   `text-align` is the _property_.  It explains what the rule is about, in this case the text alignment.
            -   `left` is the _value_.  It explains how the rule should be applied, in this case making the text align to the left side of the paragraph.

        </details>
        <details>
        <summary>
        <strong>Why doesn't <code>text-align: left;</code> do anything?</strong>
        </summary>

        Most properties have default values.  The default values are the styles that an element will have automatically, before you add your style sheet.  The default value for `text-align` is `left`, so it doesn't change from how it already looked.

        </details>
        <details>
        <summary>
        <strong>What are the possible values for text align?</strong>
        </summary>

        You can choose between "left", "right", and "center".  You can read more about the text-align property at <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp" target="_new">W3Schools - CSS text-align Property</a>

        </details>
        <details>
        <summary>
        <strong>Why do I need all the punctuation?</strong>
        </summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary>
        <strong>What is a style sheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.
        <br/><br/>
        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }</pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>

        </details>
        </div>

        # Text Alignment

        The `text-align` property sets the horizontal (side to side) position of the text within each line.

        -   Find the "text-align" property in the paragraph tag.
        -   Change the paragraph alignment.
            -   Choose from "left", "right", and "center"
      CSD U2 text style text align_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">
        <details>

        <summary>
        <strong>Hvernig virkar kóðinn?</strong>
        </summary>

        Hér er kóðinn sem stjórnar stillingu texta í efnisgreinum:

        <pre>p {
          text-align: left;
        }</pre>

        -   `p` er _veljarinn_ (selector). Hann velur hvaða einingar eiga að fylgja reglunum í krullusviganum { }. `p` táknar efnisgrein (paragraph).
        -   `text-align: left;` er reglan sem lætur texta innan í `p` tögum liggja upp að vinstri hlið efnisgreinar (vinstri stilling).
            -   `text-align` er _eiginleikinn_.  Hann segir til um á hvað reglan hefur áhrif, í þessu tilfelli upp að hvaða hlið einingar textalínur liggja.
            -   `left` er _gildið_.  Það segir til um hvaða áhrif reglan hefur varðandi eiginleikann, í þessu tilfelli eiga línur textans að liggja upp að vinstri hlið völdu eininganna.
                </details>
                <details>
                <summary>
                <strong>Af hverju gerir <code>text-align:left;</code> ekki neitt?</strong>
                </summary>

        Flestir eiginleikar hafa sjálfgefin gildi. Sjálfgefnu gildin eru þau sem einingar fá sjálfkrafa án þess að þú gerir neitt. Sjálfgefna gildið fyrir `text-align` er `left`, svo kóðinn hefur ekki breytt neinu. Textinn er sjálfkrafa stilltur til vinstri.

        </details>
        <details>
        <summary>
        <strong>Hvaða gildi getur `text-align` haft?</strong>
        </summary>

        Þú getur valið um "left", "right" og "center". Þú getur lesið meira um "text-align" eiginleikann á síðunni  <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp" target="_new">W3Schools - CSS text-align Property</a>

        </details>
        <details>
        <summary>
        <strong>Af hverju þarf öll þessi greinarmerki?</strong>
        </summary>

        Greinarmerkin, svo sem krullusvigarnir `{ }`, tvípunkturinn `:` og semikomman `;`, hjálpa tölvunni að skilja reglur stílsíðunnar.  Krullusvigarnir afmarka allar reglurnar fyrir tiltekinn veljara.  Hver regla þarf að enda á tvípunkti, og eiginleikarnir ásamt gildum þeirra eru alltaf aðskildir með semikommu.

        </details>
        <details>
        <summary>
        <strong>Hvað er stílsíða?</strong>
        </summary>

        Stílsíða er skjal sem stjórnar útliti vefsíðu.  Utanáliggjandi stílsíður eru sérstakar skrár sem eru tengdar HTML síðunni.

        </details>
        <details>
        <summary>
        <strong>Hvað er CSS?</strong>
        </summary>

        CSS er forritunarmál sem stjórnar því hvernig innihald vefs birtist.  Það notar sett af reglum til að stýra útliti vefsíðu.  Hvert sett af reglum hefur veljara (selector), sem velur þær einingar á síðunni sem stjórnast af reglunum, og sjálfar reglurnar, sem segja til um hvernig einingarnar skuli birtast.   Hver regla samanstendur af eiginleika (property) og gildi (value) fyrir eiginleikann.
        <br/><br/>
        Hér er dæmi um reglusett sem lætur textann í `h2` tögum fá bláan lit og skrifstafi:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }</pre>

        Í þessu dæmi er `h2` veljarinn, `color` og `font-family` eru eiginleikar og `blue` og `cursive` eru gildi fyrir þá eiginleika.

        </details>

        </details>
        </div>

        # Stilling texta

        -   Finndu "text-align" eiginleikann í efnisgreinartaginu.
        -   Breyttu stillingu textans.
            -   Valkostir eru "left", "right", og "center"
      CSD U2 un_ordered lists: "# Að samein lista\n\n<div class=\"no-pullthrough\"
        style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>Tvær
        tegundir lista</strong>\n</summary>\nHTML hefur tvær tegundir lista: raðaða
        (ordered) og óraðaða (unordered).\n</details>\n<details>\n<summary>\n<strong>Hvað
        er óraðaður listi?</strong>\n</summary>\n\nÓraðaður listi inniheldur áherslumerkt
        (fremur en tölusett) atriði.\n<br /><br />Óraðaður listi er afmarkaður með
        taginu \\<ul> . Það er skammstöfun á enska heitinu <strong>U</strong>nordered
        <strong>L</strong>ist. Hvert atriði í listanum er afmarkað með taginu \\<li>.
        Þetta er aftur skammstöfun fyrir enska heitið <strong>L</strong>ist <strong>I</strong>tem.
        Atriði í lista er dæmi um \"barneiningu\" (child element), sem þýðir að það
        er notað innan í annarri einingu sem er þá \"foreldriseining\" þess (parent
        element), í þessu tilfelli óraðaði listinn (\\<ul>).\n\n</details>\n\n<details>\n<summary>\n<strong>Hvernig
        bý ég til óraðaðan lista?</strong>\n</summary>\n\nÓraðaður listi er búinn
        til í tveimur áföngum: fyrst er listinn skilgreindur og svo er bætt í hann
        atriðum. Fyrst eru skrifuð tögin fyrir óraðaðan lista `<ul></ul>`. Síðan eru
        atriði listans sett  **innan í** tag listans. Hvert atriði er afmarkað með
        tögunum `<li></li>` og efni atriðisins skrifað innan í þau.\n<br /><br />\nÞað
        getur verið hjálplegt að hafa \\<li> inndregin miðað við  \\<ul> tagið svo
        að það sé greinilegt að þau tilheyri því.\n\n</details>\n\n<details>\n<summary>\n<strong>Hvað
        er raðaður listi?</strong>\n</summary>\n\nRaðaður listi (ordered list) er
        listi með tölusettum atriðum.\n<br /><br />\nRaðaður listi hefur tagið `<ol>`.
        Það er skammstöfun á enska heitinu  <strong>O</strong>rdered <strong>L</strong>ist.
        Hvert atriði í listanum er afmarkað með taginu \\<li>. Þetta er aftur skammstöfun
        fyrir enska heitið <strong>L</strong>ist <strong>I</strong>tem. Atriði í lista
        er \"barneining\" (child element), sem þýðir að það er notað innan í annarri
        einingu sem er þá \"foreldriseining\" þess (parent element), í þessu tilfelli
        raðaði listinn (\\<ol>).\n\n</details>\n\n<details>\n<summary>\n<strong>Hvernig
        bý ég til raðaðan lista?</strong>\n</summary>\n\nRaðaður listi er búinn til
        í tveimur áföngum: fyrst er listinn skilgreindur og svo er bætt í hann atriðum.
        Fyrst eru skrifuð tögin fyrir raðaðan lista `<ol></ol>`. Síðan eru atriði
        listans sett  **innan í** tag listans. Hvert atriði er afmarkað með tögunum
        `<li></li>` og efni atriðisins skrifað innan í þau.\n<br /><br />\nÞað getur
        verið hjálplegt að hafa \\<li> inndregin miðað við  \\<ol> tagið svo að það
        sé greinilegt að þau tilheyri því.\n\n</details>\n\n<details>\n<summary>\n<strong>Sýndu
        mér kóða sem virkar.</strong>\n</summary>\n\n<table border=\"1\">\n<tr>\n<td>Dæmi</td>\n<td>Útkoma</td>\n</tr>\n<tr>\n<td><pre>
        &lt;ul&gt; <br>   &lt;li&gt;Red &lt;/li&gt; <br>   &lt;li&gt;Green &lt;/li&gt;
        <br>   &lt;li&gt;Blue&lt;/li&gt; <br> &lt;/ul&gt; </pre></td>\n<td><img src=\"https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32
        PM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n<table border=\"1\">\n<tr>\n<td>Dæmi</td>\n<td>Útkoma</td>\n</tr>\n<tr>\n<td><pre>
        &lt;ol&gt; <br>   &lt;li&gt;Step 1&lt;/li&gt; <br>   &lt;li&gt;Step 2&lt;/li&gt;
        <br>   &lt;li&gt;Step 3&lt;/li&gt; <br> &lt;/ol&gt; </pre></td>\n<td><img
        src=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04
        PM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n</details>\n</div>\n\nÞessi
        síða ætti að hafa bæði óraðaðan og raðaðan lista.\n\n# Gerðu þetta\n\n-   Notaðu
        listatögin til að stilla efninu upp í tvo lista eins og sýnt er fyrir neðan.\n\n_Athugaðu:
        Það eru ENGAR TÖLUR settar í kóðann._ \n\n![](https://images.code.org/c9c002b39893ab09e8bc6be4b20ad7c2-image-1553714125509.png)"
      CSD U2 unordered list: |-
        # Unordered Lists

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What are the two types of lists?</strong>
        </summary>
         There are two types of lists in HTML, ordered and unordered lists.
        </details>
        <details>
        <summary><strong>What is an unordered list?</strong>
        </summary>

        An unordered list is just a set of bulleted items.
        <br /><br />An unordered list element has the tag \<ul> . This is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist. Each item in the list is marked by a list item element \<li>. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element, which means that it goes inside of its parent element, the unordered list (\<ul>).

        </details>

        <details>
        <summary><strong>How do I make an unordered list?</strong>
        </summary>

        Making an unordered list has two steps: making the list and adding the list items.  To make the unordered list, write the unordered list tags `<ul></ul>`.  Next, add your list items **inside** the unordered list tags.  To make each list item, use the list item tags `<li></li>` and write the list item inside the tags.

        It can be helpful to indent your \<li> tags so it's clear they are contained in the \<ul> tag.

        </details>

        <details>
        <summary><strong>Show me working code.</strong>
        </summary>

        <table border="1">
        <tr>
        <td>Example</td>
        <td>Result</td>
        </tr>
        <tr>
        <td><pre> &lt;ul&gt; <br>   &lt;li&gt;Red &lt;/li&gt; <br>   &lt;li&gt;Green &lt;/li&gt; <br>   &lt;li&gt;Blue&lt;/li&gt; <br> &lt;/ul&gt; </pre></td>
        <td><img src="https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32 PM.png" style="width:200px"></td>
        </tr>
        </table>

        </details>
        </div>

        This page should have an unordered list, but it's missing the list tags.

        # Do This

        -   Use the `<ul>` and `<li>` tags to structure the content into an unordered list like the picture below.

        ![](<https://images.code.org/64581a90765cd2d53b6c5235c48f2855-image-1493238358294.25.04 PM.png>)
      CSD U2 unordered list_2018: |-
        # Unordered Lists

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What are the two types of lists?</strong>
        </summary>
        There are two types of lists in HTML, ordered and unordered lists.

        </details>
        <details>
        <summary>
        <strong>What is an unordered list?</strong>
        </summary>

        An unordered list is just a set of bulleted items.
        <br /><br />An unordered list element has the tag \<ul> . This is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist. Each item in the list is marked by a list item element \<li>. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element, which means that it goes inside of its parent element, the unordered list (\<ul>).

        </details>

        <details>
        <summary>
        <strong>How do I make an unordered list?</strong>
        </summary>

        Making an unordered list has two steps: making the list and adding the list items.  To make the unordered list, write the unordered list tags `<ul></ul>`.  Next, add your list items **inside** the unordered list tags.  To make each list item, use the list item tags `<li></li>` and write the list item inside the tags.
        <br /><br />
        It can be helpful to indent your \<li> tags so it's clear they are contained in the \<ul> tag.

        </details>

        <details>
        <summary>
        <strong>Show me working code.</strong>
        </summary>

        <table border="1">
        <tr>
        <td>Example</td>
        <td>Result</td>
        </tr>
        <tr>
        <td><pre> &lt;ul&gt; <br>   &lt;li&gt;Red &lt;/li&gt; <br>   &lt;li&gt;Green &lt;/li&gt; <br>   &lt;li&gt;Blue&lt;/li&gt; <br> &lt;/ul&gt; </pre></td>
        <td><img src="https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32 PM.png" style="width:200px"></td>
        </tr>
        </table>

        </details>
        </div>

        This page should have an unordered list, but it's missing the list tags.

        # Do This

        -   Use the `<ul>` and `<li>` tags to structure the content into an unordered list like the picture below.

        ![](<https://images.code.org/64581a90765cd2d53b6c5235c48f2855-image-1493238358294.25.04 PM.png>)
      CSD U2 unordered list_2019: |-
        # Óraðaðir listar

        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>Tvær tegundir lista</strong>
        </summary>
        HTML hefur tvær tegundir lista: raðaða (ordered) og óraðaða (unordered).

        </details>
        <details>
        <summary>
        <strong>Hvað er óraðaður listi?</strong>
        </summary>

        Óraðaður listi inniheldur áherslumerkt (fremur en tölusett) atriði.
        <br /><br />Óraðaður listi er afmarkaður með taginu \<ul> . Það er skammstöfun á enska heitinu <strong>U</strong>nordered <strong>L</strong>ist. Hvert atriði í listanum er afmarkað með taginu \<li>. Þetta er aftur skammstöfun fyrir enska heitið <strong>L</strong>ist <strong>I</strong>tem. Atriði í lista er dæmi um "barneiningu" (child element), sem þýðir að það er notað innan í annarri einingu sem er þá "foreldriseining" þess (parent element), í þessu tilfelli óraðaði listinn (\<ul>).

        </details>

        <details>
        <summary>
        <strong>Hvernig bý ég til óraðaðan lista?</strong>
        </summary>

        Óraðaður listi er búinn til í tveimur áföngum: fyrst er listinn skilgreindur og svo er bætt í hann atriðum. Fyrst eru skrifuð tögin fyrir óraðaðan lista `<ul></ul>`. Síðan eru atriði listans sett  **innan í** tag listans. Hvert atriði er afmarkað með tögunum `<li></li>` og efni atriðisins skrifað innan í þau.
        <br /><br />
        Það getur verið hjálplegt að hafa \<li> inndregin miðað við  \<ul> tagið svo að það sé greinilegt að þau tilheyri því.

        </details>

        <details>
        <summary>
        <strong>Sýndu mér kóða sem virkar.</strong>
        </summary>

        <table border="1">
        <tr>
        <td>Example</td>
        <td>Result</td>
        </tr>
        <tr>
        <td><pre> &lt;ul&gt; <br>   &lt;li&gt;Rautt &lt;/li&gt; <br>   &lt;li&gt;Grænt &lt;/li&gt; <br>   &lt;li&gt;Blátt&lt;/li&gt; <br> &lt;/ul&gt; </pre></td>
        <td><img src="https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32 PM.png" style="width:200px"></td>
        </tr>
        </table>

        </details>
        </div>

        Þessi síða ætti að hafa óraðaðan lista en það vantar listatögin.

        # Gerðu þetta

        -   Notaðu `<ul>` og `<li>` tögin til að stilla efninu upp í óraðaðan lista eins og myndin fyrir neðan sýnir.

        ![](<https://images.code.org/64581a90765cd2d53b6c5235c48f2855-image-1493238358294.25.04 PM.png>)
      CSD U2 upload images: |-
        # Hlaða upp myndum

        Næst þarft þú að hlaða myndunum upp frá tölvunni og inn í verkefnið þitt.

        # Gerðu þetta

        -   Hladdu niður öllum myndum sem þú vilt nota í tölvuna þina. <a href="/s/csd2/stage/7/puzzle/5" target="_new">Kennslustund 7 þraut 5</a> er með hjálp ef þú þarft.
        -   Gættu þess að þú hafir leyfi til að nota þessar myndir.
        -   Skrifaðu niður allar eignunarupplýsingar sem þú þarft að hafa.
        -   Hladdu öllum myndunum upp í verkefnið þitt.\
            <a href="/s/csd2/stage/7/puzzle/5" target="_new">Kennslustund 7 þraut 5</a> er með hjálp ef þú þarft.
      CSD U2 upload images_2018: "# Hlaða upp myndum\n\nNæst þarft þú að hlaða myndunum
        upp frá tölvunni og inn í verkefnið þitt.\\\r\n\n# Gerðu þetta\n\n-   Hladdu
        niður öllum myndum sem þú vilt nota í tölvuna þina. <a href=\"../../../stage/7/puzzle/5\"
        target=\"_new\">Kennslustund 7 þraut\n    5]</a> er með hjálp ef þú þarft.\n-
        \  Gættu þess að þú hafir leyfi til að nota þessar myndir.\n-   Skrifaðu niður
        allar eignunarupplýsingar sem þú þarft að hafa.\n-   Hladdu öllum myndunum
        upp í verkefnið þitt.   <a href=\"../../../stage/7/puzzle/5\" target=\"_new\">Kennslustund
        7 þraut 5</a> er með hjálp ef þú þarft."
      CSD U2 upload images_2019: "# Hlaða upp myndum\n\nNæst þarft þú að hlaða myndunum
        upp frá tölvunni og inn í verkefnið þitt.\\\r\n\n# Gerðu þetta\n\n-   Hladdu
        niður öllum myndum sem þú vilt nota í tölvuna þina. <a href=\"../../../stage/7/puzzle/5\"
        target=\"_new\">Kennslustund 7 þraut\n    5]</a> er með hjálp ef þú þarft.\n-
        \  Gættu þess að þú hafir leyfi til að nota þessar myndir.\n-   Skrifaðu niður
        allar eignunarupplýsingar sem þú þarft að hafa.\n-   Hladdu öllum myndunum
        upp í verkefnið þitt.   <a href=\"../../../stage/7/puzzle/5\" target=\"_new\">Kennslustund
        7 þraut 5</a> er með hjálp ef þú þarft."
      CSD U3 - Booleans Video: "# Boolean Expressions Video"
      CSD U3 - Booleans Video_2019: |-
        ## Spurningar til að hugleiða

        -   Hvað er Boole yrðing?
        -   Hvers konar yrðing mundi gefa útkomuna "true"?
        -   Hvers konar yrðing mundi gefa útkomuna "false"?
      CSD U3 - Conditionals Video_2019: |-
        ## Spurning til að hugleiða

        -   Hvenær getur þú ímyndað þér að þú þyrftir að nota "if/else" yrðingu?
      CSD U3 - Simple Counter Predict: "# The Counter Pattern\n\nThis pattern is one
        of the most important ones in all of programming. \n\n![](<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56
        PM.png>)\n\nIt is used to increase the value of a variable by 1. You might
        call it the **counter pattern** since it can be used to make a variable that
        counts up. You'll use this pattern a lot, especially with the draw loop. Let's
        see what that looks like.\n\n# Do This\n\nThis program creates a variable
        `counter` and then uses the **counter pattern** to make it count up. When
        you run the program what do you think you'll see on the screen?\n\n-   **Read
        the program** and make a prediction of what the output will be.\n-   **Run
        the program** to check your prediction.\n-   **Discuss with a neighbor**.
        Can you explain what you observed?"
      CSD U3 - Simple Counter Predict_2018: "# The Counter Pattern\n\nThis pattern
        is one of the most important ones in all of programming. \n\n![](<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56
        PM.png>)\n\nIt is used to increase the value of a variable by 1. You might
        call it the **counter pattern** since it can be used to make a variable that
        counts up. You'll use this pattern a lot, especially with the draw loop. Let's
        see what that looks like.\n\n# Do This\n\nThis program creates a variable
        `counter` and then uses the **counter pattern** to make it count up. When
        you run the program what do you think you'll see on the screen?\n\n-   **Read
        the program** and make a prediction of what the output will be.\n-   **Run
        the program** to check your prediction.\n-   **Discuss with a neighbor**.
        Can you explain what you observed?"
      CSD U3 - Simple Counter Predict_2019: "# The Counter Pattern\n\nThis pattern
        is one of the most important ones in all of programming. \n\n![](<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56
        PM.png>)\n\nIt is used to increase the value of a variable by 1. You might
        call it the **counter pattern** since it can be used to make a variable that
        counts up. You'll use this pattern a lot, especially with the draw loop. Let's
        see what that looks like.\n\n# Do This\n\nThis program creates a variable
        `counter` and then uses the **counter pattern** to make it count up. When
        you run the program what do you think you'll see on the screen?\n\n-   **Read
        the program** and make a prediction of what the output will be.\n-   **Run
        the program** to check your prediction.\n-   **Discuss with a neighbor**.
        Can you explain what you observed?"
      CSD U3 - complex - key up and down: |-
        # Responding to a Single Click

        Earlier we learned that `keyWentDown` and `keyWentUp` can be used to respond to a keypress a single time. The blocks `mouseWentUp` and `mouseWentDown` allow you to do that for the mouse!

        # Do This

        Let's make a simple game that counts how many times you've clicked. We've already provided a variable `clicks` that you can use to track how many times the user has clicked.

        -   Add a conditional that checks if the mouse went down.
        -   Inside your conditional, add to the `clicks` variable.

        _Challenge: Can you add a sprite that responds to `mouseWentDown` as well? Add an image of your choice and increase the sprite's size each time the mouse is clicked._
      CSD U3 - complex - key up and down_2018: |-
        # Responding to a Single Click

        Earlier we learned that `keyWentDown` and `keyWentUp` can be used to respond to a keypress a single time. The blocks `mouseWentUp` and `mouseWentDown` allow you to do that for the mouse!

        # Do This

        Let's make a simple game that counts how many times you've clicked. We've already provided a variable `clicks` that you can use to track how many times the user has clicked.

        -   Add a conditional that checks if the mouse went down.
        -   Inside your conditional, add to the `clicks` variable.

        _Challenge: Can you add a sprite that responds to `mouseWentDown` as well? Add an image of your choice and increase the sprite's size each time the mouse is clicked._
      CSD U3 - complex - key up and down_2019: |-
        # Responding to a Single Click

        Earlier we learned that `keyWentDown` and `keyWentUp` can be used to respond to a keypress a single time. The blocks `mouseWentUp` and `mouseWentDown` allow you to do that for the mouse!

        # Do This

        Let's make a simple game that counts how many times you've clicked. We've already provided a variable `clicks` that you can use to track how many times the user has clicked.

        -   Add a conditional that checks if the mouse went down.
        -   Inside your conditional, add to the `clicks` variable.

        _Challenge: Can you add a sprite that responds to `mouseWentDown` as well? Add an image of your choice and increase the sprite's size each time the mouse is clicked._
      CSD U3 - complex - mouse down: "# Mouse Clicks\n\nKeypresses are great, but
        sometimes you want users to interact through mouse clicks. There's a new block
        called `mouseDown` which, similar to `keyDown`, checks whether the left or
        right mouse buttons is being pressed. If you are using a computer with a mouse
        or trackpad that has only one button, you'll want to always use `mouseDown(\"left\")`.
        \n\n# Do This\n\nHere's a program that drops a balloon down the screen - you're
        going to program the mouse button to raise the balloon back up while it's
        clicked.\n\n-   Add an if else statment that checks for `mouseDown`.\n-   Inside
        the conditional, move the balloon up one pixel if the mouse is down. Otherwise,
        move the balloon down.\n\n_Hint: You'll need to move the code that drops the
        balloon for this to work - you only want it to run if `mouseDown` is `false`_\n\n_Challenge:
        Can you make the balloon drift randomly to the left and right as it rises
        and falls?_"
      CSD U3 - complex - mouse down_2018: "# Mouse Clicks\n\nKeypresses are great,
        but sometimes you want users to interact through mouse clicks. There's a new
        block called `mouseDown` which, similar to `keyDown`, checks whether the left
        or right mouse buttons is being pressed. If you are using a computer with
        a mouse or trackpad that has only one button, you'll want to always use `mouseDown(\"left\")`.
        \n\n# Do This\n\nHere's a program that drops a balloon down the screen - you're
        going to program the mouse button to raise the balloon back up while it's
        clicked.\n\n-   Add an if else statment that checks for `mouseDown`.\n-   Inside
        the conditional, move the balloon up one pixel if the mouse is down. Otherwise,
        move the balloon down.\n\n_Hint: You'll need to move the code that drops the
        balloon for this to work - you only want it to run if `mouseDown` is `false`_\n\n_Challenge:
        Can you make the balloon drift randomly to the left and right as it rises
        and falls?_"
      CSD U3 - complex - mouse down_2019: "# Mouse Clicks\n\nKeypresses are great,
        but sometimes you want users to interact through mouse clicks. There's a new
        block called `mouseDown` which, similar to `keyDown`, checks whether the left
        or right mouse buttons is being pressed. If you are using a computer with
        a mouse or trackpad that has only one button, you'll want to always use `mouseDown(\"left\")`.
        \n\n# Do This\n\nHere's a program that drops a balloon down the screen - you're
        going to program the mouse button to raise the balloon back up while it's
        clicked.\n\n-   Add an if else statment that checks for `mouseDown`.\n-   Inside
        the conditional, move the balloon up one pixel if the mouse is down. Otherwise,
        move the balloon down.\n\n_Hint: You'll need to move the code that drops the
        balloon for this to work - you only want it to run if `mouseDown` is `false`_\n\n_Challenge:
        Can you make the balloon drift randomly to the left and right as it rises
        and falls?_"
      CSD U3 - complex - mouse move: |-
        # mouseDidMove

        We can also use Boolean expressions to check whether or not the mouse has moved. The `mouseDidMove` block will return `false` if the mouse is still, but `true` if the mouse has been moving.

        # Do This

        Right now, this program just displays a salt shaker sprite. You'll need to use `mouseDidMove` so that you can "shake" the salt by moving the mouse back and forth.

        -   Add a conditional that checks if `mouseDidMove`.
        -   If the conditional is true, rotate the salt sprite randomly to the left or right.

        _Challenge: Can you keep track of how many times the `mouseDidMove` shakes the salt, and then rotate it right side up after 100 shakes?_
      CSD U3 - complex - mouse move_2018: |-
        # mouseDidMove

        We can also use Boolean expressions to check whether or not the mouse has moved. The `mouseDidMove` block will return `false` if the mouse is still, but `true` if the mouse has been moving.

        # Do This

        Right now, this program just displays a salt shaker sprite. You'll need to use `mouseDidMove` so that you can "shake" the salt by moving the mouse back and forth.

        -   Add a conditional that checks if `mouseDidMove`.
        -   If the conditional is true, rotate the salt sprite randomly to the left or right.

        _Challenge: Can you keep track of how many times the `mouseDidMove` shakes the salt, and then rotate it right side up after 100 shakes?_
      CSD U3 - complex - mouse move_2019: |-
        # mouseDidMove

        We can also use Boolean expressions to check whether or not the mouse has moved. The `mouseDidMove` block will return `false` if the mouse is still, but `true` if the mouse has been moving.

        # Do This

        Right now, this program just displays a salt shaker sprite. You'll need to use `mouseDidMove` so that you can "shake" the salt by moving the mouse back and forth.

        -   Add a conditional that checks if `mouseDidMove`.
        -   If the conditional is true, rotate the salt sprite randomly to the left or right.

        _Challenge: Can you keep track of how many times the `mouseDidMove` shakes the salt, and then rotate it right side up after 100 shakes?_
      CSD U3 - conditionals - first conditional: "<img src=\"https://images.code.org/36c5543076622c96f7dabce8bc37f995-image-1468425774455.54.03
        PM.png\" style=\"float:right;width:100px\">\n\n# If Statement\n\nThe Boolean
        expressions you used earlier allow us to ask questions, but in order to _respond
        to those questions_, we need to use an `if` statement.\n\n`if` statements
        usually go inside your draw loop because we want to check them each time the
        loop runs. \n\n# Do This\n\nThe race car program you wrote earlier is loaded
        here for you.\n\n-   Add an `if` statement after you update the position of
        the race car.\n-   Move the Boolean expression from the console.log statement
        to the condition of the if statement.\n-   Inside the `if` statement add a
        statement to draw text on the screen to say \"Winner\"."
      CSD U3 - conditionals - first conditional 2: |-
        <img src="https://images.code.org/abd459d8d1477ac2f582417f4334cdaa-image-1466107090414.gif" style="width:200px;float:right">

        # Visible

        Now that you have conditionals and images, sometimes it's useful to hide the image for a while and then show it again. You can do this using the `visible` property. The visible property is a little different from other properties you have seen in the past: It is a Boolean value, either `true` (the sprite is visible) or `false` (the sprite is **not** visible). By default, visible is set to `true`.

        # Do This

        Make the balloon pop when it hits the edge of the game area!

        -   Add an `if` statement that checks to see if the balloon has hit the edge.
            -   Use a watcher on `balloon.scale` to help you out.
        -   Create a pop sprite which uses the "pop" visual in the animation tab.
        -   Set the pop's `visible` property to `false` to start.
        -   Inside the `if` add two statements.
            -   One that sets the `visible` property to hide the balloon sprite.
            -   One that sets the `visible` property to show the pop sprite.
      CSD U3 - conditionals - first conditional 2_2018: |-
        <img src="https://images.code.org/abd459d8d1477ac2f582417f4334cdaa-image-1466107090414.gif" style="width:200px;float:right">

        # Visible

        Sometimes it's useful to hide the image for a while and then show it again. You can do this using the `visible` property. The visible property is a little different from other properties you have seen in the past: It is a Boolean value, either `true` (the sprite is visible) or `false` (the sprite is **not** visible). By default, visible is set to `true`.

        # Do This

        Make the balloon pop when it hits the edge of the game area!

        -   Add a conditional that checks to see whether the balloon has hit the edge.
            -   Use a watcher on `balloon.scale` to help you out.
        -   Create a pop sprite which uses the "pop" visual in the animation tab.
        -   Use the `visible` property to keep the "pop" sprite hidden at the beginning.
        -   Inside the `if` add two statements.
            -   One that sets the `visible` property to hide the balloon sprite.
            -   One that sets the `visible` property to show the pop sprite.
      CSD U3 - conditionals - first conditional 2_2018_2019: |-
        <img src="https://images.code.org/abd459d8d1477ac2f582417f4334cdaa-image-1466107090414.gif" style="width:200px;float:right">

        # Visible

        Sometimes it's useful to hide the image for a while and then show it again. You can do this using the `visible` property. The visible property is a little different from other properties you have seen in the past: It is a Boolean value, either `true` (the sprite is visible) or `false` (the sprite is **not** visible). By default, visible is set to `true`.

        # Do This

        Make the balloon pop when it hits the edge of the game area!

        -   Add a conditional that checks to see whether the balloon has hit the edge.
            -   Use a watcher on `balloon.scale` to help you out.
        -   Create a pop sprite which uses the "pop" visual in the animation tab.
        -   Use the `visible` property to keep the "pop" sprite hidden at the beginning.
        -   Inside the `if` add two statements.
            -   One that sets the `visible` property to hide the balloon sprite.
            -   One that sets the `visible` property to show the pop sprite.
      CSD U3 - conditionals - first conditional_2018: "<img src=\"https://images.code.org/36c5543076622c96f7dabce8bc37f995-image-1468425774455.54.03
        PM.png\" style=\"float:right;width:100px\">\n\n# If Statement\n\nThe Boolean
        expressions you used earlier allow us to ask questions, but in order to _respond
        to those questions_, we need to use an `if` statement.\n\n`if` statements
        usually go inside your draw loop because we want to check them each time the
        loop runs. \n\n# Do This\n\nThe race car program you wrote earlier is loaded
        here for you.\n\n-   Add an `if` statement after you update the position of
        the race car.\n-   Move the Boolean expression from the console.log statement
        to the condition of the if statement.\n-   Inside the `if` statement add a
        statement to draw text on the screen to say \"Winner\"."
      CSD U3 - conditionals - first conditional_2019: "<img src=\"https://images.code.org/36c5543076622c96f7dabce8bc37f995-image-1468425774455.54.03
        PM.png\" style=\"float:right;width:100px\">\n\n# If Statement\n\nThe Boolean
        expressions you used earlier allow us to ask questions, but in order to _respond
        to those questions_, we need to use an `if` statement.\n\n`if` statements
        usually go inside your draw loop because we want to check them each time the
        loop runs. \n\n# Do This\n\nThe race car program you wrote earlier is loaded
        here for you.\n\n-   Add an `if` statement after you update the position of
        the race car.\n-   Move the Boolean expression from the console.log statement
        to the condition of the if statement.\n-   Inside the `if` statement, add
        a statement to draw text on the screen to say \"Winner\"."
      CSD U3 - conditionals - transition: |-
        # Booleans

        In the past few levels, we have been comparing values of sprites to find out whether something is true or false. Let's start putting that in the context of an animation.

        # Do This

        The program draws a race car and a finish line. We are going to figure out when the race car crosses the finish line. The sprites have all been set up for you.

        -   Add a `console.log` statement inside the draw loop. ( [Show me where](#triggercallout=callout) )
        -   Add an Boolean expression inside the `console.log` that asks "Is the x position of the race car less than the x position of the finish line?"
        -   Look at the output of the program as the car moves. When does the output change? Why?
      CSD U3 - conditionals - transition_2018: |-
        # Booleans

        In the past few levels, we have been comparing values of sprites to find out whether something is true or false. Let's start putting that in the context of an animation.

        # Do This

        The program draws a race car and a finish line. We are going to figure out when the race car crosses the finish line. The sprites have all been set up for you.

        -   Add a `console.log` statement inside the draw loop. ( [Show me where](#triggercallout=callout) )
        -   Add an Boolean expression inside the `console.log` that asks "Is the x position of the race car less than the x position of the finish line?"
        -   Look at the output of the program as the car moves. When does the output change? Why?
      CSD U3 - conditionals - transition_2019: |-
        # Booleans

        In the past few levels, we have been comparing values of sprites to find out whether something is true or false. Let's start putting that in the context of an animation.

        # Do This

        The program draws a race car and a finish line. We are going to figure out when the race car crosses the finish line. The sprites have all been set up for you.

        -   Add a `console.log` statement inside the draw loop. ( [Show me where](#triggercallout=callout) )
        -   Add a Boolean expression inside the `console.log` that asks "Is the x position of the race car less than the x position of the finish line?"
        -   Look at the output of the program as the car moves. When does the output change? Why?
      CSD U3 AnimationsMulti Play Defender: |-
        # Defend Your Cake!

        This is an example of a defender game that you'll build by the end of this lesson. To defend your cake, move the alien with arrow keys to block the lady bugs and push them into the water.

        # Do This

        Turn to a classmate and make a list of the following information.

        -   How many sprites are there in this game. Which are they?
        -   What variables are needed to make this game? What do they store?
        -   If you were to split the code of this game into functions what do you think they would be? What are the major pieces of behavior you'd need to create in your code?
      CSD U3 AnimationsMulti Play Defender_2018: |-
        # Defend Your Cake!

        This is an example of a defender game that you'll build by the end of this lesson. To defend your cake, move the alien with arrow keys to block the lady bugs and push them into the water.

        # Do This

        Turn to a classmate and make a list of the following information.

        -   How many sprites are there in this game. Which are they?
        -   What variables are needed to make this game? What do they store?
        -   If you were to split the code of this game into functions what do you think they would be? What are the major pieces of behavior you'd need to create in your code?
      CSD U3 AnimationsMulti Play Defender_2019: |-
        # Defend Your Cake!

        This is an example of a defender game that you'll build by the end of this lesson. To defend your cake, move the alien with arrow keys to block the lady bugs and push them into the water.

        # Do This

        Turn to a classmate and make a list of the following information.

        -   How many sprites are there in this game. Which are they?
        -   What variables are needed to make this game? What do they store?
        -   If you were to split the code of this game into functions what do you think they would be? What are the major pieces of behavior you'd need to create in your code?
      CSD U3 AnimationsMulti defender animate cake enemies: |-
        # Getting Started: Set Animations

        You should have already reviewed the planning guide for this project. A lot of the work to turn this project guide into a working game has already been started. Based on the project guide you're going to do the rest of this work.

        # Do This

        Before we get started you'll want some better animations for each of your sprites.

        -   In the Animation Tab are animations for each of your sprites. Go look at what they are.
        -   In your code give each sprite its appropriate animation. **Use the ones provided for now** but later you'll be able to go change them.
        -   Head to [Level 4](/s/csd3-2017/stage/20/puzzle/4) if you need help remembering how to do this.
      CSD U3 AnimationsMulti defender animate cake enemies_2018: |-
        # Getting Started: Set Animations

        You should have already reviewed the planning guide for this project. A lot of the work to turn this project guide into a working game has already been started. Based on the project guide you're going to do the rest of this work.

        # Do This

        Before we get started you'll want some better animations for each of your sprites.

        -   In the Animation Tab are animations for each of your sprites. Go look at what they are.
        -   In your code give each sprite its appropriate animation. **Use the ones provided for now** but later you'll be able to go change them.
        -   Head to [Level 4](/s/csd3-2018/stage/20/puzzle/4) if you need help remembering how to do this.
      CSD U3 AnimationsMulti defender animate cake enemies_2019: |-
        # Getting Started: Set Animations

        You should have already reviewed the planning guide for this project. A lot of the work to turn this project guide into a working game has already been started. Based on the project guide you're going to do the rest of this work.

        # Do This

        Before we get started you'll want some better animations for each of your sprites.

        -   In the Animation Tab are animations for each of your sprites. Go look at what they are.
        -   In your code give each sprite its appropriate animation. **Use the ones provided for now** but later you'll be able to go change them.
        -   Head to [Level 4](../../20/puzzle/4) if you need help remembering how to do this.
      CSD U3 AnimationsMulti defender animate player: |-
        # Change Player Animations

        Right now your player is always facing the same direction. You can make things look a lot more realistic by switching between animations. Your player should switch between a left-facing and right-facing animation depending on which key was last pressed. Remember, you can quickly copy and edit animations inside the Animation Tab.

        # Do This

        -   Inside the Animation Tab copy the animation of your player sprite.
        -   Flip each frame of the new animation so that the sprite is facing in the opposite direction.
        -   Rename your new animation.
        -   Use the `setAnimation` command inside the `movePlayer` function so that the player changes the direction it is facing when the "left" and "right" arrows are pressed.
      CSD U3 AnimationsMulti defender animate player_2018: |-
        # Change Player Animations

        Right now your player is always facing the same direction. You can make things look a lot more realistic by switching between animations. Your player should switch between a left-facing and right-facing animation depending on which key was last pressed. Remember, you can quickly copy and edit animations inside the Animation Tab.

        # Do This

        -   Inside the Animation Tab copy the animation of your player sprite.
        -   Flip each frame of the new animation so that the sprite is facing in the opposite direction.
        -   Rename your new animation.
        -   Use the `setAnimation` command inside the `movePlayer` function so that the player changes the direction it is facing when the "left" and "right" arrows are pressed.
      CSD U3 AnimationsMulti defender animate player_2019: |-
        # Change Player Animations

        Right now your player is always facing the same direction. You can make things look a lot more realistic by switching between animations. Your player should switch between a left-facing and right-facing animation depending on which key was last pressed. Remember, you can quickly copy and edit animations inside the Animation Tab.

        # Do This

        -   Inside the Animation Tab copy the animation of your player sprite.
        -   Flip each frame of the new animation so that the sprite is facing in the opposite direction.
        -   Rename your new animation.
        -   Use the `setAnimation` command inside the `movePlayer` function so that the player changes the direction it is facing when the "left" and "right" arrows are pressed.
      CSD U3 AnimationsMulti defender create set enemies: |-
        # Creating Functions

        <img src="https://images.code.org/126982cbde9ae62e9a77ca1e53c92024-image-1476291567280.58.00 AM.png" style="float:right; height:90px">

        Your program now includes code in two places to set the enemies on the left side of the screen at a random y location. You can create functions to reset each of your two enemies to remove repetitions from your program. This will make your program easier to read, allow you to change it more easily, and allow you to quickly reset your sprites at other points in your program if you need to.

        # Do This

        <img src="https://images.code.org/01a2f4d9725162482fda9f74734c992c-image-1476461412974.09.52 AM.png" style="
        float:right; height:70px">

        -   At the bottom of your program create two new functions, `setEnemy1` and `setEnemy2`.
        -   Inside each of these functions place the code that sets the enemies on the left side of the screen and gives them a random y position.
        -   Wherever the code for `setEnemy1` and `setEnemy2` appears in your program replace them with a call to the functions you just created.
      CSD U3 AnimationsMulti defender create set enemies_2018: |-
        # Creating Functions

        <img src="https://images.code.org/126982cbde9ae62e9a77ca1e53c92024-image-1476291567280.58.00 AM.png" style="float:right; height:90px">

        Your program now includes code in two places to set the enemies on the left side of the screen at a random y location. You can create functions to reset each of your two enemies to remove repetitions from your program. This will make your program easier to read, allow you to change it more easily, and allow you to quickly reset your sprites at other points in your program if you need to.

        # Do This

        <img src="https://images.code.org/01a2f4d9725162482fda9f74734c992c-image-1476461412974.09.52 AM.png" style="
        float:right; height:70px">

        -   At the bottom of your program create two new functions, `setEnemy1` and `setEnemy2`.
        -   Inside each of these functions place the code that sets the enemies on the left side of the screen and gives them a random y position.
        -   Wherever the code for `setEnemy1` and `setEnemy2` appears in your program replace them with a call to the functions you just created.
      CSD U3 AnimationsMulti defender create set enemies_2019: |-
        # Creating Functions

        <img src="https://images.code.org/126982cbde9ae62e9a77ca1e53c92024-image-1476291567280.58.00 AM.png" style="float:right; height:90px">

        Your program now includes code in two places to set the enemies on the left side of the screen at a random y location. You can create functions to reset each of your two enemies to remove repetitions from your program. This will make your program easier to read, allow you to change it more easily, and allow you to quickly reset your sprites at other points in your program if you need to.

        # Do This

        <img src="https://images.code.org/01a2f4d9725162482fda9f74734c992c-image-1476461412974.09.52 AM.png" style="
        float:right; height:70px">

        -   At the bottom of your program create two new functions, `setEnemy1` and `setEnemy2`.
        -   Inside each of these functions place the code that sets the enemies on the left side of the screen and gives them a random y position.
        -   Wherever the code for `setEnemy1` and `setEnemy2` appears in your program replace them with a call to the functions you just created.
      CSD U3 AnimationsMulti defender displace enemies: |-
        # Displace Enemies

        It's time to write code for some more sprite interactions. Your player sprite should displace the enemy sprites.

        # Do This

        For this level you'll be writing code inside the `displaceEnemies` function.

        -   Write code that makes player displace both enemy sprites.
        -   Test your program to make sure your player is displacing enemies but they keep moving right after the player moves away.

        _Hint: You can use `sprite.debug` to see your sprites' colliders if you need to debug your program._
      CSD U3 AnimationsMulti defender displace enemies_2018: |-
        # Displace Enemies

        It's time to write code for some more sprite interactions. Your player sprite should displace the enemy sprites.

        # Do This

        For this level you'll be writing code inside the `displaceEnemies` function.

        -   Write code that makes player displace both enemy sprites.
        -   Test your program to make sure your player is displacing enemies but they keep moving right after the player moves away.

        _Hint: You can use `sprite.debug` to see your sprites' colliders if you need to debug your program._
      CSD U3 AnimationsMulti defender displace enemies_2019: |-
        # Displace Enemies

        It's time to write code for some more sprite interactions. Your player sprite should displace the enemy sprites.

        # Do This

        For this level you'll be writing code inside the `displaceEnemies` function.

        -   Write code that makes player displace both enemy sprites.
        -   Test your program to make sure your player is displacing enemies but they keep moving right after the player moves away.

        _Hint: You can use `sprite.debug` to see your sprites' colliders if you need to debug your program._
      CSD U3 AnimationsMulti defender enemies move: |-
        # Moving The Enemies

        It's time to start writing the code that will move your sprites. To begin you'll need to get your enemy sprites to a random position and moving across the screen.

        # Do This

        At the top of your program, after you create each enemy sprite, write code that will move it to the correct position and give it the correct velocity.

        -   Use `sprite.x` to set the x position to 0.
        -   Use `sprite.y` to set the y position should be a random number between 150 and 250.
        -   Use `sprite.velocityX` to set the x velocity to 2.

        Test your program. Your enemy sprites should now be moving across the bridge.
      CSD U3 AnimationsMulti defender enemies move_2018: |-
        # Moving The Enemies

        It's time to start writing the code that will move your sprites. To begin you'll need to get your enemy sprites to a random position and moving across the screen.

        # Do This

        At the top of your program, after you create each enemy sprite, write code that will move it to the correct position and give it the correct velocity.

        -   Use `sprite.x` to set the x position to 0.
        -   Use `sprite.y` to set the y position should be a random number between 150 and 250.
        -   Use `sprite.velocityX` to set the x velocity to 2.

        Test your program. Your enemy sprites should now be moving across the bridge.
      CSD U3 AnimationsMulti defender enemies move_2019: |-
        # Moving The Enemies

        It's time to start writing the code that will move your sprites. To begin you'll need to get your enemy sprites to a random position and moving across the screen.

        # Do This

        At the top of your program, after you create each enemy sprite, write code that will move it to the correct position and give it the correct velocity.

        -   Use `sprite.x` to set the x position to 0.
        -   Use `sprite.y` to set the y position should be a random number between 150 and 250.
        -   Use `sprite.velocityX` to set the x velocity to 2.

        Test your program. Your enemy sprites should now be moving across the bridge.
      CSD U3 AnimationsMulti defender enemies touch cake: |-
        # Touching the Cake

        If the enemies get all the way across to the cake you should place them back at the left side of the screen and decrease the score. To start you'll **write code for only one of your enemies**.

        # Do This

        Inside the `enemiesTouchCake` function you'll need to write code that checks when a ladybug is touching the cake, resets its position, and changes the score.

        -   Use an `if` and `isTouching` to detect whether enemy1 has touched the cake.
        -   Inside your `if` block place code that:
            -   sets enemy1's x position back to 0.
            -   sets enemy1's y position to a random number between 150 and 250.
            -   uses the counter pattern to decrease the score by 2.

        (_Hint: You can reuse some code you already wrote_)

        Test your code. One of your ladybugs should now reset when it gets across to the cake, and the score should go down by 2.
      CSD U3 AnimationsMulti defender enemies touch cake sprite2: |-
        # Touching the Cake: Second Ladybug

        Your first enemy sprite should now be resetting when it gets to the cake. Now you'll want the other ladybug to reset as well.

        # Do This

        Inside the `enemiesTouchCake` function you should have written code that resets `enemy1`.

        -   Copy the entire if-statement you wrote in the last level (Ctrl-C).
        -   Paste the code inside of the `enemiesTouchCake` function, just below the last one (Ctrl-V).
        -   Change the name of the sprite in that code from `enemy1` to `enemy2`.

        Test your code. Now both bugs should reset when they touch the cake.
      CSD U3 AnimationsMulti defender enemies touch cake sprite2_2018: |-
        # Touching the Cake: Second Ladybug

        Your first enemy sprite should now be resetting when it gets to the cake. Now you'll want the other ladybug to reset as well.

        # Do This

        Inside the `enemiesTouchCake` function you should have written code that resets `enemy1`.

        -   Copy the entire if-statement you wrote in the last level (Ctrl-C).
        -   Paste the code inside of the `enemiesTouchCake` function, just below the last one (Ctrl-V).
        -   Change the name of the sprite in that code from `enemy1` to `enemy2`.

        Test your code. Now both bugs should reset when they touch the cake.
      CSD U3 AnimationsMulti defender enemies touch cake sprite2_2019: |-
        # Touching the Cake: Second Ladybug

        Your first enemy sprite should now be resetting when it gets to the cake. Now you'll want the other ladybug to reset as well.

        # Do This

        Inside the `enemiesTouchCake` function you should have written code that resets `enemy1`.

        -   Copy the entire if-statement you wrote in the last level (Ctrl-C).
        -   Paste the code inside of the `enemiesTouchCake` function, just below the last one (Ctrl-V).
        -   Change the name of the sprite in that code from `enemy1` to `enemy2`.

        Test your code. Now both bugs should reset when they touch the cake.
      CSD U3 AnimationsMulti defender enemies touch cake_2018: |-
        # Touching the Cake

        If the enemies get all the way across to the cake you should place them back at the left side of the screen and decrease the score. To start you'll **write code for only one of your enemies**.

        # Do This

        Inside the `enemiesTouchCake` function you'll need to write code that checks when a ladybug is touching the cake, resets its position, and changes the score.

        -   Use an `if` and `isTouching` to detect whether enemy1 has touched the cake.
        -   Inside your `if` block place code that:
            -   sets enemy1's x position back to 0.
            -   sets enemy1's y position to a random number between 150 and 250.
            -   uses the counter pattern to decrease the score by 2.

        (_Hint: You can reuse some code you already wrote_)

        Test your code. One of your ladybugs should now reset when it gets across to the cake, and the score should go down by 2.
      CSD U3 AnimationsMulti defender enemies touch cake_2019: |-
        # Touching the Cake

        If the enemies get all the way across to the cake you should place them back at the left side of the screen and decrease the score. To start you'll **write code for only one of your enemies**.

        # Do This

        Inside the `enemiesTouchCake` function you'll need to write code that checks when a ladybug is touching the cake, resets its position, and changes the score.

        -   Use an `if` and `isTouching` to detect whether enemy1 has touched the cake.
        -   Inside your `if` block place code that:
            -   sets enemy1's x position back to 0.
            -   sets enemy1's y position to a random number between 150 and 250.
            -   uses the counter pattern to decrease the score by 2.

        (_Hint: You can reuse some code you already wrote_)

        Test your code. One of your ladybugs should now reset when it gets across to the cake, and the score should go down by 2.
      CSD U3 AnimationsMulti defender make it your own: |-
        # Make It Your Own

        You just walked through someone else's plan for creating a game, so now it's time to make it your own. What additional features or challenges do you want to create?

        # Do This

        Select one of the challenges below to add to the game or come up with a challenge of your own.

        -   Change the visuals of the game so that your player, enemies, or cake look different.
        -   End the game when the enemies get to the cake and print the score. For an extra challenge end the game only after 3 enemies get through.
        -   Randomize the speed of the enemies.
        -   Create a new background that shows up when players reach a higher score.
      CSD U3 AnimationsMulti defender make it your own_2018: |-
        # Make It Your Own

        You just walked through someone else's plan for creating a game, so now it's time to make it your own. What additional features or challenges do you want to create?

        # Do This

        Select one of the challenges below to add to the game or come up with a challenge of your own.

        -   Change the visuals of the game so that your player, enemies, or cake look different.
        -   End the game when the enemies get to the cake and print the score. For an extra challenge end the game only after 3 enemies get through.
        -   Randomize the speed of the enemies.
        -   Create a new background that shows up when players reach a higher score.
      CSD U3 AnimationsMulti defender make it your own_2019: |-
        # Make It Your Own

        You just walked through someone else's plan for creating a game, so now it's time to make it your own. What additional features or challenges do you want to create?

        # Do This

        Select one of the challenges below to add to the game or come up with a challenge of your own.

        -   Change the visuals of the game so that your player, enemies, or cake look different.
        -   End the game when the enemies get to the cake and print the score. For an extra challenge end the game only after 3 enemies get through.
        -   Randomize the speed of the enemies.
        -   Create a new background that shows up when players reach a higher score.
      CSD U3 AnimationsMulti defender move player: |-
        # Moving Left and Right

        Now that your enemy sprites are moving correctly, it's time to write the code to move your player. For now you'll just need to get your character moving left and right and changing its animations.

        # Do This

        For this level you'll be writing code inside the `movePlayer` function.

        -   Use an `if` block along with `keyDown` to detect when the "right" arrow is pressed.
        -   Use `sprite.x` and the counter pattern increase the player's x position by 3.
        -   Use another `if` block to move the player to the left when the "left" arrow is pressed. This time you'll need to decrease the player's x position.

        Test your game. Your character sprite should now move left and right when you press the left and right arrows.
      CSD U3 AnimationsMulti defender move player_2018: |-
        # Moving Left and Right

        Now that your enemy sprites are moving correctly, it's time to write the code to move your player. For now you'll just need to get your character moving left and right and changing its animations.

        # Do This

        For this level you'll be writing code inside the `movePlayer` function.

        -   Use an `if` block along with `keyDown` to detect when the "right" arrow is pressed.
        -   Use `sprite.x` and the counter pattern increase the player's x position by 3.
        -   Use another `if` block to move the player to the left when the "left" arrow is pressed. This time you'll need to decrease the player's x position.

        Test your game. Your character sprite should now move left and right when you press the left and right arrows.
      CSD U3 AnimationsMulti defender move player_2019: |-
        # Moving Left and Right

        Now that your enemy sprites are moving correctly, it's time to write the code to move your player. For now you'll just need to get your character moving left and right and changing its animations.

        # Do This

        For this level you'll be writing code inside the `movePlayer` function.

        -   Use an `if` block along with `keyDown` to detect when the "right" arrow is pressed.
        -   Use `sprite.x` and the counter pattern increase the player's x position by 3.
        -   Use another `if` block to move the player to the left when the "left" arrow is pressed. This time you'll need to decrease the player's x position.

        Test your game. Your character sprite should now move left and right when you press the left and right arrows.
      CSD U3 AnimationsMulti defender move up down: |-
        # Moving Up and Down

        You'll want your player sprite to move up and down as well.

        # Do This

        For this level you'll still be writing code inside the `movePlayer` function.

        -   Use an `if` block along with `keyDown` to detect when the "up" arrow is pressed.
        -   Use `sprite.y` to increase the player's y position by 3 using the counter pattern.
        -   Use another `if` block to move the player down when the "down" arrow is pressed.

        Test your code. Your character should now move in all 4 directions.
      CSD U3 AnimationsMulti defender move up down_2018: |-
        # Moving Up and Down

        You'll want your player sprite to move up and down as well.

        # Do This

        For this level you'll still be writing code inside the `movePlayer` function.

        -   Use an `if` block along with `keyDown` to detect when the "up" arrow is pressed.
        -   Use `sprite.y` to make the player go up by 3 using the counter pattern.
        -   Use another `if` block to move the player down when the "down" arrow is pressed.

        Test your code. Your character should now move in all 4 directions.
      CSD U3 AnimationsMulti defender move up down_2019: |-
        # Moving Up and Down

        You'll want your player sprite to move up and down as well.

        # Do This

        For this level you'll still be writing code inside the `movePlayer` function.

        -   Use an `if` block along with `keyDown` to detect when the "up" arrow is pressed.
        -   Use `sprite.y` to make the player go up by 3 using the counter pattern.
        -   Use another `if` block to move the player down when the "down" arrow is pressed.

        Test your code. Your character should now move in all 4 directions.
      CSD U3 AnimationsMulti defender touch water: |-
        # Touching the Water

        The last part of the game that you'll need to write is the code to reset the sprites when they touch the water. Luckily you should have already written functions that reset each sprite, so you'll just need a good way to know when either sprite leaves the bridge. Start by writing the code for a single enemy and then copy-paste and make small changes to create code for your second enemy.

        # Do This

        For this level you'll be writing code inside the `enemiesTouchWater` function.

        -   Use an `if` statement to check whether enemy1 is off the top of the bridge by checking whether its y value is below 140. Within your if statement:
            -   use your `setEnemy1` function to reset the sprite.
            -   add 1 to the score.
        -   Use an if statement to check whether enemy1 is off the bottom of the bridge by checking whether its y value is above 260. Within your if statement:
            -   use your `setEnemy1` function to reset the sprite.
            -   add 1 to the score.
        -   Test your program for the first enemy sprite. Make sure the sprite is resetting and the score goes up.
        -   Once it is working copy and paste the code you wrote to create the same behavior for `enemy2`. You'll need to change the name of the sprite and the name of the functions you use.
      CSD U3 AnimationsMulti defender touch water_2018: |-
        # Touching the Water

        The last part of the game that you'll need to write is the code to reset the sprites when they touch the water. Luckily you should have already written functions that reset each sprite, so you'll just need a good way to know when either sprite leaves the bridge. Start by writing the code for a single enemy and then copy-paste and make small changes to create code for your second enemy.

        # Do This

        For this level you'll be writing code inside the `enemiesTouchWater` function.

        -   Use an `if` statement to check whether enemy1 is off the top of the bridge by checking whether its y value is below 140. Within your if statement:
            -   use your `setEnemy1` function to reset the sprite.
            -   add 1 to the score.
        -   Use an if statement to check whether enemy1 is off the bottom of the bridge by checking whether its y value is above 260. Within your if statement:
            -   use your `setEnemy1` function to reset the sprite.
            -   add 1 to the score.
        -   Test your program for the first enemy sprite. Make sure the sprite is resetting and the score goes up.
        -   Once it is working copy and paste the code you wrote to create the same behavior for `enemy2`. You'll need to change the name of the sprite and the name of the functions you use.
      CSD U3 AnimationsMulti defender touch water_2019: |-
        # Touching the Water

        The last part of the game that you'll need to write is the code to reset the sprites when they touch the water. Luckily you should have already written functions that reset each sprite, so you'll just need a good way to know when either sprite leaves the bridge. Start by writing the code for a single enemy and then copy-paste and make small changes to create code for your second enemy.

        # Do This

        For this level you'll be writing code inside the `enemiesTouchWater` function.

        -   Use an `if` statement to check whether enemy1 is off the top of the bridge by checking whether its y value is below 140. Within your if statement:
            -   use your `setEnemy1` function to reset the sprite.
            -   add 1 to the score.
        -   Use an if statement to check whether enemy1 is off the bottom of the bridge by checking whether its y value is above 260. Within your if statement:
            -   use your `setEnemy1` function to reset the sprite.
            -   add 1 to the score.
        -   Test your program for the first enemy sprite. Make sure the sprite is resetting and the score goes up.
        -   Once it is working copy and paste the code you wrote to create the same behavior for `enemy2`. You'll need to change the name of the sprite and the name of the functions you use.
      CSD U3 AnimationsMulti introducing multiframe: |-
        # Using Multiframe Animations

        In the sample defender game the sprites themselves were animated. Before getting started on programming this game, take a minute to get familiar with this new way of animating sprites.

        # Do This

        This program already includes several sprites but they don't yet have any animations.

        -   Go to the Animation Tab and check out the multi-frame animations already added to your project. Choose one for each of your characters.
        -   Remember you can use `setAnimation` to give your sprites animations you've created in the Animation Tab.
      CSD U3 AnimationsMulti introducing multiframe_2018: |-
        # Using Multiframe Animations

        In the sample defender game the sprites themselves were animated. Before getting started on programming this game, take a minute to get familiar with this new way of animating sprites.

        # Do This

        This program already includes several sprites but they don't yet have any animations.

        -   Go to the Animation Tab and check out the multi-frame animations already added to your project. Choose one for each of your characters.
        -   Remember you can use `setAnimation` to give your sprites animations you've created in the Animation Tab.
      CSD U3 AnimationsMulti introducing multiframe_2019: |-
        # Using Multiframe Animations

        In the sample defender game the sprites themselves were animated. Before getting started on programming this game, take a minute to get familiar with this new way of animating sprites.

        # Do This

        This program already includes several sprites but they don't yet have any animations.

        -   Go to the Animation Tab and check out the multi-frame animations already added to your project. Choose one for each of your characters.
        -   Remember you can use `setAnimation` to give your sprites animations you've created in the Animation Tab.
      CSD U3 AnimationsMulti mirror animation: "# Editing Multiframe Animations\n\nYour
        sprites will look a lot more realistic if they turn around when they're moving.
        You can switch back and forth between multiframe animations when the user
        presses different keys.\n\n# Do This\n\nRead this code and run the program.
        Make sure you know how the sprite responds to the arrow keys.\n\n-   In the
        Animation Tab, create a copy of the alien animation by clicking the following
        button: ![](<https://images.code.org/aee81f9cd3f63bb8a9c91ac3ab250a87-image-1475699896387.38.09
        PM.png>)\n-   Use the tool to flip your animation. Make sure you flip both
        frames using this button:  ![](<https://images.code.org/3b10b4a612f9a7c640dc7bb18f4c2b91-image-1475699599617.33.03
        PM.png>) \n-   Rename your new animation.\n-   Use your new animation and
        old animation so that the alien faces the correct direction when moving. Where
        do you think you'll need to set the sprite's animation in your code?"
      CSD U3 AnimationsMulti mirror animation_2018: "# Editing Multiframe Animations\n\nYour
        sprites will look a lot more realistic if they turn around when they're moving.
        You can switch back and forth between multiframe animations when the user
        presses different keys.\n\n# Do This\n\nRead this code and run the program.
        Make sure you know how the sprite responds to the arrow keys.\n\n-   In the
        Animation Tab, create a copy of the alien animation by clicking the following
        button: ![](<https://images.code.org/aee81f9cd3f63bb8a9c91ac3ab250a87-image-1475699896387.38.09
        PM.png>)\n-   Use the tool to flip your animation. Make sure you flip both
        frames using this button:  ![](<https://images.code.org/3b10b4a612f9a7c640dc7bb18f4c2b91-image-1475699599617.33.03
        PM.png>) \n-   Rename your new animation.\n-   Use your new animation and
        old animation so that the alien faces the correct direction when moving. Where
        do you think you'll need to set the sprite's animation in your code?"
      CSD U3 AnimationsMulti mirror animation_2019: "# Editing Multiframe Animations\n\nYour
        sprites will look a lot more realistic if they turn around when they're moving.
        You can switch back and forth between multiframe animations when the user
        presses different keys.\n\n# Do This\n\nRead this code and run the program.
        Make sure you know how the sprite responds to the arrow keys.\n\n-   In the
        Animation Tab, create a copy of the alien animation by clicking the following
        button: ![](<https://images.code.org/aee81f9cd3f63bb8a9c91ac3ab250a87-image-1475699896387.38.09
        PM.png>)\n-   Use the tool to flip your animation. Make sure you flip both
        frames using this button:  ![](<https://images.code.org/3b10b4a612f9a7c640dc7bb18f4c2b91-image-1475699599617.33.03
        PM.png>) \n-   Rename your new animation.\n-   Use your new animation and
        old animation so that the alien faces the correct direction when moving. Where
        do you think you'll need to set the sprite's animation in your code?"
      CSD U3 AnimationsMulti slow down: "# Slow Down\n\nNice work! Time to start learning
        how to control these multiframe animations.\n\n# Do This\n\nYour sprites should
        be animated but they're moving really quickly. \n\n-   Head back to the Animation
        Tab. Underneath each animation you should see a slider. ![](<https://images.code.org/169e11c1f6f55b607937fe9cb7e5e390-image-1476209267457.07.26
        AM.png>)\n-   Use these sliders to slow down your animations so they look
        more realistic."
      CSD U3 AnimationsMulti slow down_2018: "# Slow Down\n\nNice work! Time to start
        learning how to control these multiframe animations.\n\n# Do This\n\nYour
        sprites should be animated but they're moving really quickly. \n\n-   Head
        back to the Animation Tab. Underneath each animation you should see a slider.
        ![](<https://images.code.org/169e11c1f6f55b607937fe9cb7e5e390-image-1476209267457.07.26
        AM.png>)\n-   Use these sliders to slow down your animations so they look
        more realistic."
      CSD U3 AnimationsMulti slow down_2019: "# Slow Down\n\nNice work! Time to start
        learning how to control these multiframe animations.\n\n# Do This\n\nYour
        sprites should be animated but they're moving really quickly. \n\n-   Head
        back to the Animation Tab. Underneath each animation you should see a slider.
        ![](<https://images.code.org/169e11c1f6f55b607937fe9cb7e5e390-image-1476209267457.07.26
        AM.png>)\n-   Use these sliders to slow down your animations so they look
        more realistic."
      CSD U3 Boolean Modify: "# Boolean Expressions\n\nThe simplest Boolean expressions
        are questions that the computer can answer with true or false. These expressions
        are made using **comparison operators**, as shown below.\n\n|                                                Comparison
        Operator                                                | Boolean Expression
        |        Meaning        |\n| :---------------------------------------------------------------------------------------------------------------:
        | :----------------: | :-------------------: |\n| <img src=\"https://images.code.org/1a0798d75d4242715e7608d825f95101-image-1447271431312.png\"
        style=\"width: 100px\"> |       `1 < 9`      |   Is 1 less than 9?   |\n|
        <img src=\"https://images.code.org/5ff460ac121f0ac51b569e96a4404c57-image-1447271431310.png\"
        style=\"width: 100px\"> |       `1 > 9`      | Is 1 greater than 9 ? |\n|
        <img src=\"https://images.code.org/a4daa9efccea2278e165592efe343c1a-image-1447271431308.png\"
        style=\"width: 100px\"> |      `1 == 9`      |    Is 1 equal to 9?   |\n\n<br>\n\n**Note:**
        If you saw the statement 3 \\< 2 in math class, you'd think something was
        terribly wrong, but this is not math class.  In computer science, the comparison
        operators **ask a question** that the computer will answer with `true` or
        `false`. So you can read 3 \\< 2 as **\"Is 3 less than 2?\"** The answer in
        this case is no, or `false`.  \n\nAnother way to say this is that the Boolean
        expression `3 < 2` **evaluates** to `false`.\n\n# Do This\n\nCan you modify
        the values of the sprite properties so that each of the Boolean expressions
        evaluates to `true`?\n\n-   Read through the entire program to see how `sprite1`
        and `sprite2` are being created and which properties are compared.\n-   For
        each of the Boolean expressions, identify the sprite properties being compared.\n-
        \  Change the code _in the first **11** lines only_ so that each of the `console.log()`
        statements print `true`."
      CSD U3 Boolean Modify_2018: |-
        # Boolean Expressions

        The simplest Boolean expressions are questions that the computer can answer with true or false. These expressions are made using **comparison operators**, as shown below.

        |                                                Comparison Operator                                                | Boolean Expression |        Meaning        |
        | :---------------------------------------------------------------------------------------------------------------: | :----------------: | :-------------------: |
        | <img src="https://images.code.org/1a0798d75d4242715e7608d825f95101-image-1447271431312.png" style="width: 100px"> |       `1 < 9`      |   Is 1 less than 9?   |
        | <img src="https://images.code.org/5ff460ac121f0ac51b569e96a4404c57-image-1447271431310.png" style="width: 100px"> |       `1 > 9`      | Is 1 greater than 9 ? |
        | <img src="https://images.code.org/a4daa9efccea2278e165592efe343c1a-image-1447271431308.png" style="width: 100px"> |      `1 == 9`      |    Is 1 equal to 9?   |

        **Note:** If you saw the statement 3 \< 2 in math class, you'd think something was terribly wrong, but this is not math class.  In computer science, the comparison operators **ask a question** that the computer will answer with `true` or `false`. So you can read 3 \< 2 as **"Is 3 less than 2?"** The answer in this case is no, or `false`.

        Another way to say this is that the Boolean expression `3 < 2` **evaluates** to `false`.

        # Do This

        Can you modify the values of the sprite properties so that each of the Boolean expressions evaluates to `true`?

        -   Read through the entire program to see how `sprite1` and `sprite2` are being created and which properties are compared.
        -   For each of the Boolean expressions, identify the sprite properties being compared.
        -   Change the code _in the first **11** lines only_ so that each of the `console.log()` statements print `true`.
      CSD U3 Boolean Modify_2019: "# Boole yrðingar\n\nEinföldustu Boole yrðingar
        eru spurningar sem tölvan getur svarað með \"true\" (satt) eða \"false\" (ósatt).
        \nÞað er líka hægt að segja að Boole yrðingar **gefi útkomuna** `true` eða
        `false`.\n\n# Gerðu þetta\n\nGetur þú breytt tölum í eiginleikum kvikanna
        svo að hver Boole yrðing gefi útkomuna `true`?\n\n-   Lestu í gegnum allt
        forritið til að sjá hvernig `sprite1` og `sprite2` eru búin til og hvaða eiginleika
        er verið að bera saman.\n-   Farðu yfir hverja af Boole yrðingunum til að
        sjá hvaða eiginleika kvikanna er verið að bera saman.\n-   Breyttu kóðanum
        _en aðeins í fyrstu **11** línunum_ þannig að hver `console.log()` skipun
        skrifi út `true`."
      CSD U3 Complex Movement counter prediction: |-
        # Velocity and the Counter Pattern

        Using the counter pattern with a sprite's x and y property makes a sprite move smoothly across the screen. In this program **the counter pattern is being used with the `sprite.velocityX` property** instead.

        # Predict

        What do you think will happen when the code is run? Why? Once you're ready you can run the code to find out.
      CSD U3 Complex Movement counter prediction_2018: |-
        # Velocity and the Counter Pattern

        Using the counter pattern with a sprite's x and y property makes a sprite move smoothly across the screen. In this program **the counter pattern is being used with the `sprite.velocityX` property** instead.

        # Predict

        What do you think will happen when the code is run? Why? Once you're ready you can run the code to find out.
      CSD U3 Complex Movement counter prediction_2019: |-
        # Velocity and the Counter Pattern

        Using the counter pattern with a sprite's x and y property makes a sprite move smoothly across the screen. In this program **the counter pattern is being used with the `sprite.velocityX` property** instead.

        # Predict

        What do you think will happen when the code is run? Why? Once you're ready you can run the code to find out.
      CSD U3 Compound Nested Challenge: |-
        # Challenge: Checking for Multiple Conditions

        _Check with your teacher before taking on this challenge._

        So far we've looked at a lot of ways to check if a single condition is true, but often a program needs to check the state of many conditions simultaneously before making a decision. For this challenge, let's assume the following scenario:

        -   The sprite should move up, down, left, and right if the corresponding arrow key is pressed.
        -   The sprite should _not_ go all the way off the screen in any direction.

        # Do This Together

        Before you tackle writing this program, you'll need to figure out how to check multiple conditions at once.

        -   **Brainstorm** with your neighbors ways you might check for more than one condition.
        -   **Share** back with the whole class so you can see other potential approaches.
        -   **Explore** the toolbox for blocks that might help (pay extra attention to the Math and Control drawers).
        -   **Program** your proposed solution.
        -   **Test** your program to make sure it's actually checking all of the conditions you intended.
      CSD U3 Compound Nested Challenge_2018: |-
        # Challenge: Checking for Multiple Conditions

        _Check with your teacher before taking on this challenge._

        So far we've looked at a lot of ways to check if a single condition is true, but often a program needs to check the state of many conditions simultaneously before making a decision. For this challenge, let's assume the following scenario:

        -   The sprite should move up, down, left, and right if the corresponding arrow key is pressed.
        -   The sprite should _not_ go all the way off the screen in any direction.

        # Do This Together

        Before you tackle writing this program, you'll need to figure out how to check multiple conditions at once.

        -   **Brainstorm** with your neighbors ways you might check for more than one condition.
        -   **Share** back with other classmates so you can see other potential approaches.
        -   **Explore** the toolbox for blocks that might help (pay extra attention to the Math and Control drawers).
        -   **Program** your proposed solution.
        -   **Test** your program to make sure it's actually checking all of the conditions you intended.
      CSD U3 Compound Nested Challenge_2019: |-
        # Challenge: Checking for Multiple Conditions

        _Check with your teacher before taking on this challenge._

        So far we've looked at a lot of ways to check if a single condition is true, but often a program needs to check the state of many conditions simultaneously before making a decision. For this challenge, let's assume the following scenario:

        -   The sprite should move up, down, left, and right if the corresponding arrow key is pressed.
        -   The sprite should _not_ go all the way off the screen in any direction.

        # Do This Together

        Before you tackle writing this program, you'll need to figure out how to check multiple conditions at once.

        -   **Brainstorm** with your neighbors ways you might check for more than one condition.
        -   **Share** back with other classmates so you can see other potential approaches.
        -   **Explore** the toolbox for blocks that might help (pay extra attention to the Math and Control drawers).
        -   **Program** your proposed solution.
        -   **Test** your program to make sure it's actually checking all of the conditions you intended.
      CSD U3 Conditionals Apple: |-
        # Meiri æfing með Boole gildi

        Við skulum nota enn eina Boole setningu til að athuga ástand kvika.

        # Gerðu þetta

        Hér er tilbúinn kviki í formi stækkandi eplis. Það byrjar grænt, en ætti að litast rautt þegar það hefur náð stærðinni 2. Við ætlum ekki að láta það verða rautt strax, hedlur aðeins nota `console.log` skipunina til að athuga hvort það sé búið að ná stærðinni 2.

        -   Bættu við `console.log`yrðingu.
        -   Settu Boole setningu inn í `console.log` sem athugar hvort stærðin `apple.scale` sé stærri en 2.
      CSD U3 Conditionals Apple 2: |-
        # Turning Red

        Now that we know how to use _if_ statements, you can do more than just check if the apple has reached a scale of 2, you turn it red once it happens.

        # Do This

        Use a conditional in the draw loop to check whether `apple.scale` is greater than 2 - if it is, set the apples new animation to "apple\_red".

        _Challenge: Can you also make the apple stop growing once it turns red?_
      CSD U3 Conditionals Apple 2_2018: |-
        # Changing Fruit

        Now that we know how to use _if_ statements, you can do more than just check if the apple has reached a scale of 2. You turn it into a pear once it happens.

        # Do This

        Use a conditional in the draw loop to check whether `fruit.scale` is greater than 2.  If it is, change the fruit's animation to "pear".

        _Challenge: Can you also make the fruit stop growing once it turns into a pear?_
      CSD U3 Conditionals Apple 2_2018_2019: |-
        # Changing Fruit

        Now that we know how to use _if_ statements, you can do more than just check if the apple has reached a scale of 2. You turn it into a pear once it happens.

        # Do This

        Use a conditional in the draw loop to check whether `fruit.scale` is greater than 2.  If it is, change the fruit's animation to "pear".

        _Challenge: Can you also make the fruit stop growing once it turns into a pear?_
      CSD U3 Conditionals Apple_2018: |-
        # More Practice With Booleans

        Let's use one more Boolean expression to check the condition of a sprite.  You can use a `console.log` command to check whether its scale is 2 yet.

        # Do This

        -   Add a `console.log` statement.
        -   Add a Boolean expression inside the `console.log` that checks whether the `fruit.scale` is greater than 2.
      CSD U3 Conditionals Apple_2018_2019: |-
        # More Practice With Booleans

        Let's use one more Boolean expression to check the condition of a sprite.  You can use a `console.log` command to check whether its scale is 2 yet.

        # Do This

        -   Add a `console.log` statement.
        -   Add a Boolean expression inside the `console.log` that checks whether the `fruit.scale` is greater than 2.
      CSD U3 Counters explaining counters contained 2: "# The Counter Pattern\n\nThis
        pattern is one of the most important ones in all of programming. \n\n![](<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56
        PM.png>)\n\nIt is used to increase the value of a variable by 1. You might
        call it the **counter pattern** since it can be used to make a variable that
        counts up. You'll use this pattern a lot, especially with the draw loop. Let's
        see what that looks like.\n\n# Do This\n\nThis program creates a variable
        `counter` and then uses the **counter pattern** to make it count up. When
        you run the program what do you think you'll see on the screen?\n\n-   **Read
        the program** and make a prediction of what the output will be.\n-   **Run
        the program** to check your prediction.\n-   **Discuss with a neighbor**.
        Can you explain what you observed?"
      CSD U3 Counters explaining counters contained 2_2018: "# The Counter Pattern\n\nThis
        pattern is one of the most important ones in all of programming. \n\n![](<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56
        PM.png>)\n\nIt is used to increase the value of a variable by 1. You might
        call it the **counter pattern** since it can be used to make a variable that
        counts up. You'll use this pattern a lot, especially with the draw loop. Let's
        see what that looks like.\n\n# Do This\n\nThis program creates a variable
        `counter` and then uses the **counter pattern** to make it count up. When
        you run the program what do you think you'll see on the screen?\n\n-   **Read
        the program** and make a prediction of what the output will be.\n-   **Run
        the program** to check your prediction.\n-   **Discuss with a neighbor**.
        Can you explain what you observed?"
      CSD U3 Counters explaining counters contained 2_2019: "# The Counter Pattern\n\nThis
        pattern is one of the most important ones in all of programming. \n\n![](<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56
        PM.png>)\n\nIt is used to increase the value of a variable by 1. You might
        call it the **counter pattern** since it can be used to make a variable that
        counts up. You'll use this pattern a lot, especially with the draw loop. Let's
        see what that looks like.\n\n# Do This\n\nThis program creates a variable
        `counter` and then uses the **counter pattern** to make it count up. When
        you run the program what do you think you'll see on the screen?\n\n-   **Read
        the program** and make a prediction of what the output will be.\n-   **Run
        the program** to check your prediction.\n-   **Discuss with a neighbor**.
        Can you explain what you observed?"
      CSD U3 Diagonal Movement: |-
        <img src="https://images.code.org/f92774863b17074adc85b8f6bbd017f2-image-1492726926884.gif" style="float: right; margin-left: 20px;">

        # Hreyfing á ská

        Ef við uppfærum bara `x` eða bara `y` eiginleika kvika getur hann bara færst beint upp og niður eða til vinstri og hægri. Ef þú vilt láta kvika færast á ská, verður þú að uppfæra _báða_ þessa eiginleika samtímis.

        Þetta forrit lætur músina færast beint niður skjáinn. Getur þú uppfært það svo að músin hreyfist yfir skjáinn á ská eins og myndin hægra megin sýnir?

        _Áskorun: Getur þú látið músina horfa í sömu átt og sýnt er á myndinni?_
      CSD U3 Diagonal Movement_2018: |-
        <img src="https://images.code.org/f92774863b17074adc85b8f6bbd017f2-image-1492726926884.gif" style="float: right; margin-left: 20px;">

        # Diagonal Movement

        Updating only the `x` or `y` properties of a sprite can only make it move straight up and down or left and right. If you want a sprite to move on a diagonal path you'll need to updated _both_ of those properties.

        This program currently makes the mouse move straight down the screen - can you update it so that it moves diagonally across the screen like the image to the right?

        _Challenge: Can you make the mouse point in the same direction as the image?_
      CSD U3 Diagonal Movement_2019: |-
        <img src="https://images.code.org/f92774863b17074adc85b8f6bbd017f2-image-1492726926884.gif" style="float: right; margin-left: 20px;">

        # Diagonal Movement

        Updating only the `x` or `y` properties of a sprite can only make it move straight up and down or left and right. If you want a sprite to move on a diagonal path you'll need to updated _both_ of those properties.

        This program currently makes the mouse move straight down the screen - can you update it so that it moves diagonally across the screen like the image to the right?

        _Challenge: Can you make the mouse point in the same direction as the image?_
      CSD U3 Direction Animations: |-
        # Changing Images as you Move

        Right now your conditionals only do one thing (change your sprite's x or y), but you can actually put as much code as you want inside a conditional. A common thing to do in games is to change your character's image depending on which direction they're walking.

        # Do This

        Using the provided program and images:

        -   Duplicate your chosen bug image four times.
        -   Edit each of your images to point in one of the four directions.
        -   Write code that uses `sprite.setAnimation()` to change the image on your bug sprite when different arrow keys are pressed.
      CSD U3 Direction Animations_2018: |-
        # Changing Images as you Move

        Right now your conditionals only do one thing (change your sprite's x or y), but you can actually put as much code as you want inside a conditional. A common thing to do in games is to change your character's image depending on which direction they're walking.

        # Do This

        Using the provided program and images:

        -   Duplicate your chosen bug image four times.
        -   Edit each of your images to point in one of the four directions.
        -   Write code that uses `sprite.setAnimation()` to change the image on your bug sprite when different arrow keys are pressed.
      CSD U3 Direction Animations_2018_2019: |-
        # Changing Images as you Move

        Right now your conditionals only do one thing (change your sprite's x or y), but you can actually put as much code as you want inside a conditional. A common thing to do in games is to change your character's image depending on which direction they're walking.

        # Do This

        Using the provided program and images:

        -   Duplicate your chosen bug image four times.
        -   Edit each of your images to point in one of the four directions.
        -   Write code that uses `sprite.setAnimation()` to change the image on your bug sprite when different arrow keys are pressed.
      CSD U3 Direction Arrows: |-
        # Move in All Directions

        Once you've got your sprite moving in one direction by responding to a `keyDown`, getting it to move in all four directions should be more of the same. The basic keyboard control that you're developing here will become the basis for many of the games you make down the road.

        # Do This

        The bug sprite you made that responds to the up arrow has been brought to this level. Add the interaction for the other three arrow keys!

        -   Add three if statements - one for each arrow.
        -   Each if statement should move the sprite in the direction of the arrow.

        _HINT: Make sure you consider both the axis (x or y) of movement, **and** whether you need to increase or decrease that value._
      CSD U3 Direction Arrows_2018: "# Move in All Directions\n\nOnce you've got your
        sprite moving in one direction by responding to a `keyDown`, getting it to
        move in all four directions should be more of the same. The basic keyboard
        control that you're developing here will become the basis for many of the
        games you make down the road.\n\n# Do This\n\nThe bug sprite you made that
        responds to the right arrow has been brought to this level. Add the interaction
        for the other three arrow keys!\n\n-   Add three if statements - one for each
        arrow.  \n-   Don't forget to include a comment for each if statement!\n-
        \  Each if statement should move the sprite in the direction of the arrow.\n\n_HINT:
        Make sure you consider both the axis (x or y) of movement, **and** whether
        you need to increase or decrease that value._"
      CSD U3 Direction Arrows_2018_2019: "# Move in All Directions\n\nOnce you've
        got your sprite moving in one direction by responding to a `keyDown`, getting
        it to move in all four directions should be more of the same. The basic keyboard
        control that you're developing here will become the basis for many of the
        games you make down the road.\n\n# Do This\n\nThe bug sprite you made that
        responds to the right arrow has been brought to this level. Add the interaction
        for the other three arrow keys!\n\n-   Add three if statements - one for each
        arrow.  \n-   Don't forget to include a comment for each if statement!\n-
        \  Each if statement should move the sprite in the direction of the arrow.\n\n_HINT:
        Make sure you consider both the axis (x or y) of movement, **and** whether
        you need to increase or decrease that value._"
      CSD U3 Draw Loop Plugged orange and green: "<img src=\"https://images.code.org/2b5b2ce029e2f1d7377db7dcd7760cf0-image-1492031771047.15.45\nPM.png\"
        style=\"float:right;width:150px\">\\\r\n\\\r\n\n# Notkun teiknilykkjunnar\\\r\n\n\\\r\nNú
        er komið að þér að vinna með lykkjuna sem teiknar. Mundu að Leikjasmiðjan
        keyrir kóðann í teiknilykkjunni aftur og aftur.\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\n\\*\nBættu
        kóða í þetta forrit svo það teikni líka appelsínugula hringi\\\r\n\n-   Ekki
        hætta fyrr en forritið lítur út eins og myndin hér til hægri"
      CSD U3 Draw Loop Plugged orange and green_2018: "<img src=\"https://images.code.org/2b5b2ce029e2f1d7377db7dcd7760cf0-image-1492031771047.15.45\nPM.png\"
        style=\"float:right;width:150px\">\\\r\n\\\r\n\n# Notkun teiknilykkjunnar\\\r\n\n\\\r\nNú
        er komið að þér að vinna með lykkjuna sem teiknar. Mundu að Leikjasmiðjan
        keyrir kóðann í teiknilykkjunni aftur og aftur.\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\n\\*\nBættu
        kóða í þetta forrit svo það teikni líka appelsínugula hringi\\\r\n\n-   Ekki
        hætta fyrr en forritið lítur út eins og myndin hér til hægri"
      CSD U3 Draw Loop Plugged orange and green_2019: "<img src=\"https://images.code.org/2b5b2ce029e2f1d7377db7dcd7760cf0-image-1492031771047.15.45\nPM.png\"
        style=\"float:right;width:150px\">\\\r\n\\\r\n\n# Notkun teiknilykkjunnar\\\r\n\n\\\r\nNú
        er komið að þér að vinna með lykkjuna sem teiknar. Mundu að Leikjasmiðjan
        keyrir kóðann í teiknilykkjunni aftur og aftur.\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\n\\*\nBættu
        kóða í þetta forrit svo það teikni líka appelsínugula hringi\\\r\n\n-   Ekki
        hætta fyrr en forritið lítur út eins og myndin hér til hægri"
      CSD U3 Draw Loop Plugged predict 1: "# Teiknilykkja\\\r\n\n\\\r\nHér er dæmi
        um það hvernig teiknilykkjan (enska: draw loop) virkar.\\\r\n\\\r\n\n# Gerðu
        þetta\\\r\n\n-   Keyrðu kóðann til að sjá hvað gerist.\\\r\n-   Ræddu við
        félaga þinn hvort þetta líkist flettibókinni sem þið sáuð í myndbandinu.  Hvers
        vegna eða hvers vegna ekki?"
      CSD U3 Draw Loop Plugged predict 1_2018: "# Teiknilykkja\\\r\n\n\\\r\nHér er
        dæmi um það hvernig teiknilykkjan (enska: draw loop) virkar.\\\r\n\\\r\n\n#
        Gerðu þetta\\\r\n\n-   Keyrðu kóðann til að sjá hvað gerist.\\\r\n-   Ræddu
        við félaga þinn hvort þetta líkist flettibókinni sem þið sáuð í myndbandinu.
        \ Hvers vegna eða hvers vegna ekki?"
      CSD U3 Draw Loop Plugged predict 1_2019: "# Teiknilykkja\\\r\n\n\\\r\nHér er
        dæmi um það hvernig teiknilykkjan (enska: draw loop) virkar.\\\r\n\\\r\n\n#
        Gerðu þetta\\\r\n\n-   Keyrðu kóðann til að sjá hvað gerist.\\\r\n-   Ræddu
        við félaga þinn hvort þetta líkist flettibókinni sem þið sáuð í myndbandinu.
        \ Hvers vegna eða hvers vegna ekki?"
      CSD U3 Draw Loop Plugged predict 2 embed: |-
        # Predict

        This program has one small difference that will make it run a little differently. Again though, remember:

        -   All your code outside the draw loop is run first, one time
        -   All your code inside the draw loop is run over and over forever

        What will this program do? Write your prediction below.
      CSD U3 Draw Loop Plugged predict 2 embed_2018: |-
        # Predict

        This program has one small difference that will make it run a little differently. Again though, remember:

        -   All your code outside the draw loop is run first, one time
        -   All your code inside the draw loop is run over and over forever

        What will this program do? Write your prediction below.
      CSD U3 Draw Loop Plugged predict 2 embed_2019: |-
        # Predict

        This program has one small difference that will make it run a little differently. Again though, remember:

        -   All your code outside the draw loop is run first, one time
        -   All your code inside the draw loop is run over and over forever

        What will this program do? Write your prediction below.
      CSD U3 Draw Loop Plugged update your scene: |-
        # Færa út sviðið

        Hér er sviðið fyrir hreyfingu vera sem þú bjóst til í síðustu kennslustund. Nú átt þú að uppfæra svo það noti teiknilykkjuna (enska:draw loop) og eiginleika veru.

        <img src="https://images.code.org/ce257c4d91da460c9c2add1733873769-image-1492209174198.32.29 PM.png" style="float:right;height:100px">

        # Gerðu þetta

        -   Bættu teiknilykkju í forritið þitt (þú ættir að hafa bara eina)
        -   Notaðu snöruna (enska: lasso selector) (smelltu, haltu og dragðu) til að velja allan kóðann þinn og settu hann í teiknilykkjuna. Með Crtl-Z getur þú afturkallað mistök sem þú gerir.
        -   Bættu kóða í forritið sem uppfærir þessa eiginleika veranna: `sprite.x`, `sprite.y` eða `sprite.rotation` svo þær hreyfist. Þú verður að uppfæra eiginleikana með handahófstölum: `randomNumber()`.
      CSD U3 Draw Loop Plugged update your scene_2018: |-
        # Færa út sviðið

        Hér er sviðið fyrir hreyfingu vera sem þú bjóst til í síðustu kennslustund. Nú átt þú að uppfæra svo það noti teiknilykkjuna (enska:draw loop) og eiginleika veru.

        <img src="https://images.code.org/ce257c4d91da460c9c2add1733873769-image-1492209174198.32.29 PM.png" style="float:right;height:100px">

        # Gerðu þetta

        -   Bættu teiknilykkju í forritið þitt (þú ættir að hafa bara eina)
        -   Notaðu snöruna (enska: lasso selector) (smelltu, haltu og dragðu) til að velja allan kóðann þinn og settu hann í teiknilykkjuna. Með Crtl-Z getur þú afturkallað mistök sem þú gerir.
        -   Bættu kóða í forritið sem uppfærir þessa eiginleika veranna: `sprite.x`, `sprite.y` eða `sprite.rotation` svo þær hreyfist. Þú verður að uppfæra eiginleikana með handahófstölum: `randomNumber()`.
      CSD U3 Draw Loop Plugged update your scene_2019: |-
        # Færa út sviðið

        Hér er sviðið fyrir hreyfingu vera sem þú bjóst til í síðustu kennslustund. Nú átt þú að uppfæra svo það noti teiknilykkjuna (enska:draw loop) og eiginleika vera.

        <img src="https://images.code.org/ce257c4d91da460c9c2add1733873769-image-1492209174198.32.29 PM.png" style="float:right;height:100px">

        # Gerðu þetta

        -   Bættu teiknilykkju í forritið þitt (þú ættir að hafa bara eina)
        -   Notaðu snöruna (enska: lasso selector) (smelltu, haltu og dragðu) til að velja allan kóðann þinn og settu hann í teiknilykkjuna. Með Crtl-Z getur þú afturkallað mistök sem þú gerir.
        -   Bættu kóða í forritið sem uppfærir þessa eiginleika veranna: `sprite.x`, `sprite.y` eða `sprite.rotation` svo þær hreyfist. Þú verður að uppfæra eiginleikana með handahófstölum: `randomNumber()`.
      CSD U3 Draw Loop Plugged wiggle sprite rotation: |-
        \<img src="<https://images.code.org/03f98fedbe59ceb5ef0a8530cb81c367-image-1492040405357.gif">, style="float:right;height:150px">

        # Að uppfæra eiginleika

        Þessi áfangi sameinar ýmsa þá kunnáttu sem þú hefur þegar kynnst. Hann teiknar hringform á bakgrunninn og uppfærir líka eiginleika hreyfanlegra vera. Í þetta sinn er verið að breyta `sprite.rotation` eiginleikanum fyrir snúning vera.

        # Gerðu þetta

        Þessi hreyfimynd er þegar að uppfæra snúning einnar verunnar þannig að hún virðist titra

        -   Keyrðu forritið til að sjá hvernig það virkar.
        -   Bættu kóða í forritið til að láta hina geimveruna titra á sama hátt.
        -   Ekki hætta fyrr en forritið þitt lítur út eins og myndin til hægri.
      CSD U3 Draw Loop Plugged wiggle sprite rotation_2018: |-
        \<img src="<https://images.code.org/03f98fedbe59ceb5ef0a8530cb81c367-image-1492040405357.gif">, style="float:right;height:150px">

        # Að uppfæra eiginleika

        Þessi áfangi sameinar ýmsa þá kunnáttu sem þú hefur þegar kynnst. Hann teiknar hringform á bakgrunninn og uppfærir líka eiginleika hreyfanlegra vera. Í þetta sinn er verið að breyta `sprite.rotation` eiginleikanum fyrir snúning vera.

        # Gerðu þetta

        Þessi hreyfimynd er þegar að uppfæra snúning einnar verunnar þannig að hún virðist titra

        -   Keyrðu forritið til að sjá hvernig það virkar.
        -   Bættu kóða í forritið til að láta hina geimveruna titra á sama hátt.
        -   Ekki hætta fyrr en forritið þitt lítur út eins og myndin til hægri.
      CSD U3 Draw Loop Plugged wiggle sprite rotation_2019: |-
        \<img src="<https://images.code.org/03f98fedbe59ceb5ef0a8530cb81c367-image-1492040405357.gif">, style="float:right;height:150px">

        # Að uppfæra eiginleika

        Þessi áfangi sameinar ýmsa þá kunnáttu sem þú hefur þegar kynnst. Hann teiknar hringform á bakgrunninn og uppfærir líka eiginleika hreyfanlegra vera. Í þetta sinn er verið að breyta `sprite.rotation` eiginleikanum fyrir snúning vera.

        # Gerðu þetta

        Þessi hreyfimynd er þegar að uppfæra snúning einnar verunnar þannig að hún virðist titra

        -   Keyrðu forritið til að sjá hvernig það virkar.
        -   Bættu kóða í forritið til að láta hina geimveruna titra á sama hátt.
        -   Ekki hætta fyrr en forritið þitt lítur út eins og myndin til hægri.
      CSD U3 Draw Loop Plugged wiggle sprite x: |-
        \<img src="<https://images.code.org/71ae26edcc3286ff4d7697aaffecf144-image-1492036602240.gif">, style="float:right;height:150px">

        # Uppfærsla eiginleika

        Verur hafa eiginleika sem segja tölvunni hvar og hvernig á að teikna þær. Tveir mikið notaðir eiginleikar eru `sprite.x` and `sprite.y` sem stjórna stað verunnar. Ef ný gildi eru sett í þessa eiginleika mun veran færast á nýjan stað á skjánum.

        # Gerðu þetta

        Þessi hreyfimynd er þegar að uppfæra x eiginleika einnar verunnar svo hún virðist titra

        -   Keyrðu forritið til að sjá það virka.
        -   Breyttu kóðanum í þessu forriti svo að hin veran titri á sama og sú fyrri.
        -   Ekki hætta fyrr en forritið lítur út eins og það sem sést í myndinni hér til hægri.
      CSD U3 Draw Loop Plugged wiggle sprite x_2018: |-
        \<img src="<https://images.code.org/71ae26edcc3286ff4d7697aaffecf144-image-1492036602240.gif">, style="float:right;height:150px">

        # Uppfærsla eiginleika

        Verur hafa eiginleika sem segja tölvunni hvar og hvernig á að teikna þær. Tveir mikið notaðir eiginleikar eru `sprite.x` and `sprite.y` sem stjórna stað verunnar. Ef ný gildi eru sett í þessa eiginleika mun veran færast á nýjan stað á skjánum.

        # Gerðu þetta

        Þessi hreyfimynd er þegar að uppfæra x eiginleika einnar verunnar svo hún virðist titra

        -   Keyrðu forritið til að sjá það virka.
        -   Breyttu kóðanum í þessu forriti svo að hin veran titri á sama og sú fyrri.
        -   Ekki hætta fyrr en forritið lítur út eins og það sem sést í myndinni hér til hægri.
      CSD U3 Draw Loop Plugged wiggle sprite x_2019: |-
        \<img src="<https://images.code.org/71ae26edcc3286ff4d7697aaffecf144-image-1492036602240.gif">, style="float:right;height:150px">

        # Uppfærsla eiginleika

        Verur hafa eiginleika sem segja tölvunni hvar og hvernig á að teikna þær. Tveir mikið notaðir eiginleikar eru `sprite.x` and `sprite.y` sem stjórna stað verunnar. Ef ný gildi eru sett í þessa eiginleika mun veran færast á nýjan stað á skjánum.

        # Gerðu þetta

        Þessi hreyfimynd er þegar að uppfæra x eiginleika einnar verunnar svo hún virðist titra

        -   Keyrðu forritið til að sjá það virka.
        -   Breyttu kóðanum í þessu forriti svo að hin veran titri á sama og sú fyrri.
        -   Ekki hætta fyrr en forritið lítur út eins og það sem sést í myndinni hér til hægri.
      CSD U3 Draw Loop Plugged wiggle sprite y: |-
        \<img src="<https://images.code.org/1e22fb89bcdf99168aee6324d17137ee-image-1493138232702.gif">, style="float:right;height:150px">

        # Uppfærsla eiginleika

        Þessi áfangi er mjög líkur þeim síðasta, en í þetta sinn átt þú að sjá um að bæta við teiknilykkjunni.

        # Gerðu þetta

        -   Bættu kubbnum fyrir teiknilykkjuna við neðst í forritinu.
        -   Færðu þangað alla kubba sem þurfa að vera innan í lykkjunni.
        -   Ekki hætta fyrr en forritið þitt er eins og það í myndinni hér til hægri.
      CSD U3 Draw Loop Plugged wiggle sprite y_2018: |-
        \<img src="<https://images.code.org/1e22fb89bcdf99168aee6324d17137ee-image-1493138232702.gif">, style="float:right;height:150px">

        # Uppfærsla eiginleika

        Þessi áfangi er mjög líkur þeim síðasta, en í þetta sinn átt þú að sjá um að bæta við teiknilykkjunni.

        # Gerðu þetta

        -   Bættu kubbnum fyrir teiknilykkjuna við neðst í forritinu.
        -   Færðu þangað alla kubba sem þurfa að vera innan í lykkjunni.
        -   Ekki hætta fyrr en forritið þitt er eins og það í myndinni hér til hægri.
      CSD U3 Draw Loop Plugged wiggle sprite y_2019: |-
        \<img src="<https://images.code.org/1e22fb89bcdf99168aee6324d17137ee-image-1493138232702.gif">, style="float:right;height:150px">

        # Uppfærsla eiginleika

        Þessi áfangi er mjög líkur þeim síðasta, en í þetta sinn átt þú að sjá um að bæta við teiknilykkjunni.

        # Gerðu þetta

        -   Bættu kubbnum fyrir teiknilykkjuna við neðst í forritinu.
        -   Færðu þangað alla kubba sem þurfa að vera innan í lykkjunni.
        -   Ekki hætta fyrr en forritið þitt er eins og það í myndinni hér til hægri.
      CSD U3 Drawing Squares to Corners: "<img src=\"https://images.code.org/9e09a96901b1e5ad9d5869b2b1fd3897-image-1498671940133.45.12\nAM.png\"
        style=\"float:right;width:150px\">\\\r\n\\\r\n\n# Setja ferninga í horn\\\r\n\n\\\r\nÞegar
        þú notar Leikjasmiðjuna er mikilvægt að skilja staðsetningar. Mundu að þú
        getur alltaf gert hnitagrindina sýnilega eða sett músina á stað til að finna
        x og y hnitin sem þú ert að leita eftir.\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\n\n-
        \  Settu tvo rétthyrninga nákvæmlega í hornin á skjánum eins og sýnt er í
        myndinni."
      CSD U3 Drawing Squares to Corners_2018: "<img src=\"https://images.code.org/9e09a96901b1e5ad9d5869b2b1fd3897-image-1498671940133.45.12\nAM.png\"
        style=\"float:right;width:150px\">\\\r\n\\\r\n\n# Setja ferninga í horn\\\r\n\n\\\r\nÞegar
        þú notar Leikjasmiðjuna er mikilvægt að skilja staðsetningar. Mundu að þú
        getur alltaf gert hnitagrindina sýnilega eða sett músina á stað til að finna
        x og y hnitin sem þú ert að leita eftir.\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\n\n-
        \  Settu tvo rétthyrninga nákvæmlega í hornin á skjánum eins og sýnt er í
        myndinni."
      CSD U3 Drawing Squares to Corners_2019: "<img src=\"https://images.code.org/9e09a96901b1e5ad9d5869b2b1fd3897-image-1498671940133.45.12\nAM.png\"
        style=\"float:right;width:150px\">\\\r\n\\\r\n\n# Setja ferninga í horn\\\r\n\n\\\r\nÞegar
        þú notar Leikjasmiðjuna er mikilvægt að skilja staðsetningar. Mundu að þú
        getur alltaf gert hnitagrindina sýnilega eða sett músina á stað til að finna
        x og y hnitin sem þú ert að leita eftir.\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\n\n-
        \  Settu tvo rétthyrninga nákvæmlega í hornin á skjánum eins og sýnt er í
        myndinni."
      CSD U3 Else: |-
        # What If My Condition Isn't True?

        <img src="https://images.code.org/1a997d78fcd88efeb9e6dc5a02aa88e8-image-1464706463138.53.58.png" width="125px" style="float:right">

        Sometimes we want to tell our program what to do if a condition is `true`, but also what to do if it's `false`. Pressing the plus button at the bottom of your conditional block will give you another section called `else`. This `else` section is a fallback - it will get called whenever the condition in the `if` before it is `false`.

        # Do This

        The gears are back again. The last time you worked with them, you made them spin when the space bar is pressed. Instead of the gears only spinning when the space key is pressed, we want them to spin one way when the space key is pressed and spin the other way when it's not pressed.
        <img src="https://images.code.org/b074d47ca8dfa5ab3bfd08344b4f4e42-image-1464706389475.gif" style="float:right">

        -   Click the _plus_ button at the bottom of the if block to add an else.
        -   Add commands to make the gears spin opposite of the direction that they do when the space bar is pressed.
      CSD U3 Else_2018: |-
        # What If My Condition Isn't True?

        <img src="https://images.code.org/1a997d78fcd88efeb9e6dc5a02aa88e8-image-1464706463138.53.58.png" width="125px" style="float:right">

        Sometimes we want to tell our program what to do if a condition is `true`, but also what to do if it's `false`. Pressing the plus button at the bottom of your conditional block will give you another section called `else`. This `else` section will be run whenever the condition in the `if` before it is `false`.

        # Do This

        The gears are back again. The last time you worked with them, you made them spin when the space bar is pressed. Instead of the gears only spinning when the space key is pressed, we want them to spin one way when the space key is pressed and spin the other way when it's not pressed.
        <img src="https://images.code.org/b074d47ca8dfa5ab3bfd08344b4f4e42-image-1464706389475.gif" style="float:right">

        -   Click the _plus_ button at the bottom of the if block to add an else.
        -   Add commands to make the gears spin opposite of the direction that they do when the space bar is pressed.
      CSD U3 Else_2019: |-
        # Snúa tannhjólunum öfugt

        Tannhjólin eru komin aftur. Eins og er snúast þau þegar þú ýtir á bilslána, en nú viltu láta þau snúast öfugt þegar þú ýtir ekki á hana.

        # Gerðu þetta

        -   Láttu tannhjólin snúast öfugt við það sem þau gera þegar ýtt er á  bilslána.
      CSD U3 Entertainment Sample 1: "# Geimstökkull\\\r\n\n\\\r\nÝttu á \"Keyra\"
        til að spila leikinn hér til vinstri.  Þú getur látið geimveruna stökkva með
        upp örinni og hreyft hana til vinstri og hægri með örvarlyklunum.   Þú skorar
        stig með því að safna stjörnum og ef þú skorar nógu hátt mun bakgrunnurinn
        breytast."
      CSD U3 Entertainment Sample 1_2018: "# Geimstökkull\\\r\n\n\\\r\nÝttu á \"Keyra\"
        til að spila leikinn hér til vinstri.  Þú getur látið geimveruna stökkva með
        upp örinni og hreyft hana til vinstri og hægri með örvarlyklunum.   Þú skorar
        stig með því að safna stjörnum og ef þú skorar nógu hátt mun bakgrunnurinn
        breytast."
      CSD U3 Entertainment Sample 1_2019: "# Geimstökkull\\\r\n\n\\\r\nÝttu á \"Keyra\"
        til að spila leikinn hér til vinstri.  Þú getur látið geimveruna stökkva með
        upp örinni og hreyft hana til vinstri og hægri með örvarlyklunum.   Þú skorar
        stig með því að safna stjörnum og ef þú skorar nógu hátt mun bakgrunnurinn
        breytast."
      CSD U3 Entertainment Sample 2: "# Svanga kanínan\\\r\n\n\\\r\nKanínan er svöng
        og hún er að leita sér að sveppum og gulrótum að éta.\\\r\n\\\r\nTil að vinna
        þarft þú að finna matarskál og safna svo minnst tíu gulrótum og fimm sveppum.\\\r\n\\\r\nGættu
        þess að forðast pöddurnar.  Maríuhænur og sniglar éta matinn þinn og býflugurnar
        munu stinga þig, svo þú missir allt!\\\r\n\\\r\nNotaðu bilslána til að stökkva.
        \ Þú getur kramið maríuhænur og snigla með því að hoppa á þau.\\\r\n\\\r\nSmelltu
        á\n\"Keyra\" til að ræsa forritið."
      CSD U3 Entertainment Sample 2_2018: "# Svanga kanínan\\\r\n\n\\\r\nKanínan er
        svöng og hún er að leita sér að sveppum og gulrótum að éta.\\\r\n\\\r\nTil
        að vinna þarft þú að finna matarskál og safna svo minnst tíu gulrótum og fimm
        sveppum.\\\r\n\\\r\nGættu þess að forðast pöddurnar.  Maríuhænur og sniglar
        éta matinn þinn og býflugurnar munu stinga þig, svo þú missir allt!\\\r\n\\\r\nNotaðu
        bilslána til að stökkva.  Þú getur kramið maríuhænur og snigla með því að
        hoppa á þau.\\\r\n\\\r\nSmelltu á\n\"Keyra\" til að ræsa forritið."
      CSD U3 Entertainment Sample 2_2019: "# Svanga kanínan\\\r\n\n\\\r\nKanínan er
        svöng og hún er að leita sér að sveppum og gulrótum að éta.\\\r\n\\\r\nTil
        að vinna þarft þú að finna matarskál og safna svo minnst tíu gulrótum og fimm
        sveppum.\\\r\n\\\r\nGættu þess að forðast pöddurnar.  Maríuhænur og sniglar
        éta matinn þinn og býflugurnar munu stinga þig, svo þú missir allt!\\\r\n\\\r\nNotaðu
        bilslána til að stökkva.  Þú getur kramið maríuhænur og snigla með því að
        hoppa á þau.\\\r\n\\\r\nSmelltu á\n\"Keyra\" til að ræsa forritið."
      CSD U3 Entertainment Sample 3: "# Teiknimyndasögur með hreyfingu\\\r\n\n\\\r\nMeð
        því að blanda saman myndum, texta og hreyfingum er hægt að skapa áhugaverðar
        teiknimyndasögur.  Smelltu á \"Keyra\" til að sjá dæmi.\\\r"
      CSD U3 Entertainment Sample 3_2018: "# Teiknimyndasögur með hreyfingu\\\r\n\n\\\r\nMeð
        því að blanda saman myndum, texta og hreyfingum er hægt að skapa áhugaverðar
        teiknimyndasögur.  Smelltu á \"Keyra\" til að sjá dæmi.\\\r"
      CSD U3 Entertainment Sample 3_2019: "# Teiknimyndasögur með hreyfingu\\\r\n\n\\\r\nMeð
        því að blanda saman myndum, texta og hreyfingum er hægt að skapa áhugaverðar
        teiknimyndasögur.  Smelltu á \"Keyra\" til að sjá dæmi.\\\r"
      CSD U3 Entertainment Sample 4: "# Stimplar\\\r\n\n\\\r\nSmelltu á\n\"Keyra\"
        til að ræsa forritið, og notaðu svo stimpilinn til að teikna myndir með einföldum
        litum og stimpluðum dýramyndum.\\\r"
      CSD U3 Entertainment Sample 4_2018: "# Stimplar\\\r\n\n\\\r\nSmelltu á\n\"Keyra\"
        til að ræsa forritið, og notaðu svo stimpilinn til að teikna myndir með einföldum
        litum og stimpluðum dýramyndum.\\\r"
      CSD U3 Entertainment Sample 4_2019: "# Stimplar\\\r\n\n\\\r\nSmelltu á\n\"Keyra\"
        til að ræsa forritið, og notaðu svo stimpilinn til að teikna myndir með einföldum
        litum og stimpluðum dýramyndum.\\\r"
      CSD U3 Functions Add Change Background: |-
        # Change the Background with the Score

        Once you've caught 10 coins it's time to celebrate. You should change the background to be something fun.

        <img src="https://images.code.org/943c67e59502334fc65a25e690076bdb-image-1475030156530.33.54 PM.png" style="float:right; height:100px">

        # Do This

        -   Use an **if-statement** and two separate functions to draw your backgrounds.
        -   Then go write your functions outside your draw loop. You get to decide what a "simple" or "crazy" background are. Have fun with it!
      CSD U3 Functions Add Change Background_2018: |-
        # Change the Background with the Score

        Once you've caught 10 coins it's time to celebrate. You should change the background to be something fun.

        # Do This

        -   Use an **if-statement** and two separate functions to draw your backgrounds.
        -   Then go write your functions outside your draw loop. You get to decide what a "simple" or "silly" background are. Have fun with it!
      CSD U3 Functions Add Change Background_2019: |-
        # Change the Background with the Score

        Once you've caught 10 coins it's time to celebrate. You should change the background to be something fun.

        # Do This

        -   Use an **if-statement** and two separate functions to draw your backgrounds.
        -   Then go write your functions outside your draw loop. You get to decide what a "simple" or "silly" background are. Have fun with it!
      CSD U3 Functions Add IsTouching: |-
        # Catch the Coin, Increase the Score

        Let's make that score change now, too, to complete the game. You'll need to be able to tell when the bunny is touching the coin and then reset it.

        # Do This

        -   Use an **if-statement** and the **isTouching** block to increase the score when the bunny catches the coin.
        -   Make sure you're **calling your function** to reset the coin once it's been caught.
        -   Play the game and **randomize the velocity of the coin** to a range that you think is fun.
      CSD U3 Functions Add IsTouching_2018: |-
        # Catch the Coin, Increase the Score

        Let's make that score change now, too, to complete the game. You'll need to be able to tell when the bunny is touching the coin and then reset it.

        # Do This

        -   Use an **if-statement** and the **isTouching** block to increase the score when the bunny catches the coin.
        -   Make sure you're **calling your function** to reset the coin once it's been caught.
        -   Play the game and **randomize the velocity of the coin** to a range that you think is fun.
      CSD U3 Functions Add IsTouching_2019: |-
        # Catch the Coin, Increase the Score

        Let's make that score change now, too, to complete the game. You'll need to be able to tell when the bunny is touching the coin and then reset it.

        # Do This

        -   Use an **if-statement** and the **isTouching** block to increase the score when the bunny catches the coin.
        -   Make sure you're **calling your function** to reset the coin once it's been caught.
        -   Play the game and **randomize the velocity of the coin** to a range that you think is fun.
      CSD U3 Functions Call Draw Loop: |-
        # Calling Functions in the Draw Loop

        You can call a function inside the draw loop, just as you would anywhere else in your code.

        # Do This

        A function that will draw a background has been created for you. A sprite has been created to move across the background.

        -   **Call the function inside the draw loop** so that the sprite appears on top of the background.
        -   **Note:** Don't create functions inside the draw loop. Make them at the bottom of your code.
      CSD U3 Functions Call Draw Loop_2018: |-
        # Calling Functions in the Draw Loop

        You can call a function inside the draw loop, just as you would anywhere else in your code.

        # Do This

        A function that will draw a background has been created for you. A sprite has been created to move across the background.

        -   **Call the function inside the draw loop** so that the sprite appears on top of the background.
        -   **Note:** Don't create functions inside the draw loop. Make them at the bottom of your code.
      CSD U3 Functions Call Draw Loop_2019: |-
        # Calling Functions in the Draw Loop

        You can call a function inside the draw loop, just as you would anywhere else in your code.

        # Do This

        A function that will draw a background has been created for you. A sprite has been created to move across the background.

        -   **Call the function inside the draw loop** so that the sprite appears on top of the background.
        -   **Note:** Don't create functions inside the draw loop. Make them at the bottom of your code.
      CSD U3 Functions Call Function: |-
        # Calling Functions

        Functions let you build your own blocks and decide what code goes inside of them. This is the command that lets you create a new function.

        ![](<https://images.code.org/2493f74065d4e642ca51429b8832e431-image-1474913839061.17.09 PM.png>)

        You use or "call" your function like any other block by using the name you gave it.

        ![](<https://images.code.org/61a6eb716e263b580ecd63fab0de7547-image-1474913770359.16.00 PM.png>)

        The blocks to create and call functions can be found in the "Functions" tab of the palette.

        ![](<https://images.code.org/a570a05be61297ee9f0d79a02df8db6e-image-1474922721897.44.36 PM.png>)

        # Do This

        This program has already created 2 functions. Only one of them is being called.

        -   **Call the second function** to reveal the full image. Use the function that is being called as a guide.
        -   **Tip:** Just as with all other blocks, spelling and capitalization are important here.
      CSD U3 Functions Call Function_2018: |-
        # Calling Functions

        Functions let you build your own blocks and decide what code goes inside of them. This is the command that lets you create a new function.

        ![](<https://images.code.org/2493f74065d4e642ca51429b8832e431-image-1474913839061.17.09 PM.png>)

        You use or "call" your function like any other block by using the name you gave it.

        ![](<https://images.code.org/61a6eb716e263b580ecd63fab0de7547-image-1474913770359.16.00 PM.png>)

        The blocks to create and call functions can be found in the "Functions" tab of the palette.

        ![](<https://images.code.org/a570a05be61297ee9f0d79a02df8db6e-image-1474922721897.44.36 PM.png>)

        # Do This

        This program has already created 2 functions. Only one of them is being called.

        -   **Call the second function** to reveal the full image. Use the function that is being called as a guide.
        -   **Tip:** Just as with all other blocks, spelling and capitalization are important here.
      CSD U3 Functions Call Function_2019: |-
        # Að kalla á föll

        Með föllum getur þú búið til eigin kubba og ákveðið hvaða kóði er settur í þá.  Þetta forrit hefur nú þegar búið til tvö föll, en það kallar aðeins á annað þeirra.

        # Gerðu þetta

        -   **Kallaði á hitt fallið** til að birta alla myndina. Notaðu fallið sem verið er að kalla á sem fyrirmynd.
        -   **Ábending:** Eins og gildir um aðra kubba þá er stafsetning og notkun há- og lágstafa mikilvæg hér.
      CSD U3 Functions Create Function: |-
        # Creating Functions to Organize Code

        In Game Lab all the action is happening in the draw loop, but too much complex code makes it really confusing to read. To keep your draw loop easy to read, use functions for larger chunks of code. You can call them inside the draw loop and define them below. This is a really good example of using **abstraction** to think about problems at a high level and worry about details later.

        <img src="https://images.code.org/1a5beeaad6e55c5b27a43604be4f039a-image-1475199750468.42.07 PM.png" style="float:right;width:150px">

        # Do This

        This program should draw a daytime scene or a nighttime scene, depending on the location of the mouse. The draw loop describes what needs to happen but one of the functions hasn't been written yet.

        -   **Write the `drawNight` function** which has been created but is empty.
        -   Hint: Look at the picture to the right for how your night image should look. Can you use the `drawDay` function to help you at all?
      CSD U3 Functions Create Function_2018: |-
        # Creating Functions to Organize Code

        In Game Lab all the action is happening in the draw loop, but too much complex code makes it really confusing to read. To keep your draw loop easy to read, use functions for larger chunks of code. You can call them inside the draw loop and define them below. This is a really good example of using **abstraction** to think about problems at a high level and worry about details later.

        <img src="https://images.code.org/1a5beeaad6e55c5b27a43604be4f039a-image-1475199750468.42.07 PM.png" style="float:right;width:150px">

        # Do This

        This program should draw a daytime scene or a nighttime scene, depending on the location of the mouse. The draw loop describes what needs to happen but one of the functions hasn't been written yet.

        -   **Write the `drawNight` function** which has been created but is empty.
        -   Hint: Look at the picture to the right for how your night image should look. Can you use the `drawDay` function to help you at all?
      CSD U3 Functions Create Function_2019: |-
        # Creating Functions to Organize Code

        In Game Lab all the action is happening in the draw loop, but too much complex code makes it really confusing to read. To keep your draw loop easy to read, use functions for larger chunks of code. You can call them inside the draw loop and define them below. This is a really good example of using **abstraction** to think about problems at a high level and worry about details later.

        <img src="https://images.code.org/1a5beeaad6e55c5b27a43604be4f039a-image-1475199750468.42.07 PM.png" style="float:right;width:150px">

        # Do This

        This program should draw a daytime scene or a nighttime scene, depending on the location of the mouse. The draw loop describes what needs to happen but one of the functions hasn't been written yet.

        -   **Write the `drawNight` function** which has been created but is empty.
        -   Hint: Look at the picture to the right for how your night image should look. Can you use the `drawDay` function to help you at all?
      CSD U3 Functions Order Functions: |-
        # Reordering Code

        Placing code inside functions makes it easy to read and make changes to. Good names for functions indicate what your program is doing to a reader. You can call your functions in a different order to quickly make significant changes to how your program runs.

        # Do This

        This program has already created 4 functions that draw parts of a scene. Unfortunately it's not coming out right.

        -   **Read the 4 functions** to know what they do
        -   **Call the functions** in an order that draws the scene in the way that looks best to you
      CSD U3 Functions Order Functions_2018: |-
        # Reordering Code

        Placing code inside functions makes it easy to read and make changes to. Good names for functions indicate what your program is doing to a reader. You can call your functions in a different order to quickly make significant changes to how your program runs.

        # Do This

        This program has already created 4 functions that draw parts of a scene. Unfortunately it's not coming out right.

        -   **Read the 4 functions** to know what they do
        -   **Call the functions** in an order that draws the scene in the way that looks best to you
      CSD U3 Functions Order Functions_2019: |-
        # Reordering Code

        Placing code inside functions makes it easy to read and make changes to. Good names for functions indicate what your program is doing to a reader. You can call your functions in a different order to quickly make significant changes to how your program runs.

        # Do This

        This program has already created 4 functions that draw parts of a scene. Unfortunately it's not coming out right.

        -   **Read the 4 functions** to know what they do
        -   **Call the functions** in an order that draws the scene in the way that looks best to you
      CSD U3 Functions Randomize Sprite: |-
        # Making Changes to Functions

        A nice benefit of using functions to remove repeated code is that you can now easily make changes to multiple places in your code. Just change how you create the functions, and your program will now use the new code everywhere your function is called.

        # Do This

        Make changes to the `setFlyer` function so that the flyer starts at a random Y location between 0 and 400, and moves at a random velocity every time he is reset.
      CSD U3 Functions Randomize Sprite_2018: |-
        # Making Changes to Functions

        A nice benefit of using functions to remove repeated code is that you can now easily make changes to multiple places in your code. Just change how you create the functions, and your program will now use the new code everywhere your function is called.

        # Do This

        Make changes to the `setFlyer` function so that the flyer starts at a random Y location between 0 and 400, and moves at a random velocity every time he is reset.
      CSD U3 Functions Randomize Sprite_2019: |-
        # Making Changes to Functions

        A nice benefit of using functions to remove repeated code is that you can now easily make changes to multiple places in your code. Just change how you create the functions, and your program will now use the new code everywhere your function is called.

        # Do This

        Make changes to the `setFlyer` function so that the flyer starts at a random Y location between 0 and 400, and moves at a random velocity every time he is reset.
      CSD U3 Functions Reset Sprite: |-
        # Calling Functions Multiple Times

        You'll often want to use the same code at many places in your program. Once you've created a function you can call it as many times as you like.

        # Do This

        This code creates a sprite that moves across the screen once. How can you make it go back across the screen?

        -   **Note:** The function is already called once at the beginning of your program
        -   Read the condition of the **if-statement** inside the draw loop. Why do you think it's there?
        -   Use this if-statement and the function written for you to make the sprite move across the screen multiple times.
      CSD U3 Functions Reset Sprite_2018: |-
        # Calling Functions Multiple Times

        You'll often want to use the same code at many places in your program. Once you've created a function you can call it as many times as you like.

        # Do This

        This code creates a sprite that moves across the screen once. How can you make it go back across the screen?

        -   **Note:** The function is already called once at the beginning of your program
        -   Read the condition of the **if-statement** inside the draw loop. Why do you think it's there?
        -   Use this if-statement and the function written for you to make the sprite move across the screen multiple times.
      CSD U3 Functions Reset Sprite_2019: |-
        # Calling Functions Multiple Times

        You'll often want to use the same code at many places in your program. Once you've created a function you can call it as many times as you like.

        # Do This

        This code creates a sprite that moves across the screen once. How can you make it go back across the screen?

        -   **Note:** The function is already called once at the beginning of your program
        -   Read the condition of the **if-statement** inside the draw loop. Why do you think it's there?
        -   Use this if-statement and the function written for you to make the sprite move across the screen multiple times.
      CSD U3 Functions Write Reset: |-
        # Write Your Own Function

        Time to practice writing functions of your own. This is a very simple game in which coins fall from the sky and the bunny tries to catch them. All you need to do is write the function that sets up the coin.

        # Do This

        -   **Read and run the code** that already exists to make sure you know how it works.
        -   **Write the code for the `setCoin`** function to make the coin fall from the sky.
        -   You can go look at some of the previous levels if you need help.
      CSD U3 Functions Write Reset_2018: |-
        # Write Your Own Function

        Time to practice writing functions of your own. This is a very simple game in which coins fall from the sky and the bunny tries to catch them. All you need to do is write the function that sets up the coin.

        # Do This

        -   **Read and run the code** that already exists to make sure you know how it works.
        -   **Write the code for the `setCoin`** function to make the coin fall from the sky.
        -   You can go look at some of the previous levels if you need help.
      CSD U3 Functions Write Reset_2019: |-
        # Write Your Own Function

        Time to practice writing functions of your own. This is a very simple game in which coins fall from the sky and the bunny tries to catch them. All you need to do is write the function that sets up the coin.

        # Do This

        -   **Read and run the code** that already exists to make sure you know how it works.
        -   **Write the code for the `setCoin`** function to make the coin fall from the sky.
        -   You can go look at some of the previous levels if you need help.
      CSD U3 If Else: |-
        # When to Provide a Fallback

        The else clause is useful as a fallback to the main condition that you're checking - that is, if you _care_ what happens when your primary condition is `false`, you should provide an else clause to take care of it.

        <img src="https://images.code.org/730a895b50375781e72c95f5fa21d09d-image-1477681109870.gif" style="float:right;">

        # Do This

        Click "Run" to see the swarm of bees created for you and a flower on the left side of the screen. Make the swarm of bees **appear when the mouse is near the flower** (on the left side of the screen) and **disappear when the mouse is away from the flower** (on the right side of the screen). Look at the example on the right.

        -   Add an `if else` statement after you update the position of the bees.
        -   In the input of the if use a boolean to check if the x position of the mouse is on the side of the screen with the flower.
        -   Set the `visible` property of each bee inside both the if and else statements appropriately to make the bees only show near the flower.
      CSD U3 If Else predict question: |-
        # Ef/annars spádómar

        Lestu í gegnum þetta forrit og taktu sérstaklega eftir `if/else` kubbnum í línu 10.  Ræddu eftirfarandi spurningar við félaga þinn og skrifaðu niður hvað þið haldið að muni gerast og keyrið svo kóðann til að sjá hvað forritið gerir.

        -   Hvað gerist þegar þú ýtir á bilslána?
        -   Hvað gerist þegar þú ýtir **ekki** á bilslána?
      CSD U3 If Else_2018: |-
        # When to Provide a Fallback

        The else clause is useful as a fallback to the main condition that you're checking - that is, if you _care_ what happens when your primary condition is `false`, you should provide an else clause to take care of it.

        <img src="https://images.code.org/730a895b50375781e72c95f5fa21d09d-image-1477681109870.gif" style="float:right;">

        # Do This

        Click "Run" to see the swarm of bees created for you and a flower on the left side of the screen. Make the swarm of bees **appear when the mouse is near the flower** (on the left side of the screen) and **disappear when the mouse is away from the flower** (on the right side of the screen). Look at the example on the right.

        -   Add an `if else` statement after you update the position of the bees.
        -   In the input of the if use a boolean to check if the x position of the mouse is on the side of the screen with the flower.
        -   Set the `visible` property of each bee inside both the if and else statements appropriately to make the bees only show near the flower.
      CSD U3 If Else_2019: |-
        # Hvenær á að hafa "Else"

        Else klausan er gagnleg þegar þú vilt láta forritið þitt gera eitt þegar skilyrðið er satt og _eitthvað annað_ þegar skilyrðið er ósatt.

        <img src="https://images.code.org/730a895b50375781e72c95f5fa21d09d-image-1477681109870.gif" style="float:right;">

        # Gerðu þetta

        Smelltu á "Keyra" til að sjá býflugur sem hafa verið gerðar fyrir þig og blóm vinstra megin á skjánum. Láttu býflugurnar **birtast þegar músin er nálægt blóminu** (vinstra megin á skjánum) og **hverfa þegar músin er fjarri blóminu** (hægra megin á skjánum). Skoðaðu dæmið til hægri.

        -   Bættu við `if else` yrðingu eftir að þú uppfærir stað býfluganna.
        -   Notaðu boole yrðingu í Inntaki "if" til að athuga hvort x-hnit músarinnar séu þeim megin sem blómið er.
        -   Stilltu sýnileika hverrar býflugu með `visible` eiginleika hennar í bæði "if" og "else" yrðingunum þannig að býflugurnar sjáist aðeins þegar þær eru nálægt blóminu.
      CSD U3 Input Fish: "# Fiskar með örvum\\\r\n\n\\\r\nFiskarnir eru komnir aftur.
        Getur þú látið fisk hreyfast til vinstri en aðeins þegar ýtt er á vinstri
        örvarlykilinn?\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\n\n-   Bættu við yrðingu
        sem athugar hvort ýtt er á vinstri örina.\\\r\n-   Færðu skipanirnar sem færa
        fiskinn inn í yrðinguna."
      CSD U3 Input Fish_2018: "# Fiskar með örvum\\\r\n\n\\\r\nFiskarnir eru komnir
        aftur. Getur þú látið fisk hreyfast til vinstri en aðeins þegar ýtt er á vinstri
        örvarlykilinn?\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\n\n-   Bættu við yrðingu
        sem athugar hvort ýtt er á vinstri örina.\\\r\n-   Færðu skipanirnar sem færa
        fiskinn inn í yrðinguna."
      CSD U3 Input Fish_2019: "# Fiskar með örvum\\\r\n\n\\\r\nFiskarnir eru komnir
        aftur. Getur þú látið fisk hreyfast til vinstri en aðeins þegar ýtt er á vinstri
        örvarlykilinn?\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\n\n-   Bættu við yrðingu
        sem athugar hvort ýtt er á vinstri örina.\\\r\n-   Færðu skipanirnar sem færa
        fiskinn inn í yrðinguna."
      CSD U3 Input Gears: "# Tannhjól með skilyrðum\\\r\n\n\\\r\nVið skulum láta tannhjólin
        snúast en bara ef bilslánni er haldið niðri.\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\n\n-
        \  Bættu við `ef` yrðingu.\\\r\n-   Notaðu `keyDown` sem inntak í `ef` yrðingunni
        til að athuga hvort ýtt er á bilslána.\\\r\n-   Færðu kóðann, sem lætur tannhjólin
        snúast, inn í `ef` yrðinguna."
      CSD U3 Input Gears_2018: "# Tannhjól með skilyrðum\\\r\n\n\\\r\nVið skulum láta
        tannhjólin snúast en bara ef bilslánni er haldið niðri.\\\r\n\\\r\n\n# Gerðu
        þetta\\\r\n\n\\\r\n\n-   Bættu við `ef` yrðingu.\\\r\n-   Notaðu `keyDown`
        sem inntak í `ef` yrðingunni til að athuga hvort ýtt er á bilslána.\\\r\n-
        \  Færðu kóðann, sem lætur tannhjólin snúast, inn í `ef` yrðinguna."
      CSD U3 Input Gears_2019: "# Tannhjól með skilyrðum\\\r\n\n\\\r\nVið skulum láta
        tannhjólin snúast en bara ef bilslánni er haldið niðri.\\\r\n\\\r\n\n# Gerðu
        þetta\\\r\n\n\\\r\n\n-   Bættu við `ef` yrðingu.\\\r\n-   Notaðu `keyDown`
        sem inntak í `ef` yrðingunni til að athuga hvort ýtt er á bilslána.\\\r\n-
        \  Færðu kóðann, sem lætur tannhjólin snúast, inn í `ef` yrðinguna."
      CSD U3 Interactive Card Background: |-
        # Laying Out Your Background

        Before beginning this project, you should have already completed the Interactive Card Planning activity, and you'll want to have that paper with you as you develop your program. Preparation is one of the **most important** elements of successfully creating a program!

        # Do This

        Refer to your planning activity sheet to help you lay out the shapes that will become the background to your card.

        -   First, figure out what the lowest layer in your image is (this should use the `background()` block) and add it to the very top of the draw loop.
        -   Next, layer each additional drawing block in the order you want them to appear in the stack.
        -   Finally, add a comment to the top of this section of code to describe what it does, and if you have any particularly complicated chunks of code within (such as code to draw a tree or a house), add a descriptive comment to that as well.

        **Challenge:** Can you use variables or `randomNumber()` to add some subtle animation to your background layer?
      CSD U3 Interactive Card Background_2018: |-
        # Laying Out Your Background

        Before beginning this project, you should have already completed the Interactive Card Planning activity, and you'll want to have that paper with you as you develop your program. Preparation is one of the **most important** elements of successfully creating a program!

        # Do This

        Refer to your planning activity sheet to help you lay out the shapes that will become the background to your card.

        -   First, figure out what the lowest layer in your image is (this should use the `background()` block) and add it to the very top of the draw loop.
        -   Next, layer each additional drawing block in the order you want them to appear in the stack.
        -   Finally, add a comment to the top of this section of code to describe what it does, and if you have any particularly complicated chunks of code within (such as code to draw a tree or a house), add a descriptive comment to that as well.

        **Challenge:** Can you use variables or `randomNumber()` to add some subtle animation to your background layer?
      CSD U3 Interactive Card Background_2019: |-
        # Laying Out Your Background

        Before beginning this project, you should have already completed the Interactive Card Planning activity, and you'll want to have that paper with you as you develop your program. Preparation is one of the **most important** elements of successfully creating a program!

        # Do This

        Refer to your planning activity sheet to help you lay out the shapes that will become the background to your card.

        -   First, figure out what the lowest layer in your image is (this should use the `background()` block) and add it to the very top of the draw loop.
        -   Next, layer each additional drawing block in the order you want them to appear in the stack.
        -   Finally, add a comment to the top of this section of code to describe what it does, and if you have any particularly complicated chunks of code within (such as code to draw a tree or a house), add a descriptive comment to that as well.

        **Challenge:** Can you use variables or `randomNumber()` to add some subtle animation to your background layer?
      CSD U3 Interactive Card Exemplar: |-
        # Example Project

        Run the program a few times and answer the following questions:

        1.  Which elements appear to use drawing commands?

        2.  Which elements appear to be Sprites?

        3.  For each Sprite, which properties are being updated?

        4.  Where do you see conditionals being used?

        5.  Are there elements that you don’t understand?
      CSD U3 Interactive Card Exemplar_2018: |-
        # Example Project

        Run the program a few times and answer the following questions:

        1.  Which elements appear to use drawing commands?

        2.  Which elements appear to be Sprites?

        3.  For each Sprite, which properties are being updated?

        4.  Where do you see conditionals being used?

        5.  Are there elements that you don’t understand?
      CSD U3 Interactive Card Exemplar_2019: |-
        # Example Project

        Run the program a few times and answer the following questions:

        1.  Which elements appear to use drawing commands?

        2.  Which elements appear to be Sprites?

        3.  For each Sprite, which properties are being updated?

        4.  Where do you see conditionals being used?

        5.  Are there elements that you don’t understand?
      CSD U3 Interactive Card Final: |-
        # Finishing Touches

        Now's your chance to put some finishing touches on your card. We've included some new blocks that you haven't seen before, so take some time to look around and try out some new blocks.

        # Do This

        Consider adding any of the following to finish up your card:

        -   Text
        -   Additional images for your sprites
        -   Subtle animation in the background
        -   Sound effects  (Can you figure out now to do this?)
        -   More ways for a user to interact with your card
      CSD U3 Interactive Card Final_2018: |-
        # Finishing Touches

        Now's your chance to put some finishing touches on your card. We've included some new blocks that you haven't seen before, so take some time to look around and try out some new blocks.

        # Do This

        Consider adding any of the following to finish up your card:

        -   Text
        -   Additional images for your sprites
        -   Subtle animation in the background
        -   Sound effects  (Can you figure out how to do this?)
        -   More ways for a user to interact with your card
      CSD U3 Interactive Card Final_2019: |-
        # Finishing Touches

        Now's your chance to put some finishing touches on your card. We've included some new blocks that you haven't seen before, so take some time to look around and try out some new blocks.

        # Do This

        Consider adding any of the following to finish up your card:

        -   Text
        -   Additional images for your sprites
        -   Subtle animation in the background
        -   Sound effects  (Can you figure out how to do this?)
        -   More ways for a user to interact with your card
      CSD U3 Interactive Card Other Conditionals: |-
        # Other Conditionals

        The _surprise_ in your card comes from conditionals that don't directly respond to user input, but to some other element of your card. This could be triggered by a variable that gets updated as the user interacts with your card, or a Sprite moving into a certain part of the screen.

        # Do This

        For each of the remaining items on your interactions table:

        -   Add an `if` block (or `if-else` block if you need a fallback action) inside the draw loop.
        -   Add the appropriate Boolean comparison block to the condition (eg. `<`, `>`, or `==`).
        -   Add the necessary actions inside the `if` block.

        **Challenge:** Can you create more sophisticated conditionals by nesting them or using compound booleans?
      CSD U3 Interactive Card Other Conditionals_2018: |-
        # Other Conditionals

        The _surprise_ in your card comes from conditionals that don't directly respond to user input, but to some other element of your card. This could be triggered by a variable that gets updated as the user interacts with your card, or a Sprite moving into a certain part of the screen.

        # Do This

        For each of the remaining items on your interactions table:

        -   Add an `if` block (or `if-else` block if you need a fallback action) inside the draw loop.
        -   Add the appropriate Boolean comparison block to the condition (eg. `<`, `>`, or `==`).
        -   Add the necessary actions inside the `if` block.

        **Challenge:** Can you create more sophisticated conditionals by nesting them or using compound booleans?
      CSD U3 Interactive Card Other Conditionals_2019: |-
        # Other Conditionals

        The _surprise_ in your card comes from conditionals that don't directly respond to user input, but to some other element of your card. This could be triggered by a variable that gets updated as the user interacts with your card, or a Sprite moving into a certain part of the screen.

        # Do This

        For each of the remaining items on your interactions table:

        -   Add an `if` block (or `if-else` block if you need a fallback action) inside the draw loop.
        -   Add the appropriate Boolean comparison block to the condition (eg. `<`, `>`, or `==`).
        -   Add the necessary actions inside the `if` block.

        **Challenge:** Can you create more sophisticated conditionals by nesting them or using compound booleans?
      CSD U3 Interactive Card Sprites: |-
        # Adding Sprites

        Now that you have the more static elements of your card layed out, it's time to add the Sprites. Your Sprites should provide the primary animations and interactions for your card - so feel free to get creative here and have fun.

        # Do This

        Check out the Sprites table on the back of your planning sheet. For each Sprite in your table:

        -   Initialize the Sprite at the top of your program with `createSprite()`.
        -   Find or create the image(s) for the Sprite and set it with `setAnimation()`.
        -   Inside the `draw()` loop update any Sprite properties that we will be constantly animating (we'll deal with conditionals in a minute).
      CSD U3 Interactive Card Sprites_2018: |-
        # Adding Sprites

        Now that you have the more static elements of your card layed out, it's time to add the Sprites. Your Sprites should provide the primary animations and interactions for your card - so feel free to get creative here and have fun.

        # Do This

        Check out the Sprites table on the back of your planning sheet. For each Sprite in your table:

        -   Initialize the Sprite at the top of your program with `createSprite()`.
        -   Find or create the image(s) for the Sprite and set it with `setAnimation()`.
        -   Inside the `draw()` loop update any Sprite properties that we will be constantly animating (we'll deal with conditionals in a minute).
      CSD U3 Interactive Card Sprites_2019: |-
        # Adding Sprites

        Now that you have the more static elements of your card layed out, it's time to add the Sprites. Your Sprites should provide the primary animations and interactions for your card - so feel free to get creative here and have fun.

        # Do This

        Check out the Sprites table on the back of your planning sheet. For each Sprite in your table:

        -   Initialize the Sprite at the top of your program with `createSprite()`.
        -   Find or create the image(s) for the Sprite and set it with `setAnimation()`.
        -   Inside the `draw()` loop update any Sprite properties that we will be constantly animating (we'll deal with conditionals in a minute).
      CSD U3 Interactive Card User Input: |-
        # User Input

        You've got a background, you've got Sprites, now it's time to give your user something to do!

        # Do This

        On the interactions table from your planning sheet, find all of the interactions that rely on user input (key presses and mouse movements). For each of those interactions:

        -   Add an `if` block (or `if-else` block if you need a fallback action) inside the `draw()` loop.
        -   Add the appropriate input block for your condition (such as `keyDown()` or `mouseDown()`).
        -   Add the necessary actions inside the `if` block.

        **Challenge:** Can you create more sophisticated conditionals by nesting them or using compound booleans?
      CSD U3 Interactive Card User Input_2018: |-
        # User Input

        You've got a background, you've got Sprites, now it's time to give your user something to do!

        # Do This

        On the interactions table from your planning sheet, find all of the interactions that rely on user input (key presses and mouse movements). For each of those interactions:

        -   Add an `if` block (or `if-else` block if you need a fallback action) inside the `draw()` loop.
        -   Add the appropriate input block for your condition (such as `keyDown()` or `mouseDown()`).
        -   Add the necessary actions inside the `if` block.

        **Challenge:** Can you create more sophisticated conditionals by nesting them or using compound booleans?
      CSD U3 Interactive Card User Input_2019: |-
        # User Input

        You've got a background, you've got Sprites, now it's time to give your user something to do!

        # Do This

        On the interactions table from your planning sheet, find all of the interactions that rely on user input (key presses and mouse movements). For each of those interactions:

        -   Add an `if` block (or `if-else` block if you need a fallback action) inside the `draw()` loop.
        -   Add the appropriate input block for your condition (such as `keyDown()` or `mouseDown()`).
        -   Add the necessary actions inside the `if` block.

        **Challenge:** Can you create more sophisticated conditionals by nesting them or using compound booleans?
      CSD U3 Keyboard Input Challenge: "# Áskorun\\\r\n\n_Ráðfærðu þig við kennarann
        áður en þú reynir við þessa áskorun._\\\r\n\\\r\nHér er pödduforritið sem
        þú hefur verið að vinna að í síðustu áföngum. Veldu eina eða fleiri af eftirfarandi
        áskorunum eða bættu við nýrri virkni eftir eigin höfði!\\\r\n\\\r\n\n-   Notaðu
        bilslána til stjórna öðrum eiginleikum pöddukvikans, svo sem snúningi eða
        stærð.\\\r\n-   Bættu handahófi í hreyfingar.\\\r\n-   Bættu við öðrum kvika
        og stjórnaðu honum með öðru lyklasetti (\"w\", \"a\", \"s\" og \"d\" eru oft
        valdir).\\\r\n-   Bættu formum í bakgrunninn til að gera leiksviðið áhugaverðara."
      CSD U3 Keyboard Input Challenge_2018: "# Áskorun\\\r\n\n_Ráðfærðu þig við kennarann
        áður en þú reynir við þessa áskorun._\\\r\n\\\r\nHér er pödduforritið sem
        þú hefur verið að vinna að í síðustu áföngum. Veldu eina eða fleiri af eftirfarandi
        áskorunum eða bættu við nýrri virkni eftir eigin höfði!\\\r\n\\\r\n\n-   Notaðu
        bilslána til stjórna öðrum eiginleikum pöddukvikans, svo sem snúningi eða
        stærð.\\\r\n-   Bættu handahófi í hreyfingar.\\\r\n-   Bættu við öðrum kvika
        og stjórnaðu honum með öðru lyklasetti (\"w\", \"a\", \"s\" og \"d\" eru oft
        valdir).\\\r\n-   Bættu formum í bakgrunninn til að gera leiksviðið áhugaverðara."
      CSD U3 Keyboard Input Challenge_2018_2019: "# Áskorun\\\r\n\n_Ráðfærðu þig við
        kennarann áður en þú reynir við þessa áskorun._\\\r\n\\\r\nHér er pödduforritið
        sem þú hefur verið að vinna að í síðustu áföngum. Veldu eina eða fleiri af
        eftirfarandi áskorunum eða bættu við nýrri virkni eftir eigin höfði!\\\r\n\\\r\n\n-
        \  Notaðu bilslána til stjórna öðrum eiginleikum pöddukvikans, svo sem snúningi
        eða stærð.\\\r\n-   Bættu handahófi í hreyfingar.\\\r\n-   Bættu við öðrum
        kvika og stjórnaðu honum með öðru lyklasetti (\"w\", \"a\", \"s\" og \"d\"
        eru oft valdir).\\\r\n-   Bættu formum í bakgrunninn til að gera leiksviðið
        áhugaverðara."
      CSD U3 Keypress Boolean: |-
        # Prediction - keyDown()

        The `keyDown()` block is the first of a new set of blocks that will let us get input from the user. This is the first step on our road to actually making games! See if you can predict how the `keyDown()` block works. You will **not write any code**.

        # Do This

        -   Read the program carefully.
        -   **Make a prediction about how the code will run** and write it in the box below. Be specific!
        -   Run the program.
        -   While the program is running, press the up arrow on your keyboard.
        -   Were you correct? Were you surprised? Discuss with a classmate.
      CSD U3 Keypress Boolean embed: |-
        # Prediction - keyDown()

        The `keyDown()` block is the first of a new set of blocks that will let us get input from the user. This is the first step on our road to actually making games! See if you can predict how the `keyDown()` block works. You will **not write any code**.

        # Do This

        -   Read the program carefully.
        -   **Make a prediction about how the code will run** and write it in the box below. Be specific!
        -   Run the program.
        -   While the program is running, press the up arrow on your keyboard.
        -   Were you correct? Were you surprised? Discuss with a classmate.
      CSD U3 Keypress Boolean embed-2018: |-
        # Prediction - keyDown()

        The `keyDown()` block is the first of a new set of blocks that will let us get input from the user. This is the first step on our road to actually making games! See if you can predict how the `keyDown()` block works. You will **not write any code**.

        # Do This

        -   Read the program carefully.
        -   **Make a prediction about how the code will run** and write it in the box below. Be specific!
        -   Run the program.
        -   While the program is running, press the space bar on your keyboard.
        -   Were you correct? Were you surprised? Discuss with a classmate.
      CSD U3 Keypress Boolean embed-2018_2019: |-
        # Prediction - keyDown()

        The `keyDown()` block is the first of a new set of blocks that will let us get input from the user. This is the first step on our road to actually making games! See if you can predict how the `keyDown()` block works. You will **not write any code**.

        # Do This

        -   Read the program carefully.
        -   **Make a prediction about how the code will run** and write it in the box below. Be specific!
        -   Run the program.
        -   While the program is running, press the space bar on your keyboard.
        -   Were you correct? Were you surprised? Discuss with a classmate.
      CSD U3 Keypress Watchers Predict: |-
        # Make a Prediction: User Input

        So far you've used `keyDown` as a way to let users control your programs, but that's just one of many ways to take input. In fact, just one of many ways _to detect keypresses_! Depending on how you want to react to a keypress, there are a few other blocks you might want to use.

        Read the program and predict below what will happen when you press each of the up, down, left, and right arrows.

        After making your prediction, run the code and write down or share with your neighbor your observations.

        -   What seems to be the difference between `keyDown()`, `keyWentDown()`, and `keyWentUp()`?
        -   What do you think the exclamation mark (`!`) on line 10 does?
        -   How might you use the different keypress blocks in a game?
      CSD U3 Keypress Watchers Predict_2018: |-
        # Make a Prediction: User Input

        So far you've used `keyDown` as a way to let users control your programs, but that's just one of many ways to take input. In fact, just one of many ways _to detect keypresses_! Depending on how you want to react to a keypress, there are a few other blocks you might want to use.

        Read the program and predict below what will happen when you press each of the up, down, left, and right arrows.

        After making your prediction, run the code and write down or share with your neighbor your observations.

        -   What seems to be the difference between `keyDown()`, `keyWentDown()`, and `keyWentUp()`?
        -   What do you think the exclamation mark (`!`) on line 10 does?
        -   How might you use the different keypress blocks in a game?
      CSD U3 Keypress Watchers Predict_2019: |-
        # Make a Prediction: User Input

        So far you've used `keyDown` as a way to let users control your programs, but that's just one of many ways to take input. In fact, just one of many ways _to detect keypresses_! Depending on how you want to react to a keypress, there are a few other blocks you might want to use.

        Read the program and predict below what will happen when you press each of the up, down, left, and right arrows.

        After making your prediction, run the code and write down or share with your neighbor your observations.

        -   What seems to be the difference between `keyDown()`, `keyWentDown()`, and `keyWentUp()`?
        -   What do you think the exclamation mark (`!`) on line 10 does?
        -   How might you use the different keypress blocks in a game?
      CSD U3 Keypress Watchers_2018: |-
        # More Ways to Get User Input

        So far you've used `keyDown` as a way to let users control your programs, but that's just one of many ways to take input. In fact, just one of many ways _to detect keypresses_! Depending on how you want to react to a keypress, there are a few other blocks you might want to use.

        # Do This

        You will **not write any code** in this program.

        -   Read the program and see if you can guess what will happen.
        -   While the program is running, press the arrow keys and observe how the screen responds.
        -   Write down or share with your neighbor your observations.
            -   What seems to be the difference between `keyDown()`, `keyWentDown()`, and `keyWentUp()`?
            -   What do you think the exclamation mark (`!`) on line 10 does?
            -   How might you use the different keypress blocks in a game?
      CSD U3 Keypress Watchers_2019: |-
        # More Ways to Get User Input

        So far you've used `keyDown` as a way to let users control your programs, but that's just one of many ways to take input. In fact, just one of many ways _to detect keypresses_! Depending on how you want to react to a keypress, there are a few other blocks you might want to use.

        # Do This

        You will **not write any code** in this program.

        -   Read the program and see if you can guess what will happen.
        -   While the program is running, press the arrow keys and observe how the screen responds.
        -   Write down or share with your neighbor your observations.
            -   What seems to be the difference between `keyDown()`, `keyWentDown()`, and `keyWentUp()`?
            -   What do you think the exclamation mark (`!`) on line 10 does?
            -   How might you use the different keypress blocks in a game?
      CSD U3 L11 Freeplay: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur lært
        til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú smellt
        á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L11 Freeplay_2018: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur
        lært til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú
        smellt á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L11 Freeplay_2019: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur
        lært til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú
        smellt á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L12 Freeplay: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur lært
        til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú smellt
        á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L12 Freeplay_2018: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur
        lært til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú
        smellt á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L12 Freeplay_2019: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur
        lært til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú
        smellt á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L13 Freeplay: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur lært
        til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú smellt
        á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L13 Freeplay_2018: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur
        lært til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú
        smellt á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L13 Freeplay_2019: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur
        lært til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú
        smellt á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L15 Freeplay: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur lært
        til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú smellt
        á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L15 Freeplay_2018: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur
        lært til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú
        smellt á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L15 Freeplay_2019: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur
        lært til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú
        smellt á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L16 Freeplay: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur lært
        til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú smellt
        á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L16 Freeplay_2018: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur
        lært til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú
        smellt á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L16 Freeplay_2019: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur
        lært til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú
        smellt á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L17 Freeplay: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur lært
        til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú smellt
        á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L17 Freeplay_2018: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur
        lært til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú
        smellt á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L17 Freeplay_2019: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur
        lært til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú
        smellt á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L18 Freeplay: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur lært
        til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú smellt
        á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L18 Freeplay_2018: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur
        lært til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú
        smellt á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L18 Freeplay_2019: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur
        lært til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú
        smellt á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L19 Freeplay: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur lært
        til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú smellt
        á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L19 Freeplay_2018: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur
        lært til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú
        smellt á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L19 Freeplay_2019: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur
        lært til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú
        smellt á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L3 Freeplay: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur lært
        til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú smellt
        á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L3 Freeplay_2018: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur
        lært til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú
        smellt á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L3 Freeplay_2019: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur
        lært til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú
        smellt á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L4 Freeplay: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur lært
        til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú smellt
        á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L4 Freeplay_2018: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur
        lært til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú
        smellt á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L4 Freeplay_2019: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur
        lært til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú
        smellt á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L5 Freeplay: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur lært
        til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú smellt
        á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L5 Freeplay_2018: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur
        lært til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú
        smellt á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L5 Freeplay_2019: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur
        lært til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú
        smellt á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L6 Freeplay: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur lært
        til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú smellt
        á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L6 Freeplay_2018: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur
        lært til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú
        smellt á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L6 Freeplay_2019: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur
        lært til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú
        smellt á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L7 Freeplay: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur lært
        til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú smellt
        á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L7 Freeplay_2018: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur
        lært til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú
        smellt á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L7 Freeplay_2019: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur
        lært til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú
        smellt á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L9 Freeplay: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur lært
        til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú smellt
        á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L9 Freeplay_2018: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur
        lært til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú
        smellt á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 L9 Freeplay_2019: "# Frjáls æfing\\\r\n\n\\\r\nNotaðu það sem þú hefur
        lært til að skapa eitthvað sem þig langar til.  Þegar því er lokið getur þú
        smellt á  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43\nPM.png>)
        \ til að senda vini sköpunarverkið eða á ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50\nPM.png>)
        til að senda það í Verkefnagalleríið þitt."
      CSD U3 Mouse Input Bee 1: "<img src=\"https://images.code.org/d2092b4f2debc336f963d48bd6cf4973-image-1477681020928.gif\"\nstyle=\"float:right\">\\\r\n\\\r\n\n#
        Mouse X og Y\\\r\n\n\\\r\nEin af einföldustu aðferðunum við að lesa inntak
        er einfaldlega að láta kvika elta stað músarinnar.\n**Þú getur fundið út x
        og y stað músarinnar með `World.mouseX` og `World.mouseY`.**  Þetta er líkt
        því sem þú lærðir um eiginleika kvika. `World` er heitið á hlutnum. `mouseX`
        og `mouseY` eru heiti eiginleika.\\\r\n\\\r\n\n# \n\nGerðu þetta\\\r\n\\\r\nÞú
        ætlar að láta býflugukvika elta músina um leiksvæðið.\\\r\n\\\r\n\n-   Mynd
        býflugunnar hefur þegar verið sett inn á hreyfingarsíðuna.\\\r\n-   Búðu til
        kvika fyrir býflugu sem er teiknaður í miðjan gluggann.\\\r\n-   \\*\n    Uppfærðu,
        innan teiknilykkjunnar, stað kvikans svo hann sé sá sami og staður músarinnar:\\\r\n
        \   \\\\t\\* Láttu x stað kvikans fá gildi jafnt og `World.mouseX`.\\\r\n
        \   \\*\n    Láttu y stað kvikans fá gildi jafnt og `World.mouseY`.\\\r\n-
        \  Keyrðu forritið til að prófa þetta.\\\r"
      CSD U3 Mouse Input Bee 1_2018: "<img src=\"https://images.code.org/d2092b4f2debc336f963d48bd6cf4973-image-1477681020928.gif\"\nstyle=\"float:right\">\\\r\n\\\r\n\n#
        Mouse X og Y\\\r\n\n\\\r\nEin af einföldustu aðferðunum við að lesa inntak
        er einfaldlega að láta kvika elta stað músarinnar.\n**Þú getur fundið út x
        og y stað músarinnar með `World.mouseX` og `World.mouseY`.**  Þetta er líkt
        því sem þú lærðir um eiginleika kvika. `World` er heitið á hlutnum. `mouseX`
        og `mouseY` eru heiti eiginleika.\\\r\n\\\r\n\n# \n\nGerðu þetta\\\r\n\\\r\nÞú
        ætlar að láta býflugukvika elta músina um leiksvæðið.\\\r\n\\\r\n\n-   Mynd
        býflugunnar hefur þegar verið sett inn á hreyfingarsíðuna.\\\r\n-   Búðu til
        kvika fyrir býflugu sem er teiknaður í miðjan gluggann.\\\r\n-   \\*\n    Uppfærðu,
        innan teiknilykkjunnar, stað kvikans svo hann sé sá sami og staður músarinnar:\\\r\n
        \   \\\\t\\* Láttu x stað kvikans fá gildi jafnt og `World.mouseX`.\\\r\n
        \   \\*\n    Láttu y stað kvikans fá gildi jafnt og `World.mouseY`.\\\r\n-
        \  Keyrðu forritið til að prófa þetta.\\\r"
      CSD U3 Mouse Input Bee 1_2019: "<img src=\"https://images.code.org/d2092b4f2debc336f963d48bd6cf4973-image-1477681020928.gif\"\nstyle=\"float:right\">\\\r\n\\\r\n\n#
        Mouse X og Y\\\r\n\n\\\r\nEin af einföldustu aðferðunum við að lesa inntak
        er einfaldlega að láta kvika elta stað músarinnar.\n**Þú getur fundið út x
        og y stað músarinnar með `World.mouseX` og `World.mouseY`.**  Þetta er líkt
        því sem þú lærðir um eiginleika kvika. `World` er heitið á hlutnum. `mouseX`
        og `mouseY` eru heiti eiginleika.\\\r\n\\\r\n\n# \n\nGerðu þetta\\\r\n\\\r\nÞú
        ætlar að láta býflugukvika elta músina um leiksvæðið.\\\r\n\\\r\n\n-   Mynd
        býflugunnar hefur þegar verið sett inn á hreyfingarsíðuna.\\\r\n-   Búðu til
        kvika fyrir býflugu sem er teiknaður í miðjan gluggann.\\\r\n-   \\*\n    Uppfærðu,
        innan teiknilykkjunnar, stað kvikans svo hann sé sá sami og staður músarinnar:\\\r\n
        \   \\\\t\\* Láttu x stað kvikans fá gildi jafnt og `World.mouseX`.\\\r\n
        \   \\*\n    Láttu y stað kvikans fá gildi jafnt og `World.mouseY`.\\\r\n-
        \  Keyrðu forritið til að prófa þetta.\\\r"
      CSD U3 Mouse Input Bee 2: "# Handahóf kringum punkt\\\r\n\n\\\r\n<img\nsrc=\"https://images.code.org/d124946bb9e01a3623078c2a87beea8c-image-1477681483067.gif\"\nstyle=\"float:right\">\\\r\n\\\r\nÞar
        sem þú getur nú látið býfluguna elta músina, skulum við láta hóp af býflugum
        fljúga nálægt músinni eins og sýnt er í myndinni hægra megin.  Til að gera
        þetta þarft þú að **bæta handahófstölu á bilinu -50 til 50 við `mouseX` eða
        `mouseY`.**  \\\r\n\\\r\n\n# Gerðu þetta\\\r\n\nÞú ert þegar með einn býflugukvika
        sem eltir músina.\\\r\n\\\r\n\n-   **Bættu við 3 býflugum** sem elta músina\\\r\n-
        \  Uppfærðu x og y staðina svo þeir séu í handahófsfjarlægð frá músinni\\\r\n
        \   \\\\t\\* Bættu handahófstölu á bilinu -50 til 50 við `World.mouseX`\n
        \   og `World.mouseY` \\\r\n-   Ef hreyfingin er of hröð, getur þú notað `World.frameRate`
        kubbinn til að hægja á henni og finna heppilegustu myndtíðnina\\\r"
      CSD U3 Mouse Input Bee 2_2018: "# Handahóf kringum punkt\\\r\n\n\\\r\n<img\nsrc=\"https://images.code.org/d124946bb9e01a3623078c2a87beea8c-image-1477681483067.gif\"\nstyle=\"float:right\">\\\r\n\\\r\nÞar
        sem þú getur nú látið býfluguna elta músina, skulum við láta hóp af býflugum
        fljúga nálægt músinni eins og sýnt er í myndinni hægra megin.  Til að gera
        þetta þarft þú að **bæta handahófstölu á bilinu -50 til 50 við `mouseX` eða
        `mouseY`.**  \\\r\n\\\r\n\n# Gerðu þetta\\\r\n\nÞú ert þegar með einn býflugukvika
        sem eltir músina.\\\r\n\\\r\n\n-   **Bættu við 3 býflugum** sem elta músina\\\r\n-
        \  Uppfærðu x og y staðina svo þeir séu í handahófsfjarlægð frá músinni\\\r\n
        \   \\\\t\\* Bættu handahófstölu á bilinu -50 til 50 við `World.mouseX`\n
        \   og `World.mouseY` \\\r\n-   Ef hreyfingin er of hröð, getur þú notað `World.frameRate`
        kubbinn til að hægja á henni og finna heppilegustu myndtíðnina\\\r"
      CSD U3 Mouse Input Bee 2_2019: "# Handahóf kringum punkt\\\r\n\n\\\r\n<img\nsrc=\"https://images.code.org/d124946bb9e01a3623078c2a87beea8c-image-1477681483067.gif\"\nstyle=\"float:right\">\\\r\n\\\r\nÞar
        sem þú getur nú látið býfluguna elta músina, skulum við láta hóp af býflugum
        fljúga nálægt músinni eins og sýnt er í myndinni hægra megin.  Til að gera
        þetta þarft þú að **bæta handahófstölu á bilinu -50 til 50 við `mouseX` eða
        `mouseY`.**  \\\r\n\\\r\n\n# Gerðu þetta\\\r\n\nÞú ert þegar með einn býflugukvika
        sem eltir músina.\\\r\n\\\r\n\n-   **Bættu við 3 býflugum** sem elta músina\\\r\n-
        \  Uppfærðu x og y staðina svo þeir séu í handahófsfjarlægð frá músinni\\\r\n
        \   \\\\t\\* Bættu handahófstölu á bilinu -50 til 50 við `World.mouseX`\n
        \   og `World.mouseY` \\\r\n-   Ef hreyfingin er of hröð, getur þú notað `World.frameRate`
        kubbinn til að hægja á henni og finna heppilegustu myndtíðnina\\\r"
      CSD U3 Movement Fish: |-
        <img src="https://images.code.org/7852ab38a8222ee827edeff2767e8efd-image-1492037897236.gif" style="float: right; margin-left: 20px;">

        # Hreyfimynd með fiskum

        Notaðu teljaramynstrið til að láta alla þrjá fiskana hreyfast eins og í myndinni hægra megin. Blái fiskurinn ætti að hafa hröðustu hreyfinguna, síðan sá appelsínuguli, og sá græni ætti að vera hægastur.
      CSD U3 Movement Fish challenge_2018: |-
        # More fish!

        This time, try updating the the rotation of each fish as it moves to make it look even more like it is swimming.  You can also try adding extra features, such as bubbles that rise up through the water.
      CSD U3 Movement Fish challenge_2019: |-
        # More fish!

        This time, try updating the the rotation of each fish as it moves to make it look even more like it is swimming.  You can also try adding extra features, such as bubbles that rise up through the water.
      CSD U3 Movement Fish_2018: |-
        <img src="https://images.code.org/7852ab38a8222ee827edeff2767e8efd-image-1492037897236.gif" style="float: right; margin-left: 20px;">

        # Hreyfimynd með fiskum

        Notaðu teljaramynstrið til að láta alla þrjá fiskana hreyfast eins og í myndinni hægra megin. Blái fiskurinn ætti að hafa hröðustu hreyfinguna, síðan sá appelsínuguli, og sá græni ætti að vera hægastur.
      CSD U3 Movement Fish_2019: |-
        <img src="https://images.code.org/7852ab38a8222ee827edeff2767e8efd-image-1492037897236.gif" style="float: right; margin-left: 20px;">

        # Hreyfimynd með fiskum

        Notaðu teljaramynstrið til að láta alla þrjá fiskana hreyfast eins og í myndinni hægra megin. Blái fiskurinn ætti að hafa hröðustu hreyfinguna, síðan sá appelsínuguli, og sá græni ætti að vera hægastur.
      CSD U3 Movement Gears: "<img src=\"https://images.code.org/eac110e64ccad62482c82d4ef66f237b-image-1465518920408.gif\"\nstyle=\"width:200px;
        float:right; margin-left: 20px;\">\\\r\n\\\r\n\n# Stefna snúnings\\\r\n\n\\\r\nÞegar
        þú notar teljaramynstrið fyrir eiginleikann `rotation` ásamt samlagningu,
        mun hluturinn alltaf snúast réttsælis. En stundum er nauðsynlegt að láta kvika
        snúast í hina áttina. Það er gert með því að nota frádrátt!\\\r\n\\\r\n\n#
        Gerðu þetta\\\r\n\n\\\r\nÞað er búið að stilla upp þremur tannhjólum fyrir
        þig. Þú þarft að láta líta svo út að tannhjólin snúist öll í takt við hvert
        annað.\\\r\n\\\r\n\n-   Láttu tannhjólin snúast eins og þau séu öll hluti
        af sama kerfi.\\\r\n-   **Vísbending: Þau munu ekki öll snúast í sömu átt**."
      CSD U3 Movement Gears_2018: "<img src=\"https://images.code.org/eac110e64ccad62482c82d4ef66f237b-image-1465518920408.gif\"\nstyle=\"width:200px;
        float:right; margin-left: 20px;\">\\\r\n\\\r\n\n# Stefna snúnings\\\r\n\n\\\r\nÞegar
        þú notar teljaramynstrið fyrir eiginleikann `rotation` ásamt samlagningu,
        mun hluturinn alltaf snúast réttsælis. En stundum er nauðsynlegt að láta kvika
        snúast í hina áttina. Það er gert með því að nota frádrátt!\\\r\n\\\r\n\n#
        Gerðu þetta\\\r\n\n\\\r\nÞað er búið að stilla upp þremur tannhjólum fyrir
        þig. Þú þarft að láta líta svo út að tannhjólin snúist öll í takt við hvert
        annað.\\\r\n\\\r\n\n-   Láttu tannhjólin snúast eins og þau séu öll hluti
        af sama kerfi.\\\r\n-   **Vísbending: Þau munu ekki öll snúast í sömu átt**."
      CSD U3 Movement Gears_2019: "<img src=\"https://images.code.org/eac110e64ccad62482c82d4ef66f237b-image-1465518920408.gif\"\nstyle=\"width:200px;
        float:right; margin-left: 20px;\">\\\r\n\\\r\n\n# Stefna snúnings\\\r\n\n\\\r\nÞegar
        þú notar teljaramynstrið fyrir eiginleikann `rotation` ásamt samlagningu,
        mun hluturinn alltaf snúast réttsælis. En stundum er nauðsynlegt að láta kvika
        snúast í hina áttina. Það er gert með því að nota frádrátt!\\\r\n\\\r\n\n#
        Gerðu þetta\\\r\n\n\\\r\nÞað er búið að stilla upp þremur tannhjólum fyrir
        þig. Þú þarft að láta líta svo út að tannhjólin snúist öll í takt við hvert
        annað.\\\r\n\\\r\n\n-   Láttu tannhjólin snúast eins og þau séu öll hluti
        af sama kerfi.\\\r\n-   **Vísbending: Þau munu ekki öll snúast í sömu átt**."
      CSD U3 Movement Your Own 1: "# Búðu til eigin hreyfimynd\\\r\n\n\\\r\nNotaðu
        teljaramynstrið og eiginleika kvika til að búa til eigin hreyfimynd. Þú gætir
        byggt hana á kyrrmyndunum sem þú hefur búið til áður, eða búið til nýja mynd
        eða sögu til að segja.\\\r\n\\\r\n\n# \n\nGerðu þetta\\\r\n\\\r\nByrjum á
        að stilla upp kyrru leiksviði.\\\r\n\\\r\n\n-   Bættu myndum á hreyfingasíðuna\\\r\n-
        \  Búðu til kvika og tengdu myndir við þá\\\r\n-   Notaðu teiknilykkjuna til
        að teikna bakgrunninn og kvikana."
      CSD U3 Movement Your Own 1_2018: "# Búðu til eigin hreyfimynd\\\r\n\n\\\r\nNotaðu
        teljaramynstrið og eiginleika kvika til að búa til eigin hreyfimynd. Þú gætir
        byggt hana á kyrrmyndunum sem þú hefur búið til áður, eða búið til nýja mynd
        eða sögu til að segja.\\\r\n\\\r\n\n# \n\nGerðu þetta\\\r\n\\\r\nByrjum á
        að stilla upp kyrru leiksviði.\\\r\n\\\r\n\n-   Bættu myndum á hreyfingasíðuna\\\r\n-
        \  Búðu til kvika og tengdu myndir við þá\\\r\n-   Notaðu teiknilykkjuna til
        að teikna bakgrunninn og kvikana."
      CSD U3 Movement Your Own 1_2019: "# Búðu til eigin hreyfimynd\\\r\n\n\\\r\nNotaðu
        teljaramynstrið og eiginleika kvika til að búa til eigin hreyfimynd. Þú gætir
        byggt hana á kyrrmyndunum sem þú hefur búið til áður, eða búið til nýja mynd
        eða sögu til að segja.\\\r\n\\\r\n\n# \n\nGerðu þetta\\\r\n\\\r\nByrjum á
        að stilla upp kyrru leiksviði.\\\r\n\\\r\n\n-   Bættu myndum á hreyfingasíðuna\\\r\n-
        \  Búðu til kvika og tengdu myndir við þá\\\r\n-   Notaðu teiknilykkjuna til
        að teikna bakgrunninn og kvikana."
      CSD U3 Movement Your Own 2: "# Bættu hreyfingu í hreyfimyndina\\\r\n\n\\\r\nNú
        þegar þú ert búinn að stilla upp kyrru leiksviði, getur þú bætt hreyfingu
        við. Þegar allt er eins og þú vilt hafa það, smellir þú á \"Skila\" hnappinn
        til að skila verkefninu. Þú getur alltaf dregið skilin til baka og haldið
        áfram að vinna við verkefnið.\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\nInnan
        teiknilykkjunnar\\\r\n\\\r\n\n-   Veldu þá eiginleika kvikanna sem eiga að
        breytast\\\r\n-   Uppfærðu þá eiginleika með teljaramynstrinu\\\r\n    \\\r\n
        \   _Ábending: Ef teljaramynstrið þitt er ekki að virka sem skyldi, bættu
        þá við vaka eða vökum (enska: watchers) til að hjálpa til við villuleit._"
      CSD U3 Movement Your Own 2_2018: "# Bættu hreyfingu í hreyfimyndina\\\r\n\n\\\r\nNú
        þegar þú ert búinn að stilla upp kyrru leiksviði, getur þú bætt hreyfingu
        við. Þegar allt er eins og þú vilt hafa það, smellir þú á \"Skila\" hnappinn
        til að skila verkefninu. Þú getur alltaf dregið skilin til baka og haldið
        áfram að vinna við verkefnið.\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\nInnan
        teiknilykkjunnar\\\r\n\\\r\n\n-   Veldu þá eiginleika kvikanna sem eiga að
        breytast\\\r\n-   Uppfærðu þá eiginleika með teljaramynstrinu\\\r\n    \\\r\n
        \   _Ábending: Ef teljaramynstrið þitt er ekki að virka sem skyldi, bættu
        þá við vaka eða vökum (enska: watchers) til að hjálpa til við villuleit._"
      CSD U3 Movement Your Own 2_2019: "# Bættu hreyfingu í hreyfimyndina\\\r\n\n\\\r\nNú
        þegar þú ert búinn að stilla upp kyrru leiksviði, getur þú bætt hreyfingu
        við. Þegar allt er eins og þú vilt hafa það, smellir þú á \"Skila\" hnappinn
        til að skila verkefninu. Þú getur alltaf dregið skilin til baka og haldið
        áfram að vinna við verkefnið.\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\nInnan
        teiknilykkjunnar\\\r\n\\\r\n\n-   Veldu þá eiginleika kvikanna sem eiga að
        breytast\\\r\n-   Uppfærðu þá eiginleika með teljaramynstrinu\\\r\n    \\\r\n
        \   _Ábending: Ef teljaramynstrið þitt er ekki að virka sem skyldi, bættu
        þá við vaka eða vökum (enska: watchers) til að hjálpa til við villuleit._"
      CSD U3 Plotting Shapes Shape Lab: "# Að teikna form\\\r\n\n\\\r\nKannaðu þetta
        tæki sem þú getur notað til að teikna form í ýmsum litum. Gættu þess að prófa
        að kveikja á grindinni sem hjálpar þér að velja staði nákvæmlega."
      CSD U3 Plotting Shapes Shape Lab_2018: "# Að teikna form\\\r\n\n\\\r\nKannaðu
        þetta tæki sem þú getur notað til að teikna form í ýmsum litum. Gættu þess
        að prófa að kveikja á grindinni sem hjálpar þér að velja staði nákvæmlega."
      CSD U3 Plotting Shapes Shape Lab_2019: "# Að teikna form\\\r\n\n\\\r\nKannaðu
        þetta tæki sem þú getur notað til að teikna form í ýmsum litum. Gættu þess
        að prófa að kveikja á grindinni sem hjálpar þér að velja staði nákvæmlega."
      CSD U3 Random Debug Cloud: "<img src=\"https://images.code.org/529b7e5ddda4683e6a0cc5b3028e4dbf-image-1490824752133.58.50\nPM.png\"
        style=\"float:right;height:150px\">\\\r\n\\\r\n\n# Villuleit - með 4 stikum\\\r\n\n\\\r\nÞar
        sem grasið er farið að virka skulum við bæta skýi á himininn. Þessa stundina
        er það samt eitthvað skrítið.\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\n\n-
        \  Aflúsaðu forritið svo að skýið sé meira á breiddina en hæðina, eins og
        myndin sýnir.\\\r\n-   Vísbending: Þú þarft að breyta tveimur stikum. Hvaða
        stikar stilla breidd og hæð skýsins?\\\r\n    \\\r\n    _Áskorun: Sólin er
        ekki á nákvæmlega sama stað og í myndinni. Getur þú breytt hnitum sólarinnar
        svo að myndirnar séu alveg eins?_"
      CSD U3 Random Debug Cloud_2018: |-
        <img src="https://images.code.org/45d1d513f5ed63592e98ea3e4a08840c-image-1520403109680.11.28 PM.png" style="float:right;height:150px">

        # Debug - Using 4 Parameters

        Now that the grass is working, let's add a cloud to the sky. Unfortunately, it looks a little funny right now.

        # Do This

        -   Debug this program to make the cloud wider than it is tall, like in the image.
        -   Hint: You'll need to change two parameters. Which ones set your cloud's width and height?
      CSD U3 Random Debug Cloud_2018_2019: |-
        <img src="https://images.code.org/45d1d513f5ed63592e98ea3e4a08840c-image-1520403109680.11.28 PM.png" style="float:right;height:150px">

        # Debug - Using 4 Parameters

        Now that the grass is working, let's add a cloud to the sky. Unfortunately, it looks a little funny right now.

        # Do This

        -   Debug this program to make the cloud wider than it is tall, like in the image.
        -   Hint: You'll need to change two parameters. Which ones set your cloud's width and height?
      CSD U3 Random Debug Grass: "<img src=\"https://images.code.org/83269268e1c4f8af8551253ff4573b43-image-1490825158453.03.45\nPM.png\"
        style=\"float:right;height:150px\">\\\r\n\\\r\n\n# Villuleit - með 4 stikum\\\r\n\n\\\r\nÞetta
        forrit notar fjögurra stika útgáfuna af `rect()` og `ellipse()` til að teikna
        einfalt leiksvið.\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\n\n-   Afslúsaðu
        þetta forrit og lagaðu villuna svo að grasið nái þvert yfir allan neðri hluta
        sviðsins.\\\r\n-   Vísbending: Þú þarft aðeins að breyta einni tölu. Hvaða
        stiki gerir rétthyrninginn (grasið) breiðari?"
      CSD U3 Random Debug Grass_2018: |-
        <img src="https://images.code.org/08c7c6cd82f4d4ff57459165f29ab624-image-1520402652290.03.37 PM.png" style="float:right;height:150px">

        # Debug - Using 4 Parameters

        This program uses the four parameter version of `rect()` and `ellipse()` to draw a simple scene.

        # Do This

        -   Debug this program and correct the error so that the grass extends across the entire bottom.
        -   Hint: You only have to change one number. Which parameter makes your rectangle (the grass) wider?
      CSD U3 Random Debug Grass_2019: |-
        <img src="https://images.code.org/08c7c6cd82f4d4ff57459165f29ab624-image-1520402652290.03.37 PM.png" style="float:right;height:150px">

        # Debug - Using 4 Parameters

        This program uses the four parameter version of `rect()` and `ellipse()` to draw a simple scene.

        # Do This

        -   Debug this program and correct the error so that the grass extends across the entire bottom.
        -   Hint: You only have to change one number. Which parameter makes your rectangle (the grass) wider?
      CSD U3 Random Ellipse Behind: "<img src=\"https://images.code.org/a8ed6092389aedceceb38a83ac59fae1-image-1490832453029.07.10\nPM.png\"
        style=\"float:right;height:150px\">\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\n\n-
        \  Skrifaðu kóða sem teiknar appelsínugula ellipsu aftan við þá grænu.\\\r\n-
        \  Stærðirnar skipta ekki máli svo framarlega sem græna ellipsan er öll innan
        í þeirri appelsínugulu."
      CSD U3 Random Ellipse Behind_2018: |-
        <img src="https://images.code.org/dd73760e7129225b1e9f53a542960b9a-image-1520402430622.59.19 PM.png" style="float:right;height:150px">

        # Do This

        -   Write code that makes an orange ellipse behind the green one.
        -   Don't worry about the exact size as long as the green ellipse is entirely inside the orange one.
      CSD U3 Random Ellipse Behind_2018_2019: |-
        <img src="https://images.code.org/dd73760e7129225b1e9f53a542960b9a-image-1520402430622.59.19 PM.png" style="float:right;height:150px">

        # Do This

        -   Write code that makes an orange ellipse behind the green one.
        -   Don't worry about the exact size as long as the green ellipse is entirely inside the orange one.
      CSD U3 Random Taller Rectangle: |-
        <img src="https://images.code.org/02871e5c5d041ea1724e4a02d3697941-image-1492721665345.54.10 PM.png" style="float:right;height:150px; border: 1px solid #CCC">

        # Stærð rétthyrnings

        Þessir `rect` kubbar hafa tvo stika í viðbót sem þú getur notað til að stjórna stærð þeirra. Athugaðu að kubburinn `noStroke()` slekkur á útlínu forma.

        # Gerðu þetta

        -   Skoðaðu kóðann og reyndu að finna út hvernig síðustu tvö inntökin í `rect` kubbnum virka.
        -   Breyttu tölunum í öðrum `rect` kubbnum til að gera rauða rétthyrninginn lengri en þann bláa.
      CSD U3 Random Taller Rectangle_2018: |-
        <img src="https://images.code.org/02871e5c5d041ea1724e4a02d3697941-image-1492721665345.54.10 PM.png" style="float:right;height:150px; border: 1px solid #CCC">

        # Stærð rétthyrnings

        Þessir `rect` kubbar hafa tvo stika í viðbót sem þú getur notað til að stjórna stærð þeirra. Athugaðu að kubburinn `noStroke()` slekkur á útlínu forma.

        # Gerðu þetta

        -   Skoðaðu kóðann og reyndu að finna út hvernig síðustu tvö inntökin í `rect` kubbnum virka.
        -   Breyttu tölunum í öðrum `rect` kubbnum til að gera rauða rétthyrninginn lengri en þann bláa.
      CSD U3 Random Taller Rectangle_2019: |-
        <img src="https://images.code.org/02871e5c5d041ea1724e4a02d3697941-image-1492721665345.54.10 PM.png" style="float:right;height:150px; border: 1px solid #CCC">

        # Stærð rétthyrnings

        Þessir `rect` kubbar hafa tvo stika í viðbót sem þú getur notað til að stjórna stærð þeirra. Athugaðu að kubburinn `noStroke()` slekkur á útlínu forma.

        # Gerðu þetta

        -   Skoðaðu kóðann og reyndu að finna út hvernig síðustu tvö inntökin í `rect` kubbnum virka.
        -   Breyttu tölunum í öðrum `rect` kubbnum til að gera rauða rétthyrninginn lengri en þann bláa.
      CSD U3 Random background: "# Bakgrunnur\\\r\n\n\\\r\nStundum viltu fylla allan
        skjáinn með lit.  Til þess notar þú kubbinn `background`.  Hann þekur allt
        á skjánum með lit sem þú velur.\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\n\n-
        \  Keyrðu kóðann til að sjá bakgrunnskubbinn virka.\\\r\n-   Breyttu bakgrunninum
        úr gulu í appelsínugult.\\\r\n    \\\r\n    _Áskorun:\n    Það er fjólublár
        ferningur sem lendir bak við bakgrunninn.  Getur þú breytt röð kubbanna svo
        að þú sjáir bæði fjólubláa og bláa ferninginn?_"
      CSD U3 Random background2: "<img src=\"https://images.code.org/a68cfd23a13b6bdeef91dc9fd584f657-image-1491332601738.03.04\nPM.png\"
        style=\"float:right;height:150px\">\\\r\n\\\r\n\n# Bakgrunnurinn\\\r\n\n\\\r\n`background()`
        teiknar yfir allt sem er þegar í myndinni. Þess vegna er mikilvægt að huga
        að röð kubbanna.\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\n\\*\nNotaðu `background()`
        til að setja svartan bakgrunn bak við græna hringinn."
      CSD U3 Random background2_2018: "<img src=\"https://images.code.org/a68cfd23a13b6bdeef91dc9fd584f657-image-1491332601738.03.04\nPM.png\"
        style=\"float:right;height:150px\">\\\r\n\\\r\n\n# Bakgrunnurinn\\\r\n\n\\\r\n`background()`
        teiknar yfir allt sem er þegar í myndinni. Þess vegna er mikilvægt að huga
        að röð kubbanna.\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\n\\*\nNotaðu `background()`
        til að setja svartan bakgrunn bak við græna hringinn."
      CSD U3 Random background2_2019: "<img src=\"https://images.code.org/a68cfd23a13b6bdeef91dc9fd584f657-image-1491332601738.03.04\nPM.png\"
        style=\"float:right;height:150px\">\\\r\n\\\r\n\n# Bakgrunnurinn\\\r\n\n\\\r\n`background()`
        teiknar yfir allt sem er þegar í myndinni. Þess vegna er mikilvægt að huga
        að röð kubbanna.\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\n\\*\nNotaðu `background()`
        til að setja svartan bakgrunn bak við græna hringinn."
      CSD U3 Random background_2018: "# Bakgrunnur\\\r\n\n\\\r\nStundum viltu fylla
        allan skjáinn með lit.  Til þess notar þú kubbinn `background`.  Hann þekur
        allt á skjánum með lit sem þú velur.\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\n\n-
        \  Keyrðu kóðann til að sjá bakgrunnskubbinn virka.\\\r\n-   Breyttu bakgrunninum
        úr gulu í appelsínugult.\\\r\n    \\\r\n    _Áskorun:\n    Það er fjólublár
        ferningur sem lendir bak við bakgrunninn.  Getur þú breytt röð kubbanna svo
        að þú sjáir bæði fjólubláa og bláa ferninginn?_"
      CSD U3 Random background_2019: "# Bakgrunnur\\\r\n\n\\\r\nStundum viltu fylla
        allan skjáinn með lit.  Til þess notar þú kubbinn `background`.  Hann þekur
        allt á skjánum með lit sem þú velur.\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\n\n-
        \  Keyrðu kóðann til að sjá bakgrunnskubbinn virka.\\\r\n-   Breyttu bakgrunninum
        úr gulu í appelsínugult.\\\r\n    \\\r\n    _Áskorun:\n    Það er fjólublár
        ferningur sem lendir bak við bakgrunninn.  Getur þú breytt röð kubbanna svo
        að þú sjáir bæði fjólubláa og bláa ferninginn?_"
      CSD U3 Random rainbow snake: "<img src=\"https://images.code.org/d1e4780e483ffa510a27e91b2b1f1963-image-1491341267537.26.14\nPM.png\"
        style=\"float:right;height:150px\">\\\r\n\\\r\n\n# Regnbogaslangan\\\r\n\n\\\r\nÞetta
        forrit teiknar mjög sjaldgæfa tegund af regnbogaslöngu. Til að slangan fái
        mismunandi útlit í hvert skipti verður þú að nota slembitölur.\\\r\n\\\r\n\n#
        Gerðu þetta\\\r\n\n\\\r\n\n-   Keyrðu forritið nokkrum sinnum til að sjá hvað
        upphafskóðinn gerir\\\r\n-   Bættu minnst þremur hringum í mismunandi litum
        við slönguna\\\r\n-   Notaðu `randomNumber()`\n    til að láta allan líkama
        slöngunnar hreyfast upp og niður\\\r\n    \\\r\n    _Áskorun:\n    Getur þú
        látið stærð sumra hringanna líka stjórnast af handahófi?_"
      CSD U3 Random rainbow snake_2018: |-
        <img src="https://images.code.org/6af643f712b042e5b076f06cc2f902e2-image-1520404404645.32.58 PM.png" style="float:right;height:150px">

        # Rainbow Snake

        This program draws a very rare breed of rainbow snake. To make the snake draw differently every time you'll need to use random numbers.

        # Do This

        -   Run the program several times to see how the starter code works.
        -   Add at least three new different colored circles to your rainbow snake.
        -   Use `randomNumber()` to make the rest of the snake's body move up and down like the first three.

        _Challenge: Can you make size of some of the circles random, too?_
      CSD U3 Random rainbow snake_2018_2019: |-
        <img src="https://images.code.org/6af643f712b042e5b076f06cc2f902e2-image-1520404404645.32.58 PM.png" style="float:right;height:150px">

        # Regnbogaslanga

        Þetta forrit teiknar mjög sjaldgæfa tegund af regnbogaslöngu. Til að slangan verði teiknuð mismunandi í hvert sinn þarft þú að nota handahófstölur (random numbers).

        # Gerðu þetta

        -   Keyrðu forritið nokkrum sinnum til að sjá hvernig kóðinn virkar í upphafi.
        -   Bættu að minnsta kosti þremur nýjum og ólíkum hringjum við regnbogaslönguna.
        -   Notaðu `randomNumber()` til að láta líkama slöngunnar hreyfast upp og niður eins og hinir þrír.

        _Áskorun: Geturðu látið stærð sumra hringjanna stjórnast af handahófi líka?_
      CSD U3 Random random ellipse: "# Slembitölur\\\r\n\n\\\r\n`randomNumber()`\nvelur
        tölu af handahófi (slembitölu) úr tölum sem liggja á tilteknu talnabili. Þú
        getur notað þennan kubb í stað þess að skrifa ákveðna tölu.  Ef þú notar slembitölur
        til að teikna með, verða myndirnar mismunandi í hvert skipti sem forritið
        er keyrt.\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\n\n-   Keyrðu forritið nokkrum
        sinnum til að sjá hvernig það virkar.\\\r\n-   Breyttu tölunum í `randomNumber`
        kubbnum og keyrðu kóðann aftur til að sjá hvað breytist."
      CSD U3 Random random ellipse2: "<img src=\"https://images.code.org/ff3be801c7e634d49584aac103df292a-image-1491334428729.33.18\nPM.png\"
        style=\"float:right;height:150px\">\\\r\n\\\r\n\n# Slembitölur\\\r\n\n\\\r\nHér
        er sama sólin og síðast.  Þessa stundina er aðeins x-hnitið slembitala, en
        þú getur líka notað slembitölu fyrir y-hnitið.\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\n\n-
        \  Notaðu `randomNumber()`fyrir Y stika ellipsunnar svo að Y staður hringsins
        sé líka valinn af handahófi.\\\r\n-   Ekki hætta fyrr en sólin birtist á mismunandi
        X og Y stöðum við hverja keyrslu"
      CSD U3 Random random ellipse2_2018: |-
        <img src="https://images.code.org/8306a9fd01470ac8582cf4374dde7033-image-1520403513967.17.40 PM.png" style="float:right;height:150px">

        # Random Numbers

        Here's the same sun from last time.  Right now only the x-coordinate is random, but you can make the y-coordinate random, too.

        # Do This

        -   Use `randomNumber()` for the ellipse's Y parameter so the circle is drawn in a random Y position, too.
        -   As long as your circle is appearing at random X and Y positions, you can move on.
      CSD U3 Random random ellipse2_2018_2019: |-
        <img src="https://images.code.org/8306a9fd01470ac8582cf4374dde7033-image-1520403513967.17.40 PM.png" style="float:right;height:150px">

        # Random Numbers

        Here's the same sun from last time.  Right now only the x-coordinate is random, but you can make the y-coordinate random, too.

        # Do This

        -   Use `randomNumber()` for the ellipse's Y parameter so the circle is drawn in a random Y position, too.
        -   As long as your circle is appearing at random X and Y positions, you can move on.
      CSD U3 Random random ellipse_2018: "# Slembitölur\\\r\n\n\\\r\n`randomNumber()`\nvelur
        tölu af handahófi (slembitölu) úr tölum sem liggja á tilteknu talnabili. Þú
        getur notað þennan kubb í stað þess að skrifa ákveðna tölu.  Ef þú notar slembitölur
        til að teikna með, verða myndirnar mismunandi í hvert skipti sem forritið
        er keyrt.\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\n\n-   Keyrðu forritið nokkrum
        sinnum til að sjá hvernig það virkar.\\\r\n-   Breyttu tölunum í `randomNumber`
        kubbnum og keyrðu kóðann aftur til að sjá hvað breytist."
      CSD U3 Random random ellipse_2018_2019: "# Slembitölur\\\r\n\n\\\r\n`randomNumber()`\nvelur
        tölu af handahófi (slembitölu) úr tölum sem liggja á tilteknu talnabili. Þú
        getur notað þennan kubb í stað þess að skrifa ákveðna tölu.  Ef þú notar slembitölur
        til að teikna með, verða myndirnar mismunandi í hvert skipti sem forritið
        er keyrt.\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\n\n-   Keyrðu forritið nokkrum
        sinnum til að sjá hvernig það virkar.\\\r\n-   Breyttu tölunum í `randomNumber`
        kubbnum og keyrðu kóðann aftur til að sjá hvað breytist."
      CSD U3 Scene Example: "# Kvikar á leiksviði\\\r\n\n\\\r\nMeð því að nota form,
        kvika og nýjan kubb `text` saman, getur þú búið til einfaldar sviðsetningar,
        sögur eða teiknimyndir. Þó að þetta dæmi sé einfalt, getur þú notað eins marga
        kvika og form og þú vilt til að búa til flóknari og nákvæmari sviðsetningar
        eftir eigin höfði.\\\r\n\\\r\n\n## Útbúðu uppkast\\\r\n\n\\\r\nÁður en lengra
        er haldið ættir þú að taka þér tíma til að teikna upp sviðsetninguna sem þú
        vilt sjá í lok þessarar æfingar. Notaðu einföld form sem þú þekkir, kvika
        fyrir persónur og texta sem birtist á skjánum. Þegar uppkastið er tilbúið,
        munt þú læra um `text` kubbinn og hvernig á að stilla upp sviði.\\\r"
      CSD U3 Scene Example_2018: |-
        # Sprite Scenes

        By combining shapes, sprites, and text, you can create simple scenes, stories, or comics. While this example is fairly simple, you can combine as many sprites and shapes as you like to create scenes as complex or detailed as you like.

        ## Sketch It Out

        Before moving on, take a second to sketch out a scene that you'd like to make at the end of this lesson. Consider the simple shapes that you've used in the past, sprites for your characters, and any text that you'd like on the screen. Once you've sketched out an idea, you'll learn about `text` and how to compose a scene.
      CSD U3 Scene Example_2018_2019: |-
        # Verur á leiksviði

        Með því að nota form, verur og texta saman, getur þú búið til einfaldar sviðsetningar, sögur eða teiknimyndir. Þó að þetta dæmi sé einfalt, getur þú notað eins margar verur og form og þú vilt til að búa til flóknari og nákvæmari sviðsetningar eftir eigin höfði.

        ## Útbúðu uppkast

        Áður en lengra er haldið ættir þú að taka þér tíma til að teikna upp sviðsetninguna sem þú vilt sjá í lok þessarar æfingar. Notaðu einföld form sem þú þekkir, verur fyrir persónur og texta sem birtist á skjánum. Þegar uppkastið er tilbúið, munt þú læra hvernig á að stilla upp sviði.
      CSD U3 Sprite Movement Left: "<img src=\"https://images.code.org/9f9162cb94a02d9b3aba9b6067d0281a-image-1491862771496.gif\"\nstyle=\"float:
        right; margin-left: 20px\">\\\r\n\\\r\n\n# Hreyfing til vinstri\\\r\n\n\\\r\nEf
        þú leggur tölu við x-hnit kvika færist hann til hægri. Hvernig gætir þú þá
        látið hann færast til vinstri?\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\nSettu
        hreyfingu í forritið þitt eins og í myndinni til hægri. Uppfærðu `fly.x` innan
        í teiknilykkjunni svo að flugan sé teiknuð aðeins lengra til vinstri í hverjum
        ramma.\\\r\n\\\r\n_Ábending:\nÞú getur látið kvikana hreyfast hraðar með því
        að leggja við eða draga frá stærri tölur.\nFlugan í dæminu hreyfist um tvöfalt
        hraðar en flugvélin í síðasta áfanga._"
      CSD U3 Sprite Movement Left_2018: "<img src=\"https://images.code.org/9f9162cb94a02d9b3aba9b6067d0281a-image-1491862771496.gif\"\nstyle=\"float:
        right; margin-left: 20px\">\\\r\n\\\r\n\n# Hreyfing til vinstri\\\r\n\n\\\r\nEf
        þú leggur tölu við x-hnit kvika færist hann til hægri. Hvernig gætir þú þá
        látið hann færast til vinstri?\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\nSettu
        hreyfingu í forritið þitt eins og í myndinni til hægri. Uppfærðu `fly.x` innan
        í teiknilykkjunni svo að flugan sé teiknuð aðeins lengra til vinstri í hverjum
        ramma.\\\r\n\\\r\n_Ábending:\nÞú getur látið kvikana hreyfast hraðar með því
        að leggja við eða draga frá stærri tölur.\nFlugan í dæminu hreyfist um tvöfalt
        hraðar en flugvélin í síðasta áfanga._"
      CSD U3 Sprite Movement Left_2019: "<img src=\"https://images.code.org/9f9162cb94a02d9b3aba9b6067d0281a-image-1491862771496.gif\"\nstyle=\"float:
        right; margin-left: 20px\">\\\r\n\\\r\n\n# Hreyfing til vinstri\\\r\n\n\\\r\nEf
        þú leggur tölu við x-hnit kvika færist hann til hægri. Hvernig gætir þú þá
        látið hann færast til vinstri?\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\nSettu
        hreyfingu í forritið þitt eins og í myndinni til hægri. Uppfærðu `fly.x` innan
        í teiknilykkjunni svo að flugan sé teiknuð aðeins lengra til vinstri í hverjum
        ramma.\\\r\n\\\r\n_Ábending:\nÞú getur látið kvikana hreyfast hraðar með því
        að leggja við eða draga frá stærri tölur.\nFlugan í dæminu hreyfist um tvöfalt
        hraðar en flugvélin í síðasta áfanga._"
      CSD U3 Sprite Movement Right: "<img src=\"https://images.code.org/629bc615a879f0f3dc9f290bea2358c8-image-1491861334164.gif\"\nstyle=\"float:
        right; margin-left: 20px\">\\\r\n\\\r\n\n# Hreyfing kvikat\\\r\n\n\\\r\nMeð
        teljaramynstrinu getur þú skrifað forrit sem hreyfa kvika mjúklega. Með því
        að leggja við eða draga frá `x` eða `y` eiginleika kvika innan teiknilykkjunnar
        færist hann örlítið í hvert sinn sem hann er teiknaður.\\\r\n\\\r\n\n# Gerðu
        þetta\\\r\n\n\\\r\nSettu hreyfingu í forritið þitt eins og myndin til hægri
        sýnir. Við höfum þegar bætt inn línu til að uppfæra `plane.x` í teiknilykkjunni
        en þetta er óklárað.\\\r"
      CSD U3 Sprite Movement Right_2018: "<img src=\"https://images.code.org/629bc615a879f0f3dc9f290bea2358c8-image-1491861334164.gif\"\nstyle=\"float:
        right; margin-left: 20px\">\\\r\n\\\r\n\n# Hreyfing kvikat\\\r\n\n\\\r\nMeð
        teljaramynstrinu getur þú skrifað forrit sem hreyfa kvika mjúklega. Með því
        að leggja við eða draga frá `x` eða `y` eiginleika kvika innan teiknilykkjunnar
        færist hann örlítið í hvert sinn sem hann er teiknaður.\\\r\n\\\r\n\n# Gerðu
        þetta\\\r\n\n\\\r\nSettu hreyfingu í forritið þitt eins og myndin til hægri
        sýnir. Við höfum þegar bætt inn línu til að uppfæra `plane.x` í teiknilykkjunni
        en þetta er óklárað.\\\r"
      CSD U3 Sprite Movement Right_2019: "<img src=\"https://images.code.org/629bc615a879f0f3dc9f290bea2358c8-image-1491861334164.gif\"\nstyle=\"float:
        right; margin-left: 20px\">\\\r\n\\\r\n\n# Hreyfing kvikat\\\r\n\n\\\r\nMeð
        teljaramynstrinu getur þú skrifað forrit sem hreyfa kvika mjúklega. Með því
        að leggja við eða draga frá `x` eða `y` eiginleika kvika innan teiknilykkjunnar
        færist hann örlítið í hvert sinn sem hann er teiknaður.\\\r\n\\\r\n\n# Gerðu
        þetta\\\r\n\n\\\r\nSettu hreyfingu í forritið þitt eins og myndin til hægri
        sýnir. Við höfum þegar bætt inn línu til að uppfæra `plane.x` í teiknilykkjunni
        en þetta er óklárað.\\\r"
      CSD U3 Sprites anitab 1: |-
        # Myndir

        Á **hreyfingasíðunni** (Animations) sérðu þrjár myndir sem hafa verið settar þar fyrir þig.
        Þú getur komist á hreyfingarsíðuna með því að smella á  **Animation** hnappinn ofan við leiksvæðið.

        <img src="https://images.code.org/f694a37bbadcf0533e7b19d8c0f5309b-image-1465580394090.35.11
        PM.png" style="width:300px;float:right">

        Eftir að þú hefur búið til veru **notar þú `sprite.setAnimation()` skipunina til að breyta ásýnd verunnar úr rétthyrningi í mynd.** Allar myndir sem þú hefur hlaðið inn á hreyfingasíðuna koma fram í fellilista `sprite.setAnimation()`.  Geimverunni hefur verið stillt upp sem dæmi.

        # Gerðu þetta

        Breyttu verunni í aðra mynd af hreyfingasíðunni.

        -   Það er þegar búið að gera eina veru með mynd.
        -   Keyrðu kóðann til að sjá hvernig þetta virkar.
        -   Breyttu inntakinu í `setAnimation` skipuninni svo ásýnd verunnar breytist.
        -   Prófaðu allar myndirnar.
      CSD U3 Sprites anitab 1_2018: |-
        # Myndir

        Á **hreyfingasíðunni** (Animations) sérðu þrjár myndir sem hafa verið settar þar fyrir þig.
        Þú getur komist á hreyfingarsíðuna með því að smella á  **Animation** hnappinn ofan við leiksvæðið.

        <img src="https://images.code.org/f694a37bbadcf0533e7b19d8c0f5309b-image-1465580394090.35.11
        PM.png" style="width:300px;float:right">

        Eftir að þú hefur búið til veru **notar þú `sprite.setAnimation()` skipunina til að breyta ásýnd verunnar úr rétthyrningi í mynd.** Allar myndir sem þú hefur hlaðið inn á hreyfingasíðuna koma fram í fellilista `sprite.setAnimation()`.  Geimverunni hefur verið stillt upp sem dæmi.

        # Gerðu þetta

        Breyttu verunni í aðra mynd af hreyfingasíðunni.

        -   Það er þegar búið að gera eina veru með mynd.
        -   Keyrðu kóðann til að sjá hvernig þetta virkar.
        -   Breyttu inntakinu í `setAnimation` skipuninni svo ásýnd verunnar breytist.
        -   Prófaðu allar myndirnar.
      CSD U3 Sprites anitab 1_2019: |-
        # Myndir

        Á **hreyfingasíðunni** (Animations) sérðu þrjár myndir sem hafa verið settar þar fyrir þig.
        Þú getur komist á hreyfingarsíðuna með því að smella á  **Animation** hnappinn ofan við leiksvæðið.

        <img src="https://images.code.org/f694a37bbadcf0533e7b19d8c0f5309b-image-1465580394090.35.11
        PM.png" style="width:300px;float:right">

        Eftir að þú hefur búið til veru **notar þú `sprite.setAnimation()` skipunina til að breyta ásýnd verunnar úr rétthyrningi í mynd.** Allar myndir sem þú hefur hlaðið inn á hreyfingasíðuna koma fram í fellilista `sprite.setAnimation()`.  Geimverunni hefur verið stillt upp sem dæmi.

        # Gerðu þetta

        Breyttu verunni í aðra mynd af hreyfingasíðunni.

        -   Það er þegar búið að gera eina veru með mynd.
        -   Keyrðu kóðann til að sjá hvernig þetta virkar.
        -   Breyttu inntakinu í `setAnimation` skipuninni svo ásýnd verunnar breytist.
        -   Prófaðu allar myndirnar.
      CSD U3 Sprites anitab 2: |-
        # Hladdu upp eigin mynd

        Þú getur líka notað hreyfingasíðuna til að hlaða upp eða teikna eigin mynd.

        # Gerðu þetta

        Þú átt að búa til fljúgandi flugdreka. Þú getur leitað að mynd á vefnum eða búið til nýja hreyfimynd frá grunni og teiknað eigin flugdreka.

        -   Hladdu niður mynd af flugdreka. Myndir með gegnsæjan bakgrunn virka best.
        -   Opnaðu hreyfingasíðuna.
        -   Smelltu á <img src="https://images.code.org/346f6657dba57b0c3bd5deb534f76b69-image-1466194432449.13.05
            PM.png" style="width:50px"> og svo <img src="https://images.code.org/60c0371b45b29f10a3c8530db9154428-image-1466194434329.13.16
            PM.png" style="width:50px"> til að hlaða upp mynd.
        -   Veldu skrána í tölvunni.
        -   Endurnefndu skrána með því að smella á textann neðan við myndina. Þá er auðveldara að muna hana.
        -   Bættu `sprite.setAnimation()` kubbi í kóðann til að láta `flugdreka` veruna nota nýju hreyfinguna.

        Það er í lagi þó flugdrekinn sé of stór! Þú lærir að laga það í næsta áfanga.
      CSD U3 Sprites anitab 2_2018: |-
        # Hladdu upp eigin mynd

        Þú getur líka notað hreyfingasíðuna til að hlaða upp eða teikna eigin mynd.

        # Gerðu þetta

        Þú átt að búa til fljúgandi flugdreka. Þú getur leitað að mynd á vefnum eða búið til nýja hreyfimynd frá grunni og teiknað eigin flugdreka.

        -   Hladdu niður mynd af flugdreka. Myndir með gegnsæjan bakgrunn virka best.
        -   Opnaðu hreyfingasíðuna.
        -   Smelltu á <img src="https://images.code.org/346f6657dba57b0c3bd5deb534f76b69-image-1466194432449.13.05
            PM.png" style="width:50px"> og svo <img src="https://images.code.org/60c0371b45b29f10a3c8530db9154428-image-1466194434329.13.16
            PM.png" style="width:50px"> til að hlaða upp mynd.
        -   Veldu skrána í tölvunni.
        -   Endurnefndu skrána með því að smella á textann neðan við myndina. Þá er auðveldara að muna hana.
        -   Bættu `sprite.setAnimation()` kubbi í kóðann til að láta `flugdreka` veruna nota nýju hreyfinguna.

        Það er í lagi þó flugdrekinn sé of stór! Þú lærir að laga það í næsta áfanga.
      CSD U3 Sprites anitab 2_2019: |-
        # Hladdu upp eigin mynd

        Þú getur líka notað hreyfingasíðuna til að hlaða upp eða teikna eigin mynd.

        # Gerðu þetta

        Þú átt að búa til fljúgandi flugdreka. Þú getur leitað að mynd á vefnum eða búið til nýja hreyfimynd frá grunni og teiknað eigin flugdreka.

        -   Hladdu niður mynd af flugdreka. Myndir með gegnsæjan bakgrunn virka best.
        -   Opnaðu hreyfingasíðuna.
        -   Smelltu á <img src="https://images.code.org/346f6657dba57b0c3bd5deb534f76b69-image-1466194432449.13.05
            PM.png" style="width:50px"> og svo <img src="https://images.code.org/60c0371b45b29f10a3c8530db9154428-image-1466194434329.13.16
            PM.png" style="width:50px"> til að hlaða upp mynd.
        -   Veldu skrána í tölvunni.
        -   Endurnefndu skrána með því að smella á textann neðan við myndina. Þá er auðveldara að muna hana.
        -   Bættu `sprite.setAnimation()` kubbi í kóðann til að láta `flugdreka` veruna nota nýju hreyfinguna.

        Það er í lagi þó flugdrekinn sé of stór! Þú lærir að laga það í næsta áfanga.
      CSD U3 Sprites anitab 3: |-
        # Að breyta stærð

        Í _Verur_ skúffu verkfærakassans er nýr kubbur, `sprite.scale`.
        Með þessari skipun getur þú breytt stærð veru miðað við upphaflega stærð hennar. `sprite.scale = 1` er upphaflega stærðin. `sprite.scale = 0.5` helmingar stærðina, en `sprite.scale = 2` tvöfaldar hana.

        # Gerðu þetta

        Á þessu stigi ætti forritið að hafa nýupphlaðna mynd, en sennilega ekki í _heppilegri_ stærð. Bættu við `sprite.scale` kubbi til að breyta stærð flugdrekans.

        _Vísbending: Röð kóðans skiptir máli! Þú verður að bæta `sprite.scale` við **eftir** að þú hefur búið veruna til, en **áður** en þú teiknar hana með `drawSprites()`. Það auðveldar lestur kóðans ef þú hefur allan kóða fyrir verur efst í forritinu._
      CSD U3 Sprites anitab 3_2018: |-
        # Að breyta stærð

        Í _Verur_ skúffu verkfærakassans er nýr kubbur, `sprite.scale`.
        Með þessari skipun getur þú breytt stærð veru miðað við upphaflega stærð hennar. `sprite.scale = 1` er upphaflega stærðin. `sprite.scale = 0.5` helmingar stærðina, en `sprite.scale = 2` tvöfaldar hana.

        # Gerðu þetta

        Á þessu stigi ætti forritið að hafa nýupphlaðna mynd, en sennilega ekki í _heppilegri_ stærð. Bættu við `sprite.scale` kubbi til að breyta stærð flugdrekans.

        _Vísbending: Röð kóðans skiptir máli! Þú verður að bæta `sprite.scale` við **eftir** að þú hefur búið veruna til, en **áður** en þú teiknar hana með `drawSprites()`. Það auðveldar lestur kóðans ef þú hefur allan kóða fyrir verur efst í forritinu._
      CSD U3 Sprites anitab 3_2019: |-
        # Að breyta stærð

        Í _Verur_ skúffu verkfærakassans er nýr kubbur, `sprite.scale`.
        Með þessari skipun getur þú breytt stærð veru miðað við upphaflega stærð hennar. `sprite.scale = 1` er upphaflega stærðin. `sprite.scale = 0.5` helmingar stærðina, en `sprite.scale = 2` tvöfaldar hana.

        # Gerðu þetta

        Á þessu stigi ætti forritið að hafa nýupphlaðna mynd, en sennilega ekki í _heppilegri_ stærð. Bættu við `sprite.scale` kubbi til að breyta stærð flugdrekans.

        _Vísbending: Röð kóðans skiptir máli! Þú verður að bæta `sprite.scale` við **eftir** að þú hefur búið veruna til, en **áður** en þú teiknar hana með `drawSprites()`. Það auðveldar lestur kóðans ef þú hefur allan kóða fyrir verur efst í forritinu._
      CSD U3 Sprites intro debug: |-
        <img src="https://images.code.org/63207a624d751aacb376db18cdf09eec-image-1491255841823.png" style="width: 150px; float: right; margin-left: 20px; border: 1px solid #f2f2f2;">

        # Villuleit

        Þetta forrit ætti að búa til tvo nýja kvika, annan vinstra megin á skjánum og hinn hægra megin, en það teiknar bara einn. **Þú þarft ekki að bæta við kóða**, bara endurraða kubbunum til að útkoman sé eins og í myndinni til hægri.
      CSD U3 Sprites intro debug_2018: |-
        <img src="https://images.code.org/63207a624d751aacb376db18cdf09eec-image-1491255841823.png" style="width: 150px; float: right; margin-left: 20px; border: 1px solid #f2f2f2;">

        # Villuleit

        Þetta forrit ætti að búa til tvo nýja kvika, annan vinstra megin á skjánum og hinn hægra megin, en það teiknar bara einn. **Þú þarft ekki að bæta við kóða**, bara endurraða kubbunum til að útkoman sé eins og í myndinni til hægri.
      CSD U3 Sprites intro debug_2019: |-
        <img src="https://images.code.org/63207a624d751aacb376db18cdf09eec-image-1491255841823.png" style="width: 150px; float: right; margin-left: 20px; border: 1px solid #f2f2f2;">

        # Villuleit

        Þetta forrit ætti að búa til tvo nýja kvika, annan vinstra megin á skjánum og hinn hægra megin, en það teiknar bara einn. **Þú þarft ekki að bæta við kóða**, bara endurraða kubbunum til að útkoman sé eins og í myndinni til hægri.
      CSD U3 Sprites intro sprites: |-
        # Sprites

        **Creating Sprites:**  <img src = "https://images.code.org/92e06cddc5355dc37aa2c6a033793dd0-image-1466027030772.43.41 PM.png" style = "height:30px">  creates a new sprite and assigns it to a variable.  The default name is `sprite`, so you'll want to change it to something more meaningful.

        **Drawing Sprites:** Sprites only appear on the screen when you draw them there. Calling ![](<https://images.code.org/82a18afda6463323529acaa3dc326d55-image-1466004008638.19.16 AM.png>) will draw all of your created sprites on the screen.

        <img src="https://images.code.org/fe5905d6b89c14dca525865f4e579104-image-1491254588895.png" style="width: 150px; float: right; border: 1px solid #f2f2f2; margin-left: 20px">

        # Do This

        This program includes comments that let you know where to place code but otherwise is blank. Your program should look like the image on the right.

        -   Add `var sprite = createSprite(200, 200)` under the comment `Creating Sprites`.
            -   You can ignore the yellow triangle warning for now.  It's just telling you that you haven't used your sprite yet.
        -   Add `drawSprites()` under the comment `Drawing`.
        -   **Run the code** to draw your first sprite on the screen.

        _Hint: Sprites are drawn from their center, which means that center of the square (not the top left corner) is at (200, 200)._
      CSD U3 Sprites intro sprites_2018: |-
        # Sprites

        **Creating Sprites:**  <img src = "https://images.code.org/92e06cddc5355dc37aa2c6a033793dd0-image-1466027030772.43.41 PM.png" style = "height:30px">  creates a new sprite and assigns it to a variable.  The default name is `sprite`, so you'll want to change it to something more meaningful.

        **Drawing Sprites:** Sprites only appear on the screen when you draw them there. Calling ![](<https://images.code.org/82a18afda6463323529acaa3dc326d55-image-1466004008638.19.16 AM.png>) will draw all of your created sprites on the screen.

        <img src="https://images.code.org/fe5905d6b89c14dca525865f4e579104-image-1491254588895.png" style="width: 150px; float: right; border: 1px solid #f2f2f2; margin-left: 20px">

        # Do This

        This program includes comments that let you know where to place code but otherwise is blank. Your program should look like the image on the right.

        -   Add `var sprite = createSprite(200, 200)` under the comment `Creating Sprites`.
            -   You can ignore the yellow triangle warning for now.  It's just telling you that you haven't used your sprite yet.
        -   Add `drawSprites()` under the comment `Drawing`.
        -   **Run the code** to draw your first sprite on the screen.

        _Hint: Sprites are drawn from their center, which means that center of the square (not the top left corner) is at (200, 200)._
      CSD U3 Sprites intro sprites_2019: |-
        # Sprites

        **Creating Sprites:**  <img src = "https://images.code.org/92e06cddc5355dc37aa2c6a033793dd0-image-1466027030772.43.41 PM.png" style = "height:30px">  creates a new sprite and assigns it to a variable.  The default name is `sprite`, so you'll want to change it to something more meaningful.

        **Drawing Sprites:** Sprites only appear on the screen when you draw them there. Calling ![](<https://images.code.org/82a18afda6463323529acaa3dc326d55-image-1466004008638.19.16 AM.png>) will draw all of your created sprites on the screen.

        <img src="https://images.code.org/fe5905d6b89c14dca525865f4e579104-image-1491254588895.png" style="width: 150px; float: right; border: 1px solid #f2f2f2; margin-left: 20px">

        # Do This

        This program includes comments that let you know where to place code but otherwise is blank. Your program should look like the image on the right.

        -   Add `var sprite = createSprite(200, 200)` under the comment `Creating Sprites`.
            -   You can ignore the yellow triangle warning for now.  It's just telling you that you haven't used your sprite yet.
        -   Add `drawSprites()` under the comment `Drawing`.
        -   **Run the code** to draw your first sprite on the screen.

        _Hint: Sprites are drawn from their center, which means that center of the square (not the top left corner) is at (200, 200)._
      CSD U3 Sprites scene challenge: "# Áskorun: Bættu við leiksviðið\\\r\n\n\\\r\n_Ráðfærðu
        þig við kennarann áður en þú byrjar þessa áskorun._\\\r\n\\\r\nNú er leiksviðið
        þitt tilbúið. En hugleiddu að bæta einhverju við það eða búa til alveg nýtt."
      CSD U3 Sprites scene challenge_2018: "# Áskorun: Bættu við leiksviðið\\\r\n\n\\\r\n_Ráðfærðu
        þig við kennarann áður en þú byrjar þessa áskorun._\\\r\n\\\r\nNú er leiksviðið
        þitt tilbúið. En hugleiddu að bæta einhverju við það eða búa til alveg nýtt."
      CSD U3 Sprites scene challenge_2019: "# Áskorun: Bættu við leiksviðið\\\r\n\n\\\r\n_Ráðfærðu
        þig við kennarann áður en þú byrjar þessa áskorun._\\\r\n\\\r\nNú er leiksviðið
        þitt tilbúið. En hugleiddu að bæta einhverju við það eða búa til alveg nýtt."
      CSD U3 Sprites scene drawing: "# Gerð leiksviðs - Teikning\\\r\n\n\\\r\nNú átt
        þú að byrja á að búa til þitt eigið leiksvið. Ef þú hefur ekki þegar gert
        það, ættir þú að teikna upp mynd af leiksviðinu (hugleiddu að nota hnitasett
        blöð).\nÞegar þú hefur mótað hugmyndina að leiksviðinu, getur þú byrjað á
        að teikna bakgrunninn.\\\r\n\\\r\n\n# \n\nGerðu þetta\\\r\n\\\r\n\n-   Notaðu
        `background()` skipun til að fylla skjáinn með lit.\\\r\n-   Bættu við skipunum
        til að teikna aðra óhreyfanlega hluti leiksviðsins."
      CSD U3 Sprites scene drawing_2018: "# Gerð leiksviðs - Teikning\\\r\n\n\\\r\nNú
        átt þú að byrja á að búa til þitt eigið leiksvið. Ef þú hefur ekki þegar gert
        það, ættir þú að teikna upp mynd af leiksviðinu (hugleiddu að nota hnitasett
        blöð).\nÞegar þú hefur mótað hugmyndina að leiksviðinu, getur þú byrjað á
        að teikna bakgrunninn.\\\r\n\\\r\n\n# \n\nGerðu þetta\\\r\n\\\r\n\n-   Notaðu
        `background()` skipun til að fylla skjáinn með lit.\\\r\n-   Bættu við skipunum
        til að teikna aðra óhreyfanlega hluti leiksviðsins."
      CSD U3 Sprites scene drawing_2019: "# Gerð leiksviðs - Teikning\\\r\n\n\\\r\nNú
        átt þú að byrja á að búa til þitt eigið leiksvið. Ef þú hefur ekki þegar gert
        það, ættir þú að teikna upp mynd af leiksviðinu (hugleiddu að nota hnitasett
        blöð).\nÞegar þú hefur mótað hugmyndina að leiksviðinu, getur þú byrjað á
        að teikna bakgrunninn.\\\r\n\\\r\n\n# \n\nGerðu þetta\\\r\n\\\r\n\n-   Notaðu
        `background()` skipun til að fylla skjáinn með lit.\\\r\n-   Bættu við skipunum
        til að teikna aðra óhreyfanlega hluti leiksviðsins."
      CSD U3 Sprites scene sprites: |-
        # Gerð leiksviðs - Verur

        Eftir að bakgrunnurinn er tilbúinn er næst að bæta við verum.

        # Gerðu þetta

        -   Bættu við eða búðu til allar myndir fyrir verur á hreyfingasíðunni.
        -   Búðu til breytu fyrir hverja veru efst í forritinu og notaðu `setAnimation()` til að tengja myndirnar sem eru á hreyfingasíðunni.
        -   Kallaðu á `drawSprites()` einu sinni í lok forritsins.

        _Vísbending: Þú vilt sennilega kalla á `drawSprites()`
        í blálokin til þess að verurnar birtist framan við bakgrunninn, en það getur líka átt við að kalla á `drawSprites()` fyrr, t. d. ef verurnar eiga að vera framan við sum form en bak við önnur._
      CSD U3 Sprites scene sprites_2018: |-
        # Gerð leiksviðs - Verur

        Eftir að bakgrunnurinn er tilbúinn er næst að bæta við verum.

        # Gerðu þetta

        -   Bættu við eða búðu til allar myndir fyrir verur á hreyfingasíðunni.
        -   Búðu til breytu fyrir hverja veru efst í forritinu og notaðu `setAnimation()` til að tengja myndirnar sem eru á hreyfingasíðunni.
        -   Kallaðu á `drawSprites()` einu sinni í lok forritsins.

        _Vísbending: Þú vilt sennilega kalla á `drawSprites()`
        í blálokin til þess að verurnar birtist framan við bakgrunninn, en það getur líka átt við að kalla á `drawSprites()` fyrr, t. d. ef verurnar eiga að vera framan við sum form en bak við önnur._
      CSD U3 Sprites scene sprites_2019: |-
        # Gerð leiksviðs - Verur

        Eftir að bakgrunnurinn er tilbúinn er næst að bæta við verum.

        # Gerðu þetta

        -   Bættu við eða búðu til allar myndir fyrir verur á hreyfingasíðunni.
        -   Búðu til breytu fyrir hverja veru efst í forritinu og notaðu `setAnimation()` til að tengja myndirnar sem eru á hreyfingasíðunni.
        -   Kallaðu á `drawSprites()` einu sinni í lok forritsins.

        _Vísbending: Þú vilt sennilega kalla á `drawSprites()`
        í blálokin til þess að verurnar birtist framan við bakgrunninn, en það getur líka átt við að kalla á `drawSprites()` fyrr, t. d. ef verurnar eiga að vera framan við sum form en bak við önnur._
      CSD U3 Sprites scene text: "# Gerð leiksviðs - Texti\\\r\n\n\\\r\nÞað síðasta
        sem þú bætir við leiksviðið er texti.\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\n\n-
        \  Bættu við `text()` skipun fyrir hverja aðskilda línu af texta.\\\r\n-   Notaðu
        `fill()` og `textSize()` ef þú vilt breyta ásýnd textans.\\\r\n    \\\r\n
        \   _Vísbending: Yfirleitt er textinn hafður framan við allt annað, sem þýðir
        að `text()` skipanirnar eru síðustu línurnar í forritinu. En þú getur sett
        þær annars staðar ef þú vilt að textinn birtist inn á milli annarra hluta
        leikmyndarinnar._"
      CSD U3 Sprites scene text_2018: "# Gerð leiksviðs - Texti\\\r\n\n\\\r\nÞað síðasta
        sem þú bætir við leiksviðið er texti.\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\n\n-
        \  Bættu við `text()` skipun fyrir hverja aðskilda línu af texta.\\\r\n-   Notaðu
        `fill()` og `textSize()` ef þú vilt breyta ásýnd textans.\\\r\n    \\\r\n
        \   _Vísbending: Yfirleitt er textinn hafður framan við allt annað, sem þýðir
        að `text()` skipanirnar eru síðustu línurnar í forritinu. En þú getur sett
        þær annars staðar ef þú vilt að textinn birtist inn á milli annarra hluta
        leikmyndarinnar._"
      CSD U3 Sprites scene text_2019: "# Gerð leiksviðs - Texti\\\r\n\n\\\r\nÞað síðasta
        sem þú bætir við leiksviðið er texti.\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\n\n-
        \  Bættu við `text()` skipun fyrir hverja aðskilda línu af texta.\\\r\n-   Notaðu
        `fill()` og `textSize()` ef þú vilt breyta ásýnd textans.\\\r\n    \\\r\n
        \   _Vísbending: Yfirleitt er textinn hafður framan við allt annað, sem þýðir
        að `text()` skipanirnar eru síðustu línurnar í forritinu. En þú getur sett
        þær annars staðar ef þú vilt að textinn birtist inn á milli annarra hluta
        leikmyndarinnar._"
      CSD U3 Sprites text: "# Að bæta við texta\\\r\n\n\\\r\nMeð `text` kubbnum getur
        þú sett texta hvar sem er á skjáinn. Breyttu textanum í gefna textakubbnum
        og bættu við öðrum `text` kubbi sem skrifar annars staðar á skjáinn.\\\r\n\\\r\n_Ábending:
        Sjálfgefni textinn er fremur smár, en þú getur notað `textSize` kubbinn til
        að breyta því. Þú getur líka notað `fill` kubbinn til að breyta lit textans._"
      CSD U3 Sprites text debug: |-
        <img src="https://images.code.org/a313a455ef7033e840dfb21cb15cbb30-image-1491277088617.png" style="float: right; width: 200px; margin-left: 20px;">

        # Villuleit

        Þessi leikmynd hefur allan rétta kóðann en hann er ekki í réttri röð. Leikmyndin á að vera eins og myndin til hægri.  Getur þú breytt röð kubbanna svo að atriði leikmyndarinnar séu teiknuð í réttri röð?
      CSD U3 Sprites text debug_2018: |-
        <img src="https://images.code.org/a313a455ef7033e840dfb21cb15cbb30-image-1491277088617.png" style="float: right; width: 200px; margin-left: 20px;">

        # Villuleit

        Þessi leikmynd hefur allan rétta kóðann en hann er ekki í réttri röð. Leikmyndin á að vera eins og myndin til hægri.  Getur þú breytt röð kubbanna svo að atriði leikmyndarinnar séu teiknuð í réttri röð?
      CSD U3 Sprites text debug_2018_2019: |-
        <img src="https://images.code.org/a313a455ef7033e840dfb21cb15cbb30-image-1491277088617.png" style="float: right; width: 200px; margin-left: 20px;">

        # Villuleit

        Þessi leikmynd hefur allan rétta kóðann en hann er ekki í réttri röð. Leikmyndin á að vera eins og myndin til hægri.  Getur þú breytt röð kubbanna svo að atriði leikmyndarinnar séu teiknuð í réttri röð?
      CSD U3 Sprites text_2018: "# Að bæta við texta\\\r\n\n\\\r\nMeð `text` kubbnum
        getur þú sett texta hvar sem er á skjáinn. Breyttu textanum í gefna textakubbnum
        og bættu við öðrum `text` kubbi sem skrifar annars staðar á skjáinn.\\\r\n\\\r\n_Ábending:
        Sjálfgefni textinn er fremur smár, en þú getur notað `textSize` kubbinn til
        að breyta því. Þú getur líka notað `fill` kubbinn til að breyta lit textans._"
      CSD U3 Sprites text_2019: "# Að bæta við texta\\\r\n\n\\\r\nMeð `text` kubbnum
        getur þú sett texta hvar sem er á skjáinn. Breyttu textanum í gefna textakubbnum
        og bættu við öðrum `text` kubbi sem skrifar annars staðar á skjáinn.\\\r\n\\\r\n_Ábending:
        Sjálfgefni textinn er fremur smár, en þú getur notað `textSize` kubbinn til
        að breyta því. Þú getur líka notað `fill` kubbinn til að breyta lit textans._"
      CSD U3 UP_ARROW: |-
        # Moving Sprites

        You can change your sprite's position based on key presses in the same way you changed its animations.

        # Do This

        You have been provided with the start of a bug sprite. You need to pick the bug picture you want to use from the animation tab.

        -   Set the animation of the sprite to your favorite bug.
        -   Add an if statement inside your draw loop.
        -   Add a call to keyDown as the input to the if statement to check if the up arrow was pressed.
        -   Add code inside the conditional to move the sprite up if the up arrow is down.

        _Do you need to change sprite's x or y property to move it up?_
      CSD U3 UP_ARROW_2018: |-
        # Moving Sprites

        You can change your sprite's position based on key presses in the same way you changed its animations.

        # Do This

        -   Add an `if` statement inside your draw loop.
        -   Check whether the right arrow key has been pressed down.
        -   Add code inside the conditional to move the sprite right if the right arrow is down.

        _Do you need to change sprite's x or y property to move it right?_
      CSD U3 UP_ARROW_2018_2019: |-
        # Moving Sprites

        You can change your sprite's position based on key presses in the same way you changed its animations.

        # Do This

        -   Add an `if` statement inside your draw loop.
        -   Check whether the right arrow key has been pressed down.
        -   Add code inside the conditional to move the sprite right if the right arrow is down.

        _Do you need to change sprite's x or y property to move it right?_
      CSD U3 Variables Challenge: "# Áskorun: Að uppfæra breytur\\\r\n\n\\\r\n_Ráðfærðu
        þig við kennarann áður en þú ræðst í þessa áskorun_\\\r\n\\\r\nHingað til
        höfum við aldrei sett gildi í breytu oftar en einu sinni, en breytur er hægt
        að uppfæra hvenær sem er innan forrits. Lestu í gegnum dæmið og keyrðu það
        nokkrum sinnum til að skilja hvernig það virkar. Reyndu svo að breyta forritinu
        þannig að það teikni eina af þessum myndum.\\\r\n\\\r\n\\\r\n<img src=\"https://images.code.org/29f4d46d5aa041fb7d27aa2e3c77652e-image-1493161823337.png\"\nstyle=\"width:150px;
        border: 1px solid grey; margin:20px;\">\\\r\n<img src=\"https://images.code.org/629819fe91016ee1b8275c81e41770b5-image-1493161823334.png\"\nstyle=\"width:150px;
        border: 1px solid grey; margin:20px;\">\\\r\n<img src=\"https://images.code.org/acf7b8223b3a87594e20348306464de7-image-1493161823305.png\"\nstyle=\"width:150px;
        border: 1px solid grey; margin:20px;\">\\\r"
      CSD U3 Variables Challenge_2018: "# Áskorun: Að uppfæra breytur\\\r\n\n\\\r\n_Ráðfærðu
        þig við kennarann áður en þú ræðst í þessa áskorun_\\\r\n\\\r\nHingað til
        höfum við aldrei sett gildi í breytu oftar en einu sinni, en breytur er hægt
        að uppfæra hvenær sem er innan forrits. Lestu í gegnum dæmið og keyrðu það
        nokkrum sinnum til að skilja hvernig það virkar. Reyndu svo að breyta forritinu
        þannig að það teikni eina af þessum myndum.\\\r\n\\\r\n\\\r\n<img src=\"https://images.code.org/29f4d46d5aa041fb7d27aa2e3c77652e-image-1493161823337.png\"\nstyle=\"width:150px;
        border: 1px solid grey; margin:20px;\">\\\r\n<img src=\"https://images.code.org/629819fe91016ee1b8275c81e41770b5-image-1493161823334.png\"\nstyle=\"width:150px;
        border: 1px solid grey; margin:20px;\">\\\r\n<img src=\"https://images.code.org/acf7b8223b3a87594e20348306464de7-image-1493161823305.png\"\nstyle=\"width:150px;
        border: 1px solid grey; margin:20px;\">\\\r"
      CSD U3 Variables Challenge_2019: "# Áskorun: Að uppfæra breytur\\\r\n\n\\\r\n_Ráðfærðu
        þig við kennarann áður en þú ræðst í þessa áskorun_\\\r\n\\\r\nHingað til
        höfum við aldrei sett gildi í breytu oftar en einu sinni, en breytur er hægt
        að uppfæra hvenær sem er innan forrits. Lestu í gegnum dæmið og keyrðu það
        nokkrum sinnum til að skilja hvernig það virkar. Reyndu svo að breyta forritinu
        þannig að það teikni eina af þessum myndum.\\\r\n\\\r\n\\\r\n<img src=\"https://images.code.org/29f4d46d5aa041fb7d27aa2e3c77652e-image-1493161823337.png\"\nstyle=\"width:150px;
        border: 1px solid grey; margin:20px;\">\\\r\n<img src=\"https://images.code.org/629819fe91016ee1b8275c81e41770b5-image-1493161823334.png\"\nstyle=\"width:150px;
        border: 1px solid grey; margin:20px;\">\\\r\n<img src=\"https://images.code.org/acf7b8223b3a87594e20348306464de7-image-1493161823305.png\"\nstyle=\"width:150px;
        border: 1px solid grey; margin:20px;\">\\\r"
      CSD U3 Variables Draw Challenge: "# áskorun: Teikna mynd\\\r\n\n\\\r\n_Ráðfærðu
        þig við kennarann áður en þú reynir við þessa áskorun_\\\r\n\\\r\nNotaðu breytur
        og teiknaðu samsetta mynd þar sem margir hlutir nota sömu breytu fyrir stærð
        eða staðsetningu. Teiknaðu til dæmis andlit með breytum sem stjórna stærð
        og/eða stað augna, eyrna og nasa. Þegar teikningin er fullgerð, prófaðu þá
        að breyta gildum breytnanna til að ganga úr skugga um að allir hlutar myndarinnar
        breytist saman.\\\r"
      CSD U3 Variables Draw Challenge_2018: "# áskorun: Teikna mynd\\\r\n\n\\\r\n_Ráðfærðu
        þig við kennarann áður en þú reynir við þessa áskorun_\\\r\n\\\r\nNotaðu breytur
        og teiknaðu samsetta mynd þar sem margir hlutir nota sömu breytu fyrir stærð
        eða staðsetningu. Teiknaðu til dæmis andlit með breytum sem stjórna stærð
        og/eða stað augna, eyrna og nasa. Þegar teikningin er fullgerð, prófaðu þá
        að breyta gildum breytnanna til að ganga úr skugga um að allir hlutar myndarinnar
        breytist saman.\\\r"
      CSD U3 Variables Draw Challenge_2019: "# áskorun: Teikna mynd\\\r\n\n\\\r\n_Ráðfærðu
        þig við kennarann áður en þú reynir við þessa áskorun_\\\r\n\\\r\nNotaðu breytur
        og teiknaðu samsetta mynd þar sem margir hlutir nota sömu breytu fyrir stærð
        eða staðsetningu. Teiknaðu til dæmis andlit með breytum sem stjórna stærð
        og/eða stað augna, eyrna og nasa. Þegar teikningin er fullgerð, prófaðu þá
        að breyta gildum breytnanna til að ganga úr skugga um að allir hlutar myndarinnar
        breytist saman.\\\r"
      CSD U3 Variables Draw Poppy: "# Breyta notuð oft\\\r\n\n\\\r\nÞetta forrit hefur
        bara eina breytu sem heitir `petalSize` (stærð krónublaða) en notar hana 8
        sinnum. Þannig er auðvelt og fljótlegt að breyta því hvernig myndin er teiknuð.\\\r\n\\\r\n\n#
        Gerðu þetta\\\r\n\n\\\r\n\n-   Breyttu tölunni sem er sett í `petalSize` þannig
        að rauðu krónublöðin snerti hvert annað.\\\r\n-   Reyndu að finna þá stærð
        sem kemur best út. Berðu þitt svar saman við svar annars."
      CSD U3 Variables Draw Poppy_2018: "# Breyta notuð oft\\\r\n\n\\\r\nÞetta forrit
        hefur bara eina breytu sem heitir `petalSize` (stærð krónublaða) en notar
        hana 8 sinnum. Þannig er auðvelt og fljótlegt að breyta því hvernig myndin
        er teiknuð.\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\n\n-   Breyttu tölunni
        sem er sett í `petalSize` þannig að rauðu krónublöðin snerti hvert annað.\\\r\n-
        \  Reyndu að finna þá stærð sem kemur best út. Berðu þitt svar saman við svar
        annars."
      CSD U3 Variables Draw Poppy_2019: "# Breyta notuð oft\\\r\n\n\\\r\nÞetta forrit
        hefur bara eina breytu sem heitir `petalSize` (stærð krónublaða) en notar
        hana 8 sinnum. Þannig er auðvelt og fljótlegt að breyta því hvernig myndin
        er teiknuð.\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\n\n-   Breyttu tölunni
        sem er sett í `petalSize` þannig að rauðu krónublöðin snerti hvert annað.\\\r\n-
        \  Reyndu að finna þá stærð sem kemur best út. Berðu þitt svar saman við svar
        annars."
      CSD U3 Variables Predict Where X: "# Að nota breytur\\\r\n\n\\\r\nÍ þessu forriti
        er breytan `xPosition` notuð til að geyma x-hnit hringsins.\\\r\n\\\r\n\n#
        Gerðu þetta\\\r\n\n-   Keyrðu forritið til að sjá hvernig það virkar.\\\r\n-
        \  Breyttu tölunni sem er geymd í breytunni [Sýndu mér hvar](#triggercallout=code_triggered)\n
        \   og keyrðu kóðann aftur."
      CSD U3 Variables Predict Where XY Embed: |-
        # Predict

        In which corner of the screen will the circle be drawn?

        _Hint: Click the "Show grid" box to help you find the exact coordinates on the screen._
      CSD U3 Variables Predict Where XY Embed_2018: |-
        # Predict

        In which corner of the screen will the circle be drawn?

        _Hint: Click the "Show grid" box to help you find the exact coordinates on the screen._
      CSD U3 Variables Predict Where XY Embed_2019: |-
        # Predict

        In which corner of the screen will the circle be drawn?

        _Hint: Click the "Show grid" box to help you find the exact coordinates on the screen._
      CSD U3 Variables Predict Where X_2018: "# Að nota breytur\\\r\n\n\\\r\nÍ þessu
        forriti er breytan `xPosition` notuð til að geyma x-hnit hringsins.\\\r\n\\\r\n\n#
        Gerðu þetta\\\r\n\n-   Keyrðu forritið til að sjá hvernig það virkar.\\\r\n-
        \  Breyttu tölunni sem er geymd í breytunni [Sýndu mér hvar](#triggercallout=code_triggered)\n
        \   og keyrðu kóðann aftur."
      CSD U3 Variables Predict Where X_2019: "# Að nota breytur\\\r\n\n\\\r\nÍ þessu
        forriti er breytan `xPosition` notuð til að geyma x-hnit hringsins.\\\r\n\\\r\n\n#
        Gerðu þetta\\\r\n\n-   Keyrðu forritið til að sjá hvernig það virkar.\\\r\n-
        \  Breyttu tölunni sem er geymd í breytunni [Sýndu mér hvar](#triggercallout=code_triggered)\n
        \   og keyrðu kóðann aftur."
      CSD U3 Variables change circle size: "<img src=\"https://images.code.org/acc7f5763a9ca1c17647f7dd9711c9f5-image-1490977696189.28.01\nAM.png\"
        style=\"float:right; height:150px\">\\\r\n\\\r\n\n# Villuleit: Að nota breytur\\\r\n\n\\\r\nÞetta
        forrit notar breytuna `circleSize` til að stjórna breidd og hæð hrings.\\\r\n\\\r\n\n#
        Gerðu þetta\\\r\n\n\\\r\n\n-   Breyttu gildinu sem er í `circleSize` þannig
        að hringurinn fylli út í skjáinn."
      CSD U3 Variables change circle size_2018: "<img src=\"https://images.code.org/acc7f5763a9ca1c17647f7dd9711c9f5-image-1490977696189.28.01\nAM.png\"
        style=\"float:right; height:150px\">\\\r\n\\\r\n\n# Villuleit: Að nota breytur\\\r\n\n\\\r\nÞetta
        forrit notar breytuna `circleSize` til að stjórna breidd og hæð hrings.\\\r\n\\\r\n\n#
        Gerðu þetta\\\r\n\n\\\r\n\n-   Breyttu gildinu sem er í `circleSize` þannig
        að hringurinn fylli út í skjáinn."
      CSD U3 Variables change circle size_2019: "<img src=\"https://images.code.org/acc7f5763a9ca1c17647f7dd9711c9f5-image-1490977696189.28.01\nAM.png\"
        style=\"float:right; height:150px\">\\\r\n\\\r\n\n# Villuleit: Að nota breytur\\\r\n\n\\\r\nÞetta
        forrit notar breytuna `circleSize` til að stjórna breidd og hæð hrings.\\\r\n\\\r\n\n#
        Gerðu þetta\\\r\n\n\\\r\n\n-   Breyttu gildinu sem er í `circleSize` þannig
        að hringurinn fylli út í skjáinn."
      CSD U3 Variables naming rules v2: |-
        <img style="float: right" src="https://images.code.org/f4b306422763c84bb924f4f7d3a6dca6-image-1492798058864.06.38 AM.png">

        # Villuleit: Að gefa breytum heiti

        Í þessu forriti eru margar villur sem tengjast röngum breytuheitum.  Villurnar koma í veg fyrir að forritið sé sýnt sem kubbar svo að kóðinn er í texta.

        # Gerðu þetta

        -   Finndu regluna sem hvert breytuheiti er að brjóta.
        -   **Leiðréttu villurnar með því að gefa breytunum ný heiti sem fylgja reglunum sem þú lærðir um í síðasta áfanga.**
        -   Ef forritið virkar rétt ætti það að teikna myndina hér til hægri.

        <summary><em>Vísbending: Smelltu á örina til að fá stutta samantekt á reglunum.</em><details><ul>
        <li>Breytuheiti mega ekki innihalda bil.</li>
        <li>Breytuheiti mega ekki byrja á tölustaf.</li>
        <li>Breytuheiti verður alltaf að skrifa nákvæmlega eins, líka há- og lágstafi.</li>
        </ul></details></summary>
      CSD U3 Variables naming rules v2_2018: |-
        <img style="float: right" src="https://images.code.org/f4b306422763c84bb924f4f7d3a6dca6-image-1492798058864.06.38 AM.png">

        # Villuleit: Að gefa breytum heiti

        Í þessu forriti eru margar villur sem tengjast röngum breytuheitum.  Villurnar koma í veg fyrir að forritið sé sýnt sem kubbar svo að kóðinn er í texta.

        # Gerðu þetta

        -   Finndu regluna sem hvert breytuheiti er að brjóta.
        -   **Leiðréttu villurnar með því að gefa breytunum ný heiti sem fylgja reglunum sem þú lærðir um í síðasta áfanga.**
        -   Ef forritið virkar rétt ætti það að teikna myndina hér til hægri.

        <summary><em>Vísbending: Smelltu á örina til að fá stutta samantekt á reglunum.</em><details><ul>
        <li>Breytuheiti mega ekki innihalda bil.</li>
        <li>Breytuheiti mega ekki byrja á tölustaf.</li>
        <li>Breytuheiti verður alltaf að skrifa nákvæmlega eins, líka há- og lágstafi.</li>
        </ul></details></summary>
      CSD U3 Variables naming rules v2_2018_2019: |-
        <img style="float: right" src="https://images.code.org/f4b306422763c84bb924f4f7d3a6dca6-image-1492798058864.06.38 AM.png">

        # Debug: Naming Variables

        This program has multiple errors caused by bad label names.  The errors prevent the program from being viewed in block mode, so the code is in text.

        # Do This

        -   Try to figure out what problems with the variable names are causing the errors.
        -   **Correct the errors by picking new names.**
        -   If your program works it should draw the image on the right.

        <summary><em>Hint: Click the arrow to see a few rules.</em><details><ul>
        <li>Labels can't have spaces.</li>
        <li>Labels can't start with a number.</li>
        <li>Capitalization and spelling must be exactly the same.</li>
        </ul></details></summary>
      CSD U3 Variables random with assignment: "<img src=\"https://images.code.org/ba9592e887f52c1a538a0517560cdacf-image-1493913633878.gif\"\nstyle=\"float:right;height:150px\">\\\r\n\\\r\n\n#
        Villuleit: Breytur og slembitölur\\\r\n\n\\\r\nÍ breytu er líka hægt að setja
        tölu valda af handahófi (slembitölu). Þannig er hægt að geyma staka slembitölu
        sem síðan er hægt að nota aftur og aftur í forritinu.\\\r\n\\\r\n\n# \n\nGerðu
        þetta\\\r\n\\\r\nÍ breytuna`eyeSize` er sett slembitala. Því miður er aðeins
        annað augað að nota breytuna.\\\r\n\\\r\n\n-   **Keyrðu forritið** til að
        sjá hvernig það virkar\\\r\n-   **Breyttu forritinu** svo að bæði augun hafi
        sömu handahófsstærðina. Vísbending: Þú þarft aðeins að breyta einni línu af
        kóða."
      CSD U3 Variables random with assignment_2018: "<img src=\"https://images.code.org/ba9592e887f52c1a538a0517560cdacf-image-1493913633878.gif\"\nstyle=\"float:right;height:150px\">\\\r\n\\\r\n\n#
        Villuleit: Breytur og slembitölur\\\r\n\n\\\r\nÍ breytu er líka hægt að setja
        tölu valda af handahófi (slembitölu). Þannig er hægt að geyma staka slembitölu
        sem síðan er hægt að nota aftur og aftur í forritinu.\\\r\n\\\r\n\n# \n\nGerðu
        þetta\\\r\n\\\r\nÍ breytuna`eyeSize` er sett slembitala. Því miður er aðeins
        annað augað að nota breytuna.\\\r\n\\\r\n\n-   **Keyrðu forritið** til að
        sjá hvernig það virkar\\\r\n-   **Breyttu forritinu** svo að bæði augun hafi
        sömu handahófsstærðina. Vísbending: Þú þarft aðeins að breyta einni línu af
        kóða."
      CSD U3 Variables random with assignment_2019: "<img src=\"https://images.code.org/ba9592e887f52c1a538a0517560cdacf-image-1493913633878.gif\"\nstyle=\"float:right;height:150px\">\\\r\n\\\r\n\n#
        Villuleit: Breytur og slembitölur\\\r\n\n\\\r\nÍ breytu er líka hægt að setja
        tölu valda af handahófi (slembitölu). Þannig er hægt að geyma staka slembitölu
        sem síðan er hægt að nota aftur og aftur í forritinu.\\\r\n\\\r\n\n# \n\nGerðu
        þetta\\\r\n\\\r\nÍ breytuna`eyeSize` er sett slembitala. Því miður er aðeins
        annað augað að nota breytuna.\\\r\n\\\r\n\n-   **Keyrðu forritið** til að
        sjá hvernig það virkar\\\r\n-   **Breyttu forritinu** svo að bæði augun hafi
        sömu handahófsstærðina. Vísbending: Þú þarft aðeins að breyta einni línu af
        kóða."
      CSD U3 Watcher Debug: "<img src=\"https://images.code.org/20cc981b4b4f99b2ff96415e19af7600-image-1492034149715.gif\"\nstyle=\"float:
        right; margin-left: 20px;\">\\\r\n\\\r\n\n# Villuleit: Teljaramynstrið vaktað\\\r\n\n\\\r\nVið
        skulum æfa að nota vaka (enska:watchers) til að aflúsa kóðann. Þetta forrit
        ætti að færa mótorhjólið neðan frá vinstri og upp til hægri eins og myndin
        til hægri sýnir. Því miður færist hjólið of fljótt út af skjánum til að það
        sjáist hvað fer úrskeiðis.\\\r\n\\\r\nNotaðu gefnu vakana fyrir `cycle.x`\nog
        `cycle.y` til að komast að því hvor eiginleikinn er að færa hjólið í ranga
        átt og lagaðu svo forritið."
      CSD U3 Watcher Debug_2018: "<img src=\"https://images.code.org/20cc981b4b4f99b2ff96415e19af7600-image-1492034149715.gif\"\nstyle=\"float:
        right; margin-left: 20px;\">\\\r\n\\\r\n\n# Villuleit: Teljaramynstrið vaktað\\\r\n\n\\\r\nVið
        skulum æfa að nota vaka (enska:watchers) til að aflúsa kóðann. Þetta forrit
        ætti að færa mótorhjólið neðan frá vinstri og upp til hægri eins og myndin
        til hægri sýnir. Því miður færist hjólið of fljótt út af skjánum til að það
        sjáist hvað fer úrskeiðis.\\\r\n\\\r\nNotaðu gefnu vakana fyrir `cycle.x`\nog
        `cycle.y` til að komast að því hvor eiginleikinn er að færa hjólið í ranga
        átt og lagaðu svo forritið."
      CSD U3 Watcher Debug_2019: "<img src=\"https://images.code.org/20cc981b4b4f99b2ff96415e19af7600-image-1492034149715.gif\"\nstyle=\"float:
        right; margin-left: 20px;\">\\\r\n\\\r\n\n# Villuleit: Teljaramynstrið vaktað\\\r\n\n\\\r\nVið
        skulum æfa að nota vaka (enska:watchers) til að aflúsa kóðann. Þetta forrit
        ætti að færa mótorhjólið neðan frá vinstri og upp til hægri eins og myndin
        til hægri sýnir. Því miður færist hjólið of fljótt út af skjánum til að það
        sjáist hvað fer úrskeiðis.\\\r\n\\\r\nNotaðu gefnu vakana fyrir `cycle.x`\nog
        `cycle.y` til að komast að því hvor eiginleikinn er að færa hjólið í ranga
        átt og lagaðu svo forritið."
      CSD U3 Watcher Predict response: |-
        # Watching the Counter Pattern

        Watchers are a really useful tool for debugging programs that use the counter pattern.

        -   **Read the program** and predict what the program will do.
        -   **Run the program** to check your prediction.
        -   **Look at the watchers** and explain to a neighbor what you are seeing.
      CSD U3 Watcher Predict response_2018: |-
        # Watching the Counter Pattern

        Watchers are a really useful tool for debugging programs that use the counter pattern.

        -   **Read the program** and predict what the program will do.
        -   **Run the program** to check your prediction.
        -   **Look at the watchers** and explain to a neighbor what you are seeing.
      CSD U3 Watcher Predict response_2019: |-
        # Watching the Counter Pattern

        Watchers are a really useful tool for debugging programs that use the counter pattern.

        -   **Read the program** and predict what the program will do.
        -   **Run the program** to check your prediction.
        -   **Look at the watchers** and explain to a neighbor what you are seeing.
      CSD U3 abstraction accelerateX: |-
        # Velocity and the Counter Pattern

        As you just saw, using a `sprite.velocityX` property with the counter pattern will change a sprite's velocity during the program. This makes the sprite speed up. Do a little practice using this pattern yourself.

        # Do This

        This program already makes a car move across the screen, but it's going very slowly.

        -   Use the counter pattern with the sprite's velocityX property to make the car speed up. ( [Show me where](#triggercallout=code_triggered) )
      CSD U3 abstraction accelerateX_2018: |-
        # Velocity and the Counter Pattern

        As you just saw, using a `sprite.velocityX` property with the counter pattern will change a sprite's velocity during the program. This makes the sprite speed up. Do a little practice using this pattern yourself.

        # Do This

        This program already makes a car move across the screen, but it's going very slowly.

        -   Use the counter pattern with the sprite's velocityX property to make the car speed up. ( [Show me where](#triggercallout=code_triggered) )
      CSD U3 abstraction accelerateX_2019: |-
        # Velocity and the Counter Pattern

        As you just saw, using a `sprite.velocityX` property with the counter pattern will change a sprite's velocity during the program. This makes the sprite speed up. Do a little practice using this pattern yourself.

        # Do This

        This program already makes a car move across the screen, but it's going very slowly.

        -   Use the counter pattern with the sprite's velocityX property to make the car speed up. ( [Show me where](#triggercallout=code_triggered) )
      CSD U3 abstraction accelerateY: |-
        # Falling Rock

        The rock should speed up as it falls down the screen.  Can you use the same counter pattern with `velocityY` inside the draw loop to make the rock go faster and faster as it falls?

        # Do This

        -   Use the counter pattern with the sprite's y velocity to make the rock speed up as it falls.  ( [Show me where](#triggercallout=code_triggered) )

        _Challenge: Can you make the rock spin as it falls?_
      CSD U3 abstraction accelerateY up: |-
        # Rising Bubble

        This program makes a bubble rise up the water. Can you make it get faster as it rises?

        # Do This

        -   Use the counter pattern and the sprite's y velocity to make the bubble move up more quickly.
      CSD U3 abstraction accelerateY up_2018: |-
        # Rising Bubble

        This program makes a bubble rise up the water. Can you make it get faster as it rises?

        # Do This

        -   Use the counter pattern and the sprite's y velocity to make the bubble move up more quickly.
      CSD U3 abstraction accelerateY up_2019: |-
        # Rising Bubble

        This program makes a bubble rise up the water. Can you make it get faster as it rises?

        # Do This

        -   Use the counter pattern and the sprite's y velocity to make the bubble move up more quickly.
      CSD U3 abstraction accelerateY_2018: |-
        # Falling Rock

        The rock should speed up as it falls down the screen.  Can you use the same counter pattern with `velocityY` inside the draw loop to make the rock go faster and faster as it falls?

        # Do This

        -   Use the counter pattern with the sprite's y velocity to make the rock speed up as it falls.  ( [Show me where](#triggercallout=code_triggered) )

        _Challenge: Can you make the rock spin as it falls?_
      CSD U3 abstraction accelerateY_2019: |-
        # Falling Rock

        The rock should speed up as it falls down the screen.  Can you use the same counter pattern with `velocityY` inside the draw loop to make the rock go faster and faster as it falls?

        # Do This

        -   Use the counter pattern with the sprite's y velocity to make the rock speed up as it falls.  ( [Show me where](#triggercallout=code_triggered) )

        _Challenge: Can you make the rock spin as it falls?_
      CSD U3 abstraction add coin: |-
        # Add a Coin

        In the next few levels you'll add to your program to make a simple game. In this game the player will collect points to increase the score. This is a good chance to see how different kinds of movement can affect the way a game feels, and it will also just help you practice programming skills.

        # Do This

        In this level you'll just be adding a new coin sprite to the game. You should be working at the top of your program, outside the draw loop.

        -   Use the `createSprite()` block to create a new sprite. Make sure to give it a descriptive name such as **coin**.
        -   Use the `sprite.x` and `sprite.y` properties of the sprite to give it a random X and Y position between 0 and 400.
        -   In the Animation Tab there is already a coin animation. Use the `sprite.setAnimation()` block to give your sprite this animation.

        Test your code before moving on. When you run the game, you should see a coin sprite appear somewhere randomly on the screen.
      CSD U3 abstraction add coin_2018: |-
        # Add a Coin

        In the next few levels you'll add to your program to make a simple game. In this game the player will collect points to increase the score. This is a good chance to see how different kinds of movement can affect the way a game feels, and it will also just help you practice programming skills.

        # Do This

        In this level you'll just be adding a new coin sprite to the game. You should be working at the top of your program, outside the draw loop.

        -   Use the `createSprite()` block to create a new sprite. Make sure to give it a descriptive name such as **coin**.
        -   Use the `sprite.x` and `sprite.y` properties of the sprite to give it a random X and Y position between 0 and 400.
        -   In the Animation Tab there is already a coin animation. Use the `sprite.setAnimation()` block to give your sprite this animation.

        Test your code before moving on. When you run the game, you should see a coin sprite appear somewhere randomly on the screen.
      CSD U3 abstraction add coin_2019: |-
        # Add a Coin

        In the next few levels you'll add to your program to make a simple game. In this game the player will collect points to increase the score. This is a good chance to see how different kinds of movement can affect the way a game feels, and it will also just help you practice programming skills.

        # Do This

        In this level you'll just be adding a new coin sprite to the game. You should be working at the top of your program, outside the draw loop.

        -   Use the `createSprite()` block to create a new sprite. Make sure to give it a descriptive name such as **coin**.
        -   Use the `sprite.x` and `sprite.y` properties of the sprite to give it a random X and Y position between 0 and 400.
        -   In the Animation Tab there is already a coin animation. Use the `sprite.setAnimation()` block to give your sprite this animation.

        Test your code before moving on. When you run the game, you should see a coin sprite appear somewhere randomly on the screen.
      CSD U3 abstraction decelerateX: "# Slowing Things Down\n\nNow that you've had
        some practice speeding things up, can you use the counter pattern to slow
        sprites down? \n\n# Do This\n\nThe car is going to run into the water! You'll
        need to use the counter pattern to slow it down.\n\n-   Use the `sprite.velocityX`
        block with a counter pattern to slow the car down by 0.25 as it moves across
        the screen.  \n-   Discuss with your Partner: What do you think will happen
        when the car finally stops?\n\n_Challenge: Add code that makes the car slow
        down only if his velocityX is greater than 0._"
      CSD U3 abstraction decelerateX_2018: "# Slowing Things Down\n\nNow that you've
        had some practice speeding things up, can you use the counter pattern to slow
        sprites down? \n\n# Do This\n\nThe car is going to run into the water! You'll
        need to use the counter pattern to slow it down.\n\n-   Use the `sprite.velocityX`
        block with a counter pattern to slow the car down by 0.25 as it moves across
        the screen.  \n-   Discuss with your Partner: What do you think will happen
        when the car finally stops?\n\n_Challenge: Add code that makes the car slow
        down only if its velocityX is greater than 0._"
      CSD U3 abstraction decelerateX_2019: "# Slowing Things Down\n\nNow that you've
        had some practice speeding things up, can you use the counter pattern to slow
        sprites down? \n\n# Do This\n\nThe car is going to run into the water! You'll
        need to use the counter pattern to slow it down.\n\n-   Use the `sprite.velocityX`
        block with a counter pattern to slow the car down by 0.25 as it moves across
        the screen.  \n-   Discuss with your Partner: What do you think will happen
        when the car finally stops?\n\n_Challenge: Add code that makes the car slow
        down only if its velocityX is greater than 0._"
      CSD U3 abstraction decelerateY: |-
        # Simulating Gravity

        In the last level you slowed down the car with the `sprite.velocityX` block and the counter pattern. It almost looked like the car was getting pulled to the left.

        If you use this same pattern with the `sprite.velocityY` block it will look like your sprite is always being pulled down, which is exactly what gravity does!

        # Do This

        The rock is thrown in the air but it never falls back down.

        -   Use the `sprite.velocityY` block with the counter pattern to make the rock slow down and then fall in the other direction.
        -   Experiment with different values in your counter pattern. Do you want the rock to slow down quickly or gradually? What looks most realistic to you?
        -   Discuss with your partner: Why are you setting the rock's initial velocity outside the draw loop? Why are you changing the sprite's velocity inside the draw loop?
      CSD U3 abstraction decelerateY_2018: |-
        # Simulating Gravity

        In the last level you slowed down the car with the `sprite.velocityX` block and the counter pattern. It almost looked like the car was getting pulled to the left.

        If you use this same pattern with the `sprite.velocityY` block it will look like your sprite is always being pulled down, which is exactly what gravity does!

        # Do This

        The rock is thrown in the air but it never falls back down.

        -   Use the `sprite.velocityY` block with the counter pattern to make the rock slow down and then fall in the other direction.
        -   Experiment with different values in your counter pattern. Do you want the rock to slow down quickly or gradually? What looks most realistic to you?
        -   Discuss with your partner: Why are you setting the rock's initial velocity outside the draw loop? Why are you changing the sprite's velocity inside the draw loop?
      CSD U3 abstraction decelerateY_2019: |-
        # Simulating Gravity

        In the last level you slowed down the car with the `sprite.velocityX` block and the counter pattern. It almost looked like the car was getting pulled to the left.

        If you use this same pattern with the `sprite.velocityY` block it will look like your sprite is always being pulled down, which is exactly what gravity does!

        # Do This

        The rock is thrown in the air but it never falls back down.

        -   Use the `sprite.velocityY` block with the counter pattern to make the rock slow down and then fall in the other direction.
        -   Experiment with different values in your counter pattern. Do you want the rock to slow down quickly or gradually? What looks most realistic to you?
        -   Discuss with your partner: Why are you setting the rock's initial velocity outside the draw loop? Why are you changing the sprite's velocity inside the draw loop?
      CSD U3 abstraction jump: |-
        # Jumping

        You now have all the blocks you need to make your sprite jump!

        Just as you checked whether your fish was at the left edge, you'll need to check whether the frog is on the ground.  If it is, it could either jump up or stay still, so you'll need one more `if` block to check whether the user has pressed the up arrow ( [Show me where](#triggercallout=code_triggered1) ).

        You'll also need to check whether the frog has reached its highest point, and send it back down if it has.

        # Do this

        -   Find the `if` statement that checks whether the sprite is on the ground, and look at the `if` statement inside of it that checks whether the user has pressed the "up" arrow key. ( [Show me where](#triggercallout=code_triggered1) )
            -   Use the `velocityY` block to make the frog jump up when the user presses the arrow key.
            -   Use the `velocityY` block to make the frog stop moving otherwise.
        -   Add an if statement that does the following  ( [Show me where](#triggercallout=code_triggered2) )
            -   Checks whether the frog sprite has reached its highest point.
            -   If so, use the `velocityY` block to make the sprite fall back down.
      CSD U3 abstraction jump_2018: |-
        # Jumping

        You now have all the blocks you need to make your sprite jump!  The sprite should jump up if it's on the ground and the user presses the "up" key, then should start moving back down when it reaches the top of its jump.

        # Do this

        -   Find the `if` statement that checks whether the sprite is on the ground, and look at the `if` statement inside of it that checks whether the user has pressed the "up" arrow key. ( [Show me where](#triggercallout=code_triggered1) )
            -   Make the frog jump up when the user presses the arrow key.
            -   Make the frog stop moving otherwise.
        -   Add code that does the following  ( [Show me where](#triggercallout=code_triggered2) )
            -   Checks whether the frog sprite has reached its highest point.
            -   If so, make the sprite go back down.
      CSD U3 abstraction jump_2018_2019: |-
        # Jumping

        You now have all the blocks you need to make your sprite jump!  The sprite should jump up if it's on the ground and the user presses the "up" key, then should start moving back down when it reaches the top of its jump.

        # Do this

        -   Find the `if` statement that checks whether the sprite is on the ground, and look at the `if` statement inside of it that checks whether the user has pressed the "up" arrow key. ( [Show me where](#triggercallout=code_triggered1) )
            -   Make the frog jump up when the user presses the arrow key.
            -   Make the frog stop moving otherwise.
        -   Add code that does the following  ( [Show me where](#triggercallout=code_triggered2) )
            -   Checks whether the frog sprite has reached its highest point.
            -   If so, make the sprite go back down.
      CSD U3 abstraction jumping: |-
        # Jumping

        Increasing a sprite's y velocity inside the counter pattern can simulate gravity. By adding user interactions you can make your sprite appear to jump as well. For starters you'll make a simple jump, and then make it more realistic looking in the next level.

        # Do This

        A sprite has already been created for you that falls because its y velocity is increased inside the draw loop. You'll need to make this sprite appear to jump.

        -   Inside the `if` block that checks whether the up arrow has been pressed, set the sprite's y velocity to -5. ( [Show me where](#triggercallout=callout1) )
        -   Discuss with a neighbor: Why does this code run the way it does? How would using a number besides -5 affect the way the code works? How could you jump higher or lower?
      CSD U3 abstraction jumping_2018: |-
        # Jumping

        Increasing a sprite's y velocity inside the counter pattern can simulate gravity. By adding user interactions you can make your sprite appear to jump as well. For starters you'll make a simple jump, and then make it more realistic looking in the next level.

        # Do This

        A sprite has already been created for you that falls because its y velocity is increased inside the draw loop. You'll need to make this sprite appear to jump.

        -   Inside the `if` block that checks whether the up arrow has been pressed, set the sprite's y velocity to -5. ( [Show me where](#triggercallout=callout1) )
        -   Discuss with a neighbor: Why does this code run the way it does? How would using a number besides -5 affect the way the code works? How could you jump higher or lower?
      CSD U3 abstraction jumping_2019: |-
        # Jumping

        Increasing a sprite's y velocity inside the counter pattern can simulate gravity. By adding user interactions you can make your sprite appear to jump as well. For starters you'll make a simple jump, and then make it more realistic looking in the next level.

        # Do This

        A sprite has already been created for you that falls because its y velocity is increased inside the draw loop. You'll need to make this sprite appear to jump.

        -   Inside the `if` block that checks whether the up arrow has been pressed, set the sprite's y velocity to -5. ( [Show me where](#triggercallout=callout1) )
        -   Discuss with a neighbor: Why does this code run the way it does? How would using a number besides -5 affect the way the code works? How could you jump higher or lower?
      CSD U3 abstraction left right counter: |-
        # Floating Right

        You're now using the counter pattern with the sprite's Y velocity to simulate gravity and jumping. If you use the sprite's X velocity in the counter pattern then you can make your sprite float from side to side as well.

        # Do This

        In this level you'll make your sprite start floating to the right when the right arrow is pressed.

        -   Add an `if` statement inside your draw loop below the one you created for the "up" arrow.
        -   Use the `keyDown` block to make the `if` statement respond to when the "right" arrow is pressed.
        -   Inside the `if` block use the counter pattern with the `sprite.velocityX` block to add 0.1 to the sprite's X velocity.

        Run your code to see how it works. The sprite should start floating to the right when you press the right arrow and jump when you press "up". You'll make the left arrow work in the next level.
      CSD U3 abstraction left right counter 2: |-
        # Floating Left

        In the last level you got detailed instructions on how to make your sprite start floating to the right. This time you'll need to make your sprite float to the left on your own. You should be pretty comfortable with using velocity and the counter pattern together at this point. If you're having trouble, talk to a neighbor or review some of the past levels.

        # Do This

        -   Add code to your draw loop that will make the sprite start moving to the left when the "left" arrow is down.
        -   Make sure you're using velocity and the counter pattern together.

        Once your code is working share what you wrote with a partner. Is your sprite easy to control? Does changing the amount you add or subtract in the counter patterns you wrote affect the way the game feels? What kind of game might be fun to make with a player that moves like this?
      CSD U3 abstraction left right counter 2_2018: |-
        # Floating Left

        In the last level you got detailed instructions on how to make your sprite start floating to the right. This time you'll need to make your sprite float to the left on your own. You should be pretty comfortable with using velocity and the counter pattern together at this point. If you're having trouble, talk to a neighbor or review some of the past levels.

        # Do This

        -   Add code to your draw loop that will make the sprite start moving to the left when the "left" arrow is down.
        -   Make sure you're using velocity and the counter pattern together.

        Once your code is working share what you wrote with a partner. Is your sprite easy to control? Does changing the amount you add or subtract in the counter patterns you wrote affect the way the game feels? What kind of game might be fun to make with a player that moves like this?
      CSD U3 abstraction left right counter 2_2019: |-
        # Floating Left

        In the last level you got detailed instructions on how to make your sprite start floating to the right. This time you'll need to make your sprite float to the left on your own. You should be pretty comfortable with using velocity and the counter pattern together at this point. If you're having trouble, talk to a neighbor or review some of the past levels.

        # Do This

        -   Add code to your draw loop that will make the sprite start moving to the left when the "left" arrow is down.
        -   Make sure you're using velocity and the counter pattern together.

        Once your code is working share what you wrote with a partner. Is your sprite easy to control? Does changing the amount you add or subtract in the counter patterns you wrote affect the way the game feels? What kind of game might be fun to make with a player that moves like this?
      CSD U3 abstraction left right counter_2018: |-
        # Floating Right

        You're now using the counter pattern with the sprite's Y velocity to simulate gravity and jumping. If you use the sprite's X velocity in the counter pattern then you can make your sprite float from side to side as well.

        # Do This

        In this level you'll make your sprite start floating to the right when the right arrow is pressed.

        -   Add an `if` statement inside your draw loop below the one you created for the "up" arrow.
        -   Use the `keyDown` block to make the `if` statement respond to when the "right" arrow is pressed.
        -   Inside the `if` block use the counter pattern with the `sprite.velocityX` block to add 0.1 to the sprite's X velocity.

        Run your code to see how it works. The sprite should start floating to the right when you press the right arrow and jump when you press "up". You'll make the left arrow work in the next level.
      CSD U3 abstraction left right counter_2019: |-
        # Floating Right

        You're now using the counter pattern with the sprite's Y velocity to simulate gravity and jumping. If you use the sprite's X velocity in the counter pattern then you can make your sprite float from side to side as well.

        # Do This

        In this level you'll make your sprite start floating to the right when the right arrow is pressed.

        -   Add an `if` statement inside your draw loop below the one you created for the "up" arrow.
        -   Use the `keyDown` block to make the `if` statement respond to when the "right" arrow is pressed.
        -   Inside the `if` block use the counter pattern with the `sprite.velocityX` block to add 0.1 to the sprite's X velocity.

        Run your code to see how it works. The sprite should start floating to the right when you press the right arrow and jump when you press "up". You'll make the left arrow work in the next level.
      CSD U3 abstraction looping: |-
        # Looping

        The game will be more fun if the frog can jump more than once.  You can make the mushroom "loop" by checking whether it's moved past the left edge and moving it back to the right edge when it has.

        # Do this

        -   Find the `if` statement that checks whether the mushroom has passed the left edge. ( [Show me where](#triggercallout=code_triggered1) )
        -   Use the `sprite.x` block to set the mushroom's position back to the right edge if it has.
      CSD U3 abstraction looping_2018: |-
        # Looping

        The game will be more fun if the frog can jump more than once.  You can make the mushroom "loop" by checking whether it's moved past the left edge and moving it back to the right edge when it has.

        # Do this

        -   Find the `if` statement that checks whether the mushroom has passed the left edge. ( [Show me where](#triggercallout=code_triggered1) )
        -   Use the `sprite.x` block to set the mushroom's position back to the right edge if it has.
      CSD U3 abstraction looping_2019: |-
        # Looping

        The game will be more fun if the frog can jump more than once.  You can make the mushroom "loop" by checking whether it's moved past the left edge and moving it back to the right edge when it has.

        # Do this

        -   Find the `if` statement that checks whether the mushroom has passed the left edge. ( [Show me where](#triggercallout=code_triggered1) )
        -   Use the `sprite.x` block to set the mushroom's position back to the right edge if it has.
      CSD U3 abstraction make it your own: |-
        # Make It Your Own

        You now have the basic mechanics of your game in place, so it's time to make it your own. What do you want to happen? Should the character get points every time it collects a coin? Can you add a scoreboard like you learned in the last lesson? Do you want to make another coin? What about a "bad coin" that takes away points?

        # Do This

        Make at least one improvement to the game that makes it your own. Be prepared to share your changes and improvements with your classmate.
      CSD U3 abstraction make it your own_2018: |-
        # Make It Your Own

        You now have the basic mechanics of your game in place, so it's time to make it your own. What do you want to happen? Should the character get points every time it collects a coin? Can you add a scoreboard like you learned in the last lesson? Do you want to make another coin? What about a "bad coin" that takes away points?

        # Do This

        Make at least one improvement to the game that makes it your own. Be prepared to share your changes and improvements with your classmate.
      CSD U3 abstraction make it your own_2019: |-
        # Make It Your Own

        You now have the basic mechanics of your game in place, so it's time to make it your own. What do you want to happen? Should the character get points every time it collects a coin? Can you add a scoreboard like you learned in the last lesson? Do you want to make another coin? What about a "bad coin" that takes away points?

        # Do This

        Make at least one improvement to the game that makes it your own. Be prepared to share your changes and improvements with your classmate.
      CSD U3 abstraction reset coin: |-
        # Reset Coin

        When your character touches the coin you should reset it somewhere on the screen.

        # Do This

        -   Place an `if` block inside of your draw loop.
        -   Use the `sprite.isTouching()` block as the condition to detect when the character touches the coin.
        -   Inside the `if` block write code that sets the coin's X and Y position to random numbers between 0 and 400.
            -   _Hint: You've already written this code elsewhere in your program._

        Test your code before moving on. When your player touches the coin, it should move somewhere else on the screen.
      CSD U3 abstraction reset coin_2018: |-
        # Reset Coin

        When your character touches the coin you should reset it somewhere on the screen.

        # Do This

        -   Place an `if` block inside of your draw loop.
        -   Use the `sprite.isTouching()` block as the condition to detect when the character touches the coin.
        -   Inside the `if` block write code that sets the coin's X and Y position to random numbers between 0 and 400.
            -   _Hint: You've already written this code elsewhere in your program._

        Test your code before moving on. When your player touches the coin, it should move somewhere else on the screen.
      CSD U3 abstraction reset coin_2019: |-
        # Reset Coin

        When your character touches the coin you should reset it somewhere on the screen.

        # Do This

        -   Place an `if` block inside of your draw loop.
        -   Use the `sprite.isTouching()` block as the condition to detect when the character touches the coin.
        -   Inside the `if` block write code that sets the coin's X and Y position to random numbers between 0 and 400.
            -   _Hint: You've already written this code elsewhere in your program._

        Test your code before moving on. When your player touches the coin, it should move somewhere else on the screen.
      CSD U3 abstraction rotation: |-
        # rotationSpeed

        You've already learned how to make your sprite spin by using the `rotation` block.  For example, when you wanted your sprite to rotate by two degrees each time it was drawn, you put `sprite.rotation = sprite.rotation + 2` inside the draw loop.

        Now, you can use `rotationSpeed` to make your sprites rotate by a certain amount each time they are drawn. If you want your sun to rotate by two degrees each time it's drawn, you can use `sun.rotationSpeed = 2` before the draw loop, after you create your sprite.

        # Do This

        Make the sun rotate by 3 degrees each time using the `rotationSpeed` block. ( [Show me where](#triggercallout=callout1) )
      CSD U3 abstraction rotation control: |-
        # Controlling Speed

        You used `rotatationSpeed` outside the draw loop to make your sprite rotate when your program started.  You can also use `rotationSpeed` **inside** the draw loop to change the speed of the sprite during the game.  For example, a sprite can start rotating when the user presses the space bar, and it will keep rotating until it's told to stop.

        # Do This

        -   Look at the `if` statement inside the draw loop that checks whether the space bar has been pressed. ( [Show me where](#triggercallout=code_triggered1) )
        -   Use the `rotationSpeed` block to make the color wheel start spinning when the user presses the space bar.
      CSD U3 abstraction rotation control_2018: |-
        # Controlling Speed

        You used `rotatationSpeed` outside the draw loop to make your sprite rotate when your program started.  You can also use `rotationSpeed` **inside** the draw loop to change the speed of the sprite during the game.  For example, a sprite can start rotating when the user presses the space bar, and it will keep rotating until it's told to stop.

        # Do This

        -   Look at the `if` statement inside the draw loop that checks whether the space bar has been pressed. ( [Show me where](#triggercallout=code_triggered1) )
        -   Use the `rotationSpeed` block to make the color wheel start spinning when the user presses the space bar.
      CSD U3 abstraction rotation control_2019: |-
        # Controlling Speed

        You used `rotationSpeed` outside the draw loop to make your sprite rotate when your program started.  You can also use `rotationSpeed` **inside** the draw loop to change the speed of the sprite during the game.  For example, a sprite can start rotating when the user presses the space bar, and it will keep rotating until it's told to stop.

        # Do This

        -   Look at the `if` statement inside the draw loop that checks whether the space bar has been pressed. ( [Show me where](#triggercallout=code_triggered1) )
        -   Use the `rotationSpeed` block to make the color wheel start spinning when the user presses the space bar.
      CSD U3 abstraction rotation_2018: |-
        # rotationSpeed

        You've already learned how to make your sprite spin by using the `rotation` block.  For example, when you wanted your sprite to rotate by two degrees each time it was drawn, you put `sprite.rotation = sprite.rotation + 2` inside the draw loop.

        Now, you can use `rotationSpeed` to make your sprites rotate by a certain amount each time they are drawn. If you want your sun to rotate by two degrees each time it's drawn, you can use `sun.rotationSpeed = 2` before the draw loop, after you create your sprite.

        # Do This

        Make the sun rotate by 3 degrees each time using the `rotationSpeed` block. ( [Show me where](#triggercallout=callout1) )
      CSD U3 abstraction rotation_2019: |-
        # rotationSpeed

        You've already learned how to make your sprite spin by using the `rotation` block.  For example, when you wanted your sprite to rotate by two degrees each time it was drawn, you put `sprite.rotation = sprite.rotation + 2` inside the draw loop.

        Now, you can use `rotationSpeed` to make your sprites rotate by a certain amount each time they are drawn. If you want your sun to rotate by two degrees each time it's drawn, you can use `sun.rotationSpeed = 2` before the draw loop, after you create your sprite.

        # Do This

        Make the sun rotate by 3 degrees each time using the `rotationSpeed` block. ( [Show me where](#triggercallout=callout1) )
      CSD U3 abstraction tumbleweed: |-
        # Mushroom

        Now you just need something for your sprite to jump over.  This program already has a mushroom just past the right edge of the screen, but it needs to move toward your frog.

        # Do this

        -   Use the `velocityX` block to make the mushroom move left across the screen.

        _Hint: The mushroom should start moving at the very beginning of the game, and never change, so should it be inside or outside the draw loop?_
      CSD U3 abstraction tumbleweed_2018: |-
        # Mushroom

        Now you just need something for your sprite to jump over.  This program already has a mushroom just past the right edge of the screen, but it needs to move toward your frog.

        # Do this

        -   Use the `velocityX` block to make the mushroom move left across the screen.

        _Hint: The mushroom should start moving at the very beginning of the game, and never change, so should it be inside or outside the draw loop?_
      CSD U3 abstraction tumbleweed_2019: |-
        # Mushroom

        Now you just need something for your sprite to jump over.  This program already has a mushroom just past the right edge of the screen, but it needs to move toward your frog.

        # Do this

        -   Use the `velocityX` block to make the mushroom move left across the screen.

        _Hint: The mushroom should start moving at the very beginning of the game, and never change, so should it be inside or outside the draw loop?_
      CSD U3 abstraction velocityX: |-
        # velocityX

        One way to move sprites in Game Lab is with the counter pattern. For example `sprite1.x = sprite1.x + 1` moves a sprite by 1 pixel each frame of the draw loop. This pattern is so common that sprites have a `velocityX` property that does this for you.

        # Do This

        -   Drag a `sprite.velocityX` block directly below where your sprite is created.       ( [Show me where](#triggercallout=code_triggered) )
        -   Write the name of your sprite in the block.
        -   Assign the `velocityX` property a value of 1.
        -   Run the code. What happens?
        -   Re-run the code giving the `velocityX` property a different value. What's changing?
      CSD U3 abstraction velocityX control: |-
        # Multiple Controls

        As you saw in the last level, you can change the sprite's velocity with multiple `if` statements. In this program, the fish has three different types of movement, each of which should be controlled by its own `if` statement.

        # Do This

        -   Look at the three `if` statements inside the draw loop.

        -   Use a `sprite.velocityX` block inside each `if` statement to make the three following movements:
            -   If the user presses the right arrow key, move the fish to the right.
            -   If the fish gets to the right-hand side of the screen, move the fish to the left.
            -   If the fish gets to the left-hand side of the screen, stop the fish.
      CSD U3 abstraction velocityX control_2018: |-
        # Multiple Controls

        As you saw in the last level, you can change the sprite's velocity with multiple `if` statements. In this program, the fish has three different types of movement, each of which should be controlled by its own `if` statement.

        # Do This

        -   Look at the three `if` statements inside the draw loop.

        -   Use a `sprite.velocityX` block inside each `if` statement to make the three following movements:
            -   If the user presses the right arrow key, move the fish to the right.
            -   If the fish gets to the right-hand side of the screen, move the fish to the left.
            -   If the fish gets to the left-hand side of the screen, stop the fish.
      CSD U3 abstraction velocityX control_2019: |-
        # Multiple Controls

        As you saw in the last level, you can change the sprite's velocity with multiple `if` statements. In this program, the fish has three different types of movement, each of which should be controlled by its own `if` statement.

        # Do This

        -   Look at the three `if` statements inside the draw loop.

        -   Use a `sprite.velocityX` block inside each `if` statement to make the three following movements:
            -   If the user presses the right arrow key, move the fish to the right.
            -   If the fish gets to the right-hand side of the screen, move the fish to the left.
            -   If the fish gets to the left-hand side of the screen, stop the fish.
      CSD U3 abstraction velocityX if-statements: |-
        # Changing Velocity with Position

        One advantage to using the velocity blocks inside conditionals (`if` blocks) is that your sprite keeps moving, even after the condition stops being true.  For example, you only had to press a key once to launch your fly bot, and it kept flying forever.

        In the code below, the fish sprite moves to the left when it hits the right edge, and to the right when it hits the left edge.  The sprite keeps moving, even when it's not touching the edge anymore.

        # Do This

        -   Look at `if` statements that check the sprite's position and set its velocity.
        -   With your partner, discuss how the sprite knows which way to move when neither of the `if` statements are true (the sprite is in the middle of the screen).
      CSD U3 abstraction velocityX if-statements predict: |-
        # Changing Velocity with Position

        One advantage to using the velocity blocks inside conditionals (`if` blocks) is that your sprite keeps moving, even after the condition stops being true.  For example, you only had to press a key once to launch your fly bot, and it kept flying forever.  The code below uses if statements to make a fish sprite move in different directions.

        # Do This

        -   Look at `if` statements that check the sprite's position and set its velocity.
        -   With your partner, discuss what you think the code will do, and write your answer below.
        -   Once you have submitted your answer, run the code.
      CSD U3 abstraction velocityX if-statements predict_2018: |-
        # Changing Velocity with Position

        One advantage to using the velocity blocks inside conditionals (`if` blocks) is that your sprite keeps moving, even after the condition stops being true.  For example, you only had to press a key once to launch your fly bot, and it kept flying forever.  The code below uses if statements to make a fish sprite move in different directions.

        # Do This

        -   Look at `if` statements that check the sprite's position and set its velocity.
        -   With your partner, discuss what you think the code will do, and write your answer below.
        -   Once you have submitted your answer, run the code.
      CSD U3 abstraction velocityX if-statements predict_2019: |-
        # Changing Velocity with Position

        One advantage to using the velocity blocks inside conditionals (`if` blocks) is that your sprite keeps moving, even after the condition stops being true.  For example, you only had to press a key once to launch your fly bot, and it kept flying forever.  The code below uses if statements to make a fish sprite move in different directions.

        # Do This

        -   Look at `if` statements that check the sprite's position and set its velocity.
        -   With your partner, discuss what you think the code will do, and write your answer below.
        -   Once you have submitted your answer, run the code.
      CSD U3 abstraction velocityX if-statements_2018: |-
        # Changing Velocity with Position

        One advantage to using the velocity blocks inside conditionals (`if` blocks) is that your sprite keeps moving, even after the condition stops being true.  For example, you only had to press a key once to launch your fly bot, and it kept flying forever.

        In the code below, the fish sprite moves to the left when it hits the right edge, and to the right when it hits the left edge.  The sprite keeps moving, even when it's not touching the edge anymore.

        # Do This

        -   Look at `if` statements that check the sprite's position and set its velocity.
        -   With your partner, discuss how the sprite knows which way to move when neither of the `if` statements are true (the sprite is in the middle of the screen).
      CSD U3 abstraction velocityX if-statements_2019: |-
        # Changing Velocity with Position

        One advantage to using the velocity blocks inside conditionals (`if` blocks) is that your sprite keeps moving, even after the condition stops being true.  For example, you only had to press a key once to launch your fly bot, and it kept flying forever.

        In the code below, the fish sprite moves to the left when it hits the right edge, and to the right when it hits the left edge.  The sprite keeps moving, even when it's not touching the edge anymore.

        # Do This

        -   Look at `if` statements that check the sprite's position and set its velocity.
        -   With your partner, discuss how the sprite knows which way to move when neither of the `if` statements are true (the sprite is in the middle of the screen).
      CSD U3 abstraction velocityX_2018: |-
        # velocityX

        One way to move sprites in Game Lab is with the counter pattern. For example `sprite1.x = sprite1.x + 1` moves a sprite by 1 pixel each frame of the draw loop. This pattern is so common that sprites have a `velocityX` property that does this for you.

        # Do This

        -   Drag a `sprite.velocityX` block directly below where your sprite is created.       ( [Show me where](#triggercallout=code_triggered) )
        -   Write the name of your sprite in the block.
        -   Assign the `velocityX` property a value of 1.
        -   Run the code. What happens?
        -   Re-run the code giving the `velocityX` property a different value. What's changing?
      CSD U3 abstraction velocityX_2019: |-
        # velocityX

        One way to move sprites in Game Lab is with the counter pattern. For example `sprite1.x = sprite1.x + 1` moves a sprite by 1 pixel each frame of the draw loop. This pattern is so common that sprites have a `velocityX` property that does this for you.

        # Do This

        -   Drag a `sprite.velocityX` block directly below where your sprite is created.       ( [Show me where](#triggercallout=code_triggered) )
        -   Write the name of your sprite in the block.
        -   Assign the `velocityX` property a value of 1.
        -   Run the code. What happens?
        -   Re-run the code giving the `velocityX` property a different value. What's changing?
      CSD U3 abstraction velocityY: |-
        # Moving Down

        Here is a feather sprite that should be floating down the screen.  If `velocityX` makes a sprite move to the right, can you find the block that will make the feather move down?

        # Do This

        Find the block that will make the feather sprite go down the screen, and use it outside the draw loop.   (  [Show me where](#triggercallout=code_triggered) )
      CSD U3 abstraction velocityY control: |-
        # Controlling Speed

        Your code before the draw loop sets up the beginning of your game.  Your code inside the draw loop controls how the game will change while it's being played.  In this game, the helicopter bot starts off at the bottom of the screen, but when the space key is pressed, it flies up.

        # Do This

        -   Use an `if` statement inside the draw loop to check when the space bar is pressed.
        -   Use the `velocityY` block to make the sprite fly up when the user presses the space bar.  The sprite should keep moving up even after you let go of the space bar.
      CSD U3 abstraction velocityY control_2018: |-
        # Controlling Speed

        Your code before the draw loop sets up the beginning of your game.  Your code inside the draw loop controls how the game will change while it's being played.  In this game, the helicopter bot starts off at the bottom of the screen, but when the space key is pressed, it flies up.

        # Do This

        -   Use an `if` statement inside the draw loop to check when the space bar is pressed.
        -   Use the `velocityY` block to make the sprite fly up when the user presses the space bar.  The sprite should keep moving up even after you let go of the space bar.
      CSD U3 abstraction velocityY control_2019: |-
        # Controlling Speed

        Your code before the draw loop sets up the beginning of your game.  Your code inside the draw loop controls how the game will change while it's being played.  In this game, the helicopter bot starts off at the bottom of the screen, but when the space key is pressed, it flies up.

        # Do This

        -   Use an `if` statement inside the draw loop to check when the space bar is pressed.
        -   Use the `velocityY` block to make the sprite fly up when the user presses the space bar.  The sprite should keep moving up even after you let go of the space bar.
      CSD U3 abstraction velocityY_2018: |-
        # Moving Down

        Here is a feather sprite that should be floating down the screen.  If `velocityX` makes a sprite move to the right, can you find the block that will make the feather move down?

        # Do This

        Find the block that will make the feather sprite go down the screen, and use it outside the draw loop.   (  [Show me where](#triggercallout=code_triggered) )
      CSD U3 abstraction velocityY_2019: |-
        # Moving Down

        Here is a feather sprite that should be floating down the screen.  If `velocityX` makes a sprite move to the right, can you find the block that will make the feather move down?

        # Do This

        Find the block that will make the feather sprite go down the screen, and use it outside the draw loop.   (  [Show me where](#triggercallout=code_triggered) )
      CSD U3 challenge face: |-
        <img src="https://images.code.org/aa5aedbcfec082c2886d88b565e5fc09-image-1495732712591.png" style="float: right; max-width: 200px; border: 1px solid grey">

        # Áskorun: Andlit

        _Ráðfærðu þig við kennarann áður en þú byrjar svona áskoranir._

        Skrifaðu forrit sem líkir eftir andlitinu hér til hægri. Litirnir eru "lightblue",
        "red" og "lightgreen".
        Þegar því er náð getur þú sett þitt persónulega mark á myndina.
      CSD U3 challenge face_2018: |-
        <img src="https://images.code.org/aa5aedbcfec082c2886d88b565e5fc09-image-1495732712591.png" style="float: right; max-width: 200px; border: 1px solid grey">

        # Áskorun: Andlit

        _Ráðfærðu þig við kennarann áður en þú byrjar svona áskoranir._

        Skrifaðu forrit sem líkir eftir andlitinu hér til hægri. Litirnir eru "lightblue",
        "red" og "lightgreen".
        Þegar því er náð getur þú sett þitt persónulega mark á myndina.
      CSD U3 challenge face_2019: |-
        <img src="https://images.code.org/aa5aedbcfec082c2886d88b565e5fc09-image-1495732712591.png" style="float: right; max-width: 200px; border: 1px solid grey">

        # Áskorun: Andlit

        _Ráðfærðu þig við kennarann áður en þú byrjar svona áskoranir._

        Skrifaðu forrit sem líkir eftir andlitinu hér til hægri. Litirnir eru "lightblue",
        "red" og "lightgreen".
        Þegar því er náð getur þú sett þitt persónulega mark á myndina.
      CSD U3 challenge new shape: "<img src=\"https://images.code.org/cc725698ade5282931002db3bf762cbc-image-1495733456927.png\"\nstyle=\"float:
        right; max-width: 200px; border: 1px solid grey\">\\\r\n\\\r\n\n# \n\nÁskorun:
        Form úr formum\\\r\n\\\r\n_Ráðfærðu þig við kennarann áður en þú byrjar svona
        áskoranir_\\\r\n\\\r\nGetur þú, með því að nota aðeins `rect` og `ellipse`
        skipanirnar,\nteiknað nýtt form, eins og t.d. þennan þríhyrning gerðan úr
        hringum?"
      CSD U3 challenge new shape_2018: "<img src=\"https://images.code.org/cc725698ade5282931002db3bf762cbc-image-1495733456927.png\"\nstyle=\"float:
        right; max-width: 200px; border: 1px solid grey\">\\\r\n\\\r\n\n# \n\nÁskorun:
        Form úr formum\\\r\n\\\r\n_Ráðfærðu þig við kennarann áður en þú byrjar svona
        áskoranir_\\\r\n\\\r\nGetur þú, með því að nota aðeins `rect` og `ellipse`
        skipanirnar,\nteiknað nýtt form, eins og t.d. þennan þríhyrning gerðan úr
        hringum?"
      CSD U3 challenge new shape_2019: "<img src=\"https://images.code.org/cc725698ade5282931002db3bf762cbc-image-1495733456927.png\"\nstyle=\"float:
        right; max-width: 200px; border: 1px solid grey\">\\\r\n\\\r\n\n# \n\nÁskorun:
        Form úr formum\\\r\n\\\r\n_Ráðfærðu þig við kennarann áður en þú byrjar svona
        áskoranir_\\\r\n\\\r\nGetur þú, með því að nota aðeins `rect` og `ellipse`
        skipanirnar,\nteiknað nýtt form, eins og t.d. þennan þríhyrning gerðan úr
        hringum?"
      CSD U3 collisions bounciness: |-
        # Bounciness

        So far, `bounceOff` has made sprites bounce away from other objects as fast as they bounced into them.  In the real world, almost everything slows down just a little bit when it bounces off something else.  You can use the `bounciness` block to tell your sprite how much to slow down or speed up when it bounces off something else.

        # Do This

        -   Read the code below and press "Run" to see the behavior of the basketball and pool ball.
        -   Use a `bounciness` block to set the bounciness of your soccer ball.
        -   Run the code again to see how the sprites bounce off the floor.

        [//]: # "https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png"

        [//]: # "https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png"

        [//]: # "https://images.code.org/0e4e9c26bed0d31d14f6b3f8f8bb4c27-image-1475786966986.png"
      CSD U3 collisions bounciness_2018: |-
        # Bounciness

        So far, `bounceOff` has made sprites bounce away from other objects as fast as they bounced into them.  In the real world, almost everything slows down just a little bit when it bounces off something else.  You can use the `bounciness` block to tell your sprite how much to slow down or speed up when it bounces off something else.

        # Do This

        -   Read the code below and press "Run" to see the behavior of the basketball and pool ball.
        -   Use a `bounciness` block to set the bounciness of your soccer ball.
        -   Run the code again to see how the sprites bounce off the floor.

        [//]: # "https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png"

        [//]: # "https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png"

        [//]: # "https://images.code.org/0e4e9c26bed0d31d14f6b3f8f8bb4c27-image-1475786966986.png"
      CSD U3 collisions bounciness_2019: |-
        # Bounciness

        So far, `bounceOff` has made sprites bounce away from other objects as fast as they bounced into them.  In the real world, almost everything slows down just a little bit when it bounces off something else.  You can use the `bounciness` block to tell your sprite how much to slow down or speed up when it bounces off something else.

        # Do This

        -   Read the code below and press "Run" to see the behavior of the basketball and pool ball.
        -   Use a `bounciness` block to set the bounciness of your soccer ball.
        -   Run the code again to see how the sprites bounce off the floor.

        [//]: # "https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png"

        [//]: # "https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png"

        [//]: # "https://images.code.org/0e4e9c26bed0d31d14f6b3f8f8bb4c27-image-1475786966986.png"
      CSD U3 collisions build isTouching: |-
        # Balloon

        The code below uses the sprites' x and y positions to check whether they are touching.  It will change the balloon sprite's animation when the tack touches it.  Use the arrow keys to move the tack until it touches the balloon.

        # Do This

        -   You do not need to change any code on this level.
        -   Read the if statements inside the draw loop and find the different sprite properties and how they are compared.
        -   Discuss the code with your partner.  Would you want to write this code every time you checked whether sprites were touching?

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"
      CSD U3 collisions build isTouching_2018: |-
        # Balloon

        The code below uses the sprites' x and y positions to check whether they are touching.  It will change the balloon sprite's animation when the tack touches it.  Use the arrow keys to move the tack until it touches the balloon.

        # Do This

        -   You do not need to change any code on this level.
        -   Read the if statements inside the draw loop and find the different sprite properties and how they are compared.
        -   Discuss the code with your partner.  Would you want to write this code every time you checked whether sprites were touching?

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"
      CSD U3 collisions build isTouching_2019: |-
        # Balloon

        The code below uses the sprites' x and y positions to check whether they are touching.  It will change the balloon sprite's animation when the tack touches it.  Use the arrow keys to move the tack until it touches the balloon.

        # Do This

        -   You do not need to change any code on this level.
        -   Read the if statements inside the draw loop and find the different sprite properties and how they are compared.
        -   Discuss the code with your partner.  Would you want to write this code every time you checked whether sprites were touching?

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"
      CSD U3 collisions car intro: |-
        # Frog Jump

        Look at the frog jumping game to the left.   It looks like the game from the last lesson, but the frog moves the mushroom if it hits it.  What code do you think would help the computer to know whether two sprites are touching?

        [//]: # "https://images.code.org/ee9b677e93213846fe12abb3b34f563c-image-1469742494237.png"

        [//]: # "https://images.code.org/5f738da1a2b1ef8af124e4470e2babe7-image-1469742830481.png"

        [//]: # "https://images.code.org/f22e6b1a636337820e53fb37a137b3d1-image-1469742992179.png"
      CSD U3 collisions car intro_2018: |-
        # Frog Jump

        Look at the frog jumping game to the left.   It looks like the game from the last lesson, but the frog moves the mushroom if it hits it.  What code do you think would help the computer to know whether two sprites are touching?

        [//]: # "https://images.code.org/ee9b677e93213846fe12abb3b34f563c-image-1469742494237.png"

        [//]: # "https://images.code.org/5f738da1a2b1ef8af124e4470e2babe7-image-1469742830481.png"

        [//]: # "https://images.code.org/f22e6b1a636337820e53fb37a137b3d1-image-1469742992179.png"
      CSD U3 collisions car intro_2019: |-
        # Frog Jump

        Look at the frog jumping game to the left.   It looks like the game from the last lesson, but the frog moves the mushroom if it hits it.  What code do you think would help the computer to know whether two sprites are touching?

        [//]: # "https://images.code.org/ee9b677e93213846fe12abb3b34f563c-image-1469742494237.png"

        [//]: # "https://images.code.org/5f738da1a2b1ef8af124e4470e2babe7-image-1469742830481.png"

        [//]: # "https://images.code.org/f22e6b1a636337820e53fb37a137b3d1-image-1469742992179.png"
      CSD U3 collisions debug: |-
        # Debug

        Sometimes sprites will behave in ways that are unexpected. There is a special `sprite.debug` property you can use to better understand why the sprites interact the way that they do.

        # Do This

        These two coins are round, so you would expect them to bounce in a certain way. Something weird is happening though!

        -   Run the code and watch the way that the coins interact.
        -   Use the `sprite.debug` block to make debug 'true' for both the sprites and run the code again.
        -   Change the gold coin's starting x position to 51 and run the code again.
        -   Discuss with a partner: Why do you think the coins are bouncing strangely?
      CSD U3 collisions debug isTouching: |-
        # Debugging Collisions

        The balloon is popping before the tack touches it.  When sprites aren't doing what you expect, you can use the `debug` block to get more information about why the sprites are behaving that way.  Can you find out what's wrong in the code below?

        # Do This

        -   Run the code and use the arrow keys to move the tack to pop the balloon.
        -   In the code below, change `balloon.debug = false` to `balloon.debug = true`.
        -   Add a new `debug` block to the code and set the tack sprite's debug property to `true`.
        -   Run the code again, then discuss with your partner why the balloon is popping early.

        _Challenge: Can you use the animations tab to resize the balloon picture so it pops at the correct time?_

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"

        [//]: # "https://images.code.org/2892e65635d7a43d0664bb8ff58eb698-image-1471200175665.png"

        [//]: # "https://images.code.org/9ffeb3f543033353d073794071316860-image-1471200179449.png"
      CSD U3 collisions debug isTouching_2018: |-
        # Debugging Collisions

        The balloon is popping before the tack touches it.  When sprites aren't doing what you expect, you can use the `debug` block to get more information about why the sprites are behaving that way.  Can you find out what's wrong in the code below?

        # Do This

        -   Run the code and use the arrow keys to move the tack to pop the balloon.
        -   In the code below, change `balloon.debug = false` to `balloon.debug = true`.
        -   Add a new `debug` block to the code and set the tack sprite's debug property to `true`.
        -   Run the code again, then discuss with your partner why the balloon is popping early.

        _Challenge: Can you use the animations tab to resize the balloon picture so it pops at the correct time?_

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"

        [//]: # "https://images.code.org/2892e65635d7a43d0664bb8ff58eb698-image-1471200175665.png"

        [//]: # "https://images.code.org/9ffeb3f543033353d073794071316860-image-1471200179449.png"
      CSD U3 collisions debug isTouching_2019: |-
        # Debugging Collisions

        The balloon is popping before the tack touches it.  When sprites aren't doing what you expect, you can use the `debug` block to get more information about why the sprites are behaving that way.  Can you find out what's wrong in the code below?

        # Do This

        -   Run the code and use the arrow keys to move the tack to pop the balloon.
        -   In the code below, change `balloon.debug = false` to `balloon.debug = true`.
        -   Add a new `debug` block to the code and set the tack sprite's debug property to `true`.
        -   Run the code again, then discuss with your partner why the balloon is popping early.

        _Challenge: Can you use the animations tab to resize the balloon picture so it pops at the correct time?_

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"

        [//]: # "https://images.code.org/2892e65635d7a43d0664bb8ff58eb698-image-1471200175665.png"

        [//]: # "https://images.code.org/9ffeb3f543033353d073794071316860-image-1471200179449.png"
      CSD U3 collisions debug_2018: |-
        # Debug

        Sometimes sprites will behave in ways that are unexpected. There is a special `sprite.debug` property you can use to better understand why the sprites interact the way that they do.

        # Do This

        These two coins are round, so you would expect them to bounce in a certain way. Something weird is happening though!

        -   Run the code and watch the way that the coins interact.
        -   Use the `sprite.debug` block to make debug 'true' for both the sprites and run the code again.
        -   Change the gold coin's starting x position to 51 and run the code again.
        -   Discuss with a partner: Why do you think the coins are bouncing strangely?
      CSD U3 collisions debug_2019: |-
        # Debug

        Sometimes sprites will behave in ways that are unexpected. There is a special `sprite.debug` property you can use to better understand why the sprites interact the way that they do.

        # Do This

        These two coins are round, so you would expect them to bounce in a certain way. Something weird is happening though!

        -   Run the code and watch the way that the coins interact.
        -   Use the `sprite.debug` block to make debug 'true' for both the sprites and run the code again.
        -   Change the gold coin's starting x position to 51 and run the code again.
        -   Discuss with a partner: Why do you think the coins are bouncing strangely?
      CSD U3 collisions displace intro: |-
        # Displace

        The interaction you've been programming is so common that there's a block designed to do the interaction for you. `sprite.displace()` that will make one sprite push the other when they touch. The code underlying this block might look a lot like what you just wrote, but now you no longer need to worry about writing those details yourself.

        # Do This

        Someone tried to use the `sprite.displace()` block to make the **elephant push the hippo**, but there is a bug. Can you change the code so that the elephant pushes the hippo off the screen?

        -   Find the line of code where the `sprite.displace()` block is used and fix the error.
      CSD U3 collisions displace intro_2018: |-
        # Displace

        The interaction you've been programming is so common that there's a block designed to do the interaction for you. `sprite.displace()` that will make one sprite push the other when they touch. The code underlying this block might look a lot like what you just wrote, but now you no longer need to worry about writing those details yourself.

        # Do This

        Someone tried to use the `sprite.displace()` block to make the **elephant push the hippo**, but there is a bug. Can you change the code so that the elephant pushes the hippo off the screen?

        -   Find the line of code where the `sprite.displace()` block is used and fix the error.
      CSD U3 collisions displace intro_2019: |-
        # Displace

        The interaction you've been programming is so common that there's a block designed to do the interaction for you. `sprite.displace()` that will make one sprite push the other when they touch. The code underlying this block might look a lot like what you just wrote, but now you no longer need to worry about writing those details yourself.

        # Do This

        Someone tried to use the `sprite.displace()` block to make the **elephant push the hippo**, but there is a bug. Can you change the code so that the elephant pushes the hippo off the screen?

        -   Find the line of code where the `sprite.displace()` block is used and fix the error.
      CSD U3 collisions displace x: |-
        # Program a Sprite Interaction

        You should have discussed with your classmates how you could create the sprite interaction you saw in the last level. Now it's your turn to program it yourself. How can you make the giraffe move the monkey off the screen?

        # Do This

        The giraffe is already moving across the screen toward the monkey but the sprite interaction itself hasn't been programmed.

        -   Use the plan you developed with your classmates on the last level to program the sprite interaction yourself.

        [//]: # "https://images.code.org/2e6b993747a39cd5076dce219037903d-image-1470319674401.png"

        [//]: # "https://images.code.org/d44d7c1aa87ea7eeceea9e9b023408f9-image-1470319674396.png"
      CSD U3 collisions displace x_2018: |-
        # Program a Sprite Interaction

        You should have discussed with your classmates how you could create the sprite interaction you saw in the last level. Now it's your turn to program it yourself. How can you make the giraffe move the monkey off the screen?

        # Do This

        The giraffe is already moving across the screen toward the monkey but the sprite interaction itself hasn't been programmed.

        -   Use the plan you developed with your classmates on the last level to program the sprite interaction yourself.

        [//]: # "https://images.code.org/2e6b993747a39cd5076dce219037903d-image-1470319674401.png"

        [//]: # "https://images.code.org/d44d7c1aa87ea7eeceea9e9b023408f9-image-1470319674396.png"
      CSD U3 collisions displace x_2019: |-
        # Program a Sprite Interaction

        You should have discussed with your classmates how you could create the sprite interaction you saw in the last level. Now it's your turn to program it yourself. How can you make the giraffe move the monkey off the screen?

        # Do This

        The giraffe is already moving across the screen toward the monkey but the sprite interaction itself hasn't been programmed.

        -   Use the plan you developed with your classmates on the last level to program the sprite interaction yourself.

        [//]: # "https://images.code.org/2e6b993747a39cd5076dce219037903d-image-1470319674401.png"

        [//]: # "https://images.code.org/d44d7c1aa87ea7eeceea9e9b023408f9-image-1470319674396.png"
      CSD U3 collisions displace y: |-
        # Write Your Own Sprite Interaction

        In the last level you should have written code for a sprite interaction that you developed with your classmates. This time try to write the program on your own, but you can use the patterns you saw in the last level.

        # Do This

        The elephant should **push the hippo off the screen**. Notice that the elephant moves at a random Y velocity each time the program runs.

        -   Using the patterns from the last level, write code that makes the elephant push the hippo off the screen.
      CSD U3 collisions displace y_2018: |-
        # Write Your Own Sprite Interaction

        In the last level you should have written code for a sprite interaction that you developed with your classmates. This time try to write the program on your own, but you can use the patterns you saw in the last level.

        # Do This

        The elephant should **push the hippo off the screen**. Notice that the elephant moves at a random Y velocity each time the program runs.

        -   Using the patterns from the last level, write code that makes the elephant push the hippo off the screen.
      CSD U3 collisions displace y_2019: |-
        # Write Your Own Sprite Interaction

        In the last level you should have written code for a sprite interaction that you developed with your classmates. This time try to write the program on your own, but you can use the patterns you saw in the last level.

        # Do This

        The elephant should **push the hippo off the screen**. Notice that the elephant moves at a random Y velocity each time the program runs.

        -   Using the patterns from the last level, write code that makes the elephant push the hippo off the screen.
      CSD U3 collisions egg: |-
        # Applesauce

        When the apple hits the blender, the blender should turn on.

        # Do This

        Use the `isTouching` block to make the blender shake back and forth when the apple sprite touches the blender sprite.  The shaking motion is already coded using the random block, so you just have to check when the two sprites are touching.

        _Challenge: Can you make the apple disappear when it touches the blender?_

        [//]: # "https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png"

        [//]: # "https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png"

        [//]: # "https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png"

        [//]: # "https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png"

        [//]: # "https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png"

        [//]: # "https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png"
      CSD U3 collisions egg2: |-
        # Making Sounds

        You can also use code to play a blender sound.

        # Do This

        Use the `playSound` block from the "World" drawer to play the "<https://studio.code.org/docs/sounds/blender.mp3>" sound when the apple touches the blender.  You will need to paste the address of the sound into the block, so it looks like this: ![](<https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57 PM.png>)

        [//]: # "https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png"

        [//]: # "https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png"

        [//]: # "https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png"

        [//]: # "https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png"

        [//]: # "https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png"

        [//]: # "https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png"

        [//]: # "https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57 PM.png"
      CSD U3 collisions egg2_2018: |-
        # Making Sounds

        You can also use code to play a blender sound.

        # Do This

        Use the `playSound` block from the "World" drawer to play the "<https://studio.code.org/docs/sounds/blender.mp3>" sound when the apple touches the blender.  You will need to paste the address of the sound into the block, so it looks like this: ![](<https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57 PM.png>)

        [//]: # "https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png"

        [//]: # "https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png"

        [//]: # "https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png"

        [//]: # "https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png"

        [//]: # "https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png"

        [//]: # "https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png"

        [//]: # "https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57 PM.png"
      CSD U3 collisions egg2_2019: |-
        # Making Sounds

        You can also use code to play a blender sound.

        # Do This

        Use the `playSound` block from the "World" drawer to play the "<https://studio.code.org/docs/sounds/blender.mp3>" sound when the apple touches the blender.  You will need to paste the address of the sound into the block, so it looks like this: ![](<https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57 PM.png>)

        [//]: # "https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png"

        [//]: # "https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png"

        [//]: # "https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png"

        [//]: # "https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png"

        [//]: # "https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png"

        [//]: # "https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png"

        [//]: # "https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57 PM.png"
      CSD U3 collisions egg_2018: |-
        # Applesauce

        When the apple hits the blender, the blender should turn on.

        # Do This

        Use the `isTouching` block to make the blender shake back and forth when the apple sprite touches the blender sprite.  The shaking motion is already coded using the random block, so you just have to check when the two sprites are touching.

        _Challenge: Can you make the apple disappear when it touches the blender?_

        [//]: # "https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png"

        [//]: # "https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png"

        [//]: # "https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png"

        [//]: # "https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png"

        [//]: # "https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png"

        [//]: # "https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png"
      CSD U3 collisions egg_2019: |-
        # Applesauce

        When the apple hits the blender, the blender should turn on.

        # Do This

        Use the `isTouching` block to make the blender shake back and forth when the apple sprite touches the blender sprite.  The shaking motion is already coded using the random block, so you just have to check when the two sprites are touching.

        _Challenge: Can you make the apple disappear when it touches the blender?_

        [//]: # "https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png"

        [//]: # "https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png"

        [//]: # "https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png"

        [//]: # "https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png"

        [//]: # "https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png"

        [//]: # "https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png"
      CSD U3 collisions flyman add obstacles: |-
        # Flyer Game - Add Obstacle

        This is the flyer game you built in the last lesson. For the next several levels, you'll be adding an obstacle sprite to the game, using some of the sprite interactions you just learned. At the end you'll have a chance to keep adding on ideas of your own.

        <img src="https://images.code.org/47f8c130ca668080d48520ef9aced093-image-1477069764142.08.58 AM.png" style="float:right;width:200px">

        # Do This

        Add an obstacle sprite to the game. You can use whatever image you like from the animation tab but the example shown here uses a sun. Right now you just need to add the sprite to your game and give it an animation.

        -   Add a new sprite to your game called "obstacle".
        -   In the animation tab create a new animation for your obstacle. In the example a sun image was chosen.
        -   Use the `sprite.setAnimation()` block to give your sprite the image you chose.
        -   Run the code and make sure the sprite appears where you want it on the screen. You may need to set its X, Y, and scale properties to get it to look the way you want.
      CSD U3 collisions flyman add obstacles_2018: |-
        # Flyer Game - Add Obstacle

        This is the flyer game you built in the last lesson. For the next several levels, you'll be adding an obstacle sprite to the game, using some of the sprite interactions you just learned. At the end you'll have a chance to keep adding on ideas of your own.

        <img src="https://images.code.org/47f8c130ca668080d48520ef9aced093-image-1477069764142.08.58 AM.png" style="float:right;width:200px">

        # Do This

        Add an obstacle sprite to the game. You can use whatever image you like from the animation tab but the example shown here uses a sun. Right now you just need to add the sprite to your game and give it an animation.

        -   Add a new sprite to your game called "obstacle".
        -   In the animation tab create a new animation for your obstacle. In the example a sun image was chosen.
        -   Use the `sprite.setAnimation()` block to give your sprite the image you chose.
        -   Run the code and make sure the sprite appears where you want it on the screen. You may need to set its X, Y, and scale properties to get it to look the way you want.
      CSD U3 collisions flyman add obstacles_2019: |-
        # Flyer Game - Add Obstacle

        This is the flyer game you built in the last lesson. For the next several levels, you'll be adding an obstacle sprite to the game, using some of the sprite interactions you just learned. At the end you'll have a chance to keep adding on ideas of your own.

        <img src="https://images.code.org/47f8c130ca668080d48520ef9aced093-image-1477069764142.08.58 AM.png" style="float:right;width:200px">

        # Do This

        Add an obstacle sprite to the game. You can use whatever image you like from the animation tab but the example shown here uses a sun. Right now you just need to add the sprite to your game and give it an animation.

        -   Add a new sprite to your game called "obstacle".
        -   In the animation tab create a new animation for your obstacle. In the example a sun image was chosen.
        -   Use the `sprite.setAnimation()` block to give your sprite the image you chose.
        -   Run the code and make sure the sprite appears where you want it on the screen. You may need to set its X, Y, and scale properties to get it to look the way you want.
      CSD U3 collisions flyman bounceOff: |-
        # Flyer Game - Interacting with the Obstacle

        You don't want your player to be able to move through the obstacle, so you'll need to use one of the sprite interactions.

        # Do This

        -   Add code to your game that prevents your player from moving through the obstacle.
        -   If you use one of the bounce interactions, decide whether you want to reset the bounciness of your character.
        -   Discuss with a neighbor: Which sprite interaction did you decide to use? Is there more than one sprite interaction that works the way you'd expect?
      CSD U3 collisions flyman bounceOff_2018: |-
        # Flyer Game - Interacting with the Obstacle

        You don't want your player to be able to move through the obstacle, so you'll need to use one of the sprite interactions.

        # Do This

        -   Add code to your game that prevents your player from moving through the obstacle.
        -   If you use one of the bounce interactions, decide whether you want to reset the bounciness of your character.
        -   Discuss with a neighbor: Which sprite interaction did you decide to use? Is there more than one sprite interaction that works the way you'd expect?
      CSD U3 collisions flyman bounceOff_2019: |-
        # Flyer Game - Interacting with the Obstacle

        You don't want your player to be able to move through the obstacle, so you'll need to use one of the sprite interactions.

        # Do This

        -   Add code to your game that prevents your player from moving through the obstacle.
        -   If you use one of the bounce interactions, decide whether you want to reset the bounciness of your character.
        -   Discuss with a neighbor: Which sprite interaction did you decide to use? Is there more than one sprite interaction that works the way you'd expect?
      CSD U3 collisions flyman change colliders: |-
        # Flyer Game - Change Colliders

        Right now your colliders are all rectangular. Switch them over to circles to get more interesting and realistic bounces and collisions.

        # Do This

        -   Use the `sprite.setCollider()` block to change the colliders of your sprites to circles.
        -   Set your sprites' debug properties to `true` to make sure your game is working the way you want.
        -   Play your game to make sure it's working the way you want.
      CSD U3 collisions flyman change colliders_2018: |-
        # Flyer Game - Change Colliders

        Right now your colliders are all rectangular. Switch them over to circles to get more interesting and realistic bounces and collisions.

        # Do This

        -   Use the `sprite.setCollider()` block to change the colliders of your sprites to circles.
        -   Set your sprites' debug properties to `true` to make sure your game is working the way you want.
        -   Play your game to make sure it's working the way you want.
      CSD U3 collisions flyman change colliders_2019: |-
        # Flyer Game - Change Colliders

        Right now your colliders are all rectangular. Switch them over to circles to get more interesting and realistic bounces and collisions.

        # Do This

        -   Use the `sprite.setCollider()` block to change the colliders of your sprites to circles.
        -   Set your sprites' debug properties to `true` to make sure your game is working the way you want.
        -   Play your game to make sure it's working the way you want.
      CSD U3 collisions flyman displace coin: |-
        # Flyer Game - Coin Behind the Obstacle

        Right now your coin is moving to random locations. That means sometimes it even will appear behind your obstacle, so your character can't get to it. Using sprite interactions you can fix this problem.

        # Do This

        -   Add code to your game that prevents the coin from moving behind the obstacle. Don't be afraid to try out ideas just to see how they work.
        -   Discuss with a neighbor: Which sprite interaction did you decide to use? Is there more than one sprite interaction that works the way you'd expect?
      CSD U3 collisions flyman displace coin_2018: |-
        # Flyer Game - Coin Behind the Obstacle

        Right now your coin is moving to random locations. That means sometimes it even will appear behind your obstacle, so your character can't get to it. Using sprite interactions you can fix this problem.

        # Do This

        -   Add code to your game that prevents the coin from moving behind the obstacle. Don't be afraid to try out ideas just to see how they work.
        -   Discuss with a neighbor: Which sprite interaction did you decide to use? Is there more than one sprite interaction that works the way you'd expect?
      CSD U3 collisions flyman displace coin_2019: |-
        # Flyer Game - Coin Behind the Obstacle

        Right now your coin is moving to random locations. That means sometimes it even will appear behind your obstacle, so your character can't get to it. Using sprite interactions you can fix this problem.

        # Do This

        -   Add code to your game that prevents the coin from moving behind the obstacle. Don't be afraid to try out ideas just to see how they work.
        -   Discuss with a neighbor: Which sprite interaction did you decide to use? Is there more than one sprite interaction that works the way you'd expect?
      CSD U3 collisions flyman make it your own: |-
        # Flyer Game - Make It Your Own

        Time to make this game your own by using what you've learned about sprite interactions.

        # Do This

        Add at least one more aspect to your game that uses sprite interactions. There's some ideas below or you can choose to add features of your own. Make sure you're ready to share your ideas with your classmates.

        -   Create "edge" sprites to keep your character from bouncing out.
        -   Add platforms to the game for your character to navigate around.
        -   Add another obstacle to your game.
        -   Create another idea of your own.
      CSD U3 collisions flyman make it your own_2018: |-
        # Flyer Game - Make It Your Own

        Time to make this game your own by using what you've learned about sprite interactions.

        # Do This

        Add at least one more aspect to your game that uses sprite interactions. There's some ideas below or you can choose to add features of your own. Make sure you're ready to share your ideas with your classmates.

        -   Create invisible sprites at the edge of your game to keep your character from bouncing out.
        -   Add platforms to the game for your character to navigate around.
        -   Add another obstacle to your game.
        -   Create another idea of your own.
      CSD U3 collisions flyman make it your own_2019: |-
        # Flyer Game - Make It Your Own

        Time to make this game your own by using what you've learned about sprite interactions.

        # Do This

        Add at least one more aspect to your game that uses sprite interactions. There's some ideas below or you can choose to add features of your own. Make sure you're ready to share your ideas with your classmates.

        -   Create invisible sprites at the edge of your game to keep your character from bouncing out.
        -   Add platforms to the game for your character to navigate around.
        -   Add another obstacle to your game.
        -   Create another idea of your own.
      CSD U3 collisions horse: |-
        # Rainbow Horse

        When the rainbow touches the horse, it should turn into a unicorn.

        # Do This

        Use the `if`, `isTouching`, and `setAnimation` blocks to change the horse sprite's image when the rainbow touches it.  The unicorn image is already loaded in the animations tab for you.

        [//]: # "https://images.code.org/4d1d0e36e574117140ecc377d406c1de-image-1470256869920.png"

        [//]: # "https://images.code.org/b913bc2ee2231b908892472240a70105-image-1470256869922.png"

        [//]: # "https://images.code.org/558b42903bf40cc26410e651a85de922-image-1470256869923.png"

        [//]: # "https://images.code.org/1d41d2e5b3b55037911b8f73bdc2ff48-image-1470257277875.png"
      CSD U3 collisions horse_2018: |-
        # Rainbow Horse

        When the rainbow touches the horse, it should turn into a unicorn.

        # Do This

        Use the `if`, `isTouching`, and `setAnimation` blocks to change the horse sprite's image when the rainbow touches it.  The unicorn image is already loaded in the animations tab for you.

        [//]: # "https://images.code.org/4d1d0e36e574117140ecc377d406c1de-image-1470256869920.png"

        [//]: # "https://images.code.org/b913bc2ee2231b908892472240a70105-image-1470256869922.png"

        [//]: # "https://images.code.org/558b42903bf40cc26410e651a85de922-image-1470256869923.png"

        [//]: # "https://images.code.org/1d41d2e5b3b55037911b8f73bdc2ff48-image-1470257277875.png"
      CSD U3 collisions horse_2019: |-
        # Rainbow Horse

        When the rainbow touches the horse, it should turn into a unicorn.

        # Do This

        Use the `if`, `isTouching`, and `setAnimation` blocks to change the horse sprite's image when the rainbow touches it.  The unicorn image is already loaded in the animations tab for you.

        [//]: # "https://images.code.org/4d1d0e36e574117140ecc377d406c1de-image-1470256869920.png"

        [//]: # "https://images.code.org/b913bc2ee2231b908892472240a70105-image-1470256869922.png"

        [//]: # "https://images.code.org/558b42903bf40cc26410e651a85de922-image-1470256869923.png"

        [//]: # "https://images.code.org/1d41d2e5b3b55037911b8f73bdc2ff48-image-1470257277875.png"
      CSD U3 collisions isTouching intro: |-
        # isTouching()

        Writing out the math each time you want to check whether two sprites are touching can take a while, so a programmer created the `isTouching` block, which can check whether one sprite is touching another sprite (the _target_).  The computer is still doing the same math as in the previous program, but you don't have to worry about it because another programmer already did that work.

        # Do This

        Inside the draw loop, drag the `isTouching` block into the `if` block.     ( [Show me where](#triggercallout=code_triggered) )

        _Hint: Don't forget to change the "sprite" to "balloon" and the "target" to "tack"._

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"
      CSD U3 collisions isTouching intro_2018: |-
        # isTouching()

        Writing out the math each time you want to check whether two sprites are touching can take a while, so a programmer created the `isTouching` block, which can check whether one sprite is touching another sprite (the _target_).  The computer is still doing the same math as in the previous program, but you don't have to worry about it because another programmer already did that work.

        # Do This

        Inside the draw loop, drag the `isTouching` block into the `if` block.     ( [Show me where](#triggercallout=code_triggered) )

        _Hint: Don't forget to change the "sprite" to "balloon" and the "target" to "tack"._

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"
      CSD U3 collisions isTouching intro_2019: |-
        # isTouching()

        Writing out the math each time you want to check whether two sprites are touching can take a while, so a programmer created the `isTouching` block, which can check whether one sprite is touching another sprite (the _target_).  The computer is still doing the same math as in the previous program, but you don't have to worry about it because another programmer already did that work.

        # Do This

        Inside the draw loop, drag the `isTouching` block into the `if` block.     ( [Show me where](#triggercallout=code_triggered) )

        _Hint: Don't forget to change the "sprite" to "balloon" and the "target" to "tack"._

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"
      CSD U3 collisions predict set velocity code: |-
        # Sprite Interactions

        So far you've been able to create simple sprite interactions by using the `sprite.isTouching()` block. For example, you've reset a coin to a different location on the screen when a character touches it. Now it's time to start making sprites have more complex interactions.

        # Do This

        -   Run the program and observe the interaction between the two sprites.
        -   Discuss with a neighbor: Using only the commands you already know how could you create this kind of interaction? There are many ways to do it, but here are some blocks to consider:
            -   `sprite.isTouching()`
            -   `sprite.velocityX`
            -   `sprite.velocityY`
            -   `sprite.x`
            -   `sprite.y`

        Be ready to share your ideas with your classmates.
      CSD U3 collisions predict set velocity code_2018: |-
        # Sprite Interactions

        So far you've been able to create simple sprite interactions by using the `sprite.isTouching()` block. For example, you've reset a coin to a different location on the screen when a character touches it. Now it's time to start making sprites have more complex interactions.

        # Do This

        -   Run the program and observe the interaction between the two sprites.
        -   Discuss with a neighbor: Using only the commands you already know how could you create this kind of interaction? There are many ways to do it, but here are some blocks to consider:
            -   `sprite.isTouching()`
            -   `sprite.velocityX`
            -   `sprite.velocityY`
            -   `sprite.x`
            -   `sprite.y`

        Be ready to share your ideas with your classmates.
      CSD U3 collisions predict set velocity code_2019: |-
        # Sprite Interactions

        So far you've been able to create simple sprite interactions by using the `sprite.isTouching()` block. For example, you've reset a coin to a different location on the screen when a character touches it. Now it's time to start making sprites have more complex interactions.

        # Do This

        -   Run the program and observe the interaction between the two sprites.
        -   Discuss with a neighbor: Using only the commands you already know how could you create this kind of interaction? There are many ways to do it, but here are some blocks to consider:
            -   `sprite.isTouching()`
            -   `sprite.velocityX`
            -   `sprite.velocityY`
            -   `sprite.x`
            -   `sprite.y`

        Be ready to share your ideas with your classmates.
      CSD U3 collisions scoreboard: |-
        # Scoreboard

        You can also use `isTouching` to decide whether you should increase the score.  In this game, the score is stored inside the 'score' variable.  It is displayed on the screen using the `text` block.  ( [Show me where](#triggercallout=code_triggered) )

        # Do This

        -   Use the `if` and `isTouching` blocks to determine whether the bunny has caught the carrot. ( [Show me where](#triggercallout=code_triggered2) )
        -   If it has, do the following three things:
            -   Use the counter pattern on the score variable to increase the score.
            -   Reset the carrot's x position off the right-hand side of the screen.
            -   Set the carrot's y position to a random number between 10 and 390.
      CSD U3 collisions scoreboard_2018: |-
        # Scoreboard

        You can also use `isTouching` to decide whether you should increase the score.  In this game, the score is stored inside the 'score' variable.  It is displayed on the screen using the `text` block.  ( [Show me where](#triggercallout=code_triggered) )

        # Do This

        -   Use the `if` and `isTouching` blocks to determine whether the bunny has caught the carrot. ( [Show me where](#triggercallout=code_triggered2) )
        -   If it has, do the following three things:
            -   Use the counter pattern on the score variable to increase the score.
            -   Reset the carrot's x position off the right-hand side of the screen.
            -   Set the carrot's y position to a random number between 10 and 390.
      CSD U3 collisions scoreboard_2019: |-
        # Scoreboard

        You can also use `isTouching` to decide whether you should increase the score.  In this game, the score is stored inside the 'score' variable.  It is displayed on the screen using the `text` block.  ( [Show me where](#triggercallout=code_triggered) )

        # Do This

        -   Use the `if` and `isTouching` blocks to determine whether the bunny has caught the carrot. ( [Show me where](#triggercallout=code_triggered2) )
        -   If it has, do the following three things:
            -   Use the counter pattern on the score variable to increase the score.
            -   Reset the carrot's x position off the right-hand side of the screen.
            -   Set the carrot's y position to a random number between 10 and 390.
      CSD U3 collisions setCollider: |-
        # setCollider

        Sprites interact based on the size and shape of their collider, not the images that are assigned to them. You can only see the collider when debug mode is turned on.  You can change the shape of the collider using the `sprite.setCollider()` block, which lets you pick between a "rectangle" or a "circle".  By default all colliders are "rectangle".

        # Do This

        -   Find the `sprite.setCollider()` block for the gold coin, and change it from "rectangle" to "circle".
        -   Add a new `sprite.setCollider()` block for the silver coin, and choose "circle" for the shape of the collider.
        -   Run the code again to see how the sprites bounce.

        [//]: # "https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png"

        [//]: # "https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png"
      CSD U3 collisions setCollider_2018: |-
        # setCollider

        Sprites interact based on the size and shape of their collider, not the images that are assigned to them. You can only see the collider when debug mode is turned on.  You can change the shape of the collider using the `sprite.setCollider()` block, which lets you pick between a "rectangle" or a "circle".  By default all colliders are "rectangle".

        # Do This

        -   Find the `sprite.setCollider()` block for the gold coin, and change it from "rectangle" to "circle".
        -   Add a new `sprite.setCollider()` block for the silver coin, and choose "circle" for the shape of the collider.
        -   Run the code again to see how the sprites bounce.

        [//]: # "https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png"

        [//]: # "https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png"
      CSD U3 collisions setCollider_2019: |-
        # setCollider

        Sprites interact based on the size and shape of their collider, not the images that are assigned to them. You can only see the collider when debug mode is turned on.  You can change the shape of the collider using the `sprite.setCollider()` block, which lets you pick between a "rectangle" or a "circle".  By default all colliders are "rectangle".

        # Do This

        -   Find the `sprite.setCollider()` block for the gold coin, and change it from "rectangle" to "circle".
        -   Add a new `sprite.setCollider()` block for the silver coin, and choose "circle" for the shape of the collider.
        -   Run the code again to see how the sprites bounce.

        [//]: # "https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png"

        [//]: # "https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png"
      CSD U3 collisions sidescroll2: |-
        # Improve Your Game

        Now that you know how to use `isTouching` and `playSound`, you can make some fun things happen when your sprites run into each other.

        _Note: The `playSound` block now has an extra parameter called "loop" that can be set to true or false.  If this parameter is true, the sound will continue to play in a loop._

        # Do This

        -   Add at least two effects when your sprites collide.

        _Challenge: Add a scoreboard to the top of your screen._
      CSD U3 collisions sidescroll2_2018: |-
        # Improve Your Game

        Now that you know how to use `isTouching` and `playSound`, you can make some fun things happen when your sprites run into each other.

        _Note: The `playSound` block now has an extra parameter called "loop" that can be set to true or false.  If this parameter is true, the sound will continue to play in a loop._

        # Do This

        -   Add at least two effects when your sprites collide.

        _Challenge: Add a scoreboard to the top of your screen._
      CSD U3 collisions sidescroll2_2019: |-
        # Improve Your Game

        Now that you know how to use `isTouching` and `playSound`, you can make some fun things happen when your sprites run into each other.

        _Note: The `playSound` block now has an extra parameter called "loop" that can be set to true or false.  If this parameter is true, the sound will continue to play in a loop._

        # Do This

        -   Add at least two effects when your sprites collide.

        _Challenge: Add a scoreboard to the top of your screen._
      CSD U3 collisions try blocks: |-
        # More Collision Blocks

        Three new types of sprite interactions have been added to the toolbox, `sprite.collide()`, `sprite.bounce()`, and `sprite.bounceOff()`. How do you think they'll affect the sprites?

        # Do This

        -   Switch out the displace block for the `sprite.collide()`, `sprite.bounce()`, and `sprite.bounceOff()` blocks. ( [Show me where](#triggercallout=code_triggered) )
            -   _Hint: If you're having trouble doing this with blocks then switch over to text mode._
        -   Discuss with a neighbor: What is the difference between the four different sprite interactions? What do you think the purpose of each block is?

        [//]: # "https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png"

        [//]: # "https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png"
      CSD U3 collisions try blocks_2018: |-
        # More Collision Blocks

        Three new types of sprite interactions have been added to the toolbox, `sprite.collide()`, `sprite.bounce()`, and `sprite.bounceOff()`. How do you think they'll affect the sprites?

        # Do This

        -   Switch out the displace block for the `sprite.collide()`, `sprite.bounce()`, and `sprite.bounceOff()` blocks. ( [Show me where](#triggercallout=code_triggered) )
            -   _Hint: If you're having trouble doing this with blocks then switch over to text mode._
        -   Discuss with a neighbor: What is the difference between the four different sprite interactions? What do you think the purpose of each block is?

        [//]: # "https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png"

        [//]: # "https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png"
      CSD U3 collisions try blocks_2019: |-
        # More Collision Blocks

        Three new types of sprite interactions have been added to the toolbox, `sprite.collide()`, `sprite.bounce()`, and `sprite.bounceOff()`. How do you think they'll affect the sprites?

        # Do This

        -   Switch out the displace block for the `sprite.collide()`, `sprite.bounce()`, and `sprite.bounceOff()` blocks. ( [Show me where](#triggercallout=code_triggered) )
            -   _Hint: If you're having trouble doing this with blocks then switch over to text mode._
        -   Discuss with a neighbor: What is the difference between the four different sprite interactions? What do you think the purpose of each block is?

        [//]: # "https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png"

        [//]: # "https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png"
      CSD U3 collisions turtle: |-
        # Debugging Sprite Interactions

        Sprite interactions just run some code when they're called. The interactions are not "remembered" by the game. If you want one sprite to bounce or collide with another then it needs to be a part of the draw loop. If you forget then this can lead to unexpected behavior.

        # Do This

        The turtle can be moved with the arrow keys. It's not supposed to be able to walk through the tree, but something is wrong in the code. Can you find and correct the bug in the code?

        -   Run the code and try to make the turtle collide with the tree.
        -   Look through the code and discuss with your partner what the problem is.
        -   Correct the code, then run it again to make sure it works.
      CSD U3 collisions turtle_2018: |-
        # Debugging Sprite Interactions

        Sprite interactions just run some code when they're called. The interactions are not "remembered" by the game. If you want one sprite to bounce or collide with another then it needs to be a part of the draw loop. If you forget then this can lead to unexpected behavior.

        # Do This

        The turtle can be moved with the arrow keys. It's not supposed to be able to walk through the tree, but something is wrong in the code. Can you find and correct the bug in the code?

        -   Run the code and try to make the turtle collide with the tree.
        -   Look through the code and discuss with your partner what the problem is.
        -   Correct the code, then run it again to make sure it works.
      CSD U3 collisions turtle_2019: |-
        # Debugging Sprite Interactions

        Sprite interactions just run some code when they're called. The interactions are not "remembered" by the game. If you want one sprite to bounce or collide with another then it needs to be a part of the draw loop. If you forget then this can lead to unexpected behavior.

        # Do This

        The turtle can be moved with the arrow keys. It's not supposed to be able to walk through the tree, but something is wrong in the code. Can you find and correct the bug in the code?

        -   Run the code and try to make the turtle collide with the tree.
        -   Look through the code and discuss with your partner what the problem is.
        -   Correct the code, then run it again to make sure it works.
      CSD U3 collisions types: |-
        # Collision Types

        There are four types of collisions that we use in Game Lab.  These blocks will cause a certain type of interaction between the _sprite_ and its _target_.

        ## displace

        The `displace` block causes the sprite to push the target as long as they are touching each other. The sprite keeps moving normally.

        ## collide

        The `collide` block makes the sprite stop when it runs into the target.  If the target is moving, it will push the sprite with it.  The target keeps moving normally.

        ## bounce

        The `bounce` block makes the sprite and the target bounce when they touch each other.  Both the sprite and the target change how they are moving.

        ## bounceOff

        The `bounceOff` block makes the sprite bounce off the target.  The target keeps moving normally.

        # Do This

        Choose the best block to model the basketball bouncing off the floor. ( [Show me where](#triggercallout=code_triggered) )

        [//]: # "https://images.code.org/24355fc6377cfafdce3ce2b3568a33c3-image-1470343728940.png"

        [//]: # "https://images.code.org/87e4306e0371c7975b8fb2583657ee4a-image-1470343728942.png"
      CSD U3 collisions types_2018: |-
        # Collision Types

        There are four types of collisions that we use in Game Lab.  These blocks will cause a certain type of interaction between the _sprite_ and its _target_.

        ## displace

        The `displace` block causes the sprite to push the target as long as they are touching each other. The sprite keeps moving normally.

        ## collide

        The `collide` block makes the sprite stop when it runs into the target.  If the target is moving, it will push the sprite with it.  The target keeps moving normally.

        ## bounce

        The `bounce` block makes the sprite and the target bounce when they touch each other.  Both the sprite and the target change how they are moving.

        ## bounceOff

        The `bounceOff` block makes the sprite bounce off the target.  The target keeps moving normally.

        # Do This

        Choose the best block to model the basketball bouncing off the floor. ( [Show me where](#triggercallout=code_triggered) )

        [//]: # "https://images.code.org/24355fc6377cfafdce3ce2b3568a33c3-image-1470343728940.png"

        [//]: # "https://images.code.org/87e4306e0371c7975b8fb2583657ee4a-image-1470343728942.png"
      CSD U3 collisions types_2019: |-
        # Tegundir árekstra

        Það eru fjórar tegundir árekstra sem við notum í Leikjasmiðjunni: `displace`, `collide`, `bounce` og `bounceOff`.  Þessir kubbar framkalla vissar tegundir áhrifa sem _kvikinn_ og _mark_ hans hafa á hvort annað.

        # Gerðu þetta

        Veldu besta kubbinn til að líkja eftir því að körfuboltinn endurkastist á gólfinu. ( [Sýndu mér hvar](#triggercallout=code_triggered) )
        \*Vísbending: Þú getur prófað þig áfram með kubbana eða lesið meira um þá undir "Hjálp & ábendingar" flipanum.
        [//]\: # (<https://images.code.org/24355fc6377cfafdce3ce2b3568a33c3-image-1470343728940.png>)

        [//]: # "https://images.code.org/87e4306e0371c7975b8fb2583657ee4a-image-1470343728942.png"
      CSD U3 dancing alien: "# Kvikar í teiknilykkjunni\\\r\n\n\\\r\nMeð því að breyta
        eiginleikum kvika í teiknilykkjunni getur þú sett hreyfingu í persónur þínar.\n\\\r\n\\\r\nÞessi
        hreyfimynd hefur verið stillt á hægagang.  Í upphafi forritsins hefur kubburinn
        `World.frameRate` verið notaður til að stilla myndtíðnina á 10. Venjulega
        er myndtíðnin stillt á 30. Kannaðu að vild aðrar stillingar fyrir myndtíðni.\\\r\n\\\r\n\n#
        \n\nGerðu þetta\\\r\n\n-   Keyrðu kóðann til að sjá hvernig hann virkar.\\\r\n-
        \  Ræddu við félaga af hverju sumt af kóðanum er innan í teiknilykkjunni og
        sumt utan við hana.\\\r\n-   Prófaðu að breyta myndtíðninni og keyra forritið
        aftur."
      CSD U3 dancing alien_2018: "# Kvikar í teiknilykkjunni\\\r\n\n\\\r\nMeð því
        að breyta eiginleikum kvika í teiknilykkjunni getur þú sett hreyfingu í persónur
        þínar.\n\\\r\n\\\r\nÞessi hreyfimynd hefur verið stillt á hægagang.  Í upphafi
        forritsins hefur kubburinn `World.frameRate` verið notaður til að stilla myndtíðnina
        á 10. Venjulega er myndtíðnin stillt á 30. Kannaðu að vild aðrar stillingar
        fyrir myndtíðni.\\\r\n\\\r\n\n# \n\nGerðu þetta\\\r\n\n-   Keyrðu kóðann til
        að sjá hvernig hann virkar.\\\r\n-   Ræddu við félaga af hverju sumt af kóðanum
        er innan í teiknilykkjunni og sumt utan við hana.\\\r\n-   Prófaðu að breyta
        myndtíðninni og keyra forritið aftur."
      CSD U3 dancing alien_2019: "# Kvikar í teiknilykkjunni\\\r\n\n\\\r\nMeð því
        að breyta eiginleikum kvika í teiknilykkjunni getur þú sett hreyfingu í persónur
        þínar.\n\\\r\n\\\r\nÞessi hreyfimynd hefur verið stillt á hægagang.  Í upphafi
        forritsins hefur kubburinn `World.frameRate` verið notaður til að stilla myndtíðnina
        á 10. Venjulega er myndtíðnin stillt á 30. Kannaðu að vild aðrar stillingar
        fyrir myndtíðni.\\\r\n\\\r\n\n# \n\nGerðu þetta\\\r\n\n-   Keyrðu kóðann til
        að sjá hvernig hann virkar.\\\r\n-   Ræddu við félaga af hverju sumt af kóðanum
        er innan í teiknilykkjunni og sumt utan við hana.\\\r\n-   Prófaðu að breyta
        myndtíðninni og keyra forritið aftur."
      CSD U3 debug: "<img src=\"https://images.code.org/249f124a9bbd3da7d6327a7be8ab73c9-image-1493138569984.41.50\nAM.png\"
        style=\"float:right;width:150px;\">\\\r\n\\\r\n\n# Villuleit\\\r\n\n\\\r\nÞað
        gerist æði oft að kóði virkar ekki við fyrstu keyrslu svo forritarinn þarf
        að leita að villum í kóðanum (aflúsa hann). Þessi kóði átti að búa til myndina
        hér til hægri, en forritarinn ruglaðist á röð kubbanna og líka hvernig ætti
        að setja ferning á réttan stað á skjánum.\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\n\n-
        \  Skoðaðu kóðann á vinnusvæðinu.\\\r\n-   Breyttu kóðanum svo hann teikni
        myndina hér til hægri.\\\r\n-   (Þú þarft að færa einn kubb OG breyta hnitum
        ferningsins)"
      CSD U3 debug_2018: "<img src=\"https://images.code.org/249f124a9bbd3da7d6327a7be8ab73c9-image-1493138569984.41.50\nAM.png\"
        style=\"float:right;width:150px;\">\\\r\n\\\r\n\n# Villuleit\\\r\n\n\\\r\nÞað
        gerist æði oft að kóði virkar ekki við fyrstu keyrslu svo forritarinn þarf
        að leita að villum í kóðanum (aflúsa hann). Þessi kóði átti að búa til myndina
        hér til hægri, en forritarinn ruglaðist á röð kubbanna og líka hvernig ætti
        að setja ferning á réttan stað á skjánum.\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\n\n-
        \  Skoðaðu kóðann á vinnusvæðinu.\\\r\n-   Breyttu kóðanum svo hann teikni
        myndina hér til hægri.\\\r\n-   (Þú þarft að færa einn kubb OG breyta hnitum
        ferningsins)"
      CSD U3 debug_2019: "<img src=\"https://images.code.org/249f124a9bbd3da7d6327a7be8ab73c9-image-1493138569984.41.50\nAM.png\"
        style=\"float:right;width:150px;\">\\\r\n\\\r\n\n# Villuleit\\\r\n\n\\\r\nÞað
        gerist æði oft að kóði virkar ekki við fyrstu keyrslu svo forritarinn þarf
        að leita að villum í kóðanum (aflúsa hann). Þessi kóði átti að búa til myndina
        hér til hægri, en forritarinn ruglaðist á röð kubbanna og líka hvernig ætti
        að setja ferning á réttan stað á skjánum.\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\n\n-
        \  Skoðaðu kóðann á vinnusvæðinu.\\\r\n-   Breyttu kóðanum svo hann teikni
        myndina hér til hægri.\\\r\n-   (Þú þarft að færa einn kubb OG breyta hnitum
        ferningsins)"
      CSD U3 ellipse: "<img src=\"https://images.code.org/2ef29be10261f6a2c5df8f214d524f4d-image-1493060602794.02.44\nPM.png\"
        style=\"float:right;width:150px;\">\\\r\n\\\r\n\n# Ellipsa\\\r\n\n\\\r\nÞú
        getur notað kubbinn `ellipse` til að teikna hring eða sporbaug.\\\r\n\\\r\n\n#
        Gerðu þetta\\\r\n\n\\\r\n\n-   Skoðaðu kóðann sem býr til ellipsuna.\\\r\n-
        \  Bættu við nýrri ellipsu í öðrum lit.\\\r"
      CSD U3 ellipse_2018: "<img src=\"https://images.code.org/2ef29be10261f6a2c5df8f214d524f4d-image-1493060602794.02.44\nPM.png\"
        style=\"float:right;width:150px;\">\\\r\n\\\r\n\n# Ellipsa\\\r\n\n\\\r\nÞú
        getur notað kubbinn `ellipse` til að teikna hring eða sporbaug.\\\r\n\\\r\n\n#
        Gerðu þetta\\\r\n\n\\\r\n\n-   Skoðaðu kóðann sem býr til ellipsuna.\\\r\n-
        \  Bættu við nýrri ellipsu í öðrum lit.\\\r"
      CSD U3 ellipse_2019: "<img src=\"https://images.code.org/2ef29be10261f6a2c5df8f214d524f4d-image-1493060602794.02.44\nPM.png\"
        style=\"float:right;width:150px;\">\\\r\n\\\r\n\n# Ellipsa\\\r\n\n\\\r\nÞú
        getur notað kubbinn `ellipse` til að teikna hring eða sporbaug.\\\r\n\\\r\n\n#
        Gerðu þetta\\\r\n\n\\\r\n\n-   Skoðaðu kóðann sem býr til ellipsuna.\\\r\n-
        \  Bættu við nýrri ellipsu í öðrum lit.\\\r"
      CSD U3 fill: |-
        <img src="https://images.code.org/c91390d63e52a3349c48f7b6b0057258-image-1493060802897.05.19 PM.png" style="float:right;width:200px;">

        # fill(litur)

        Þú getur gefið ferningunum þínum mismunandi liti með kubbnum `fill`.  Hann stillir lit allra forma sem eru neðar en hann í kóðanum.

        # Gerðu þetta

        -   Skoðaðu kóðann sem stillir litinn. ( [Sýndu mér hvar](#triggercallout=fill)
            )
        -   Breyttu litnum úr bláu í gult.
        -   Bættu við nýjum ferningi með því að bæta `rect` kubbi í kóðann fyrir neðan `fill` skipunina ( [Sýndu mér hvar]
            (#triggercallout=rect\_block) ).  Nýi ferningurinn má vera hvar sem er á skjánum.
      CSD U3 fill_2018: |-
        <img src="https://images.code.org/c91390d63e52a3349c48f7b6b0057258-image-1493060802897.05.19 PM.png" style="float:right;width:200px;">

        # fill(litur)

        Þú getur gefið ferningunum þínum mismunandi liti með kubbnum `fill`.  Hann stillir lit allra forma sem eru neðar en hann í kóðanum.

        # Gerðu þetta

        -   Skoðaðu kóðann sem stillir litinn. ( [Sýndu mér hvar](#triggercallout=fill)
            )
        -   Breyttu litnum úr bláu í gult.
        -   Bættu við nýjum ferningi með því að bæta `rect` kubbi í kóðann fyrir neðan `fill` skipunina ( [Sýndu mér hvar]
            (#triggercallout=rect\_block) ).  Nýi ferningurinn má vera hvar sem er á skjánum.
      CSD U3 fill_2019: |-
        <img src="https://images.code.org/c91390d63e52a3349c48f7b6b0057258-image-1493060802897.05.19 PM.png" style="float:right;width:200px;">

        # fill(litur)

        Þú getur gefið ferningunum þínum mismunandi liti með kubbnum `fill`.  Hann stillir lit allra forma sem eru neðar en hann í kóðanum.

        # Gerðu þetta

        -   Skoðaðu kóðann sem stillir litinn. ( [Sýndu mér hvar](#triggercallout=fill)
            )
        -   Breyttu litnum úr bláu í gult.
        -   Bættu við nýjum ferningi með því að bæta `rect` kubbi í kóðann fyrir neðan `fill` skipunina ( [Sýndu mér hvar]
            (#triggercallout=rect\_block) ).  Nýi ferningurinn má vera hvar sem er á skjánum.
      CSD U3 finishing touches: |-
        # Finishing Touches

        Now that you have the basis for your game, it's time to add some finishing touches.

        To make your game even better, try making at least two improvements to it. You can use the list below to help you, or you can come up with your own improvements that you'd like to make.

        -   Find a way to keep your player from going off the edges of the screen.
        -   Add a different item for your player to collect or avoid that are worth different point values.
        -   Make a variable to keep track of how many lives your player has, and then end the game when the lives run out.
        -   Add sprites that move in the background of your game.
        -   Make another background to switch to when the score gets even higher, or when the game ends.
        -   Give your game a way to end. Possible events to end your game could be the score reaching a certain value, or the amount of lives to keep the game running runs out.
        -   If your game has platforms, try making the objects in your game interact with these platforms in some way.
      CSD U3 finishing touches_2018: |-
        # Finishing Touches

        Now that you have the basis for your game, it's time to add some finishing touches.

        To make your game even better, try making at least two improvements to it. You can use the list below to help you, or you can come up with your own improvements that you'd like to make.

        -   Find a way to keep your player from going off the edges of the screen.
        -   Add a different item for your player to collect or avoid that are worth different point values.
        -   Make a variable to keep track of how many lives your player has, and then end the game when the lives run out.
        -   Add sprites that move in the background of your game.
        -   Make another background to switch to when the score gets even higher, or when the game ends.
        -   Give your game a way to end. Possible events to end your game could be the score reaching a certain value, or the amount of lives to keep the game running runs out.
        -   If your game has platforms, try making the objects in your game interact with these platforms in some way.
      CSD U3 finishing touches_2019: |-
        # Finishing Touches

        Now that you have the basis for your game, it's time to add some finishing touches.

        To make your game even better, try making at least two improvements to it. You can use the list below to help you, or you can come up with your own improvements that you'd like to make.

        -   Find a way to keep your player from going off the edges of the screen.
        -   Add a different item for your player to collect or avoid that are worth different point values.
        -   Make a variable to keep track of how many lives your player has, and then end the game when the lives run out.
        -   Add sprites that move in the background of your game.
        -   Make another background to switch to when the score gets even higher, or when the game ends.
        -   Give your game a way to end. Possible events to end your game could be the score reaching a certain value, or the amount of lives to keep the game running runs out.
        -   If your game has platforms, try making the objects in your game interact with these platforms in some way.
      CSD U3 function video: |-
        ## Spurningar til að hugleiða

        -   Hugleiddu hvenær fall gæti hafa hjálpað þér að skrifa forrit.
            -   Hvaða kóði mundi fara í **skilgreiningu** fallsins?
            -   Hvenær mundir þú **kalla á** fallið?
            -   Hvaða heiti mundirðu gefa því?
      CSD U3 game animations: |-
        # Create your Animations

        Next you will create your animations in the animation tab.  Don't forget to make multiple animations if you want your sprite to change appearance according to how it's moving.
      CSD U3 game animations_2018: |-
        # Create your Animations

        Next you will create your animations in the animation tab.  Don't forget to make multiple animations if you want your sprite to change appearance according to how it's moving.
      CSD U3 game animations_2019: |-
        # Create your Animations

        Next you will create your animations in the animation tab.  Don't forget to make multiple animations if you want your sprite to change appearance according to how it's moving.
      CSD U3 game backgrounds: |-
        # Create your Backgrounds

        Next, you'll create all of the background functions that you need for your game.  Some games only have one background, and others have more than one that's chosen according to user score or another aspect of gameplay.  You'll need to create a function for each separate background in your game.  You'll write the code to choose the correct background in the next level.

        -   [Show me the block to create a new function](#triggercallout=callout1)
        -   [Show me the area in the code to put my function](#triggercallout=callout2)

        After you create your functions, test them by calling them inside the draw loop, one background per test.

        -   [Show me the block to call my function](#triggercallout=callout3)
      CSD U3 game backgrounds_2018: |-
        # Create your Backgrounds

        Next, you'll create all of the background functions that you need for your game.  Some games only have one background, and others have more than one that's chosen according to user score or another aspect of gameplay.  You'll need to create a function for each separate background in your game.  You'll write the code to choose the correct background in the next level.

        -   [Show me the block to create a new function](#triggercallout=callout1)
        -   [Show me the area in the code to put my function](#triggercallout=callout2)

        After you create your functions, test them by calling them inside the draw loop, one background per test.

        -   [Show me the block to call my function](#triggercallout=callout3)
      CSD U3 game backgrounds_2019: |-
        # Create your Backgrounds

        Next, you'll create all of the background functions that you need for your game.  Some games only have one background, and others have more than one that's chosen according to user score or another aspect of gameplay.  You'll need to create a function for each separate background in your game.  You'll write the code to choose the correct background in the next level.

        -   [Show me the block to create a new function](#triggercallout=callout1)
        -   [Show me the area in the code to put my function](#triggercallout=callout2)

        After you create your functions, test them by calling them inside the draw loop, one background per test.

        -   [Show me the block to call my function](#triggercallout=callout3)
      CSD U3 game choose background: |-
        # Choose your Backgrounds

        Now that you have the backgrounds that you need, you'll write the code to choose the correct background.  You've seen this done in [Lesson 19 Level 11](/s/csd3-2017/stage/19/puzzle/11).

        After you've written the code, test it by changing the starting value of your variables and making sure the correct background shows up.
      CSD U3 game choose background_2018: |-
        # Choose your Backgrounds

        Now that you have the backgrounds that you need, you'll write the code to choose the correct background.  You've seen this done in [Lesson 19 Level 11](../../19/puzzle/11).

        After you've written the code, test it by changing the starting value of your variables and making sure the correct background shows up.
      CSD U3 game choose background_2019: |-
        # Choose your Backgrounds

        Now that you have the backgrounds that you need, you'll write the code to choose the correct background.  You've seen this done in [Lesson 19 Level 11](../../19/puzzle/11).

        After you've written the code, test it by changing the starting value of your variables and making sure the correct background shows up.
      CSD U3 game create sprites: |-
        # Create your Sprites

        Next you will create your sprites and give them starting properties in the "Create Sprites" area of your code.  For each sprite your should:

        -   Create the sprite in the correct place on the screen
        -   Set its animation (or color and size)
        -   Set its velocity and rotation speed, if needed
        -   Set its collider and bounciness, if needed

        After you create each sprite, test it before making the next one.  If your sprite starts off screen, first place it on the screen to test it, them move it back off screen once you know that it looks right.

        If your sprites position will need to be reset later in your game, it's a good idea to make a function that sets the position of this sprite that you can use again later.
      CSD U3 game create sprites_2018: |-
        # Create your Sprites

        Next you will create your sprites and give them starting properties in the "Create Sprites" area of your code.  For each sprite your should:

        -   Create the sprite in the correct place on the screen
        -   Set its animation (or color and size)
        -   Set its velocity and rotation speed, if needed
        -   Set its collider and bounciness, if needed

        After you create each sprite, test it before making the next one.  If your sprite starts off screen, first place it on the screen to test it, them move it back off screen once you know that it looks right.

        If your sprite's position will need to be reset later in your game, it's a good idea to make a function that sets the position of this sprite that you can use again later.
      CSD U3 game create sprites_2019: |-
        # Create your Sprites

        Next you will create your sprites and give them starting properties in the "Create Sprites" area of your code.  For each sprite your should:

        -   Create the sprite in the correct place on the screen
        -   Set its animation (or color and size)
        -   Set its velocity and rotation speed, if needed
        -   Set its collider and bounciness, if needed

        After you create each sprite, test it before making the next one.  If your sprite starts off screen, first place it on the screen to test it, them move it back off screen once you know that it looks right.

        If your sprite's position will need to be reset later in your game, it's a good idea to make a function that sets the position of this sprite that you can use again later.
      CSD U3 game display boards: |-
        # Display Boards

        Now that your backgrounds are working, you can add your display boards.  Most games have a score board, but you might also want to display information about player level or lives remaining.  Look at [Lesson 16 Puzzle 9](/s/csd3-2017/stage/16/puzzle/9) for an example of how to make a scoreboard.

        For each display board:

        -   Create a function to display the information
        -   Call the function in the draw loop

        Be sure to test your boards by changing the starting value of your variables and making sure the board also changes when you run the code.
      CSD U3 game display boards_2018: |-
        # Display Boards

        Now that your backgrounds are working, you can add your display boards.  Most games have a score board, but you might also want to display information about player level or lives remaining.  Look at [Lesson 16 Puzzle 9](../../16/puzzle/9) for an example of how to make a scoreboard.

        For each display board:

        -   Create a function to display the information
        -   Call the function in the draw loop

        Be sure to test your boards by changing the starting value of your variables and making sure the board also changes when you run the code.
      CSD U3 game display boards_2019: |-
        # Display Boards

        Now that your backgrounds are working, you can add your display boards.  Most games have a score board, but you might also want to display information about player level or lives remaining.  Look at [Lesson 16 Puzzle 9](../../16/puzzle/9) for an example of how to make a scoreboard.

        For each display board:

        -   Create a function to display the information
        -   Call the function in the draw loop

        Be sure to test your boards by changing the starting value of your variables and making sure the board also changes when you run the code.
      CSD U3 game interactions: |-
        # Sprite Interactions

        The last step is to create the functions that make your sprites interact in the right ways.  You'll need a function for each type of sprite interaction. You can use the `collectItems` in [Lesson 21 Puzzle 17](/s/csd3-2017/stage/21/puzzle/17) and `displaceEnemies` in [Lesson 20 Puzzle 15](/s/csd3-2017/stage/20/puzzle/15) as examples.

        For each interaction:

        -   Create a function in the functions area of your code
        -   Call the function inside the draw loop

        After you make each function, run the code to test it before making another.
      CSD U3 game interactions_2018: |-
        # Sprite Interactions

        The last step is to create the functions that make your sprites interact in the right ways.  You'll need a function for each type of sprite interaction. You can use the `collectItems` in [Lesson 21 Puzzle 17](/s/csd3-2018/stage/21/puzzle/17) and `displaceEnemies` in [Lesson 20 Puzzle 15](/s/csd3-2018/stage/20/puzzle/15) as examples.

        For each interaction:

        -   Create a function in the functions area of your code
        -   Call the function inside the draw loop

        After you make each function, run the code to test it before making another.
      CSD U3 game interactions_2019: |-
        # Sprite Interactions

        The last step is to create the functions that make your sprites interact in the right ways.  You'll need a function for each type of sprite interaction. You can use the `collectItems` in [Lesson 21 Puzzle 17](../../21/puzzle/17) and `displaceEnemies` in [Lesson 20 Puzzle 15](../../20/puzzle/15) as examples.

        For each interaction:

        -   Create a function in the functions area of your code
        -   Call the function inside the draw loop

        After you make each function, run the code to test it before making another.
      CSD U3 game sprite movement: |-
        # Sprite Movement Functions

        Now you'll make the functions that make the sprite move in different ways as the game is played.  Some examples of functions that you've written are `loopPlatforms` in [Lesson 21 Puzzle 9](/s/csd3-2017/stage/21/puzzle/9) and `playerFall` in [Lesson 21 Puzzle 14](/s/csd3-2017/stage/21/puzzle/14).

        For each movement:

        -   Create a function that will make the sprite move in that way
        -   Call the function inside the draw loop
      CSD U3 game sprite movement_2018: |-
        # Sprite Movement Functions

        Now you'll make the functions that make the sprite move in different ways as the game is played.  Some examples of functions that you've written are `loopPlatforms` in [Lesson 21 Puzzle 9](../../../stage/21/puzzle/9) and `playerFall` in [Lesson 21 Puzzle 14](../../../stage/21/puzzle/14).

        For each movement:

        -   Create a function that will make the sprite move in that way
        -   Call the function inside the draw loop
      CSD U3 game sprite movement_2019: |-
        # Sprite Movement Functions

        Now you'll make the functions that make the sprite move in different ways as the game is played.  Some examples of functions that you've written are `loopPlatforms` in [Lesson 21 Puzzle 9](../../../stage/21/puzzle/9) and `playerFall` in [Lesson 21 Puzzle 14](../../../stage/21/puzzle/14).

        For each movement:

        -   Create a function that will make the sprite move in that way
        -   Call the function inside the draw loop
      CSD U3 game user controls: |-
        # User Controls

        Next, you'll want to make sure your user controls are working.  Create a function that makes your sprites respond to user controls as defined in your project guide.  You can use the function in in [Lesson 20 Puzzle 13](/s/csd3-2017/stage/20/puzzle/13) as an example.
      CSD U3 game user controls_2018: |-
        # User Controls

        Next, you'll want to make sure your user controls are working.  Create a function that makes your sprites respond to user controls as defined in your project guide.  You can use the function in in [Lesson 20 Puzzle 13](../../20/puzzle/13) as an example.
      CSD U3 game user controls_2019: |-
        # User Controls

        Next, you'll want to make sure your user controls are working.  Create a function that makes your sprites respond to user controls as defined in your project guide.  You can use the function in in [Lesson 20 Puzzle 13](../../20/puzzle/13) as an example.
      CSD U3 game variables: |-
        # Create your Variables

        First, you'll need to create all of your variables and put them in the variables area of your code.

        -   [Show me the block](#triggercallout=callout1)
        -   [Show me the area in the code](#triggercallout=callout2)

        Don't forget, each variable needs a label (name) and a starting value.  You can change the value of the variable later in your code.
      CSD U3 game variables_2018: |-
        # Create your Variables

        First, you'll need to create all of your variables and put them in the variables area of your code.

        -   [Show me the block](#triggercallout=callout1)
        -   [Show me the area in the code](#triggercallout=callout2)

        Don't forget, each variable needs a label (name) and a starting value.  You can change the value of the variable later in your code.
      CSD U3 game variables_2019: |-
        # Create your Variables

        First, you'll need to create all of your variables and put them in the variables area of your code.

        -   [Show me the block](#triggercallout=callout1)
        -   [Show me the area in the code](#triggercallout=callout2)

        Don't forget, each variable needs a label (name) and a starting value.  You can change the value of the variable later in your code.
      CSD U3 if else predict: Spádómsáfangi, sjá leiðbeiningar í áfanga.
      CSD U3 keydown conditional: "# Skipt um kvika\\\r\n\n\\\r\nÞú sást í síðasta
        áfanga að `keyDown` gefur `true` á meðan þú heldur niðri lykli og `false`
        þegar ekki er ýtt á lykilinn.   Inntakið fyrir \n`keyDown` skipunina er (enskt)
        heiti lykilsins sem á fylgjast með innan gæsalappa. Nokkur dæmi eru \"x\",
        \"up\" og \"space\".\\\r\n\\\r\nVið getum notað `keyDown` sem inntak í `if`
        yrðingu til að breyta kvikunum með því að ýta á lykla!\\\r\n\\\r\n\n# \n\nGerðu
        þetta\\\r\n\n-   Keyrðu forritið og prófaðu að ýta á upp og niður örvarnar.\\\r\n-
        \  Skoðaðu innihald `if` yrðingarinnar til að sjá hvernig kóðinn virkar.\\\r\n-
        \  Bættu við kubbi í þriðju `if` yrðinguna til að skipta um dýr í hreyfimyndinni.\\\r\n
        \   \\\r\n    _Vísbending:\n    Þú gætir notað kanínuna sem er þegar á hreyfingasíðunni
        eða bætt við nýrri hreyfingu._"
      CSD U3 keydown conditional_2018: |-
        # Changing Sprites

        You saw on the last level that `keyDown` returns `true` while you are holding a key down and `false` when the key is not pressed down.   The input for the `keyDown` command is the name of key you want to check in quotes. Some examples are "x", "up" and "space".

        We can use `keyDown` as an input to an `if` statement to change our animations based on key presses!

        # Do This

        -   Run the code and try pressing the "p" and "h" keys.
        -   Look inside the `if` statement to see how the code works.
        -   Add a block inside the third `if` statement to change the animation to a different animal.

        _Challenge: When you use `setAnimation`, it keeps the new animation until you change it again.  Can you change the code so that the sprite will automatically go back to a giraffe when you're not holding one of the keys down?_
      CSD U3 keydown conditional_2018_2019: |-
        # Changing Sprites

        You saw on the last level that `keyDown` returns `true` while you are holding a key down and `false` when the key is not pressed down.   The input for the `keyDown` command is the name of key you want to check in quotes. Some examples are "x", "up" and "space".

        We can use `keyDown` as an input to an `if` statement to change our animations based on key presses!

        # Do This

        -   Run the code and try pressing the "p" and "h" keys.
        -   Look inside the `if` statement to see how the code works.
        -   Add a block inside the third `if` statement to change the animation to a different animal.

        _Challenge: When you use `setAnimation`, it keeps the new animation until you change it again.  Can you change the code so that the sprite will automatically go back to a giraffe when you're not holding one of the keys down?_
      CSD U3 picture: "# Áskorun: Teikna mynd\\\r\n\n\\\r\n_Ráðfærðu þig við kennarann
        áður en þú byrjar svona áskoranir_\\\r\n\\\r\nÍ síðustu kennslustund skapaðir
        þú með félaga þínum nokkrar áhugaverðar myndir. Gáðu hvort þið getið endurskapað
        þær með kóða."
      CSD U3 picture_2018: "# Áskorun: Teikna mynd\\\r\n\n\\\r\n_Ráðfærðu þig við
        kennarann áður en þú byrjar svona áskoranir_\\\r\n\\\r\nÍ síðustu kennslustund
        skapaðir þú með félaga þínum nokkrar áhugaverðar myndir. Gáðu hvort þið getið
        endurskapað þær með kóða."
      CSD U3 picture_2019: "# Áskorun: Teikna mynd\\\r\n\n\\\r\n_Ráðfærðu þig við
        kennarann áður en þú byrjar svona áskoranir_\\\r\n\\\r\nÍ síðustu kennslustund
        skapaðir þú með félaga þínum nokkrar áhugaverðar myndir. Gáðu hvort þið getið
        endurskapað þær með kóða."
      CSD U3 platform background1: |-
        # Background

        The first thing that you will create for your game is the background.   The sample game had two different backgrounds that were chosen according to the user's score.  The first background has already been created for you.  Look at the `background1` function in the code below to see how it works. ([Show me where](#triggercallout=code_triggered1))

        In order for the background function to do something, you have to call it inside the draw loop. ([Show me where](#triggercallout=code_triggered2))

        There is also an empty function named `background2`. ([Show me where](#triggercallout=code_triggered3))  You will need to fill that function with new code to make a different background, then test the code by calling the function inside the draw loop.

        # Do this

        -   Read the code for `background1`.
        -   Fill the `background2` function with new code for a second background.
        -   Test your `background2` function by calling it inside the draw loop.

        _Hint: It's much easier to copy, paste, and make small changes to your code in text mode._
      CSD U3 platform background1_2018: |-
        # Background

        The first thing that you will create for your game is the background.   The sample game had two different backgrounds that were chosen according to the user's score.  The first background has already been created for you.  Look at the `background1` function in the code below to see how it works. ([Show me where](#triggercallout=code_triggered1))

        In order for the background function to do something, you have to call it inside the draw loop. ([Show me where](#triggercallout=code_triggered2))

        There is also an empty function named `background2`. ([Show me where](#triggercallout=code_triggered3))  You will need to fill that function with new code to make a different background, then test the code by calling the function inside the draw loop.

        # Do this

        -   Read the code for `background1`.
        -   Fill the `background2` function with new code for a second background.
        -   Test your `background2` function by calling it inside the draw loop.

        _Hint: It's much easier to copy, paste, and make small changes to your code in text mode._
      CSD U3 platform background1_2019: |-
        # Background

        The first thing that you will create for your game is the background.   The sample game had two different backgrounds that were chosen according to the user's score.  The first background has already been created for you.  Look at the `background1` function in the code below to see how it works. ([Show me where](#triggercallout=code_triggered1))

        In order for the background function to do something, you have to call it inside the draw loop. ([Show me where](#triggercallout=code_triggered2))

        There is also an empty function named `background2`. ([Show me where](#triggercallout=code_triggered3))  You will need to fill that function with new code to make a different background, then test the code by calling the function inside the draw loop.

        # Do this

        -   Read the code for `background1`.
        -   Fill the `background2` function with new code for a second background.
        -   Test your `background2` function by calling it inside the draw loop.

        _Hint: It's much easier to copy, paste, and make small changes to your code in text mode._
      CSD U3 platform background2: |-
        # Choosing your Background

        Now that you have your score variable, you can use it to choose the right background for your game.  You can see an example of changing your background according to your score in [Lesson 19 Level 11](/s/csd3-2017/stage/19/puzzle/11)

        # Do This

        -   Inside the draw loop, use an `if` statement and your two background functions to draw your background according to your score level.
        -   Test your code by changing the start score to 100, then running to code to see whether the background changes.

        _Challenge: If you have a third background, you can click the plus sign at the bottom of the `if` block.  Another space will appear for your third background function, as well as a place to check the score again._
      CSD U3 platform background2_2018: |-
        # Choosing your Background

        Now that you have your score variable, you can use it to choose the right background for your game.  You can see an example of changing your background according to your score in [Lesson 19 Level 11](/s/csd3-2018/stage/19/puzzle/11)

        # Do This

        -   Inside the draw loop, use an `if` statement and your two background functions to draw your background according to your score level.
        -   Test your code by changing the start score to 100, then running to code to see whether the background changes.

        _Challenge: If you have a third background, you can click the plus sign at the bottom of the `if` block.  Another space will appear for your third background function, as well as a place to check the score again._
      CSD U3 platform background2_2019: |-
        # Að velja bakgrunn

        Nú hefurðu breytu fyrir skor, svo að þú getur notað hana til að velja rétta bakgrunninn fyrir leikinn.  Þú getur séð dæmi um hvernig bakgrunni er breytt út frá skorinu í [Kennslustund 19 Áfanga 12](../../19/puzzle/12)

        # Gerðu þetta

        -   Vertu innan "draw" lykkjunar og  notaðu `if` yrðingu og bakgrunnsföllin tvö til að teikna bakgrunn út frá skorinu.
        -   Prófaðu kóðann með því að breyta upphafsskorinu í 100 og keyra svo kóðann til að sjá hvort bakgrunnurinn breytist.

        _Áskorun: Ef þú ert með þriðja bakgrunnin getur þú smellt á plústáknið neðst á `if` kubbnum.  Annað hólf birtist fyrir þriðja bakgrunnsfallið ásamt stað til að athuga skorið aftur._
      CSD U3 platform challenge: |-
        # Improve Your Game

        Improve your game by adding in two or more of the features you saw in the last two examples.  You can use the list below to help you.

        -   Choose new animations for your player, platform, and items.
        -   Prevent your player from going off the side of the screen.
        -   Add a different type of item for the player to collect or avoid.
        -   Add a variable that keeps track of how many lives the player has, and end the game if the player runs out.
        -   Make your player's animation change direction when the player changes direction.
        -   Change the player to only jump when it is on a platform.
        -   Add another background and make it appear when the score gets even higher.
        -   Make your items interact with the platforms in some way.
      CSD U3 platform challenge_2018: |-
        # Improve Your Game

        Improve your game by adding in two or more of the features you saw in the last two examples.  You can use the list below to help you.

        -   Choose new animations for your player, platform, and items.
        -   Prevent your player from going off the side of the screen.
        -   Add a different type of item for the player to collect or avoid.
        -   Add a variable that keeps track of how many lives the player has, and end the game if the player runs out.
        -   Make your player's animation change direction when the player changes direction.
        -   Change the player to only jump when it is on a platform.
        -   Add another background and make it appear when the score gets even higher.
        -   Make your items interact with the platforms in some way.
      CSD U3 platform challenge_2019: |-
        # Improve Your Game

        Improve your game by adding in two or more of the features you saw in the last two examples.  You can use the list below to help you.

        -   Choose new animations for your player, platform, and items.
        -   Prevent your player from going off the side of the screen.
        -   Add a different type of item for the player to collect or avoid.
        -   Add a variable that keeps track of how many lives the player has, and end the game if the player runs out.
        -   Make your player's animation change direction when the player changes direction.
        -   Change the player to only jump when it is on a platform.
        -   Add another background and make it appear when the score gets even higher.
        -   Make your items interact with the platforms in some way.
      CSD U3 platform items1: |-
        # Create an Item

        <img src="https://images.code.org/2cdb64a2e23e68c8a86296240642cd13-image-1476211650103.gif" style="float:right;">

        Next, you need to add the items that fall from the top of the screen.  These move just like the platforms, but faster.  In order to make the game more interesting, the items start at a random location above the screen.  For the sample game, the item's x position is a random number between 50 and 350, and the y position is a random number between -30 and -60.

        # Do This

        -   Use the `createSprite` block to make an item sprite in the "create sprites" section of your code.
        -   Use the `randomNumber` block inside your `createSprite` block to start the item at a random x and y position.
        -   Use `setAnimation` and `velocityY` to give your sprite the correct image and make it fall from the top of the screen.
        -   Run the code to test your sprite.
      CSD U3 platform items1_2018: |-
        # Create an Item

        <img src="https://images.code.org/2cdb64a2e23e68c8a86296240642cd13-image-1476211650103.gif" style="float:right;">

        Next, you need to add the items that fall from the top of the screen.  These move just like the platforms, but faster.  In order to make the game more interesting, the items start at a random location above the screen.  For the sample game, the item's x position is a random number between 50 and 350, and the y position is a random number between -30 and -60.

        # Do This

        -   Use the `createSprite` block to make an item sprite in the "create sprites" section of your code.
        -   Use the `randomNumber` block inside your `createSprite` block to start the item at a random x and y position.
        -   Use `setAnimation` and `velocityY` to give your sprite the correct image and make it fall from the top of the screen.
        -   Run the code to test your sprite.
      CSD U3 platform items1_2019: |-
        # Create an Item

        <img src="https://images.code.org/2cdb64a2e23e68c8a86296240642cd13-image-1476211650103.gif" style="float:right;">

        Next, you need to add the items that fall from the top of the screen.  These move just like the platforms, but faster.  In order to make the game more interesting, the items start at a random location above the screen.  For the sample game, the item's x position is a random number between 50 and 350, and the y position is a random number between -30 and -60.

        # Do This

        -   Use the `createSprite` block to make an item sprite in the "create sprites" section of your code.
        -   Use the `randomNumber` block inside your `createSprite` block to start the item at a random x and y position.
        -   Use `setAnimation` and `velocityY` to give your sprite the correct image and make it fall from the top of the screen.
        -   Run the code to test your sprite.
      CSD U3 platform items2: |-
        # Loop your Item

        <img src="https://images.code.org/bf06ad06acbba65dfd48b63608a08c90-image-1476212006882.gif" style="float:right">
        Now that your item is falling, you can add code to loop it back to the top.  This is similar to what you did for the platform sprite, but the item sprite will loop back to a random x and y location when it goes to the top of the screen.

        # Do This

        -   Create a `loopItems` function that uses an `if` block to check whether the item sprite is off the bottom of the screen, then sends the item back to a random x and y position, just as it did when you first created the sprite.
        -   Call the function inside the draw loop.
        -   Run the code to test your sprite.
      CSD U3 platform items2_2018: |-
        # Loop your Item

        <img src="https://images.code.org/bf06ad06acbba65dfd48b63608a08c90-image-1476212006882.gif" style="float:right">
        Now that your item is falling, you can add code to loop it back to the top.  This is similar to what you did for the platform sprite, but the item sprite will loop back to a random x and y location when it goes to the top of the screen.

        # Do This

        -   Create a `loopItems` function that uses an `if` block to check whether the item sprite is off the bottom of the screen, then sends the item back to a random x and y position, just as it did when you first created the sprite.
        -   Call the function inside the draw loop.
        -   Run the code to test your sprite.
      CSD U3 platform items2_2019: |-
        # Loop your Item

        <img src="https://images.code.org/bf06ad06acbba65dfd48b63608a08c90-image-1476212006882.gif" style="float:right">
        Now that your item is falling, you can add code to loop it back to the top.  This is similar to what you did for the platform sprite, but the item sprite will loop back to a random x and y location when it goes to the top of the screen.

        # Do This

        -   Create a `loopItems` function that uses an `if` block to check whether the item sprite is off the bottom of the screen, then sends the item back to a random x and y position, just as it did when you first created the sprite.
        -   Call the function inside the draw loop.
        -   Run the code to test your sprite.
      CSD U3 platform items3: |-
        # Make your Second Item

        <img src="https://images.code.org/dfd53f2ea4b4380c126dde8035bcdc45-image-1476212495388.gif" style="float: right">

        Next, you'll copy and paste the code for your first item to create a second item.  Remember that this is a lot easier in **text mode**, so be sure to try it out if you haven't already.

        You'll need to copy two parts of your code: the part at the beginning where you made the item, and the part in your `loopItem` function, where you looped the item back to the top of the screen.

        # Do This

        -   Copy the code you used to create the first item sprite (`createSprite`, `setAnimation`, and `velocityY`), and paste it directly beneath the original code.
        -   Change the names of the sprite in the new lines.  For example, if you named your original sprite "star", you could name this one "star2".
        -   Inside your `loopItems` function, copy the if statement, then paste it directly underneath the original code, inside the function.
        -   Change the sprite name in the new lines of code.
        -   Run your code to test it.
      CSD U3 platform items3_2018: |-
        # Make your Second Item

        <img src="https://images.code.org/dfd53f2ea4b4380c126dde8035bcdc45-image-1476212495388.gif" style="float: right">

        Next, you'll copy and paste the code for your first item to create a second item.  Remember that this is a lot easier in **text mode**, so be sure to try it out if you haven't already.

        You'll need to copy two parts of your code: the part at the beginning where you made the item, and the part in your `loopItem` function, where you looped the item back to the top of the screen.

        # Do This

        -   Copy the code you used to create the first item sprite (`createSprite`, `setAnimation`, and `velocityY`), and paste it directly beneath the original code.
        -   Change the names of the sprite in the new lines.  For example, if you named your original sprite "star", you could name this one "star2".
        -   Inside your `loopItems` function, copy the if statement, then paste it directly underneath the original code, inside the function.
        -   Change the sprite name in the new lines of code.
        -   Run your code to test it.
      CSD U3 platform items3_2019: |-
        # Make your Second Item

        <img src="https://images.code.org/dfd53f2ea4b4380c126dde8035bcdc45-image-1476212495388.gif" style="float: right">

        Next, you'll copy and paste the code for your first item to create a second item.  Remember that this is a lot easier in **text mode**, so be sure to try it out if you haven't already.

        You'll need to copy two parts of your code: the part at the beginning where you made the item, and the part in your `loopItem` function, where you looped the item back to the top of the screen.

        # Do This

        -   Copy the code you used to create the first item sprite (`createSprite`, `setAnimation`, and `velocityY`), and paste it directly beneath the original code.
        -   Change the names of the sprite in the new lines.  For example, if you named your original sprite "star", you could name this one "star2".
        -   Inside your `loopItems` function, copy the if statement, then paste it directly underneath the original code, inside the function.
        -   Change the sprite name in the new lines of code.
        -   Run your code to test it.
      CSD U3 platform platform1: "# Create a Platform Sprite\n\n<img src=\"https://images.code.org/6e5aa80eb72809d761a695fae1b42b81-image-1476210749306.gif\"
        style=\"float: right;\"> \n\nNow that you have your background and your variables,
        it's time to create your sprites.  Usually, it will be easiest to start with
        the sprites that are part of the environment, such as your platforms.  The
        sample game had two platform sprites, but you'll make just one first, then
        test it before copying and pasting the code to make the second.\n\n# Do This\n\n-
        \  Look at your worksheet and choose a platform sprite to create.\n-   In
        the \"Create sprites\" area at the top of your code, create your new sprite
        with the `createSprite` block, giving it the correct position and label (name).
        ([Show me the block](#triggercallout=callout))\n-   Use the `setAnimation`
        and `velocityY` blocks to give your sprite the correct image and downward
        velocity.\n-   Test the sprite to make sure that it's moving in the correct
        way.  You might need to adjust its velocity.\n\n_Hint: The sprite will go
        off the screen and not come back.  You'll make it loop back around in the
        next level._"
      CSD U3 platform platform1_2018: "# Create a Platform Sprite\n\n<img src=\"https://images.code.org/6e5aa80eb72809d761a695fae1b42b81-image-1476210749306.gif\"
        style=\"float: right;\"> \n\nNow that you have your background and your variables,
        it's time to create your sprites.  Usually, it will be easiest to start with
        the sprites that are part of the environment, such as your platforms.  The
        sample game had two platform sprites, but you'll make just one first, then
        test it before copying and pasting the code to make the second.\n\n# Do This\n\n-
        \  Look at your worksheet and choose a platform sprite to create.\n-   In
        the \"Create sprites\" area at the top of your code, create your new sprite
        with the `createSprite` block, giving it the correct position and label (name).
        ([Show me the block](#triggercallout=callout))\n-   Use the `setAnimation`
        and `velocityY` blocks to give your sprite the correct image and downward
        velocity.\n-   Test the sprite to make sure that it's moving in the correct
        way.  You might need to adjust its velocity.\n\n_Hint: The sprite will go
        off the screen and not come back.  You'll make it loop back around in the
        next level._"
      CSD U3 platform platform1_2019: "# Create a Platform Sprite\n\n<img src=\"https://images.code.org/6e5aa80eb72809d761a695fae1b42b81-image-1476210749306.gif\"
        style=\"float: right;\"> \n\nNow that you have your background and your variables,
        it's time to create your sprites.  Usually, it will be easiest to start with
        the sprites that are part of the environment, such as your platforms.  The
        sample game had two platform sprites, but you'll make just one first, then
        test it before copying and pasting the code to make the second.\n\n# Do This\n\n-
        \  Look at your worksheet and choose a platform sprite to create.\n-   In
        the \"Create sprites\" area at the top of your code, create your new sprite
        with the `createSprite` block, giving it the correct position and label (name).
        ([Show me the block](#triggercallout=callout))\n-   Use the `setAnimation`
        and `velocityY` blocks to give your sprite the correct image and downward
        velocity.\n-   Test the sprite to make sure that it's moving in the correct
        way.  You might need to adjust its velocity.\n\n_Hint: The sprite will go
        off the screen and not come back.  You'll make it loop back around in the
        next level._"
      CSD U3 platform platform2: |-
        # Loop the Platform Sprite

        <img src="https://images.code.org/6bfe6dd078b2022315a7f54a38c90826-image-1476211068588.gif" style="float: right;">

        Right now, your platform sprite moves down, but it doesn't loop back up to the top of the screen. You can look at [Lesson 15 Level 13](/s/csd3-2017/stage/15/puzzle/13) to see an example of a sprite looping around a screen.

        # Do This

        -   Use the `function` block to create a `loopPlatforms` function at the bottom of your code.
        -   Use the `if` block inside the function to check whether the platform has gone off the bottom of screen and, if it has, move it back to the top of the screen.
        -   Call the function inside the draw loop, in the "update sprites" area.
        -   Run the code to test your sprite.

        _Hint: What will platform.y be when the sprite moves off the bottom of the screen?  What should platform.y be when you put it back at the top of the screen?_
      CSD U3 platform platform2_2018: |-
        # Loop the Platform Sprite

        <img src="https://images.code.org/6bfe6dd078b2022315a7f54a38c90826-image-1476211068588.gif" style="float: right;">

        Right now, your platform sprite moves down, but it doesn't loop back up to the top of the screen. You can look at [Lesson 15 Level 13](/s/csd3-2018/stage/15/puzzle/13) to see an example of a sprite looping around a screen.

        # Do This

        -   Use the `function` block to create a `loopPlatforms` function at the bottom of your code.
        -   Use the `if` block inside the function to check whether the platform has gone off the bottom of screen and, if it has, move it back to the top of the screen.
        -   Call the function inside the draw loop, in the "update sprites" area.
        -   Run the code to test your sprite.

        _Hint: What will platform.y be when the sprite moves off the bottom of the screen?  What should platform.y be when you put it back at the top of the screen?_
      CSD U3 platform platform2_2019: |-
        # Loop the Platform Sprite

        <img src="https://images.code.org/6bfe6dd078b2022315a7f54a38c90826-image-1476211068588.gif" style="float: right;">

        Right now, your platform sprite moves down, but it doesn't loop back up to the top of the screen. You can look at [Lesson 15 Level 13](../../15/puzzle/13) to see an example of a sprite looping around a screen.

        # Do This

        -   Use the `function` block to create a `loopPlatforms` function at the bottom of your code.
        -   Use the `if` block inside the function to check whether the platform has gone off the bottom of screen and, if it has, move it back to the top of the screen.
        -   Call the function inside the draw loop, in the "update sprites" area.
        -   Run the code to test your sprite.

        _Hint: What will platform.y be when the sprite moves off the bottom of the screen?  What should platform.y be when you put it back at the top of the screen?_
      CSD U3 platform platform3: |-
        # Make your Second Platform

        <img src="https://images.code.org/94abf92949a82f6ba18a8cfafb9231b1-image-1476211447371.gif" style="float:right;">

        Making a second platform will be easier than making the first, because you can copy and paste a lot of the code, then make a few small changes.  This is a lot easier in _text mode_, so be sure to try it out if you haven't already.

        You'll need to copy two parts of your code: the part at the beginning where you made the platform, and the part in your `loopPlatforms` function, where you looped the platform back to the top of the screen.

        # Do This

        -   Copy the code you used to create the first platform sprite (`createSprite`, `setAnimation`, and `velocityY`), and paste it directly beneath the original code.
        -   Change the names of the sprite in the new lines.  For example, if you named your original sprite "platform", you could name this one "platform2".
        -   Change the starting position of your new platform sprite.
        -   Inside your `loopPlatforms` function, copy the if statement, then paste it directly underneath the original code, inside the function.
        -   Change the sprite name in the new lines of code.
        -   Run your code to test it.

        _Challenge: You can make your platforms appear at random x positions when they loop back to the top of the screen._
      CSD U3 platform platform3_2018: |-
        # Make your Second Platform

        <img src="https://images.code.org/94abf92949a82f6ba18a8cfafb9231b1-image-1476211447371.gif" style="float:right;">

        Making a second platform will be easier than making the first, because you can copy and paste a lot of the code, then make a few small changes.  This is a lot easier in _text mode_, so be sure to try it out if you haven't already.

        You'll need to copy two parts of your code: the part at the beginning where you made the platform, and the part in your `loopPlatforms` function, where you looped the platform back to the top of the screen.

        # Do This

        -   Copy the code you used to create the first platform sprite (`createSprite`, `setAnimation`, and `velocityY`), and paste it directly beneath the original code.
        -   Change the names of the sprite in the new lines.  For example, if you named your original sprite "platform", you could name this one "platform2".
        -   Change the starting position of your new platform sprite.
        -   Inside your `loopPlatforms` function, copy the if statement, then paste it directly underneath the original code, inside the function.
        -   Change the sprite name in the new lines of code.
        -   Run your code to test it.

        _Challenge: You can make your platforms appear at random x positions when they loop back to the top of the screen._
      CSD U3 platform platform3_2019: |-
        # Make your Second Platform

        <img src="https://images.code.org/94abf92949a82f6ba18a8cfafb9231b1-image-1476211447371.gif" style="float:right;">

        Making a second platform will be easier than making the first, because you can copy and paste a lot of the code, then make a few small changes.  This is a lot easier in _text mode_, so be sure to try it out if you haven't already.

        You'll need to copy two parts of your code: the part at the beginning where you made the platform, and the part in your `loopPlatforms` function, where you looped the platform back to the top of the screen.

        # Do This

        -   Copy the code you used to create the first platform sprite (`createSprite`, `setAnimation`, and `velocityY`), and paste it directly beneath the original code.
        -   Change the names of the sprite in the new lines.  For example, if you named your original sprite "platform", you could name this one "platform2".
        -   Change the starting position of your new platform sprite.
        -   Inside your `loopPlatforms` function, copy the if statement, then paste it directly underneath the original code, inside the function.
        -   Change the sprite name in the new lines of code.
        -   Run your code to test it.

        _Challenge: You can make your platforms appear at random x positions when they loop back to the top of the screen._
      CSD U3 platform player1: |-
        # Create your Player

        <img src="https://images.code.org/8358b8d2eef2461e113e0b3093da7403-image-1476212944204.gif" style="float:right">

        Now you can create your player sprite.  Just like the item sprites, the player sprite will fall from the top of the screen.  Unlike the items, your player sprite will get faster as it falls, just like real falling objects.  This is what allows it to jump up, and fall back down.

        # Do This

        -   Use the `createSprite` block to make a player sprite with the label and starting position that you put on your worksheet.
        -   Use `setAnimation` to give it the correct image.
        -   Create a `playerFall` function that makes the sprite fall from the top of the screen.  The code inside the function should use `velocityY` in a counter pattern, just as when you made the falling rock in [Lesson 17 Level 4](/s/csd3-2017/stage/17/puzzle/4).
        -   Call the `playerFall` function inside the draw loop.
        -   Run the code to test your sprite.
      CSD U3 platform player1_2018: |-
        # Create your Player

        <img src="https://images.code.org/8358b8d2eef2461e113e0b3093da7403-image-1476212944204.gif" style="float:right">

        Now you can create your player sprite.  Just like the item sprites, the player sprite will fall from the top of the screen.  Unlike the items, your player sprite will get faster as it falls, just like real falling objects.  This is what allows it to jump up, and fall back down.

        # Do This

        -   Use the `createSprite` block to make a player sprite with the label and starting position that you put on your worksheet.
        -   Use `setAnimation` to give it the correct image.
        -   Create a `playerFall` function that makes the sprite fall from the top of the screen.  The code inside the function should use `velocityY` in a counter pattern, just as when you made the falling rock in [Lesson 17 Level 4](/s/csd3-2018/stage/17/puzzle/4).
        -   Call the `playerFall` function inside the draw loop.
        -   Run the code to test your sprite.
      CSD U3 platform player1_2019: |-
        # Create your Player

        <img src="https://images.code.org/8358b8d2eef2461e113e0b3093da7403-image-1476212944204.gif" style="float:right">

        Now you can create your player sprite.  Just like the item sprites, the player sprite will fall from the top of the screen.  Unlike the items, your player sprite will get faster as it falls, just like real falling objects.  This is what allows it to jump up, and fall back down.

        # Do This

        -   Use the `createSprite` block to make a player sprite with the label and starting position that you put on your worksheet.
        -   Use `setAnimation` to give it the correct image.
        -   Create a `playerFall` function that makes the sprite fall from the top of the screen.  The code inside the function should use `velocityY` in a counter pattern, just as when you made the falling rock in [Lesson 17 Level 4](../../17/puzzle/4).
        -   Call the `playerFall` function inside the draw loop.
        -   Run the code to test your sprite.
      CSD U3 platform player2: |-
        # User Controls

        Next, you should add user controls so that you can move your player around.  Your player needs to move to the left when the left arrow key is pressed, to the right when the right arrow key is pressed, and jump when the space bar is pressed.

        # Do This

        -   Create a new `controlPlayer` function in the "functions" area of your code.
        -   Inside the `controlPlayer` function, use the `if`, `keyDown`, and `sprite.x` blocks to make your player move to the left and right according to the arrow keys.  Look at <a href="/s/csd3-2017/stage/12/puzzle/7" target="_blank"> Lesson 12 Puzzle 7 </a> for examples.
        -   Inside the `controlPlayer` function, use the `if`, `keyDown`, and `velocityY` blocks to make your player jump when the up arrow is pressed.  Look at <a href="/s/csd3-2017/stage/15/puzzle/11" target="_blank"> Lesson 15 Puzzle 11 </a> for an example.
        -   Call the `controlPlayer` function inside the draw loop.
        -   Run the game and test your code.
      CSD U3 platform player2_2018: |-
        # User Controls

        Next, you should add user controls so that you can move your player around.  Your player needs to move to the left when the left arrow key is pressed, to the right when the right arrow key is pressed, and jump when the space bar is pressed.

        # Do This

        -   Create a new `controlPlayer` function in the "functions" area of your code.
        -   Inside the `controlPlayer` function, use the `if`, `keyDown`, and `sprite.x` blocks to make your player move to the left and right according to the arrow keys.  Look at <a href="/s/csd3-2018/stage/12/puzzle/7" target="_blank"> Lesson 12 Puzzle 7 </a> for examples.
        -   Inside the `controlPlayer` function, use the `if`, `keyDown`, and `velocityY` blocks to make your player jump when the up arrow is pressed.  Look at <a href="/s/csd3-2018/stage/15/puzzle/11" target="_blank"> Lesson 15 Puzzle 11 </a> for an example.
        -   Call the `controlPlayer` function inside the draw loop.
        -   Run the game and test your code.
      CSD U3 platform player2_2019: |-
        # Stjórntæki notanda

        Næst ættir þú að bæta við stjórntækjum fyrir notanda svo þú getir fært leikmanninn til.  Leikmaðurinn þarf að færast til vinstri þegar ýtt er á vinstri örvarlykil, til hægri þegar ýtt er á hægri örvarlykil og hoppa þegar ýtt er á bilslána.

        # Gerðu þetta

        -   Búðu til nýtt `controlPlayer` fall á "functions" svæði kóðans.
        -   Í `controlPlayer` fallinu notar þú `if`, `keyDown` og `sprite.x` kubbana til að láta örvarlyklana færa leikmanninn til vinstri og hægri.  Hér eru dæmi: <a href="../../12/puzzle/7" target="_blank"> Kennslustund 12 Þraut 7 </a>.
        -   Í `controlPlayer` fallinu notar þú `if`, `keyDown`  og `velocityY` kubbana til að láta leikmanninn hoppa þegar ýtt er á bilslána.  Hæer er dæmi: <a href="../../15/puzzle/11" target="_blank"> Kennslustund 15 Þraut 11 </a>.
        -   Kallaðu á `controlPlayer` fallið innan "draw" lykkjunnar.
        -   Keyrðu leikinn og prófaðu kóðann.
      CSD U3 platform player3: |-
        # Player Interactions

        The last part of making your game is programming the player interactions with the other sprites.  First, your player needs to land on the platforms.

        # Do This

        -   Create a `playerLands` function and add it to the "functions" area of your code.
        -   Inside the function, use the `collide` block so that your player can land on both the platforms.
        -   Call the function inside the draw loop.
        -   Run the code to test your function.
      CSD U3 platform player3_2018: |-
        # Player Interactions

        The last part of making your game is programming the player interactions with the other sprites.  First, your player needs to land on the platforms.

        # Do This

        -   Create a `playerLands` function and add it to the "functions" area of your code.
        -   Inside the function, use the `collide` block so that your player can land on both the platforms.
        -   Call the function inside the draw loop.
        -   Run the code to test your function.
      CSD U3 platform player3_2019: |-
        # Player Interactions

        The last part of making your game is programming the player interactions with the other sprites.  First, your player needs to land on the platforms.

        # Do This

        -   Create a `playerLands` function and add it to the "functions" area of your code.
        -   Inside the function, use the `collide` block so that your player can land on both the platforms.
        -   Call the function inside the draw loop.
        -   Run the code to test your function.
      CSD U3 platform player4: |-
        # Collect Items

        Last, you'll want your player to collect the items falling from the top of the screen.

        # Do This

        -   Create a `collectItems` function and add it to the "functions" area of your code.
        -   Use the `if` and `isTouching` blocks to change the x and y position of the items when the player touches them.  You can look at the `loopItem` function for clues in how to reset the item position.
        -   Inside your `if` statement, add a counter pattern that will increase the score every time the player touches an item.  Look at [Lesson 16 Puzzle 9](/s/csd3-2017/stage/16/puzzle/9) for an example.
        -   Call the function inside the draw loop, in the "update sprites" area of your code.
        -   Run the code to test your function.
      CSD U3 platform player4_2018: |-
        # Collect Items

        Last, you'll want your player to collect the items falling from the top of the screen.

        # Do This

        -   Create a `collectItems` function and add it to the "functions" area of your code.
        -   Use the `if` and `isTouching` blocks to change the x and y position of the items when the player touches them.  You can look at the `loopItem` function for clues in how to reset the item position.
        -   Inside your `if` statement, add a counter pattern that will increase the score every time the player touches an item.  Look at [Lesson 16 Puzzle 9](/s/csd3-2018/stage/16/puzzle/9) for an example.
        -   Call the function inside the draw loop, in the "update sprites" area of your code.
        -   Run the code to test your function.
      CSD U3 platform player4_2019: |-
        # Collect Items

        Last, you'll want your player to collect the items falling from the top of the screen.

        # Do This

        -   Create a `collectItems` function and add it to the "functions" area of your code.
        -   Use the `if` and `isTouching` blocks to change the x and y position of the items when the player touches them.  You can look at the `loopItem` function for clues in how to reset the item position.
        -   Inside your `if` statement, add a counter pattern that will increase the score every time the player touches an item.  Look at [Lesson 16 Puzzle 9](../../16/puzzle/9) for an example.
        -   Call the function inside the draw loop, in the "update sprites" area of your code.
        -   Run the code to test your function.
      CSD U3 platform sample1: |-
        # Platform Jumper

        The game on the left is an example of a platform jumper.  Press "Run" to play it.  You can make the alien jump with the up arrow, and move it to the left and right with the arrow keys.  You score by collecting stars, and if you score high enough, the background will change.

        You already know how to use all the blocks you need to make a game just like this one, and you'll be making your own platform jumper in this lesson.
      CSD U3 platform sample1_2018: |-
        # Platform Jumper

        The game on the left is an example of a platform jumper.  Press "Run" to play it.  You can make the alien jump with the up arrow, and move it to the left and right with the arrow keys.  You score by collecting stars, and if you score high enough, the background will change.

        You already know how to use all the blocks you need to make a game just like this one, and you'll be making your own platform jumper in this lesson.
      CSD U3 platform sample1_2019: |-
        # Platform Jumper

        The game on the left is an example of a platform jumper.  Press "Run" to play it.  You can make the alien jump with the up arrow, and move it to the left and right with the arrow keys.  You score by collecting stars, and if you score high enough, the background will change.

        You already know how to use all the blocks you need to make a game just like this one, and you'll be making your own platform jumper in this lesson.
      CSD U3 platform sample2: |-
        # Plane Jumper

        Here's another example of a platform jumper, but it has a few more features.  You can use it to get ideas to improve your own game.  For example, there is a coin sprite that gives the player an extra life.

        Choose one or more of the following changes and add them to your game.

        -   Choose new animations for your player, platform, and items.
        -   Make it impossible for your player to go off the left or right of the screen.
        -   Add a different type of item for the player to collect or avoid.
        -   Add a variable that keeps track of how many lives the player has, and end the game if the player runs out.
      CSD U3 platform sample2_2018: |-
        # Plane Jumper

        Here's another example of a platform jumper, but it has a few more features.  You can use it to get ideas to improve your own game.  For example, there is a coin sprite that gives the player an extra life.

        Choose one or more of the following changes and add them to your game.

        -   Choose new animations for your player, platform, and items.
        -   Make it impossible for your player to go off the left or right of the screen.
        -   Add a different type of item for the player to collect or avoid.
        -   Add a variable that keeps track of how many lives the player has, and end the game if the player runs out.
      CSD U3 platform sample2_2019: |-
        # Plane Jumper

        Here's another example of a platform jumper, but it has a few more features.  You can use it to get ideas to improve your own game.  For example, there is a coin sprite that gives the player an extra life.

        Choose one or more of the following changes and add them to your game.

        -   Choose new animations for your player, platform, and items.
        -   Make it impossible for your player to go off the left or right of the screen.
        -   Add a different type of item for the player to collect or avoid.
        -   Add a variable that keeps track of how many lives the player has, and end the game if the player runs out.
      CSD U3 platform sample3: |-
        # Bunny Jumper

        Here's another example of a jumper.  In this one, the items get faster when they fall, and bounce off the platforms.

        Choose one or more of the following changes and add them to your game.

        -   Make your player's animation change direction when the player changes direction.
        -   Add another background and make it appear when the score gets even higher.
        -   Make your items interact with the platforms in some way.
      CSD U3 platform sample3_2018: |-
        # Bunny Jumper

        Here's another example of a jumper.  In this one, the items get faster when they fall, and bounce off the platforms.

        Choose one or more of the following changes and add them to your game.

        -   Make your player's animation change direction when the player changes direction.
        -   Add another background and make it appear when the score gets even higher.
        -   Make your items interact with the platforms in some way.
      CSD U3 platform sample3_2019: |-
        # Bunny Jumper

        Here's another example of a jumper.  In this one, the items get faster when they fall, and bounce off the platforms.

        Choose one or more of the following changes and add them to your game.

        -   Make your player's animation change direction when the player changes direction.
        -   Add another background and make it appear when the score gets even higher.
        -   Make your items interact with the platforms in some way.
      CSD U3 platform scoreboard: |-
        # Make the Scoreboard

        <img src="https://images.code.org/ea490a1915a70676fd3a783adce93cdd-image-1476142534609.png" style="float:right;">

        You'll also need a scoreboard so the player can keep track of the score.   There's already a `showScore` function written, but it only shows the text "Score" and not the actual score. ([Show me where](#triggercallout=code_triggered))  You can see an example of a working scoreboard in [Lesson 16 Level 9](/s/csd3-2017/stage/16/puzzle/9).

        # Do This

        -   Read the code in the `showScore` function.
        -   Call the function inside the draw loop, right after you draw the backgrounds.
        -   Use the `text` block to display the score at the top of the screen.
      CSD U3 platform scoreboard_2018: |-
        # Make the Scoreboard

        <img src="https://images.code.org/ea490a1915a70676fd3a783adce93cdd-image-1476142534609.png" style="float:right;">

        You'll also need a scoreboard so the player can keep track of the score.   There's already a `showScore` function written, but it only shows the text "Score" and not the actual score. ([Show me where](#triggercallout=code_triggered))  You can see an example of a working scoreboard in [Lesson 16 Level 9](../../16/puzzle/9).

        # Do This

        -   Read the code in the `showScore` function.
        -   Call the function inside the draw loop, right after you draw the backgrounds.
        -   Use the `text` block to display the score at the top of the screen.
      CSD U3 platform scoreboard_2019: |-
        # Make the Scoreboard

        <img src="https://images.code.org/ea490a1915a70676fd3a783adce93cdd-image-1476142534609.png" style="float:right;">

        You'll also need a scoreboard so the player can keep track of the score.   There's already a `showScore` function written, but it only shows the text "Score" and not the actual score. ([Show me where](#triggercallout=code_triggered))  You can see an example of a working scoreboard in [Lesson 16 Level 9](../../16/puzzle/9).

        # Do This

        -   Read the code in the `showScore` function.
        -   Call the function inside the draw loop, right after you draw the backgrounds.
        -   Use the `text` block to display the score at the top of the screen.
      CSD U3 platform variable1: |-
        # Score Variable

        Now that you've created your backgrounds, you'll need to choose when each background is drawn.  For that, you'll need a score variable to hold information about your player's score.

        You should always give your variables a starting value at the very beginning of the program.  That way, they are available for any code that comes after.

        # Do This

        -   Create a score variable at the beginning of your game program. ( [Show me the block](#triggercallout=callout) )
        -   Set the score equal to 0.
      CSD U3 platform variable1_2018: |-
        # Score Variable

        Now that you've created your backgrounds, you'll need to choose when each background is drawn.  For that, you'll need a score variable to hold information about your player's score.

        You should always give your variables a starting value at the very beginning of the program.  That way, they are available for any code that comes after.

        # Do This

        -   Create a score variable at the beginning of your game program. ( [Show me the block](#triggercallout=callout) )
        -   Set the score equal to 0.
      CSD U3 platform variable1_2019: |-
        # Score Variable

        Now that you've created your backgrounds, you'll need to choose when each background is drawn.  For that, you'll need a score variable to hold information about your player's score.

        You should always give your variables a starting value at the very beginning of the program.  That way, they are available for any code that comes after.

        # Do This

        -   Create a score variable at the beginning of your game program. ( [Show me the block](#triggercallout=callout) )
        -   Set the score equal to 0.
      CSD U3 rect: "# Leikjasmiðjan könnuð\\\r\n\n\\\r\nVelkomin í Leikjasmiðjuna
        þar sem þú getur búið til gagnvirkar hreyfimyndir og leiki!   \\\r\n\\\r\nÞú
        ættir þegar að hafa æft að setja form inn í hnitakerfi eða grind.  Í Leikjasmiðjunni
        munt þú gera það á leiksviðinu vinstra megin.\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\n\\*\nSkoðaðu
        kóðalínuna á vinnusvæðinu fyrir neðan þessar leiðbeiningar ( [Sýndu mér hvar](#triggercallout=block_trigger)
        ) og ræddu við félaga hvar þú heldur að formið verði teiknað í hnitakerfinu.
        \n\\\r\n\n-   Smelltu á <img src=\"https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20\n
        \   PM.png\" width=100> til að keyra forritið og sjá hvað gerist. ( [Sýndu
        mér hvar](#triggercallout=run_trigger)\n    )\\\r\n-   Breyttu tölunum í kubbnum
        og prófaðu að keyra forritið aftur. \\\r\n-   Reyndu að setja rétthyrninginn
        nálægt hægra horninu niðri."
      CSD U3 rect_2018: "# Leikjasmiðjan könnuð\\\r\n\n\\\r\nVelkomin í Leikjasmiðjuna
        þar sem þú getur búið til gagnvirkar hreyfimyndir og leiki!   \\\r\n\\\r\nÞú
        ættir þegar að hafa æft að setja form inn í hnitakerfi eða grind.  Í Leikjasmiðjunni
        munt þú gera það á leiksviðinu vinstra megin.\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\n\\*\nSkoðaðu
        kóðalínuna á vinnusvæðinu fyrir neðan þessar leiðbeiningar ( [Sýndu mér hvar](#triggercallout=block_trigger)
        ) og ræddu við félaga hvar þú heldur að formið verði teiknað í hnitakerfinu.
        \n\\\r\n\n-   Smelltu á <img src=\"https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20\n
        \   PM.png\" width=100> til að keyra forritið og sjá hvað gerist. ( [Sýndu
        mér hvar](#triggercallout=run_trigger)\n    )\\\r\n-   Breyttu tölunum í kubbnum
        og prófaðu að keyra forritið aftur. \\\r\n-   Reyndu að setja rétthyrninginn
        nálægt hægra horninu niðri."
      CSD U3 rect_2019: "# Leikjasmiðjan könnuð\\\r\n\n\\\r\nVelkomin í Leikjasmiðjuna
        þar sem þú getur búið til gagnvirkar hreyfimyndir og leiki!   \\\r\n\\\r\nÞú
        ættir þegar að hafa æft að setja form inn í hnitakerfi eða grind.  Í Leikjasmiðjunni
        munt þú gera það á leiksviðinu vinstra megin.\\\r\n\\\r\n\n# Gerðu þetta\\\r\n\n\\\r\n\\*\nSkoðaðu
        kóðalínuna á vinnusvæðinu fyrir neðan þessar leiðbeiningar ( [Sýndu mér hvar](#triggercallout=block_trigger)
        ) og ræddu við félaga hvar þú heldur að formið verði teiknað í hnitakerfinu.
        \n\\\r\n\n-   Smelltu á <img src=\"https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20\n
        \   PM.png\" width=100> til að keyra forritið og sjá hvað gerist. ( [Sýndu
        mér hvar](#triggercallout=run_trigger)\n    )\\\r\n-   Breyttu tölunum í kubbnum
        og prófaðu að keyra forritið aftur. \\\r\n-   Reyndu að setja rétthyrninginn
        nálægt hægra horninu niðri."
      CSD U3 sequence: |-
        <img src="https://images.code.org/30d68fb30db5b61187f104f46292e052-image-1493060980724.08.05 PM.png" style="float:right">

        # Röðin skiptir máli

        Í Leikjasmiðjunni skiptir máli í hvaða röð kóðinn er.  Ný form eru teiknuð yfir og hylja formin sem komu áður.  Þú sérð muninn þegar þú notar fleiri en einn lit í kóðanum.

        # Gerðu þetta

        -   Skoðaðu kóðann sem teiknar rétthyrningana tvo.  Annar er teiknaður rauður en hinn blár.
        -   Breyttu lit rauða rétthyrningsins í grænan (green).
        -   Breyttu röð kubbana svo græni rétthyrningur sé framan við hinn.
      CSD U3 sequence_2018: |-
        <img src="https://images.code.org/30d68fb30db5b61187f104f46292e052-image-1493060980724.08.05 PM.png" style="float:right">

        # Röðin skiptir máli

        Í Leikjasmiðjunni skiptir máli í hvaða röð kóðinn er.  Ný form eru teiknuð yfir og hylja formin sem komu áður.  Þú sérð muninn þegar þú notar fleiri en einn lit í kóðanum.

        # Gerðu þetta

        -   Skoðaðu kóðann sem teiknar rétthyrningana tvo.  Annar er teiknaður rauður en hinn blár.
        -   Breyttu lit rauða rétthyrningsins í grænan (green).
        -   Breyttu röð kubbana svo græni rétthyrningur sé framan við hinn.
      CSD U3 sequence_2019: |-
        <img src="https://images.code.org/30d68fb30db5b61187f104f46292e052-image-1493060980724.08.05 PM.png" style="float:right">

        # Röðin skiptir máli

        Í Leikjasmiðjunni skiptir máli í hvaða röð kóðinn er.  Ný form eru teiknuð yfir og hylja formin sem komu áður.  Þú sérð muninn þegar þú notar fleiri en einn lit í kóðanum.

        # Gerðu þetta

        -   Skoðaðu kóðann sem teiknar rétthyrningana tvo.  Annar er teiknaður rauður en hinn blár.
        -   Breyttu lit rauða rétthyrningsins í grænan (green).
        -   Breyttu röð kubbana svo græni rétthyrningur sé framan við hinn.
      CSD U4 - Design Mode Input Widgets: |-
        # Innsláttareiningar

        <img src="https://images.code.org/108fcc6fc89bf88edde00353afb33d75-image-1469814642375.49.23.png" style="float: right; width: 150px"/>

        Hnappar eru gagnlegir til að stjórna appinu og textaeiningar (labels) til að gefa notandum upplýsingar. En til að taka inn upplýsingar frá notandanum þarf að hafa reiti sem hann getur skrifað í eða sem hann getur merkt við eða valið. Með inntakseiningunum **Text Input**, **Dropdown**, **Radio Button** og **Checkbox** er hægt að bjóða notandanum upp á mismunandi aðferðir við að setja upplýsingar inn í app.

        # Gerðu þetta

        Veldu að minnsta kosti tvær af inntakseiningunum og gerðu þetta við hverja þeirra:

        -   Dragðu hana á skjáinn og veldu henni stað
        -   Breyttu heitinu (id) í eitthvað lýsandi
        -   Skoðaðu eiginleika einingarinnar og gerðu tilraunir með þær
        -   Settu textaeiningu (label) við hlið hverrar inntakseiningar sem útskýrir hvað hún gerir (ekki gleyma að gefa textaeiningunum eigin heiti!)
      CSD U4 - Design Mode Project: |-
        # Mocking Up Your App

        Using your paper prototype, create a digital version of your screen using the Design Mode elements you've learned about.

        # Do This

        -   Rename the screen to match your _namespace_.
        -   Use the built-in elements to lay out your app screen, giving each a proper ID
            -   For example, if your namespace is "home\_" you might create IDs like:
                -   `home_title`
                -   `home_login_button`
                -   `home_logo`
        -   For any components of your app that can't be recreated with the built in elements you can either:
            -   Redesign to utilize built in elements
            -   Find an image to use in place of your element
            -   Draw the element using your preferred image editor
        -   Share your design regularly with your teammates to ensure consistent style
      CSD U4 - Design Mode Project_2018: |-
        # Mocking Up Your App

        Using your paper prototype, create a digital version of your screen using the Design Mode elements you've learned about.

        # Do This

        -   Rename the screen to match your _namespace_.
        -   Use the built-in elements to lay out your app screen, giving each a proper ID
            -   For example, if your namespace is `home_` you might create IDs like:
                -   `home_title`
                -   `home_login_button`
                -   `home_logo`
        -   For any components of your app that can't be recreated with the built in elements you can either:
            -   Redesign to utilize built in elements
            -   Find an image to use in place of your element
            -   Draw the element using your preferred image editor
        -   Make sure that you and your teammates are regularly looking at each other's designs to ensure consistent style
      CSD U4 - Design Mode Project_2019: |-
        # Mocking Up Your App

        Using your paper prototype, create a digital version of your screen using the Design Mode elements you've learned about.

        # Do This

        -   Rename the screen to match your _namespace_.
        -   Use the built-in elements to lay out your app screen, giving each a proper ID
            -   For example, if your namespace is `home_` you might create IDs like:
                -   `home_title`
                -   `home_login_button`
                -   `home_logo`
        -   For any components of your app that can't be recreated with the built in elements you can either:
            -   Redesign to utilize built in elements
            -   Find an image to use in place of your element
            -   Draw the element using your preferred image editor
        -   Make sure that you and your teammates are regularly looking at each other's designs to ensure consistent style
      CSD U4 - Design Mode Text: "# Texta bætt við\n\n<img src=\"https://images.code.org/86ba633e04f90f3ca47dff3dcd064847-image-1469812708683.15.36.png\"
        style=\"float: right; width: 75px\"/>\nMeð einingunni \"label\" getur þú sett
        texta í appið. Dragðu bara fram \"label\" kubb og skrifaðu það sem á að sjást
        í \"text\" eiginleika hans. \n\n# Gerðu þetta\n\nNotaðu \"label\" einingu
        til að setja titil á appið.\n\n-   Dragðu fram textaeiningu (label) og settu
        hana efst á skjáinn\n-   Breyttu heiti hennar (id) í \"titleLabel\"\n-   Breyttu
        textanum í \"Appið mitt\"\n-   Hafðu letrið stærra (font size)\n-   Veldu
        textalit (text color) á titilinn"
      CSD U5 Amazon Data Video: Watch this video to learn how this problem is solved
        by Amazon. As you watch think about what data is being collected and where
        it's coming from.
      CSD U5 Amazon Data Video_2018: Watch this video to learn how this problem is
        solved by Amazon. As you watch think about what data is being collected and
        where it's coming from.
      CSD U5 Amazon Data Video_2019: Watch this video to learn how this problem is
        solved by Amazon. As you watch think about what data is being collected and
        where it's coming from.
      CSD U5 Netflix Data Video: Watch this video to learn how this problem is solved
        by Netflix. As you watch think about what data is being collected and where
        it's coming from.
      CSD U5 Netflix Data Video_2018: Watch this video to learn how this problem is
        solved by Netflix. As you watch think about what data is being collected and
        where it's coming from.
      CSD U5 Netflix Data Video_2019: Watch this video to learn how this problem is
        solved by Netflix. As you watch think about what data is being collected and
        where it's coming from.
      CSD U5 Pizza: |-
        # Pizza Party

        The pizza party data has been put into an app for you, and the answers from another class have been added.  Because this is an app, we can automate the creation of the bar chart from the given data.

        # Do This

        -   Click "Run" to see the list of answers that the classes have given.
        -   Discuss with a partner what you think the chart of this data will look like.
        -   Click "Show Chart" to see for yourself.

        # Spreadsheet Version

        The pizza party data has also been put into a spreadsheet for you, if you would like to use it instead.  To use the spreadsheet, you'll need to make your own copy of it.

        -   This link will make you your own copy of the "Pizza Topping Choices" data: [Pizza Topping Choices](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/copy)
        -   You can also download a CSV version of the file [here](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/export?format=csv).
      CSD U5 Pizza 2: |-
        # Pizza Party

        When people work with data, they know to leave off answers that don't make sense, and that some answers, such as "peppers", "pepppers" and "green peppers", actually meant the same thing. Computers don't know how to do this, so we have to clean the data before the computer is able to use it.

        This version of the app has a second column for data to be cleaned.

        ## Do this

        -   Click "Run" to see the new list of answers to be cleaned.
        -   Click on each answer that needs to be cleaned and correct it so that the computer will chart it properly. (You may want to delete some answers entirely.)
        -   When you are finished, click "Show Chart" to see the new chart of cleaned answers.
      CSD U5 Pizza 2_2018: |-
        # Pizza Party

        When people work with data, they know to leave off answers that don't make sense, and that some answers, such as "peppers", "pepppers" and "green peppers", actually meant the same thing. Computers don't know how to do this, so we have to clean the data before the computer is able to use it.

        This version of the app has a second column for data to be cleaned.

        ## Do this

        -   Click "Run" to see the new list of answers to be cleaned.
        -   Click on each answer that needs to be cleaned and correct it so that the computer will chart it properly. (You may want to delete some answers entirely.)
        -   When you are finished, click "Show Chart" to see the new chart of cleaned answers.
      CSD U5 Pizza 2_2019: |-
        # Pizza Party

        When people work with data, they know to leave off answers that don't make sense, and that some answers, such as "peppers", "pepppers" and "green peppers", actually meant the same thing. Computers don't know how to do this, so we have to clean the data before the computer is able to use it.

        This version of the app has a second column for data to be cleaned.

        ## Do this

        -   Click "Run" to see the new list of answers to be cleaned.
        -   Click on each answer that needs to be cleaned and correct it so that the computer will chart it properly. (You may want to delete some answers entirely.)
        -   When you are finished, click "Show Chart" to see the new chart of cleaned answers.
      CSD U5 Pizza_2018: |-
        # Pizza Party

        The pizza party data has been put into an app for you, and the answers from another class have been added.  Because this is an app, we can automate the creation of the bar chart from the given data.

        # Do This

        -   Click "Run" to see the list of answers that the classes have given.
        -   Discuss with a partner what you think the chart of this data will look like.
        -   Click "Show Chart" to see for yourself.

        # Spreadsheet Version

        The pizza party data has also been put into a spreadsheet for you, if you would like to use it instead.  To use the spreadsheet, you'll need to make your own copy of it.

        -   This link will make you your own copy of the "Pizza Topping Choices" data: [Pizza Topping Choices](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/copy)
        -   You can also download a CSV version of the file [here](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/export?format=csv).
      CSD U5 Pizza_2019: |-
        # Pizza Party

        The pizza party data has been put into an app for you, and the answers from another class have been added.  Because this is an app, we can automate the creation of the bar chart from the given data.

        # Do This

        -   Click "Run" to see the list of answers that the classes have given.
        -   Discuss with a partner what you think the chart of this data will look like.
        -   Click "Show Chart" to see for yourself.

        # Spreadsheet Version

        The pizza party data has also been put into a spreadsheet for you, if you would like to use it instead.  To use the spreadsheet, you'll need to make your own copy of it.

        -   This link will make you your own copy of the "Pizza Topping Choices" data: [Pizza Topping Choices](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/copy)
        -   You can also download a CSV version of the file [here](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/export?format=csv).
      CSD U5 Waze Data Video: Watch this video to learn how this problem is solved
        by Waze. As you watch think about what data is being collected and where it's
        coming from.
      CSD U5 Waze Data Video_2018: Watch this video to learn how this problem is solved
        by Waze. As you watch think about what data is being collected and where it's
        coming from.
      CSD U5 Waze Data Video_2019: Watch this video to learn how this problem is solved
        by Waze. As you watch think about what data is being collected and where it's
        coming from.
      CSD U5 binary 1: |-
        # 5-Bit Number

        When you only had four bits, the highest number that you could make was fifteen.  Now you'll have a chance to work with more bits to make higher numbers.

        In this activity, the dots are replaced with numbers, but you still add up everything that's showing to see what number the binary code stands for.  The left-most bit doesn't have a number yet, so you'll have to give it one.

        # Do This

        -   Click on the bits to turn them on and off, and see the different numbers you can make.
        -   With your partner, discuss the pattern in the numbers.  Decide what number you think should go in the left most box.
        -   Click "Edit" to change the value of the left most bit.
        -   Once you've decided on the value, try to make the following numbers: 16, 27, 31
      CSD U5 binary 1_2018: |-
        # 5-Bit Number

        When you only had four bits, the highest number that you could make was fifteen.  Now you'll have a chance to work with more bits to make higher numbers.

        In this activity, the dots are replaced with numbers, but you still add up everything that's showing to see what number the binary code stands for.  The left-most bit doesn't have a number yet, so you'll have to give it one.

        # Do This

        -   Click on the bits to turn them on and off, and see the different numbers you can make.
        -   With your partner, discuss the pattern in the numbers.  Decide what number you think should go in the left most box.
        -   Click "Edit" to change the value of the left most bit.
        -   Once you've decided on the value, try to make the following numbers: 16, 27, 31
      CSD U5 binary 1_2019: |-
        # 5-Bit Number

        When you only had four bits, the highest number that you could make was fifteen.  Now you'll have a chance to work with more bits to make higher numbers.

        In this activity, the dots are replaced with numbers, but you still add up everything that's showing to see what number the binary code stands for.  The left-most bit doesn't have a number yet, so you'll have to give it one.

        # Do This

        -   Click on the bits to turn them on and off, and see the different numbers you can make.
        -   With your partner, discuss the pattern in the numbers.  Decide what number you think should go in the left most box.
        -   Click "Edit" to change the value of the left most bit.
        -   Once you've decided on the value, try to make the following numbers: 16, 27, 31
      CSD U5 binary 2: |-
        # 6-Bit Number

        This widget helps you to calculate 6-bit binary numbers.

        # Do This

        -   With your partner, answer the following questions:
            1.  What's the biggest number you can make with this widget?
            2.  The record for most skips by a dog and person in one minute is 59.  How would you encode 59 in binary?
      CSD U5 binary 2_2018: |-
        # 6-Bit Number

        This widget helps you to calculate 6-bit binary numbers.

        # Do This

        -   With your partner, answer the following questions:
            1.  What's the biggest number you can make with this widget?
            2.  The record for most skips by a dog and person in one minute is 59.  How would you encode 59 in binary?
      CSD U5 binary 2_2019: |-
        # 6-Bit Number

        This widget helps you to calculate 6-bit binary numbers.

        # Do This

        -   With your partner, answer the following questions:
            1.  What's the biggest number you can make with this widget?
            2.  The record for most skips by a dog and person in one minute is 59.  How would you encode 59 in binary?
      CSD U5 binary 4-new: |-
        # Decoding multiple numbers

        Here's a widget that can calculate numbers of 4, 5, or 6 bits.  You can use it to find the two world records encoded in the binary string below.

        ![](<https://images.code.org/13b0d3307e688575b53e3e6bc86fb739-image-1505426509385.01.06 PM.png>)

        1.  Most number of people lifted and thrown in two minutes. (4 bits)
        2.  Most canned drinks opened by a parrot in one minute. (6 bits)

        # Do This

        -   Decode the two numbers from the binary string.
      CSD U5 binary 4-new_2018: |-
        # Decoding multiple numbers

        Here's a widget that can calculate numbers of 4, 5, or 6 bits.  You can use it to find the two world records encoded in the binary string below.

        ![](<https://images.code.org/13b0d3307e688575b53e3e6bc86fb739-image-1505426509385.01.06 PM.png>)

        1.  Most number of people lifted and thrown in two minutes. (4 bits)
        2.  Most canned drinks opened by a parrot in one minute. (6 bits)

        # Do This

        -   Decode the two numbers from the binary string.
      CSD U5 binary 4-new_2019: |-
        # Decoding multiple numbers

        Here's a widget that can calculate numbers of 4, 5, or 6 bits.  You can use it to find the two world records encoded in the binary string below.

        ![](<https://images.code.org/13b0d3307e688575b53e3e6bc86fb739-image-1505426509385.01.06 PM.png>)

        1.  Most number of people lifted and thrown in two minutes. (4 bits)
        2.  Most canned drinks opened by a parrot in one minute. (6 bits)

        # Do This

        -   Decode the two numbers from the binary string.
      CSD U5 binary 5-new: |-
        # Decoding multiple numbers

        Here's a widget that can calculate numbers up to to eight bits. You can use it to find the values of the two world records below.

        Don't forget to make sure that the "1" bit is always the right most bit.  If you have extra bits on the left side of the widget, just keep them turned off.

        ![](<https://images.code.org/e86788ff9b92a2b01b99749fa1aba8e8-image-1505426626592.01.14 PM.png>)

        1.  Longest tail on a dog (in inches) (5 bits)
        2.  Most spoons balanced on someone's face (5 bits)

        # Do This

        -   Decode the two numbers from a the binary string.
      CSD U5 binary 5-new_2018: |-
        # Decoding multiple numbers

        Here's a widget that can calculate numbers up to to eight bits. You can use it to find the values of the two world records below.

        Don't forget to make sure that the "1" bit is always the right most bit.  If you have extra bits on the left side of the widget, just keep them turned off.

        ![](<https://images.code.org/e86788ff9b92a2b01b99749fa1aba8e8-image-1505426626592.01.14 PM.png>)

        1.  Longest tail on a dog (in inches) (5 bits)
        2.  Most spoons balanced on someone's face (5 bits)

        # Do This

        -   Decode the two numbers from a the binary string.
            -   _Hint: You'll need to read the numbers in order, with the first answer using the first five bits, and the second answer using the five bits after that._
      CSD U5 binary 5-new_2019: |-
        # Decoding multiple numbers

        Here's a widget that can calculate numbers up to to eight bits. You can use it to find the values of the two world records below.

        Don't forget to make sure that the "1" bit is always the right most bit.  If you have extra bits on the left side of the widget, just keep them turned off.

        ![](<https://images.code.org/e86788ff9b92a2b01b99749fa1aba8e8-image-1505426626592.01.14 PM.png>)

        1.  Longest tail on a dog (in inches) (5 bits)
        2.  Most spoons balanced on someone's face (5 bits)

        # Do This

        -   Decode the two numbers from a the binary string.
            -   _Hint: You'll need to read the numbers in order, with the first answer using the first five bits, and the second answer using the five bits after that._
      CSD U5 binary 6-new: |-
        # Decoding multiple numbers

        Here's a new bit string.  This time, you don't know the bit length of the two numbers.  Try to decode the numbers without knowing the bit length.

        ![](<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46 PM.png>)

        1.  Largest wind chime, in feet (? bits)
        2.  Furthest arrow shot with someone's feet (in feet) (? bits)

        # Do This

        -   Try to decode the two numbers from the binary string.
        -   Discuss with your partner why you cannot know for sure whether your answer is correct.
      CSD U5 binary 6-new_2018: |-
        # Decoding multiple numbers

        Here's a new bit string.  This time, you don't know the bit length of the two numbers.  Try to decode the numbers without knowing the bit length.

        ![](<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46 PM.png>)

        1.  Largest wind chime, in feet (? bits)
        2.  Furthest arrow shot with someone's feet (in feet) (? bits)

        # Do This

        -   Try to decode the two numbers from the binary string.
        -   Discuss with your partner why you cannot know for sure whether your answer is correct.
      CSD U5 binary 6-new_2019: |-
        # Decoding multiple numbers

        Here's a new bit string.  This time, you don't know the bit length of the two numbers.  Try to decode the numbers without knowing the bit length.

        ![](<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46 PM.png>)

        1.  Largest wind chime, in feet (? bits)
        2.  Furthest arrow shot with someone's feet (in feet) (? bits)

        # Do This

        -   Try to decode the two numbers from the binary string.
        -   Discuss with your partner why you cannot know for sure whether your answer is correct.
      CSD U5 binary 7-new: |-
        # Bit Length

        If you don't know how many bits long each number is, you won't be able to decode a string of numbers.

        For example, the following binary string could be decoded many different ways.

        ![](<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46 PM.png>)

        If you split the string like this, the string reads 10, 84.

        ![](<https://images.code.org/c8586b93427166ae6ecfdb8b1ff66bdd-image-1505427228630.13.01 PM.png>) ![](<https://images.code.org/7d9814dc4bae8512dfaebbe459c29c9b-image-1505427230882.13.08 PM.png>)

        If you split it like this, the string reads 42, 20.

        ![](<https://images.code.org/2e62b4a71b98b68bdf04713c508e4cb2-image-1505427233001.13.13 PM.png>) ![](<https://images.code.org/10a316c870b575db4b30a687815bf481-image-1505427235482.13.19 PM.png>)

        To solve this problem, people agree on a fixed length for every number.  The following string uses the same two numbers, but each number takes up exactly eight bits, no matter how many bits it actually needs.

        ![](<https://images.code.org/257cb728fde57421e58ef31164be5a51-image-1505427467235.13.26 PM.png>)

        # Do This

        -   Use the binary widget to decode the string that uses eight bit numbers.
        -   Check you answer with a partner to see whether you got the same answer.
      CSD U5 binary 7-new_2018: |-
        # Bit Length

        If you don't know how many bits long each number is, you won't be able to decode a string of numbers.

        For example, the following binary string could be decoded many different ways.

        ![](<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46 PM.png>)

        If you split the string like this, the string reads 10, 84.

        ![](<https://images.code.org/c8586b93427166ae6ecfdb8b1ff66bdd-image-1505427228630.13.01 PM.png>) ![](<https://images.code.org/7d9814dc4bae8512dfaebbe459c29c9b-image-1505427230882.13.08 PM.png>)

        If you split it like this, the string reads 42, 20.

        ![](<https://images.code.org/2e62b4a71b98b68bdf04713c508e4cb2-image-1505427233001.13.13 PM.png>) ![](<https://images.code.org/10a316c870b575db4b30a687815bf481-image-1505427235482.13.19 PM.png>)

        To solve this problem, people agree on a fixed length for every number.  The following string uses the same two numbers, but each number takes up exactly eight bits, no matter how many bits it actually needs.

        ![](<https://images.code.org/257cb728fde57421e58ef31164be5a51-image-1505427467235.13.26 PM.png>)

        # Do This

        -   Use the binary widget to decode the string that uses eight bit numbers.
        -   Check you answer with a partner to see whether you got the same answer.
      CSD U5 binary 7-new_2019: |-
        # Bit Length

        If you don't know how many bits long each number is, you won't be able to decode a string of numbers.

        For example, the following binary string could be decoded many different ways.

        ![](<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46 PM.png>)

        If you split the string like this, the string reads 10, 84.

        ![](<https://images.code.org/c8586b93427166ae6ecfdb8b1ff66bdd-image-1505427228630.13.01 PM.png>) ![](<https://images.code.org/7d9814dc4bae8512dfaebbe459c29c9b-image-1505427230882.13.08 PM.png>)

        If you split it like this, the string reads 42, 20.

        ![](<https://images.code.org/2e62b4a71b98b68bdf04713c508e4cb2-image-1505427233001.13.13 PM.png>) ![](<https://images.code.org/10a316c870b575db4b30a687815bf481-image-1505427235482.13.19 PM.png>)

        To solve this problem, people agree on a fixed length for every number.  The following string uses the same two numbers, but each number takes up exactly eight bits, no matter how many bits it actually needs.

        ![](<https://images.code.org/257cb728fde57421e58ef31164be5a51-image-1505427467235.13.26 PM.png>)

        # Do This

        -   Use the binary widget to decode the string that uses eight bit numbers.
        -   Check you answer with a partner to see whether you got the same answer.
      CSD U5 binary video_2019: |-
        ## Spurningar til að hugleiða

        -   Hvers vegna eru allar tegundir upplýsinga í tölvunni vistaðar sem tölur?
        -   Ef allt er vistað sem tölur, hvernig heldur þú þá að tölvan geti þekkt í sundur talnagögn, bókstafi, myndir og hljóð?
      CSD U5 black white images pixelation: "# Gerðu þetta\\\r\n\n\\\r\nLjúktu við
        \"X\" formið með því að skrifa stafina 0 og 1. Þú getur alltaf smellt á \"Læsilegt
        snið\" ef þú vilt hreinsa til."
      CSD U5 black white images pixelation 2: "# Gerðu þetta\\\r\n\n\\\r\nNotaðu græjuna
        fyrir dílamynstur til að teikna broskall\\\r\n\\\r\n![](<https://images.code.org/3e81e7e5c95a63173242552de2e9c094-image-1491425592286.52.47\nPM.png>)"
      CSD U5 black white images pixelation 2_2018: "# Gerðu þetta\\\r\n\n\\\r\nNotaðu
        græjuna fyrir dílamynstur til að teikna broskall\\\r\n\\\r\n![](<https://images.code.org/3e81e7e5c95a63173242552de2e9c094-image-1491425592286.52.47\nPM.png>)"
      CSD U5 black white images pixelation 2_2019: "# Gerðu þetta\\\r\n\n\\\r\nNotaðu
        græjuna fyrir dílamynstur til að teikna broskall\\\r\n\\\r\n![](<https://images.code.org/3e81e7e5c95a63173242552de2e9c094-image-1491425592286.52.47\nPM.png>)"
      CSD U5 black white images pixelation 3: "# Gerðu þetta\\\r\n\n\\\r\nSleðarnir
        fyrir breidd og hæð eru ranglega stilltir fyrir þessa mynd svo að hún er hvorki
        fugl né fiskur. Breyttu þeim þangað til þú finnur myndina.\\\r\n\\\r\n![](<https://images.code.org/c2abe82051e700f22ce613e407e71536-image-1491426050751.00.17\nPM.png>)"
      CSD U5 black white images pixelation 3_2018: "# Gerðu þetta\\\r\n\n\\\r\nSleðarnir
        fyrir breidd og hæð eru ranglega stilltir fyrir þessa mynd svo að hún er hvorki
        fugl né fiskur. Breyttu þeim þangað til þú finnur myndina.\\\r\n\\\r\n![](<https://images.code.org/c2abe82051e700f22ce613e407e71536-image-1491426050751.00.17\nPM.png>)"
      CSD U5 black white images pixelation 3_2019: "# Gerðu þetta\\\r\n\n\\\r\nSleðarnir
        fyrir breidd og hæð eru ranglega stilltir fyrir þessa mynd svo að hún er hvorki
        fugl né fiskur. Breyttu þeim þangað til þú finnur myndina.\\\r\n\\\r\n![](<https://images.code.org/c2abe82051e700f22ce613e407e71536-image-1491426050751.00.17\nPM.png>)"
      CSD U5 black white images pixelation 4: "# Gerðu þetta\\\r\n\n\\\r\nBættu augabrúnum
        á þennan broskall. Mundu að nota \"Readable Format\" ef þú kemst ekki áleiðis.\\\r\n\\\r\n![](<https://images.code.org/269725fa3d9d6857912fe4a20464a830-image-1491427249017.18.37\nPM.png>)"
      CSD U5 black white images pixelation 4_2018: "# Gerðu þetta\\\r\n\n\\\r\nBættu
        augabrúnum á þennan broskall. Mundu að nota \"Readable Format\" ef þú kemst
        ekki áleiðis.\\\r\n\\\r\n![](<https://images.code.org/269725fa3d9d6857912fe4a20464a830-image-1491427249017.18.37\nPM.png>)"
      CSD U5 black white images pixelation 4_2019: "# Gerðu þetta\\\r\n\n\\\r\nBættu
        augabrúnum á þennan broskall. Mundu að nota \"Readable Format\" ef þú kemst
        ekki áleiðis.\\\r\n\\\r\n![](<https://images.code.org/269725fa3d9d6857912fe4a20464a830-image-1491427249017.18.37\nPM.png>)"
      CSD U5 black white images pixelation 5: "# Gerðu þetta\\\r\n\n\\\r\nNú er komið
        að þér. Teiknaðu hvað sem þú vilt í dílamynstursgræjunni. Breyttu hæð og breidd
        myndarinnar eins og þér sýnist."
      CSD U5 black white images pixelation 5_2018: "# Gerðu þetta\\\r\n\n\\\r\nNú
        er komið að þér. Teiknaðu hvað sem þú vilt í dílamynstursgræjunni. Breyttu
        hæð og breidd myndarinnar eins og þér sýnist."
      CSD U5 black white images pixelation 5_2019: "# Gerðu þetta\\\r\n\n\\\r\nNú
        er komið að þér. Teiknaðu hvað sem þú vilt í dílamynstursgræjunni. Breyttu
        hæð og breidd myndarinnar eins og þér sýnist."
      CSD U5 black white images pixelation_2018: "# Gerðu þetta\\\r\n\n\\\r\nLjúktu
        við \"X\" formið með því að skrifa stafina 0 og 1. Þú getur alltaf smellt
        á \"Læsilegt snið\" ef þú vilt hreinsa til."
      CSD U5 black white images pixelation_2019: "# Gerðu þetta\\\r\n\n\\\r\nLjúktu
        við \"X\" formið með því að skrifa stafina 0 og 1. Þú getur alltaf smellt
        á \"Læsilegt snið\" ef þú vilt hreinsa til."
      CSD U6 Catch the Mouse: Embedded Prediction
      CSD U6 Catch the Mouse prediction: |-
        # Catch the Mouse

        This is a clicker game, similar to the one that you built in the last lesson.

        Look at the code with your partner and answer the following question:

        -   How many times do you need to click the mouse before the LED starts to blink?

        Write your answer in the box below, then run the code and see what happens.
      CSD U6 Catch the Mouse prediction_2018: |-
        # Catch the Mouse

        This is a clicker game, similar to the one that you built in the last lesson.

        Look at the code with your partner and answer the following question:

        -   How many times do you need to click the mouse before the LED starts to blink?

        Write your answer in the box below, then run the code and see what happens.
      CSD U6 Catch the Mouse prediction_2019: |-
        # Catch the Mouse

        This is a clicker game, similar to the one that you built in the last lesson.

        Look at the code with your partner and answer the following question:

        -   How many times do you need to click the mouse before the LED starts to blink?

        Write your answer in the box below, then run the code and see what happens.
      CSD U6 Catch the Mouse_2018: Embedded Prediction
      CSD U6 Catch the Mouse_2019: Embedded Prediction
      CSD U6 Driver pt 2: |-
        # Limiting Turn

        You might have noticed that it was really hard to steer the car unless your hands were moving slowly and carefully. This is because the number that `roll` returns can be a really big number depending on how much the accelerometer is being turned. Remember, `roll` has a range from -90 to 90.

        # Do This

        Find a way to make `roll` a smaller number while still using it to steer the car. You have all of the math operators available to you for this.

        _Challenge_: Can you keep the car from going off the side of the screen?
      CSD U6 Driver pt 2_2018: |-
        # Limiting Turn

        You might have noticed that it was really hard to steer the car unless your hands were moving slowly and carefully. This is because the number that `roll` returns can be a really big number depending on how much the accelerometer is being turned. Remember, `roll` has a range from -90 to 90.

        # Do This

        Find a way to make `roll` a smaller number while still using it to steer the car. You have all of the math operators available to you for this.

        _Challenge_: Can you keep the car from going off the side of the screen?
      CSD U6 Driver pt 2_2019: |-
        # Limiting Turn

        You might have noticed that it was really hard to steer the car unless your hands were moving slowly and carefully. This is because the number that `roll` returns can be a really big number depending on how much the accelerometer is being turned. Remember, `roll` has a range from -90 to 90.

        # Do This

        Find a way to make `roll` a smaller number while still using it to steer the car. You have all of the math operators available to you for this.

        _Challenge_: Can you keep the car from going off the side of the screen?
      CSD U6 Driver pt1: |-
        # Steering Wheel

        This game is similar to the goalie game that you just played, except a little different. Use your board as a steering wheel for the car (moving side to side). You have to get to the checkered flag at while avoiding the red flags along the way!

        # Do This

        -   Make the car move down the screen while the program runs.
        -   Give the car the ability to steer side to side.

        Think back to the programs you've made up until this point, how can you update these values?
      CSD U6 Driver pt1_2018: |-
        # Steering Wheel

        This game is similar to the goalie game that you just played, except a little different. Use your board as a steering wheel for the car (moving side to side). You have to get to the checkered flag at while avoiding the red flags along the way!

        # Do This

        -   Make the car move down the screen while the program runs.
        -   Give the car the ability to steer side to side.

        Think back to the programs you've made up until this point, how can you update these values?
      CSD U6 Driver pt1_2019: |-
        # Steering Wheel

        This game is similar to the goalie game that you just played, except a little different. Use your board as a steering wheel for the car (moving side to side). You have to get to the checkered flag at while avoiding the red flags along the way!

        # Do This

        -   Make the car move down the screen while the program runs.
        -   Give the car the ability to steer side to side.

        Think back to the programs you've made up until this point, how can you update these values?
      CSD U6 LED all: |-
        # Multi-function Light

        This app should let you choose between three types of lights: on, blink, and pulse.  It should also have a button that turns the light completely off.  Right now only the "on" button works, and the "off" button is completely missing.

        # Do This

        -   Add code to make the "blink" and "pulse" buttons work.
        -   In design mode, add a new "off" button.
        -   Add code to make the "off" button work.
      CSD U6 LED all_2018: |-
        # Multi-function Light

        This app should let you choose between three types of lights: on, blink, and pulse.  It should also have a button that turns the light completely off.  Right now only the "on" button works, and the "off" button is completely missing.

        # Do This

        -   Add code to make the "blink" and "pulse" buttons work.
        -   In design mode, add a new "off" button.
        -   Add code to make the "off" button work.
      CSD U6 LED all_2019: |-
        # Multi-function Light

        This app should let you choose between three types of lights: on, blink, and pulse.  It should also have a button that turns the light completely off.  Right now only the "on" button works, and the "off" button is completely missing.

        # Do This

        -   Add code to make the "blink" and "pulse" buttons work.
        -   In design mode, add a new "off" button.
        -   Add code to make the "off" button work.
      CSD U6 LED toggle: |-
        # Light Switch

        There are three more LED blocks that you haven't used yet. One of them can make the button work like a light switch, turning the LED on when it's off, but off when it's on.

        # Do This

        -   Try the `blink`, `toggle` and `pulse` blocks to see what they do.
        -   Use one of the blocks to make the button work like a light switch.
            -   If the LED is off, the button should turn it on.
            -   If the LED is on, the button should turn it off.
      CSD U6 LED toggle_2018: |-
        # Light Switch

        There are three more LED blocks that you haven't used yet. One of them can make the button work like a light switch, turning the LED on when it's off, but off when it's on.

        # Do This

        -   Try the `blink`, `toggle` and `pulse` blocks to see what they do.
        -   Use one of the blocks to make the button work like a light switch.
            -   If the LED is off, the button should turn it on.
            -   If the LED is on, the button should turn it off.
      CSD U6 LED toggle_2019: |-
        # Light Switch

        There are three more LED blocks that you haven't used yet. One of them can make the button work like a light switch, turning the LED on when it's off, but off when it's on.

        # Do This

        -   Try the `blink`, `toggle` and `pulse` blocks to see what they do.
        -   Use one of the blocks to make the button work like a light switch.
            -   If the LED is off, the button should turn it on.
            -   If the LED is on, the button should turn it off.
      CSD U6 LEDbutton predict embed: |-
        # Using Events

        This program uses events.  Look at the code with a partner and discuss what you think it will do.  Once you have answered the questions click "Run" to check your answer.

        -   Will the light turn on when the program is "Run"?  Why or why not?
      CSD U6 LEDbutton predict embed_2018: |-
        # Using Events

        This program uses events.  Look at the code with a partner and discuss what you think it will do.  Once you have answered the questions click "Run" to check your answer.

        -   Will the light turn on when the program is "Run"?  Why or why not?
      CSD U6 LEDbutton predict embed_2019: |-
        # Using Events

        This program uses events.  Look at the code with a partner and discuss what you think it will do.  Once you have answered the questions click "Run" to check your answer.

        -   Will the light turn on when the program is "Run"?  Why or why not?
      CSD U6 LEDs color: |-
        # Adding Some Color

        You probably noticed when you used `colorLeds[0].on()` in the last level, the LEDs turned on as white. If you don't specify a color, `on()` will turn on all three parts of the LED (red, green, and blue) to produce white. You'll see a new command in the toolbox called `colorLeds[0].color()` which lets you specify a color, either as a string like "blue" or an RGB value using color `color()` command.

        # Do This

        Use the `.color()` command to set each of the color LEDs to a different color.
      CSD U6 LEDs color_2018: |-
        # Adding Some Color

        You probably noticed when you used `colorLeds[0].on()` in the last level, the LEDs turned on as white. If you don't specify a color, `on()` will turn on all three parts of the LED (red, green, and blue) to produce white. You'll see a new command in the toolbox called `colorLeds[0].color()` which lets you specify a color, either as a string like "blue" or an RGB value using color `color()` command.

        # Do This

        Use the `.color()` command to set each of the color LEDs to a different color.
      CSD U6 LEDs color_2019: |-
        # Adding Some Color

        You probably noticed when you used `colorLeds[0].on()` in the last level, the LEDs turned on as white. If you don't specify a color, `on()` will turn on all three parts of the LED (red, green, and blue) to produce white. You'll see a new command in the toolbox called `colorLeds[0].color()` which lets you specify a color, either as a string like "blue" or an RGB value using color `color()` command.

        # Do This

        Use the `.color()` command to set each of the color LEDs to a different color.
      CSD U6 Pedometer: |-
        # Jogger

        This program should use the `shake` event, which is triggered when the board is shaken.  It should add a step to the jogger's total every time the user shakes the board.

        # Do This

        -   Change the event so it triggers every time the board is shaken.
        -   Add code inside the event so that `steps` increases every time the board is shaken.
      CSD U6 Pedometer_2018: |-
        # Jogger

        This program should use the `shake` event, which is triggered when the board is shaken.  It should add a step to the jogger's total every time the user shakes the board.

        # Do This

        -   Change the event so it triggers every time the board is shaken.
        -   Add code inside the event so that `steps` increases every time the board is shaken.
      CSD U6 Pedometer_2019: |-
        # Jogger

        This program should use the `shake` event, which is triggered when the board is shaken.  It should add a step to the jogger's total every time the user shakes the board.

        # Do This

        -   Change the event so it triggers every time the board is shaken.
        -   Add code inside the event so that `steps` increases every time the board is shaken.
      CSD U6 add LED button: |-
        # Using Events

        This program has two buttons.  The "on" button works, but the "off" button still needs to be programmed.

        # Do This

        -   Add code so that the second button turns the LED off.
      CSD U6 add LED button_2018: |-
        # Using Events

        This program has two buttons.  The "on" button works, but the "off" button still needs to be programmed.

        # Do This

        -   Add code so that the second button turns the LED off.
      CSD U6 add LED button_2019: |-
        # Using Events

        This program has two buttons.  The "on" button works, but the "off" button still needs to be programmed.

        # Do This

        -   Add code so that the second button turns the LED off.
      CSD U6 airplane predict markdown: |-
        # Accelerometer

        Look at the code below. What do you think it's going to do? Give it a guess, and run the code to find out!
      CSD U6 airplane predict markdown_2018: |-
        # Accelerometer

        Look at the code below. What do you think it's going to do? Give it a guess, and run the code to find out!
      CSD U6 airplane predict markdown_2019: |-
        # Accelerometer

        Look at the code below. What do you think it's going to do? Give it a guess, and run the code to find out!
      CSD U6 analog challenge: "# Áskorun\\\r\n\n\\\r\n_Ráðfærðu þig við kennarann
        áður en þú byrjar þessa áskorun_\\\r\n\\\r\nNú hefur þú æft að taka inntak
        frá ýmsum hliðrænum nemum og breyta því eftir þörfum. Getur þú látið þér detta
        í hug áhugaverð not fyrir gögn frá nemunum? Það er auðvelt að sýna hráar tölurnar
        frá nemunum, en það er mun áhugaverðara að sýna tölurnar á einhvern annan
        hátt.\\\r\n\\\r\nHér eru nokkrar hugmyndir um hvernig mætti birta gögnin:\\\r\n\\\r\n\n-
        \  Nota úttök borðsins\\\r\n-   \\*\n    Breyta breidd, hæð eða stað einingar
        í notendaviðmótinu\\\r\n-   Nota skilyrðingar til að birta mismunandi myndefni
        út frá tölum frá nemunum"
      CSD U6 analog challenge_2018: "# Áskorun\\\r\n\n\\\r\n_Ráðfærðu þig við kennarann
        áður en þú byrjar þessa áskorun_\\\r\n\\\r\nNú hefur þú æft að taka inntak
        frá ýmsum hliðrænum nemum og breyta því eftir þörfum. Getur þú látið þér detta
        í hug áhugaverð not fyrir gögn frá nemunum? Það er auðvelt að sýna hráar tölurnar
        frá nemunum, en það er mun áhugaverðara að sýna tölurnar á einhvern annan
        hátt.\\\r\n\\\r\nHér eru nokkrar hugmyndir um hvernig mætti birta gögnin:\\\r\n\\\r\n\n-
        \  Nota úttök borðsins\\\r\n-   \\*\n    Breyta breidd, hæð eða stað einingar
        í notendaviðmótinu\\\r\n-   Nota skilyrðingar til að birta mismunandi myndefni
        út frá tölum frá nemunum"
      CSD U6 analog challenge_2019: "# Áskorun\\\r\n\n\\\r\n_Ráðfærðu þig við kennarann
        áður en þú byrjar þessa áskorun_\\\r\n\\\r\nNú hefur þú æft að taka inntak
        frá ýmsum hliðrænum nemum og breyta því eftir þörfum. Getur þú látið þér detta
        í hug áhugaverð not fyrir gögn frá nemunum? Það er auðvelt að sýna hráar tölurnar
        frá nemunum, en það er mun áhugaverðara að sýna tölurnar á einhvern annan
        hátt.\\\r\n\\\r\nHér eru nokkrar hugmyndir um hvernig mætti birta gögnin:\\\r\n\\\r\n\n-
        \  Nota úttök borðsins\\\r\n-   \\*\n    Breyta breidd, hæð eða stað einingar
        í notendaviðmótinu\\\r\n-   Nota skilyrðingar til að birta mismunandi myndefni
        út frá tölum frá nemunum"
      CSD U6 analog change: |-
        # Change Event

        The data event is fine if you don't mind your code running constantly, but sometimes that's not the most efficient solution to your problem. The sensor "change" event only fires if the sensor value has changed since the last reading, which can make sure your program isn't running code when it's not necessary.

        # Do This

        Using the provided event handler, write a program that buzzes the buzzer and updates "temp\_value" whenever the temperature sensor reading changes. Place your thumb over the temperature sensor to get it to change and see how your program responds.
      CSD U6 analog change_2018: |-
        # Change Event

        The data event is fine if you don't mind your code running constantly, but sometimes that's not the most efficient solution to your problem. The sensor "change" event only fires if the sensor value has changed since the last reading, which can make sure your program isn't running code when it's not necessary.

        # Do This

        Using the provided event handler, write a program that buzzes the buzzer and updates "temp\_value" whenever the temperature sensor reading changes. Place your thumb over the temperature sensor to get it to change and see how your program responds.
      CSD U6 analog change_2019: |-
        # Change Event

        The data event is fine if you don't mind your code running constantly, but sometimes that's not the most efficient solution to your problem. The sensor "change" event only fires if the sensor value has changed since the last reading, which can make sure your program isn't running code when it's not necessary.

        # Do This

        Using the provided event handler, write a program that buzzes the buzzer and updates "temp\_value" whenever the temperature sensor reading changes. Place your thumb over the temperature sensor to get it to change and see how your program responds.
      CSD U6 analog data: |-
        # Data Event

        Each of these analog sensors emits a special event called "data" which occurs every time new data comes in from the sensor. Using this event, we can write programs that continually update.

        # Do This

        This is the first program you worked on in this lesson, let's see if we can make it continually update the sound reading using the "data" event.

        -   Create an event handler to respond to sound sensor's "data" event
        -   Move the existing code into your event handler
      CSD U6 analog data_2018: |-
        # Data Event

        Each of these analog sensors emits a special event called "data" which occurs every time new data comes in from the sensor. Using this event, you can rewrite the first program you worked on in this lesson so that it continually updates.

        # Do This

        -   Create an event handler to respond to sound sensor's "data" event
        -   Move the existing code into your event handler
      CSD U6 analog data_2019: |-
        # Data Event

        Each of these analog sensors emits a special event called "data" which occurs every time new data comes in from the sensor. Using this event, you can rewrite the first program you worked on in this lesson so that it continually updates.

        # Do This

        -   Create an event handler to respond to sound sensor's "data" event
        -   Move the existing code into your event handler
      CSD U6 analog light: |-
        # Light Sensor Updates

        This app is very similar to the last, but we've added a button with the ID "update\_button". Write a program that displays the current value of the light sensor every time the update button is clicked.

        # Do This

        Use an event handler to update the text of "light\_value" using the `lightSensor.value` block.
      CSD U6 analog light_2018: |-
        # Light Sensor Updates

        This app is very similar to the last, but we've added a button with the ID "update\_button". Write a program that displays the current value of the light sensor every time the update button is clicked.

        # Do This

        Use an event handler to update the text of "light\_value" using the `lightSensor.value` block.
      CSD U6 analog light_2019: |-
        # Light Sensor Updates

        This app is very similar to the last, but we've added a button with the ID "update\_button". Write a program that displays the current value of the light sensor every time the update button is clicked.

        # Do This

        Use an event handler to update the text of "light\_value" using the `lightSensor.value` block.
      CSD U6 analog rbg 1: |-
        # Displaying Sensor Readings in Color

        In the earlier prediction level you saw how the `setScale()` method can convert the full range of sensor readings (0-1023) into a range that can be used for RGB values (0-255). Let's build on that idea to make an app that can communicate the current value of all three analog sensors with a single color.

        # Do This

        To start, we just need to set the sensor scales correctly - don't worry about actually setting the color of the background yet.

        -   Using the `sensor.setScale()` block, set each of light and sound sensors to the right scale for an RGB color channel.
        -   Create a variable for each of the three colors and assign each one to the value of a different sensor.
        -   Use `console.log()` to test that your variables are in the correct range.

        _Hint: Order matters. You need to set the scale of a sensor before checking its value_

        _Hint: Remember that the temperature sensor can be read in both Celsius and Fahrenheit - either way it should already give you a value that's within the necessary range for RGB_
      CSD U6 analog rbg 1_2018: |-
        # Displaying Sensor Readings in Color

        In the earlier prediction level you saw how the `setScale()` method can convert the full range of sensor readings (0-1023) into a range that can be used for RGB values (0-255). Let's build on that idea to make an app that can communicate the current value of all three analog sensors with a single color.

        # Do This

        To start, we just need to set the sensor scales correctly - don't worry about actually setting the color of the background yet.

        -   Using the `sensor.setScale()` block, set each of light and sound sensors to the right scale for an RGB color channel.
        -   Create a variable for each of the three colors and assign each one to the value of a different sensor.
        -   Use `console.log()` to test that your variables are in the correct range.

        _Hint: Order matters. You need to set the scale of a sensor before checking its value_

        _Hint: Remember that the temperature sensor can be read in both Celsius and Fahrenheit - either way it should already give you a value that's within the necessary range for RGB_
      CSD U6 analog rbg 1_2019: |-
        # Displaying Sensor Readings in Color

        In the earlier prediction level you saw how the `setScale()` method can convert the full range of sensor readings (0-1023) into a range that can be used for RGB values (0-255). Let's build on that idea to make an app that can communicate the current value of all three analog sensors with a single color.

        # Do This

        To start, we just need to set the sensor scales correctly - don't worry about actually setting the color of the background yet.

        -   Using the `sensor.setScale()` block, set each of light and sound sensors to the right scale for an RGB color channel.
        -   Create a variable for each of the three colors and assign each one to the value of a different sensor.
        -   Use `console.log()` to test that your variables are in the correct range.

        _Hint: Order matters. You need to set the scale of a sensor before checking its value_

        _Hint: Remember that the temperature sensor can be read in both Celsius and Fahrenheit - either way it should already give you a value that's within the necessary range for RGB_
      CSD U6 analog rbg 2: "# Að birta lit á skjánum\\\r\n\n\\\r\nNú þegar gögnin
        frá nemunum eru á kvarða, sem virkar fyrir RGB, getur þú stillt litinn á skjánum.\\\r\n\\\r\n\n#
        Gerðu þetta\\\r\n\n\\\r\n\n-   Bættu við `setProperty()` kubbi og láttu hann
        breyta \"background-color\" eiginleika skjásins, \"screen1\".\\\r\n-   Settu
        `rgb()` kubb í síðasta stikann í `setProperty()`.\\\r\n-   Notaðu litabreyturnar
        þínar þrjár sem inntök fyrir `rgb()` kubbinn."
      CSD U6 analog rbg 2_2018: "# Að birta lit á skjánum\\\r\n\n\\\r\nNú þegar gögnin
        frá nemunum eru á kvarða, sem virkar fyrir RGB, getur þú stillt litinn á skjánum.\\\r\n\\\r\n\n#
        Gerðu þetta\\\r\n\n\\\r\n\n-   Bættu við `setProperty()` kubbi og láttu hann
        breyta \"background-color\" eiginleika skjásins, \"screen1\".\\\r\n-   Settu
        `rgb()` kubb í síðasta stikann í `setProperty()`.\\\r\n-   Notaðu litabreyturnar
        þínar þrjár sem inntök fyrir `rgb()` kubbinn."
      CSD U6 analog rbg 2_2019: "# Að birta lit á skjánum\\\r\n\n\\\r\nNú þegar gögnin
        frá nemunum eru á kvarða, sem virkar fyrir RGB, getur þú stillt litinn á skjánum.\\\r\n\\\r\n\n#
        Gerðu þetta\\\r\n\n\\\r\n\n-   Bættu við `setProperty()` kubbi og láttu hann
        breyta \"background-color\" eiginleika skjásins, \"screen1\".\\\r\n-   Settu
        `rgb()` kubb í síðasta stikann í `setProperty()`.\\\r\n-   Notaðu litabreyturnar
        þínar þrjár sem inntök fyrir `rgb()` kubbinn."
      CSD U6 analog rgb 3: "# Samfelld uppfærsla\\\r\n\n\\\r\nÞetta frá-nema-til-litar
        app er ekkert mjög gagnlegt því að það stillir litinn bara einu sinni þegar
        appið er ræst. En þú getur látið \"data\" atburð nemanna uppfæra bakgrunnslitinn
        í hvert sinn sem nemi sendir ný gögn.\\\r\n\\\r\nFærðu `setScale()` kubbana
        inn í atburðarhöndlara fyrir einn af nemunum svo að appið uppfærist stöðugt."
      CSD U6 analog rgb 3_2018: "# Samfelld uppfærsla\\\r\n\n\\\r\nÞetta frá-nema-til-litar
        app er ekkert mjög gagnlegt því að það stillir litinn bara einu sinni þegar
        appið er ræst. En þú getur látið \"data\" atburð nemanna uppfæra bakgrunnslitinn
        í hvert sinn sem nemi sendir ný gögn.\\\r\n\\\r\nFærðu `setScale()` kubbana
        inn í atburðarhöndlara fyrir einn af nemunum svo að appið uppfærist stöðugt."
      CSD U6 analog rgb 3_2019: "# Samfelld uppfærsla\\\r\n\n\\\r\nÞetta frá-nema-til-litar
        app er ekkert mjög gagnlegt því að það stillir litinn bara einu sinni þegar
        appið er ræst. En þú getur látið \"data\" atburð nemanna uppfæra bakgrunnslitinn
        í hvert sinn sem nemi sendir ný gögn.\\\r\n\\\r\nFærðu `setScale()` kubbana
        inn í atburðarhöndlara fyrir einn af nemunum svo að appið uppfærist stöðugt."
      CSD U6 analog sound: |-
        # Reading the Sound Sensor

        The `soundSensor.value` block allows you to get the current sound sensor reading

        # Do This

        In this app we've already added a text label with the id "sound\_value". Using the `soundSensor.value` block, display the value of the sound sensor.

        _Tip: You can drag the `soundSensor.value` block directly into any other block where you could type a value instead._

        ![](https://images.code.org/3bd9ac3f869e42f48aaf190944fe1c22-image-1511293198110.png)
      CSD U6 analog sound_2018: |-
        # Reading the Sound Sensor

        The `soundSensor.value` block allows you to get the current sound sensor reading

        # Do This

        In this app we've already added a text label with the id "sound\_value". Using the `soundSensor.value` block, display the value of the sound sensor.

        _Tip: You can drag the `soundSensor.value` block directly into any other block where you could type a value instead._

        ![](https://images.code.org/3bd9ac3f869e42f48aaf190944fe1c22-image-1511293198110.png)
      CSD U6 analog sound_2019: |-
        # Reading the Sound Sensor

        The `soundSensor.value` block allows you to get the current sound sensor reading

        # Do This

        In this app we've already added a text label with the id "sound\_value". Using the `soundSensor.value` block, display the value of the sound sensor.

        _Tip: You can drag the `soundSensor.value` block directly into any other block where you could type a value instead._

        ![](https://images.code.org/3bd9ac3f869e42f48aaf190944fe1c22-image-1511293198110.png)
      CSD U6 analog temp: "# Búðu til hitamælisapp\\\r\n\n\\\r\n`value` eiginleiki
        ljós- og hljóðnemanna inniheldur aðeins hrá gildi frá nemunum, en hitaneminn
        er aðeins snjallari. Í stað `tempSensor.value` hefur hann tvo eiginleika `tempSensor.F`
        and `tempSensor.C` sem umbreyta hráu gildi í annað hvort Fahrenheit eða Celsius.\\\r\n\\\r\n\n#
        Gerðu þetta\\\r\n\n\\\r\nBúðu til einfalt hitamælisapp sem les af hitanemanum.\nÞú
        getur látið appið birta hitastigið á Fahrenheit eða Celsius kvarða (eða báðum!)\\\r\n\\\r\n_Áskorun:\nGetur
        þú látið appið uppfæra hitastigið í rauntíma?_"
      CSD U6 analog temp_2018: "# Búðu til hitamælisapp\\\r\n\n\\\r\n`value` eiginleiki
        ljós- og hljóðnemanna inniheldur aðeins hrá gildi frá nemunum, en hitaneminn
        er aðeins snjallari. Í stað `tempSensor.value` hefur hann tvo eiginleika `tempSensor.F`
        and `tempSensor.C` sem umbreyta hráu gildi í annað hvort Fahrenheit eða Celsius.\\\r\n\\\r\n\n#
        Gerðu þetta\\\r\n\n\\\r\nBúðu til einfalt hitamælisapp sem les af hitanemanum.\nÞú
        getur látið appið birta hitastigið á Fahrenheit eða Celsius kvarða (eða báðum!)\\\r\n\\\r\n_Áskorun:\nGetur
        þú látið appið uppfæra hitastigið í rauntíma?_"
      CSD U6 analog temp_2019: "# Búðu til hitamælisapp\\\r\n\n\\\r\n`value` eiginleiki
        ljós- og hljóðnemanna inniheldur aðeins hrá gildi frá nemunum, en hitaneminn
        er aðeins snjallari. Í stað `tempSensor.value` hefur hann tvo eiginleika `tempSensor.F`
        and `tempSensor.C` sem umbreyta hráu gildi í annað hvort Fahrenheit eða Celsius.\\\r\n\\\r\n\n#
        Gerðu þetta\\\r\n\n\\\r\nBúðu til einfalt hitamælisapp sem les af hitanemanum.\nÞú
        getur látið appið birta hitastigið á Fahrenheit eða Celsius kvarða (eða báðum!)\\\r\n\\\r\n_Áskorun:\nGetur
        þú látið appið uppfæra hitastigið í rauntíma?_"
      CSD U6 analog threshold: |-
        # Change Threshold

        By default a sensor's "change" event fires every time the sensor value changes at all, even by one. The light and sound sensors are constantly fluctuating, so you probably want the "change" event to be a little less responsive. The `threshold` property allows you to set how much a sensor should change before considering it a "change" event - so setting `soundSensor.threshold = 100` would cause the sound sensor's "change" event only to trigger if its value increased or decreased by at least 100.

        # Do This

        This app changes the background color of the screen whenever the sound sensor value changes, but we want to only respond to big changes in volume (like a loud noise). Use the `soundSensor.threshold` block to fix it.

        -   Add a `soundSensor.threshold` block before the event handler
        -   Test out which how different threshold values impact the "change" event
        -   Choose a threshold value that makes the screen background change only when a loud noise is sensed.

        _Tip: Your threshold depends on how much ambient noise there is in the room, and how much it changes. A threshold that works in a quiet room may not work in a louder classroom._
      CSD U6 analog threshold_2018: |-
        # Change Threshold

        By default a sensor's "change" event fires every time the sensor value changes at all, even by one. The light and sound sensors are constantly fluctuating, so you probably want the "change" event to be a little less responsive. The `threshold` property allows you to set how much a sensor should change before considering it a "change" event - so setting `soundSensor.threshold = 100` would cause the sound sensor's "change" event only to trigger if its value increased or decreased by at least 100.

        # Do This

        This app changes the background color of the screen whenever the sound sensor value changes, but we want to only respond to big changes in volume (like a loud noise). Use the `soundSensor.threshold` block to fix it.

        -   Add a `soundSensor.threshold` block before the event handler
        -   Test out how different threshold values impact the "change" event
        -   Choose a threshold value that makes the screen background change only when a loud noise is sensed.

        _Tip: Your threshold depends on how much ambient noise there is in the room, and how much it changes. A threshold that works in a quiet room may not work in a louder classroom._
      CSD U6 analog threshold_2019: |-
        # Change Threshold

        By default a sensor's "change" event fires every time the sensor value changes at all, even by one. The light and sound sensors are constantly fluctuating, so you probably want the "change" event to be a little less responsive. The `threshold` property allows you to set how much a sensor should change before considering it a "change" event - so setting `soundSensor.threshold = 100` would cause the sound sensor's "change" event only to trigger if its value increased or decreased by at least 100.

        # Do This

        This app changes the background color of the screen whenever the sound sensor value changes, but we want to only respond to big changes in volume (like a loud noise). Use the `soundSensor.threshold` block to fix it.

        -   Add a `soundSensor.threshold` block before the event handler
        -   Test out how different threshold values impact the "change" event
        -   Choose a threshold value that makes the screen background change only when a loud noise is sensed.

        _Tip: Your threshold depends on how much ambient noise there is in the room, and how much it changes. A threshold that works in a quiet room may not work in a louder classroom._
      CSD U6 array piano: |-
        # Piano Panic

        So far you’ve just been using the elements of an array. Now, you're going to change what's inside the array.

        Our good friend the piano is back, except now it plays notes from two arrays: `notes`, which holds natural notes (C, D, E, F, G, A, B), and `sharpNotes`, which holds sharp notes (C#, D#, F#, G#, A#).

        # Do this

        The `sharpNotes` array only has one item inside of it right now.

        -   Fix the array so that the sharp keys on the piano can actually play the right note.

        _Hint: Modifying arrays is much easier in text mode.  You can always switch between block and text mode by clicking the button at the top right of your code workspace._
      CSD U6 array piano_2018: |-
        # Piano Panic

        So far you’ve just been using the elements of an array. Now, you're going to change what's inside the array.

        Our good friend the piano is back, except now it plays notes from two arrays: `notes`, which holds natural notes (C, D, E, F, G, A, B), and `sharpNotes`, which holds sharp notes (C#, D#, F#, G#, A#).

        # Do this

        The `sharpNotes` array only has one item inside of it right now.

        -   Fix the array so that the sharp keys on the piano can actually play the right note.

        _Hint: Modifying arrays is much easier in text mode.  You can always switch between block and text mode by clicking the button at the top right of your code workspace._
      CSD U6 array piano_2019: |-
        # Piano Panic

        So far you’ve just been using the elements of an array. Now, you're going to change what's inside the array.

        Our good friend the piano is back, except now it plays notes from two arrays: `notes`, which holds natural notes (C, D, E, F, G, A, B), and `sharpNotes`, which holds sharp notes (C#, D#, F#, G#, A#).

        # Do this

        The `sharpNotes` array only has one item inside of it right now.

        -   Fix the array so that the sharp keys on the piano can actually play the right note.

        _Hint: Modifying arrays is much easier in text mode.  You can always switch between block and text mode by clicking the button at the top right of your code workspace._
      CSD U6 arrays video: |-
        ## Spurningar til að hugleiða

        -   Hvenær gæti fylki verið gagnlegra en venjuleg breyta?
        -   Hvers vegna þarf alltaf að setja fylki í breytu?
        -   Hvernig er hægt að vísa í atriði sem eru geymd í fylki?
      CSD U6 board getters: |-
        # Using the Circuit Playground

        You can also use getters and setters with the Circuit Playground.  For this level, you'll need to plug in your board.

        Read through the code and predict what the program will do, then hit "Run" to test your prediction.
      CSD U6 board getters_2018: |-
        # Using the Circuit Playground

        You can also use getters and setters with the Circuit Playground.  For this level, you'll need to plug in your board.

        Read through the code and predict what the program will do, then hit "Run" to test your prediction.
      CSD U6 board getters_2019: |-
        # Using the Circuit Playground

        You can also use getters and setters with the Circuit Playground.  For this level, you'll need to plug in your board.

        Read through the code and predict what the program will do, then hit "Run" to test your prediction.
      CSD U6 challenge motorcycle_2018: |-
        # Challenge

        Use this program to experiment some more with getting and setting properties. Some ideas you might try include:

        -   Use the toggle switch to change the motorcycle's movement to go up and down.
        -   Use a dropdown with color names to change the motorcycle's color
        -   Make the buzzer or LED turn on when the motorcycle reaches the top or bottom of the screen.
      CSD U6 challenge motorcycle_2019: |-
        # Challenge

        Use this program to experiment some more with getting and setting properties. Some ideas you might try include:

        -   Use the toggle switch to change the motorcycle's movement to go up and down.
        -   Use a dropdown with color names to change the motorcycle's color
        -   Make the buzzer or LED turn on when the motorcycle reaches the top or bottom of the screen.
      CSD U6 change: |-
        # Change

        In the last level, the program only got the interval value from the slider when you pressed the left button.  Sometimes, though, you'll want to change the interval of the LED as soon as the user chooses a new value.   For that, you'll need the "change" event.

        # Do This

        -   Look at the first event block in the program and find where it says "change".
        -   Inside the event block, get the interval value from the slider and use it to make the LED blink at that new rate.
        -   Run your program, moving the slider to see whether the LED speed changes automatically.
      CSD U6 change_2018: |-
        # Change

        In the last level, the program only got the interval value from the slider when you pressed the left button.  Sometimes, though, you'll want to change the interval of the LED as soon as the user chooses a new value.   For that, you'll need the "change" event.

        # Do This

        -   Look at the first event block in the program and find where it says "change".
        -   Inside the event block, get the interval value from the slider and use it to make the LED blink at that new rate.
        -   Run your program, moving the slider to see whether the LED speed changes automatically.
      CSD U6 change_2019: |-
        # Change

        In the last level, the program only got the interval value from the slider when you pressed the left button.  Sometimes, though, you'll want to change the interval of the LED as soon as the user chooses a new value.   For that, you'll need the "change" event.

        # Do This

        -   Look at the first event block in the program and find where it says "change".
        -   Inside the event block, get the interval value from the slider and use it to make the LED blink at that new rate.
        -   Run your program, moving the slider to see whether the LED speed changes automatically.
      CSD U6 circuit createButton: |-
        <div style="float: right" markdown="1">

        ![expandable](https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_alligator.png)

        </div>

        # Make Your Own Buttons

        Similar to LEDs, buttons are a really simple circuit that you can add to your board pretty easily. Like LEDs, buttons should be wired from a numbered pin to a ground pin, but unlike LEDs, a button circuit should be disconnected in the middle. When you connect the circuit, it will produce a button press event.

        # Do This

        -   Grab two wires.
        -   Connect one wire to an open numbered pin.
        -   Connect the second wire to a ground pin.
        -   Update line 2 so that it's referencing the pin you chose.
        -   Run the provided code.
        -   With the program running, touch the unconnected ends of both wires together to "press" the button.

        _Tip: A button circuit can be made with many different kinds of materials, as long as they are electrically conductive. Try making buttons with foil, silverware, or paper clips._
      CSD U6 circuit createButton_2018: |-
        <div style="float: right" markdown="1">

        ![expandable](https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_alligator.png)

        </div>

        # Make Your Own Buttons

        Similar to LEDs, buttons are a really simple circuit that you can add to your board pretty easily. Like LEDs, buttons should be wired from a numbered pin to a ground pin, but unlike LEDs, a button circuit should be disconnected in the middle. When you connect the circuit, it will produce a button press event.

        # Do This

        -   Grab two wires.
        -   Connect one wire to an open numbered pin.
        -   Connect the second wire to a ground pin.
        -   Update line 2 so that it's referencing the pin you chose.
        -   Run the provided code.
        -   With the program running, touch the unconnected ends of both wires together to "press" the button.

        _Tip: A button circuit can be made with many different kinds of materials, as long as they are electrically conductive. Try making buttons with foil, silverware, or paper clips._
      CSD U6 circuit createButton_2019: |-
        <div style="float: right" markdown="1">

        ![expandable](https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_alligator.png)

        </div>

        # Make Your Own Buttons

        Similar to LEDs, buttons are a really simple circuit that you can add to your board pretty easily. Like LEDs, buttons should be wired from a numbered pin to a ground pin, but unlike LEDs, a button circuit should be disconnected in the middle. When you connect the circuit, it will produce a button press event.

        # Do This

        -   Grab two wires.
        -   Connect one wire to an open numbered pin.
        -   Connect the second wire to a ground pin.
        -   Update line 2 so that it's referencing the pin you chose.
        -   Run the provided code.
        -   With the program running, touch the unconnected ends of both wires together to "press" the button.

        _Tip: A button circuit can be made with many different kinds of materials, as long as they are electrically conductive. Try making buttons with foil, silverware, or paper clips._
      CSD U6 circuit createLed: |-
        # Creating Board Objects

        You might have noticed that the new blocks we're using are in a different toolbox drawer. The **Circuit** drawer contains all of the board objects that are built into the Circuit Playground, but when you start wiring your own circuits the Maker Toolkit no longer knows where everything is.

        The new **Maker** drawer contains general purpose commands instead of ones that are customized for the Circuit Playground. In addition to the `pinMode()` and `digitalWrite()` commands you've seen, it includes commands to create new objects on the board that can be programmed in the same way as the blocks in the **Circuit** drawer. The `var myLed = createLed()` command, for example, creates a new LED object that behaves just like the `led` blocks you've been using.

        # Do This

        Now that you're creating new board objects that we don't have blocks for, you'll need to work in text mode. You can still drag out blocks that you're familiar with from the **Circuit** drawer, you'll just need to change the name of the object.

        -   Keep your LED wired just as it was before (connected to pin 2)
        -   Make sure you're in text mode, not block mode.
        -   Drag out an `led.blink()` block below the comment `// Blink myLed`.
        -   Replace the text `led` with `myLed`.
        -   Test your code.
      CSD U6 circuit createLed_2018: |-
        # Creating Board Objects

        You might have noticed that the new blocks we're using are in a different toolbox drawer. The **Circuit** drawer contains all of the board objects that are built into the Circuit Playground, but when you start wiring your own circuits the Maker Toolkit no longer knows where everything is.

        The new **Maker** drawer contains general purpose commands instead of ones that are customized for the Circuit Playground. In addition to the `pinMode()` and `digitalWrite()` commands you've seen, it includes commands to create new objects on the board that can be programmed in the same way as the blocks in the **Circuit** drawer. The `var myLed = createLed()` command, for example, creates a new LED object that behaves just like the `led` blocks you've been using.

        # Do This

        Now that you're creating new board objects that we don't have blocks for, you'll need to work in text mode. You can still drag out blocks that you're familiar with from the **Circuit** drawer, you'll just need to change the name of the object.

        -   Keep your LED wired just as it was before (connected to pin 2)
        -   Make sure you're in text mode, not block mode.
        -   Drag out an `led.blink()` block below the comment `// Blink myLed`.
        -   Replace the text `led` with `myLed`.
        -   Test your code.
      CSD U6 circuit createLed_2019: |-
        # Creating Board Objects

        You might have noticed that the new blocks we're using are in a different toolbox drawer. The **Circuit** drawer contains all of the board objects that are built into the Circuit Playground, but when you start wiring your own circuits the Maker Toolkit no longer knows where everything is.

        The new **Maker** drawer contains general purpose commands instead of ones that are customized for the Circuit Playground. In addition to the `pinMode()` and `digitalWrite()` commands you've seen, it includes commands to create new objects on the board that can be programmed in the same way as the blocks in the **Circuit** drawer. The `var myLed = createLed()` command, for example, creates a new LED object that behaves just like the `led` blocks you've been using.

        # Do This

        Now that you're creating new board objects that we don't have blocks for, you'll need to work in text mode. You can still drag out blocks that you're familiar with from the **Circuit** drawer, you'll just need to change the name of the object.

        -   Keep your LED wired just as it was before (connected to pin 2)
        -   Make sure you're in text mode, not block mode.
        -   Drag out an `led.blink()` block below the comment `// Blink myLed`.
        -   Replace the text `led` with `myLed`.
        -   Test your code.
      CSD U6 circuit multi led: |-
        # Wiring Multiple LEDs

        Using the `createLed()` block you can connect and control as many LEDs as your board has room for. Each LED needs to be connected to a separate numbered pin, but they can all share the same ground pin.

        # Do This

        Leave the current LED connected to pin 2, but add another one to a numbered pin of your choice. For your new LED:

        -   Add a `var myLed = createLed()` block.
        -   Replace the variable label `myLed` with a unique label.
        -   Make sure you're in text mode, not block mode.
        -   Add an `led.blink()` command.
        -   Replace the text `led` with your new LED variable.
        -   Test your code.

        _Challenge: Try adding a third LED and make all three LED blink at different intervals._
      CSD U6 circuit multi led_2018: |-
        # Wiring Multiple LEDs

        Using the `createLed()` block you can connect and control as many LEDs as your board has room for. Each LED needs to be connected to a separate numbered pin, but they can all share the same ground pin.

        # Do This

        Leave the current LED connected to pin 2, but add another one to a numbered pin of your choice. For your new LED:

        -   Add a `var myLed = createLed()` block.
        -   Replace the variable label `myLed` with a unique label.
        -   Make sure you're in text mode, not block mode.
        -   Add an `led.blink()` command.
        -   Replace the text `led` with your new LED variable.
        -   Test your code.

        _Challenge: Try adding a third LED and make all three LED blink at different intervals._
      CSD U6 circuit multi led_2019: |-
        # Wiring Multiple LEDs

        Using the `createLed()` block you can connect and control as many LEDs as your board has room for. Each LED needs to be connected to a separate numbered pin, but they can all share the same ground pin.

        # Do This

        Leave the current LED connected to pin 2, but add another one to a numbered pin of your choice. For your new LED:

        -   Add a `var myLed = createLed()` block.
        -   Replace the variable label `myLed` with a unique label.
        -   Make sure you're in text mode, not block mode.
        -   Add an `led.blink()` command.
        -   Replace the text `led` with your new LED variable.
        -   Test your code.

        _Challenge: Try adding a third LED and make all three LED blink at different intervals._
      CSD U6 circuit pinMode: |-
        # Wire a Circuit

        You can use any of the numbered pads to add additional circuits to your board. Let's use pin 2 to add another LED.

        # Do This

        -   Using a wire, connect pin 2 to the positive (+) side of an LED
        -   Using another wire, connect the negative (-) side of the LED to a ground (GND) pin (it doesn't matter which one)
        -   Run this program to test your circuit. If it worked, your LED should turn on.

        _Debugging Tip: LEDs only work if the electricity is flowing from positive to negative. If your LED doesn't light up, make sure that it's oriented the right way._
      CSD U6 circuit pinMode_2018: |-
        # Wire a Circuit

        You can use any of the numbered pads to add additional circuits to your board. Let's use pin 2 to add another LED.

        # Do This

        -   Using a wire, connect pin 2 to the positive (+) side of an LED
        -   Using another wire, connect the negative (-) side of the LED to a ground (GND) pin (it doesn't matter which one)
        -   Run this program to test your circuit. If it worked, your LED should turn on.

        _Debugging Tip: LEDs only work if the electricity is flowing from positive to negative. If your LED doesn't light up, make sure that it's oriented the right way._
      CSD U6 circuit pinMode_2019: |-
        # Wire a Circuit

        You can use any of the numbered pads to add additional circuits to your board. Let's use pin 2 to add another LED.

        # Do This

        -   Using a wire, connect pin 2 to the positive (+) side of an LED
        -   Using another wire, connect the negative (-) side of the LED to a ground (GND) pin (it doesn't matter which one)
        -   Run this program to test your circuit. If it worked, your LED should turn on.

        _Debugging Tip: LEDs only work if the electricity is flowing from positive to negative. If your LED doesn't light up, make sure that it's oriented the right way._
      CSD U6 circuit predict multi: |-
        # Make a Prediction

        All of the devices that you've used so far are actually circuits connected to numbered pins! Look for **#13** on your board to see which circuit is connected to pin 13, then read through this code and predict what will happen when the program is run.
      CSD U6 circuit predict multi_2018: |-
        # Make a Prediction

        All of the devices that you've used so far are actually circuits connected to numbered pins! Look for **#13** on your board to see which circuit is connected to pin 13, then read through this code and predict what will happen when the program is run.
      CSD U6 circuit predict multi_2019: |-
        # Make a Prediction

        All of the devices that you've used so far are actually circuits connected to numbered pins! Look for **#13** on your board to see which circuit is connected to pin 13, then read through this code and predict what will happen when the program is run.
      CSD U6 circuit smart bike blinker buttons: |-
        # Smart Bike - Blinker Controls

        With your turn signal LEDs hooked up, you just need to program some buttons to control them. You may want to place buttons elsewhere on the bike to make controlling your turn signals easier, but for now we'll just use the built in left and right buttons.

        # Do This

        -   Add event handlers to blink the left turn signal when the left button is pressed.
        -   Add event handlers to blink the right turn signal when the right button is pressed.
        -   Test your code!

        _Hint: You'll need to be in text mode to make the blinkers work, since there are no built-in blocks for the elements that you add on to the board._
      CSD U6 circuit smart bike blinker buttons_2018: |-
        # Smart Bike - Blinker Controls

        With your turn signal LEDs hooked up, you just need to program some buttons to control them. You may want to place buttons elsewhere on the bike to make controlling your turn signals easier, but for now we'll just use the built in left and right buttons.

        # Do This

        -   Add event handlers to blink the left turn signal when the left button is pressed.
        -   Add event handlers to blink the right turn signal when the right button is pressed.
        -   Test your code!

        _Hint: You'll need to be in text mode to make the blinkers work, since there are no built-in blocks for the elements that you add on to the board._
      CSD U6 circuit smart bike blinker buttons_2019: |-
        # Smart Bike - Blinker Controls

        With your turn signal LEDs hooked up, you just need to program some buttons to control them. You may want to place buttons elsewhere on the bike to make controlling your turn signals easier, but for now we'll just use the built in left and right buttons.

        # Do This

        -   Add event handlers to blink the left turn signal when the left button is pressed.
        -   Add event handlers to blink the right turn signal when the right button is pressed.
        -   Test your code!

        _Hint: You'll need to be in text mode to make the blinkers work, since there are no built-in blocks for the elements that you add on to the board._
      CSD U6 circuit smart bike blinkers: "# Smart Bike - Blinkers\n\nUsing your planning
        guide, wire up the two LEDs that will serve as the blinkers. In order to make
        sure that the blinkers can be mounted at the end of the handlebars, make sure
        you wire them so that they can stretch out in opposite directions.\n\n# Do
        This\n\nUsing alligator clips, wire, or other conductive material, connect
        two LEDs to your board, one for each turn signal blinker.\n\n-   Hook up each
        LED to a different numbered pin on the board.\n-   Use the `createLed()` block
        to create an LED object for each blinker.\n\n_Tip: Make your wiring easier
        by considering how your blinkers will be mounted when selecting a pin to use._ "
      CSD U6 circuit smart bike blinkers_2018: "# Smart Bike - Blinkers\n\nUsing your
        planning guide, wire up the two LEDs that will serve as the blinkers. In order
        to make sure that the blinkers can be mounted at the end of the handlebars,
        make sure you wire them so that they can stretch out in opposite directions.\n\n#
        Do This\n\nUsing alligator clips, wire, or other conductive material, connect
        two LEDs to your board, one for each turn signal blinker.\n\n-   Hook up each
        LED to a different numbered pin on the board.\n-   Use the `createLed()` block
        to create an LED object for each blinker.\n\n_Tip: Make your wiring easier
        by considering how your blinkers will be mounted when selecting a pin to use._ "
      CSD U6 circuit smart bike blinkers_2019: "# Smart Bike - Blinkers\n\nUsing your
        planning guide, wire up the two LEDs that will serve as the blinkers. In order
        to make sure that the blinkers can be mounted at the end of the handlebars,
        make sure you wire them so that they can stretch out in opposite directions.\n\n#
        Do This\n\nUsing alligator clips, wire, or other conductive material, connect
        two LEDs to your board, one for each turn signal blinker.\n\n-   Hook up each
        LED to a different numbered pin on the board.\n-   Use the `createLed()` block
        to create an LED object for each blinker.\n\n_Tip: Make your wiring easier
        by considering how your blinkers will be mounted when selecting a pin to use._ "
      CSD U6 circuit smart bike buzzer: |-
        # Smart Bike - Buzzer

        Now that we know how to add more buttons, you can add a button to control the smart bike's horn.

        # Do This

        Using the button that you've already wired to the board, find a good spot to place your horn button. Then:

        -   Create a button object for your horn button
        -   Add an event handler to buzz when button is pressed

        _Hint: The button object that you create won't be in the `onBoardEvent()` dropdown, so you'll need to type the name you've chosen in. Make sure not to use quotation marks!_
      CSD U6 circuit smart bike buzzer_2018: |-
        # Smart Bike - Buzzer

        Now that we know how to add more buttons, you can add a button to control the smart bike's horn.

        # Do This

        Using the button that you've already wired to the board, find a good spot to place your horn button. Then:

        -   Create a button object for your horn button
        -   Add an event handler to buzz when button is pressed

        _Hint: The button object that you create won't be in the `onBoardEvent()` dropdown, so you'll need to type the name you've chosen in. Make sure not to use quotation marks!_
      CSD U6 circuit smart bike buzzer_2019: |-
        # Smart Bike - Buzzer

        Now that we know how to add more buttons, you can add a button to control the smart bike's horn.

        # Do This

        Using the button that you've already wired to the board, find a good spot to place your horn button. Then:

        -   Create a button object for your horn button
        -   Add an event handler to buzz when button is pressed

        _Hint: The button object that you create won't be in the `onBoardEvent()` dropdown, so you'll need to type the name you've chosen in. Make sure not to use quotation marks!_
      CSD U6 circuit smart bike final: |-
        # Smart Bike - Final Touches

        At this point your smart bike should have all of its basic functionality in place. Now is your chance to add any finishing touches.

        # Do This

        You may want to divide and conquer at this point, allowing some members of your group to focus on the physical aspects of the prototype while others work on improving the code. As this is a prototype, don't worry about making everything perfect, but do try to ensure that the prototype communicates your design well enough to test and get feedback.
      CSD U6 circuit smart bike final_2018: |-
        # Smart Bike - Final Touches

        At this point your smart bike should have all of its basic functionality in place. Now is your chance to add any finishing touches.

        # Do This

        You may want to divide and conquer at this point, allowing some members of your group to focus on the physical aspects of the prototype while others work on improving the code. As this is a prototype, don't worry about making everything perfect, but do try to ensure that the prototype communicates your design well enough to test and get feedback.
      CSD U6 circuit smart bike final_2019: |-
        # Smart Bike - Final Touches

        At this point your smart bike should have all of its basic functionality in place. Now is your chance to add any finishing touches.

        # Do This

        You may want to divide and conquer at this point, allowing some members of your group to focus on the physical aspects of the prototype while others work on improving the code. As this is a prototype, don't worry about making everything perfect, but do try to ensure that the prototype communicates your design well enough to test and get feedback.
      CSD U6 circuit smart bike light: |-
        # Smart Bike - Headlight

        The last part of the smart bike plan that we need to figure out is the automatic headlight.

        # Do This

        First you'll need to decide what to use for your headlight. You could add another LED circuit, or perhaps you can find a way to mount the board that allows for using the color LEDs as a headlight. Once you've figured out the physical layout of your lights, add code to your program that turns on and off the headlight based on how light or dark it is.

        _Hint: If you're using the built-in color LEDs, you might need to protect the light sensor to make sure that it's responding to the ambient light level and not the light from the LEDs._
      CSD U6 circuit smart bike light_2018: |-
        # Smart Bike - Headlight

        The last part of the smart bike plan that we need to figure out is the automatic headlight.

        # Do This

        First you'll need to decide what to use for your headlight. You could add another LED circuit, or perhaps you can find a way to mount the board that allows for using the color LEDs as a headlight. Once you've figured out the physical layout of your lights, add code to your program that turns on and off the headlight based on how light or dark it is.

        _Hint: If you're using the built-in color LEDs, you might need to protect the light sensor to make sure that it's responding to the ambient light level and not the light from the LEDs._
      CSD U6 circuit smart bike light_2019: |-
        # Smart Bike - Headlight

        The last part of the smart bike plan that we need to figure out is the automatic headlight.

        # Do This

        First you'll need to decide what to use for your headlight. You could add another LED circuit, or perhaps you can find a way to mount the board that allows for using the color LEDs as a headlight. Once you've figured out the physical layout of your lights, add code to your program that turns on and off the headlight based on how light or dark it is.

        _Hint: If you're using the built-in color LEDs, you might need to protect the light sensor to make sure that it's responding to the ambient light level and not the light from the LEDs._
      CSD U6 colorLED on: |-
        <img src="//curriculum.code.org/images/circuitplayground/colorLedonoff.gif" style="float: right; margin: 10px;">

        # colorLeds

        The color LEDs can use the same basic commands that you used with the red LED, such as `on()` and `off()`. This program should turn on and off the bottom LEDs as shown in the picture, but only one LED is working.

        # Do This

        -   Read and run the code to see how the program turns the bottom left LED on and off.
        -   Add more code to make both bottom LEDs turn on and off.
      CSD U6 colorLED on_2018: |-
        <img src="//curriculum.code.org/images/circuitplayground/colorLedonoff.gif" style="float: right; margin: 10px;">

        # colorLeds

        The color LEDs can use the same basic commands that you used with the red LED, such as `on()` and `off()`. This program should turn on and off the bottom LEDs as shown in the picture, but only one LED is working.

        # Do This

        -   Read and run the code to see how the program turns the bottom left LED on and off.
        -   Add more code to make both bottom LEDs turn on and off.
      CSD U6 colorLED on_2019: |-
        <img src="//curriculum.code.org/images/circuitplayground/colorLedonoff.gif" style="float: right; margin: 10px;">

        # colorLeds

        The color LEDs can use the same basic commands that you used with the red LED, such as `on()` and `off()`. This program should turn on and off the bottom LEDs as shown in the picture, but only one LED is working.

        # Do This

        -   Read and run the code to see how the program turns the bottom left LED on and off.
        -   Add more code to make both bottom LEDs turn on and off.
      CSD U6 colorLeds debug: |-
        <img src="https://images.code.org/e055be621221385d3503962bee5aa616-image-1491493475417.44.28.png" style="width:250px; float:right">

        # Debug: colorLeds

        Can you debug the index values so that the rainbow shows up on the board like in the picture?
      CSD U6 colorLeds debug_2018: |-
        <img src="https://images.code.org/723f036c40ef2770426d5d437e69fcde-image-1527268321449.png" style="width:250px; float:right">

        # Debug: colorLeds

        Can you debug the index values so that the rainbow shows up on the board like in the picture?
      CSD U6 colorLeds debug_2019: |-
        <img src="https://images.code.org/723f036c40ef2770426d5d437e69fcde-image-1527268321449.png" style="width:250px; float:right">

        # Debug: colorLeds

        Can you debug the index values so that the rainbow shows up on the board like in the picture?
      CSD U6 colorLeds intensity: |-
        # Changing Brightness

        The `intensity()` command lets you set an LED's brightness (or _intensity_) from 0 - 100. This program lets you choose three levels of brightness for your rainbow lights, but the medium level doesn't work yet.

        # Do This

        -   Read the program and see how the "Bright" and "Dim" buttons work.
        -   Add code to make the "Medium" button make the rainbow a medium level of brightness (between "Bright" and "Dim"). ([Show me where](#triggercallout=code_triggered))
      CSD U6 colorLeds intensity_2018: |-
        # Changing Brightness

        The `intensity()` command lets you set an LED's brightness (or _intensity_) from 0 - 100. This program lets you choose three levels of brightness for your rainbow lights, but the medium level doesn't work yet.

        # Do This

        -   Read the program and see how the "Bright" and "Dim" buttons work.
        -   Add code to make the "Medium" button make the rainbow a medium level of brightness (between "Bright" and "Dim"). ([Show me where](#triggercallout=code_triggered))
      CSD U6 colorLeds intensity_2019: |-
        # Changing Brightness

        The `intensity()` command lets you set an LED's brightness (or _intensity_) from 0 - 100. This program lets you choose three levels of brightness for your rainbow lights, but the medium level doesn't work yet.

        # Do This

        -   Read the program and see how the "Bright" and "Dim" buttons work.
        -   Add code to make the "Medium" button make the rainbow a medium level of brightness (between "Bright" and "Dim"). ([Show me where](#triggercallout=code_triggered))
      CSD U6 colorLeds light pattern: |-
        # Light Patterns

        This app already has one light pattern program, which can be activated by clicking a button. Notice that we put this pattern into a function to make the code cleaner and clearer.

        # Do This

        Create a light pattern function of your own - maybe the colors of your favorite holiday, college, sports team, or try to create an image with the lights.

        After you've created your new function, add a button and event handler so that you can switch between the two light patterns.
      CSD U6 colorLeds light pattern_2018: |-
        # Light Patterns

        This app already has one light pattern program, which can be activated by clicking a button. Notice that we put this pattern into a function to make the code cleaner and clearer.

        # Do This

        Create a light pattern function of your own - maybe the colors of your favorite holiday, college, sports team, or try to create an image with the lights.

        After you've created your new function, add a button and event handler so that you can switch between the two light patterns.
      CSD U6 colorLeds light pattern_2019: |-
        # Light Patterns

        This app already has one light pattern program, which can be activated by clicking a button. Notice that we put this pattern into a function to make the code cleaner and clearer.

        # Do This

        Create a light pattern function of your own - maybe the colors of your favorite holiday, college, sports team, or try to create an image with the lights.

        After you've created your new function, add a button and event handler so that you can switch between the two light patterns.
      CSD U6 colorLeds predict embed: |-
        # colorLEDs

        This program uses the colorLEDs array, which lets you control the color LEDs in your Circuit Playground.

        What do you think this code will do?  Write your prediction in the box below, then run the code to see what happens.
      CSD U6 colorLeds predict embed_2018: |-
        # colorLEDs

        This program uses the colorLEDs array, which lets you control the color LEDs in your Circuit Playground.

        What do you think this code will do?  Write your prediction in the box below, then run the code to see what happens.
      CSD U6 colorLeds predict embed_2019: |-
        # colorLEDs

        This program uses the colorLEDs array, which lets you control the color LEDs in your Circuit Playground.

        What do you think this code will do?  Write your prediction in the box below, then run the code to see what happens.
      CSD U6 create LED app: |-
        # Make Your App - The Screen

        Now, you and your partner can make your own app using the LED.  Discuss with your partner what kind of app you want to make.

        # Do This

        -   Discuss with your partner what screen elements you will need in your app.  Do you want...
            -   Buttons?
            -   Images?
            -   Text?
        -   In Design Mode, add the elements, making sure you give each a meaningful ID.
      CSD U6 create LED app 2: |-
        # Make Your App - The Code

        Next, you'll need to add the code that makes your app work.

        # Do This

        -   Discuss with your partner what code you will need in your app.  Do you need...
            -   Events?
            -   Variables?
            -   Setters?
            -   Random Numbers?
        -   In Code Mode, add in the code that will make your app work.
      CSD U6 create LED app 2_2018: |-
        # Make Your App - The Code

        Next, you'll need to add the code that makes your app work.

        # Do This

        -   Discuss with your partner what code you will need in your app.  Do you need...
            -   Events?
            -   Variables?
            -   Setters?
            -   Random Numbers?
        -   In Code Mode, add in the code that will make your app work.
      CSD U6 create LED app 2_2019: |-
        # Make Your App - The Code

        Next, you'll need to add the code that makes your app work.

        # Do This

        -   Discuss with your partner what code you will need in your app.  Do you need...
            -   Events?
            -   Variables?
            -   Setters?
            -   Random Numbers?
        -   In Code Mode, add in the code that will make your app work.
      CSD U6 create LED app_2018: |-
        # Make Your App - The Screen

        Now, you and your partner can make your own app using the LED.  Discuss with your partner what kind of app you want to make.

        # Do This

        -   Discuss with your partner what screen elements you will need in your app.  Do you want...
            -   Buttons?
            -   Images?
            -   Text?
        -   In Design Mode, add the elements, making sure you give each a meaningful ID.
      CSD U6 create LED app_2019: |-
        # Make Your App - The Screen

        Now, you and your partner can make your own app using the LED.  Discuss with your partner what kind of app you want to make.

        # Do This

        -   Discuss with your partner what screen elements you will need in your app.  Do you want...
            -   Buttons?
            -   Images?
            -   Text?
        -   In Design Mode, add the elements, making sure you give each a meaningful ID.
      CSD U6 design motorcycle: |-
        # Add Your Own Elements

        Now it's time to add some elements of your own. The motorcycle should be able to move up and down right now, but how can you control its speed?

        # Do This

        -   Add a slider in design mode.
            -   Make sure you set the min and max values of the slider in design mode.
        -   Create an event that will trigger when the slider value is changed.
        -   Add code to get the slider value and store it into the `speed` variable when the event is triggered.
      CSD U6 design motorcycle_2018: |-
        # Add Your Own Elements

        Now it's time to add some elements of your own. The motorcycle should be able to move up and down right now, but how can you control its speed?

        # Do This

        -   Add a slider in design mode.
            -   Make sure you set the min and max values of the slider in design mode.
        -   Create an event that will trigger when the slider value is changed.
        -   Add code to get the slider value and store it into the `speed` variable when the event is triggered.
      CSD U6 design motorcycle_2019: |-
        # Add Your Own Elements

        Now it's time to add some elements of your own. The motorcycle should be able to move up and down right now, but how can you control its speed?

        # Do This

        -   Add a slider in design mode.
            -   Make sure you set the min and max values of the slider in design mode.
        -   Create an event that will trigger when the slider value is changed.
        -   Add code to get the slider value and store it into the `speed` variable when the event is triggered.
      CSD U6 directional LEDs roll: |-
        # Roll

        This program should display "Left" or "Right" on the screen, depending on which way the board is tilted.

        # Do this

        -   Use the "roll" property of the accelerometer to determine whether the board is tilted to the left or right.
        -   Use a conditional to change the text for the "direction" element to be either "Left" or "Right", depending on the board's orientation.
      CSD U6 directional LEDs roll_2018: |-
        # Roll

        This program should display "Left" or "Right" on the screen, depending on which way the board is tilted.

        # Do this

        -   Use the "roll" property of the accelerometer to determine whether the board is tilted to the left or right.
        -   Use a conditional to change the text for the "direction" element to be either "Left" or "Right", depending on the board's orientation.
      CSD U6 directional LEDs roll_2019: |-
        # Roll

        This program should display "Left" or "Right" on the screen, depending on which way the board is tilted.

        # Do this

        -   Use the "roll" property of the accelerometer to determine whether the board is tilted to the left or right.
        -   Use a conditional to change the text for the "direction" element to be either "Left" or "Right", depending on the board's orientation.
      CSD U6 directional leds pitch: |-
        # Pitch

        This program lights the top LEDs (0 and 9) when you tilt the board forward. If you tilt the board back, the LEDs at the bottom (4 and 5) should light.

        # Do This

        -   Use the board's pitch to make LEDs 4 and 5 light up when you tilt the board back.
        -   Run your code and test it a few times.
      CSD U6 directional leds pitch_2018: |-
        # Pitch

        This program lights the top LEDs (0 and 9) when you tilt the board forward. If you tilt the board back, the LEDs at the bottom (4 and 5) should light.

        # Do This

        -   Use the board's pitch to make LEDs 4 and 5 light up when you tilt the board back.
        -   Run your code and test it a few times.
      CSD U6 directional leds pitch_2019: |-
        # Pitch

        This program lights the top LEDs (0 and 9) when you tilt the board forward. If you tilt the board back, the LEDs at the bottom (4 and 5) should light.

        # Do This

        -   Use the board's pitch to make LEDs 4 and 5 light up when you tilt the board back.
        -   Run your code and test it a few times.
      CSD U6 emoji race demo: |-
        # Emoji Race!

        This is an example of a race game that you'll build by the end of this lesson. To play, pair up with another student. The student on the left will the click the left button on the Circuit Playground as fast as they can, while the student on the right clicks the right button. Whoever can get their emoji to the bottom of the screen first wins.

        # Do This

        Turn to a classmate and make a list of the following information.

        -   What components of the board does this program use?
        -   What events is this program responding to?
        -   What functions might you create to make this program work?
      CSD U6 emoji race demo_2018: |-
        # Emoji Race!

        This is an example of a race game that you'll build by the end of this lesson. To play, pair up with another student. The student on the left will the click the left button on the Circuit Playground as fast as they can, while the student on the right clicks the right button. Whoever can get their emoji to the bottom of the screen first wins.

        # Do This

        Turn to a classmate and make a list of the following information.

        -   What components of the board does this program use?
        -   What events is this program responding to?
        -   What functions might you create to make this program work?
      CSD U6 emoji race demo_2019: |-
        # Emoji Race!

        This is an example of a race game that you'll build by the end of this lesson. To play, pair up with another student. The student on the left will the click the left button on the Circuit Playground as fast as they can, while the student on the right clicks the right button. Whoever can get their emoji to the bottom of the screen first wins.

        # Do This

        Turn to a classmate and make a list of the following information.

        -   What components of the board does this program use?
        -   What events is this program responding to?
        -   What functions might you create to make this program work?
      CSD U6 emotion machine 1: |-
        # Changing Images

        The first thing you'll need your emotion machine to do is change to the appropriate image when a button is clicked. If you look at the starting code, you'll see that we already added `setProperty("face", "image", "icon://fa-smile-o")` to change to a smiley face when you click happy.

        # Do This

        <div markdown="1" style="float:right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/uploads/select_image.gif)

        </div>

        Create an event handler for "sad\_button" and make it change to a sad emoji. To do this you'll need to set the "image" property of the image with id "face".

        _Tip: when you click the last dropdown in the `setProperty` block click "Choose..." to go to your media library. From there you can select an icon from our icon library or upload an image of your own._
      CSD U6 emotion machine 1_2018: |-
        # Changing Images

        The first thing you'll need your emotion machine to do is change to the appropriate image when a button is clicked. If you look at the starting code, you'll see that we already added `setProperty("face", "image", "icon://fa-smile-o")` to change to a smiley face when you click happy.

        # Do This

        <div markdown="1" style="float:right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/uploads/select_image.gif)

        </div>

        Create an event handler for "sad\_button" and make it change to a sad emoji. To do this you'll need to set the "image" property of the image with id "face".

        _Tip: when you click the last dropdown in the `setProperty` block click "Choose..." to go to your media library. From there you can select an icon from our icon library or upload an image of your own._
      CSD U6 emotion machine 1_2019: |-
        # Changing Images

        The first thing you'll need your emotion machine to do is change to the appropriate image when a button is clicked. If you look at the starting code, you'll see that we already added `setProperty("face", "image", "icon://fa-smile-o")` to change to a smiley face when you click happy.

        # Do This

        <div markdown="1" style="float:right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/uploads/select_image.gif)

        </div>

        Create an event handler for "sad\_button" and make it change to a sad emoji. To do this you'll need to set the "image" property of the image with id "face".

        _Tip: when you click the last dropdown in the `setProperty` block click "Choose..." to go to your media library. From there you can select an icon from our icon library or upload an image of your own._
      CSD U6 emotion machine 2: |-
        # Changing Color

        If you look back at the example for this app, you should notice that not only do the emojis change when you click a button, but their color changes as well.

        # Do This

        In each of the event handlers, set the "icon-color" property of "face". Pick a warm color for happy and a cool color for sad.
      CSD U6 emotion machine 2_2018: |-
        # Changing Color

        If you look back at the example for this app, you should notice that not only do the emojis change when you click a button, but their color changes as well.

        # Do This

        In each of the event handlers, set the "icon-color" property of "face". Pick a warm color for happy and a cool color for sad.
      CSD U6 emotion machine 2_2019: |-
        # Changing Color

        If you look back at the example for this app, you should notice that not only do the emojis change when you click a button, but their color changes as well.

        # Do This

        In each of the event handlers, set the "icon-color" property of "face". Pick a warm color for happy and a cool color for sad.
      CSD U6 emotion machine 3: |-
        # Setting Text

        Your happy and sad buttons should be almost completely functional now. The only thing they still need to do is change the text at the bottom of the screen.

        # Do This

        Make each of the event handlers change the text of "feeling" to the appropriate emotion (either "happy" or "sad")
      CSD U6 emotion machine 3_2018: |-
        # Setting Text

        Your happy and sad buttons should be almost completely functional now. The only thing they still need to do is change the text at the bottom of the screen.

        # Do This

        Make each of the event handlers change the text of "feeling" to the appropriate emotion (either "happy" or "sad")
      CSD U6 emotion machine 3_2019: |-
        # Setting Text

        Your happy and sad buttons should be almost completely functional now. The only thing they still need to do is change the text at the bottom of the screen.

        # Do This

        Make each of the event handlers change the text of "feeling" to the appropriate emotion (either "happy" or "sad")
      CSD U6 emotion machine 4: |-
        # Add Another Emotion

        In the example app you saw earlier, you could set the emotion to happy, sad, or meh. Your app only has happy and sad, can you add a third emotion?

        # Do This

        Using all of the same techniques you used for the happy and sad buttons, create a third emotion button. You could stick with meh, or you could pick an emotion of your own.

        When you're all done, feel free to add more emotions or features before submitting your final version.
      CSD U6 emotion machine 4_2018: |-
        # Add Another Emotion

        In the example app you saw earlier, you could set the emotion to happy, sad, or meh. Your app only has happy and sad, can you add a third emotion?

        # Do This

        Using all of the same techniques you used for the happy and sad buttons, create a third emotion button. You could stick with meh, or you could pick an emotion of your own.

        When you're all done, feel free to add more emotions or features before submitting your final version.
      CSD U6 emotion machine 4_2019: |-
        # Add Another Emotion

        In the example app you saw earlier, you could set the emotion to happy, sad, or meh. Your app only has happy and sad, can you add a third emotion?

        # Do This

        Using all of the same techniques you used for the happy and sad buttons, create a third emotion button. You could stick with meh, or you could pick an emotion of your own.

        When you're all done, feel free to add more emotions or features before submitting your final version.
      CSD U6 emotion machine example: |-
        # The Emotion Machine

        Check out this Emotion Machine app that you'll be building next. Try clicking on the buttons to see how it works.

        # Do This

        Try out the app, and then with a neighbor discuss:

        -   What events handlers does this app use?
        -   Which elements are being changed with code?
        -   Which properties are being changed when you click a button?
      CSD U6 emotion machine example_2018: |-
        # The Emotion Machine

        Check out this Emotion Machine app that you'll be building next. Try clicking on the buttons to see how it works.

        # Do This

        Try out the app, and then with a neighbor discuss:

        -   What events handlers does this app use?
        -   Which elements are being changed with code?
        -   Which properties are being changed when you click a button?
      CSD U6 emotion machine example_2019: |-
        # The Emotion Machine

        Check out this Emotion Machine app that you'll be building next. Try clicking on the buttons to see how it works.

        # Do This

        Try out the app, and then with a neighbor discuss:

        -   What events handlers does this app use?
        -   Which elements are being changed with code?
        -   Which properties are being changed when you click a button?
      CSD U6 for loop button array: |-
        # Looping Over Arrays

        One of the most powerful ways to use a for loop is to loop over an array, running code on each item in the array. We can do this by using the for loop counter variable (usually `i`) as the index of your array.

        # Do This

        This program should loop over the array `buttons` and do two things to each button - change the background color to red, and change the height to 50 px.

        -   Add a second `setProperty` block inside the loop
        -   Change the target to `buttons[i]`
        -   Set the "height" property to 50

        ![expandable](https://images.code.org/df3d514bae5c23de9e0fbdf1d7798432-image-1512431649584.png)
      CSD U6 for loop button array_2018: |-
        # Looping Over Arrays

        One of the most powerful ways to use a for loop is to loop over an array, running code on each item in the array. We can do this by using the for loop counter variable (usually `i`) as the index of your array.

        # Do This

        This program should loop over the array `buttons` and do two things to each button - change the background color to red, and change the height to 50 px.

        -   Add a second `setProperty` block inside the loop
        -   Change the target to `buttons[i]`
        -   Set the "height" property to 50

        ![expandable](https://images.code.org/df3d514bae5c23de9e0fbdf1d7798432-image-1512431649584.png)
      CSD U6 for loop button array_2019: |-
        # Looping Over Arrays

        One of the most powerful ways to use a for loop is to loop over an array, running code on each item in the array. We can do this by using the for loop counter variable (usually `i`) as the index of your array.

        # Do This

        This program should loop over the array `buttons` and do two things to each button - change the background color to red, and change the height to 50 px.

        -   Add a second `setProperty` block inside the loop
        -   Change the target to `buttons[i]`
        -   Set the "height" property to 50

        ![expandable](https://images.code.org/df3d514bae5c23de9e0fbdf1d7798432-image-1512431649584.png)
      CSD U6 for loop click exit: |-
        # Knowing When to Stop

        If you clicked the button too many times in the last level, you got an error. Whenever you're writing code that repeats, you should think about when to _stop_ repeating.

        # Do This

        This program is similar to the previous one, but there is a conditional inside the event handler. You'll need to complete the conditional so that we don't try to toggle an LED that doesn't exist.

        _Would your code work without changes for a board with more or fewer LEDs? If not, could you modify it so it would?_
      CSD U6 for loop click exit_2018: |-
        # Knowing When to Stop

        If you clicked the button too many times in the last level, you got an error. Whenever you're writing code that repeats, you should think about when to _stop_ repeating.

        # Do This

        This program is similar to the previous one, but there is a conditional inside the event handler. You'll need to complete the conditional so that we don't try to toggle an LED that doesn't exist.

        _Would your code work without changes for a board with more or fewer LEDs? If not, could you modify it so it would?_
      CSD U6 for loop click exit_2019: |-
        # Knowing When to Stop

        If you clicked the button too many times in the last level, you got an error. Whenever you're writing code that repeats, you should think about when to _stop_ repeating.

        # Do This

        This program is similar to the previous one, but there is a conditional inside the event handler. You'll need to complete the conditional so that we don't try to toggle an LED that doesn't exist.

        _Would your code work without changes for a board with more or fewer LEDs? If not, could you modify it so it would?_
      CSD U6 for loop click predict question: |-
        # Make a Prediction

        Read through the code for this program and predict what will happen each time the button is clicked?
      CSD U6 for loop click predict question_2018: |-
        # Make a Prediction

        Read through the code for this program and predict what will happen each time the button is clicked?
      CSD U6 for loop click predict question_2019: |-
        # Make a Prediction

        Read through the code for this program and predict what will happen each time the button is clicked?
      CSD U6 for loop images: |-
        # Constructing a for loop from scratch

        Now that you've had some practice modifying for loops to process arrays, let's see if you can do it yourself.

        # Do This

        We've provided the design elements and an array to start with, but the rest is on you.

        -   Add an event handler to respond to the "thumbsup\_button" being clicked
        -   Place a _for loop_ inside the event handler
        -   Modify the exit condition of the _for loop_ so that it will run until it gets to the end of the array `images`
        -   Inside your _for loop_ change the current image to "icon://fa-thumbs-o-up"

        _Challenge: Can you add a second button that turns all of the images back to thumbs down?_
      CSD U6 for loop images_2018: |-
        # Constructing a for loop from scratch

        Now that you've had some practice modifying for loops to process arrays, let's see if you can do it yourself.

        # Do This

        We've provided the design elements and an array to start with, but the rest is on you.

        -   Add an event handler to respond to the "thumbsup\_button" being clicked
        -   Place a _for loop_ inside the event handler
        -   Modify the exit condition of the _for loop_ so that it will run until it gets to the end of the array `images`
        -   Inside your _for loop_ change the current image to "icon://fa-thumbs-o-up"

        _Challenge: Can you add a second button that turns all of the images back to thumbs down?_
      CSD U6 for loop images_2019: |-
        # Constructing a for loop from scratch

        Now that you've had some practice modifying for loops to process arrays, let's see if you can do it yourself.

        # Do This

        We've provided the design elements and an array to start with, but the rest is on you.

        -   Add an event handler to respond to the "thumbsup\_button" being clicked
        -   Place a _for loop_ inside the event handler
        -   Modify the exit condition of the _for loop_ so that it will run until it gets to the end of the array `images`
        -   Inside your _for loop_ change the current image to "icon://fa-thumbs-o-up"

        _Challenge: Can you add a second button that turns all of the images back to thumbs down?_
      CSD U6 for loop led bonus 1_2018: |-
        # Challenge: Add More Buttons

        Extend the program by adding more buttons that change the board to different colors.

        # Do This

        Add your new buttons in Design Mode and create event handlers to respond to your buttons and change the LED colors.
      CSD U6 for loop led bonus 2_2018: |-
        # Challenge: Color Patterns

        Extend the program by adding more buttons that create different patterns of light.

        # Do This

        Add your new buttons in Design Mode and create event handlers to respond to your buttons and change the LED colors.

        _Hint: As you design your patterns, consider whether a function with parameters could help simplify your program._
      CSD U6 for loop led bonus 3_2018: |-
        # Challenge: Music

        Use what you learned in the Making Music lesson to make the board play music when the lights change.

        # Do This

        Create some arrays of notes for different songs and add code to your event handlers to play your music.
      CSD U6 for loop led color_2019: |-
        # Bæta við lit

        Nú getur þú kveikt og slökkt á LED ljósunum, en nú skulum við bæta litum við.

        # Gerðu þetta

        Bættu atvikshöndlurum við hnappana "button\_red" and "button\_green" sem láta LED ljósin fá þessa liti (rauðan og grænan).
      CSD U6 for loop led function: |-
        # Switching Colors with a Function

        We could write a for loop for each different color that we want to set LEDs to, but that would be a lot of duplicate code that's _almost_ the same. This is the perfect place to use a _function with a parameter_! You've seen and used functions with parameters before, but now you're going to make one from scratch.

        # Do This

        Create a function called `setLedsColor` that takes a parameter `color` and uses it to change the color of all of the LEDs

        -   At the bottom of your program, drag out a function with parameter block ![expandable](https://images.code.org/bd6ec3d9a651cf760a7dc8e1949658c0-image-1512761901850.png)
        -   Change the name from `myFunction` to `setLedsColor`
        -   Change the parameter name from `n` to `color`
        -   Inside your function, add a _for loop_ that repeats until it reaches the end of `colorLeds`
        -   Inside your _for loop_, set the color of the current led to the parameter `color` (eg. `colorLeds[i].color(color)`

        We'll add event handlers that use this function in the next level, but for now you can test your function by your program and typing this into the debug console: `setLedsColor("blue")`
      CSD U6 for loop led function call: |-
        # Calling Your Function

        Now that you've created a function that can behave differently based on the parameter it is passed, we can use it in multiple different event handlers to change the lights to different colors.

        # Do This

        We'll start simple by just creating an event handler for "button\_red"

        -   Create a new event handler to respond to "button\_red"
        -   Inside your event handler, add a "call function with parameter" block
            ![expandable](https://images.code.org/ee8e026b59682066eccfc4795b5c5036-image-1512771755527.png)
        -   Change the name from `myFunction` to `setLedsColor`
        -   Change the parameter from `n` to "red" (note the quotation marks!)
        -   Test your program, the "Red" button should turn all of your LEDs red
      CSD U6 for loop led function call_2018: |-
        # Calling Your Function

        Now that you've created a function that can behave differently based on the parameter it is passed, we can use it in multiple different event handlers to change the lights to different colors.

        # Do This

        We'll start simple by just creating an event handler for "button\_red"

        -   Create a new event handler to respond to "button\_red"
        -   Inside your event handler, add a "call function with parameter" block
            ![expandable](https://images.code.org/ee8e026b59682066eccfc4795b5c5036-image-1512771755527.png)
        -   Change the name from `myFunction` to `setLedsColor`
        -   Change the parameter from `n` to "red" (note the quotation marks!)
        -   Test your program, the "Red" button should turn all of your LEDs red
      CSD U6 for loop led function finish: |-
        # Finish the App

        If your red button worked, the only thing left is to call your new function when all of the remaining buttons is pressed.

        # Do This

        For each of the remaining buttons (green, blue, and white):

        -   Create a new event handler
        -   Call your `setLedsColor` function with the appropriate color ("green", "blue", or "white")
        -   Test your program to make sure all of the buttons work

        When you've got all of your buttons working properly, click "Submit" to turn your program in.
      CSD U6 for loop led function finish_2018: |-
        # Finish the App

        If your red button worked, the only thing left is to call your new function when all of the remaining buttons is pressed.

        # Do This

        For each of the remaining buttons (green, blue, and white):

        -   Create a new event handler
        -   Call your `setLedsColor` function with the appropriate color ("green", "blue", or "white")
        -   Test your program to make sure all of the buttons work

        When you've got all of your buttons working properly, click "Submit" to turn your program in.
      CSD U6 for loop led function_2018: |-
        # Switching Colors with a Function

        We could write a for loop for each different color that we want to set LEDs to, but that would be a lot of duplicate code that's _almost_ the same. This is the perfect place to use a _function with a parameter_! You've seen and used functions with parameters before, but now you're going to make one from scratch.

        # Do This

        Create a function called `setLedsColor` that takes a parameter `color` and uses it to change the color of all of the LEDs

        -   At the bottom of your program, drag out a function with parameter block ![expandable](https://images.code.org/bd6ec3d9a651cf760a7dc8e1949658c0-image-1512761901850.png)
        -   Change the name from `myFunction` to `setLedsColor`
        -   Change the parameter name from `n` to `color`
        -   Inside your function, add a _for loop_ that repeats until it reaches the end of `colorLeds`
        -   Inside your _for loop_, set the color of the current led to the parameter `color` (eg. `colorLeds[i].color(color)`

        We'll add event handlers that use this function in the next level, but for now you can test your function by your program and typing this into the debug console: `setLedsColor("blue")`
      CSD U6 for loop led off: |-
        # Turning all the Color LEDs Off

        Now that you've got one button to turn the color LEDs on, you can make another turn them off.

        # Do This

        Add an event handler to "button\_off" with a for loop that turns each color LED off.
      CSD U6 for loop led off_2018: |-
        # Turning all the Color LEDs Off

        Now that you've got one button to turn the color LEDs on, you can make another turn them off.

        # Do This

        Add an event handler to "button\_off" with a for loop that turns each color LED off.
      CSD U6 for loop led off_2019: |-
        # Turning all the Color LEDs Off

        Now that you've got one button to turn the color LEDs on, you can make another turn them off.

        # Do This

        Add an event handler to "button\_off" with a for loop that turns each color LED off.
      CSD U6 for loop led on: |-
        # Turning all the Color LEDs On

        Now that you know how to use a _for loop_ to process all of the elements in an array, you can turn on all of the Color LEDs much more easily than before.

        # Do This

        We're going to start an app that will control all of the Color LEDs on your board. The first step is to wire up the button that turns all of the LEDs on.

        -   Add an event handler for "button\_on"
        -   Place a _for loop_ in your event handler that repeats until it reaches in the end of the array `colorLeds`
        -   Inside the for loop, call `colorLeds[i].on()` to turn on the current color LED
      CSD U6 for loop led on_2018: |-
        # Turning all the Color LEDs On

        Now that you know how to use a _for loop_ to process all of the elements in an array, you can turn on all of the Color LEDs much more easily than before.

        # Do This

        Over the next few levels, you'll create an app that will control all of the Color LEDs on your board. The first step is to wire up the button that turns all of the LEDs on.  (Don't worry about the rest of the comments in the workspace.  You'll work on those in later levels.)

        -   Add an event handler for "button\_on"
        -   Place a _for loop_ in your event handler that repeats until it reaches in the end of the array `colorLeds`
        -   Inside the for loop, call `colorLeds[i].on()` to turn on the current color LED
      CSD U6 for loop led on_2019: |-
        # Turning all the Color LEDs On

        Now that you know how to use a _for loop_ to process all of the elements in an array, you can turn on all of the Color LEDs much more easily than before.

        # Do This

        Over the next few levels, you'll create an app that will control all of the Color LEDs on your board. The first step is to wire up the button that turns all of the LEDs on.  (Don't worry about the rest of the comments in the workspace.  You'll work on those in later levels.)

        -   Add an event handler for "button\_on"
        -   Place a _for loop_ in your event handler that repeats until it reaches in the end of the array `colorLeds`
        -   Inside the for loop, call `colorLeds[i].on()` to turn on the current color LED
      CSD U6 for loop led personalize_2019: |-
        # Gerðu þitt eigið

        Hugsaðu þér nýjan hnapp sem þú mundir vilja bæta við þetta verkefni. Ekki gleyma öðrum valkostum fyrir LED ljósin svo sem að láta þau slá (pulse) og blikka (blink).

        # Gerðu þetta

        Bættu nýjum hnappi við verkefnið og láttu hann gera eitthvað sem þú ákveður.
      CSD U6 for loop list.length: |-
        # Array Length

        In the last program we told the loop to run three times with the code `for (var i = 0; i < 3; i++)`. This works, but we could write smarter programs by using the length of the array to decide how many times to loop.

        # Do This

        Change the exit condition of this for loop so that it runs while `i < buttons.length`.
      CSD U6 for loop list.length_2018: |-
        # Array Length

        In the last program we told the loop to run three times with the code `for (var i = 0; i < 3; i++)`. This works, but we could write smarter programs by using the length of the array to decide how many times to loop.

        # Do This

        Change the exit condition of this for loop so that it runs while `i < buttons.length`.
      CSD U6 for loop list.length_2019: |-
        # Array Length

        In the last program we told the loop to run three times with the code `for (var i = 0; i < 3; i++)`. This works, but we could write smarter programs by using the length of the array to decide how many times to loop.

        # Do This

        Change the exit condition of this for loop so that it runs while `i < buttons.length`.
      CSD U6 frequency: |-
        # Frequency

        This buzzer controller has been expanded to control frequency as well, but the code isn't finished yet.

        # Do This

        -   Using the `duration` variable as a model, create a `frequency` variable that gets the value from the _frequency_ slider.
        -   Modify the line of code that makes the buzzer sound so that it uses the `frequency` variable rather than the default frequency of `500`.
        -   Run your code, then change the frequency and the duration to hear the difference in the buzzer.  (Don't forget to hit the button after you make a change!)
      CSD U6 frequency_2018: |-
        # Frequency

        This buzzer controller has been expanded to control frequency as well, but the code isn't finished yet.

        # Do This

        -   Using the `duration` variable as a model, create a `frequency` variable that gets the value from the _frequency_ slider.
        -   Modify the line of code that makes the buzzer sound so that it uses the `frequency` variable rather than the default frequency of `500`.
        -   Run your code, then change the frequency and the duration to hear the difference in the buzzer.  (Don't forget to hit the button after you make a change!)
      CSD U6 frequency_2019: |-
        # Frequency

        This buzzer controller has been expanded to control frequency as well, but the code isn't finished yet.

        # Do This

        -   Using the `duration` variable as a model, create a `frequency` variable that gets the value from the _frequency_ slider.
        -   Modify the line of code that makes the buzzer sound so that it uses the `frequency` variable rather than the default frequency of `500`.
        -   Run your code, then change the frequency and the duration to hear the difference in the buzzer.  (Don't forget to hit the button after you make a change!)
      CSD U6 functions paramters video_2019: |-
        ## Spurningar til að hugleiða

        -   Hvernig gera stikar (parameters) föll gagnlegri?
        -   Hvernig veistu hvenær þú getur sameinað mörg föll í eitt?
      CSD U6 game project board events: |-
        # Board Events

        Go back to the Events section of your activity guide and find any events that respond to your board (ones that would use `onBoardEvent()`). Create event handlers for each of those now. If these events rely on functions you haven't written yet, just leave yourself a comment in the code.
      CSD U6 game project board events_2018: |-
        # Board Events

        Go back to the Events section of your activity guide and find any events that respond to your board (ones that would use `onBoardEvent()`). Create event handlers for each of those now. If these events rely on functions you haven't written yet, just leave yourself a comment in the code.
      CSD U6 game project board events_2019: |-
        # Board Events

        Go back to the Events section of your activity guide and find any events that respond to your board (ones that would use `onBoardEvent()`). Create event handlers for each of those now. If these events rely on functions you haven't written yet, just leave yourself a comment in the code.
      CSD U6 game project finish: |-
        # Finishing Touches and Testing

        At this point you should have most of your program in place. Now you need to add whatever finishing touches are needed and do a little testing. When your app is ready, have your classmates try it out. See if you can find any bugs, confusing design choices, or missing features you'd like to work on.

        Once you're all done with this version of your program, click Submit to turn it in.
      CSD U6 game project finish_2018: |-
        # Finishing Touches and Testing

        At this point you should have most of your program in place. Now you need to add whatever finishing touches are needed and do a little testing. When your app is ready, have your classmates try it out. See if you can find any bugs, confusing design choices, or missing features you'd like to work on.

        Once you're all done with this version of your program, click Submit to turn it in.
      CSD U6 game project finish_2019: |-
        # Finishing Touches and Testing

        At this point you should have most of your program in place. Now you need to add whatever finishing touches are needed and do a little testing. When your app is ready, have your classmates try it out. See if you can find any bugs, confusing design choices, or missing features you'd like to work on.

        Once you're all done with this version of your program, click Submit to turn it in.
      CSD U6 game project functions call: |-
        # Calling your Functions

        With your functions defined, you can can call them wherever you need. Go through your event handlers, or anywhere else in your program that your function should be used, and add calls to the function you created.
      CSD U6 game project functions call_2018: |-
        # Calling your Functions

        With your functions defined, you can can call them wherever you need. Go through your event handlers, or anywhere else in your program that your function should be used, and add calls to the function you created.
      CSD U6 game project functions call_2019: |-
        # Calling your Functions

        With your functions defined, you can can call them wherever you need. Go through your event handlers, or anywhere else in your program that your function should be used, and add calls to the function you created.
      CSD U6 game project functions define: "# Define Your Functions\n\nDefine all
        of your functions at the bottom of the program, under the comment `// Create
        your functions here`.\n\nRight now we're only worrying about writing the function
        _definitions_, the part which looks like:\n\n    function myFunction() {\n
        \   \t// Things my function does\n    }"
      CSD U6 game project functions define_2018: "# Define Your Functions\n\nDefine
        all of your functions at the bottom of the program, under the comment `//
        Create your functions here`.\n\nRight now we're only worrying about writing
        the function _definitions_, the part which looks like:\n\n    function myFunction()
        {\n    \t// Things my function does\n    }"
      CSD U6 game project functions define_2019: "# Define Your Functions\n\nDefine
        all of your functions at the bottom of the program, under the comment `//
        Create your functions here`.\n\nRight now we're only worrying about writing
        the function _definitions_, the part which looks like:\n\n    function myFunction()
        {\n    \t// Things my function does\n    }"
      CSD U6 game project screen links: |-
        # UI Element Events

        Now that all of your screens are designed, you can add any event handlers that will respond to _screen interaction_. These should be listed in the "Events" section of your activity guide. If you run into new events that you hadn't thought of in the planning stage, make sure you add them to your project guide.

        Don't worry about making these completely functional yet. If your events rely on board elements or your own functions, we'll take care of that in later levels.
      CSD U6 game project screen links_2018: |-
        # UI Element Events

        Now that all of your screens are designed, you can add any event handlers that will respond to _screen interaction_. These should be listed in the "Events" section of your activity guide. If you run into new events that you hadn't thought of in the planning stage, make sure you add them to your project guide.

        Don't worry about making these completely functional yet. If your events rely on board elements or your own functions, we'll take care of that in later levels.
      CSD U6 game project screen links_2019: |-
        # UI Element Events

        Now that all of your screens are designed, you can add any event handlers that will respond to _screen interaction_. These should be listed in the "Events" section of your activity guide. If you run into new events that you hadn't thought of in the planning stage, make sure you add them to your project guide.

        Don't worry about making these completely functional yet. If your events rely on board elements or your own functions, we'll take care of that in later levels.
      CSD U6 game project screens: |-
        # Create Your Screens

        The first thing you'll need to do is create all of the screens that you've sketched in your planning guide.

        # Do This

        Use Design Mode to create all of the screens that your program will need. Don't forget to **pick sensible IDs** for all of your design elements.
      CSD U6 game project screens_2018: |-
        # Create Your Screens

        The first thing you'll need to do is create all of the screens that you've sketched in your planning guide.

        # Do This

        Use Design Mode to create all of the screens that your program will need. Don't forget to **pick sensible IDs** for all of your design elements.
      CSD U6 game project screens_2019: |-
        # Create Your Screens

        The first thing you'll need to do is create all of the screens that you've sketched in your planning guide.

        # Do This

        Use Design Mode to create all of the screens that your program will need. Don't forget to **pick sensible IDs** for all of your design elements.
      CSD U6 get toggle: |-
        # change

        This program has events that detect three different changes: the toggle switch, the interval slider, and the duration slider.  Because there are so many different things that cause the LED and buzzer to reset, it uses functions to organize the code.

        # Do This

        -   Read the `updateLED` function to see what it does.
        -   Add code to `updateBuzzer` to make the buzzer only turn on when the toggle switch is open.
      CSD U6 get toggle_2018: |-
        # change

        This program has events that detect three different changes: the toggle switch, the interval slider, and the frequency slider.  Because there are so many different things that cause the LED and buzzer to reset, it uses functions to organize the code.

        # Do This

        -   Read the `updateLED` function to see what it does.
        -   Add code to `updateBuzzer` to make the buzzer only turn on when the toggle switch is open.
      CSD U6 get toggle_2019: |-
        # change

        This program has events that detect three different changes: the toggle switch, the interval slider, and the frequency slider.  Because there are so many different things that cause the LED and buzzer to reset, it uses functions to organize the code.

        # Do This

        -   Read the `updateLED` function to see what it does.
        -   Add code to `updateBuzzer` to make the buzzer only turn on when the toggle switch is open.
      CSD U6 getProperty Demo: |-
        # Updating Properties

        Here's an example of an app that uses both `getProperty` and `setProperty` to update elements on the screen. Read through the code, and then test it out by filling out the input fields and clicking "Save"

        _Note: you don't need to change any code here, but read through the provided code to see how it works._
      CSD U6 getProperty Demo_2018: |-
        # Updating Properties

        Here's an example of an app that uses both `getProperty` and `setProperty` to update elements on the screen. Read through the code, and then test it out by filling out the input fields and clicking "Save"

        _Note: you don't need to change any code here, but read through the provided code to see how it works._
      CSD U6 getProperty Demo_2019: |-
        # Updating Properties

        Here's an example of an app that uses both `getProperty` and `setProperty` to update elements on the screen. Read through the code, and then test it out by filling out the input fields and clicking "Save"

        _Note: you don't need to change any code here, but read through the provided code to see how it works._
      CSD U6 getProperty board predict: Predict Level (See contained level for markdown)
      CSD U6 getProperty board predict_2018: Predict Level (See contained level for
        markdown)
      CSD U6 getProperty board predict_2019: Predict Level (See contained level for
        markdown)
      CSD U6 getProperty buzzer: |-
        # Using the Circuit Playground

        Here's the same code you saw in the last level, but this time there's another dropdown menu to control the buzzer.  You'll have to add the code to make it work.

        # Do This

        -   Using the LED code as a model, add new code inside the buttonL event that will play a long or short buzz according to the chosen value property of the *buzzer\_input* dropdown menu.
        -   Add new code that will turn the buzzer off when the right button is pressed.
            -   (Hint: the event is already in the code.)
      CSD U6 getProperty buzzer_2018: |-
        # Using the Circuit Playground

        Here's the same code you saw in the last level, but this time there's another dropdown menu to control the buzzer.  You'll have to add the code to make it work.

        # Do This

        -   Using the LED code as a model, add new code inside the buttonL event that will play a long or short buzz according to the chosen value property of the *buzzer\_input* dropdown menu.
        -   Add new code that will turn the buzzer off when the right button is pressed.
            -   (Hint: the event is already in the code.)
      CSD U6 getProperty buzzer_2019: |-
        # Using the Circuit Playground

        Here's the same code you saw in the last level, but this time there's another dropdown menu to control the buzzer.  You'll have to add the code to make it work.

        # Do This

        -   Using the LED code as a model, add new code inside the buttonL event that will play a long or short buzz according to the chosen value property of the *buzzer\_input* dropdown menu.
        -   Add new code that will turn the buzzer off when the right button is pressed.
            -   (Hint: the event is already in the code.)
      CSD U6 getProperty dropdown: |-
        # Dropdowns

        Text Inputs are nice when you want users to be able to enter _anything_ they want, but often you want to restrict them to just a few choices. For example, if you want your user to pick a color, you probably want to make sure they can only choose colors that will actually work.

        The provided dropdown with the ID "color\_input" allows a user to choose from a handful of background colors. When the "Set Color" button is clicked, the screen will turn that color.

        # Do This

        -   Inside the event block, create a variable called `color` and assign it a value using the `getProperty` block.
            -   Hint: You'll need to use the "value" property to get the user's choice.
        -   Use the `setProperty` block to set the "background-color" property of "screen1" to your variable `color`.
            -   Hint: Make sure you type `color` without quotation marks.
        -   Test your program by picking a color and clicking "Set Color".
      CSD U6 getProperty dropdown_2018: |-
        # Dropdowns

        Text Inputs are nice when you want users to be able to enter _anything_ they want, but often you want to restrict them to just a few choices. For example, if you want your user to pick a color, you probably want to make sure they can only choose colors that will actually work.

        The provided dropdown with the ID "color\_input" allows a user to choose from a handful of background colors. When the "Set Color" button is clicked, the screen will turn that color.

        # Do This

        -   Inside the event block, create a variable called `color` and assign it a value using the `getProperty` block.
            -   Hint: You'll need to use the "value" property to get the user's choice.
        -   Use the `setProperty` block to set the "background-color" property of "screen1" to your variable `color`.
            -   Hint: Make sure you type `color` without quotation marks.
        -   Test your program by picking a color and clicking "Set Color".
      CSD U6 getProperty dropdown_2019: |-
        # Dropdowns

        Text Inputs are nice when you want users to be able to enter _anything_ they want, but often you want to restrict them to just a few choices. For example, if you want your user to pick a color, you probably want to make sure they can only choose colors that will actually work.

        The provided dropdown with the ID "color\_input" allows a user to choose from a handful of background colors. When the "Set Color" button is clicked, the screen will turn that color.

        # Do This

        -   Inside the event block, create a variable called `color` and assign it a value using the `getProperty` block.
            -   Hint: You'll need to use the "value" property to get the user's choice.
        -   Use the `setProperty` block to set the "background-color" property of "screen1" to your variable `color`.
            -   Hint: Make sure you type `color` without quotation marks.
        -   Test your program by picking a color and clicking "Set Color".
      CSD U6 getProperty input: |-
        # getProperty and Variables

        This program uses the `name` variable to display the name typed into "name\_input" when the Submit button is clicked. It should do the same for *friend\_input* and *friend\_output*, but it's missing a block.

        # Do This

        -   Read the code and comments, then run the program to see how it works. (Make sure you type in your name and your friend's name before hitting "Submit".)
        -   Use a `getProperty` block to store the text property of *friend\_input* into your the variable "friend\_name". ([Show me where.](#triggercallout=code_triggered))
      CSD U6 getProperty input_2018: |-
        # getProperty and Variables

        This program uses the `name` variable to display the name typed into "name\_input" when the Submit button is clicked. It should do the same for *friend\_input* and *friend\_output*, but it's missing a block.

        # Do This

        -   Read the code and comments, then run the program to see how it works. (Make sure you type in your name and your friend's name before hitting "Submit".)
        -   Use a `getProperty` block to store the text property of *friend\_input* into your the variable "friend\_name". ([Show me where.](#triggercallout=code_triggered))
      CSD U6 getProperty input_2019: |-
        # getProperty and Variables

        This program uses the `name` variable to display the name typed into "name\_input" when the Submit button is clicked. It should do the same for *friend\_input* and *friend\_output*, but it's missing a block.

        # Do This

        -   Read the code and comments, then run the program to see how it works. (Make sure you type in your name and your friend's name before hitting "Submit".)
        -   Use a `getProperty` block to store the text property of *friend\_input* into your the variable "friend\_name". ([Show me where.](#triggercallout=code_triggered))
      CSD U6 getters debug: |-
        # LED and Buzzer Controller

        This program operates the LED and the buzzer, but it has some problems.

        # Do This

        -   Read the program to understand how it is supposed to work.
        -   Find and correct the bugs so that the program works properly.
      CSD U6 getters debug_2018: |-
        # LED and Buzzer Controller

        This program operates the LED and the buzzer, but it has some problems.

        # Do This

        -   Read the program to understand how it is supposed to work.
        -   Find and correct the bugs so that the program works properly.
      CSD U6 getters debug_2019: |-
        # LED and Buzzer Controller

        This program operates the LED and the buzzer, but it has some problems.

        # Do This

        -   Read the program to understand how it is supposed to work.
        -   Find and correct the bugs so that the program works properly.
      CSD U6 goalie: |-
        # Updating Values with Data

        In this program the goalie is trying to block the soccer ball, but right now the ball isn't moving.

        # Do This

        -   Use the counter pattern to update the ball's `x` value so that it moves across the screen.
      CSD U6 goalie_2018: |-
        # Updating Values with Data

        In this program the goalie is trying to block the soccer ball, but right now the ball isn't moving.

        # Do This

        -   Use the counter pattern to update the ball's `x` value so that it moves across the screen.
      CSD U6 goalie_2019: |-
        # Updating Values with Data

        In this program the goalie is trying to block the soccer ball, but right now the ball isn't moving.

        # Do This

        -   Use the counter pattern to update the ball's `x` value so that it moves across the screen.
      CSD U6 hardware software video_2019: |-
        ## Spurningar til að hugleiða

        -   Hver er munurinn á vélbúnaði og hugbúnaði?
        -   Hvað gerir stýrikerfi tölvu?
      CSD U6 interval: Predict Level
      CSD U6 interval predict: |-
        # Interval

        Now we're using the slider to affect the behavior of the LED.   Just as we could change the values for the frequency and duration of the buzzer, we can change the value for the blink or pulse interval of the LED.

        # Do This

        -   Read the code and predict what the program will do, then hit "Run" to test your prediction.
      CSD U6 interval predict_2018: |-
        # Interval

        Now we're using the slider to affect the behavior of the LED.   Just as we could change the values for the frequency and duration of the buzzer, we can change the value for the blink or pulse interval of the LED.

        # Do This

        -   Read the code and predict what the program will do, then hit "Run" to test your prediction.
      CSD U6 interval predict_2019: |-
        # Interval

        Now we're using the slider to affect the behavior of the LED.   Just as we could change the values for the frequency and duration of the buzzer, we can change the value for the blink or pulse interval of the LED.

        # Do This

        -   Read the code and predict what the program will do, then hit "Run" to test your prediction.
      CSD U6 interval_2018: Predict Level
      CSD U6 interval_2019: Predict Level
      CSD U6 investigate orientation: "# Pitch and Roll\n\nThis program displays the
        board's pitch and roll, and it will also change colors depending on their
        values.  \n\n# Do This\n\nMake the program change the following colors by
        tilting the board to the correct pitch and roll.\n\n<div style=\"display:inline-block;
        background-color: skyblue; height: 30px; width:30px\">&nbsp;</div> Pitch:
        0 | Roll: -20\n\n<p/>\n\n<div style=\"display:inline-block; background-color:
        burlywood; height: 30px; width:30px\">&nbsp;</div> Pitch: 30 | Roll: 0\n\n<p/>\n\n<div
        style=\"display:inline-block; background-color: mistyrose; height: 30px; width:30px\">&nbsp;</div>
        Pitch: -15 | Roll: 10\n\n<p/>\n\n<div style=\"display:inline-block; background-color:
        yellowgreen; height: 30px; width:30px\">&nbsp;</div> Pitch: 5 | Roll: -25\n\n<p/>\n\n<div
        style=\"display:inline-block; background-color: thistle; height: 30px; width:30px\">&nbsp;</div>
        Pitch: 10 | Roll: 30\n\n<p/>\n\nWhich way should you tilt to get a positive
        pitch?\n\nWhich way should you tilt to get a negative roll?"
      CSD U6 investigate orientation_2018: "# Pitch and Roll\n\nThis program displays
        the board's pitch and roll, and it will also change colors depending on their
        values.  \n\n# Do This\n\nMake the program change the following colors by
        tilting the board to the correct pitch and roll.\n\n<div style=\"display:inline-block;
        background-color: skyblue; height: 30px; width:30px\">&nbsp;</div> Pitch:
        0 | Roll: -20\n\n<p/>\n\n<div style=\"display:inline-block; background-color:
        burlywood; height: 30px; width:30px\">&nbsp;</div> Pitch: 30 | Roll: 0\n\n<p/>\n\n<div
        style=\"display:inline-block; background-color: mistyrose; height: 30px; width:30px\">&nbsp;</div>
        Pitch: -15 | Roll: 10\n\n<p/>\n\n<div style=\"display:inline-block; background-color:
        yellowgreen; height: 30px; width:30px\">&nbsp;</div> Pitch: 5 | Roll: -25\n\n<p/>\n\n<div
        style=\"display:inline-block; background-color: thistle; height: 30px; width:30px\">&nbsp;</div>
        Pitch: 10 | Roll: 30\n\n<p/>\n\nWhich way should you tilt to get a positive
        pitch?\n\nWhich way should you tilt to get a negative roll?"
      CSD U6 investigate orientation_2019: "# Pitch and Roll\n\nThis program displays
        the board's pitch and roll, and it will also change colors depending on their
        values.  \n\n# Do This\n\nMake the program change the following colors by
        tilting the board to the correct pitch and roll.\n\n<div style=\"display:inline-block;
        background-color: skyblue; height: 30px; width:30px\">&nbsp;</div> Pitch:
        0 | Roll: -20\n\n<p/>\n\n<div style=\"display:inline-block; background-color:
        burlywood; height: 30px; width:30px\">&nbsp;</div> Pitch: 30 | Roll: 0\n\n<p/>\n\n<div
        style=\"display:inline-block; background-color: mistyrose; height: 30px; width:30px\">&nbsp;</div>
        Pitch: -15 | Roll: 10\n\n<p/>\n\n<div style=\"display:inline-block; background-color:
        yellowgreen; height: 30px; width:30px\">&nbsp;</div> Pitch: 5 | Roll: -25\n\n<p/>\n\n<div
        style=\"display:inline-block; background-color: thistle; height: 30px; width:30px\">&nbsp;</div>
        Pitch: 10 | Roll: 30\n\n<p/>\n\nWhich way should you tilt to get a positive
        pitch?\n\nWhich way should you tilt to get a negative roll?"
      CSD U6 iter create notes: |-
        # Music Player

        This program lets you play music by waving a wand over the different notes, but it's missing a function definition.

        # Do This

        -   Create a `checkNotes()` function that will call `checkNote(note)` on everything in the "notes" array.
      CSD U6 iter create notes_2018: |-
        # Music Player

        This program lets you play music by waving a wand over the different notes, but it's missing a function definition.

        # Do This

        -   Create a `checkNotes()` function that will call `checkNote(note)` on everything in the "notes" array.
      CSD U6 iter create notes_2019: |-
        # Music Player

        This program lets you play music by waving a wand over the different notes, but it's missing a function definition.

        # Do This

        -   Create a `checkNotes()` function that will call `checkNote(note)` on everything in the "notes" array.
      CSD U6 iter modify bugs: |-
        # Bug Shaker

        This program shakes bugs around when the board is shaken, but it's only working for one bug.

        # Do This

        -   Change the `moveBugs()` function so that it calls `moveBug(color)` on every bug color.
            -   (Hint: Look at the `detectHits()` function for clues how to do this.)
      CSD U6 iter modify bugs_2018: |-
        # Bug Shaker

        This program shakes bugs around when the board is shaken, but it's only working for one bug.

        # Do This

        -   Change the `moveBugs()` function so that it calls `moveBug(color)` on every bug color.
            -   (Hint: Look at the `detectHits()` function for clues how to do this.)
      CSD U6 iter modify bugs_2019: |-
        # Bug Shaker

        This program shakes bugs around when the board is shaken, but it's only working for one bug.

        # Do This

        -   Change the `moveBugs()` function so that it calls `moveBug(color)` on every bug color.
            -   (Hint: Look at the `detectHits()` function for clues how to do this.)
      CSD U6 iter predict bubbles: "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
      CSD U6 iter predict bubbles contained: |-
        # Fish Bubbles

        This program uses the sound sensor in the same way as the clouds program.  How many bubbles will move when you blow on the board?
      CSD U6 iter predict bubbles contained_2018: |-
        # Fish Bubbles

        This program uses the sound sensor in the same way as the clouds program.  How many bubbles will move when you blow on the board?
      CSD U6 iter predict bubbles contained_2019: |-
        # Fish Bubbles

        This program uses the sound sensor in the same way as the clouds program.  How many bubbles will move when you blow on the board?
      CSD U6 iter predict bubbles_2018: "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
      CSD U6 iter predict bubbles_2019: "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
      CSD U6 light pattern challenge_2018: "# Áskorun: Fleiri mynstur\\\r\n\n\\\r\nBættu
        nokkrum mynstrum í appið þitt. Bættu við mynstri frá félaga ef þú vilt. Gættu
        þess að setja hvert mynstur í sitt eigið fall."
      CSD U6 light pattern challenge_2019: "# Áskorun: Fleiri mynstur\\\r\n\n\\\r\nBættu
        nokkrum mynstrum í appið þitt. Bættu við mynstri frá félaga ef þú vilt. Gættu
        þess að setja hvert mynstur í sitt eigið fall."
      CSD U6 light pattern off: |-
        # Turning It Off

        When you start this app your lights are off, but as soon as choose a pattern, there's no way to turn the lights back off!

        # Do This

        Create a function that turns all of the LEDs off, and then add a "Off" button to your app and make it turn off all of the color LEDs.
      CSD U6 light pattern off_2018: |-
        # Turning It Off

        When you start this app your lights are off, but as soon as choose a pattern, there's no way to turn the lights back off!

        # Do This

        Create a function that turns all of the LEDs off, and then add a "Off" button to your app and make it turn off all of the color LEDs.
      CSD U6 light pattern off_2019: |-
        # Turning It Off

        When you start this app your lights are off, but as soon as you choose a pattern, there's no way to turn the lights back off!

        # Do This

        Create a function that turns all of the LEDs off, and then add a "Off" button to your app and make it turn off all of the color LEDs.
      CSD U6 light show predict: |-
        # Put on a Light Show

        This app lets you put on a light show with the LED.

        Look at the code with your partner and answer the following questions:

        -   What does this line of code do: `setProperty("screen", "background-color", rgb(randomNumber(0,255), randomNumber(0,255), randomNumber(0,255)));`?

        Once you have answered the question, run the code and click the buttons to see what happens.
      CSD U6 light show predict_2018: |-
        # Put on a Light Show

        This app lets you put on a light show with the LED.

        Look at the code with your partner and answer the following questions:

        -   What does this line of code do: `setProperty("screen", "background-color", rgb(randomNumber(0,255), randomNumber(0,255), randomNumber(0,255)));`?

        Once you have answered the question, run the code and click the buttons to see what happens.
      CSD U6 light show predict_2019: |-
        # Put on a Light Show

        This app lets you put on a light show with the LED.

        Look at the code with your partner and answer the following questions:

        -   What does this line of code do: `setProperty("screen", "background-color", rgb(randomNumber(0,255), randomNumber(0,255), randomNumber(0,255)));`?

        Once you have answered the question, run the code and click the buttons to see what happens.
      CSD U6 move motorcycle: |-
        # Movement with Properties

        Earlier we used `setProperty` to change the x and y position of elements on the screen, but we could only move them to either a single specific location, or a random location. By using `getProperty` to find out an element's current position, we can use the **counter pattern** from Unit 3 to update that position.

        # Do This

        -   Read the program and discuss with your partner how the left button makes the motorcycle go up.
        -   Using the working left button as an example, program the right button to make the motorcycle go down.
      CSD U6 move motorcycle_2018: |-
        # Movement with Properties

        Earlier we used `setProperty` to change the x and y position of elements on the screen, but we could only move them to either a single specific location, or a random location. By using `getProperty` to find out an element's current position, we can use the **counter pattern** from Unit 3 to update that position.

        # Do This

        -   Read the program and discuss with your partner how the left button makes the motorcycle go up.
        -   Using the working left button as an example, program the right button to make the motorcycle go down.
      CSD U6 move motorcycle_2019: |-
        # Movement with Properties

        Earlier we used `setProperty` to change the x and y position of elements on the screen, but we could only move them to either a single specific location, or a random location. By using `getProperty` to find out an element's current position, we can use the **counter pattern** from Unit 3 to update that position.

        # Do This

        -   Read the program and discuss with your partner how the left button makes the motorcycle go up.
        -   Using the working left button as an example, program the right button to make the motorcycle go down.
      CSD U6 params create colors: |-
        # Color Picker

        In this program, pressing the buttons at the bottom of the screen changes the color of the images and the color LEDs.

        # Do This

        -   Create a function `chooseColor(color)` that changes each of the images and the color LEDs to the given color.
        -   Call your function in the event blocks so that all the buttons work.
      CSD U6 params create colors_2018: |-
        # Color Picker

        In this program, pressing the buttons at the bottom of the screen changes the color of the images and the color LEDs.

        # Do This

        -   Create a function `chooseColor(color)` that changes each of the images and the color LEDs to the given color.
        -   Call your function in the event blocks so that all the buttons work.
      CSD U6 params create colors_2019: |-
        # Color Picker

        In this program, pressing the buttons at the bottom of the screen changes the color of the images and the color LEDs.

        # Do This

        -   Create a function `chooseColor(color)` that changes each of the images and the color LEDs to the given color.
        -   Call your function in the event blocks so that all the buttons work.
      CSD U6 params modify clouds_2019: |-
        # Ský

        Þetta forrit lætur ský hreyfast þegar þú blæst á hljóðnemann, en forritið er óklárað.

        # Gerðu þetta

        -   Búðu til nýtt fall `moveCloud(name)` sem getur fært ský með því að tilgreina heiti þess.
            -   (Vísbending: þú munt nota næstum þvi sama kóðann og er í  `moveCloud0` fallinu)
        -   Kallaðu á nýja `moveCloud(name)` fallið þitt innan í atvikskubbnum, einu sinni fyrir hvert heiti skýs.
            -   (Vísbending: þetta er svipað því hvernig kallað er oft á `loopCloud(name)` fallið.)
      CSD U6 params predict contained: |-
        # Bug Crawl

        Look at the program below, paying special attention to the function `crawl(bug)`.  What happens if you press the left or right button?
      CSD U6 params predict contained_2018: |-
        # Bug Crawl

        Look at the program below, paying special attention to the function `crawl(bug)`.  What happens if you press the left or right button?
      CSD U6 params predict contained_2019: |-
        # Bug Crawl

        Look at the program below, paying special attention to the function `crawl(bug)`.  What happens if you press the left or right button?
      CSD U6 params starchaser 1: |-
        # Make your `loopStar(color)` function

        Right now only the red star works, so you'll need to change this code.

        # Do This

        -   Use the code from the `loopRedStar()` function to create a `loopStar(color)` function that will work with any star.
        -   Test your function by calling `loopStar("red")` and `loopStar("blue")` inside the `loopStars()` function.
      CSD U6 params starchaser 1_2018: |-
        # Make your `loopStar(color)` function

        Right now only the red star works, so you'll need to change this code.

        # Do This

        -   Use the code from the `loopRedStar()` function to create a `loopStar(color)` function that will work with any star.
        -   Test your function by calling `loopStar("red")` and `loopStar("blue")` inside the `loopStars()` function.
      CSD U6 params starchaser 1_2019: |-
        # Make your `loopStar(color)` function

        Right now only the red star works, so you'll need to change this code.

        # Do This

        -   Use the code from the `loopRedStar()` function to create a `loopStar(color)` function that will work with any star.
        -   Test your function by calling `loopStar("red")` and `loopStar("blue")` inside the `loopStars()` function.
      CSD U6 params starchaser 2: |-
        # Star Chaser

        Now you'll need to make all the stars loop around the screen.

        # Do This

        -   Use a `for` loop inside your `loopStars()` function to make every star in "starArray" loop around the screen.
      CSD U6 params starchaser 2_2018: |-
        # Star Chaser

        Now you'll need to make all the stars loop around the screen.

        # Do This

        -   Use a `for` loop inside your `loopStars()` function to make every star in "starArray" loop around the screen.
      CSD U6 params starchaser 2_2019: |-
        # Star Chaser

        Now you'll need to make all the stars loop around the screen.

        # Do This

        -   Use a `for` loop inside your `loopStars()` function to make every star in "starArray" loop around the screen.
      CSD U6 params starchaser 3: |-
        # Star Chaser

        All the stars loop, but you can still only catch the red star.

        # Do This

        -   Use code from the `moveRedStar()` function to make a `moveStar(color)` function that can move any star.
        -   Use code from the `checkRedStar()` function to make a `checkStar(color)` function that works for any star.
        -   Test your code by calling `checkStar("red")` and `checkStar("blue")` inside your event block.
      CSD U6 params starchaser 3_2018: |-
        # Star Chaser

        All the stars loop, but you can still only catch the red star.

        # Do This

        -   Use code from the `moveRedStar()` function to make a `moveStar(color)` function that can move any star.
        -   Use code from the `checkRedStar()` function to make a `checkStar(color)` function that works for any star.
        -   Test your code by calling `checkStar("red")` and `checkStar("blue")` inside your event block.
      CSD U6 params starchaser 3_2019: |-
        # Star Chaser

        All the stars loop, but you can still only catch the red star.

        # Do This

        -   Use code from the `moveRedStar()` function to make a `moveStar(color)` function that can move any star.
        -   Use code from the `checkRedStar()` function to make a `checkStar(color)` function that works for any star.
        -   Test your code by calling `checkStar("red")` and `checkStar("blue")` inside your event block.
      CSD U6 params starchaser 4: |-
        # Star Chaser

        Now make it work for all the stars

        # Do This

        -   Create a `checkStars()` functions that uses a `for` loop to check every star in the star array.
        -   Test your code by calling the `checkStars()` function inside the event block.
      CSD U6 params starchaser 4_2018: |-
        # Star Chaser

        Now make it work for all the stars

        # Do This

        -   Create a `checkStars()` functions that uses a `for` loop to check every star in the star array.
        -   Test your code by calling the `checkStars()` function inside the event block.
      CSD U6 params starchaser 4_2019: |-
        # Star Chaser

        Now make it work for all the stars

        # Do This

        -   Create a `checkStars()` functions that uses a `for` loop to check every star in the star array.
        -   Test your code by calling the `checkStars()` function inside the event block.
      CSD U6 params starchaser 5: |-
        # Star Chaser

        Now you can add extra stars, and your functions will work with them, too.

        # Do This

        -   In design mode, copy one of the stars, and change its name and color to "yellow".
        -   Add a new element, "yellow", to your star array.
        -   Test the game with your new star.
      CSD U6 params starchaser 5_2018: |-
        # Star Chaser

        Now you can add extra stars, and your functions will work with them, too.

        # Do This

        -   In design mode, copy one of the stars, and change its name and color to "yellow".
        -   Add a new element, "yellow", to your star array.
        -   Test the game with your new star.
      CSD U6 params starchaser 5_2019: |-
        # Star Chaser

        Now you can add extra stars, and your functions will work with them, too.

        # Do This

        -   In design mode, copy one of the stars, and change its name and color to "yellow".
        -   Add a new element, "yellow", to your star array.
        -   Test the game with your new star.
      CSD U6 params starchaser challenge 1_2018: |-
        # Star Chaser

        Now that you have a working game, you can challenge yourself with some different features.

        # Do This

        -   Start the user with 5 "lives", and take one away every time the user touches the **wrong** star.
        -   Make an end screen, and change to that screen when the user runs out of lives.
      CSD U6 params starchaser challenge 1_2019: |-
        # Star Chaser

        Now that you have a working game, you can challenge yourself with some different features.

        # Do This

        -   Start the user with 5 "lives", and take one away every time the user touches the **wrong** star.
        -   Make an end screen, and change to that screen when the user runs out of lives.
      CSD U6 params starchaser challenge 2_2018: |-
        # Star Chaser

        Now that you have a working game, you can challenge yourself with some different features.

        # Do This

        -   Make the player go back to the middle of the screen when the left button is pressed.
      CSD U6 params starchaser challenge 2_2019: |-
        # Star Chaser

        Now that you have a working game, you can challenge yourself with some different features.

        # Do This

        -   Make the player go back to the middle of the screen when the left button is pressed.
      CSD U6 params starchaser intro: |-
        # Star Chaser

        In this game, the user tries to catch the stars according to the color of the LEDs.

        # Do This

        -   Play the game, and discuss the following with a partner:
            -   What functions might this program need?
            -   What parameters should these functions have?
      CSD U6 params starchaser intro_2018: |-
        # Star Chaser

        In this game, the user tries to catch the stars according to the color of the LEDs.

        # Do This

        -   Play the game, and discuss the following with a partner:
            -   What functions might this program need?
            -   What parameters should these functions have?
      CSD U6 params starchaser intro_2019: |-
        # Star Chaser

        In this game, the user tries to catch the stars according to the color of the LEDs.

        # Do This

        -   Play the game, and discuss the following with a partner:
            -   What functions might this program need?
            -   What parameters should these functions have?
      CSD U6 predict LED button: Embedded Prediction
      CSD U6 predict LED button_2018: Embedded Prediction
      CSD U6 predict LED button_2019: Embedded Prediction
      CSD U6 random array notes: "# Random Song Generator\n\nYou're going to make
        a random song generator. When you press a button, a random note should play.
        Press it enough times, and you have yourself a beautiful arrangement of bleeps
        and bloops. \n\nYou used `randomNumber()` to select an element from an array
        in the previous lesson, so this should be familiar.\n\n# Do This\n\n-   Add
        code to randomly select a note from the `notes` array and play it.\n-   Run
        the program and press the left button to hear your buzzer sing its beautiful
        tune."
      CSD U6 random array notes_2018: "# Random Song Generator\n\nYou're going to
        make a random song generator. When you press a button, a random note should
        play. Press it enough times, and you have yourself a beautiful arrangement
        of bleeps and bloops. \n\nYou used `randomNumber()` to select an element from
        an array in the previous lesson, so this should be familiar.\n\n# Do This\n\n-
        \  Add code to randomly select a note from the `notes` array and play it.\n-
        \  Run the program and press the left button to hear your buzzer sing its
        beautiful tune."
      CSD U6 random array notes_2019: "# Random Song Generator\n\nYou're going to
        make a random song generator. When you press a button, a random note should
        play. Press it enough times, and you have yourself a beautiful arrangement
        of bleeps and bloops. \n\nYou used `randomNumber()` to select an element from
        an array in the previous lesson, so this should be familiar.\n\n# Do This\n\n-
        \  Add code to randomly select a note from the `notes` array and play it.\n-
        \  Run the program and press the left button to hear your buzzer sing its
        beautiful tune."
      CSD U6 sensor experiment embedded: |-
        # Sensor Experiment

        Run the program to the right and experiment with your board. Try interacting with your board in many different ways to figure out what each sensor might be. As you experiment with each sensor, discuss with a neighbor:

        -   What does this sensor measure?
        -   What is its maximum value?
        -   What is its minimum value?
      CSD U6 sensor experiment embedded_2018: |-
        # Sensor Experiment

        Run the program to the right and experiment with your board. Try interacting with your board in many different ways to figure out what each sensor might be. As you experiment with each sensor, discuss with a neighbor:

        -   What does this sensor measure?
        -   What is its maximum value?
        -   What is its minimum value?
      CSD U6 sensor experiment embedded_2019: |-
        # Sensor Experiment

        Run the program to the right and experiment with your board. Try interacting with your board in many different ways to figure out what each sensor might be. As you experiment with each sensor, discuss with a neighbor:

        -   What does this sensor measure?
        -   What is its maximum value?
        -   What is its minimum value?
      CSD U6 setProperty Text: |-
        # Changing the Text

        The `setProperty` block can be used to change lots of things about your design elements, including the text they contain.

        # Do This

        -   Drag out a `setProperty` block
        -   For the first parameter, select "name" (the element's id)
        -   For the second parameter, select "text" (the property you want to set)
        -   For the third parameter, write your name in quotes (the value to set)

        _Note: We've removed the Design Mode tab for now so you can practice working with `setProperty`, but it'll come back later once you're building apps of your own._
      CSD U6 setProperty Text_2018: |-
        # Changing the Text

        The `setProperty` block can be used to change lots of things about your design elements, including the text they contain.

        # Do This

        -   Drag out a `setProperty` block
        -   For the first parameter, select "name" (the element's id)
        -   For the second parameter, select "text" (the property you want to set)
        -   For the third parameter, write your name in quotes (the value to set)

        _Note: We've removed the Design Mode tab for now so you can practice working with `setProperty`, but it'll come back later once you're building apps of your own._
      CSD U6 setProperty Text_2019: |-
        # Changing the Text

        The `setProperty` block can be used to change lots of things about your design elements, including the text they contain.

        # Do This

        -   Drag out a `setProperty` block
        -   For the first parameter, select "name" (the element's id)
        -   For the second parameter, select "text" (the property you want to set)
        -   For the third parameter, write your name in quotes (the value to set)

        _Note: We've removed the Design Mode tab for now so you can practice working with `setProperty`, but it'll come back later once you're building apps of your own._
      CSD U6 setProperty hidden: |-
        # Hidden

        Design elements have a property called "hidden" that controls whether the element should show on screen or not. We are going to use this property to create an alarm app. Notice that when the program starts one button is hidden, and one is not.

        We have already set up an event handler for the "triggerAlarmButton" which will do two things when clicked:

        -   Change the "text" property of "statusLabel" to "on"
        -   Set the "hidden" property of "stopAlarmButton" to `false` (meaning it should _not_ be hidden)

        # Do This

        -   Run the program and click "Trigger Alarm" to see how it works
        -   Add code to the provided event handler that hides the "triggerAlarmButton"

        _Note: the button "stopAlarmButton" is already on the screen, but because its "hidden" property is marked true, it isn't shown when the program starts._
      CSD U6 setProperty hidden 2: |-
        # Showing/Hiding

        This alarm app isn't super useful if you can't turn the alarm off once it's been triggered. Let's fix that.

        # Do This

        Add a second `onEvent` block to watch for the "stopAlarmButton" to be clicked. Inside that block:

        -   Change the status text to "OFF"
        -   Hide the "stopAlarmButton"

        _Hint: "hidden" is a boolean property. If we used `false` to make the button show up, what should you use to make it hidden again?_
      CSD U6 setProperty hidden 2_2018: |-
        # Showing/Hiding

        This alarm app isn't super useful if you can't turn the alarm off once it's been triggered. Let's fix that.

        # Do This

        Add a second `onEvent` block to watch for the "stopAlarmButton" to be clicked. Inside that block:

        -   Change the status text to "OFF"
        -   Hide the "stopAlarmButton"

        _Hint: "hidden" is a boolean property. If we used `false` to make the button show up, what should you use to make it hidden again?_
      CSD U6 setProperty hidden 2_2019: |-
        # Sýna/Fela

        Þetta hringingarapp er ekki mjög gagnlegt ef þú getur ekki slökkt á hringingunni eftir að hún fer af stað. Lögum þetta.

        # Gerðu þetta

        Búðu til annað atvik til að fylgjast með hvort smellt er á  "stopAlarmButton" hnappinn. Þegar það atvik kveikir á að:

        -   Breyta stöðutextanum í "OFF"
        -   Fela "stopAlarmButton" hnappinn

        _Vísbending: "hidden" eiginleiki með boole gildi. Ef við notum `false` tl að láta hnappinn sjást, hvað ættum við þá að nota til að fela hann aftur?_
      CSD U6 setProperty hidden_2018: |-
        # Hidden

        Design elements have a property called "hidden" that controls whether the element should show on screen or not. We are going to use this property to create an alarm app. Notice that when the program starts one button is hidden, and one is not.

        We have already set up an event handler for the "triggerAlarmButton" which will do two things when clicked:

        -   Change the "text" property of "statusLabel" to "on"
        -   Set the "hidden" property of "stopAlarmButton" to `false` (meaning it should _not_ be hidden)

        # Do This

        -   Run the program and click "Trigger Alarm" to see how it works
        -   Add code to the provided event handler that hides the "triggerAlarmButton"

        _Note: the button "stopAlarmButton" is already on the screen, but because its "hidden" property is marked true, it isn't shown when the program starts._
      CSD U6 setProperty hidden_2019: |-
        # Hidden

        Design elements have a property called "hidden" that controls whether the element should show on screen or not. We are going to use this property to create an alarm app. Notice that when the program starts one button is hidden, and one is not.

        We have already set up an event handler for the "triggerAlarmButton" which will do two things when clicked:

        -   Change the "text" property of "statusLabel" to "on"
        -   Set the "hidden" property of "stopAlarmButton" to `false` (meaning it should _not_ be hidden)

        # Do This

        -   Run the program and click "Trigger Alarm" to see how it works
        -   Add code to the provided event handler that hides the "triggerAlarmButton"

        _Note: the button "stopAlarmButton" is already on the screen, but because its "hidden" property is marked true, it isn't shown when the program starts._
      CSD U6 setProperty xy: |-
        # Changing Position

        Every design element (except for the screen) has an "x" and a "y" property that controls its position.

        # Do This

        <div markdown="1" style="float:right">

        ![expandable](https://images.code.org/3a67642609071cf6766c296b8ca5a68e-image-1526944857178.png)

        </div>

        Using the `setProperty` block, move "red\_button" so that it matches the image to the right. (Click on the image to see the full size.)

        _Note: We've removed the Design Mode tab for now so you can practice working with setProperty, but it'll come back later once you're building apps of your own._
      CSD U6 setProperty xy click: |-
        # Changing With a Click

        It's not really useful to only set a property when your program is first run. After all, you could just do all of that in Design Mode. When you use an `onEvent` block with `setProperty`, you're able to do things you couldn't do with Design Mode alone.

        # Do This

        We've provided an empty `onEvent` block that's watching the "smiley" image. Inside the `onEvent` block, use two `setProperty` blocks to move the smiley somewhere else (it doesn't really matter where for now). Test your program by running it and clicking on the smiley.
      CSD U6 setProperty xy click_2018: |-
        # Changing With a Click

        It's not really useful to only set a property when your program is first run. After all, you could just do all of that in Design Mode. When you use an `onEvent` block with `setProperty`, you're able to do things you couldn't do with Design Mode alone.

        # Do This

        We've provided an empty `onEvent` block that's watching the "smiley" image. Inside the `onEvent` block, use two `setProperty` blocks to move the smiley somewhere else (it doesn't really matter where for now). Test your program by running it and clicking on the smiley.
      CSD U6 setProperty xy click_2019: |-
        # Changing With a Click

        It's not really useful to only set a property when your program is first run. After all, you could just do all of that in Design Mode. When you use an `onEvent` block with `setProperty`, you're able to do things you couldn't do with Design Mode alone.

        # Do This

        We've provided an empty `onEvent` block that's watching the "smiley" image. Inside the `onEvent` block, use two `setProperty` blocks to move the smiley somewhere else (it doesn't really matter where for now). Test your program by running it and clicking on the smiley.
      CSD U6 setProperty xy random: |-
        <img src="https://images.code.org/67c6cc358b235e2c2ae39f3f72a3e0b1-image-1507326303839.gif" style="float:right; max-width: 150px; margin: 10px;">

        # Randomization

        Moving on the first click is fine, but this smiley would be even cooler if it moved somewhere new _every time_ we clicked. Fortunately, we can use the `randomNumber` block to do just that.

        # Do This

        Instead of setting the "x" and "y" properties to a specific number, use the `randomNumber` block to pick a new random "x" and "y" each time the smiley is clicked.

        _Tip: The App Lab screen is 320 pixels wide by 450 pixels tall. What range of random numbers will ensure that the smiley is always visible on screen?_
      CSD U6 setProperty xy random_2018: |-
        <img src="https://images.code.org/67c6cc358b235e2c2ae39f3f72a3e0b1-image-1507326303839.gif" style="float:right; max-width: 150px; margin: 10px;">

        # Randomization

        Moving on the first click is fine, but this smiley would be even cooler if it moved somewhere new _every time_ we clicked. Fortunately, we can use the `randomNumber` block to do just that.

        # Do This

        Instead of setting the "x" and "y" properties to a specific number, use the `randomNumber` block to pick a new random "x" and "y" each time the smiley is clicked.

        _Tip: The App Lab screen is 320 pixels wide by 450 pixels tall. What range of random numbers will ensure that the smiley is always visible on screen?_
      CSD U6 setProperty xy random_2019: |-
        <img src="https://images.code.org/67c6cc358b235e2c2ae39f3f72a3e0b1-image-1507326303839.gif" style="float:right; max-width: 150px; margin: 10px;">

        # Randomization

        Moving on the first click is fine, but this smiley would be even cooler if it moved somewhere new _every time_ we clicked. Fortunately, we can use the `randomNumber` block to do just that.

        # Do This

        Instead of setting the "x" and "y" properties to a specific number, use the `randomNumber` block to pick a new random "x" and "y" each time the smiley is clicked.

        _Tip: The App Lab screen is 320 pixels wide by 450 pixels tall. What range of random numbers will ensure that the smiley is always visible on screen?_
      CSD U6 setProperty xy_2018: |-
        # Changing Position

        Every design element (except for the screen) has an "x" and a "y" property that controls its position.

        # Do This

        <div markdown="1" style="float:right">

        ![expandable](https://images.code.org/3a67642609071cf6766c296b8ca5a68e-image-1526944857178.png)

        </div>

        Using the `setProperty` block, move "red\_button" so that it matches the image to the right. (Click on the image to see the full size.)

        _Note: We've removed the Design Mode tab for now so you can practice working with setProperty, but it'll come back later once you're building apps of your own._
      CSD U6 setProperty xy_2019: |-
        # Changing Position

        Every design element (except for the screen) has an "x" and a "y" property that controls its position.

        # Do This

        <div markdown="1" style="float:right">

        ![expandable](https://images.code.org/3a67642609071cf6766c296b8ca5a68e-image-1526944857178.png)

        </div>

        Using the `setProperty` block, move "red\_button" so that it matches the image to the right. (Click on the image to see the full size.)

        _Note: We've removed the Design Mode tab for now so you can practice working with setProperty, but it'll come back later once you're building apps of your own._
      CSD U6 slider intro: |-
        # Sliders

        Last time, your users were only able to choose between a short and long buzz.  To give the user control over the exact duration of the buzzer, you'll want to use a slider.

        This slider lets users choose a value between 100 and 1000 for the duration of the buzz, but there's something not quite right about how it's working.

        # Do This

        -   Look over the code and find the bug that's keeping the duration from being set correctly.
            -   (Hint: Hover over the yellow triangles for clues as to what might be wrong with the code.)
      CSD U6 slider intro_2018: |-
        # Sliders

        Last time, your users were only able to choose between a short and long buzz.  To give the user control over the exact duration of the buzzer, you'll want to use a slider.

        This slider lets users choose a value between 100 and 1000 for the duration of the buzz, but there's something not quite right about how it's working.

        # Do This

        -   Look over the code and find the bug that's keeping the duration from being set correctly.
            -   (Hint: Hover over the yellow triangles for clues as to what might be wrong with the code.)
      CSD U6 slider intro_2019: |-
        # Sliders

        Last time, your users were only able to choose between a short and long buzz.  To give the user control over the exact duration of the buzzer, you'll want to use a slider.

        This slider lets users choose a value between 100 and 1000 for the duration of the buzz, but there's something not quite right about how it's working.

        # Do This

        -   Look over the code and find the bug that's keeping the duration from being set correctly.
            -   (Hint: Hover over the yellow triangles for clues as to what might be wrong with the code.)
      CSD U6 stillness game predict code: |-
        # Change with the Accelerometer

        This program uses the change event to increase a movement meter every time the board moves. When the movement meter reaches 100, the alarm will sound.

        # Do This

        This program has two bugs that you need to fix:

        -   The movement meter is being triggered by a button press, instead of the accelerometer's `change` event.
        -   The programmer forgot how to use the counter pattern to increase the movement variable.

        Once you have found the bugs, run the program and try to pass the board to your partner without setting off the alarm.
      CSD U6 stillness game predict code_2018: |-
        # Change with the Accelerometer

        This program uses the change event to increase a movement meter every time the board moves. When the movement meter reaches 100, the alarm will sound.

        # Do This

        This program has two bugs that you need to fix:

        -   The movement meter is being triggered by a button press, instead of the accelerometer's `change` event.
        -   The programmer forgot how to use the counter pattern to increase the movement variable.

        Once you have found the bugs, run the program and try to pass the board to your partner without setting off the alarm.
      CSD U6 stillness game predict code_2019: |-
        # Change with the Accelerometer

        This program uses the change event to increase a movement meter every time the board moves. When the movement meter reaches 100, the alarm will sound.

        # Do This

        This program has two bugs that you need to fix:

        -   The movement meter is being triggered by a button press, instead of the accelerometer's `change` event.
        -   The programmer forgot how to use the counter pattern to increase the movement variable.

        Once you have found the bugs, run the program and try to pass the board to your partner without setting off the alarm.
      CSD U6 test LED: |-
        # Control the LED

        Now that you know your board is working, you can try out the different LED blocks.

        # Do This

        -   Click "Run" and discuss with your partner how the code works.
        -   Try the different LED blocks to see what they do.
            -   Hint: Don't forget to hit "Reset" and run your code again after you change it
      CSD U6 test LED_2018: |-
        # Control the LED

        Now that you know your board is working, you can try out the different LED blocks.

        # Do This

        -   Click "Run" and discuss with your partner how the code works.
        -   Try the different LED blocks to see what they do.
            -   Hint: Don't forget to hit "Reset" and run your code again after you change it
      CSD U6 test LED_2019: |-
        # Control the LED

        Now that you know your board is working, you can try out the different LED blocks.

        # Do This

        -   Click "Run" and discuss with your partner how the code works.
        -   Try the different LED blocks to see what they do.
            -   Hint: Don't forget to hit "Reset" and run your code again after you change it
      CSD U6 tugowar buzzer: "# Winning Buzzer\n\nThat last thing that that is missing
        from your project guide's description of this project is the buzzer. It should
        buzz a high tone if player 1 wins and a low tone if player 2 wins. \n\n# Do
        This\n\nSo far we've been able to just use the `player` parameter directly
        to report which player won, but that won't work for buzzing different sounds.
        Inside the conditional that checks if a player won, you'll need to add _another_
        conditional that checks which player it was. If `player == \"red\"` the buzzer
        should play a high note, otherwise (else) it should play a low note."
      CSD U6 tugowar buzzer_2018: "# Winning Buzzer\n\nThat last thing that that is
        missing from your project guide's description of this project is the buzzer.
        It should buzz a high tone if player 1 wins and a low tone if player 2 wins.
        \n\n# Do This\n\nSo far we've been able to just use the `player` parameter
        directly to report which player won, but that won't work for buzzing different
        sounds. Inside the conditional that checks if a player won, you'll need to
        add _another_ conditional that checks which player it was. If `player == \"red\"`
        the buzzer should play a high note, otherwise (else) it should play a low
        note."
      CSD U6 tugowar buzzer_2019: "# Winning Buzzer\n\nThat last thing that that is
        missing from your project guide's description of this project is the buzzer.
        It should buzz a high tone if player 1 wins and a low tone if player 2 wins.
        \n\n# Do This\n\nSo far we've been able to just use the `player` parameter
        directly to report which player won, but that won't work for buzzing different
        sounds. Inside the conditional that checks if a player won, you'll need to
        add _another_ conditional that checks which player it was. If `player == \"red\"`
        the buzzer should play a high note, otherwise (else) it should play a low
        note."
      CSD U6 tugowar conditional: |-
        # Check for a Winner

        Your game should be pretty playable by now. Two players can click their respective buttons, and their emojies will race down the screen. We still need a way for a player to win though.

        # Do This

        Using a conditional inside the `checkWin()` function, you want to check if a player has won each time they click. For now, we can just use `console.log` to report the winner.

        -   Add an if statement to the bottom of `checkWin()`
        -   For the condition of your if statement, check if `player_y` is greater than 350 (or use the bottom of screen value you decided on in the last level)
        -   In your conditional, add a `console.log` that reports which player won
        -   Test your program to make sure that it reports a winner when one of the emojis makes it to the bottom of the screen
      CSD U6 tugowar conditional_2018: |-
        # Check for a Winner

        Your game should be pretty playable by now. Two players can click their respective buttons, and their emojies will race down the screen. We still need a way for a player to win though.

        # Do This

        Using a conditional inside the `checkWin()` function, you want to check if a player has won each time they click. For now, we can just use `console.log` to report the winner.

        -   Add an if statement to the bottom of `checkWin()`
        -   For the condition of your if statement, check if `player_y` is greater than 350 (or use the bottom of screen value you decided on in the last level)
        -   In your conditional, add a `console.log` that reports which player won
        -   Test your program to make sure that it reports a winner when one of the emojis makes it to the bottom of the screen
      CSD U6 tugowar conditional_2019: |-
        # Check for a Winner

        Your game should be pretty playable by now. Two players can click their respective buttons, and their emojies will race down the screen. We still need a way for a player to win though.

        # Do This

        Using a conditional inside the `checkWin()` function, you want to check if a player has won each time they click. For now, we can just use `console.log` to report the winner.

        -   Add an if statement to the bottom of `checkWin()`
        -   For the condition of your if statement, check if `player_y` is greater than 350 (or use the bottom of screen value you decided on in the last level)
        -   In your conditional, add a `console.log` that reports which player won
        -   Test your program to make sure that it reports a winner when one of the emojis makes it to the bottom of the screen
      CSD U6 tugowar demo: |-
        # Grab that Bug!

        This is an example of a tug o' war game that could be built in this lesson. To play, pair up with another student. The student on the left will the click the left button on the Circuit Playground as fast as they can, while the student on the right clicks the right button. Whoever can get the bug over to their side first wins.
      CSD U6 tugowar demo_2018: |-
        # Grab that Bug!

        This is an example of a tug o' war game that could be built in this lesson. To play, pair up with another student. The student on the left will the click the left button on the Circuit Playground as fast as they can, while the student on the right clicks the right button. Whoever can get the bug over to their side first wins.
      CSD U6 tugowar demo_2019: |-
        # Grab that Bug!

        This is an example of a tug o' war game that could be built in this lesson. To play, pair up with another student. The student on the left will the click the left button on the Circuit Playground as fast as they can, while the student on the right clicks the right button. Whoever can get the bug over to their side first wins.
      CSD U6 tugowar design 1: |-
        # Getting Started: Screen Design

        You should have already reviewed the planning guide for this project. Some of the work to turn this project guide into a working program has already been started. Based on the project guide you're going to do the rest of this work.

        # Do This

        We've already created a "start" screen and included a title and "play" button. Using your planning guide, finish creating this screen. Specifically you'll want to:

        -   Update the title text to say "Emoji Race"
        -   Add instructions for playing using the ID "instructions"

        Feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 1.5: |-
        # Game Screen Design

        We've also added a "game" screen where the game will be played. It just needs a couple of tweaks.

        # Do This

        Switch to the "game" screen and, using your planning guide, fix this screen by changing the color of the two emoji images.

        Feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 1.5_2018: |-
        # Game Screen Design

        We've also added a "game" screen where the game will be played. It just needs a couple of tweaks.

        # Do This

        Switch to the "game" screen and, using your planning guide, fix this screen by changing the color of the two emoji images.

        Feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 1.5_2019: |-
        # Game Screen Design

        We've also added a "game" screen where the game will be played. It just needs a couple of tweaks.

        # Do This

        Switch to the "game" screen and, using your planning guide, fix this screen by changing the color of the two emoji images.

        Feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 1_2018: |-
        # Getting Started: Screen Design

        You should have already reviewed the planning guide for this project. Some of the work to turn this project guide into a working program has already been started. Based on the project guide you're going to do the rest of this work.

        # Do This

        We've already created a "start" screen and included a title and "play" button. Using your planning guide, finish creating this screen. Specifically you'll want to:

        -   Update the title text to say "Emoji Race"
        -   Add instructions for playing using the ID "instructions"

        Feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 1_2019: |-
        # Getting Started: Screen Design

        You should have already reviewed the planning guide for this project. Some of the work to turn this project guide into a working program has already been started. Based on the project guide you're going to do the rest of this work.

        # Do This

        We've already created a "start" screen and included a title and "play" button. Using your planning guide, finish creating this screen. Specifically you'll want to:

        -   Update the title text to say "Emoji Race"
        -   Add instructions for playing using the ID "instructions"

        Feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 2: |-
        # Designing the Win Screen

        The final screen in this program shows who won. It's totally blank right now.

        # Do This

        Switch to "win" and design it based on your project guide. Make sure to pay close attention to the ID of each element. Once you've added the required elements, feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 2_2018: |-
        # Designing the Win Screen

        The final screen in this program shows who won. It's totally blank right now.

        # Do This

        Switch to "win" and design it based on your project guide. Make sure to pay close attention to the ID of each element. Once you've added the required elements, feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 2_2019: |-
        # Designing the Win Screen

        The final screen in this program shows who won. It's totally blank right now.

        # Do This

        Switch to "win" and design it based on your project guide. Make sure to pay close attention to the ID of each element. Once you've added the required elements, feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar final: |-
        # Make It Your Own

        You just walked through someone else's plan for creating a program, so now it's time to make it your own. What additional features or challenges do you want to create?

        # Do This

        Select one of the challenges below to add to the game or come up with a challenge of your own.

        -   Change the look and layout of the screens
        -   Use the buzzer or the led to show when one of the buttons has been clicked
        -   Set the "icon-color" property of "winner\_image" to the winning color
        -   Make the emojis start out sad, change to meh halfway, and end up happy
        -   Use a variable and conditionals to make sure that players can only move their emojis when the "game" screen is showing
      CSD U6 tugowar final_2018: |-
        # Make It Your Own

        You just walked through someone else's plan for creating a program, so now it's time to make it your own. What additional features or challenges do you want to create?

        # Do This

        Select one of the challenges below to add to the game or come up with a challenge of your own.

        -   Change the look and layout of the screens
        -   Use the buzzer or the led to show when one of the buttons has been clicked
        -   Set the "icon-color" property of "winner\_image" to the winning color
        -   Make the emojis start out sad, change to meh halfway, and end up happy
        -   Use a variable and conditionals to make sure that players can only move their emojis when the "game" screen is showing
      CSD U6 tugowar final_2019: |-
        # Make It Your Own

        You just walked through someone else's plan for creating a program, so now it's time to make it your own. What additional features or challenges do you want to create?

        # Do This

        Select one of the challenges below to add to the game or come up with a challenge of your own.

        -   Change the look and layout of the screens
        -   Use the buzzer or the led to show when one of the buttons has been clicked
        -   Set the "icon-color" property of "winner\_image" to the winning color
        -   Make the emojis start out sad, change to meh halfway, and end up happy
        -   Use a variable and conditionals to make sure that players can only move their emojis when the "game" screen is showing
      CSD U6 tugowar setProperty: |-
        # Display the Winner

        The winning screen doesn't actually know _who_ won the game. Let's fix that now.

        # Do This

        Before each call to `setScreen`, add a `setProperty` block to change the "text" property of "winner" to display the actual winner.
      CSD U6 tugowar setProperty_2018: |-
        # Display the Winner

        The winning screen doesn't actually know _who_ won the game. Let's fix that now.

        # Do This

        Before the call to `setScreen`, add a `setProperty` block to change the "text" property of "winner" to display the actual winner.
      CSD U6 tugowar setProperty_2019: |-
        # Display the Winner

        The winning screen doesn't actually know _who_ won the game. Let's fix that now.

        # Do This

        Before the call to `setScreen`, add a `setProperty` block to change the "text" property of "winner" to display the actual winner.
      CSD U6 tugowar setScreen: |-
        # Change to the Win Screen

        Now that we have conditionals to check which player won, let's switch to the "win" screen when a player wins.

        # Do This

        Inside the conditional that you've created to check if a player has reached the bottom, add a `setScreen` block to change to the "win" screen. Make sure you test that your new code works before moving on!
      CSD U6 tugowar setScreen_2018: |-
        # Change to the Win Screen

        Now that we have conditionals to check which player won, let's switch to the "win" screen when a player wins.

        # Do This

        Inside the conditional that you've created to check if a player has reached the bottom, add a `setScreen` block to change to the "win" screen. Make sure you test that your new code works before moving on!
      CSD U6 tugowar setScreen_2019: |-
        # Change to the Win Screen

        Now that we have conditionals to check which player won, let's switch to the "win" screen when a player wins.

        # Do This

        Inside the conditional that you've created to check if a player has reached the bottom, add a `setScreen` block to change to the "win" screen. Make sure you test that your new code works before moving on!
      CSD U6 tugowar variables 1: "# The startGame() Function\n\nIf you look at the
        events we planned for in the planning guide, you may notice that two events
        do essentially the same thing. The events that respond to both the \"play\"
        and \"replay\" buttons could be written with identical code, but duplicate
        code like this is a perfect place to use a **function**.\n\n# Do This\n\nWe've
        already added blocks that call a new function named `startGame()` to the appropriate
        event handlers, and we've created an empty function for you to build out.
        \n\n-   Find the `startGame()` function definition ( [Show me where](#triggercallout=block_trigger)
        )\n-   Inside the function:\n    -   Move both of the emoji images to the
        top of the screen by setting each one's \"y\" property to 0\n    -   Change
        the screen to \"game\"\n\nOnce you've fleshed out the `startGame()` function,
        try clicking the \"play\" button to check that it's working."
      CSD U6 tugowar variables 1_2018: "# The startGame() Function\n\nIf you look
        at the events we planned for in the planning guide, you may notice that two
        events do essentially the same thing. The events that respond to both the
        \"play\" and \"replay\" buttons could be written with identical code, but
        duplicate code like this is a perfect place to use a **function**.\n\n# Do
        This\n\nWe've already added blocks that call a new function named `startGame()`
        to the appropriate event handlers, and we've created an empty function for
        you to build out. \n\n-   Find the `startGame()` function definition ( [Show
        me where](#triggercallout=block_trigger) )\n-   Inside the function:\n    -
        \  Move both of the emoji images to the top of the screen by setting each
        one's \"y\" property to 0\n    -   Change the screen to \"game\"\n\nOnce you've
        fleshed out the `startGame()` function, try clicking the \"play\" button to
        check that it's working."
      CSD U6 tugowar variables 1_2019: "# The startGame() Function\n\nIf you look
        at the events we planned for in the planning guide, you may notice that two
        events do essentially the same thing. The events that respond to both the
        \"play\" and \"replay\" buttons could be written with identical code, but
        duplicate code like this is a perfect place to use a **function**.\n\n# Do
        This\n\nWe've already added blocks that call a new function named `startGame()`
        to the appropriate event handlers, and we've created an empty function for
        you to build out. \n\n-   Find the `startGame()` function definition ( [Show
        me where](#triggercallout=block_trigger) )\n-   Inside the function:\n    -
        \  Move both of the emoji images to the top of the screen by setting each
        one's \"y\" property to 0\n    -   Change the screen to \"game\"\n\nOnce you've
        fleshed out the `startGame()` function, try clicking the \"play\" button to
        check that it's working."
      CSD U6 tugowar variables 2: |-
        # Functions with Parameters

        Most of the existing functions you use in App Lab need inputs, or **parameters**, to pass the function necessary information. For example, when changing a screen, you pass the ID of that screen as a parameter, which looks like `setScreen("win")`.

        These parameters show up as a variable that can be used inside the function, and you can create functions that use parameters too!

        # Do This

        <div markdown="1" style="float:right; margin: 20px;">

        ![expandable](https://images.code.org/2eccd9fc9f4887aefd0bfd94d7f332c8-image-1509402194012.png)

        <br/>

        Click to expand

        </div>

        Instead of a separate function to move the red and the blue players, we've created one function called `movePlayer()` that takes the ID of the player image as a parameter called `player`. Inside this function, you can use `player` any place where you need to specify the ID of the player you want to control.

        -   Find where `movePlayer()` is defined ( [Show me where](#triggercallout=block_trigger) )
        -   Inside the `movePlayer()` definition:
            -   Get the current "y" property of the player and save it to a variable called `player_y`
            -   Increase the value of `player_y` by 10
            -   Set the "y" property of player to your new value `player_y`

        Once you've added your code, test it. You should see that _both buttons_ work even though we only created one function - cool!
      CSD U6 tugowar variables 2_2018: |-
        # Functions with Parameters

        Most of the existing functions you use in App Lab need inputs, or **parameters**, to pass the function necessary information. For example, when changing a screen, you pass the ID of that screen as a parameter, which looks like `setScreen("win")`.

        These parameters show up as a variable that can be used inside the function, and you can create functions that use parameters too!

        # Do This

        <div markdown="1" style="float:right; margin: 20px;">

        ![expandable](https://images.code.org/2eccd9fc9f4887aefd0bfd94d7f332c8-image-1509402194012.png)

        <br/>

        Click to expand

        </div>

        Instead of a separate function to move the red and the blue players, we've created one function called `movePlayer()` that takes the ID of the player image as a parameter called `player`. Inside this function, you can use `player` any place where you need to specify the ID of the player you want to control.

        -   Find where `movePlayer()` is defined ( [Show me where](#triggercallout=block_trigger) )
        -   Inside the `movePlayer()` definition:
            -   Get the current "y" property of the player and save it to a variable called `player_y`
            -   Increase the value of `player_y` by 10
            -   Set the "y" property of player to your new value `player_y`

        Once you've added your code, test it. You should see that _both buttons_ work even though we only created one function - cool!
      CSD U6 tugowar variables 2_2019: |-
        # Functions with Parameters

        Most of the existing functions you use in App Lab need inputs, or **parameters**, to pass the function necessary information. For example, when changing a screen, you pass the ID of that screen as a parameter, which looks like `setScreen("win")`.

        These parameters show up as a variable that can be used inside the function, and you can create functions that use parameters too!

        # Do This

        <div markdown="1" style="float:right; margin: 20px;">

        ![expandable](https://images.code.org/2eccd9fc9f4887aefd0bfd94d7f332c8-image-1509402194012.png)

        <br/>

        Click to expand

        </div>

        Instead of a separate function to move the red and the blue players, we've created one function called `movePlayer()` that takes the ID of the player image as a parameter called `player`. Inside this function, you can use `player` any place where you need to specify the ID of the player you want to control.

        -   Find where `movePlayer()` is defined ( [Show me where](#triggercallout=block_trigger) )
        -   Inside the `movePlayer()` definition:
            -   Get the current "y" property of the player and save it to a variable called `player_y`
            -   Increase the value of `player_y` by 10
            -   Set the "y" property of player to your new value `player_y`

        Once you've added your code, test it. You should see that _both buttons_ work even though we only created one function - cool!
      CSD U6 tugowar variables 3: |-
        # The checkWin() Function

        The last function that you need to figure out is the `checkWin()` function, which after each player is moved, and is used to both check if that player has made it to the bottom of the screen and to announce the winner if necessary. For now, we're just going to find out where the player is and log it to the console.

        # Do This

        Just like the `movePlayer()` function, `checkWin()` takes a single parameter called `player`. If you call `checkWin("red")`, then the variable `player` will have the value "red".

        -   Find where the function is defined ( [Show me where](#triggercallout=block_trigger) )
        -   Create a variable called `player_y` and assign it the "y" property of the player
        -   Use either a `console.log()` command or a watcher to report the value of `player_y`
        -   Play the game with only one button, keeping an eye on the value of `player_y`
        -   Decide what value of `player_y` should be considered the bottom of the screen
      CSD U6 tugowar variables 3_2018: |-
        # The checkWin() Function

        The last function that you need to figure out is the `checkWin()` function, which after each player is moved, and is used to both check if that player has made it to the bottom of the screen and to announce the winner if necessary. For now, we're just going to find out where the player is and log it to the console.

        # Do This

        Just like the `movePlayer()` function, `checkWin()` takes a single parameter called `player`. If you call `checkWin("red")`, then the variable `player` will have the value "red".

        -   Find where the function is defined ( [Show me where](#triggercallout=block_trigger) )
        -   Create a variable called `player_y` and assign it the "y" property of the player
        -   Use either a `console.log()` command or a watcher to report the value of `player_y`
        -   Play the game with only one button, keeping an eye on the value of `player_y`
        -   Decide what value of `player_y` should be considered the bottom of the screen
      CSD U6 tugowar variables 3_2019: |-
        # The checkWin() Function

        The last function that you need to figure out is the `checkWin()` function, which after each player is moved, and is used to both check if that player has made it to the bottom of the screen and to announce the winner if necessary. For now, we're just going to find out where the player is and log it to the console.

        # Do This

        Just like the `movePlayer()` function, `checkWin()` takes a single parameter called `player`. If you call `checkWin("red")`, then the variable `player` will have the value "red".

        -   Find where the function is defined ( [Show me where](#triggercallout=block_trigger) )
        -   Create a variable called `player_y` and assign it the "y" property of the player
        -   Use either a `console.log()` command or a watcher to report the value of `player_y`
        -   Play the game with only one button, keeping an eye on the value of `player_y`
        -   Decide what value of `player_y` should be considered the bottom of the screen
      CSD What Makes a Computer a Computer Video_2019: |-
        ## Hugvekjur

        -   Hvaða greinarmunur er á tölvum og frá eldri gerðum véla?
        -   Hugsaðu þér eitthvað sem þú gerir á tölvu. Hvers konar inntak, úttak, geymsla og úrvinnsla fer fram?
      CSD sprite movement challenge_2018: |-
        # Improve your animation

        Make your animation even better by changing more sprite properties, or by adding even more sprites!
      CSD sprite movement challenge_2019: |-
        # Improve your animation

        Make your animation even better by changing more sprite properties, or by adding even more sprites!
      CSD-Arrays: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      CSD-Arrays_2018: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      CSD-Arrays_2019: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      'CSD: Animating Sprite Movement_2019': |-
        ## Spurningar til að íhuga

        -   Hvað er teljaramynstrið (counter pattern)?
        -   Hvernig lætur teljaramynstrið verur (kvika) færast yfir skjáinn?
      'CSD: Animation Tab_2019': |-
        ## Spurningar til að hugleiða

        -   Hvaða skref þarf að taka til að bæta mynd í veru?
        -   Hvaða leiðir er hægt að fara til að ná í myndir?
      'CSD: Drawing in Game Lab 1_2019': |-
        ## Spurningar til að hugleiða

        -   Hvar getur þú fundið nánari upplýsingar um hvernig á að nota kubbana?
        -   Hver er kosturinn við að vinna með kubba (block mode)?
      'CSD: Drawing in Game Lab 2_2019': |-
        ## Spurningar til að íhuga

        -   Hver er munurinn á stroku og fyllingu?
      'CSD: For Loop_2019': |-
        ## Spurningar til að íhuga

        -   Hvernig eru lykkjur notaðar í forritun?
        -   Hvar eiga lykkjur að vera í kóðanum þínum?
      'CSD: Introduction to the Draw Loop_2019': |-
        ## Spurning til að íhuga

        -   Hvað gerir "draw" fallið?
      'CSD: Sprite Velocity_2019': |-
        ## Spurningar til að hugleiða

        -   Hvenær gæti heppilegra að nota hraðakubb (velocity block) í staðinn fyrir teljamynstrið?
        -   Nefndu dæmi um teljaramynstur og hvernig þú gætir notað hraðakubb í staðinn.
      'CSD: Sprites in Game Lab_2019': |-
        ## Spurningar til að hugleiða

        -   Hvað er vera, einnig nefnt kviki (sprite)?
        -   Hvað eru eiginleika (properties)?
        -   Hvaða vandamál leysa verur?
      CSDU2 - PW - Class Style Personal Site: |-
        # Free Play Styling

        Your turn to decide what you want to style! Play with the classes styling and RGB colors to improve your personal website.

        -   Make sure you have completed the checklist below.
        -   Take a screenshot of your home page and save it somewhere on your computer so you can find it later.

        ## Checklist

        -   Somewhere on your site, give text a particular color using RGB values.
        -   On your lists page, give all the list items the same background color.
        -   Use classes to style at least two other elements of your personal website
      CSDU2 - PW - Class Style Personal Site_2018: |-
        # Free Play Styling

        Your turn to decide what you want to style! Play with the classes styling and RGB colors to improve your personal website.

        -   Make sure you have completed the checklist below.
        -   Take a screenshot of your home page and save it somewhere on your computer so you can find it later.

        ## Checklist

        -   Somewhere on your site, give text a particular color using RGB values.
        -   On your lists page, give all the list items the same background color.
        -   Use classes to style at least two other elements of your personal website
      CSDU2 - PW - Class Style Personal Site_2019: |-
        # Free Play Styling

        Your turn to decide what you want to style! Play with the classes styling and RGB colors to improve your personal website.

        -   Make sure you have completed the checklist below.
        -   Take a screenshot of your home page and save it somewhere on your computer so you can find it later.

        ## Checklist

        -   Somewhere on your site, give text a particular color using RGB values.
        -   On your lists page, give all the list items the same background color.
        -   Use classes to style at least two other elements of your personal website
      CSDU2 - Type Anything: |-
        <img src="https://images.code.org/12ffe6980a25a3664eabe69be487a921-image-1485384422334.jpg" style="width:400px; float:right">

        # Welcome to Web Lab!

        The platform you are in is called Web Lab. There are three main parts of the screen in Web Lab.

        # Do This

        -   Try typing something in the workspace.
        -   Press <img src="https://images.code.org/678619085e37ea6ce904ac8abd0df2f2-image-1493226906609.14.45 AM.png" style="width:150px"> to see it in the preview area!
      CSDU2 - Type Anything_2018: |-
        <img src="https://images.code.org/12ffe6980a25a3664eabe69be487a921-image-1485384422334.jpg" style="width:400px; float:right">

        # Welcome to Web Lab!

        The platform you are in is called Web Lab. There are three main parts of the screen in Web Lab.

        # Do This

        -   Try typing something in the workspace.
        -   Press <img src="https://images.code.org/678619085e37ea6ce904ac8abd0df2f2-image-1493226906609.14.45 AM.png" style="width:150px"> to see it in the preview area!
      CSDU2 - Type Anything_2019: |-
        <img src="https://images.code.org/12ffe6980a25a3664eabe69be487a921-image-1485384422334.jpg" style="width:400px; float:right">

        # Welcome to Web Lab!

        The platform you are in is called Web Lab. There are three main parts of the screen in Web Lab.

        # Do This

        -   Try typing something in the workspace.
        -   Press <img src="https://images.code.org/678619085e37ea6ce904ac8abd0df2f2-image-1493226906609.14.45 AM.png" style="width:150px"> to see it in the preview area!
      CSDU4 - Design Mode - 15: "# Hönnunarstaða (Design Mode)\n\nVelkomin í Hönnunarstöðuna
        í Appsmiðjunni! Hér getur þú auðveldlega búið til stafræna útgáfu af apphugmynd
        sem þú hefur með því að setja inn skjáeiningar úr verkfærakassanum og gefa
        þeim útlit!\n\n**Markmið:** Bæta stórum rauðum hnappi við appið með því að
        nota Hönnunarstöðuna.\n\n# Gerðu þetta:\n\n-   **Finndu <img src=\"https://images.code.org/278f146396c80c97d0b5d73f24d48aec-image-1444335461720.png\">
        í Verkfærakassanum** og dragðu hnapp út á appið og stilltu stærð hans. \n\n-
        \  **Breyttu texta hnappsins** í \"Smelltu á mig\".\n\n-   **Breyttu lit hnappsins**
        í rautt (red).\n\n<img src=\"https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif\"
        style=\"width: 500px; float: middle\">"
      CSDU4 - Design Mode - 16: |-
        # Virkjaðu hnappinn

        Í síðustu kennslustund var áherslan á að stilla upp skjá appsins í Hönnunarstöðunni. Þetta góð og hraðvirk leið til að vinna með útlit appsins en bætir engri virkni í það. Ef þú smellir á hnappana sem þú bættir við þá gerist ekkert. Nú er ætlunin að bæta við grunnvirkni með því að láta hnappana í appinu _gera_ eitthvað!

        **Markmið:** Að bæta við kóða með því að nota Hönnunarstöðuna til að láta hnapp bregðast við smelli.

        # Gerðu þetta

        Í appinu eru í upphafi tvær einingar, _texti_ (label) með heitið (id) `titleLabel` og _hnappur_ (button) með heitið `changeTitleButton`. Til að byrja með átt þú að láta hnappinn skrifa skilaboð á skjáinn þegar smellt er á hann.

        -   Vertu í Hönnunarstöðu og **smelltu á hnappinn til að breyta eiginleikum hans**
        -   Smelltu á **atvikaflipann** (Events)
        -   Settu inn `onEvent` kubb með því að smella á **Setja inn og sýna kóða** undir **atvikaflipanum**.
        -   Skoðaðu kubbinn sem bættist við **kóðastöðuflipann** (Code Mode).
        -   Keyrðu forritið, smelltu á hnappinn og **athugaðu það sem birtist í  _Villuleitarglugganum_ (Debug Console)** fyrir neðan vinnusvæðið fremur en á skjá appsins. Við munum fjalla um _Villuleitargluggann_ í næsta áfanga.
      CSDU4 - Design Mode - 17: |-
        # Að uppfæra ID heiti og villuleita með Console Log

        Hér eru hnappar sem hafa atvikahöndlara og `console.log` skipanir, en það er búið að víxla þeim!

        Við ættum að hafa gefið hnöppunum betri ID heiti svo við gætum greint á milli þeirra út frá ID heitinu. **Getur þú breytt ID heitunum og  `console.log` skilaboðunum svo þau passi við hnappana?**

        # Gerðu þetta

        -   **Breyttu ID heitum** hnappanna í Hönnunarstöðu og gefðu þeim meira lýsandi heiti.

        -   Skiptu yfir í Kóðastöðu og taktu eftir að **ID fellilistarnir hafa verið uppfærðir svo þeir innihalda nú nýju ID heitin**. (Þú þarft samt að velja rétt ID úr fellilistanum.)

        -   **Uppfærðu `console.log` skilaboðin** svo þau passi við hnappana.
      CSDU4 - Design Mode - 18: "# Lagskipting og eyðing eininga\n\n<img src=\"https://images.code.org/9e620f70869de438c4f0c66663686876-image-1444678130772.gif\"
        style=\"width: 200px; float: right\">Einingar í notendaviðmótinu geta skarast
        þannig að nauðsynlegt er að geta stjórnað röð eða **dýpt** hverrar einingar.
        \n\nEf þú velur einingu birtist hnappurinn **Delete** hægra megin í eiginleikaglugganum.
        Og ef þú **flettir neðst í gluggann** finnur þú hnappa til að **breyta dýpt**
        einingar.\n\n-   **Eyddu einingu** með því að velja hana (smella á hana) í
        hönnunarstöðunni og síðan smella á **Delete** hnappinn í eiginleikaglugganum.\n-
        \  **Breyttu dýpt** einingar með því að velja hana og smella á bláu örvarhnappana.\n
        \   -   Smelltu á tvöfalda ör til að færa eininguna fremst eða aftast.\n    -
        \  Smelltu á einfalda ör til að færa eininguna fram eða aftur um eitt sæti.\n\n#
        Gerðu þetta:\n\nNotaðu **Delete** hnappana og **dýptarörvarnar** til að **búa
        til \"Eftir\" myndina**\n\n<table>\n<tr>\n\t<th style=\"text-align:center\">Fyrir</th>\n
        \   <th style=\"text-align:center\">Eftir</th>\n</tr>\n<tr>\n\t<td align=center><img
        src=\"https://images.code.org/023f749ecb58c91869a4eacab6701203-image-1444685187662.png\"
        style=\"width:200px ; border: solid 1px black\"></td>\n    <td style=\"text-align:center\"><img
        src=\"https://images.code.org/e45fc7d451c071683fd3b59466b106b0-image-1444684677212.png\"
        style=\"width:200px; border: solid 1px black\"></td>\n</tr>\n</table>"
      CSDU4 - Design Mode - 19: "# Annar skjár\n\nFlest öpp hafa fleiri en einn skjá
        eða síðu fyrir mismunandi innihald. Í Hönnunarstöðu getur þú mjög auðveldlega
        bætt nýrri skjámynd í appið þitt.\n\n# Gerðu þetta\n\nÞú átt að bæta öðrum
        skjá við appið og setja hnapp á þann skjá. Gættu þess að nota lýsandi ID heiti!\n\n-
        \  Dragðu fram <img src=\"https://images.code.org/4337b39cfd797ed9289b70fb6cb365fb-image-1444353631083.17.39
        PM.png\" style=\"width: 50px\"> úr Hönnunarverkfærunum yfir á appið þitt.
        Nú hefur appið tvo skjái!\n-   Notaðu Hönnunarstöðuna til að bæta hnappi á
        skjáinn.  <img src=\"https://images.code.org/bbf464e2fc94bacba39407d6842f2336-image-1478300698068.04.35
        PM.png\" style=\"width: 150px\"> \n-   Gefðu báðum skjánum og hnöppunum lýsandi
        ID heiti, til dæmis _\"homeScreen\"_, _\"detailsScreen\"_, _\"homeButton\"_,
        and _\"detailsButton\"_ (eða eitthvað á íslensku!)\n\nÞú getur alltaf notað
        fellilistann yfir skjámyndir efst í app glugganum til að skipta á milli skjámynda
        <img src=\"https://images.code.org/404e0b3f520a413c8a5e62e74b70bb19-image-1478300388689.58.59
        PM.png\" style=\"width: 150px\"> "
      CSDU4 - Design Mode - 20: |-
        # Skipt á milli skjámynda

        Þú getur stjórnað því hvaða skjámynd birtist í appinu með skipuninni `setScreen()`. Ef þú ert að vinna með kubba getur þú valið hvaða skjámynd þú vilt skipta yfir í með því að velja hana úr fellilista.

        ![](<https://images.code.org/615fae136488e1e6d1349e4383388e08-image-1478303858022.13.25 PM.png>)

        # Gerðu þetta

        Þú munt nota `onEvent()` kubb með `setScreen()` til að láta hnappana tvo í appinu skipta á milli skjámyndanna tveggja.

        -   Dragðu út tvo `onEvent()` kubba
        -   Gefðu `onEvent()` kubbunum ID heiti fyrir hvorn hnapp
        -   Settu `setScreen` hnapp innan í sinn hvorn `onEvent` kubbinn.
        -   Veldu viðeigandi skjámynd úr fellilista hvors `setScreen` kubbs.
        -   Prófaðu appið til að ganga úr skugga um að hnapparnir skipti á milli skjámyndanna tveggja
      CSDU4 - Design Mode - 21: "# Myndefni bætt við\n\nStundum duga hnappar og reitir
        ekki til að ná fram þeirri virkni sem þú vilt hafa í appi. Auðveldasta leiðin
        til að fá ítarlegri virkni (svo sem að sýna landakort) er að nota myndir\n\n#
        Gerðu þetta\n\n-   Finndu mynd af landakorti á netinu og sæktu hana\n-   Dragðu
        myndeiningu (image) inn í appið ![](<https://images.code.org/cda02ffe3acc869822a551f5cdbf8606-image-1444667846363.37.14
        AM.png>)\n-   Veldu myndina ![](<https://images.code.org/e5b9571ae54af60a3ae597b787e741ea-image-1444667688762.34.42
        AM.png>)\n    -   **Vefslóðir (URL)** má setja beint í \"picture\" reitinn.
        \ \n    -   **Hladdu upp myndum** með því að smella á \"Choose\".\n    -   **Athugaðu:**
        Þú getur alltaf séð skrár sem þú hefur hlaðið upp með því að smella á tannhjólið
        efst í verkfærakassanum. ![](<https://images.code.org/53b405b771bc11bf5d24c84c878c80dd-image-1444668067826.35.10
        AM.png>)\n-   Ekki gleyma að gefa myndinni gott heiti (ID)!"
      CSDU4 - Design Mode - 3: |-
        # Hvernig virka atvik?

        Atvikaknúin öpp innihalda einingar (t.d. hnappa) sem hleypa af stað atvikum og kóðabúta sem kallast **atvikshöndlarar** (event handlers). Atvikshöndlari "fylgist með" hvort tiltekið atvik eigi sér stað í forritinu og keyrir tiltekið fall þegar það atvik á sér stað.

        Þegar þú byrjar á að búa til atvikshöndlara í Hönnunarstöðunni er gott ráð að setja `console.log()` kubb í hann til að auðvelda að prófa atvikið, en að öðru leyti getur þú sett hvaða kóða sem þú vilt í atvikshöndlarann.

        # Gerðu þetta

        Verkfærakassinn er með nýjan kubb sem heitir `setText` en með honum getur þú breytt textanum í einingu á skjánum. Þú ætlar að breyta atvikshöndlara fyrir hnappinn þannig að hann breyta texta fyrirsagnarinnar þegar smellt er á hnappinn.

        -   Dragðu fram `setText()` kubb og settu _innan í_  `onEvent()` endurkallsfall (callback function) (þar sem `console.log()` kubburinn er nú)
        -   Veldu úr fellilista kubbsins "titleLabel" (heiti einingarinnar sem þú vilt breyta)
        -   Skiptu út "text" í í öðru inntaki kubbsins og settu inn nýja fyrirsögn fyrir appið
        -   Keyrðu forritið og smelltu á hnappinn til að sjá þetta virka
      CSDU4 - Design Mode - 4: "# ID\n\nEiginleikinn `id` (venjulega skrifað **ID**)
        er **einstakt auðkenni** eða heiti sem hver eining í appinu hefur.\n\nHver
        eining í appinu verður að hafa **einstakt auðkenni (ID)**. Ef í appinu eru
        tvær einingar (t. d. hnappar) með sama ID þá birtist aðvörun um það.\n\n#
        Gerðu þetta\n\nHver eining sem þú dregur fram í Hönnunarstöðunni fær sjálfkrafa
        ID en þessi sjálfgefnu heiti eru ekki mjög hjálpleg (t. d. `button1` og `button2`),
        svo að þú ættir að venja þig á að gefa einingum þín eigin heiti í ID reitnum.\n\n-
        \  Breyttu heiti \"Smelltu á mig\" hnappsins í eitthvað gagnlegra (t. d. `redButton`).
        \n-   Dragðu fram annan hnapp\n-   Hafðu hann bláan og láttu hann heita `blueButton`"
      CSDU4 - Design Mode Icons: |-
        <img src="https://images.code.org/2b405319f597910b1563ae607958171c-image-1475866226306.49.51.png" style="width: 200px; float:right">

        # Tákn

        Tákn (icons) hjálpa notandanum að skilja virkni appsins og gefa því fagmannlegra útlit.

        # Gerðu þetta

        Bættu nokkrum táknum í appið. Gerðu þetta fyrir hvert þeirra:

        -   Dragðu fram myndeiningu (image)
        -   Smelltu á "Choose..." við "Picture" reitinn
        -   Smelltu á flipann "Icons" og veldu tákn
        -   Ekki gleyma að gefa myndinni gott heiti (ID)! (við erum alltaf að segja þetta...)
      CSDU4 Connecting Screens: |-
        # Navigating

        Once you start adding multiple screens to an app, you need to make sure that users can always get where they want to go. In the next two levels you'll learn how to make sure a user can always get back to the "homepage" of your app.

        # Do This

        Here's an app with four different pages, but only the "red" screen is linked so far. In this level you'll make the other two buttons take the user to the correct screen.

        -   Add two `onEvent()` blocks, one each for the "greenButton" and "blueButton"
        -   Use the `setScreen()` block to make each button switch to the appropriate screen
        -   Test your app to make sure both buttons work. For example, when you click the green button you should go to the green screen.
      CSDU4 Connecting Screens Getting Back: |-
        # Navigating Back

        Someone using your app can now get to each of the red, green, and blue pages, but they can't get back to the homepage. You can add buttons and event handlers of your own to help them do this.

        # Do This

        Create buttons and event handlers to help a user navigate back to the "home" screen

        -   Use Design Mode to create a button inside each of the "red", "green", and "blue" screens. Make sure to give them descriptive IDs.
        -   Back in your code drag in three `onEvent()` blocks, one for each of the three buttons you made.
        -   Inside each `onEvent()` block use the `setScreen()` block that switches back to your "home" screen.
        -   Test your app. You should now be able to navigate back to the home screen from each of the other three.
      CSDU4 Crowdsource App Demo: |-
        # Crowdsourcing

        Crowdsourcing apps allow multiple users to submit content for everyone to use (the _source_ of content is the _crowd_). This app is very similar to the list app, with the main difference being that the list app assumes a single user while this app allows all users to add to the same list and "like" submissions.

        This example uses a list of crowdsourced information for simplicity, but you could display any kind of information in many different formats. A crowdsourcing app could allow users to submit locations for display on a map, images to go into a gallery, or any number of other types of information.

        # Functionality Missing from this Prototype

        -   User's can't create accounts or profiles
        -   Submitted things aren't added to the list
        -   Clicking on the "like" icons don't change their state
      CSDU4 Crowdsource App Demo_2018: |-
        # Crowdsourcing

        Crowdsourcing apps allow multiple users to submit content for everyone to use (the _source_ of content is the _crowd_). This app is very similar to the list app, with the main difference being that the list app assumes a single user while this app allows all users to add to the same list and "like" submissions.

        This example uses a list of crowdsourced information for simplicity, but you could display any kind of information in many different formats. A crowdsourcing app could allow users to submit locations for display on a map, images to go into a gallery, or any number of other types of information.

        # Functionality Missing from this Prototype

        -   User's can't create accounts or profiles
        -   Submitted things aren't added to the list
        -   Clicking on the "like" icons don't change their state
      CSDU4 Crowdsource App Demo_2019: |-
        # Crowdsourcing

        Crowdsourcing apps allow multiple users to submit content for everyone to use (the _source_ of content is the _crowd_). This app is very similar to the list app, with the main difference being that the list app assumes a single user while this app allows all users to add to the same list and "like" submissions.

        This example uses a list of crowdsourced information for simplicity, but you could display any kind of information in many different formats. A crowdsourcing app could allow users to submit locations for display on a map, images to go into a gallery, or any number of other types of information.

        # Functionality Missing from this Prototype

        -   User's can't create accounts or profiles
        -   Submitted things aren't added to the list
        -   Clicking on the "like" icons don't change their state
      CSDU4 Decision App Demo: |-
        # Decision Maker

        Similar to the quiz app, a decision tree app asks the user a series of questions. The primary difference between the two is that a decision tree doesn't check for right or wrong answers, but instead attempts to give the user a suggestion or help them make a decision based on their answers.

        This simple decision maker asks only three questions,  but more advanced ones actually take the form of a tree as seen below:

        ![](https://images.code.org/aeadfca116011949855c169905ff89a3-image-1476823699500.png)

        Depending on the user's answer to each question, they're given a different page for the next question. This allows the app to gradually narrow down the decision one question at a time. This type of app can be really useful to help users understand complex processes - for example, you might introduce a recycling program by using a decision tree app to help users figure out which bin to sort items into - first asking what material it's made out of, then whether it is clean or not, and so on.

        # Functionality Missing from this Prototype

        -   Question buttons don't direct you to different screens
        -   The final screen doesn't give you a recommended decision
      CSDU4 Decision App Demo_2018: |-
        # Decision Maker

        Similar to the quiz app, a decision tree app asks the user a series of questions. The primary difference between the two is that a decision tree doesn't check for right or wrong answers, but instead attempts to give the user a suggestion or help them make a decision based on their answers.

        This simple decision maker asks only three questions,  but more advanced ones actually take the form of a tree as seen below:

        ![](https://images.code.org/aeadfca116011949855c169905ff89a3-image-1476823699500.png)

        Depending on the user's answer to each question, they're given a different page for the next question. This allows the app to gradually narrow down the decision one question at a time. This type of app can be really useful to help users understand complex processes - for example, you might introduce a recycling program by using a decision tree app to help users figure out which bin to sort items into - first asking what material it's made out of, then whether it is clean or not, and so on.

        # Functionality Missing from this Prototype

        -   Question buttons don't direct you to different screens
        -   The final screen doesn't give you a recommended decision
      CSDU4 Decision App Demo_2019: |-
        # Decision Maker

        Similar to the quiz app, a decision tree app asks the user a series of questions. The primary difference between the two is that a decision tree doesn't check for right or wrong answers, but instead attempts to give the user a suggestion or help them make a decision based on their answers.

        This simple decision maker asks only three questions,  but more advanced ones actually take the form of a tree as seen below:

        ![](https://images.code.org/aeadfca116011949855c169905ff89a3-image-1476823699500.png)

        Depending on the user's answer to each question, they're given a different page for the next question. This allows the app to gradually narrow down the decision one question at a time. This type of app can be really useful to help users understand complex processes - for example, you might introduce a recycling program by using a decision tree app to help users figure out which bin to sort items into - first asking what material it's made out of, then whether it is clean or not, and so on.

        # Functionality Missing from this Prototype

        -   Question buttons don't direct you to different screens
        -   The final screen doesn't give you a recommended decision
      CSDU4 Design Mode Video_2019: |-
        ## Spurningar til að hugleiða

        -   Hvar í Appsmiðjunni getur þú hannað notendaviðmót apps?
        -   Nefndu einhverjar einingar sem hægt er að setja í app.
      CSDU4 Functionality visible: |-
        # Controlling Visibility

        Earlier in this lesson, when we were proposing ways to simplify the quiz app, we mentioned that it was possible to show or hide design elements with code. App Lab has two functions that let you control the visibility of an element:

        -   `hideElement()` makes the specified element invisible
        -   `showElement()` makes the specified element visible

        # Do This

        The provided app has an image and two buttons.

        -   Attach an event handler to the "Hide" button that hides the image when clicked
        -   Attach an event handler to the "Show" button that shows the image when clicked
      CSDU4 List App Demo: |-
        # List Manager

        The list manager app allows user to keep track of the state of information and can be modified to serve many different purposes, such as checking in / out loaned items, tracking personal To Dos, or keeping track of where things are in a multi-step process.

        While this example focuses on a single list, more sophisticated list apps could allow the user to create multiple lists, or even move items between lists. This app also only keeps track of the name of an item and whether or not it is "Done," but it could be extended to track and organize any amount of information about the list items.

        # Functionality Missing from this Prototype

        -   Delete buttons don't actually delete items from the list
        -   Add screen doesn't actually add an item to the list
      CSDU4 List App Demo_2018: |-
        # List Manager

        The list manager app allows user to keep track of the state of information and can be modified to serve many different purposes, such as checking in / out loaned items, tracking personal To Dos, or keeping track of where things are in a multi-step process.

        While this example focuses on a single list, more sophisticated list apps could allow the user to create multiple lists, or even move items between lists. This app also only keeps track of the name of an item and whether or not it is "Done," but it could be extended to track and organize any amount of information about the list items.

        # Functionality Missing from this Prototype

        -   Delete buttons don't actually delete items from the list
        -   Add screen doesn't actually add an item to the list
      CSDU4 List App Demo_2019: |-
        # List Manager

        The list manager app allows user to keep track of the state of information and can be modified to serve many different purposes, such as checking in / out loaned items, tracking personal To Dos, or keeping track of where things are in a multi-step process.

        While this example focuses on a single list, more sophisticated list apps could allow the user to create multiple lists, or even move items between lists. This app also only keeps track of the name of an item and whether or not it is "Done," but it could be extended to track and organize any amount of information about the list items.

        # Functionality Missing from this Prototype

        -   Delete buttons don't actually delete items from the list
        -   Add screen doesn't actually add an item to the list
      CSDU4 Project Bug Feature: |-
        # Improving and Iterating

        You've put your app in front of users, gathered feedback, and identified bugs and new features - time to do something about it.

        # Do This

        Each team member is going to implement select features and bug fixes on their own version of the team's app. Start by selecting a sticky note from the **To Do** column of your team's chart and moving it to the **Doing** column. For each sticky you tackle:

        -   Add a comment to the top of your program describing the feature or bug fix you are implementing
        -   Work on your iteration until it works. Try to stay focused on only the single feature or bug that you've selected.
        -   When done, move your sticky to the **Done** column, pick a new one, and start the process over.
      CSDU4 Project Bug Feature_2018: |-
        # Improving and Iterating

        You've put your app in front of users, gathered feedback, and identified bugs and new features - time to do something about it.

        # Do This

        Each team member is going to implement select features and bug fixes on their own version of the team's app. Start by selecting a sticky note from the **To Do** column of your team's chart and moving it to the **Doing** column. For each sticky you tackle:

        -   Add a comment to the top of your program describing the feature or bug fix you are implementing
        -   Work on your iteration until it works. Try to stay focused on only the single feature or bug that you've selected.
        -   When done, move your sticky to the **Done** column, pick a new one, and start the process over.
      CSDU4 Project Bug Feature_2019: |-
        # Improving and Iterating

        You've put your app in front of users, gathered feedback, and identified bugs and new features - time to do something about it.

        # Do This

        Each team member is going to implement select features and bug fixes on their own version of the team's app. Start by selecting a sticky note from the **To Do** column of your team's chart and moving it to the **Doing** column. For each sticky you tackle:

        -   Add a comment to the top of your program describing the feature or bug fix you are implementing
        -   Work on your iteration until it works. Try to stay focused on only the single feature or bug that you've selected.
        -   When done, move your sticky to the **Done** column, pick a new one, and start the process over.
      CSDU4 Project Events: |-
        # Linking Screens

        With all of your screens in place you can start adding events that will change the screens. When you're done with this step you'll actually have an interactive prototype!

        # Do This

        For each screen of your app:

        -   Find all of the button IDs
        -   For each button, add an event handler that watches that ID
        -   In each event handler, use `setScreen()` to move the the right screen
        -   Test it all out!

        Depending on the number of screens and buttons your app has, this can be a pretty involved process. Make sure that you test your work often, using `console.log()` blocks to debug any strange behavior with your app. When you think you've got the whole thing working, compare your app with other members of your group to see if they work the same.
      CSDU4 Project Events_2018: |-
        # Linking Screens

        With all of your screens in place you can start adding events that will change the screens. When you're done with this step you'll actually have an interactive prototype!

        # Do This

        For each screen of your app:

        -   Find all of the button IDs
        -   For each button, add an event handler that watches that ID
        -   In each event handler, use `setScreen()` to move the the right screen
        -   Test it all out!

        Depending on the number of screens and buttons your app has, this can be a pretty involved process. Make sure that you test your work often, using `console.log()` blocks to debug any strange behavior with your app. When you think you've got the whole thing working, compare your app with other members of your group to see if they work the same.
      CSDU4 Project Events_2019: |-
        # Linking Screens

        With all of your screens in place you can start adding events that will change the screens. When you're done with this step you'll actually have an interactive prototype!

        # Do This

        For each screen of your app:

        -   Find all of the button IDs
        -   For each button, add an event handler that watches that ID
        -   In each event handler, use `setScreen()` to move the the right screen
        -   Test it all out!

        Depending on the number of screens and buttons your app has, this can be a pretty involved process. Make sure that you test your work often, using `console.log()` blocks to debug any strange behavior with your app. When you think you've got the whole thing working, compare your app with other members of your group to see if they work the same.
      CSDU4 Project Import: |-
        # Back To Your App

        Now that you've had some practice with importing screens, it's time to start working on your team's app.

        # Do This

        Each member of your team is going to create their own copy of the app, with all of the team members' screens imported in. This will be your copy of the app, and the copy that you will start to add code to in the next lesson.

        -   Collect all of the sharing urls for your team's pages
            -   You can find the share url by going back to the last level of the previous lesson, or by finding the screen in your [projects directory](/projects)
        -   Import each of the screens, one at a time
            -   If you run into an ID error with one of the screens, discuss the issue with the screen's creator so it can be fixed and imported
        -   Delete the default "screen1"
        -   Set the main screen as the default

        Don't worry about adding any code at this point; we'll get to that in the next level.
      CSDU4 Project Import_2018: |-
        # Back To Your App

        Now that you've had some practice with importing screens, it's time to start working on your team's app.

        # Do This

        Each member of your team is going to create their own copy of the app, with all of the team members' screens imported in. This will be your copy of the app, and the copy that you will start to add code to in the next lesson.  (Don't forget that you'll also need to import your own screen into this project.)

        -   Collect all of the sharing urls for your team's pages, **including your own**
            -   Each team member can find the share url for their own screen by going back to the last level of the previous lesson, or by finding the screen in their [projects directory](/projects)
        -   Import each of the screens, one at a time
            -   If you run into an ID error with one of the screens, discuss the issue with the screen's creator so it can be fixed and imported
        -   Delete the default "screen1"
        -   Set the main screen as the default

        Don't worry about adding any code at this point; we'll get to that in the next level.
      CSDU4 Project Import_2019: |-
        # Back To Your App

        Now that you've had some practice with importing screens, it's time to start working on your team's app.

        # Do This

        Each member of your team is going to create their own copy of the app, with all of the team members' screens imported in. This will be your copy of the app, and the copy that you will start to add code to in the next lesson.  (Don't forget that you'll also need to import your own screen into this project.)

        -   Collect all of the sharing urls for your team's pages, **including your own**
            -   Each team member can find the share url for their own screen by going back to the last level of the previous lesson, or by finding the screen in their [projects directory](/projects)
        -   Import each of the screens, one at a time
            -   If you run into an ID error with one of the screens, discuss the issue with the screen's creator so it can be fixed and imported
        -   Delete the default "screen1"
        -   Set the main screen as the default

        Don't worry about adding any code at this point; we'll get to that in the next level.
      CSDU4 Quiz App Demo: |-
        # Quiz Me

        A quiz app can be used to teach, or help reinforce, information important to your chosen topic.

        At its most basic, a quiz app is composed of a screen for each question with two or more buttons for multiple choice answers. Each button links to a page that either confirms that you were correct, or gives you information about why you were were wrong.

        More advanced quiz apps could include features such as:

        -   Different types of questions (such as matching, free response, or even interactive games)
        -   Randomizing the order of questions
        -   Changing the questions based on how we'll you're doing
        -   Providing a final score
        -   Incorporating study material

        # Functionality Missing from this Prototype

        -   Questions aren't actually checked for correctness
      CSDU4 Quiz App Demo_2018: |-
        # Quiz Me

        A quiz app can be used to teach, or help reinforce, information important to your chosen topic.

        At its most basic, a quiz app is composed of a screen for each question with two or more buttons for multiple choice answers. Each button links to a page that either confirms that you were correct, or gives you information about why you were were wrong.

        More advanced quiz apps could include features such as:

        -   Different types of questions (such as matching, free response, or even interactive games)
        -   Randomizing the order of questions
        -   Changing the questions based on how we'll you're doing
        -   Providing a final score
        -   Incorporating study material

        # Functionality Missing from this Prototype

        -   Questions aren't actually checked for correctness
      CSDU4 Quiz App Demo_2019: |-
        # Quiz Me

        A quiz app can be used to teach, or help reinforce, information important to your chosen topic.

        At its most basic, a quiz app is composed of a screen for each question with two or more buttons for multiple choice answers. Each button links to a page that either confirms that you were correct, or gives you information about why you were were wrong.

        More advanced quiz apps could include features such as:

        -   Different types of questions (such as matching, free response, or even interactive games)
        -   Randomizing the order of questions
        -   Changing the questions based on how we'll you're doing
        -   Providing a final score
        -   Incorporating study material

        # Functionality Missing from this Prototype

        -   Questions aren't actually checked for correctness
      CSDU6 - LED buttonL: "# Using Board Events\n\nRight now the LED turns on when
        the left button (`buttonL`) is pressed down. It should turn off when the right
        button (buttonR) is pressed down.\n\n<div style=\"float:right;\" markdown=1>
        \n\n![expandable](https://images.code.org/402489ec13fb6c6f38910829a9633ac3-image-1510874304220.png)
        \n\n</div>\n\n# Do this\n\n-   Add another `onBoardEvent()` block to turn
        the LED off when the right button is pressed down."
      CSDU6 - LED buttonL_2018: "# Using Board Events\n\nRight now the LED turns on
        when the left button (`buttonL`) is pressed down. It should turn off when
        the right button (buttonR) is pressed down.\n\n<div style=\"float:right;\"
        markdown=1> \n\n![expandable](https://images.code.org/402489ec13fb6c6f38910829a9633ac3-image-1510874304220.png)
        \n\n</div>\n\n# Do this\n\n-   Add another `onBoardEvent()` block to turn
        the LED off when the right button is pressed down."
      CSDU6 - LED buttonL_2019: "# Using Board Events\n\nRight now the LED turns on
        when the left button (`buttonL`) is pressed down. It should turn off when
        the right button (buttonR) is pressed down.\n\n<div style=\"float:right;\"
        markdown=1> \n\n![expandable](https://images.code.org/402489ec13fb6c6f38910829a9633ac3-image-1510874304220.png)
        \n\n</div>\n\n# Do this\n\n-   Add another `onBoardEvent()` block to turn
        the LED off when the right button is pressed down."
      CSDU6 - LED toggle buttonL up: |-
        # Other Board Events with the Buttons

        Instead of using the right button, you can make the LED turn off when the left button comes back up.

        # Do this

        -   Create an 'up' event for the left button.
        -   Add code to turn the LED off when the button pops back up.
      CSDU6 - LED toggle buttonL up_2018: |-
        # Other Board Events with the Buttons

        Instead of using the right button, you can make the LED turn off when the left button comes back up.

        # Do this

        -   Create an 'up' event for the left button.
        -   Add code to turn the LED off when the button pops back up.
      CSDU6 - LED toggle buttonL up_2019: |-
        # Other Board Events with the Buttons

        Instead of using the right button, you can make the LED turn off when the left button comes back up.

        # Do this

        -   Create an 'up' event for the left button.
        -   Add code to turn the LED off when the button pops back up.
      CSDU6 - UI and Inputs - dropdown setText: |-
        # setText and getText

        Often you will want to get the text of a UI Element and use it to set the text of another element on the screen. Can you get the text from the dropdown when the user picks a new input and use it to set the text of the "choiceDisplay" label.
      CSDU6 - UI and Inputs - get set with text input: |-
        # setText and getText

        You've seen how to use getText and setText already. Can you make this app get the text the user typed once they hit enter and show it in the text area at the bottom?

        _Tip: The "change" event is triggered when the user clicks "enter" in a field. Use an event handler for the text input watching for the "change" event._
      CSDU6 - UI and Inputs - getNumber: |-
        # getNumber

        **Starter Code:** This program creates a simple calculator but **there is something wrong with it. Try putting in 2 + 2.**

        We can fix this by using `getNumber()` instead of `getText()`. Can you fix the program by changing `getText()` to `getNumber()`?
      CSDU6 - UI and Inputs - getNumber practice: |-
        # getNumber

        **Starter Code:** The program tries to update the valueDisplay whenever the slider value changes but it always sets the value to 10.

        Can you use `getNumber()` to get the value of the slider and update the valueDisplay as it changes?
      CSDU6 - UI and Inputs - getText: |-
        # getText

        Try to set up an event handler that gets the text from the dropdown whenever a user selects a new item from the dropdown. You will need to use the getter `getText()`. Whenever you use a getter you should save it in a variable. Use `console.log()` to make sure it is working.
      CSDU6 - UI and Inputs - hide show: |-
        # Hide and Show

        It is a little weird that both buttons are on the screen at the same time. You don't need the stop alarm button until the alarm is on. Can you make the buttons only show when they are needed?

        -   You will want the stop alarm button to be hidden when the program starts. You can do this in design mode.

        Hint: When you click the trigger alarm button, you should change the text, hide the trigger alarm button, _and_ show the stop alarm button.
      CSDU6 - UI and Inputs - setProperty: |-
        # setProperty background-color

        Change the `background-color` of a button to a new random color each time it is clicked using `setProperty()`.
      CSDU6 - UI and Inputs - setProperty Image: "# setProperty image\n\n**Note:**
        This level starts in Design Mode.\n\nThere is an image element set up for
        you but it does not show when you leave Design Mode because it has not been
        told what image to display. \n\n-   Use the `setProperty()` command to set
        the image of the UI Image Element on the screen."
      CSDU6 - UI and Inputs - setProperty first level: |-
        # setProperty

        **Starter Code:** There is one call to `setProperty()` which sets the text-color to blue when you run the program.

        Can you add more calls to `setProperty()` that change other things about the text when you run the program? Try to change at least 3 more things.
      CSDU6 - UI and Inputs - setScreen: "# setScreen\n\nLets start with a setter
        you have used before `setScreen()`. \n\n-   Make the About Me button on the
        Home page go to the About Me page.\n-   Make the Back button on the About
        Me go to the Home page."
      CSDU6 - UI and Inputs - setText: |-
        # setText

        We are going to start making an alarm app. We have already set up an event handler for the "triggerAlarmButton" which will change the "statusLabel" text to ON when clicked. Can you make the stop alarm button change the text to OFF when clicked?
      CSDU6 - board event challenge_2018: |-
        # Challenge: Sound Board

        Check with your teacher before starting the challenge.

        Now that you know how to use board events, the buttons, switch, and the buzzer, try making a program that turns your board into a sound board when you press the buttons or flip the switch. Play around with the duration and frequencies of the sounds, and listen to how it turns out.
      CSDU6 - board event challenge_2019: |-
        # Challenge: Sound Board

        Check with your teacher before starting the challenge.

        Now that you know how to use board events, the buttons, switch, and the buzzer, try making a program that turns your board into a sound board when you press the buttons or flip the switch. Play around with the duration and frequencies of the sounds, and listen to how it turns out.
      CSDU6 - button LED prediction: See contained level for markdown
      CSDU6 - button LED prediction_2018: See contained level for markdown
      CSDU6 - button LED prediction_2019: See contained level for markdown
      CSDU6 - button_LED_prediction: |-
        # Board Events

        The `onBoardEvent()` block allows you to start taking input from your Circuit Playground. Look at the program with a partner and discuss what you think it'll do. Once you've come up with an answer, click "Run" to check your answer.

        -   What will happen when you press the left button down?
      CSDU6 - button_LED_prediction_2018: |-
        # Board Events

        The `onBoardEvent()` block allows you to start taking input from your Circuit Playground. Look at the program with a partner and discuss what you think it'll do. Once you've come up with an answer, click "Run" to check your answer.

        -   What will happen when you press the left button down?
      CSDU6 - button_LED_prediction_2019: |-
        # Board Events

        The `onBoardEvent()` block allows you to start taking input from your Circuit Playground. Look at the program with a partner and discuss what you think it'll do. Once you've come up with an answer, click "Run" to check your answer.

        -   What will happen when you press the left button down?
      CSDU6 - buzzer duration: |-
        # Buzzer Duration

        As you've noticed, `buzzer.frequency()` has two parameters: frequency and duration. Both of these take a number as input.

        -   Frequency changes how the buzzer sounds. The bigger the number you give it, the higher the buzzer's sound will be.

        -   Duration determines how long the buzzer is going to play a sound for in milliseconds.

        For right now we're going to focus on duration, the second parameter.

        # Do this

        Try out a few things with duration:

        -   Change the duration of the buzzer to something longer than 100.
        -   Try setting the duration to 0, what happens?

        Run the program multiple times to see what happens before you move on.
      CSDU6 - buzzer duration buttons: |-
        # Buzzer and the Buttons

        This program should use the buttons to play long and short buzzes.

        # Do this

        -   Change the duration parameter of `buzzer.frequency` to make the left button play a long buzz, and the right button play a short buzz.
      CSDU6 - buzzer duration buttons_2018: |-
        # Buzzer and the Buttons

        This program should use the buttons to play long and short buzzes.

        # Do this

        -   Change the duration parameter of `buzzer.frequency` to make the left button play a long buzz, and the right button play a short buzz.
      CSDU6 - buzzer duration buttons_2019: |-
        # Buzzer and the Buttons

        This program should use the buttons to play long and short buzzes.

        # Do this

        -   Change the duration parameter of `buzzer.frequency` to make the left button play a long buzz, and the right button play a short buzz.
      CSDU6 - buzzer duration_2018: |-
        # Buzzer Duration

        As you've noticed, `buzzer.frequency()` has two parameters: frequency and duration. Both of these take a number as input.

        -   Frequency changes how the buzzer sounds. The bigger the number you give it, the higher the buzzer's sound will be.

        -   Duration determines how long the buzzer is going to play a sound for in milliseconds.

        For right now we're going to focus on duration, the second parameter.

        # Do this

        Try out a few things with duration:

        -   Change the duration of the buzzer to something longer than 100.
        -   Try setting the duration to 0, what happens?

        Run the program multiple times to see what happens before you move on.
      CSDU6 - buzzer duration_2019: |-
        # Buzzer Duration

        As you've noticed, `buzzer.frequency()` has two parameters: frequency and duration. Both of these take a number as input.

        -   Frequency changes how the buzzer sounds. The bigger the number you give it, the higher the buzzer's sound will be.

        -   Duration determines how long the buzzer is going to play a sound for in milliseconds.

        For right now we're going to focus on duration, the second parameter.

        # Do this

        Try out a few things with duration:

        -   Change the duration of the buzzer to something longer than 100.
        -   Try setting the duration to 0, what happens?

        Run the program multiple times to see what happens before you move on.
      CSDU6 - buzzer intro: |-
        # Using the Buzzer

        You can use the buzzer in a lot of different ways, but right now we're just going to use the `buzzer.frequency()`.

        # Do this

        -   Pull out a `buzzer.frequency()` block from the toolbox and play around with it. You'll notice it has two parameters, what happens when you change either, or both of those?
        -   Run the program and enjoy the music of your Circuit Playground.
      CSDU6 - buzzer intro_2018: |-
        # Using the Buzzer

        You can use the buzzer in a lot of different ways, but right now we're just going to use the `buzzer.frequency()`.

        # Do this

        -   Pull out a `buzzer.frequency()` block from the toolbox and play around with it. You'll notice it has two parameters, what happens when you change either, or both of those?
        -   Run the program and enjoy the music of your Circuit Playground.
      CSDU6 - buzzer intro_2019: |-
        # Using the Buzzer

        You can use the buzzer in a lot of different ways, but right now we're just going to use the `buzzer.frequency()`.

        # Do this

        -   Pull out a `buzzer.frequency()` block from the toolbox and play around with it. You'll notice it has two parameters, what happens when you change either, or both of those?
        -   Run the program and enjoy the music of your Circuit Playground.
      CSDU6 - final project 1: "# Hönnun notendaviðmóts\\\r\n\n\\\r\nÁður en þú byrjar
        að fást við kóða fyrir forritið, skaltu byrja á að stilla upp notendaviðmótinu.\nGefðu
        hverri einingu, sem þú setur í hönnunina, auðkenni (\"id\") sem sýnir hvað
        hún gerir. Jafnvel þó þú ætlir ekki að vísa í eininguna í forritskóða þá gera
        lýsandi auðkenni forritið auðskildara og auðveldara að forrita."
      CSDU6 - final project 1_2018: "# Hönnun notendaviðmóts\\\r\n\n\\\r\nÁður en
        þú byrjar að fást við kóða fyrir forritið, skaltu byrja á að stilla upp notendaviðmótinu.\nGefðu
        hverri einingu, sem þú setur í hönnunina, auðkenni (\"id\") sem sýnir hvað
        hún gerir. Jafnvel þó þú ætlir ekki að vísa í eininguna í forritskóða þá gera
        lýsandi auðkenni forritið auðskildara og auðveldara að forrita."
      CSDU6 - final project 1_2019: "# Hönnun notendaviðmóts\\\r\n\n\\\r\nÁður en
        þú byrjar að fást við kóða fyrir forritið, skaltu byrja á að stilla upp notendaviðmótinu.\nGefðu
        hverri einingu, sem þú setur í hönnunina, auðkenni (\"id\") sem sýnir hvað
        hún gerir. Jafnvel þó þú ætlir ekki að vísa í eininguna í forritskóða þá gera
        lýsandi auðkenni forritið auðskildara og auðveldara að forrita."
      CSDU6 - final project 2: "# Notendaviðmótið gert virkt\\\r\n\n\\\r\nÞegar notendaviðmótið
        er tilbúið, getur þú nú bætt við atburðahöndlurum (enska;event handlers) fyrir
        einingar viðmótsins. Á þessum tímapunkti vilt þú kannske bara nota `console.log()`
        skipanir til að prófa hvort atburðirnir séu að virka rétt - þú getur seinna
        sett í staðinn kóða sem gerir eitthvað."
      CSDU6 - final project 2_2018: "# Notendaviðmótið gert virkt\\\r\n\n\\\r\nÞegar
        notendaviðmótið er tilbúið, getur þú nú bætt við atburðahöndlurum (enska;event
        handlers) fyrir einingar viðmótsins. Á þessum tímapunkti vilt þú kannske bara
        nota `console.log()` skipanir til að prófa hvort atburðirnir séu að virka
        rétt - þú getur seinna sett í staðinn kóða sem gerir eitthvað."
      CSDU6 - final project 2_2019: "# Notendaviðmótið gert virkt\\\r\n\n\\\r\nÞegar
        notendaviðmótið er tilbúið, getur þú nú bætt við atburðahöndlurum (enska;event
        handlers) fyrir einingar viðmótsins. Á þessum tímapunkti vilt þú kannske bara
        nota `console.log()` skipanir til að prófa hvort atburðirnir séu að virka
        rétt - þú getur seinna sett í staðinn kóða sem gerir eitthvað."
      CSDU6 - final project 3: "# Inntaksatburðir borðsins\\\r\n\n\\\r\nNú getur þú
        bætt við þeim atburðum sem lesa inntak frá borðinu. Aftur er nóg að nota `console.log()`
        skipanir til að höndla atburðina og kanna hvort þeir virki rétt."
      CSDU6 - final project 3_2018: "# Inntaksatburðir borðsins\\\r\n\n\\\r\nNú getur
        þú bætt við þeim atburðum sem lesa inntak frá borðinu. Aftur er nóg að nota
        `console.log()` skipanir til að höndla atburðina og kanna hvort þeir virki
        rétt."
      CSDU6 - final project 3_2019: "# Inntaksatburðir borðsins\\\r\n\n\\\r\nNú getur
        þú bætt við þeim atburðum sem lesa inntak frá borðinu. Aftur er nóg að nota
        `console.log()` skipanir til að höndla atburðina og kanna hvort þeir virki
        rétt."
      CSDU6 - final project 4: |-
        # Föll

        Eftir því sem bætist við forritið þitt ættir þú að vera vakandi fyrir mynstrum eða endurtekningum í kóðanum sem væri hægt að færa yfir í föll. Getur þú komið auga á kóða sem er endurtekinn eða röð af aðgerðum sem væru skiljanlegri ef þeim væri gefið heiti? Ekki gleyma að þú getur notað föll með stika í stað endurtekins kóða sem er að _mestu leyti_ en ekki alveg eins, t. d. kóði sem setur mismunandi liti á mörg LED ljós.
      CSDU6 - final project 4_2018: |-
        # Föll

        Eftir því sem bætist við forritið þitt ættir þú að vera vakandi fyrir mynstrum eða endurtekningum í kóðanum sem væri hægt að færa yfir í föll. Getur þú komið auga á kóða sem er endurtekinn eða röð af aðgerðum sem væru skiljanlegri ef þeim væri gefið heiti? Ekki gleyma að þú getur notað föll með stika í stað endurtekins kóða sem er að _mestu leyti_ en ekki alveg eins, t. d. kóði sem setur mismunandi liti á mörg LED ljós.
      CSDU6 - final project 4_2019: |-
        # Föll

        Eftir því sem bætist við forritið þitt ættir þú að vera vakandi fyrir mynstrum eða endurtekningum í kóðanum sem væri hægt að færa yfir í föll. Getur þú komið auga á kóða sem er endurtekinn eða röð af aðgerðum sem væru skiljanlegri ef þeim væri gefið heiti? Ekki gleyma að þú getur notað föll með stika í stað endurtekins kóða sem er að _mestu leyti_ en ekki alveg eins, t. d. kóði sem setur mismunandi liti á mörg LED ljós.
      CSDU6 - final project 5: "# Úttak borðs\\\r\n\n\\\r\nHafir þú ekki þegar gert
        það, skaltu nota eitthvað af úttakseiningum borðsins til að gefa notandanum
        gagnlegar upplýsingar."
      CSDU6 - final project 5_2018: "# Úttak borðs\\\r\n\n\\\r\nHafir þú ekki þegar
        gert það, skaltu nota eitthvað af úttakseiningum borðsins til að gefa notandanum
        gagnlegar upplýsingar."
      CSDU6 - final project 5_2019: "# Úttak borðs\\\r\n\n\\\r\nHafir þú ekki þegar
        gert það, skaltu nota eitthvað af úttakseiningum borðsins til að gefa notandanum
        gagnlegar upplýsingar."
      CSDU6 - final project 6: |-
        # Lokafrágangur

        Leggðu lokahönd á forritið svo það verði alveg ógnvænlega gott! Sé tími til ættir þú að fá endurgjöf frá hugsanlegum notendum og leita að tækifærum til endurbóta. Þegar forritið er alveg tilbúið getur þú smellt á "Ljúka" til að skila því!
      CSDU6 - final project 6_2018: |-
        # Lokafrágangur

        Leggðu lokahönd á forritið svo það verði alveg ógnvænlega gott! Sé tími til ættir þú að fá endurgjöf frá hugsanlegum notendum og leita að tækifærum til endurbóta. Þegar forritið er alveg tilbúið getur þú smellt á "Ljúka" til að skila því!
      CSDU6 - final project 6_2019: |-
        # Lokafrágangur

        Leggðu lokahönd á forritið svo það verði alveg ógnvænlega gott! Sé tími til ættir þú að fá endurgjöf frá hugsanlegum notendum og leita að tækifærum til endurbóta. Þegar forritið er alveg tilbúið getur þú smellt á "Ljúka" til að skila því!
      CSDU6 - lightswitch toggleswitch: |-
        # Using the Toggle Switch

        The toggle switch can flip in one of two positions: `open` and `close`.  This program uses it to make a light switch.  Right now it can only turn the light on.

        # Do this

        -   Create a new toggle switch event that is triggered when the switch is flipped to `close`.
        -   Add code so that when the toggle switch is flipped to `close` the light turns off.
      CSDU6 - lightswitch toggleswitch_2018: |-
        # Using the Toggle Switch

        The toggle switch can flip in one of two positions: `open` and `close`.  This program uses it to make a light switch.  Right now it can only turn the light on.

        # Do this

        -   Create a new toggle switch event that is triggered when the switch is flipped to `close`.
        -   Add code so that when the toggle switch is flipped to `close` the light turns off.
      CSDU6 - lightswitch toggleswitch_2019: |-
        # Using the Toggle Switch

        The toggle switch can flip in one of two positions: `open` and `close`.  This program uses it to make a light switch.  Right now it can only turn the light on.

        # Do this

        -   Create a new toggle switch event that is triggered when the switch is flipped to `close`.
        -   Add code so that when the toggle switch is flipped to `close` the light turns off.
      CSDU6 - sensors predict question: |-
        # Make a Prediction

        Read the code in this program and make a prediction below. What do you think this program will do when you run it? How is the user intended to interact with the board? You may need to blow onto the board to see the full range of this app.
      CSDU6 - sensors predict question_2018: |-
        # Make a Prediction

        Read the code in this program and make a prediction below. What do you think this program will do when you run it? How is the user intended to interact with the board? You may need to blow onto the board to see the full range of this app.
      CSDU6 - sensors predict question_2019: |-
        # Make a Prediction

        Read the code in this program and make a prediction below. What do you think this program will do when you run it? How is the user intended to interact with the board? You may need to blow onto the board to see the full range of this app.
      CSDU6 - toggle state LED prediction: See contained level for markdown
      CSDU6 - toggle state LED prediction_2018: See contained level for markdown
      CSDU6 - toggle state LED prediction_2019: See contained level for markdown
      CSDU6 - toggleswitch state setProp: |-
        # State and the Toggle Switch

        This program tells you whether the toggle switch is opened or closed, but it needs the `toggleSwitch.isOpen` block to work.  `toggleSwitch.isOpen` is `true` if the switch is opened and `false` if the switch is closed.

        # Do this

        -   Complete the if-statement with the `toggleSwitch.isOpen` property.
        -   Run the program and press the left button, then flip the toggle switch and press the button again.
      CSDU6 - toggleswitch state setProp_2018: |-
        # State and the Toggle Switch

        This program tells you whether the toggle switch is opened or closed, but it needs the `toggleSwitch.isOpen` block to work.  `toggleSwitch.isOpen` is `true` if the switch is opened and `false` if the switch is closed.

        # Do this

        -   Complete the if-statement with the `toggleSwitch.isOpen` property.
        -   Run the program and press the left button, then flip the toggle switch and press the button again.
      CSDU6 - toggleswitch state setProp_2019: |-
        # State and the Toggle Switch

        This program tells you whether the toggle switch is opened or closed, but it needs the `toggleSwitch.isOpen` block to work.  `toggleSwitch.isOpen` is `true` if the switch is opened and `false` if the switch is closed.

        # Do this

        -   Complete the if-statement with the `toggleSwitch.isOpen` property.
        -   Run the program and press the left button, then flip the toggle switch and press the button again.
      CSDU6 AppLab Input 1: |-
        # Input in App Lab

        _You don't need to make any changes to the code here_

        Take a minute to read through the code and run the program. Discuss with a partner:

        1.  What is the source of input?
        2.  Where and how does the program check for input?
        3.  What does the program do when it gets the right input?
        4.  What is the program doing when there is no input?
      CSDU6 AppLab Input 1_2018: |-
        # Input in App Lab

        _You don't need to make any changes to the code here_

        Take a minute to read through the code and run the program. Discuss with a partner:

        1.  What is the source of input?
        2.  Where and how does the program check for input?
        3.  What does the program do when it gets the right input?
        4.  What is the program doing when there is no input?
      CSDU6 AppLab Input 1_2019: |-
        # Input in App Lab

        _You don't need to make any changes to the code here_

        Take a minute to read through the code and run the program. Discuss with a partner:

        1.  What is the source of input?
        2.  Where and how does the program check for input?
        3.  What does the program do when it gets the right input?
        4.  What is the program doing when there is no input?
      CSDU6 Circuit Playground Test: |-
        # Test Your Board

        This level is just a quick test to make sure your board is working. To run this test, do the following:

        1.  Plug your board into your computer with a USB cable
        2.  Click "Run"
        3.  Wait a few seconds for either a Success or Error screen to pop up
        4.  If your test was successful, move on to the next level. If not, try some of the troubleshooting steps

        ## Troubleshooting

        There are a number of things that could prevent your test from passing.

        1.  Try refreshing the page and running the test again (you should refresh the page for each of the following ideas as well)
        2.  Try connecting your board to a different USB port
        3.  Try a different USB cable. Some USB cables can only be used for charging, so make sure your cable supports data transfer!
        4.  Try a different board
        5.  Go to [studio.code.org/maker/setup](/maker/setup) to run a more detailed test
      CSDU6 Circuit Playground Test_2018: |-
        # Test Your Board

        This level is just a quick test to make sure your board is working. To run this test, do the following:

        1.  Plug your board into your computer with a USB cable
        2.  Click "Run"
        3.  Wait a few seconds for either a Success or Error screen to pop up
        4.  If your test was successful, move on to the next level. If not, try some of the troubleshooting steps

        ## Troubleshooting

        There are a number of things that could prevent your test from passing.

        1.  Try refreshing the page and running the test again (you should refresh the page for each of the following ideas as well)
        2.  Try connecting your board to a different USB port
        3.  Try a different USB cable. Some USB cables can only be used for charging, so make sure your cable supports data transfer!
        4.  Try a different board
        5.  Go to [studio.code.org/maker/setup](/maker/setup) to run a more detailed test
      CSDU6 Circuit Playground Test_2019: |-
        # Test Your Board

        This level is just a quick test to make sure your board is working. To run this test, do the following:

        1.  Plug your board into your computer with a USB cable
        2.  Click "Run"
        3.  Wait a few seconds for either a Success or Error screen to pop up
        4.  If your test was successful, move on to the next level. If not, try some of the troubleshooting steps

        ## Troubleshooting

        There are a number of things that could prevent your test from passing.

        1.  Try refreshing the page and running the test again (you should refresh the page for each of the following ideas as well)
        2.  Try connecting your board to a different USB port
        3.  Try a different USB cable. Some USB cables can only be used for charging, so make sure your cable supports data transfer!
        4.  Try a different board
        5.  Go to [studio.code.org/maker/setup](/maker/setup) to run a more detailed test
      CSDU6 GameLab Input 1: |-
        # Input in Game Lab

        _You don't need to make any changes to the code here_

        Take a minute to read through the code and run the program. Discuss with a partner:

        1.  What is the source of input?
        2.  Where and how does the program check for input?
        3.  What does the program do when it gets the correct input?
        4.  What is the program doing when there is no input?
      CSDU6 GameLab Input 1_2018: |-
        # Input in Game Lab

        _You don't need to make any changes to the code here_

        Take a minute to read through the code and run the program. Discuss with a partner:

        1.  What is the source of input?
        2.  Where and how does the program check for input?
        3.  What does the program do when it gets the correct input?
        4.  What is the program doing when there is no input?
      CSDU6 GameLab Input 1_2019: |-
        # Input in Game Lab

        _You don't need to make any changes to the code here_

        Take a minute to read through the code and run the program. Discuss with a partner:

        1.  What is the source of input?
        2.  Where and how does the program check for input?
        3.  What does the program do when it gets the correct input?
        4.  What is the program doing when there is no input?
      CSDU6 array index predict contained: |-
        # Predict

        The code below will display four things on the screen.  What do you think they will be?
      CSDU6 array index predict contained_2018: |-
        # Predict

        The code below will display four things on the screen.  What do you think they will be?
      CSDU6 array index predict contained_2019: |-
        # Predict

        The code below will display four things on the screen.  What do you think they will be?
      CSDU6 array select days: |-
        # Accessing Items in an Array

        This program uses the Circuit Playground.  It creates an array of the days of the week.  When the left button is pressed, it displays the day as "Tuesday".

        # Do This

        -   Add code that will display the day as "Thursday" when the right button is pressed.
      CSDU6 array select days_2018: |-
        # Accessing Items in an Array

        This program uses the Circuit Playground.  It creates an array of the days of the week.  When the left button is pressed, it displays the day as "Tuesday".

        # Do This

        -   Add code that will display the day as "Thursday" when the right button is pressed.
      CSDU6 array select days_2019: |-
        # Accessing Items in an Array

        This program uses the Circuit Playground.  It creates an array of the days of the week.  When the left button is pressed, it displays the day as "Tuesday".

        # Do This

        -   Add code that will display the day as "Thursday" when the right button is pressed.
      CSDU6 arrays select rainbow: |-
        # Index Practice

        <img src="https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45 PM.png" style="width: 150px; float: right">

        **Starter code** has been provided that creates a list called `colors` and uses it to set the colors of the rectangles on the screen.  Unfortunately, the colors are out of order.

        # Do This

        -   Change the index numbers inside each selection block to make the rainbow appear as in the picture on the right.
      CSDU6 arrays select rainbow_2018: |-
        # Index Practice

        <img src="https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45 PM.png" style="width: 150px; float: right">

        **Starter code** has been provided that creates a list called `colors` and uses it to set the colors of the rectangles on the screen.  Unfortunately, the colors are out of order.

        # Do This

        -   Change the index numbers inside each selection block to make the rainbow appear as in the picture on the right.
      CSDU6 arrays select rainbow_2019: |-
        # Index Practice

        <img src="https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45 PM.png" style="width: 150px; float: right">

        **Starter code** has been provided that creates a list called `colors` and uses it to set the colors of the rectangles on the screen.  Unfortunately, the colors are out of order.

        # Do This

        -   Change the index numbers inside each selection block to make the rainbow appear as in the picture on the right.
      CSDU6 arrays select random: |-
        # Random Selection

        You can also select a random element in the list by using the `randomNumber` block instead of an index.  This program selects a random icon from a list and displays it on the screen when the left button is pressed.  Right now, the icons are always blue.

        # Do This

        -   Add code that will select a random color from the list and use that as the icon color.
      CSDU6 arrays select random_2018: |-
        # Random Selection

        You can also select a random element in the list by using the `randomNumber` block instead of an index.  This program selects a random icon from a list and displays it on the screen when the left button is pressed.  Right now, the icons are always blue.

        # Do This

        -   Add code that will select a random color from the list and use that as the icon color.
      CSDU6 arrays select random_2019: |-
        # Random Selection

        You can also select a random element in the list by using the `randomNumber` block instead of an index.  This program selects a random icon from a list and displays it on the screen when the left button is pressed.  Right now, the icons are always blue.

        # Do This

        -   Add code that will select a random color from the list and use that as the icon color.
      CSDU6 arrays select variable: |-
        # Using Variables

        This program is like the last one, but the icons should always match the colors (red heart, yellow star, green leaf, and blue water).  You can do this using the variable "myIndex", which will store the value of a random number so that it can be used to get the icon and the color from the same place on each list.

        # Do This

        -   Change the code so that both the icon and its color are chosen using the "myIndex" variable.
      CSDU6 arrays select variable_2018: |-
        # Using Variables

        This program is like the last one, but the icons should always match the colors (red heart, yellow star, green leaf, and blue water).  You can do this using the variable "myIndex", which will store the value of a random number so that it can be used to get the icon and the color from the same place on each list.

        # Do This

        -   Change the code so that both the icon and its color are chosen using the "myIndex" variable.
      CSDU6 arrays select variable_2019: |-
        # Using Variables

        This program is like the last one, but the icons should always match the colors (red heart, yellow star, green leaf, and blue water).  You can do this using the variable "myIndex", which will store the value of a random number so that it can be used to get the icon and the color from the same place on each list.

        # Do This

        -   Change the code so that both the icon and its color are chosen using the "myIndex" variable.
      CSDU6 buzzer 2d arrays_2018: |-
        # Challenge: 2D Arrays

        Arrays can hold all sorts of data, like numbers, strings, and even other arrays. When we put an array inside another, this becomes a 2D array. The `buzzer.playSong()` block can be used to play songs that sound more precise with 2D arrays.

        The structure that you've been using to play notes looks like this:

        `buzzer.playNotes( [array of notes to play] , tempo of the whole song);`

        The main difference with `buzzer.playSong()` is each element inside the `[array of notes to play]`, is an array with two elements: the note you want to play, and the duration of the note. Sometime you'll want a quarter note in your song, other times you'll want a full note, or maybe somewhere in between. A full song might look something like this:

        `buzzer.playSong([
          ["G3",0.25],
          ["C4",0.25],
          ["E4",0.25],
          ["G4",0.125],
          [null,0.375],
          ["E4",0.1875],
          ["G4",1]
        ], 120);`

        # Do this

        -   Use the `buzzer.playSong` block to make a different song.
        -   When you get comfortable with the structure, add more notes to the song.
      CSDU6 buzzer 2d arrays_2019: |-
        # Challenge: 2D Arrays

        Arrays can hold all sorts of data, like numbers, strings, and even other arrays. When we put an array inside another, this becomes a 2D array. The `buzzer.playSong()` block can be used to play songs that sound more precise with 2D arrays.

        The structure that you've been using to play notes looks like this:

        `buzzer.playNotes( [array of notes to play] , tempo of the whole song);`

        The main difference with `buzzer.playSong()` is each element inside the `[array of notes to play]`, is an array with two elements: the note you want to play, and the duration of the note. Sometime you'll want a quarter note in your song, other times you'll want a full note, or maybe somewhere in between. A full song might look something like this:

        `buzzer.playSong([
          ["G3",0.25],
          ["C4",0.25],
          ["E4",0.25],
          ["G4",0.125],
          [null,0.375],
          ["E4",0.1875],
          ["G4",1]
        ], 120);`

        # Do this

        -   Use the `buzzer.playSong` block to make a different song.
        -   When you get comfortable with the structure, add more notes to the song.
      CSDU6 buzzer.stop_2018: |-
        # Stopping the Music

        Sometimes you need to be able to stop the music when you want, like in the code below. Duration wasn't specified so now the note plays continuously. Luckily, the `buzzer.stop()` method is here to save your ears.

        # Do this

        -   Find a way to get the note to stop playing with `buzzer.stop()`.
        -   Celebrate your win over the endless note!
      CSDU6 buzzer.stop_2019: |-
        # Stopping the Music

        Sometimes you need to be able to stop the music when you want, like in the code below. Duration wasn't specified so now the note plays continuously. Luckily, the `buzzer.stop()` method is here to save your ears.

        # Do this

        -   Find a way to get the note to stop playing with `buzzer.stop()`.
        -   Celebrate your win over the endless note!
      CSDU6 circuit playground piano: "# Circuit Piano\n\nLook at the code below.
        You're not going to be changing it, but try to see what it does. \n\n# Do
        this\n\n-   Run the program and play with the piano on the screen."
      CSDU6 circuit playground piano_2018: "# Circuit Piano\n\nLook at the code below.
        You're not going to be changing it, but try to see what it does. \n\n# Do
        this\n\n-   Run the program and play with the piano on the screen."
      CSDU6 circuit playground piano_2019: "# Circuit Piano\n\nLook at the code below.
        You're not going to be changing it, but try to see what it does. \n\n# Do
        this\n\n-   Run the program and play with the piano on the screen."
      CSDU6 frequency creation: |-
        # Making the Buzzer Buzz

        Now that you can use the buzzer's frequency, try to make the buzzer play a high sound when the same button pops back up.

        # Do this

        -   Add another onBoardEvent block so the buzzer plays a high sound when the left button comes back **up**
      CSDU6 frequency creation_2018: |-
        # Making the Buzzer Buzz

        Now that you can use the buzzer's frequency, try to make the buzzer play a high sound when the same button pops back up.

        # Do this

        -   Add another onBoardEvent block so the buzzer plays a high sound when the left button comes back **up**
      CSDU6 frequency creation_2019: |-
        # Making the Buzzer Buzz

        Now that you can use the buzzer's frequency, try to make the buzzer play a high sound when the same button pops back up.

        # Do this

        -   Add another onBoardEvent block so the buzzer plays a high sound when the left button comes back **up**
      CSDU6 frequency modification: |-
        # Making the Buzzer Buzz

        The frequency of the buzzer determines how high or how low the buzzer will sound when it plays. The higher the number you give frequency, the higher the buzzer will sound.

        # Do this

        -   Right now the buzzer plays a high note when the left button is pressed. Make the buzzer play a low note instead.
      CSDU6 frequency modification_2018: |-
        # Making the Buzzer Buzz

        The frequency of the buzzer determines how high or how low the buzzer will sound when it plays. The higher the number you give frequency, the higher the buzzer will sound.

        # Do this

        -   Right now the buzzer plays a high note when the left button is pressed. Make the buzzer play a low note instead.
      CSDU6 frequency modification_2019: |-
        # Making the Buzzer Buzz

        The frequency of the buzzer determines how high or how low the buzzer will sound when it plays. The higher the number you give frequency, the higher the buzzer will sound.

        # Do this

        -   Right now the buzzer plays a high note when the left button is pressed. Make the buzzer play a low note instead.
      CSDU6 making new arrays: |-
        # Making New Arrays

        You know how to change arrays, now it's time for you to make your own.

        # Do this

        -   Make a new array with whatever notes you want. They can be in different octaves, arranged in a certain key, etc. Anything you want!
        -   Have the buzzer play a random note from your array when the **right** button is pressed.
      CSDU6 making new arrays_2018: |-
        # Making New Arrays

        You know how to change arrays, now it's time for you to make your own.

        # Do this

        -   Make a new array with whatever notes you want. They can be in different octaves, arranged in a certain key, etc. Anything you want!
        -   Have the buzzer play a random note from your array when the **right** button is pressed.
      CSDU6 making new arrays_2019: |-
        # Að búa til ný fylki

        Nú þegar þú kannst að breyta fylkjum, er kominn tími til að læra að búa til eigin fylki.

        # Gerðu þetta

        -   Búðu til nýtt fylki með hvaða nótum sem þú vilt. Þær geta verið í mismunandi áttundum, í tiltekinni tóntegund o. s. frv. Eins og þú vilt!
        -   Láttu hljóðgjafann spila nótu af handahófi þegar ýtt er á **réttan** hnapp.
      CSDU6 piano with notes: |-
        # Piano Notes

        This is the same piano that you saw at the beginning of the lesson, but there are some bugs!

        # Do this

        -   Edit the code so that all keys are using a `buzzer.note()` block to play the corresponding note.
        -   Make sure that all the values passed in to `buzzer.note()` are notes, and not frequencies.

        _Hint: Remember to put quotes around the notes! e.g `buzzer.note("A4", 100);`_
      CSDU6 piano with notes_2018: |-
        # Piano Notes

        This is the same piano that you saw at the beginning of the lesson, but there are some bugs!

        # Do this

        -   Edit the code so that all keys are using a `buzzer.note()` block to play the corresponding note.
        -   Make sure that all the values passed in to `buzzer.note()` are notes, and not frequencies.

        _Hint: Remember to put quotes around the notes! e.g `buzzer.note("A4", 100);`_
      CSDU6 piano with notes_2019: |-
        # Piano Notes

        This is the same piano that you saw at the beginning of the lesson, but there are some bugs!

        # Do this

        -   Edit the code so that all keys are using a `buzzer.note()` block to play the corresponding note.
        -   Make sure that all the values passed in to `buzzer.note()` are notes, and not frequencies.

        _Hint: Remember to put quotes around the notes! e.g `buzzer.note("A4", 100);`_
      CSDU6 play null notes: |-
        # Null Notes

        You may have noticed that if you put the same note side-by-side in the array, the buzzer just plays that note as one long sound instead of as individual notes. In music we often want a break (or _rest_) between notes. You can get your buzzer to play a rest by sending it the value `null`.

        `null` is a special value that represents emptiness in computer science. `playNotes` plays each note for the same duration, so a `null` element in the array is just telling `playNotes` to play nothing for the same duration as everything else.

        # Do this

        -   Run the code to hear what it sounds like first.
        -   Examine the array inside `buzzer.playNotes()`.
        -   Put a pause between notes that are the same and side-by-side, and any other place you deem appropriate.

        _Tip: `null` references a value, just like a variable name. Make sure you don't put it in quotation marks!_
      CSDU6 play null notes_2018: |-
        # Null Notes

        You may have noticed that if you put the same note side-by-side in the array, the buzzer just plays that note as one long sound instead of as individual notes. In music we often want a break (or _rest_) between notes. You can get your buzzer to play a rest by sending it the value `null`.

        `null` is a special value that represents emptiness in computer science. `playNotes` plays each note for the same duration, so a `null` element in the array is just telling `playNotes` to play nothing for the same duration as everything else.

        # Do this

        -   Run the code to hear what it sounds like first.
        -   Examine the array inside `buzzer.playNotes()`.
        -   Put a pause between notes that are the same and side-by-side, and any other place you deem appropriate.

        _Tip: `null` references a value, just like a variable name. Make sure you don't put it in quotation marks!_
      CSDU6 play null notes_2019: |-
        # Null Notes

        You may have noticed that if you put the same note side-by-side in the array, the buzzer just plays that note as one long sound instead of as individual notes. In music we often want a break (or _rest_) between notes. You can get your buzzer to play a rest by sending it the value `null`.

        `null` is a special value that represents emptiness in computer science. `playNotes` plays each note for the same duration, so a `null` element in the array is just telling `playNotes` to play nothing for the same duration as everything else.

        # Do this

        -   Run the code to hear what it sounds like first.
        -   Examine the array inside `buzzer.playNotes()`.
        -   Put a pause between notes that are the same and side-by-side, and any other place you deem appropriate.

        _Tip: `null` references a value, just like a variable name. Make sure you don't put it in quotation marks!_
      CSDU6 play predict code: Markdown is in contained level
      CSDU6 play predict code_2018: Markdown is in contained level
      CSDU6 play predict code_2019: Markdown is in contained level
      CSDU6 play predict markdown: |-
        # Make a Prediction

        Look at the code below. What do you think it's going to do?

        Give it a guess and run the code to find out!
      CSDU6 play predict markdown_2018: |-
        # Make a Prediction

        Look at the code below. What do you think it's going to do?

        Give it a guess and run the code to find out!
      CSDU6 play predict markdown_2019: |-
        # Make a Prediction

        Look at the code below. What do you think it's going to do?

        Give it a guess and run the code to find out!
      CSDU6 play songs: |-
        # Making Songs

        You can make and play full songs with `buzzer.playNotes()`. It takes two parameters: an array of notes to play, and a tempo at which to play the notes. In previous bubbles you created arrays of notes and played through them randomly, but `buzzer.playNotes()` plays each note consecutively instead.

        # Do this

        -   Pull out a `buzzer.playNotes` block and change the starting array inside.
        -   Make sure the new array you give it has at least two pairs of notes that are next to each other in the list (Example: `["A5", "A5", "G4", "G4"]`)

        _Hint: Don't forget that you can always switch back and forth between block and text mode._
      CSDU6 play songs_2018: |-
        # Making Songs

        You can make and play full songs with `buzzer.playNotes()`. It takes two parameters: an array of notes to play, and a tempo at which to play the notes. In previous bubbles you created arrays of notes and played through them randomly, but `buzzer.playNotes()` plays each note consecutively instead.

        # Do this

        -   Pull out a `buzzer.playNotes` block and change the starting array inside.
        -   Make sure the new array you give it has at least two pairs of notes that are next to each other in the list (Example: `["A5", "A5", "G4", "G4"]`)

        _Hint: Don't forget that you can always switch back and forth between block and text mode._
      CSDU6 play songs_2019: |-
        # Making Songs

        You can make and play full songs with `buzzer.playNotes()`. It takes two parameters: an array of notes to play, and a tempo at which to play the notes. In previous bubbles you created arrays of notes and played through them randomly, but `buzzer.playNotes()` plays each note consecutively instead.

        # Do this

        -   Pull out a `buzzer.playNotes` block and change the starting array inside.
        -   Make sure the new array you give it has at least two pairs of notes that are next to each other in the list (Example: `["A5", "A5", "G4", "G4"]`)

        _Hint: Don't forget that you can always switch back and forth between block and text mode._
      CSDU6 toggle state prediction: "# More on the Toggle Switch\n\nYou can also
        check whether the toggle switch is in the `open` or `close` position anywhere
        in your program. \n\nWhat different things does the button do when the toggle
        switch is `open` or `close`?"
      CSDU6 toggle state prediction_2018: "# More on the Toggle Switch\n\nYou can
        also check whether the toggle switch is in the `open` or `close` position
        anywhere in your program. \n\nWhat different things does the button do when
        the toggle switch is `open` or `close`?"
      CSDU6 toggle state prediction_2019: "# More on the Toggle Switch\n\nYou can
        also check whether the toggle switch is in the `open` or `close` position
        anywhere in your program. \n\nWhat different things does the button do when
        the toggle switch is `open` or `close`?"
      Course 4 Artist 1: "Hjálpaðu mér að teikna kassa.\\\n(Hver lína er 200 díla
        löng) \n\n<br/><br/>"
      Course 4 Artist 10: "<img src=\"https://images.code.org/c876143212d195192013582f57c6df04-image-1445625392518.36.18.png\"
        width=\"150px;\" style=\"mix-blend-mode: multiply;\" />\n\n**Frjáls tími:**
        \ Hér er kóðinn fyrir athyglisvert form.   \n\nHvað gerist ef þú endurtekur
        hann mörgum sinnum, og snýrð í hverri umferð?   \n\nTaktu eftir að snúningarnir
        fyrir þetta form eru samtals _420 gráður_, sem þýðir að í lok teikningarinnar
        snýr listamaðurinn í aðra átt en hann gerði upphaflega. Nýja áttin er nákvæmlega
        _60 gráðum_ til hægri við upphaflegu áttina.\n\n<hr/>\n\n<h4>\n<details>\n<summary><b>Endurtaka
        4</b></summary>\n<br/>\n\nEf þú vilt fara heilan hring í aðeins 4 endurtekningum,
        verður listamaðurinn að snúa **360 gráður/4 = 90 gráður** í hvert sinn.  Þú
        getur gert það með því að bæta við auka `snúa til hægri 30 gráður` kubbi við
        ytri lykkjuna (þar sem **60+30 = 90**.)\n\n<br/>\n<img src=\"https://images.code.org/9da67a628ed72e87520a02a0d917e2af-image-1440132370113.44.12.png\"
        width=\"500px;\" style=\"mix-blend-mode: multiply;\" />\n<br/><br/>\n</details>\n</h4>\n\n<h4>\n<details>\n<summary><b>Endurtaka
        6</b></summary>\n<br/>\n\nÞegar þú endurtekur formið eins og er 6 sinnum,
        er snúningurinn samtals **6x60 gráður** sem er heill **360 gráðu** hringur.\n\n<img
        src=\"https://images.code.org/b79f96b87097ce3afe8a6a5608d04e36-image-1440132287456.44.27.png\"
        \ width=\"500px;\"  style=\"mix-blend-mode: multiply;\" />\n</details>\n</h4>\n\n<h4>\n<details>\n<summary><b>Endurtaka
        12</b></summary>\n\n<br/>\n\nEf þú vilt endurtaka formið 12 sinnum, verður
        þú að láta listamanninn snúa um **360 gráður/12 = 30 gráður** í hverri umferð.
        Það þýðir að þú verður að snúa listamanninum til baka með `snúa til vinstri
        30 gráður` áður en formið er endurtekið.\n\n<br/><br/>\n<img src=\"https://images.code.org/ad254952522674496918561096817c66-image-1440132424792.44.01.png\"
        width=\"500px;\" style=\"mix-blend-mode: multiply;\" />\n\n</details>\n</h4>\n\nNú
        er komið að þér!  Getur þú endurgert hverja mynd með því að endurtaka upphaflega
        formið?  "
      Course 4 Artist 11: "<img src=\"https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png\"
        width=\"200px\"/>\n\nHér er áskorun!  \n\nÞessi hönnun notar aðeins kubba
        sem þú hefur þegar séð.  Getur þú endurskapað hana?  Prófaðu þig áfram. Það
        er ekkert atriði að þetta heppnist í fyrstu (eða jafnvel sjöttu!) tilraun.\n\nEndurtekna
        formið er næstum eins og það í síðustu þraut, nema hvað lengdin sem er notuð
        í fyrstu lykkjunni er aðeins styttri. "
      Course 4 Artist 12: |-
        <img src="https://images.code.org/70795d84048767ae7fb65883f476b27c-image-1440050836837.01.09.png"
        width="250px"/>

        Frjáls æfing með hugmynd: Þú hefur nú lært allt sem þú þarft að kunna til að búa til svona mynstur! Ef þessi mynd gefur þér hugmyndir, gætir þú glímt við eitthvað svipað. Annars bara eitthvað sem þér dettur í hug.
      Course 4 Artist 13: Enn að spila? Hér er auður flötur þar sem þú getur hannað
        hvað sem þú vilt!
      Course 4 Artist 2: "Getur þú sett þennan kóða í lykkju til að teikna yfir gráa
        ferninginn?\\\\ \n(Hver hlið er 300 dílar á lengd)"
      Course 4 Artist 20: "Enn að spila?  \n\nHér er auður flötur þar sem þú getur
        búið til hvað sem þú vilt!"
      Course 4 Artist 3: "Reyndu að greina hvað þessi kóði gerir (eða smelltu á \"Keyra\"
        til að komast að því). \n\nEndurtaktu svo nógu oft til að ljúka teikningunni."
      Course 4 Artist 4: "Hvað eru margar gráður í hring?\\\\ \nSettu þá tölu í endurtaka
        kubbinn til að búa til hring úr litum."
      Course 4 Artist 5: "Teiknaðu hinn helming þessarar myndar svo hún sé samhverf.
        Þríhyrningarnir eru jafnhliða og 50 dílar á lengd.  \n\nÞú gætir þurft að
        keyra kóðann nokkrum sinnum til að finna alla kubbana sem þarf að bæta við."
      Course 4 Artist 6: Ljúktu við kóðann til að teikna þessa þrjá jafnhliða þríhyrninga.
      Course 4 Artist 7: 'Faldaðu nú þessa lykkju í annarri lykkju og búðu til 10
        þríhyrninga. '
      Course 4 Artist 8: Teiknaðu þessa sól með því að endurtaka allan þennan kóða
        mörgum sinnum í lykkju.
      Course 4 Artist 8a: Manstu eftir þessu formi? Nú ætlum við að leyfa þér að búa
        það til án þess að fá nokkra kubba til að byrja með!
      Course 4 Artist 9: 'Endurtaktu þessa mynd 10 sinnum í lykkju, en gættu þess
        að snúa í hverri umferð. '
      Course 4 Artist Binary 1: "Hér er fall sem tekur tvíundarstreng með 1 og 0 og
        segir listamanninum að færa sig frá vinstri til hægri niður eftir myndinni.
        \n\nListamaðurinn á að lita þá reiti svarta þar sem 1 er í strengnum en sleppa
        að lita ef það er 0. \n\n**Keyrðu þennan kóða til að sjá hvernig listamaðurinn
        notar tvíundir til að teikna mynstur.**"
      Course 4 Artist Binary Free Play 2b: "<img src=\"https://images.code.org/0a30f23ff6138828d053267719d34fa8-image-1444435986654.00.22.png\"
        width=\"250px\"/>\n\n**Frjáls æfing með hugmynd:** Þú hefur nú lært allt sem
        þú þarft að kunna til að búa til svona mynstur! \n\nEf þessi mynd gefur þér
        hugmyndir, gætir þú glímt við eitthvað svipað. Annars bara eitthvað sem þér
        dettur í hug. \n\n<br/>"
      Course 4 Artist Binary pre1: |-
        Tvíundir eru aðferð til að tákna eitthvað með aðeins tveimur valkostum. Í þessu tilfelli <b>af</b> og <b>á</b>.
        <br/>
        Hér ætlum við að nota töluna <b>0</b> sem kóða fyrir stöðuna "af" og töluna <b>1</b> sem kóða fyrir "á".

        <hr/>

        Við höfum látið þig hafa grind með "dílum" sem þú getur farið í gegnum og búið til mynstur með því að gefa sumum reitum stöðuna "á".

        <b>Notaðu kubbana hér fyrir neðan til að láta listamanninn teikna tvíundirnar "01010101" í fyrstu röðina.</b>
      Course 4 Artist For Loops 1: Notaðu endurtekningarkubb til að teikna þennan
        þríhyrning sem er 50 díla breiður.
      Course 4 Artist For Loops 11: "Manstu eftir því frá fyrri áfanga þegar við notuðum
        breytu til að stjórna fjölda hliða á formi?? Við ætlum að gera það sama nú
        með breytunni `teljari`.  \n\nÞetta mynstur byrjar á þríhyrningi og bætir
        svo við einni hlið í einu þar til það er orðið að tíhyrningi (með 10 hliðar).
        Lengd hverrar hliðar á að vera 100 dílar. \n\nHvernig getur þú notað `teljari`
        breytuna úr `frá` lykkjunni til að endurgera þessa teikningu?"
      Course 4 Artist For Loops 11a: "Setjum þetta allt saman!  \n\nNotaðu þekkingu
        þína á `frá` lykkjum og breytunni `teljari` til að búa til þessa teikningu
        þar sem hvert form hefur tvær fleiri hliðar en formið á undan. Gættu þess
        að hver hlið forms sé 10 sinnum fjöldi hliða á forminu.\n\nÞú færð mjög lítinn
        kóða gefins."
      Course 4 Artist For Loops 14: "Ef þú snýrð aðeins meira eða minna en þú mundir
        venjulega gera fyrir tiltekið form, getur útkoman komið skemmtilega á óvart.
        \n\nPrófaðu að nota eitthvað af kóðanum úr síðasta áfanga, en snúa um 89 gráður
        til að búa til þennan snúna spíral úr ferningum."
      Course 4 Artist For Loops 15: Frjáls æfing! Prófaðu að búa til eigin teikningar
        með `frá` lykkjum. Við höfum líka bætt við nokkrum gagnlegum breytum sem þú
        getur notað.
      Course 4 Artist For Loops 2: "Kóðinn sem teiknar þríhyrning hefur verið settur
        inn í `frá` lykkju sem telur frá 50 til 100 hlaupandi á 10. \n\n**ATHUGAÐU:**
        Gættu þess að skoða kóðann _áður_ en þú ýtir á \"Keyra\"."
      Course 4 Artist For Loops 3: Það sem þú gerðir í síðustu þraut hjálpar þér að
        klára þessa. Minnsti þríhyrningurinn hefur 20 díla hliðar, sá stærsti 200,
        og hver þríhyrningur er 20 dílum stærri en næsti á undan.
      Course 4 Artist For Loops 4: 'Hvernig mundir þú aðlaga það sem þú hefur lært
        að því að teikna þessa ferninga? Lengd þess fyrsta er 15 dílar, þess stærsta
        300 dílar og hver ferningur er 15 dílum stærri en sá á undan. '
      Course 4 Artist For Loops 6a: Gerðu þrjár litlar breytingar á kóðanum úr síðasta
        áfanga til að ná þessu!
      Course 4 Artist For Loops 8: "Með einni lítilli breytingu á kóðanum úr síðustu
        þraut getur þú búið til þessa mynd. Geturðu fundið út hver sú breyting er?\n\nVísbending:
        Þú þarft að fjarlægja eitthvað!  "
      Course 4 Artist For Loops Challenge: |-
        **Áskorun:** Getur þú séð hvernig allt sem þú hefur lært gæti nýst þér til að búa til þessa mynd af fjölhliðungum, sem allir hafa 40 díla hliðar?

        Mundu að til að teikna spíral má ekki loka fjölhliðungnum.  Það þýðir að hvert form mun þurfa að hafa einni hlið færra en venjulega.
      Course 4 Artist For Loops inspire: "<br/><br/>\n<img\nsrc=\"https://images.code.org/9b5897e059bb29bd2faf8504659a3cfc-image-1440719685627.49.33.png\"
        width=\"250px\"/> \n<br/><br/>\n**Frjáls æfing með hugmynd:** Þú hefur nú
        lært allt sem þú þarft að kunna til að búa til svona mynstur! Ef þessi mynd
        gefur þér hugmyndir, gætir þú glímt við eitthvað svipað. Annars bara eitthvað
        sem þér dettur í hug."
      Course 4 Artist Functions Inspiration: "<img src=\"https://images.code.org/cf373e03bede480ae54aec72ce823454-image-1442951867535.54.11.png\"
        width=\"250px\"/>\n\n**Frjáls æfing með hugmynd:** Þú hefur nú lært allt sem
        þú þarft að kunna til að búa til svona mynstur! \n\nEf þessi mynd gefur þér
        hugmyndir, gætir þú glímt við eitthvað svipað. Annars bara eitthvað sem þér
        dettur í hug. "
      Course 4 Artist Functions challenge: "<img src=\"https://images.code.org/69f1c2b415f907c86aaa6ed2534c3682-image-1442870371171.13.38.png\"\nwidth=\"250px\"/>\n\n**Áskorunaráfangi:**
        Notaðu það sem þú hefur lært á þessu stigi og öðrum til að búa til teikninguna
        hér fyrir ofan.  "
      Course 4 Artist Inspire: "<img src=\"https://images.code.org/b5e28b084cb331ee030ea3853ed921bd-image-1440060815818.51.21.png\"
        width=\"250px\"/>\n\n**Frjáls æfing með hugmynd:** Þú hefur nú lært allt sem
        þú þarft að kunna til að búa til svona mynstur! Ef þessi mynd gefur þér hugmyndir,
        gætir þú glímt við eitthvað svipað. Annars bara eitthvað sem þér dettur í
        hug. "
      Course 4 Artist Vars 1: "Við skulum teikna jafnhliða þríhyrning. \n\nHver hlið
        verður að vera nákvæmlega 100 dílar.\n\n<br/>"
      Course 4 Artist Vars 11: |-
        Hér er flóknari kóði sem byggir á sömu hugmyndum og síðasta þraut - hvaða stærð ættir þú að setja í breytuna `hliðar` til að teikna þessa mynd sem er gerð úr ferningum?

        <p style="font-size:small; padding: 15px 15px 15px 40px; background-color:#dcf3f3; border-radius:10px;">
             Til gamans: Prófaðu að nota nokkrar mismunandi tölur til að sjá hvaða áhrif það hefur á mynstrið!
        </p>
      Course 4 Artist Vars 12: "Prófum að setja `hliðar` jafnt og 5. Því fleiri hliðar
        sem við notum í algríminu, því stærra verður allt mynstrið!\n\nTaktu eftir
        að það er ný breyta `lengd`. \nVið getum nú notað hana í hvert sinn sem við
        höfum `færa áfram`. \n\nSettu 75 í breytuna `lengd` til að teikna þetta form."
      Course 4 Artist Vars 13: "Eftir því sem form hefur fleiri hliðar, þarf hver
        hlið að vera styttri ef allt mynstrið á að geta komist fyrir á skjánum.\n\nVið
        skulum búa til algrímið fyrir þetta flotta mynstur, en í stað þess að setja
        fasta tölu í  breytuna `lengd`, skulum við nota reikningskubb með breytunni
        `hliðar` til að tryggja að hvert form komist fyrir. \n\nUmmál hvers fjölhliðungs
        er 300 dílar."
      Course 4 Artist Vars 14: |-
        **Frjáls æfing** Kíktu á þetta: Nú er algrímið þitt faldað í enn einni lykkju. Gerðu tilraunir með gildi í breytunum tveimur til að teikna óvænt mynstur.

        Enn meiri áhrif fást með því að nota liti! Notaðu handahófsliti innan í lykkjum til að sjá hvernig það breytir hönnuninni þinni.
      Course 4 Artist Vars 2: Í stað þess að `færa áfram um 150` er `færa` kubburinn
        nú að lesa úr breytunni `lengd`. Getur þú stillt `lengd` á 150 og teiknað
        þennan nýja þríhyrning?
      Course 4 Artist Vars 4: Nú vil ég búa til rétthyrning með hæð sem er tvöföld
        breiddin. Við erum með breytuna `breidd` sem þarf að stilla á 100. Getur þú
        notað reikningskubba til að ljúka við kóðann?
      Course 4 Artist Vars 6: "Hér er kóði sem getur teiknað hvaða reglulegan fjölhliðung
        sem er. \n\nÞað er ný breyta sem nefnist `hliðar` og í henni er gildið 4.
        \n\nGetur þú notað breytuna `hliðar` (ásamt reikningskubbi) til að snúa alltaf
        um réttan gráðufjölda alveg sama hve margar hliðar eru á fjölhliðungnum?"
      Course 4 Artist Vars 7: |-
        Notaðu það sem þú lærðir í síðustu þraut til að búa til þennan sexhyrning með breytunni `hliðar`.

        Sérðu hvernig þú gætir breytt aðeins einu gildi til að teikna þríhyrning, ferning, fimmhyrning eða átthyrning?
      Course 4 Artist Vars 8: "**Frjáls æfing:** Gerðu tilraunir með fjölda hliða
        á þessu formi. Getur þú breytt algríminu þannig að heildarstærð formins haldist
        óbreytt alveg sama hvað hliðarnar eru margar? "
      Course 4 Bee 1: "Býflugan veit ekki hvað er undir skýinu! \n\nNotaðu `ef` kubbinn
        til að athuga hvort það er blóm undir skýinu.\n\nSafnaðu blómasafa einu sinni,
        en **AÐEINS** ef það er blóm."
      Course 4 Bee 2: Notaðu "ef/annars" kubbinn til að athuga hvort hver hlutur er
        blóm eða bú!
      Course 4 Bee 3: "Óþekkti hluturinn er annað hvort blóm eða býkúpa. \n\nNotaðu
        `ef/annars` kubbinn til að safna blómasafa **ef** þetta er blóm, **annars**
        búa til hunang (því þá er þetta býkúpa)."
      Course 4 Bee Params 1: Skrifaðu röð skipana til að safna öllum blómasafanum.
        Notaðu fallið `sækja 3 blómasafa` sem snýr, færir til að safna safanum og
        fer svo aftur á upphaflega staðinn.
      Course 4 Bee Params 2: Breyttu `sækja 3 blómasafa` fallinu svo að það láti mig
        snúa til hægri í stað vinstri til blómanna.
      Course 4 Bee Params 3: "Nú eru blóm á báðar hliðar! \n\nVið höfum bætt við breytunum
        `vinstri` og `hægri`, sem þú getur notað, og líka bætt stikanum `stefna` við
        `sækja 3 blómasafa` fallið. \n\n**Breyttu `sækja 3 blómasafa` svo að býflugan
        snúi í rétta átt þegar breyturnar `vinstri` og `hægri` eru settar í fallið.**"
      Course 4 Bee Params 5: Byrjum frá grunni. Getur þú búið til nýtt fall `sækja
        5 safa` með stika fyrir stefnu?
      Course 4 Bee Params 6: |-
        Væri ekki ljúft ef við gætum safnað öllum þessum blómasafa með einu falli?

        Prófaðu að bæta nýjum stika `magn` við fallið til að stjórna hve miklum safa á að safna. Þú vilt ábyggilega líka gefa fallinu annað heiti!
      Course 4 Bee Params 7: |-
        Prófaðu að nota nýja fallið þitt til að safna öllum þessum blómasafa.

        <br/>
      Course 4 Bee Params 8: "**Áskorun:** Nú er komið hunang til að fást við líka!
        \n\nEndurskrifaðu fallið svo að það taki inn bæði fjölda eininga af blómasafa
        og fjölda eininga af hunangi. Hvernig gætir þú notað þessar tölur til að ákveða
        hvað á að gera?"
      Course 4 EC 1a: "**Ýkt áskorun:** Engar reglur. Engar vísbendingar. Bara áskorunin!"
      Course 4 EC 1b: "**Ýkt áskorun:** Engar reglur. Engar vísbendingar. Bara áskorunin!"
      Course 4 EC 2a: "**Ýkt áskorun:** Engar reglur. Engar vísbendingar. Bara áskorunin!"
      Course 4 EC 2b: "**Ýkt áskorun:** Engar reglur. Engar vísbendingar. Bara áskorunin!"
      Course 4 EC 2c: "**Ýkt áskorun:** Engar reglur. Engar vísbendingar. Bara áskorunin!"
      Course 4 Maze 4: Prófaðu að nota `endurtaka` kubbinn svo þú getir leyst þessa
        þraut með færri kubbum...
      Course 4 Play Lab Params 1: "Hér er fallið `stökkva` sem lætur leikmann stökkva
        upp 100 díla. \n\nKeyrðu forritið og notaðu `stökkva` fallið til að safna
        öllum flöggunum með því að hreyfa hundinn með örvarlyklunum."
      Course 4 Play Lab Params 10: |-
        Við höfum bætt við einu falli í viðbót fyrir þig.

        <hr/>

        Notaðu `ef` setningu til að forrita leikinn svo hann kalli á fallið `næsta_borð` aðeins ef `stig_leikmanns` fer upp fyrir tiltekna tölu.

        </h4>

        *Til dæmis `stig_leikmanns` > 6*

        <hr/>

        _Spilaðu leikinn og náðu að ljúka borði 3 til að fara í næstu þraut._
      Course 4 Play Lab Params 2: "Nú höfum við flögg sem eru of hátt uppi fyrir núverandi
        stökk! Við skulum nota bæði \"upp\" og \"niður\" örvarnar svo að við getum
        haft margar stökkhæðir. \n\nVið þurfum að bæta stikanum `hæð` við stökkfallið.
        \ \n\n-   Örvarlykillinn upp ætti að láta hundinn stökkva upp 200 díla \n-
        \  Örvarlykillinn niður ætti að láta hann stökkva aðeins 100 díla. "
      Course 4 Play Lab Params 3: "Við höfum bætt við öðrum stika við stökkfallið
        svo við getum notað það með öðrum leikmönnum. Hver leikmaður er táknaður með
        tölu, talið frá 1. \n\nBreyttu fallinu `stökkva` svo að það noti stikann `leikmaður`
        til að láta réttan leikmann stökkva."
      Course 4 Play Lab Params 4: "Hér er fallið `rása`. \n\nBreyttu því svo að Köttur
        færist upp 400 díla og svo niður 400."
      Course 4 Play Lab Params 5: Breyttu `rása` fallinu með því að bæta við stikanum
        `leikmaður`, svo að við getum kallað á það fyrir hvern leikmann á skjánum.
        Mundu að leikmennirnir hafa tölurnar 1, 2 og 3.
      Course 4 Play Lab Params 6: Bættu við öðrum stika `hraði` við fallið `rása`.
        Prófaðu að nota `stilla hraða` kubb með nýja stikanum `hraði` til að hjálpa
        Mörgæs að ná báðum flöggunum áður en hinir leikmennirnir ná svo mikið sem
        einum.
      Course 4 Play Lab Params 7: "Skemmtum okkur! Skoðaðu gefna kóðann og reyndu
        að finna út hvað hver kubbur gerir. \n\nNotaðu svo örvarlyklana til að stjórna
        Hundi og safna öllum flöggunum.\n\n**Taktu eftir:** Þú þarft ekki að breyta
        forritinu neitt"
      Course 4 Play Lab Params 8: Notaðu kubbinn `þegar leikmaður snertir` til að
        senda Hund aftur efst til vinstri en AÐEINS ef Hundur snertir einhvern annan
        leikmann.
      Course 4 Play Lab Params 9: |-
        Hér er leikurinn okkar frá því áður, en mest af kóðanum er falið. Það er nýtt fall `skora_stig`.

        * * *

        #### Breyttu fallinu svo að nýjum stika `stig` sé bætt við breytuna `skor_leikmanns`.

        #### Breytan `skor_leikmanns` ætti að hækka í hvert sinn sem Hundur klukkar Kött með böku og lækka í hvert sem Köttur klukkar Hund með samloku.

        * * *

        _Athugaðu_: Smelltu svo á "Keyra" til að spila. Þegar Hundur nær að skora 6 stig, munt þú færast áfram í næstu þraut.\_
      Course 4 Play Lab Vars 1: "Í þetta sinn þarft þú ekki að búa til neinn kóða
        heldur bara ýta á `Keyra` til að spila leikinn! \n\nÍ leiknum ert þú hundurinn
        sem reynir að safna fleiri flöggum en kötturinn. Notaðu örvarlykilinn niður
        til að stjórna hundinum. Ýttu á `Ljúka` þegar þú vilt hætta."
      Course 4 Play Lab Vars 2: Keppnin í síðustu þraut var ekki sanngjörn! Breyttu
        breytunni `hraði_hunds` til að tryggja að þú náir að safna fleiri flöggum
        en kötturinn. Sá sem fyrst safnar 10 vinnur leikinn!
      Course 4 Play Lab Vars 3: |-
        Hér er ný tegund leiks!

        Þú þarft ekki að breyta neinu í þessum áfanga.

        **Leiðbeiningar:** Notaðu hægri og vinstri örvar til að færa og upp örina til að stökkva. Reyndu að safna öllum flöggunum.
      Course 4 Play Lab Vars 4: 'Nú notum við breytuna `hæð` til að stjórna hve hátt
        hundurinn getur stokkið. Uppfærðu breytuna `hæð` svo að hundurinn geti stokkið
        nógu hátt til að ná öllum flöggunum. '
      Course 4 Play Lab Vars 6: "Hvernig gætum við skorað stig í þessum leik? \n\n1.
        \ Bættu 1 við `stig`breytuna í hvert sinn sem Hundur hittir Kött með kökusneið.
        \n\n2.  Notaðu `þegar leikmaður 2 snertir eitthvað` atburðinn til að koma
        af stað uppfærslu á skorinu. Þú getur aukið breytuna með `stig = stig + 1.`\n\n3.
        \ Náðu skorinu 10 til að standast áfangann.\n\n**Athugaðu:** Notaðu hægri
        örina fyrir kökukastið!"
      Course 4 Play Lab Vars 7: "Fínt en nú skulum við tryggja að leikurinn sé ekki
        of auðveldur. \n\nÍ hvert sinn sem hundurinn (leikmaður 1) verður fyrir samloku
        frá kettinum (leikmanni 2) ættir þú að tapa stigi. \n\nByrjaðu með 10 stig
        svo að þetta sé ekki of erfitt. Láttu skorið lækka úr 10 í 0 til að klára
        áfangann."
      Course 4 Play Lab Vars 9: "Frjáls æfing! Hér eru allar breyturnar sem við höfum
        notað hingað til og nokkrar í viðbót ef þú skyldir vilja nota þær. \n\nTaktu
        eftir að nú eru svo margir kubbar í verkfærakassanum að við höfum þurft að
        raða þeim í viðeigandi flokka! Taktu þér tíma til að skoða hvað þú hefur.
        Búðu svo til leik eða sögu með endurtekningum, breytum og atvikum. \n\n_Vísbending:
        Flettu niður til að sjá allar skipanirnar á vinnusvæðinu._"
      Course 4 Play Labs For Loops 1: Við skulum láta hundinn segja hverja tölu frá
        1 til 100. Notaðu `frá` lykkju og teljarakubbinn til að segja teljarann í
        hverri umferð lykkjunnar.
      Course 4 Playlab For Loop Freeplay: "**Frjáls æfing:** Notaðu allt sem þú hefur
        lært til að búa til leik sem inniheldur `frá` lykkju!"
      Course 4 Playlab For Loops 4b: "Nú ætla þessir tveir leikmenn að fara í kapp!
        \ \n\nHvor um sig mun færast um `teljari` skref í einu, en teljararnir þeirra
        munu hafa mismunandi gildi vegna `frá` lykkjanna.  \n\nGetur þú breytt **aukanum**
        í annarri lykkjunni svo þeir komi jafnt í mark?"
      Course 4 Playlab For Loops 5b: Breyttu aukanum í þessum `frá` lykkjum svo leikmennirnir
        tveir endi á nákvæmlega sama stað.
      Course 4 Playlab For Loops 6b: "Nú ætlum við að nota `frá` lykkjur á allt annan
        hátt!\n\nÞessi leikur verður mjög hratt erfiðari vegna þess að tíminn milli
        hvarfa styttist hratt!\n\n<hr/>\n\n**Breyttu þessari `frá` lykkju til að búa
        til leik sem er gaman að spila!**  \n\n<hr/>\n\nÝttu á \"Keyra\" og smelltu
        á Frú Einhyrning eins oft og þú getur.  Getur þú slegið metið okkar, 24? "
      Course 4 SCF 1: "**Ofuráskorun með föll:** Notaðu gefin föll til að teikna fjórar
        raðir af sexhyrningum. Sérðu hvernig röðum með jafna tölu er hliðrað til hægri?"
      Course 4 SCF 1a: "**Ofuráskorun með föll:** Getur þú fundið leið til að safna
        öllum þessum blómasafa með sem allra fæstum kubbum?"
      Course 4 SCF 1b: "**Ofuráskorun með föll:** Getur þú fundið leið til að safna
        öllu þessu hunangi með sem allra fæstum kubbum?"
      Course 4 SCF 2: "**Ofuráskorun með föll:** Notaðu það sem þú lærðir í síðasta
        áfanga til að teikna svona mynd.\n\n_Athugaðu: Kóðinn verður einfaldari ef
        þú notar stika._  "
      Course 4 SCF 3: "**Ofuráskorun með föll:** Notaðu það sem þú lærðir í síðasta
        áfanga til að teikna svona mynd.\n\n_Athugaðu: Kóðinn verður einfaldari ef
        þú notar stika._\n\n<br/>\n<img\nsrc=\"https://images.code.org/d3d6a51fafdcc0a09a5c6b0e0f3c2b92-image-1446239805818.08.59.png\"
        width=\"300px\"/>\n<br/>  "
      Course 4 SCFL 1: "**Ofuráskorun með `frá` lykkjur:** Leystu þessa þraut með
        eins fáum kubbum og mögulegt er."
      Course 4 SCFL 1a: "**Ofuráskorun með `frá` lykkjur:** Geturðu komið Scrat til
        akarnsins með eins fáum kubbum og mögulegt er?"
      Course 4 SCFL 1b: "**Ofuráskorun með `frá` lykkjur:** Geturðu komið Scrat til
        akarnsins með eins fáum kubbum og mögulegt er?"
      Course 4 SCFL 2: |-
        **Ofuráskorun með `frá` lykkjur:** Leystu þessa þraut með eins fáum kubbum og mögulegt er.\
        <br/>
      Course 4 SCFL 3: "**Ofuráskorun með `frá` lykkjur:** Getur þú fundið leið til
        að endurgera þessa teikningu? \n\n<img src=\"https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png\"
        width=\"350px\"/>"
      Course 4 SCFL 4: "**Ofuráskorun með `frá` lykkjur:** Getur þú fundið leið til
        að endurgera þessa teikningu? \n\n<img src=\"https://images.code.org/407f502735beec686187451bdf67aada-image-1446002848700.59.34.png\"
        width=\"350px\"/>"
      Course 4 SCFL 6: "**Ofuráskorun með `frá` lykkjur:** Getur þú fundið leið til
        að endurgera þessa teikningu með einni lykkju? \n\n<img\nsrc=\"https://images.code.org/b0d15d06465d645c5ca533e5da6387b3-image-1446075597132.36.04.png\"
        width=\"350px\"/>"
      Course 4 SCFL 7: "**Ofuráskorun með `frá` lykkjur:** Listamaðurinn vill ná nokkrum
        öldum! Getur þú fundið leið til endurgera þessa teikningu? \n\n<img src=\"https://images.code.org/fba3423f2e9a405d4d3859de32cdb0f3-image-1446102880655.13.36.png\"
        width=\"350px\"/>"
      Course 4 SCV 1: |-
        <img src="https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png" width="250px"/>

        **Ofuráskorun með breytur:** Þú hefur nú lært allt sem þú þarft til að búa til svona mynstur! Þessari þraut er ætlað að vera erfið.  Getur þú haldið þig við hana þar til þú finnur lausn?
      Course 4 SCV 2: |-
        <img src="https://images.code.org/85f0b27009edd86eff78692004b9ed52-image-1444712655590.02.32.png" width="250px"/>

        **Ofuráskorun með breytur:** Þú hefur nú lært allt sem þú þarft til að búa til svona mynstur! Þessari þraut er ætlað að vera erfið.  Getur þú haldið þig við hana þar til þú finnur lausn?
      Course 4 SCV 3: |-
        **Ofuráskorun með breytur:** Þú hefur nú lært allt sem þú þarft til að búa til svona mynstur! Þessari þraut er ætlað að vera erfið. Getur þú haldið þig við hana þar til þú finnur lausn?

        * * *

        Nú er það klukkleikur! Klukkaðu Kött til að fá 2 stig. Klukkaðu Mörgæs til að fá 3 stig.  Náðu nákvæmlega 10 stigum til að vinna!
        En gættu þín því ef Köttur og Mörgæs klukka hvort annað þá tapast stig.

        **Bættu við þeim kubbum sem þarf til að leikurinn virki eins og hér var lýst.**

        -   \*\*Hvernig læturðu Hund færast í allar áttir með örvarlyklunum? \*\*
        -   \*\*Hvernig ætlarðu að bæta við stigum þegar Hundur klukkar Kött eða Mörgæs? \*\*
        -   **Hvernig ætlarðu að draga frá stig þegar Köttur og Mörgæs snertast?**
      Course 4 SCV 4: "**Ofuráskorun með breytur:** Leystu þessa þraut með eins fáum
        kubbum og mögulegt er."
      Course 4 SCV 5: "**Ofuráskorun með breytur:** Leystu þessa þraut með eins fáum
        kubbum og mögulegt er."
      Course 4 SCV 6: "<img src=\"https://images.code.org/499fc71a0a06bacb68a9789ad57f8148-image-1445574373673.16.44.png\"
        width=\"250px\"/>\n\n**Ofuráskorun með breytur:** Þú hefur nú lært allt sem
        þú þarft til að búa til svona mynstur! Þessari þraut er ætlað að vera erfið.
        \ Getur þú haldið þig við hana þar til þú finnur lausn?  "
      CourseD_Dance_Party_01: |-
        \*Nú skulum við halda danspartý!

        Dragðu `búa til nýtt`kubb inn á vinnusvæðið og settu hann inn í `uppstilling` kubbinn til þess að búa til þinn fyrsta dansara.

        \*_Þú getur líka smellt á ljósaperuna vinstra megin ef þig vantar meiri upplýsingar eða fleiri áskoranir._
      CourseD_Dance_Party_02: |-
        Nú skulum við láta elginn dansa!

        Dragðu <xml><block type="Dancelab_changeMoveLR"><title name="SPRITE">new\_dancer</title><title name="MOVE" config="MOVES.Dab, MOVES.Drop, MOVES.Floss">Floss</title><title name="DIR">-1</title></block></xml> kubbinn inn á vinnusvæðið. Festu hann undir <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">4</title><title name="UNIT">"measures"</title></block></xml> kubbinn. Þá ætti dansarinn þinn að byrja að dansa eftir 4 takta.

        **Taktar** eru notaðir til talningar í tónlist. Í þessari æfingu er einn taktur 4 slög.
      CourseD_Dance_Party_03: "_Nú erum við að dansa!_ \n\nBættu <xml><block type=\"Dancelab_atTimestamp\"><title
        name=\"TIMESTAMP\">6</title><title name=\"UNIT\">\"measures\"</title></block></xml>
        kubbi við vinnusvæðið þitt. Láttu dansarann byrja nýjan dans eftir 6 takta."
      CourseD_Dance_Party_04: |-
        _Þennan dans vantar smá íburð!_

        Leitaðu eftir nýjum kubb í verkfærakassanum þín sem bætir við bakgrunnshrifum aftan við dansarann. Fylgstu með bakgrunninum breytast í takt við tónlistina!
      CourseD_Dance_Party_05: |-
        Notaðu annan nýjan kubb til að láta dansarann skipta um hreyfingu **eftir hverja 2 takta**!

        -   Ef þú velur `(Næsta)`, `(Fyrri)` eða `(Handahóf)` segir það dansaranum að skipta um hreyfingu í hvert sinn sem kóðinn er keyrður.
      CourseD_Dance_Party_06: |-
        _Við þurfum fleiri dansara!_

        Búðu til aukadansara sem heitir `backup_dancer1` sem á að dansa við köttinn.
      CourseD_Dance_Party_08: |-
        Hver dansari hefur nokkra eiginleika (_properties_) sem stjórna útliti dansarans.

        Þú getur látið dansara virðast vera í meiri fjarlægð með því að minnka stærð (_size_) þeirra. Getur þú látið báða aukadansarana hafa sömu stærð?
      CourseD_Dance_Party_09: |-
        Dansarar hafa eiginleikann "litur" (tint) sem getur litað þá. Prófaðu að breyta lit eins dansarans.

        -   Liturinn sem þú velur mun blandast eigin lit dansarans.
      CourseD_Dance_Party_10: |-
        Nú kunnum við að breyta eiginleikum dansara. Við getum líka látið eiginleikana breytast sjálfkrafa út frá tónlistinni með því að nota þennan kubb:
        <xml>
        <block type="Dancelab_startMapping">

        <title name="SPRITE">right_unicorn</title>
        <title name="PROPERTY">"scale"</title>
        <title name="RANGE">"bass"</title>
        </block></xml>

        Þetta forrit notar styrkleika bassans (lágu hljóðanna) til að stjórna hæð eins dansara. Getur þú látið hinn dansarann líka breytast með tónlistinni?
      CourseD_Dance_Party_11: "Með kubbnum <xml><block type=\"Dancelab_whenKey\"></block></xml>
        getur þú keyrt kóða þegar ýtt er á upp örina. \n\nÞú gætir skipt um hreyfingu,
        breytt eiginleikum dansara eða bara gert einhverja hreyfingu. Notaðu ímyndunaraflið
        og fylgstu með nýjum kubbum!"
      CourseD_Dance_Party_11_5: "Skoðaðu þennan kubb:\n\n<xml>\n  <block type=\"Dancelab_makeNewDanceSpriteGroup\">\n
        \   <title name=\"N\">6</title>\n    <title name=\"COSTUME\">\"DUCK\"</title>\n
        \   <title name=\"LAYOUT\">\"circle\"</title>\n  </block></xml>\n  \nNú getur
        þú búið til heilan hóp dansara í einu!\n\nPrófaðu að nota \"allt endur\" kubbana
        til að skrifa kóða sem lætur allar endurnar dansa á sama tíma."
      CourseD_Dance_Party_11b: |-
        Nú höfum við danskeppni! Kötturinn "dabbar" þegar þú ýtir á vinstri örina. Láttu Vélmennið "droppa" einu sinni þegar þú ýtir á hægri örina og "klappa" einu sinni þegar þú ýtir á upp-örina.

        **Notaðu lyklana til að láta Vélmennið droppa-klappa droppa-klappa eins hratt og þú getur!**
      CourseD_Dance_Party_12: Finndu taktinn! Búðu til eigin dans sem þú getur deilt
        með vinum þínum.
      CourseE_HOC 2018 Level_1: Þú þarft vistir fyrir sjóferðina framundan. Náðu í
        **bát** ![](https://images.code.org/0b3162de9dc0abf3e0890d315b8cc699-image-1538697977747.png)
        úr **kistunni** ![](https://images.code.org/e0cf43fd36a50dd16ee06595047bfd8f-image-1538697999418.png).
      CourseE_HOC 2018 Level_10: Það er **kolkrabbi** ![](https://images.code.org/82f305ab1cb4a9ff9044991a18edb16e-image-1538947827218.png)
        að fela sig einhversstaðar í þessu úthafsminnismerki, en getur þú komist til
        hans?
      CourseE_HOC 2018 Level_11: Byggðu vegg úr **prismaríni** ![](https://images.code.org/d110b8d13c01756fcdbef3768b2e2859-image-1538699770898.png)
        í kringum dökka steininn. Þetta mun virkja **hliðið** ![](https://images.code.org/7773cf30f42e6727a23c8cb364d4664b-image-1538699800030.png)
        og klára áskorunina!
      CourseE_HOC 2018 Level_2: Það er mun auðveldara að sigla bát en synda! Farðu
        út á enda bryggjunnar til að hoppa um borð.
      CourseE_HOC 2018 Level_3: Gríptu árarnar og stýrðu bátnum yfir úthafið til að
        ná **þorskinum** ![](https://images.code.org/9b636884eefb1efe18f9f844e1e916a9-image-1538698597353.png).
      CourseE_HOC 2018 Level_4: Gefðu **höfrunginum** ![](https://images.code.org/8c240fd4df4da2795ba7ca942b77a057-image-1538947890991.png)
        þorskinn að éta. Notaðu "endurtaka þar til" kubb til að ferðast hraðar.
      CourseE_HOC 2018 Level_5: Það er **kuðungur** ![](https://images.code.org/2eb084fa0c718dee6ca4b6379381f735-image-1538698936660.png)
        falinn einhversstaðar! Kannaðu skipsflakið og kíktu í **kistuna** ![](https://images.code.org/16cdd5779b38909d4bf47b29535c92b0-image-1538698950602.png).
      CourseE_HOC 2018 Level_6: Hér er kuldalegt um að litast! Veiddu **lax** ![](https://images.code.org/c66eadf25b3cdfe20bbfdc91e2c28c94-image-1538699000102.png)
        á leiðinni að neðansjávarrústunum.
      CourseE_HOC 2018 Level_7a: Þú hefur fundið neðansjávarrústirnar. Leitaðu í sandsteininum
        að **kistu** ![](https://images.code.org/29a5fd76b869d755a60d39fbbb4057eb-image-1538699081910.png)
        sem geymir **prismarín** ![](https://images.code.org/5f5ebe5121b8f9787d7dbd38ad0a86cc-image-1538699091018.png)
        fjársjóð.
      CourseE_HOC 2018 Level_8: Fyrst ísjakar og nú hraun? Finndu leið í gegnum þessa
        eldfjallaeyju og náðu í **hitabeltisfiskinn** ![](https://images.code.org/6d3293e7709cb1a43d9f7617fd0cc2b8-image-1538699180397.png)
        í kóralrifinu.
      CourseE_HOC 2018 Level_9b: Þú náðir til rifsins og nú skaltu leita að **Hjarta
        hafsins** ![](https://images.code.org/3035926d2a37aa695b5d47413adcffa2-image-1538699398781.png)
        ! Notaðu bláa og rauða kóralinn til að komast til **kistunnar** ![](https://images.code.org/af697397dd70e5b6b93b00eb46c558af-image-1538699377397.png)
        með fjársjóðnum.
      Crack Random Substitution: |-
        # Leysa dulmálslykil með handahófsútskiptum!

        Þessi útgáfa tækisins gefur þér meiri upplýsingar um dulkóðaða textann og fleiri valkosti með að prófa mismunandi útskipti stafa.

        ### Mismunandi aðferðir við að greina texta

        -   Prófaðu eitthvað af röðunarvalkostunum undir flipanum Random substitution til að fá mismunandi sjónarhorn á tíðni stafa í skilaboðunum og í venjulegum enskum texta.
            ![](https://images.code.org/82efbca1807206c9a07de520fdb22027-image-1443572614493.23.28.png)

        ### Mismunandi útskiptaaðferðir

        -   Til að skipta út staf getur þú dregið bláan staf beint undir appelsínugula stafinn sem þú vilt skipta út í dulkóðaða textanum.
            ![](https://images.code.org/da9a7af7568d8c1698872ab91b4d79d7-image-1443572471212.gif)

        ### Fikta.  Alltaf fikta.

        -   Það eru aðrar leiðir til að greina og skipta út stöfum sem þú getur fundið með því að smella á hnappa og prófa þig áfram.
        -   Mundu: Þú getur ekki skemmt neitt :)

        Gáðu hvað það tekur þig langan tíma að leysa dulmálslykilinn! Er þetta góð aðferð til að dulkóða leynilegar upplýsingar?

        <img src="http://code.org/api/hour/finish_encryption.png">
      Crack a Caesar Cipher: |-
        # Leystu Sesar dulkóðun!

        Með þessu tæki getur þú leikið þér með texta og útbúið Sesar dulkóðanir. Þú getur notað það til að dulkóða skilaboð eða leysa úr dulkóðuðum skilaboðum.

        # Gerðu þetta

        -   Sæktu **Dæmi um skilaboð** úr Message listanum. Þetta setur inn skilaboð sem hafa verið dulkóðuð með Sesar dulkóðunarlykli.

        ![](https://images.code.org/347139486c8c729bf3c6e72ce67da878-image-1476286380409.gif)

        -   Með hnöppunum í Caesar substitution reitnum getur þú hliðrað stafrófinu fram eða aftur til að reyna að afrugla skilaboðin.

        ![](https://images.code.org/ef9ebc16d2f1442dc46fba9bd48b5d43-image-1476285966821.gif)

        Gáðu hvað það tekur þig langan tíma að leysa dulkóðunina! Er þetta góð aðferð til að dulkóða leynilegar upplýsingar?

        <img src="http://code.org/api/hour/begin_encryption.png">
      Dance Party 1-validated: "**Spáðu hvað mun gerast:** Hér er vera sem heitir
        `alien1`! \n\nHvað heldur þú að muni gerast þegar þú smellir á hana?  "
      Dance Party 2: "Geimveran var stolt af dansfærni sinni á Mars, en nú getur hún
        bara fært sig til hliðanna. \n\nGeturðu breytt hegðuninni í <xml> <block type=\"gamelab_addBehaviorSimple\"
        inline=\"true\">\n      <value name=\"SPRITE\">\n        <block type=\"sprite_variables_get\">\n
        \         <title name=\"VAR\">alien1</title>\n        </block>\n      </value>\n
        \   </block></xml> kubbnum til að láta hana snúast í hringi?  "
      Dance Party 2_2019: "Geimveran var stolt af dansfærni sinni á Mars, en nú getur
        hún bara fært sig til hliðanna. \n\nGeturðu breytt hegðuninni í <xml> <block
        type=\"gamelab_addBehaviorSimple\" inline=\"true\">\n      <value name=\"SPRITE\">\n
        \       <block type=\"sprite_variables_get\">\n          <title name=\"VAR\">alien1</title>\n
        \       </block>\n      </value>\n    </block></xml> kubbnum til að láta hana
        snúast í hringi?  "
      Dance Party 3: "Búðu til nýja veru sem heitir `alien2`. \n\nLáttu hana skipta
        um hreyfingu þegar þú smellir á hana.  "
      Dance Party 3_2019: "Búðu til nýja veru sem heitir `alien2`. \n\nLáttu hana
        skipta um hreyfingu þegar þú smellir á hana.  "
      Dance Party 4: "Búðu til þriðju veruna sem heitir `alien3`. \n\nGetur þú látið
        allar geimverurnar standa í beinni röð? Þetta er geimverudansflokkur!"
      Dance Party 4_2019: "Búðu til þriðju veruna sem heitir `alien3`. \n\nGetur þú
        látið allar geimverurnar standa í beinni röð? Þetta er geimverudansflokkur!"
      Dance Party 5: |-
        Við getum breytt alls konar hlutum í þessu forriti þegar þú smellir á verurnar. Hvernig væri að breyta lit þeirra!

        **Bættu við kóða til að breyta lit hverrar geimveru þegar þú smellir á hana.**
      Dance Party 5_2019: |-
        Við getum breytt alls konar hlutum í þessu forriti þegar þú smellir á verurnar. Hvernig væri að breyta lit þeirra!

        **Bættu við kóða til að breyta lit hverrar geimveru þegar þú smellir á hana.**
      Dance Party 6: "Þessar geimverur eru stjórnlausar!  \n\nNotaðu <xml><block type=\"gamelab_removeAllBehaviors\"
        inline=\"true\">\n      <value name=\"SPRITE\"/>\n    </block></xml> kubbinn
        til að láta hverja geimveru hætta að hreyfast þegar smellt er á hana."
      Dance Party 6_2019: "Þessar geimverur eru stjórnlausar!  \n\nNotaðu <xml><block
        type=\"gamelab_removeAllBehaviors\" inline=\"true\">\n      <value name=\"SPRITE\"/>\n
        \   </block></xml> kubbinn til að láta hverja geimveru hætta að hreyfast þegar
        smellt er á hana."
      Dance Party 7: "Bættu loks við nýrri bjöllu sem heitir `myBell`. \n\nÞegar þú
        smellir á hana eiga allar geimverurnar að hreyfa sig eins!"
      Dance Party 7_2019: "Bættu loks við nýrri bjöllu sem heitir `myBell`. \n\nÞegar
        þú smellir á hana eiga allar geimverurnar að hreyfa sig eins!"
      Dance Party Freeplay: |-
        Búðu nú til þitt eigið geimverudiskó! Vantar hugmyndir? Prófaðu þessar:

        -   Búðu til tvær bjöllur og láttu þær hreyfa geimverurnar á mismunandi hátt
        -   Láttu geimverurnar skipta um hreyfingu ef þær snertast
      Dance Party Freeplay_2019: |-
        Búðu nú til þitt eigið geimverudiskó! Vantar hugmyndir? Prófaðu þessar:

        -   Búðu til tvær bjöllur og láttu þær hreyfa geimverurnar á mismunandi hátt
        -   Láttu geimverurnar skipta um hreyfingu ef þær snertast
      Dance Party Predict: "**Spáðu hvað mun gerast:** Hér er kviki sem heitir `alien1`!
        \ \n\nHvað heldur þú að muni gerast þegar þú smellir á hann?  "
      Dance Party Predict_2019: "**Spáðu hvað mun gerast:** Hér er vera sem virðist
        vera utan úr geimnum!     \n\nHvað heldur þú að muni gerast þegar þú smellir
        á hana?  "
      Dance_2019_01: |-
        Dragðu <xml><block type="Dancelab_makeAnonymousDanceSprite" block-text="make a new dancer"><title name="COSTUME" config="&quot;CAT&quot;, &quot;PINEAPPLE&quot;">"CAT"</title><title name="LOCATION">{x: 200, y: 200}</title></block></xml> kubbinn út á vinnusvæðið og festu hann inn í <xml><block type="Dancelab_whenSetup2" next_connection_disabled="true" block-text="setup"></block></xml> kubbinn.

         Veldu `cat` eða `sloth` til að búa til fyrsta dansarann.

        -   _Þú getur líka smellt á ljósaperuna vinstra megin til að fá meiri upplýsingar eða viðbótaráskoranir._
      Dance_2019_02: "Með <xml><block type=\"Dancelab_whenKey\" block-text=\"when
        up pressed\"></block></xml> kubbnum getur þú keyrt kóða með því að ýta á örvarlyklana.
        \nNotaðu <xml><block type=\"Dancelab_doMoveEachLR\" block-text=\"do once\"><title
        name=\"GROUP\">\"CAT\"</title><title name=\"MOVE\">MOVES.XClapSide</title><title
        name=\"DIR\">-1</title></block></xml> kubbinn til að láta köttinn klappa!\n\n_Gættu
        þess að ýta á \"upp ör\" lykilinn eða ![](<https://images.code.org/419e704e6841c0b696016bf5029b8cb9-image-1571864825506.06.45
        PM.png>) eftir að þú smellir á Keyra hnappinn!_"
      Dance_2019_03: Nú er það danskeppni! Forritaðu dansarana þannig að mismmunandi
        lyklar stjórni hverjum þeirra. Veldu góða hreyfingu fyrir hvern dansara eða
        stilltu hann á `(Handahóf)` svo hann geri eitthvað óvænt!
      Dance_2019_04: "Látum dansarana hreyfa sig í takt við tónlistina!\n\nTengdu
        <xml><block type=\"Dancelab_atTimestamp\"><title name=\"TIMESTAMP\">4</title><title
        name=\"UNIT\">\"measures\"</title></block></xml> kubbinn við <xml><block type=\"Dancelab_changeMoveEachLR\"><title
        name=\"GROUP\">\"SHARK\"</title><title name=\"MOVE\">MOVES.ThisOrThat</title><title
        name=\"DIR\">-1</title></block></xml> kubb úr dótakassanum. \n\nDansarinn
        þinn ætti að byrja nýja hreyfingu eftir fjórða taktinn.\n\n**Taktar** eru
        notaðir til að telja tímann í tónlist. Í þessum æfingum er taktur fjögur taktslög
        á lengd."
      Dance_2019_05: "_Nú erum við að dansa!_ \n\nBættu <xml><block type=\"Dancelab_atTimestamp\"><title
        name=\"TIMESTAMP\">6</title><title name=\"UNIT\">\"measures\"</title></block></xml>
        kubbi við vinnusvæðið þitt. Láttu dansarann byrja nýjan dans eftir 6 takta."
      Dance_2019_06: "Notaðu þennan nýja kubb til að stilla upp hópi minni aukadansara
        í kringum aðaldansarann í miðjunni. \n\n  <xml><block type=\"Dancelab_makeNewDanceSpriteGroup\">\n
        \   <title name=\"N\">???</title>\n    <title name=\"COSTUME\" config=\"&quot;BEAR&quot;,
        &quot;CAT&quot;, &quot;FROG&quot;, &quot;PINEAPPLE&quot;, &quot;SHARK&quot;,
        &quot;UNICORN&quot;, &quot;SLOTH&quot;\">???</title>\n    <title name=\"LAYOUT\">\"circle\"</title>\n
        \ </block></xml>\n\nNú getur þú búið til heilan hóp aukadansara í einni aðgerð!"
      Dance_2019_07: |-
        Hver dansari hefir visst safn _eiginleika_ sem stjórna útliti dansarans.

        Settu <xml><block type="Dancelab_setPropEach" block-text="the set block"><title name="GROUP" config="sprites, &quot;BEAR&quot;, &quot;CAT&quot;, &quot;DUCK&quot;, &quot;FROG&quot;, &quot;PINEAPPLE&quot;, &quot;SHARK&quot;, &quot;UNICORN&quot;, &quot;SLOTH&quot;">???</title><title name="PROPERTY">"scale"</title><title name="VAL">???</title></block></xml> undir grænan atvikskubb til að láta dansara sjást nær eða lengra í burtu.
      Dance_2019_08: Dansarar hafa eiginleikann "litur" sem stjórnar lit þeirra. Prófaðu
        að breyta litnum á einum dansara (eða á heilum hópi)!
      Dance_2019_09: |-
        Þessi **nýji kubbur** er sérstök tegund atviks sem kviknar aftur og aftur.

        <xml><block type="Dancelab_everySeconds"><title name="N">2</title><title name="UNIT">"measures"</title></block></xml>

        Með því að setja hina nýju kubbana inn í endurtekningarkubbinn getur þú aftur og aftur breytt eiginleikum dansara á meðan þeir dansa. Gerðu eitthvað frumlegt og skemmtilegt við þetta!

        _Ýttu svo á Ljúka hnappinn._
      Dance_2019_10: Finndu taktinn! Búðu til eigin dans sem þú getur deilt með vinum
        þínum.
      Dance_Party_01: |-
        \*Nú skulum við halda danspartý!

        Dragðu `búa til nýtt`kubb inn á vinnusvæðið og settu hann inn í `uppstilling` kubbinn til þess að búa til þinn fyrsta dansara.

        \*_Þú getur líka smellt á ljósaperuna vinstra megin ef þig vantar meiri upplýsingar eða fleiri áskoranir._
      Dance_Party_02: |-
        Nú skulum við láta elginn dansa!

        Dragðu <xml><block type="Dancelab_changeMoveLR"><title name="SPRITE">new\_dancer</title><title name="MOVE" config="MOVES.Dab, MOVES.Drop, MOVES.Floss">Floss</title><title name="DIR">-1</title></block></xml> kubbinn inn á vinnusvæðið. Festu hann undir <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">4</title><title name="UNIT">"measures"</title></block></xml> kubbinn. Þá ætti dansarinn þinn að byrja að dansa eftir 4 takta.

        **Taktar** eru notaðir til talningar í tónlist. Í þessari æfingu er einn taktur 4 slög.
      Dance_Party_03: "_Nú erum við að dansa!_ \n\nBættu <xml><block type=\"Dancelab_atTimestamp\"><title
        name=\"TIMESTAMP\">6</title><title name=\"UNIT\">\"measures\"</title></block></xml>
        kubbi við vinnusvæðið þitt. Láttu dansarann byrja nýjan dans eftir 6 takta."
      Dance_Party_04: |-
        _Þennan dans vantar smá íburð!_

        Leitaðu eftir nýjum kubb í verkfærakassanum þín sem bætir við bakgrunnshrifum aftan við dansarann. Fylgstu með bakgrunninum breytast í takt við tónlistina!
      Dance_Party_05: |-
        Notaðu annan nýjan kubb til að láta dansarann skipta um hreyfingu **eftir hverja 2 takta**!

        -   Ef þú velur `(Næsta)`, `(Fyrri)` eða `(Handahóf)` segir það dansaranum að skipta um hreyfingu í hvert sinn sem kóðinn er keyrður.
      Dance_Party_06: |-
        _Við þurfum fleiri dansara!_

        Búðu til aukadansara sem heitir `backup_dancer1` sem á að dansa við köttinn.
      Dance_Party_08: |-
        Hver dansari hefur nokkra eiginleika (_properties_) sem stjórna útliti dansarans.

        Þú getur látið dansara virðast vera í meiri fjarlægð með því að minnka stærð (_size_) þeirra. Getur þú látið báða aukadansarana hafa sömu stærð?
      Dance_Party_09: |-
        Dansarar hafa eiginleikann "litur" (tint) sem getur litað þá. Prófaðu að breyta lit eins dansarans.

        -   Liturinn sem þú velur mun blandast eigin lit dansarans.
      Dance_Party_10: |-
        Nú kunnum við að breyta eiginleikum dansara. Við getum líka látið eiginleikana breytast sjálfkrafa út frá tónlistinni með því að nota þennan kubb:
        <xml>
        <block type="Dancelab_startMapping">

        <title name="SPRITE">right_unicorn</title>
        <title name="PROPERTY">"scale"</title>
        <title name="RANGE">"bass"</title>
        </block></xml>

        Þetta forrit notar styrkleika bassans (lágu hljóðanna) til að stjórna hæð eins dansara. Getur þú látið hinn dansarann líka breytast með tónlistinni?
      Dance_Party_11: "Með kubbnum <xml><block type=\"Dancelab_whenKey\"></block></xml>
        getur þú keyrt kóða þegar ýtt er á upp örina. \n\nÞú gætir skipt um hreyfingu,
        breytt eiginleikum dansara eða bara gert einhverja hreyfingu. Notaðu ímyndunaraflið
        og fylgstu með nýjum kubbum!"
      Dance_Party_11_5: "Skoðaðu þennan kubb:\n\n<xml>\n  <block type=\"Dancelab_makeNewDanceSpriteGroup\">\n
        \   <title name=\"N\">6</title>\n    <title name=\"COSTUME\">\"DUCK\"</title>\n
        \   <title name=\"LAYOUT\">\"circle\"</title>\n  </block></xml>\n  \nNú getur
        þú búið til heilan hóp dansara í einu!\n\nPrófaðu að nota \"allt endur\" kubbana
        til að skrifa kóða sem lætur allar endurnar dansa á sama tíma."
      Dance_Party_11b: |-
        Nú höfum við danskeppni! Kötturinn "dabbar" þegar þú ýtir á vinstri örina. Láttu Vélmennið "droppa" einu sinni þegar þú ýtir á hægri örina og "klappa" einu sinni þegar þú ýtir á upp-örina.

        **Notaðu lyklana til að láta Vélmennið droppa-klappa droppa-klappa eins hratt og þú getur!**
      Dance_Party_12: Finndu taktinn! Búðu til eigin dans sem þú getur deilt með vinum
        þínum.
      Dance_Party_extras_alternate_2019: |-
        # Fram og aftur!

        Stundum gætirðu viljað búa til mynstur af völdum danshreyfingum. Með þessum nýja kubbi geturðu einmitt gert það.

        <xml><block type="Dancelab_alternateMoves"><title name="GROUP">sprites</title><title name="N">2</title><title name="MOVE1">MOVES.Roll</title><title name="MOVE2">MOVES.ClapHigh</title></block></xml>

        Hreyfingarnar sem þú velur verða endurteknar í sömu röð til eilífðar.

        -   Búðu til breytilega rútínu fyrir aðaldansarann fremst!
        -   Notaðu mismunandi tölur til að stjórna hversu títt skipt er um hreyfingarnar. Prófaðu `1` eða `0.5` til að skipta hraðar!
      Dance_Party_extras_battle: |-
        # Danshópar

        Hér er danskeppni tveggja hópa. Örvarnar stjórna öðrum hópnum og "w,a,s,d" lyklarnir stjórna hinum. Fáðu félaga til að fara í danskeppni við þig og reyndu svo að gera keppnina betri.

        -   Bættu við fleiri lyklum til að stjórna dansinum
        -   Láttu aukadansarana líka bregðast við þegar ýtt er á lykla
        -   Skiptu um dansara eftir hverja 4 takta með því að stilla sýnileika þeirra
      Dance_Party_extras_battle_2019: |-
        # Danshópar

        Hér er danskeppni tveggja hópa. Örvarnar stjórna öðrum hópnum og "w,a,s,d" lyklarnir stjórna hinum. Fáðu félaga til að fara í danskeppni við þig og reyndu svo að gera keppnina betri.

        -   Bættu við fleiri lyklum til að stjórna dansinum
        -   Láttu aukadansarana líka bregðast við þegar ýtt er á lykla
        -   Skiptu um dansara eftir hverja 4 takta með því að stilla sýnileika þeirra
      Dance_Party_extras_every_beat: |-
        # Fjórðapartsnótur

        Flestir dansanna okkar hafa notað heila takta, en hver taktur er myndaður af 4 fjórðapartsnótum. Þessi dans notar `hvern 0,25 takt` til að láta dansarann klappa við hverja fjórðapartsnótu.

        Þessi dans notar líka skilyrðiskubb (_conditional_) til að stjórna því hvenær `hvern 0,25 takt` kubburinn getur breytt dansinum. Prófaðu að breyta tölunum í skilyrðiskubbnum til að sjá hvaða áhrif það hefur á dansinn.

        -   Gerðu tilraunir með aðrar nótulengdir (svo sem 0,5 fyrir hálfnótu eða 0,125 fyrir áttundapartsnótu).
        -   Bættu við einhverjum `eftir takt` atvikum.
        -   Notaðu "sekúndur" í stað "takta" og reyndu að tímasetja dansana þannig.
      Dance_Party_extras_every_beat_2019: |-
        # Fjórðungsnótur

        Flestir dansar okkar nota heila takta, en hver taktur samanstendur af 4 fjórðungsnótum. Þessi dans notar <xml><block type="controls_if"><value name="IF0"><block type="logic_compare"><title name="OP">LT</title><value name="A"><block type="Dancelab_getTime"><title name="UNIT">"measures"</title></block></value><value name="B"><block type="math_number"><title name="NUM">5</title></block></value></block></value><statement name="DO0"></statement></block></xml> til að láta dansarann klappa við hverja fjórðungsnótu en bara fyrir fyrstu 4 taktana.

        Prófaðu að breyta tölunum í kubbunum til að sjá hvaða áhrif það hefur á dansinn.

        -   Gerðu tilraunir með aðrar nótulengdir (t. d. 0.5 fyrir hálfnótu eða 0.125 fyrir áttundunótu).
        -   Bættu við öðrum atvikum.
      Dance_Party_extras_layout: |-
        # Stilla sér upp!

        Skoðaðu þennan dans sem notar `uppstilling` kubbinn til að breyta uppstillingu dansaranna í dansinum. Prófaðu eina af þessum hugmyndum sem viðbót:

        -   Búðu til annan hóp dansara í annarri uppstillingu
        -   Láttu uppstillinguna breytast þegar ýtt er á lykil
        -   Breyttu eiginleika þegar dansarar skipta um uppstillingu
      Dance_Party_extras_layout_2019: |-
        # Uppstilling!

        Skoðaðu þennan dans sem notar <xml><block type="Dancelab_layoutSprites" block-text="layout"><title name="GROUP">"MOOSE"</title><title name="FORMAT">???</title></block></xml> kubbinn til að breyta uppstillingu aukadansaranna á meðan á dansinum stendur. Prófaðu eina af þessum hugmyndum sem viðbót:

        -   Búa til annan hóp dansara í annarri uppstillingu
        -   Láta uppstillinguna breytast þegar ýtt er á lykil
        -   Breyta eiginleika þegar dansararnir skipta um uppstillingu
      Dance_Party_extras_mixed_2019: |-
        # Fleiri hnappar

        Í þessum dansi getur þú stjórnað eiginleikum dansaranna á meðan þeir eru að dansa. Prófaðu að láta aðra eiginleika breytast þegar þú ýtir á hnappana. Til dæmis:

        -   Breyta lit dansarann af handahófi þegar þú ýtir á "ör niður".
        -   Bæta við hópi dansara með uppstillingu valda af handahófi þegar þú ýtir á bilslána.
      Dance_Party_extras_on_beat: |-
        # Bassa-, mið- og háir tónar

        Þessi dans notar "toppa" sem atvik til að keyra kóða þegar hinir ýmsu hlutar tónlistarinnar hljóma sterkt. Prófaðu mismunandi lög til að sjá hvernig þau breyta dansinum.
      Dance_Party_extras_on_beat_2019: |-
        # Bassa-, mið- og háir tónar

        Þessi dans notar "toppa" sem atvik til að keyra kóða þegar hinir ýmsu hlutar tónlistarinnar hljóma sterkt. Prófaðu mismunandi lög til að sjá hvernig þau breyta dansinum.
      Dance_Party_extras_speed: |-
        # Hraðar, hægar

        Þessi síðasti dans notar `stilla hraða` kubbinn til að stjórna hve hratt hver dansari hreyfir sig. Gerðu tilraunir með mismunandi hraða á mismunandi stöðum í laginu. Haltu áfram að gera breytingar á þessum dansi eða farðu til baka í einhvern af hinum dönsunum til að gera þá enn flottari.
      Dance_Party_extras_speed_2019: |-
        # Hraðar, hægar

        Þessi síðasti dans notar <xml><block type="Dancelab_setDanceSpeedEach"><title name="GROUP">"SHARK"</title><title name="SPEED">2</title></block></xml> kubbinn til að stjórna hve hratt hver dansari hreyfir sig. Gerðu tilraunir með mismunandi hraða á mismunandi stöðum í laginu. Haltu áfram að gera breytingar á þessum dansi eða farðu til baka í einhvern af hinum dönsunum til að gera þá enn flottari.
      Dance_Party_extras_visible: |-
        # Hvert fóru þeir?

        Þessi dans sýnir og felur tvo hópa af dönsurum. Prófaðu hann og reyndu svo að bæta hann með þínum hugmyndum.

        -   Bættu við enn einum hópi dansara
        -   Láttu dansarana birtast og hverfa með örvarlyklunum
        -   Feldu alla dansarana og skiptu yfir í einhver flott bakgrunnshrif
      Dance_Party_extras_visible_2019: |-
        # Hvert fóru þeir?

        Þessi dans sýnir og felur tvo hópa af dönsurum. Prófaðu hann og reyndu svo að bæta hann með þínum hugmyndum.

        -   Bættu við enn einum hópi dansara
        -   Láttu dansarana birtast og hverfa með örvarlyklunum
        -   Feldu alla dansarana og skiptu yfir í einhver flott bakgrunnshrif
      Escape Room Example: |-
        # Flóttaleikur

        Í smiðju dagsins er ætlunin að vinna að gerð apps fyrir flóttaleik!  Þessi áfangi er með leikdæmi sem þú ættir að spila til að fá tilfinningu fyrir því sem þú munt skapa.

        # Gerðu þetta

        -   Smelltu á "Keyra" til að ræsa appið.
        -   Reyndu að finna lykilinn sem opnar dyrnar.
      Final Personal Website: |-
        # Personal Website

        This is it! You have been working on your Personal Website for the whole unit. Put the finishing touches on it and submit it to your teacher! Remember to use the problem solving process as your guide in preparing your final product.

        # Do This

        -   Define: Read the rubric so you know what is expected
        -   Plan: Decide what you still need to work on and put those things in priority order
        -   Try: Implement your improvements to your personal website.
        -   Reflect: Get feedback from a classmate and decide what of that feedback to act on.

        Don't forget to take a screenshot of your home page and save it somewhere on your computer so you can find it later (_Need help with how to screenshot? Check out this <a href="http://www.take-a-screenshot.org/">website </a>._)
      Final Personal Website_2018: |-
        # Personal Website

        This is it! You have been working on your Personal Website for the whole unit. Put the finishing touches on it and submit it to your teacher! Remember to use the problem solving process as your guide in preparing your final product.

        # Do This

        -   Define: Read the rubric so you know what is expected
        -   Plan: Decide what you still need to work on and put those things in priority order
        -   Try: Implement your improvements to your personal website.
        -   Reflect: Get feedback from a classmate and decide what of that feedback to act on.

        Don't forget to take a screenshot of your home page and save it somewhere on your computer so you can find it later (*Need help with how to screenshot? Check out this <a href="http://www.take-a-screenshot.org/" target="_new">website </a>.*)
      Final Personal Website_2019: |-
        # Personal Website

        This is it! You have been working on your Personal Website for the whole unit. Put the finishing touches on it and submit it to your teacher! Remember to use the problem solving process as your guide in preparing your final product.

        # Do This

        -   Define: Read the rubric so you know what is expected
        -   Plan: Decide what you still need to work on and put those things in priority order
        -   Try: Implement your improvements to your personal website.
        -   Reflect: Get feedback from a classmate and decide what of that feedback to act on.

        Don't forget to take a screenshot of your home page and save it somewhere on your computer so you can find it later (*Need help with how to screenshot? Check out this <a href="http://www.take-a-screenshot.org/" target="_new">website </a>.*)
      Final Room Escape App: "# Þér tókst það!\n\nÞú bjóst til flóttaleik! Nú skulum
        við sérsníða hann. \n\nHugleiddu að:\n\n-   Bæta meira útliti á klefann\n-
        \  Bæta í klefann fleiri hlutum sem notendur geta átt við\n-   Hafa leynikóðann
        handahófskenndan\n-   Bæta við fleiri klefum"
      Fish Tank 1-validated: "**Spáðu**: Hvað heldur þú að muni gerast þegar þú keyrir
        þennan kóða?"
      Fish Tank 2-validated: "Búum til fiskabúr!  \n\nBreyttu Dusty (veltirunnanum)
        í fisk."
      Fish Tank 2-validated_2019: "Búum til fiskabúr!  \n\nBreyttu runnaflækjuverunni
        í veru sem er fiskur með því að smella á <xml><block type=\"gamelab_allSpritesWithAnimation\"
        block-text=\"the sprite picker block\"><title name=\"ANIMATION\">\"tumbleweed\"</title></block></xml>.\n\nGættu
        þess að breyta líka hegðun verunnar í kubbnum <xml><block type=\"gamelab_addBehaviorSimple\"
        block-text=\"the add behavior block\"></block></xml>."
      Fish Tank 3-validated: "Fiskinn er farið að svima! \n\nBreyttu hegðun hans svo
        að hann syndi um í búrinu."
      Fish Tank 3-validated_2019: "Fiskinn er farið að svima! \n\nBreyttu hegðun hans
        svo að hann syndi til vinstri og hægri."
      Fish Tank 4-validated: "Það vantar vatn í fiskbúrið! \n\nNotaðu <xml><block
        type=\"gamelab_setBackground\" inline=\"true\">\n    <value name=\"COLOR\">\n
        \     <block type=\"colour_picker\">\n        <title name=\"COLOUR\">#0000ff</title>\n
        \     </block>\n    </value>\n  </block></xml> til að lita bakgrunninn bláan."
      Fish Tank 4-validated_2019: "Það vantar vatn í fiskabúrið! \n\nNotaðu <xml><block
        type=\"gamelab_setBackground\" inline=\"true\" block-text=\"the set background
        color block\">\n    <value name=\"COLOR\">\n      <block type=\"colour_picker\">\n
        \       <title name=\"COLOUR\">#0000ff</title>\n      </block>\n    </value>\n
        \ </block></xml> til að setja lit í bakgrunninn. Við mælum með bláum!"
      Fish Tank 5-validated: Fiskurinn er svolítið einmana. Bættu öðrum kvika í fiskabúrið.
      Fish Tank 5-validated_2019: Fiskurinn er ævintýragjarn og vill hitta nýjar skepnur
        í hafinu. Bættu annarri veru í fiskabúrið. Þessi vera getur haft hvaða búning
        sem er nema þann sem þú ert að nota fyrir fiskinn!
      Fish Tank 6-validated: "Hvað vilt þú að nýi vinur fisksins geri?  \n\nGefðu
        honum hegðun og sjáðu hvað gerist!"
      Fish Tank 6-validated_2019: |-
        Hvað vilt þú að nýi vinur fisksins geri?

        Gefðu honum hegðun og sjáðu hvað gerist!
      Fish Tank 7-validated: "Nú höfum við bætt fullt af nýjum kubbum í verkfærakassann.
        \ \n\nPrófaðu þá og gerðu fiskbúrið einstaklega flott!"
      Fish Tank 7-validated_2019: "Nú höfum við bætt fullt af nýjum kubbum í verkfærakassann.
        \ \n\nPrófaðu þá og gerðu fiskbúrið einstaklega flott!"
      Fish Tank Predict: "**Spáðu**: Hvað heldur þú að muni gerast þegar þú keyrir
        þennan kóða?"
      Fish Tank Predict_2019: "**Spáðu**: Hvað heldur þú að muni gerast þegar þú keyrir
        þennan kóða?"
      Frequency Analysis: |-
        # Að ráða dulkóðun með handahófs-útskiptum!

        Það er auðvelt að ráða skilaboð sem dulkóðuð eru með **Sesar dulmálslyklinum**. En hvað ef í stað þess að hliðra öllu stafrófinu, þá mundum við skipta hverjum staf út fyrir annan staf valinn af handhófi úr stafrófinu (þó aldrei sama tvisvar)? Þetta er kallað **dulmálslykill með handahófs útskiptun**.

        Í þessari útgáfu vekfærisins munt þú nota meira gröfin sem sýna tíðni stafa. Með því að bera saman tíðni stafanna í dulkóðuðu skilaboðunum og tíðni stafa í dæmigerðum enskum texta, getur þú byrjað að fá hugmynd um suma stafina. Vissir þú að  _'E'_ er algengasti stafur í ensku? Kannske samsvarar algengasti stafurinn í dulkóðaða textanum stafnum _'E'_, en það er ekki víst! Þú þarft að reyna að sjá út hvort það gæti verið t. d. út frá því hvar E kemur þá fyrir í orðunum.

        # Gerðu þetta

        -   Sæktu skilaboðin **Sample message (hard)** úr skilaboðalistanum. Þetta hleður inn skilaboðum sem hafa verið dulkóðuð með handahófsútskiptum stafa.\
            ![](https://images.code.org/04c6230c9607110126581c298bc09183-image-1443569176380.gif)

        -   Þú munt ráða skilaboðin með því að giska á hvaða stafi ætti að setja inn í stað stafanna í dulkóðaða textanum. Þú getur gert það með því að draga bláan staf í stafrófinu beint undir appelsínugula stafinn sem þú vilt skipta um í dulkóðaða textanum. Stafir sem þú hefur breytt þannig hafa þá ekki lengur gulan lit í skilaboðaglugganum vinstra megin.
            ![](https://images.code.org/da9a7af7568d8c1698872ab91b4d79d7-image-1443572471212.gif)

        -   Prófaðu röðunarvalkostina sem þú hefur undir Random substitution flipanum til að fá mismunandi sjónarhorn á tíðni stafa í skilaboðunum og í dæmigerðum enskum texta.
            ![](https://images.code.org/82efbca1807206c9a07de520fdb22027-image-1443572614493.23.28.png)

        Hvað skyldi það taka þig langan tíma að ráða skilaboðin! Er þetta góð aðferð við að dulkóða leynilegar upplýsingar?
      Function intro Ryan: "Þú finnur **fall** sem heitir `byggja brú` á vinnusvæðinu.
        Allur kóðinn sem þú þarft til að komast yfir ána er þegar í fallinu! \n\nSettu
        litla, græna <xml> <block type=\"procedures_callnoreturn\" id=\"callMe\" block-text=\"build
        bridge\"><mutation name=\"build bridge\"/></block></xml> fallkubbinn tvisvar
        í forritið til að laga slóðina og koma {currentPlayerName} að roðasteinsblysinu
        [redstone_torch]."
      Function intro Ryan_2019: "Þú finnur **fall** sem heitir `byggja brú` á vinnusvæðinu.
        Allur kóðinn sem þú þarft til að komast yfir ána er þegar í fallinu! \n\nSettu
        litla, græna <xml> <block type=\"procedures_callnoreturn\" id=\"callMe\" block-text=\"build
        bridge\"><mutation name=\"build bridge\"/></block></xml> fallkubbinn tvisvar
        í forritið til að laga slóðina og koma {currentPlayerName} að roðasteinskyndlinum
        [redstone_torch]."
      Gamelab StartScreen Change State: |-
        # Changing the State

        Now that you can display a different screen according to the state of your program, you will need a way to change between states.  To go from the "starting" state to the "playing" state, you can have the user press the "s" key.  You'll **only** want the program to check for the key press when the program is in the "starting" state, so your code for this will go inside the "starting" conditional.  Putting one `if` block inside another is called **nesting** conditionals.

        ## Do this

        -   Inside the `if` statement that checks for "starting", add in a new `if` statement that checks whether the user has pressed the "s" key.  (`if (keyDown("s")) {`)
        -   Inside your new `if` statement, set the value of your `gameState` variable to "playing". (`gameState = "playing";`)
        -   Test the code by starting the game and pressing "s".  The game should start playing after the key is pressed.

        If the game isn't starting on the start screen, double check that when the `gameState` variable is created at the beginning of the program, its value is "starting".  (`var gameState = "starting";`)
      Gamelab StartScreen Check State: |-
        # Checking Game State

        Now that you have your game state stored in a variable, you can check it to determine what should be displayed.  This should happen inside the draw loop, since it's something that will change as the program is being run.  The program should check whether the game is in the "playing" state, and only run the program if it is.  We can worry about the other states later.

        ## Do This

        -   Inside the draw loop, add a conditional (`if` statement).
        -   For the condition, check if `gameState == "playing"`.
        -   Move the rest of the code from the draw loop inside the `if` statement, so it only runs if the game is "playing".
        -   Run the program.  Nothing should happen because the game is still in the "starting" state.
        -   Go back to where you set the value of your `gameState` variable and change it from "starting" to "playing".
        -   Run the game again, and it should play normally, because it is now in the "playing" state.
        -   Change the value of the variable back to "starting".

        (It is important to find ways to check your code as you go, rather than wait until the end of many complex changes to run it.  By checking both the playing and starting states, you know that your conditional is working properly and that the game should play while in the "playing" state.)
      Gamelab StartScreen Check States: |-
        # Check all States

        Right now the only state your program can deal with is "playing", but you can add more conditionals to account for the other three states.

        ## Do this

        -   Inside the draw loop, add in three more `if` statements that check for `gameState == "starting"`, `gameState == "won"`, and `gameState == "lost"`, respectively.
        -   Inside each `if` statement, add code that will draw text to the screen, so you can see the results of the different states.  You may also want to use `drawSprites` so you can see the background image and the player sprites, but make sure you are drawing the text on top of the sprites.
        -   Check your code by running the program in the different states.  (Don't worry about making them perfect yet, just make sure that the conditionals are working as they should.)

        In order to keep track of your code, you might find it useful to create a function for each of the different text displays, then call those functions inside the conditionals.
      Gamelab StartScreen End Game: |-
        # Ending the Game

        Next, you'll need to add code that changes the state of the game when you lose.   Scroll down to the bottom of the program, to the `gameStatus` function.  Inside the function, the program checks the score and lives variables to check whether the use should win or lose the game.  Instead of displaying a win or lose message, you'll want to change the state of the game to "won" or "lost";

        ## Do this

        -   Inside the `gameStatus` function, replace the code `text("You Won!", 35, 200);` with `gameState = "won"`.
        -   Inside the `gameStatus` function, replace the code `text("You Lost!", 35, 200);` with `gameState = "lost"`.
        -   Check your code by running the game and losing.
        -   Check your code by running the game and winning.

        (To make the game much easier to win, change the original number of lives to 1000 by replacing `var lives = 3;` to `var lives = 1000;`.)
      Gamelab StartScreen Hide Sprites: |-
        # Hide and Show Sprites

        You may prefer that the platform, coin, and rock sprites only be visible when the game is playing.  You can change the game setup to set their visible property to `false` at the beginning of the game, then set it to `true` when you start the game, then `false` again when the game is won or lost.

        ## Do this

        -   Add code after you create your platforms, gold, and rocks sprite groups that sets those sprite groups' visible properties to `false` (e.g. `platforms.setVisibileEach(false);` )
        -   In the same  three places where you set `gameState = "playing";`, set the sprite groups' visible properties to `true`.
        -   In the same places where you set `gameState = "lost";` and `gameState = "won";`, set the sprite groups' visible
        -   Check your code by running the game and losing and restarting the game.
        -   Check your code by running the game and winning and restarting the game.
      Gamelab StartScreen Intro: |-
        # Start and End Screens

        This tutorial will teach you how to make start and end screens in Game Lab, as well as restart the game from the end screen.

        Hit run to play the game on the left.  Follow the instructions on the start screen to play.  Once the game is over, follow the instructions on the end screen to restart the game.

        In the next bubble, you'll see the code for game play and start to add your own start and end screens.

        ## Start Screen

        The start screen is the introductory screen that appears before the user starts playing the game.  It usually has the title of the game and some basic instructions for playing.  It might also include the game developer.

        ## End Screen

        The end screen appears after the user has won or lost the game.  It sometimes includes the final score, player rankings or other information.  It can also have an option to play the game again.
      Gamelab StartScreen Restart Game: |-
        # Restarting the Game

        Last, you'll need to add code that restarts the game.   This is similar to how you started the game by having the user press the "s" key.  This time, you'll need to check during the "lost" and "won" states.  If the user presses the "r" key during on of these states, you should restart the game by setting the `gameState` to "playing" and also resetting the `score` and `lives` variables to 0 and 3, respectively.

        ## Do this

        -   Inside the `if (gameState == "lost") {` statement, add an if statement that checks whether the user has pressed the "r" key.
        -   Inside your new `if` statement, set `score` to 0, `lives` to 3, and `gameState` to "playing".
        -   Inside the `if (gameState == "won") {` statement, add an if statement that checks whether the user has pressed the "r" key.
        -   Inside your new `if` statement, set `score` to 0, `lives` to 3, and `gameState` to "playing".
        -   Inside the `gameStatus` function, replace the code `text("You Lost!", 35, 200);` with `gameState = "lost"`.
        -   Check your code by running the game and losing and restarting the game.
        -   Check your code by running the game and winning and restarting the game.
      Gamelab StartScreen State: |-
        # Game State Variable

        Our sample game had four different scenarios (or **states**) that we need to keep track of in order to display the right screen: "starting", "playing", "won", and "lost".  The first step in adding a start or end screen to the game is creating a variable to keep track of any changes in the state of the game.

        ## Do This

        -   Declare a variable called `gameState` at the beginning of the program.  (A good place to do this would be near where `score` and `lives` are declared.
        -   Set the initial value of  your `gameState` variable to "starting"

        (Because you are not using this variable yet, you will see a warning triangle next to the line where it is declared.  It also will not affect how the program runs.)
      Gamelab StartScreen base code: |-
        # Game Code

        This is the code for the game without the start and end screens.  The function `gameStatus` (called on line 43 and defined on line 208) checks whether the user has won or lost, but it only adds a text message to the screen.  Gameplay also continues even after the game is over.

        ## Do This

        Read the code, in particular the code before the draw loop (lines 1-24), inside the draw loop (lines 27-43), and inside the `gameStatus` function (lines 209-224).  It's okay if you don't understand everything in the game, but you should see that the code before the draw loop sets up the sprites, and the code inside the draw loop controls the gameplay.
      Geometric Sun: "**Hugmynd að verkefni:** Búðu til mynstur sem notar hugtök úr
        flatarmálsfræði svo sem form. Þetta krefst úthalds og skipulags!"
      Geometric Sun_2018: "**Hugmynd að verkefni:** Búðu til mynstur sem notar hugtök
        úr flatarmálsfræði svo sem form. Þetta krefst úthalds og skipulags!"
      HOC 2018 Level_1: Þú þarft vistir fyrir sjóferðina framundan. Náðu í **bát**
        ![](https://images.code.org/0b3162de9dc0abf3e0890d315b8cc699-image-1538697977747.png)
        úr **kistunni** ![](https://images.code.org/e0cf43fd36a50dd16ee06595047bfd8f-image-1538697999418.png).
      HOC 2018 Level_10: Það er **kolkrabbi** ![](https://images.code.org/82f305ab1cb4a9ff9044991a18edb16e-image-1538947827218.png)
        að fela sig einhversstaðar í þessu úthafsminnismerki, en getur þú komist til
        hans?
      HOC 2018 Level_11: Byggðu vegg úr **prismaríni** ![](https://images.code.org/d110b8d13c01756fcdbef3768b2e2859-image-1538699770898.png)
        í kringum dökka steininn. Þetta mun virkja **hliðið** ![](https://images.code.org/7773cf30f42e6727a23c8cb364d4664b-image-1538699800030.png)
        og klára áskorunina!
      HOC 2018 Level_12: Til hamingju! Opin vatnaveröld bíður þín. Byggðu kóralrif!
        Eldfjall! Skipsflak! Eins og þú vilt.
      HOC 2018 Level_2: Það er mun auðveldara að sigla bát en synda! Farðu út á enda
        bryggjunnar til að hoppa um borð.
      HOC 2018 Level_3: Gríptu árarnar og stýrðu bátnum yfir úthafið til að ná **þorskinum**
        ![](https://images.code.org/9b636884eefb1efe18f9f844e1e916a9-image-1538698597353.png).
      HOC 2018 Level_4: Gefðu **höfrunginum** ![](https://images.code.org/8c240fd4df4da2795ba7ca942b77a057-image-1538947890991.png)
        þorskinn að éta. Notaðu "endurtaka þar til" kubb til að ferðast hraðar.
      HOC 2018 Level_5: Það er **kuðungur** ![](https://images.code.org/2eb084fa0c718dee6ca4b6379381f735-image-1538698936660.png)
        falinn einhversstaðar! Kannaðu skipsflakið og kíktu í **kistuna** ![](https://images.code.org/16cdd5779b38909d4bf47b29535c92b0-image-1538698950602.png).
      HOC 2018 Level_6: Hér er kuldalegt um að litast! Veiddu **lax** ![](https://images.code.org/c66eadf25b3cdfe20bbfdc91e2c28c94-image-1538699000102.png)
        á leiðinni að neðansjávarrústunum.
      HOC 2018 Level_7a: Þú hefur fundið neðansjávarrústirnar. Leitaðu í sandsteininum
        að **kistu** ![](https://images.code.org/29a5fd76b869d755a60d39fbbb4057eb-image-1538699081910.png)
        sem geymir **prismarín** ![](https://images.code.org/5f5ebe5121b8f9787d7dbd38ad0a86cc-image-1538699091018.png)
        fjársjóð.
      HOC 2018 Level_8: Fyrst ísjakar og nú hraun? Finndu leið í gegnum þessa eldfjallaeyju
        og náðu í **hitabeltisfiskinn** ![](https://images.code.org/6d3293e7709cb1a43d9f7617fd0cc2b8-image-1538699180397.png)
        í kóralrifinu.
      HOC 2018 Level_9b: Þú náðir til rifsins og nú skaltu leita að **Hjarta hafsins**
        ![](https://images.code.org/3035926d2a37aa695b5d47413adcffa2-image-1538699398781.png)
        ! Notaðu bláa og rauða kóralinn til að komast til **kistunnar** ![](https://images.code.org/af697397dd70e5b6b93b00eb46c558af-image-1538699377397.png)
        með fjársjóðnum.
      InspirationalArtwork: |-
        Þú hefur nú lært allt sem þú þarft til að búa til svona mynstur!

        Ef þessi mynd gefur þér hugmyndir, gætir þú glímt við eitthvað svipað. Annars bara eitthvað sem þér dettur í hug.
      InspirationalArtwork_2018: |-
        Þú hefur nú lært allt sem þú þarft til að búa til svona mynstur!

        Ef þessi mynd gefur þér hugmyndir, gætir þú glímt við eitthvað svipað. Annars bara eitthvað sem þér dettur í hug.
      Intro to Web Lab - Part 1_2019: |-
        ## Hugleiðing:

        -   Í hvaða ólíku hluta greinist Vefsmiðjan, og til hvers eru þeir notaðir?
      Intro to Web Lab - Part 2_2019: |-
        ## Spurningar til að hugleiða

        -   Af hverju eru HTML tög gagnleg?
        -   Hvað gerir efnisgreinartagið p?
      Introduction to Variables - Part 1_2019: |-
        ## Spurningar til að hugleiða

        -   Til hvers eru breytur (variables) notaðar?
        -   Hvernig býrð þú til breytu og setur í hana gildi?
        -   Hvað getur farið í breytu?
      K-1 Bee Loops 2: Notaðu `endurtaka` lykkju til að hreyfast og sæktu svo blómasafann
        og búðu til hunang!
      K-1 Bee Loops 3: Notaðu þrjár `endurtaka` lykkjur til að sækja blómasafann og
        búa til hunang!
      K-1 Bee Loops 4: Notaðu `endurtaka` lykkjur til að sækja blómasafann, búa til
        hunang og hreyfast!
      K-1 Bee Loops 5: Notaðu "endurtaka" lykkjur til að sækja blómasafann og búa
        til hunang!
      K-1 Bee Loops 6: Notaðu `endurtaka` lykkju til að sækja blómasafann, búa til
        hunang og hreyfast!
      K-1 Maze Loops 10: |-
        Komdu mér til svínsins!\
        Notaðu `endurtaka` lykkju til að auðvelda það.
      K-1 Maze Loops 11: |-
        Komdu mér til svínsins!\
        `Endurtaka` lykkjan gerir það auðveldara.
      K-1 Maze Loops 12: |-
        Komdu mér til svínsins!\
        `Endurtaka` lykkjan gerir það auðveldara.
      K-1 Maze Loops 2: Notaðu "endurtaka" kubbinn til að koma mér til svínsins!
      K-1 Maze Loops 3: "Komdu mér til svínsins!\\\\ \nGættu þess að nota `endurtaka`
        lykkjur."
      K-1 Maze Loops 5: "Komdu mér til svínsins!\\\\ \nGættu þess að nota `endurtaka`
        lykkjur."
      K-1 Maze Loops 6: "Komdu mér til svínsins!\\\\ \nGættu þess að nota `endurtaka`
        lykkjur."
      K-1 Maze Loops 7: "Komdu mér til svínsins!\\\\ \nGættu þess að nota `endurtaka`
        lykkjur."
      K-1 Maze Loops 8: Notaðu "endurtaka" lykkjur til að koma mér til svínsins.
      K-1 Maze Loops Assessment 1: |-
        Sjáðu hvað við höfum lært mikið!\
        Notaðu `endurtaka` lykkju til að koma mér til svínsins!
      MC HOC 2016 SCORE LEVEL: "Í sumum leikjum er stigagjöf. Leiktu klukk við þessa
        Járngólema og notaðu <xml>  <block type=\"craft_addScore\">\n    <title name=\"SCORE\">1</title>\n
        \ </block></xml> kubbinn til að gefa þér stig ef þú klukkar þá.  \n\n  Náðu
        fimm stigum til að vinna!"
      MC_HOC_2017_01_RETRY: |-
        Dyrnar eru læstar en Umbinn er hér til að hjálpa!

        Festu `færa áfram` kubb neðan á `þegar keyrt` kubbinn á vinnusvæðinu til að koma Umbanum á þrýstihelluna [PressurePlate_Up]. Smelltu svo á "Keyra" og notaðu örvarlyklana til að fara út úr húsina og ná **kistunni** [chest].
      MC_HOC_2017_01_RETRY_2019: |-
        Dyrnar eru læstar en Umbinn er hér til að hjálpa!

        Festu `færa áfram` kubb neðan á `þegar keyrt` kubbinn á vinnusvæðinu til að koma Umbanum á þrýstihelluna [PressurePlate_Up]. Smelltu svo á "Keyra" og notaðu örvarlyklana til að fara út úr húsina og ná **kistunni** [chest].
      MC_HOC_2017_02_Cole: "{currentPlayerName} er á leið út í ævintýri! Það gæti
        hjálpað að hafa **kortið** [map_empty] sem er bak við læstu dyrnar hægra megin.
        \n\nSettu kóða á vinnusvæðið til að hreyfa Umbann að þrýstihellunni [PressurePlate_Up]
        svo að {currentPlayerName} komist í gegn. "
      MC_HOC_2017_02_Cole_2019: "{currentPlayerName} er á leið út í ævintýri! Það
        gæti hjálpað að hafa **kortið** [map_empty] sem er bak við læstu dyrnar hægra
        megin. \n\nSettu kóða á vinnusvæðið til að hreyfa Umbann að þrýstihellunni
        [PressurePlate_Up] svo að {currentPlayerName} komist í gegn. "
      MC_HOC_2017_03_Cole: "{currentPlayerName} ætlar að halda ferðinni áfram og þarf
        að fá **áttavitann** [compass] til að undirbúa sig.  \n\nForritaðu Umbann
        svo hann opni hliðið. "
      MC_HOC_2017_03_Cole_2019: "{currentPlayerName} ætlar að halda ferðinni áfram
        og þarf að fá **áttavitann** [compass] til að undirbúa sig.  \n\nForritaðu
        Umbann svo hann opni hliðið. "
      MC_HOC_2017_04POINT5_RYAN: "Þú náðir yfir! \n\nKomdu nú {currentPlayerName}
        örugglega gegnum völundarhúsið til ná **öxinni** [diamond_axe]"
      MC_HOC_2017_04POINT5_RYAN_2019: "Þú náðir yfir! \n\nKomdu nú {currentPlayerName}
        örugglega gegnum völundarhúsið til ná **öxinni** [diamond_axe]"
      MC_HOC_2017_04_Cole: "Umbinn getur gengið á vatni!  \n\nNotaðu `endurtaka` lykkju
        til að leysa þessa þraut og hjálpaðu {currentPlayerName} að komast til **fötunnar**
        [bucket_empty] bak við hurðina. "
      MC_HOC_2017_04_Cole_2019: "Umbinn getur gengið á vatni!  \n\nNotaðu `endurtaka`
        lykkju til að leysa þessa þraut og hjálpaðu {currentPlayerName} að komast
        til **fötunnar** [bucket_empty] bak við hurðina. "
      MC_HOC_2017_05_Cole: "Ó nei brúin er horfin! \n\nNotaðu <xml>  <block type=\"craft_placeBlock\">\n
        \   <title name=\"TYPE\">       </title>\n  </block></xml> kubbinn og forritaðu
        Umbann svo hann endurbyggi brúna til að {currentPlayerName} nái til **skóflunnar**
        [diamond_shovel]."
      MC_HOC_2017_05_Cole_2019: "Ó nei. brúin er horfin! \n\nKóðaðu Umbann svo hann
        endurbyggi brúna með <xml>  <block type=\"craft_placeBlock\" block-text=\"place\">\n
        \   <title name=\"TYPE\">       </title>\n  </block></xml> kubbnum svo að
        {currentPlayerName} komist til **skóflunnar** [diamond_shovel]."
      MC_HOC_2017_06_Cole: "Annað fljót en þetta er miklu breiðara! \n\nLagaðu þennan
        kóða svo að Umbinn byggi brú til að {currentPlayerName} komist til **hakans**
        [diamond_pickaxe]. "
      MC_HOC_2017_06_Cole_2019: "Annað fljót en þetta er miklu breiðara! \n\nLagaðu
        þennan kóða svo að Umbinn byggi brú til að {currentPlayerName} komist til
        **hakans** [diamond_pickaxe]. "
      MC_HOC_2017_07_Cole: "Hér er ís sem hindrar för!  \n\nFallið `hreinsa slóð`
        getur hjálpað þér að eyða ísnum og koma {currentPlayerName} til námavagnsins
        [minecart_normal]! "
      MC_HOC_2017_07_Cole_2019: "Hér er ís sem hindrar för!  \n\nFallið `hreinsa slóð`
        getur hjálpað þér að eyða ísnum og koma {currentPlayerName} til námavagnsins
        [minecart_normal]! "
      MC_HOC_2017_10_RETRY: "Sérðu hvaða munur er á föllunum tveimur á vinnusvæðinu?
        \n\nNotaðu þessi föll ásamt öðrum kóða úr verkfærakassanum til að opna leið
        fyrir námavagninn, og náðu svo **tinnu-og-stálinu** [flint_and_steel]. \n "
      MC_HOC_2017_10_RETRY_2019: "Sérðu hvaða munur er á föllunum tveimur á vinnusvæðinu?
        \n\nNotaðu þessi föll ásamt öðrum kóða úr verkfærakassanum til að opna leið
        fyrir námavagninn, og náðu svo **tinnu-og-stálinu** [flint_and_steel]. \n "
      MC_HOC_2017_Ali: 'Skoðaðu föllin hér fyrir neðan. Hvernig getur þú notað þau
        til að forðast draugana og hjálpa {currentPlayerName} að komast örugglega
        til **galdrabókarinnar** [book_enchanted]?  '
      MC_HOC_2017_Ali_2019: 'Skoðaðu föllin hér fyrir neðan. Hvernig getur þú notað
        þau til að forðast draugana og hjálpa {currentPlayerName} að komast örugglega
        til **galdrabókarinnar** [book_enchanted]?  '
      MC_HOC_2017_FP20x20: "**Frjáls æfing:** Nú er þetta í þínum höndum! Notaðu kóða
        Umbans til að hjálpa þér að kanna þennan heim."
      MC_HOC_2017_FP20x20_2019: "**Frjáls æfing:** Nú er þetta í þínum höndum! Notaðu
        kóða Umbans til að hjálpa þér að kanna þennan heim."
      Making Music: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      Making Music_2018: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      Making Music_2019: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      NEW Course 4 Artist Functions 1: Getur þú teiknað ferning með lengdina 100 með
        því að nota lykkju?
      NEW Course 4 Artist Functions 11: "Nú viljum búa til nýtt fall `teikna röð ferninga`
        sem teiknar sex ferninga í röð. \n\nGetur þú búið til þetta fall með því að
        nota `teikna ferning 20` fallið sem við höfum þegar búið til? \n<br/><br/>\n\n_Athugaðu:
        Taktu eftir að við höfum breytt pennanum svo hann er mun fínni. Smelltu á
        \"breyta\" á `teikna ferning 20` fallinu til að sjá hvernig!_"
      NEW Course 4 Artist Functions 12: Notaðu fallið `teikna röð ferninga` úr síðustu
        þraut til að teikna þetta mynstur.
      NEW Course 4 Artist Functions 13: "Getur þú teiknað stjörnulaga form með fallinu
        `teikna röð ferninga`?  \n\n(Gættu þess að `færa áfram` 60 díla áður en þú
        snýrð 144 gráður!)"
      NEW Course 4 Artist Functions 14: Nú er frjáls tími! Teiknaðu hvað sem þú vilt!
      NEW Course 4 Artist Functions 2: "Getur þú teiknað 3 ferninga með 20 díla millibili?
        \n\nHver ferningur er 100 dílar á stærð."
      NEW Course 4 Artist Functions 3: "Hér er ný tegund af kubbi. Þetta er kubbur
        fyrir `fall` (function). Smelltu á \"breyta\" og settu í hann kóða til að
        teikna ferning með 100 díla hliðar. \n\nSmelltu svo á \"loka\" til að fara
        aftur í forritið."
      NEW Course 4 Artist Functions 4: 'Notaðu fallið `teikna ferning` til að teikna
        þetta mynstur. '
      NEW Course 4 Artist Functions 7: "Ertu komin upp á lag með að nota fallkubba?
        Breytum fallinu `teikna ferning` svo það teikni ferninga sem eru 200 dílar
        á stærð. \n\nSmelltu á \"breyta\" til að opna kubb fallsins `teikna ferning`.
        \n\nMundu að smella á \"Loka\" til að komast út úr kubbi fallsins. "
      NEW Course 4 Artist Functions 8: Við höfum búið til nýtt fall fyrir þig sem
        heitir `teikna þríhyrning`. Getur þú breytt skilgreiningu fallsins svo að
        það teikni þríhyrning með 100 díla hliðar?
      NEW Course 4 Artist Functions 9: Getur þú leyst þetta með því að bæta við aðeins
        einum kubbi?
      NEW Course 4 Artist Params 1: Skilgreinum þetta fall sem á að teikna ferning
        með 50 díla hliðar. Smelltu á "breyta" til að byrja verkið.
      NEW Course 4 Artist Params 10: "Búðu til fallkubbinn `teikna sexhyrning` með
        stika fyrir lengd. \n\nÞessi sexhyrningur hefur hliðar sem eru 100 díla langar."
      NEW Course 4 Artist Params 11: "Getur þú fundið út hvernig á að teikna þetta
        form? \n\nBreyttu fallinu svo að það noti stikann `hliðar`."
      NEW Course 4 Artist Params 12: "Getur þú lokið við þessa teikningu? \n\nHliðar
        allra formanna eru 100 dílar á lengd."
      NEW Course 4 Artist Params 12a: "Þessi mynd er svipuð þeirri síðustu. \n\nGetur
        þú notað `frá` lykkju með fallinu þínu til að búa þetta til?"
      NEW Course 4 Artist Params 13: |-
        Breytum þessu `teikna fjölhliðung` falli.

        Það er þegar með stikann `hliðar`. Nú skulum við bæta við stikanum `lengd`.

        Ummál hvers forms er 200 dílar. Manstu jöfnuna sem lætur form halda sömu stærð þó að fjöldi hliða breytist?
      NEW Course 4 Artist Params 14: "Breyttu `teikna spíral` svo það noti stikana
        `lengd` og `hliðar`, og endurgerðu svo þessi form.\n\n-   Minnsta hliðarlengd
        ferningsins er 5 dílar.\n-   Minnsta hliðarlengd þríhyrningsins er 10 dílar.\n-
        \  Minnsta hliðarlengd sexhyrningsins er 2 dílar.\n-   Öll formin lengjast
        upp í 100 díla.  "
      NEW Course 4 Artist Params 15: "**Frjáls æfing:** Hér eru föllin sem þú hefur
        skrifað og nokkur í viðbót til að leika með. Leiktu með breidd pennans til
        að sjá hvernig það breytir teikningunni!"
      NEW Course 4 Artist Params 2: Búðu til `teikna þríhyrning` fall frá grunni.
        Það á að teikna þríhyrning með 50 díla hliðar.
      NEW Course 4 Artist Params 3: "Nú skulum við nota fallið til að teikna 5 þríhyrninga
        í röð. \n\nÞað er 30 díla bil á milli þeirra."
      NEW Course 4 Artist Params 4: Sérðu eitthvað nýtt við þessa fallkubba? Smelltu
        á "Keyra" til að sjá hvað gerist.
      NEW Course 4 Artist Params 5: "Fylltu út í '???' í reit stikans fyrir `lengd`.
        \n\nFimmhyrningurinn hefur 100 díla hliðar."
      NEW Course 4 Artist Params 6: "Fylltu út stikann `lengd` til að teikna þessi
        form með því að skipta `???` út fyrir réttar tölur. \n\nFerningurinn og þríhyrningurinn
        hafa 100 díla hliðar.\\\nHliðar sexhyrningsins eru 75 dílar. "
      NEW Course 4 Artist Params 7: "Getur þú lokið við þessa teikningu? \n\nHver
        þríhyrningur er með 25 díla lengri hliðar en sá á undan.\\\nFyrsti þríhyrningurinn
        er með 25 díla hliðar."
      NEW Course 4 Artist Params 8: "Kóðinn í þessu þríhyrningsfalli er í ólagi. \n\nGetur
        þú lagað fallið og síðan búið til þríhyrninga sem eru 25, 50 og 75 dílar á
        lengd?"
      NEW Course 4 Artist Params 9: "Smelltu á \"breyta\" til að ganga frá skilgreiningu
        fallsins `teikna ferning` og bættu við stika.\\\nFallið á að hafa stika fyrir
        lengd, eins og þríhyrningurinn. \n\n**Teiknaðu nú 3 ferninga:** 25, 50 og
        75 díla á lengd. Það er 100 dílar á milli vinstri horna ferninganna."
      NEW Course 4 Artist Params inspire: "<img src=\"https://images.code.org/1df195df9d808f0dd539bef0f5c2958b-image-1443049871563.02.54.png\"
        width=\"250px\"/>\n\n**Hugmyndir fyrir frjálsa æfingu:** Nú hefur þú lært
        allt sem þú þarft að kunna til að búa til svona mynstur! \n\nEf þér finnst
        þessi mynd áhugaverð getur þú reynt að gera eitthvað svipað. Eða búið til
        eitthvað sem er alfarið þitt eigið.\\\r\n\nAthugaðu: Við höfum notað `stilla
        alfa` kubbinn til að láta lit krónublaðanna dofna þegar utar dregur."
      NEW Course 4 Artist Vars 12: Endurskapaðu nú kóðann frá síðasta borði og búðu
        til fimmhyrning með hliðarnar 150.
      NEW Course 4 Artist Vars 2: 'Dragðu talnakubb í `stilla lengd` kubbinn og í
        `endurtaka _ sinnum` kubbinn og teiknaðu 50 díla þríhyrninga. '
      NEW Course 4 Artist Vars 4: "Prófum þetta aftur! \n\nGetur þú stillt breytuna
        `lengd` á 60 og búið til þessa fínu hönnun með sexhyrningum?"
      NEW Course 4 Artist Vars 6: "Teiknaðu þetta mynstur fimmhyrninga með 100 díla
        hliðar með því að setja rétta gildið í `lengd` og setja svo breytuna `lengd`
        á alla réttu staðina. \n\nTaktu eftir hvernig þú stillir gildið fyrir `lengd`
        bara einu sinni og kóðinn notar það svo alls staðar."
      NEW Course 4 Bee For Loops 10a: "Ertu til í áskorun? Notaðu það sem þú hefur
        lært um lykkjur og reyndu að leysa þessa þraut. \n\nMundu: Þú gætir þurft
        að keyra lausnina margsinnis áður en þú finnur út öll þrepin."
      NEW Course 4 Bee For Loops 2: "Bættu við kóðanum sem þarf til að tryggja að
        býflugan safni öllum blómasafanum. \n\nÞetta er heilmikill kóði sem við þurfum!\\\n(Þú
        munt læra einfaldari aðferð í næstu þraut.)"
      NEW Course 4 Bee For Loops 3: 'Þetta er mun auðveldara með `frá` lykkju! Allur
        kóðinn sem þú þarft er hér. Skoðaðu vel hvernig hann er settur saman og smelltu
        svo á "Keyra" til að sjá hann virka. '
      NEW Course 4 Bee For Loops 4: 'Skiptu ??? í `frá` lykkjunni út fyrir mesta magninu
        af blómasafa sem býflugan þarf að safna. '
      NEW Course 4 Bee For Loops 4 4: Nú þurfum við að færa áfram `teljari` sinnum
        og svo `safna blómasafa` `teljari` sinnum. Getur þú notað tvær `endurtaka`
        lykkjur til að leysa þessa þraut?
      NEW Course 4 Bee For Loops 5: Þú getur líka látið `frá` lykkju telja niður.
        Prófaðu að safna þessum blómasafa með því að telja niður frá 5 til 1 um 1.
      NEW Course 4 Bee For Loops 6: "Síðasta talan í `frá` lykkjunni er kölluð `auki`
        (increment). Í hverri umferð lykkjunnar breytist innihald teljarans um aukann.
        \n\nPrófaðu að safna úr þessum blómum með aukanum 2."
      NEW Course 4 Bee For Loops 7: |-
        Nú skulum við nota reikningskubb með breytunni `teljari`! Hvernig getur þú notað teljarann til að fara í gegnum garðinn með sem allra fæstum kubbum?

        Hvað þarftu að gera til að safna 3, 6, 9, 12, 15 af blómasafa í þetta sinn? Svarið felst í breytunni `teljari`!

        Mundu: Ef lykkjan telur upp á við, er aukanum bætt við breytuna `teljari` í hverri umferð lykkjunnar.
      NEW Course 4 Bee For Loops 8: "Þú hefur náð þessu! \n\nHver ætti aukinn að vera
        til að safna 3, 6, 9, 12, 15 af safa?"
      NEW Course 4 Play Lab Params 11: |-
        Frjáls tími! Leiktu þér með kubbana í verkfærakassanum.\
        <br/>

        <h5>
        <details>
        <summary><b>Vantar þig hugmyndir?</b></summary>
        <br>
        <h5>
        <ul>
            <li><strong>Klukk</strong> - Láttu leikmann 2 rása og notaðu örvarnar til að láta leikmann 1 elta þar til þeir rekast á. </li>
            <li><strong>Flugnaspaði</strong> - Láttu leikmann skjóta upp kolli hingað og þangað af handahófi. Gefðu stig fyrir að smella á veruna áður en hún hverfur. </li>
            <li><strong>Besta ágiskun</strong> - Láttu báða leikmenn hverfa, breyttu stað af handahófi, og láttu þá birtast sem persóna valin af handahófi. Smellur á þann fyrri gefur stig, smellur á annan TAPAR stigi! </li>
        </ul>
        </h5>

        </details>
        </h5>
      NetSim Standalone Automatic DNS: |-
        # Domain Name System (DNS)

        In this version of the Internet Simulator, a Domain Name System (DNS) is provided for you and knows the IP addresses of all connected computers. You can only see the hostnames of other connected computers.\
        ![](https://images.code.org/3ac2c23ed610abc7e785ec85054e89a9-image-1434746293690.PNG)

        The address of the DNS is always \<yourRouterNumber>.15. Send a message with protocol `GET [hostname]`, for example `GET Bob2`, to the DNS to get another student's address. You can keep track of the responses in the Notes section in the DNS tab.\
        ![](https://images.code.org/c81c1a6b876eb46674a7f7e5e70506ce-image-1434746797267.png)

        Your teacher will hand out more specific instructions for this activity.
      NetSim Standalone Broadcast: |-
        # Broadcast messages in the Internet Simulator

        In this version of the Internet Simulator, you can connect to up to 5 other people in a room. When you send messages in the room, everyone receives them. What are some of the challenges of this system, and how might you solve them?

        Your teacher will hand out more specific instructions for this activity.
      NetSim Standalone Classroom Routers: |-
        # Routing messages

        In this version of the Internet Simulator, everyone connects to a router and has a specific address. To send messages, you have to address your message to the specific address of the recipient, and the router will take care of delivering it to the right computer. If there are other routers created in your class, ask for the address of one of your classmates and send them a message! View the Log Router to see the path the messages have taken through the network.

        Your teacher will hand out more specific instructions for this activity.
      NetSim Standalone Freeplay: |-
        # Internet Simulator Freeplay

        In this version of the Internet Simulator, most of the options are turned on and are configurable. Messages can be sent to any router within the class, and messages will take different paths to reach their destination.

        Your teacher will hand out more specific instructions for this activity.
      NetSim Standalone Manual DNS: |-
        # Introduction to DNS

        In this version of the simulator you can't see the other students' addresses.  Instead, one of you must act as a name service, to help share addresses with each other. From the DNS tab in the left column, one person can take over as DNS.

        Your teacher will hand out more specific instructions for this activity.
      NetSim Standalone Packets TCP: |-
        # Packets and Making a Reliable Internet

        Messages on the Internet can take many paths to get to their destination, and sometimes along the way the message gets dropped. In this version of the Internet Simulator:

        -   There is a 10% chance of a packet being dropped
        -   Multiple packets may take different paths to the destination
        -   The default max packet size is set to 6 additional characters

        Your teacher will hand out more specific instructions for this activity.
      NetSim Standalone SendAB: |-
        # Sending bits with the Internet Simulator

        You and your partner share a single wire that can only be in state A or state B. You can set the wire to either state at any time, and you can read the state of the wire at any time. Can you figure out a way to effectively communicate with just this system?

        Your teacher will hand out more specific instructions for this activity.
      NetSim Standalone Sending Numbers: "# Sending Numbers with the Internet Simulator\n\nYou
        and your partner can now reliably send messages back and forth without extra
        coordination! While you're always sending bits back and forth, you can also
        represent those bits as decimal numbers. What kinds of information can you
        represent with this system? \n\nYour teacher will hand out more specific instructions
        for this activity."
      NetSim Standalone Sending Numbers Ascii: "# Sending Text with the Internet Simulator\n\nNow
        that you've transmitted information represented as decimal numbers, you can
        map those numbers to text characters to send text-based information back and
        forth. With a text-based protocol, you can easily represent and communicate
        all kinds of information. \n\nYour teacher will hand out more specific instructions
        for this activity."
      New Minecraft Hero Project: "**Frjáls æfing:** Nú er þetta í þínum höndum! Notaðu
        kóða Umbans til að hjálpa þér að kanna þennan heim."
      OPD-K5 CS Video: "## Getting Started: Why Computer Science (CS) Fundamentals?\n\nYou'll
        complete this free, self-paced course using the same learning platform you
        can use in your classroom with your students. \n\nLet's start by learning
        a bit about what Computer Science (CS) Fundamentals is, and how it's worked
        for teachers and students around the globe. In the next level, we'll cover
        how to interact with the CS Fundamentals learning platform, which you'll be
        using to complete this course.\n\n> ## Reflect\n>\n> What are your first impressions
        of CS Fundamentals?\n>\n> [Tweet your thoughts](https://twitter.com/teachcode)
        and be sure to tag @teachcode in your tweet so we can respond.\n>\n> <a href=\"http://ctt.ec/Bfjw3\"
        target=\"blank\">Share on Twitter >></a>\n>\n> Don't have a Twitter account?
        You can also find us on [Facebook](https://www.facebook.com/Code.org/) or
        [Instagram](https://www.instagram.com/codeorg/)."
      OPD-K5 CS Video_copy: "## Get to know CS Fundamentals\n\nLet's start by learning
        a bit about what Computer Science (CS) Fundamentals is, and how it has worked
        for teachers and students around the globe. "
      OPD-K5 Closing: |-
        > **If you enjoyed this course, sign up for an in-person workshop:**
        >
        > [Sign up now](http://code.org/professional-development-workshops) to continue learning computer science and its pedagogy. The free in-person workshops are a valuable place to collaborate and engage with other passionate educators in your area.
      OPD-K5 Closing_copy: |-
        > **If you enjoyed this course, sign up for an in-person workshop:**
        >
        > <a href="http://code.org/professional-development-workshops" target="blank">Sign up now</a> to continue learning computer science and its pedagogy. The free in-person workshops are a valuable place to collaborate and engage with other passionate educators in your area.
      OPD-K5 EventsVid: |-
        Watch this video that defines "events" and shows how they work in CS Fundamentals. Afterwards, you will try some puzzles that require you to code events.

        > An event is a line of code that tells your computer to "listen" for something to happen, then take an action. For example, on web pages, you often can display a drop down menu when you roll over the navigation bar with your mouse. The "mouse rollover" is an "event" that triggers an action.
      OPD-K5 FirstProgram: Watch the video below, which explains the very first program
        that young students will write in [Course A](https://studio.code.org/s/coursea-2018?section_id=2042045).
        On the next page, you'll get to write a similar program of your own!
      OPD-K5 FirstProgram_copy: Watch the video below, which explains a program that
        young students will write in <a href="https://studio.code.org/s/coursea-2019"
        target="blank">Course A</a>. On the next page, you'll get to write a similar
        program of your own!
      OPD-K5 LessonPlanning: "So far, you've been introduced to some of our unplugged
        lesson plans. However, there are lesson plans for every single CS Fundamentals
        lesson -- both plugged and online. You can find the full list of lesson plans
        for each course below:\n<br/>\n<br/> \n[Course A lesson plans](https://curriculum.code.org/csf-18/coursea/)<br/>
        \n[Course B lesson plans](https://curriculum.code.org/csf-18/courseb/)<br/>\n[Course
        C lesson plans](https://curriculum.code.org/csf-18/coursec/)<br/> \n[Course
        D lesson plans](https://curriculum.code.org/csf-18/coursed/)<br/> \n[Course
        E lesson plans](https://curriculum.code.org/csf-18/coursee/)<br/> \n[Course
        F lesson plans](https://curriculum.code.org/csf-18/coursef/)<br/> \n\nHowever,
        you may want to adapt these lessons, or build your own! The video below explains
        the structure of the CS Fundamentals lessons, but also provides tips in case
        if you want to develop your own lessons."
      OPD-K5 Problem Solving: |-
        # Best Practices > Meta-Cognitive Problem Solving

        Explicitly teaching meta-cognitive problem solving strategies before, during and after coding is extremely important in helping students process their learning. Mega-cognitive problem solving involves thinking about your thought process itself, and reflecting on _how_ you solve problems. Watch the video below to learn about Code.org's "Puzzle Solving Recipe" that can help students have success with difficult problems:

        [This worksheet](http://code.org/curriculum/docs/k-5/PuzzleSolvingStudent.png) details the different steps of the Puzzle Solving Recipe.

        <img src="https://images.code.org/18ec61f8b911b83ca1cdea404a34c40e-image-1434399798952.png" width="650px" style="margin-right:45px; border-radius:10px;">

        > ## Reflect:
        >
        > How might you explicitly teach problem solving in your CS classroom?
        >
        > [Tweet your thoughts](https://twitter.com/teachcode) and be sure to tag @teachcode in your tweet so we can respond.
        >
        > <a href="http://ctt.ec/ic2bx" target="blank"><h4><i class="fa fa-external-link-square" ></i> Share on Twitter</h4></a>
      OPD-K5 RepeatBlock: Watch the video below, which explains how loops work and
        introduces the 'Repeat' block in CS Fundamentals.
      OPD-K5 RepeatBlock_copy: Watch the video below, which explains how loops work
        and introduces the 'Repeat' block in CS Fundamentals.
      OPD-K5 Unplugged Video: |-
        ## Looking Ahead > Getting "Unplugged"

        <img src="https://images.code.org/ae83fdee9390a1155e5173b2a06f9773-image-1434399991310.JPG" class="level-image">

        In teaching computer science, you might think it would be best to have access to top tier technology -- new computers, fast Internet, the latest apps. But at Code.org, we've found that some of the most impactful computer science lessons are actually "unplugged," or conducted with little to no technology at all. In these lessons, students learn computer concepts without a computer.

        That's why all of our CS Fundamentals courses use unplugged activities to introduce computer science concepts with physical manipulatives before students write computer programs using those concepts. An example of this would be doing a dance of repeated movements with the class to understand the concept of how loops repeat commands in a computer program. This way when the students go on to writing programs using loops, the unplugged activity has set them up with something they are already familiar with and they can relate this new concept back to that activity.

        Watch the video below to understand the benefits of using unplugged activities to teach computer science.

        **As you work your way through Stages 4-8**, you'll have a chance to review some of our unplugged activities for each of the core concepts covered in this course.
      OPD-K5 Unplugged Video_copy: "It might seem counterproductive to teach computer
        science away from the computer! However, we've found that some of the most
        impactful  lessons are actually \"unplugged,\" or conducted with little to
        no technology at all. \n\nAll of our CS Fundamentals courses use unplugged
        activities to introduce computer science concepts with physical manipulatives
        before students write computer programs using those concepts. We also use
        unplugged activities to teach important concepts that are not coding, like
        digital citizenship. Watch the video below to understand the benefits of using
        unplugged activities to teach computer science."
      OPD-K5 WhatIsCS: Have you ever wondered "Exactly what is computer science?"
        Or, "Why are some computer programs written with words and some are written
        using images?" If so, watch this video; it's a great introduction to the field
        of computer science.
      OPD-K5 WhatIsCS_copy: |-
        <span style="font-size: 1.1em">
        Have you ever wondered what computer science is, or what kinds of different program languages there are? This video provides an introduction to the field of computer science.
        </span>
      OPD-K5 conditionals free response: |-
        # Reflect on Conditionals

        In this lesson, we explored how conditionals help programmers add logic to their code.

        Now take a moment to reflect. How would you explain the concept of conditionals to your students? What is the benefit of journaling as a teaching practice for comptuer science?
      OPD-K5 events free response: |-
        # Reflect on Events

        In this lesson, you stretched your coding muscles by using events to trigger certain actions in your program.

        Now take a moment to reflect. How would you explain the concept of events to your students? What are the steps you could take to debug a program?
      OPD-K5 for loops free response: |-
        # Reflect on For Loops

        Take a moment to reflect. How would you explain the concept of for loops to your students? What is one teaching practice that you could use to teach this concept?
      OPD-K5 functions free response: |-
        # Reflect on Functions

        In this lesson, we explored how functions can make you a faster and better programmer by allowing you to reuse segments of your code. In the next lesson, we'll look at the concept of variables.

        Now take a moment to reflect. How would you explain the concept of functions to your students? What is one teaching practice that you could use to teach this concept?
      OPD-K5 loops free response: |-
        # Reflect on Loops

        In this lesson, we explored how loops can be used to make code more efficient. In the next lesson, we'll look at how events can add interactivity into a program.

        Now take a moment to reflect. How can you connect the concept of loops to your students’ prior experience outside of the CS classroom? What are the benefits of pair programming, and how could you use the it when teaching this lesson?
      OPD-K5 projects free response: |-
        # Reflect on end-of-course projects

        Take a moment to reflect. How would you use end-of-course proejcts in your classroom? What is the benefit of having students complete a project?
      OPD-K5 sequencing free response: "# Reflect on Sequencing\n\nCongratulations!
        You just wrote some code. You are officially a programmer!\n\nDid you notice
        that the last puzzle was a little more difficult? It was a challenge puzzle.
        Challenge puzzles are meant to stretch the boundaries of what students will
        do. We make it clear that they should be attempted, but do not require that
        they be completed for students to succeed for the lesson.\n\nNow take a moment
        to reflect. How would you describe the difference between computer science
        and coding? How would you explain sequencing and algorithms to your students? "
      OPD-K5 sprite lab free response: "# Reflect on Sprite Lab\n\nTake a moment to
        reflect. How would you use Sprite Lab in your classroom? "
      OPD-K5 variables free response: |-
        # Reflect on Variables

        Take a moment to reflect. How would you explain the concept of variables to your students? What is one teaching practice that you could use to teach this concept?
      OPD-K5 whats your plan: "# What's your plan?\n\nThroughout the course, you will
        be asked to write reflections on what you have learned. Once you submit your
        response, it will save, and you can always come back to it. We will revisit
        it at the end of this online course.\n\nTake a moment now to reflect. How
        and when will you complete this online course to make ensure you get the most
        benefit from the experience? "
      OPD-K5-events-2: "Festu `blaka venjulega oft` kubb við `þegar smellt` atburðinn
        og smelltu svo á \"Keyra\".  \n\n* * *\n\nSmelltu eða sláðu á leiksvæðið til
        að koma Flappy til marksins."
      OPD-K5-events-3: "Atvikið `þegar keyrt` verður þegar þú ýtir á \"Keyra\" og
        leikurinn fer af stað. \n\nPrófaðu að bæta við kubbi sem stillir hraðann þegar
        ýtt er á \"Keyra\". \n\n* * *\n\nSpilaðu leikinn og fljúgðu í mark til að
        halda áfram."
      OPD-K5-events-4: "Nú höfum við bætt við jörð. \n\nFestu kubbinn `ljúka leik`
        við atvikið `þegar rekst á jörð`. \n\n\\--\n\nSpilaðu leikinn og láttu fuglinn
        hrapa til jarðar til að halda áfram."
      OPD-K5-events-5: "Flappy mun fljúga í gegnum hindranir nema þú skrifir kóða
        til að láta hann rekast á. \n\nTengdu kubb við kubbinn \"þegar rekst á hindrun\".
        Kóðinn þinn verður að ljúka leiknum þegar Flappy rekst á fyrstu pípurnar."
      OPD-K5-events-6: "Við höfum bætt við stigatöflu til að telja stig þegar Flappy
        kemst fram hjá hindrunum. \n\nBætti kubbi sem skorar stig við atvikið `þegar
        kemst framhjá hindrun` og ýttu svo á \"Keyra\" til að láta Flappy fljúga í
        gegnum fyrstu pípurnar."
      OPD-K5-forloops-2: |-
        Skrifaðu kóðann sem hjálpar býflugunni að safna öllum blómasafanum.

        Þú þarft marga kubba fyrir þessa áskorun, en við munum sýna auðveldari leið í næstu þraut.
      OPD-K5-forloops-6: "Þú getur líka látið `frá` lykkju telja niður. \n\nPrófaðu
        að safna þessum blómasafa með því að telja niður frá **5** til **1** um **1**
        í einu."
      OPD-K5-forloops-7: "Síðasta talan í `frá` lykkjunni er kölluð **\"aukinn\"**
        (increment). Í hverri umferð lykkjunnar breytist innihald teljarabreytunnar
        um **aukann**. \n\nPrófaðu að safna úr þessum blómum með **aukann** 2."
      OPD-K5-projects-2: |-
        Það er ótrúlegt hvað þú hefur lært mikið! Búum nú til leik skref fyrir skref.

        Notaðu nýja kubba í verkfærakassanum til að búa til bakgrunn og velja svo leikmann fyrir leikinn.
      OPD-K5-projects-3: "Notaðu kubba fyrir atvik og aðgerðir til að láta leikmanninn
        færast þegar þú ýtir á örvarlyklana. \n\nKomdu leikmanninum á mörkin til að
        klára þrautina."
      OPD-K5-projects-4: |-
        Við skulum bæta fleiri persónum í leikinn!

        Notaðu kubbinn `hafa leikmann` til að bæta fleiri persónum við og komast svo að markinu til að ljúka þrautinni.
      OPD-K5-projects-5: |-
        Margar leikverur og leikmenn sem færast er ágæt byrjun á leik, en við þurfum að gera meira til að þetta sé meira eins og alvöru leikur. Bætum við stigaskori!

        Notaðu atvikskubba eins og `þegar leikmaður snertir` til að breyta skorinu eða vinna leikinn. Skoraðu 5 stig eða sigraðu í leiknum til að ljúka þessari þraut.
      OPD-K5-projects-6: Vel gert! Þú hefur alla helstu hluta leiks sem virkar. Leggðu
        nú vinnu í að láta leikinn virka eins og þú vilt að hann geri. Smelltu svo
        á "Ljúka".
      OPD-K5-projects-7: Þú hefur lokið þessu! Nú getur þú spilað leikinn eða deilt
        honum með vinum og bekkjarfélögum!
      OPD-K5-spritelab-2: "Búum til fiskabúr!  \n\nBreyttu runnaflækjuverunni í veru
        sem er fiskur með því að smella á <xml><block type=\"gamelab_allSpritesWithAnimation\"
        block-text=\"the sprite picker block\"><title name=\"ANIMATION\">\"tumbleweed\"</title></block></xml>.\n\nGættu
        þess að breyta líka hegðun verunnar í kubbnum <xml><block type=\"gamelab_addBehaviorSimple\"
        block-text=\"the add behavior block\"></block></xml>."
      OPD-K5-spritelab-3: "Fiskinn er farið að svima! \n\nBreyttu hegðun hans svo
        að hann syndi til vinstri og hægri."
      OPD-K5-spritelab-4: "Það vantar vatn í fiskabúrið! \n\nNotaðu <xml><block type=\"gamelab_setBackground\"
        inline=\"true\" block-text=\"the set background color block\">\n    <value
        name=\"COLOR\">\n      <block type=\"colour_picker\">\n        <title name=\"COLOUR\">#0000ff</title>\n
        \     </block>\n    </value>\n  </block></xml> til að setja lit í bakgrunninn.
        Við mælum með bláum!"
      OPD-K5-spritelab-6: Fiskurinn er ævintýragjarn og vill hitta nýjar skepnur í
        hafinu. Bættu annarri veru í fiskabúrið. Þessi vera getur haft hvaða búning
        sem er nema þann sem þú ert að nota fyrir fiskinn!
      OPD-K5-spritelab-7: |-
        Hvað vilt þú að nýi vinur fisksins geri?

        Gefðu honum hegðun og sjáðu hvað gerist!
      OPD-K5-variables-1: "Við skulum teikna jafnhliða þríhyrning. \n\nHver hlið verður
        að vera nákvæmlega 50 dílar."
      OPD-K5-variables-2: "Notaðu nú aðra lykkju til að teikna þrjá svona þríhyrninga
        hlið við hlið.   \n\nÞú getur sett kóðann frá síðustu þraut inn í hana."
      OPD-K5-variables-5: "Áður en þetta verður flóknara: Geturðu sett lengdina 50
        í breytu svo að við getum notað hana í næstu þrautum? \n\n![expandable](https://images.code.org/73447d004093c6be8ab01a1358155f16-image-1498068386665.gif)"
      OPD-K5-variables-6: Notaðu nú breytuna `lengd` til að láta listamanninn hoppa
        áfram og niður um `lengd` díla á milli þríhyrninga.
      Overworld Chop Tree: Viður er mjög mikilvægt hráefni. Alls konar hlutir eru
        búnir til úr viði. Gakktu að trénu og notaðu `eyða blokk` kubbinn til að höggva
        það niður.
      Overworld Chop Tree_2019: Viður er mjög mikilvægt hráefni. Alls konar hlutir
        eru búnir til úr viði. Gakktu að trénu og notaðu `eyða blokk` kubbinn til
        að höggva það niður.
      Overworld House Frame Chosen: Byggðu afganginn af húsinu úr hvaða efni sem þú
        vilt. `Endurtaka` skipunin kemur að góðu gagni.
      Overworld House Frame Chosen_2019: Byggðu afganginn af húsinu úr hvaða efni
        sem þú vilt. `Endurtaka` skipunin kemur að góðu gagni.
      Overworld Move to Sheep: Bættu við annarri "færa áfram" skipun til að ná til
        kindarinnar.
      Overworld Move to Sheep_2019: Bættu við annarri "færa áfram" skipun til að ná
        til kindarinnar.
      Overworld Place Wall: Sérhvert hús byrjar með vegg. Byggðu fyrsta hluta hússins
        með því að láta `setja` og `færa áfram` skipanir inn í "endurtaka" lykkju.
      Overworld Place Wall_2019: Sérhvert hús byrjar með vegg. Byggðu fyrsta hluta
        hússins með því að láta `setja` og `færa áfram` skipanir inn í "endurtaka"
        lykkju.
      Overworld Shear Sheep: Nú þarf að rýja rollur! Notaðu `rýja` skipunina til safna
        ull af báðum kindunum.
      Overworld Shear Sheep_2019: Nú þarf að rýja rollur! Notaðu `rýja` skipunina
        til safna ull af báðum kindunum.
      Pixelation - Lesson 15 - Color Shades: |-
        # Dílamynstur í lit: Verkefni 2

        **Leiðbeiningar:**
        <img src='https://images.code.org/548d1daa698a17b1005b1747f152587f-image-1439476855059.png' style="width: 150px; float:right">Við byrjum með röðina af rauðum litbrigðum sem Maddie bjó til í myndbandinu. Gerðu tilraunir með 6-bita lit með því að fylla neðri röð myndarinnar með litbrigðum í öðrum lit. Hér er dæmi með nokkrum bláum litbrigðum. Prófaðu þinn eigin lit!
      Pixelation - Lesson 15 - Color Shades 4x4: "# Dílamynstur: Verkefni 3\n\n<img
        src = \"https://code.org/images/cspunit1/ColorTask3.png\" style=\"float:right;
        margin:0 20px\" width=200>\n\n**Leiðbeiningar:**\nVið byrjum með 4x4 myndina
        sem Maddie bjó til í myndbandinu. \n\nVerkefni þitt er að fylla 4x4 grindina
        með litum með _12 bitum fyrir hvern díl_.  Útkoman ætti að vera svipuð (en
        ekki eins) og myndin hér til hægri. \n\nHér eru kröfurnar:\n\n-   Röð 1 -
        fylla með rauðum litbrigðum. \n-   Röð 2 - græn litbrigði. \n-   Röð 3 - blá
        litbrigði. \n-   Röð 4 - grá litbrigði."
      Pixelation - Lesson 15 - Complete 3-bit color: "# Dílamynstur í lit: Verkefni
        1\n\n**Leiðbeiningar:**\n\n-   Þú byrjar með 4x4 myndina sem Maddie var að
        búa til, en við höfum sleppt síðustu tveimur reitunum. \n-   Ljúktu við myndina
        með því að finna út hvaða liti vantar og kóða þá."
      Pixelation 4x4 Empty: Breiddin og hæðin eru nú hluti af gögnunum. Getur þú fundið
        út hvernig á að stilla þessar víddir?
      Pixelation Bee: "# Dæmi með 12 bita á hvern díl\n\n-   Þessi stærri mynd af
        býflugu kóðar lit með 12 bitum í hverjum díl, en með því að skoða þetta í
        hex er auðveldara að sjá litinn í hverjum díl. \n-   Ef þú skiptir yfir í
        tvíundir - haltu þér fast - þá færðu mikið af bitum. \n-   Hér er annað sem
        gefur furðulega útkomu: færðu bitana á hvern díl upp í 24 bita á díl. Hvað
        gerist? Getur þú útskýrt þessa hegðun?"
      Pixelation Flappy: |-
        # Dæmi með fleiri bita í hverjum díl

        Hér er stærri mynd með 9 bitum í hverjum díl. Með 9 bitum getur þú haft 512 mismunandi liti. Smelltu áfram til að sjá næstu mynd sem er jafnvel enn háþróaðri en auðveldari að skilja.
      Predict Loop I: |-
        # Predict

        What will print as a result of this loop?
      Predict Loop I_2018: |-
        # Predict

        What will print as a result of this loop?
      Predict Loop I_2019: |-
        # Predict

        What will print as a result of this loop?
      Revisiting the Counter Pattern: "Today you’re going to learn how to use and
        create **functions**.\n\nCreating a function lets you make your own blocks!
        There are two parts to a function: \n\nMaking a newly named block that has
        all of the code you want to run inside of it. \n\\-xml of function definition-
        \n\nThe single green block itself that you use, or call, to run the function
        you created.\n\\-xml of function call-\n\nPrepare to get familiar with functions,
        learn how to edit them, and create your own!"
      Revisiting the Counter Pattern_2018: "Today you’re going to learn how to use
        and create **functions**.\n\nCreating a function lets you make your own blocks!
        There are two parts to a function: \n\nMaking a newly named block that has
        all of the code you want to run inside of it. \n\\-xml of function definition-
        \n\nThe single green block itself that you use, or call, to run the function
        you created.\n\\-xml of function call-\n\nPrepare to get familiar with functions,
        learn how to edit them, and create your own!"
      Revisiting the Counter Pattern_2019: "Today you’re going to learn how to use
        and create **functions**.\n\nCreating a function lets you make your own blocks!
        There are two parts to a function: \n\nMaking a newly named block that has
        all of the code you want to run inside of it. \n\\-xml of function definition-
        \n\nThe single green block itself that you use, or call, to run the function
        you created.\n\\-xml of function call-\n\nPrepare to get familiar with functions,
        learn how to edit them, and create your own!"
      Robot Doodle: "**Hugmynd að verkefni:** Búðu til mynd af einhverju kunnuglegu
        úr raunheimi. Þetta krefst úthalds og skipulagningar!"
      Robot Doodle_2018: "**Hugmynd að verkefni:** Búðu til mynd af einhverju kunnuglegu
        úr raunheimi. Þetta krefst úthalds og skipulagningar!"
      Room Escape Workshop - 1: |-
        # Uppstilling klefa

        <img
        src="https://images.code.org/9d103d74f7c2da05aeccd5fc317e6ab6-image-1490368234432.08.44
        AM.png" style="width:200px; float:right">

        Í flóttaleiknum þarft þú að stilla upp klefanum sem notandinn á að glíma við að komast út úr. Þú færð sumt af því tilbúið.  Þú þarft bara að ákveða hvernig hinir ýmsu hlutar klefans eiga að líta út með því að velja myndir!

        # Gerðu þetta

        -   Áfanginn byrjar í Hönnunarskjánum
        -   Settu viðeigandi mynd í hvern auðan myndramma (gráan rétthyrning). Til dæmis mynd af dyrum í myndrammann sem er þannig merktur.
        -   Dæmi um hvernig flóttaklefi gæti litið út er hér til hægri.
      Room Escape Workshop - 10: |-
        # Opnar dyr

        <img src="https://images.code.org/3651f7d5306bdcfd2d9a3d9bb842626e-image-1491066778787.12.36
        PM.png" style="width:200px;float:right">

        Þetta er að koma! Stillum nú upp dyrunum til undirbúnings því að opna þær.

        # Gerðu þetta

        -   Bættu við utandyramynd
        -   Gefðu henni got auðkenni (t.d. _utandyra_)
        -   Feldu utandyramyndina (Hún verður sýnd þegar dyrnar opnast)
      Room Escape Workshop - 10 - 2: |-
        # Opnar dyr

        <img
        src="https://images.code.org/57407cb51f50e08ecddb8ce7d2d89157-image-1491065952915.58.58
        PM.png" style="width:200px;float:right">

        Opnaðu dyrnar ef spilarinn hefur lykilinn!

        # Gerðu þetta

        -   Bættu við `onEvent` kubbi fyrir smell á dyrnar
        -   Settu `ef` yrðingu innan í `onEvent` til að athuga hvort staður lykilsins hafi færst neðst á skjáinn
            -   Bættu við `ef` yrðingu
            -   Bættu `==` í `ef` yrðinguna
            -   Settu öðrum megin við `==` þau x-hnit sem lykillinn er færður á þegar smellt er á hann
            -   Settu hinum megin `getXPosition()` kubbinn - Auðkennið í honum ætti vera auðkenni lykilsins!
        -   Notaðu `showElement` innan `ef` yrðingarinnar til að sýna földu utanhússmyndina ef lykillinn er fundinn
      Room Escape Workshop - 3: |-
        # Fela leynikóðann

        <img
        src="https://images.code.org/6fa80456a39d9b6417545f5f66ec83a5-image-1490368827625.png"
        style="width:400px;float:right">

        1.  Smelltu (í hönnunarskjánum) á hvíta ferninginn "CODE". Breyttu honum svo hann sýni leynikóða sem þú ákveður
        2.  Dragðu myndina niður til að fela leynikóðann!

        ![](<>)
      Room Escape Workshop - 3-2: |-
        # Færa mynd

        Búðu nú svo um hnútana að notandinn geti fundið leynikóðann með því að smella á myndina. Þegar smellt er á myndina ætti hún að færast upp og frá.

        # Gerðu þetta

        -   Dragðu út `onEvent` kubb
        -   Láttu `id` reitinn á `onEvent` kubbnum innihalda `picture` (sem er auðkenni myndeiningarinnar)
        -   Bættu `setPosition` kubbi í `onEvent` kubbinn með eftirfarandi inntökum
            -   ID: picture
            -   Næstu tvö inntök eru x og y gildi - prófaðu tölur þar til þú færð myndina til að hreyfast eins og sýnt er á myndinni hér hægra megin
      Room Escape Workshop - 4: |-
        # Öryggishólfið sett upp

        Þú hefur búið til leynikóða og gert notandanum kleift að færa sig í annan klefa. Nú skulum við gera honum kleift að slá inn leynikóðann þegar hann smellir á öryggishólfið

        # Gerðu þetta

        -   Bættu við `onEvent` kubbi
            -   Veldu auðkenni (ID) fyrir hólfið
        -   Bættu <img src="https://images.code.org/c0964a8543728d018d5d9583319e22b9-image-1491060910093.34.36
            AM.png" style="width:300px"> kubbi innan í `onEvent` kubbinn
            -   Breyttu heiti breytunnar _x_ (vinstra megin) í _guess_
            -   Breyttu _"Enter a value"_ (hægra megin, fyrirmælin til notandans) í _"Færðu inn kóðann"_
      Room Escape Workshop - 5: "# Leynikóðinn athugaður\n\nEftir að þú hefur tekið
        við ágiskun notandans um hver leynikóðinn er, þarft þú að athuga hvort hann
        sé réttur! Við getum gert þetta með `if` yrðingu. Svona skilyrðing athugar
        hvort skilyrði stenst. Í þessu tilfelli hvort að talan sem notandinn sló inn
        sé sú sama og leynikóðinn\n\n# Gerðu þetta\n\n-   Bættu <img\n    src=\"https://images.code.org/5e9a434b1ad6b8f010db928b668127a5-image-1491061131564.37.01\n
        \   AM.png\" style=\"width:100px\"> yrðingu inn í `onEvent` kubbinn fyrir
        öryggishólfið neðan við fyrirmælin til notanda\n-   Búðu til skilyrði með
        því að draga út <img src=\"https://images.code.org/f0680979704c30975550211b03ed222e-image-1491061134985.37.08\n
        \   AM.png\" style=\"width:100px\"> kubbinn sem mun athuga hvor tveir hlutir
        séu eins\n-   Settu _guess_ öðru megin í <img src=\"https://images.code.org/f0680979704c30975550211b03ed222e-image-1491061134985.37.08\n
        \   AM.png\" style=\"width:100px\"> (heiti breytunnar sem geymir ágiskun notandans)
        \n-   Settu gildið fyrir leynikóðann þinn í hina hlið skilyrðisins"
      Room Escape Workshop - 7: "# Öryggishólfið að innan\n\n<img\nsrc=\"https://images.code.org/71e74305187a46d0badeb29a9a69ac56-image-1490371014841.55.37\nAM.png\"
        style=\"width:200px;float:right\">\n\nEftir að forritið er farið að biðja
        um og athuga leynikóðann á það að \"opna\" öryggishólfið og sýna lykilinn.
        Til þess þarft þú fyrst að búa til þessar einingar í hönnunarstöðunni.\n\n#
        Gerðu þetta\n\n-   Skiptu í hönnunarstöðu og bættu við mynd af gráum ferningi\n
        \   -   Dragðu myndeiningu <img src=\"https://images.code.org/8f4bc108415d83e5c528c9204502efc2-image-1491059181186.06.13\n
        \       AM.png\" style=\"width:75px\"> út á skjáinn\n    -   Gefðu henni gott
        auðkenni (ID) t.d. _innanHolfs_\n    -   Finndu gráan ferning fyrir mynd\n
        \   -   Hún á að sýna öryggishólfið að innan því hún mun fela framhlið þess
        þegar hún er gerð sýnileg\n-   Bættu við mynd af lykli\n    -   Veldu og dragðu
        myndeiningu <img\n        src=\"https://images.code.org/8f4bc108415d83e5c528c9204502efc2-image-1491059181186.06.13\n
        \       AM.png\" style=\"width:75px\"> út á skjáinn\n    -   Gefðu henni gott
        auðkenni (t.d. _lykill_)\n    -   Finndu mynd af lykli \n-   Notaðu \"hidden\"
        eiginleika gráa ferningsins og lykilsins til að fela þá svo að hönnunarstaðan
        líti einhvern veginn svona út\n\n<img src=\"https://images.code.org/2c2c7e9996515f2b30d416b558fd1360-image-1489605526794.17.55\nPM.png\"
        style=\"width:200px\">"
      Room Escape Workshop - 8: |-
        # Að sýna hólfið að innan

        Stilltu nú upp kóðanum til að sýna lykilinn og gráa ferninginn þegar notandinn slær inn réttan leynikóða.

        # Gerðu þetta

        -   Bættu þessu innan í `ef` yrðinguna sem þú bjóst til í `onEvent` skipuninni fyrir öryggishólfið:
            -   Kubbinn `showElement` til að sýna gráa ferninginn
            -   `showElement` kubbinn til að sýna lykilinn
      Room Escape Workshop - 9-2: "# Smella á lykil\n\n<img src=\"https://images.code.org/1a736d2774860bebc5072b8ae8b38f34-image-1491066638078.10.00\nPM.png\"
        style=\"width:170px;float:right\">\n\nEftir að notandinn smellir á lykilinn
        viltu sýna að hann hafi hann. Þú getur gert það með því að færa lykilinn neðst
        í klefann.\n\n# Gerðu þetta\n\n-   Bættu við `onEvent` kubbi fyrir það þegar
        notandinn smellir á lykilinn. \n-   Gerðu þetta innan `onEvent` kubbsins:\n
        \   -   Notaðu `setPosition` til að færa lykilinn niður í horn skjásins"
      Standalone_Artist_2: "Teiknaðu þennan tígul með 120 og 60 gráðu hornum og 150
        díla löngum hliðum.\\\r\n\\\r"
      Standalone_Artist_3: "Getur þú teiknað þennan sexhyrning með 100 díla hliðum
        og 60 gráðu snúningum?\\\r\n\\\r"
      Standalone_Artist_4: "Nú hefurðu fengið nýjan kubb til að leika með sem er lykkjan.
        Hún endurtekur skipanir. Hvað gerist ef þú endurtekur þessar skipanir 6 sinnum?\\\r\n\\\r"
      Standalone_Artist_5: "Hversu oft þarftu að endurtaka þennan tígul til að teikna
        blómið?\\\r\n\\\r"
      Standalone_Artist_5.5: "Taktu eftir hvernig við einfölduðum kóðann fyrir tígulinn
        með því að nota lykkju. Þú getur endurtekið lykkjuna 12 sinnum til að teikna
        blómið. Vísbending: Eftir lykkjuna sem gerir tígulinn þarf að snúa um 30 gráður
        svo þú teiknir ekki ofan í sama tígulinn.\\\r\n\\\r"
      Standalone_Artist_6: "Settu þennan kóða fyrir sexhyrning í lykkju og endurtaktu
        6 sinnum. Um hve margar gráður þarf að snúa í hvert sinn? Vísbending: Deildu
        fjölda gráða í hring með fjölda endurtekninga.\\\r\n\\\r"
      Standalone_Artist_7: "Fall er annað verkfæri sem forritarar hafa til að þurfa
        ekki að endurtaka sig. Þetta fall teiknar blóm, svo þú getur notað það hvenær
        sem þú vilt teikna blóm. Notaðu það og nýja hopp-kubbinn til að teikna þessi
        blóm. Vísbending: Það eru 150 dílar á milli blómanna\\\r\n\\\r"
      Standalone_Artist_8: "Hér er fall sem heitir `teikna form` og við höfum forritað
        til að teikna sexhyrninga. Keyrðu kóðann til að sjá hvað það gerir og gerðu
        svo tilraunir með fallið til að sjá hvað gerist. Getur þú látið það teikna
        mynstur úr ferningum, þríhyrningum eða átthyrningum?\\\r\n\\\r"
      Standalone_Artist_9: "Haltu nú áfram og teiknaðu þína eigin hugmynd! Þú ert
        meira að segja með tómt fall sem þú getur látið gera hvað sem er!\\\r\n\\\r"
      The Accelerometer: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      The Accelerometer_2018: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      The Accelerometer_2019: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      U4 Model Design 1: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model.png)

        <br/>

        Click to expand

        </div>

        # Creating a digital prototype

        Using the prototype to the right (click the image to enlarge it) you're going to create a digital prototype of the example app "Recycling Finder". We've already added a few of the elements for you, including the title, but it doesn't look quite right yet. We'll go over each element of this as we go, but for now let's **just focus on the title**.

        <!--<img src="https://images.code.org/66633526e03550bedb8503fefdc2ece3-image-1502921575904.png" style="width: 300px; float: right; clear: both;">-->

        # Do This

        -   **Make sure you are in Design Mode,** the switch appears above your app window on the left.
        -   **Click on the title text** to view its properties.
        -   **Change the property "text"** to "Recycling Finder".
        -   **Change the "font size"** to make the title larger.
        -   **Change the "text alignment"** so the title is centered on the screen.

        _Note: Make sure you click **"Run"** before moving on to save your progress._
      U4 Model Design 1_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model.png)

        <br/>

        Click to expand

        </div>

        # Creating a digital prototype

        Using the prototype to the right (click the image to enlarge it) you're going to create a digital prototype of the example app "Recycling Finder". We've already added a few of the elements for you, including the title, but it doesn't look quite right yet. We'll go over each element of this as we go, but for now let's **just focus on the title**.

        <!--<img src="https://images.code.org/66633526e03550bedb8503fefdc2ece3-image-1502921575904.png" style="width: 300px; float: right; clear: both;">-->

        # Do This

        -   **Make sure you are in Design Mode,** the switch appears above your app window on the left.
        -   **Click on the title text** to view its properties.
        -   **Change the property "text"** to "Recycling Finder".
        -   **Change the "font size"** to make the title larger.
        -   **Change the "text alignment"** so the title is centered on the screen.

        _Note: Make sure you click **"Run"** before moving on to save your progress._
      U4 Model Design 1_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model.png)

        <br/>

        Click to expand

        </div>

        # Creating a digital prototype

        Using the prototype to the right (click the image to enlarge it) you're going to create a digital prototype of the example app "Recycling Finder". We've already added a few of the elements for you, including the title, but it doesn't look quite right yet. We'll go over each element of this as we go, but for now let's **just focus on the title**.

        <!--<img src="https://images.code.org/66633526e03550bedb8503fefdc2ece3-image-1502921575904.png" style="width: 300px; float: right; clear: both;">-->

        # Do This

        -   **Make sure you are in Design Mode,** the switch appears above your app window on the left.
        -   **Click on the title text** to view its properties.
        -   **Change the property "text"** to "Recycling Finder".
        -   **Change the "font size"** to make the title larger.
        -   **Change the "text alignment"** so the title is centered on the screen.

        _Note: Make sure you click **"Run"** before moving on to save your progress._
      U4 Model Design 2: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/c0a6e147bc1cb940893f87ffd25b5015-image-1505758331506.png)

        <br/>

        Click to expand

        </div>

        # Adding more text

        Each screen of your app is composed of multiple design _elements_. You can drag out elements from the "Design Toolbox" on the left side of the workspace. To add more blocks of text, just drag out additional "label" elements.

        # Do This

        -   **Drag out a new "label" element** and place it where the "home\_description" text should be.
        -   **Change the id** to match the prototype (home\_description)
        -   **Change the field "text"** to match the prototype.
        -   **Resize** the text area by clicking and dragging the bottom right corner.
        -   **Change any other properties** to make the text look like you want it to.
      U4 Model Design 2_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/c0a6e147bc1cb940893f87ffd25b5015-image-1505758331506.png)

        <br/>

        Click to expand

        </div>

        # Adding more text

        Each screen of your app is composed of multiple design _elements_. You can drag out elements from the "Design Toolbox" on the left side of the workspace. To add more blocks of text, just drag out additional "label" elements.

        # Do This

        -   **Drag out a new "label" element** and place it where the "home\_description" text should be.
        -   **Change the id** to match the prototype (home\_description)
        -   **Change the field "text"** to match the prototype.
        -   **Resize** the text area by clicking and dragging the bottom right corner.
        -   **Change any other properties** to make the text look like you want it to.
      U4 Model Design 2_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/c0a6e147bc1cb940893f87ffd25b5015-image-1505758331506.png)

        <br/>

        Click to expand

        </div>

        # Adding more text

        Each screen of your app is composed of multiple design _elements_. You can drag out elements from the "Design Toolbox" on the left side of the workspace. To add more blocks of text, just drag out additional "label" elements.

        # Do This

        -   **Drag out a new "label" element** and place it where the "home\_description" text should be.
        -   **Change the id** to match the prototype (home\_description)
        -   **Change the field "text"** to match the prototype.
        -   **Resize** the text area by clicking and dragging the bottom right corner.
        -   **Change any other properties** to make the text look like you want it to.
      U4 Model Design 3: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/cad5b0e54f67976fee68ecf29c2a603b-image-1505758463551.png)

        <br/>

        Click to expand

        </div>

        # Adding images

        The prototype just has a plain black square where the logo should be - let's add an image to spice it up. The "image" element allows you to either upload an image from your computer or select from a library of graphic icons.

        # Do This

        -   **Drag out a new "image" element** and place between the description and the title.
        -   **Change the id** to match the prototype.
        -   **Click the "Choose..." link** next to the "image" field.
        -   **Select the "Icons" tab** and choose an icon for your logo.
        -   **Change the color** of the icon using the "icon color" field.
      U4 Model Design 3_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/cad5b0e54f67976fee68ecf29c2a603b-image-1505758463551.png)

        <br/>

        Click to expand

        </div>

        # Adding images

        The prototype just has a plain black square where the logo should be - let's add an image to spice it up. The "image" element allows you to either upload an image from your computer or select from a library of graphic icons.

        # Do This

        -   **Drag out a new "image" element** and place between the description and the title.
        -   **Change the id** to match the prototype.
        -   **Click the "Choose..." link** next to the "image" field.
        -   **Select the "Icons" tab** and choose an icon for your logo.
        -   **Change the color** of the icon using the "icon color" field.
      U4 Model Design 3_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/cad5b0e54f67976fee68ecf29c2a603b-image-1505758463551.png)

        <br/>

        Click to expand

        </div>

        # Adding images

        The prototype just has a plain black square where the logo should be - let's add an image to spice it up. The "image" element allows you to either upload an image from your computer or select from a library of graphic icons.

        # Do This

        -   **Drag out a new "image" element** and place between the description and the title.
        -   **Change the id** to match the prototype.
        -   **Click the "Choose..." link** next to the "image" field.
        -   **Select the "Icons" tab** and choose an icon for your logo.
        -   **Change the color** of the icon using the "icon color" field.
      U4 Model Design 4: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/17b565cb2f5da12babc16fbd22685732-image-1505758655682.png)

        <br/>

        Click to expand

        </div>

        # Adding buttons

        Buttons allow your user to interact with your app. This prototype screen will need three buttons (each shaded gray on the prototype.) We've already added the Search button, so you just need to add Contact and About.

        # Do This

        -   **Drag out a new "button" element** for each of the two remaining buttons.
        -   **Change the ids** to match the prototype.
        -   **Change the text** to match the prototype.
        -   **Modify other properties** to make the screen look like you'd like.

        <img src="https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif" style="width: 500px;">
      U4 Model Design 4_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/17b565cb2f5da12babc16fbd22685732-image-1505758655682.png)

        <br/>

        Click to expand

        </div>

        # Adding buttons

        Buttons allow your user to interact with your app. This prototype screen will need three buttons (each shaded gray on the prototype.) We've already added the Search button, so you just need to add Contact and About.

        # Do This

        -   **Drag out a new "button" element** for each of the two remaining buttons.
        -   **Change the ids** to match the prototype.
        -   **Change the text** to match the prototype.
        -   **Modify other properties** to make the screen look like you'd like.

        <img src="https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif" style="width: 500px;">
      U4 Model Design 4_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/17b565cb2f5da12babc16fbd22685732-image-1505758655682.png)

        <br/>

        Click to expand

        </div>

        # Adding buttons

        Buttons allow your user to interact with your app. This prototype screen will need three buttons (each shaded gray on the prototype.) We've already added the Search button, so you just need to add Contact and About.

        # Do This

        -   **Drag out a new "button" element** for each of the two remaining buttons.
        -   **Change the ids** to match the prototype.
        -   **Change the text** to match the prototype.
        -   **Modify other properties** to make the screen look like you'd like.

        <img src="https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif" style="width: 500px;">
      U4 Model Design 5: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/d257d0b06a24195a40adc60e4c96c0e1-image-1505759167176.png)

        <br/>

        Click to expand

        </div>

        # Making a Search Box

        The search box in our prototype can be created using a "Text Input" element. This is a box that your user can type into, and later your software can read what was entered and do something with it.

        # Do This

        -   **Add a Text Input** element.
        -   **Change the id** to match the prototype.
        -   **Add a Label** with the text "Location" next to your text input.
      U4 Model Design 5_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/d257d0b06a24195a40adc60e4c96c0e1-image-1505759167176.png)

        <br/>

        Click to expand

        </div>

        # Making a Search Box

        The search box in our prototype can be created using a "Text Input" element. This is a box that your user can type into, and later your software can read what was entered and do something with it.

        # Do This

        -   **Add a Text Input** element.
        -   **Change the id** to match the prototype.
        -   **Add a Label** with the text "Location" next to your text input.
      U4 Model Design 5_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/d257d0b06a24195a40adc60e4c96c0e1-image-1505759167176.png)

        <br/>

        Click to expand

        </div>

        # Making a Search Box

        The search box in our prototype can be created using a "Text Input" element. This is a box that your user can type into, and later your software can read what was entered and do something with it.

        # Do This

        -   **Add a Text Input** element.
        -   **Change the id** to match the prototype.
        -   **Add a Label** with the text "Location" next to your text input.
      U4 Model Design 6: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/7c8f4893c0b1f4bcd2280c950e389c95-image-1505759396699.png)

        <br/>

        Click to expand

        </div>

        # Checkboxes

        The type of recyclables you're searching for can be set using "Checkbox" elements. We already added a checkbox and label for glass, so you just need to add ones for paper and plastic.

        # Do This

        -   **Add a Checkbox** for each of the options.
        -   **Change the ids** to match the prototype.
        -   **Add labels** to describe each checkbox.
      U4 Model Design 6_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/7c8f4893c0b1f4bcd2280c950e389c95-image-1505759396699.png)

        <br/>

        Click to expand

        </div>

        # Checkboxes

        The type of recyclables you're searching for can be set using "Checkbox" elements. We already added a checkbox and label for glass, so you just need to add ones for paper and plastic.

        # Do This

        -   **Add a Checkbox** for each of the options.
        -   **Change the ids** to match the prototype.
        -   **Add labels** to describe each checkbox.
      U4 Model Design 6_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/7c8f4893c0b1f4bcd2280c950e389c95-image-1505759396699.png)

        <br/>

        Click to expand

        </div>

        # Checkboxes

        The type of recyclables you're searching for can be set using "Checkbox" elements. We already added a checkbox and label for glass, so you just need to add ones for paper and plastic.

        # Do This

        -   **Add a Checkbox** for each of the options.
        -   **Change the ids** to match the prototype.
        -   **Add labels** to describe each checkbox.
      U4 Model Design 7: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model.png)

        <br/>

        Click to expand

        </div>

        # Finishing Touches

        By now you should have a fairly complete (though non-functional) digital version of the paper prototype we started with. All that's left to do is check back over your paper prototype and add any final touches you might have missed.

        # Do This

        -   **Check over the prototype** to make sure you've included everything.
        -   **Read through your IDs** and fix any that aren't descriptive.
        -   **Clean up** any rough edges by resizing or moving around elements.
      U4 Model Design 7_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model.png)

        <br/>

        Click to expand

        </div>

        # Finishing Touches

        By now you should have a fairly complete (though non-functional) digital version of the paper prototype we started with. All that's left to do is check back over your paper prototype and add any final touches you might have missed.

        # Do This

        -   **Check over the prototype** to make sure you've included everything.
        -   **Read through your IDs** and fix any that aren't descriptive.
        -   **Clean up** any rough edges by resizing or moving around elements.
      U4 Model Design 7_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model.png)

        <br/>

        Click to expand

        </div>

        # Finishing Touches

        By now you should have a fairly complete (though non-functional) digital version of the paper prototype we started with. All that's left to do is check back over your paper prototype and add any final touches you might have missed.

        # Do This

        -   **Check over the prototype** to make sure you've included everything.
        -   **Read through your IDs** and fix any that aren't descriptive.
        -   **Clean up** any rough edges by resizing or moving around elements.
      U4 Model Program 1: |-
        # Adding a New Screen

        To complete your app, you're going to need more than than just a home screen. Each card that you created in your paper prototype is represented by a "screen" in App Lab. To create more screens, just click the dropdown at the top of the app display and select "New Screen..."

        <img src="https://images.code.org/2b49c36a57fb904d4fcf219ca498647d-image-1504714832027.png" style="width: 200px">

        # Do This

        -   **Create a New Screen** and give it the ID "about".
      U4 Model Program 1.5: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model_about.png)

        <br/>

        Click to expand

        </div>

        # Design the About Screen

        To add elements to your new About screen, you'll need to first select it from the screens dropdown.

        # Do This

        -   **Complete the About screen** using the prototype to the right.
        -   **Use the screens dropdown** to switch between your Home and About screens.
      U4 Model Program 1.5_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model_about.png)

        <br/>

        Click to expand

        </div>

        # Design the About Screen

        To add elements to your new About screen, you'll need to first select it from the screens dropdown.

        # Do This

        -   **Complete the About screen** using the prototype to the right.
        -   **Use the screens dropdown** to switch between your Home and About screens.
      U4 Model Program 1.5_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model_about.png)

        <br/>

        Click to expand

        </div>

        # Design the About Screen

        To add elements to your new About screen, you'll need to first select it from the screens dropdown.

        # Do This

        -   **Complete the About screen** using the prototype to the right.
        -   **Use the screens dropdown** to switch between your Home and About screens.
      U4 Model Program 1_2018: |-
        # Adding a New Screen

        To complete your app, you're going to need more than just a home screen. Each card that you created in your paper prototype is represented by a "screen" in App Lab. To create more screens, just click the dropdown at the top of the app display and select "New Screen..."

        <img src="https://images.code.org/2b49c36a57fb904d4fcf219ca498647d-image-1504714832027.png" style="width: 200px">

        # Do This

        -   **Create a New Screen** and give it the ID "about".
      U4 Model Program 1_2019: |-
        # Adding a New Screen

        To complete your app, you're going to need more than just a home screen. Each card that you created in your paper prototype is represented by a "screen" in App Lab. To create more screens, just click the dropdown at the top of the app display and select "New Screen..."

        <img src="https://images.code.org/2b49c36a57fb904d4fcf219ca498647d-image-1504714832027.png" style="width: 200px">

        # Do This

        -   **Create a New Screen** and give it the ID "about".
      U4 Model Program 2: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/9ca7398a9b7403dc39ec6a6b2d2b8a5e-image-1477346132059.png)

        <br/>

        Click to expand

        </div>

        # Screen Import

        In addition to adding new blank screens, you can import screens from "Import Screen..." To import a screen from someone else, you'll need them to give you the sharing URL.

        **Note:** Screens you import _must not_ share any IDs with elements already in your app!

        # Do This

        Another student has created a search results screen that you can import into your app. Their app's share link is **<a href="https://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/" target="_blank">https\://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/</a>**

        -   **Select "Import Screen...** from the screens dropdown.
        -   **Copy and paste the above url** into the import screens dialog.
        -   **Select the screen** you wish to import.
        -   **Click Import** to import the screen.
        -   **Use the screens dropdown** to switch between your Home, About, and Search screens.
      U4 Model Program 2.5: |-
        # Contact Screen Import

        Yet another student created a Contact screen that you can import into your app. Their share link is **<a href ="https://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/" target="_blank">https\://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/</a>**

        # Do This

        -   **Select "Import Screen...** from the screens dropdown.
        -   **Copy and paste the above url** into the import screens dialog.
        -   **Select the screen** you wish to import.
        -   **Click Import** to import the screen.
        -   **Use the screens dropdown** to make sure your app has Home, About, Contact, and Search screens.
      U4 Model Program 2.5_2018: |-
        # Contact Screen Import

        Yet another student created a Contact screen that you can import into your app. Their share link is **<a href ="https://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/" target="_blank">https\://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/</a>**

        # Do This

        -   **Select "Import Screen...** from the screens dropdown.
        -   **Copy and paste the above url** into the import screens dialog.
        -   **Select the screen** you wish to import.
        -   **Click Import** to import the screen.
        -   **Use the screens dropdown** to make sure your app has Home, About, Contact, and Search screens.
      U4 Model Program 2.5_2019: |-
        # Contact Screen Import

        Yet another student created a Contact screen that you can import into your app. Their share link is **<a href ="https://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/" target="_blank">https\://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/</a>**

        # Do This

        -   **Select "Import Screen...** from the screens dropdown.
        -   **Copy and paste the above url** into the import screens dialog.
        -   **Select the screen** you wish to import.
        -   **Click Import** to import the screen.
        -   **Use the screens dropdown** to make sure your app has Home, About, Contact, and Search screens.
      U4 Model Program 2_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/9ca7398a9b7403dc39ec6a6b2d2b8a5e-image-1477346132059.png)

        <br/>

        Click to expand

        </div>

        # Screen Import

        In addition to adding new blank screens, you can import screens from "Import Screen..." To import a screen from someone else, you'll need them to give you the sharing URL.

        **Note:** Screens you import _must not_ share any IDs with elements already in your app!

        # Do This

        Another student has created a search results screen that you can import into your app. Their app's share link is **<a href="https://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/" target="_blank">https\://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/</a>**

        -   **Select "Import Screen...** from the screens dropdown.
        -   **Copy and paste the above url** into the import screens dialog.
        -   **Select the screen** you wish to import.
        -   **Click Import** to import the screen.
        -   **Use the screens dropdown** to switch between your Home, About, and Search screens.
      U4 Model Program 2_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/9ca7398a9b7403dc39ec6a6b2d2b8a5e-image-1477346132059.png)

        <br/>

        Click to expand

        </div>

        # Screen Import

        In addition to adding new blank screens, you can import screens from "Import Screen..." To import a screen from someone else, you'll need them to give you the sharing URL.

        **Note:** Screens you import _must not_ share any IDs with elements already in your app!

        # Do This

        Another student has created a search results screen that you can import into your app. Their app's share link is **<a href="https://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/" target="_blank">https\://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/</a>**

        -   **Select "Import Screen...** from the screens dropdown.
        -   **Copy and paste the above url** into the import screens dialog.
        -   **Select the screen** you wish to import.
        -   **Click Import** to import the screen.
        -   **Use the screens dropdown** to switch between your Home, About, and Search screens.
      U4 Model Program 3: |-
        # Button Events

        With our screens in place, it's time to start actually _programming_ the app so that it responds to button clicks. For each button on each screen, you'll want to add an `onEvent` block that watches for that button to be clicked and responds appropriately. To start off with we'll just watch the "home\_search\_btn" button and print something to the console when it's clicked

        # Do This

        You're now in Code Mode (you can use the buttons above your app to switch between Code Mode and Design Mode). This is where you can write the code that will respond to users interacting with your app.

        ![](https://images.code.org/278b27dd31b6ca014c0dd32c5f964a54-image-1505764431751.png)

        -   **Drag out an `onEvent` block** from the code toolbox.
        -   **Select "home\_search\_btn"** from the "id" dropdown.
        -   **Drag out a `console.log` block** from the variables drawer.
        -   **Run your app**.
        -   **Click the Search button** and look for messages in the console.
      U4 Model Program 3_2018: |-
        # Button Events

        With our screens in place, it's time to start actually _programming_ the app so that it responds to button clicks. For each button on each screen, you'll want to add an `onEvent` block that watches for that button to be clicked and responds appropriately. To start off with we'll just watch the `home_search_btn` button and print something to the console when it's clicked

        # Do This

        You're now in Code Mode (you can use the buttons above your app to switch between Code Mode and Design Mode). This is where you can write the code that will respond to users interacting with your app.

        ![](https://images.code.org/278b27dd31b6ca014c0dd32c5f964a54-image-1505764431751.png)

        -   **Drag out an `onEvent` block** from the code toolbox.
        -   **Select `home_search_btn`** from the "id" dropdown.
        -   **Drag out a `console.log` block** from the variables drawer.
        -   **Run your app**.
        -   **Click the Search button** and look for messages in the console.
      U4 Model Program 3_2019: |-
        # Button Events

        With our screens in place, it's time to start actually _programming_ the app so that it responds to button clicks. For each button on each screen, you'll want to add an `onEvent` block that watches for that button to be clicked and responds appropriately. To start off with we'll just watch the `home_search_btn` button and print something to the console when it's clicked

        # Do This

        You're now in Code Mode (you can use the buttons above your app to switch between Code Mode and Design Mode). This is where you can write the code that will respond to users interacting with your app.

        ![](https://images.code.org/278b27dd31b6ca014c0dd32c5f964a54-image-1505764431751.png)

        -   **Drag out an `onEvent` block** from the code toolbox.
        -   **Select `home_search_btn`** from the "id" dropdown.
        -   **Drag out a `console.log` block** from the variables drawer.
        -   **Run your app**.
        -   **Click the Search button** and look for messages in the console.
      U4 Model Program 4: |-
        # Changing Screens On Click

        The `setScreen` block will change your app to whichever screen you specify. If you place a `setScreen` block _inside_ an `onEvent` block, you can program your buttons to change to the correct screen.

        # Do This

        Using the `onEvent` block that you've created, make your program change to the "search" screen when the "home\_search\_btn" is clicked.

        -   **Drag out a `setScreen` block** an put it inside the `onEvent` block.
        -   **Select "search"** from the `setScreen` dropdown.
        -   **Run your app** and test the "home\_search\_btn" button.
      U4 Model Program 4_2018: |-
        # Changing Screens On Click

        The `setScreen` block will change your app to whichever screen you specify. If you place a `setScreen` block _inside_ an `onEvent` block, you can program your buttons to change to the correct screen.

        # Do This

        Using the `onEvent` block that you've created, make your program change to the "search" screen when the `home_search_btn` is clicked.

        -   **Drag out a `setScreen` block** an put it inside the `onEvent` block.
        -   **Select "search"** from the `setScreen` dropdown.
        -   **Run your app** and test the `home_search_btn` button.
      U4 Model Program 4_2019: |-
        # Changing Screens On Click

        The `setScreen` block will change your app to whichever screen you specify. If you place a `setScreen` block _inside_ an `onEvent` block, you can program your buttons to change to the correct screen.

        # Do This

        Using the `onEvent` block that you've created, make your program change to the "search" screen when the `home_search_btn` is clicked.

        -   **Drag out a `setScreen` block** an put it inside the `onEvent` block.
        -   **Select "search"** from the `setScreen` dropdown.
        -   **Run your app** and test the `home_search_btn` button.
      U4 Model Program 5: |-
        # Wire Up the Other Buttons

        Now that you've made one button work, just follow the same pattern for all of your others.

        # Do This

        -   **Add an `onEvent` block** for each button.
        -   **Select the button ID** from the "id" dropdown.
        -   **Add a `setScreen` block** inside each `onEvent` block.
        -   **Select the screen ID** from each `setScreen` dropdown.
        -   **Run your app** and test that all of the buttons work.
      U4 Model Program 5_2018: |-
        # Wire Up the Other Buttons

        Now that you've made one button work, just follow the same pattern for all of your others.

        # Do This

        -   **Add an `onEvent` block** for each button.
        -   **Select the button ID** from the "id" dropdown.
        -   **Add a `setScreen` block** inside each `onEvent` block.
        -   **Select the screen ID** from each `setScreen` dropdown.
        -   **Run your app** and test that all of the buttons work.
      U4 Model Program 5_2019: |-
        # Virkjaðu hina hnappana

        Nú þegar einn hnappurinn er farinn að virka, getur þú notað sömu aðferðir til að virkja alla hina.

        # Gerðu þetta

        -   Búðu til, fyrir hvern hnapp, atvik sem kallar fram viðeignandi skjámynd þegar ýtt á hnappinn.
        -   Keyrðu appið og prófaðu virkni allra hnappanna.
      Underground Avoiding Lava: Það leynist hraun undir sumum blokkunum og þú verður
        að þekja það áður þú ferð áfram. `Ef` skipun er gagnleg hér. Bættu `færa áfram`
        skipun við á réttum stað til að ná að grafa út þessar blokkir.
      Underground Avoiding Lava_2019: Það leynist hraun undir sumum blokkunum og þú
        verður að þekja það áður þú ferð áfram. `Ef` skipun er gagnleg hér. Bættu
        `færa áfram` skipun við á réttum stað til að ná að grafa út þessar blokkir.
      Underground If Statements: Nú vandast málin. Grafðu út 3 af roðasteini, en ekki
        detta í hraunið. Notaðu `ef` skipun til að leggja hleðslustein yfir hraun
        sem kemur í ljós.
      Underground If Statements_2019: Nú vandast málin. Grafðu út 3 af roðasteini,
        en ekki detta í hraunið. Notaðu `ef` skipun til að leggja hleðslustein yfir
        hraun sem kemur í ljós.
      Using Accelerometer Events: "Today you’re going to learn how to use and create
        **functions**.\n\nCreating a function lets you make your own blocks! There
        are two parts to a function: \n\nMaking a newly named block that has all of
        the code you want to run inside of it. \n\\-xml of function definition- \n\nThe
        single green block itself that you use, or call, to run the function you created.\n\\-xml
        of function call-\n\nPrepare to get familiar with functions, learn how to
        edit them, and create your own!"
      Using Accelerometer Events_2018: "Today you’re going to learn how to use and
        create **functions**.\n\nCreating a function lets you make your own blocks!
        There are two parts to a function: \n\nMaking a newly named block that has
        all of the code you want to run inside of it. \n\\-xml of function definition-
        \n\nThe single green block itself that you use, or call, to run the function
        you created.\n\\-xml of function call-\n\nPrepare to get familiar with functions,
        learn how to edit them, and create your own!"
      Using Accelerometer Events_2019: "Today you’re going to learn how to use and
        create **functions**.\n\nCreating a function lets you make your own blocks!
        There are two parts to a function: \n\nMaking a newly named block that has
        all of the code you want to run inside of it. \n\\-xml of function definition-
        \n\nThe single green block itself that you use, or call, to run the function
        you created.\n\\-xml of function call-\n\nPrepare to get familiar with functions,
        learn how to edit them, and create your own!"
      'Video: Intro to CSS Part 2_2019': |-
        ## Spurning til að hugleiða

        -   Hvernig veit vefsíðan hvaða stílsíðu hún á að nota?
      'Video: Intro to CSS_2019': |-
        ## Spurningar til að hugleiða

        -   Hvernig er útliti vefsíðu haldið aðskildu frá uppbyggingu síðunnar?
        -   Mundir þú vilja að vefsíðan þín hefði sérstakt útlit? Hvers vegna?
      Vigenere: "# Encrypt and decrypt a message with the Vigenère cipher\n\nThis
        is an interactive version of the Vigenère cipher that animates the encryption
        and decryption as it’s happening, given a piece of text to encrypt or decrypt
        and the key.\n\n# Do this\n\n### Encrypt a message\n\nClick Step several times,
        and trace what’s happening. Pay attention to:\n\n-   How the ciphertext is
        being produced\n-   What happens when you get to the last character of the
        key\n-   After you’ve stepped through a few characters click Play to watch
        the rest animate\n-   Hit Restart and play the animation again. You can use
        the speed slider to speed it up or slow it down  \n\n![](https://images.code.org/06858f88ac12997bba73f4f76638a068-image-1443574425185.gif)\n\n###
        Decrypt a message\n\nEncrypt a message as above, then:  \n\n-   Highlight
        and copy the ciphertext\n-   Paste it into the plaintext area. Note: Don’t
        change the key\n-   Change the Encrypt/Decrypt toggle to Decrypt\n-   Hit
        Step a few times, and then Play\n\nYou should see the original text emerge.\\\n![](https://images.code.org/dc89d6c19c17adb23b6b5ff9a62c4583-image-1443574425182.gif)\n\nHow
        hard would it be to crack a message encrypted with this cipher? Does the length
        of the key make a difference?"
      Virtual Pet 1: "Þetta er Geraldína, nýi gælugíraffinn þinn.  \n\nHvað heldur
        þú að muni gerast þegar þú ýtir á \"▶ Keyra\" og smellir svo á hana?"
      Virtual Pet 1 Predict: "**Spáðu hvað mun gerast:** Þetta er Geraldína, nýi gælugíraffinn
        þinn. \n\nHvað heldur þú að muni gerast þegar þú ýtir á \"▶ Keyra\" og smellir
        svo á hana?"
      Virtual Pet 1_2019: "**Frjáls æfing**: Hér er heldur betur flott gæludýr! \n\nLestu
        kóðann fyrir neðan og spáðu í eftirfarandi:\n\n-   Hvernig er gæludýrið látið
        hreyfast? \n-   Hvað gerist ef dýrið snertir ísinn? Hvað með paprikuna?\n-
        \  Hvernig er breytan `energy` (orka) notuð? Hvernig getur þú athugað gildi
        `energy` fyrir gæludýrið?\n\nKeyrðu kóðann og leiktu þér með gæludýrið! Smelltu
        svo á **Ljúka**."
      Virtual Pet 2: "Það er moldarpollur í horninu.  \n\nBúðu til **atvik** svo að
        þegar Geraldína snertir pollinn þá breytist litur hennar í brúnan."
      Virtual Pet 2_2019: "Nú er komið að þér að búa til þitt eigið sýndargæludýr!
        Byrjaðu á að gefa því útlit.\n\n1.  Smelltu á **Búningar** flipann (Costumes)
        efst til vinstri á skjánum (við hlið **Kóði**).\n2.  Breyttu upphafsbúningnum
        eða bættu við nýjum að vild.\n3.  Settu búninginn þinn á veruna í kóðanum
        hér fyrir neðan. \n4.  Smelltu á **Keyra** til að sjá gæludýrið með nýju útliti!"
      Virtual Pet 3: "Við getum haft óhreinan gíraffa ráfandi um á svæðinu!  \n\n1.
        \ Bættu nýjum sápukvika á skjáinn.\n2.  Getur gengið þannig frá að þegar gíraffinn
        og sápan snertast, að þá fái gíraffinn aftur sinn eðlilega lit?\n\n* * *\n\nEndurstilltu
        litinn með þessum kubbi:\n<xml><block type=\"gamelab_removeTint\" inline=\"true\">\n
        \     <value name=\"THIS\">\n        <block type=\"sprite_variables_get\">\n
        \         <title name=\"VAR\">mySprite</title>\n        </block>\n      </value>\n
        \   </block></xml>"
      Virtual Pet 3_2019: |-
        Búðu til atvik til að stjórna hreyfingum gæludýrsins!

        Byrjaðu á að nota <xml><block type="gamelab_keyPressed" block-text="the while up key pressed event block"><title name="CONDITION">"while"</title><title name="KEY">"up"</title></block></xml> ásamt <xml><block type="gamelab_moveInDirection" block-text="the move in direction action block"><title name="DIRECTION">"North"</title></block></xml> til að láta dýrið hreyfast í Norður **á meðan** upp örvarlykli er haldið niðri.

        Endurtaktu þetta fyrir hinar áttirnar (Suður, Vestur, Austur) og örvarlyklana (niður, vinstri, hægri)!
      Virtual Pet 4: "Við viljum ekki þurfa að bíða eftir því að gíraffinn þrífi sjálfa
        sig í hvert skipti.  \n\nBættu hegðun við sápuna svo hægt sé að draga hana.
        Dragðu hana svo á gíraffann til að þvo honum!"
      Virtual Pet 4_2019: |-
        Búum til fæðu sem flakkar!

        1.  Bættu **tveimur** verum við heiminn.
        2.  Láttu aðra veruna vera eitthvað sem dýrið þitt **vill** borða og hina vera eitthvað sem það **vill ekki** borða.
        3.  Láttu fæðuna fá hegðunina **ráfa** (wander) um leið og hún birtist.
      Virtual Pet 5: "Öll þessi hreyfing eyðir orku!  \n\nBættu aðgerðum við hvert
        atvik þannig að gíraffinn minnki aðeins (skreppi saman um 5) í hvert skipti
        sem hann rekst á annan kvika.  "
      Virtual Pet 5_2019: |-
        Notaðu <xml><block type="gamelab_checkTouching" block-text="the when touching block"></block></xml> with <xml><block type="gamelab_jumpTo" block-text="the jump to location block"></block></xml> til að **líkja eftir** "að borða" í sýndarheiminum!

        1.  Búðu til atvik sem lætur fæðuna hoppa á stað valinn af handahófi þegar dýrið snertir hana.
        2.  Endurtaktu þetta fyrir hina fæðuna.
      Virtual Pet 6: "Fjölbreytt matarræði er mikilvægt! Við þurfum að gefa gíraffanum
        að éta svo hann öðlist fyrri styrk.  \n\nBættu epli við sviðið og láttu það
        breyta gíraffanum í sína venjulega stærð gíraffans þegar kvikarnir tveir snertast.
        \ "
      Virtual Pet 6_2019: "Notaðu <xml><block type=\"variables_set\" block-text=\"the
        set variable block\"><title name=\"VAR\">energy</title></block></xml> ásamt
        <xml><block type=\"math_change\" block-text=\"the change variable block\"><title
        name=\"VAR\">energy</title></block></xml> til að láta það að éta hafa áhrif
        á orkustöðu gæludýrsins! Því meiri orku sem það hefur, því hraðar á það að
        hreyfast! \n\n1.  Stilltu breytuna `energy` (orka) á 5 í upphafi forritsins.\n2.
        \ Þegar gæludýrið borðar fæðu sem því **líkar** á 1 að bætast við  `energy`.\n3.
        \ Þegar gæludýrið borðar fæðu sem því **líkar ekki** á `energy` að stillast
        aftur á 5.\n4.  Breyttu atvikunum fyrir örvarlyklana þannig að gæludýrið færist
        nú um `energy` marga díla í stað fastrar tölu."
      Virtual Pet 7_2019: "Þú getur athugað orkustöðu gæludýrsins (gildið í `energy`)
        með <xml><block type=\"gamelab_printText\" block-text=\"the print block\"></block></xml>,
        sem er nýr kubbur í flokknum `Heimur`! \n\nBúðu til atvik sem skrifar út gildið
        í `energy` þegar smellt er á gæludýrið. "
      Virtual Pet 8_2019: "**Frjáls æfing:** Sýndargæludýrið þitt er _SÝNILEGA FLOTT!_
        \n\nHvað fleira geturðu gert? Prófaðu þessar hugmyndir:\n\n-   Settu lit eða
        mynd í bakgrunninn\n-   Láttu dýrið tala meira! T. d. segja _\"Namm! Meiri
        orka!\"_ þegar það borðar fæðu sem því líkar eða _\"Oj! Missi orku!\"_ þegar
        það borðar fæðu sem því mislíkar.\n-   Bættu við annarri veru sem hefur áhrif
        á gæludýrið eða öfugt. Hvað með **leikfang**?\n-   Bættu við annarri breytu
        sem getur haft áhrif á dýrið eða heiminn. Hvað með `gleði` eða `aldur`?\n-
        \  Gerðu til raunir með hegðanir! Prófaðu að breyta `ráfa` (wander) hegðuninni
        til að gefa fæðuverunum minni eða meiri hraða. (Vísbending: nú er \"hraði\"
        (speed) þeirra 5...)."
      Virtual Pet Freeplay: "Frjáls æfing: Hvað annað getur þú látið gíraffann þinn
        gera? \n\n-   Getur þú bætti við fleiri hlutum fyrir sýndargæludýrið þitt?
        \ \n-   Gæti hún eignast nokkra vini?  "
      'Widget: Text Compression': Leitaðu að mynstrum ( endurteknum orðum eða klausum)
        í textanum. Færðu mynstrin sem þú greinir inn í orðabókina til hægri. Þegar
        þú ritar í orðabókina, er tákn færslunnar sett í textann í stað mynstursins.
      behaviors 1: |-
        Hvað heldurðu að muni gerast! Skoðaðu kóðann.

        -   Veran mun snúast.
        -   Veran mun minnka.
        -   Veran mun hreyfast.
        -   Veran mun breyta um lit.
      behaviors 2: |-
        Fljúgðu flauginni til stjarnanna!

        -   Breyttu hegðun flaugarinnar svo að hún fljúgi upp á við á skjánum.
      behaviors 3: |-
        Láttu geimbílinn fara hraðar en vélmennið!

        -   Breyttu hegðun geimbílsins svo hann fari hraðar en vélmennið.
      behaviors 3a: |-
        Það ætti að nota <xml><block type="sprite_parameter_get" block-text="this sprite"><title name="VAR">this sprite</title></block></xml> kubbinn í staðinn fyrir `allar` kubbinn. Þá mun snúningurinn virka fyrir hvaða veru sem er, óháð búningi hennar.

        **Villuleit:** Láttu allar stjörnunar snúast á sama hátt!
      behaviors 4: Spáðu! Hvað leið mun gervitunglið fara til að komast til sólkerfisins?
      behaviors 5: Búðu til eigin hegðun.
      behaviors 6: |-
        Láttu boltann rúlla.

        -   Búðu til nýja hegðun og notaðu hana til að láta boltann rúlla. Hegðunin ætti að sameina tvær ólikar aðgerðir.
      behaviors 7: |-
        Keyrðu út að ystu sjónarrönd!

        -   Búðu til nýja hegðun og notaðu hana til að láta bílinn færast upp og minnka. Ef þetta er gert rétt lítur virðist bíllinn vera að keyra í burtu út að sjóndeildarhringnum.
      behaviors free play: "**Frjáls æfing:** Búðu til eigin sviðsetningu í geimnum!"
      comment_intro_maze_2018: "_\"Hjálpaðu mér að muna hvernig ég á að rata.\"_  \n\n*
        * *\n\nTil að ljúka þessari þraut þarftu að finna leiðina og nota nýja <xml><block
        type=\"comment\">\n    <title name=\"TEXT\"> </title>\n  </block></xml> kubbinn
        til að skilja eftir minnismiða. Þeir geta hjálpað þér að muna hvað kóðinn
        er að gera og af hverju!   \n\nMinnismiðar eru bara fyrir **þig**, þeir hafa
        ekki áhrif á gang forritsins."
      course1_artist_loops_challenge2: Komum í leik! Teiknaðu eins mörg X og þú getur!
        Nærðu að hafa 3 í röð?
      course1_artist_loops_challenge3: "**Tíst tíst!** \n\n_\"Getur þú hjálpað mér
        að búa til tvö fuglahús?\"_"
      course1_artist_loops_challenge4: |-
        _"Kominn tími til að kasta teningunum!
        Getur þú hjálpað mér að teikna þá?"_
      course1_maze_debugging_challenge1: Lagaðu þennan áfanga. Fjarlægðu óþarfa kubba
        og bættu inn þeim sem vantar. Láttu fuglinn ná grísnum!
      course1_maze_debugging_challenge2: Leiðréttu þetta borð. Þetta eru réttu kubbarnir
        en í rangri röð!
      course1_maze_seq_challenge2: Þú mátt aðeins fara mest fjórum sinnum í hverja
        átt. Getur þú fundið leiðina áður en kubbarnir klárast?
      course1_playlab_events_challenge1: |-
        _"Hvar eru vinir mínir að fela sig? Í þessum leik ef þú smellir á mig þá mun vinur minn Ólafía köttur birtast!"_

        Ef smellt er á Ólafíu mun Robin birtast! Getur þú skrifað kóða til að láta hinar persónurnar birtast líka?

        Ekki gleyma að smella til að fá vísbendingar! Vísbendingar hjálpa þér að vinna verkefnið skref fyrir skref!

        ![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png>)
      course1_playlab_events_challenge2: |-
        _"Sláum upp partíi! Láttu vini mína fá eitthvað að gera þegar þú smellir eða slærð á þá."_

        Hvað munu dýrin segja? Hvað annað mun gerast?

        Ekki gleyma að smella til að fá vísbendingar! Vísbendingar koma með skemmtilegar hugmyndir til að prófa!

        ![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png>)
      course2_artist_nestedLoops_challenge1: "Getur þú fundið leið til að búa til
        svona mynd?\\\r\n\\\r\n\n-   Bæði formin hafa **50 díla hliðar**\\\r\n-   _Átthyrningarnir_
        eru gerðir með **45 gráðu** snúningum.\\\r\n-   _Þríhyrningarnir_ eru gerðir
        með **120 gráðu** snúningum."
      course2_artist_nestedLoops_challenge2: |-
        Getur þú fundið leið til að búa til svona mynd?

        -   Fyrsta innri lykkjan á að búa til átthyrning.
        -   Önnur innri lykkjan á að búa til sexhyrning.
        -   Þriðja innri lykkjan á að búa til ferning.
      course2_artist_prog_challenge1: Teiknaðu klefa fyrir hvert dýr. Þessi þraut
        hefur margar lausnir. Skemmtu þér við að finna eina!
      course2_artist_prog_challenge2: _Hjálpaðu mér að teikna gulu línurnar á þessum
        vegi!_
      course2_bee_conditionals_challenge1: Safnaðu öllum blómasafanum eða búðu til
        allt hunangið. Þú getur aðeins safnað safa í blómum og búið til hunang í býkúpum.
        Athugaðu í hverjum reit hvort þar sé blóm eða býkúpa.
      course2_bee_conditionals_challenge2: Safnaðu öllum blómasafanum og búðu til
        allt hunangið. Þú getur safnað öllum blómasafanum í einu blómi með því að
        nota `meðan blómasafi` lykkju.
      course2_collector_loops_challenge2: |-
        _"Leitum að fjársjóði - með lykkjum!"_

        Hjálpaðu safnaranum með því að fjarlægja villur úr þessum kóða. Náðu öllum fjársjóðunum!
      course2_collector_prog_challenge1: Gáðu vandlega! Getur þú safnað öllum **10**
        fjársjóðunum?
      course2_collector_prog_challenge2: Hér má finna **20** fjársjóði. Safnaðu að
        minnsta kosti helmingnum til að ljúka þessari áskorun!
      course2_harvester_loops_challenge1: Safnaðu öllu korninu.
      course2_harvester_loops_challenge2: |-
        Safnaðu öllu kálinu.
        Forðastu tré og tún!
      course2_maze_programming_challenge1: _"Svínið er í felum! Getur þú hjálpað mér
        að finna leið?"_
      course2_maze_programming_challenge2: Stundum er fleiri en leið til að leysa
        þraut. Stundum er fljótlegra að fara aftur á bak heldur en áfram!
      course3_artist_functions_challenge1: Þegar þú hefur einu sinni skilgreint fall,
        getur þú notað það aftur og aftur - hvar og hvenær sem þú vilt! Prófaðu þennan
        kóða til að sjá hvernig hann virkar og breyttu honum svo til að búa til þína
        eigin flottu hönnun!
      course3_artist_functions_challenge2: |-
        Þú getur notað `hoppa` skipunina til að komast á hvað stað sem er í skjámyndinni! Prófaðu þennan kóða til að sjá hvernig hann virkar. Breyttu honum svo eftir eigin höfði!

        <xml>
        <block type="jump_to_xy">
        <title name="XPOS">???</title>
        <title name="YPOS">???</title>
        </block></xml>
      course3_bee_debugging_challenge1: Taktu eftir hvernig býflugan nær í blómasafann.
        Getur þú notað eins reglu til að hjálpa henni að búa til allt hunangið?
      course3_bee_functions_challenge1: Þú þarft að leysa þessa þraut á eigin spýtur.
        Hún gæti leynt á sér!
      course3_bee_functions_challenge2: Þú þarft að leysa þessa þraut á eigin spýtur!
      course3_bee_functions_challenge3: Búðu til nýtt fall til að vinna allan blómasafann
        og hunangið á meðan það er slóð framundan. Notaðu það til að ljúka þrautinni!
      course3_bee_functions_challenge4: Notaðu allt sem þú hefur lært til að ljúka
        þessari þraut!
      course3_collector_debugging_challenge2: Ertu sérfræðingur í földuðum lykkjum?
        Notaðu það sem þú hefur lært til að safna öllum fjársjóðunum!
      course3_farmer_condLoops_challenge1: "Graskerin sýna hvar þú ættir að snúa.
        _Snúðu til hægri við graskerin._ Haltu annars áfram, en mundu að safna öllu
        káli eða maís á leiðinni. \n\n**Hver falin planta hefur bara 1 af maís eða
        káli.**"
      course3_farmer_condLoops_challenge2: "_\"Þetta er grænt völundarhús!\"_ \n\nSnúðu
        til hægri við grasker, til vinstri við kál. Safnaðu öllu til að ljúka áfanganum."
      course3_farmer_until_challenge2: Notaðu "ef/annars" kubba til að fylgja krókóttum
        stígnum. Notaðu "fjarlægja 1" kubbinn á hverju horni til að fjarlægja haugana.
      course3_maze_debugging_challenge1: _"Fer ég bara í hringi?"_
      course3_maze_debugging_challenge2: _"Ef ég snýst of oft, gæti mig svimað! Hjálpaðu
        mér að ná til svínsins með aðeins fjórum `snúa` skipunum."_
      course3_maze_until_challenge1: Engar vísbendingar - bara áskorun. Komdu uppvakningnum
        til sólblómsins.
      course3_playLab_challenge1: "_Nú eru **íkornarnir** skelfingu lostnir yfir því
        að það er **risaeðla** mætt á svæðið! Getur hugrakki **riddarinn** komið í
        veg fyrir að þeir hlaupi í burtu?_\n\nReglur:\n\n1.  \\*Að snerta íkornana
        skorar stig?\n2.  \\*Að snerta risaeðluna dregur frá mörg stig.\n\nHér er
        öðruvísi leikur sem hefur verið byrjað á fyrir þig! Spilaðu hann til að sjá
        hvernig hann virkar. \n\nEitthvað ætti að gerast þegar þú færð nógu mörg stig
        eða þegar þú klárar stigin. Bættu kóða í föllin `vinna leik` og `tapa leik`
        til að leikurinn virki eins og hann á að gera. \nSmelltu á vísbendingarnar
        til að fá hugmyndir!"
      course4_artist_binary_challenge1: Þú mátt aðeins nota hvert tvíundargildi (0
        eða 1) einu sinni í þrautinni. Prófaðu að nota faldaðar lykkjur til að ljúka
        teikningunni.
      course4_artist_binary_challenge2: "Þessi grind sýnir 256 bita - það þýðir að
        lítil breyting getur leitt til mikilla vandræða. Hefurðu nægt úthald til að
        koma þessu lógói aftur í rétt horf?\\\r\n\\\r\n![](https://images.code.org/74e15f513982b47762dd33ebbc21e5e9-image-1498776314610.png)"
      course4_artist_concept_challenge2: Búðu til fimm hjóllaga mynstur með kóðanum
        fyrir neðan.
      course4_artist_functions_challenge2: |-
        Þú getur notað `hoppa` skipunina til að komast á hvað stað sem er í skjámyndinni! Prófaðu þennan kóða til að sjá hvernig hann virkar. Breyttu honum svo eftir eigin höfði!

        <xml>
        <block type="jump_to_xy">
        <title name="XPOS">???</title>
        <title name="YPOS">???</title>
        </block></xml>
      course4_artist_fwp_challenge1: Prófaðu að keyra þetta forrit. Gerðu breytingar
        til að sjá hvaða áhrif þær hafa. Getur þú fundið út hvernig það virkar? (Eða
        eytt því og sett eitthvað allt annað í staðinn)
      course4_artist_variables_challenge1: Getur þú búið til `lengd` breytu og notað
        hana til að skapa þetta athyglisverða mynstur?
      course4_bee_for_challenge1: Notaðu þessa `frá` lykkju til að safna öllum blómasafanum.
        Það eru nokkrar aðgerðir sem þú ættir að endurtaka `teljari` sinnum.
      course4_bee_fwp_challenge1: Notaðu eina `frá` lykkju í falli til að safna öllum
        maísnum. Sama `frá` lykkjan getur talið upp í mismunandi hámarkstölu með því
        að nota stikann `lengd`.
      course4_bee_fwp_challenge2: |-
        Sjáum til hvort þú ræður við þetta síðasta próf! Gerðu eins vel og þú getur!

        Notaðu eina `frá` lykkju í falli til að safna öllu grænmetinu í röðinni. Láttu `frá` lykkjuna telja upp í mismunandi hámarkstölur með því að nota `lengd` breytu. Hafðu forritið eins stutt og mögulegt er með því að nota aðra `frá` lykkju utan við fallið.

        Gangi þér vel!
      course4_collector_nested_loops_challenge2: "_\"Við skulum leita að fjársjóði
        - með lykkjum!\"_ \n\nHjálpaðu safnaranum að ná minnst tveimur hrúgum af fjársjóði
        með kubbum í verkfærakassanum. Það er mögulegt að ná öllum 4."
      course4_harvester_nested_loops_challenge1: _"Ég þarf aðstoð á býlinu! Hjálpaðu
        mér að uppskera þennan maís en aðeins með kubbunum í verkfærakassanum."_
      course4_playlab_variables_challenge1: Notaðu þessa kubba til að láta leikmennina
        segja bank-bank brandara. Breyttu uppstillingunni og textanum og segðu eigin
        brandara!
      courseA_artist_loops10: |-
        ## Tími til að snúa aftur að landi. Hjálpaðu mér að leggja niður steina svo ég detti ekki út í!

        ![expandable]
        (<https://images.code.org/d3213d375d0271e114aa4313cdeb34be-image-1498064942606.gif>)
      courseA_artist_loops10_2018: |-
        ## Tími til að snúa aftur að landi. Hjálpaðu mér að leggja niður steina svo ég detti ekki út í!

        ![expandable]
        (<https://images.code.org/d3213d375d0271e114aa4313cdeb34be-image-1498064942606.gif>)
      courseA_artist_loops10_2019: |-
        ## Tími til að snúa aftur að landi. Hjálpaðu mér að leggja niður steina svo ég detti ekki út í!

        ![expandable]
        (<https://images.code.org/d3213d375d0271e114aa4313cdeb34be-image-1498064942606.gif>)
      courseA_artist_loops11: |-
        ## Hjálpaðu mér að byggja tröppur til að horfa á skipið sigla burt.

        ![expandable]
        (<https://images.code.org/ed19f00a2350b186fbe86ea805e17925-image-1498065450651.gif>)
      courseA_artist_loops11_2018: |-
        ## Hjálpaðu mér að byggja tröppur til að horfa á skipið sigla burt.

        ![expandable]
        (<https://images.code.org/ed19f00a2350b186fbe86ea805e17925-image-1498065450651.gif>)
      courseA_artist_loops11_2019: |-
        ## Hjálpaðu mér að byggja tröppur til að horfa á skipið sigla burt.

        ![expandable]
        (<https://images.code.org/ed19f00a2350b186fbe86ea805e17925-image-1498065450651.gif>)
      courseA_artist_loops12: |-
        Listamaðurinn sá eitthvað sniðugt langt í burtu.  Teiknaðu það sem þú heldur að hann hafi séð.

        * * *

        ### Hugmyndir

        ![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)
        ![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)
        ![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)
        ![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)
      courseA_artist_loops12_2018: |-
        Listamaðurinn sá eitthvað sniðugt langt í burtu.  Teiknaðu það sem þú heldur að hann hafi séð.

        * * *

        ### Hugmyndir

        ![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)
        ![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)
        ![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)
        ![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)
      courseA_artist_loops12_2019: |-
        Listamaðurinn sá eitthvað sniðugt langt í burtu.  Teiknaðu það sem þú heldur að hann hafi séð.

        * * *

        ### Hugmyndir

        ![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)
        ![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)
        ![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)
        ![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)
      courseA_artist_loops2: |-
        Hjálpaðu listamanninum að teikna þessa línu tvisvar fram á við.

        ![](https://images.code.org/04501f26a36673460f5c8fe04e3e7686-image-1498002095108.gif)
      courseA_artist_loops2_2018: |-
        Hjálpaðu listamanninum að teikna þessa línu tvisvar fram á við.

        ![](https://images.code.org/04501f26a36673460f5c8fe04e3e7686-image-1498002095108.gif)
      courseA_artist_loops2_2019: |-
        Hjálpaðu listamanninum að teikna þessa línu tvisvar fram á við.

        ![](https://images.code.org/04501f26a36673460f5c8fe04e3e7686-image-1498002095108.gif)
      courseA_artist_loops3: |-
        Listamaðurinn er að reyna að teikna strik fimm sinnum en tekst það ekki. Getur þú hjálpað?

        ![expandable](https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif)
      courseA_artist_loops3_2018: |-
        Listamaðurinn er að reyna að teikna strik fimm sinnum en tekst það ekki. Getur þú hjálpað?

        ![expandable](https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif)
      courseA_artist_loops3_2019: |-
        Listamaðurinn er að reyna að teikna strik fimm sinnum en tekst það ekki. Getur þú hjálpað?

        ![expandable](https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif)
      courseA_artist_loops4: |-
        Notaðu nú a <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="2-6">5</title></block></xml> lykkju til að teikna þetta strik fimm sinnum!

        ![](https://images.code.org/b2bc7f52ffdac2ad0d8e7c2d798c24df-image-1501875818062.gif)
      courseA_artist_loops4_2018: |-
        Notaðu nú a <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="2-6">5</title></block></xml> lykkju til að teikna þetta strik fimm sinnum!

        ![](https://images.code.org/b2bc7f52ffdac2ad0d8e7c2d798c24df-image-1501875818062.gif)
      courseA_artist_loops4_2019: |-
        Notaðu nú a <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="2-6">5</title></block></xml> lykkju til að teikna þetta strik fimm sinnum!

        ![](https://images.code.org/b2bc7f52ffdac2ad0d8e7c2d798c24df-image-1501875818062.gif)
      courseA_artist_loops5: |-
        ## Teiknaðu línu sem er sjö skref á lengd. Hún verður sjóndeildarhringurinn okkar.

        ![expandable]
        (<https://images.code.org/dc7c4317177f2b94421c5aa589c31ac7-image-1498002771889.gif>)
      courseA_artist_loops5_2018: |-
        ## Teiknaðu línu sem er sjö skref á lengd. Hún verður sjóndeildarhringurinn okkar.

        ![expandable]
        (<https://images.code.org/dc7c4317177f2b94421c5aa589c31ac7-image-1498002771889.gif>)
      courseA_artist_loops5_2019: |-
        ## Teiknaðu línu sem er sjö skref á lengd. Hún verður sjóndeildarhringurinn okkar.

        ![expandable]
        (<https://images.code.org/dc7c4317177f2b94421c5aa589c31ac7-image-1498002771889.gif>)
      courseA_artist_loops6: |-
        ## Setjum myndarlega hæð aftantil.

        ![expandable]
        (<https://images.code.org/f64d93b6d9a7d9c3edfce3c227c0dd49-image-1498062074031.gif>)
      courseA_artist_loops6_2018: |-
        ## Setjum myndarlega hæð aftantil.

        ![expandable]
        (<https://images.code.org/f64d93b6d9a7d9c3edfce3c227c0dd49-image-1498062074031.gif>)
      courseA_artist_loops6_2019: |-
        ## Setjum myndarlega hæð aftantil.

        ![expandable]
        (<https://images.code.org/f64d93b6d9a7d9c3edfce3c227c0dd49-image-1498062074031.gif>)
      courseA_artist_loops7: |-
        ## Notaðu <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml> lykkjuna til að bæta bárum á vatnið.

        ![expandable]
        (<https://images.code.org/01c5f6772a8b608a2fca5f6de7e25c67-image-1498062629139.gif>)
      courseA_artist_loops7_2018: |-
        ## Notaðu <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml> lykkjuna til að bæta bárum á vatnið.

        ![expandable]
        (<https://images.code.org/01c5f6772a8b608a2fca5f6de7e25c67-image-1498062629139.gif>)
      courseA_artist_loops7_2019: |-
        ## Notaðu <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml> lykkjuna til að bæta bárum á vatnið.

        ![expandable]
        (<https://images.code.org/01c5f6772a8b608a2fca5f6de7e25c67-image-1498062629139.gif>)
      courseA_artist_loops8: |-
        ## Við þurfum stiga upp í bátinn.

        ![expandable]
        (<https://images.code.org/ee90228fae25ecca1fba589b721f9120-image-1498063066878.gif>)
      courseA_artist_loops8_2018: |-
        ## Við þurfum stiga upp í bátinn.

        ![expandable]
        (<https://images.code.org/ee90228fae25ecca1fba589b721f9120-image-1498063066878.gif>)
      courseA_artist_loops8_2019: |-
        ## Við þurfum stiga upp í bátinn.

        ![expandable]
        (<https://images.code.org/ee90228fae25ecca1fba589b721f9120-image-1498063066878.gif>)
      courseA_artist_loops9: |-
        ## **Áskorun:** Tröppurnar niður á bryggjuna eru skemmdar.  Hjálpaðu mér að laga þær.

        ![expandable](https://images.code.org/9d36df1afb6a738ba7bcff8734403ff3-image-1498063282074.gif)
      courseA_artist_loops9_2018: |-
        ## **Áskorun:** Tröppurnar niður á bryggjuna eru skemmdar.  Hjálpaðu mér að laga þær.

        ![expandable](https://images.code.org/9d36df1afb6a738ba7bcff8734403ff3-image-1498063282074.gif)
      courseA_artist_loops9_2019: |-
        ## **Áskorun:** Tröppurnar niður á bryggjuna eru skemmdar.  Hjálpaðu mér að laga þær.

        ![expandable](https://images.code.org/9d36df1afb6a738ba7bcff8734403ff3-image-1498063282074.gif)
      courseA_artist_loops_challenge1: |-
        Þú getur notað lykkju til að teikna mörg strik í röð.

        Geturðu teiknað hús? Hafðu það eins og þú vilt!  Reyndu að finna mynstur sem endurtaka sig!

        Hér eru nokkrar hugmyndir:

        ![](https://images.code.org/6e59e881e0aa1d31186e81a203655a0b-image-1501785654664.png)
      courseA_artist_loops_challenge1_2018: |-
        Þú getur notað lykkju til að teikna mörg strik í röð.

        Geturðu teiknað hús? Hafðu það eins og þú vilt!  Reyndu að finna mynstur sem endurtaka sig!

        Hér eru nokkrar hugmyndir:

        ![](https://images.code.org/6e59e881e0aa1d31186e81a203655a0b-image-1501785654664.png)
      courseA_artist_loops_challenge1_2019: |-
        Þú getur notað lykkju til að teikna mörg strik í röð.

        Geturðu teiknað hús? Hafðu það eins og þú vilt!  Reyndu að finna mynstur sem endurtaka sig!

        Hér eru nokkrar hugmyndir:

        ![](https://images.code.org/6e59e881e0aa1d31186e81a203655a0b-image-1501785654664.png)
      courseA_artist_loops_challenge2a: |-
        _"Hjálpaðu mér að koma tjaldstæðinu í lag!"_

        Notaðu kubbana í verkfærakassanum til að teikna þessi þrjú tjöld.
      courseA_artist_loops_challenge2a_2018: |-
        _"Hjálpaðu mér að koma tjaldstæðinu í lag!"_

        Notaðu kubbana í verkfærakassanum til að teikna þessi þrjú tjöld.
      courseA_artist_loops_challenge2a_2019: |-
        _"Hjálpaðu mér að koma tjaldstæðinu í lag!"_

        Notaðu kubbana í verkfærakassanum til að teikna þessi þrjú tjöld.
      courseA_collector_loops1: |-
        **Frjáls æfing:** Þetta er ævintýramærin Laurel! Láttu hana hreyfast og safna eins miklum fjársjóði og þú getur.

        Dragðu kubba út á vinnusvæðið og reyndu að sjá hvernig er hægt að ná fjársjóði. Náðu minnst einum til að klára þetta borð.
      courseA_collector_loops12: "_\"Eureka! Náðu eins miklum fjársjóði og þú getur!\"_
        \n(Þú þarft ekki að ná honum öllum.)"
      courseA_collector_loops12_2018: "_\"Eureka! Náðu eins miklum fjársjóði og þú
        getur!\"_ \n(Þú þarft ekki að ná honum öllum.)"
      courseA_collector_loops12_2019: "_\"Eureka! Náðu eins miklum fjársjóði og þú
        getur!\"_ \n(Þú þarft ekki að ná honum öllum.)"
      courseA_collector_loops1_2018: |-
        **Frjáls æfing:** Þetta er ævintýramærin Laurel! Láttu hana hreyfast og safna eins miklum fjársjóði og þú getur.

        Dragðu kubba út á vinnusvæðið og reyndu að sjá hvernig er hægt að ná fjársjóði. Náðu minnst einum til að klára þetta borð.
      courseA_collector_loops1_2019: |-
        **Frjáls æfing:** Þetta er ævintýramærin Laurel! Láttu hana hreyfast og safna eins miklum fjársjóði og þú getur.

        Dragðu kubba út á vinnusvæðið og reyndu að sjá hvernig er hægt að ná fjársjóði. Náðu minnst einum til að klára þetta borð.
      courseA_collector_loops2: "Náðu öllum þremur hrúgunum! Færðu Laurel að hverjum
        fjársjóð og notaðu svo þennan kubb: \n<xml><block type=\"collector_collect\"/></xml>"
      courseA_collector_loops2_2018: "Náðu öllum þremur hrúgunum! Færðu Laurel að
        hverjum fjársjóð og notaðu svo þennan kubb: \n<xml><block type=\"collector_collect\"/></xml>"
      courseA_collector_loops2_2019: 'Náðu öllum þremur steinunum! Færðu Laurel að
        hverjum steini og notaðu svo þennan kubb <xml><block type="collector_collect"
        block-text="get treasure"/></xml>. '
      courseA_collector_loops3: Hvernig getur Laurel náð öllum fimm fjársjóðshrúgunum
        með því að nota bara einn <xml><block type="maze_moveEast"/></xml> kubb?
      courseA_collector_loops3_2018: Hvernig getur Laurel náð öllum fimm fjársjóðshrúgunum
        með því að nota bara einn <xml><block type="maze_moveEast"/></xml> kubb?
      courseA_collector_loops3_2019: Hvernig getur Laurel náð öllum fimm fjársjóðshrúgunum
        með því að nota bara einn <xml><block type="maze_moveEast"/></xml> kubb?
      courseA_collector_loops_challenge1: _"Getur þú hjálpað mér að koma auga á villur?
        Ég veit í hvaða átt ég vil fara, en ekki hvað ég þarf að taka mörg skref."_
      courseA_collector_loops_challenge1_2018: _"Getur þú hjálpað mér að koma auga
        á villur? Ég veit í hvaða átt ég vil fara, en ekki hvað ég þarf að taka mörg
        skref."_
      courseA_collector_loops_challenge1_2019: _"Getur þú hjálpað mér að koma auga
        á villur? Ég veit í hvaða átt ég vil fara, en ekki hvað ég þarf að taka mörg
        skref."_
      courseA_collector_preLoops1: |-
        Þetta er Lára ævintýramær!

        Ýttu á "Keyra" til að sjá hana ganga að fjársjóðnum og grípa hann.
      courseA_collector_preLoops2: "Fínt! Nú getur þú bætt við kóða! \n\nBættu við
        kubbnum ![](https://images.code.org/563c0deb5c51d43cdfa72d62dec3419d-image-1508904559201.05.30.png)
        neðst í forritinu og smelltu á \"Keyra\"!"
      courseA_collector_preLoops3: Náðu fjársjóðnum með því að smella tveimur ![](https://images.code.org/54c206b62a02f1d7ea8f1bee52664ecb-image-1508905670742.25.37.png)
        kubbum og einum ![](https://images.code.org/563c0deb5c51d43cdfa72d62dec3419d-image-1508904559201.05.30.png)
        kubbi neðst í forritið og smella á "Keyra"!
      courseA_collector_preLoops7: "Náðu öllum þremur hrúgunum! Færðu Laurel að hverjum
        fjársjóð og notaðu svo þennan kubb: \n<xml><block type=\"collector_collect\"/></xml>"
      courseA_harvester_loops1: Hjálpaðu hirðinum að tína allan maísinn!
      courseA_harvester_loops10: Hjálpaðu hirðinum að tína alla fimm maískólfana!
      courseA_harvester_loops10_2019: Hjálpaðu hirðinum að tína alla fimm maískólfana!
      courseA_harvester_loops11: 'Prófaðu eitt enn á eigin spýtur! '
      courseA_harvester_loops11_2019: 'Prófaðu eitt enn á eigin spýtur! '
      courseA_harvester_loops1_2019: Hjálpaðu hirðinum að tína allan maísinn!
      courseA_harvester_loops2: Hirðirinn þarf að tína allan maísinn! Kemurðu auga
        á mynstur?
      courseA_harvester_loops2_2019: Hirðirinn þarf að tína allan maísinn! Kemurðu
        auga á mynstur?
      courseA_harvester_loops3: Getur þú tínt allan maísinn með aðeins **einum** `færa`
        kubbi?
      courseA_harvester_loops3_2019: Getur þú tínt allan maísinn með aðeins **einum**
        `færa` kubbi?
      courseA_harvester_loops4: |-
        _"Ég þarf hjálp því það er eitthvað að!"_

        Getur þú hjálpað hirðinum að finna villuna í kóðanum?
      courseA_harvester_loops4_2019: |-
        _"Ég þarf hjálp því það er eitthvað að!"_

        Getur þú hjálpað hirðinum að finna villuna í kóðanum?
      courseA_harvester_loops5: Prófaðu þetta! Geturðu líka náð maísnum á endanum?
      courseA_harvester_loops5_2019: Prófaðu þetta! Geturðu líka náð maísnum á endanum?
      courseA_harvester_loops5a: Sjáðu allan þennan maís! Geturðu náð honum öllum
        hjálparlaust?
      courseA_harvester_loops5a_2019: Sjáðu allan þennan maís! Geturðu náð honum öllum
        hjálparlaust?
      courseA_harvester_loops5b: Getur þú breytt kóðanum svo að hirðirinn tíni allan
        maísinn?
      courseA_harvester_loops5b_2019: Getur þú breytt kóðanum svo að hirðirinn tíni
        allan maísinn?
      courseA_harvester_loops6: Þú þarft **einn** <xml><block type="maze_moveWest"></block></xml>
        block and **one** <xml><block type="maze_moveNorth"></block></xml> kubb til
        að klára þessa þraut!
      courseA_harvester_loops6_2019: Þú þarft **einn** <xml><block type="maze_moveWest"></block></xml>
        block and **one** <xml><block type="maze_moveNorth"></block></xml> kubb til
        að klára þessa þraut!
      courseA_harvester_loops7: 'Prófaðu þetta á eigin spýtur! '
      courseA_harvester_loops7_2019: 'Prófaðu þetta á eigin spýtur! '
      courseA_harvester_loops9: Getur þú fundið leið til að ná _öllum_ þessum maís?
      courseA_harvester_loops9_2019: Getur þú fundið leið til að ná _öllum_ þessum
        maís?
      courseA_harvester_seq1: Hjálpaðu hirðinum að tína maísinn!
      courseA_harvester_seq10: Hirðirinn þarf að tína allan maísinn! Kemurðu auga
        á mynstur?
      courseA_harvester_seq10_2019: Hirðirinn þarf að tína allan maísinn! Kemurðu
        auga á mynstur?
      courseA_harvester_seq11: Prófaðu þetta! Náðu öllum maísnum.
      courseA_harvester_seq11_2019: Prófaðu þetta! Náðu öllum maísnum.
      courseA_harvester_seq12: "_Takk fyrir að hjálpa mér!_ \n\nTíndu allan maísinn."
      courseA_harvester_seq12_2019: "_Takk fyrir að hjálpa mér!_ \n\nTíndu allan maísinn."
      courseA_harvester_seq13: Hjálpaðu hirðinum að tína maís!
      courseA_harvester_seq13_2019: Hjálpaðu hirðinum að tína maís!
      courseA_harvester_seq1_2019: Hjálpaðu hirðinum að tína maísinn!
      courseA_harvester_seq2: 'Notaðu <xml><block type="maze_moveWest"/></xml> **þrisvar**
        sinnum til að færa hirðinn að maísnum! '
      courseA_harvester_seq2_2019: 'Notaðu <xml><block type="maze_moveWest"/></xml>
        **þrisvar** sinnum til að færa hirðinn að maísnum! '
      courseA_harvester_seq3: Notaðu <xml><block type="maze_moveNorth"/></xml> **þrisvar**
        sinnum til að færa hirðinn að maísnum! Ekki gleyma að tína maísinn í lokin.
      courseA_harvester_seq3_2019: Notaðu <xml><block type="maze_moveNorth"/></xml>
        **þrisvar** sinnum til að færa hirðinn að maísnum! Ekki gleyma að tína maísinn
        í lokin.
      courseA_harvester_seq4: Bættu við _einum_ kubbi svo að hirðirinn tíni maísinn.
      courseA_harvester_seq4_2019: Bættu við _einum_ kubbi svo að hirðirinn tíni maísinn.
      courseA_harvester_seq5: Sérðu hvað er að þessum kóða? Hjálpaðu hirðinumi að
        hirða uppskeruna!
      courseA_harvester_seq5_2019: Sérðu hvað er að þessum kóða? Hjálpaðu hirðinumi
        að hirða uppskeruna!
      courseA_harvester_seq6: Prófaðu þetta!
      courseA_harvester_seq6_2019: Prófaðu þetta!
      courseA_harvester_seq7: Þú þarft að hreyfast í tvær áttir til að komast að maísnum!
        Hjálpaðu hirðinum að velja réttar áttir.
      courseA_harvester_seq7_2019: Þú þarft að hreyfast í tvær áttir til að komast
        að maísnum! Hjálpaðu hirðinum að velja réttar áttir.
      courseA_harvester_seq8: Nú þarf hirðirinn að tína maís tvisvar!
      courseA_harvester_seq8_2019: Nú þarf hirðirinn að tína maís tvisvar!
      courseA_harvester_seq9: Bættu við tveimur kubbum til að ljúka þrautinni!
      courseA_harvester_seq9_2019: Bættu við tveimur kubbum til að ljúka þrautinni!
      courseA_maze_ramp2_2018: Festu báða <xml><block type="maze_moveEast"/></xml>
        kubbana við <xml><block type="when_run"/></xml> til að ljúka við kóðann og
        smelltu svo á "▶ Keyra".
      courseA_maze_ramp2_2019: Festu báða <xml><block type="maze_moveEast"/></xml>
        kubbana við <xml><block type="when_run"/></xml> til að ljúka við kóðann og
        smelltu svo á "▶ Keyra".
      courseA_maze_ramp3a_2018: Náðu í <xml><block type="maze_moveNorth"/></xml> úr
        verkfærakassanum og bættu honum neðan við hina kubbana til að ljúka við kóðann
        og smelltu svo á "▶ Keyra".
      courseA_maze_ramp3a_2019: Náðu í <xml><block type="maze_moveNorth"/></xml> úr
        verkfærakassanum og bættu honum neðan við hina kubbana til að ljúka við kóðann
        og smelltu svo á "▶ Keyra".
      courseA_maze_ramp3b_2018: "Það er einn kubbur sem ekki á að vera síðast í þessum
        kóða!  \n\nDragðu hann aftur í verkfærakassann til að fjarlægja hann."
      courseA_maze_ramp3b_2019: "Það er einn kubbur sem ekki á að vera síðast í þessum
        kóða!  \n\nDragðu hann aftur í verkfærakassann til að fjarlægja hann."
      courseA_maze_ramp4a_2018: Sérðu hvaða kubb þarf að setja neðan við hina kubbana
        til að ljúka við þennan kóða?
      courseA_maze_ramp4a_2019: Sérðu hvaða kubb þarf að setja neðan við hina kubbana
        til að ljúka við þennan kóða?
      courseA_maze_ramp5a_2018: Prófaðu þetta án hjálpar!
      courseA_maze_ramp5a_2019: Prófaðu þetta án hjálpar!
      courseA_maze_seq1: _"Leiktu þér með þessa kubba og komdu mér til vonda svínsins!"_
      courseA_maze_seq10: |-
        **Áskorun:** Farðu í kringum TNT sprengiefnið til að koma fuglinum til svínsins!

        ![expandable](https://images.code.org/a656e421bc90e530a7e1ce636e507752-image-1497996976195.gif)
      courseA_maze_seq10_2018: "**Áskorun:** Gættu þín á TNT sprengjum en komdu fuglinum
        til svínsins!"
      courseA_maze_seq10_2019: "**Áskorun:** Gættu þín á TNT sprengjum en komdu fuglinum
        til svínsins!"
      courseA_maze_seq10_copy: |-
        **Áskorun:** Farðu í kringum TNT sprengiefnið til að koma fuglinum til svínsins!

        ![expandable](https://images.code.org/a656e421bc90e530a7e1ce636e507752-image-1497996976195.gif)
      courseA_maze_seq11: |-
        Hér er styttri þraut!  Farðu í eina átt, svo aðra til að koma fuglinum til svínsins.

        ![expandable](https://images.code.org/bb4571384fc56702704a0c9395ee3695-image-1497996380902.gif)
      courseA_maze_seq11_2018: "Hér er styttri þraut!  Farðu í eina átt, svo aðra
        til að koma fuglinum til svínsins.\\\r\n\\\r\n![](https://images.code.org/bb4571384fc56702704a0c9395ee3695-image-1497996380902.gif)"
      courseA_maze_seq11_2019: "Hér er styttri þraut!  Farðu í eina átt, svo aðra
        til að koma fuglinum til svínsins.\\\r\n\\\r\n![](https://images.code.org/bb4571384fc56702704a0c9395ee3695-image-1497996380902.gif)"
      courseA_maze_seq12: |-
        Náðu þessu svíni!

        ![expandable](https://images.code.org/c6ae5024441e2305db82d06679e5a281-image-1497997160569.gif)
      courseA_maze_seq12_2018: Náðu þessu svíni!
      courseA_maze_seq12_2019: Náðu þessu svíni!
      courseA_maze_seq13_2019: Náðu þessu svíni einhvern veginn!
      courseA_maze_seq1_2018: _"Leiktu þér með þessa kubba og komdu mér til vonda
        svínsins!"_
      courseA_maze_seq1_2019: _"Leiktu þér með þessa kubba og komdu mér til vonda
        svínsins!"_
      courseA_maze_seq2: |-
        _"Villa! Lagaðu kóðann svo ég nái svíninu."_

        ![expandable](https://images.code.org/4af4959874b3ca1fdd3008dc4f77add4-image-1497994904322.gif)
      courseA_maze_seq3: |-
        _"Lagaðu kóðann svo ég komist til svínka!"_

        ![expandable](https://images.code.org/4adca88dc6df7378846a91d0fb0e59d1-image-1497995239069.gif)
      courseA_maze_seq4: "_\"Það er maðkur í mysunni.\"_ \n\nFJARLÆGÐU kubb til að
        koma fuglinum til svínsins!\n\n![expandable](https://images.code.org/6af44fb0ba5ac5dd5502e2538f51fb9c-image-1497996162453.gif)"
      courseA_maze_seq5: |-
        Spreyttu þig á þessu alveg frá byrjun.

        ![expandable](https://images.code.org/e4ef591b4580db478330c298d1af756f-image-1497997080163.gif)
      courseA_maze_seq5_2018: Reyndu þig við þessa þraut.
      courseA_maze_seq5_2019: Reyndu þig við þessa þraut.
      courseA_maze_seq5_copy: |-
        Spreyttu þig á þessu alveg frá byrjun.

        ![expandable](https://images.code.org/e4ef591b4580db478330c298d1af756f-image-1497997080163.gif)
      courseA_maze_seq5a_2018: |-
        _"Ég er hér svínka!"_

        Hverju getur þú bætt við endann á þessum kóða til að koma fuglinum til svínsins?
      courseA_maze_seq5a_2019: |-
        _"Ég er hér svínka!"_

        Hverju getur þú bætt við endann á þessum kóða til að koma fuglinum til svínsins?
      courseA_maze_seq6: |-
        Farðu í eina átt, svo aðra til að koma fuglinum til svínsins!

        ![expandable](https://images.code.org/8f71c406afa60c6898937d950c670205-image-1497996506419.gif)
      courseA_maze_seq6_2018: Farðu í eina átt, svo í aðra, til að koma fuglinum að
        svíninu!
      courseA_maze_seq6_2019: Farðu í eina átt, svo í aðra, til að koma fuglinum að
        svíninu!
      courseA_maze_seq6_copy: |-
        Farðu í eina átt, svo aðra til að koma fuglinum til svínsins!

        ![expandable](https://images.code.org/8f71c406afa60c6898937d950c670205-image-1497996506419.gif)
      courseA_maze_seq7: |-
        Finndu út hvað er að og bættu svo við kubbum til að koma fuglinum til svínsins!

        ![expandable](https://images.code.org/35bdb628dabd4259b581286b071c02f3-image-1497996651260.gif)
      courseA_maze_seq7_copy: |-
        Finndu út hvað er að og bættu svo við kubbum til að koma fuglinum til svínsins!

        ![expandable](https://images.code.org/35bdb628dabd4259b581286b071c02f3-image-1497996651260.gif)
      courseA_maze_seq8: |-
        Leystu þessa þraut og komdu fuglinum til svínsins!

        ![expandable](https://images.code.org/fb4735244f74a4e001d1fa7b5c6028f9-image-1497998330218.gif)
      courseA_maze_seq8_2018: Leystu þetta borð og komdu fuglinum til svínsins!
      courseA_maze_seq8_2019: Leystu þetta borð og komdu fuglinum til svínsins!
      courseA_maze_seq8_copy: |-
        Leystu þessa þraut og komdu fuglinum til svínsins!

        ![expandable](https://images.code.org/fb4735244f74a4e001d1fa7b5c6028f9-image-1497998330218.gif)
      courseA_maze_seq9: |-
        **Áskorun:** Lagaðu þennan áfanga með því að bæta við kubbum svo fuglinn nái svíninu!

        ![expandable](https://images.code.org/3f35068dd3cf51c420a536fa078f854d-image-1497996843105.gif)
      courseA_maze_seq_challenge1: Lagaðu þennan áfanga. Fjarlægðu óþarfa kubba og
        bættu inn þeim sem vantar. Láttu fuglinn ná grísnum!
      courseA_maze_seq_challenge1_2018: Lagaðu þennan áfanga. Fjarlægðu óþarfa kubba
        og bættu inn þeim sem vantar. Láttu fuglinn ná grísnum!
      courseA_maze_seq_challenge1_2019: Lagaðu þennan áfanga. Fjarlægðu óþarfa kubba
        og bættu inn þeim sem vantar. Láttu fuglinn ná grísnum!
      courseA_maze_seq_challenge2_2019: Fylgdu slóðinni og leiddu mig að svínka. Forðastu
        TNT sprengjuna annars verður fjaðrafok!
      courseA_playLab_events1_2019: This is a Play Lab level. Move blocks to the workspace
        and see what happens!
      courseA_playLab_events2_2019: Jorge the Dog wants to say "Hi there." Can you
        help him?
      courseA_playLab_events3: |-
        Hjálpaðu hundinum Jorge að hreyfast með því að tengja <xml><block type="studio_move">

        <title name="SPRITE">1</title>
        <title name="DIR">8</title>
        </block></xml> block to the <xml><block type="studio_whenArrow">
        <title name="VALUE">left</title>
        </block></xml>
        atvikskubbinn sem er nú þegar á vinnusvæðinu.

        Komdu Jorge til flaggsins til að ljúka þessum áfanga!
      courseA_playLab_events3_2018: |-
        Hjálpaðu hundinum Jorge að hreyfast með því að tengja <xml><block type="studio_move">

        <title name="SPRITE">1</title>
        <title name="DIR">8</title>
        </block></xml> block to the <xml><block type="studio_whenArrow">
        <title name="VALUE">left</title>
        </block></xml>
        atvikskubbinn sem er nú þegar á vinnusvæðinu.

        Komdu Jorge til flaggsins til að ljúka þessum áfanga!
      courseA_playLab_events3_2019: |-
        Hjálpaðu hundinum Jorge að hreyfast með því að tengja <xml><block type="studio_move">

        <title name="SPRITE">1</title>
        <title name="DIR">8</title>
        </block></xml> block to the <xml><block type="studio_whenArrow">
        <title name="VALUE">left</title>
        </block></xml>
        atburðarkubbinn sem er nú þegar á vinnusvæðinu.

        Komdu Jorge til flaggsins til að ljúka þessum áfanga!
      courseA_playLab_events4: Bættu nú við fleiri kubbum til að láta Jorge hreyfast
        til hægri þegar smellt er á hægri örina.
      courseA_playLab_events4_2018: Bættu nú öðrum atvikskubbi til að láta Jorge hreyfast
        til hægri þegar smellt er á hægri örina.
      courseA_playLab_events4_2019: Now, add another event block to get Jorge to move
        right when the right arrow button is clicked. Use the arrow keys or press
        the arrow buttons to move Jorge to both flags and finish the level!
      courseA_playLab_events5: Bættu við atburðum til að láta Jorge hreyfast upp og
        niður þegar ýtt er á `upp` og `niður` hnappana.
      courseA_playLab_events5_2018: Bættu við atburðum til að láta Jorge hreyfast
        upp og niður þegar ýtt er á `upp` og `niður` hnappana.
      courseA_playLab_events5_2019: Add events to have Jorge move up and down when
        the \`up\` and \`down\` buttons are pressed. Make Jorge get the flags to finish
        the level!
      courseA_playLab_events6_2019: Make this more interesting by changing the background
        and playing a random sound when Jorge is clicked. When your code is ready,
        click on Jorge to try it out!
      courseA_playLab_events7_2018: _Frjáls æfing:_ Bættu við leikinn eftir þínu höfði.
        Geturðu látið risaeðluna hverfa þegar Jorge rekst á hana?
      courseA_playLab_events7_2019: _Frjáls æfing:_ Bættu við leikinn eftir þínu höfði.
        Geturðu látið risaeðluna hverfa þegar Jorge rekst á hana?
      courseA_playlab_events_challenge1: |-
        Ef smellt er á Olive á Robin að birtast! Getur þú skrifað kóða til að sýna hina vini mína líka?

        Í þessari þraut skaltu gæta þess að smella til að fá vísbendingar! Vísbendingarnar geta leitt þig gegnum verkefnið skref fyrir skref!

        ![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png>)
      courseA_playlab_events_challenge1_2018: |-
        Ef smellt er á Olive á Robin að birtast! Getur þú skrifað kóða til að sýna hina vini mína líka?

        Í þessari þraut skaltu gæta þess að smella til að fá vísbendingar! Vísbendingarnar geta leitt þig gegnum verkefnið skref fyrir skref!

        ![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png>)
      courseA_playlab_events_challenge1_2019: |-
        Ef smellt er á Olive á Robin að birtast! Getur þú skrifað kóða til að sýna hina vini mína líka?

        Í þessari þraut skaltu gæta þess að smella til að fá vísbendingar! Vísbendingarnar geta leitt þig gegnum verkefnið skref fyrir skref!

        ![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png>)
      courseA_playlab_events_challenge2: |-
        Láttu hvern leikmann gera eitthvað þegar það er smellt eða slegið á hann. Hvað segja dýrin? Hvað annað mun gerast?

        Gættu þess að smella á vísbendingar í þessari þraut! Vísbendingarnar stinga upp á ýmsu skemmtilegu til að prófa!

        ![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png>)
      courseA_playlab_events_challenge2_2018: |-
        Láttu hvern leikmann gera eitthvað þegar það er smellt eða slegið á hann. Hvað segja dýrin? Hvað annað mun gerast?

        Gættu þess að smella á vísbendingar í þessari þraut! Vísbendingarnar stinga upp á ýmsu skemmtilegu til að prófa!

        ![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png>)
      courseA_playlab_events_challenge2_2019: |-
        Láttu hvern leikmann gera eitthvað þegar það er smellt eða slegið á hann. Hvað segja dýrin? Hvað annað mun gerast?

        Gættu þess að smella á vísbendingar í þessari þraut! Vísbendingarnar stinga upp á ýmsu skemmtilegu til að prófa!

        ![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png>)
      courseB_Scrat_ramp1_2018: Komdu Scrat til akarnsins með því að festa <xml><block
        type="maze_moveEast"/></xml> kubb neðan á <xml><block type="when_run"/></xml>
        kubbinn, og ýttu svo á "▶ Keyra"!
      courseB_Scrat_ramp1_2019: Komdu Scrat til akarnsins með því að festa <xml><block
        type="maze_moveEast"/></xml> kubb neðan á <xml><block type="when_run"/></xml>
        kubbinn, og ýttu svo á "▶ Keyra"!
      courseB_Scrat_ramp2_2018: Festu báða <xml><block type="maze_moveEast"/></xml>
        kubbana við <xml><block type="when_run"/></xml> til að ljúka við kóðann og
        smelltu svo á "▶ Keyra".
      courseB_Scrat_ramp2_2019: Festu báða <xml><block type="maze_moveEast"/></xml>
        kubbana við <xml><block type="when_run"/></xml> til að ljúka við kóðann og
        smelltu svo á "▶ Keyra".
      courseB_Scrat_ramp3a_2018: Náðu í <xml><block type="maze_moveNorth"/></xml>
        úr verkfærakassanum og bættu honum neðan við hina kubbana til að ljúka við
        kóðann og smelltu svo á "▶ Keyra".
      courseB_Scrat_ramp3a_2019: Náðu í <xml><block type="maze_moveNorth"/></xml>
        úr verkfærakassanum og bættu honum neðan við hina kubbana til að ljúka við
        kóðann og smelltu svo á "▶ Keyra".
      courseB_Scrat_ramp3b_2018: "Það er einn kubbur sem ekki á að vera síðast í þessum
        kóða! \n\nDragðu hann aftur í verkfærakassann til að fjarlægja hann."
      courseB_Scrat_ramp3b_2019: "Það er einn kubbur sem ekki á að vera síðast í þessum
        kóða! \n\nDragðu hann aftur í verkfærakassann til að fjarlægja hann."
      courseB_Scrat_ramp4a_2018: Sérðu hvaða kubb þarf að setja neðan við hina kubbana
        til að ljúka við þennan kóða?
      courseB_Scrat_ramp4a_2019: Sérðu hvaða kubb þarf að setja neðan við hina kubbana
        til að ljúka við þennan kóða?
      courseB_Scrat_ramp5a_2018: Prófaðu þetta án hjálpar!
      courseB_Scrat_ramp5a_2019: Prófaðu þetta án hjálpar!
      courseB_artist_loops10: "Notaðu það sem þú hefur lært til að teikna mynd af
        því sem þú heldur að listamaðurinn hafi séð þegar hann kom heim.\\\r\n\n*
        * *\n\n### Hugmyndir\n\n![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)\n![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)\n![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)\n![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)"
      courseB_artist_loops10_2018: "Notaðu það sem þú hefur lært til að teikna mynd
        af því sem þú heldur að listamaðurinn hafi séð þegar hann kom heim.\\\r\n\n*
        * *\n\n### Hugmyndir\n\n![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)\n![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)\n![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)\n![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)"
      courseB_artist_loops10_2019: "Notaðu það sem þú hefur lært til að teikna mynd
        af því sem þú heldur að listamaðurinn hafi séð þegar hann kom heim.\\\r\n\n*
        * *\n\n### Hugmyndir\n\n![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)\n![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)\n![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)\n![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)"
      courseB_artist_loops1_2019: Þetta er ný tegund af þraut sem nefnist "Listamaðurinn".
        Prófaðu þetta borð og teiknaðu eitthvað skemmtilegt.
      courseB_artist_loops2_2019: Listamaðurinn er að reyna að teikna línu **6** sinnum
        en tekst það ekki. Getur þú hjálpað?
      courseB_artist_loops3_2019: Hjálpaðu listamanninum að teikna línu 7 sinnum til
        að búa til garðvegg.
      courseB_artist_loops4_2019: Nú þurfum við að gera jarðveginn tilbúinn fyrir
        sáningu. Finndu gallana í kóðanum og hjálpaðu listamanninum að undirbúa jarðveginn.
      courseB_artist_loops5_2019: Það þarf að laga þessar tröppur! Endurtaktu þetta
        mynstur **5** sinnum svo að listamaðurinn nái efst í runnana.
      courseB_artist_loops6: Fyrir aftan runnana er falleg vafningsjurt þakin blómum.
        Getur þú klifið vafninginn og séð hvert hann liggur?
      courseB_artist_loops6_2018: Fyrir aftan runnana er falleg vafningsjurt þakin
        blómum. Getur þú klifið vafninginn og séð hvert hann liggur?
      courseB_artist_loops6_2019: Fyrir aftan runnana er falleg vafningsjurt þakin
        blómum. Getur þú klifið vafninginn og séð hvert hann liggur?
      courseB_artist_loops7: "**Áskorun:** Þetta er falinn garður! Göngum í kringum
        hann."
      courseB_artist_loops7_2018: "**Áskorun:** Þetta er falinn garður! Göngum í kringum
        hann."
      courseB_artist_loops7_2019: "**Áskorun:** Þetta er falinn garður! Göngum í kringum
        hann."
      courseB_artist_loops8_2019: Tími til að stefna heim. Getur þú lagað þennan stiga
        með aðeins einum kubbi svo listamaðurinn komist niður?
      courseB_artist_loops9_2019: Við skulum fara stuttu leiðina heim, yfir pollinn.
        Geturðu hjálpað listamanninum að halda sig á steinunum?
      courseB_artist_loops_challenge1: |-
        _"Kominn tími til að kasta teningunum!
        Getur þú hjálpað mér að teikna þá?"_
      courseB_artist_loops_challenge1_2018: |-
        _"Kominn tími til að kasta teningunum!
        Getur þú hjálpað mér að teikna þá?"_
      courseB_artist_loops_challenge1_2019: |-
        _"Kominn tími til að kasta teningunum!
        Getur þú hjálpað mér að teikna þá?"_
      courseB_artist_loops_challenge2: Komum í leik! Teiknaðu eins mörg X og þú getur!
        Nærðu að hafa 3 í röð?
      courseB_artist_loops_challenge2_2018: Komum í leik! Teiknaðu eins mörg X og
        þú getur! Nærðu að hafa 3 í röð?
      courseB_artist_loops_challenge2_2019: Komum í leik! Teiknaðu eins mörg X og
        þú getur! Nærðu að hafa 3 í röð?
      courseB_collector_loops1: |-
        **Frjáls æfing:** Þetta er ævintýramærin Laurel! Láttu hana hreyfast og safna eins miklum fjársjóði og þú getur.

        Dragðu kubba út á vinnusvæðið og reyndu að sjá hvernig er hægt að ná fjársjóði. Náðu minnst einum til að klára þetta borð.
      courseB_collector_loops10_2019: Hjálpaðu Laurel að ná öllum fjársjóðnum úr þessum
        helli.
      courseB_collector_loops11_2019: Eureka! Náðu eins miklum fjársjóði og þú getur!
      courseB_collector_loops1_2018: "**Frjáls æfing:** Færðu Laurel og náðu eins
        miklum fjársjóði og þú getur. Náðu minnst einum án mistaka til að klára þetta
        borð.  "
      courseB_collector_loops1_2019: "**Frjáls æfing:** Færðu Laurel og náðu eins
        miklum fjársjóði og þú getur. Náðu minnst einum án mistaka til að klára þetta
        borð.  "
      courseB_collector_loops2: |-
        Færðu Laurel að fjársjóðnum og notaðu svo <xml><block type="collector_collect"/></xml> kubbinn til að taka hann upp.

        Náðu öllum fjórum hrúgunum til að ljúka borðinu.
      courseB_collector_loops2_2018: |-
        Færðu Laurel að fjársjóðnum og notaðu svo <xml><block type="collector_collect"/></xml> kubbinn til að taka hann upp.

        Náðu öllum fjórum hrúgunum til að ljúka borðinu.
      courseB_collector_loops2_2019: |-
        Færðu Laurel að fjársjóðnum og notaðu svo <xml><block type="collector_collect"/></xml> kubbinn til að taka hann upp.

        Náðu öllum fjórum hrúgunum til að ljúka borðinu.
      courseB_collector_loops3: Hvernig getur Laurel náð öllum fimm fjársjóðshrúgunum
        með því að nota bara einn <xml><block type="maze_moveEast"/></xml> kubb?
      courseB_collector_loops3_2018: Hvernig getur Laurel náð öllum fimm fjársjóðshrúgunum
        með því að nota bara einn <xml><block type="maze_moveEast"/></xml> kubb?
      courseB_collector_loops3_2019: Hvernig getur Laurel náð öllum fimm fjársjóðshrúgunum
        með því að nota bara einn <xml><block type="maze_moveEast"/></xml> kubb?
      courseB_collector_loops4_2019: Lagaðu slóð Laurel til að ná öllum þessum fjársjóði!
      courseB_collector_loops5_2019: 'Bættu við kóðann úr síðustu þraut til að ná
        öllum fjársjóðnum. '
      courseB_collector_loops6_2019: Finndu út kóðann sem hjálpar Laurel að ná öllum
        fjársjóðnum!
      courseB_collector_loops7_2019: Skrifaðu kóðann til að ná öllum fjársjóðnum.
      courseB_collector_loops8_2019: "**Áskorun:** Fjársjóðurinn er alla leið niður
        þessar tröppur! Hjálpaðu Laurel að ná honum öllum."
      courseB_collector_loops9_2019: _"Hjálpaðu mér að ná fjársjóðnum úr þessum djúpa
        dal."_
      courseB_collector_loops_challenge1_2019: 'Í þetta sinn mátt þú að eins nota
        einn af hverjum örvarkubbi. Náðu öllum fjársjóðnum! '
      courseB_collector_loops_challenge2a: |-
        _"Náum þessum fjársjóði!"_

        Hjálpaðu Laurel að ná minnst **5** fjársjóðum til að ljúka þrautinni.
      courseB_collector_loops_challenge2a_2018: |-
        _"Náum þessum fjársjóði!"_

        Hjálpaðu Laurel að ná minnst **5** fjársjóðum til að ljúka þrautinni.
      courseB_collector_loops_challenge2a_2019: |-
        _"Náum þessum fjársjóði!"_

        Hjálpaðu Laurel að ná minnst **5** fjársjóðum til að ljúka þrautinni.
      courseB_iceage_loops1: Hjálpaðu Scrat yfir hálan ísinn svo hann nái nú akarninu!
      courseB_iceage_loops10: Hjálpaðu Scrat að komast alla leið yfir til akarnsins!
      courseB_iceage_loops10_2019: Hjálpaðu Scrat að komast alla leið yfir til akarnsins!
      courseB_iceage_loops11: Hjálpaðu Skrat að komast til akarnsins!
      courseB_iceage_loops11_2019: Hjálpaðu Skrat að komast til akarnsins!
      courseB_iceage_loops12: Náðu akarninu hvernig sem þú getur!
      courseB_iceage_loops12_2019: Náðu akarninu hvernig sem þú getur!
      courseB_iceage_loops1_2019: Hjálpaðu Scrat yfir hálan ísinn svo hann nái nú
        akarninu!
      courseB_iceage_loops2: Notaðu bæði <xml><block type="maze_moveWest"/></xml>
        og <xml><block type="maze_moveSouth"/></xml> kubba til að ná akarninu!
      courseB_iceage_loops2_2019: Notaðu bæði <xml><block type="maze_moveWest"/></xml>
        og <xml><block type="maze_moveSouth"/></xml> kubba til að ná akarninu!
      courseB_iceage_loops3: Geturðu komist til akarnsins með bara einum <xml><block
        type="maze_moveWest"/></xml> kubbi? Prófaðu að nota lykkju!
      courseB_iceage_loops3_2019: Geturðu komist til akarnsins með bara einum <xml><block
        type="maze_moveWest"/></xml> kubbi? Prófaðu að nota lykkju!
      courseB_iceage_loops4: Bættu við einum kubbi til að koma Scrat til akarnsins!
      courseB_iceage_loops4_2019: Bættu við einum kubbi til að koma Scrat til akarnsins!
      courseB_iceage_loops6: Getur þú bætt við lykkju til að ná akarninu?
      courseB_iceage_loops6_2019: Getur þú bætt við lykkju til að ná akarninu?
      courseB_iceage_loops7: 'Scrat langar mikið í þetta akarn! '
      courseB_iceage_loops7_2019: 'Scrat langar mikið í þetta akarn! '
      courseB_iceage_loops8: 'Getur þú lagað þennan kóða? '
      courseB_iceage_loops8_2019: 'Getur þú lagað þennan kóða? '
      courseB_iceage_loops9: Akarnið er svo langt í burtu! Getur þú notað lykkjur
        til að hjálpa Scrat að komast þangað?
      courseB_iceage_loops9_2019: Akarnið er svo langt í burtu! Getur þú notað lykkjur
        til að hjálpa Scrat að komast þangað?
      courseB_maze_seq10_2019: Lagaðu villurnar til að koma Scrat til akarnsins.
      courseB_maze_seq11_2019: Þetta er allt í þínum höndum! Komdu Scrat til akarnsins.
      courseB_maze_seq12_2019: Náðu nú þessu svíni hvernig sem þú vilt!
      courseB_maze_seq1_2019: |-
        Leiktu þér með þessa kubba til að sjá hvað þeir láta Scrat gera!

        Komdu Scrat til akarnsins til að ljúka borðinu.
      courseB_maze_seq3: _"Lagaðu kóðann svo ég komist til svínsins."_
      courseB_maze_seq4_2019: Notaðu **2** kubba fyrir hreyfingu til að færa Scrat
        til akarnsins.
      courseB_maze_seq5_2019: Þessi þraut er pínu snúin!
      courseB_maze_seq6_2019: Farðu í eina átt, svo í aðra til að Scrat fái akarnið!
      courseB_maze_seq7_2019: Finndu út hvað vantar og bættu svo við kubbum svo Scrat
        nái í akarnið!
      courseB_maze_seq8_2019: Nú átt þú að gera! Hvað þarftu að gera svo Scrat nái
        til akarnsins?
      courseB_maze_seq9: "**Áskorun:** Farðu í kringum TNT sprengiefnið til að koma
        fuglinum til svínsins."
      courseB_maze_seq9_2018: "**Áskorun:** Komdu Scrat yfir sprunginn ísinn til akarnsins."
      courseB_maze_seq9_2019: "**Áskorun:** Komdu Scrat yfir sprunginn ísinn til akarnsins."
      courseB_maze_seq_challenge1: Þú hefur aðeins fjóra kubba fyrir hverja hreyfingu.
        Getur þú fundið leiðina áður en kubbarnir klárast?
      courseB_maze_seq_challenge1_2018: Þú hefur aðeins fjóra kubba fyrir hverja hreyfingu.
        Getur þú fundið leiðina áður en kubbarnir klárast?
      courseB_maze_seq_challenge1_2019: Þú hefur aðeins fjóra kubba fyrir hverja hreyfingu.
        Getur þú fundið leiðina áður en kubbarnir klárast?
      courseB_maze_seq_challenge2_2019: Leiðréttu þetta borð. Þetta eru réttu kubbarnir
        en í rangri röð!
      courseB_playLab_events1: "Þessi leikur heitir \"Leikjasmiðja\".\\\r\n\\\r\nReyndu
        að finna út hvað hver kubbur gerir."
      courseB_playLab_events1_2018: "Þessi leikur heitir \"Leikjasmiðja\".\\\r\n\\\r\nReyndu
        að finna út hvað hver kubbur gerir."
      courseB_playLab_events1_2019: "Þessi leikur heitir \"Leikjasmiðja\".\\\r\n\\\r\nReyndu
        að finna út hvað hver kubbur gerir."
      courseB_playlab_events2_2019: Láttu drekann Daisy segja eitthvað þegar þú smellir
        á "Keyra".
      courseB_playlab_events3: Notaðu atvik til að láta drekann Daisy the Dragon skipta
        yfir í eitthvert ![](https://images.code.org/c365e065614fea592612264f33624c09-image-1475698889081.17.53.png)
        skap þegar þú smellir á hana.
      courseB_playlab_events3_2018: Notaðu atvik til að láta drekann Daisy the Dragon
        skipta yfir í eitthvert ![](https://images.code.org/c365e065614fea592612264f33624c09-image-1475698889081.17.53.png)
        skap þegar þú smellir á hana.
      courseB_playlab_events3_2019: Notaðu atvik til að láta drekann Daisy the Dragon
        skipta yfir í eitthvert ![](https://images.code.org/c365e065614fea592612264f33624c09-image-1475698889081.17.53.png)
        skap þegar þú smellir á hana.
      courseB_playlab_events4: "Rabbabarariddarar!  \n\nBættu við atviki svo riddarinn
        færi sig að drekanum þegar smellt er á vinstri ör."
      courseB_playlab_events4_2018: "Rabbabarariddarar! Náðu drekanum til að ljúka
        þessu borði. \n\nBættu við atviki svo riddarinn færi sig í átt að drekanum
        þegar smellt er á vinstri ör."
      courseB_playlab_events4_2019: "Rabbabarariddarar! Náðu drekanum til að ljúka
        þessu borði. \n\nBættu við atviki svo riddarinn færi sig í átt að drekanum
        þegar smellt er á vinstri ör."
      courseB_playlab_events5_2018: "Bættu nú við atviki svo að riddarinn forði sér
        frá drekanum þegar þú ýtir á hægri ör.  \n\nFærðu riddarann til hægri til
        að ljúka þessu borði."
      courseB_playlab_events5_2019: "Bættu nú við atviki svo að riddarinn forði sér
        frá drekanum þegar þú ýtir á hægri ör.  \n\nFærðu riddarann til hægri til
        að ljúka þessu borði."
      courseB_playlab_events6: |-
        Hjálpaðu riddaranum að ná öllum flöggunum!

        Til þess þarftu að bæta við atvikum til að færa riddarann upp, niður, til vinstri og til hægri.
      courseB_playlab_events6_2018: |-
        Hjálpaðu riddaranum að ná öllum flöggunum!

        Til þess þarftu að bæta við atvikum til að færa riddarann upp, niður, til vinstri og til hægri.
      courseB_playlab_events6_2019: |-
        Hjálpaðu riddaranum að ná öllum flöggunum!

        Til þess þarftu að bæta við atvikum til að færa riddarann upp, niður, til vinstri og til hægri.
      courseB_playlab_events7: "Gerðu leikinn áhugaverðari með því að láta riddarann
        hverfa ef hann rekst á drekann á leiðinni að flöggunum! \n\nSpilaðu hljóð
        þegar þeir rekast á til að gera þetta raunverulegra.\n\nLáttu riddarann snerta
        öll mörkin og rekast svo á drekann til að ljúka borðinu."
      courseB_playlab_events7_2018: "Gerðu þennan leik skemmtilegri með því að bæta
        við hann!\n\n1.  Láttu riddarann hverfa ef hann rekst á drekann.  \n2.  Spilaðu
        hljóð þegar þeir rekast á til að gera það raunverulegra.\n\n* * *\n\nLáttu
        hann fara á öll mörkin og síðan rekast á drekann til að ljúka borðinu."
      courseB_playlab_events7_2019: "Gerðu þennan leik skemmtilegri með því að bæta
        við hann!\n\n1.  Láttu riddarann hverfa ef hann rekst á drekann.  \n2.  Spilaðu
        hljóð þegar þeir rekast á til að gera það raunverulegra.\n\n* * *\n\nLáttu
        hann fara á öll mörkin og síðan rekast á drekann til að ljúka borðinu."
      courseB_playlab_eventsFP_2019: "**Frjáls æfing:** Notaðu ímyndunaraflið. Hvað
        geturðu gert til gera leikinn skemmtilegri?"
      courseB_playlab_events_challenge1: |-
        Nú er að komið að Stóra Dýrakapphlaupinu! Láttu dýrin færast niður þegar þú ýtir á ▼.

         Hver skyldi hlaupa hraðast?
      courseB_playlab_events_challenge1_2018: |-
        Nú er að komið að Stóra Dýrakapphlaupinu! Láttu dýrin færast niður þegar þú ýtir á ▼.

         Hver skyldi hlaupa hraðast?
      courseB_playlab_events_challenge1_2019: |-
        Nú er að komið að Stóra Dýrakapphlaupinu! Láttu dýrin færast niður þegar þú ýtir á ▼.

         Hver skyldi hlaupa hraðast?
      courseB_playlab_events_challenge2: |-
        Við skulum láta dýrin hverfa þegar þú smellir á þau! Prófaðu fyrst með hundinn og bættu svo hinum dýrunum í leikinn.
        Þú getur líka bætt við hljóðum og skorað stig til að búa til leik sem gæti heitið Dýraklukk!

        ![](https://images.code.org/d48437a0b08be90110541e0ef21076e0-image-1497907722000.gif)
      courseB_playlab_events_challenge2_2018: |-
        Við skulum láta dýrin hverfa þegar þú smellir á þau! Prófaðu fyrst með hundinn og bættu svo hinum dýrunum í leikinn.
        Þú getur líka bætt við hljóðum og skorað stig til að búa til leik sem gæti heitið Dýraklukk!

        ![](https://images.code.org/d48437a0b08be90110541e0ef21076e0-image-1497907722000.gif)
      courseB_playlab_events_challenge2_2019: |-
        Við skulum láta dýrin hverfa þegar þú smellir á þau! Prófaðu fyrst með hundinn og bættu svo hinum dýrunum í leikinn.
        Þú getur líka bætt við hljóðum og skorað stig til að búa til leik sem gæti heitið Dýraklukk!

        ![](https://images.code.org/d48437a0b08be90110541e0ef21076e0-image-1497907722000.gif)
      courseB_starWars_prog1: |-
        ![Rey](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)_"Náðu brotamálminum, BB-8!"_

        Gættu þín á veggjum og kössum. Brotamálmur lítur svona út: ![picture of scrap metal](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)
      courseB_starWars_prog10: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Nærðu öllu?"_'
      courseB_starWars_prog10_2018: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Nærðu öllu?"_'
      courseB_starWars_prog10_2019: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Nærðu öllu?"_'
      courseB_starWars_prog11: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Haltu áfram!"_'
      courseB_starWars_prog11_2018: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Haltu áfram!"_'
      courseB_starWars_prog11_2019: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Haltu áfram!"_'
      courseB_starWars_prog1_2018: |-
        ![Rey](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)_"Náðu brotamálminum, BB-8!"_

        Gættu þín á veggjum og kössum. Brotamálmur lítur svona út: ![picture of scrap metal](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)
      courseB_starWars_prog1_2019: |-
        ![Rey](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)_"Náðu brotamálminum, BB-8!"_

        Gættu þín á veggjum og kössum. Brotamálmur lítur svona út: ![picture of scrap metal](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)
      courseB_starWars_prog2: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Náðu öllum málminum."_'
      courseB_starWars_prog2_2018: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Náðu öllum málminum."_'
      courseB_starWars_prog2_2019: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Náðu öllum málminum."_'
      courseB_starWars_prog3: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Haltu áfram, BB-8!"_'
      courseB_starWars_prog3_2018: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Haltu áfram, BB-8!"_'
      courseB_starWars_prog3_2019: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Haltu áfram, BB-8!"_'
      courseB_starWars_prog4: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Náðu þessu, BB-8!"_'
      courseB_starWars_prog4_2018: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Náðu þessu, BB-8!"_'
      courseB_starWars_prog4_2019: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Náðu þessu, BB-8!"_'
      courseB_starWars_prog5: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Nærðu öllu?"_'
      courseB_starWars_prog5_2018: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Nærðu öllu?"_'
      courseB_starWars_prog5_2019: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Nærðu öllu?"_'
      courseB_starWars_prog6: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Þú getur þetta!"_'
      courseB_starWars_prog6_2018: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Þú getur þetta!"_'
      courseB_starWars_prog6_2019: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Þú getur þetta!"_'
      courseB_starWars_prog7: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Farðu og náðu þessu!"_'
      courseB_starWars_prog7_2018: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Farðu og náðu þessu!"_'
      courseB_starWars_prog7_2019: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Farðu og náðu þessu!"_'
      courseB_starWars_prog8: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Haltu áfram, BB-8."_

        **Challenge**: Gather all the scrap metal.
      courseB_starWars_prog8_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Haltu áfram, BB-8."_

        **Challenge**: Gather all the scrap metal.
      courseB_starWars_prog8_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Haltu áfram, BB-8."_

        **Challenge**: Gather all the scrap metal.
      courseB_starWars_prog9: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Þú getur þetta!"_'
      courseB_starWars_prog9_2018: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Þú getur þetta!"_'
      courseB_starWars_prog9_2019: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Þú getur þetta!"_'
      courseC19_playLab_EOC1: |-
        Það er ótrúlegt hvað þú hefur lært mikið! Búum nú til leik skref fyrir skref.

        Notaðu nýja kubba í verkfærakassanum til að búa til bakgrunn og velja svo leikmann fyrir leikinn.
      courseC19_playLab_EOC2: "Notaðu kubba fyrir atvik og aðgerðir til að láta leikmanninn
        færast þegar þú ýtir á örvarlyklana. \n\nKomdu leikmanninum á mörkin til að
        klára þrautina."
      courseC19_playLab_EOC3: |-
        Við skulum bæta fleiri persónum í leikinn!

        Notaðu kubbinn `hafa leikmann` til að bæta fleiri persónum við og komast svo að markinu til að ljúka þrautinni.
      courseC19_playLab_EOC4: |-
        Margar leikverur og leikmenn sem færast er ágæt byrjun á leik, en við þurfum að gera meira til að þetta sé meira eins og alvöru leikur. Bætum við stigaskori!

        Notaðu atvikskubba eins og `þegar leikmaður snertir` til að breyta skorinu eða vinna leikinn. Skoraðu 5 stig eða sigraðu í leiknum til að ljúka þessari þraut.
      courseC19_playLab_EOC5: Vel gert! Þú hefur alla helstu hluta leiks sem virkar.
        Leggðu nú vinnu í að láta leikinn virka eins og þú vilt að hann geri. Smelltu
        svo á "Ljúka".
      courseC19_playLab_EOC6: Þú hefur lokið þessu! Nú getur þú spilað leikinn eða
        deilt honum með vinum og bekkjarfélögum!
      courseC_PlayLab_events6_2019: Skrifaðu nú forrit sem notar örvarlyklana upp/niður/vinstri/hægri
        til að hreyfa mörgæsina Waddles og láta hana snerta öll mörkin!
      courseC_PlayLab_events7: |-
        Kubburinn `endurtaka endalaust` endurtekur kóðann sem er í honum aftur og aftur endalaust. Notaðu þennan kubb til að færa risaeðluna Dino (leikmann 2) upp og niður 400 díla.

        ![](https://images.code.org/0cbe6dd5f4e2251e3f121dbabc0cc19d-image-1523040103822.com-resize.gif)
      courseC_PlayLab_events7_2018: |-
        Kubburinn `endurtaka endalaust` endurtekur kóðann sem er í honum aftur og aftur endalaust. Notaðu þennan kubb til að færa risaeðluna Dino (leikmann 2) upp og niður 400 díla.

        ![](https://images.code.org/0cbe6dd5f4e2251e3f121dbabc0cc19d-image-1523040103822.com-resize.gif)
      courseC_PlayLab_events7_2019: |-
        Kubburinn `endurtaka endalaust` endurtekur kóðann sem er í honum aftur og aftur endalaust. Notaðu þennan kubb til að færa risaeðluna Dino (leikmann 2) upp og niður 400 díla.

        ![](https://images.code.org/0cbe6dd5f4e2251e3f121dbabc0cc19d-image-1523040103822.com-resize.gif)
      courseC_PlayLab_events8: |-
        Getur þú látið Waddles (leikmann 2) segja "Æ!" og spila hljóð ef hann rekst á Chomp?

        Spilaðu svo leikinn til að láta þetta gerast.

        ![](https://images.code.org/a634f249021651f60a1acf37bf78d07d-image-1475342557950.gif)
      courseC_PlayLab_events8_2018: |-
        Getur þú látið Waddles (leikmann 2) segja "Æ!" og spila hljóð ef hann rekst á Chomp?

        Spilaðu svo leikinn til að láta þetta gerast.

        ![](https://images.code.org/a634f249021651f60a1acf37bf78d07d-image-1475342557950.gif)
      courseC_PlayLab_events8_2019: |-
        Getur þú látið Waddles (leikmann 2) segja "Æ!" og spila hljóð ef hann rekst á Chomp?

        Spilaðu svo leikinn til að láta þetta gerast.

        ![](https://images.code.org/a634f249021651f60a1acf37bf78d07d-image-1475342557950.gif)
      courseC_PlayLab_eventsA_embed_2019: Förum í leik. Skoraðu 5 stig með því að
        færa Mörgæs að Kolkrabba!
      courseC_PlayLab_events_challenge1: "Notaðu nýjan kubb til að láta Waddles fara
        sjálfkrafa aftur á byrjunarreit þegar hann rekst á Risaeðlu og þegar hann
        skorar stig. Þetta gerir leikinn erfiðari en líka skemmtilegri!\\\r\n\\\r\nSpilaðu
        leikinn og hreyfðu Waddles með örvunum þar til þú skorar nógu mörg stig. Til
        að ljúka áskoruninni þarf að færa Waddles á miðjan skjáinn vinstra megin."
      courseC_PlayLab_events_challenge1_2018: "Notaðu nýjan kubb til að láta Waddles
        fara sjálfkrafa aftur á byrjunarreit þegar hann rekst á Risaeðlu og þegar
        hann skorar stig. Þetta gerir leikinn erfiðari en líka skemmtilegri!\\\r\n\\\r\nSpilaðu
        leikinn og hreyfðu Waddles með örvunum þar til þú skorar nógu mörg stig. Til
        að ljúka áskoruninni þarf að færa Waddles á miðjan skjáinn vinstra megin."
      courseC_PlayLab_events_challenge1_2019: "Notaðu nýjan kubb til að láta Waddles
        fara sjálfkrafa aftur á byrjunarreit þegar hann rekst á Risaeðlu og þegar
        hann skorar stig. Þetta gerir leikinn erfiðari en líka skemmtilegri!\\\r\n\\\r\nSpilaðu
        leikinn og hreyfðu Waddles með örvunum þar til þú skorar nógu mörg stig. Til
        að ljúka áskoruninni þarf að færa Waddles á miðjan skjáinn vinstra megin."
      courseC_artist_loop1: |-
        Frábært!

        Gerum þetta svolítið skrautlegra með því að breyta penslinum með `stilla mynstur` kubbnum áður en lykkjan okkar byrjar.
      courseC_artist_loop1_2018: |-
        Frábært!

        Gerum þetta svolítið skrautlegra með því að breyta penslinum með <xml><block type="draw_line_style_pattern"> <title name="VALUE">DEFAULT</title></block></xml> kubbnum áður en lykkjan okkar byrjar.
      courseC_artist_loop1_2019: |-
        Frábært!

        Gerum þetta svolítið skrautlegra með því að breyta penslinum með <xml><block type="draw_line_style_pattern"> <title name="VALUE">DEFAULT</title></block></xml> kubbnum áður en lykkjan okkar byrjar.
      courseC_artist_loops1a: "**Frjáls æfing:** Byggjum nú eitthvað stærra, en í
        skrefum! Þú getur búið til hvað sem þú vilt, en við ætlum að sýna þér hvernig
        þú getur gert eitthvað líkt þessu!\n\n![expandable](https://images.code.org/5b67ed8d878d6c2a5009eee054427fd5-image-1496711253365.05.35.png)\n\nNotaðu
        kubbinn `hoppa á 200 þvert 200 niður` til að koma listamanninum í miðju leiksvæðisins,
        og notaðu svo `teikna límmiða` kubbinn til að líma mynd af fugli. \n\n* *
        *\n\nÝttu á \"Ljúka\" þegar þú ert ánægð/ur með sköpunarverk þitt."
      courseC_artist_loops1a_2018: "**Frjáls æfing:** Byggjum eitthvað stærra en í
        þrepum!  \n\nNotaðu `hoppa á 200 frá hlið 200 niður` til að koma listamanninum
        í miðju svæðisins. Notaðu svo kubbinn `teikna límmiða` til að láta fugl birtast.
        \ \n\n* * *\n\nÝttu á \"Ljúka\" þegar þú ánægð/ur með árangurinn."
      courseC_artist_loops1a_2019: "**Frjáls æfing:** Byggjum eitthvað stærra en í
        þrepum!  \n\nNotaðu `hoppa á 200 frá hlið 200 niður` til að koma listamanninum
        í miðju svæðisins. Notaðu svo kubbinn `teikna límmiða` til að láta fugl birtast.
        \ \n\n* * *\n\nÝttu á \"Ljúka\" þegar þú ánægð/ur með árangurinn."
      courseC_artist_loops1b_2019: "Breyttu því hvernig límmiðinn snýr með því að
        bæta `snúa` skipun við kóðann. \n\n* * *\n\nÝttu á \"Ljúka\" þegar útkoman
        er eins og þú vilt hafa hana.\n\n![expandable](https://images.code.org/30fe9d37758abd27055d9a6e5a890680-image-1553097358155.png)\n![expandable](https://images.code.org/61feed00662019b99ac774322231f084-image-1553097362176.png)\n![expandable](https://images.code.org/fd123bb703ea4c630218a12eb5994053-image-1553097354066.png)"
      courseC_artist_loops2a: Notaðu nú lykkju til að snúa fuglinum um 30 gráður 12
        sinnum.
      courseC_artist_loops2a_2018: Notaðu nú lykkju til að snúa fuglinum um 30 gráður
        12 sinnum.
      courseC_artist_loops2a_2019: Notaðu nú lykkju til að snúa fuglinum um 30 gráður
        12 sinnum.
      courseC_artist_loops3a: "Þetta er skemmtilegt!  \\\r\n\\\r\nBættu nú við límmiða
        með leðurblöku rétt á eftir fuglinum til að búa til mynd eins og þá hér fyrir
        neðan.\\\r\n\\_\\_\\_\\\r\n\\\r\n![](https://images.code.org/3aa37f679eabc7a5a337291db614dd98-image-1496711069351.03.49.png)"
      courseC_artist_loops3a_2018: "Þetta er skemmtilegt!  \\\r\n\\\r\nBættu nú við
        límmiða með leðurblöku rétt á eftir fuglinum til að búa til mynd eins og þá
        hér fyrir neðan.\\\r\n\\_\\_\\_\\\r\n\\\r\n![](https://images.code.org/3aa37f679eabc7a5a337291db614dd98-image-1496711069351.03.49.png)"
      courseC_artist_loops3a_2019: "Þetta er skemmtilegt!  \\\r\n\\\r\nBættu nú við
        límmiða með leðurblöku rétt á eftir fuglinum til að búa til mynd eins og þá
        hér fyrir neðan.\\\r\n\\_\\_\\_\\\r\n\\\r\n![](https://images.code.org/3aa37f679eabc7a5a337291db614dd98-image-1496711069351.03.49.png)"
      courseC_artist_loops4a: |-
        Bætt kubb í kóðann svo að listamaðurinn hoppi áfram um 75 díla milli þess að setja fuglinn og setja leðurblökuna. Í þessari þraut skaltu gæta þess að nota `hoppa á 200 þvert 200 niður` innan í lykkjunni til að haldast í miðjunni!

        * * *

        ![expandable]
        (<https://images.code.org/5b67ed8d878d6c2a5009eee054427fd5-image-1496711253365.05.35.png>)
      courseC_artist_loops4a_2018: |-
        Breyttu kóðanum svo að þú stökkvir áfram 75 díla á milli þess að stimpla fuglinn og leðurblökuna. Í þessari þraut þarftu að passa að hafa `hoppa til 200 lárétt 200 lóðrétt` innan í lykkjunni til að þess að þú haldist í miðjunni!

        * * *

        ![expandable](https://images.code.org/5b67ed8d878d6c2a5009eee054427fd5-image-1496711253365.05.35.png)
      courseC_artist_loops4a_2019: |-
        Breyttu kóðanum svo að þú stökkvir áfram 75 díla á milli þess að stimpla fuglinn og leðurblökuna. Í þessari þraut þarftu að passa að hafa `hoppa til 200 lárétt 200 lóðrétt` innan í lykkjunni til að þess að þú haldist í miðjunni!

        * * *

        ![expandable](https://images.code.org/5b67ed8d878d6c2a5009eee054427fd5-image-1496711253365.05.35.png)
      courseC_artist_loops5a: "Hvað gerist þegar þú skiptir út öðrum eða báðum límmiðum
        fyrir aðra veru?\\\r\n\\_\\_\\_\\\r\n![](https://images.code.org/cadb5e244db64a781bc02b55f2e7ccca-image-1496711397989.08.28.png)"
      courseC_artist_loops5a_2018: "Hvað gerist þegar þú skiptir út öðrum eða báðum
        límmiðum fyrir aðra veru?\\\r\n\\_\\_\\_\\\r\n![](https://images.code.org/cadb5e244db64a781bc02b55f2e7ccca-image-1496711397989.08.28.png)"
      courseC_artist_loops5a_2019: "Hvað gerist þegar þú skiptir út öðrum eða báðum
        límmiðum fyrir aðra veru?\\\r\n\\_\\_\\_\\\r\n![](https://images.code.org/cadb5e244db64a781bc02b55f2e7ccca-image-1496711397989.08.28.png)"
      courseC_artist_loops5b: "Hvað gerist þegar þú notar `færa áfram`\nsíðan `færa
        aftur á bak` um 100, 200 eða 400 díla einhvers staðar í lykkjunni?  \\\r\n\\-\nPrófaðu
        að nota `stilla mynstur` kubbinn áður en lykkjan byrjar til að búa til listaverk!\\\r\n\\_\\_\\_\\\r\n![](https://images.code.org/d523de02389fd23db3029327c03b727d-image-1497039953252.24.18.png)"
      courseC_artist_loops5b_2018: "Hvað gerist þegar þú notar `færa áfram`\nsíðan
        `færa aftur á bak` um 100, 200 eða 400 díla einhvers staðar í lykkjunni?  \\\r\n\\-\nPrófaðu
        að nota `stilla mynstur` kubbinn áður en lykkjan byrjar til að búa til listaverk!\\\r\n\\_\\_\\_\\\r\n![](https://images.code.org/d523de02389fd23db3029327c03b727d-image-1497039953252.24.18.png)"
      courseC_artist_loops5b_2019: "Hvað gerist þegar þú notar `færa áfram`\nsíðan
        `færa aftur á bak` um 100, 200 eða 400 díla einhvers staðar í lykkjunni?  \\\r\n\\-\nPrófaðu
        að nota `stilla mynstur` kubbinn áður en lykkjan byrjar til að búa til listaverk!\\\r\n\\_\\_\\_\\\r\n![](https://images.code.org/d523de02389fd23db3029327c03b727d-image-1497039953252.24.18.png)"
      courseC_artist_loops6a: "Bættu þriðja límmiðanum einhvers staðar í lykkjuna!
        Hvernig lítur þetta út núna?\\\r\n\n-   Breyttu mynstrinu í penslinum til
        að gera þetta fjölbreytilegra!\\\r\n    \\\r\n    \\_\\_\\_\\\r\n    \\\r\n
        \   ![](https://images.code.org/b0f999ef4b9ab6bd9780e9fbac07dc8d-image-1497040845047.39.55.png)"
      courseC_artist_loops6a_2018: "Bættu þriðja límmiðanum einhvers staðar í lykkjuna!
        Hvernig lítur þetta út núna?\\\r\n\n-   Breyttu mynstrinu í penslinum til
        að gera þetta fjölbreytilegra!\\\r\n    \\\r\n    \\_\\_\\_\\\r\n    \\\r\n
        \   ![](https://images.code.org/b0f999ef4b9ab6bd9780e9fbac07dc8d-image-1497040845047.39.55.png)"
      courseC_artist_loops6a_2019: |-
        Bættu við þriðja límmiðanum einhversstaðar í lykkjunni! Hvernig lítur þetta út núna?

        -   Breyttu mynstrinu í penslinum til að fá meiri fjölbreytni!

        * * *

        ![expandable](https://images.code.org/edc53f27379e018e61a6ab9dcc2717ea-image-1560984648573.png)
        ![expandable](https://images.code.org/c41b00a743f245f98d2cfb66cb18e771-image-1560984690182.png)
        ![expandable](https://images.code.org/4c8910f72a7f0cd81713ded7b866a883-image-1560984706203.png)
      courseC_artist_loops7a: "Prófaðu að breyta `endurtaka` lykkjunni og keyra hana
        mismunandi oft.  Hversu langt þarft þú að snúa til að fara í heilan hring?\\\r\n\n-
        \  Prófaðu að breyta hve oft þú snýrð\\\r\n-   Prófaðu að snúa um 60 gráður
        6 sinnum\\\r\n-   Prófaðu að snúa um 20 gráður 18 sinnum\\\r\n    \\_\\_\\_\\\r\n
        \   Þessi mynd notar sjóræningja, ninju og gíraffa. Þau snúa 18 sinnum um
        20 gráður.\\\r\n    \\\r\n    ![](https://images.code.org/99411638acb44e8a7ba5b9696fe11fa4-image-1496714175039.53.24.png)"
      courseC_artist_loops7a_2018: "Prófaðu að breyta `endurtaka` lykkjunni og keyra
        hana mismunandi oft.  Hversu langt þarft þú að snúa til að fara í heilan hring?\\\r\n\n-
        \  Prófaðu að breyta hve oft þú snýrð\\\r\n-   Prófaðu að snúa um 60 gráður
        6 sinnum\\\r\n-   Prófaðu að snúa um 20 gráður 18 sinnum\\\r\n    \\_\\_\\_\\\r\n
        \   Þessi mynd notar sjóræningja, ninju og gíraffa. Þau snúa 18 sinnum um
        20 gráður.\\\r\n    \\\r\n    ![](https://images.code.org/99411638acb44e8a7ba5b9696fe11fa4-image-1496714175039.53.24.png)"
      courseC_artist_loops7a_2019: |-
        Prófaðu að breyta hve oft `endurtaka` lykkjan endurtekur sig. Hversu mikið þarftu að snúa til að fara í heilan hring?

        -   Prófaðu þessar tölur
            -   Snúðu um 60 gráður 6 sinnum
            -   Snúðu um 20 gráður 18 sinnum

        * * *

        Fyrsta myndin notar sjóræningja, ninju og gíraffa. Þau snúast 18 sinnum með 20 gráðu snúningi.

        ![expandable](https://images.code.org/99411638acb44e8a7ba5b9696fe11fa4-image-1496714175039.53.24.png)
        ![expandable](https://images.code.org/9f28cb9b434b914846c3846bc6652f66-image-1560982666379.png)
        ![expandable](https://images.code.org/e9128684956504b0172708d63b65f93a-image-1560982686482.png)
        ![expandable](https://images.code.org/8e9cf52ecaf72678c65558f18f3e0d3e-image-1560982695632.png)
      courseC_artist_loops8a: "Prófaðu nú að skapa eitthvað alfarið þitt eigið.  Hvað
        gerist þegar þú býrð til tvo aðskilda hringi með ólíkum límmiðum?\\\r\n\\_\\_\\_\\\r\nVantar
        þig hugmyndir? Prófaðu búa til svona hönnun.\\\r\n\\\r\n![](https://images.code.org/d8e0ad6294aa5e04e4aab56631a6b50b-image-1496714582863.02.14.png)"
      courseC_artist_loops8a_2018: "Prófaðu nú að skapa eitthvað alfarið þitt eigið.
        \ Hvað gerist þegar þú býrð til tvo aðskilda hringi með ólíkum límmiðum?\\\r\n\\_\\_\\_\\\r\nVantar
        þig hugmyndir? Prófaðu búa til svona hönnun.\\\r\n\\\r\n![](https://images.code.org/d8e0ad6294aa5e04e4aab56631a6b50b-image-1496714582863.02.14.png)"
      courseC_artist_loops8a_2019: "Prófaðu nú að skapa eitthvað alfarið þitt eigið.
        \ Hvað gerist þegar þú býrð til tvo aðskilda hringi með ólíkum límmiðum?\\\r\n\\_\\_\\_\\\r\nVantar
        þig hugmyndir? Prófaðu búa til svona hönnun.\\\r\n\\\r\n![](https://images.code.org/d8e0ad6294aa5e04e4aab56631a6b50b-image-1496714582863.02.14.png)"
      courseC_artist_loopsPre1a: |-
        Settu nú kóðann sem þú hefur innan í `endurtaka` lykkju og láttu hana fara **6** umferðir.

        -   Taktu eftir að við höfum bætt við 60 gráðu snúningi í lok hverrar lykkju til að fá heilan hring.
      courseC_artist_loopsPre1a_2018: |-
        Settu nú kóðann sem þú hefur innan í `endurtaka` lykkju og láttu hana fara **6** umferðir.

        -   Taktu eftir að við höfum bætt við 60 gráðu snúningi í lok hverrar lykkju til að fá heilan hring.
      courseC_artist_loopsPre1a_2019: |-
        Settu nú kóðann sem þú hefur innan í `endurtaka` lykkju og láttu hana fara **6** umferðir.

        -   Taktu eftir að við höfum bætt við 60 gráðu snúningi í lok hverrar lykkju til að fá heilan hring.
      courseC_artist_loopsPrePre1a: Notaðu kubbinn <xml><block type="jump_to_xy" id="callMe"><title
        name="XPOS">200</title><title name="YPOS">200</title></block></xml> til að
        fá listamanninn inn í miðju leiksvæðisins. Teiknaðu svo línu sem er 50 díla
        löng með kubbnum  <xml><block type="draw_move_by_constant"><title name="DIR">moveForward</title><title
        name="VALUE">50</title></block></xml>.
      courseC_artist_loopsPrePre1a_2018: |-
        ### Listamaðurinn er á röngum stað!

        Notaðu kubbinn  <xml><block type="jump_to_xy" id="callMe"><title name="XPOS">200</title><title name="YPOS">200</title></block></xml> til að fá listamanninn inn í miðju leiksvæðisins. Teiknaðu svo línu sem er 50 díla löng með kubbnum <xml><block type="draw_move_by_constant"><title name="DIR">moveForward</title><title name="VALUE">50</title></block></xml>.
      courseC_artist_loopsPrePre1a_2019: |-
        ### Listamaðurinn er á röngum stað!

        Notaðu kubbinn  <xml><block type="jump_to_xy" id="callMe"><title name="XPOS">200</title><title name="YPOS">200</title></block></xml> til að fá listamanninn inn í miðju leiksvæðisins. Teiknaðu svo línu sem er 50 díla löng með kubbnum <xml><block type="draw_move_by_constant"><title name="DIR">moveForward</title><title name="VALUE">50</title></block></xml>.
      courseC_artist_prog1: |-
        _"Hæ, ég er listamaður. Þú getur skrifað kóða til að láta mig teikna næstum hvað sem er."_

        Leiktu þér með kubbana í verkfærakassanum til að sjá hvað þeir gera!
      courseC_artist_prog1_2018: |-
        _"Hæ, ég er listamaður. Þú getur skrifað kóða til að láta mig teikna næstum hvað sem er."_

        Leiktu þér með kubbana í verkfærakassanum til að sjá hvað þeir gera!
      courseC_artist_prog1_2019: |-
        _"Hæ, ég er listamaður. Þú getur skrifað kóða til að láta mig teikna næstum hvað sem er."_

        Leiktu þér með kubbana í verkfærakassanum til að sjá hvað þeir gera!
      courseC_artist_prog2: |-
        _"Smíðum búr fyrir gæluskrímslið mitt!"_

        Dragðu fram kubba sem láta listamanninn teikna yfir gráu strikin í myndinni.\
        (Hvert strik er 100 dílar á lengd)
      courseC_artist_prog2_2018: |-
        _"Smíðum búr fyrir gæluskrímslið mitt!"_

        Dragðu fram kubba sem láta listamanninn teikna yfir gráu strikin í myndinni.\
        (Hvert strik er 100 dílar á lengd)
      courseC_artist_prog2_2019: |-
        _"Smíðum búr fyrir gæluskrímslið mitt!"_

        Dragðu fram kubba sem láta listamanninn teikna yfir gráu strikin í myndinni.\
        (Hvert strik er 100 dílar á lengd)
      courseC_artist_prog3: |-
        _"Á þetta geimfar vantar glugga!"_

        Hver hlið á innri ferningnum er 100 dílar og öll hornin eru 90 gráður.
      courseC_artist_prog3_2018: |-
        _"Á þetta geimfar vantar glugga!"_

        Hver hlið á innri ferningnum er 100 dílar og öll hornin eru 90 gráður.
      courseC_artist_prog3_2019: |-
        _"Á þetta geimfar vantar glugga!"_

        Hver hlið á innri ferningnum er 100 dílar og öll hornin eru 90 gráður.
      courseC_artist_prog4: |-
        _"Ó nei! Geimgæludýr Stellu flaug í burtu! Hjálpum geimfaranum!"_

        Ljúktu við eldflaug Stellu svo að hún geti elt gæludýrið sitt.\
        (Hver hlið þríhyrningsins er 100 dílar á lengd og er með 120 gráðu ytri horn.)
      courseC_artist_prog4_2018: |-
        _"Ó nei! Geimgæludýr Stellu flaug í burtu! Hjálpum geimfaranum!"_

        Ljúktu við eldflaug Stellu svo að hún geti elt gæludýrið sitt.\
        (Hver hlið þríhyrningsins er 100 dílar á lengd og er með 120 gráðu ytri horn.)
      courseC_artist_prog4_2019: |-
        _"Ó nei! Geimgæludýr Stellu flaug í burtu! Hjálpum geimfaranum!"_

        Ljúktu við eldflaug Stellu svo að hún geti elt gæludýrið sitt.\
        (Hver hlið þríhyrningsins er 100 dílar á lengd og er með 120 gráðu ytri horn.)
      courseC_artist_prog5: |-
        _"Kannske ættum að útbúa merki á hvert gæludýr ef það skyldi týnast!"_

        Ljúktu þessu merki með því að teikna rétthyrning utan um.\
        (Löngu hliðarnar eru 200 dílar og stuttu hliðarnar 100 dílar)
      courseC_artist_prog5_2018: |-
        _"Kannske ættum að útbúa merki á hvert gæludýr ef það skyldi týnast!"_

        Ljúktu þessu merki með því að teikna rétthyrning utan um.\
        (Löngu hliðarnar eru 200 dílar og stuttu hliðarnar 100 dílar)
      courseC_artist_prog5_2019: |-
        _"Kannske ættum að útbúa merki á hvert gæludýr ef það skyldi týnast!"_

        Ljúktu þessu merki með því að teikna rétthyrning utan um.\
        (Löngu hliðarnar eru 200 dílar og stuttu hliðarnar 100 dílar)
      courseC_artist_prog6: |-
        _"Nú þarf Bella merki!_"

        Teiknaðu þennan tígul með 200 díla hliðar.
      courseC_artist_prog6_2018: |-
        _"Nú þarf Bella merki!_"

        Teiknaðu þennan ferning með 200 díla hliðar.
      courseC_artist_prog6_2019: |-
        _"Nú þarf Bella merki!_"

        Teiknaðu þennan ferning með 200 díla hliðar.
      courseC_artist_prog7: "**Áskorun:** Þetti merki er mjög merklegt!  \n\nGeturðu
        fundið hvernig á að teikna útlínuna? \n(Langa hliðin er 150 dílar og stuttu
        hliðarnar eru 75 dílar.)"
      courseC_artist_prog7_2018: "**Áskorun:** Þetti merki er mjög merklegt!  \n\nGeturðu
        fundið hvernig á að teikna útlínuna? \n(Langa hliðin er 150 dílar og stuttu
        hliðarnar eru 75 dílar.)"
      courseC_artist_prog7_2019: "**Áskorun:** Þetti merki er mjög merklegt!  \n\nGeturðu
        fundið hvernig á að teikna útlínuna? \n(Langa hliðin er 150 dílar og stuttu
        hliðarnar eru 75 dílar.)"
      courseC_artist_prog8: "Enn eitt merki. Þetta er þríhyrningur fyrir Pí. \n(Hver
        hlið er 150 dílar)"
      courseC_artist_prog8_2018: "Enn eitt merki. Þetta er þríhyrningur fyrir Pí.
        \n(Hver hlið er 150 dílar)"
      courseC_artist_prog8_2019: "Enn eitt merki. Þetta er þríhyrningur fyrir Pí.
        \n(Hver hlið er 150 dílar)"
      courseC_artist_prog_challenge1: Teiknaðu klefa fyrir hvert dýr. Þessi þraut
        hefur margar lausnir. Skemmtu þér við að finna eina! Hver ferningur er með
        100 díla hliðar.
      courseC_artist_prog_challenge1_2018: Teiknaðu klefa fyrir hvert dýr. Þessi þraut
        hefur margar lausnir. Skemmtu þér við að finna eina! Hver ferningur er með
        100 díla hliðar.
      courseC_artist_prog_challenge1_2019: Teiknaðu klefa fyrir hvert dýr. Þessi þraut
        hefur margar lausnir. Skemmtu þér við að finna eina! Hver ferningur er með
        100 díla hliðar.
      courseC_artist_prog_challenge2a: |-
        _"Hjálpaðu mér að mála gular línur á þennan veg!"_

        Línubútarnir eru 150, 100 og 200 dílar á lengd!
      courseC_artist_prog_challenge2a_2018: |-
        _"Hjálpaðu mér að mála gular línur á þennan veg!"_

        Línubútarnir eru 150, 100 og 200 dílar á lengd!
      courseC_artist_prog_challenge2a_2019: |-
        _"Hjálpaðu mér að mála gular línur á þennan veg!"_

        Línubútarnir eru 150, 100 og 200 dílar á lengd!
      courseC_collector_loops_challenge2: "_\"Leitum að fjársjóði!\"_ \n\nHjálpaðu
        safnaranum að ná minnst **5** fjársjóðum."
      courseC_collector_loops_challenge2_2018: "_\"Leitum að fjársjóði!\"_ \n\nHjálpaðu
        safnaranum að ná minnst **5** fjársjóðum."
      courseC_collector_loops_challenge2_2019: "_\"Leitum að fjársjóði!\"_ \n\nHjálpaðu
        safnaranum að ná minnst **5** fjársjóðum."
      courseC_collector_prog1: |-
        **Frjáls æfing:** Þetta er ævintýramærin Láral! Láttu hana hreyfast og safna eins miklum fjársjóði og þú getur. Notaðu `safna` kubbinn til að taka upp fjársjóð!

        Dragðu kubba út á vinnusvæðið og reyndu að finna út hvernig er hægt að ná fjársjóði. Náðu minnst einum til að klára þetta borð.
      courseC_collector_prog1_2018: |-
        **Frjáls æfing:** Þetta er ævintýramærin Láral! Láttu hana hreyfast og safna eins miklum fjársjóði og þú getur. Notaðu `safna` kubbinn til að taka upp fjársjóð!

        Dragðu kubba út á vinnusvæðið og reyndu að finna út hvernig er hægt að ná fjársjóði. Náðu minnst einum til að klára þetta borð.
      courseC_collector_prog1_2019: |-
        **Frjáls æfing:** Þetta er ævintýramærin Láral! Láttu hana hreyfast og safna eins miklum fjársjóði og þú getur. Notaðu `safna` kubbinn til að taka upp fjársjóð!

        Dragðu kubba út á vinnusvæðið og reyndu að finna út hvernig er hægt að ná fjársjóði. Náðu minnst einum til að klára þetta borð.
      courseC_collector_prog2: Færðu Láru að fjársjóðnum og notaðu svo <xml><block
        type="collector_collect"/></xml> til að taka hann upp.
      courseC_collector_prog2_2018: Færðu Láru að fjársjóðnum og notaðu svo <xml><block
        type="collector_collect"/></xml> til að taka hann upp.
      courseC_collector_prog2_2019: Færðu Láru að fjársjóðnum og notaðu svo <xml><block
        type="collector_collect"/></xml> til að taka hann upp.
      courseC_collector_prog3: "_\"Röðin skiptir máli\"_ \n\nKubbarnir sem þú þarft
        að nota eru þegar á vinnusvæðinu en ekki tengdir.\\\nRaðaðu þeim til að safna
        öllum fjársjóðunum og leysa þrautina."
      courseC_collector_prog3_2018: "_\"Röðin skiptir máli\"_ \n\nKubbarnir sem þú
        þarft að nota eru þegar á vinnusvæðinu en ekki tengdir.\\\nRaðaðu þeim til
        að safna öllum fjársjóðunum og leysa þrautina."
      courseC_collector_prog3_2019: "_\"Röðin skiptir máli\"_ \n\nKubbarnir sem þú
        þarft að nota eru þegar á vinnusvæðinu en ekki tengdir.\\\nRaðaðu þeim til
        að safna öllum fjársjóðunum og leysa þrautina."
      courseC_collector_prog4: "_\"Röðin skiptir máli\"_\n\nKubbarnir sem þú þarft
        að nota eru þegar á vinnusvæðinu en ekki tengdir.  \n\nRaðaðu þeim til að
        safna öllu gullinu og leysa þrautina."
      courseC_collector_prog4_2018: "_\"Röðin skiptir máli\"_\n\nKubbarnir sem þú
        þarft að nota eru þegar á vinnusvæðinu en ekki tengdir.  \n\nRaðaðu þeim til
        að safna öllu gullinu og leysa þrautina."
      courseC_collector_prog4_2019: "_\"Röðin skiptir máli\"_\n\nKubbarnir sem þú
        þarft að nota eru þegar á vinnusvæðinu en ekki tengdir.  \n\nRaðaðu þeim til
        að safna öllu gullinu og leysa þrautina."
      courseC_collector_prog5: |-
        _"Hjálpaðu mér að safna öllum fjársjóðunum!"_

        Þessir kubbar eru í rangri röð. Getur þú lagað þá?
      courseC_collector_prog5_2018: |-
        _"Hjálpaðu mér að safna öllum fjársjóðunum!"_

        Þessir kubbar eru í rangri röð. Getur þú lagað þá?
      courseC_collector_prog5_2019: |-
        _"Hjálpaðu mér að safna öllum fjársjóðunum!"_

        Þessir kubbar eru í rangri röð. Getur þú lagað þá?
      courseC_collector_prog6: |-
        _"Hjálpaðu mér að safna öllum fjársjóðunum!"_

        Þessir kubbar eru í rangri röð. Settu þá í rétta röð til að safna öllum fjársjóðunum.
      courseC_collector_prog6_2018: |-
        _"Hjálpaðu mér að safna öllum fjársjóðunum!"_

        Þessir kubbar eru í rangri röð. Settu þá í rétta röð til að safna öllum fjársjóðunum.
      courseC_collector_prog6_2019: |-
        _"Hjálpaðu mér að safna öllum fjársjóðunum!"_

        Þessir kubbar eru í rangri röð. Settu þá í rétta röð til að safna öllum fjársjóðunum.
      courseC_collector_prog7: "**Áskorun:** _\"Hvað gengur á hér?\"_\n\nJafnvel þó
        við setjum þessa í rétta röð eru ekki allir kubbarnir hér. \nNotaðu kubba
        úr verkfærakassanum til að safna öllum fjársjóðunum."
      courseC_collector_prog7_2018: "**Áskorun:** _\"Hvað gengur á hér?\"_\n\nJafnvel
        þó við setjum þessa í rétta röð eru ekki allir kubbarnir hér. \nNotaðu kubba
        úr verkfærakassanum til að safna öllum fjársjóðunum."
      courseC_collector_prog7_2019: "**Áskorun:** _\"Hvað gengur á hér?\"_\n\nJafnvel
        þó við setjum þessa í rétta röð eru ekki allir kubbarnir hér. \nNotaðu kubba
        úr verkfærakassanum til að safna öllum fjársjóðunum."
      courseC_collector_prog8: _"Þetta gengur bara vel! Hjálpaðu mér að safna öllum
        fjársjóðunum."_
      courseC_collector_prog8_2018: _"Þetta gengur bara vel! Hjálpaðu mér að safna
        öllum fjársjóðunum."_
      courseC_collector_prog8_2019: _"Þetta gengur bara vel! Hjálpaðu mér að safna
        öllum fjársjóðunum."_
      courseC_collector_prog9: _"Náum öllum fjársjóðnum!"_
      courseC_collector_prog9_2018: _"Náum öllum fjársjóðnum!"_
      courseC_collector_prog9_2019: _"Náum öllum fjársjóðnum!"_
      courseC_collector_prog_challenge2: Í þessum helli má finna 20 fjársjóði. Safnaðu
        að minnsta kosti **10** til að ljúka þessari áskorun!
      courseC_collector_prog_challenge2_2018: Í þessum helli má finna 20 fjársjóði.
        Safnaðu að minnsta kosti **10** til að ljúka þessari áskorun!
      courseC_collector_prog_challenge2_2019: Í þessum helli má finna 20 fjársjóði.
        Safnaðu að minnsta kosti **10** til að ljúka þessari áskorun!
      courseC_data wizard: Ýttu á Keyra. Vitkinn mun láta dýr birtast. Teldu þau.
        Hverju tekurðu eftir?
      courseC_flappy_events1: "Festu `blaka venjulega oft` kubb við `þegar smellt`
        atburðinn og smelltu svo á \"Keyra\".  \n\n* * *\n\nSmelltu eða sláðu á leiksvæðið
        til að koma Flappy til marksins."
      courseC_flappy_events10: "Búðu til þinn eiginn Flappy leik! \n\nÞú getur breytt
        myndefninu og reglunum...jafnvel þyngdaraflinu! Smelltu í lokin á \"Ljúka\"
        til að deila þessu með vinum í símum þeirra."
      courseC_flappy_events10_2018: "Búðu til þinn eiginn Flappy leik! \n\nÞú getur
        breytt myndefninu og reglunum...jafnvel þyngdaraflinu! Smelltu í lokin á \"Ljúka\"
        til að deila þessu með vinum í símum þeirra."
      courseC_flappy_events10_2019: "Búðu til þinn eiginn Flappy leik! \n\nÞú getur
        breytt myndefninu og reglunum...jafnvel þyngdaraflinu! Smelltu í lokin á \"Ljúka\"
        til að deila þessu með vinum í símum þeirra."
      courseC_flappy_events1_2018: "Festu `blaka venjulega oft` kubb við `þegar smellt`
        atburðinn og smelltu svo á \"Keyra\".  \n\n* * *\n\nSmelltu eða sláðu á leiksvæðið
        til að koma Flappy til marksins."
      courseC_flappy_events1_2019: "Festu `blaka venjulega oft` kubb við `þegar smellt`
        atburðinn og smelltu svo á \"Keyra\".  \n\n* * *\n\nSmelltu eða sláðu á leiksvæðið
        til að koma Flappy til marksins."
      courseC_flappy_events2: "Atvikið `þegar keyrt` verður þegar þú ýtir á \"Keyra\"
        og leikurinn fer af stað. \n\nPrófaðu að bæta við kubbi sem stillir hraðann
        þegar ýtt er á \"Keyra\". \n\n* * *\n\nSpilaðu leikinn og fljúgðu í mark til
        að halda áfram."
      courseC_flappy_events2_2018: "Atvikið `þegar keyrt` verður þegar þú ýtir á \"Keyra\"
        og leikurinn fer af stað. \n\nPrófaðu að bæta við kubbi sem stillir hraðann
        þegar ýtt er á \"Keyra\". \n\n* * *\n\nSpilaðu leikinn og fljúgðu í mark til
        að halda áfram."
      courseC_flappy_events2_2019: "Atvikið `þegar keyrt` verður þegar þú ýtir á \"Keyra\"
        og leikurinn fer af stað. \n\nPrófaðu að bæta við kubbi sem stillir hraðann
        þegar ýtt er á \"Keyra\". \n\n* * *\n\nSpilaðu leikinn og fljúgðu í mark til
        að halda áfram."
      courseC_flappy_events3: "Nú höfum við bætt við jörð. \n\nFestu kubbinn `ljúka
        leik` við atvikið `þegar rekst á jörð`. \n\n\\--\n\nSpilaðu leikinn og láttu
        fuglinn hrapa til jarðar til að halda áfram."
      courseC_flappy_events3_2018: "Nú höfum við bætt við jörð. \n\nFestu kubbinn
        `ljúka leik` við atvikið `þegar rekst á jörð`. \n\n\\--\n\nSpilaðu leikinn
        og láttu fuglinn hrapa til jarðar til að halda áfram."
      courseC_flappy_events3_2019: "Nú höfum við bætt við jörð. \n\nFestu kubbinn
        `ljúka leik` við atvikið `þegar rekst á jörð`. \n\n\\--\n\nSpilaðu leikinn
        og láttu fuglinn hrapa til jarðar til að halda áfram."
      courseC_flappy_events4: "Flappy mun fljúga í gegnum hindranir nema þú skrifir
        kóða til að láta hann rekast á. \n\nTengdu kubb við kubbinn \"þegar rekst
        á hindrun\". Kóðinn þinn verður að ljúka leiknum þegar Flappy rekst á fyrstu
        pípurnar."
      courseC_flappy_events4_2018: "Flappy mun fljúga í gegnum hindranir nema þú skrifir
        kóða til að láta hann rekast á. \n\nTengdu kubb við kubbinn \"þegar rekst
        á hindrun\". Kóðinn þinn verður að ljúka leiknum þegar Flappy rekst á fyrstu
        pípurnar."
      courseC_flappy_events4_2019: "Flappy mun fljúga í gegnum hindranir nema þú skrifir
        kóða til að láta hann rekast á. \n\nTengdu kubb við kubbinn \"þegar rekst
        á hindrun\". Kóðinn þinn verður að ljúka leiknum þegar Flappy rekst á fyrstu
        pípurnar."
      courseC_flappy_events5: "Við höfum bætt við stigatöflu til að telja stig þegar
        Flappy kemst fram hjá hindrunum. \n\nBætti kubbi sem skorar stig við atvikið
        `þegar kemst framhjá hindrun` og ýttu svo á \"Keyra\" til að láta Flappy fljúga
        í gegnum fyrstu pípurnar."
      courseC_flappy_events5_2018: "Við höfum bætt við stigatöflu til að telja stig
        þegar Flappy kemst fram hjá hindrunum. \n\nBætti kubbi sem skorar stig við
        atvikið `þegar kemst framhjá hindrun` og ýttu svo á \"Keyra\" til að láta
        Flappy fljúga í gegnum fyrstu pípurnar."
      courseC_flappy_events5_2019: "Við höfum bætt við stigatöflu til að telja stig
        þegar Flappy kemst fram hjá hindrunum. \n\nBætti kubbi sem skorar stig við
        atvikið `þegar kemst framhjá hindrun` og ýttu svo á \"Keyra\" til að láta
        Flappy fljúga í gegnum fyrstu pípurnar."
      courseC_flappy_events6: "Smelltu á litlu örina á kubbnum `blaka` og láttu fuglinn
        blaka vængjunum öðruvísi. \n\nGáðu hvort þú getur samt skorað stig þó að þú
        hafir látið Flappy blaka meira eða minna í hvert sinn sem þú smellir."
      courseC_flappy_events6_2018: "Smelltu á litlu örina á kubbnum `blaka` og láttu
        fuglinn blaka vængjunum öðruvísi. \n\nGáðu hvort þú getur samt skorað stig
        þó að þú hafir látið Flappy blaka meira eða minna í hvert sinn sem þú smellir."
      courseC_flappy_events6_2019: "Smelltu á litlu örina á kubbnum `blaka` og láttu
        fuglinn blaka vængjunum öðruvísi. \n\nGáðu hvort þú getur samt skorað stig
        þó að þú hafir látið Flappy blaka meira eða minna í hvert sinn sem þú smellir."
      courseC_flappy_events7: Prófaðu svo að breyta umhverfinu með því að tengja kubb
        við `þegar keyrt` kubbinn.
      courseC_flappy_events7_2018: Prófaðu svo að breyta umhverfinu með því að tengja
        kubb við `þegar keyrt` kubbinn.
      courseC_flappy_events7_2019: Prófaðu svo að breyta umhverfinu með því að tengja
        kubb við `þegar keyrt` kubbinn.
      courseC_flappy_events8: |-
        Þú getur stillt bakgrunninn með hvaða atviki sem er, ekki bara þegar leikurinn byrjar.

        Prófaðu að láta bakgrunninn breytast af handahófi þegar önnur atvik eiga sér stað...til dæmis farið framhjá hindrun.
      courseC_flappy_events8_2018: |-
        Þú getur stillt bakgrunninn með hvaða atviki sem er, ekki bara þegar leikurinn byrjar.

        Prófaðu að láta bakgrunninn breytast af handahófi þegar önnur atvik eiga sér stað...til dæmis farið framhjá hindrun.
      courseC_flappy_events8_2019: |-
        Þú getur stillt bakgrunninn með hvaða atviki sem er, ekki bara þegar leikurinn byrjar.

        Prófaðu að láta bakgrunninn breytast af handahófi þegar önnur atvik eiga sér stað...til dæmis farið framhjá hindrun.
      courseC_flappy_events9: Breyttu þessu nú þannig að í stað þess að leikurinn
        endi þegar Flappy rekst á hindrun þá stillist skorið aftur á 0.
      courseC_flappy_events9_2018: Breyttu þessu nú þannig að í stað þess að leikurinn
        endi þegar Flappy rekst á hindrun þá stillist skorið aftur á 0.
      courseC_flappy_events9_2019: Breyttu þessu nú þannig að í stað þess að leikurinn
        endi þegar Flappy rekst á hindrun þá stillist skorið aftur á 0.
      courseC_harvester_loops1: "Lykkjur geta endurtekið fleira en bara hreyfingar.
        \n\nNotaðu lykkjur til að safna öllum fjórum graskerunum."
      courseC_harvester_loops10: Safnaðu öllum maísnum og öllum graskerunum.
      courseC_harvester_loops10_2018: Safnaðu öllum maísnum og öllum graskerunum.
      courseC_harvester_loops10_2019: Safnaðu öllum maísnum og öllum graskerunum.
      courseC_harvester_loops11: Safnaðu öllum maísnum og öllum graskerunum.
      courseC_harvester_loops11_2018: Safnaðu öllum maísnum og öllum graskerunum.
      courseC_harvester_loops11_2019: Safnaðu öllum maísnum og öllum graskerunum.
      courseC_harvester_loops1_2018: "Lykkjur geta endurtekið fleira en bara hreyfingar.
        \n\nNotaðu lykkjur til að safna öllum fjórum graskerunum."
      courseC_harvester_loops1_2019: "Lykkjur geta endurtekið fleira en bara hreyfingar.
        \n\nNotaðu lykkjur til að safna öllum fjórum graskerunum."
      courseC_harvester_loops2: Getur þú notað tvær lykkjur til að fara að graskerunum
        og safna þeim öllum?
      courseC_harvester_loops2_2018: Getur þú notað tvær lykkjur til að fara að graskerunum
        og safna þeim öllum?
      courseC_harvester_loops2_2019: Getur þú notað tvær lykkjur til að fara að graskerunum
        og safna þeim öllum?
      courseC_harvester_loops3: Safnaðu öllum graskerunum.
      courseC_harvester_loops3_2018: Safnaðu öllum graskerunum.
      courseC_harvester_loops3_2019: Safnaðu öllum graskerunum.
      courseC_harvester_loops4: |-
        Hér er líka verið að rækta maís!

        Hirtu allan maísinn og öll graskerin.
      courseC_harvester_loops4_2018: |-
        Hér er líka verið að rækta maís!

        Hirtu allan maísinn og öll graskerin.
      courseC_harvester_loops4_2019: |-
        Hér er líka verið að rækta maís!

        Hirtu allan maísinn og öll graskerin.
      courseC_harvester_loops5: Safnaðu öllum maísnum og öllum graskerunum.
      courseC_harvester_loops5_2018: Safnaðu öllum maísnum og öllum graskerunum.
      courseC_harvester_loops5_2019: Safnaðu öllum maísnum og öllum graskerunum.
      courseC_harvester_loops6: Safnaðu öllum maísnum og öllum graskerunum.
      courseC_harvester_loops6_2018: Safnaðu öllum maísnum og öllum graskerunum.
      courseC_harvester_loops6_2019: Safnaðu öllum maísnum og öllum graskerunum.
      courseC_harvester_loops7: Safnaðu öllum maísnum og öllum graskerunum.
      courseC_harvester_loops7_2018: Safnaðu öllum maísnum og öllum graskerunum.
      courseC_harvester_loops7_2019: Safnaðu öllum maísnum og öllum graskerunum.
      courseC_harvester_loops8: |-
        **Áskorun:** Safnaðu öllum maísnum og öllum graskerunum.

        Þú getur leyst þess þraut eins og þú vilt, en lausnin mun kosta annað hvort mikla vinnu eða mikla hugsun!
      courseC_harvester_loops8_2018: |-
        **Áskorun:** Safnaðu öllum maísnum og öllum graskerunum.

        Þú getur leyst þess þraut eins og þú vilt, en lausnin mun kosta annað hvort mikla vinnu eða mikla hugsun!
      courseC_harvester_loops8_2019: |-
        **Áskorun:** Safnaðu öllum maísnum og öllum graskerunum.

        Þú getur leyst þess þraut eins og þú vilt, en lausnin mun kosta annað hvort mikla vinnu eða mikla hugsun!
      courseC_harvester_loops9: Safnaðu öllum maísnum og öllum graskerunum.
      courseC_harvester_loops9_2018: Safnaðu öllum maísnum og öllum graskerunum.
      courseC_harvester_loops9_2019: Safnaðu öllum maísnum og öllum graskerunum.
      courseC_harvester_loops_challenge2: |-
        Safnaðu öllu kálinu.
        Forðastu tré og tún!
      courseC_harvester_loops_challenge2_2018: |-
        Safnaðu öllu kálinu.
        Forðastu tré og tún!
      courseC_harvester_loops_challenge2_2019: |-
        Safnaðu öllu kálinu.
        Forðastu tré og tún!
      courseC_maze_debugging1: "Þessi kóði er ekki alveg í lagi! \n\nLagaðu kóðann
        svo Scrat komist nú til akarnsins."
      courseC_maze_debugging1_2018: "Þessi kóði er ekki alveg í lagi! \n\nLagaðu kóðann
        svo Scrat komist nú til akarnsins."
      courseC_maze_debugging1_2019: "Þessi kóði er ekki alveg í lagi! \n\nLagaðu kóðann
        svo Scrat komist nú til akarnsins."
      courseC_maze_debugging3: "Það er eitthvað ekki í lagi. \n\nFjarlægðu kubba svo
        Scrat komist til akarnsins!"
      courseC_maze_debugging3_2018: "Það er eitthvað ekki í lagi. \n\nFjarlægðu kubba
        svo Scrat komist til akarnsins!"
      courseC_maze_debugging3_2019: "Það er eitthvað ekki í lagi. \n\nFjarlægðu kubba
        svo Scrat komist til akarnsins!"
      courseC_maze_debugging_challenge2: Ef Scrat snýst of oft, gæti hann svimað!
        Hjálpaðu honum að ná akarninu með aðeins fjórum `snúa` skipunum.
      courseC_maze_debugging_challenge2_2018: Ef Scrat snýst of oft, gæti hann svimað!
        Hjálpaðu honum að ná akarninu með aðeins fjórum `snúa` skipunum.
      courseC_maze_debugging_challenge2_2019: Ef Scrat snýst of oft, gæti hann svimað!
        Hjálpaðu honum að ná akarninu með aðeins fjórum `snúa` skipunum.
      courseC_maze_programming1: 'Í þessari þraut: Dragðu alla kubbana saman og smelltu
        á "Keyra" til að sjá hvað gerist!'
      courseC_maze_programming1_2018: 'Í þessari þraut: Dragðu alla kubbana saman
        og smelltu á "Keyra" til að sjá hvað gerist!'
      courseC_maze_programming1_2019: 'Í þessari þraut: Dragðu alla kubbana saman
        og smelltu á "Keyra" til að sjá hvað gerist!'
      courseC_maze_programming2: Dragðu enn einn <xml><block type="maze_moveForward"/></xml>
        kubb úr verkfærakassanum til að ljúka við kóðann.
      courseC_maze_programming2_2018: Dragðu enn einn <xml><block type="maze_moveForward"/></xml>
        kubb úr verkfærakassanum til að ljúka við kóðann.
      courseC_maze_programming2_2019: Dragðu enn einn <xml><block type="maze_moveForward"/></xml>
        kubb úr verkfærakassanum til að ljúka við kóðann.
      courseC_maze_programming3: "_\"Þetta svín ýfir á mér fjaðrirnar.\"_\n\nÞað er
        einn aukakubbur sem mun láta fuglinn hrapa. \nHentu kubbnum með því að losa
        hann frá gráu kubbunum og draga hann aftur í verkfærakassann."
      courseC_maze_programming3_2018: "_\"Þetta svín ýfir á mér fjaðrirnar.\"_\n\nÞað
        er einn aukakubbur sem mun láta fuglinn hrapa. \nHentu kubbnum með því að
        losa hann frá gráu kubbunum og draga hann aftur í verkfærakassann."
      courseC_maze_programming3_2019: "_\"Þetta svín ýfir á mér fjaðrirnar.\"_\n\nÞað
        er einn aukakubbur sem mun láta fuglinn hrapa. \nHentu kubbnum með því að
        losa hann frá gráu kubbunum og draga hann aftur í verkfærakassann."
      courseC_maze_programming4: |-
        _"Færðu mig eftir slóðinni að kjánalega svíninu."_

        TNT sprengiefnið gæti valdið fjaðrafoki!
      courseC_maze_programming4_2018: |-
        _"Færðu mig eftir slóðinni að kjánalega svíninu."_

        TNT sprengiefnið gæti valdið fjaðrafoki!
      courseC_maze_programming4_2019: |-
        _"Færðu mig eftir slóðinni að kjánalega svíninu."_

        TNT sprengiefnið gæti valdið fjaðrafoki!
      courseC_maze_programming5: |-
        _"Fylgdu þessari slóð til að koma mér til svínsins!"_

        Gættu þín á TNT.
      courseC_maze_programming5_2018: |-
        _"Fylgdu þessari slóð til að koma mér til svínsins!"_

        Gættu þín á TNT.
      courseC_maze_programming5_2019: |-
        _"Fylgdu þessari slóð til að koma mér til svínsins!"_

        Gættu þín á TNT.
      courseC_maze_programming6: |-
        _"Haltu ró þinni og hjálpaðu mér að finna þetta vonda svín. Annars gæti ég reiðst!"_

        Komdu fuglinum til svínsins en varaðu þig á TNT sprengjum.
      courseC_maze_programming6_2018: |-
        _"Haltu ró þinni og hjálpaðu mér að finna þetta vonda svín. Annars gæti ég reiðst!"_

        Komdu fuglinum til svínsins en varaðu þig á TNT sprengjum.
      courseC_maze_programming6_2019: |-
        _"Haltu ró þinni og hjálpaðu mér að finna þetta vonda svín. Annars gæti ég reiðst!"_

        Komdu fuglinum til svínsins en varaðu þig á TNT sprengjum.
      courseC_maze_programming7: |-
        _"Nú er ég sko reiður!"_

        **Áskorun:** Það er fullt af villum í þessum kóða. Þú þarft að fjarlægja kubba og bæta öðrum við.
      courseC_maze_programming7_2018: |-
        _"Nú er ég sko reiður!"_

        **Áskorun:** Það er fullt af villum í þessum kóða. Þú þarft að fjarlægja kubba og bæta öðrum við.
      courseC_maze_programming7_2019: |-
        _"Nú er ég sko reiður!"_

        **Áskorun:** Það er fullt af villum í þessum kóða. Þú þarft að fjarlægja kubba og bæta öðrum við.
      courseC_maze_programming8: _"Haltu ró þinni og hjálpaðu mér að finna vonda svínið."_
      courseC_maze_programming8_2018: _"Haltu ró þinni og hjálpaðu mér að finna vonda
        svínið."_
      courseC_maze_programming8_2019: _"Haltu ró þinni og hjálpaðu mér að finna vonda
        svínið."_
      courseC_maze_programming8_predict1: _"Haltu ró þinni og hjálpaðu mér að finna
        vonda svínið."_
      courseC_maze_programming8_predict1_2018: _"Haltu ró þinni og hjálpaðu mér að
        finna vonda svínið."_
      courseC_maze_programming8_predict1_2019: _"Haltu ró þinni og hjálpaðu mér að
        finna vonda svínið."_
      courseC_maze_programming9: _"Hjálpaðu mér að laumast að svíninu. Þú ræður hvernig!"_
      courseC_maze_programming9_2018: _"Hjálpaðu mér að laumast að svíninu. Þú ræður
        hvernig!"_
      courseC_maze_programming9_2019: _"Hjálpaðu mér að laumast að svíninu. Þú ræður
        hvernig!"_
      courseC_maze_programming_challenge1: 'Fuglinn þarf hjálp! Svínið er í feluleik
        og markmiðið er að finna það. '
      courseC_maze_programming_challenge1_2018: 'Fuglinn þarf hjálp! Svínið er í feluleik
        og markmiðið er að finna það. '
      courseC_maze_programming_challenge1_2019: 'Fuglinn þarf hjálp! Svínið er í feluleik
        og markmiðið er að finna það. '
      courseC_maze_programming_challenge2: Stundum er fleiri en leið til að leysa
        þraut. Stundum er fljótlegra að fara aftur á bak heldur en áfram!
      courseC_maze_programming_challenge2_2018: Stundum er fleiri en leið til að leysa
        þraut. Stundum er fljótlegra að fara aftur á bak heldur en áfram!
      courseC_maze_programming_challenge2_2019: Stundum er fleiri en leið til að leysa
        þraut. Stundum er fljótlegra að fara aftur á bak heldur en áfram!
      courseC_starWars_loops1: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _\"Farðu og náðu í brotamálminn, BB-8!\"_ \n\nNotaðu fimm eins kubba til að
        ná brotamálminum. Brotamálmur glóir svona: ![](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)"
      courseC_starWars_loops10: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Áfram BB-8!"_

        Þér gengur vel! Haltu því áfram!
      courseC_starWars_loops10_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Áfram BB-8!"_

        Þér gengur vel! Haltu því áfram!
      courseC_starWars_loops10_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Áfram BB-8!"_

        Þér gengur vel! Haltu því áfram!
      courseC_starWars_loops11: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Haltu áfram, BB-8!"_

        Þú ert alveg að ná þessu! Í þetta skipti mátt þú velja slóðina!
      courseC_starWars_loops11_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Haltu áfram, BB-8!"_

        Þú ert alveg að ná þessu! Í þetta skipti mátt þú velja slóðina!
      courseC_starWars_loops11_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Haltu áfram, BB-8!"_

        Þú ert alveg að ná þessu! Í þetta skipti mátt þú velja slóðina!
      courseC_starWars_loops1_2018: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _\"Farðu og náðu í brotamálminn, BB-8!\"_ \n\nNotaðu fimm eins kubba til að
        ná brotamálminum. Brotamálmur glóir svona: ![](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)"
      courseC_starWars_loops1_2019: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _\"Farðu og náðu í brotamálminn, BB-8!\"_ \n\nNotaðu fimm eins kubba til að
        ná brotamálminum. Brotamálmur glóir svona: ![](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)"
      courseC_starWars_loops2: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Áfram BB-8!"_

        Til að ná öllum brotamálminum ættirðu að prófa að búa til lykkju úr `endurtaka` kubbi sem inniheldur einn kubb.
      courseC_starWars_loops2_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Áfram BB-8!"_

        Til að ná öllum brotamálminum ættirðu að prófa að búa til lykkju úr `endurtaka` kubbi sem inniheldur einn kubb.
      courseC_starWars_loops2_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Áfram BB-8!"_

        Til að ná öllum brotamálminum ættirðu að prófa að búa til lykkju úr `endurtaka` kubbi sem inniheldur einn kubb.
      courseC_starWars_loops2_copy: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Áfram BB-8!"_

        Til að ná öllum brotamálminum ættirðu að prófa að búa til lykkju úr `endurtaka` kubbi sem inniheldur einn kubb.
      courseC_starWars_loops4: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Haltu áfram, BB-8."_

        Í þessari þraut munu tvær `endurtaka` lykkjur hjálpa þér að koma BB-8 að öllum brotamálminum með sem fæstum kubbum!
      courseC_starWars_loops4_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Haltu áfram, BB-8."_

        Í þessari þraut munu tvær `endurtaka` lykkjur hjálpa þér að koma BB-8 að öllum brotamálminum með sem fæstum kubbum!
      courseC_starWars_loops4_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Haltu áfram, BB-8."_

        Í þessari þraut munu tvær `endurtaka` lykkjur hjálpa þér að koma BB-8 að öllum brotamálminum með sem fæstum kubbum!
      courseC_starWars_loops4_copy: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Haltu áfram, BB-8."_

        Í þessari þraut munu tvær `endurtaka` lykkjur hjálpa þér að koma BB-8 að öllum brotamálminum með sem fæstum kubbum!
      courseC_starWars_loops5: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Áfram BB-8!"_'
      courseC_starWars_loops5_2018: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Áfram BB-8!"_'
      courseC_starWars_loops5_2019: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Áfram BB-8!"_'
      courseC_starWars_loops5_copy: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Áfram BB-8!"_'
      courseC_starWars_loops6: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Nærðu honum öllum?"_

        Lykkjur geta innihaldið fleiri en einn kubb!  Getur þú sett þessa runu í lykkju?
      courseC_starWars_loops6_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Nærðu honum öllum?"_

        Lykkjur geta innihaldið fleiri en einn kubb!  Getur þú sett þessa runu í lykkju?
      courseC_starWars_loops6_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Nærðu honum öllum?"_

        Lykkjur geta innihaldið fleiri en einn kubb!  Getur þú sett þessa runu í lykkju?
      courseC_starWars_loops6_copy: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Nærðu honum öllum?"_

        Lykkjur geta innihaldið fleiri en einn kubb!  Getur þú sett þessa runu í lykkju?
      courseC_starWars_loops7: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Þú getur þetta!"_

        Getur þú reynt að ná öllum brotamálminum með bara einni lykkju? Prófaðu að forrita þetta skref fyrir skref og finna endurtekinn kóða sem mætti setja í lykkju.
      courseC_starWars_loops7_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Þú getur þetta!"_

        Getur þú reynt að ná öllum brotamálminum með bara einni lykkju? Prófaðu að forrita þetta skref fyrir skref og finna endurtekinn kóða sem mætti setja í lykkju.
      courseC_starWars_loops7_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Þú getur þetta!"_

        Getur þú reynt að ná öllum brotamálminum með bara einni lykkju? Prófaðu að forrita þetta skref fyrir skref og finna endurtekinn kóða sem mætti setja í lykkju.
      courseC_starWars_loops7_copy: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Þú getur þetta!"_

        Getur þú reynt að ná öllum brotamálminum með bara einni lykkju? Prófaðu að forrita þetta skref fyrir skref og finna endurtekinn kóða sem mætti setja í lykkju.
      courseC_starWars_loops8: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Haltu áfram, BB-8."_

        **Áskorun:** Notaðu hugmyndir úr síðustu þrautum saman til að ljúka þessu stigi.
      courseC_starWars_loops8_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Haltu áfram, BB-8."_

        **Áskorun:** Notaðu hugmyndir úr síðustu þrautum saman til að ljúka þessu stigi.
      courseC_starWars_loops8_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Haltu áfram, BB-8."_

        **Áskorun:** Notaðu hugmyndir úr síðustu þrautum saman til að ljúka þessu stigi.
      courseC_starWars_loops8_copy: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Haltu áfram, BB-8."_

        **Áskorun:** Notaðu hugmyndir úr síðustu þrautum saman til að ljúka þessu stigi.
      courseC_starWars_loops9: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Haltu áfram!"_

        Notaðu það sem þú hefur lært til að hirða upp allan brotamálminn!
      courseC_starWars_loops9_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Haltu áfram!"_

        Notaðu það sem þú hefur lært til að hirða upp allan brotamálminn!
      courseC_starWars_loops9_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Haltu áfram!"_

        Notaðu það sem þú hefur lært til að hirða upp allan brotamálminn!
      courseD_artist_1_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Hæ, ég heiti Elsa frá Arendelle, hjálpaðu mér að teikna.”_\n\nTeiknaðu sexhyrning
        með 50 díla langar hliðar.  \n\n* * *\n\nTil að teikna sexhyrning þarftu að:
        \n\n-   færa áfram um **50** díla\n-   snúa til hægri um **60** gráður\n-
        \  endurtaka þetta alls **6** sinnum"
      courseD_artist_1_2018_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Hæ, ég heiti Elsa frá Arendelle, hjálpaðu mér að teikna.”_\n\nTeiknaðu sexhyrning
        með 50 díla langar hliðar.  \n\n* * *\n\nTil að teikna sexhyrning þarftu að:
        \n\n-   færa áfram um **50** díla\n-   snúa til hægri um **60** gráður\n-
        \  endurtaka þetta alls **6** sinnum"
      courseD_artist_2_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Vel gert!”_\n\nEftir sexhyrninginn skaltu snúa til hægri um **60** gráður
        og teikna svo strik sem er **150** dílar á lengd.   \n\nLjúktu þessu með því
        að láta Elsu hoppa inn á mitt leiksvæðið með <xml><block type=\"jump_to\"><title
        name=\"VALUE\">middle center</title></block></xml> kubbnum."
      courseD_artist_2_2018_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Vel gert!”_\n\nEftir sexhyrninginn skaltu snúa til hægri um **60** gráður
        og teikna svo strik sem er **150** dílar á lengd.   \n\nLjúktu þessu með því
        að láta Elsu hoppa inn á mitt leiksvæðið með <xml><block type=\"jump_to\"><title
        name=\"VALUE\">middle center</title></block></xml> kubbnum."
      courseD_artist_3_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _“Búum til snjókorn.”_

        Til að þessi kóði myndi snjókorn skaltu falda allan kóðann inn í aðra `endurtaka` lykkju og keyra hann alls **6** sinnum.  Þú ættir aðeins að þurfa að bæta við einum kubbi.
      courseD_artist_3_2018_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _“Búum til snjókorn.”_

        Til að þessi kóði myndi snjókorn skaltu falda allan kóðann inn í aðra `endurtaka` lykkju og keyra hann alls **6** sinnum.  Þú ættir aðeins að þurfa að bæta við einum kubbi.
      courseD_artist_4_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"´Gerum snjókornin sérstök!"_

        **Pæling:** Hvar þarft þú að bæta við kóða ef þú vilt teikna pínulítinn ferning við endann á hverju löngu striki?

        * * *

        Þú getur prófað hvað sem þú vilt í þessari þraut en hér er hugmynd:

        Prófaðu að búa til pínulítinn ferning á enda hvers striks

        -   Hver hlið ætti að vera 15 dílar á lengd
        -   Þú ættir að snúa um 90 gráður
        -   Endurtaktu þetta alls 4 sinnum
      courseD_artist_4_2018_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"´Gerum snjókornin sérstök!"_

        **Pæling:** Hvar þarft þú að bæta við kóða ef þú vilt teikna pínulítinn ferning við endann á hverju löngu striki?

        * * *

        Þú getur prófað hvað sem þú vilt í þessari þraut en hér er hugmynd:

        Prófaðu að búa til pínulítinn ferning á enda hvers striks

        -   Hver hlið ætti að vera 15 dílar á lengd
        -   Þú ættir að snúa um 90 gráður
        -   Endurtaktu þetta alls 4 sinnum
      courseD_artist_5_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Prófaðu að breyta lögun eða lengd línanna eftir eigin höfði!"_

        **Hugkveikja:** Þú getur breytt teikningunni eins og þú vilt en hér er hugmynd:

        -   Prófaðu að víxla formunum svo að formið í miðju snjókornsins sé að utanverðu og öfugt!
      courseD_artist_5_2018_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Prófaðu að breyta lögun eða lengd línanna eftir eigin höfði!\"_\n\n<br/>
        \ \n\n**Hugmynd:** Þú getur breytt teikningunni eins og þú vilt en hér er
        hugmynd:\n\n-   Prófðu að víxla lykkjunum svo að innri lykkjan nú sé ytri
        lykkja!"
      courseD_artist_6_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Prófum eitthvað nýtt. Skautaðu nú í krákustíg."_

        <br/>

        **Hugmynd:** Prófaðu að skipta 150 díla löngu línunni í 6 stuttar línur sem hver er **24** dílar

        -   Snúðu um **45** gráður vinstri og hægri til skiptis eftir hverja stutta línu til að mynda krákustíginn
        -   Hvar þarftu að setja nýjan `endurtaka` kubb til að þetta sé hægt?
        -   Hversu oft þarftu að endurtaka 2-línu mynstrið til að fá 6 línur alls?
      courseD_artist_6_2018_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Prófum eitthvað nýtt. Skautaðu nú í krákustíg."_

        <br/>

        **Hugmynd:** Prófaðu að skipta 150 díla löngu línunni í 6 stuttar línur sem hver er **24** dílar

        -   Snúðu um **45** gráður vinstri og hægri til skiptis eftir hverja stutta línu til að mynda krákustíginn
        -   Hvar þarftu að setja nýjan `endurtaka` kubb til að þetta sé hægt?
        -   Hversu oft þarftu að endurtaka 2-línu mynstrið til að fá 6 línur alls?
      courseD_artist_binary1: |-
        Hér færðu grind með reitum sem þú getur farið í gegnum og búið til mynstur með því að kveikja aðeins á sumum reitunum.

        Notaðu kubbana hér fyrir neðan til að láta listamanninn teikna tvenndartöluna "01010101" í fyrstu röðina.
      courseD_artist_binary1_2018: |-
        Hér færðu grind með reitum sem þú getur farið í gegnum og búið til mynstur með því að kveikja aðeins á sumum reitunum.

        Notaðu kubbana hér fyrir neðan til að láta listamanninn teikna tvenndartöluna "01010101" í fyrstu röðina.
      courseD_artist_binary1_2019: |-
        Hér færðu grind með reitum sem þú getur farið í gegnum og búið til mynstur með því að kveikja aðeins á sumum reitunum.

        Notaðu kubbana hér fyrir neðan til að láta listamanninn teikna tvenndartöluna "01010101" í fyrstu röðina.
      courseD_artist_binary2: "Hér er fall sem tekur tvíundarstreng með 1 og 0 og
        segir listamanninum að færa sig frá vinstri til hægri niður eftir myndinni.
        \n\n* * *\n\nListamaðurinn á að lita þá reiti svarta þar sem 1 er í strengnum
        en sleppa að lita ef það er 0. \n\n* * *\n\n**Keyrðu þennan kóða til að sjá
        hvernig listamaðurinn notar tvíundir til að teikna mynstur.**"
      courseD_artist_binary2_2018: "Hér er fall sem tekur tvíundarstreng með 1 og
        0 og segir listamanninum að færa sig frá vinstri til hægri niður eftir myndinni.
        \n\n* * *\n\nListamaðurinn á að lita þá reiti svarta þar sem 1 er í strengnum
        en sleppa að lita ef það er 0. \n\n* * *\n\n**Keyrðu þennan kóða til að sjá
        hvernig listamaðurinn notar tvíundir til að teikna mynstur.**"
      courseD_artist_binary2_2019: "Hér er fall sem tekur tvíundarstreng með 1 og
        0 og segir listamanninum að færa sig frá vinstri til hægri niður eftir myndinni.
        \n\n* * *\n\nListamaðurinn á að lita þá reiti svarta þar sem 1 er í strengnum
        en sleppa að lita ef það er 0. \n\n* * *\n\n**Keyrðu þennan kóða til að sjá
        hvernig listamaðurinn notar tvíundir til að teikna mynstur.**"
      courseD_artist_binary_challenge1_2018: Þú mátt aðeins nota hvert tvíundargildi
        (0 eða 1) einu sinni í þrautinni. Prófaðu að nota faldaðar lykkjur til að
        ljúka teikningunni.
      courseD_artist_binary_challenge1_2019: Þú mátt aðeins nota hvert tvíundargildi
        (0 eða 1) einu sinni í þrautinni. Prófaðu að nota faldaðar lykkjur til að
        ljúka teikningunni.
      courseD_artist_binary_challenge2_2018: "Þessi grind sýnir 256 bita - það þýðir
        að lítil breyting getur leitt til mikilla vandræða. Hefurðu nægt úthald til
        að koma þessu lógói aftur í rétt horf?\\\r\n\\\r\n![](https://images.code.org/74e15f513982b47762dd33ebbc21e5e9-image-1498776314610.png)"
      courseD_artist_binary_challenge2_2019: "Þessi grind sýnir 256 bita - það þýðir
        að lítil breyting getur leitt til mikilla vandræða. Hefurðu nægt úthald til
        að koma þessu lógói aftur í rétt horf?\\\r\n\\\r\n![](https://images.code.org/74e15f513982b47762dd33ebbc21e5e9-image-1498776314610.png)"
      courseD_artist_nestedLoops1a: "Endurtaktu nú þríhyrninginn 6 sinnum. \n\nSnúðu
        um 60 gráður eftir hvern þríhyrning. "
      courseD_artist_nestedLoops1a_2018: "Endurtaktu nú þríhyrninginn 6 sinnum. \n\nSnúðu
        um 60 gráður eftir hvern þríhyrning. "
      courseD_artist_nestedLoops1a_2019: "Endurtaktu nú þríhyrninginn 6 sinnum. \n\nSnúðu
        um 60 gráður eftir hvern þríhyrning. "
      courseD_artist_nestedLoops2: |-
        Í þetta sinn áttu að ljúka þrautinni með sem allra fæstum kubbum.

        Eftir hvern þríhyrning þarf að snúa um 60 gráður áður en sá næsti er teiknaður.
        Sjáðu hvað er miklu auðveldara með **földuðum lykkjum**?
      courseD_artist_nestedLoops2_2018: |-
        Í þetta sinn áttu að ljúka þrautinni með sem allra fæstum kubbum.

        Eftir hvern þríhyrning þarf að snúa um 60 gráður áður en sá næsti er teiknaður.
        Sjáðu hvað er miklu auðveldara með **földuðum lykkjum**?
      courseD_artist_nestedLoops2_2019: |-
        Í þetta sinn áttu að ljúka þrautinni með sem allra fæstum kubbum.

        Eftir hvern þríhyrning þarf að snúa um 60 gráður áður en sá næsti er teiknaður.
        Sjáðu hvað er miklu auðveldara með **földuðum lykkjum**?
      courseD_artist_nestedLoops4: "Fínt! Gerðu það sama með þessa hringa. \n\n-   Hver
        hringur er gerður með því að færa um 1 díl og snúa um 1 gráðu og gera það
        360 sinnum.\n-   Hver hringur byrjar 50 dílum frá þeim stað sem síðasti hringur
        endaði"
      courseD_artist_nestedLoops4_2018: "Fínt! Gerðu það sama með þessa hringa. \n\n-
        \  Hver hringur er gerður með því að færa um 1 díl og snúa um 1 gráðu og gera
        það 360 sinnum.\n-   Hver hringur byrjar 50 dílum frá þeim stað sem síðasti
        hringur endaði"
      courseD_artist_nestedLoops4_2019: "Fínt! Gerðu það sama með þessa hringa. \n\n-
        \  Hver hringur er gerður með því að færa um 1 díl og snúa um 1 gráðu og gera
        það 360 sinnum.\n-   Hver hringur byrjar 50 dílum frá þeim stað sem síðasti
        hringur endaði"
      courseD_artist_nestedLoops5: |-
        Hvað gerist ef þú snýrð líka um 90 gráður á milli hringa?

        (Til að fá þessa mynd þarftu enn að hoppa um 50 díla á milli hringa)
      courseD_artist_nestedLoops5_2018: |-
        Hvað gerist ef þú snýrð líka um 90 gráður á milli hringa?

        (Til að fá þessa mynd þarftu enn að hoppa um 50 díla á milli hringa)
      courseD_artist_nestedLoops5_2019: |-
        Hvað gerist ef þú snýrð líka um 90 gráður á milli hringa?

        (Til að fá þessa mynd þarftu enn að hoppa um 50 díla á milli hringa)
      courseD_artist_nestedLoops7: |-
        Notaðu það sem þú hefur lært til að gera þessa teikningu.

        -   Hver ferningur hefur **100 díla hliðar** og **90 gráðu horn**
        -   Þú þarft að snúa um **60 gráður á milli ferninga**. Hvers vegna?
            Vegna þess að það eru 6 ferningar og 360 gráður (snúið í heilan hring) deilt með 6 eru 60 gráður.
        -   Gættu þess að hoppa **50 díla á milli ferninga**
      courseD_artist_nestedLoops7_2018: |-
        Notaðu það sem þú hefur lært til að gera þessa teikningu.

        -   Hver ferningur hefur **100 díla hliðar** og **90 gráðu horn**
        -   Þú þarft að snúa um **60 gráður á milli ferninga**. Hvers vegna?
            Vegna þess að það eru 6 ferningar og 360 gráður (snúið í heilan hring) deilt með 6 eru 60 gráður.
        -   Gættu þess að hoppa **50 díla á milli ferninga**
      courseD_artist_nestedLoops7_2019: |-
        Notaðu það sem þú hefur lært til að gera þessa teikningu.

        -   Hver ferningur hefur **100 díla hliðar** og **90 gráðu horn**
        -   Þú þarft að snúa um **60 gráður á milli ferninga**. Hvers vegna?
            Vegna þess að það eru 6 ferningar og 360 gráður (snúið í heilan hring) deilt með 6 eru 60 gráður.
        -   Gættu þess að hoppa **50 díla á milli ferninga**
      courseD_artist_nestedLoops8: |-
        Notaðu það sem þú hefur lært í síðustu þrautum og teiknaðu þessa mynd frá grunni.

        -   Hver sexhyrningur er með **50 díla hliðar** og **60 gráðu snúninga**
      courseD_artist_nestedLoops8_2018: |-
        Notaðu það sem þú hefur lært í síðustu þrautum og teiknaðu þessa mynd frá grunni.

        -   Hver sexhyrningur er með **50 díla hliðar** og **60 gráðu snúninga**
      courseD_artist_nestedLoops8_2019: |-
        Notaðu það sem þú hefur lært í síðustu þrautum og teiknaðu þessa mynd frá grunni.

        -   Hver sexhyrningur er með **50 díla hliðar** og **60 gráðu snúninga**
      courseD_artist_nestedLoops9: |-
        **Áskorun:** Geturðu búið til svona mynd?

        -   Bæði formin hafa **50 díla hliðar**
        -   Eftir hver tvö form þarftu að hoppa áfram um lengd hliðar og snúa um 45 gráður.
      courseD_artist_nestedLoops9_2018: |-
        **Áskorun:** Geturðu búið til svona mynd?

        -   Bæði formin hafa **50 díla hliðar**
        -   Eftir hver tvö form þarftu að hoppa áfram um lengd hliðar og snúa um 45 gráður.
      courseD_artist_nestedLoops9_2019: |-
        **Áskorun:** Geturðu búið til svona mynd?

        -   Bæði formin hafa **50 díla hliðar**
        -   Eftir hver tvö form þarftu að hoppa áfram um lengd hliðar og snúa um 45 gráður.
      courseD_artist_nestedLoops9_predict1: "**Áskorun:** Getur þú fundið leið til
        að búa til svona mynd?\\\r\n\\\r\n\n-   Bæði formin hafa 50 díla hliðar"
      courseD_artist_nestedLoops9_predict1_2018: "**Áskorun:** Getur þú fundið leið
        til að búa til svona mynd?\\\r\n\\\r\n\n-   Bæði formin hafa 50 díla hliðar"
      courseD_artist_nestedLoops9_predict1_2019: "**Áskorun:** Getur þú fundið leið
        til að búa til svona mynd?\\\r\n\\\r\n\n-   Bæði formin hafa 50 díla hliðar"
      courseD_artist_nestedLoopsFP: |-
        Nú er komið að þér.  Notaðu það sem þú hefur lært og búðu til eitthvað sem þér þykir vænt um!

        Ekki með hugmynd?  Prófaðu að búa til eina af þessum:

        ![expandable](https://images.code.org/7ac814e356b3548f57bfab8a9eb31dff-image-1497993113904.png)
        ![expandable](https://images.code.org/bd29d35c9a8abf9d27591b90b0f3ec0f-image-1497993121072.png)
        ![expandable](https://images.code.org/2970f34785e51ae98be7aff6fe0827ce-image-1497993126938.png)
      courseD_artist_nestedLoopsFP_2018: |-
        Nú er komið að þér.  Notaðu það sem þú hefur lært og búðu til eitthvað sem þér þykir vænt um!

        Ekki með hugmynd?  Prófaðu að búa til eina af þessum:

        ![expandable](https://images.code.org/7ac814e356b3548f57bfab8a9eb31dff-image-1497993113904.png)
        ![expandable](https://images.code.org/bd29d35c9a8abf9d27591b90b0f3ec0f-image-1497993121072.png)
        ![expandable](https://images.code.org/2970f34785e51ae98be7aff6fe0827ce-image-1497993126938.png)
      courseD_artist_nestedLoopsFP_2019: |-
        Nú er komið að þér.  Notaðu það sem þú hefur lært og búðu til eitthvað sem þér þykir vænt um!

        Ekki með hugmynd?  Prófaðu að búa til eina af þessum:

        ![expandable](https://images.code.org/7ac814e356b3548f57bfab8a9eb31dff-image-1497993113904.png)
        ![expandable](https://images.code.org/bd29d35c9a8abf9d27591b90b0f3ec0f-image-1497993121072.png)
        ![expandable](https://images.code.org/2970f34785e51ae98be7aff6fe0827ce-image-1497993126938.png)
      courseD_artist_nestedLoops_challenge1: "Getur þú fundið leið til að búa til
        svona mynd?\\\r\n\\\r\n\n-   Bæði formin hafa **50 díla hliðar**\\\r\n-   _Átthyrningarnir_
        eru gerðir með **45 gráðu** snúningum.\\\r\n-   _Þríhyrningarnir_ eru gerðir
        með **120 gráðu** snúningum."
      courseD_artist_nestedLoops_challenge1_2018: "Getur þú fundið leið til að búa
        til svona mynd?\\\r\n\\\r\n\n-   Bæði formin hafa **50 díla hliðar**\\\r\n-
        \  _Átthyrningarnir_ eru gerðir með **45 gráðu** snúningum.\\\r\n-   _Þríhyrningarnir_
        eru gerðir með **120 gráðu** snúningum."
      courseD_artist_nestedLoops_challenge1_2019: "Getur þú fundið leið til að búa
        til svona mynd?\\\r\n\\\r\n\n-   Bæði formin hafa **50 díla hliðar**\\\r\n-
        \  _Átthyrningarnir_ eru gerðir með **45 gráðu** snúningum.\\\r\n-   _Þríhyrningarnir_
        eru gerðir með **120 gráðu** snúningum."
      courseD_artist_nestedLoops_challenge2: |-
        Þessi kóði er ekki alveg í lagi. Getur þú lagað hann svo teikni rétta mynd á vinnusvæðinu?

        -   Fyrsta innri lykkjan á að búa til átthyrning.
        -   Önnur innri lykkjan á að búa til sexhyrning.
        -   Þriðja innri lykkjan á að búa til ferning.
      courseD_artist_nestedLoops_challenge2_2018: |-
        Þessi kóði er ekki alveg í lagi. Getur þú lagað hann svo teikni rétta mynd á vinnusvæðinu?

        -   Fyrsta innri lykkjan á að búa til átthyrning.
        -   Önnur innri lykkjan á að búa til sexhyrning.
        -   Þriðja innri lykkjan á að búa til ferning.
      courseD_artist_nestedLoops_challenge2_2019: |-
        Þessi kóði er ekki alveg í lagi. Getur þú lagað hann svo teikni rétta mynd á vinnusvæðinu?

        -   Fyrsta innri lykkjan á að búa til átthyrning.
        -   Önnur innri lykkjan á að búa til sexhyrning.
        -   Þriðja innri lykkjan á að búa til ferning.
      courseD_artist_project1: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Hæ, ég er Elsa frá Arendelle. Hjálpaðu mér að teikna.”_\n\nTeiknaðu lítið
        form, á milli **20 og 50** díla breitt.  Það má vera hvaða form sem þú vilt.\n\n<hr/>\n\nÞú
        getur prófað að búa til fjölhliðung eins og einn af þessum: \n![](https://images.code.org/14e58b3901ca7c13319cc64f18ae5d82-image-1495765942356.21.06.png)\n![](https://images.code.org/8f79d689ea4936a3725a37025f8fda40-image-1495765942357.25.49.png)\n![](https://images.code.org/e5d222ae7356af4811aa153640af135e-image-1495765942357.26.09.png)
        \n\nEða abstrakt form eins og eitt af þessum:\n![](https://images.code.org/8471c095219da3044b3830bebeedefb3-image-1496436883704.32.19.png)\n![](https://images.code.org/2fe6ed2db5308f4b34f7632fc6b8a64d-image-1496436883705.40.32.png)\n![](https://images.code.org/abb0947f634bc4b712d47516587a6cb8-image-1496436883705.47.21.png)"
      courseD_artist_project1_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Hæ, ég er Elsa frá Arendelle. Hjálpaðu mér að teikna.”_\n\nTeiknaðu lítið
        form, á milli **20 og 50** díla breitt.  Það má vera hvaða form sem þú vilt.\n\n<hr/>\n\nÞú
        getur prófað að búa til fjölhliðung eins og einn af þessum: \n![](https://images.code.org/14e58b3901ca7c13319cc64f18ae5d82-image-1495765942356.21.06.png)\n![](https://images.code.org/8f79d689ea4936a3725a37025f8fda40-image-1495765942357.25.49.png)\n![](https://images.code.org/e5d222ae7356af4811aa153640af135e-image-1495765942357.26.09.png)
        \n\nEða abstrakt form eins og eitt af þessum:\n![](https://images.code.org/8471c095219da3044b3830bebeedefb3-image-1496436883704.32.19.png)\n![](https://images.code.org/2fe6ed2db5308f4b34f7632fc6b8a64d-image-1496436883705.40.32.png)\n![](https://images.code.org/abb0947f634bc4b712d47516587a6cb8-image-1496436883705.47.21.png)"
      courseD_artist_project1_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Hæ, ég er Elsa frá Arendelle. Hjálpaðu mér að teikna.”_\n\nTeiknaðu lítið
        form, á milli **20 og 50** díla breitt.  Það má vera hvaða form sem þú vilt.\n\n<hr/>\n\nÞú
        getur prófað að búa til fjölhliðung eins og einn af þessum: \n![](https://images.code.org/14e58b3901ca7c13319cc64f18ae5d82-image-1495765942356.21.06.png)\n![](https://images.code.org/8f79d689ea4936a3725a37025f8fda40-image-1495765942357.25.49.png)\n![](https://images.code.org/e5d222ae7356af4811aa153640af135e-image-1495765942357.26.09.png)
        \n\nEða abstrakt form eins og eitt af þessum:\n![](https://images.code.org/8471c095219da3044b3830bebeedefb3-image-1496436883704.32.19.png)\n![](https://images.code.org/2fe6ed2db5308f4b34f7632fc6b8a64d-image-1496436883705.40.32.png)\n![](https://images.code.org/abb0947f634bc4b712d47516587a6cb8-image-1496436883705.47.21.png)"
      courseD_artist_project1a: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Prófum eitthvað nýtt. Í þetta sinn skulum við skauta í krákustíg."_

        <img src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png" width="200px" style="float: left; margin: 0 15px 15px 0;" />

        Teiknaðu tröppumynstur sem notar snúninga á milli 75 og 105 gráða -- en gættu þess að vinstri og hægri snúningar noti sama horn.
        (Seinna sérðu hvers vegna.)
      courseD_artist_project1a_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Prófum eitthvað nýtt. Í þetta sinn skulum við skauta í krákustíg."_

        <img src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png" width="200px" style="float: left; margin: 0 15px 15px 0;" />

        Teiknaðu tröppumynstur sem notar snúninga á milli 75 og 105 gráða -- en gættu þess að vinstri og hægri snúningar noti sama horn.
        (Seinna sérðu hvers vegna.)
      courseD_artist_project1a_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Prófum eitthvað nýtt. Í þetta sinn skulum við skauta í krákustíg."_

        <img src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png" width="200px" style="float: left; margin: 0 15px 15px 0;" />

        Teiknaðu tröppumynstur sem notar snúninga á milli 75 og 105 gráða -- en gættu þess að vinstri og hægri snúningar noti sama horn.
        (Seinna sérðu hvers vegna.)
      courseD_artist_project2: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _“Nú skulum við teikna fleiri en eitt.”_

        Teiknaðu nú tvö eða þrjú svona form í röð með því að stökkva fram um einhvern fjölda díla.

        -   Ef þú stekkur fram um **minna** en breidd formsins, gætu þau skarast
        -   Ef þú stekkur fram um **meira** en breidd formsins, verður bil á milli þeirra

        <hr/>

        Röðin gæti orðið bein eins og þessi:

        ![](https://images.code.org/cefc818d8636c7ce185738311870ff1d-image-1495820778762.39.25.png)
        ![](https://images.code.org/80dc77914de15685dc696825dff61723-image-1495820778762.39.43.png)
        ![](https://images.code.org/00cda078f119b1ddb0af27ae4a44b089-image-1495820778761.39.08.png)
        <br/>  <br/>

        Eða að formin gætu færst til eins og eitt af þessum:

        ![](https://images.code.org/0c4066fe7547bc1f4495aacbeecdea6d-image-1496437220447.47.04.png)
        ![](https://images.code.org/4069376b784c147a8d443d49e22f783f-image-1496437220446.40.15.png)
        ![](https://images.code.org/02704ab3fb3356f76c544bb64c1a7cce-image-1496437220446.32.04.png)
      courseD_artist_project2_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _“Nú skulum við teikna fleiri en eitt.”_

        Teiknaðu nú tvö eða þrjú svona form í röð með því að stökkva fram um einhvern fjölda díla.

        -   Ef þú stekkur fram um **minna** en breidd formsins, gætu þau skarast
        -   Ef þú stekkur fram um **meira** en breidd formsins, verður bil á milli þeirra

        <hr/>

        Röðin gæti orðið bein eins og þessi:

        ![](https://images.code.org/cefc818d8636c7ce185738311870ff1d-image-1495820778762.39.25.png)
        ![](https://images.code.org/80dc77914de15685dc696825dff61723-image-1495820778762.39.43.png)
        ![](https://images.code.org/00cda078f119b1ddb0af27ae4a44b089-image-1495820778761.39.08.png)
        <br/>  <br/>

        Eða að formin gætu færst til eins og eitt af þessum:

        ![](https://images.code.org/0c4066fe7547bc1f4495aacbeecdea6d-image-1496437220447.47.04.png)
        ![](https://images.code.org/4069376b784c147a8d443d49e22f783f-image-1496437220446.40.15.png)
        ![](https://images.code.org/02704ab3fb3356f76c544bb64c1a7cce-image-1496437220446.32.04.png)
      courseD_artist_project2_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _“Nú skulum við teikna fleiri en eitt.”_

        Teiknaðu nú tvö eða þrjú svona form í röð með því að stökkva fram um einhvern fjölda díla.

        -   Ef þú stekkur fram um **minna** en breidd formsins, gætu þau skarast
        -   Ef þú stekkur fram um **meira** en breidd formsins, verður bil á milli þeirra

        <hr/>

        Röðin gæti orðið bein eins og þessi:

        ![](https://images.code.org/cefc818d8636c7ce185738311870ff1d-image-1495820778762.39.25.png)
        ![](https://images.code.org/80dc77914de15685dc696825dff61723-image-1495820778762.39.43.png)
        ![](https://images.code.org/00cda078f119b1ddb0af27ae4a44b089-image-1495820778761.39.08.png)
        <br/>  <br/>

        Eða að formin gætu færst til eins og eitt af þessum:

        ![](https://images.code.org/0c4066fe7547bc1f4495aacbeecdea6d-image-1496437220447.47.04.png)
        ![](https://images.code.org/4069376b784c147a8d443d49e22f783f-image-1496437220446.40.15.png)
        ![](https://images.code.org/02704ab3fb3356f76c544bb64c1a7cce-image-1496437220446.32.04.png)
      courseD_artist_project2a: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Snúum nú við og förum sömu leið til baka.\"_\n\nSnúðu nú við um 180 gráður
        og teiknaðu nákvæmlega sama tröppumynstrið aftur! \n\n-   Afgangurinn af þessu
        borði verður auðveldari ef þú setur allan kóðann í lykkju sem lætur Elsu teikna,
        snúa við um 180 gráður, teikna, og snúa svo aftur við um 180 gráður. \n\n<hr/>\n\nHér
        er dæmi um tröppur sem nota 76 gráðu snúning:\n\n![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)"
      courseD_artist_project2a_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Snúum nú við og förum sömu leið til baka.\"_\n\nSnúðu nú við um 180 gráður
        og teiknaðu nákvæmlega sama tröppumynstrið aftur! \n\n-   Afgangurinn af þessu
        borði verður auðveldari ef þú setur allan kóðann í lykkju sem lætur Elsu teikna,
        snúa við um 180 gráður, teikna, og snúa svo aftur við um 180 gráður. \n\n<hr/>\n\nHér
        er dæmi um tröppur sem nota 76 gráðu snúning:\n\n![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)"
      courseD_artist_project2a_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Snúum nú við og förum sömu leið til baka.\"_\n\nSnúðu nú við um 180 gráður
        og teiknaðu nákvæmlega sama tröppumynstrið aftur! \n\n-   Afgangurinn af þessu
        borði verður auðveldari ef þú setur allan kóðann í lykkju sem lætur Elsu teikna,
        snúa við um 180 gráður, teikna, og snúa svo aftur við um 180 gráður. \n\n<hr/>\n\nHér
        er dæmi um tröppur sem nota 76 gráðu snúning:\n\n![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)"
      courseD_artist_project3: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Breytum þessu nú í snjókorn."_

        Láttu nú Elsu hoppa aftur inn að miðju með `hoppa á 200 þvert 200 niður` kubbnum og snúðu henni svo hún teikni röð af formum aftur og aftur í mismunandi áttir.

        Þú getur teiknað alls konar flott snjókorn!

        * * *

        Skoðaðu þessi dæmi með fjölhliðungum:
        ![](https://images.code.org/b32ebfb3be559bf8a6d017a854e0b97e-image-1495821528995.42.08.png)
        ![](https://images.code.org/08d7155f6829f82d878dfa57ad5dcaf3-image-1495821528996.42.26.png)
        ![](https://images.code.org/7d461ee9046871e6993406e558f28176-image-1495821528996.42.58.png)

        Með abstrakt formum gæti snjókorn litið meira svona út:
        ![](https://images.code.org/376d7ba20b6bb86e08b1675370e87b92-image-1496695869798.44.00.png)
        ![](https://images.code.org/4f649cc779920632674afac5acce5c95-image-1496695869798.47.51.png)
        ![](https://images.code.org/a68f925ffd87241ebc09183acc908b4b-image-1496695869796.31.49.png)
      courseD_artist_project3_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Breytum þessu nú í snjókorn."_

        Láttu nú Elsu hoppa aftur inn að miðju með `hoppa á 200 þvert 200 niður` kubbnum og snúðu henni svo hún teikni röð af formum aftur og aftur í mismunandi áttir.

        Þú getur teiknað alls konar flott snjókorn!

        * * *

        Skoðaðu þessi dæmi með fjölhliðungum:
        ![](https://images.code.org/b32ebfb3be559bf8a6d017a854e0b97e-image-1495821528995.42.08.png)
        ![](https://images.code.org/08d7155f6829f82d878dfa57ad5dcaf3-image-1495821528996.42.26.png)
        ![](https://images.code.org/7d461ee9046871e6993406e558f28176-image-1495821528996.42.58.png)

        Með abstrakt formum gæti snjókorn litið meira svona út:
        ![](https://images.code.org/376d7ba20b6bb86e08b1675370e87b92-image-1496695869798.44.00.png)
        ![](https://images.code.org/4f649cc779920632674afac5acce5c95-image-1496695869798.47.51.png)
        ![](https://images.code.org/a68f925ffd87241ebc09183acc908b4b-image-1496695869796.31.49.png)
      courseD_artist_project3_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Breytum þessu nú í snjókorn."_

        Láttu nú Elsu hoppa aftur inn að miðju með `hoppa á 200 þvert 200 niður` kubbnum og snúðu henni svo hún teikni röð af formum aftur og aftur í mismunandi áttir.

        Þú getur teiknað alls konar flott snjókorn!

        * * *

        Skoðaðu þessi dæmi með fjölhliðungum:
        ![](https://images.code.org/b32ebfb3be559bf8a6d017a854e0b97e-image-1495821528995.42.08.png)
        ![](https://images.code.org/08d7155f6829f82d878dfa57ad5dcaf3-image-1495821528996.42.26.png)
        ![](https://images.code.org/7d461ee9046871e6993406e558f28176-image-1495821528996.42.58.png)

        Með abstrakt formum gæti snjókorn litið meira svona út:
        ![](https://images.code.org/376d7ba20b6bb86e08b1675370e87b92-image-1496695869798.44.00.png)
        ![](https://images.code.org/4f649cc779920632674afac5acce5c95-image-1496695869798.47.51.png)
        ![](https://images.code.org/a68f925ffd87241ebc09183acc908b4b-image-1496695869796.31.49.png)
      courseD_artist_project3a: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Snúum og búum til snjókorn."_

        Snúðu forminu 5 eða 6 sinnum í hring.

        -   Ef þú velur 5 snúninga, er hver snúningur 72 gráður
        -   Ef þú velur 6 snúninga, er hver snúningur 60 gráður
            <hr/>

        Hér er dæmi þar sem Elsa snýr 6 sinnum:

        ![](https://images.code.org/b0fe02e728f80ae7a4b731f32371a37b-image-1496697582505.19.34.png)
      courseD_artist_project3a_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Snúum og búum til snjókorn."_

        Snúðu forminu 5 eða 6 sinnum í hring.

        -   Ef þú velur 5 snúninga, er hver snúningur 72 gráður
        -   Ef þú velur 6 snúninga, er hver snúningur 60 gráður
            <hr/>

        Hér er dæmi þar sem Elsa snýr 6 sinnum:

        ![](https://images.code.org/b0fe02e728f80ae7a4b731f32371a37b-image-1496697582505.19.34.png)
      courseD_artist_project3a_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Snúum og búum til snjókorn."_

        Snúðu forminu 5 eða 6 sinnum í hring.

        -   Ef þú velur 5 snúninga, er hver snúningur 72 gráður
        -   Ef þú velur 6 snúninga, er hver snúningur 60 gráður
            <hr/>

        Hér er dæmi þar sem Elsa snýr 6 sinnum:

        ![](https://images.code.org/b0fe02e728f80ae7a4b731f32371a37b-image-1496697582505.19.34.png)
      courseD_artist_project4: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _Hvað gerist ef við teiknum snjókorn yfir hvert annað?\"_\n\nPrófaðu að leggja
        tvö mismunandi löguð snjókorn saman annað ofan á hitt og snúa því síðara aðeins?
        Prófaðu það og sjáðu hvað kemur út! "
      courseD_artist_project4_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _Hvað gerist ef við teiknum snjókorn yfir hvert annað?\"_\n\nPrófaðu að leggja
        tvö mismunandi löguð snjókorn saman annað ofan á hitt og snúa því síðara aðeins?
        Prófaðu það og sjáðu hvað kemur út! "
      courseD_artist_project4_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _Hvað gerist ef við teiknum snjókorn yfir hvert annað?\"_\n\nPrófaðu að leggja
        tvö mismunandi löguð snjókorn saman annað ofan á hitt og snúa því síðara aðeins?
        Prófaðu það og sjáðu hvað kemur út! "
      courseD_artist_project4a: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)  _"Hvað eigum við nú að gera? Prófum að búa okkur til eigin frosinn furðuheim!"_

        Gerðu tilraunir með það sem þú hefur búið til. Teiknaðu það sem þú vilt!

        -   Hvað gerist ef þú notar tvö mismunandi horn í tröppumynstrinu?
        -   Hvað gerist ef þú lengir eða styttir tígulmynstrið?
        -   Hvernig kemur það út að teikna eitt snjókorn ofan á annað?
      courseD_artist_project4a_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)  _"Hvað eigum við nú að gera? Prófum að búa okkur til eigin frosinn furðuheim!"_

        Gerðu tilraunir með það sem þú hefur búið til. Teiknaðu það sem þú vilt!

        -   Hvað gerist ef þú notar tvö mismunandi horn í tröppumynstrinu?
        -   Hvað gerist ef þú lengir eða styttir tígulmynstrið?
        -   Hvernig kemur það út að teikna eitt snjókorn ofan á annað?
      courseD_artist_project4a_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)  _"Hvað eigum við nú að gera? Prófum að búa okkur til eigin frosinn furðuheim!"_

        Gerðu tilraunir með það sem þú hefur búið til. Teiknaðu það sem þú vilt!

        -   Hvað gerist ef þú notar tvö mismunandi horn í tröppumynstrinu?
        -   Hvað gerist ef þú lengir eða styttir tígulmynstrið?
        -   Hvernig kemur það út að teikna eitt snjókorn ofan á annað?
      courseD_artist_project5: '![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Virkjaðu sköpunargáfuna með formin og hornin. Hvaða alveg nýjar myndir skyldir
        þú geta skapað?"_  '
      courseD_artist_project5_2018: '![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Virkjaðu sköpunargáfuna með formin og hornin. Hvaða alveg nýjar myndir skyldir
        þú geta skapað?"_  '
      courseD_artist_project5_2019: '![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Virkjaðu sköpunargáfuna með formin og hornin. Hvaða alveg nýjar myndir skyldir
        þú geta skapað?"_  '
      courseD_artist_ramp11: "Fínt!  Nú skulum við búa til ferning með listamanninum!
        \  Kubbarnir eru svolítið öðruvísi en hugmyndin sú sama.\\\r\n\n<hr/>\r\nHver
        hlið ferningsins er 200 dílar á lengd og þú þarft að snúa um 90 gráður fyrir
        hvert horn."
      courseD_artist_ramp12: |-
        Notaðu það sem þú hefur lært til að teikna þennan þríhyrning innan í ferningi.

        * * *

        ##### Hver hlið er 200 dílar. Þú þarft að snúa um 90 gráður til að búa til ferninginn og 120 gráður fyrir þríhyrninginn.
      courseD_autorun_binary2_2019: "Hér er fall sem tekur tvíundarstreng með 1 og
        0 og segir listamanninum að færa sig frá vinstri til hægri niður eftir myndinni.
        \n\n* * *\n\nListamaðurinn á að lita þá reiti svarta þar sem 1 er í strengnum
        en sleppa að lita ef það er 0. \n\n* * *\n\n**Keyrðu þennan kóða til að sjá
        hvernig listamaðurinn notar tvíundir til að teikna mynstur.**"
      courseD_bee_conditionals10: |-
        Skilyrði geta verið hjálpleg, jafnvel þó að þú vitir hvað er mikið á hverjum stað!

        Safnaðu öllum blómasafanum og búðu til allt hunangið.
      courseD_bee_conditionals10_2018: |-
        Skilyrði geta verið hjálpleg, jafnvel þó að þú vitir hvað er mikið á hverjum stað!

        Safnaðu öllum blómasafanum og búðu til allt hunangið.
      courseD_bee_conditionals10_2019: |-
        Skilyrði geta verið hjálpleg, jafnvel þó að þú vitir hvað er mikið á hverjum stað!

        Safnaðu öllum blómasafanum og búðu til allt hunangið.
      courseD_bee_conditionals1_predict1: "\\*\"Þetta ský er fyrir mér!\"\\\r\n\\\r\nAthugaðu
        hvort það er blóm undir skýinu. Safnaðu blómasafa ef svo er."
      courseD_bee_conditionals1_predict1_2018: "\\*\"Þetta ský er fyrir mér!\"\\\r\n\\\r\nAthugaðu
        hvort það er blóm undir skýinu. Safnaðu blómasafa ef svo er."
      courseD_bee_conditionals1_predict1_2019: "\\*\"Þetta ský er fyrir mér!\"\\\r\n\\\r\nAthugaðu
        hvort það er blóm undir skýinu. Safnaðu blómasafa ef svo er."
      courseD_bee_conditionals1_predict1_copy: "\\*\"Þetta ský er fyrir mér!\"\\\r\n\\\r\nAthugaðu
        hvort það er blóm undir skýinu. Safnaðu blómasafa ef svo er."
      courseD_bee_conditionals2: "Meiri ský! \n\nAthugaðu undir hvert ský til að sjá
        hvort það feli blóm áður en þú reynir að ná blómasafa. Ef það er blóm undir
        skýinu á býflugan að safna blómasafa _einu sinni_. \n\nMundu: Skýin fela ekki
        öll það sama!"
      courseD_bee_conditionals2_2018: "Meiri ský! \n\nAthugaðu undir hvert ský til
        að sjá hvort það feli blóm áður en þú reynir að ná blómasafa. Ef það er blóm
        undir skýinu á býflugan að safna blómasafa _einu sinni_. \n\nMundu: Skýin
        fela ekki öll það sama!"
      courseD_bee_conditionals2_2019: "Meiri ský! \n\nAthugaðu undir hvert ský til
        að sjá hvort það feli blóm áður en þú reynir að ná blómasafa. Ef það er blóm
        undir skýinu á býflugan að safna blómasafa _einu sinni_. \n\nMundu: Skýin
        fela ekki öll það sama!"
      courseD_bee_conditionals2_copy: "Meiri ský! \n\nAthugaðu undir hvert ský til
        að sjá hvort það feli blóm áður en þú reynir að ná blómasafa. Ef það er blóm
        undir skýinu á býflugan að safna blómasafa _einu sinni_. \n\nMundu: Skýin
        fela ekki öll það sama!"
      courseD_bee_conditionals3: Þú getur aðeins safnað blómasafa á blómum, en þú
        getur athugað hvaða bil sem er til að gá hvort þar er blóm. Ef það er blóm
        undir skýi, þarf býflugan að safna blómasafa _einu sinni_.
      courseD_bee_conditionals3_2018: Þú getur aðeins safnað blómasafa á blómum, en
        þú getur athugað hvaða bil sem er til að gá hvort þar er blóm. Ef það er blóm
        undir skýi, þarf býflugan að safna blómasafa _einu sinni_.
      courseD_bee_conditionals3_2019: Þú getur aðeins safnað blómasafa á blómum, en
        þú getur athugað hvaða bil sem er til að gá hvort þar er blóm. Ef það er blóm
        undir skýi, þarf býflugan að safna blómasafa _einu sinni_.
      courseD_bee_conditionals3_copy: Þú getur aðeins safnað blómasafa á blómum, en
        þú getur athugað hvaða bil sem er til að gá hvort þar er blóm. Ef það er blóm
        undir skýi, þarf býflugan að safna blómasafa _einu sinni_.
      courseD_bee_conditionals4: |-
        Í þessari þraut vitum við að hvert blóm hefur nákvæmlega einn af blómasafa, en það eru misjafnlega mörg bil á milli blómanna.

        Náðu öllum blómasafanum með eins fáum kubbum og mögulegt er.
      courseD_bee_conditionals4_2018: |-
        Í þessari þraut vitum við að hvert blóm hefur nákvæmlega einn af blómasafa, en það eru misjafnlega mörg bil á milli blómanna.

        Náðu öllum blómasafanum með eins fáum kubbum og mögulegt er.
      courseD_bee_conditionals4_2019: |-
        Í þessari þraut vitum við að hvert blóm hefur nákvæmlega einn af blómasafa, en það eru misjafnlega mörg bil á milli blómanna.

        Náðu öllum blómasafanum með eins fáum kubbum og mögulegt er.
      courseD_bee_conditionals4_copy: |-
        Í þessari þraut vitum við að hvert blóm hefur nákvæmlega einn af blómasafa, en það eru misjafnlega mörg bil á milli blómanna.

        Náðu öllum blómasafanum með eins fáum kubbum og mögulegt er.
      courseD_bee_conditionals6: |-
        _"Nú vil ég bara búa til hunang."_

        Undir sumum skýjunum gæti verið býkúpa. Gættu þess að athuga hvert ský hvort þar sé falin býkúpa! Ef þar er býkúpa, þarf býflugan bara að búa til hunang _einu sinni_.
      courseD_bee_conditionals6_2018: |-
        _"Nú vil ég bara búa til hunang."_

        Undir sumum skýjunum gæti verið býkúpa. Gættu þess að athuga hvert ský hvort þar sé falin býkúpa! Ef þar er býkúpa, þarf býflugan bara að búa til hunang _einu sinni_.
      courseD_bee_conditionals6_2019: |-
        _"Nú vil ég bara búa til hunang."_

        Undir sumum skýjunum gæti verið býkúpa. Gættu þess að athuga hvert ský hvort þar sé falin býkúpa! Ef þar er býkúpa, þarf býflugan bara að búa til hunang _einu sinni_.
      courseD_bee_conditionals7: |-
        Stundum hylur ský blóm en stundum býkúpu!

        Notaðu `ef/annars` kubbinn til að safna blómasafa á blómum en búa til hunang í býkúpum. Mundu: Ef það er blóm, þarf býflugan bara að safna blómasafa _einu sinni_. Ef það er býkúpa, þarf hún bara að búa til hunang _einu sinni_.
      courseD_bee_conditionals7_2018: |-
        Stundum hylur ský blóm en stundum býkúpu!

        Notaðu `ef/annars` kubbinn til að safna blómasafa á blómum en búa til hunang í býkúpum. Mundu: Ef það er blóm, þarf býflugan bara að safna blómasafa _einu sinni_. Ef það er býkúpa, þarf hún bara að búa til hunang _einu sinni_.
      courseD_bee_conditionals7_2019: |-
        Stundum hylur ský blóm en stundum býkúpu!

        Notaðu `ef/annars` kubbinn til að safna blómasafa á blómum en búa til hunang í býkúpum. Mundu: Ef það er blóm, þarf býflugan bara að safna blómasafa _einu sinni_. Ef það er býkúpa, þarf hún bara að búa til hunang _einu sinni_.
      courseD_bee_conditionals7_predict2: |-
        Stundum hylur ský blóm en stundum hylur það býkúpu!

        Notaðu `ef/annars` kubb til að safna blómasafa við blóm og búa til hunang í býkúpum. Mundu: það er aldrei nema _ein_ býkúpa eða _eitt_ blóm undir hverju skýi.
      courseD_bee_conditionals7_predict2_2018: |-
        Stundum hylur ský blóm en stundum hylur það býkúpu!

        Notaðu `ef/annars` kubb til að safna blómasafa við blóm og búa til hunang í býkúpum. Mundu: það er aldrei nema _ein_ býkúpa eða _eitt_ blóm undir hverju skýi.
      courseD_bee_conditionals7_predict2_2019: |-
        Stundum hylur ský blóm en stundum hylur það býkúpu!

        Notaðu `ef/annars` kubb til að safna blómasafa við blóm og búa til hunang í býkúpum. Mundu: það er aldrei nema _ein_ býkúpa eða _eitt_ blóm undir hverju skýi.
      courseD_bee_conditionals8: |-
        **Áskorun:** Það er annað hvort blóm eða býkúpa undir hverju af þessum skýjum!

        Safnaðu blómasafa ef það er blóm.
        Búðu annars til hunang (því þá er það býkúpa).
      courseD_bee_conditionals8_2018: |-
        **Áskorun:** Það er annað hvort blóm eða býkúpa undir hverju af þessum skýjum!

        Safnaðu blómasafa ef það er blóm.
        Búðu annars til hunang (því þá er það býkúpa).
      courseD_bee_conditionals8_2019: |-
        **Áskorun:** Það er annað hvort blóm eða býkúpa undir hverju af þessum skýjum!

        Safnaðu blómasafa ef það er blóm.
        Búðu annars til hunang (því þá er það býkúpa).
      courseD_bee_conditionals9: Safnaðu öllum blómasafanum eða búðu til allt hunangið.
        Þú getur aðeins safnað blómasafa á blómum og búið til hunang í býkúpum. Athugaðu
        hvern reit hvort hann hafi blóm eða býkúpu. Það er aldrei fleira en eitt blóm
        eða ein býkúpa undir skýi.
      courseD_bee_conditionals9_2018: Safnaðu öllum blómasafanum eða búðu til allt
        hunangið. Þú getur aðeins safnað blómasafa á blómum og búið til hunang í býkúpum.
        Athugaðu hvern reit hvort hann hafi blóm eða býkúpu. Það er aldrei fleira
        en eitt blóm eða ein býkúpa undir skýi.
      courseD_bee_conditionals9_2019: Safnaðu öllum blómasafanum eða búðu til allt
        hunangið. Þú getur aðeins safnað blómasafa á blómum og búið til hunang í býkúpum.
        Athugaðu hvern reit hvort hann hafi blóm eða býkúpu. Það er aldrei fleira
        en eitt blóm eða ein býkúpa undir skýi.
      courseD_bee_conditionals_challenge1: Safnaðu öllum blómasafanum eða búðu til
        allt hunangið. Þú getur aðeins safnað safa í blómum og búið til hunang í býkúpum.
        Athugaðu í hverjum reit hvort þar sé blóm eða býkúpa.
      courseD_bee_conditionals_challenge1_2018: Safnaðu öllum blómasafanum eða búðu
        til allt hunangið. Þú getur aðeins safnað safa í blómum og búið til hunang
        í býkúpum. Athugaðu í hverjum reit hvort þar sé blóm eða býkúpa.
      courseD_bee_conditionals_challenge1_2019: Safnaðu öllum blómasafanum eða búðu
        til allt hunangið. Þú getur aðeins safnað safa í blómum og búið til hunang
        í býkúpum. Athugaðu í hverjum reit hvort þar sé blóm eða býkúpa.
      courseD_bee_conditionals_challenge2: Safnaðu öllum blómasafanum og búðu til
        allt hunangið. Þú getur safnað öllum blómasafanum í einu blómi með því að
        nota `meðan blómasafi` lykkju.
      courseD_bee_conditionals_challenge2_2018: Safnaðu öllum blómasafanum og búðu
        til allt hunangið. Þú getur safnað öllum blómasafanum í einu blómi með því
        að nota `meðan blómasafi` lykkju.
      courseD_bee_conditionals_challenge2_2019: Safnaðu öllum blómasafanum og búðu
        til allt hunangið. Þú getur safnað öllum blómasafanum í einu blómi með því
        að nota `meðan blómasafi` lykkju.
      courseD_bee_debugging_challenge1: Taktu eftir hvernig býflugan nær í blómasafann.
        Getur þú notað eins reglu til að hjálpa henni að búa til allt hunangið?
      courseD_bee_debugging_challenge1a: |-
        _"Bzz bzz! Ég kann að ná í blómasafa, hjálpaðu mér nú að búa til hunang!"_

        Taktu eftir hvernig býflugan nær í blómasafann. Getur þú notað eins reglu til að hjálpa henni að búa til allt hunangið?
      courseD_bee_nestedLoops1: |-
        "_Þetta verður BÝ-sna flott!_"

        Hjálpaðu býflugunni að safna öllum safanum.
      courseD_bee_nestedLoops1_2018: |-
        "_Þetta verður BÝ-sna flott!_"

        Hjálpaðu býflugunni að safna öllum safanum.
      courseD_bee_nestedLoops1_2019: |-
        "_Þetta verður BÝ-sna flott!_"

        Hjálpaðu býflugunni að safna öllum safanum.
      courseD_bee_nestedLoops1a: |-
        _"Þetta verður BÝ-sna flott!"_

        Hjálpaðu býinu að safna öllum safanum.
      courseD_bee_nestedLoops1a_2018: |-
        _"Þetta verður BÝ-sna flott!"_

        Hjálpaðu býinu að safna öllum safanum.
      courseD_bee_nestedLoops1a_2019: |-
        _"Þetta verður BÝ-sna flott!"_

        Hjálpaðu býinu að safna öllum safanum.
      courseD_bee_nestedLoops2: Nú áttu að hjálpa býflugunni að safna öllum blómasafanum
        með eins fáum kubbum og mögulegt er.
      courseD_bee_nestedLoops2_2018: Nú áttu að hjálpa býflugunni að safna öllum blómasafanum
        með eins fáum kubbum og mögulegt er.
      courseD_bee_nestedLoops2_2019: Nú áttu að hjálpa býflugunni að safna öllum blómasafanum
        með eins fáum kubbum og mögulegt er.
      courseD_bee_nestedLoops2_predict1: Nú áttu að hjálpa býflugunni að safna öllum
        blómasafanum með eins fáum kubbum og mögulegt er.
      courseD_bee_nestedLoops2_predict1_2018: Nú áttu að hjálpa býflugunni að safna
        öllum blómasafanum með eins fáum kubbum og mögulegt er.
      courseD_bee_nestedLoops2_predict1_2019: Nú áttu að hjálpa býflugunni að safna
        öllum blómasafanum með eins fáum kubbum og mögulegt er.
      courseD_bee_nestedLoops7: "**Áskorun:** Finndu lausn á að ná öllum blómasafanum
        með tiltækum kubbum."
      courseD_bee_nestedLoops7_2018: "**Áskorun:** Finndu lausn á að ná öllum blómasafanum
        með tiltækum kubbum."
      courseD_bee_nestedLoops7_2019: "**Áskorun:** Finndu lausn á að ná öllum blómasafanum
        með tiltækum kubbum."
      courseD_bee_nestedLoops8: "Safnaðu öllum blómasafanum úr hverju blómi og búðu
        til hunang í hverju búi. \\\r\n\\\r\nNotaðu faldaða lykkju. "
      courseD_bee_nestedLoops8_2018: "Safnaðu öllum blómasafanum úr hverju blómi og
        búðu til hunang í hverju búi. \\\r\n\\\r\nNotaðu faldaða lykkju. "
      courseD_bee_nestedLoops8_2019: "Safnaðu öllum blómasafanum úr hverju blómi og
        búðu til hunang í hverju búi. \\\r\n\\\r\nNotaðu faldaða lykkju. "
      courseD_bee_nestedLoops9: Búðu til allt hunangið.
      courseD_bee_nestedLoops9_2018: Búðu til allt hunangið.
      courseD_bee_nestedLoops9_2019: Búðu til allt hunangið.
      courseD_bee_nestedLoops9_predict2: Búðu til allt hunangið.
      courseD_bee_nestedLoops9_predict2_2018: Búðu til allt hunangið.
      courseD_bee_nestedLoops9_predict2_2019: Búðu til allt hunangið.
      courseD_bounce_events10s_2018: "Nú er körfuhringur efst.  \n\nFestu kubbinn
        `skora stig` við atvikið `þegar bolti í marki`. Festu kubbinn `gefa andstæðingi
        stig` við atvikið `þegar bolti hittir ekki hönd` til að búa til leik. \n\n*
        * *\n\nGáðu hvað þú getur skorað mörg stig áður en andstæðingurinn skorar
        tvisvar."
      courseD_bounce_events10s_2019: "Nú er körfuhringur efst.  \n\nFestu kubbinn
        `skora stig` við atvikið `þegar bolti í marki`. Festu kubbinn `gefa andstæðingi
        stig` við atvikið `þegar bolti hittir ekki hönd` til að búa til leik. \n\n*
        * *\n\nGáðu hvað þú getur skorað mörg stig áður en andstæðingurinn skorar
        tvisvar."
      courseD_bounce_events11s_2018: |-
        Nú stjórnar þú boltanum! Settu kubbinn `kasta nýjum bolta` á alla þá staði þar sem leikurinn þarf nýjan bolta.

        * * *

        Gáðu hvað þú getur skorað mörg stig áður en andstæðingurinn skorar tvisvar!
      courseD_bounce_events11s_2019: |-
        Nú stjórnar þú boltanum! Settu kubbinn `kasta nýjum bolta` á alla þá staði þar sem leikurinn þarf nýjan bolta.

        * * *

        Gáðu hvað þú getur skorað mörg stig áður en andstæðingurinn skorar tvisvar!
      courseD_bounce_events1s_2018: "Náðu til körfunnar!    \n\nFestu kubb við `þegar
        vinstri ör` atvikið og ýttu á \"Keyra\" til að færa leikmanninn að netinu."
      courseD_bounce_events1s_2019: "Náðu til körfunnar!    \n\nFestu kubb við `þegar
        vinstri ör` atvikið og ýttu á \"Keyra\" til að færa leikmanninn að netinu."
      courseD_bounce_events2s_2018: Tengdu nú kubb við atburðinn `þegar til hægri`
        svo að höndin komist að báðum körfunum.
      courseD_bounce_events2s_2019: Tengdu nú kubb við atburðinn `þegar til hægri`
        svo að höndin komist að báðum körfunum.
      courseD_bounce_events5s_2018: Við ætlum að láta körfubolta svífa niður í átt
        að höndinni. Tengdu kubb við kubbinn `þegar bolti hittir hönd` til að tryggja
        að boltinn nái til körfunnar.
      courseD_bounce_events5s_2019: Við ætlum að láta körfubolta svífa niður í átt
        að höndinni. Tengdu kubb við kubbinn `þegar bolti hittir hönd` til að tryggja
        að boltinn nái til körfunnar.
      courseD_bounce_events6s_2018: "Nú er karfan að ofanverðu. \n\nLeystu þrautina
        með því að bæta við kóða sem lætur boltann endurkastast þegar hann lendir
        á veggnum."
      courseD_bounce_events6s_2019: "Nú er karfan að ofanverðu. \n\nLeystu þrautina
        með því að bæta við kóða sem lætur boltann endurkastast þegar hann lendir
        á veggnum."
      courseD_bounce_events7s_2018: "Settu inn hljóðkubba til að láta heyrast í netinu
        þegar þú hittir í körfuna og láta heyrast flaut þegar boltinn hittir ekki
        hendina. \n\n* * *\n\nLáttu boltann skoppa þar til hann hittir í endamarkið."
      courseD_bounce_events7s_2019: "Settu inn hljóðkubba til að láta heyrast í netinu
        þegar þú hittir í körfuna og láta heyrast flaut þegar boltinn hittir ekki
        hendina. \n\n* * *\n\nLáttu boltann skoppa þar til hann hittir í endamarkið."
      courseD_collector_debugging1: "_\"Ó nei! Ég er í vandræðum.\"_\\\r\n\\\r\nLagaðu
        villu/r til að safna öllum fjársjóðnum."
      courseD_collector_debugging10_predict1: "_\"Fjársjóðseyja!\"_\\\r\n\\\r\nHjálpaðu
        Laurel að laga kóðann til að ná öllum fjársjóðnum."
      courseD_collector_debugging1a_2018: "_\"Ó nei! Ég er í vandræðum.\"_\\\r\n\\\r\nLagaðu
        villu/r til að safna öllum fjársjóðnum."
      courseD_collector_debugging1a_2019: "_\"Ó nei! Ég er í vandræðum.\"_\\\r\n\\\r\nLagaðu
        villu/r til að safna öllum fjársjóðnum."
      courseD_collector_debugging2: "_\"Þú getur þetta!\"_\\\r\n\\\r\nLagaðu villu/r
        til að safna öllum fjársjóðnum."
      courseD_collector_debugging2a_2018: "_\"Þú getur þetta!\"_\\\r\n\\\r\nLagaðu
        villu/r til að safna öllum fjársjóðnum."
      courseD_collector_debugging2a_2019: "_\"Þú getur þetta!\"_\\\r\n\\\r\nLagaðu
        villu/r til að safna öllum fjársjóðnum."
      courseD_collector_debugging3: "_\"Sýndu þrautseigju og þér mun takast þetta.\"_\\\r\n\\\r\nLagaðu
        villu/r til að safna öllum fjársjóðnum."
      courseD_collector_debugging3a_2018: "_\"Sýndu þrautseigju og þér mun takast
        þetta.\"_\\\r\n\\\r\nLagaðu villu/r til að safna öllum fjársjóðnum."
      courseD_collector_debugging3a_2019: "_\"Sýndu þrautseigju og þér mun takast
        þetta.\"_\\\r\n\\\r\nLagaðu villu/r til að safna öllum fjársjóðnum."
      courseD_collector_debugging4: "_\"Ekki láta þetta ergja þig. Þú getur þetta!_\\\r\n\\\r\nLagaðu
        villu/r til að safna öllum fjársjóðnum."
      courseD_collector_debugging4a_2018: "_\"Ekki láta þetta ergja þig. Þú getur
        þetta!_\\\r\n\\\r\nLagaðu villu/r til að safna öllum fjársjóðnum."
      courseD_collector_debugging4a_2019: "_\"Ekki láta þetta ergja þig. Þú getur
        þetta!_\\\r\n\\\r\nLagaðu villu/r til að safna öllum fjársjóðnum."
      courseD_collector_debugging5: |-
        **Áskorun:**"Þessi þraut gerir mig hringlaða!"\*

        Allar skipanir sem þú þarft eru þegar komnar...notaðu nú villuleitarhæfileika þína til að finna lausn á þessari þraut.
      courseD_collector_debugging5a_2018: |-
        **Áskorun:**"Þessi þraut gerir mig hringlaða!"\*

        Allar skipanir sem þú þarft eru þegar komnar...notaðu nú villuleitarhæfileika þína til að finna lausn á þessari þraut.
      courseD_collector_debugging5a_2019: |-
        **Áskorun:**"Þessi þraut gerir mig hringlaða!"\*

        Allar skipanir sem þú þarft eru þegar komnar...notaðu nú villuleitarhæfileika þína til að finna lausn á þessari þraut.
      courseD_collector_debugging6: "**Áskorun:** Allar skipanir sem þú þarft eru
        þegar komnar...notaðu nú villuleitarhæfileika þína til að laga villur og safna
        öllum fjársjóðnum."
      courseD_collector_debugging6a_2018: 'Áskorun: Notaðu kóðann á vinnusvæðinu til
        að safna minnst **6** gersemum!'
      courseD_collector_debugging6a_2019: 'Áskorun: Notaðu kóðann á vinnusvæðinu til
        að safna minnst **6** gersemum!'
      courseD_collector_debugging8: "_\"Svo mikið af fjársjóð!\"_\\\r\n\\\r\nHjálpaðu
        Laurel að laga kóðann til að ná öllum fjársjóðnum."
      courseD_collector_debugging8a_2018: "_\"Svo mikið af fjársjóð!\"_\\\r\n\\\r\nHjálpaðu
        Laurel að laga kóðann til að ná öllum fjársjóðnum."
      courseD_collector_debugging8a_2019: "_\"Svo mikið af fjársjóð!\"_\\\r\n\\\r\nHjálpaðu
        Laurel að laga kóðann til að ná öllum fjársjóðnum."
      courseD_collector_debugging9: "_\"Fjársjóðseyja!\"_\\\r\n\\\r\nHjálpaðu Laurel
        að laga kóðann til að ná öllum fjársjóðnum."
      courseD_collector_debugging9a_2018: "_\"Fjársjóðseyja!\"_\\\r\n\\\r\nHjálpaðu
        Laurel að laga kóðann til að ná öllum fjársjóðnum."
      courseD_collector_debugging9a_2019: "_\"Fjársjóðseyja!\"_\\\r\n\\\r\nHjálpaðu
        Laurel að laga kóðann til að ná öllum fjársjóðnum."
      courseD_collector_nested_loops_challenge2: "_\"Við skulum leita að fjársjóði
        - með lykkjum!\"_ \n\nHjálpaðu safnaranum að ná minnst tveimur hrúgum af fjársjóði
        með kubbum í verkfærakassanum. Það er mögulegt að ná öllum 4."
      courseD_collector_nested_loops_challenge2_2018: "_\"Við skulum leita að fjársjóði
        - með lykkjum!\"_ \n\nHjálpaðu safnaranum að ná minnst tveimur hrúgum af fjársjóði
        með kubbum í verkfærakassanum. Það er mögulegt að ná öllum 4."
      courseD_collector_nested_loops_challenge2_2019: "_\"Við skulum leita að fjársjóði
        - með lykkjum!\"_ \n\nHjálpaðu safnaranum að ná minnst tveimur hrúgum af fjársjóði
        með kubbum í verkfærakassanum. Það er mögulegt að ná öllum 4."
      courseD_collector_nested_loops_challenge2a: "_\"Við skulum leita að fjársjóði
        - með lykkjum!!\"_ \n\nHjálpaðu Laurel að ná minnst tveimur hrúgum af fjársjóði
        með kubbum í verkfærakassanum. Það er mögulegt að ná öllum 4."
      courseD_collector_ramp10: Láttu Laurel ferðast um þennan reit og safna fjársjóðum
        sem hún finnur.
      courseD_collector_ramp8: "Þessi þraut er mjög lík þeirri síðustu en nú er það
        Laurel ævintýrahetja!\\\r\n\n<hr/>\r\n\r\nFarðu sömu slóð og áður en notaðu
        nú endurtekningarlykkju til að safna fjársjóðum sem þú rekst á.\r"
      courseD_collector_ramp9: Nú er meira af fjársjóði.  Getur þú hjálpað Laurel
        að safna öllu?
      courseD_farmer_condLoops1: |-
        _"Getur þú hjálpað mér að hirða í dag?"_

        Hjálpaðu hirðinum að kanna maísbeðið og komast að því hvað má hirða. Notaðu skilyrði við hvern sprota. Hver stöngull mun hafa annað hvort **0 eða 1** maískólf sem er fullsprottinn.
      courseD_farmer_condLoops1_2018: |-
        _"Getur þú hjálpað mér að hirða í dag?"_

        Hjálpaðu hirðinum að kanna maísbeðið og komast að því hvað má hirða. Notaðu skilyrði við hvern sprota. Hver stöngull mun hafa annað hvort **0 eða 1** maískólf sem er fullsprottinn.
      courseD_farmer_condLoops1_2019: |-
        _"Getur þú hjálpað mér að hirða í dag?"_

        Hjálpaðu hirðinum að kanna maísbeðið og komast að því hvað má hirða. Notaðu skilyrði við hvern sprota. Hver stöngull mun hafa annað hvort **0 eða 1** maískólf sem er fullsprottinn.
      courseD_farmer_condLoops2: "_\"Hirðum báðar afurðirnar í þessu beði!\"_\n\nÞessi
        garður er blandaður, það eru í honum bæði **maís og kál**!  \n\nHjálpaðu hirðinum
        að tína það sem er tilbúið til uppskeru.  Hver planta mun annað hvort hafa
        **einn** maískólf eða **einn** kálhaus."
      courseD_farmer_condLoops2_2018: "_\"Hirðum báðar afurðirnar í þessu beði!\"_\n\nÞessi
        garður er blandaður, það eru í honum bæði **maís og kál**!  \n\nHjálpaðu hirðinum
        að tína það sem er tilbúið til uppskeru.  Hver planta mun annað hvort hafa
        **einn** maískólf eða **einn** kálhaus."
      courseD_farmer_condLoops2_2019: "_\"Hirðum báðar afurðirnar í þessu beði!\"_\n\nÞessi
        garður er blandaður, það eru í honum bæði **maís og kál**!  \n\nHjálpaðu hirðinum
        að tína það sem er tilbúið til uppskeru.  Hver planta mun annað hvort hafa
        **einn** maískólf eða **einn** kálhaus."
      courseD_farmer_condLoops3: "_\"Maís, kál OG grasker! Hjálpaðu mér að uppskera
        þetta allt.\"_\\\r\n\\\r\nHver jurt hefur annað hvort einn kólf af maís, einn
        haus af káli eða eitt grasker."
      courseD_farmer_condLoops3_2018: "_\"Maís, kál OG grasker! Hjálpaðu mér að uppskera
        þetta allt.\"_\\\r\n\\\r\nHver jurt hefur annað hvort einn kólf af maís, einn
        haus af káli eða eitt grasker."
      courseD_farmer_condLoops3_2019: "_\"Maís, kál OG grasker! Hjálpaðu mér að uppskera
        þetta allt.\"_\\\r\n\\\r\nHver jurt hefur annað hvort einn kólf af maís, einn
        haus af káli eða eitt grasker."
      courseD_farmer_condLoops4: "_\"Vá! Nú vex kálið í þyrpingum!\"_  \n\nHirðirinn
        vill tína allt úr kálgarðinum. Hver reitur hefur nú fleiri en einn kálhaus,
        svo að hirðirinn verður nú að halda áfram að tína á meðan það er enn kál á
        reitnum.  \n\n##### (Mundu: Í þessum garði er bara kál!)"
      courseD_farmer_condLoops4_2018: "_\"Vá! Nú vex kálið í þyrpingum!\"_  \n\nHirðirinn
        vill tína allt úr kálgarðinum. Hver reitur hefur nú fleiri en einn kálhaus,
        svo að hirðirinn verður nú að halda áfram að tína á meðan það er enn kál á
        reitnum.  \n\n##### (Mundu: Í þessum garði er bara kál!)"
      courseD_farmer_condLoops4_2019: "_\"Vá! Nú vex kálið í þyrpingum!\"_  \n\nHirðirinn
        vill tína allt úr kálgarðinum. Hver reitur hefur nú fleiri en einn kálhaus,
        svo að hirðirinn verður nú að halda áfram að tína á meðan það er enn kál á
        reitnum.  \n\n##### (Mundu: Í þessum garði er bara kál!)"
      courseD_farmer_condLoops5: |-
        _"Þetta er ríkuleg uppskera!"_

        Í þessu beði vex bæði maís og kál - með eitt grasker út á endanum. Getur þú hirt þetta allt?
      courseD_farmer_condLoops5_2018: |-
        _"Þetta er ríkuleg uppskera!"_

        Í þessu beði vex bæði maís og kál - með eitt grasker út á endanum. Getur þú hirt þetta allt?
      courseD_farmer_condLoops5_2019: |-
        _"Þetta er ríkuleg uppskera!"_

        Í þessu beði vex bæði maís og kál - með eitt grasker út á endanum. Getur þú hirt þetta allt?
      courseD_farmer_condLoops6: |-
        _"Tökum þetta skrefi lengra!"_

        Getur þú fundið lausn á að ná graskerinu?  Gættu þess að hirða allan maísinn á leiðinni!
      courseD_farmer_condLoops6_2018: |-
        _"Tökum þetta skrefi lengra!"_

        Getur þú fundið lausn á að ná graskerinu?  Gættu þess að hirða allan maísinn á leiðinni!
      courseD_farmer_condLoops6_2019: |-
        _"Tökum þetta skrefi lengra!"_

        Getur þú fundið lausn á að ná graskerinu?  Gættu þess að hirða allan maísinn á leiðinni!
      courseD_farmer_condLoops7: "**Áskorun:** Safnaðu öllum maís og káli og taktu
        svo graskerið."
      courseD_farmer_condLoops7_2018: "**Áskorun:** Safnaðu öllum maís og káli og
        taktu svo graskerið."
      courseD_farmer_condLoops7_2019: "**Áskorun:** Safnaðu öllum maís og káli og
        taktu svo graskerið."
      courseD_farmer_condLoops8: Safnaðu öllum maís og káli og taktu svo graskerið.
      courseD_farmer_condLoops8_2018: Safnaðu öllum maís og káli og taktu svo graskerið.
      courseD_farmer_condLoops8_2019: Safnaðu öllum maís og káli og taktu svo graskerið.
      courseD_farmer_condLoops9: Safnaðu öllum maís og káli og taktu svo graskerið.
      courseD_farmer_condLoops9_2018: Safnaðu öllum maís og káli og taktu svo graskerið.
      courseD_farmer_condLoops9_2019: Safnaðu öllum maís og káli og taktu svo graskerið.
      courseD_farmer_condLoops9_predict1: Safnaðu öllum maís og káli og taktu svo
        graskerið.
      courseD_farmer_condLoops9_predict1_2018: Safnaðu öllum maís og káli og taktu
        svo graskerið.
      courseD_farmer_condLoops9_predict1_2019: Safnaðu öllum maís og káli og taktu
        svo graskerið.
      courseD_farmer_condLoops_challenge1: |-
        Graskerin sýna hvar þú ættir að `snúa til hægri`. Haltu annars áfram, en mundu að safna öllu káli eða maís á leiðinni.

        **Hver falin planta hefur bara 1 af maís eða káli.**
      courseD_farmer_condLoops_challenge1_2018: |-
        Graskerin sýna hvar þú ættir að `snúa til hægri`. Haltu annars áfram, en mundu að safna öllu káli eða maís á leiðinni.

        **Hver falin planta hefur bara 1 af maís eða káli.**
      courseD_farmer_condLoops_challenge1_2019: |-
        Graskerin sýna hvar þú ættir að `snúa til hægri`. Haltu annars áfram, en mundu að safna öllu káli eða maís á leiðinni.

        **Hver falin planta hefur bara 1 af maís eða káli.**
      courseD_farmer_condLoops_challenge2: |-
        _"Þetta er mjög fjölbreytt grænt völundarhús!"_

        Snúðu til hægri við grasker, til vinstri við kál. Safnaðu öllu til að ljúka áfanganum.
      courseD_farmer_condLoops_challenge2_2018: |-
        _"Þetta er mjög fjölbreytt grænt völundarhús!"_

        Snúðu til hægri við grasker, til vinstri við kál. Safnaðu öllu til að ljúka áfanganum.
      courseD_farmer_condLoops_challenge2_2019: |-
        _"Þetta er mjög fjölbreytt grænt völundarhús!"_

        Snúðu til hægri við grasker, til vinstri við kál. Safnaðu öllu til að ljúka áfanganum.
      courseD_farmer_until_challenge2: Notaðu `ef/annars` kubba til að fylgja krókóttum
        stígnum. Notaðu `fjarlægja 1` kubbinn í lykkju á hverju horni til að fjarlægja
        haugana.
      courseD_farmer_while1: |-
        _"Hæ, ég er bóndi. Ég þarf hjálp þína við að slétta akurinn á jörðinni minni svo ég geti sáð í hann!"_

        Færðu mig að moldarhaugnum og notaðu `fjarlægja` kubbinn til að fjarlægja hauginn.
      courseD_farmer_while1_2018: |-
        _"Hæ, ég er bóndi. Ég þarf hjálp þína við að slétta akurinn á jörðinni minni svo ég geti sáð í hann!"_

        Færðu mig að moldarhaugnum og notaðu `fjarlægja` kubbinn til að fjarlægja hauginn.
      courseD_farmer_while1_2019: |-
        _"Hæ, ég er bóndi. Ég þarf hjálp þína við að slétta akurinn á jörðinni minni svo ég geti sáð í hann!"_

        Færðu mig að moldarhaugnum og notaðu `fjarlægja` kubbinn til að fjarlægja hauginn.
      courseD_farmer_while3: |-
        _"Færðu mig að moldarhaugnum og segðu mér hve mörg skóflufylli ég á að fjarlægja."_

        Notaðu eins fáa kubba og mögulegt er til að leysa þessa þraut.
      courseD_farmer_while3_2018: |-
        _"Færðu mig að moldarhaugnum og segðu mér hve mörg skóflufylli ég á að fjarlægja."_

        Notaðu eins fáa kubba og mögulegt er til að leysa þessa þraut.
      courseD_farmer_while3_2019: |-
        _"Færðu mig að moldarhaugnum og segðu mér hve mörg skóflufylli ég á að fjarlægja."_

        Notaðu eins fáa kubba og mögulegt er til að leysa þessa þraut.
      courseD_farmer_while4: "_\"Ég veit ekki hve mikil mold er í þessum haug!\"_\\\r\n\\\r\nHjálpaðu
        bóndanum að fjarlægja hauginn með `meðan` lykkju."
      courseD_farmer_while4_2018: "_\"Ég veit ekki hve mikil mold er í þessum haug!\"_\\\r\n\\\r\nHjálpaðu
        bóndanum að fjarlægja hauginn með `meðan` lykkju."
      courseD_farmer_while4_2019: "_\"Ég veit ekki hve mikil mold er í þessum haug!\"_\\\r\n\\\r\nHjálpaðu
        bóndanum að fjarlægja hauginn með `meðan` lykkju."
      courseD_farmer_while4_predict1: "_\"Ég veit ekki hve mikil mold er í þessum
        haug!\"_\\\r\n\\\r\nHjálpaðu bóndanum að fjarlægja hauginn með `meðan` lykkju."
      courseD_farmer_while4_predict1_2018: "_\"Ég veit ekki hve mikil mold er í þessum
        haug!\"_\\\r\n\\\r\nHjálpaðu bóndanum að fjarlægja hauginn með `meðan` lykkju."
      courseD_farmer_while4_predict1_2019: "_\"Ég veit ekki hve mikil mold er í þessum
        haug!\"_\\\r\n\\\r\nHjálpaðu bóndanum að fjarlægja hauginn með `meðan` lykkju."
      courseD_farmer_while6: "Sjáðu allar þessar holur!  Hver þeirra þarf mismunandi
        magn moldar.  \n\nÞú getur notað `meðan` lykkju til að fylla þær allar auðveldlega!"
      courseD_farmer_while6_2018: "Sjáðu allar þessar holur!  Hver þeirra þarf mismunandi
        magn moldar.  \n\nÞú getur notað `meðan` lykkju til að fylla þær allar auðveldlega!"
      courseD_farmer_while6_2019: "Sjáðu allar þessar holur!  Hver þeirra þarf mismunandi
        magn moldar.  \n\nÞú getur notað `meðan` lykkju til að fylla þær allar auðveldlega!"
      courseD_farmer_while8: "**Áskorun:** Fylltu allar þessar holur með eins fáum
        kubbum og hægt er. "
      courseD_farmer_while8_2018: "**Áskorun:** Fylltu allar þessar holur með eins
        fáum kubbum og hægt er. "
      courseD_farmer_while8_2019: "**Áskorun:** Fylltu allar þessar holur með eins
        fáum kubbum og hægt er. "
      courseD_farmer_while_challenge1: Fylltu allar holurnar og fjarlægðu alla haugana.
      courseD_farmer_while_challenge1_2018: Fylltu allar holurnar og fjarlægðu alla
        haugana.
      courseD_farmer_while_challenge1_2019: Fylltu allar holurnar og fjarlægðu alla
        haugana.
      courseD_farmer_while_challenge2: Fylltu allar holurnar og fjarlægðu alla haugana.
      courseD_harvester_nested_loops_challenge1: _"Ég þarf aðstoð á býlinu! Hjálpaðu
        mér að uppskera þennan maís en aðeins með kubbunum í verkfærakassanum."_
      courseD_harvester_nested_loops_challenge1_2018: _"Ég þarf aðstoð á býlinu! Hjálpaðu
        mér að uppskera þennan maís en aðeins með kubbunum í verkfærakassanum."_
      courseD_harvester_nested_loops_challenge1_2019: _"Ég þarf aðstoð á býlinu! Hjálpaðu
        mér að uppskera þennan maís en aðeins með kubbunum í verkfærakassanum."_
      courseD_iceage_loops1: Hjálpaðu Scrat yfir hálan ísinn svo hann nái nú akarninu!
      courseD_iceage_loops10: Hjálpaðu Scrat að komast alla leið yfir til akarnsins!
      courseD_iceage_loops10_2019: Hjálpaðu Scrat að komast alla leið yfir til akarnsins!
      courseD_iceage_loops11: Hjálpaðu Skrat að komast til akarnsins!
      courseD_iceage_loops11_2019: Hjálpaðu Skrat að komast til akarnsins!
      courseD_iceage_loops12: Náðu akarninu hvernig sem þú getur!
      courseD_iceage_loops12_2019: Náðu akarninu hvernig sem þú getur!
      courseD_iceage_loops1_2019: Hjálpaðu Scrat yfir hálan ísinn svo hann nái nú
        akarninu!
      courseD_iceage_loops2: |-
        Notaðu <xml><block type="maze_turn" block-text="turn left">
            <title name="DIR">turnLeft</title>
          </block></xml> kubb til að komast til akarnsins!
      courseD_iceage_loops2_2019: |-
        Notaðu <xml><block type="maze_turn" block-text="turn left">
            <title name="DIR">turnLeft</title>
          </block></xml> kubb til að komast til akarnsins!
      courseD_iceage_loops3: Geturðu komist til akarnsins með bara einum <xml><block
        type="maze_moveWest"/></xml> kubbi? Prófaðu að nota lykkju!
      courseD_iceage_loops3_2019: Getur þú náð akarninu með aðeins einum <xml><block
        type="maze_moveForward" block-text="move forward"/></xml> kubbi? Prófaðu að
        nota lykkju!
      courseD_iceage_loops4: Bættu við einum kubbi til að koma Scrat til akarnsins!
      courseD_iceage_loops4_2019: Bættu við einum kubbi til að koma Scrat til akarnsins!
      courseD_iceage_loops6: Getur þú bætt við lykkju til að ná akarninu?
      courseD_iceage_loops6_2019: Getur þú bætt við lykkju til að ná akarninu?
      courseD_iceage_loops7: 'Scrat langar mikið í þetta akarn! '
      courseD_iceage_loops7_2019: 'Scrat langar mikið í þetta akarn! '
      courseD_iceage_loops8: 'Getur þú lagað þennan kóða? '
      courseD_iceage_loops8_2019: 'Getur þú lagað þennan kóða? '
      courseD_iceage_loops9: Akarnið er svo langt í burtu! Getur þú notað lykkjur
        til að hjálpa Scrat að komast þangað?
      courseD_iceage_loops9_2019: Akarnið er svo langt í burtu! Getur þú notað lykkjur
        til að hjálpa Scrat að komast þangað?
      courseD_maze_intro4_2019: '_"Fylgdu slóðinni og leiddu mig til svínsins."_ '
      courseD_maze_intro5a_2019: Taktu eftir röð kubbanna og reyndu að finna út hvernig
        á að komast til svínsins!
      courseD_maze_intro5c_2019: Gættu þín á TNT! Hjálpaðu Red að komast til svínsins.
      courseD_maze_nestedLoops3: |-
        _"Zombí zvangur!"_

        Komdu uppvakningnum til sólblómsins með eins fáum kubbum og mögulegt er.
      courseD_maze_nestedLoops3_2018: |-
        _"Zombí zvangur!"_

        Komdu uppvakningnum til sólblómsins með eins fáum kubbum og mögulegt er.
      courseD_maze_nestedLoops3_2019: |-
        _"Zombí zvangur!"_

        Komdu uppvakningnum til sólblómsins með eins fáum kubbum og mögulegt er.
      courseD_maze_nestedLoops4: "Komdu mér til sólsblómsins með sem allra fæstum
        kubbum!\\\r\n\\\r\nReyndu að nota einn \"endurtaka\" kubb innan í öðrum til
        að kóðinn verði sem stystur."
      courseD_maze_nestedLoops4_2018: "Komdu mér til sólsblómsins með sem allra fæstum
        kubbum!\\\r\n\\\r\nReyndu að nota einn \"endurtaka\" kubb innan í öðrum til
        að kóðinn verði sem stystur."
      courseD_maze_nestedLoops4_2019: "Komdu mér til sólsblómsins með sem allra fæstum
        kubbum!\\\r\n\\\r\nReyndu að nota einn \"endurtaka\" kubb innan í öðrum til
        að kóðinn verði sem stystur."
      courseD_maze_nestedLoops6: |-
        _"Verð éta zólblóm!"_

        Komdu uppvakningnum til sólblómsins með þeim kubbum sem eru til staðar.
      courseD_maze_nestedLoops6_2018: |-
        _"Verð éta zólblóm!"_

        Komdu uppvakningnum til sólblómsins með þeim kubbum sem eru til staðar.
      courseD_maze_nestedLoops6_2019: |-
        _"Verð éta zólblóm!"_

        Komdu uppvakningnum til sólblómsins með þeim kubbum sem eru til staðar.
      courseD_maze_ramp1: 'Í þessari þraut: Festu alla kubbana saman og smelltu á
        "Keyra" til að sjá hvað gerist!'
      courseD_maze_ramp1_2018: 'Í þessari þraut: Festu alla kubbana saman og smelltu
        á "Keyra" til að sjá hvað gerist!'
      courseD_maze_ramp1_2019: 'Í þessari þraut: Festu alla kubbana saman og smelltu
        á "Keyra" til að sjá hvað gerist!'
      courseD_maze_ramp2: Dragðu annan `færa áfram` kubb úr verkfærakassanum og festu
        svo alla kubbana við `þegar keyrt` kubbinn til að ljúka við kóðann.
      courseD_maze_ramp2_2018: Dragðu annan `færa áfram` kubb úr verkfærakassanum
        og festu svo alla kubbana við `þegar keyrt` kubbinn til að ljúka við kóðann.
      courseD_maze_ramp2_2019: Dragðu annan `færa áfram` kubb úr verkfærakassanum
        og festu svo alla kubbana við `þegar keyrt` kubbinn til að ljúka við kóðann.
      courseD_maze_ramp3: "_\"Þetta svín ýfir á mér fjaðrirnar.\"_\n\nÞað er einn
        aukakubbur sem mun láta fuglinn hrapa. \nHentu kubbnum með því að draga hann
        aftur í verkfærakassann."
      courseD_maze_ramp3_2018: "_\"Þetta svín ýfir á mér fjaðrirnar.\"_\n\nÞað er
        einn aukakubbur sem mun láta fuglinn hrapa. \nHentu kubbnum með því að draga
        hann aftur í verkfærakassann."
      courseD_maze_ramp3_2019: |-
        Hjálpaðu fuglinum að komast til svínsins. Nú er einn blár `færa áfram` kubbur í viðbót.

        Hentu aukakubbnum með því að draga hann frá hinum kubbunum og aftur í verkfærakassann.
      courseD_maze_ramp4: |-
        _"Færðu mig eftir slóðinni að kjánalega svíninu."_

        TNT sprengiefnið gæti valdið fjaðrafoki!
      courseD_maze_ramp4_2018: |-
        _"Færðu mig eftir slóðinni að kjánalega svíninu."_

        TNT sprengiefnið gæti valdið fjaðrafoki!
      courseD_maze_ramp4_2019: "_\"Færðu mig eftir slóðinni að kjánalega svíninu.\"_\\\r\n\\\r\nTNT
        sprengiefnið gæti valdið fjaðrafoki!"
      courseD_maze_ramp5: |-
        _"Fylgdu þessari slóð til að koma mér til svínsins!"_

        Gættu þín á TNT.
      courseD_maze_ramp5_2018: |-
        _"Fylgdu þessari slóð til að koma mér til svínsins!"_

        Gættu þín á TNT.
      courseD_maze_ramp5_2019: |-
        _"Fylgdu þessari slóð til að koma mér til svínsins!"_

        Gættu þín á TNT.
      courseD_maze_ramp5a: Taktu eftir röð kubbanna og reyndu að finna út hvernig
        á að komast til svínsins!
      courseD_maze_ramp5a_2018: Taktu eftir röð kubbanna og reyndu að finna út hvernig
        á að komast til svínsins!
      courseD_maze_ramp5a_2019: Taktu eftir röð kubbanna og reyndu að finna út hvernig
        á að komast til svínsins!
      courseD_maze_ramp5b: "**Áskorun:** Finndu leið um þetta völundarhús svo fuglinn
        finni svínið!"
      courseD_maze_ramp5b_2018: "**Áskorun:** Finndu leið um þetta völundarhús svo
        fuglinn finni svínið!"
      courseD_maze_ramp5b_2019: "**Áskorun:** Finndu leið um þetta völundarhús svo
        fuglinn finni svínið!"
      courseD_maze_ramp5c: Hjálpaðu fuglinum að komast til svínsins.
      courseD_maze_ramp5c_2018: Hjálpaðu fuglinum að komast til svínsins.
      courseD_maze_ramp5c_2019: Hjálpaðu Skrat að komast til akarnsins.
      courseD_maze_ramp5d: Komdu fuglinum til svínsins.
      courseD_maze_ramp5d_2018: Komdu fuglinum til svínsins.
      courseD_maze_ramp5d_2019: Komdu fuglinum til svínsins.
      courseD_maze_ramp6: |-
        _"Slakaðu á og hjálpaðu mér að finna vonda svínið. Annars gæti ég orðið reiður!"_

        Þegar þú hefur marga eins kubba í röð, geturðu í staðinn sett bara einn þeirra í `endurtaka` lykkju. Þetta gerir það sama en með minni kóða!
      courseD_maze_ramp7: "_\"Nú er ég sko reiður!\"_ \\\r\n\\\r\n\\\r\nNotaðu það
        sem þú hefur lært til að koma fuglinum til svínsins!"
      courseD_maze_until10: Hjálpaðu uppvakningum að komast til sólblómsins.
      courseD_maze_until10_2018: Hjálpaðu uppvakningum að komast til sólblómsins.
      courseD_maze_until10_2019: Hjálpaðu uppvakningum að komast til sólblómsins.
      courseD_maze_until10_predict2: Hjálpaðu uppvakningum að komast til sólblómsins.
      courseD_maze_until10_predict2_2018: Hjálpaðu uppvakningum að komast til sólblómsins.
      courseD_maze_until10_predict2_2019: Hjálpaðu uppvakningum að komast til sólblómsins.
      courseD_maze_until4: |-
        _"Kæra mannvera. Ég zombí. Ég zvangur. Verð... komazt... zólblóm..."_

        Getur þú komið uppvakningum til sólblómsins með kubbunum sem tiltækir eru?
      courseD_maze_until4_2018: |-
        _"Kæra mannvera. Ég zombí. Ég zvangur. Verð... komazt... zólblóm..."_

        Getur þú komið uppvakningum til sólblómsins með kubbunum sem tiltækir eru?
      courseD_maze_until4_2019: |-
        _"Kæra mannvera. Ég zombí. Ég zvangur. Verð... komazt... zólblóm..."_

        Getur þú komið uppvakningum til sólblómsins með kubbunum sem tiltækir eru?
      courseD_maze_until5: Notaðu `ef` kubbinn til að hjálpa uppvakningnum að ákveða
        hvenær á að snúa og komdu honum svo til sólblómsins.
      courseD_maze_until5_2018: Notaðu `ef` kubbinn til að hjálpa uppvakningnum að
        ákveða hvenær á að snúa og komdu honum svo til sólblómsins.
      courseD_maze_until5_2019: Notaðu `ef` kubbinn til að hjálpa uppvakningnum að
        ákveða hvenær á að snúa og komdu honum svo til sólblómsins.
      courseD_maze_until6: Hjálpaðu uppvakningum að komast til sólblómsins.
      courseD_maze_until6_2018: Hjálpaðu uppvakningum að komast til sólblómsins.
      courseD_maze_until6_2019: Hjálpaðu uppvakningum að komast til sólblómsins.
      courseD_maze_until7: Hjálpaðu uppvakningum að komast til sólblómsins.
      courseD_maze_until7_2018: Hjálpaðu uppvakningum að komast til sólblómsins.
      courseD_maze_until7_2019: Hjálpaðu uppvakningum að komast til sólblómsins.
      courseD_maze_until8: Hjálpaðu uppvakningum að komast til sólblómsins.
      courseD_maze_until9: "**Áskorun:** Forðastu kjamsarana og hjálpaðu uppvakningnum
        að komast til sólblómsins."
      courseD_maze_until9_2018: "**Áskorun:** Forðastu kjamsarana og hjálpaðu uppvakningnum
        að komast til sólblómsins."
      courseD_maze_until9_2019: "**Áskorun:** Forðastu kjamsarana og hjálpaðu uppvakningnum
        að komast til sólblómsins."
      courseD_maze_until_challenge1: Engar vísbendingar - bara áskorun. Komdu uppvakningnum
        til sólblómsins.
      courseD_playLab_cond1: "Til að byrja með í leiknum, þarf Pegleg sjóræningi (leikmaður
        1) að geta hreyft sig í allar áttir. Tengdu kubbana við réttu atvikin til
        að hreyfa Pegleg. \n\n* * *\n\nHjálpaðu Pegleg að safna flöggunum til að leysa
        þessa þraut."
      courseD_playLab_cond1_2018: "Til að byrja með í leiknum, þarf Pegleg sjóræningi
        (leikmaður 1) að geta hreyft sig í allar áttir. Tengdu kubbana við réttu atvikin
        til að hreyfa Pegleg. \n\n* * *\n\nHjálpaðu Pegleg að safna flöggunum til
        að leysa þessa þraut."
      courseD_playLab_cond2: "Nú skulum við bæta við stigaskori!  \n\nBreyttu kóðanum
        svo að Pegleg (leikmaður 1) fái stig ef hann kemst til drekans (leikmanns
        2). "
      courseD_playLab_cond2_2018: "Nú skulum við bæta við stigaskori!  \n\nBreyttu
        kóðanum svo að Pegleg (leikmaður 1) fái stig ef hann kemst til drekans (leikmanns
        2). "
      courseD_playLab_cond3: 'Notaðu `endurtaka endalaust` lykkju til að láta drekann
        (leikmann 2) skipta um skap af handahófi á sekúndu fresti.  '
      courseD_playLab_cond3_2018: 'Notaðu `endurtaka endalaust` lykkju til að láta
        drekann (leikmann 2) skipta um skap af handahófi á sekúndu fresti.  '
      courseD_playLab_cond3a: "Nú skulum við nota það sem við höfum lært um skilyrði
        til að bæta þennan leik svo um munar. \n\nBættu við kóða svo að Pegleg fái
        tvö stig þegar hann kemst til drekans en bara _ef_ drekinn er í góðu skapi.
        Annars bætist aðeins 1 stig við skorið hans."
      courseD_playLab_cond3a_2018: "Nú skulum við nota það sem við höfum lært um skilyrði
        til að bæta þennan leik svo um munar. \n\nBættu við kóða svo að Pegleg fái
        tvö stig þegar hann kemst til drekans en bara _ef_ drekinn er í góðu skapi.
        Annars bætist aðeins 1 stig við skorið hans."
      courseD_playLab_cond4: |-
        Þetta er að verða áhugavert!

        Bættu við kóða svo að ninjan (leikmaður 3) byrji að elta Pegleg um leið og leikurinn byrjar.  Láttu leikinn enda með tapi ef ninjan nær honum.
      courseD_playLab_cond4_2018: |-
        Þetta er að verða áhugavert!

        Bættu við kóða svo að ninjan (leikmaður 3) byrji að elta Pegleg um leið og leikurinn byrjar.  Láttu leikinn enda með tapi ef ninjan nær honum.
      courseD_playLab_cond5: |-
        Nú vantar okkur leið til að vinna leikinn.

        Bættu við `endurtaka endalaust` sem athugar stöðugt **hvort** skorið sé hærra en 5 og lýkur leiknum með **sigri** ef svo er.
      courseD_playLab_cond5_2018: |-
        Nú vantar okkur leið til að vinna leikinn.

        Bættu við `endurtaka endalaust` sem athugar stöðugt **hvort** skorið sé hærra en 5 og lýkur leiknum með **sigri** ef svo er.
      courseD_playLab_cond6: |-
        Úff, það er erfitt að vinna í þessum leik!

        Við skulum aðlaga leikinn til að gera hann skemmtilegri. Þessi áskorun er í tveimur hlutum:

        * * *

        1.  Hægðu á ninjunni (leikmanni 3) áður en þú lætur hana elta sjóræningjann (leikmann 1).

        2.  Notaðu `endurtaka endalaust` lykkju til að athuga hvort sjóræninginn er á "örugga svæðinu" neðan við röð kolkrabbanna (meira en 225 díla niður). Ef svo er á ninjan að **flýja** sjóræningjann. Annars á ninjan að **elta** sjóræningjann.
      courseD_playLab_cond6_2018: "Úff, það er erfitt að sigra í þessum leik!\n\nVið
        skulum breyta honum til að gera hann skemmtilegri. Þessi áskorun er tvíþætt:\n\n*
        * *\n\n1.  Hægðu á ninjunni (leikmanni 3) áður en þú lætur hana elta sjóræningjann
        (leikmann 1).  \n\n2.  Notaðu `endurtaka endalaust` lykkju til að athuga hvort
        sjóræninginn er á \"örugga svæðinu\" neðan við röð kolkrabbanna (meira en
        225 díla niður). Ef hann er það, á ninjan að **flýja** sjóræningjann. Annars
        á ninjan að **elta** hann.  "
      courseD_playLab_cond6a: "Við viljum ekki að sjóræninginn hangi of lengi á \"örugga
        svæðinu\"! \n\nBættu kóða við `ef` yrðinguna svo að ef sjóræninginn (leikmaður
        1) er á örugga svæðinu, þá muni forritið bíða í eina sekúndu, og síðan draga
        frá eitt stig á meðan hann er neðan við röð kolkrabbanna."
      courseD_playLab_cond6a_2018: "Við viljum ekki að sjóræninginn hangi of lengi
        á \"örugga svæðinu\"! \n\nBættu kóða við `ef` yrðinguna svo að ef sjóræninginn
        (leikmaður 1) er á örugga svæðinu, þá muni forritið bíða í eina sekúndu, og
        síðan draga frá eitt stig á meðan hann er neðan við röð kolkrabbanna."
      courseD_playLab_condFP_2018: |-
        Búðu nú til þinn eigin leik sem vinir þínir munu dást að!

        * * *

        Þú gætir:

        -   Látið sjóræningjann og ninjuna vinna saman að því að ná stigum af kolkröbbunum
        -   Látið báða kolkrabbana fylgja sjóræningjanum og skaða ninjuna tvöfalt ef þeir rekast á hana
        -   Látið persónu hverfa ef ninja snertir hana
        -   Gert eitthvað allt annað!
      courseD_scrat_ramp1: 'Í þessari þraut: Festu alla kubbana saman og smelltu á
        "Keyra" til að sjá hvað gerist!'
      courseD_scrat_ramp2: Dragðu annan `færa áfram` kubb úr verkfærakassanum og festu
        svo alla kubbana við `þegar keyrt` kubbinn til að ljúka við kóðann.
      courseD_scrat_ramp3: "_\"Þetta svín ýfir á mér fjaðrirnar.\"_\n\nÞað er einn
        aukakubbur sem mun láta fuglinn hrapa. \nHentu kubbnum með því að draga hann
        aftur í verkfærakassann."
      courseD_scrat_ramp4: Forðastu TNT annars verður fjaðrafok!
      courseD_scrat_ramp5: |-
        _"Fylgdu þessari slóð til að koma mér til svínsins!"_

        Gættu þín á TNT.
      courseD_scrat_ramp6: |-
        _"Slakaðu á og hjálpaðu mér að finna vonda svínið. Annars gæti ég reiðst!"_

        Þegar þú hefur marga eins kubba í röð, geturðu í staðinn sett bara einn þeirra í `endurtaka` lykkju. Þetta gerir það sama en með minni kóða!
      courseD_scrat_ramp7: Hjálpaðu Skrat að komast til akarnsins!
      courseD_scrat_ramp8: "**Áskorun:** Notaðu það sem þú hefur lært til að koma
        Skrat til akarnsins!"
      courseE_aboutme_1: "![](https://images.code.org/93e1c04857ff781bb5c4cc76b15ed563-image-1557179820861.png)
        _\"Halló jörð! Ég heiti Rikki, og hér er ýmislegt um mig sem mig langar að
        deila með ykkur!\"_\n\n**Frjáls æfing**: Rikki er að nota Verusmiðjuna (Sprite
        Lab) til að búa til _gagnvirkt veggspjald_ um sjálfa sig sem hún getur deilt
        á vefnum.  \n\nRikki hefur gefið þér leyfi til að skoða veggspjaldið. Þú getur
        meira að segja breytt kóðanum! \n\nLeiktu þér með veggspjald Rikki og kóðaðu
        svolítið. Smelltu svo á **Ljúka**."
      courseE_aboutme_2: "![](https://images.code.org/2bae4bc7c7d59fac0cd4b1370d3c4a11-image-1557179992653.png)
        _\"Rikki hér! Ég skal hjálpa þér að gera flott veggspjald. Byrjaðu á að smella
        á búningaflipann (Costumes)!\"_\n\n1.  Smelltu á **Búningar** flipann efst
        til vinstri á skjánum (við hliðina á  **Kóði**). \n2.  Breyttu upphaflega
        búningnum eða bættu við nýjum eins og þú vilt. \n3.  Settu veruna í þinn búning
        í kóðanum hér fyrir neðan.\n4.  Smelltu á **Keyra** til að sjá veruna með
        nýja útlitið!"
      courseE_aboutme_3: "![](https://images.code.org/2bae4bc7c7d59fac0cd4b1370d3c4a11-image-1557179992653.png)
        _\"Segðu eitthvað um þig, en gættu þess að það sé ÖRUGGT!\"_\n\nNotaðu <xml><block
        type=\"gamelab_spriteClicked\" block-text=\"the when sprite clicked event
        block\"></block></xml> and <xml><block type=\"gamelab_printText\" block-text=\"the
        print text block\"></block></xml> (í flokknum `Heimur`) til að deila upplýsingum
        um þig þegar smellt er á veruna þína! \n\n**En gættu þess að upplýsingarnar
        sem þú deilir séu ÖRUGGAR.**\n\n* * *\n\n#### Dæmi um ÖRUGGAR og ÓÖRUGGAR
        upplýsingar\n\n| ÖRUGGT                | ÓÖRUGGT               |\n| ---------------------
        | --------------------- |\n| fornafn               | fullt nafn            |\n|
        uppáhalds hlutir      | heimilisfang          |\n| kurteislegar skoðanir |
        símanúmer eða netfang |"
      courseE_aboutme_4: |-
        ![](https://images.code.org/2bae4bc7c7d59fac0cd4b1370d3c4a11-image-1557179992653.png) _"Bættu fleiri verum á veggspjaldið! Ekki gleyma að klæða þá í búninga!"_

        Bættu **minnst tveimur** öðrum verum á spjaldið. Láttu hverja þeirra hafa sérstakan búning!
      courseE_aboutme_5: |-
        ![](https://images.code.org/0c3ec1da3493c3e10f5ec714ef1670e3-image-1557185359875.png) _"Segðu heiminum meira um þig í gegnum nýju verurnar!"_

        Láttu nýju verurnar gefa upplýsingar þegar smellt er á þær. Gættu þess að gefa bara ÖRUGGAR upplýsingar!
      courseE_aboutme_6: "![](https://images.code.org/4e9c4465463d0c061b2b47b23d5817ca-image-1557185863600.png)
        _\"Vá! Veggspjaldið þitt er næstum því eins flott og mitt! Næstum. \U0001F609\"_\n\nHver
        á þennan heim?! Þú átt hann! \n\nHaltu því áfram! Hér eru nokkrar hugmyndir
        um hvernig þú getur gert veggspjaldið jafnvel enn betra:\n\n-   Bættu við
        bakgrunni! Veldu bakgrunn sem passar við spjaldið þitt.\n-   Bættu við hegðunum!
        Láttu verurnar bregðast mismunandi við ef smellt er á þær.\n-   Bættu við
        fleiri atvikum! Notaðu hina kubbana í flokknum `Atvik`."
      courseE_artist_concept1: "Endurgerðu þessa mynd. \n\n-   Sexhyrningarnir hafa
        50 díla hliðar\n-   Það eru 100 dílar á milli sexhyrninga\n-   Línur sexhyrninganna
        eru 1 díll, 4 dílar og 8 dílar á breidd."
      courseE_artist_concept1_2018: "Endurgerðu þessa mynd. \n\n-   Sexhyrningarnir
        hafa 50 díla hliðar\n-   Það eru 100 dílar á milli sexhyrninga\n-   Línur
        sexhyrninganna eru 1 díll, 4 dílar og 8 dílar á breidd."
      courseE_artist_concept4: "Endurgerðu þessa teikningu. \n\nHver ferningur hefur
        **20 díla** langar hliðar og það eru **15 ferningar í hverri röð**."
      courseE_artist_concept4_2018: "Endurgerðu þessa teikningu. \n\nHver ferningur
        hefur **20 díla** langar hliðar og það eru **15 ferningar í hverri röð**."
      courseE_artist_concept_challenge1: |-
        <img src="https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png"
        width="200px"/>

        Hér er áskorun!

        Þessi hönnun notar aðeins kubba sem þú hefur þegar séð.  Getur þú endurskapað hana?  Prófaðu þig áfram. Það er ekkert atriði að þetta heppnist í fyrstu (eða jafnvel sjöttu!) tilraun.
      courseE_artist_concept_challenge1_2018: |-
        <img src="https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png"
        width="200px"/>

        Hér er áskorun!

        Þessi hönnun notar aðeins kubba sem þú hefur þegar séð.  Getur þú endurskapað hana?  Prófaðu þig áfram. Það er ekkert atriði að þetta heppnist í fyrstu (eða jafnvel sjöttu!) tilraun.
      courseE_artist_concept_challenge2: Búðu til fimm hjóllaga mynstur með kóðanum
        fyrir neðan.
      courseE_artist_concept_challenge2_2018: Búðu til fimm hjóllaga mynstur með kóðanum
        fyrir neðan.
      courseE_artist_functions1: |-
        _"Ég listauppvakningur. Mig elska teikna!"_

        Hjálpaðu uppvakningnum að teikna gleraugu úr ferningum með 100 díla hliðar. Bilið á milli glerjanna er 75 dílar.
      courseE_artist_functions10: |-
        Í þetta skipti notar þú raðir af 8 sexhyrningum með 25 díla hliðar.

        -   Teiknaðu hvern sexhyrning með því að endurtaka hliðina 6 sinnum með 60 gráðu snúningum.
        -   Til að teikna tígul þarftu að snúa til skiptis 60 gráður og 120 gráður.
      courseE_artist_functions10_2018: |-
        Í þetta skipti notar þú raðir af 8 sexhyrningum með 25 díla hliðar.

        -   Teiknaðu hvern sexhyrning með því að endurtaka hliðina 6 sinnum með 60 gráðu snúningum.
        -   Til að teikna tígul þarftu að snúa til skiptis 60 gráður og 120 gráður.
      courseE_artist_functions10_2019: |-
        Í þetta skipti notar þú raðir af 8 sexhyrningum með 25 díla hliðar.

        -   Teiknaðu hvern sexhyrning með því að endurtaka hliðina 6 sinnum með 60 gráðu snúningum.
        -   Til að teikna tígul þarftu að snúa til skiptis 60 gráður og 120 gráður.
      courseE_artist_functions1_copy: |-
        _"Ég listauppvakningur. Mig elska teikna!"_

        Hjálpaðu uppvakningnum að teikna gleraugu úr ferningum með 100 díla hliðar. Bilið á milli glerjanna er 75 dílar.
      courseE_artist_functions2: "Með föllum getur þú búið til nýja kubba! \n\nVið
        höfum fært kubbana sem teikna ferning inn í fall, sem heitir `teikna ferning`.
        Getur þú notað `teikna ferning` fallið til að búa til gleraugun? \n\n* * *\n\nÞað
        eru 75 dílar á milli ferninganna."
      courseE_artist_functions2_2018: "Hér er fall sem heitir `teikna ferning`. Notaðu
        það til að ljúka þessari teikningu. \n\n* * *\n\nÞað er 75 díla bil á milli
        ferninganna."
      courseE_artist_functions2_2019: "Hér er fall sem heitir `teikna ferning`. Notaðu
        það til að ljúka þessari teikningu. \n\n* * *\n\nÞað er 75 díla bil á milli
        ferninganna."
      courseE_artist_functions2_copy: "Með föllum getur þú búið til nýja kubba! \n\nVið
        höfum fært kubbana sem teikna ferning inn í fall, sem heitir `teikna ferning`.
        Getur þú notað `teikna ferning` fallið til að búa til gleraugun? \n\n* * *\n\nÞað
        eru 75 dílar á milli ferninganna."
      courseE_artist_functions3: "Við munum bráðum fara meira í föll. En fyrst skulum
        við æfa að teikna þessa stjörnu. \n\nÞú getur búið hana til með því að nota
        \"endurtaka\" kubb."
      courseE_artist_functions3_2018: |-
        Búðu til fall sem teiknar þessa stjörnu.

        * * *

        -   Hver armur stjörnunnar er 25 dílar á lengd
        -   Þú þarft að snúa um 45 gráður til að fá 8 arma
        -   Það er í lagi að fara fram og til baka á sama arminum
      courseE_artist_functions3_2019: |-
        Búðu til fall sem teiknar þessa stjörnu.

        * * *

        -   Hver armur stjörnunnar er 25 dílar á lengd
        -   Þú þarft að snúa um 45 gráður til að fá 8 arma
        -   Það er í lagi að fara fram og til baka á sama arminum
      courseE_artist_functions3_copy: "Við munum bráðum fara meira í föll. En fyrst
        skulum við æfa að teikna þessa stjörnu. \n\nÞú getur búið hana til með því
        að nota \"endurtaka\" kubb."
      courseE_artist_functions4: |-
        Þar sem þú kannt nú að teikna eina stjörnu, skulum við teikna fjórar!

        -   Hver armur er 25 díla langur
        -   Snúðu um 45 gráður á milli arma
        -   Hoppaðu um 100 díla á milli stjarna
      courseE_artist_functions4_copy: |-
        Þar sem þú kannt nú að teikna eina stjörnu, skulum við teikna fjórar!

        -   Hver armur er 25 díla langur
        -   Snúðu um 45 gráður á milli arma
        -   Hoppaðu um 100 díla á milli stjarna
      courseE_artist_functions5: |-
        Hvenær er erfiðara að teikna þrjár stjörnur heldur en fjórar? Þegar þú þarft líka að stökkva yfir tunglið!

        Teiknaðu bara þessar þrjár stjörnur til að ljúka þrautinni.
      courseE_artist_functions5_2018: |-
        Hvenær er erfiðara að teikna þrjár stjörnur heldur en fjórar? Jú, þegar maður þarf líka að stökkva yfir tunglið!

        Teiknaðu bara þessar þrjár stjörnur til að ljúka þrautinni.

        * * *

        -   Hoppið frá fyrstu til annarrar stjörnu er **200** dílar
        -   Hoppið frá annarri til þriðju stjörnu er **100** dílar
      courseE_artist_functions5_2019: |-
        Hvenær er erfiðara að teikna þrjár stjörnur heldur en fjórar? Jú, þegar maður þarf líka að stökkva yfir tunglið!

        Teiknaðu bara þessar þrjár stjörnur til að ljúka þrautinni.

        * * *

        -   Hoppið frá fyrstu til annarrar stjörnu er **200** dílar
        -   Hoppið frá annarri til þriðju stjörnu er **100** dílar
      courseE_artist_functions5_copy: |-
        Hvenær er erfiðara að teikna þrjár stjörnur heldur en fjórar? Þegar þú þarft líka að stökkva yfir tunglið!

        Teiknaðu bara þessar þrjár stjörnur til að ljúka þrautinni.
      courseE_artist_functions6: "Þetta gengur bara vel hjá þér! \n\nBúðu til þennan
        glugga með því að teikna ferning og snúa svo um 90 gráður. Endurtaktu þetta
        svo."
      courseE_artist_functions7: "Tökum nú kóðann fyrir gluggann og setjum hann í
        fall `teikna glugga`. Nú getum við kallað á fallið hvenær sem við viljum teikna
        glugga án þess að þurfa að skrifa kóðann aftur. \n\n![](https://images.code.org/615a5e93abdaffeed438a976a56fc1f5-image-1497998528859.gif)\n\nReyndu
        að leysa þessa þraut með því að búa til fallið `teikna glugga` og kalla svo
        á það fimm sinnum. Gættu þín á dyrunum!\n\n-   Efri gluggarnir eru með 50
        díla millibili.  \n-   Neðri gluggarnir eru 100 dílum neðan við efri gluggaröðina."
      courseE_artist_functions7_2018: "Að teikna þessa glugga einn og einn í einu
        væri algjör höfuðverkur!  \n\nReyndu að leysa þessa þraut með því að búa til
        fallið `teikna glugga` og kalla á það fimm sinnum. Gættu þín á dyrunum!\n\n*
        * *\n\n-   Hver gluggi er gerður úr fjórum **25** díla ferningum.\n-   Það
        er **100** díla hopp á milli efri glugganna.  \n-   Neðri gluggarnir eru **150**
        dílum neðan við þá efri."
      courseE_artist_functions7_2019: "Að teikna þessa glugga einn og einn í einu
        væri algjör höfuðverkur!  \n\nReyndu að leysa þessa þraut með því að búa til
        fallið `teikna glugga` og kalla á það fimm sinnum. Gættu þín á dyrunum!\n\n*
        * *\n\n-   Hver gluggi er gerður úr fjórum **25** díla ferningum.\n-   Það
        er **100** díla hopp á milli efri glugganna.  \n-   Neðri gluggarnir eru **150**
        dílum neðan við þá efri."
      courseE_artist_functions8: |-
        **Áskorun:** Veistu að þú getur kallað á föll _innan úr_ öðrum föllum?!

        Búðu til eins mörg föll og þú heldur að þú þurfir til að búa til þessa mynd af 50 díla ferningum.
      courseE_artist_functions8a_2018: |-
        \_"Föll auðveld!"

        Nú ætlum við að byggja upp svolítið flott!  Byrjum á að búa til fall fyrir þennan ferning.
      courseE_artist_functions8a_2019: |-
        \_"Föll auðveld!"

        Nú ætlum við að byggja upp svolítið flott!  Byrjum á að búa til fall fyrir þennan ferning.
      courseE_artist_functions8b_2018: |-
        _"Zombí zvimar."_

        Kallaðu á fallið `teikna ferning` innan úr fallinu `teikna röð ferninga` til að gera þetta enn auðveldara!

        * * *

        -   Ferningar eru með _50_ díla millibili.
      courseE_artist_functions8b_2019: |-
        _"Zombí zvimar."_

        Kallaðu á fallið `teikna ferning` innan úr fallinu `teikna röð ferninga` til að gera þetta enn auðveldara!

        * * *

        -   Ferningar eru með _50_ díla millibili.
      courseE_artist_functions8c_2018: Bættu við enn einu falli sem býr til þessa
        röð af víxluðum ferningum með því að nota fallið `teikna röð ferninga`.
      courseE_artist_functions8c_2019: Bættu við enn einu falli sem býr til þessa
        röð af víxluðum ferningum með því að nota fallið `teikna röð ferninga`.
      courseE_artist_functions9: "Búðu til þessa mynd með þeim fáu kubbum sem þú færð.
        \ \n\n-   Hver þríhyrningur hefur **50 díla** hliðar  \n-   Til að teikna
        tígul, þarftu að snúa til skiptis **60 gráður og 120 gráður**."
      courseE_artist_functions9_2018: "**Áskorun:** Búðu til þessa mynd með þeim fáu
        kubbum sem þú færð.  \n\n-   Hver þríhyrningur hefur **50 díla** hliðar  \n-
        \  Til að teikna tígul, þarftu að snúa til skiptis **60 gráður og 120 gráður**."
      courseE_artist_functions9_2019: "**Áskorun:** Búðu til þessa mynd með þeim fáu
        kubbum sem þú færð.  \n\n-   Hver þríhyrningur hefur **50 díla** hliðar  \n-
        \  Til að teikna tígul, þarftu að snúa til skiptis **60 gráður og 120 gráður**."
      courseE_artist_functionsProj_2018: "**Hugkveikja:** Notaðu það sem þú hefur
        lært til að búa til það sem þú vilt!  \n\nGetur búið til svona vindrellu?"
      courseE_artist_functionsProj_2019: "**Hugkveikja:** Notaðu það sem þú hefur
        lært til að búa til það sem þú vilt!  \n\nGetur búið til svona vindrellu?"
      courseE_artist_functions_challenge1: Þegar þú hefur einu sinni skilgreint fall,
        getur þú notað það aftur og aftur - hvar og hvenær sem þú vilt! Prófaðu þennan
        kóða til að sjá hvernig hann virkar og breyttu honum svo til að búa til þína
        eigin flottu hönnun!
      courseE_artist_functions_challenge1_2018: Þegar þú hefur einu sinni skilgreint
        fall, getur þú notað það aftur og aftur - hvar og hvenær sem þú vilt! Prófaðu
        þennan kóða til að sjá hvernig hann virkar og breyttu honum svo til að búa
        til þína eigin flottu hönnun!
      courseE_artist_functions_challenge1_2019: Þegar þú hefur einu sinni skilgreint
        fall, getur þú notað það aftur og aftur - hvar og hvenær sem þú vilt! Prófaðu
        þennan kóða til að sjá hvernig hann virkar og breyttu honum svo til að búa
        til þína eigin flottu hönnun!
      courseE_artist_functions_challenge2: |-
        Þú getur notað `hoppa` skipunina til að komast á hvað stað sem er í skjámyndinni! Prófaðu þennan kóða til að sjá hvernig hann virkar. Breyttu honum svo eftir eigin höfði!

        <xml>
        <block type="jump_to_xy">
        <title name="XPOS">???</title>
        <title name="YPOS">???</title>
        </block></xml>
      courseE_artist_functions_challenge2_2018: |-
        Þú getur notað `hoppa` skipunina til að komast á hvað stað sem er í skjámyndinni! Prófaðu þennan kóða til að sjá hvernig hann virkar. Breyttu honum svo eftir eigin höfði!

        <xml>
        <block type="jump_to_xy">
        <title name="XPOS">???</title>
        <title name="YPOS">???</title>
        </block></xml>
      courseE_artist_functions_challenge2_2019: |-
        Þú getur notað `hoppa` skipunina til að komast á hvað stað sem er í skjámyndinni! Prófaðu þennan kóða til að sjá hvernig hann virkar. Breyttu honum svo eftir eigin höfði!

        <xml>
        <block type="jump_to_xy">
        <title name="XPOS">???</title>
        <title name="YPOS">???</title>
        </block></xml>
      courseE_artist_functions_predict1: 'Hér er þraut sem notar fall (function) sem
        við höfum skilgreint. '
      courseE_artist_functions_predict1_2018: 'Hér er þraut sem notar fall (function)
        sem við höfum skilgreint. '
      courseE_artist_functions_predict1_2019: 'Hér er þraut sem notar fall (function)
        sem við höfum skilgreint. '
      courseE_artist_functions_predict1_copy: 'Hér er þraut sem notar fall (function)
        sem við höfum skilgreint. '
      courseE_artist_ramp8: |-
        Fínt!  Nú skulum nota þessa `endurtaka` lykkju til að búa til ferning með listamanninum!  Kubbarnir eru svolítið öðruvísi en í öðrum þrautum en hugmyndin sú sama.

        * * *

        ##### Hver hlið ferningsins er 200 dílar á lengd og þú þarft að snúa um 90 gráður fyrir hvert horn.
      courseE_artist_ramp8_2: |-
        Fínt!  Nú skulum nota þessa `endurtaka` lykkju til að búa til ferning með listamanninum!  Kubbarnir eru svolítið öðruvísi en í öðrum þrautum en hugmyndin sú sama.

        * * *

        ##### Hver hlið ferningsins er 200 dílar á lengd og þú þarft að snúa um 90 gráður fyrir hvert horn.
      courseE_artist_ramp9: |-
        Notaðu það sem þú hefur lært til að teikna þennan þríhyrning.

        * * *

        ##### Hver hlið er 100 díla löng. Þú þarft að snúa um 120 gráður á hverju horni.
      courseE_artist_ramp9_2: |-
        Notaðu það sem þú hefur lært til að teikna þennan þríhyrning.

        * * *

        ##### Hver hlið er 100 díla löng. Þú þarft að snúa um 120 gráður á hverju horni.
      courseE_bee_concept1: "_\"Hér er BÝ-sna mikið af blómum!\"_\n\nSafnaðu öllum
        blómasafanum úr hverju blómi. "
      courseE_bee_concept1_2018: "_\"Hér er BÝ-sna mikið af blómum!\"_\n\nSafnaðu
        öllum blómasafanum úr hverju blómi. "
      courseE_bee_concept2: "Hjálpaðu býflugunni að búa til allt hunangið. \n\nÞú
        getur aðeins búið til hunang í býkúpu, en þú getur athugað hvern reit til
        að athuga hvort þar sé býkúpa."
      courseE_bee_concept2_2018: "Hjálpaðu býflugunni að búa til allt hunangið. \n\nÞú
        getur aðeins búið til hunang í býkúpu, en þú getur athugað hvern reit til
        að athuga hvort þar sé býkúpa."
      courseE_bee_concept5: |-
        Getur þú hjálpað býflugunni að safna öllum blómasafanum?

        Þú getur bara safnað blómasafa á blómum, en þú getur athugað hvern reit hvort þar sé blóm.
      courseE_bee_concept5_2018: |-
        Getur þú hjálpað býflugunni að safna öllum blómasafanum?

        Þú getur bara safnað blómasafa á blómum, en þú getur athugað hvern reit hvort þar sé blóm.
      courseE_bee_functions10: "_\"Sýndu mér HUNANGIÐ!\"_\n\nLeystu þessa þraut með
        því að búa til fall sem lætur býfluguna: \n\n-   beygja inn á hliðarslóð út
        frá aðalslóðinni\n-   fara áfram\n-   búa til allt hunangið\n-   fara til
        baka á aðalslóðina \n-   snúa sér aftur í upphaflega stefnu"
      courseE_bee_functions2: "Föll eru kubbar sem saman leysa ákveðið verkefni.\\\r\n\\\r\nNotaðu
        fallið `sækja 2 blómasafa` til að safna safanum úr hverju blómi."
      courseE_bee_functions3: Útbúðu fallið "sækja 5" og notaðu það í þessari þraut.
      courseE_bee_functions4: "Fallið `færa og sækja blómasafa` snýr býflugunni, safnar
        safa og færir býfluguna aftur á upphaflega staðinn. \n\nNotaðu fallið til
        að safna öllum blómasafanum."
      courseE_bee_functions8: "**Áskorun:** Þessi blóm geta haft mismunandi magn af
        blómasafa í hvert sinn sem þú keyrir þrautina.  \n\nBúðu til fall sem safnar
        öllum blómasafanum úr hverju blómi."
      courseE_bee_functions_challenge1: Þú þarft að leysa þessa þraut á eigin spýtur.
        Hún gæti leynt á sér!
      courseE_farmer_functions1: |-
        _"Höfum við hist áður? Ég er hirðirinn!"_

        Hjálpaðu hirðinum að komast til graskersins og hirða það.
      courseE_farmer_functions10a1_2018: "**Áskorun:** Notaðu allt sem þú hefur lært
        hingað til og leystu þessa þraut með 19 eða færri kubbum!"
      courseE_farmer_functions10a1_2019: "**Áskorun:** Notaðu allt sem þú hefur lært
        hingað til og leystu þessa þraut með 19 eða færri kubbum!"
      courseE_farmer_functions10b: Notaðu nýja fallið tvisvar til að leysa þessa þraut.
      courseE_farmer_functions11_predict: Reyndu að koma auga á hvaða fall á að nota
        og hvaða fall á að fjarlægja. Leystu svo þrautina!
      courseE_farmer_functions11_predict_2018: Reyndu að koma auga á hvaða fall á
        að nota og hvaða fall á að fjarlægja. Leystu svo þrautina!
      courseE_farmer_functions11_predict_2019: Reyndu að koma auga á hvaða fall á
        að nota og hvaða fall á að fjarlægja. Leystu svo þrautina!
      courseE_farmer_functions13_2018: |-
        Leystu þessa þraut með 23 eða færri kubbum.

        * * *

        ##### Hver sproti mun annaðhvort verða að _einum_ maís eða engum. Til að finna bestu lausnina munt þú þurfa að breyta föllunum.
      courseE_farmer_functions13_2019: |-
        Leystu þessa þraut með 23 eða færri kubbum.

        * * *

        ##### Hver sproti mun annaðhvort verða að _einum_ maís eða engum. Til að finna bestu lausnina munt þú þurfa að breyta föllunum.
      courseE_farmer_functions1_2018: |-
        _"Höfum við hist áður? Ég er hirðirinn!"_

        Hjálpaðu hirðinum að komast til graskersins og hirða það.
      courseE_farmer_functions1_2019: |-
        _"Höfum við hist áður? Ég er hirðirinn!"_

        Hjálpaðu hirðinum að komast til graskersins og hirða það.
      courseE_farmer_functions1a: |-
        _"Frábært, grænmetið sprettur upp alls staðar!"_

        Hjálpaðu nú hirðinum að tína allan maísinn á leiðinni að graskerinu.

        * * *

        ##### Athugaðu: Hver reitur á slóðinni sem liggur til graskersins hefur annað hvort _einn_ maískólf eða engan. Þú þarft að nota `ef` yrðingu til að athuga hvort maís er til staðar áður en þú reynir að tína hann!
      courseE_farmer_functions1a_2018: |-
        _"Vá, það spretta plöntur upp alls staðar!"_

        Hjálpaðu nú hirðinum að tína allan maísinn á leiðinni að graskerinu síðast.

        * * *

        ##### Athugaðu: Hver reitur á leiðinni hefur annað hvort **1** maís eða engan. Notaðu gefna fallið `athuga með maís` til að tryggja að þú náir öllu.
      courseE_farmer_functions1a_2019: |-
        _"Vá, það spretta plöntur upp alls staðar!"_

        Hjálpaðu nú hirðinum að tína allan maísinn á leiðinni að graskerinu síðast.

        * * *

        ##### Athugaðu: Hver reitur á leiðinni hefur annað hvort **1** maís eða engan. Notaðu gefna fallið `athuga með maís` til að tryggja að þú náir öllu.
      courseE_farmer_functions2b: |-
        Hjálpaðu hirðinum að tína maísinn og graskerin.

        * * *

        ##### Hver sproti mun annaðhvort verða _einn_ maís eða enginn.
      courseE_farmer_functions2b_2018: |-
        Notaðu fallið til að hjálpa hirðinum að tína maísinn og graskerin.

        * * *

        ##### Hver sproti mun annaðhvort verða _einn_ maís eða enginn.
      courseE_farmer_functions2b_2019: |-
        Notaðu fallið til að hjálpa hirðinum að tína maísinn og graskerin.

        * * *

        ##### Hver sproti mun annaðhvort verða _einn_ maís eða enginn.
      courseE_farmer_functions2ba: "_\"Þetta er allt svo fall-legt!\"_\n\nTókstu eftir
        að í síðustu þraut var kóðinn endurtekinn?  Það gengur ekki að setja hann
        allan í lykkju, en við **gætum** notað fall.  \n\nÍ þessari þraut höfum við
        fært endurtekna kóðann inn í fall sem heitir `maís og grasker`. Nú þarft þú
        bara að setja litla `maís og grasker` **fallkubbinn** inn í kóðann þar sem
        það á við.\n\n* * *\n\n##### Hver sproti mun annaðhvort verða að _einum_ maís
        eða engum."
      courseE_farmer_functions2ba_2018: |-
        _"Þetta er allt svo FALL-legt!"_

        Nú geta verið fleiri en grasker í reit! Skoðaðu skilgreiningar fallanna vandlega til að skilja hvernig á að nota þau.

        * * *

        ##### Hver sproti mun annaðhvort verða að _einum_ maís eða engum.
      courseE_farmer_functions2ba_2019: |-
        _"Þetta er allt svo FALL-legt!"_

        Nú geta verið fleiri en grasker í reit! Skoðaðu skilgreiningar fallanna vandlega til að skilja hvernig á að nota þau.

        * * *

        ##### Hver sproti mun annaðhvort verða að _einum_ maís eða engum.
      courseE_farmer_functions3c: "Settu nú innihald í fallið með því að draga kubbana
        úr kóðanum og setja þá inn í **skilgreiningu fallsins**.  \n\nEkki gleyma
        að setja svo litla **fallkubbinn** inn í kóðann til að nota fallið í forritinu
        þínu."
      courseE_farmer_functions3c1_2018: |-
        Tókstu eftir að það var mikið um endurtekinn kóða í síðustu þraut? Við getum sparað pláss með því að nefna þennan kóða `tína á slóð` og nota nýtt fall til að kalla á hin föllin!

        Notaðu `tína á slóð` til að leysa þessa þraut aftur með færri kubbum.
      courseE_farmer_functions3c1_2019: |-
        Tókstu eftir að það var mikið um endurtekinn kóða í síðustu þraut? Við getum sparað pláss með því að nefna þennan kóða `tína á slóð` og nota nýtt fall til að kalla á hin föllin!

        Notaðu `tína á slóð` til að leysa þessa þraut aftur með færri kubbum.
      courseE_farmer_functions3c_2018: Ágætt! Prófaðu föllin á lengri leið.
      courseE_farmer_functions3c_2019: Ágætt! Prófaðu föllin á lengri leið.
      courseE_farmer_functions4b: Notaðu nýja fallið til að leysa þessa þraut.
      courseE_farmer_functions5c: Fallið þitt kemur að góðu gagni hér.
      courseE_farmer_functions6c: |-
        _"Græjum þetta grænmeti!"_

        Nú geta sprotarnir verið annað hvort maís **eða** kál.  Hverju þarftu að bæta við þetta forrit til að athuga hvern sprota áður en þú tínir?

        * * *

        ##### Athugaðu: Hver sproti mun breytast í annað hvort **einn** maískólf eða **einn** kálhaus.
      courseE_farmer_functions7a1_2018: |-
        _"Með föllum gerum við meira með minni vinnu!"_

        Búðu til fall sem sendir hirðirinn eftir ferningslaga slóð þar sem hann tínir einn kálhaus í miðjunni á hverjum legg.
      courseE_farmer_functions7a1_2019: |-
        _"Með föllum gerum við meira með minni vinnu!"_

        Búðu til fall sem sendir hirðirinn eftir ferningslaga slóð þar sem hann tínir einn kálhaus í miðjunni á hverjum legg.
      courseE_farmer_functions7b: "_\"Þetta grænmeti er grænt MET!\"_\n\nHjálpaðu
        hirðinum að rata eftir þessari ruglingslegu slóð og til graskersins með því
        að snúa til **vinstri** við maísinn og **hægri** við kálið. \n\n_(Ekki gleyma
        að hirða allar afurðirnar á leiðinni!)_"
      courseE_farmer_functions8a1_2018: Prófaðu að skrifa fallið aftur. Er það enn
        gagnlegt? Hvernig getur þú látið það virka fyrir þessa þraut?
      courseE_farmer_functions8a1_2019: Prófaðu að skrifa fallið aftur. Er það enn
        gagnlegt? Hvernig getur þú látið það virka fyrir þessa þraut?
      courseE_farmer_functions8b: "**Áskorun:** Þessi kóði ræður ekki við allar beygjur
        á þessari slóð. Þú þarft að nota kóðann oftar en einu sinni til að komast
        alla leið.  \n\nGeturðu fundið út hvað þarf að gera?"
      courseE_farmer_functions9a1_2018: |-
        **Þessi þraut fer alveg með mig!**

        Nýtist fallið þitt enn í þessari þraut?
      courseE_farmer_functions9a1_2019: |-
        **Þessi þraut fer alveg með mig!**

        Nýtist fallið þitt enn í þessari þraut?
      courseE_farmer_functions9b: Skoðaðu þessa þraut vandlega. Kemurðu auga á mynstrið?
      courseE_farmer_ramp11a: "Ó nei! Þessai haugur er svo stór að það er erfitt að
        sjá hve mikil mold er í honum. \n\n* * *\n\nVið höfum bætt nýjum kubbi í verkfærakassann
        sem heitir `meðan það er haugur`. Notaðu hann til að fjarlægja mold á meðan
        einhver mold er eftir! "
      courseE_farmer_ramp11a_2018: "Ó nei! Þessai haugur er svo stór að það er erfitt
        að sjá hve mikil mold er í honum. \n\n* * *\n\nVið höfum bætt nýjum kubbi
        í verkfærakassann sem heitir `meðan það er haugur`. Notaðu hann til að fjarlægja
        mold á meðan einhver mold er eftir! "
      courseE_farmer_ramp11a_2019: "Ó nei! Þessai haugur er svo stór að það er erfitt
        að sjá hve mikil mold er í honum. \n\n* * *\n\nVið höfum bætt nýjum kubbi
        í verkfærakassann sem heitir `meðan það er haugur`. Notaðu hann til að fjarlægja
        mold á meðan einhver mold er eftir! "
      courseE_farmer_ramp11b: Prófum þetta aftur en með fleiri hrúgum!
      courseE_farmer_ramp11b_2018: Prófum þetta aftur en með fleiri hrúgum!
      courseE_farmer_ramp11b_2019: Prófum þetta aftur en með fleiri hrúgum!
      courseE_farmer_ramp12_forswap: Tíndu allt kálið.
      courseE_farmer_ramp12_forswap_2018: Tíndu allt kálið.
      courseE_farmer_ramp12_forswap_2019: Tíndu allt kálið.
      courseE_farmer_ramp12b: Nú þarf hirðirinn að tína allt kálið. Notaðu `meðan
        það er kál` innan í `endurtaka` lykkju til að ná því öllu!
      courseE_farmer_ramp12b_2018: Nú þarf hirðirinn að tína allt kálið. Notaðu `meðan
        það er kál` innan í `endurtaka` lykkju til að ná því öllu!
      courseE_farmer_ramp12b_2019: Nú þarf hirðirinn að tína allt kálið. Notaðu `meðan
        það er kál` innan í `endurtaka` lykkju til að ná því öllu!
      courseE_farmer_ramp12c: "Hamingjan!  Sjáðu alla þessa sprota. Sumir munu verða
        að maís og aðrir að káli. \n\nFarðu út á enda beinu slóðanna til að tína taka
        upp kál á meðan þar er kál og maís á meðan þar er maís."
      courseE_farmer_ramp12c_2018: "Nú er kálið aðeins við enda stígsins.\\\nFarðu
        eftir stígnum **uns** þú kemur að káli. Haltu þá áfram að tína það á **meðan**
        það er eitthvað eftir.  "
      courseE_farmer_ramp12c_2019: "Hamingjan!  Sjáðu alla þessa sprota. Sumir munu
        verða að maís og aðrir að káli. \n\nFarðu út á enda beinu slóðanna til að
        tína taka upp kál á meðan þar er kál og maís á meðan þar er maís."
      courseE_farmer_ramp12d: "Sama aðferðin virkar með blómasafa og hunangi!\n\nSjáðu
        öll þessi ský. Bak við sum á að búa til hunang, en bak við önnur safna blómasafa.
        \nHjálpaðu býflugunni að fylgja slóðinni og leysa þrautina."
      courseE_farmer_ramp12d_2018: "Kálið er dreift um allan garðinn.\\\nFarðu eftir
        hverjum stíg **uns** þú kemur að káli. Haltu þá áfram að tína það á **meðan**
        það er eitthvað eftir.  "
      courseE_farmer_ramp12d_2019: "Sama aðferðin virkar með blómasafa og hunangi!\n\nSjáðu
        öll þessi ský. Bak við sum á að búa til hunang, en bak við önnur safna blómasafa.
        \nHjálpaðu býflugunni að fylgja slóðinni og leysa þrautina."
      courseE_farmer_ramp12e: "Sama aðferðin virkar með blómasafa og hunangi!\n\nSjáðu
        öll þessi ský. Bak við sum á að búa til hunang, en bak við önnur safna blómasafa.
        \nHjálpaðu býflugunni að fylgja slóðinni og leysa þrautina."
      courseE_farmer_ramp12e_2018: "Sama aðferðin virkar með blómasafa og hunangi!\n\nSjáðu
        öll þessi ský. Bak við sum á að búa til hunang, en bak við önnur safna blómasafa.
        \nHjálpaðu býflugunni að fylgja slóðinni og leysa þrautina."
      courseE_farmer_ramp12e_2019: "Sama aðferðin virkar með blómasafa og hunangi!\n\nSjáðu
        öll þessi ský. Bak við sum á að búa til hunang, en bak við önnur safna blómasafa.
        \nHjálpaðu býflugunni að fylgja slóðinni og leysa þrautina."
      courseE_farmer_ramp12f: "**Áskorun**: Eina leiðin til að ná allri uppskerunni
        er að fara áfram þangað til þú kemur að káli og snúa til vinstri **ef** það
        er slóð til vinstri. Annars snúa til hægri."
      courseE_farmer_ramp12f_2018: "**Áskorun**: Eina leiðin til að ná allri uppskerunni
        er að fara áfram þangað til þú kemur að káli og snúa til vinstri **ef** það
        er slóð til vinstri. Annars snúa til hægri."
      courseE_farmer_ramp12f_2019: "**Áskorun**: Eina leiðin til að ná allri uppskerunni
        er að fara áfram þangað til þú kemur að káli og snúa til vinstri **ef** það
        er slóð til vinstri. Annars snúa til hægri."
      courseE_farmer_ramp12g: Farðu áfram þar til þú nærð til kálsins og snúðu svo
        til vinstri **ef** það er slóð til vinstri. Annars skaltu snúa til hægri.
      courseE_farmer_ramp12g_2018: Farðu áfram þar til þú nærð til kálsins og snúðu
        svo til vinstri **ef** það er slóð til vinstri. Annars skaltu snúa til hægri.
      courseE_farmer_ramp12g_2019: Farðu áfram þar til þú nærð til kálsins og snúðu
        svo til vinstri **ef** það er slóð til vinstri. Annars skaltu snúa til hægri.
      courseE_playLab_challenge1: "_Nú eru **íkornarnir** skelfingu lostnir yfir því
        að það er **risaeðla** mætt á svæðið! Getur hugrakki **riddarinn** komið í
        veg fyrir að þeir hlaupi í burtu?_\n\nReglur:\n\n1.  \\*Að snerta íkornana
        skorar stig?\n2.  \\*Að snerta risaeðluna dregur frá mörg stig.\n\nHér er
        öðruvísi leikur sem hefur verið byrjað á fyrir þig! Spilaðu hann til að sjá
        hvernig hann virkar. \n\nEitthvað ætti að gerast þegar þú færð nógu mörg stig
        eða þegar þú klárar stigin. Bættu kóða í föllin `vinna leik` og `tapa leik`
        til að leikurinn virki eins og hann á að gera. \nSmelltu á vísbendingarnar
        til að fá hugmyndir!"
      courseE_playLab_scaffold1: |-
        Það er ótrúlegt hvað þú hefur lært mikið! Búum nú til leik skref fyrir skref.

        Notaðu nýja kubba í verkfærakassanum til að búa til bakgrunn og velja svo leikmann fyrir leikinn.
      courseE_playLab_scaffold2: "Notaðu kubba eins og atvikahöndlara og aðgerðir
        til að láta leikmanninn hreyfast með örvarlyklunum á lyklaborðinu.  \n\nKomdu
        leikmanninum til markanna til að ljúka þrautinni."
      courseE_playLab_scaffold3: |-
        Við skulum bæta fleiri persónum í leikinn!

        Notaðu kubbinn `hafa leikmann` til að bæta fleiri persónum við og komast svo að markinu til að ljúka þrautinni.
      courseE_playLab_scaffold4: |-
        Margar leikverur og leikmenn sem færast er ágæt byrjun á leik, en við þurfum að gera meira til að þetta virki eins og alvöru leikur. Bætum við stigaskori!

        Notaðu atvikskubba eins og `þegar leikmaður snertir` til að breyta skorinu. Skoraðu 10 stig til að ljúka þessari þraut.
      courseE_playLab_scaffold5: Vel gert! Nú hefur alla helstu þætti leiks sem virkar.
        Eyddu nú tíma í að láta leikinn virka eins og þú vilt. Láttu vera mögulegt
        að vinna eða tapa leiknum, og leiktu hann svo þar til annað hvort gerist.
      courseE_playLab_scaffold6: Þú hefur lokið þessu! Nú getur þú spilað leikinn
        eða deilt honum með vinum og bekkjarfélögum!
      courseF_artist_for1: "**Frjáls æfing:** Gerðu tilraunir með `frá` lykkjuna og
        breytuna `teljari`.  \n\nDragðu fram nokkra kubba og sjáðu hvað gerist.  "
      courseF_artist_for10: |-
        Frjáls æfing: Prófaðu að nota breytuna `teljari` með öðrum teiknivalkostum til að búa til svona töfrum líka mynd.

        ![](https://images.code.org/5a4eec10a53aa78ad6b12fb5e48680f8-image-1497991505852.png)
      courseF_artist_for10_2018: |-
        Frjáls æfing: Prófaðu að nota breytuna `teljari` með öðrum teiknivalkostum til að búa til svona töfrum líka mynd.

        ![](https://images.code.org/5a4eec10a53aa78ad6b12fb5e48680f8-image-1497991505852.png)
      courseF_artist_for10_2019: |-
        Frjáls æfing: Prófaðu að nota breytuna `teljari` með öðrum teiknivalkostum til að búa til svona töfrum líka mynd.

        ![](https://images.code.org/5a4eec10a53aa78ad6b12fb5e48680f8-image-1497991505852.png)
      courseF_artist_for1_2018: "**Frjáls æfing:** Gerðu tilraunir með `frá` lykkjuna
        og breytuna `teljari`.  \n\nDragðu fram nokkra kubba og sjáðu hvað gerist.
        \ "
      courseF_artist_for1_2019: "**Frjáls æfing:** Gerðu tilraunir með `frá` lykkjuna
        og breytuna `teljari`.  \n\nDragðu fram nokkra kubba og sjáðu hvað gerist.
        \ "
      courseF_artist_for2: Notaðu `endurtaka` lykkju innan í `frá` lykkju til að búa
        til þennan stafla af þríhyrningum með 50 til 100 díla langar hliðar.
      courseF_artist_for2_2018: Notaðu `endurtaka` lykkju innan í `frá` lykkju til
        að búa til þennan stafla af þríhyrningum með 50 til 100 díla langar hliðar.
      courseF_artist_for2_2019: Notaðu `endurtaka` lykkju innan í `frá` lykkju til
        að búa til þennan stafla af þríhyrningum með 50 til 100 díla langar hliðar.
      courseF_artist_for3: Búðu til þessa þríhyrninga með 20 til 200 díla langar hliðar,
        þar sem hver þríhyrningur er 20 dílum stærri en sá næsti á undan.
      courseF_artist_for3_2018: Búðu til þessa þríhyrninga með 20 til 200 díla langar
        hliðar, þar sem hver þríhyrningur er 20 dílum stærri en sá næsti á undan.
      courseF_artist_for3_2019: Búðu til þessa þríhyrninga með 20 til 200 díla langar
        hliðar, þar sem hver þríhyrningur er 20 dílum stærri en sá næsti á undan.
      courseF_artist_for5: |-
        Með einni lítilli breytingu á kóðanum úr síðustu þraut getur þú búið til þessa mynd. Geturðu fundið út hver sú breyting er?

        * * *

        Vísbending: Þú þarft að fjarlægja eitthvað!
      courseF_artist_for5_2018: |-
        Með einni lítilli breytingu á kóðanum úr síðustu þraut getur þú búið til þessa mynd. Geturðu fundið út hver sú breyting er?

        * * *

        Vísbending: Þú þarft að fjarlægja eitthvað!
      courseF_artist_for5_2019: |-
        Með einni lítilli breytingu á kóðanum úr síðustu þraut getur þú búið til þessa mynd. Geturðu fundið út hver sú breyting er?

        * * *

        Vísbending: Þú þarft að fjarlægja eitthvað!
      courseF_artist_for6: "Ef þú snýrð aðeins meira eða minna en þú mundir venjulega
        gera fyrir tiltekið form, getur útkoman komið skemmtilega á óvart. \n\nPrófaðu
        að nota kóðann úr síðasta áfanga, en snúa um 89 gráður til að búa til þennan
        spíral úr ferningum."
      courseF_artist_for6_2018: "Ef þú snýrð aðeins meira eða minna en þú mundir venjulega
        gera fyrir tiltekið form, getur útkoman komið skemmtilega á óvart. \n\nPrófaðu
        að nota kóðann úr síðasta áfanga, en snúa um 89 gráður til að búa til þennan
        spíral úr ferningum."
      courseF_artist_for6_2019: "Ef þú snýrð aðeins meira eða minna en þú mundir venjulega
        gera fyrir tiltekið form, getur útkoman komið skemmtilega á óvart. \n\nPrófaðu
        að nota kóðann úr síðasta áfanga, en snúa um 89 gráður til að búa til þennan
        spíral úr ferningum."
      courseF_artist_for7: 'Gerðu þrjár litlar breytingar á kóðanum frá síðasta borði
        til að ná þessu!  '
      courseF_artist_for7_2018: 'Gerðu þrjár litlar breytingar á kóðanum frá síðasta
        borði til að ná þessu!  '
      courseF_artist_for7_2019: 'Gerðu þrjár litlar breytingar á kóðanum frá síðasta
        borði til að ná þessu!  '
      courseF_artist_for9: |-
        **Hugkveikja:** Notaðu teljarann innan í `stilla alfa` kubbnum til að fá þessa upplituðu miðju.\
        (Þetta sexhyrningamynstur fæst með 60 gráðu snúningi.)
      courseF_artist_for9_2018: |-
        **Hugkveikja:** Notaðu teljarann innan í `stilla alfa` kubbnum til að fá þessa upplituðu miðju.\
        (Þetta sexhyrningamynstur fæst með 60 gráðu snúningi.)
      courseF_artist_for9_2019: |-
        **Hugkveikja:** Notaðu teljarann innan í `stilla alfa` kubbnum til að fá þessa upplituðu miðju.\
        (Þetta sexhyrningamynstur fæst með 60 gráðu snúningi.)
      courseF_artist_for_challenge1: "Getur þú fundið leið til að endurgera þessa
        teikningu? \n\n<img src=\"https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png\"
        width=\"350px\"/>"
      courseF_artist_for_challenge1_2018: "Getur þú fundið leið til að endurgera þessa
        teikningu? \n\n<img src=\"https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png\"
        width=\"350px\"/>"
      courseF_artist_for_challenge1_2019: "Getur þú fundið leið til að endurgera þessa
        teikningu? \n\n<img src=\"https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png\"
        width=\"350px\"/>"
      courseF_artist_for_challenge2: "Getur þú fundið leið til að endurgera þessa
        teikningu með einni lykkju? \\\r\n\\\r\n<img\nsrc=\"https://images.code.org/b0d15d06465d645c5ca533e5da6387b3-image-1446075597132.36.04.png\"\nwidth=\"350px\"/>"
      courseF_artist_for_challenge2_2018: "Getur þú fundið leið til að endurgera þessa
        teikningu með einni lykkju? \\\r\n\\\r\n<img\nsrc=\"https://images.code.org/b0d15d06465d645c5ca533e5da6387b3-image-1446075597132.36.04.png\"\nwidth=\"350px\"/>"
      courseF_artist_for_challenge2_2019: "Getur þú fundið leið til að endurgera þessa
        teikningu með einni lykkju? \\\r\n\\\r\n<img\nsrc=\"https://images.code.org/b0d15d06465d645c5ca533e5da6387b3-image-1446075597132.36.04.png\"\nwidth=\"350px\"/>"
      courseF_artist_fwp1: Nú ætlum við að prófa öflugan ritil fyrir föll. Reyndu
        að finna út úr því hvernig þú gætir unnið með og lagað villur í fallinu `teikna
        ferning`.
      courseF_artist_fwp2: "Breyttu fallinu svo að það taki stika með heitinu `lengd`.\\\r\n\\\r\nHver
        ferningur ætti að hafa 25 lengri hliðar en næsti á undan. Sá fyrsti hefur
        25 díla hliðar."
      courseF_artist_fwp2_predict1: "Breyttu fallinu svo að það taki stika með heitinu
        `lengd`.\\\r\n\\\r\nHver ferningur ætti að hafa 25 lengri hliðar en næsti
        á undan. Sá fyrsti hefur 25 díla hliðar. Skiptu '???' út fyrir réttu gildunum
        til að teikna myndina."
      courseF_artist_fwp3: "Prófaðu nú að búa til fall frá grunni!\\\r\n\\\r\nBúðu
        til fall sem heitir `teikna ferning` og notaðu það til að teikna útlínur þessara
        fjögurra kassa. \\\r\nGættu þess að hafa stika fyrir `lengd`!\\\r\n\\\r\n\n<hr/>\r\nTalið
        frá efra hægra horni eru breiddir kassanna 50, 100, 150 og 200."
      courseF_artist_fwp4: "Vel gert! Breyttu nú þessu falli og bættu í það stika
        fyrir fjölda hliða í fjölhyrningnum.\\\r\n\\\r\nHliðar allra formanna eru
        100 dílar á lengd."
      courseF_artist_fwp5: "Notaðu fallið úr síðustu þraut til að teikna þessa röð
        forma. \n\nÞríhyrningurinn hefur 21 díla hliðar. Hvert form sem fylgir hefur
        hliðar sem eru 7 dílum lengri en hliðar næsta forms á undan.\\\nNotaðu `margfalda`
        kubbinn til að láta allt þetta gerast með aðeins einu kalli á fall.\n\n* *
        *\n\n`Margfalda` kubburinn lítur svona út <xml><block type=\"math_arithmetic\"
        inline=\"true\">\n\n<title name=\"OP\">MULTIPLY</title>\n</block></xml>"
      courseF_artist_fwp6: "**Áskorun:** Breyttu `teikna spíral` fallinu svo það noti
        stikana `lengd` og `hliðar` og búðu svo til þessi form.\\\r\n\\\r\n\n-   Ferningurinn
        fer frá 3 upp í 90 díla.\\\r\n-   Sexhyrningurinn fer frá 3 upp í 100 díla.\\\r\n-
        \  Þríhyrningurinn fer frá 3 upp í 105 díla."
      courseF_artist_fwp7: |-
        Ljúktu við `teikna spíral` fallið svo að það biðji líka um lágmarkslengd fyrir miðju spíralsins.

        -   Stysta hliðin í miðju þessa fernings er 50 dílar á lengd
        -   Lengsta hliðin yst í spíralnum er 200 dílar á lengd
      courseF_artist_fwp8: |-
        Frjáls æfing! Getur þú fundið úr hvernig þú getur teiknað þessa mynd með fallinu sem þú varst að búa til?

        -   Rauði spírallinn fer frá 50 og upp í 200 díla
        -   Blái spírallinn fer frá 25 og upp í 150 díla
        -   Græni spírallinn fer frá 100 og upp í 350 díla
      courseF_artist_fwp9: "**Frjáls æfing:** Hér fyrir neðan eru föll sem þú hefur
        skrifað og fleiri sem þú getur leikið þér með. Sjáðu hvaða áhrif það hefur
        að breyta breidd pennans! Það eru tillögur í vísbendingunum!"
      courseF_artist_fwp_challenge1: Prófaðu að keyra þetta forrit og gerðu breytingar
        til að sjá hvaða áhrif það hefur. Geturðu fundið út hvernig það virkar? (Eða
        eytt því og búið til eitthvað gjörólíkt)
      courseF_artist_fwp_challenge2: "Notaðu það sem þú lærðir í síðasta áfanga til
        að teikna svona mynd.\n\n_Athugaðu: Kóðinn verður einfaldari ef þú notar stika._\n\n<br/>\n<img\nsrc=\"https://images.code.org/d3d6a51fafdcc0a09a5c6b0e0f3c2b92-image-1446239805818.08.59.png\"
        width=\"300px\"/>\n<br/>  "
      courseF_artist_variables10: "Hér er kóðinn þinn frá síðustu þraut.  Prófaðu
        að breyta breytunni á annan hátt.  \n\n-   Hvað gerist ef þú byrjar með `lengd`
        minni en 150? \n-   Hvað ef þú margfaldar breytuna með 1.25 í hverri umferð?\n-
        \  Hvað gerir kóðinn ef þú snýrð um 119 gráður?"
      courseF_artist_variables10_2018: "Hér er kóðinn þinn frá síðustu þraut.  Prófaðu
        að breyta breytunni á annan hátt.  \n\n-   Hvað gerist ef þú byrjar með `lengd`
        minni en 150? \n-   Hvað ef þú margfaldar breytuna með 1.25 í hverri umferð?\n-
        \  Hvað gerir kóðinn ef þú snýrð um 119 gráður?"
      courseF_artist_variables10_2019: "Hér er kóðinn þinn frá síðustu þraut.  Prófaðu
        að breyta breytunni á annan hátt.  \n\n-   Hvað gerist ef þú byrjar með `lengd`
        minni en 150? \n-   Hvað ef þú margfaldar breytuna með 1.25 í hverri umferð?\n-
        \  Hvað gerir kóðinn ef þú snýrð um 119 gráður?"
      courseF_artist_variables2: "Notaðu nú aðra lykkju til að teikna þrjá svona þríhyrninga
        hlið við hlið.   \n\nÞú getur sett kóðann frá síðustu þraut inn í hana."
      courseF_artist_variables2_2018: "Notaðu nú aðra lykkju til að teikna þrjá svona
        þríhyrninga hlið við hlið.   \n\nÞú getur sett kóðann frá síðustu þraut inn
        í hana."
      courseF_artist_variables2_2019: "Notaðu nú aðra lykkju til að teikna þrjá svona
        þríhyrninga hlið við hlið.   \n\nÞú getur sett kóðann frá síðustu þraut inn
        í hana."
      courseF_artist_variables3: "Áður en þetta verður flóknara: Geturðu sett lengdina
        50 í breytu svo að við getum notað hana í næstu þrautum? \n\n![expandable](https://images.code.org/73447d004093c6be8ab01a1358155f16-image-1498068386665.gif)"
      courseF_artist_variables3_2018: "Áður en þetta verður flóknara: Geturðu sett
        lengdina 50 í breytu svo að við getum notað hana í næstu þrautum? \n\n![expandable](https://images.code.org/73447d004093c6be8ab01a1358155f16-image-1498068386665.gif)"
      courseF_artist_variables3_2019: "Áður en þetta verður flóknara: Geturðu sett
        lengdina 50 í breytu svo að við getum notað hana í næstu þrautum? \n\n![expandable](https://images.code.org/73447d004093c6be8ab01a1358155f16-image-1498068386665.gif)"
      courseF_artist_variables4: Notaðu nú breytuna `lengd` til að láta listamanninn
        hoppa áfram og niður um `lengd` díla á milli þríhyrninga.
      courseF_artist_variables4_2018: Notaðu nú breytuna `lengd` til að láta listamanninn
        hoppa áfram og niður um `lengd` díla á milli þríhyrninga.
      courseF_artist_variables4_2019: Notaðu nú breytuna `lengd` til að láta listamanninn
        hoppa áfram og niður um `lengd` díla á milli þríhyrninga.
      courseF_artist_variables6: "**ÚPS!** \n\nÞríhyrningarnir verða að vera 60 dílar
        á breidd og bilið á milli þeirra 60 dílar.  \n\nVar það ekki góð hugmynd að
        nota breytu?"
      courseF_artist_variables6_2018: "**ÚPS!** \n\nÞríhyrningarnir verða að vera
        60 dílar á breidd og bilið á milli þeirra 60 dílar.  \n\nVar það ekki góð
        hugmynd að nota breytu?"
      courseF_artist_variables6_2019: "**ÚPS!** \n\nÞríhyrningarnir verða að vera
        60 dílar á breidd og bilið á milli þeirra 60 dílar.  \n\nVar það ekki góð
        hugmynd að nota breytu?"
      courseF_artist_variables6a: Notaðu það sem þú hefur lært til að teikna þessa
        mynd þar sem ferningarnir eru með 80 díla hliðar og listamaðurinn hoppar 80
        díla til hliðar og niður eftir hvern.
      courseF_artist_variables6a_2018: Notaðu það sem þú hefur lært til að teikna
        þessa mynd þar sem ferningarnir eru með 80 díla hliðar og listamaðurinn hoppar
        80 díla til hliðar og niður eftir hvern.
      courseF_artist_variables6a_2019: Notaðu það sem þú hefur lært til að teikna
        þessa mynd þar sem ferningarnir eru með 80 díla hliðar og listamaðurinn hoppar
        80 díla til hliðar og niður eftir hvern.
      courseF_artist_variables7: "Við skulum byrja á að teikna þríhyrning með 150
        díla hliðar. \n\nGættu þess að nota `lengd` breytuna og \"endurtaka\" lykkju,."
      courseF_artist_variables7_2018: "Við skulum byrja á að teikna þríhyrning með
        150 díla hliðar. \n\nGættu þess að nota `lengd` breytuna og \"endurtaka\"
        lykkju,."
      courseF_artist_variables7_2019: "Við skulum byrja á að teikna þríhyrning með
        150 díla hliðar. \n\nGættu þess að nota `lengd` breytuna og \"endurtaka\"
        lykkju,."
      courseF_artist_variables8: |-
        Endurgerðu kóðann fyrir þríhyrninga frá síðustu þraut, en notaðu nú `stilla lengd` kubbinn til að endurstilla breytuna `lengd` á `lengd` + 10 í lok hverrar endurtekningar lykkjunnar.

        <xml>
        <block type="variables_set" inline="false">
                                <title name="VAR">length</title>
                                <value name="VALUE">
                                  <block type="math_arithmetic" inline="true">
                                    <title name="OP">ADD</title>
                                    <value name="A">
                                      <block type="variables_get">
                                        <title name="VAR">length</title>
                                      </block>
                                    </value>
                                    <value name="B">
                                      <block type="math_number">
                                        <title name="NUM">10</title>
                                      </block>
                                    </value>
                                  </block>
                                </value>
                              </block>
        </xml>

        Lengd fyrstu hliðar þríhyrningsins er 150 dílar.
      courseF_artist_variables8_2018: |-
        Endurgerðu kóðann fyrir þríhyrninga frá síðustu þraut, en notaðu nú `stilla lengd` kubbinn til að endurstilla breytuna `lengd` á `lengd` + 10 í lok hverrar endurtekningar lykkjunnar.

        <xml>
        <block type="variables_set" inline="false">
                                <title name="VAR">length</title>
                                <value name="VALUE">
                                  <block type="math_arithmetic" inline="true">
                                    <title name="OP">ADD</title>
                                    <value name="A">
                                      <block type="variables_get">
                                        <title name="VAR">length</title>
                                      </block>
                                    </value>
                                    <value name="B">
                                      <block type="math_number">
                                        <title name="NUM">10</title>
                                      </block>
                                    </value>
                                  </block>
                                </value>
                              </block>
        </xml>

        Lengd fyrstu hliðar þríhyrningsins er 150 dílar.
      courseF_artist_variables8_2019: |-
        Endurgerðu kóðann fyrir þríhyrninga frá síðustu þraut, en notaðu nú `stilla lengd` kubbinn til að endurstilla breytuna `lengd` á `lengd` + 10 í lok hverrar endurtekningar lykkjunnar.

        <xml>
        <block type="variables_set" inline="false">
                                <title name="VAR">length</title>
                                <value name="VALUE">
                                  <block type="math_arithmetic" inline="true">
                                    <title name="OP">ADD</title>
                                    <value name="A">
                                      <block type="variables_get">
                                        <title name="VAR">length</title>
                                      </block>
                                    </value>
                                    <value name="B">
                                      <block type="math_number">
                                        <title name="NUM">10</title>
                                      </block>
                                    </value>
                                  </block>
                                </value>
                              </block>
        </xml>

        Lengd fyrstu hliðar þríhyrningsins er 150 dílar.
      courseF_artist_variables9: "Kominn tími til að skapa list! \n\nSjáðu hvað gerist
        þegar þú endurtekur kóðann úr síðustu þraut **30** sinnum í stað 3 sinnum!
        \n\nBreyttu litum og mynstrum línanna eins og þér sýnist."
      courseF_artist_variables9_2018: "Kominn tími til að skapa list! \n\nSjáðu hvað
        gerist þegar þú endurtekur kóðann úr síðustu þraut **30** sinnum í stað 3
        sinnum! \n\nBreyttu litum og mynstrum línanna eins og þér sýnist."
      courseF_artist_variables9_2019: "Kominn tími til að skapa list! \n\nSjáðu hvað
        gerist þegar þú endurtekur kóðann úr síðustu þraut **30** sinnum í stað 3
        sinnum! \n\nBreyttu litum og mynstrum línanna eins og þér sýnist."
      courseF_artist_variablesFP: "**Frjáls æfing:** Notaðu það sem þú hefur lært
        og teiknaðu það sem þú vilt. \n\nHvernig getur þú notað breytur með ferningum,
        fimmhyrningum og sexhyrningum?"
      courseF_artist_variablesFP_2018: "**Frjáls æfing:** Notaðu það sem þú hefur
        lært og teiknaðu það sem þú vilt. \n\nHvernig getur þú notað breytur með ferningum,
        fimmhyrningum og sexhyrningum?"
      courseF_artist_variablesFP_2019: "**Frjáls æfing:** Notaðu það sem þú hefur
        lært og teiknaðu það sem þú vilt. \n\nHvernig getur þú notað breytur með ferningum,
        fimmhyrningum og sexhyrningum?"
      courseF_artist_variables_challenge1: Áskorun! Getur þú búið til `lengd` breytu
        og notað hana til að skapa þetta athyglisverða mynstur?
      courseF_artist_variables_challenge1_2018: Áskorun! Getur þú búið til `lengd`
        breytu og notað hana til að skapa þetta athyglisverða mynstur?
      courseF_artist_variables_challenge1_2019: Áskorun! Getur þú búið til `lengd`
        breytu og notað hana til að skapa þetta athyglisverða mynstur?
      courseF_artist_variables_challenge2: "<img src=\"https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png\"\nwidth=\"250px\"/>\\\r\n\\\r\nÞú
        hefur nú lært allt sem þú þarft til að búa til svona mynstur! Þessari þraut
        er ætlað að vera erfið.  Getur þú haldið þig við hana þar til þú finnur lausn?"
      courseF_artist_variables_challenge2_2018: "<img src=\"https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png\"\nwidth=\"250px\"/>\\\r\n\\\r\nÞú
        hefur nú lært allt sem þú þarft til að búa til svona mynstur! Þessari þraut
        er ætlað að vera erfið.  Getur þú haldið þig við hana þar til þú finnur lausn?"
      courseF_artist_variables_challenge2_2019: "<img src=\"https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png\"\nwidth=\"250px\"/>\\\r\n\\\r\nÞú
        hefur nú lært allt sem þú þarft til að búa til svona mynstur! Þessari þraut
        er ætlað að vera erfið.  Getur þú haldið þig við hana þar til þú finnur lausn?"
      courseF_bee_conditionals10: |-
        Skilyrði geta verið hjálpleg, jafnvel þó að þú vitir hvað er mikið á hverjum stað!

        Safnaðu öllum blómasafanum og búðu til allt hunangið.
      courseF_bee_conditionals1_predict1: "\\*\"Þetta ský er fyrir mér!\"\\\r\n\\\r\nAthugaðu
        hvort það er blóm undir skýinu. Safnaðu blómasafa ef svo er."
      courseF_bee_conditionals2: "_\"Það er of skýjað til að sjá blóm!\"_\n\nAthugaðu
        undir hvert ský til að sjá hvort það feli blóm. Ef það er blóm undir skýinu
        á býflugan að safna blómasafa **einu sinni**. \n\nMundu: Skýin fela ekki öll
        það sama!"
      courseF_bee_conditionals3: Þú getur aðeins safnað blómasafa á blómum, en þú
        getur athugað hvaða bil sem er til að gá hvort þar er blóm. Ef það er blóm
        undir skýi, þarf býflugan að safna blómasafa **einu sinni**.
      courseF_bee_conditionals4: |-
        Í þessari þraut vitum við að hvert blóm hefur nákvæmlega einn af blómasafa, en það eru misjafnlega mörg bil á milli blómanna.

        Náðu öllum blómasafanum með eins fáum kubbum og mögulegt er.
      courseF_bee_conditionals7_predict2: |-
        Stundum hylur ský blóm, stundum hylur það býkúpu!

        Notaðu `ef/annars` kubb til að safna blómasafa úr blómum og búa til hunang í býkúpum.
      courseF_bee_conditionals8: "**Áskorun:** Það er annað hvort blóm eða býkúpa
        undir hverju af þessum skýjum!\\\r\n\\\r\nSafnaðu blómasafa ef það er blóm.\\\r\nBúðu
        annars til hunang (því þá er það býkúpa)."
      courseF_bee_for10: "**Áskorun:** Notaðu það sem þú hefur lært um `frá` lykkjur
        og reyndu að leysa þessa þraut. \n\nMundu: Þú gætir þurft að keyra lausnina
        margsinnis áður en þú finnur út öll þrepin."
      courseF_bee_for10_2018: "**Áskorun:** Notaðu það sem þú hefur lært um `frá`
        lykkjur og reyndu að leysa þessa þraut. \n\nMundu: Þú gætir þurft að keyra
        lausnina margsinnis áður en þú finnur út öll þrepin."
      courseF_bee_for10_2019: "**Áskorun:** Notaðu það sem þú hefur lært um `frá`
        lykkjur og reyndu að leysa þessa þraut. \n\nMundu: Þú gætir þurft að keyra
        lausnina margsinnis áður en þú finnur út öll þrepin."
      courseF_bee_for11: "Ef lykkjan telur niður, er aukinn **dregin frá** teljaranum
        í hverri umferð. \n\nHver ætti aukinn að vera til að safna 15, svo 12, svo
        9, 6, 3 af blómasafa?"
      courseF_bee_for11_2018: "Ef lykkjan telur niður, er aukinn **dregin frá** teljaranum
        í hverri umferð. \n\nHver ætti aukinn að vera til að safna 15, svo 12, svo
        9, 6, 3 af blómasafa?"
      courseF_bee_for11_2019: "Ef lykkjan telur niður, er aukinn **dregin frá** teljaranum
        í hverri umferð. \n\nHver ætti aukinn að vera til að safna 15, svo 12, svo
        9, 6, 3 af blómasafa?"
      courseF_bee_for2: |-
        Skrifaðu kóðann sem hjálpar býflugunni að safna öllum blómasafanum.

        Þú þarft marga kubba fyrir þessa áskorun, en við munum sýna auðveldari leið í næstu þraut.
      courseF_bee_for2_2018: |-
        Skrifaðu kóðann sem hjálpar býflugunni að safna öllum blómasafanum.

        Þú þarft marga kubba fyrir þessa áskorun, en við munum sýna auðveldari leið í næstu þraut.
      courseF_bee_for2_2019: |-
        Skrifaðu kóðann sem hjálpar býflugunni að safna öllum blómasafanum.

        Þú þarft marga kubba fyrir þessa áskorun, en við munum sýna auðveldari leið í næstu þraut.
      courseF_bee_for6: "Þú getur líka látið `frá` lykkju telja niður. \n\nPrófaðu
        að safna þessum blómasafa með því að telja niður frá **5** til **1** um **1**
        í einu."
      courseF_bee_for6_2018: "Þú getur líka látið `frá` lykkju telja niður. \n\nPrófaðu
        að safna þessum blómasafa með því að telja niður frá **5** til **1** um **1**
        í einu."
      courseF_bee_for6_2019: "Þú getur líka látið `frá` lykkju telja niður. \n\nPrófaðu
        að safna þessum blómasafa með því að telja niður frá **5** til **1** um **1**
        í einu."
      courseF_bee_for7: "Síðasta talan í `frá` lykkjunni er kölluð **\"aukinn\"**
        (increment). Í hverri umferð lykkjunnar breytist innihald teljarabreytunnar
        um **aukann**. \n\nPrófaðu að safna úr þessum blómum með **aukann** 2."
      courseF_bee_for7_2018: "Síðasta talan í `frá` lykkjunni er kölluð **\"aukinn\"**
        (increment). Í hverri umferð lykkjunnar breytist innihald teljarabreytunnar
        um **aukann**. \n\nPrófaðu að safna úr þessum blómum með **aukann** 2."
      courseF_bee_for7_2019: "Síðasta talan í `frá` lykkjunni er kölluð **\"aukinn\"**
        (increment). Í hverri umferð lykkjunnar breytist innihald teljarabreytunnar
        um **aukann**. \n\nPrófaðu að safna úr þessum blómum með **aukann** 2."
      courseF_bee_for8: "Þú hefur náð þessu! \n\nHver ætti **aukinn** að vera til
        að safna 3, 6, 9, 12, 15 af blómasafa?"
      courseF_bee_for8_2018: "Þú hefur náð þessu! \n\nHver ætti **aukinn** að vera
        til að safna 3, 6, 9, 12, 15 af blómasafa?"
      courseF_bee_for8_2019: "Þú hefur náð þessu! \n\nHver ætti **aukinn** að vera
        til að safna 3, 6, 9, 12, 15 af blómasafa?"
      courseF_bee_for9: "Nú skulum við nota breytuna `teljari` með reikningskubbi!
        \n\nHvernig geturðu notað breytuna `teljari` til að finna leið um garðinn
        með eins fáum kubbum og mögulegt er?"
      courseF_bee_for9_2018: "Nú skulum við nota breytuna `teljari` með reikningskubbi!
        \n\nHvernig geturðu notað breytuna `teljari` til að finna leið um garðinn
        með eins fáum kubbum og mögulegt er?"
      courseF_bee_for9_2019: "Nú skulum við nota breytuna `teljari` með reikningskubbi!
        \n\nHvernig geturðu notað breytuna `teljari` til að finna leið um garðinn
        með eins fáum kubbum og mögulegt er?"
      courseF_bee_for_challenge1: "Notaðu þessa `frá` lykkju til að safna öllum blómasafanum.
        \n\nÞað eru nokkrar aðgerðir sem þú ættir að endurtaka `teljari` sinnum."
      courseF_bee_for_challenge1_2018: "Notaðu þessa `frá` lykkju til að safna öllum
        blómasafanum. \n\nÞað eru nokkrar aðgerðir sem þú ættir að endurtaka `teljari`
        sinnum."
      courseF_bee_for_challenge1_2019: "Notaðu þessa `frá` lykkju til að safna öllum
        blómasafanum. \n\nÞað eru nokkrar aðgerðir sem þú ættir að endurtaka `teljari`
        sinnum."
      courseF_bee_for_challenge2: Leystu þessa þraut með eins fáum kubbum og mögulegt
        er.
      courseF_bee_for_challenge2_2018: Leystu þessa þraut með eins fáum kubbum og
        mögulegt er.
      courseF_bee_for_challenge2_2019: Leystu þessa þraut með eins fáum kubbum og
        mögulegt er.
      courseF_bee_functions2: "Til að auðvelda hlutina er kominn tími til að læra
        um föll (enska: functions).\n\nHéðan í frá munt þú nota nýjan _fallaritil_
        (enska: function editor). Þetta er sérstakur gluggi sem birtist þegar þú vilt
        búa til eða breyta falli. Kóði falls sést ekki á vinnusvæðinu en þú getur
        samt notað hann! \n\n* * *\n\nVið skulum æfa okkur með þetta fall sem safnar
        blómasafa en aðeins þegar býflugan er á blómi. Smelltu á bláa \"breyta\" hnappinn
        til að sjá kóðann innan í fallinu!\n\nNotaðu `sækja aðeins blómasafa` fallið
        til að safna blómasafanum úr hverju blómi."
      courseF_bee_functions3: Nú er komið að þér að búa til fall sem býr til hunang
        en **aðeins** í býkúpu! Smelltu á "breyta" til að smíða `aðeins búa til hunang`
        fallið. Notaðu það svo til að leysa þessa þraut.
      courseF_bee_functions3a: "Hvert ský gæti falið annað hvort blóm eða býkúpu!
        Skrifaðu fall sem sækir blómasafa ef býflugan er á blómi, en býr annars til
        hunang.\\\r\n\\\r\nNotaðu fallið þitt til að leysa þrautina!"
      courseF_bee_functions4: "Vissir þú að þú getur kallað á fall _innan úr_ öðru
        falli? \\\r\n\\\r\nNotaðu fallið þitt `athuga blómasafa eða hunang` innan
        í nýju `færa og athuga` falli til að hjálpa býflugunni að snúa, fara og sækja
        það sem er undir skýinu, fara svo til baka og snúa aftur í upphaflega átt!"
      courseF_bee_functions5a: Búðu nú til `færa og athuga` fall sem færir býfluguna
        að skýi þegar það er slóð til hægri. Notaðu fallið til að leysa þessa þraut!
      courseF_bee_functions6: |-
        _"Þetta tún hefur BÝ-sn af blómum!"_

        Búðu til eigið fall til að hjálpa býflugunni að rata með því að snúa til vinstri við blóm og hægri við býkúpur. Ekki gleyma að safna blómasafa og búa til hunang á leiðinni!
      courseF_bee_functions7: |-
        Smíðaðu fallið þitt úr síðustu þraut til að leysa þetta völundarhús.

        Snúðu til vinstri við býkúpu og til hægri við blóm.
        **Athugaðu:** Sum hornin eru ómerkt!
      courseF_bee_functions8a: "Undir þessu skýi gæti verið blóm með óþekkt magn blómasafa
        eða býkúpa sem þarf óþekkt magn af hunangi. \\\r\n\\\r\nGetur þú skrifað forrit
        sem getur höndlað hvort sem er?"
      courseF_bee_functionsPre7: "Prófaðu nú að búa til fall til að rata um þetta
        völundarhús. Hvernig er þetta öðruvísi en síðast?  \n\nSnúðu til vinstri við
        býkúpu og hægri við blómin.\\\n**Athugaðu:** Einhverjar beygjur hafa hvorugt!"
      courseF_bee_functions_challenge1: Búðu til nýtt fall til að vinna allan blómasafann
        og hunangið á meðan það er slóð framundan. Notaðu það til að ljúka þrautinni!
      courseF_bee_functions_challenge2: Notaðu allt sem þú hefur lært til að ljúka
        þessari þraut!
      courseF_bee_fwp1: |-
        Gáðu undir skýin hvort blómin hafi blómasafa.

        Í þessu borði mun hvert blóm hafa nákvæmlega **einn** skammt af blómasafa og hver býkúpa mun þurfa nákvæmlega **einn** skammt af hunangi.
      courseF_bee_fwp2: "Hér er kóði sem leysir síðustu þraut.  \\\r\nVið skulum setja
        hann í fall og kalla svo á fallið til að kanna blómasafa í þessu beði.  \\\r\n\n<hr/>\r\nÞað
        virkar kannske skrítið að gera þetta núna en mun fljótlega reynast mjög hjálplegt!"
      courseF_bee_fwp3: "Tími til að láta reyna á fallið!\n\\\r\n\\\r\nAthugum hvort
        það auðveldar að safna blómasafa í þessum þremur beðum."
      courseF_bee_fwp4: "_\"Hvernig er fallið þitt að reynast?\"_   \\\r\n\\\r\nVið
        þurfum að fínstilla það nánar hér. Smelltu á \"breyta\" til að bæta við  `length`
        stika í fallið svo þú getir notað það fyrir mismunandi löng beð."
      courseF_bee_fwp5: "_\"Þér gengur vel hingað til!\"_\\\r\n\\\r\nNotum þetta fall
        til að safna blómasafanum."
      courseF_bee_fwp6: "Þú getur stytt kóða svo færri línur afkasti meiru þegar þú
        notar föll með öðrum forritseiningum. \\\r\n\n<hr/>\r\nHvaða kubba getur þú
        notað með fallinu þínu til að smíða stutta og snyrtilega lausn á þessari þraut?"
      courseF_bee_fwp7: "**Áskorun:** Eitthvað virðist vera öðruvísi. Breyttu fallinu
        þínu til að búa líka til hunang."
      courseF_bee_fwp_challenge1: Notaðu eina `frá` lykkju í falli til að safna öllum
        maísnum. Sama `frá` lykkjan getur talið upp í mismunandi hámarkstölu með því
        að nota stikann `lengd`.
      courseF_bee_fwp_challenge2: |-
        _"Sjáum til hvort þú ræður við þetta síðasta próf! Gerðu eins vel og þú getur!"_

        Notaðu eina `frá` lykkju í falli til að safna öllu grænmetinu í röðinni. Láttu `frá` lykkjuna telja upp í mismunandi hámarkstölur með því að nota `lengd` breytu. Hafðu forritið eins stutt og mögulegt er með því að nota aðra `frá` lykkju utan við fallið.

        Gangi þér vel!
      courseF_bee_variables_3_2018: |-
        _"Þetta er snúinn garður!"_

        Í hverjum reit í þessari þraut þarf breytan að minnka um 1 frá reitnum á undan. Dragðu 1 frá breytunni í hverri umferð lykkjunnar ef þú vilt nota sama fallið til að leysa þennan áfanga.
      courseF_bee_variables_3_2019: |-
        _"Þetta er snúinn garður!"_

        Í hverjum reit í þessari þraut þarf breytan að minnka um 1 frá reitnum á undan. Dragðu 1 frá breytunni í hverri umferð lykkjunnar ef þú vilt nota sama fallið til að leysa þennan áfanga.
      courseF_bee_variables_4_2018: |-
        "BÝ-sna ótrúlegt!"

        Breyttu kóðanum svo hann virki fyrir þessa þraut.
      courseF_bee_variables_4_2019: |-
        "Höldum áfram!"

        Breyttu kóðanum svo að hann virki fyrir þessa þraut.
      courseF_playlab_variables1a: "Þú getur notað breytur til að geyma texta sem
        þú ætlar að nota síðar.  \n\nLáttu Kíkí, fótboltaspilarann, öskra \"Mark!\"
        með því að setja þann texta í `hróp` breytuna."
      courseF_playlab_variables2b: "Við getum gert yrðingar forrits áhugaverðari með
        því að blanda saman textabútum og breytum.\\\r\n\\\r\nSettu breytuna `litur`
        inn í miðja setningu með því að setja hana í auða reitinn í `tengja` kubbnum."
      courseF_playlab_variables3b_josh: 'Hjálpaðu Kiki að eiga samtal við Brian með
        því að nota breytuna `aldur` alls staðar þar sem aldurinn `12` ætti að vera. '
      courseF_playlab_variables4b: |-
        Nú er Pegleg sjóræningi með spurningar fyrir Brian.

        Þessi kóði notar `spyrja` kubb, svo að þú getur skrifað svör Brian eftir að þú smellir á "Keyra".

        Settu breyturnar á rétta staði til að búa til þetta samtal.
      courseF_playlab_variables5c: "Hér ætlum við að nota `spyrja` kubb með `ef/annars`yrðingu
        og hafa gaman af!\\\r\n\\\r\nPegleg sjóræningi ætlar að spyrja þig spurningar.
        \ Dragðu eintak af `svar` breytunni inn í skilyrðið fyrir `ef` yrðinguna til
        að athuga hvort þú hafir fært inn rétt litaheiti."
      courseF_playlab_variables6c: |-
        Afganginn af þessu stigi munum við nota til að búa til leik sem **þú** stjórnar og sem mun innhalda marga `spyrja` kubba og margar `ef/annars` yrðingar.

        Byrjaðu á að setja lykilorð sem þú getur munað í "codename" breytuna. Notaðu svo `spyrja` kubb til að fá lykilorð frá notendum. Þú þarft að nota `ef/annars` kubbinn til að athuga hvort lykilorð notandans er það sama og það sem þú settir í breytuna.
      courseF_playlab_variables7b: "Nú áttu að búa til eigið verkefni!  \n\nBúðu til
        nokkrar spurningar og fléttaðu inn svör í söguþræði sem þú býrð til.\n\nSmelltu
        á vísbendingatáknið ef þig vantar hugmyndir."
      courseF_playlab_variables7c: "Bættu við öðrum `spyrja` kubbi til að biðja notandann
        að giska á lit.  \n\nHafðu `ef/annars` yrðinguna þannig að þitt lykilorð vinni
        alltaf leikinn en öll önnur lykilorð tapi honum."
      courseF_playlab_variables8c: Notaðu `tengja` kubbinn til að gera skilaboðin
        um sigur/tap persónulegri með því að láta lykilorðið og litinn koma fram í
        skilaboðunum.
      courseF_playlab_variables_challenge1: Notaðu þessa kubba til að láta leikmennina
        segja bank-bank brandara. Breyttu uppstillingunni og textanum og segðu eigin
        brandara!
      courseF_playlab_variables_challenge2: "Nú skulum við leika \"klukk\"!  Klukkaðu
        Kött til að fá 2 stig. Eða Mörgæs til að fá 3 stig. Náðu 10 stigum til að
        vinna!\n\nEn farðu varlega. Ef Köttur og Mörgæs klukka hvort annað, dragast
        stig frá.\n\n* * *\n\nBættu við kubbunum sem þarf í leikinn til að hann virki
        eins og lýsingin segir. \n\n-   Hvernig færðu Hund til að færast í allar áttir
        með örvarlyklunum? \n-   Hvernig bætirðu við stigum þegar Hundur klukkar Kött
        eða Mörgæs? \n-   Hvernig dregurðu frá stig þegar Köttur og Mörgæs snertast?"
      coursea_maze_ramp1_2018: Komdu fuglinum til svínsins með því að festa <xml><block
        type="maze_moveEast"/></xml> kubb neðan á <xml><block type="when_run"/></xml>
        kubbinn, og ýttu svo á "▶ Keyra"!
      coursea_maze_ramp1_2019: Komdu fuglinum til svínsins með því að festa <xml><block
        type="maze_moveEast"/></xml> kubb neðan á <xml><block type="when_run"/></xml>
        kubbinn, og ýttu svo á "▶ Keyra"!
      csd U3 conditional statements video_2019: |-
        ## Spurning til að hugleiða

        -   Hvenær væri gagnlegt að nota "ef" yrðingu?
      csd u5 recommender sample: "# Sample App\n\nHere is an example of an app that
        uses data to help the user solve a problem.  With a partner, play through
        the app a few times to see how it works.\n\nDiscuss the following questions
        with your partner:\n\n-   What choice does the app help the user to make?
        \n-   What data does it use to make that recommendation?\n-   How do you think
        the creators of the app decided on the algorithm that they use to make the
        choice?"
      csd u5 recommender sample_2019: "# Sample App\n\nHere is an example of an app
        that uses data to help the user solve a problem.  With a partner, play through
        the app a few times to see how it works.\n\nDiscuss the following questions
        with your partner:\n\n-   What choice does the app help the user to make?
        \n-   What data does it use to make that recommendation?\n-   How do you think
        the creators of the app decided on the algorithm that they use to make the
        choice?"
      frozen circle: Hringur er sérstakt form. Geturðu fundið út hvaða tölu þarf að
        setja í stað spurningarmerkjanna til að teikna hring?
      frozen circle function: Notaðu nýja `gera hring` kubbinn til að búa til 10 hringa
        sem skarast. Ekki gleyma að hoppa áfram milli hringa.
      frozen circle function in circle: Gerum nú 20 hringi sem skarast og snúum um
        18 gráður á milli hringa.
      frozen circle function with parameter: Hér er kubburinn `gera hring` sem getur
        teiknað hringa í mismunandi stærðum. Getur þú notað hann til að teikna lítinn
        hring í stærð 5 og annan í stærð 10?
      frozen cross: Settu `endurtaka` kubb utan um þessar skipanir til að búa til
        plús merki. Tókstu eftir að Elsa getur færst bæði fram og aftur?
      frozen cross rotate: Prófaðu nú að endurtaka það 10 sinnum. Um hve margar gráður
        þarf að snúa á milli lína?
      frozen cross rotate dense: 'Endurtökum þetta 90 sinnum! Hve oft gengur 90 upp
        í 360? Vísbending: Það er mjög lítil tala.'
      frozen diamond: Notaðu endurtekningu utan um þessa kubba til að búa til samsíðung.
        Hann er alveg eins og rétthyrningur en hefur mismunandi horn. Þessi er með
        60 gráðu og 120 gráðu horn í stað þess að öll hornin séu 90 gráður.
      frozen diamond mini snowflake: Vissirðu að það eru engin tvö snjókorn eins?
        Búum til nýtt snjókorn með því að nota "endurtaka" kubbinn til að teikna samsíðung
        4 sinnum, með snúning um 90 gráður eftir hvern samsíðung.
      frozen diamond snowflake: Nú skulum við nota `endurtaka` kubbinn til að búa
        til öðruvísi snjókorn með því að endurtaka samsíðunginn 10 sinnum og snúa
        um 36 gráður eftir hvern.
      frozen freeplay: Þú ert hér með orðin meistari í ísteikningu! Búðu nú til ævintýralegt
        vetrarríki.
      frozen perpendicular: Prófum nú að búa til tvær línur sem hafa 90 gráðu horn
        á milli sín. Þú verður að nota bæði `færa` kubbinn og `snúa` kubbinn.
      frozen snowflake branch: Prófaðu að nota `búa til grein snjókorns` kubbinn til
        að búa til þrjár greinar, sem byrja að líkjast snjókorni.
      frozen snowflake full: Endurtökum þetta nú 8 sinnum til að búa til fallegt snjókorn!
      frozen snowflower: Flókin mynstur geta verið búin til úr mjög einföldum formum.
        Getur þú búið mynstur með því að endurtaka 5 hringi í stærð 5 og 5 hringi
        í stærð 10?
      frozen square iterative: Við virðumst vera komin hálfa leið með að gera ferning.
        Setjum nú 4 línur saman til að búa til ferning.
      frozen square loop: Hæ. Ég heiti Anna frá Arendelle! Ef við notum `endurtaka`
        kubbinn til að teikna ferning, getum við haft færri kubba. Hve oft (???) ætti
        `endurtaka` kubburinn að endurtaka innri kubbana svo til verði ferningur?
      frozen square loop 3x: Búum til þrjá ferninga með snúningi eftir hvern. Gættu
        þess að snúa um 120 gráður á milli ferninga.
      frozen square snowflake: Getur þú búið til snjókorn með því að láta `endurtaka`
        kubbinn búa til ferning 10 sinnum og láta `snúa` kubb snúa um 36 gráður á
        milli ferninga?
      grade2_collector_10: "Þetta er að verða búið! \n\nSafnaðu eins miklum fjársjóði
        og þú getur til að klára áfangann!"
      grade2_collector_10_2018: "Þetta er að verða búið! \n\nSafnaðu eins miklum fjársjóði
        og þú getur til að klára áfangann!"
      grade2_collector_10_2019: "Þetta er að verða búið! \n\nSafnaðu eins miklum fjársjóði
        og þú getur til að klára áfangann!"
      grade2_collector_A: Hjálpaðu Láru að safna öllum fjársjóðunum.
      grade2_collector_A_2018: Hjálpaðu Láru að safna öllum fjársjóðunum.
      grade2_collector_A_2019: Hjálpaðu Láru að safna öllum fjársjóðunum.
      grade5_artist_variables_triangles1: "Við skulum teikna jafnhliða þríhyrning.
        \n\nHver hlið verður að vera nákvæmlega 50 dílar."
      grade5_artist_variables_triangles1_2018: "Við skulum teikna jafnhliða þríhyrning.
        \n\nHver hlið verður að vera nákvæmlega 50 dílar."
      grade5_artist_variables_triangles1_2019: "Við skulum teikna jafnhliða þríhyrning.
        \n\nHver hlið verður að vera nákvæmlega 50 dílar."
      grade5_pixelation: "# Make your own image of any size\n\n![](https://images.code.org/01c15fed4f1a2c6c3af531edc35e736e-image-1439596066108.png)\n![](https://images.code.org/24efcaa184d1fc852f37c32911b3b87c-image-1439596070178.png)\n![](https://images.code.org/c9a5d0fd5ba445b7f6b5744e08b50e49-image-1439596071878.png)\n![](https://images.code.org/f14e1b8dd722b0ca5bc54fa96b34f2eb-image-1439596074236.png)\n![](https://images.code.org/fe938c0c16453b9d461b4023098079df-image-1439596075744.png)\n![](https://images.code.org/02c88a7da51289b2f2d1f64bd8c97b28-image-1439596077514.png)\n![](https://images.code.org/309e3157dcfd91956181007f483f8e58-image-1439596079084.png)\n\n**Directions:**\n\n-
        \  Encode an image of anything you like using `binary`.\n-   The binary language
        will be represented with `0` and `1` only.\n-   You might want to do some
        planning and sketching with graph paper first. \n-   Depict something, perhaps
        your name written out, your initials, an icon or logo of some sort.\n-   Get
        creative! The image doesn't have to be a perfect square, it can be long and
        skinny."
      iceage_click_hello: "Getur þú hjálpað Sid að kalla á vini sína þegar þú smellir
        á hann? \nSmelltu svo á \"Keyra\" til að spila. Smelltu á Sid til að sjá kóðann
        þinn virka!"
      iceage_free_play: "Nú er kominn tími til að þú búir til leik eða sögu eins og
        þú vilt!  \n\nSmelltu svo á \"Ljúka\" til að leyfa vinum að prófa leikinn
        í símum, spjaldtölvum eða tölvum!\nDettur þér ekkert í hug? Smelltu þá á vísbendingar."
      iceage_hello1: |-
        Sid (leikmaður 1) vill fá alla með í nýtt ævintýri. Getur þú hjálpað honum að segja "Hæ!" með því að draga fram kubbinn `segir` og festa hann við `þegar keyrt` atvikið?

        Ekki gleyma að skrifa "Hæ!" í kubbinn!
      iceage_hello2: Manny (leikmaður 2) fann Sid (leikmann 1) og vill bjóða honum
        með í ævintýri. Hjálpaðu þeim að heilsast með því að nota `leikmaður ___ segir`
        kubbinn tvisvar.
      iceage_move_events: "Scrat er enn að leita að akörnum! \nHjálpaðu honum að skondrast
        um með því að tengja `færa leikmann 1` kubbinn við hvert atvik svo að hægt
        sé að stjórna stefnunni með örvarlyklunum. \nSmelltu svo á \"Keyra\" og reyndu
        að safna öllum akörnunum."
      iceage_move_to_actor: Diego (leikmaður 1) er að leita að Manny (leikmanni 2).
        Getur þú hjálpað þeim að ná saman? Tengdu kubb við `þegar leikmaður snertir`
        atvikið svo að það heyrist hljóð þegar þeir ná saman.
      iceage_move_to_flag: Skrat er að leita að akarninu (nema hvað)! Hjálpaðu honum
        síðustu 200 dílana.
      iceage_repeat: Kubburinn `endurtaka endalaust` getur keyrt kóða stanslaust.
        Getur þú sett aðra kubba í hann til að hjálpa Granny að hreyfa sig endurtekið
        til vinstri og hægri?
      iceage_sound_and_points: "Hér er kóðinn frá síðustu þraut ásamt kóða til að
        færa Granny til vinstri og hægri. \nGetur þú klárað forritið þannig að það
        bæði **spili hljóð** og **skori stig** þear Sid og Granny rekast á? \nÝttu
        á \"Keyra\" til að spila leikinn."
      iceage_throw_hearts: "Sid vill láta ömmu sína, Granny, vita að honum þyki vænt
        um hana. \n\nNotaðu `leikari varpar` skipunina til láta Sid (leikara 1) varpa
        hjörtum að Granny (leikara 2)! \nBreyttu skapi Granny í gleði þegar hjörtun
        lenda á henni."
      iceage_warn_ice_age: "Allir þurfa að hreyfa sig hraðar því froststormur er að
        skella á! \nLáttu bakgrunninn sýna ísumhverfi og stilltu Sid (leikmann 1)
        á mesta hraða.\nÝttu svo á \"Keyra\" og færðu Sid til Diego til að vara hann
        við."
      mike3bit: "# 3-Bit Color\n\n**Directions:**\n\n-   We start you with the 4x2
        image Maddie was creating, but we've left out the last few pixels. \n-   Finish
        off the image by figuring out which colors are missing and encoding them."
      mike3bitbird: "# 3-Bit Color\n\nHere's an example of an image made with 3-bit
        color. Try changing it to understand how it works. \n\n_If you want to reset
        the image, press \"Start Over\"._"
      mike3bitfreeplay: |-
        # 3-Bit Color

        You have one last chance to experiment and get creative with the pixelation widget. Make something awesome and share it with your classmates!

        -   _Hint:_ You can copy and paste the value of a pixel to use it repeatedly.
      mike3bitmario: "# 3-Bit Color\n\n**Challenge:** \n\nA careless binary coder
        typed in ONE extra 0 or 1 somewhere within this image's data. The extra bit
        that is causing Mario to glitch out! \n\nDelete the extra bit to restore Mario
        back to normal!\n\n![](<https://images.code.org/8b7c17ba204a1a4d33e1bd6de7f01d76-image-1477306657312.54.57
        AM.png>)"
      ramp_artist_loops1: "En hvað dagurinn er fallegur!  \n\nHjálpaðu Listamanninum
        að breiða yfir blómin fyrir veturinn með því að fara áfram um 60 díla."
      ramp_artist_loops1_2018: "En hvað dagurinn er fallegur!  \n\nHjálpaðu Listamanninum
        að breiða yfir blómin fyrir veturinn með því að fara áfram um 60 díla."
      ramp_artist_loops1_2019: "En hvað dagurinn er fallegur!  \n\nHjálpaðu Listamanninum
        að breiða yfir blómin fyrir veturinn með því að fara áfram um 60 díla."
      ramp_artist_loops2: Gerðu þetta fallegra með því að endurtaka þetta fimm sinnum
        og nota mismunandi liti.
      ramp_artist_loops2_2018: Gerðu þetta fallegra með því að endurtaka þetta fimm
        sinnum og nota mismunandi liti.
      ramp_artist_loops2_2019: Gerðu þetta fallegra með því að endurtaka þetta fimm
        sinnum og nota mismunandi liti.
      ramp_artist_loops3: Teiknaðu þessa litríku línu aftur 5 sinnum, en notaðu nú
        `endurtaka` lykkju.
      ramp_artist_loops3_2018: Teiknaðu þessa litríku línu aftur 5 sinnum, en notaðu
        nú `endurtaka` lykkju.
      ramp_artist_loops3_2019: Teiknaðu þessa litríku línu aftur 5 sinnum, en notaðu
        nú `endurtaka` lykkju.
      ramp_artist_loops4: Hvað gerist þegar þú bætir við 72 gráðu hægri snúningi sem
        síðasta kubbi í lykkjunni?
      ramp_artist_loops4_2018: Hvað gerist þegar þú bætir við 72 gráðu hægri snúningi
        sem síðasta kubbi í lykkjunni?
      ramp_artist_loops4_2019: Hvað gerist þegar þú bætir við 72 gráðu hægri snúningi
        sem síðasta kubbi í lykkjunni?
      ramp_artist_loops5: |-
        Með lykkjum verður auðveldara að skrifa kóða!

        Notaðu lykkju til að teikna þessar tröppur.

        -   Hvert þrep er 50 dílar á breidd og 50 dílar á hæð
        -   Þú þarft að snúa 90 gráður í hvora átt
      ramp_artist_loops5_2018: |-
        Með lykkjum verður auðveldara að skrifa kóða!

        Notaðu lykkju til að teikna þessar tröppur.

        -   Hvert þrep er 50 dílar á breidd og 50 dílar á hæð
        -   Þú þarft að snúa 90 gráður í hvora átt
      ramp_artist_loops5_2019: |-
        Með lykkjum verður auðveldara að skrifa kóða!

        Notaðu lykkju til að teikna þessar tröppur.

        -   Hvert þrep er 50 dílar á breidd og 50 dílar á hæð
        -   Þú þarft að snúa 90 gráður í hvora átt
      ramp_artist_loops6: |-
        Þessar tröppur eru miklu lengri, en samt þarf ekki meiri kóða en í síðustu þraut!

        Lagaðu þessa lykkju til að ljúka við þrautina.
      ramp_artist_loops6_2018: |-
        Þessar tröppur eru miklu lengri, en samt þarf ekki meiri kóða en í síðustu þraut!

        Lagaðu þessa lykkju til að ljúka við þrautina.
      ramp_artist_loops6_2019: |-
        Þessar tröppur eru miklu lengri, en samt þarf ekki meiri kóða en í síðustu þraut!

        Lagaðu þessa lykkju til að ljúka við þrautina.
      ramp_artist_loops7: Leitaðu að endurtekningu og styttu þennan kóða með því að
        nota lykkjur!
      ramp_artist_loops7_2018: Leitaðu að endurtekningu og styttu þennan kóða með
        því að nota lykkjur!
      ramp_artist_loops7_2019: Leitaðu að endurtekningu og styttu þennan kóða með
        því að nota lykkjur!
      ramp_artist_loops8: "**Áskorun:** Komdu auga á endurtekinn kóða og styttu forritið
        með því að nota lykkju."
      ramp_artist_loops8_2018: "**Áskorun:** Komdu auga á endurtekinn kóða og styttu
        forritið með því að nota lykkju."
      ramp_artist_loops8_2019: "**Áskorun:** Komdu auga á endurtekinn kóða og styttu
        forritið með því að nota lykkju."
      ramp_artist_loops9: Leystu þessa þraut með því að teikna ferning með 200 díla
        hliðum.
      ramp_artist_loops9_2018: Leystu þessa þraut með því að teikna ferning með 200
        díla hliðum.
      ramp_artist_loops9_2019: Leystu þessa þraut með því að teikna ferning með 200
        díla hliðum.
      simconfig: |-
        # Breytingar og spádómar

        Veldu eina breytuna sem stjórnar þessum hermi til að breyta og spáðu fyrir um hvernig útkoman muni breytast við það.

        Skrifaðu niður spá þína og keyrðu herminn svo 5 sinnum og skrifaðu útkomurnar. Spáðir þú rétt?
      simstarter: |-
        # Söfnun gagna

        Keyrðu þennan hermi 5 sinnum. Skráðu í hvert sinn þessar upplýsingar sem söfnuðust:

        -   Hve mörgum eplum safnaði fíllinn?
        -   Hve mörgum eplum safnaði flóðhesturinn?
        -   Hve langan tíma tók að safna öllum eplunum?
